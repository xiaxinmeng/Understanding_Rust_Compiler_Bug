{"sha": "2e9eba7f380f5fd99df92deaa03e00faa519b1a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlOWViYTdmMzgwZjVmZDk5ZGY5MmRlYWEwM2UwMGZhYTUxOWIxYTQ=", "commit": {"author": {"name": "Aleksi Juvani", "email": "aleksi@aleksijuvani.com", "date": "2019-09-10T06:53:59Z"}, "committer": {"name": "Aleksi Juvani", "email": "aleksi@aleksijuvani.com", "date": "2019-09-10T13:41:56Z"}, "message": "Set environment variables for linker instead of sysroot", "tree": {"sha": "0e5170e9b09ee594b8db572b37b35f0ba0a360c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e5170e9b09ee594b8db572b37b35f0ba0a360c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e9eba7f380f5fd99df92deaa03e00faa519b1a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e9eba7f380f5fd99df92deaa03e00faa519b1a4", "html_url": "https://github.com/rust-lang/rust/commit/2e9eba7f380f5fd99df92deaa03e00faa519b1a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e9eba7f380f5fd99df92deaa03e00faa519b1a4/comments", "author": {"login": "aleksijuvani", "id": 87529683, "node_id": "MDQ6VXNlcjg3NTI5Njgz", "avatar_url": "https://avatars.githubusercontent.com/u/87529683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleksijuvani", "html_url": "https://github.com/aleksijuvani", "followers_url": "https://api.github.com/users/aleksijuvani/followers", "following_url": "https://api.github.com/users/aleksijuvani/following{/other_user}", "gists_url": "https://api.github.com/users/aleksijuvani/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleksijuvani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleksijuvani/subscriptions", "organizations_url": "https://api.github.com/users/aleksijuvani/orgs", "repos_url": "https://api.github.com/users/aleksijuvani/repos", "events_url": "https://api.github.com/users/aleksijuvani/events{/privacy}", "received_events_url": "https://api.github.com/users/aleksijuvani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aleksijuvani", "id": 87529683, "node_id": "MDQ6VXNlcjg3NTI5Njgz", "avatar_url": "https://avatars.githubusercontent.com/u/87529683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aleksijuvani", "html_url": "https://github.com/aleksijuvani", "followers_url": "https://api.github.com/users/aleksijuvani/followers", "following_url": "https://api.github.com/users/aleksijuvani/following{/other_user}", "gists_url": "https://api.github.com/users/aleksijuvani/gists{/gist_id}", "starred_url": "https://api.github.com/users/aleksijuvani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aleksijuvani/subscriptions", "organizations_url": "https://api.github.com/users/aleksijuvani/orgs", "repos_url": "https://api.github.com/users/aleksijuvani/repos", "events_url": "https://api.github.com/users/aleksijuvani/events{/privacy}", "received_events_url": "https://api.github.com/users/aleksijuvani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "995d9857bdae6da200703e3aefbc39f5eded299b", "url": "https://api.github.com/repos/rust-lang/rust/commits/995d9857bdae6da200703e3aefbc39f5eded299b", "html_url": "https://github.com/rust-lang/rust/commit/995d9857bdae6da200703e3aefbc39f5eded299b"}], "stats": {"total": 145, "additions": 64, "deletions": 81}, "files": [{"sha": "e2632fc14148fcff486868292398c034929f9b93", "filename": "src/librustc_target/spec/apple_base.rs", "status": "modified", "additions": 13, "deletions": 57, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/2e9eba7f380f5fd99df92deaa03e00faa519b1a4/src%2Flibrustc_target%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e9eba7f380f5fd99df92deaa03e00faa519b1a4/src%2Flibrustc_target%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fapple_base.rs?ref=2e9eba7f380f5fd99df92deaa03e00faa519b1a4", "patch": "@@ -1,4 +1,4 @@\n-use std::{env, path::Path};\n+use std::env;\n \n use crate::spec::{LinkArgs, TargetOptions};\n \n@@ -52,62 +52,18 @@ pub fn macos_llvm_target(arch: &str) -> String {\n     format!(\"{}-apple-macosx{}.{}.0\", arch, major, minor)\n }\n \n-#[cfg(target_os = \"macos\")]\n-pub fn sysroot(sdk: &str) -> Result<Option<String>, String> {\n-    // Like Clang, allow the `SDKROOT` environment variable used by Xcode to define the sysroot.\n-    if let Some(sdk_root) = env::var(\"SDKROOT\").ok() {\n-        let actual_sdk_path = sdk_path(sdk)?;\n-        let sdk_root_p = Path::new(&sdk_root);\n-        // Ignore `SDKROOT` if it's not a valid path.\n-        if !sdk_root_p.is_absolute() || sdk_root_p == Path::new(\"/\") || !sdk_root_p.exists() {\n-            return Ok(Some(actual_sdk_path));\n+pub fn macos_link_env() -> Vec<(String, String)> {\n+    let mut env = Vec::with_capacity(2);\n+    // Ignore the `SDKROOT` environment variable if it's clearly set for the wrong platform, which\n+    // may occur when we're linking a custom build script while targeting iOS for example.\n+    if let Some(sdkroot) = env::var(\"SDKROOT\").ok() {\n+        if sdkroot.contains(\"iPhoneOS.platform\") || sdkroot.contains(\"iPhoneSimulator.platform\") {\n+            env.push((\"SDKROOT\".to_string(), String::new()))\n         }\n-        // Ignore `SDKROOT` if it's clearly set for the wrong platform, which may occur when we're\n-        // compiling a custom build script while targeting iOS for example.\n-        return Ok(Some(match sdk {\n-            \"iphoneos\" if sdk_root.contains(\"iPhoneSimulator.platform\")\n-                || sdk_root.contains(\"MacOSX.platform\") => actual_sdk_path,\n-            \"iphonesimulator\" if sdk_root.contains(\"iPhoneOS.platform\")\n-                || sdk_root.contains(\"MacOSX.platform\") => actual_sdk_path,\n-            \"macosx\" | \"macosx10.15\" if sdk_root.contains(\"iPhoneOS.platform\")\n-                || sdk_root.contains(\"iPhoneSimulator.platform\") => actual_sdk_path,\n-            _ => sdk_root,\n-        }))\n-    }\n-    Ok(None)\n-}\n-\n-// `xcrun` is only available on macOS.\n-#[cfg(not(target_os = \"macos\"))]\n-pub fn sysroot(_sdk: &str) -> Result<Option<String>, String> {\n-    if let Some(sdk_root) = env::var(\"SDKROOT\").ok() {\n-        let sdk_root_p = Path::new(&sdk_root);\n-        // Use `SDKROOT` only if it's a valid path.\n-        if sdk_root_p.is_absolute() && sdk_root_p != Path::new(\"/\") && sdk_root_p.exists() {\n-            return Ok(Some(sdk_root));\n-        }\n-    }\n-    Ok(None)\n-}\n-\n-#[cfg(target_os = \"macos\")]\n-fn sdk_path(sdk_name: &str) -> Result<String, String> {\n-    let res = std::process::Command::new(\"xcrun\")\n-        .arg(\"--show-sdk-path\")\n-        .arg(\"-sdk\")\n-        .arg(sdk_name)\n-        .output()\n-        .and_then(|output| {\n-            if output.status.success() {\n-                Ok(String::from_utf8(output.stdout).unwrap())\n-            } else {\n-                let error = String::from_utf8(output.stderr);\n-                let error = format!(\"process exit with error: {}\", error.unwrap());\n-                Err(std::io::Error::new(std::io::ErrorKind::Other, &error[..]))\n-            }\n-        });\n-    match res {\n-        Ok(output) => Ok(output.trim().to_string()),\n-        Err(e) => Err(format!(\"failed to get {} SDK path: {}\", sdk_name, e)),\n     }\n+    // Additionally, `IPHONEOS_DEPLOYMENT_TARGET` must not be set when using the Xcode linker at\n+    // \"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld\",\n+    // although this is apparently ignored when using the linker at \"/usr/bin/ld\".\n+    env.push((\"IPHONEOS_DEPLOYMENT_TARGET\".to_string(), String::new()));\n+    env\n }"}, {"sha": "6d3900c0b203f372fe64112322a29d73d7cca658", "filename": "src/librustc_target/spec/apple_ios_base.rs", "status": "modified", "additions": 49, "deletions": 12, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/2e9eba7f380f5fd99df92deaa03e00faa519b1a4/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e9eba7f380f5fd99df92deaa03e00faa519b1a4/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs?ref=2e9eba7f380f5fd99df92deaa03e00faa519b1a4", "patch": "@@ -1,3 +1,7 @@\n+use std::env;\n+use std::io;\n+use std::path::Path;\n+use std::process::Command;\n use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n \n use Arch::*;\n@@ -26,6 +30,42 @@ impl Arch {\n     }\n }\n \n+pub fn get_sdk_root(sdk_name: &str) -> Result<String, String> {\n+    // Following what clang does\n+    // (https://github.com/llvm/llvm-project/blob/\n+    // 296a80102a9b72c3eda80558fb78a3ed8849b341/clang/lib/Driver/ToolChains/Darwin.cpp#L1661-L1678)\n+    // to allow the SDK path to be set. (For clang, xcrun sets\n+    // SDKROOT; for rustc, the user or build system can set it, or we\n+    // can fall back to checking for xcrun on PATH.)\n+    if let Some(sdkroot) = env::var(\"SDKROOT\").ok() {\n+        let sdkroot_path = Path::new(&sdkroot);\n+        if sdkroot_path.is_absolute() && sdkroot_path != Path::new(\"/\") && sdkroot_path.exists() {\n+            return Ok(sdkroot);\n+        }\n+    }\n+    let res = Command::new(\"xcrun\")\n+                      .arg(\"--show-sdk-path\")\n+                      .arg(\"-sdk\")\n+                      .arg(sdk_name)\n+                      .output()\n+                      .and_then(|output| {\n+                          if output.status.success() {\n+                              Ok(String::from_utf8(output.stdout).unwrap())\n+                          } else {\n+                              let error = String::from_utf8(output.stderr);\n+                              let error = format!(\"process exit with error: {}\",\n+                                                  error.unwrap());\n+                              Err(io::Error::new(io::ErrorKind::Other,\n+                                                 &error[..]))\n+                          }\n+                      });\n+\n+    match res {\n+        Ok(output) => Ok(output.trim().to_string()),\n+        Err(e) => Err(format!(\"failed to get {} SDK path: {}\", sdk_name, e))\n+    }\n+}\n+\n fn build_pre_link_args(arch: Arch) -> Result<LinkArgs, String> {\n     let sdk_name = match arch {\n         Armv7 | Armv7s | Arm64 => \"iphoneos\",\n@@ -35,19 +75,16 @@ fn build_pre_link_args(arch: Arch) -> Result<LinkArgs, String> {\n \n     let arch_name = arch.to_string();\n \n+    let sdk_root = get_sdk_root(sdk_name)?;\n+\n     let mut args = LinkArgs::new();\n-    args.insert(LinkerFlavor::Gcc, vec![\"-arch\".to_string(), arch_name.to_string()]);\n-    if let Some(sdk_root) = super::apple_base::sysroot(sdk_name)? {\n-        args.insert(\n-            LinkerFlavor::Gcc,\n-            vec![\n-                \"-isysroot\".to_string(),\n-                sdk_root.clone(),\n-                \"-Wl,-syslibroot\".to_string(),\n-                sdk_root\n-            ],\n-        );\n-    }\n+    args.insert(LinkerFlavor::Gcc,\n+                vec![\"-arch\".to_string(),\n+                     arch_name.to_string(),\n+                     \"-isysroot\".to_string(),\n+                     sdk_root.clone(),\n+                     \"-Wl,-syslibroot\".to_string(),\n+                     sdk_root]);\n \n     Ok(args)\n }"}, {"sha": "ba44cdccb7c481d3b6bbc77ef99b7ae2631000f6", "filename": "src/librustc_target/spec/i686_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2e9eba7f380f5fd99df92deaa03e00faa519b1a4/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e9eba7f380f5fd99df92deaa03e00faa519b1a4/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs?ref=2e9eba7f380f5fd99df92deaa03e00faa519b1a4", "patch": "@@ -5,12 +5,7 @@ pub fn target() -> TargetResult {\n     base.cpu = \"yonah\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m32\".to_string()]);\n-    if let Some(sysroot) = super::apple_base::sysroot(\"macosx\")? {\n-        base.pre_link_args.insert(\n-            LinkerFlavor::Gcc,\n-            vec![\"-isysroot\".to_string(), sysroot.clone(), \"-Wl,-syslibroot\".to_string(), sysroot],\n-        );\n-    }\n+    base.link_env.extend(super::apple_base::macos_link_env());\n     base.stack_probes = true;\n     base.eliminate_frame_pointer = false;\n "}, {"sha": "442c2650bbba168921a07b7753f568a6f639939c", "filename": "src/librustc_target/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2e9eba7f380f5fd99df92deaa03e00faa519b1a4/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e9eba7f380f5fd99df92deaa03e00faa519b1a4/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs?ref=2e9eba7f380f5fd99df92deaa03e00faa519b1a4", "patch": "@@ -6,12 +6,7 @@ pub fn target() -> TargetResult {\n     base.max_atomic_width = Some(128); // core2 support cmpxchg16b\n     base.eliminate_frame_pointer = false;\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n-    if let Some(sysroot) = super::apple_base::sysroot(\"macosx\")? {\n-        base.pre_link_args.insert(\n-            LinkerFlavor::Gcc,\n-            vec![\"-isysroot\".to_string(), sysroot.clone(), \"-Wl,-syslibroot\".to_string(), sysroot],\n-        );\n-    }\n+    base.link_env.extend(super::apple_base::macos_link_env());\n     base.stack_probes = true;\n \n     // Clang automatically chooses a more specific target based on"}]}