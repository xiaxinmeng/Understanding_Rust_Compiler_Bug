{"sha": "9fa46ff5c67bd1809cc748f6fc0e93d7c9be3fdb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmYTQ2ZmY1YzY3YmQxODA5Y2M3NDhmNmZjMGU5M2Q3YzliZTNmZGI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-27T13:25:01Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-27T13:25:01Z"}, "message": "Use Id for variats", "tree": {"sha": "8a6e1440ae2efc86a53aa77f65bdfad6cff00b0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a6e1440ae2efc86a53aa77f65bdfad6cff00b0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fa46ff5c67bd1809cc748f6fc0e93d7c9be3fdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fa46ff5c67bd1809cc748f6fc0e93d7c9be3fdb", "html_url": "https://github.com/rust-lang/rust/commit/9fa46ff5c67bd1809cc748f6fc0e93d7c9be3fdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fa46ff5c67bd1809cc748f6fc0e93d7c9be3fdb/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17680f6060be1abe8f021538aeff0a95e9c569da", "url": "https://api.github.com/repos/rust-lang/rust/commits/17680f6060be1abe8f021538aeff0a95e9c569da", "html_url": "https://github.com/rust-lang/rust/commit/17680f6060be1abe8f021538aeff0a95e9c569da"}], "stats": {"total": 112, "additions": 60, "deletions": 52}, "files": [{"sha": "52ad4e5d16ac4e1a8723c3606fcfee6966f830de", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9fa46ff5c67bd1809cc748f6fc0e93d7c9be3fdb/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa46ff5c67bd1809cc748f6fc0e93d7c9be3fdb/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=9fa46ff5c67bd1809cc748f6fc0e93d7c9be3fdb", "patch": "@@ -534,14 +534,6 @@ impl VariantDef {\n         }\n     }\n \n-    pub(crate) fn field(self, db: &impl HirDatabase, name: &Name) -> Option<StructField> {\n-        match self {\n-            VariantDef::Struct(it) => it.field(db, name),\n-            VariantDef::Union(it) => it.field(db, name),\n-            VariantDef::EnumVariant(it) => it.field(db, name),\n-        }\n-    }\n-\n     pub fn module(self, db: &impl HirDatabase) -> Module {\n         match self {\n             VariantDef::Struct(it) => it.module(db),"}, {"sha": "05f5bca57595f2babaa278ddbbd21de5af388dea", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fa46ff5c67bd1809cc748f6fc0e93d7c9be3fdb/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa46ff5c67bd1809cc748f6fc0e93d7c9be3fdb/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=9fa46ff5c67bd1809cc748f6fc0e93d7c9be3fdb", "patch": "@@ -229,12 +229,12 @@ impl SourceAnalyzer {\n \n     pub fn resolve_record_literal(&self, record_lit: &ast::RecordLit) -> Option<crate::VariantDef> {\n         let expr_id = self.expr_id(&record_lit.clone().into())?;\n-        self.infer.as_ref()?.variant_resolution_for_expr(expr_id)\n+        self.infer.as_ref()?.variant_resolution_for_expr(expr_id).map(|it| it.into())\n     }\n \n     pub fn resolve_record_pattern(&self, record_pat: &ast::RecordPat) -> Option<crate::VariantDef> {\n         let pat_id = self.pat_id(&record_pat.clone().into())?;\n-        self.infer.as_ref()?.variant_resolution_for_pat(pat_id)\n+        self.infer.as_ref()?.variant_resolution_for_pat(pat_id).map(|it| it.into())\n     }\n \n     pub fn resolve_macro_call("}, {"sha": "59e4e5f36b30bd76e71a8653b78d246c57b1dc42", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9fa46ff5c67bd1809cc748f6fc0e93d7c9be3fdb/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa46ff5c67bd1809cc748f6fc0e93d7c9be3fdb/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=9fa46ff5c67bd1809cc748f6fc0e93d7c9be3fdb", "patch": "@@ -28,7 +28,7 @@ use hir_def::{\n     path::{known, Path},\n     resolver::{HasResolver, Resolver, TypeNs},\n     type_ref::{Mutability, TypeRef},\n-    AdtId, AssocItemId, DefWithBodyId, FunctionId, StructFieldId, TypeAliasId,\n+    AdtId, AssocItemId, DefWithBodyId, FunctionId, StructFieldId, TypeAliasId, VariantId,\n };\n use hir_expand::{diagnostics::DiagnosticSink, name};\n use ra_arena::map::ArenaMap;\n@@ -41,7 +41,7 @@ use super::{\n     ApplicationTy, InEnvironment, ProjectionTy, Substs, TraitEnvironment, TraitRef, Ty, TypeCtor,\n     TypeWalk, Uncertain,\n };\n-use crate::{db::HirDatabase, ty::infer::diagnostics::InferenceDiagnostic, VariantDef};\n+use crate::{db::HirDatabase, ty::infer::diagnostics::InferenceDiagnostic};\n \n macro_rules! ty_app {\n     ($ctor:pat, $param:pat) => {\n@@ -124,7 +124,7 @@ pub struct InferenceResult {\n     /// For each field in record literal, records the field it resolves to.\n     record_field_resolutions: FxHashMap<ExprId, StructFieldId>,\n     /// For each struct literal, records the variant it resolves to.\n-    variant_resolutions: FxHashMap<ExprOrPatId, VariantDef>,\n+    variant_resolutions: FxHashMap<ExprOrPatId, VariantId>,\n     /// For each associated item record what it resolves to\n     assoc_resolutions: FxHashMap<ExprOrPatId, AssocItemId>,\n     diagnostics: Vec<InferenceDiagnostic>,\n@@ -143,10 +143,10 @@ impl InferenceResult {\n     pub fn record_field_resolution(&self, expr: ExprId) -> Option<StructFieldId> {\n         self.record_field_resolutions.get(&expr).copied()\n     }\n-    pub fn variant_resolution_for_expr(&self, id: ExprId) -> Option<VariantDef> {\n+    pub fn variant_resolution_for_expr(&self, id: ExprId) -> Option<VariantId> {\n         self.variant_resolutions.get(&id.into()).copied()\n     }\n-    pub fn variant_resolution_for_pat(&self, id: PatId) -> Option<VariantDef> {\n+    pub fn variant_resolution_for_pat(&self, id: PatId) -> Option<VariantId> {\n         self.variant_resolutions.get(&id.into()).copied()\n     }\n     pub fn assoc_resolutions_for_expr(&self, id: ExprId) -> Option<AssocItemId> {\n@@ -248,7 +248,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         self.result.field_resolutions.insert(expr, field);\n     }\n \n-    fn write_variant_resolution(&mut self, id: ExprOrPatId, variant: VariantDef) {\n+    fn write_variant_resolution(&mut self, id: ExprOrPatId, variant: VariantId) {\n         self.result.variant_resolutions.insert(id, variant);\n     }\n \n@@ -511,7 +511,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         })\n     }\n \n-    fn resolve_variant(&mut self, path: Option<&Path>) -> (Ty, Option<VariantDef>) {\n+    fn resolve_variant(&mut self, path: Option<&Path>) -> (Ty, Option<VariantId>) {\n         let path = match path {\n             Some(path) => path,\n             None => return (Ty::Unknown, None),\n@@ -524,13 +524,13 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let substs = Ty::substs_from_path(self.db, resolver, path, strukt.into());\n                 let ty = self.db.ty(strukt.into());\n                 let ty = self.insert_type_vars(ty.apply_substs(substs));\n-                (ty, Some(VariantDef::Struct(strukt.into())))\n+                (ty, Some(strukt.into()))\n             }\n             Some(TypeNs::EnumVariantId(var)) => {\n                 let substs = Ty::substs_from_path(self.db, resolver, path, var.into());\n                 let ty = self.db.ty(var.parent.into());\n                 let ty = self.insert_type_vars(ty.apply_substs(substs));\n-                (ty, Some(VariantDef::EnumVariant(var.into())))\n+                (ty, Some(var.into()))\n             }\n             Some(_) | None => (Ty::Unknown, None),\n         }"}, {"sha": "f9ededa23547def4684ef72ecd920708463eb496", "filename": "crates/ra_hir/src/ty/infer/expr.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9fa46ff5c67bd1809cc748f6fc0e93d7c9be3fdb/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa46ff5c67bd1809cc748f6fc0e93d7c9be3fdb/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs?ref=9fa46ff5c67bd1809cc748f6fc0e93d7c9be3fdb", "patch": "@@ -16,9 +16,9 @@ use hir_expand::name::{self, Name};\n use crate::{\n     db::HirDatabase,\n     ty::{\n-        autoderef, method_resolution, op, traits::InEnvironment, CallableDef, InferTy, IntTy,\n-        Mutability, Obligation, ProjectionPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor,\n-        TypeWalk, Uncertain,\n+        autoderef, method_resolution, op, traits::InEnvironment, utils::variant_data, CallableDef,\n+        InferTy, IntTy, Mutability, Obligation, ProjectionPredicate, ProjectionTy, Substs,\n+        TraitRef, Ty, TypeCtor, TypeWalk, Uncertain,\n     },\n };\n \n@@ -218,22 +218,26 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let substs = ty.substs().unwrap_or_else(Substs::empty);\n                 let field_types =\n                     def_id.map(|it| self.db.field_types(it.into())).unwrap_or_default();\n+                let variant_data = def_id.map(|it| variant_data(self.db, it));\n                 for (field_idx, field) in fields.iter().enumerate() {\n-                    let field_def = def_id.and_then(|it| match it.field(self.db, &field.name) {\n-                        Some(field) => Some(field),\n-                        None => {\n-                            self.push_diagnostic(InferenceDiagnostic::NoSuchField {\n-                                expr: tgt_expr,\n-                                field: field_idx,\n-                            });\n-                            None\n-                        }\n-                    });\n+                    let field_def =\n+                        variant_data.as_ref().and_then(|it| match it.field(&field.name) {\n+                            Some(local_id) => {\n+                                Some(StructFieldId { parent: def_id.unwrap(), local_id })\n+                            }\n+                            None => {\n+                                self.push_diagnostic(InferenceDiagnostic::NoSuchField {\n+                                    expr: tgt_expr,\n+                                    field: field_idx,\n+                                });\n+                                None\n+                            }\n+                        });\n                     if let Some(field_def) = field_def {\n-                        self.result.record_field_resolutions.insert(field.expr, field_def.into());\n+                        self.result.record_field_resolutions.insert(field.expr, field_def);\n                     }\n                     let field_ty = field_def\n-                        .map_or(Ty::Unknown, |it| field_types[it.id].clone())\n+                        .map_or(Ty::Unknown, |it| field_types[it.local_id].clone())\n                         .subst(&substs);\n                     self.infer_expr_coerce(field.expr, &Expectation::has_type(field_ty));\n                 }"}, {"sha": "a147746077f4a0b8ab79dc44d661ec77baeb49f6", "filename": "crates/ra_hir/src/ty/infer/pat.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9fa46ff5c67bd1809cc748f6fc0e93d7c9be3fdb/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa46ff5c67bd1809cc748f6fc0e93d7c9be3fdb/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpat.rs?ref=9fa46ff5c67bd1809cc748f6fc0e93d7c9be3fdb", "patch": "@@ -14,7 +14,7 @@ use test_utils::tested_by;\n use super::{BindingMode, InferenceContext};\n use crate::{\n     db::HirDatabase,\n-    ty::{Substs, Ty, TypeCtor, TypeWalk},\n+    ty::{utils::variant_data, Substs, Ty, TypeCtor, TypeWalk},\n };\n \n impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n@@ -26,16 +26,18 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         default_bm: BindingMode,\n     ) -> Ty {\n         let (ty, def) = self.resolve_variant(path);\n-\n+        let var_data = def.map(|it| variant_data(self.db, it));\n         self.unify(&ty, expected);\n \n         let substs = ty.substs().unwrap_or_else(Substs::empty);\n \n         let field_tys = def.map(|it| self.db.field_types(it.into())).unwrap_or_default();\n+\n         for (i, &subpat) in subpats.iter().enumerate() {\n-            let expected_ty = def\n-                .and_then(|d| d.field(self.db, &Name::new_tuple_field(i)))\n-                .map_or(Ty::Unknown, |field| field_tys[field.id].clone())\n+            let expected_ty = var_data\n+                .as_ref()\n+                .and_then(|d| d.field(&Name::new_tuple_field(i)))\n+                .map_or(Ty::Unknown, |field| field_tys[field].clone())\n                 .subst(&substs);\n             let expected_ty = self.normalize_associated_types_in(expected_ty);\n             self.infer_pat(subpat, &expected_ty, default_bm);\n@@ -53,6 +55,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         id: PatId,\n     ) -> Ty {\n         let (ty, def) = self.resolve_variant(path);\n+        let var_data = def.map(|it| variant_data(self.db, it));\n         if let Some(variant) = def {\n             self.write_variant_resolution(id.into(), variant);\n         }\n@@ -63,10 +66,9 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n         let field_tys = def.map(|it| self.db.field_types(it.into())).unwrap_or_default();\n         for subpat in subpats {\n-            let matching_field = def.and_then(|it| it.field(self.db, &subpat.name));\n-            let expected_ty = matching_field\n-                .map_or(Ty::Unknown, |field| field_tys[field.id].clone())\n-                .subst(&substs);\n+            let matching_field = var_data.as_ref().and_then(|it| it.field(&subpat.name));\n+            let expected_ty =\n+                matching_field.map_or(Ty::Unknown, |field| field_tys[field].clone()).subst(&substs);\n             let expected_ty = self.normalize_associated_types_in(expected_ty);\n             self.infer_pat(subpat.pat, &expected_ty, default_bm);\n         }"}, {"sha": "d33b50794c598cdc78c7ac2494f0cd33ea384023", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9fa46ff5c67bd1809cc748f6fc0e93d7c9be3fdb/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa46ff5c67bd1809cc748f6fc0e93d7c9be3fdb/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=9fa46ff5c67bd1809cc748f6fc0e93d7c9be3fdb", "patch": "@@ -28,7 +28,7 @@ use crate::{\n     db::HirDatabase,\n     ty::{\n         primitive::{FloatTy, IntTy},\n-        utils::{all_super_traits, associated_type_by_name_including_super_traits},\n+        utils::{all_super_traits, associated_type_by_name_including_super_traits, variant_data},\n     },\n     util::make_mut_slice,\n     Adt, Const, Enum, EnumVariant, Function, ImplBlock, ModuleDef, Path, Static, Struct, Trait,\n@@ -514,13 +514,11 @@ pub(crate) fn field_types_query(\n     db: &impl HirDatabase,\n     variant_id: VariantId,\n ) -> Arc<ArenaMap<LocalStructFieldId, Ty>> {\n-    let (resolver, var_data) = match variant_id {\n-        VariantId::StructId(it) => (it.resolver(db), db.struct_data(it).variant_data.clone()),\n-        VariantId::UnionId(it) => (it.resolver(db), db.union_data(it).variant_data.clone()),\n-        VariantId::EnumVariantId(it) => (\n-            it.parent.resolver(db),\n-            db.enum_data(it.parent).variants[it.local_id].variant_data.clone(),\n-        ),\n+    let var_data = variant_data(db, variant_id);\n+    let resolver = match variant_id {\n+        VariantId::StructId(it) => it.resolver(db),\n+        VariantId::UnionId(it) => it.resolver(db),\n+        VariantId::EnumVariantId(it) => it.parent.resolver(db),\n     };\n     let mut res = ArenaMap::default();\n     for (field_id, field_data) in var_data.fields().iter() {"}, {"sha": "f82e6ac9b1cca01b922b9379e7b98fe703005a7c", "filename": "crates/ra_hir/src/ty/utils.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9fa46ff5c67bd1809cc748f6fc0e93d7c9be3fdb/crates%2Fra_hir%2Fsrc%2Fty%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fa46ff5c67bd1809cc748f6fc0e93d7c9be3fdb/crates%2Fra_hir%2Fsrc%2Fty%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Futils.rs?ref=9fa46ff5c67bd1809cc748f6fc0e93d7c9be3fdb", "patch": "@@ -1,11 +1,13 @@\n //! Helper functions for working with def, which don't need to be a separate\n //! query, but can't be computed directly from `*Data` (ie, which need a `db`).\n+use std::sync::Arc;\n \n use hir_def::{\n+    adt::VariantData,\n     db::DefDatabase,\n     resolver::{HasResolver, TypeNs},\n     type_ref::TypeRef,\n-    TraitId, TypeAliasId,\n+    TraitId, TypeAliasId, VariantId,\n };\n use hir_expand::name::{self, Name};\n \n@@ -61,3 +63,13 @@ pub(super) fn associated_type_by_name_including_super_traits(\n         .into_iter()\n         .find_map(|t| db.trait_data(t).associated_type_by_name(name))\n }\n+\n+pub(super) fn variant_data(db: &impl DefDatabase, var: VariantId) -> Arc<VariantData> {\n+    match var {\n+        VariantId::StructId(it) => db.struct_data(it).variant_data.clone(),\n+        VariantId::UnionId(it) => db.union_data(it).variant_data.clone(),\n+        VariantId::EnumVariantId(it) => {\n+            db.enum_data(it.parent).variants[it.local_id].variant_data.clone()\n+        }\n+    }\n+}"}]}