{"sha": "8f6f864547bad3d2bb34ea0cf5a32e8adee58c4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNmY4NjQ1NDdiYWQzZDJiYjM0ZWEwY2Y1YTMyZThhZGVlNThjNGU=", "commit": {"author": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2020-02-25T13:38:50Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-02-25T16:37:43Z"}, "message": "Semantic Ranges", "tree": {"sha": "ad837a82e509a5aa8b4f69aa0288ba14d71b50cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad837a82e509a5aa8b4f69aa0288ba14d71b50cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f6f864547bad3d2bb34ea0cf5a32e8adee58c4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f6f864547bad3d2bb34ea0cf5a32e8adee58c4e", "html_url": "https://github.com/rust-lang/rust/commit/8f6f864547bad3d2bb34ea0cf5a32e8adee58c4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f6f864547bad3d2bb34ea0cf5a32e8adee58c4e/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3040c0deba8266044029a6479a1c12c28e72750", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3040c0deba8266044029a6479a1c12c28e72750", "html_url": "https://github.com/rust-lang/rust/commit/d3040c0deba8266044029a6479a1c12c28e72750"}], "stats": {"total": 108, "additions": 92, "deletions": 16}, "files": [{"sha": "c02bb08a033b4fdef033808c1f1108ac649e68d0", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8f6f864547bad3d2bb34ea0cf5a32e8adee58c4e/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6f864547bad3d2bb34ea0cf5a32e8adee58c4e/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=8f6f864547bad3d2bb34ea0cf5a32e8adee58c4e", "patch": "@@ -430,6 +430,13 @@ impl Analysis {\n         self.with_db(|db| syntax_highlighting::highlight(db, file_id))\n     }\n \n+    /// Computes syntax highlighting for the given file range.\n+    pub fn highlight_range(&self, frange: FileRange) -> Cancelable<Vec<HighlightedRange>> {\n+        self.with_db(|db| {\n+            syntax_highlighting::highlight_range(db, frange.file_id, Some(frange.range))\n+        })\n+    }\n+\n     /// Computes syntax highlighting for the given file.\n     pub fn highlight_as_html(&self, file_id: FileId, rainbow: bool) -> Cancelable<String> {\n         self.with_db(|db| syntax_highlighting::highlight_as_html(db, file_id, rainbow))"}, {"sha": "22c84561f29075a70da05a46231dfc3c6894246d", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/8f6f864547bad3d2bb34ea0cf5a32e8adee58c4e/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6f864547bad3d2bb34ea0cf5a32e8adee58c4e/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=8f6f864547bad3d2bb34ea0cf5a32e8adee58c4e", "patch": "@@ -5,8 +5,8 @@ use ra_db::SourceDatabase;\n use ra_ide_db::{defs::NameDefinition, RootDatabase};\n use ra_prof::profile;\n use ra_syntax::{\n-    ast, AstNode, Direction, SyntaxElement, SyntaxKind, SyntaxKind::*, SyntaxToken, TextRange,\n-    WalkEvent, T,\n+    ast, AstNode, Direction, NodeOrToken, SyntaxElement, SyntaxKind, SyntaxKind::*, SyntaxToken,\n+    TextRange, WalkEvent, T,\n };\n use rustc_hash::FxHashMap;\n \n@@ -69,6 +69,16 @@ fn is_control_keyword(kind: SyntaxKind) -> bool {\n \n pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRange> {\n     let _p = profile(\"highlight\");\n+    highlight_range(db, file_id, None)\n+}\n+\n+pub(crate) fn highlight_range(\n+    db: &RootDatabase,\n+    file_id: FileId,\n+    range: Option<TextRange>,\n+) -> Vec<HighlightedRange> {\n+    let _p = profile(\"highlight_range\");\n+\n     let parse = db.parse(file_id);\n     let root = parse.tree().syntax().clone();\n \n@@ -79,6 +89,15 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n \n     let mut in_macro_call = None;\n \n+    // Determine the root based on the range\n+    let root = match range {\n+        Some(range) => match root.covering_element(range) {\n+            NodeOrToken::Node(node) => node,\n+            NodeOrToken::Token(token) => token.parent(),\n+        },\n+        None => root,\n+    };\n+\n     for event in root.preorder_with_tokens() {\n         match event {\n             WalkEvent::Enter(node) => match node.kind() {\n@@ -374,7 +393,10 @@ mod tests {\n \n     use test_utils::{assert_eq_text, project_dir, read_text};\n \n-    use crate::mock_analysis::{single_file, MockAnalysis};\n+    use crate::{\n+        mock_analysis::{single_file, MockAnalysis},\n+        FileRange, TextRange,\n+    };\n \n     #[test]\n     fn test_highlighting() {\n@@ -475,4 +497,25 @@ fn bar() {\n         let _ = host.analysis().highlight(file_id).unwrap();\n         // eprintln!(\"elapsed: {:?}\", t.elapsed());\n     }\n+\n+    #[test]\n+    fn test_ranges() {\n+        let (analysis, file_id) = single_file(\n+            r#\"\n+            #[derive(Clone, Debug)]\n+            struct Foo {\n+                pub x: i32,\n+                pub y: i32,\n+            }\"#,\n+        );\n+\n+        let highlights = &analysis\n+            .highlight_range(FileRange {\n+                file_id,\n+                range: TextRange::offset_len(82.into(), 1.into()), // \"x\"\n+            })\n+            .unwrap();\n+\n+        assert_eq!(highlights[0].tag, \"field\");\n+    }\n }"}, {"sha": "db82eeb1cae5d9674f1023eef7d568bdf392f8c3", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8f6f864547bad3d2bb34ea0cf5a32e8adee58c4e/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6f864547bad3d2bb34ea0cf5a32e8adee58c4e/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=8f6f864547bad3d2bb34ea0cf5a32e8adee58c4e", "patch": "@@ -7,9 +7,9 @@ use lsp_types::{\n     CompletionOptions, DocumentOnTypeFormattingOptions, FoldingRangeProviderCapability,\n     ImplementationProviderCapability, RenameOptions, RenameProviderCapability, SaveOptions,\n     SelectionRangeProviderCapability, SemanticTokensDocumentProvider, SemanticTokensLegend,\n-    SemanticTokensOptions, SemanticTokensServerCapabilities, ServerCapabilities,\n-    SignatureHelpOptions, TextDocumentSyncCapability, TextDocumentSyncKind,\n-    TextDocumentSyncOptions, TypeDefinitionProviderCapability, WorkDoneProgressOptions,\n+    SemanticTokensOptions, ServerCapabilities, SignatureHelpOptions, TextDocumentSyncCapability,\n+    TextDocumentSyncKind, TextDocumentSyncOptions, TypeDefinitionProviderCapability,\n+    WorkDoneProgressOptions,\n };\n \n pub fn server_capabilities() -> ServerCapabilities {\n@@ -60,7 +60,7 @@ pub fn server_capabilities() -> ServerCapabilities {\n         execute_command_provider: None,\n         workspace: None,\n         call_hierarchy_provider: Some(CallHierarchyServerCapability::Simple(true)),\n-        semantic_tokens_provider: Some(SemanticTokensServerCapabilities::SemanticTokensOptions(\n+        semantic_tokens_provider: Some(\n             SemanticTokensOptions {\n                 legend: SemanticTokensLegend {\n                     token_types: semantic_tokens::supported_token_types().iter().cloned().collect(),\n@@ -71,9 +71,11 @@ pub fn server_capabilities() -> ServerCapabilities {\n                 },\n \n                 document_provider: Some(SemanticTokensDocumentProvider::Bool(true)),\n-                ..SemanticTokensOptions::default()\n-            },\n-        )),\n+                range_provider: Some(true),\n+                work_done_progress_options: Default::default(),\n+            }\n+            .into(),\n+        ),\n         experimental: Default::default(),\n     }\n }"}, {"sha": "2b25f54436caca00c56f69667c3a2a2938a3d7d3", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f6f864547bad3d2bb34ea0cf5a32e8adee58c4e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6f864547bad3d2bb34ea0cf5a32e8adee58c4e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=8f6f864547bad3d2bb34ea0cf5a32e8adee58c4e", "patch": "@@ -527,8 +527,9 @@ fn on_request(\n         .on::<req::CallHierarchyPrepare>(handlers::handle_call_hierarchy_prepare)?\n         .on::<req::CallHierarchyIncomingCalls>(handlers::handle_call_hierarchy_incoming)?\n         .on::<req::CallHierarchyOutgoingCalls>(handlers::handle_call_hierarchy_outgoing)?\n-        .on::<req::Ssr>(handlers::handle_ssr)?\n         .on::<req::SemanticTokensRequest>(handlers::handle_semantic_tokens)?\n+        .on::<req::SemanticTokensRangeRequest>(handlers::handle_semantic_tokens_range)?\n+        .on::<req::Ssr>(handlers::handle_ssr)?\n         .finish();\n     Ok(())\n }"}, {"sha": "267edd578a3fe428039b15990db7c1c6e51a1952", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8f6f864547bad3d2bb34ea0cf5a32e8adee58c4e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6f864547bad3d2bb34ea0cf5a32e8adee58c4e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=8f6f864547bad3d2bb34ea0cf5a32e8adee58c4e", "patch": "@@ -17,8 +17,8 @@ use lsp_types::{\n     Diagnostic, DocumentFormattingParams, DocumentHighlight, DocumentSymbol, FoldingRange,\n     FoldingRangeParams, Hover, HoverContents, Location, MarkupContent, MarkupKind, Position,\n     PrepareRenameResponse, Range, RenameParams, SemanticTokenModifier, SemanticTokenType,\n-    SemanticTokens, SemanticTokensParams, SemanticTokensResult, SymbolInformation,\n-    TextDocumentIdentifier, TextEdit, WorkspaceEdit,\n+    SemanticTokens, SemanticTokensParams, SemanticTokensRangeParams, SemanticTokensRangeResult,\n+    SemanticTokensResult, SymbolInformation, TextDocumentIdentifier, TextEdit, WorkspaceEdit,\n };\n use ra_ide::{\n     AssistId, FileId, FilePosition, FileRange, Query, RangeInfo, Runnable, RunnableKind,\n@@ -1092,3 +1092,25 @@ pub fn handle_semantic_tokens(\n \n     Ok(Some(tokens.into()))\n }\n+\n+pub fn handle_semantic_tokens_range(\n+    world: WorldSnapshot,\n+    params: SemanticTokensRangeParams,\n+) -> Result<Option<SemanticTokensRangeResult>> {\n+    let _p = profile(\"handle_semantic_tokens_range\");\n+\n+    let frange = (&params.text_document, params.range).try_conv_with(&world)?;\n+    let line_index = world.analysis().file_line_index(frange.file_id)?;\n+\n+    let mut builder = SemanticTokensBuilder::default();\n+\n+    for h in world.analysis().highlight_range(frange)?.into_iter() {\n+        let type_and_modifiers: (SemanticTokenType, Vec<SemanticTokenModifier>) = h.tag.conv();\n+        let (token_type, token_modifiers) = type_and_modifiers.conv();\n+        builder.push(h.range.conv_with(&line_index), token_type, token_modifiers);\n+    }\n+\n+    let tokens = SemanticTokens { data: builder.build(), ..Default::default() };\n+\n+    Ok(Some(tokens.into()))\n+}"}, {"sha": "642ac41ac4012fd4461316f2f431b526126965f3", "filename": "crates/rust-analyzer/src/req.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8f6f864547bad3d2bb34ea0cf5a32e8adee58c4e/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6f864547bad3d2bb34ea0cf5a32e8adee58c4e/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freq.rs?ref=8f6f864547bad3d2bb34ea0cf5a32e8adee58c4e", "patch": "@@ -12,9 +12,10 @@ pub use lsp_types::{\n     DocumentSymbolResponse, FileSystemWatcher, Hover, InitializeResult, MessageType,\n     PartialResultParams, ProgressParams, ProgressParamsValue, ProgressToken,\n     PublishDiagnosticsParams, ReferenceParams, Registration, RegistrationParams, SelectionRange,\n-    SelectionRangeParams, SemanticTokensParams, SemanticTokensResult, ServerCapabilities,\n-    ShowMessageParams, SignatureHelp, SymbolKind, TextDocumentEdit, TextDocumentPositionParams,\n-    TextEdit, WorkDoneProgressParams, WorkspaceEdit, WorkspaceSymbolParams,\n+    SelectionRangeParams, SemanticTokensParams, SemanticTokensRangeParams,\n+    SemanticTokensRangeResult, SemanticTokensResult, ServerCapabilities, ShowMessageParams,\n+    SignatureHelp, SymbolKind, TextDocumentEdit, TextDocumentPositionParams, TextEdit,\n+    WorkDoneProgressParams, WorkspaceEdit, WorkspaceSymbolParams,\n };\n \n pub enum AnalyzerStatus {}"}]}