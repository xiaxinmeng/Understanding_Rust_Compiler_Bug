{"sha": "43ccacf89b704f74e3ff61ba015c0dddcedfe068", "node_id": "C_kwDOAAsO6NoAKDQzY2NhY2Y4OWI3MDRmNzRlM2ZmNjFiYTAxNWMwZGRkY2VkZmUwNjg", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-20T09:49:20Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-21T11:09:01Z"}, "message": "`region_outlives_predicate` no snapshot", "tree": {"sha": "72b9279053cce1d1db9eb108ab0b091ae7f68831", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72b9279053cce1d1db9eb108ab0b091ae7f68831"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43ccacf89b704f74e3ff61ba015c0dddcedfe068", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43ccacf89b704f74e3ff61ba015c0dddcedfe068", "html_url": "https://github.com/rust-lang/rust/commit/43ccacf89b704f74e3ff61ba015c0dddcedfe068", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43ccacf89b704f74e3ff61ba015c0dddcedfe068/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "608625dae95cde00e4570eb6c2d63b2244bbf34c", "url": "https://api.github.com/repos/rust-lang/rust/commits/608625dae95cde00e4570eb6c2d63b2244bbf34c", "html_url": "https://github.com/rust-lang/rust/commit/608625dae95cde00e4570eb6c2d63b2244bbf34c"}], "stats": {"total": 57, "additions": 15, "deletions": 42}, "files": [{"sha": "854625579ee7be4e01225aebf1f15ba5debf04a7", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43ccacf89b704f74e3ff61ba015c0dddcedfe068/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ccacf89b704f74e3ff61ba015c0dddcedfe068/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=43ccacf89b704f74e3ff61ba015c0dddcedfe068", "patch": "@@ -559,7 +559,7 @@ E0790: include_str!(\"./error_codes/E0790.md\"),\n //  E0273, // on_unimplemented #1\n //  E0274, // on_unimplemented #2\n //  E0278, // requirement is not satisfied\n-    E0279, // requirement is not satisfied\n+//  E0279,\n     E0280, // requirement is not satisfied\n //  E0285, // overflow evaluation builtin bounds\n //  E0296, // replaced with a generic attribute input check"}, {"sha": "85692e109be4a32d0b1cb5bb3f9eb70cd7952964", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/43ccacf89b704f74e3ff61ba015c0dddcedfe068/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ccacf89b704f74e3ff61ba015c0dddcedfe068/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=43ccacf89b704f74e3ff61ba015c0dddcedfe068", "patch": "@@ -1061,16 +1061,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         &self,\n         cause: &traits::ObligationCause<'tcx>,\n         predicate: ty::PolyRegionOutlivesPredicate<'tcx>,\n-    ) -> UnitResult<'tcx> {\n-        self.commit_if_ok(|_snapshot| {\n-            let ty::OutlivesPredicate(r_a, r_b) =\n-                self.replace_bound_vars_with_placeholders(predicate);\n-            let origin = SubregionOrigin::from_obligation_cause(cause, || {\n-                RelateRegionParamBound(cause.span)\n-            });\n-            self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`\n-            Ok(())\n-        })\n+    ) {\n+        let ty::OutlivesPredicate(r_a, r_b) = self.replace_bound_vars_with_placeholders(predicate);\n+        let origin =\n+            SubregionOrigin::from_obligation_cause(cause, || RelateRegionParamBound(cause.span));\n+        self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`\n     }\n \n     /// Number of type variables created so far."}, {"sha": "5763e6d1b559ed78de22923792b0ba4f16629cbd", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43ccacf89b704f74e3ff61ba015c0dddcedfe068/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ccacf89b704f74e3ff61ba015c0dddcedfe068/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=43ccacf89b704f74e3ff61ba015c0dddcedfe068", "patch": "@@ -793,9 +793,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                 }\n                 ty::PredicateKind::RegionOutlives(binder) => {\n                     let binder = bound_predicate.rebind(binder);\n-                    if select.infcx().region_outlives_predicate(&dummy_cause, binder).is_err() {\n-                        return false;\n-                    }\n+                    select.infcx().region_outlives_predicate(&dummy_cause, binder)\n                 }\n                 ty::PredicateKind::TypeOutlives(binder) => {\n                     let binder = bound_predicate.rebind(binder);"}, {"sha": "eb2c3c9601943c6e73f3e51d05fe8a7e0c6c8550", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/43ccacf89b704f74e3ff61ba015c0dddcedfe068/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ccacf89b704f74e3ff61ba015c0dddcedfe068/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=43ccacf89b704f74e3ff61ba015c0dddcedfe068", "patch": "@@ -789,24 +789,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         span_bug!(span, \"coerce requirement gave wrong error: `{:?}`\", predicate)\n                     }\n \n-                    ty::PredicateKind::RegionOutlives(predicate) => {\n-                        let predicate = bound_predicate.rebind(predicate);\n-                        let predicate = self.resolve_vars_if_possible(predicate);\n-                        let err = self\n-                            .region_outlives_predicate(&obligation.cause, predicate)\n-                            .err()\n-                            .unwrap();\n-                        struct_span_err!(\n-                            self.tcx.sess,\n-                            span,\n-                            E0279,\n-                            \"the requirement `{}` is not satisfied (`{}`)\",\n-                            predicate,\n-                            err,\n-                        )\n-                    }\n-\n-                    ty::PredicateKind::Projection(..) | ty::PredicateKind::TypeOutlives(..) => {\n+                    ty::PredicateKind::RegionOutlives(..)\n+                    | ty::PredicateKind::Projection(..)\n+                    | ty::PredicateKind::TypeOutlives(..) => {\n                         let predicate = self.resolve_vars_if_possible(obligation.predicate);\n                         struct_span_err!(\n                             self.tcx.sess,"}, {"sha": "556ef466cd11aad35bfb521bcb48e57026c92773", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/43ccacf89b704f74e3ff61ba015c0dddcedfe068/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ccacf89b704f74e3ff61ba015c0dddcedfe068/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=43ccacf89b704f74e3ff61ba015c0dddcedfe068", "patch": "@@ -359,15 +359,10 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n \n                 ty::PredicateKind::RegionOutlives(data) => {\n                     if infcx.considering_regions || data.has_placeholders() {\n-                        match infcx\n-                            .region_outlives_predicate(&obligation.cause, Binder::dummy(data))\n-                        {\n-                            Ok(()) => ProcessResult::Changed(vec![]),\n-                            Err(_) => ProcessResult::Error(CodeSelectionError(Unimplemented)),\n-                        }\n-                    } else {\n-                        ProcessResult::Changed(vec![])\n+                        infcx.region_outlives_predicate(&obligation.cause, Binder::dummy(data));\n                     }\n+\n+                    ProcessResult::Changed(vec![])\n                 }\n \n                 ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(t_a, r_b)) => {"}, {"sha": "f0054a1c1c9bb331541950a0c4221dc7dc076f37", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43ccacf89b704f74e3ff61ba015c0dddcedfe068/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ccacf89b704f74e3ff61ba015c0dddcedfe068/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=43ccacf89b704f74e3ff61ba015c0dddcedfe068", "patch": "@@ -10,8 +10,8 @@ use regex::Regex;\n \n // A few of those error codes can't be tested but all the others can and *should* be tested!\n const EXEMPTED_FROM_TEST: &[&str] = &[\n-    \"E0279\", \"E0313\", \"E0377\", \"E0461\", \"E0462\", \"E0465\", \"E0476\", \"E0490\", \"E0514\", \"E0519\",\n-    \"E0523\", \"E0554\", \"E0640\", \"E0717\", \"E0729\", \"E0789\",\n+    \"E0313\", \"E0377\", \"E0461\", \"E0462\", \"E0465\", \"E0476\", \"E0490\", \"E0514\", \"E0519\", \"E0523\",\n+    \"E0554\", \"E0640\", \"E0717\", \"E0729\", \"E0789\",\n ];\n \n // Some error codes don't have any tests apparently..."}]}