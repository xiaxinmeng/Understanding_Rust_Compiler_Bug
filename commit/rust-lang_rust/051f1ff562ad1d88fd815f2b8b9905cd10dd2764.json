{"sha": "051f1ff562ad1d88fd815f2b8b9905cd10dd2764", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MWYxZmY1NjJhZDFkODhmZDgxNWYyYjhiOTkwNWNkMTBkZDI3NjQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-24T04:52:01Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-27T22:53:09Z"}, "message": "Convert std::sha1 to istrs. Issue #855", "tree": {"sha": "b3cea81bca3ad0ad1930b4775ba59b80f1e2d87e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3cea81bca3ad0ad1930b4775ba59b80f1e2d87e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/051f1ff562ad1d88fd815f2b8b9905cd10dd2764", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/051f1ff562ad1d88fd815f2b8b9905cd10dd2764", "html_url": "https://github.com/rust-lang/rust/commit/051f1ff562ad1d88fd815f2b8b9905cd10dd2764", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/051f1ff562ad1d88fd815f2b8b9905cd10dd2764/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd84fbe9f34b671bf62aa5a4923e1681f74528da", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd84fbe9f34b671bf62aa5a4923e1681f74528da", "html_url": "https://github.com/rust-lang/rust/commit/bd84fbe9f34b671bf62aa5a4923e1681f74528da"}], "stats": {"total": 65, "additions": 35, "deletions": 30}, "files": [{"sha": "3805f937c9d6fceb44b18728c5ed7d95a32d4a3a", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/051f1ff562ad1d88fd815f2b8b9905cd10dd2764/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051f1ff562ad1d88fd815f2b8b9905cd10dd2764/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=051f1ff562ad1d88fd815f2b8b9905cd10dd2764", "patch": "@@ -6,6 +6,7 @@ import middle::ty;\n import metadata::encoder;\n import middle::trans_common::crate_ctxt;\n import std::str;\n+import std::istr;\n import std::fs;\n import std::vec;\n import std::option;\n@@ -314,12 +315,14 @@ fn build_link_meta(sess: &session::session, c: &ast::crate, output: &str,\n     // This calculates CMH as defined above\n     fn crate_meta_extras_hash(sha: sha1, _crate: &ast::crate,\n                               metas: &provided_metas) -> str {\n-        fn len_and_str(s: &str) -> str {\n-            ret #fmt[\"%u_%s\", str::byte_len(s), s];\n+        fn len_and_str(s: &istr) -> istr {\n+            ret istr::from_estr(#fmt[\"%u_%s\",\n+                                     istr::byte_len(s),\n+                                     istr::to_estr(s)]);\n         }\n \n-        fn len_and_str_lit(l: &ast::lit) -> str {\n-            ret len_and_str(pprust::lit_to_str(@l));\n+        fn len_and_str_lit(l: &ast::lit) -> istr {\n+            ret len_and_str(istr::from_estr(pprust::lit_to_str(@l)));\n         }\n \n         let cmh_items = attr::sort_meta_items(metas.cmh_items);\n@@ -329,10 +332,12 @@ fn build_link_meta(sess: &session::session, c: &ast::crate, output: &str,\n             let m = m_;\n             alt m.node {\n               ast::meta_name_value(key, value) {\n-                sha.input_str(len_and_str(key));\n+                sha.input_str(len_and_str(istr::from_estr(key)));\n                 sha.input_str(len_and_str_lit(value));\n               }\n-              ast::meta_word(name) { sha.input_str(len_and_str(name)); }\n+              ast::meta_word(name) {\n+                sha.input_str(len_and_str(istr::from_estr(name)));\n+              }\n               ast::meta_list(_, _) {\n                 // FIXME (#607): Implement this\n                 fail \"unimplemented meta_item variant\";\n@@ -387,7 +392,7 @@ fn build_link_meta(sess: &session::session, c: &ast::crate, output: &str,\n }\n \n fn truncated_sha1_result(sha: sha1) -> str {\n-    ret str::substr(sha.result_str(), 0u, 16u);\n+    ret istr::to_estr(istr::substr(sha.result_str(), 0u, 16u));\n }\n \n \n@@ -398,12 +403,12 @@ fn symbol_hash(tcx: ty::ctxt, sha: sha1, t: ty::t, link_meta: &link_meta) ->\n     // to be independent of one another in the crate.\n \n     sha.reset();\n-    sha.input_str(link_meta.name);\n-    sha.input_str(\"-\");\n+    sha.input_str(istr::from_estr(link_meta.name));\n+    sha.input_str(~\"-\");\n     // FIXME: This wants to be link_meta.meta_hash\n-    sha.input_str(link_meta.name);\n-    sha.input_str(\"-\");\n-    sha.input_str(encoder::encoded_ty(tcx, t));\n+    sha.input_str(istr::from_estr(link_meta.name));\n+    sha.input_str(~\"-\");\n+    sha.input_str(istr::from_estr(encoder::encoded_ty(tcx, t)));\n     let hash = truncated_sha1_result(sha);\n     // Prefix with _ so that it never blends into adjacent digits\n "}, {"sha": "c2d63af9a18f5195772bcee0655d07184e1d5435", "filename": "src/lib/sha1.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/051f1ff562ad1d88fd815f2b8b9905cd10dd2764/src%2Flib%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051f1ff562ad1d88fd815f2b8b9905cd10dd2764/src%2Flib%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fsha1.rs?ref=051f1ff562ad1d88fd815f2b8b9905cd10dd2764", "patch": "@@ -10,12 +10,12 @@ type sha1 = obj {\n     // Provide message input as bytes\n     fn input(&[u8]);\n     // Provide message input as string\n-    fn input_str(&str);\n+    fn input_str(&istr);\n     // Read the digest as a vector of 20 bytes. After calling this no further\n     // input may provided until reset is called\n     fn result() -> [u8];\n     // Same as above, just a hex-string version.\n-    fn result_str() -> str;\n+    fn result_str() -> istr;\n     // Reset the sha1 state for reuse. This is called\n     // automatically during construction\n     fn reset();\n@@ -215,13 +215,13 @@ fn mk_sha1() -> sha1 {\n             st.computed = false;\n         }\n         fn input(msg: &[u8]) { add_input(st, msg); }\n-        fn input_str(msg: &str) { add_input(st, str::bytes(msg)); }\n+        fn input_str(msg: &istr) { add_input(st, istr::bytes(msg)); }\n         fn result() -> [u8] { ret mk_result(st); }\n-        fn result_str() -> str {\n+        fn result_str() -> istr {\n             let r = mk_result(st);\n-            let s = \"\";\n+            let s = ~\"\";\n             for b: u8 in r {\n-                s += istr::to_estr(uint::to_str(b as uint, 16u));\n+                s += uint::to_str(b as uint, 16u);\n             }\n             ret s;\n         }"}, {"sha": "950409b726205fcefcb1b07b7122d956b55e854f", "filename": "src/test/stdtest/sha1.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/051f1ff562ad1d88fd815f2b8b9905cd10dd2764/src%2Ftest%2Fstdtest%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051f1ff562ad1d88fd815f2b8b9905cd10dd2764/src%2Ftest%2Fstdtest%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fsha1.rs?ref=051f1ff562ad1d88fd815f2b8b9905cd10dd2764", "patch": "@@ -5,28 +5,28 @@\n use std;\n import std::sha1;\n import std::vec;\n-import std::str;\n+import std::istr;\n \n #[test]\n fn test() {\n-    type test = {input: str, output: [u8]};\n+    type test = {input: istr, output: [u8]};\n \n-    fn a_million_letter_a() -> str {\n+    fn a_million_letter_a() -> istr {\n         let i = 0;\n-        let rs = \"\";\n-        while i < 100000 { rs += \"aaaaaaaaaa\"; i += 1; }\n+        let rs = ~\"\";\n+        while i < 100000 { rs += ~\"aaaaaaaaaa\"; i += 1; }\n         ret rs;\n     }\n     // Test messages from FIPS 180-1\n \n     let fips_180_1_tests: [test] =\n-        [{input: \"abc\",\n+        [{input: ~\"abc\",\n           output:\n               [0xA9u8, 0x99u8, 0x3Eu8, 0x36u8, 0x47u8, 0x06u8, 0x81u8, 0x6Au8,\n                0xBAu8, 0x3Eu8, 0x25u8, 0x71u8, 0x78u8, 0x50u8, 0xC2u8, 0x6Cu8,\n                0x9Cu8, 0xD0u8, 0xD8u8, 0x9Du8]},\n-         {input:\n-              \"abcdbcdecdefdefgefghfghighij\" + \"hijkijkljklmklmnlmnomnopnopq\",\n+         {input: ~\"abcdbcdecdefdefgefghfghighij\"\n+             + ~\"hijkijkljklmklmnlmnomnopnopq\",\n           output:\n               [0x84u8, 0x98u8, 0x3Eu8, 0x44u8, 0x1Cu8, 0x3Bu8, 0xD2u8, 0x6Eu8,\n                0xBAu8, 0xAEu8, 0x4Au8, 0xA1u8, 0xF9u8, 0x51u8, 0x29u8, 0xE5u8,\n@@ -39,12 +39,12 @@ fn test() {\n     // Examples from wikipedia\n \n     let wikipedia_tests: [test] =\n-        [{input: \"The quick brown fox jumps over the lazy dog\",\n+        [{input: ~\"The quick brown fox jumps over the lazy dog\",\n           output:\n               [0x2fu8, 0xd4u8, 0xe1u8, 0xc6u8, 0x7au8, 0x2du8, 0x28u8, 0xfcu8,\n                0xedu8, 0x84u8, 0x9eu8, 0xe1u8, 0xbbu8, 0x76u8, 0xe7u8, 0x39u8,\n                0x1bu8, 0x93u8, 0xebu8, 0x12u8]},\n-         {input: \"The quick brown fox jumps over the lazy cog\",\n+         {input: ~\"The quick brown fox jumps over the lazy cog\",\n           output:\n               [0xdeu8, 0x9fu8, 0x2cu8, 0x7fu8, 0xd2u8, 0x5eu8, 0x1bu8, 0x3au8,\n                0xfau8, 0xd3u8, 0xe8u8, 0x5au8, 0x0bu8, 0xd1u8, 0x7du8, 0x9bu8,\n@@ -74,11 +74,11 @@ fn test() {\n \n     // Test that it works when accepting the message in pieces\n     for t: test in tests {\n-        let len = str::byte_len(t.input);\n+        let len = istr::byte_len(t.input);\n         let left = len;\n         while left > 0u {\n             let take = (left + 1u) / 2u;\n-            sh.input_str(str::substr(t.input, len - left, take));\n+            sh.input_str(istr::substr(t.input, len - left, take));\n             left = left - take;\n         }\n         let out = sh.result();"}]}