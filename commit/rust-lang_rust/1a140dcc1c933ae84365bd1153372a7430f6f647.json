{"sha": "1a140dcc1c933ae84365bd1153372a7430f6f647", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMTQwZGNjMWM5MzNhZTg0MzY1YmQxMTUzMzcyYTc0MzBmNmY2NDc=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-08-15T22:25:54Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-08-15T22:25:54Z"}, "message": "Improve needless_doctest_main by using the parser", "tree": {"sha": "ee82c308cb3dd2b29cbc3f4b691852c755bdf407", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee82c308cb3dd2b29cbc3f4b691852c755bdf407"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a140dcc1c933ae84365bd1153372a7430f6f647", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a140dcc1c933ae84365bd1153372a7430f6f647", "html_url": "https://github.com/rust-lang/rust/commit/1a140dcc1c933ae84365bd1153372a7430f6f647", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a140dcc1c933ae84365bd1153372a7430f6f647/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0cc006964a557ad9dcf597a7bad356132329b3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0cc006964a557ad9dcf597a7bad356132329b3c", "html_url": "https://github.com/rust-lang/rust/commit/f0cc006964a557ad9dcf597a7bad356132329b3c"}], "stats": {"total": 155, "additions": 142, "deletions": 13}, "files": [{"sha": "9555459e240e9f874ba29132cb32eb47fe531161", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 69, "deletions": 6, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/1a140dcc1c933ae84365bd1153372a7430f6f647/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a140dcc1c933ae84365bd1153372a7430f6f647/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=1a140dcc1c933ae84365bd1153372a7430f6f647", "patch": "@@ -1,16 +1,22 @@\n use crate::utils::{implements_trait, is_entrypoint_fn, is_type_diagnostic_item, return_ty, span_lint};\n use if_chain::if_chain;\n use itertools::Itertools;\n-use rustc_ast::ast::{AttrKind, Attribute};\n+use rustc_ast::ast::{Async, AttrKind, Attribute, FnRetTy, ItemKind};\n use rustc_ast::token::CommentKind;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::sync::Lrc;\n+use rustc_errors::emitter::EmitterWriter;\n+use rustc_errors::Handler;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n+use rustc_parse::maybe_new_parser_from_source_str;\n+use rustc_session::parse::ParseSess;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::source_map::{BytePos, MultiSpan, Span};\n-use rustc_span::Pos;\n+use rustc_span::source_map::{BytePos, FilePathMapping, MultiSpan, SourceMap, Span};\n+use rustc_span::{FileName, Pos};\n+use std::io;\n use std::ops::Range;\n use url::Url;\n \n@@ -431,10 +437,67 @@ fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize\n     headers\n }\n \n-static LEAVE_MAIN_PATTERNS: &[&str] = &[\"static\", \"fn main() {}\", \"extern crate\", \"async fn main() {\"];\n-\n fn check_code(cx: &LateContext<'_>, text: &str, span: Span) {\n-    if text.contains(\"fn main() {\") && !LEAVE_MAIN_PATTERNS.iter().any(|p| text.contains(p)) {\n+    fn has_needless_main(code: &str) -> bool {\n+        let filename = FileName::anon_source_code(code);\n+\n+        let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n+        let emitter = EmitterWriter::new(box io::sink(), None, false, false, false, None, false);\n+        let handler = Handler::with_emitter(false, None, box emitter);\n+        let sess = ParseSess::with_span_handler(handler, sm);\n+\n+        let mut parser = match maybe_new_parser_from_source_str(&sess, filename, code.into()) {\n+            Ok(p) => p,\n+            Err(errs) => {\n+                for mut err in errs {\n+                    err.cancel();\n+                }\n+                return false;\n+            },\n+        };\n+\n+        let mut relevant_main_found = false;\n+        loop {\n+            match parser.parse_item() {\n+                Ok(Some(item)) => match &item.kind {\n+                    // Tests with one of these items are ignored\n+                    ItemKind::Static(..)\n+                    | ItemKind::Const(..)\n+                    | ItemKind::ExternCrate(..)\n+                    | ItemKind::ForeignMod(..) => return false,\n+                    // We found a main function ...\n+                    ItemKind::Fn(_, sig, _, Some(block)) if item.ident.name == sym!(main) => {\n+                        let is_async = matches!(sig.header.asyncness, Async::Yes{..});\n+                        let returns_nothing = match &sig.decl.output {\n+                            FnRetTy::Default(..) => true,\n+                            FnRetTy::Ty(ty) if ty.kind.is_unit() => true,\n+                            _ => false,\n+                        };\n+\n+                        if returns_nothing && !is_async && !block.stmts.is_empty() {\n+                            // This main function should be linted, but only if there are no other functions\n+                            relevant_main_found = true;\n+                        } else {\n+                            // This main function should not be linted, we're done\n+                            return false;\n+                        }\n+                    },\n+                    // Another function was found; this case is ignored too\n+                    ItemKind::Fn(..) => return false,\n+                    _ => {},\n+                },\n+                Ok(None) => break,\n+                Err(mut e) => {\n+                    e.cancel();\n+                    return false;\n+                },\n+            }\n+        }\n+\n+        relevant_main_found\n+    }\n+\n+    if has_needless_main(text) {\n         span_lint(cx, NEEDLESS_DOCTEST_MAIN, span, \"needless `fn main` in doctest\");\n     }\n }"}, {"sha": "883683e08a2aa83b4356d0a31bef4a7983cdf570", "filename": "tests/ui/needless_doc_main.rs", "status": "modified", "additions": 64, "deletions": 4, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/1a140dcc1c933ae84365bd1153372a7430f6f647/tests%2Fui%2Fneedless_doc_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a140dcc1c933ae84365bd1153372a7430f6f647/tests%2Fui%2Fneedless_doc_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_doc_main.rs?ref=1a140dcc1c933ae84365bd1153372a7430f6f647", "patch": "@@ -9,16 +9,21 @@\n /// }\n /// ```\n ///\n-/// This should, too.\n+/// With an explicit return type it should lint too\n+/// ```\n+/// fn main() -> () {\n+///     unimplemented!();\n+/// }\n+/// ```\n ///\n+/// This should, too.\n /// ```rust\n /// fn main() {\n ///     unimplemented!();\n /// }\n /// ```\n ///\n /// This one too.\n-///\n /// ```no_run\n /// fn main() {\n ///     unimplemented!();\n@@ -33,6 +38,20 @@ fn bad_doctests() {}\n /// fn main(){}\n /// ```\n ///\n+/// This shouldn't lint either, because main is async:\n+/// ```\n+/// async fn main() {\n+///     assert_eq!(42, ANSWER);\n+/// }\n+/// ```\n+///\n+/// Same here, because the return type is not the unit type:\n+/// ```\n+/// fn main() -> Result<()> {\n+///     Ok(())\n+/// }\n+/// ```\n+///\n /// This shouldn't lint either, because there's a `static`:\n /// ```\n /// static ANSWER: i32 = 42;\n@@ -42,6 +61,15 @@ fn bad_doctests() {}\n /// }\n /// ```\n ///\n+/// This shouldn't lint either, because there's a `const`:\n+/// ```\n+/// fn main() {\n+///     assert_eq!(42, ANSWER);\n+/// }\n+///\n+/// const ANSWER: i32 = 42;\n+/// ```\n+///\n /// Neither should this lint because of `extern crate`:\n /// ```\n /// #![feature(test)]\n@@ -51,16 +79,48 @@ fn bad_doctests() {}\n /// }\n /// ```\n ///\n-/// We should not lint ignored examples:\n+/// Neither should this lint because it has an extern block:\n+/// ```\n+/// extern {}\n+/// fn main() {\n+///     unimplemented!();\n+/// }\n+/// ```\n+///\n+/// This should not lint because there is another function defined:\n+/// ```\n+/// fn fun() {}\n+///\n+/// fn main() {\n+///     unimplemented!();\n+/// }\n+/// ```\n ///\n+/// We should not lint inside raw strings ...\n+/// ```\n+/// let string = r#\"\n+/// fn main() {\n+///     unimplemented!();\n+/// }\n+/// \"#;\n+/// ```\n+///\n+/// ... or comments\n+/// ```\n+/// // fn main() {\n+/// //     let _inception = 42;\n+/// // }\n+/// let _inception = 42;\n+/// ```\n+///\n+/// We should not lint ignored examples:\n /// ```rust,ignore\n /// fn main() {\n ///     unimplemented!();\n /// }\n /// ```\n ///\n /// Or even non-rust examples:\n-///\n /// ```text\n /// fn main() {\n ///     is what starts the program"}, {"sha": "05c7f9d33a7924f3d1ea642b0ad665f7edbf06d7", "filename": "tests/ui/needless_doc_main.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1a140dcc1c933ae84365bd1153372a7430f6f647/tests%2Fui%2Fneedless_doc_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a140dcc1c933ae84365bd1153372a7430f6f647/tests%2Fui%2Fneedless_doc_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_doc_main.stderr?ref=1a140dcc1c933ae84365bd1153372a7430f6f647", "patch": "@@ -7,16 +7,22 @@ LL | /// fn main() {\n    = note: `-D clippy::needless-doctest-main` implied by `-D warnings`\n \n error: needless `fn main` in doctest\n-  --> $DIR/needless_doc_main.rs:15:4\n+  --> $DIR/needless_doc_main.rs:14:4\n+   |\n+LL | /// fn main() -> () {\n+   |    ^^^^^^^^^^^^^^^^^^\n+\n+error: needless `fn main` in doctest\n+  --> $DIR/needless_doc_main.rs:21:4\n    |\n LL | /// fn main() {\n    |    ^^^^^^^^^^^^\n \n error: needless `fn main` in doctest\n-  --> $DIR/needless_doc_main.rs:23:4\n+  --> $DIR/needless_doc_main.rs:28:4\n    |\n LL | /// fn main() {\n    |    ^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n "}]}