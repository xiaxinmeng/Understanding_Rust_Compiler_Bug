{"sha": "365d4c94f6eca04c03203c005c5711eee30d5ff6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2NWQ0Yzk0ZjZlY2EwNGMwMzIwM2MwMDVjNTcxMWVlZTMwZDVmZjY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-12T14:04:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-12T14:04:04Z"}, "message": "Rollup merge of #54860 - mandeep:vec-initialize, r=alexcrichton\n\nAdd doc comments about safest way to initialize a vector of zeros\n\nThis adds more information about the vec! macro as discussed in #54628. I think this is a good starting point, but I think additional detail is needed so that we can explain why vec! is safer than the alternatives.", "tree": {"sha": "e8735b7574efe95529cff75b7a176b7daa29a5ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8735b7574efe95529cff75b7a176b7daa29a5ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/365d4c94f6eca04c03203c005c5711eee30d5ff6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbwKnUCRBK7hj4Ov3rIwAAdHIIAIl447w4hUyMs91XUvHY2tlm\nUGU7JLHq3Yo5jvxwvJJCb1IPpSm0JPur2gc8uIRplTIsNm+0vHTDXrAQvsvQvbCK\nCf0/knXNJLM+zM8ktZgChjkeJ5ydKkUegrC0KuFQS2Z6oBgf9utyBBiBjdIlYU9t\nNVIjBpkQ6R3IO70s6IikrK73rb/M8klr8pcjUk2Qc9Cw3wtzmsKskAHbais9DGWQ\nDHLyuVOb5CbOxln+f8xpPpr/b1voNJUvFKEXMsyn+7Qd+rX/SEr4Gz0/3xE/IE9l\nTsY8pg1p39tTcdgGtLrjbUpNVP2m6Un6KR97vCRzFNVo0oq2+ym+VpRxwkdFmT8=\n=gJnb\n-----END PGP SIGNATURE-----\n", "payload": "tree e8735b7574efe95529cff75b7a176b7daa29a5ee\nparent 44a527a27a7fdeb14a208ca195a62b58df4b960d\nparent 1e584bf5c9858bee54a9fbff25ab28b2ad29eb57\nauthor kennytm <kennytm@gmail.com> 1539353044 +0800\ncommitter GitHub <noreply@github.com> 1539353044 +0800\n\nRollup merge of #54860 - mandeep:vec-initialize, r=alexcrichton\n\nAdd doc comments about safest way to initialize a vector of zeros\n\nThis adds more information about the vec! macro as discussed in #54628. I think this is a good starting point, but I think additional detail is needed so that we can explain why vec! is safer than the alternatives.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/365d4c94f6eca04c03203c005c5711eee30d5ff6", "html_url": "https://github.com/rust-lang/rust/commit/365d4c94f6eca04c03203c005c5711eee30d5ff6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/365d4c94f6eca04c03203c005c5711eee30d5ff6/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44a527a27a7fdeb14a208ca195a62b58df4b960d", "url": "https://api.github.com/repos/rust-lang/rust/commits/44a527a27a7fdeb14a208ca195a62b58df4b960d", "html_url": "https://github.com/rust-lang/rust/commit/44a527a27a7fdeb14a208ca195a62b58df4b960d"}, {"sha": "1e584bf5c9858bee54a9fbff25ab28b2ad29eb57", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e584bf5c9858bee54a9fbff25ab28b2ad29eb57", "html_url": "https://github.com/rust-lang/rust/commit/1e584bf5c9858bee54a9fbff25ab28b2ad29eb57"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "f7a0bbdceafc93325359fbb83a51b413548db0da", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/365d4c94f6eca04c03203c005c5711eee30d5ff6/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/365d4c94f6eca04c03203c005c5711eee30d5ff6/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=365d4c94f6eca04c03203c005c5711eee30d5ff6", "patch": "@@ -120,11 +120,17 @@ use raw_vec::RawVec;\n /// assert_eq!(vec, [1, 2, 3, 4]);\n /// ```\n ///\n-/// It can also initialize each element of a `Vec<T>` with a given value:\n+/// It can also initialize each element of a `Vec<T>` with a given value.\n+/// This may be more efficient than performing allocation and initialization\n+/// in separate steps, especially when initializing a vector of zeros:\n ///\n /// ```\n /// let vec = vec![0; 5];\n /// assert_eq!(vec, [0, 0, 0, 0, 0]);\n+///\n+/// // The following is equivalent, but potentially slower:\n+/// let mut vec1 = Vec::with_capacity(5);\n+/// vec1.resize(5, 0);\n /// ```\n ///\n /// Use a `Vec<T>` as an efficient stack:"}]}