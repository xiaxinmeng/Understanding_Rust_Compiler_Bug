{"sha": "186d59a3ecc59e2994f28b1bd2f1110be20c51c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NmQ1OWEzZWNjNTllMjk5NGYyOGIxYmQyZjExMTBiZTIwYzUxYzE=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-03T16:51:46Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-04T16:06:51Z"}, "message": "Move some helper functions around", "tree": {"sha": "b81e523df5e8323bb8539835605e4d18eeba6be3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b81e523df5e8323bb8539835605e4d18eeba6be3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/186d59a3ecc59e2994f28b1bd2f1110be20c51c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl958xsACgkQtAh+UQ6Y\nsWQtiw//V66qHDlzUJn2lKVKo0LgVCD0dtvim8C48MJ/6Aoawx8WKEkrV6G34zS7\n+/e+7tPdmEypKRagbbViu3KRlqzC+WG1t7Q/oMTJOtGygnCOOx8gRmgC6CFcMNJL\n6Nc9R+YuhtrfilryFvWU884N9yZKXVN2NHXWC0uQTCDal0xU/zI+DTulXZH2Duv9\nOzeRXJnZ2Nad9Y9vteaiJInKu7Jzvl/U+pyrIlTTbYYDOcjYjQcbPVUS5k+4U8j7\nO1V0zFdSuGZvPY49ZogmBVW01FQmsnVu2yoiEXl5uLB1/YXsmDNtGpfDB9FQZzOo\nROewqyXsMkWp/iuVxKXfxjvJcwKDd9B/+DXuobqoQeDDJKDmvPQQkJxaBqJo142A\nU2yIP/wC+dR3CJs7Y24dYHNyxs1wcu2bsua7OtDXVjlGvBBxqdBWJcW5Ka1g7AxK\nJ/XrtHD+nreD0xx4BoBtew/83Ca0BBsrSYN1alLGXV9LPskQe+/ffMnkD/2RtQ77\nX7vQSZVm0h7mEEYE1ksETTAbw9juu8oa3lwqRz37CfmkUfianQ/EWGHOJW4nooKw\n8KSeCEMk/ftWtsSzox1IgY+RXL+a5gEzV55BgRtOBVx3w5CTKerpuSc6k6FBvKS6\nPkgCRTLu/ImKr2CGyxW5EcGHO9SQN09xEsIZB+TOQL5dLzF/q5g=\n=45fp\n-----END PGP SIGNATURE-----", "payload": "tree b81e523df5e8323bb8539835605e4d18eeba6be3\nparent 78bc89b4fc3713869e421048a439e4ca7c6c1bfe\nauthor Aaron Hill <aa1ronham@gmail.com> 1601743906 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1601827611 -0400\n\nMove some helper functions around\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/186d59a3ecc59e2994f28b1bd2f1110be20c51c1", "html_url": "https://github.com/rust-lang/rust/commit/186d59a3ecc59e2994f28b1bd2f1110be20c51c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/186d59a3ecc59e2994f28b1bd2f1110be20c51c1/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78bc89b4fc3713869e421048a439e4ca7c6c1bfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/78bc89b4fc3713869e421048a439e4ca7c6c1bfe", "html_url": "https://github.com/rust-lang/rust/commit/78bc89b4fc3713869e421048a439e4ca7c6c1bfe"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "bb5e7078291fb8442d1b7da736ec5908ca79b439", "filename": "src/shims/os_str.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/186d59a3ecc59e2994f28b1bd2f1110be20c51c1/src%2Fshims%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186d59a3ecc59e2994f28b1bd2f1110be20c51c1/src%2Fshims%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fos_str.rs?ref=186d59a3ecc59e2994f28b1bd2f1110be20c51c1", "patch": "@@ -62,27 +62,28 @@ fn convert_path_separator<'a>(\n \n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n+\n+    #[cfg(unix)]\n+    fn bytes_to_os_str<'a>(&self, bytes: &'a [u8]) -> InterpResult<'tcx, &'a OsStr> {\n+        Ok(OsStr::from_bytes(bytes))\n+    }\n+    #[cfg(not(unix))]\n+    fn bytes_to_os_str<'a>(&self, bytes: &'a [u8]) -> InterpResult<'tcx, &'a OsStr> {\n+        let s = std::str::from_utf8(bytes)\n+            .map_err(|_| err_unsup_format!(\"{:?} is not a valid utf-8 string\", bytes))?;\n+        Ok(OsStr::new(s))\n+    }\n+\n     /// Helper function to read an OsString from a null-terminated sequence of bytes, which is what\n     /// the Unix APIs usually handle.\n     fn read_os_str_from_c_str<'a>(&'a self, scalar: Scalar<Tag>) -> InterpResult<'tcx, &'a OsStr>\n     where\n         'tcx: 'a,\n         'mir: 'a,\n     {\n-        #[cfg(unix)]\n-        fn bytes_to_os_str<'tcx, 'a>(bytes: &'a [u8]) -> InterpResult<'tcx, &'a OsStr> {\n-            Ok(OsStr::from_bytes(bytes))\n-        }\n-        #[cfg(not(unix))]\n-        fn bytes_to_os_str<'tcx, 'a>(bytes: &'a [u8]) -> InterpResult<'tcx, &'a OsStr> {\n-            let s = std::str::from_utf8(bytes)\n-                .map_err(|_| err_unsup_format!(\"{:?} is not a valid utf-8 string\", bytes))?;\n-            Ok(OsStr::new(s))\n-        }\n-\n         let this = self.eval_context_ref();\n         let bytes = this.memory.read_c_str(scalar)?;\n-        bytes_to_os_str(bytes)\n+        self.bytes_to_os_str(bytes)\n     }\n \n     /// Helper function to read an OsString from a 0x0000-terminated sequence of u16,\n@@ -107,6 +108,22 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         u16vec_to_osstring(u16_vec)\n     }\n \n+    #[cfg(unix)]\n+    fn os_str_to_bytes<'a>(&self, os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n+        Ok(os_str.as_bytes())\n+    }\n+\n+    #[cfg(not(unix))]\n+    fn os_str_to_bytes<'a>(&self, os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n+        // On non-unix platforms the best we can do to transform bytes from/to OS strings is to do the\n+        // intermediate transformation into strings. Which invalidates non-utf8 paths that are actually\n+        // valid.\n+        os_str\n+            .to_str()\n+            .map(|s| s.as_bytes())\n+            .ok_or_else(|| err_unsup_format!(\"{:?} is not a valid utf-8 string\", os_str).into())\n+    }\n+\n     /// Helper function to write an OsStr as a null-terminated sequence of bytes, which is what\n     /// the Unix APIs usually handle. This function returns `Ok((false, length))` without trying\n     /// to write if `size` is not large enough to fit the contents of `os_string` plus a null\n@@ -251,21 +268,4 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let os_str = convert_path_separator(Cow::Borrowed(path.as_os_str()), &this.tcx.sess.target.target.target_os, Pathconversion::HostToTarget);\n         this.write_os_str_to_wide_str(&os_str, scalar, size)\n     }\n-\n-    #[cfg(unix)]\n-    fn os_str_to_bytes<'a>(&mut self, os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n-        Ok(os_str.as_bytes())\n-    }\n-\n-    #[cfg(not(unix))]\n-    fn os_str_to_bytes<'a>(&mut self, os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n-        // On non-unix platforms the best we can do to transform bytes from/to OS strings is to do the\n-        // intermediate transformation into strings. Which invalidates non-utf8 paths that are actually\n-        // valid.\n-        os_str\n-            .to_str()\n-            .map(|s| s.as_bytes())\n-            .ok_or_else(|| err_unsup_format!(\"{:?} is not a valid utf-8 string\", os_str).into())\n-    }\n-\n }"}]}