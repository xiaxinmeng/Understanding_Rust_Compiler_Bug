{"sha": "99200f760bf588435ca53477bb1eaff34770db0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MjAwZjc2MGJmNTg4NDM1Y2E1MzQ3N2JiMWVhZmYzNDc3MGRiMGI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-11-05T13:33:23Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-11-05T19:11:29Z"}, "message": "Fix even more URLs", "tree": {"sha": "26ffd00a096c8a9ea7695eac97e5edd36e31f515", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26ffd00a096c8a9ea7695eac97e5edd36e31f515"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99200f760bf588435ca53477bb1eaff34770db0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99200f760bf588435ca53477bb1eaff34770db0b", "html_url": "https://github.com/rust-lang/rust/commit/99200f760bf588435ca53477bb1eaff34770db0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99200f760bf588435ca53477bb1eaff34770db0b/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16ed8501ef35f0008fefd7f51746a10a7e7505ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/16ed8501ef35f0008fefd7f51746a10a7e7505ac", "html_url": "https://github.com/rust-lang/rust/commit/16ed8501ef35f0008fefd7f51746a10a7e7505ac"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "1e8e86add1a59ad8fcc7d508a4c04018db488847", "filename": "compiler/rustc_codegen_cranelift/src/discriminant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99200f760bf588435ca53477bb1eaff34770db0b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99200f760bf588435ca53477bb1eaff34770db0b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs?ref=99200f760bf588435ca53477bb1eaff34770db0b", "patch": "@@ -1,6 +1,6 @@\n //! Handling of enum discriminants\n //!\n-//! Adapted from https://github.com/rust-lang/rust/blob/d760df5aea483aae041c9a241e7acacf48f75035/src/librustc_codegen_ssa/mir/place.rs\n+//! Adapted from <https://github.com/rust-lang/rust/blob/d760df5aea483aae041c9a241e7acacf48f75035/src/librustc_codegen_ssa/mir/place.rs>\n \n use rustc_target::abi::{Int, TagEncoding, Variants};\n "}, {"sha": "22c36b928781be077af0f13617574c0e2d67cdd1", "filename": "compiler/rustc_middle/src/mir/coverage.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99200f760bf588435ca53477bb1eaff34770db0b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99200f760bf588435ca53477bb1eaff34770db0b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs?ref=99200f760bf588435ca53477bb1eaff34770db0b", "patch": "@@ -17,9 +17,9 @@ rustc_index::newtype_index! {\n impl ExpressionOperandId {\n     /// An expression operand for a \"zero counter\", as described in the following references:\n     ///\n-    /// * https://github.com/rust-lang/llvm-project/blob/llvmorg-8.0.0/llvm/docs/CoverageMappingFormat.rst#counter\n-    /// * https://github.com/rust-lang/llvm-project/blob/llvmorg-8.0.0/llvm/docs/CoverageMappingFormat.rst#tag\n-    /// * https://github.com/rust-lang/llvm-project/blob/llvmorg-8.0.0/llvm/docs/CoverageMappingFormat.rst#counter-expressions\n+    /// * <https://github.com/rust-lang/llvm-project/blob/llvmorg-8.0.0/llvm/docs/CoverageMappingFormat.rst#counter>\n+    /// * <https://github.com/rust-lang/llvm-project/blob/llvmorg-8.0.0/llvm/docs/CoverageMappingFormat.rst#tag>\n+    /// * <https://github.com/rust-lang/llvm-project/blob/llvmorg-8.0.0/llvm/docs/CoverageMappingFormat.rst#counter-expressions>\n     ///\n     /// This operand can be used to count two or more separate code regions with a single counter,\n     /// if they run sequentially with no branches, by injecting the `Counter` in a `BasicBlock` for"}, {"sha": "1e70f7605045ee5dd54c597f77ea4be70ec9aa4b", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99200f760bf588435ca53477bb1eaff34770db0b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99200f760bf588435ca53477bb1eaff34770db0b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=99200f760bf588435ca53477bb1eaff34770db0b", "patch": "@@ -228,7 +228,7 @@ pub struct CodegenUnit<'tcx> {\n \n /// Specifies the linkage type for a `MonoItem`.\n ///\n-/// See https://llvm.org/docs/LangRef.html#linkage-types for more details about these variants.\n+/// See <https://llvm.org/docs/LangRef.html#linkage-types> for more details about these variants.\n #[derive(Copy, Clone, PartialEq, Debug, TyEncodable, TyDecodable, HashStable)]\n pub enum Linkage {\n     External,"}, {"sha": "1c6937e685c65d3c6ceba23d3d10744cd8733261", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99200f760bf588435ca53477bb1eaff34770db0b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99200f760bf588435ca53477bb1eaff34770db0b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=99200f760bf588435ca53477bb1eaff34770db0b", "patch": "@@ -368,7 +368,7 @@ pub struct TypeckResults<'tcx> {\n     /// leads to a `vec![&&Option<i32>, &Option<i32>]`. Empty vectors are not stored.\n     ///\n     /// See:\n-    /// https://github.com/rust-lang/rfcs/blob/master/text/2005-match-ergonomics.md#definitions\n+    /// <https://github.com/rust-lang/rfcs/blob/master/text/2005-match-ergonomics.md#definitions>\n     pat_adjustments: ItemLocalMap<Vec<Ty<'tcx>>>,\n \n     /// Borrows"}, {"sha": "ac8ab71a1dc96ceea51d2626fa49a10d1566ee98", "filename": "compiler/rustc_mir/src/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99200f760bf588435ca53477bb1eaff34770db0b/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99200f760bf588435ca53477bb1eaff34770db0b/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=99200f760bf588435ca53477bb1eaff34770db0b", "patch": "@@ -1364,7 +1364,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// terms that the \"longer free region\" `'a` outlived the \"shorter free region\" `'b`.\n     ///\n     /// More details can be found in this blog post by Niko:\n-    /// http://smallcultfollowing.com/babysteps/blog/2019/01/17/polonius-and-region-errors/\n+    /// <http://smallcultfollowing.com/babysteps/blog/2019/01/17/polonius-and-region-errors/>\n     ///\n     /// In the canonical example\n     ///"}, {"sha": "46de5dba6e0ed708415f9f63de86d808ca046262", "filename": "compiler/rustc_mir/src/transform/dest_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99200f760bf588435ca53477bb1eaff34770db0b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99200f760bf588435ca53477bb1eaff34770db0b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs?ref=99200f760bf588435ca53477bb1eaff34770db0b", "patch": "@@ -8,7 +8,7 @@\n //! inside a single block to shuffle a value around unnecessarily.\n //!\n //! LLVM by itself is not good enough at eliminating these redundant copies (eg. see\n-//! https://github.com/rust-lang/rust/issues/32966), so this leaves some performance on the table\n+//! <https://github.com/rust-lang/rust/issues/32966>), so this leaves some performance on the table\n //! that we can regain by implementing an optimization for removing these assign statements in rustc\n //! itself. When this optimization runs fast enough, it can also speed up the constant evaluation\n //! and code generation phases of rustc due to the reduced number of statements and locals."}, {"sha": "bc85d45d86773615f92a67206136006c60ac28c4", "filename": "compiler/rustc_mir_build/src/thir/pattern/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99200f760bf588435ca53477bb1eaff34770db0b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99200f760bf588435ca53477bb1eaff34770db0b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs?ref=99200f760bf588435ca53477bb1eaff34770db0b", "patch": "@@ -8,7 +8,7 @@\n //! (b) each pattern is necessary (usefulness)\n //!\n //! The algorithm implemented here is a modified version of the one described in:\n-//! http://moscova.inria.fr/~maranget/papers/warn/index.html\n+//! <http://moscova.inria.fr/~maranget/papers/warn/index.html>\n //! However, to save future implementors from reading the original paper, we\n //! summarise the algorithm here to hopefully save time and be a little clearer\n //! (without being so rigorous).\n@@ -2040,7 +2040,7 @@ impl<'tcx> MissingConstructors<'tcx> {\n     }\n }\n \n-/// Algorithm from http://moscova.inria.fr/~maranget/papers/warn/index.html.\n+/// Algorithm from <http://moscova.inria.fr/~maranget/papers/warn/index.html>.\n /// The algorithm from the paper has been modified to correctly handle empty\n /// types. The changes are:\n ///   (0) We don't exit early if the pattern matrix has zero rows. We just"}, {"sha": "0dfacd78908babccf05fc7bc6ea4a53e01ca8275", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99200f760bf588435ca53477bb1eaff34770db0b/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99200f760bf588435ca53477bb1eaff34770db0b/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=99200f760bf588435ca53477bb1eaff34770db0b", "patch": "@@ -511,7 +511,7 @@ impl<'a> StringReader<'a> {\n     }\n \n     /// Note: It was decided to not add a test case, because it would be to big.\n-    /// https://github.com/rust-lang/rust/pull/50296#issuecomment-392135180\n+    /// <https://github.com/rust-lang/rust/pull/50296#issuecomment-392135180>\n     fn report_too_many_hashes(&self, start: BytePos, found: usize) -> ! {\n         self.fatal_span_(\n             start,"}, {"sha": "75d75433f1bf1ab44aed0c4220b71d200f6b403c", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99200f760bf588435ca53477bb1eaff34770db0b/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99200f760bf588435ca53477bb1eaff34770db0b/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=99200f760bf588435ca53477bb1eaff34770db0b", "patch": "@@ -38,7 +38,7 @@ use std::{cmp, fmt, mem};\n /// Implemented to visit all `DefId`s in a type.\n /// Visiting `DefId`s is useful because visibilities and reachabilities are attached to them.\n /// The idea is to visit \"all components of a type\", as documented in\n-/// https://github.com/rust-lang/rfcs/blob/master/text/2145-type-privacy.md#how-to-determine-visibility-of-a-type.\n+/// <https://github.com/rust-lang/rfcs/blob/master/text/2145-type-privacy.md#how-to-determine-visibility-of-a-type>.\n /// The default type visitor (`TypeVisitor`) does most of the job, but it has some shortcomings.\n /// First, it doesn't have overridable `fn visit_trait_ref`, so we have to catch trait `DefId`s\n /// manually. Second, it doesn't visit some type components like signatures of fn types, or traits"}, {"sha": "32e0991733bd914eb712cc33a1220d60bca25dcd", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99200f760bf588435ca53477bb1eaff34770db0b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99200f760bf588435ca53477bb1eaff34770db0b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=99200f760bf588435ca53477bb1eaff34770db0b", "patch": "@@ -621,7 +621,7 @@ fn object_ty_for_trait<'tcx>(\n ///\n /// In practice, we cannot use `dyn Trait` explicitly in the obligation because it would result\n /// in a new check that `Trait` is object safe, creating a cycle (until object_safe_for_dispatch\n-/// is stabilized, see tracking issue https://github.com/rust-lang/rust/issues/43561).\n+/// is stabilized, see tracking issue <https://github.com/rust-lang/rust/issues/43561>).\n /// Instead, we fudge a little by introducing a new type parameter `U` such that\n /// `Self: Unsize<U>` and `U: Trait + ?Sized`, and use `U` in place of `dyn Trait`.\n /// Written as a chalk-style query:"}, {"sha": "cdde0941470121cd172bc0f9d8497bee772bc498", "filename": "library/core/src/future/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99200f760bf588435ca53477bb1eaff34770db0b/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99200f760bf588435ca53477bb1eaff34770db0b/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs?ref=99200f760bf588435ca53477bb1eaff34770db0b", "patch": "@@ -32,7 +32,7 @@ pub use poll_fn::{poll_fn, PollFn};\n /// This type is needed because:\n ///\n /// a) Generators cannot implement `for<'a, 'b> Generator<&'a mut Context<'b>>`, so we need to pass\n-///    a raw pointer (see https://github.com/rust-lang/rust/issues/68923).\n+///    a raw pointer (see <https://github.com/rust-lang/rust/issues/68923>).\n /// b) Raw pointers and `NonNull` aren't `Send` or `Sync`, so that would make every single future\n ///    non-Send/Sync as well, and we don't want that.\n ///"}, {"sha": "6dbf7c11b4c4ec87b53c90da40a0d61b2031ef87", "filename": "library/panic_unwind/src/dwarf/eh.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99200f760bf588435ca53477bb1eaff34770db0b/library%2Fpanic_unwind%2Fsrc%2Fdwarf%2Feh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99200f760bf588435ca53477bb1eaff34770db0b/library%2Fpanic_unwind%2Fsrc%2Fdwarf%2Feh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Fdwarf%2Feh.rs?ref=99200f760bf588435ca53477bb1eaff34770db0b", "patch": "@@ -1,9 +1,9 @@\n //! Parsing of GCC-style Language-Specific Data Area (LSDA)\n //! For details see:\n-//!   http://refspecs.linuxfoundation.org/LSB_3.0.0/LSB-PDA/LSB-PDA/ehframechpt.html\n-//!   http://mentorembedded.github.io/cxx-abi/exceptions.pdf\n-//!   http://www.airs.com/blog/archives/460\n-//!   http://www.airs.com/blog/archives/464\n+//!  * <http://refspecs.linuxfoundation.org/LSB_3.0.0/LSB-PDA/LSB-PDA/ehframechpt.html>\n+//!  * <http://mentorembedded.github.io/cxx-abi/exceptions.pdf>\n+//!  * <http://www.airs.com/blog/archives/460>\n+//!  * <http://www.airs.com/blog/archives/464>\n //!\n //! A reference implementation may be found in the GCC source tree\n //! (`<root>/libgcc/unwind-c.c` as of this writing)."}, {"sha": "14f49bbf483373f7f12aa7dfa89cfc8df2e787a2", "filename": "library/panic_unwind/src/gcc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99200f760bf588435ca53477bb1eaff34770db0b/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99200f760bf588435ca53477bb1eaff34770db0b/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Fgcc.rs?ref=99200f760bf588435ca53477bb1eaff34770db0b", "patch": "@@ -4,9 +4,9 @@\n //! \"Exception Handling in LLVM\" (llvm.org/docs/ExceptionHandling.html) and\n //! documents linked from it.\n //! These are also good reads:\n-//!     https://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html\n-//!     http://monoinfinito.wordpress.com/series/exception-handling-in-c/\n-//!     http://www.airs.com/blog/index.php?s=exception+frames\n+//!  * <https://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html>\n+//!  * <http://monoinfinito.wordpress.com/series/exception-handling-in-c/>\n+//!  * <http://www.airs.com/blog/index.php?s=exception+frames>\n //!\n //! ## A brief summary\n //!"}, {"sha": "205524ad84fb7d2e64bec101bc6cb25c1cd93cd0", "filename": "src/bootstrap/toolstate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99200f760bf588435ca53477bb1eaff34770db0b/src%2Fbootstrap%2Ftoolstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99200f760bf588435ca53477bb1eaff34770db0b/src%2Fbootstrap%2Ftoolstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftoolstate.rs?ref=99200f760bf588435ca53477bb1eaff34770db0b", "patch": "@@ -152,7 +152,7 @@ impl Step for ToolStateCheck {\n     /// error if there are any.\n     ///\n     /// This also handles publishing the results to the `history` directory of\n-    /// the toolstate repo https://github.com/rust-lang-nursery/rust-toolstate\n+    /// the toolstate repo <https://github.com/rust-lang-nursery/rust-toolstate>\n     /// if the env var `TOOLSTATE_PUBLISH` is set. Note that there is a\n     /// *separate* step of updating the `latest.json` file and creating GitHub\n     /// issues and comments in `src/ci/publish_toolstate.sh`, which is only\n@@ -162,7 +162,7 @@ impl Step for ToolStateCheck {\n     /// The rules for failure are:\n     /// * If the PR modifies a tool, the status must be test-pass.\n     ///   NOTE: There is intent to change this, see\n-    ///   https://github.com/rust-lang/rust/issues/65000.\n+    ///   <https://github.com/rust-lang/rust/issues/65000>.\n     /// * All \"stable\" tools must be test-pass on the stable or beta branches.\n     /// * During beta promotion week, a PR is not allowed to \"regress\" a\n     ///   stable tool. That is, the status is not allowed to get worse"}, {"sha": "80f804174ed082e20527f8206cd6aef5bbf5eb19", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99200f760bf588435ca53477bb1eaff34770db0b/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99200f760bf588435ca53477bb1eaff34770db0b/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=99200f760bf588435ca53477bb1eaff34770db0b", "patch": "@@ -32,7 +32,7 @@ macro_rules! t {\n \n /// Reads an environment variable and adds it to dependencies.\n /// Supposed to be used for all variables except those set for build scripts by cargo\n-/// https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts\n+/// <https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts>\n pub fn tracked_env_var_os<K: AsRef<OsStr> + Display>(key: K) -> Option<OsString> {\n     println!(\"cargo:rerun-if-env-changed={}\", key);\n     env::var_os(key)"}, {"sha": "5eca54199d6c880626a4bcfbd2f91aaca64f5d60", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99200f760bf588435ca53477bb1eaff34770db0b/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99200f760bf588435ca53477bb1eaff34770db0b/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=99200f760bf588435ca53477bb1eaff34770db0b", "patch": "@@ -665,7 +665,7 @@ fn run_global_ctxt(\n     (krate, ctxt.renderinfo.into_inner(), ctxt.render_options)\n }\n \n-/// Due to https://github.com/rust-lang/rust/pull/73566,\n+/// Due to <https://github.com/rust-lang/rust/pull/73566>,\n /// the name resolution pass may find errors that are never emitted.\n /// If typeck is called after this happens, then we'll get an ICE:\n /// 'Res::Error found but not reported'. To avoid this, emit the errors now."}]}