{"sha": "7de9a72ca3769f55b415372f1f59f70ccf1f66fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkZTlhNzJjYTM3NjlmNTViNDE1MzcyZjFmNTlmNzBjY2YxZjY2ZmU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-02-29T11:59:37Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-02-29T12:00:58Z"}, "message": "parser: Remove `Parser::prev_span`", "tree": {"sha": "980ea542e33fad6a865034866028397a539c48e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/980ea542e33fad6a865034866028397a539c48e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7de9a72ca3769f55b415372f1f59f70ccf1f66fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7de9a72ca3769f55b415372f1f59f70ccf1f66fe", "html_url": "https://github.com/rust-lang/rust/commit/7de9a72ca3769f55b415372f1f59f70ccf1f66fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7de9a72ca3769f55b415372f1f59f70ccf1f66fe/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0ba4387c2730b0323bcd42170edf8477a799af7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0ba4387c2730b0323bcd42170edf8477a799af7", "html_url": "https://github.com/rust-lang/rust/commit/d0ba4387c2730b0323bcd42170edf8477a799af7"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "1e52d454e0dfd87d6322b188d970212f391443f7", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de9a72ca3769f55b415372f1f59f70ccf1f66fe/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de9a72ca3769f55b415372f1f59f70ccf1f66fe/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=7de9a72ca3769f55b415372f1f59f70ccf1f66fe", "patch": "@@ -1348,7 +1348,7 @@ impl<'a> Parser<'a> {\n             if self.normalized_token.span.rust_2018() { self.parse_asyncness() } else { Async::No };\n         if asyncness.is_async() {\n             // Feature-gate `async ||` closures.\n-            self.sess.gated_spans.gate(sym::async_closure, self.prev_span);\n+            self.sess.gated_spans.gate(sym::async_closure, self.normalized_prev_token.span);\n         }\n \n         let capture_clause = self.parse_capture_clause();"}, {"sha": "3b5130ab29aab7ebb24120b0bd9a56dd86997ac9", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7de9a72ca3769f55b415372f1f59f70ccf1f66fe/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de9a72ca3769f55b415372f1f59f70ccf1f66fe/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=7de9a72ca3769f55b415372f1f59f70ccf1f66fe", "patch": "@@ -568,7 +568,7 @@ impl<'a> Parser<'a> {\n             && self.look_ahead(1, |t| t.is_non_raw_ident_where(|i| i.name != kw::As))\n         {\n             self.bump(); // `default`\n-            Defaultness::Default(self.prev_span)\n+            Defaultness::Default(self.normalized_prev_token.span)\n         } else {\n             Defaultness::Final\n         }"}, {"sha": "fc1c99dedf127526cab42af62612346966271e50", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7de9a72ca3769f55b415372f1f59f70ccf1f66fe/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de9a72ca3769f55b415372f1f59f70ccf1f66fe/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=7de9a72ca3769f55b415372f1f59f70ccf1f66fe", "patch": "@@ -101,8 +101,6 @@ pub struct Parser<'a> {\n     /// Use this if you need to check for `token::Ident` or `token::Lifetime` specifically,\n     /// this also includes edition checks for edition-specific keyword identifiers.\n     pub normalized_prev_token: Token,\n-    /// FIXME: Remove in favor of the equivalent `prev_token.span`.\n-    pub prev_span: Span,\n     restrictions: Restrictions,\n     /// Used to determine the path to externally loaded source files.\n     pub(super) directory: Directory,\n@@ -377,7 +375,6 @@ impl<'a> Parser<'a> {\n             normalized_token: Token::dummy(),\n             prev_token: Token::dummy(),\n             normalized_prev_token: Token::dummy(),\n-            prev_span: DUMMY_SP,\n             restrictions: Restrictions::empty(),\n             recurse_into_file_modules,\n             directory: Directory {\n@@ -848,9 +845,6 @@ impl<'a> Parser<'a> {\n         self.normalized_prev_token = self.normalized_token.take();\n         self.set_token(next_token);\n \n-        // Update fields derived from the previous token.\n-        self.prev_span = self.prev_token.span;\n-\n         // Diagnostics.\n         self.expected_tokens.clear();\n     }\n@@ -897,12 +891,20 @@ impl<'a> Parser<'a> {\n \n     /// Parses unsafety: `unsafe` or nothing.\n     fn parse_unsafety(&mut self) -> Unsafe {\n-        if self.eat_keyword(kw::Unsafe) { Unsafe::Yes(self.prev_span) } else { Unsafe::No }\n+        if self.eat_keyword(kw::Unsafe) {\n+            Unsafe::Yes(self.normalized_prev_token.span)\n+        } else {\n+            Unsafe::No\n+        }\n     }\n \n     /// Parses constness: `const` or nothing.\n     fn parse_constness(&mut self) -> Const {\n-        if self.eat_keyword(kw::Const) { Const::Yes(self.prev_span) } else { Const::No }\n+        if self.eat_keyword(kw::Const) {\n+            Const::Yes(self.normalized_prev_token.span)\n+        } else {\n+            Const::No\n+        }\n     }\n \n     /// Parses mutability (`mut` or nothing)."}]}