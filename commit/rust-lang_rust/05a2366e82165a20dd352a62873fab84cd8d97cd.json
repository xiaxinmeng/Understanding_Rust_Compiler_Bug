{"sha": "05a2366e82165a20dd352a62873fab84cd8d97cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YTIzNjZlODIxNjVhMjBkZDM1MmE2Mjg3M2ZhYjg0Y2Q4ZDk3Y2Q=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-07T01:41:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-07T01:41:16Z"}, "message": "Rollup merge of #82751 - RalfJung:offset_from, r=dtolnay\n\nimprove offset_from docs\n\n`@thomcc` pointed out that the current docs leave it kind of unclear how one can satisfy the \"no wrapping around `isize` or the address space\" requirement of `offset_from`, so make the docs clearer about that.\n\nFWIW, I don't think I entirely agree with that second paragraph about large objects (that I left mostly unchanged here). LLVM, to my knowledge, fundamentally assumes that all allocations fit into an `isize::MAX`. So in that sense creating a larger allocation is simply UB. I would expect a guarantee that Rust heap allocation methods will never return allocations larger than `isize::MAX` (or rather, Rust heap allocation methods should require that the `Layout` is no larger than `isize::MAX`). However, I cannot find any such requirement documented currently. Large allocations are not mentioned at all in the allocator docs, which is quite surprising -- even if we say that such allocations are not insta-UB (which I think is incompatible with LLVM), they are still extremely footgunny since `ptr::offset`/`ptr::add` do not support offsetting by more than `isize::MAX` bytes.\n\nFurthermore, the allocator docs don't even say anything about allocations wrapping around the address space. But that is certainly something allocators must ensure never happens; we cannot expect clients to defend against this.\n\nCc `@rust-lang/wg-allocators`", "tree": {"sha": "3fbf3b429579e533d99c2c342d22ebfa3a09bfa9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fbf3b429579e533d99c2c342d22ebfa3a09bfa9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05a2366e82165a20dd352a62873fab84cd8d97cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgRC88CRBK7hj4Ov3rIwAAdHIIAD10f7ZpS4RMZSGNmbUwsJJS\nIHPc4DsE0yu4+TMM1xIZrAEP0IRHkH73N0pmfbNV2GzBsCDI5LKEVTRCFG+f16Jb\nXQje9Kujq0jBRYAHf1IF7bE5ge0GYrM56NuOBTvyOpEQIFWgG2NpmHZ4Ex0J0l1O\nN7SEQRwmgKXsKVqkADjIkiWKGGFGaWrnm5iACDihGMuVskaUyGNzvE9bRCjbidE9\nMdQHizsNB1WZ3WPOjHHHBydUd+1PW9lzJjfQsD0gtmU0iBCEMpGkC92UTZ502lf+\nTpIKG4800TlAVUXsPIBdgZkHyQiJtSz/W+L3xGoTJJbWmdupJ56slxNqCkRBSOw=\n=kwO4\n-----END PGP SIGNATURE-----\n", "payload": "tree 3fbf3b429579e533d99c2c342d22ebfa3a09bfa9\nparent a5a825e6a33456836a18576aada23d52f757078f\nparent ebe0407dbf1e0e2135ca75c47d525f6217959eba\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1615081276 +0900\ncommitter GitHub <noreply@github.com> 1615081276 +0900\n\nRollup merge of #82751 - RalfJung:offset_from, r=dtolnay\n\nimprove offset_from docs\n\n`@thomcc` pointed out that the current docs leave it kind of unclear how one can satisfy the \"no wrapping around `isize` or the address space\" requirement of `offset_from`, so make the docs clearer about that.\n\nFWIW, I don't think I entirely agree with that second paragraph about large objects (that I left mostly unchanged here). LLVM, to my knowledge, fundamentally assumes that all allocations fit into an `isize::MAX`. So in that sense creating a larger allocation is simply UB. I would expect a guarantee that Rust heap allocation methods will never return allocations larger than `isize::MAX` (or rather, Rust heap allocation methods should require that the `Layout` is no larger than `isize::MAX`). However, I cannot find any such requirement documented currently. Large allocations are not mentioned at all in the allocator docs, which is quite surprising -- even if we say that such allocations are not insta-UB (which I think is incompatible with LLVM), they are still extremely footgunny since `ptr::offset`/`ptr::add` do not support offsetting by more than `isize::MAX` bytes.\n\nFurthermore, the allocator docs don't even say anything about allocations wrapping around the address space. But that is certainly something allocators must ensure never happens; we cannot expect clients to defend against this.\n\nCc `@rust-lang/wg-allocators`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05a2366e82165a20dd352a62873fab84cd8d97cd", "html_url": "https://github.com/rust-lang/rust/commit/05a2366e82165a20dd352a62873fab84cd8d97cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05a2366e82165a20dd352a62873fab84cd8d97cd/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5a825e6a33456836a18576aada23d52f757078f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5a825e6a33456836a18576aada23d52f757078f", "html_url": "https://github.com/rust-lang/rust/commit/a5a825e6a33456836a18576aada23d52f757078f"}, {"sha": "ebe0407dbf1e0e2135ca75c47d525f6217959eba", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebe0407dbf1e0e2135ca75c47d525f6217959eba", "html_url": "https://github.com/rust-lang/rust/commit/ebe0407dbf1e0e2135ca75c47d525f6217959eba"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "62ca07fc5a4e20f677f2e4c10d2f8c6725d2e3d5", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/05a2366e82165a20dd352a62873fab84cd8d97cd/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a2366e82165a20dd352a62873fab84cd8d97cd/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=05a2366e82165a20dd352a62873fab84cd8d97cd", "patch": "@@ -320,25 +320,31 @@ impl<T: ?Sized> *const T {\n     /// * Both pointers must be *derived from* a pointer to the same object.\n     ///   (See below for an example.)\n     ///\n-    /// * The distance between the pointers, **in bytes**, cannot overflow an `isize`.\n-    ///\n     /// * The distance between the pointers, in bytes, must be an exact multiple\n     ///   of the size of `T`.\n     ///\n+    /// * The distance between the pointers, **in bytes**, cannot overflow an `isize`.\n+    ///\n     /// * The distance being in bounds cannot rely on \"wrapping around\" the address space.\n     ///\n-    /// The compiler and standard library generally try to ensure allocations\n-    /// never reach a size where an offset is a concern. For instance, `Vec`\n-    /// and `Box` ensure they never allocate more than `isize::MAX` bytes, so\n-    /// `ptr_into_vec.offset_from(vec.as_ptr())` is always safe.\n+    /// Rust types are never larger than `isize::MAX` and Rust allocations never wrap around the\n+    /// address space, so two pointers within some value of any Rust type `T` will always satisfy\n+    /// the last two conditions. The standard library also generally ensures that allocations\n+    /// never reach a size where an offset is a concern. For instance, `Vec` and `Box` ensure they\n+    /// never allocate more than `isize::MAX` bytes, so `ptr_into_vec.offset_from(vec.as_ptr())`\n+    /// always satisfies the last two conditions.\n     ///\n-    /// Most platforms fundamentally can't even construct such an allocation.\n+    /// Most platforms fundamentally can't even construct such a large allocation.\n     /// For instance, no known 64-bit platform can ever serve a request\n     /// for 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\n     /// However, some 32-bit and 16-bit platforms may successfully serve a request for\n     /// more than `isize::MAX` bytes with things like Physical Address\n     /// Extension. As such, memory acquired directly from allocators or memory\n     /// mapped files *may* be too large to handle with this function.\n+    /// (Note that [`offset`] and [`add`] also have a similar limitation and hence cannot be used on\n+    /// such large allocations either.)\n+    ///\n+    /// [`add`]: #method.add\n     ///\n     /// # Panics\n     ///"}, {"sha": "a365b66d8fcf4d072fcc2ce5156f4ec4c4660465", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/05a2366e82165a20dd352a62873fab84cd8d97cd/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a2366e82165a20dd352a62873fab84cd8d97cd/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=05a2366e82165a20dd352a62873fab84cd8d97cd", "patch": "@@ -491,25 +491,31 @@ impl<T: ?Sized> *mut T {\n     /// * Both pointers must be *derived from* a pointer to the same object.\n     ///   (See below for an example.)\n     ///\n-    /// * The distance between the pointers, **in bytes**, cannot overflow an `isize`.\n-    ///\n     /// * The distance between the pointers, in bytes, must be an exact multiple\n     ///   of the size of `T`.\n     ///\n+    /// * The distance between the pointers, **in bytes**, cannot overflow an `isize`.\n+    ///\n     /// * The distance being in bounds cannot rely on \"wrapping around\" the address space.\n     ///\n-    /// The compiler and standard library generally try to ensure allocations\n-    /// never reach a size where an offset is a concern. For instance, `Vec`\n-    /// and `Box` ensure they never allocate more than `isize::MAX` bytes, so\n-    /// `ptr_into_vec.offset_from(vec.as_ptr())` is always safe.\n+    /// Rust types are never larger than `isize::MAX` and Rust allocations never wrap around the\n+    /// address space, so two pointers within some value of any Rust type `T` will always satisfy\n+    /// the last two conditions. The standard library also generally ensures that allocations\n+    /// never reach a size where an offset is a concern. For instance, `Vec` and `Box` ensure they\n+    /// never allocate more than `isize::MAX` bytes, so `ptr_into_vec.offset_from(vec.as_ptr())`\n+    /// always satisfies the last two conditions.\n     ///\n-    /// Most platforms fundamentally can't even construct such an allocation.\n+    /// Most platforms fundamentally can't even construct such a large allocation.\n     /// For instance, no known 64-bit platform can ever serve a request\n     /// for 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\n     /// However, some 32-bit and 16-bit platforms may successfully serve a request for\n     /// more than `isize::MAX` bytes with things like Physical Address\n     /// Extension. As such, memory acquired directly from allocators or memory\n     /// mapped files *may* be too large to handle with this function.\n+    /// (Note that [`offset`] and [`add`] also have a similar limitation and hence cannot be used on\n+    /// such large allocations either.)\n+    ///\n+    /// [`add`]: #method.add\n     ///\n     /// # Panics\n     ///"}]}