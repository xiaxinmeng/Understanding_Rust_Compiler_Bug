{"sha": "b6d55290a1e416e68bb258bb1e19861692476bd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZDU1MjkwYTFlNDE2ZTY4YmIyNThiYjFlMTk4NjE2OTI0NzZiZDI=", "commit": {"author": {"name": "Geobert Quach", "email": "geobert@protonmail.com", "date": "2019-09-15T17:51:34Z"}, "committer": {"name": "Geobert Quach", "email": "geobert@protonmail.com", "date": "2019-09-19T21:12:28Z"}, "message": "feat(assists): raw string <-> usual string manipulation\n\nFixes #1730", "tree": {"sha": "42b7241a3792a586ffffeded74e53924b5fad98d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42b7241a3792a586ffffeded74e53924b5fad98d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6d55290a1e416e68bb258bb1e19861692476bd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6d55290a1e416e68bb258bb1e19861692476bd2", "html_url": "https://github.com/rust-lang/rust/commit/b6d55290a1e416e68bb258bb1e19861692476bd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6d55290a1e416e68bb258bb1e19861692476bd2/comments", "author": {"login": "Geobert", "id": 72570, "node_id": "MDQ6VXNlcjcyNTcw", "avatar_url": "https://avatars.githubusercontent.com/u/72570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Geobert", "html_url": "https://github.com/Geobert", "followers_url": "https://api.github.com/users/Geobert/followers", "following_url": "https://api.github.com/users/Geobert/following{/other_user}", "gists_url": "https://api.github.com/users/Geobert/gists{/gist_id}", "starred_url": "https://api.github.com/users/Geobert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Geobert/subscriptions", "organizations_url": "https://api.github.com/users/Geobert/orgs", "repos_url": "https://api.github.com/users/Geobert/repos", "events_url": "https://api.github.com/users/Geobert/events{/privacy}", "received_events_url": "https://api.github.com/users/Geobert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Geobert", "id": 72570, "node_id": "MDQ6VXNlcjcyNTcw", "avatar_url": "https://avatars.githubusercontent.com/u/72570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Geobert", "html_url": "https://github.com/Geobert", "followers_url": "https://api.github.com/users/Geobert/followers", "following_url": "https://api.github.com/users/Geobert/following{/other_user}", "gists_url": "https://api.github.com/users/Geobert/gists{/gist_id}", "starred_url": "https://api.github.com/users/Geobert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Geobert/subscriptions", "organizations_url": "https://api.github.com/users/Geobert/orgs", "repos_url": "https://api.github.com/users/Geobert/repos", "events_url": "https://api.github.com/users/Geobert/events{/privacy}", "received_events_url": "https://api.github.com/users/Geobert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58dc3b16496cbcce14101605aa1214e263b91c87", "url": "https://api.github.com/repos/rust-lang/rust/commits/58dc3b16496cbcce14101605aa1214e263b91c87", "html_url": "https://github.com/rust-lang/rust/commit/58dc3b16496cbcce14101605aa1214e263b91c87"}], "stats": {"total": 387, "additions": 387, "deletions": 0}, "files": [{"sha": "756acf4153d79ea6b25f288dbb59df13e2a63909", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b6d55290a1e416e68bb258bb1e19861692476bd2/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6d55290a1e416e68bb258bb1e19861692476bd2/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=b6d55290a1e416e68bb258bb1e19861692476bd2", "patch": "@@ -96,6 +96,7 @@ mod fill_match_arms;\n mod merge_match_arms;\n mod introduce_variable;\n mod inline_local_variable;\n+mod raw_string;\n mod replace_if_let_with_match;\n mod split_import;\n mod remove_dbg;\n@@ -125,6 +126,10 @@ fn all_assists<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assis\n         move_guard::move_guard_to_arm_body,\n         move_guard::move_arm_cond_to_match_guard,\n         move_bounds::move_bounds_to_where_clause,\n+        raw_string::add_hash,\n+        raw_string::make_raw_string,\n+        raw_string::make_usual_string,\n+        raw_string::remove_hash,\n     ]\n }\n "}, {"sha": "59dc8d07858873ad3bf6238232bc262c3307550e", "filename": "crates/ra_assists/src/raw_string.rs", "status": "added", "additions": 326, "deletions": 0, "changes": 326, "blob_url": "https://github.com/rust-lang/rust/blob/b6d55290a1e416e68bb258bb1e19861692476bd2/crates%2Fra_assists%2Fsrc%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6d55290a1e416e68bb258bb1e19861692476bd2/crates%2Fra_assists%2Fsrc%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fraw_string.rs?ref=b6d55290a1e416e68bb258bb1e19861692476bd2", "patch": "@@ -0,0 +1,326 @@\n+use hir::db::HirDatabase;\r\n+use ra_syntax::{ast::AstNode, ast::Literal, TextRange, TextUnit};\r\n+\r\n+use crate::{Assist, AssistCtx, AssistId};\r\n+\r\n+pub(crate) fn make_raw_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\r\n+    let literal = ctx.node_at_offset::<Literal>()?;\r\n+    if literal.token().kind() == ra_syntax::SyntaxKind::STRING {\r\n+        ctx.add_action(AssistId(\"make_raw_string\"), \"make raw string\", |edit| {\r\n+            edit.target(literal.syntax().text_range());\r\n+            edit.insert(literal.syntax().text_range().start(), \"r\");\r\n+        });\r\n+        ctx.build()\r\n+    } else {\r\n+        None\r\n+    }\r\n+}\r\n+\r\n+pub(crate) fn make_usual_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\r\n+    let literal = ctx.node_at_offset::<Literal>()?;\r\n+    if literal.token().kind() == ra_syntax::SyntaxKind::RAW_STRING {\r\n+        ctx.add_action(AssistId(\"make_usual_string\"), \"make usual string\", |edit| {\r\n+            let text = literal.syntax().text();\r\n+            let usual_start_pos = text.find_char('\"').unwrap(); // we have a RAW_STRING\r\n+            let end = literal.syntax().text_range().end();\r\n+            dbg!(&end);\r\n+            let mut i = 0;\r\n+            let mut pos = 0;\r\n+            let mut c = text.char_at(end - TextUnit::from(i));\r\n+            while c != Some('\"') {\r\n+                if c != None {\r\n+                    pos += 1;\r\n+                }\r\n+                i += 1;\r\n+                c = text.char_at(end - TextUnit::from(i));\r\n+            }\r\n+\r\n+            edit.target(literal.syntax().text_range());\r\n+            edit.delete(TextRange::from_to(\r\n+                literal.syntax().text_range().start(),\r\n+                literal.syntax().text_range().start() + usual_start_pos,\r\n+            ));\r\n+            edit.delete(TextRange::from_to(\r\n+                literal.syntax().text_range().end() - TextUnit::from(pos),\r\n+                literal.syntax().text_range().end(),\r\n+            ));\r\n+        });\r\n+        ctx.build()\r\n+    } else {\r\n+        None\r\n+    }\r\n+}\r\n+\r\n+pub(crate) fn add_hash(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\r\n+    let literal = ctx.node_at_offset::<Literal>()?;\r\n+    if literal.token().kind() == ra_syntax::SyntaxKind::RAW_STRING {\r\n+        ctx.add_action(AssistId(\"add_hash\"), \"add hash to raw string\", |edit| {\r\n+            edit.target(literal.syntax().text_range());\r\n+            edit.insert(literal.syntax().text_range().start() + TextUnit::from(1), \"#\");\r\n+            edit.insert(literal.syntax().text_range().end(), \"#\");\r\n+        });\r\n+        ctx.build()\r\n+    } else {\r\n+        None\r\n+    }\r\n+}\r\n+\r\n+pub(crate) fn remove_hash(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\r\n+    let literal = ctx.node_at_offset::<Literal>()?;\r\n+    if literal.token().kind() == ra_syntax::SyntaxKind::RAW_STRING {\r\n+        if !literal.syntax().text().contains_char('#') {\r\n+            return None;\r\n+        }\r\n+        ctx.add_action(AssistId(\"remove_hash\"), \"remove hash from raw string\", |edit| {\r\n+            edit.target(literal.syntax().text_range());\r\n+            edit.delete(TextRange::from_to(\r\n+                literal.syntax().text_range().start() + TextUnit::from(1),\r\n+                literal.syntax().text_range().start() + TextUnit::from(2),\r\n+            ));\r\n+            edit.delete(TextRange::from_to(\r\n+                literal.syntax().text_range().end() - TextUnit::from(1),\r\n+                literal.syntax().text_range().end(),\r\n+            ));\r\n+        });\r\n+        ctx.build()\r\n+    } else {\r\n+        None\r\n+    }\r\n+}\r\n+\r\n+#[cfg(test)]\r\n+mod test {\r\n+    use super::*;\r\n+    use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\r\n+\r\n+    #[test]\r\n+    fn make_raw_string_target() {\r\n+        check_assist_target(\r\n+            make_raw_string,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>\"random string\";\r\n+            }\r\n+            \"#,\r\n+            r#\"\"random string\"\"#,\r\n+        );\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn make_raw_string_works() {\r\n+        check_assist(\r\n+            make_raw_string,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>\"random string\";\r\n+            }\r\n+            \"#,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>r\"random string\";\r\n+            }\r\n+            \"#,\r\n+        )\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn make_raw_string_not_works() {\r\n+        check_assist_not_applicable(\r\n+            make_raw_string,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>r\"random string\";\r\n+            }\r\n+            \"#,\r\n+        );\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn add_hash_target() {\r\n+        check_assist_target(\r\n+            add_hash,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>r\"random string\";\r\n+            }\r\n+            \"#,\r\n+            r#\"r\"random string\"\"#,\r\n+        );\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn add_hash_works() {\r\n+        check_assist(\r\n+            add_hash,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>r\"random string\";\r\n+            }\r\n+            \"#,\r\n+            r##\"\r\n+            fn f() {\r\n+                let s = <|>r#\"random string\"#;\r\n+            }\r\n+            \"##,\r\n+        )\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn add_more_hash_works() {\r\n+        check_assist(\r\n+            add_hash,\r\n+            r##\"\r\n+            fn f() {\r\n+                let s = <|>r#\"random string\"#;\r\n+            }\r\n+            \"##,\r\n+            r###\"\r\n+            fn f() {\r\n+                let s = <|>r##\"random string\"##;\r\n+            }\r\n+            \"###,\r\n+        )\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn add_hash_not_works() {\r\n+        check_assist_not_applicable(\r\n+            add_hash,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>\"random string\";\r\n+            }\r\n+            \"#,\r\n+        );\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn remove_hash_target() {\r\n+        check_assist_target(\r\n+            remove_hash,\r\n+            r##\"\r\n+            fn f() {\r\n+                let s = <|>r#\"random string\"#;\r\n+            }\r\n+            \"##,\r\n+            r##\"r#\"random string\"#\"##,\r\n+        );\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn remove_hash_works() {\r\n+        check_assist(\r\n+            remove_hash,\r\n+            r##\"\r\n+            fn f() {\r\n+                let s = <|>r#\"random string\"#;\r\n+            }\r\n+            \"##,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>r\"random string\";\r\n+            }\r\n+            \"#,\r\n+        )\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn remove_more_hash_works() {\r\n+        check_assist(\r\n+            remove_hash,\r\n+            r###\"\r\n+            fn f() {\r\n+                let s = <|>r##\"random string\"##;\r\n+            }\r\n+            \"###,\r\n+            r##\"\r\n+            fn f() {\r\n+                let s = <|>r#\"random string\"#;\r\n+            }\r\n+            \"##,\r\n+        )\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn remove_hash_not_works() {\r\n+        check_assist_not_applicable(\r\n+            remove_hash,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>\"random string\";\r\n+            }\r\n+            \"#,\r\n+        );\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn remove_hash_no_hash_not_works() {\r\n+        check_assist_not_applicable(\r\n+            remove_hash,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>r\"random string\";\r\n+            }\r\n+            \"#,\r\n+        );\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn make_usual_string_target() {\r\n+        check_assist_target(\r\n+            make_usual_string,\r\n+            r##\"\r\n+            fn f() {\r\n+                let s = <|>r#\"random string\"#;\r\n+            }\r\n+            \"##,\r\n+            r##\"r#\"random string\"#\"##,\r\n+        );\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn make_usual_string_works() {\r\n+        check_assist(\r\n+            make_usual_string,\r\n+            r##\"\r\n+            fn f() {\r\n+                let s = <|>r#\"random string\"#;\r\n+            }\r\n+            \"##,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>\"random string\";\r\n+            }\r\n+            \"#,\r\n+        )\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn make_usual_string_more_hash_works() {\r\n+        check_assist(\r\n+            make_usual_string,\r\n+            r###\"\r\n+            fn f() {\r\n+                let s = <|>r##\"random string\"##;\r\n+            }\r\n+            \"###,\r\n+            r##\"\r\n+            fn f() {\r\n+                let s = <|>\"random string\";\r\n+            }\r\n+            \"##,\r\n+        )\r\n+    }\r\n+\r\n+    #[test]\r\n+    fn make_usual_string_not_works() {\r\n+        check_assist_not_applicable(\r\n+            make_usual_string,\r\n+            r#\"\r\n+            fn f() {\r\n+                let s = <|>\"random string\";\r\n+            }\r\n+            \"#,\r\n+        );\r\n+    }\r\n+}\r"}, {"sha": "93e565315ef8401d74e05b1f8b885c8c1fca755b", "filename": "docs/user/features.md", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b6d55290a1e416e68bb258bb1e19861692476bd2/docs%2Fuser%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/b6d55290a1e416e68bb258bb1e19861692476bd2/docs%2Fuser%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Ffeatures.md?ref=b6d55290a1e416e68bb258bb1e19861692476bd2", "patch": "@@ -445,6 +445,62 @@ fn foo<T: u32, F: FnOnce(T) -> T>() {}\n fn foo<T, F>() where T: u32, F: FnOnce(T) -> T {}\n ```\n \n+- Make raw string\n+\n+```rust\n+// before:\n+fn f() {\n+    let s = <|>\"abcd\";\n+}\n+\n+// after:\n+fn f() {\n+    let s = <|>r\"abcd\";\n+}\n+```\n+\n+- Make usual string\n+\n+```rust\n+// before:\n+fn f() {\n+    let s = <|>r#\"abcd\"#;\n+}\n+\n+// after:\n+fn f() {\n+    let s = <|>\"abcd\";\n+}\n+```\n+\n+- Add hash\n+\n+```rust\n+// before:\n+fn f() {\n+    let s = <|>r\"abcd\";\n+}\n+\n+// after:\n+fn f() {\n+    let s = <|>r#\"abcd\"#;\n+}\n+```\n+\n+- Remove hash\n+\n+```rust\n+// before:\n+fn f() {\n+    let s = <|>r#\"abcd\"#;\n+}\n+\n+// after:\n+fn f() {\n+    let s = <|>r\"abcd\";\n+}\n+```\n+\n ### Magic Completions\n \n In addition to usual reference completion, rust-analyzer provides some \u2728magic\u2728"}]}