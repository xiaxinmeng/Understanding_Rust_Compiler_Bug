{"sha": "5043ea269da73e96fbadc7c443aec01f087dabe9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNDNlYTI2OWRhNzNlOTZmYmFkYzdjNDQzYWVjMDFmMDg3ZGFiZTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-29T06:35:22Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-29T23:06:10Z"}, "message": "core::rt: Add run_in_mt_newsched_task test function", "tree": {"sha": "5d660e66d133aaa2f0a8ebfa3f3b763e2db95335", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d660e66d133aaa2f0a8ebfa3f3b763e2db95335"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5043ea269da73e96fbadc7c443aec01f087dabe9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5043ea269da73e96fbadc7c443aec01f087dabe9", "html_url": "https://github.com/rust-lang/rust/commit/5043ea269da73e96fbadc7c443aec01f087dabe9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5043ea269da73e96fbadc7c443aec01f087dabe9/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed8c3594bc86dd366e729d02c34915c783e6ac81", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed8c3594bc86dd366e729d02c34915c783e6ac81", "html_url": "https://github.com/rust-lang/rust/commit/ed8c3594bc86dd366e729d02c34915c783e6ac81"}], "stats": {"total": 63, "additions": 61, "deletions": 2}, "files": [{"sha": "a66e4f09fe72b242e68ea2ed8bac2ee25a38c03f", "filename": "src/libcore/rt/test.rs", "status": "modified", "additions": 61, "deletions": 2, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/5043ea269da73e96fbadc7c443aec01f087dabe9/src%2Flibcore%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5043ea269da73e96fbadc7c443aec01f087dabe9/src%2Flibcore%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Ftest.rs?ref=5043ea269da73e96fbadc7c443aec01f087dabe9", "patch": "@@ -9,14 +9,20 @@\n // except according to those terms.\n \n use uint;\n-use option::*;\n+use option::{Option, Some, None};\n use cell::Cell;\n+use clone::Clone;\n+use container::Container;\n+use vec::OwnedVector;\n use result::{Result, Ok, Err};\n+use unstable::run_in_bare_thread;\n use super::io::net::ip::{IpAddr, Ipv4};\n use rt::task::Task;\n use rt::thread::Thread;\n use rt::local::Local;\n-use rt::sched::Scheduler;\n+use rt::sched::{Scheduler, Coroutine};\n+use rt::sleeper_list::SleeperList;\n+use rt::work_queue::WorkQueue;\n \n pub fn new_test_uv_sched() -> Scheduler {\n     use rt::uv::uvio::UvEventLoop;\n@@ -46,6 +52,59 @@ pub fn run_in_newsched_task(f: ~fn()) {\n     }\n }\n \n+/// Create more than one scheduler and run a function in a task\n+/// in one of the schedulers. The schedulers will stay alive\n+/// until the function `f` returns.\n+pub fn run_in_mt_newsched_task(f: ~fn()) {\n+    use rt::uv::uvio::UvEventLoop;\n+\n+    let f_cell = Cell(f);\n+\n+    do run_in_bare_thread {\n+        static N: uint = 2;\n+\n+        let sleepers = SleeperList::new();\n+        let work_queue = WorkQueue::new();\n+\n+        let mut handles = ~[];\n+        let mut scheds = ~[];\n+\n+        for uint::range(0, N) |i| {\n+            let loop_ = ~UvEventLoop::new();\n+            let mut sched = ~Scheduler::new(loop_, work_queue.clone(), sleepers.clone());\n+            let handle = sched.make_handle();\n+            handles.push(handle);\n+            scheds.push(sched);\n+        }\n+\n+        let f_cell = Cell(f_cell.take());\n+        let handles = handles; // Freeze\n+        let main_task = ~do Coroutine::new(&mut scheds[0].stack_pool) {\n+            f_cell.take()();\n+            // Hold on to handles until the function exits. This keeps the schedulers alive.\n+            let _captured_handles = &handles;\n+        };\n+\n+        scheds[0].enqueue_task(main_task);\n+\n+        let mut threads = ~[];\n+\n+        while !scheds.is_empty() {\n+            let sched = scheds.pop();\n+            let sched_cell = Cell(sched);\n+            let thread = do Thread::start {\n+                let mut sched = sched_cell.take();\n+                sched.run();\n+            };\n+\n+            threads.push(thread);\n+        }\n+\n+        // Wait for schedulers\n+        let _threads = threads;\n+    }\n+}\n+\n /// Test tasks will abort on failure instead of unwinding\n pub fn spawntask(f: ~fn()) {\n     use super::sched::*;"}]}