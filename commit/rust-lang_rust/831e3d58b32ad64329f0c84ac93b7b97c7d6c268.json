{"sha": "831e3d58b32ad64329f0c84ac93b7b97c7d6c268", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMWUzZDU4YjMyYWQ2NDMyOWYwYzg0YWM5M2I3Yjk3YzdkNmMyNjg=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-08-12T12:33:07Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-08-12T12:33:07Z"}, "message": "Replace String with &'static str", "tree": {"sha": "cb0aea977a86552885aaa0183884a255a8925d14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb0aea977a86552885aaa0183884a255a8925d14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/831e3d58b32ad64329f0c84ac93b7b97c7d6c268", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/831e3d58b32ad64329f0c84ac93b7b97c7d6c268", "html_url": "https://github.com/rust-lang/rust/commit/831e3d58b32ad64329f0c84ac93b7b97c7d6c268", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/831e3d58b32ad64329f0c84ac93b7b97c7d6c268/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c51fb7aca531b98e01a8a71a30bb35d1376efe02", "url": "https://api.github.com/repos/rust-lang/rust/commits/c51fb7aca531b98e01a8a71a30bb35d1376efe02", "html_url": "https://github.com/rust-lang/rust/commit/c51fb7aca531b98e01a8a71a30bb35d1376efe02"}], "stats": {"total": 64, "additions": 31, "deletions": 33}, "files": [{"sha": "481b13a8789fe9c7c2001700413f59fb958fcac1", "filename": "crates/ra_hir_def/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/831e3d58b32ad64329f0c84ac93b7b97c7d6c268/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831e3d58b32ad64329f0c84ac93b7b97c7d6c268/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs?ref=831e3d58b32ad64329f0c84ac93b7b97c7d6c268", "patch": "@@ -15,8 +15,8 @@ pub struct UnresolvedModule {\n }\n \n impl Diagnostic for UnresolvedModule {\n-    fn name(&self) -> String {\n-        \"unresolved-module\".to_string()\n+    fn name(&self) -> &'static str {\n+        \"unresolved-module\"\n     }\n     fn message(&self) -> String {\n         \"unresolved module\".to_string()"}, {"sha": "507132a131b24f191346bca93574c044e16b6146", "filename": "crates/ra_hir_expand/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/831e3d58b32ad64329f0c84ac93b7b97c7d6c268/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831e3d58b32ad64329f0c84ac93b7b97c7d6c268/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs?ref=831e3d58b32ad64329f0c84ac93b7b97c7d6c268", "patch": "@@ -21,7 +21,7 @@ use ra_syntax::{SyntaxNode, SyntaxNodePtr};\n use crate::{db::AstDatabase, InFile};\n \n pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n-    fn name(&self) -> String;\n+    fn name(&self) -> &'static str;\n     fn message(&self) -> String;\n     fn source(&self) -> InFile<SyntaxNodePtr>;\n     fn as_any(&self) -> &(dyn Any + Send + 'static);"}, {"sha": "56acd3bbf4a446f9264aa76adbf216453dad9770", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/831e3d58b32ad64329f0c84ac93b7b97c7d6c268/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831e3d58b32ad64329f0c84ac93b7b97c7d6c268/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=831e3d58b32ad64329f0c84ac93b7b97c7d6c268", "patch": "@@ -33,8 +33,8 @@ pub struct NoSuchField {\n }\n \n impl Diagnostic for NoSuchField {\n-    fn name(&self) -> String {\n-        \"no-such-field\".to_string()\n+    fn name(&self) -> &'static str {\n+        \"no-such-field\"\n     }\n \n     fn message(&self) -> String {\n@@ -68,8 +68,8 @@ pub struct MissingFields {\n }\n \n impl Diagnostic for MissingFields {\n-    fn name(&self) -> String {\n-        \"missing-structure-fields\".to_string()\n+    fn name(&self) -> &'static str {\n+        \"missing-structure-fields\"\n     }\n     fn message(&self) -> String {\n         let mut buf = String::from(\"Missing structure fields:\\n\");\n@@ -104,8 +104,8 @@ pub struct MissingPatFields {\n }\n \n impl Diagnostic for MissingPatFields {\n-    fn name(&self) -> String {\n-        \"missing-pat-fields\".to_string()\n+    fn name(&self) -> &'static str {\n+        \"missing-pat-fields\"\n     }\n     fn message(&self) -> String {\n         let mut buf = String::from(\"Missing structure fields:\\n\");\n@@ -130,8 +130,8 @@ pub struct MissingMatchArms {\n }\n \n impl Diagnostic for MissingMatchArms {\n-    fn name(&self) -> String {\n-        \"missing-match-arm\".to_string()\n+    fn name(&self) -> &'static str {\n+        \"missing-match-arm\"\n     }\n     fn message(&self) -> String {\n         String::from(\"Missing match arm\")\n@@ -151,8 +151,8 @@ pub struct MissingOkInTailExpr {\n }\n \n impl Diagnostic for MissingOkInTailExpr {\n-    fn name(&self) -> String {\n-        \"missing-ok-in-tail-expr\".to_string()\n+    fn name(&self) -> &'static str {\n+        \"missing-ok-in-tail-expr\"\n     }\n     fn message(&self) -> String {\n         \"wrap return expression in Ok\".to_string()\n@@ -182,8 +182,8 @@ pub struct BreakOutsideOfLoop {\n }\n \n impl Diagnostic for BreakOutsideOfLoop {\n-    fn name(&self) -> String {\n-        \"break-outside-of-loop\".to_string()\n+    fn name(&self) -> &'static str {\n+        \"break-outside-of-loop\"\n     }\n     fn message(&self) -> String {\n         \"break outside of loop\".to_string()\n@@ -213,8 +213,8 @@ pub struct MissingUnsafe {\n }\n \n impl Diagnostic for MissingUnsafe {\n-    fn name(&self) -> String {\n-        \"missing-unsafe\".to_string()\n+    fn name(&self) -> &'static str {\n+        \"missing-unsafe\"\n     }\n     fn message(&self) -> String {\n         format!(\"This operation is unsafe and requires an unsafe function or block\")\n@@ -246,8 +246,8 @@ pub struct MismatchedArgCount {\n }\n \n impl Diagnostic for MismatchedArgCount {\n-    fn name(&self) -> String {\n-        \"mismatched-arg-count\".to_string()\n+    fn name(&self) -> &'static str {\n+        \"mismatched-arg-count\"\n     }\n     fn message(&self) -> String {\n         let s = if self.expected == 1 { \"\" } else { \"s\" };"}, {"sha": "d97bde939ea2c2ebb60f01545fa7ae5905615715", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/831e3d58b32ad64329f0c84ac93b7b97c7d6c268/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831e3d58b32ad64329f0c84ac93b7b97c7d6c268/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=831e3d58b32ad64329f0c84ac93b7b97c7d6c268", "patch": "@@ -63,7 +63,7 @@ pub(crate) fn diagnostics(\n                     .into(),\n             );\n             res.borrow_mut().push(Diagnostic {\n-                name: Some(d.name()),\n+                name: Some(d.name().into()),\n                 range: sema.diagnostics_range(d).range,\n                 message: d.message(),\n                 severity: Severity::Error,\n@@ -98,7 +98,7 @@ pub(crate) fn diagnostics(\n             };\n \n             res.borrow_mut().push(Diagnostic {\n-                name: Some(d.name()),\n+                name: Some(d.name().into()),\n                 range: sema.diagnostics_range(d).range,\n                 message: d.message(),\n                 severity: Severity::Error,\n@@ -112,7 +112,7 @@ pub(crate) fn diagnostics(\n             let source_change = SourceFileEdit { file_id, edit }.into();\n             let fix = Fix::new(\"Wrap with ok\", source_change);\n             res.borrow_mut().push(Diagnostic {\n-                name: Some(d.name()),\n+                name: Some(d.name().into()),\n                 range: sema.diagnostics_range(d).range,\n                 message: d.message(),\n                 severity: Severity::Error,\n@@ -121,7 +121,7 @@ pub(crate) fn diagnostics(\n         })\n         .on::<hir::diagnostics::NoSuchField, _>(|d| {\n             res.borrow_mut().push(Diagnostic {\n-                name: Some(d.name()),\n+                name: Some(d.name().into()),\n                 range: sema.diagnostics_range(d).range,\n                 message: d.message(),\n                 severity: Severity::Error,\n@@ -133,16 +133,16 @@ pub(crate) fn diagnostics(\n \n     if !analysis_config.disabled_diagnostics.is_empty() {\n         // Do not collect disabled diagnostics.\n-        sink_builder = sink_builder\n-            .filter(|diag| !analysis_config.disabled_diagnostics.contains(&diag.name()));\n+        sink_builder =\n+            sink_builder.filter(|diag| !analysis_config.disabled_diagnostics.contains(diag.name()));\n     }\n \n     // Finalize the `DiagnosticSink` building process.\n     let mut sink = sink_builder\n         // Diagnostics not handled above get no fix and default treatment.\n         .build(|d| {\n             res.borrow_mut().push(Diagnostic {\n-                name: Some(d.name()),\n+                name: Some(d.name().into()),\n                 message: d.message(),\n                 range: sema.diagnostics_range(d).range,\n                 severity: Severity::Error,\n@@ -313,6 +313,7 @@ fn check_struct_shorthand_initialization(\n \n #[cfg(test)]\n mod tests {\n+    use std::collections::HashSet;\n     use stdx::trim_indent;\n     use test_utils::assert_eq_text;\n \n@@ -385,12 +386,9 @@ mod tests {\n \n     /// Takes a multi-file input fixture with annotated cursor position and the list of disabled diagnostics,\n     /// and checks that provided diagnostics aren't spawned during analysis.\n-    fn check_disabled_diagnostics(\n-        ra_fixture: &str,\n-        disabled_diagnostics: impl IntoIterator<Item = String>,\n-    ) {\n-        let disabled_diagnostics: std::collections::HashSet<_> =\n-            disabled_diagnostics.into_iter().collect();\n+    fn check_disabled_diagnostics(ra_fixture: &str, disabled_diagnostics: &[&'static str]) {\n+        let disabled_diagnostics: HashSet<_> =\n+            disabled_diagnostics.into_iter().map(|diag| diag.to_string()).collect();\n \n         let mock = MockAnalysis::with_files(ra_fixture);\n         let files = mock.files().map(|(it, _)| it).collect::<Vec<_>>();\n@@ -871,6 +869,6 @@ struct Foo {\n \n     #[test]\n     fn test_disabled_diagnostics() {\n-        check_disabled_diagnostics(r#\"mod foo;\"#, vec![\"unresolved-module\".to_string()]);\n+        check_disabled_diagnostics(r#\"mod foo;\"#, &vec![\"unresolved-module\"]);\n     }\n }"}]}