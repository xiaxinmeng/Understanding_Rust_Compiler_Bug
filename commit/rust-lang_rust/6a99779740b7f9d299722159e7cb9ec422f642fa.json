{"sha": "6a99779740b7f9d299722159e7cb9ec422f642fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhOTk3Nzk3NDBiN2Y5ZDI5OTcyMjE1OWU3Y2I5ZWM0MjJmNjQyZmE=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-04-07T01:01:00Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-04-07T01:01:00Z"}, "message": "Rename ty_size -> type_size and ty_to_repr -> type_repr.", "tree": {"sha": "d91a613ed82dd77aaead2903374626e1ed34cd1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d91a613ed82dd77aaead2903374626e1ed34cd1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a99779740b7f9d299722159e7cb9ec422f642fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a99779740b7f9d299722159e7cb9ec422f642fa", "html_url": "https://github.com/rust-lang/rust/commit/6a99779740b7f9d299722159e7cb9ec422f642fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a99779740b7f9d299722159e7cb9ec422f642fa/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c55320a3db854089442f36a3cd6cb5ef4bbae2c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c55320a3db854089442f36a3cd6cb5ef4bbae2c6", "html_url": "https://github.com/rust-lang/rust/commit/c55320a3db854089442f36a3cd6cb5ef4bbae2c6"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "342f94ca9bf6ddf08b026a1f2c9a480a8ed5ec4a", "filename": "src/interpreter.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6a99779740b7f9d299722159e7cb9ec422f642fa/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a99779740b7f9d299722159e7cb9ec422f642fa/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=6a99779740b7f9d299722159e7cb9ec422f642fa", "patch": "@@ -203,7 +203,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n         let temp_tys = mir.temp_decls.iter().map(|t| t.ty);\n \n         let locals: Vec<Pointer> = arg_tys.chain(var_tys).chain(temp_tys).map(|ty| {\n-            let size = self.ty_size(ty);\n+            let size = self.type_size(ty);\n             self.memory.allocate(size)\n         }).collect();\n \n@@ -294,7 +294,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                                 let name = self.tcx.item_name(def_id).as_str();\n                                 match fn_ty.sig.0.output {\n                                     ty::FnConverging(ty) => {\n-                                        let size = self.ty_size(ty);\n+                                        let size = self.type_size(ty);\n                                         try!(self.call_intrinsic(&name, substs, args,\n                                             return_ptr.unwrap(), size))\n                                     }\n@@ -380,7 +380,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n \n             \"copy_nonoverlapping\" => {\n                 let elem_ty = *substs.types.get(subst::FnSpace, 0);\n-                let elem_size = self.ty_size(elem_ty);\n+                let elem_size = self.type_size(elem_ty);\n \n                 let src_arg   = try!(self.eval_operand(&args[0]));\n                 let dest_arg  = try!(self.eval_operand(&args[1]));\n@@ -402,7 +402,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n \n             \"move_val_init\" => {\n                 let ty = *substs.types.get(subst::FnSpace, 0);\n-                let size = self.ty_size(ty);\n+                let size = self.type_size(ty);\n \n                 let ptr_arg = try!(self.eval_operand(&args[0]));\n                 let ptr = try!(self.memory.read_ptr(ptr_arg));\n@@ -414,7 +414,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n             // FIXME(tsion): Handle different integer types correctly.\n             \"add_with_overflow\" => {\n                 let ty = *substs.types.get(subst::FnSpace, 0);\n-                let size = self.ty_size(ty);\n+                let size = self.type_size(ty);\n \n                 let left_arg  = try!(self.eval_operand(&args[0]));\n                 let right_arg = try!(self.eval_operand(&args[1]));\n@@ -433,7 +433,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n             // FIXME(tsion): Handle different integer types correctly.\n             \"mul_with_overflow\" => {\n                 let ty = *substs.types.get(subst::FnSpace, 0);\n-                let size = self.ty_size(ty);\n+                let size = self.type_size(ty);\n \n                 let left_arg  = try!(self.eval_operand(&args[0]));\n                 let right_arg = try!(self.eval_operand(&args[1]));\n@@ -451,7 +451,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n \n             \"offset\" => {\n                 let pointee_ty = *substs.types.get(subst::FnSpace, 0);\n-                let pointee_size = self.ty_size(pointee_ty) as isize;\n+                let pointee_size = self.type_size(pointee_ty) as isize;\n \n                 let ptr_arg    = try!(self.eval_operand(&args[0]));\n                 let offset_arg = try!(self.eval_operand(&args[1]));\n@@ -475,7 +475,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n             // FIXME(tsion): Handle different integer types correctly. Use primvals?\n             \"overflowing_sub\" => {\n                 let ty = *substs.types.get(subst::FnSpace, 0);\n-                let size = self.ty_size(ty);\n+                let size = self.type_size(ty);\n \n                 let left_arg  = try!(self.eval_operand(&args[0]));\n                 let right_arg = try!(self.eval_operand(&args[1]));\n@@ -489,7 +489,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n \n             \"size_of\" => {\n                 let ty = *substs.types.get(subst::FnSpace, 0);\n-                let size = self.ty_size(ty) as u64;\n+                let size = self.type_size(ty) as u64;\n                 try!(self.memory.write_uint(dest, size, dest_size));\n             }\n \n@@ -672,7 +672,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n             }\n \n             Box(ty) => {\n-                let size = self.ty_size(ty);\n+                let size = self.type_size(ty);\n                 let ptr = self.memory.allocate(size);\n                 try!(self.memory.write_ptr(dest, ptr));\n             }\n@@ -731,7 +731,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                 match *literal {\n                     Value { ref value } => Ok((\n                         try!(self.const_to_ptr(value)),\n-                        self.ty_to_repr(ty),\n+                        self.type_repr(ty),\n                     )),\n                     Item { .. } => unimplemented!(),\n                 }\n@@ -743,7 +743,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n     fn lvalue_repr(&self, lvalue: &mir::Lvalue<'tcx>) -> &'arena Repr {\n         use rustc::mir::tcx::LvalueTy;\n         match self.mir().lvalue_ty(self.tcx, lvalue) {\n-            LvalueTy::Ty { ty } => self.ty_to_repr(ty),\n+            LvalueTy::Ty { ty } => self.type_repr(ty),\n             LvalueTy::Downcast { adt_def, substs, variant_index } => {\n                 let field_tys = adt_def.variants[variant_index].fields.iter()\n                     .map(|f| f.ty(self.tcx, substs));\n@@ -799,8 +799,8 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n \n                     Index(ref operand) => {\n                         let elem_size = match base_ty.sty {\n-                            ty::TyArray(elem_ty, _) => self.ty_size(elem_ty),\n-                            ty::TySlice(elem_ty) => self.ty_size(elem_ty),\n+                            ty::TyArray(elem_ty, _) => self.type_size(elem_ty),\n+                            ty::TySlice(elem_ty) => self.type_size(elem_ty),\n                             _ => panic!(\"indexing expected an array or slice, got {:?}\", base_ty),\n                         };\n                         let n_ptr = try!(self.eval_operand(operand));\n@@ -876,11 +876,11 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n         ty.is_sized(&self.tcx.empty_parameter_environment(), DUMMY_SP)\n     }\n \n-    fn ty_size(&self, ty: ty::Ty<'tcx>) -> usize {\n-        self.ty_to_repr(ty).size()\n+    fn type_size(&self, ty: ty::Ty<'tcx>) -> usize {\n+        self.type_repr(ty).size()\n     }\n \n-    fn ty_to_repr(&self, ty: ty::Ty<'tcx>) -> &'arena Repr {\n+    fn type_repr(&self, ty: ty::Ty<'tcx>) -> &'arena Repr {\n         let ty = self.monomorphize(ty);\n \n         if let Some(repr) = self.repr_cache.borrow().get(ty) {\n@@ -910,7 +910,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n             }\n \n             ty::TyArray(elem_ty, length) => Repr::Array {\n-                elem_size: self.ty_size(elem_ty),\n+                elem_size: self.type_size(elem_ty),\n                 length: length,\n             },\n \n@@ -948,7 +948,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n             let mut size = 0;\n \n             for ty in field_tys {\n-                let field_size = self.ty_size(ty);\n+                let field_size = self.type_size(ty);\n                 let offest = size;\n                 size += field_size;\n                 fields.push(FieldRepr { offset: offest, size: field_size });\n@@ -1197,7 +1197,7 @@ pub fn interpret_start_points<'tcx>(tcx: &TyCtxt<'tcx>, mir_map: &MirMap<'tcx>)\n                 let mut miri = Interpreter::new(tcx, mir_map, &repr_arena);\n                 let return_ptr = match mir.return_ty {\n                     ty::FnConverging(ty) => {\n-                        let size = miri.ty_size(ty);\n+                        let size = miri.type_size(ty);\n                         Some(miri.memory.allocate(size))\n                     }\n                     ty::FnDiverging => None,"}]}