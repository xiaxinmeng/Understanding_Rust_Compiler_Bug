{"sha": "e4e9bb4a244464049651c66b408639f60fcdcc58", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZTliYjRhMjQ0NDY0MDQ5NjUxYzY2YjQwODYzOWY2MGZjZGNjNTg=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-11-08T01:11:53Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-11-08T01:11:53Z"}, "message": "Don't fire `CONST_ITEM_MUTATION` lint when borrowing a deref\n\nFixes #78819\n\nThis extends the check for dereferences added in PR #77324\nto cover mutable borrows, as well as direct writes. If we're operating\non a dereference of a `const` item, we shouldn't be firing the lint.", "tree": {"sha": "91a27274a731c0f12a033f79518390129c6786e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91a27274a731c0f12a033f79518390129c6786e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4e9bb4a244464049651c66b408639f60fcdcc58", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl+nRkcACgkQtAh+UQ6Y\nsWTYChAAuL5Ao5tTjc//74f7whbzXCVMUdDPULcRdgykGDtxAa2YQTxeyTERUm/4\n9iQF6T5ItcthgOYeBx19cpJP3Zbi6ZYX+szF47gkwgKjeox9NZlo0N60eUNQ/pcn\nIUYAu+17nuz9f68z9lzMpw52zv1x0qM7D0VF91T4XkljTR0oCTinogOoM06l0zQd\nk6k6hUm+FJgqxDfBEEpCInbthDiE12NP//ONZT/7Talfj8Ggcbq9JvU99avp0Sfi\n3wKHz+/6jAn2O3ir5ZsKBJtheri872OuRQ+s/hc3ltkMUHhb84w352sl1tlxWO9f\nAEcSxItCUjMid1hxGMljI8ZzeQxZg9mzsjAfSspXSlrerzvV9W/HWpv1Ql8/3lY8\nYPGpiNpOPxyVWami5RYBmT0bz4ktGv7cX+YO4TyqGw9FTXH1JGGCVV7MNJ9SrRam\n5xn1trrC750173W9iBkUkVt7NQAD3wnUmixa5JP0OnY1UsYk+iQYKDn+vjDK4ibS\nP0idMsDcxuHPTiSsZtqt+ltLFA4zxWUNk9X1fssJJXkbVdgzXIt+vbeQoumDRgVx\n6knLTYMqjG9avWzddA+SCjqsEuOZ2ORptD4ST3aQXEHraESWWG6l/zW2KJ6M7bnw\ngJZrO0GbiA1lP4pt5mqJjZBVY20QwPtKdej4JHE9+KOpzB5r8rA=\n=BkTq\n-----END PGP SIGNATURE-----", "payload": "tree 91a27274a731c0f12a033f79518390129c6786e9\nparent b2d115f6db5172c961dfeb50de15f35784dbc7c9\nauthor Aaron Hill <aa1ronham@gmail.com> 1604797913 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1604797913 -0500\n\nDon't fire `CONST_ITEM_MUTATION` lint when borrowing a deref\n\nFixes #78819\n\nThis extends the check for dereferences added in PR #77324\nto cover mutable borrows, as well as direct writes. If we're operating\non a dereference of a `const` item, we shouldn't be firing the lint.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4e9bb4a244464049651c66b408639f60fcdcc58", "html_url": "https://github.com/rust-lang/rust/commit/e4e9bb4a244464049651c66b408639f60fcdcc58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4e9bb4a244464049651c66b408639f60fcdcc58/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2d115f6db5172c961dfeb50de15f35784dbc7c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2d115f6db5172c961dfeb50de15f35784dbc7c9", "html_url": "https://github.com/rust-lang/rust/commit/b2d115f6db5172c961dfeb50de15f35784dbc7c9"}], "stats": {"total": 72, "additions": 43, "deletions": 29}, "files": [{"sha": "74fe589e4a94623b074c77d9c34ef03211a14177", "filename": "compiler/rustc_mir/src/transform/check_const_item_mutation.rs", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e4e9bb4a244464049651c66b408639f60fcdcc58/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e9bb4a244464049651c66b408639f60fcdcc58/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs?ref=e4e9bb4a244464049651c66b408639f60fcdcc58", "patch": "@@ -61,22 +61,35 @@ impl<'a, 'tcx> ConstMutationChecker<'a, 'tcx> {\n \n     fn lint_const_item_usage(\n         &self,\n+        place: &Place<'tcx>,\n         const_item: DefId,\n         location: Location,\n         decorate: impl for<'b> FnOnce(LintDiagnosticBuilder<'b>) -> DiagnosticBuilder<'b>,\n     ) {\n-        let source_info = self.body.source_info(location);\n-        let lint_root = self.body.source_scopes[source_info.scope]\n-            .local_data\n-            .as_ref()\n-            .assert_crate_local()\n-            .lint_root;\n+        // Don't lint on borrowing/assigning to a dereference\n+        // e.g:\n+        //\n+        // `unsafe { *FOO = 0; *BAR.field = 1; }`\n+        // `unsafe { &mut *FOO }`\n+        if !matches!(place.projection.last(), Some(PlaceElem::Deref)) {\n+            let source_info = self.body.source_info(location);\n+            let lint_root = self.body.source_scopes[source_info.scope]\n+                .local_data\n+                .as_ref()\n+                .assert_crate_local()\n+                .lint_root;\n \n-        self.tcx.struct_span_lint_hir(CONST_ITEM_MUTATION, lint_root, source_info.span, |lint| {\n-            decorate(lint)\n-                .span_note(self.tcx.def_span(const_item), \"`const` item defined here\")\n-                .emit()\n-        });\n+            self.tcx.struct_span_lint_hir(\n+                CONST_ITEM_MUTATION,\n+                lint_root,\n+                source_info.span,\n+                |lint| {\n+                    decorate(lint)\n+                        .span_note(self.tcx.def_span(const_item), \"`const` item defined here\")\n+                        .emit()\n+                },\n+            );\n+        }\n     }\n }\n \n@@ -88,15 +101,11 @@ impl<'a, 'tcx> Visitor<'tcx> for ConstMutationChecker<'a, 'tcx> {\n             // so emitting a lint would be redundant.\n             if !lhs.projection.is_empty() {\n                 if let Some(def_id) = self.is_const_item_without_destructor(lhs.local) {\n-                    // Don't lint on writes through a pointer\n-                    // (e.g. `unsafe { *FOO = 0; *BAR.field = 1; }`)\n-                    if !matches!(lhs.projection.last(), Some(PlaceElem::Deref)) {\n-                        self.lint_const_item_usage(def_id, loc, |lint| {\n-                            let mut lint = lint.build(\"attempting to modify a `const` item\");\n-                            lint.note(\"each usage of a `const` item creates a new temporary - the original `const` item will not be modified\");\n-                            lint\n-                        })\n-                    }\n+                    self.lint_const_item_usage(&lhs, def_id, loc, |lint| {\n+                        let mut lint = lint.build(\"attempting to modify a `const` item\");\n+                        lint.note(\"each usage of a `const` item creates a new temporary - the original `const` item will not be modified\");\n+                        lint\n+                    })\n                 }\n             }\n             // We are looking for MIR of the form:\n@@ -127,7 +136,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ConstMutationChecker<'a, 'tcx> {\n                 });\n                 let lint_loc =\n                     if method_did.is_some() { self.body.terminator_loc(loc.block) } else { loc };\n-                self.lint_const_item_usage(def_id, lint_loc, |lint| {\n+                self.lint_const_item_usage(place, def_id, lint_loc, |lint| {\n                     let mut lint = lint.build(\"taking a mutable reference to a `const` item\");\n                     lint\n                         .note(\"each usage of a `const` item creates a new temporary\")"}, {"sha": "ef55f31593b63150ac65cbef8dbbccd83e4bb9b0", "filename": "src/test/ui/lint/lint-const-item-mutation.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4e9bb4a244464049651c66b408639f60fcdcc58/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e9bb4a244464049651c66b408639f60fcdcc58/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.rs?ref=e4e9bb4a244464049651c66b408639f60fcdcc58", "patch": "@@ -29,6 +29,7 @@ const RAW_PTR: *mut u8 = 1 as *mut u8;\n const MUTABLE: Mutable = Mutable { msg: \"\" };\n const MUTABLE2: Mutable2 = Mutable2 { msg: \"\", other: String::new() };\n const VEC: Vec<i32> = Vec::new();\n+const PTR: *mut () = 1 as *mut _;\n \n fn main() {\n     ARRAY[0] = 5; //~ WARN attempting to modify\n@@ -50,4 +51,8 @@ fn main() {\n     MUTABLE.msg = \"wow\"; // no warning, because Drop observes the mutation\n     MUTABLE2.msg = \"wow\"; //~ WARN attempting to modify\n     VEC.push(0); //~ WARN taking a mutable reference to a `const` item\n+\n+    // Test that we don't warn when converting a raw pointer\n+    // into a mutable reference\n+    unsafe { &mut *PTR };\n }"}, {"sha": "d9195a2319f54156f7b3cecf104e64b7ee4e047c", "filename": "src/test/ui/lint/lint-const-item-mutation.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e4e9bb4a244464049651c66b408639f60fcdcc58/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4e9bb4a244464049651c66b408639f60fcdcc58/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-const-item-mutation.stderr?ref=e4e9bb4a244464049651c66b408639f60fcdcc58", "patch": "@@ -1,5 +1,5 @@\n warning: attempting to modify a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:34:5\n+  --> $DIR/lint-const-item-mutation.rs:35:5\n    |\n LL |     ARRAY[0] = 5;\n    |     ^^^^^^^^^^^^\n@@ -13,7 +13,7 @@ LL | const ARRAY: [u8; 1] = [25];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: attempting to modify a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:35:5\n+  --> $DIR/lint-const-item-mutation.rs:36:5\n    |\n LL |     MY_STRUCT.field = false;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: attempting to modify a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:36:5\n+  --> $DIR/lint-const-item-mutation.rs:37:5\n    |\n LL |     MY_STRUCT.inner_array[0] = 'b';\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -39,7 +39,7 @@ LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: taking a mutable reference to a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:37:5\n+  --> $DIR/lint-const-item-mutation.rs:38:5\n    |\n LL |     MY_STRUCT.use_mut();\n    |     ^^^^^^^^^^^^^^^^^^^\n@@ -58,7 +58,7 @@ LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: taking a mutable reference to a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:38:5\n+  --> $DIR/lint-const-item-mutation.rs:39:5\n    |\n LL |     &mut MY_STRUCT;\n    |     ^^^^^^^^^^^^^^\n@@ -72,7 +72,7 @@ LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: taking a mutable reference to a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:39:5\n+  --> $DIR/lint-const-item-mutation.rs:40:5\n    |\n LL |     (&mut MY_STRUCT).use_mut();\n    |     ^^^^^^^^^^^^^^^^\n@@ -86,7 +86,7 @@ LL | const MY_STRUCT: MyStruct = MyStruct { field: true, inner_array: ['a'], raw\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: attempting to modify a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:51:5\n+  --> $DIR/lint-const-item-mutation.rs:52:5\n    |\n LL |     MUTABLE2.msg = \"wow\";\n    |     ^^^^^^^^^^^^^^^^^^^^\n@@ -99,7 +99,7 @@ LL | const MUTABLE2: Mutable2 = Mutable2 { msg: \"\", other: String::new() };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: taking a mutable reference to a `const` item\n-  --> $DIR/lint-const-item-mutation.rs:52:5\n+  --> $DIR/lint-const-item-mutation.rs:53:5\n    |\n LL |     VEC.push(0);\n    |     ^^^^^^^^^^^"}]}