{"sha": "6a749c7eb136e5ddc61a34d2adc4c8fc6a1725cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNzQ5YzdlYjEzNmU1ZGRjNjFhMzRkMmFkYzRjOGZjNmExNzI1Y2Y=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-29T20:33:50Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-04-04T15:14:44Z"}, "message": "fix corner case around top of stack\n\nWhen deciding on a coinductive match, we were examining the new\nobligation and the backtrace, but not the *current* obligation that goes\nin between the two.  Refactoring the code to just have the cycle given\nas input also made things a lot simpler.", "tree": {"sha": "ea1570117775424de8a61e11126317dccf04bc89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea1570117775424de8a61e11126317dccf04bc89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a749c7eb136e5ddc61a34d2adc4c8fc6a1725cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a749c7eb136e5ddc61a34d2adc4c8fc6a1725cf", "html_url": "https://github.com/rust-lang/rust/commit/6a749c7eb136e5ddc61a34d2adc4c8fc6a1725cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a749c7eb136e5ddc61a34d2adc4c8fc6a1725cf/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "944723b7731ec1eacdbc1946009bcd51d17a6301", "url": "https://api.github.com/repos/rust-lang/rust/commits/944723b7731ec1eacdbc1946009bcd51d17a6301", "html_url": "https://github.com/rust-lang/rust/commit/944723b7731ec1eacdbc1946009bcd51d17a6301"}], "stats": {"total": 103, "additions": 64, "deletions": 39}, "files": [{"sha": "810dfb960c6dc001a6d471745e64892340426b99", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 32, "deletions": 39, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/6a749c7eb136e5ddc61a34d2adc4c8fc6a1725cf/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a749c7eb136e5ddc61a34d2adc4c8fc6a1725cf/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=6a749c7eb136e5ddc61a34d2adc4c8fc6a1725cf", "patch": "@@ -407,17 +407,17 @@ fn process_child_obligations<'a,'tcx>(\n                 //                            ~~~ (*) see above\n                 debug!(\"process_child_obligations: cycle index = {}\", index);\n \n-                if coinductive_match(selcx, &obligation, &backtrace) {\n+                let backtrace = backtrace.clone();\n+                let cycle: Vec<_> =\n+                    iter::once(&obligation)\n+                    .chain(Some(pending_obligation))\n+                    .chain(backtrace.take(index + 1).map(|p| &p.obligation))\n+                    .cloned()\n+                    .collect();\n+                if coinductive_match(selcx, &cycle) {\n                     debug!(\"process_child_obligations: coinductive match\");\n                     None\n                 } else {\n-                    let backtrace = backtrace.clone();\n-                    let cycle: Vec<_> =\n-                        iter::once(&obligation)\n-                        .chain(Some(pending_obligation))\n-                        .chain(backtrace.take(index + 1).map(|p| &p.obligation))\n-                        .cloned()\n-                        .collect();\n                     report_overflow_error_cycle(selcx.infcx(), &cycle);\n                 }\n             } else {\n@@ -663,47 +663,40 @@ fn process_predicate1<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,\n \n /// For defaulted traits, we use a co-inductive strategy to solve, so\n /// that recursion is ok. This routine returns true if the top of the\n-/// stack (`top_obligation` and `top_data`):\n+/// stack (`cycle[0]`):\n /// - is a defaulted trait, and\n /// - it also appears in the backtrace at some position `X`; and,\n /// - all the predicates at positions `X..` between `X` an the top are\n ///   also defaulted traits.\n fn coinductive_match<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,\n-                              top_obligation: &PredicateObligation<'tcx>,\n-                              backtrace: &Backtrace<PendingPredicateObligation<'tcx>>)\n+                              cycle: &[PredicateObligation<'tcx>])\n                               -> bool\n {\n-    // only trait predicates can be coinductive matches\n-    let top_data = match top_obligation.predicate {\n-        ty::Predicate::Trait(ref data) => data,\n-        _ => return false\n-    };\n-\n-    if selcx.tcx().trait_has_default_impl(top_data.def_id()) {\n-        debug!(\"coinductive_match: top_data={:?}\", top_data);\n-        for bt_obligation in backtrace.clone() {\n-            debug!(\"coinductive_match: bt_obligation={:?}\", bt_obligation);\n-\n-            // *Everything* in the backtrace must be a defaulted trait.\n-            match bt_obligation.obligation.predicate {\n-                ty::Predicate::Trait(ref data) => {\n-                    if !selcx.tcx().trait_has_default_impl(data.def_id()) {\n-                        debug!(\"coinductive_match: trait does not have default impl\");\n-                        break;\n-                    }\n-                }\n-                _ => { break; }\n-            }\n+    let len = cycle.len();\n \n-            // And we must find a recursive match.\n-            if bt_obligation.obligation.predicate == top_obligation.predicate {\n-                debug!(\"coinductive_match: found a match in the backtrace\");\n-                return true;\n-            }\n+    assert_eq!(cycle[0].predicate, cycle[len - 1].predicate);\n+\n+    cycle[0..len-1]\n+        .iter()\n+        .all(|bt_obligation| {\n+            let result = coinductive_obligation(selcx, bt_obligation);\n+            debug!(\"coinductive_match: bt_obligation={:?} coinductive={}\",\n+                   bt_obligation, result);\n+            result\n+        })\n+}\n+\n+fn coinductive_obligation<'a, 'tcx>(selcx: &SelectionContext<'a, 'tcx>,\n+                                    obligation: &PredicateObligation<'tcx>)\n+                                    -> bool {\n+    match obligation.predicate {\n+        ty::Predicate::Trait(ref data) => {\n+            selcx.tcx().trait_has_default_impl(data.def_id())\n+        }\n+        _ => {\n+            false\n         }\n     }\n-\n-    false\n }\n \n fn register_region_obligation<'tcx>(t_a: Ty<'tcx>,"}, {"sha": "6015c5669cdae2d0b57b3b6ef6ada097095d85e9", "filename": "src/test/compile-fail/traits-inductive-overflow-auto-normal-auto.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6a749c7eb136e5ddc61a34d2adc4c8fc6a1725cf/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-auto-normal-auto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a749c7eb136e5ddc61a34d2adc4c8fc6a1725cf/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-auto-normal-auto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-auto-normal-auto.rs?ref=6a749c7eb136e5ddc61a34d2adc4c8fc6a1725cf", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test for a potential corner case in current impl where you have an\n+// auto trait (Magic1) that depends on a normal trait (Magic2) which\n+// in turn depends on the auto trait (Magic1). This was incorrectly\n+// being considered coinductive, but because of the normal trait\n+// interfering, it should not be.\n+\n+#![feature(optin_builtin_traits)]\n+\n+trait Magic1: Magic2 { }\n+impl Magic1 for .. {}\n+\n+trait Magic2 { }\n+impl<T: Magic1> Magic2 for T { }\n+\n+fn is_magic1<T: Magic1>() { }\n+\n+#[derive(Debug)]\n+struct NoClone;\n+\n+fn main() {\n+    is_magic1::<NoClone>();\n+}"}]}