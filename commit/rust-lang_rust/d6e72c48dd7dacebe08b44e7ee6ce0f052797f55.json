{"sha": "d6e72c48dd7dacebe08b44e7ee6ce0f052797f55", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ZTcyYzQ4ZGQ3ZGFjZWJlMDhiNDRlN2VlNmNlMGYwNTI3OTdmNTU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-02-23T20:00:59Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-17T16:19:50Z"}, "message": "trans: Don't store extra copies of intrinsics ID/substs.", "tree": {"sha": "eb2e98ddbdf2288c64886b0a2356a7e00aa6d9a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb2e98ddbdf2288c64886b0a2356a7e00aa6d9a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6e72c48dd7dacebe08b44e7ee6ce0f052797f55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6e72c48dd7dacebe08b44e7ee6ce0f052797f55", "html_url": "https://github.com/rust-lang/rust/commit/d6e72c48dd7dacebe08b44e7ee6ce0f052797f55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6e72c48dd7dacebe08b44e7ee6ce0f052797f55/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89766a81ef6270595cb8e51f100ed44be4bb9929", "url": "https://api.github.com/repos/rust-lang/rust/commits/89766a81ef6270595cb8e51f100ed44be4bb9929", "html_url": "https://github.com/rust-lang/rust/commit/89766a81ef6270595cb8e51f100ed44be4bb9929"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "06e3cba6be1d34d3f3488855f71cf739ca46a5f9", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d6e72c48dd7dacebe08b44e7ee6ce0f052797f55/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6e72c48dd7dacebe08b44e7ee6ce0f052797f55/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=d6e72c48dd7dacebe08b44e7ee6ce0f052797f55", "patch": "@@ -58,21 +58,21 @@ use syntax::codemap::DUMMY_SP;\n use syntax::errors;\n use syntax::ptr::P;\n \n-pub enum CalleeData<'tcx> {\n+pub enum CalleeData {\n     /// Constructor for enum variant/tuple-like-struct.\n     NamedTupleConstructor(Disr),\n \n     /// Function pointer.\n     Fn(ValueRef),\n \n-    Intrinsic(ast::NodeId, &'tcx subst::Substs<'tcx>),\n+    Intrinsic,\n \n     /// Trait object found in the vtable at that index.\n     Virtual(usize)\n }\n \n pub struct Callee<'tcx> {\n-    pub data: CalleeData<'tcx>,\n+    pub data: CalleeData,\n     pub ty: Ty<'tcx>\n }\n \n@@ -245,7 +245,7 @@ impl<'tcx> Callee<'tcx> {\n                 }\n                 _ => unreachable!(\"expected fn item type, found {}\", self.ty)\n             },\n-            Intrinsic(..) => unreachable!(\"intrinsic {} getting reified\", self.ty)\n+            Intrinsic => unreachable!(\"intrinsic {} getting reified\", self.ty)\n         }\n     }\n }\n@@ -545,7 +545,7 @@ fn trans_call_inner<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n     };\n \n     match callee.data {\n-        Intrinsic(node, substs) => {\n+        Intrinsic => {\n             assert!(abi == Abi::RustIntrinsic || abi == Abi::PlatformIntrinsic);\n             assert!(dest.is_some());\n \n@@ -557,10 +557,9 @@ fn trans_call_inner<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n             };\n \n             let arg_cleanup_scope = fcx.push_custom_cleanup_scope();\n-            return intrinsic::trans_intrinsic_call(bcx, node, callee.ty,\n+            return intrinsic::trans_intrinsic_call(bcx, callee.ty,\n                                                    arg_cleanup_scope, args,\n                                                    dest.unwrap(),\n-                                                   substs,\n                                                    call_info);\n         }\n         NamedTupleConstructor(disr) => {"}, {"sha": "707d60e18a971ee1f7bc47b415895a0df131d95c", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d6e72c48dd7dacebe08b44e7ee6ce0f052797f55/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6e72c48dd7dacebe08b44e7ee6ce0f052797f55/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=d6e72c48dd7dacebe08b44e7ee6ce0f052797f55", "patch": "@@ -51,8 +51,8 @@ use syntax::codemap::Span;\n \n use std::cmp::Ordering;\n \n-pub fn get_simple_intrinsic(ccx: &CrateContext, item: &hir::ForeignItem) -> Option<ValueRef> {\n-    let name = match &*item.name.as_str() {\n+fn get_simple_intrinsic(ccx: &CrateContext, name: &str) -> Option<ValueRef> {\n+    let llvm_name = match name {\n         \"sqrtf32\" => \"llvm.sqrt.f32\",\n         \"sqrtf64\" => \"llvm.sqrt.f64\",\n         \"powif32\" => \"llvm.powi.f32\",\n@@ -94,7 +94,7 @@ pub fn get_simple_intrinsic(ccx: &CrateContext, item: &hir::ForeignItem) -> Opti\n         \"assume\" => \"llvm.assume\",\n         _ => return None\n     };\n-    Some(ccx.get_intrinsic(&name))\n+    Some(ccx.get_intrinsic(&llvm_name))\n }\n \n pub fn span_transmute_size_error(a: &Session, b: Span, msg: &str) {\n@@ -171,12 +171,10 @@ pub fn check_intrinsics(ccx: &CrateContext) {\n /// and in libcore/intrinsics.rs; if you need access to any llvm intrinsics,\n /// add them to librustc_trans/trans/context.rs\n pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n-                                            node: ast::NodeId,\n                                             callee_ty: Ty<'tcx>,\n                                             cleanup_scope: cleanup::CustomScopeIndex,\n                                             args: callee::CallArgs<'a, 'tcx>,\n                                             dest: expr::Dest,\n-                                            substs: &'tcx subst::Substs<'tcx>,\n                                             call_info: NodeIdAndSpan)\n                                             -> Result<'blk, 'tcx> {\n     let fcx = bcx.fcx;\n@@ -185,12 +183,16 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n \n     let _icx = push_ctxt(\"trans_intrinsic_call\");\n \n-    let sig = ccx.tcx().erase_late_bound_regions(callee_ty.fn_sig());\n-    let sig = infer::normalize_associated_type(ccx.tcx(), &sig);\n+    let (def_id, substs, sig) = match callee_ty.sty {\n+        ty::TyFnDef(def_id, substs, fty) => {\n+            let sig = tcx.erase_late_bound_regions(&fty.sig);\n+            (def_id, substs, infer::normalize_associated_type(tcx, &sig))\n+        }\n+        _ => unreachable!(\"expected fn item type, found {}\", callee_ty)\n+    };\n     let arg_tys = sig.inputs;\n     let ret_ty = sig.output;\n-    let foreign_item = tcx.map.expect_foreign_item(node);\n-    let name = foreign_item.name.as_str();\n+    let name = tcx.item_name(def_id).as_str();\n \n     let call_debug_location = DebugLoc::At(call_info.id, call_info.span);\n \n@@ -437,8 +439,8 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         }\n     };\n \n-    let simple = get_simple_intrinsic(ccx, &foreign_item);\n-    let llval = match (simple, &*name) {\n+    let simple = get_simple_intrinsic(ccx, &name);\n+    let llval = match (simple, &name[..]) {\n         (Some(llfn), _) => {\n             Call(bcx, llfn, &llargs, None, call_debug_location)\n         }\n@@ -815,8 +817,7 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         (_, _) => {\n             let intr = match Intrinsic::find(tcx, &name) {\n                 Some(intr) => intr,\n-                None => ccx.sess().span_bug(foreign_item.span,\n-                                            &format!(\"unknown intrinsic '{}'\", name)),\n+                None => unreachable!(\"unknown intrinsic '{}'\", name),\n             };\n             fn one<T>(x: Vec<T>) -> T {\n                 assert_eq!(x.len(), 1);"}]}