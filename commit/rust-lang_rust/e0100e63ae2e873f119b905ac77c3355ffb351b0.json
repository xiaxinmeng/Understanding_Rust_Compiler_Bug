{"sha": "e0100e63ae2e873f119b905ac77c3355ffb351b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMTAwZTYzYWUyZTg3M2YxMTliOTA1YWM3N2MzMzU1ZmZiMzUxYjA=", "commit": {"author": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-10-02T17:38:56Z"}, "committer": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-10-02T18:28:03Z"}, "message": "Optimize", "tree": {"sha": "25d799c1e52a32af80f603f4e6103e0969c5b6a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25d799c1e52a32af80f603f4e6103e0969c5b6a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0100e63ae2e873f119b905ac77c3355ffb351b0", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAl2U7DMACgkQztOS3gxI\nPQA76BAAk5jOMM9pIH3m+oTOPsUMUfEFTU+hfCOtk+eE5gm8E3oJ4RATsf3z5vG3\na6LRRuYtGhpmq/JxrMTYwlvY9EzdrbbLaGEg3AwHbAP/P3RmeJbCpC1whzM37GOr\n/d4nQ5NZ3Zohc/JHj/oo06SPT0ZiuuSm+w6/0Wc+GarChL1stG6zpap70cqTQmbi\nXrRMbywgo9sZF6u4GVRCPZGu5moAB4KkQi2E7SDVjexXHMQWRHktP1N2p7UiG7xq\nC4qiWtxPDBaW1V/HaIvl7G8ZliW2rzWpFmLMDh+oU8Mfob2qi2dGWfhnE+2DE0/D\nfLtV8AqHQTiBzfX496ERVmibm3f7jeHxFKEHcktXopVFF7oU960qZoZ4r6jpArQL\n/rGnQ609Yi+pYGrVsNyAaNaNvHmbPs/LuOGsqWzicHuwB2ALLXFQ+pcai8hv4C8W\nqe0an/rzgCOrna8gCl4WYnu0lCz91UxDMkJwoIu7KSvEsEEK3WGUrBC57O/jeqRc\nxsZhCNdd+OC05S05E6fcvbGwi6AX9FVtVukwtxx8NMUEi08g9zQl/NPSvfmMTIpj\nPn9t8ZiSrxnmscZWbhmQjPcGa6TPzEfxWcG9+XqmGHzDdb5lxjLPeXPI7CLlhP3M\nD+AIMcNIUpVz0VXXUqzr45vTNtsjXfbPnyKgJAikOuYISBtvYtg=\n=uhVK\n-----END PGP SIGNATURE-----", "payload": "tree 25d799c1e52a32af80f603f4e6103e0969c5b6a8\nparent 43f09ad36ccc1c53c78a66274693e53161c9b2fa\nauthor uHOOCCOOHu <hooccooh1896@gmail.com> 1570037936 +0800\ncommitter uHOOCCOOHu <hooccooh1896@gmail.com> 1570040883 +0800\n\nOptimize\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0100e63ae2e873f119b905ac77c3355ffb351b0", "html_url": "https://github.com/rust-lang/rust/commit/e0100e63ae2e873f119b905ac77c3355ffb351b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0100e63ae2e873f119b905ac77c3355ffb351b0/comments", "author": null, "committer": null, "parents": [{"sha": "43f09ad36ccc1c53c78a66274693e53161c9b2fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/43f09ad36ccc1c53c78a66274693e53161c9b2fa", "html_url": "https://github.com/rust-lang/rust/commit/43f09ad36ccc1c53c78a66274693e53161c9b2fa"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "811f83048883050fbe0a4cb08ccccfafe7a00a22", "filename": "crates/ra_cfg/src/cfg_expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0100e63ae2e873f119b905ac77c3355ffb351b0/crates%2Fra_cfg%2Fsrc%2Fcfg_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0100e63ae2e873f119b905ac77c3355ffb351b0/crates%2Fra_cfg%2Fsrc%2Fcfg_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cfg%2Fsrc%2Fcfg_expr.rs?ref=e0100e63ae2e873f119b905ac77c3355ffb351b0", "patch": "@@ -15,7 +15,7 @@ pub enum CfgExpr {\n \n impl CfgExpr {\n     /// Fold the cfg by querying all basic `Atom` and `KeyValue` predicates.\n-    pub fn fold(&self, query: &impl Fn(&SmolStr, Option<&SmolStr>) -> bool) -> Option<bool> {\n+    pub fn fold(&self, query: &dyn Fn(&SmolStr, Option<&SmolStr>) -> bool) -> Option<bool> {\n         match self {\n             CfgExpr::Invalid => None,\n             CfgExpr::Atom(name) => Some(query(name, None)),"}, {"sha": "a8a7e900612e17174bc41a788c8694e0d3d27106", "filename": "crates/ra_hir/src/attr.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e0100e63ae2e873f119b905ac77c3355ffb351b0/crates%2Fra_hir%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0100e63ae2e873f119b905ac77c3355ffb351b0/crates%2Fra_hir%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fattr.rs?ref=e0100e63ae2e873f119b905ac77c3355ffb351b0", "patch": "@@ -45,10 +45,15 @@ impl Attr {\n \n     pub(crate) fn from_attrs_owner(\n         file_id: HirFileId,\n-        owner: &impl AttrsOwner,\n+        owner: &dyn AttrsOwner,\n         db: &impl AstDatabase,\n-    ) -> Arc<[Attr]> {\n-        owner.attrs().flat_map(|ast| Attr::from_src(Source { file_id, ast }, db)).collect()\n+    ) -> Option<Arc<[Attr]>> {\n+        let mut attrs = owner.attrs().peekable();\n+        if attrs.peek().is_none() {\n+            // Avoid heap allocation\n+            return None;\n+        }\n+        Some(attrs.flat_map(|ast| Attr::from_src(Source { file_id, ast }, db)).collect())\n     }\n \n     pub(crate) fn is_simple_atom(&self, name: &str) -> bool {"}, {"sha": "55dfc393b40d173ee322b8ff682e6b5a5dc87068", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0100e63ae2e873f119b905ac77c3355ffb351b0/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0100e63ae2e873f119b905ac77c3355ffb351b0/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=e0100e63ae2e873f119b905ac77c3355ffb351b0", "patch": "@@ -213,7 +213,9 @@ impl ModuleImplBlocks {\n             match item {\n                 ast::ItemOrMacro::Item(ast::ModuleItem::ImplBlock(impl_block_ast)) => {\n                     let attrs = Attr::from_attrs_owner(file_id, &impl_block_ast, db);\n-                    if attrs.iter().any(|attr| attr.is_cfg_enabled(cfg_options) == Some(false)) {\n+                    if attrs.map_or(false, |attrs| {\n+                        attrs.iter().any(|attr| attr.is_cfg_enabled(cfg_options) == Some(false))\n+                    }) {\n                         continue;\n                     }\n \n@@ -228,7 +230,9 @@ impl ModuleImplBlocks {\n                 ast::ItemOrMacro::Item(_) => (),\n                 ast::ItemOrMacro::Macro(macro_call) => {\n                     let attrs = Attr::from_attrs_owner(file_id, &macro_call, db);\n-                    if attrs.iter().any(|attr| attr.is_cfg_enabled(cfg_options) == Some(false)) {\n+                    if attrs.map_or(false, |attrs| {\n+                        attrs.iter().any(|attr| attr.is_cfg_enabled(cfg_options) == Some(false))\n+                    }) {\n                         continue;\n                     }\n "}, {"sha": "cef2dc9d2877f054b65b1cdba8de1c03c6b2d8eb", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e0100e63ae2e873f119b905ac77c3355ffb351b0/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0100e63ae2e873f119b905ac77c3355ffb351b0/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=e0100e63ae2e873f119b905ac77c3355ffb351b0", "patch": "@@ -7,7 +7,6 @@ use rustc_hash::FxHashMap;\n use test_utils::tested_by;\n \n use crate::{\n-    attr::Attr,\n     db::DefDatabase,\n     ids::{AstItemDef, LocationCtx, MacroCallId, MacroCallLoc, MacroDefId, MacroFileKind},\n     name::MACRO_RULES,\n@@ -715,8 +714,12 @@ where\n         }\n     }\n \n-    fn is_cfg_enabled(&self, attrs: &[Attr]) -> bool {\n-        attrs.iter().all(|attr| attr.is_cfg_enabled(&self.def_collector.cfg_options) != Some(false))\n+    fn is_cfg_enabled(&self, attrs: &raw::Attrs) -> bool {\n+        attrs.as_ref().map_or(true, |attrs| {\n+            attrs\n+                .iter()\n+                .all(|attr| attr.is_cfg_enabled(&self.def_collector.cfg_options) != Some(false))\n+        })\n     }\n }\n "}, {"sha": "623b343c4fd6c417ba229f38093152a2f85e4832", "filename": "crates/ra_hir/src/nameres/raw.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e0100e63ae2e873f119b905ac77c3355ffb351b0/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0100e63ae2e873f119b905ac77c3355ffb351b0/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs?ref=e0100e63ae2e873f119b905ac77c3355ffb351b0", "patch": "@@ -120,9 +120,12 @@ impl Index<Macro> for RawItems {\n     }\n }\n \n+// Avoid heap allocation on items without attributes.\n+pub(super) type Attrs = Option<Arc<[Attr]>>;\n+\n #[derive(Debug, PartialEq, Eq, Clone)]\n pub(super) struct RawItem {\n-    pub(super) attrs: Arc<[Attr]>,\n+    pub(super) attrs: Attrs,\n     pub(super) kind: RawItemKind,\n }\n \n@@ -390,7 +393,7 @@ impl<DB: AstDatabase> RawItemsCollector<&DB> {\n     fn push_import(\n         &mut self,\n         current_module: Option<Module>,\n-        attrs: Arc<[Attr]>,\n+        attrs: Attrs,\n         data: ImportData,\n         source: ImportSourcePtr,\n     ) {\n@@ -399,7 +402,7 @@ impl<DB: AstDatabase> RawItemsCollector<&DB> {\n         self.push_item(current_module, attrs, RawItemKind::Import(import))\n     }\n \n-    fn push_item(&mut self, current_module: Option<Module>, attrs: Arc<[Attr]>, kind: RawItemKind) {\n+    fn push_item(&mut self, current_module: Option<Module>, attrs: Attrs, kind: RawItemKind) {\n         match current_module {\n             Some(module) => match &mut self.raw_items.modules[module] {\n                 ModuleData::Definition { items, .. } => items,\n@@ -410,7 +413,7 @@ impl<DB: AstDatabase> RawItemsCollector<&DB> {\n         .push(RawItem { attrs, kind })\n     }\n \n-    fn parse_attrs(&self, item: &impl ast::AttrsOwner) -> Arc<[Attr]> {\n+    fn parse_attrs(&self, item: &impl ast::AttrsOwner) -> Attrs {\n         Attr::from_attrs_owner(self.file_id, item, self.db)\n     }\n }"}]}