{"sha": "ebba894f197ac06bfca84d61e11234484ce74773", "node_id": "C_kwDOAAsO6NoAKGViYmE4OTRmMTk3YWMwNmJmY2E4NGQ2MWUxMTIzNDQ4NGNlNzQ3NzM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-06T21:06:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-06T21:06:10Z"}, "message": "Rollup merge of #95731 - oli-obk:lazy_tait_regression, r=compiler-errors\n\nCheck that all hidden types are the same and then deduplicate them.\n\nfixes #95538\n\nThis used to trigger a sanity check. Now we accept that there may be multiple places where a hidden type is constrained and we merge all of these at the end.\n\nIdeally we'd merge eagerly, but that is a larger refactoring that I don't want to put into a backport", "tree": {"sha": "a3c11a30dc96000927385cae40f36a194b09ed41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3c11a30dc96000927385cae40f36a194b09ed41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebba894f197ac06bfca84d61e11234484ce74773", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiTgDCCRBK7hj4Ov3rIwAAGOkIAIGIqwpImMoe0NVDNG2rISPv\nx0W4Tmw+N4ev2+5amZGQ+/U1LbWyl6jwxmmVNwimlfGJlHyge2oYLiY9tmDZsfLK\n5W7Ogl3fkhmSgpiKO9uUTG972QV98UJFaGRcp2UU7VEPObOpM7vJe8daXoYjs3Im\nmimn4QTK/bXcW6mkHDX/yYmLQ+gehjv0jecHtCxeUDJG8clJHuZX4SOF+bxWMOAf\nuUFQFLfx1E+Q3gX5wSA1hyw2aEKw3A2XPXpRwfyO/jo0xpTaWufliItZiVV0Bq/R\nYcGvyxsH++50NSYpMmwDqUdhkQcDCDRu91vePpQuCMLo/d7zAYc8k0eDmMkS/AI=\n=LZ8D\n-----END PGP SIGNATURE-----\n", "payload": "tree a3c11a30dc96000927385cae40f36a194b09ed41\nparent d2697e31280bae9e85adda11b87e6fc76db0ed63\nparent 27dc503556f220a747b1d3b155f9d3671c33fa9a\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649279170 +0200\ncommitter GitHub <noreply@github.com> 1649279170 +0200\n\nRollup merge of #95731 - oli-obk:lazy_tait_regression, r=compiler-errors\n\nCheck that all hidden types are the same and then deduplicate them.\n\nfixes #95538\n\nThis used to trigger a sanity check. Now we accept that there may be multiple places where a hidden type is constrained and we merge all of these at the end.\n\nIdeally we'd merge eagerly, but that is a larger refactoring that I don't want to put into a backport\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebba894f197ac06bfca84d61e11234484ce74773", "html_url": "https://github.com/rust-lang/rust/commit/ebba894f197ac06bfca84d61e11234484ce74773", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebba894f197ac06bfca84d61e11234484ce74773/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2697e31280bae9e85adda11b87e6fc76db0ed63", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2697e31280bae9e85adda11b87e6fc76db0ed63", "html_url": "https://github.com/rust-lang/rust/commit/d2697e31280bae9e85adda11b87e6fc76db0ed63"}, {"sha": "27dc503556f220a747b1d3b155f9d3671c33fa9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/27dc503556f220a747b1d3b155f9d3671c33fa9a", "html_url": "https://github.com/rust-lang/rust/commit/27dc503556f220a747b1d3b155f9d3671c33fa9a"}], "stats": {"total": 172, "additions": 110, "deletions": 62}, "files": [{"sha": "0bb6559e6545288bc7492124c4318ba9a500b371", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 80, "deletions": 62, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/ebba894f197ac06bfca84d61e11234484ce74773/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebba894f197ac06bfca84d61e11234484ce74773/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=ebba894f197ac06bfca84d61e11234484ce74773", "patch": "@@ -55,75 +55,93 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         infcx: &InferCtxt<'_, 'tcx>,\n         opaque_ty_decls: VecMap<OpaqueTypeKey<'tcx>, (OpaqueHiddenType<'tcx>, OpaqueTyOrigin)>,\n     ) -> VecMap<OpaqueTypeKey<'tcx>, OpaqueHiddenType<'tcx>> {\n-        opaque_ty_decls\n-            .into_iter()\n-            .map(|(opaque_type_key, (concrete_type, origin))| {\n-                let substs = opaque_type_key.substs;\n-                debug!(?concrete_type, ?substs);\n+        let mut result: VecMap<OpaqueTypeKey<'tcx>, OpaqueHiddenType<'tcx>> = VecMap::new();\n+        for (opaque_type_key, (concrete_type, origin)) in opaque_ty_decls {\n+            let substs = opaque_type_key.substs;\n+            debug!(?concrete_type, ?substs);\n \n-                let mut subst_regions = vec![self.universal_regions.fr_static];\n-                let universal_substs = infcx.tcx.fold_regions(substs, &mut false, |region, _| {\n-                    if let ty::RePlaceholder(..) = region.kind() {\n-                        // Higher kinded regions don't need remapping, they don't refer to anything outside of this the substs.\n-                        return region;\n+            let mut subst_regions = vec![self.universal_regions.fr_static];\n+            let universal_substs = infcx.tcx.fold_regions(substs, &mut false, |region, _| {\n+                if let ty::RePlaceholder(..) = region.kind() {\n+                    // Higher kinded regions don't need remapping, they don't refer to anything outside of this the substs.\n+                    return region;\n+                }\n+                let vid = self.to_region_vid(region);\n+                trace!(?vid);\n+                let scc = self.constraint_sccs.scc(vid);\n+                trace!(?scc);\n+                match self.scc_values.universal_regions_outlived_by(scc).find_map(|lb| {\n+                    self.eval_equal(vid, lb).then_some(self.definitions[lb].external_name?)\n+                }) {\n+                    Some(region) => {\n+                        let vid = self.universal_regions.to_region_vid(region);\n+                        subst_regions.push(vid);\n+                        region\n                     }\n-                    let vid = self.to_region_vid(region);\n-                    trace!(?vid);\n-                    let scc = self.constraint_sccs.scc(vid);\n-                    trace!(?scc);\n-                    match self.scc_values.universal_regions_outlived_by(scc).find_map(|lb| {\n-                        self.eval_equal(vid, lb).then_some(self.definitions[lb].external_name?)\n-                    }) {\n-                        Some(region) => {\n-                            let vid = self.universal_regions.to_region_vid(region);\n-                            subst_regions.push(vid);\n-                            region\n-                        }\n-                        None => {\n-                            subst_regions.push(vid);\n-                            infcx.tcx.sess.delay_span_bug(\n-                                concrete_type.span,\n-                                \"opaque type with non-universal region substs\",\n-                            );\n-                            infcx.tcx.lifetimes.re_static\n-                        }\n+                    None => {\n+                        subst_regions.push(vid);\n+                        infcx.tcx.sess.delay_span_bug(\n+                            concrete_type.span,\n+                            \"opaque type with non-universal region substs\",\n+                        );\n+                        infcx.tcx.lifetimes.re_static\n                     }\n-                });\n+                }\n+            });\n \n-                subst_regions.sort();\n-                subst_regions.dedup();\n+            subst_regions.sort();\n+            subst_regions.dedup();\n \n-                let universal_concrete_type =\n-                    infcx.tcx.fold_regions(concrete_type, &mut false, |region, _| match *region {\n-                        ty::ReVar(vid) => subst_regions\n-                            .iter()\n-                            .find(|ur_vid| self.eval_equal(vid, **ur_vid))\n-                            .and_then(|ur_vid| self.definitions[*ur_vid].external_name)\n-                            .unwrap_or(infcx.tcx.lifetimes.re_root_empty),\n-                        _ => region,\n-                    });\n+            let universal_concrete_type =\n+                infcx.tcx.fold_regions(concrete_type, &mut false, |region, _| match *region {\n+                    ty::ReVar(vid) => subst_regions\n+                        .iter()\n+                        .find(|ur_vid| self.eval_equal(vid, **ur_vid))\n+                        .and_then(|ur_vid| self.definitions[*ur_vid].external_name)\n+                        .unwrap_or(infcx.tcx.lifetimes.re_root_empty),\n+                    _ => region,\n+                });\n \n-                debug!(?universal_concrete_type, ?universal_substs);\n+            debug!(?universal_concrete_type, ?universal_substs);\n \n-                let opaque_type_key =\n-                    OpaqueTypeKey { def_id: opaque_type_key.def_id, substs: universal_substs };\n-                let remapped_type = infcx.infer_opaque_definition_from_instantiation(\n-                    opaque_type_key,\n-                    universal_concrete_type,\n-                );\n-                let ty = if check_opaque_type_parameter_valid(\n-                    infcx.tcx,\n-                    opaque_type_key,\n-                    origin,\n-                    concrete_type.span,\n-                ) {\n-                    remapped_type\n-                } else {\n-                    infcx.tcx.ty_error()\n-                };\n-                (opaque_type_key, OpaqueHiddenType { ty, span: concrete_type.span })\n-            })\n-            .collect()\n+            let opaque_type_key =\n+                OpaqueTypeKey { def_id: opaque_type_key.def_id, substs: universal_substs };\n+            let remapped_type = infcx.infer_opaque_definition_from_instantiation(\n+                opaque_type_key,\n+                universal_concrete_type,\n+            );\n+            let ty = if check_opaque_type_parameter_valid(\n+                infcx.tcx,\n+                opaque_type_key,\n+                origin,\n+                concrete_type.span,\n+            ) {\n+                remapped_type\n+            } else {\n+                infcx.tcx.ty_error()\n+            };\n+            // Sometimes two opaque types are the same only after we remap the generic parameters\n+            // back to the opaque type definition. E.g. we may have `OpaqueType<X, Y>` mapped to `(X, Y)`\n+            // and `OpaqueType<Y, X>` mapped to `(Y, X)`, and those are the same, but we only know that\n+            // once we convert the generic parameters to those of the opaque type.\n+            if let Some(prev) = result.get_mut(&opaque_type_key) {\n+                if prev.ty != ty {\n+                    let mut err = infcx.tcx.sess.struct_span_err(\n+                        concrete_type.span,\n+                        &format!(\"hidden type `{}` differed from previous `{}`\", ty, prev.ty),\n+                    );\n+                    err.span_note(prev.span, \"previous hidden type bound here\");\n+                    err.emit();\n+                    prev.ty = infcx.tcx.ty_error();\n+                }\n+                // Pick a better span if there is one.\n+                // FIXME(oli-obk): collect multiple spans for better diagnostics down the road.\n+                prev.span = prev.span.substitute_dummy(concrete_type.span);\n+            } else {\n+                result.insert(opaque_type_key, OpaqueHiddenType { ty, span: concrete_type.span });\n+            }\n+        }\n+        result\n     }\n \n     /// Map the regions in the type to named regions. This is similar to what"}, {"sha": "9e6268e63cde0a544e70ec75180455c2e076cd59", "filename": "src/test/ui/type-alias-impl-trait/multiple_definitions.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ebba894f197ac06bfca84d61e11234484ce74773/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebba894f197ac06bfca84d61e11234484ce74773/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple_definitions.rs?ref=ebba894f197ac06bfca84d61e11234484ce74773", "patch": "@@ -0,0 +1,30 @@\n+// check-pass\n+\n+use std::marker::PhantomData;\n+\n+pub struct ConcreteError {}\n+pub trait IoBase {}\n+struct X {}\n+impl IoBase for X {}\n+\n+pub struct ClusterIterator<B, E, S = B> {\n+    pub fat: B,\n+    phantom_s: PhantomData<S>,\n+    phantom_e: PhantomData<E>,\n+}\n+\n+pub struct FileSystem<IO: IoBase> {\n+    pub disk: IO,\n+}\n+\n+impl<IO: IoBase> FileSystem<IO> {\n+    pub fn cluster_iter(&self) -> ClusterIterator<impl IoBase + '_, ConcreteError> {\n+        ClusterIterator {\n+            fat: X {},\n+            phantom_s: PhantomData::default(),\n+            phantom_e: PhantomData::default(),\n+        }\n+    }\n+}\n+\n+fn main() {}"}]}