{"sha": "a41f76321a05ce7941d843dc18ea11f7c8a11c6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MWY3NjMyMWEwNWNlNzk0MWQ4NDNkYzE4ZWExMWY3YzhhMTFjNmY=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-05-18T22:19:31Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-05-27T18:37:57Z"}, "message": "Use the lowest of `unsafe_op_in_unsafe_fn` and `safe_borrow_packed` for packed borrows in unsafe fns", "tree": {"sha": "dea515376304bd07952863073bdbd111bbd072c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dea515376304bd07952863073bdbd111bbd072c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a41f76321a05ce7941d843dc18ea11f7c8a11c6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a41f76321a05ce7941d843dc18ea11f7c8a11c6f", "html_url": "https://github.com/rust-lang/rust/commit/a41f76321a05ce7941d843dc18ea11f7c8a11c6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a41f76321a05ce7941d843dc18ea11f7c8a11c6f/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3e012becc6539de9570eee6ce694f07879935d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3e012becc6539de9570eee6ce694f07879935d2", "html_url": "https://github.com/rust-lang/rust/commit/b3e012becc6539de9570eee6ce694f07879935d2"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "99bfb74c243b47c7742c4d30bd57764d92c0b126", "filename": "src/librustc_middle/mir/query.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a41f76321a05ce7941d843dc18ea11f7c8a11c6f/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41f76321a05ce7941d843dc18ea11f7c8a11c6f/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fquery.rs?ref=a41f76321a05ce7941d843dc18ea11f7c8a11c6f", "patch": "@@ -26,6 +26,10 @@ pub enum UnsafetyViolationKind {\n     /// Has to be handled as a lint for backwards compatibility.\n     /// Should stay gated under `#![feature(unsafe_block_in_unsafe_fn)]`.\n     UnsafeFn,\n+    /// Borrow of packed field in an `unsafe fn` but outside an `unsafe` block.\n+    /// Has to be handled as a lint for backwards compatibility.\n+    /// Should stay gated under `#![feature(unsafe_block_in_unsafe_fn)]`.\n+    UnsafeFnBorrowPacked,\n }\n \n #[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, HashStable)]"}, {"sha": "177efa2fc0d6c6257c8766fbe46e3ececca72ad7", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a41f76321a05ce7941d843dc18ea11f7c8a11c6f/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a41f76321a05ce7941d843dc18ea11f7c8a11c6f/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=a41f76321a05ce7941d843dc18ea11f7c8a11c6f", "patch": "@@ -370,7 +370,8 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                                 violation.kind = UnsafetyViolationKind::General;\n                             }\n                         }\n-                        UnsafetyViolationKind::UnsafeFn => {\n+                        UnsafetyViolationKind::UnsafeFn\n+                        | UnsafetyViolationKind::UnsafeFnBorrowPacked => {\n                             bug!(\"`UnsafetyViolationKind::UnsafeFn` in an `Safe` context\")\n                         }\n                     }\n@@ -385,8 +386,11 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                 for violation in violations {\n                     let mut violation = *violation;\n \n-                    // FIXME(LeSeulArtichaut): what to do with `UnsafetyViolationKind::BorrowPacked`?\n-                    violation.kind = UnsafetyViolationKind::UnsafeFn;\n+                    if violation.kind == UnsafetyViolationKind::BorrowPacked {\n+                        violation.kind = UnsafetyViolationKind::UnsafeFnBorrowPacked;\n+                    } else {\n+                        violation.kind = UnsafetyViolationKind::UnsafeFn;\n+                    }\n                     if !self.violations.contains(&violation) {\n                         self.violations.push(violation)\n                     }\n@@ -418,7 +422,8 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                                     self.violations.push(violation)\n                                 }\n                             }\n-                            UnsafetyViolationKind::UnsafeFn => bug!(\n+                            UnsafetyViolationKind::UnsafeFn\n+                            | UnsafetyViolationKind::UnsafeFnBorrowPacked => bug!(\n                                 \"`UnsafetyViolationKind::UnsafeFn` in an `ExplicitUnsafe` context\"\n                             ),\n                         }\n@@ -719,13 +724,31 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: DefId) {\n                 |lint| {\n                     lint.build(&format!(\n                         \"{} is unsafe and requires unsafe block (error E0133)\",\n-                        description\n+                        description,\n                     ))\n                     .span_label(source_info.span, &*description.as_str())\n                     .note(&details.as_str())\n                     .emit();\n                 },\n             ),\n+            UnsafetyViolationKind::UnsafeFnBorrowPacked => {\n+                let lint = if tcx.lint_level_at_node(SAFE_PACKED_BORROWS, lint_root).0\n+                    <= tcx.lint_level_at_node(UNSAFE_OP_IN_UNSAFE_FN, lint_root).0\n+                {\n+                    SAFE_PACKED_BORROWS\n+                } else {\n+                    UNSAFE_OP_IN_UNSAFE_FN\n+                };\n+                tcx.struct_span_lint_hir(&lint, lint_root, source_info.span, |lint| {\n+                    lint.build(&format!(\n+                        \"{} is unsafe and requires unsafe block (error E0133)\",\n+                        description,\n+                    ))\n+                    .span_label(source_info.span, &*description.as_str())\n+                    .note(&details.as_str())\n+                    .emit();\n+                })\n+            }\n         }\n     }\n "}]}