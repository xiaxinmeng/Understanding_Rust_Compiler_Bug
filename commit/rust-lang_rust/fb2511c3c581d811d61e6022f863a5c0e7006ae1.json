{"sha": "fb2511c3c581d811d61e6022f863a5c0e7006ae1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMjUxMWMzYzU4MWQ4MTFkNjFlNjAyMmY4NjNhNWMwZTcwMDZhZTE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-13T03:22:58Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-13T03:24:30Z"}, "message": "Suggest `Box::new` when appropriate\n\nWhen encountering a boxed value as expected and a stack allocated value\nthat could be boxed to fulfill the expectation, like in the following\nsnippet, suggest `Box::new` wrapping.", "tree": {"sha": "1881bbf6c5a382162cf825457a220a886e7dea6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1881bbf6c5a382162cf825457a220a886e7dea6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb2511c3c581d811d61e6022f863a5c0e7006ae1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb2511c3c581d811d61e6022f863a5c0e7006ae1", "html_url": "https://github.com/rust-lang/rust/commit/fb2511c3c581d811d61e6022f863a5c0e7006ae1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb2511c3c581d811d61e6022f863a5c0e7006ae1/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e6f7537629b668eca7a5c2e94205552b7f8f4ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e6f7537629b668eca7a5c2e94205552b7f8f4ad", "html_url": "https://github.com/rust-lang/rust/commit/1e6f7537629b668eca7a5c2e94205552b7f8f4ad"}], "stats": {"total": 104, "additions": 100, "deletions": 4}, "files": [{"sha": "b68cef2b6ea92a6fe4ba931e1d1e941cb76d61c0", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fb2511c3c581d811d61e6022f863a5c0e7006ae1/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2511c3c581d811d61e6022f863a5c0e7006ae1/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=fb2511c3c581d811d61e6022f863a5c0e7006ae1", "patch": "@@ -650,11 +650,31 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn is_const_scope(&self, hir_id: HirId) -> bool {\n-        self.walk_parent_nodes(hir_id, |node| match *node {\n-            Node::Item(Item { node: ItemKind::Const(_, _), .. }) => true,\n-            Node::Item(Item { node: ItemKind::Fn(_, header, _, _), .. }) => header.is_const(),\n+        let parent_id = self.get_parent_item(hir_id);\n+        match self.get(parent_id) {\n+            Node::Item(&Item {\n+                node: ItemKind::Const(..),\n+                ..\n+            })\n+            | Node::TraitItem(&TraitItem {\n+                node: TraitItemKind::Const(..),\n+                ..\n+            })\n+            | Node::ImplItem(&ImplItem {\n+                node: ImplItemKind::Const(..),\n+                ..\n+            })\n+            | Node::AnonConst(_)\n+            | Node::Item(&Item {\n+                node: ItemKind::Static(..),\n+                ..\n+            }) => true,\n+            Node::Item(&Item {\n+                node: ItemKind::Fn(_, header, ..),\n+                ..\n+            }) => header.constness == Constness::Const,\n             _ => false,\n-        }, |_| false).map(|id| id != CRATE_HIR_ID).unwrap_or(false)\n+        }\n     }\n \n     /// If there is some error when walking the parents (e.g., a node does not"}, {"sha": "bb499a97a2d2d44a0148fe308126a600e576513a", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb2511c3c581d811d61e6022f863a5c0e7006ae1/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2511c3c581d811d61e6022f863a5c0e7006ae1/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=fb2511c3c581d811d61e6022f863a5c0e7006ae1", "patch": "@@ -127,6 +127,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         self.suggest_compatible_variants(&mut err, expr, expected, expr_ty);\n         self.suggest_ref_or_into(&mut err, expr, expected, expr_ty);\n+        self.suggest_boxing_when_appropriate(&mut err, expr, expected, expr_ty);\n         self.suggest_missing_await(&mut err, expr, expected, expr_ty);\n \n         (expected, Some(err))"}, {"sha": "5b708b69e2d7e8d7184d710b62a1fdc84b9b205b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/fb2511c3c581d811d61e6022f863a5c0e7006ae1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2511c3c581d811d61e6022f863a5c0e7006ae1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=fb2511c3c581d811d61e6022f863a5c0e7006ae1", "patch": "@@ -3820,6 +3820,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 err, &fn_decl, expected, found, can_suggest);\n         }\n         self.suggest_ref_or_into(err, expression, expected, found);\n+        self.suggest_boxing_when_appropriate(err, expression, expected, found);\n         pointing_at_return_type\n     }\n \n@@ -3980,6 +3981,40 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// When encountering the expected boxed value allocated in the stack, suggest allocating it\n+    /// in the heap by calling `Box::new()`.\n+    fn suggest_boxing_when_appropriate(\n+        &self,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+        expr: &hir::Expr,\n+        expected: Ty<'tcx>,\n+        found: Ty<'tcx>,\n+    ) {\n+        if self.tcx.hir().is_const_scope(expr.hir_id) {\n+            // Do not suggest `Box::new` in const context.\n+            return;\n+        }\n+        if expected.is_box() && !found.is_box() {\n+            let boxed_found = self.tcx.mk_box(found);\n+            if let (true, Ok(snippet)) = (\n+                self.can_coerce(boxed_found, expected),\n+                self.sess().source_map().span_to_snippet(expr.span),\n+            ) {\n+                err.span_suggestion(\n+                    expr.span,\n+                    \"you can store this in the heap calling `Box::new`\",\n+                    format!(\"Box::new({})\", snippet),\n+                    Applicability::MachineApplicable,\n+                );\n+                err.note(\"for more information about the distinction between the stack and the \\\n+                          heap, read https://doc.rust-lang.org/book/ch15-01-box.html, \\\n+                          https://doc.rust-lang.org/rust-by-example/std/box.html and \\\n+                          https://doc.rust-lang.org/std/boxed/index.html\");\n+            }\n+        }\n+    }\n+\n+\n     /// A common error is to forget to add a semicolon at the end of a block, e.g.,\n     ///\n     /// ```"}, {"sha": "3de02cd0bd4814ab2b535a94e8dec18e6b916ac4", "filename": "src/test/ui/suggestions/suggest-box.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fb2511c3c581d811d61e6022f863a5c0e7006ae1/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-box.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/fb2511c3c581d811d61e6022f863a5c0e7006ae1/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-box.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-box.fixed?ref=fb2511c3c581d811d61e6022f863a5c0e7006ae1", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+\n+fn main() {\n+    let _x: Box<dyn Fn() -> Result<(), ()>> = Box::new(|| { //~ ERROR mismatched types\n+        Err(())?;\n+        Ok(())\n+    });\n+}"}, {"sha": "e680a61db3b177cc912c35927b3075019fe58dd2", "filename": "src/test/ui/suggestions/suggest-box.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fb2511c3c581d811d61e6022f863a5c0e7006ae1/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2511c3c581d811d61e6022f863a5c0e7006ae1/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-box.rs?ref=fb2511c3c581d811d61e6022f863a5c0e7006ae1", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+\n+fn main() {\n+    let _x: Box<dyn Fn() -> Result<(), ()>> = || { //~ ERROR mismatched types\n+        Err(())?;\n+        Ok(())\n+    };\n+}"}, {"sha": "aacee2cda13419fd41bab7f9253d7af2811aa6d5", "filename": "src/test/ui/suggestions/suggest-box.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fb2511c3c581d811d61e6022f863a5c0e7006ae1/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb2511c3c581d811d61e6022f863a5c0e7006ae1/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-box.stderr?ref=fb2511c3c581d811d61e6022f863a5c0e7006ae1", "patch": "@@ -0,0 +1,24 @@\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-box.rs:4:47\n+   |\n+LL |       let _x: Box<dyn Fn() -> Result<(), ()>> = || {\n+   |  _______________________________________________^\n+LL | |         Err(())?;\n+LL | |         Ok(())\n+LL | |     };\n+   | |_____^ expected struct `std::boxed::Box`, found closure\n+   |\n+   = note: expected type `std::boxed::Box<dyn std::ops::Fn() -> std::result::Result<(), ()>>`\n+              found type `[closure@$DIR/suggest-box.rs:4:47: 7:6]`\n+   = note: for more information about the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html and https://doc.rust-lang.org/std/boxed/index.html\n+help: you can store this in the heap calling `Box::new`\n+   |\n+LL |     let _x: Box<dyn Fn() -> Result<(), ()>> = Box::new(|| {\n+LL |         Err(())?;\n+LL |         Ok(())\n+LL |     });\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}