{"sha": "7bd2e305d667e53314601ef04435d59b25e65235", "node_id": "C_kwDOAAsO6NoAKDdiZDJlMzA1ZDY2N2U1MzMxNDYwMWVmMDQ0MzVkNTliMjVlNjUyMzU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-21T00:06:26Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-21T00:06:26Z"}, "message": "Simplify", "tree": {"sha": "28655ac8043dc4ec8f78dbe1f059ae7efce203c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28655ac8043dc4ec8f78dbe1f059ae7efce203c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bd2e305d667e53314601ef04435d59b25e65235", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd2e305d667e53314601ef04435d59b25e65235", "html_url": "https://github.com/rust-lang/rust/commit/7bd2e305d667e53314601ef04435d59b25e65235", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bd2e305d667e53314601ef04435d59b25e65235/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c83f14a44a6f89f55cdb32bb7dc5c2277d9aafe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c83f14a44a6f89f55cdb32bb7dc5c2277d9aafe2", "html_url": "https://github.com/rust-lang/rust/commit/c83f14a44a6f89f55cdb32bb7dc5c2277d9aafe2"}], "stats": {"total": 25, "additions": 7, "deletions": 18}, "files": [{"sha": "c3f261122784e4b6021746469d6f380fb2aed0d9", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7bd2e305d667e53314601ef04435d59b25e65235/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bd2e305d667e53314601ef04435d59b25e65235/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=7bd2e305d667e53314601ef04435d59b25e65235", "patch": "@@ -5,7 +5,7 @@ use std::{mem, sync::Arc};\n \n use either::Either;\n use hir_expand::{\n-    ast_id_map::{AstIdMap, FileAstId},\n+    ast_id_map::AstIdMap,\n     hygiene::Hygiene,\n     name::{name, AsName, Name},\n     AstId, ExpandError, HirFileId, InFile,\n@@ -62,22 +62,14 @@ impl<'a> LowerCtx<'a> {\n         &self.hygiene\n     }\n \n-    pub(crate) fn file_id(&self) -> HirFileId {\n-        self.ast_id_map.as_ref().unwrap().0\n-    }\n-\n     pub(crate) fn lower_path(&self, ast: ast::Path) -> Option<Path> {\n         Path::from_src(ast, self)\n     }\n \n-    pub(crate) fn ast_id<N: AstNode>(\n-        &self,\n-        db: &dyn DefDatabase,\n-        item: &N,\n-    ) -> Option<FileAstId<N>> {\n-        let (file_id, ast_id_map) = self.ast_id_map.as_ref()?;\n-        let ast_id_map = ast_id_map.get_or_init(|| db.ast_id_map(*file_id));\n-        Some(ast_id_map.ast_id(item))\n+    pub(crate) fn ast_id<N: AstNode>(&self, db: &dyn DefDatabase, item: &N) -> Option<AstId<N>> {\n+        let &(file_id, ref ast_id_map) = self.ast_id_map.as_ref()?;\n+        let ast_id_map = ast_id_map.get_or_init(|| db.ast_id_map(file_id));\n+        Some(InFile::new(file_id, ast_id_map.ast_id(item)))\n     }\n }\n "}, {"sha": "59f0a8458a5fb3d117bbaf7b4a7fb2023a2e868c", "filename": "crates/hir-def/src/type_ref.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7bd2e305d667e53314601ef04435d59b25e65235/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bd2e305d667e53314601ef04435d59b25e65235/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs?ref=7bd2e305d667e53314601ef04435d59b25e65235", "patch": "@@ -5,7 +5,7 @@ use std::fmt::Write;\n \n use hir_expand::{\n     name::{AsName, Name},\n-    AstId, InFile,\n+    AstId,\n };\n use syntax::ast::{self, HasName};\n \n@@ -236,10 +236,7 @@ impl TypeRef {\n                 TypeRef::DynTrait(type_bounds_from_ast(ctx, inner.type_bound_list()))\n             }\n             ast::Type::MacroType(mt) => match mt.macro_call() {\n-                Some(mc) => ctx\n-                    .ast_id(ctx.db, &mc)\n-                    .map(|mc| TypeRef::Macro(InFile::new(ctx.file_id(), mc)))\n-                    .unwrap_or(TypeRef::Error),\n+                Some(mc) => ctx.ast_id(ctx.db, &mc).map(TypeRef::Macro).unwrap_or(TypeRef::Error),\n                 None => TypeRef::Error,\n             },\n         }"}]}