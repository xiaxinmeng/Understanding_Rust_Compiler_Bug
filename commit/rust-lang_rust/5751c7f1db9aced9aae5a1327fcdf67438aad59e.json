{"sha": "5751c7f1db9aced9aae5a1327fcdf67438aad59e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NTFjN2YxZGI5YWNlZDlhYWU1YTEzMjdmY2RmNjc0MzhhYWQ1OWU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-17T00:08:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-17T00:08:57Z"}, "message": "Rollup merge of #74033 - ehuss:std-compile-all-platforms, r=Mark-Simulacrum\n\nAdd build support for Cargo's build-std feature.\n\nThis makes some changes to the standard library to make it easier to use with Cargo's build-std feature. The primary goal is to make it so that Cargo and its users do not need to know which crates to build and which features to use for every platform.\n\nConditional cfgs are adjusted so that there is usually a fall-through for unsupported platforms. Additionally, there is a \"restricted-std\" feature to mark `std` as unstable when used with build-std on no_std platforms. There is no intent to stabilize this feature for the foreseeable future.\n\nThis borrows some of the implementation for wasm which already does what this needs. More code sharing can be done with some other platforms (there is a lot of duplication with cloudabi, hermit, and sgx), but I figure that can be done in a future PR.\n\nThere are some small changes to stable behavior in this PR:\n- `std::env::consts::ARCH` on asmjs now reports \"wasm32\", to match its actual architecture.\n- Some of the wasm error messages for unsupported features report a slightly different error message so that the code can be reused.\n\nThere should otherwise not be any changes to how std is built for distribution via bootstrap.\n\nThis does not yet support all platforms when used with build-std.\n\n- It doesn't work with 16-bit targets (hashbrown does not support that).\n- It does not work with JSON spec targets.\n    - In particular, all target triple snooping will need to be replaced with appropriate target option checking.\n- Switching to gimli (#73441) will make cross-building *much* easier.\n- There are still a ton of issues on the Cargo side to resolve. A big one is panic strategy support.\n\nFuture PRs are intended to address some of these issues.", "tree": {"sha": "0ac840ade1f8aa389f3afff6b24e9ae9d7f0900d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ac840ade1f8aa389f3afff6b24e9ae9d7f0900d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5751c7f1db9aced9aae5a1327fcdf67438aad59e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfEOwaCRBK7hj4Ov3rIwAAdHIIABqPzP/BXZowfJ1UF/CyxuW3\nuB5UHUkj7toGZ4xJYZuCA3ozUOFRfPcYZyI3wqt1buABX8hzSKizOh+tgHIeXSk+\nu6i3VDcxq6CJRI3BXKjTDqiam/mc8yJtQTn2tAfw0H3fhK1jkZQcK6TRz/1a/kHJ\nKApMjFlZnZwXDb7ZDGdkar0YkGnCYJYH2+dZYwO4kaL6Ro+AyUW6RmVtb0H2miOi\nTf8fEjMEeZNjfr98Jw1szljmwtbNG+zTlAfawqHkbUIjbkESOoad26r4pVYX9Oyn\ngLBzRMkUMzkVjpIMMZxjsMXrJ75y6oq5nNUrWr4JBn9JHh0gmPevAjOLEQ1XT68=\n=+sbZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 0ac840ade1f8aa389f3afff6b24e9ae9d7f0900d\nparent 41d956bf632fbc658f21a4195344fe79b685cde9\nparent 3d44d3ccfd0a17c6d45bc504be182b47efe1018d\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594944537 -0700\ncommitter GitHub <noreply@github.com> 1594944537 -0700\n\nRollup merge of #74033 - ehuss:std-compile-all-platforms, r=Mark-Simulacrum\n\nAdd build support for Cargo's build-std feature.\n\nThis makes some changes to the standard library to make it easier to use with Cargo's build-std feature. The primary goal is to make it so that Cargo and its users do not need to know which crates to build and which features to use for every platform.\n\nConditional cfgs are adjusted so that there is usually a fall-through for unsupported platforms. Additionally, there is a \"restricted-std\" feature to mark `std` as unstable when used with build-std on no_std platforms. There is no intent to stabilize this feature for the foreseeable future.\n\nThis borrows some of the implementation for wasm which already does what this needs. More code sharing can be done with some other platforms (there is a lot of duplication with cloudabi, hermit, and sgx), but I figure that can be done in a future PR.\n\nThere are some small changes to stable behavior in this PR:\n- `std::env::consts::ARCH` on asmjs now reports \"wasm32\", to match its actual architecture.\n- Some of the wasm error messages for unsupported features report a slightly different error message so that the code can be reused.\n\nThere should otherwise not be any changes to how std is built for distribution via bootstrap.\n\nThis does not yet support all platforms when used with build-std.\n\n- It doesn't work with 16-bit targets (hashbrown does not support that).\n- It does not work with JSON spec targets.\n    - In particular, all target triple snooping will need to be replaced with appropriate target option checking.\n- Switching to gimli (#73441) will make cross-building *much* easier.\n- There are still a ton of issues on the Cargo side to resolve. A big one is panic strategy support.\n\nFuture PRs are intended to address some of these issues.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5751c7f1db9aced9aae5a1327fcdf67438aad59e", "html_url": "https://github.com/rust-lang/rust/commit/5751c7f1db9aced9aae5a1327fcdf67438aad59e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5751c7f1db9aced9aae5a1327fcdf67438aad59e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41d956bf632fbc658f21a4195344fe79b685cde9", "url": "https://api.github.com/repos/rust-lang/rust/commits/41d956bf632fbc658f21a4195344fe79b685cde9", "html_url": "https://github.com/rust-lang/rust/commit/41d956bf632fbc658f21a4195344fe79b685cde9"}, {"sha": "3d44d3ccfd0a17c6d45bc504be182b47efe1018d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d44d3ccfd0a17c6d45bc504be182b47efe1018d", "html_url": "https://github.com/rust-lang/rust/commit/3d44d3ccfd0a17c6d45bc504be182b47efe1018d"}], "stats": {"total": 782, "additions": 437, "deletions": 345}, "files": [{"sha": "28ff6b3b1ebf29a7c3b9c51d70fc920e6299b660", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -2056,6 +2056,7 @@ dependencies = [\n name = \"panic_abort\"\n version = \"0.0.0\"\n dependencies = [\n+ \"cfg-if\",\n  \"compiler_builtins\",\n  \"core\",\n  \"libc\",\n@@ -4552,6 +4553,7 @@ dependencies = [\n name = \"test\"\n version = \"0.0.0\"\n dependencies = [\n+ \"cfg-if\",\n  \"core\",\n  \"getopts\",\n  \"libc\","}, {"sha": "dc385022440e04da18fa35401831f8cbf94fdf1a", "filename": "src/libpanic_abort/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibpanic_abort%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibpanic_abort%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2FCargo.toml?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -11,6 +11,7 @@ bench = false\n doc = false\n \n [dependencies]\n+cfg-if = { version = \"0.1.8\", features = ['rustc-dep-of-std'] }\n core = { path = \"../libcore\" }\n libc = { version = \"0.2\", default-features = false }\n compiler_builtins = \"0.1.0\""}, {"sha": "95f3966228a2fdfff744e8edb07792e991aa82e4", "filename": "src/libpanic_abort/lib.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibpanic_abort%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibpanic_abort%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2Flib.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -40,23 +40,26 @@ pub unsafe extern \"C\" fn __rust_panic_cleanup(_: *mut u8) -> *mut (dyn Any + Sen\n pub unsafe extern \"C\" fn __rust_start_panic(_payload: usize) -> u32 {\n     abort();\n \n-    #[cfg(any(unix, target_os = \"cloudabi\"))]\n-    unsafe fn abort() -> ! {\n-        libc::abort();\n-    }\n-\n-    #[cfg(any(windows, all(target_arch = \"wasm32\", not(target_os = \"emscripten\"))))]\n-    unsafe fn abort() -> ! {\n-        core::intrinsics::abort();\n-    }\n-\n-    #[cfg(any(target_os = \"hermit\", all(target_vendor = \"fortanix\", target_env = \"sgx\")))]\n-    unsafe fn abort() -> ! {\n-        // call std::sys::abort_internal\n-        extern \"C\" {\n-            pub fn __rust_abort() -> !;\n+    cfg_if::cfg_if! {\n+        if #[cfg(any(unix, target_os = \"cloudabi\"))] {\n+            unsafe fn abort() -> ! {\n+                libc::abort();\n+            }\n+        } else if #[cfg(any(target_os = \"hermit\",\n+                            all(target_vendor = \"fortanix\", target_env = \"sgx\")\n+        ))] {\n+            unsafe fn abort() -> ! {\n+                // call std::sys::abort_internal\n+                extern \"C\" {\n+                    pub fn __rust_abort() -> !;\n+                }\n+                __rust_abort();\n+            }\n+        } else {\n+            unsafe fn abort() -> ! {\n+                core::intrinsics::abort();\n+            }\n         }\n-        __rust_abort();\n     }\n }\n "}, {"sha": "430062d4ac44eb7ec576c0b1fc51d8d70b723c5f", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -41,21 +41,33 @@ cfg_if::cfg_if! {\n     if #[cfg(target_os = \"emscripten\")] {\n         #[path = \"emcc.rs\"]\n         mod real_imp;\n-    } else if #[cfg(target_arch = \"wasm32\")] {\n-        #[path = \"dummy.rs\"]\n-        mod real_imp;\n     } else if #[cfg(target_os = \"hermit\")] {\n         #[path = \"hermit.rs\"]\n         mod real_imp;\n     } else if #[cfg(target_env = \"msvc\")] {\n         #[path = \"seh.rs\"]\n         mod real_imp;\n-    } else {\n+    } else if #[cfg(any(\n+        all(target_family = \"windows\", target_env = \"gnu\"),\n+        target_os = \"cloudabi\",\n+        target_family = \"unix\",\n+        all(target_vendor = \"fortanix\", target_env = \"sgx\"),\n+    ))] {\n         // Rust runtime's startup objects depend on these symbols, so make them public.\n         #[cfg(all(target_os=\"windows\", target_arch = \"x86\", target_env=\"gnu\"))]\n         pub use real_imp::eh_frame_registry::*;\n         #[path = \"gcc.rs\"]\n         mod real_imp;\n+    } else {\n+        // Targets that don't support unwinding.\n+        // - arch=wasm32\n+        // - os=none (\"bare metal\" targets)\n+        // - os=uefi\n+        // - nvptx64-nvidia-cuda\n+        // - avr-unknown-unknown\n+        // - mipsel-sony-psp\n+        #[path = \"dummy.rs\"]\n+        mod real_imp;\n     }\n }\n "}, {"sha": "f960bdecc579f642f0c1489e0eb94ae4eb8703c8", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -26,6 +26,7 @@\n #![feature(in_band_lifetimes)]\n #![feature(negative_impls)]\n #![feature(optin_builtin_traits)]\n+#![feature(restricted_std)]\n #![feature(rustc_attrs)]\n #![feature(min_specialization)]\n #![recursion_limit = \"256\"]"}, {"sha": "5d972c70d139255f27b137c08895167d1c9f572d", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -502,7 +502,8 @@ impl Visitor<'tcx> for Checker<'tcx> {\n         match item.kind {\n             hir::ItemKind::ExternCrate(_) => {\n                 // compiler-generated `extern crate` items have a dummy span.\n-                if item.span.is_dummy() {\n+                // `std` is still checked for the `restricted-std` feature.\n+                if item.span.is_dummy() && item.ident.as_str() != \"std\" {\n                     return;\n                 }\n "}, {"sha": "eb2753d62457a6fab85f31ec5e9337240387fd98", "filename": "src/libstd/build.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -62,5 +62,29 @@ fn main() {\n         }\n         println!(\"cargo:rustc-link-lib=c\");\n         println!(\"cargo:rustc-link-lib=compiler_rt\");\n+    } else if (target.contains(\"sgx\") && target.contains(\"fortanix\"))\n+        || target.contains(\"hermit\")\n+        || target.contains(\"l4re\")\n+        || target.contains(\"redox\")\n+        || target.contains(\"haiku\")\n+        || target.contains(\"vxworks\")\n+        || target.contains(\"wasm32\")\n+        || target.contains(\"asmjs\")\n+    {\n+        // These platforms don't have any special requirements.\n+    } else {\n+        // This is for Cargo's build-std support, to mark std as unstable for\n+        // typically no_std platforms.\n+        // This covers:\n+        // - os=none (\"bare metal\" targets)\n+        // - mipsel-sony-psp\n+        // - nvptx64-nvidia-cuda\n+        // - avr-unknown-unknown\n+        // - tvos (aarch64-apple-tvos, x86_64-apple-tvos)\n+        // - uefi (x86_64-unknown-uefi, i686-unknown-uefi)\n+        // - JSON targets\n+        // - Any new targets that have not been explicitly added above.\n+        println!(\"cargo:rustc-cfg=feature=\\\"restricted-std\\\"\");\n     }\n+    println!(\"cargo:rustc-env=STD_ENV_ARCH={}\", env::var(\"CARGO_CFG_TARGET_ARCH\").unwrap());\n }"}, {"sha": "6489e0709cb91f8dec8d51f3a61d3709c1bfef87", "filename": "src/libstd/env.rs", "status": "modified", "additions": 1, "deletions": 76, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -882,7 +882,7 @@ pub mod consts {\n     /// - s390x\n     /// - sparc64\n     #[stable(feature = \"env\", since = \"1.0.0\")]\n-    pub const ARCH: &str = super::arch::ARCH;\n+    pub const ARCH: &str = env!(\"STD_ENV_ARCH\");\n \n     /// The family of the operating system. Example value is `unix`.\n     ///\n@@ -966,81 +966,6 @@ pub mod consts {\n     pub const EXE_EXTENSION: &str = os::EXE_EXTENSION;\n }\n \n-#[cfg(target_arch = \"x86\")]\n-mod arch {\n-    pub const ARCH: &str = \"x86\";\n-}\n-\n-#[cfg(target_arch = \"x86_64\")]\n-mod arch {\n-    pub const ARCH: &str = \"x86_64\";\n-}\n-\n-#[cfg(target_arch = \"arm\")]\n-mod arch {\n-    pub const ARCH: &str = \"arm\";\n-}\n-\n-#[cfg(target_arch = \"aarch64\")]\n-mod arch {\n-    pub const ARCH: &str = \"aarch64\";\n-}\n-\n-#[cfg(target_arch = \"mips\")]\n-mod arch {\n-    pub const ARCH: &str = \"mips\";\n-}\n-\n-#[cfg(target_arch = \"mips64\")]\n-mod arch {\n-    pub const ARCH: &str = \"mips64\";\n-}\n-\n-#[cfg(target_arch = \"powerpc\")]\n-mod arch {\n-    pub const ARCH: &str = \"powerpc\";\n-}\n-\n-#[cfg(target_arch = \"powerpc64\")]\n-mod arch {\n-    pub const ARCH: &str = \"powerpc64\";\n-}\n-\n-#[cfg(target_arch = \"s390x\")]\n-mod arch {\n-    pub const ARCH: &str = \"s390x\";\n-}\n-\n-#[cfg(target_arch = \"sparc64\")]\n-mod arch {\n-    pub const ARCH: &str = \"sparc64\";\n-}\n-\n-#[cfg(target_arch = \"le32\")]\n-mod arch {\n-    pub const ARCH: &str = \"le32\";\n-}\n-\n-#[cfg(target_arch = \"asmjs\")]\n-mod arch {\n-    pub const ARCH: &str = \"asmjs\";\n-}\n-\n-#[cfg(target_arch = \"wasm32\")]\n-mod arch {\n-    pub const ARCH: &str = \"wasm32\";\n-}\n-\n-#[cfg(target_arch = \"hexagon\")]\n-mod arch {\n-    pub const ARCH: &'static str = \"hexagon\";\n-}\n-\n-#[cfg(target_arch = \"riscv64\")]\n-mod arch {\n-    pub const ARCH: &'static str = \"riscv64\";\n-}\n-\n #[cfg(test)]\n mod tests {\n     use super::*;"}, {"sha": "b5ba0da7ae50dc494b640c2d8fea2229315757b4", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -198,7 +198,8 @@\n //! [primitive types]: ../book/ch03-02-data-types.html\n //! [rust-discord]: https://discord.gg/rust-lang\n \n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+#![cfg_attr(not(feature = \"restricted-std\"), stable(feature = \"rust1\", since = \"1.0.0\"))]\n+#![cfg_attr(feature = \"restricted-std\", unstable(feature = \"restricted_std\", issue = \"none\"))]\n #![doc(\n     html_root_url = \"https://doc.rust-lang.org/nightly/\",\n     html_playground_url = \"https://play.rust-lang.org/\",\n@@ -554,3 +555,9 @@ include!(\"primitive_docs.rs\");\n // the rustdoc documentation for the existing keywords. Using `include!`\n // because rustdoc only looks for these modules at the crate level.\n include!(\"keyword_docs.rs\");\n+\n+// This is required to avoid an unstable error when `restricted-std` is not\n+// enabled. The use of #![feature(restricted_std)] in rustc-std-workspace-std\n+// is unconditional, so the unstable feature needs to be defined somewhere.\n+#[cfg_attr(not(feature = \"restricted-std\"), unstable(feature = \"restricted_std\", issue = \"none\"))]\n+mod __restricted_std_workaround {}"}, {"sha": "7b5fac922d08a77151677b65d6118ccbb59f8881", "filename": "src/libstd/sys/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fmod.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -48,7 +48,8 @@ cfg_if::cfg_if! {\n         mod sgx;\n         pub use self::sgx::*;\n     } else {\n-        compile_error!(\"libstd doesn't compile for this platform yet\");\n+        mod unsupported;\n+        pub use self::unsupported::*;\n     }\n }\n "}, {"sha": "8d5d0a2f5ccd165987274b961b30887804b34045", "filename": "src/libstd/sys/unsupported/alloc.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funsupported%2Falloc.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -0,0 +1,22 @@\n+use crate::alloc::{GlobalAlloc, Layout, System};\n+\n+#[stable(feature = \"alloc_system_type\", since = \"1.28.0\")]\n+unsafe impl GlobalAlloc for System {\n+    #[inline]\n+    unsafe fn alloc(&self, _layout: Layout) -> *mut u8 {\n+        0 as *mut u8\n+    }\n+\n+    #[inline]\n+    unsafe fn alloc_zeroed(&self, _layout: Layout) -> *mut u8 {\n+        0 as *mut u8\n+    }\n+\n+    #[inline]\n+    unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {}\n+\n+    #[inline]\n+    unsafe fn realloc(&self, _ptr: *mut u8, _layout: Layout, _new_size: usize) -> *mut u8 {\n+        0 as *mut u8\n+    }\n+}"}, {"sha": "71d0c5fa13e18a1a6167cec35eb34317c3829df6", "filename": "src/libstd/sys/unsupported/args.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funsupported%2Fargs.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -0,0 +1,38 @@\n+use crate::ffi::OsString;\n+\n+pub unsafe fn init(_argc: isize, _argv: *const *const u8) {}\n+pub unsafe fn cleanup() {}\n+\n+pub struct Args {}\n+\n+pub fn args() -> Args {\n+    Args {}\n+}\n+\n+impl Args {\n+    pub fn inner_debug(&self) -> &[OsString] {\n+        &[]\n+    }\n+}\n+\n+impl Iterator for Args {\n+    type Item = OsString;\n+    fn next(&mut self) -> Option<OsString> {\n+        None\n+    }\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        (0, Some(0))\n+    }\n+}\n+\n+impl ExactSizeIterator for Args {\n+    fn len(&self) -> usize {\n+        0\n+    }\n+}\n+\n+impl DoubleEndedIterator for Args {\n+    fn next_back(&mut self) -> Option<OsString> {\n+        None\n+    }\n+}"}, {"sha": "304cf906b2aeadba92007440bb5628e3c9ed8184", "filename": "src/libstd/sys/unsupported/cmath.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funsupported%2Fcmath.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "previous_filename": "src/libstd/sys/wasm/cmath.rs"}, {"sha": "80311d26819ad6166d44c20da3be670a36ccda67", "filename": "src/libstd/sys/unsupported/common.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funsupported%2Fcommon.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -0,0 +1,48 @@\n+use crate::io as std_io;\n+\n+pub mod memchr {\n+    pub use core::slice::memchr::{memchr, memrchr};\n+}\n+\n+pub use crate::sys_common::os_str_bytes as os_str;\n+\n+// This is not necessarily correct. May want to consider making it part of the\n+// spec definition?\n+use crate::os::raw::c_char;\n+\n+#[cfg(not(test))]\n+pub fn init() {}\n+\n+pub fn unsupported<T>() -> std_io::Result<T> {\n+    Err(unsupported_err())\n+}\n+\n+pub fn unsupported_err() -> std_io::Error {\n+    std_io::Error::new(std_io::ErrorKind::Other, \"operation not supported on this platform\")\n+}\n+\n+pub fn decode_error_kind(_code: i32) -> crate::io::ErrorKind {\n+    crate::io::ErrorKind::Other\n+}\n+\n+pub fn abort_internal() -> ! {\n+    core::intrinsics::abort();\n+}\n+\n+pub fn hashmap_random_keys() -> (u64, u64) {\n+    (1, 2)\n+}\n+\n+// This enum is used as the storage for a bunch of types which can't actually\n+// exist.\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n+pub enum Void {}\n+\n+pub unsafe fn strlen(mut s: *const c_char) -> usize {\n+    let mut n = 0;\n+    while *s != 0 {\n+        n += 1;\n+        s = s.offset(1);\n+    }\n+    return n;\n+}"}, {"sha": "a578eee8ccce2a121809f814aee7dfadea286f52", "filename": "src/libstd/sys/unsupported/condvar.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funsupported%2Fcondvar.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -18,11 +18,11 @@ impl Condvar {\n     pub unsafe fn notify_all(&self) {}\n \n     pub unsafe fn wait(&self, _mutex: &Mutex) {\n-        panic!(\"can't block with web assembly\")\n+        panic!(\"condvar wait not supported\")\n     }\n \n     pub unsafe fn wait_timeout(&self, _mutex: &Mutex, _dur: Duration) -> bool {\n-        panic!(\"can't block with web assembly\");\n+        panic!(\"condvar wait not supported\");\n     }\n \n     #[inline]", "previous_filename": "src/libstd/sys/wasm/condvar.rs"}, {"sha": "d2efec506c56bb25222113224bc919137fa37823", "filename": "src/libstd/sys/unsupported/env.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funsupported%2Fenv.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -0,0 +1,9 @@\n+pub mod os {\n+    pub const FAMILY: &str = \"\";\n+    pub const OS: &str = \"\";\n+    pub const DLL_PREFIX: &str = \"\";\n+    pub const DLL_SUFFIX: &str = \"\";\n+    pub const DLL_EXTENSION: &str = \"\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n+}"}, {"sha": "ecb5b51cccdcd965d85e9ee8e22ecb878d876719", "filename": "src/libstd/sys/unsupported/fs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funsupported%2Ffs.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "previous_filename": "src/libstd/sys/wasm/fs.rs"}, {"sha": "d5f475b4310fde64b7f0f50154c14d345ce3788f", "filename": "src/libstd/sys/unsupported/io.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funsupported%2Fio.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "previous_filename": "src/libstd/sys/wasm/io.rs"}, {"sha": "87f655eecd54e74a33bde42e0b88d1a85a144d19", "filename": "src/libstd/sys/unsupported/mod.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funsupported%2Fmod.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -0,0 +1,24 @@\n+pub mod alloc;\n+pub mod args;\n+pub mod cmath;\n+pub mod condvar;\n+pub mod env;\n+pub mod fs;\n+pub mod io;\n+pub mod mutex;\n+pub mod net;\n+pub mod os;\n+pub mod path;\n+pub mod pipe;\n+pub mod process;\n+pub mod rwlock;\n+pub mod stack_overflow;\n+pub mod stdio;\n+pub mod thread;\n+#[cfg(target_thread_local)]\n+pub mod thread_local_dtor;\n+pub mod thread_local_key;\n+pub mod time;\n+\n+mod common;\n+pub use common::*;"}, {"sha": "9ef8af52eb5c247235557b5f2dc93f1cd7030dec", "filename": "src/libstd/sys/unsupported/mutex.rs", "status": "renamed", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funsupported%2Fmutex.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -5,9 +5,10 @@ pub struct Mutex {\n }\n \n unsafe impl Send for Mutex {}\n-unsafe impl Sync for Mutex {} // no threads on wasm\n+unsafe impl Sync for Mutex {} // no threads on this platform\n \n impl Mutex {\n+    #[rustc_const_stable(feature = \"const_sys_mutex_new\", since = \"1.0.0\")]\n     pub const fn new() -> Mutex {\n         Mutex { locked: UnsafeCell::new(false) }\n     }\n@@ -42,8 +43,8 @@ impl Mutex {\n     pub unsafe fn destroy(&self) {}\n }\n \n-// All empty stubs because wasm has no threads yet, so lock acquisition always\n-// succeeds.\n+// All empty stubs because this platform does not yet support threads, so lock\n+// acquisition always succeeds.\n pub struct ReentrantMutex {}\n \n impl ReentrantMutex {", "previous_filename": "src/libstd/sys/wasm/mutex.rs"}, {"sha": "5c9f1098f9b7f0e8422840ffcce0a91d5ae1223b", "filename": "src/libstd/sys/unsupported/net.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funsupported%2Fnet.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "previous_filename": "src/libstd/sys/wasm/net.rs"}, {"sha": "0615780c242128e7938df11233230533d3c7e219", "filename": "src/libstd/sys/unsupported/os.rs", "status": "renamed", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funsupported%2Fos.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -1,10 +1,9 @@\n+use super::{unsupported, Void};\n use crate::error::Error as StdError;\n use crate::ffi::{OsStr, OsString};\n use crate::fmt;\n use crate::io;\n use crate::path::{self, PathBuf};\n-use crate::str;\n-use crate::sys::{unsupported, Void};\n \n pub fn errno() -> i32 {\n     0\n@@ -48,14 +47,14 @@ where\n \n impl fmt::Display for JoinPathsError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        \"not supported on wasm yet\".fmt(f)\n+        \"not supported on this platform yet\".fmt(f)\n     }\n }\n \n impl StdError for JoinPathsError {\n     #[allow(deprecated)]\n     fn description(&self) -> &str {\n-        \"not supported on wasm yet\"\n+        \"not supported on this platform yet\"\n     }\n }\n \n@@ -73,35 +72,33 @@ impl Iterator for Env {\n }\n \n pub fn env() -> Env {\n-    panic!(\"not supported on web assembly\")\n+    panic!(\"not supported on this platform\")\n }\n \n pub fn getenv(_: &OsStr) -> io::Result<Option<OsString>> {\n     Ok(None)\n }\n \n pub fn setenv(_: &OsStr, _: &OsStr) -> io::Result<()> {\n-    Err(io::Error::new(io::ErrorKind::Other, \"cannot set env vars on wasm32-unknown-unknown\"))\n+    Err(io::Error::new(io::ErrorKind::Other, \"cannot set env vars on this platform\"))\n }\n \n pub fn unsetenv(_: &OsStr) -> io::Result<()> {\n-    Err(io::Error::new(io::ErrorKind::Other, \"cannot unset env vars on wasm32-unknown-unknown\"))\n+    Err(io::Error::new(io::ErrorKind::Other, \"cannot unset env vars on this platform\"))\n }\n \n pub fn temp_dir() -> PathBuf {\n-    panic!(\"no filesystem on wasm\")\n+    panic!(\"no filesystem on this platform\")\n }\n \n pub fn home_dir() -> Option<PathBuf> {\n     None\n }\n \n pub fn exit(_code: i32) -> ! {\n-    unsafe {\n-        crate::arch::wasm32::unreachable();\n-    }\n+    crate::intrinsics::abort()\n }\n \n pub fn getpid() -> u32 {\n-    panic!(\"no pids on wasm\")\n+    panic!(\"no pids on this platform\")\n }", "previous_filename": "src/libstd/sys/wasm/os.rs"}, {"sha": "840a7ae04262508abc1bd81fd78a7f8fd4231363", "filename": "src/libstd/sys/unsupported/path.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funsupported%2Fpath.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "previous_filename": "src/libstd/sys/wasm/path.rs"}, {"sha": "10d0925823eb94660278ce2390c892c093d7e3c6", "filename": "src/libstd/sys/unsupported/pipe.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funsupported%2Fpipe.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "previous_filename": "src/libstd/sys/wasm/pipe.rs"}, {"sha": "4702e5c549228ea27e5c59777cb707b34ea5d248", "filename": "src/libstd/sys/unsupported/process.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funsupported%2Fprocess.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "previous_filename": "src/libstd/sys/wasm/process.rs"}, {"sha": "d37f34ac9352d305f8369a7cc06ca1f5cf9c9e49", "filename": "src/libstd/sys/unsupported/rwlock.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funsupported%2Frwlock.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -5,7 +5,7 @@ pub struct RWLock {\n }\n \n unsafe impl Send for RWLock {}\n-unsafe impl Sync for RWLock {} // no threads on wasm\n+unsafe impl Sync for RWLock {} // no threads on this platform\n \n impl RWLock {\n     pub const fn new() -> RWLock {", "previous_filename": "src/libstd/sys/wasm/rwlock.rs"}, {"sha": "32555394cd5a58fa3f5347bafd85af5f91350aab", "filename": "src/libstd/sys/unsupported/stack_overflow.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funsupported%2Fstack_overflow.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "previous_filename": "src/libstd/sys/wasm/stack_overflow.rs"}, {"sha": "5a4e4505e93bddce1805a1f163e2df0c66bc7cfd", "filename": "src/libstd/sys/unsupported/stdio.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funsupported%2Fstdio.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "previous_filename": "src/libstd/sys/wasm/stdio.rs"}, {"sha": "20ae309db30d7379c29095c4f4f339fd43a9ae71", "filename": "src/libstd/sys/unsupported/thread.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funsupported%2Fthread.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -0,0 +1,41 @@\n+use super::{unsupported, Void};\n+use crate::ffi::CStr;\n+use crate::io;\n+use crate::time::Duration;\n+\n+pub struct Thread(Void);\n+\n+pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;\n+\n+impl Thread {\n+    // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n+    pub unsafe fn new(_stack: usize, _p: Box<dyn FnOnce()>) -> io::Result<Thread> {\n+        unsupported()\n+    }\n+\n+    pub fn yield_now() {\n+        // do nothing\n+    }\n+\n+    pub fn set_name(_name: &CStr) {\n+        // nope\n+    }\n+\n+    pub fn sleep(_dur: Duration) {\n+        panic!(\"can't sleep\");\n+    }\n+\n+    pub fn join(self) {\n+        match self.0 {}\n+    }\n+}\n+\n+pub mod guard {\n+    pub type Guard = !;\n+    pub unsafe fn current() -> Option<Guard> {\n+        None\n+    }\n+    pub unsafe fn init() -> Option<Guard> {\n+        None\n+    }\n+}"}, {"sha": "85d660983029c830329066a7da06ae20962adb6b", "filename": "src/libstd/sys/unsupported/thread_local_dtor.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funsupported%2Fthread_local_dtor.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "previous_filename": "src/libstd/sys/wasm/thread_local_dtor.rs"}, {"sha": "c31b61cbf56d386785f2f43e3ce292eb70004232", "filename": "src/libstd/sys/unsupported/thread_local_key.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funsupported%2Fthread_local_key.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -2,25 +2,25 @@ pub type Key = usize;\n \n #[inline]\n pub unsafe fn create(_dtor: Option<unsafe extern \"C\" fn(*mut u8)>) -> Key {\n-    panic!(\"should not be used on the wasm target\");\n+    panic!(\"should not be used on this target\");\n }\n \n #[inline]\n pub unsafe fn set(_key: Key, _value: *mut u8) {\n-    panic!(\"should not be used on the wasm target\");\n+    panic!(\"should not be used on this target\");\n }\n \n #[inline]\n pub unsafe fn get(_key: Key) -> *mut u8 {\n-    panic!(\"should not be used on the wasm target\");\n+    panic!(\"should not be used on this target\");\n }\n \n #[inline]\n pub unsafe fn destroy(_key: Key) {\n-    panic!(\"should not be used on the wasm target\");\n+    panic!(\"should not be used on this target\");\n }\n \n #[inline]\n pub fn requires_synchronized_create() -> bool {\n-    panic!(\"should not be used on the wasm target\");\n+    panic!(\"should not be used on this target\");\n }", "previous_filename": "src/libstd/sys/wasm/thread_local_key.rs"}, {"sha": "8aaf1777f242721db24eb70e917c826e8c13e7e6", "filename": "src/libstd/sys/unsupported/time.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Funsupported%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funsupported%2Ftime.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -10,7 +10,7 @@ pub const UNIX_EPOCH: SystemTime = SystemTime(Duration::from_secs(0));\n \n impl Instant {\n     pub fn now() -> Instant {\n-        panic!(\"time not implemented on wasm32-unknown-unknown\")\n+        panic!(\"time not implemented on this platform\")\n     }\n \n     pub const fn zero() -> Instant {\n@@ -36,7 +36,7 @@ impl Instant {\n \n impl SystemTime {\n     pub fn now() -> SystemTime {\n-        panic!(\"time not implemented on wasm32-unknown-unknown\")\n+        panic!(\"time not implemented on this platform\")\n     }\n \n     pub fn sub_time(&self, other: &SystemTime) -> Result<Duration, Duration> {", "previous_filename": "src/libstd/sys/wasm/time.rs"}, {"sha": "2704ff484f9911c920329e86ebdb21dbeaf9372e", "filename": "src/libstd/sys/wasi/mod.rs", "status": "modified", "additions": 11, "deletions": 34, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fmod.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -16,21 +16,18 @@\n \n use crate::io as std_io;\n use crate::mem;\n-use crate::os::raw::c_char;\n \n pub mod alloc;\n pub mod args;\n-#[path = \"../wasm/cmath.rs\"]\n+#[path = \"../unsupported/cmath.rs\"]\n pub mod cmath;\n-#[path = \"../wasm/condvar.rs\"]\n+#[path = \"../unsupported/condvar.rs\"]\n pub mod condvar;\n pub mod env;\n pub mod fd;\n pub mod fs;\n pub mod io;\n-#[path = \"../wasm/memchr.rs\"]\n-pub mod memchr;\n-#[path = \"../wasm/mutex.rs\"]\n+#[path = \"../unsupported/mutex.rs\"]\n pub mod mutex;\n pub mod net;\n pub mod os;\n@@ -39,28 +36,22 @@ pub mod ext;\n pub mod path;\n pub mod pipe;\n pub mod process;\n-#[path = \"../wasm/rwlock.rs\"]\n+#[path = \"../unsupported/rwlock.rs\"]\n pub mod rwlock;\n-#[path = \"../wasm/stack_overflow.rs\"]\n+#[path = \"../unsupported/stack_overflow.rs\"]\n pub mod stack_overflow;\n pub mod stdio;\n pub mod thread;\n-#[path = \"../wasm/thread_local_dtor.rs\"]\n+#[path = \"../unsupported/thread_local_dtor.rs\"]\n pub mod thread_local_dtor;\n-#[path = \"../wasm/thread_local_key.rs\"]\n+#[path = \"../unsupported/thread_local_key.rs\"]\n pub mod thread_local_key;\n pub mod time;\n \n-#[cfg(not(test))]\n-pub fn init() {}\n-\n-pub fn unsupported<T>() -> std_io::Result<T> {\n-    Err(unsupported_err())\n-}\n-\n-pub fn unsupported_err() -> std_io::Error {\n-    std_io::Error::new(std_io::ErrorKind::Other, \"operation not supported on wasm yet\")\n-}\n+#[path = \"../unsupported/common.rs\"]\n+#[allow(unused)]\n+mod common;\n+pub use common::*;\n \n pub fn decode_error_kind(errno: i32) -> std_io::ErrorKind {\n     use std_io::ErrorKind::*;\n@@ -86,20 +77,6 @@ pub fn decode_error_kind(errno: i32) -> std_io::ErrorKind {\n     }\n }\n \n-// This enum is used as the storage for a bunch of types which can't actually\n-// exist.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n-pub enum Void {}\n-\n-pub unsafe fn strlen(mut s: *const c_char) -> usize {\n-    let mut n = 0;\n-    while *s != 0 {\n-        n += 1;\n-        s = s.offset(1);\n-    }\n-    return n;\n-}\n-\n pub fn abort_internal() -> ! {\n     unsafe { libc::abort() }\n }"}, {"sha": "9967482197eb3642a1e1fef3d1cdc04b9c05711d", "filename": "src/libstd/sys/wasm/memchr.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41d956bf632fbc658f21a4195344fe79b685cde9/src%2Flibstd%2Fsys%2Fwasm%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41d956bf632fbc658f21a4195344fe79b685cde9/src%2Flibstd%2Fsys%2Fwasm%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fmemchr.rs?ref=41d956bf632fbc658f21a4195344fe79b685cde9", "patch": "@@ -1 +0,0 @@\n-pub use core::slice::memchr::{memchr, memrchr};"}, {"sha": "3de58904043573d4d4020021156e98c8d0383c12", "filename": "src/libstd/sys/wasm/mod.rs", "status": "modified", "additions": 19, "deletions": 44, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Fwasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys%2Fwasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fmod.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -14,25 +14,35 @@\n //! compiling for wasm. That way it's a compile time error for something that's\n //! guaranteed to be a runtime error!\n \n-use crate::os::raw::c_char;\n-\n pub mod alloc;\n pub mod args;\n+#[path = \"../unsupported/cmath.rs\"]\n pub mod cmath;\n pub mod env;\n+#[path = \"../unsupported/fs.rs\"]\n pub mod fs;\n+#[path = \"../unsupported/io.rs\"]\n pub mod io;\n-pub mod memchr;\n+#[path = \"../unsupported/net.rs\"]\n pub mod net;\n+#[path = \"../unsupported/os.rs\"]\n pub mod os;\n+#[path = \"../unsupported/path.rs\"]\n pub mod path;\n+#[path = \"../unsupported/pipe.rs\"]\n pub mod pipe;\n+#[path = \"../unsupported/process.rs\"]\n pub mod process;\n+#[path = \"../unsupported/stack_overflow.rs\"]\n pub mod stack_overflow;\n+#[path = \"../unsupported/stdio.rs\"]\n pub mod stdio;\n pub mod thread;\n+#[path = \"../unsupported/thread_local_dtor.rs\"]\n pub mod thread_local_dtor;\n+#[path = \"../unsupported/thread_local_key.rs\"]\n pub mod thread_local_key;\n+#[path = \"../unsupported/time.rs\"]\n pub mod time;\n \n pub use crate::sys_common::os_str_bytes as os_str;\n@@ -46,50 +56,15 @@ cfg_if::cfg_if! {\n         #[path = \"rwlock_atomics.rs\"]\n         pub mod rwlock;\n     } else {\n+        #[path = \"../unsupported/condvar.rs\"]\n         pub mod condvar;\n+        #[path = \"../unsupported/mutex.rs\"]\n         pub mod mutex;\n+        #[path = \"../unsupported/rwlock.rs\"]\n         pub mod rwlock;\n     }\n }\n \n-#[cfg(not(test))]\n-pub fn init() {}\n-\n-pub fn unsupported<T>() -> crate::io::Result<T> {\n-    Err(unsupported_err())\n-}\n-\n-pub fn unsupported_err() -> crate::io::Error {\n-    crate::io::Error::new(crate::io::ErrorKind::Other, \"operation not supported on wasm yet\")\n-}\n-\n-pub fn decode_error_kind(_code: i32) -> crate::io::ErrorKind {\n-    crate::io::ErrorKind::Other\n-}\n-\n-// This enum is used as the storage for a bunch of types which can't actually\n-// exist.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n-pub enum Void {}\n-\n-pub unsafe fn strlen(mut s: *const c_char) -> usize {\n-    let mut n = 0;\n-    while *s != 0 {\n-        n += 1;\n-        s = s.offset(1);\n-    }\n-    return n;\n-}\n-\n-pub fn abort_internal() -> ! {\n-    unsafe { crate::arch::wasm32::unreachable() }\n-}\n-\n-// We don't have randomness yet, but I totally used a random number generator to\n-// generate these numbers.\n-//\n-// More seriously though this is just for DOS protection in hash maps. It's ok\n-// if we don't do that on wasm just yet.\n-pub fn hashmap_random_keys() -> (u64, u64) {\n-    (1, 2)\n-}\n+#[path = \"../unsupported/common.rs\"]\n+mod common;\n+pub use common::*;"}, {"sha": "840f9093e00f15dd2ece0c6f81526db752e82ec1", "filename": "src/libstd/sys_common/mod.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmod.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -51,13 +51,9 @@ pub mod condvar;\n pub mod fs;\n pub mod io;\n pub mod mutex;\n-#[cfg(any(doc, // see `mod os`, docs are generated for multiple platforms\n-          unix,\n-          target_os = \"redox\",\n-          target_os = \"cloudabi\",\n-          target_os = \"hermit\",\n-          target_arch = \"wasm32\",\n-          all(target_vendor = \"fortanix\", target_env = \"sgx\")))]\n+// `doc` is required because `sys/mod.rs` imports `unix/ext/mod.rs` on Windows\n+// when generating documentation.\n+#[cfg(any(doc, not(windows)))]\n pub mod os_str_bytes;\n pub mod poison;\n pub mod process;\n@@ -74,6 +70,7 @@ cfg_if::cfg_if! {\n     if #[cfg(any(target_os = \"cloudabi\",\n                  target_os = \"l4re\",\n                  target_os = \"hermit\",\n+                 feature = \"restricted-std\",\n                  all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n                  all(target_vendor = \"fortanix\", target_env = \"sgx\")))] {\n         pub use crate::sys::net;"}, {"sha": "e66d8994147e13fc1ea4030fecc78966bd1b09d4", "filename": "src/libstd/sys_common/mutex.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys_common%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibstd%2Fsys_common%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmutex.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -17,6 +17,7 @@ impl Mutex {\n     /// Also, until `init` is called, behavior is undefined if this\n     /// mutex is ever used reentrantly, i.e., `raw_lock` or `try_lock`\n     /// are called by the thread currently holding the lock.\n+    #[rustc_const_stable(feature = \"const_sys_mutex_new\", since = \"1.0.0\")]\n     pub const fn new() -> Mutex {\n         Mutex(imp::Mutex::new())\n     }"}, {"sha": "a4748c5a46628d46727435a31a91e1e9169631bb", "filename": "src/libtest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibtest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibtest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2FCargo.toml?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -10,6 +10,7 @@ path = \"lib.rs\"\n crate-type = [\"dylib\", \"rlib\"]\n \n [dependencies]\n+cfg-if = { version = \"0.1.8\", features = ['rustc-dep-of-std'] }\n getopts = { version = \"0.2.21\", features = ['rustc-dep-of-std'] }\n term = { path = \"../libterm\" }\n std = { path = \"../libstd\" }"}, {"sha": "2fe87247e3acfc0951bb5c751d5f73f76dbb9194", "filename": "src/libtest/helpers/concurrency.rs", "status": "modified", "additions": 69, "deletions": 102, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibtest%2Fhelpers%2Fconcurrency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibtest%2Fhelpers%2Fconcurrency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fhelpers%2Fconcurrency.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -14,61 +14,36 @@ pub fn get_concurrency() -> usize {\n         }\n         Err(..) => num_cpus(),\n     };\n+}\n \n-    #[cfg(windows)]\n-    #[allow(nonstandard_style)]\n-    fn num_cpus() -> usize {\n-        #[repr(C)]\n-        struct SYSTEM_INFO {\n-            wProcessorArchitecture: u16,\n-            wReserved: u16,\n-            dwPageSize: u32,\n-            lpMinimumApplicationAddress: *mut u8,\n-            lpMaximumApplicationAddress: *mut u8,\n-            dwActiveProcessorMask: *mut u8,\n-            dwNumberOfProcessors: u32,\n-            dwProcessorType: u32,\n-            dwAllocationGranularity: u32,\n-            wProcessorLevel: u16,\n-            wProcessorRevision: u16,\n-        }\n-        extern \"system\" {\n-            fn GetSystemInfo(info: *mut SYSTEM_INFO) -> i32;\n-        }\n-        unsafe {\n-            let mut sysinfo = std::mem::zeroed();\n-            GetSystemInfo(&mut sysinfo);\n-            sysinfo.dwNumberOfProcessors as usize\n+cfg_if::cfg_if! {\n+    if #[cfg(windows)] {\n+        #[allow(nonstandard_style)]\n+        fn num_cpus() -> usize {\n+            #[repr(C)]\n+            struct SYSTEM_INFO {\n+                wProcessorArchitecture: u16,\n+                wReserved: u16,\n+                dwPageSize: u32,\n+                lpMinimumApplicationAddress: *mut u8,\n+                lpMaximumApplicationAddress: *mut u8,\n+                dwActiveProcessorMask: *mut u8,\n+                dwNumberOfProcessors: u32,\n+                dwProcessorType: u32,\n+                dwAllocationGranularity: u32,\n+                wProcessorLevel: u16,\n+                wProcessorRevision: u16,\n+            }\n+            extern \"system\" {\n+                fn GetSystemInfo(info: *mut SYSTEM_INFO) -> i32;\n+            }\n+            unsafe {\n+                let mut sysinfo = std::mem::zeroed();\n+                GetSystemInfo(&mut sysinfo);\n+                sysinfo.dwNumberOfProcessors as usize\n+            }\n         }\n-    }\n-\n-    #[cfg(target_os = \"vxworks\")]\n-    fn num_cpus() -> usize {\n-        // FIXME: Implement num_cpus on vxWorks\n-        1\n-    }\n-\n-    #[cfg(target_os = \"redox\")]\n-    fn num_cpus() -> usize {\n-        // FIXME: Implement num_cpus on Redox\n-        1\n-    }\n-\n-    #[cfg(target_os = \"hermit\")]\n-    fn num_cpus() -> usize {\n-        // FIXME: Implement num_cpus on HermitCore\n-        1\n-    }\n-\n-    #[cfg(any(\n-        all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n-        all(target_vendor = \"fortanix\", target_env = \"sgx\")\n-    ))]\n-    fn num_cpus() -> usize {\n-        1\n-    }\n-\n-    #[cfg(any(\n+    } else if #[cfg(any(\n         target_os = \"android\",\n         target_os = \"cloudabi\",\n         target_os = \"emscripten\",\n@@ -78,23 +53,46 @@ pub fn get_concurrency() -> usize {\n         target_os = \"macos\",\n         target_os = \"solaris\",\n         target_os = \"illumos\",\n-    ))]\n-    fn num_cpus() -> usize {\n-        unsafe { libc::sysconf(libc::_SC_NPROCESSORS_ONLN) as usize }\n-    }\n-\n-    #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\"))]\n-    fn num_cpus() -> usize {\n-        use std::ptr;\n+    ))] {\n+        fn num_cpus() -> usize {\n+            unsafe { libc::sysconf(libc::_SC_NPROCESSORS_ONLN) as usize }\n+        }\n+    } else if #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\", target_os = \"netbsd\"))] {\n+        fn num_cpus() -> usize {\n+            use std::ptr;\n \n-        let mut cpus: libc::c_uint = 0;\n-        let mut cpus_size = std::mem::size_of_val(&cpus);\n+            let mut cpus: libc::c_uint = 0;\n+            let mut cpus_size = std::mem::size_of_val(&cpus);\n \n-        unsafe {\n-            cpus = libc::sysconf(libc::_SC_NPROCESSORS_ONLN) as libc::c_uint;\n+            unsafe {\n+                cpus = libc::sysconf(libc::_SC_NPROCESSORS_ONLN) as libc::c_uint;\n+            }\n+            if cpus < 1 {\n+                let mut mib = [libc::CTL_HW, libc::HW_NCPU, 0, 0];\n+                unsafe {\n+                    libc::sysctl(\n+                        mib.as_mut_ptr(),\n+                        2,\n+                        &mut cpus as *mut _ as *mut _,\n+                        &mut cpus_size as *mut _ as *mut _,\n+                        ptr::null_mut(),\n+                        0,\n+                    );\n+                }\n+                if cpus < 1 {\n+                    cpus = 1;\n+                }\n+            }\n+            cpus as usize\n         }\n-        if cpus < 1 {\n+    } else if #[cfg(target_os = \"openbsd\")] {\n+        fn num_cpus() -> usize {\n+            use std::ptr;\n+\n+            let mut cpus: libc::c_uint = 0;\n+            let mut cpus_size = std::mem::size_of_val(&cpus);\n             let mut mib = [libc::CTL_HW, libc::HW_NCPU, 0, 0];\n+\n             unsafe {\n                 libc::sysctl(\n                     mib.as_mut_ptr(),\n@@ -108,43 +106,12 @@ pub fn get_concurrency() -> usize {\n             if cpus < 1 {\n                 cpus = 1;\n             }\n+            cpus as usize\n         }\n-        cpus as usize\n-    }\n-\n-    #[cfg(target_os = \"openbsd\")]\n-    fn num_cpus() -> usize {\n-        use std::ptr;\n-\n-        let mut cpus: libc::c_uint = 0;\n-        let mut cpus_size = std::mem::size_of_val(&cpus);\n-        let mut mib = [libc::CTL_HW, libc::HW_NCPU, 0, 0];\n-\n-        unsafe {\n-            libc::sysctl(\n-                mib.as_mut_ptr(),\n-                2,\n-                &mut cpus as *mut _ as *mut _,\n-                &mut cpus_size as *mut _ as *mut _,\n-                ptr::null_mut(),\n-                0,\n-            );\n-        }\n-        if cpus < 1 {\n-            cpus = 1;\n+    } else {\n+        // FIXME: implement on vxWorks, Redox, HermitCore, Haiku, l4re\n+        fn num_cpus() -> usize {\n+            1\n         }\n-        cpus as usize\n-    }\n-\n-    #[cfg(target_os = \"haiku\")]\n-    fn num_cpus() -> usize {\n-        // FIXME: implement\n-        1\n-    }\n-\n-    #[cfg(target_os = \"l4re\")]\n-    fn num_cpus() -> usize {\n-        // FIXME: implement\n-        1\n     }\n }"}, {"sha": "874ecc3764572b8f328a81f368a0f98cd567e7ae", "filename": "src/libtest/helpers/isatty.rs", "status": "modified", "additions": 27, "deletions": 29, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibtest%2Fhelpers%2Fisatty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibtest%2Fhelpers%2Fisatty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fhelpers%2Fisatty.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -1,34 +1,32 @@\n //! Helper module which provides a function to test\n //! if stdout is a tty.\n \n-#[cfg(any(\n-    target_os = \"cloudabi\",\n-    target_os = \"hermit\",\n-    all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n-    all(target_vendor = \"fortanix\", target_env = \"sgx\")\n-))]\n-pub fn stdout_isatty() -> bool {\n-    // FIXME: Implement isatty on SGX\n-    false\n-}\n-#[cfg(unix)]\n-pub fn stdout_isatty() -> bool {\n-    unsafe { libc::isatty(libc::STDOUT_FILENO) != 0 }\n-}\n-#[cfg(windows)]\n-pub fn stdout_isatty() -> bool {\n-    type DWORD = u32;\n-    type BOOL = i32;\n-    type HANDLE = *mut u8;\n-    type LPDWORD = *mut u32;\n-    const STD_OUTPUT_HANDLE: DWORD = -11i32 as DWORD;\n-    extern \"system\" {\n-        fn GetStdHandle(which: DWORD) -> HANDLE;\n-        fn GetConsoleMode(hConsoleHandle: HANDLE, lpMode: LPDWORD) -> BOOL;\n-    }\n-    unsafe {\n-        let handle = GetStdHandle(STD_OUTPUT_HANDLE);\n-        let mut out = 0;\n-        GetConsoleMode(handle, &mut out) != 0\n+cfg_if::cfg_if! {\n+    if #[cfg(unix)] {\n+        pub fn stdout_isatty() -> bool {\n+            unsafe { libc::isatty(libc::STDOUT_FILENO) != 0 }\n+        }\n+    } else if #[cfg(windows)] {\n+        pub fn stdout_isatty() -> bool {\n+            type DWORD = u32;\n+            type BOOL = i32;\n+            type HANDLE = *mut u8;\n+            type LPDWORD = *mut u32;\n+            const STD_OUTPUT_HANDLE: DWORD = -11i32 as DWORD;\n+            extern \"system\" {\n+                fn GetStdHandle(which: DWORD) -> HANDLE;\n+                fn GetConsoleMode(hConsoleHandle: HANDLE, lpMode: LPDWORD) -> BOOL;\n+            }\n+            unsafe {\n+                let handle = GetStdHandle(STD_OUTPUT_HANDLE);\n+                let mut out = 0;\n+                GetConsoleMode(handle, &mut out) != 0\n+            }\n+        }\n+    } else {\n+        // FIXME: Implement isatty on SGX\n+        pub fn stdout_isatty() -> bool {\n+            false\n+        }\n     }\n }"}, {"sha": "c4d10ab177be9534659df7ae4b69fe9355f47c07", "filename": "src/libunwind/lib.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibunwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Flibunwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flib.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -9,12 +9,31 @@\n \n cfg_if::cfg_if! {\n     if #[cfg(target_env = \"msvc\")] {\n-        // no extra unwinder support needed\n-    } else if #[cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))] {\n-        // no unwinder on the system!\n-    } else {\n+        // Windows MSVC no extra unwinder support needed\n+    } else if #[cfg(any(\n+        target_os = \"l4re\",\n+        target_os = \"none\",\n+    ))] {\n+        // These \"unix\" family members do not have unwinder.\n+        // Note this also matches x86_64-linux-kernel.\n+    } else if #[cfg(any(\n+        unix,\n+        windows,\n+        target_os = \"cloudabi\",\n+        all(target_vendor = \"fortanix\", target_env = \"sgx\"),\n+    ))] {\n         mod libunwind;\n         pub use libunwind::*;\n+    } else {\n+        // no unwinder on the system!\n+        // - wasm32 (not emscripten, which is \"unix\" family)\n+        // - os=none (\"bare metal\" targets)\n+        // - os=hermit\n+        // - os=uefi\n+        // - os=cuda\n+        // - nvptx64-nvidia-cuda\n+        // - mipsel-sony-psp\n+        // - Any new targets not listed above.\n     }\n }\n "}, {"sha": "1e955c61ac85f1bb7f717c1d77b5fad3b5c1e4b3", "filename": "src/tools/rustc-std-workspace-std/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Ftools%2Frustc-std-workspace-std%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5751c7f1db9aced9aae5a1327fcdf67438aad59e/src%2Ftools%2Frustc-std-workspace-std%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustc-std-workspace-std%2Flib.rs?ref=5751c7f1db9aced9aae5a1327fcdf67438aad59e", "patch": "@@ -1 +1,2 @@\n+#![feature(restricted_std)]\n pub use std::*;"}]}