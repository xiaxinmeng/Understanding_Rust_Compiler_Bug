{"sha": "3f17dae37d8829a03312340918a839f0bf8b6088", "node_id": "C_kwDOAAsO6NoAKDNmMTdkYWUzN2Q4ODI5YTAzMzEyMzQwOTE4YTgzOWYwYmY4YjYwODg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-03-05T04:28:35Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-03-05T04:28:35Z"}, "message": "check extra args even if the function is not c_variadic", "tree": {"sha": "4c5fa9c7218db6e05093655761e3c6a67a2331ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c5fa9c7218db6e05093655761e3c6a67a2331ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f17dae37d8829a03312340918a839f0bf8b6088", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f17dae37d8829a03312340918a839f0bf8b6088", "html_url": "https://github.com/rust-lang/rust/commit/3f17dae37d8829a03312340918a839f0bf8b6088", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f17dae37d8829a03312340918a839f0bf8b6088/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69f11fff33f68701d222639a1a5ae991605ec3ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/69f11fff33f68701d222639a1a5ae991605ec3ab", "html_url": "https://github.com/rust-lang/rust/commit/69f11fff33f68701d222639a1a5ae991605ec3ab"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "f165093c958dba28ffcfcd499828aadf6a9f4beb", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3f17dae37d8829a03312340918a839f0bf8b6088/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f17dae37d8829a03312340918a839f0bf8b6088/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=3f17dae37d8829a03312340918a839f0bf8b6088", "patch": "@@ -281,6 +281,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.demand_suptype(provided_arg.span, formal_input_ty, coerced_ty);\n         };\n \n+        let minimum_input_count = formal_input_tys.len();\n+\n         // Check the arguments.\n         // We do this in a pretty awful way: first we type-check any arguments\n         // that are not closures, then we type-check the closures. This is so\n@@ -303,7 +305,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 })\n             }\n \n-            let minimum_input_count = formal_input_tys.len();\n             for (idx, arg) in provided_args.iter().enumerate() {\n                 // Warn only for the first loop (the \"no closures\" one).\n                 // Closure arguments themselves can't be diverging, but\n@@ -456,17 +457,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             err.emit();\n         }\n \n-        // We also need to make sure we at least write the ty of the other\n-        // arguments which we skipped above.\n-        if c_variadic {\n-            fn variadic_error<'tcx>(sess: &Session, span: Span, ty: Ty<'tcx>, cast_ty: &str) {\n-                use crate::structured_errors::MissingCastForVariadicArg;\n+        for arg in provided_args.iter().skip(minimum_input_count) {\n+            let arg_ty = self.check_expr(&arg);\n \n-                MissingCastForVariadicArg { sess, span, ty, cast_ty }.diagnostic().emit();\n-            }\n+            if c_variadic {\n+                // We also need to make sure we at least write the ty of the other\n+                // arguments which we skipped above, either because they were additional\n+                // c_variadic args, or because we had an argument count mismatch.\n+                fn variadic_error<'tcx>(sess: &Session, span: Span, ty: Ty<'tcx>, cast_ty: &str) {\n+                    use crate::structured_errors::MissingCastForVariadicArg;\n \n-            for arg in provided_args.iter().skip(expected_arg_count) {\n-                let arg_ty = self.check_expr(&arg);\n+                    MissingCastForVariadicArg { sess, span, ty, cast_ty }.diagnostic().emit();\n+                }\n \n                 // There are a few types which get autopromoted when passed via varargs\n                 // in C but we just error out instead and require explicit casts."}, {"sha": "479bd0d819fdb921b4a59fdb1e1cc737d544afca", "filename": "src/test/ui/tuple/wrong_argument_ice-4.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f17dae37d8829a03312340918a839f0bf8b6088/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f17dae37d8829a03312340918a839f0bf8b6088/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.rs?ref=3f17dae37d8829a03312340918a839f0bf8b6088", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    (|| {})(|| {\n+        //~^ ERROR this function takes 0 arguments but 1 argument was supplied\n+        let b = 1;\n+    });\n+}"}, {"sha": "fef5dca856db36592aad666b9a3cde8b603a3ffb", "filename": "src/test/ui/tuple/wrong_argument_ice-4.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3f17dae37d8829a03312340918a839f0bf8b6088/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f17dae37d8829a03312340918a839f0bf8b6088/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr?ref=3f17dae37d8829a03312340918a839f0bf8b6088", "patch": "@@ -0,0 +1,15 @@\n+error[E0057]: this function takes 0 arguments but 1 argument was supplied\n+  --> $DIR/wrong_argument_ice-4.rs:2:5\n+   |\n+LL |       (|| {})(|| {\n+   |  _____^^^^^^^_-\n+   | |     |\n+   | |     expected 0 arguments\n+LL | |\n+LL | |         let b = 1;\n+LL | |     });\n+   | |_____- supplied 1 argument\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0057`."}]}