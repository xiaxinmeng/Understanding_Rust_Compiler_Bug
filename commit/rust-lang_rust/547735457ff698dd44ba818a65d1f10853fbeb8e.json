{"sha": "547735457ff698dd44ba818a65d1f10853fbeb8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NzczNTQ1N2ZmNjk4ZGQ0NGJhODE4YTY1ZDFmMTA4NTNmYmViOGU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-21T23:30:24Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-06T04:43:58Z"}, "message": "Make WhileTrue into an EarlyLintPass lint.", "tree": {"sha": "d7197c5d275179b06bbd41cbaa9ffa4e3fdc14b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7197c5d275179b06bbd41cbaa9ffa4e3fdc14b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/547735457ff698dd44ba818a65d1f10853fbeb8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/547735457ff698dd44ba818a65d1f10853fbeb8e", "html_url": "https://github.com/rust-lang/rust/commit/547735457ff698dd44ba818a65d1f10853fbeb8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/547735457ff698dd44ba818a65d1f10853fbeb8e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f01562af33272fd5960fd2b6d1880abfcb790116", "url": "https://api.github.com/repos/rust-lang/rust/commits/f01562af33272fd5960fd2b6d1880abfcb790116", "html_url": "https://github.com/rust-lang/rust/commit/f01562af33272fd5960fd2b6d1880abfcb790116"}], "stats": {"total": 171, "additions": 116, "deletions": 55}, "files": [{"sha": "c9605445c24014eac9a6d26c0eeb7d766ecb5a8c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 18, "deletions": 26, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=547735457ff698dd44ba818a65d1f10853fbeb8e", "patch": "@@ -64,38 +64,30 @@ declare_lint! {\n \n declare_lint_pass!(WhileTrue => [WHILE_TRUE]);\n \n-fn as_while_cond(expr: &hir::Expr) -> Option<&hir::Expr> {\n-    if let hir::ExprKind::Loop(blk, ..) = &expr.node {\n-        if let Some(match_expr) = &blk.expr {\n-            if let hir::ExprKind::Match(cond, .., hir::MatchSource::WhileDesugar)\n-                = &match_expr.node\n-            {\n-                if let hir::ExprKind::DropTemps(cond) = &cond.node {\n-                    return Some(cond);\n-                }\n-            }\n-        }\n+/// Traverse through any amount of parenthesis and return the first non-parens expression.\n+fn pierce_parens(mut expr: &ast::Expr) -> &ast::Expr {\n+    while let ast::ExprKind::Paren(sub) = &expr.node {\n+        expr = sub;\n     }\n-\n-    None\n+    expr\n }\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for WhileTrue {\n-    fn check_expr(&mut self, cx: &LateContext<'_, '_>, e: &hir::Expr) {\n-        if let Some(ref cond) = as_while_cond(e) {\n-            if let hir::ExprKind::Lit(ref lit) = cond.node {\n+impl EarlyLintPass for WhileTrue {\n+    fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n+        if let ast::ExprKind::While(cond, ..) = &e.node {\n+            if let ast::ExprKind::Lit(ref lit) = pierce_parens(cond).node {\n                 if let ast::LitKind::Bool(true) = lit.node {\n                     if lit.span.ctxt() == SyntaxContext::empty() {\n                         let msg = \"denote infinite loops with `loop { ... }`\";\n-                        let condition_span = cx.tcx.sess.source_map().def_span(e.span);\n-                        let mut err = cx.struct_span_lint(WHILE_TRUE, condition_span, msg);\n-                        err.span_suggestion_short(\n-                            condition_span,\n-                            \"use `loop`\",\n-                            \"loop\".to_owned(),\n-                            Applicability::MachineApplicable\n-                        );\n-                        err.emit();\n+                        let condition_span = cx.sess.source_map().def_span(e.span);\n+                        cx.struct_span_lint(WHILE_TRUE, condition_span, msg)\n+                            .span_suggestion_short(\n+                                condition_span,\n+                                \"use `loop`\",\n+                                \"loop\".to_owned(),\n+                                Applicability::MachineApplicable\n+                            )\n+                            .emit();\n                     }\n                 }\n             }"}, {"sha": "2519981fa21b2e021a2961678f1524ad7027d042", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=547735457ff698dd44ba818a65d1f10853fbeb8e", "patch": "@@ -96,6 +96,7 @@ macro_rules! early_lint_passes {\n             EllipsisInclusiveRangePatterns: EllipsisInclusiveRangePatterns::default(),\n             NonCamelCaseTypes: NonCamelCaseTypes,\n             DeprecatedAttr: DeprecatedAttr::new(),\n+            WhileTrue: WhileTrue,\n         ]);\n     )\n }\n@@ -140,7 +141,6 @@ macro_rules! late_lint_mod_passes {\n     ($macro:path, $args:tt) => (\n         $macro!($args, [\n             HardwiredLints: HardwiredLints,\n-            WhileTrue: WhileTrue,\n             ImproperCTypes: ImproperCTypes,\n             VariantSizeDifferences: VariantSizeDifferences,\n             BoxPointers: BoxPointers,"}, {"sha": "a993d811d327f851f95f082107b35dac12f7eea4", "filename": "src/test/compile-fail/issue-52443.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs?ref=547735457ff698dd44ba818a65d1f10853fbeb8e", "patch": "@@ -2,6 +2,7 @@ fn main() {\n     [(); & { loop { continue } } ]; //~ ERROR mismatched types\n     [(); loop { break }]; //~ ERROR mismatched types\n     [(); {while true {break}; 0}]; //~ ERROR constant contains unimplemented expression type\n+    //~^ WARN denote infinite loops with\n     [(); { for _ in 0usize.. {}; 0}]; //~ ERROR calls in constants are limited to constant functions\n     //~^ ERROR constant contains unimplemented expression type\n     //~| ERROR constant contains unimplemented expression type"}, {"sha": "108b9bc9e9b29c9adfddb81d48dd3e32051d1ab4", "filename": "src/test/ui/block-result/block-must-not-have-result-while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.rs?ref=547735457ff698dd44ba818a65d1f10853fbeb8e", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    while true {\n+    while true { //~ WARN denote infinite loops with\n         true //~  ERROR mismatched types\n              //~| expected type `()`\n              //~| found type `bool`"}, {"sha": "c41afcc9121c697bf1e248e65ddce2ce9a860099", "filename": "src/test/ui/block-result/block-must-not-have-result-while.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr?ref=547735457ff698dd44ba818a65d1f10853fbeb8e", "patch": "@@ -1,3 +1,11 @@\n+warning: denote infinite loops with `loop { ... }`\n+  --> $DIR/block-must-not-have-result-while.rs:2:5\n+   |\n+LL |     while true {\n+   |     ^^^^^^^^^^ help: use `loop`\n+   |\n+   = note: #[warn(while_true)] on by default\n+\n error[E0308]: mismatched types\n   --> $DIR/block-must-not-have-result-while.rs:3:9\n    |"}, {"sha": "22667906e12d6c546e50552042a54b966fc54b51", "filename": "src/test/ui/borrowck/mut-borrow-in-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.rs?ref=547735457ff698dd44ba818a65d1f10853fbeb8e", "patch": "@@ -12,7 +12,7 @@ impl<'a, T : 'a> FuncWrapper<'a, T> {\n     }\n \n     fn in_while(self, arg : &'a mut T) {\n-        while true {\n+        while true { //~ WARN denote infinite loops with\n             (self.func)(arg) //~ ERROR cannot borrow\n         }\n     }"}, {"sha": "59cf4d533def8d760369bb9dd98ffc08356a5524", "filename": "src/test/ui/borrowck/mut-borrow-in-loop.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.stderr?ref=547735457ff698dd44ba818a65d1f10853fbeb8e", "patch": "@@ -1,3 +1,11 @@\n+warning: denote infinite loops with `loop { ... }`\n+  --> $DIR/mut-borrow-in-loop.rs:15:9\n+   |\n+LL |         while true {\n+   |         ^^^^^^^^^^ help: use `loop`\n+   |\n+   = note: #[warn(while_true)] on by default\n+\n error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n   --> $DIR/mut-borrow-in-loop.rs:10:25\n    |"}, {"sha": "517c1f2e6c7cc2b4cbb1b073fc9d5d6390450fa0", "filename": "src/test/ui/issues/issue-27042.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fui%2Fissues%2Fissue-27042.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fui%2Fissues%2Fissue-27042.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27042.rs?ref=547735457ff698dd44ba818a65d1f10853fbeb8e", "patch": "@@ -6,6 +6,7 @@ fn main() {\n         loop { break }; //~ ERROR mismatched types\n     let _: i32 =\n         'b: //~ ERROR mismatched types\n+        //~^ WARN denote infinite loops with\n         while true { break }; // but here we cite the whole loop\n     let _: i32 =\n         'c: //~ ERROR mismatched types"}, {"sha": "c67b8ad738155533d0854284a57dfc619f66e623", "filename": "src/test/ui/issues/issue-27042.stderr", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fui%2Fissues%2Fissue-27042.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fui%2Fissues%2Fissue-27042.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27042.stderr?ref=547735457ff698dd44ba818a65d1f10853fbeb8e", "patch": "@@ -1,3 +1,13 @@\n+warning: denote infinite loops with `loop { ... }`\n+  --> $DIR/issue-27042.rs:8:9\n+   |\n+LL | /         'b:\n+LL | |\n+LL | |         while true { break }; // but here we cite the whole loop\n+   | |____________________________^ help: use `loop`\n+   |\n+   = note: #[warn(while_true)] on by default\n+\n error[E0308]: mismatched types\n   --> $DIR/issue-27042.rs:6:16\n    |\n@@ -11,14 +21,15 @@ error[E0308]: mismatched types\n   --> $DIR/issue-27042.rs:8:9\n    |\n LL | /         'b:\n+LL | |\n LL | |         while true { break }; // but here we cite the whole loop\n    | |____________________________^ expected i32, found ()\n    |\n    = note: expected type `i32`\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-27042.rs:11:9\n+  --> $DIR/issue-27042.rs:12:9\n    |\n LL | /         'c:\n LL | |         for _ in None { break }; // but here we cite the whole loop\n@@ -28,7 +39,7 @@ LL | |         for _ in None { break }; // but here we cite the whole loop\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-27042.rs:14:9\n+  --> $DIR/issue-27042.rs:15:9\n    |\n LL | /         'd:\n LL | |         while let Some(_) = None { break };"}, {"sha": "2c9a264287c9675e62d8af6d216d0f39b29c7a18", "filename": "src/test/ui/lint/lint-impl-fn.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fui%2Flint%2Flint-impl-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fui%2Flint%2Flint-impl-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-impl-fn.stderr?ref=547735457ff698dd44ba818a65d1f10853fbeb8e", "patch": "@@ -11,25 +11,25 @@ LL |     #[deny(while_true)]\n    |            ^^^^^^^^^^\n \n error: denote infinite loops with `loop { ... }`\n-  --> $DIR/lint-impl-fn.rs:27:5\n+  --> $DIR/lint-impl-fn.rs:18:25\n    |\n-LL |     while true {}\n-   |     ^^^^^^^^^^ help: use `loop`\n+LL |         fn foo(&self) { while true {} }\n+   |                         ^^^^^^^^^^ help: use `loop`\n    |\n note: lint level defined here\n-  --> $DIR/lint-impl-fn.rs:25:8\n+  --> $DIR/lint-impl-fn.rs:13:8\n    |\n LL | #[deny(while_true)]\n    |        ^^^^^^^^^^\n \n error: denote infinite loops with `loop { ... }`\n-  --> $DIR/lint-impl-fn.rs:18:25\n+  --> $DIR/lint-impl-fn.rs:27:5\n    |\n-LL |         fn foo(&self) { while true {} }\n-   |                         ^^^^^^^^^^ help: use `loop`\n+LL |     while true {}\n+   |     ^^^^^^^^^^ help: use `loop`\n    |\n note: lint level defined here\n-  --> $DIR/lint-impl-fn.rs:13:8\n+  --> $DIR/lint-impl-fn.rs:25:8\n    |\n LL | #[deny(while_true)]\n    |        ^^^^^^^^^^"}, {"sha": "811bc87eb0e2eee5afe81311b39301f29fa79d37", "filename": "src/test/ui/lint/lint-unnecessary-parens.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.rs?ref=547735457ff698dd44ba818a65d1f10853fbeb8e", "patch": "@@ -19,6 +19,7 @@ fn main() {\n \n     if (true) {} //~ ERROR unnecessary parentheses around `if` condition\n     while (true) {} //~ ERROR unnecessary parentheses around `while` condition\n+    //~^ WARN denote infinite loops with\n     match (true) { //~ ERROR unnecessary parentheses around `match` head expression\n         _ => {}\n     }"}, {"sha": "05ecbfdf4fa39a173a6e976f949a5ed944f8638b", "filename": "src/test/ui/lint/lint-unnecessary-parens.stderr", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr?ref=547735457ff698dd44ba818a65d1f10853fbeb8e", "patch": "@@ -34,44 +34,52 @@ error: unnecessary parentheses around `while` condition\n LL |     while (true) {}\n    |           ^^^^^^ help: remove these parentheses\n \n+warning: denote infinite loops with `loop { ... }`\n+  --> $DIR/lint-unnecessary-parens.rs:21:5\n+   |\n+LL |     while (true) {}\n+   |     ^^^^^^^^^^^^ help: use `loop`\n+   |\n+   = note: #[warn(while_true)] on by default\n+\n error: unnecessary parentheses around `match` head expression\n-  --> $DIR/lint-unnecessary-parens.rs:22:11\n+  --> $DIR/lint-unnecessary-parens.rs:23:11\n    |\n LL |     match (true) {\n    |           ^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around `let` head expression\n-  --> $DIR/lint-unnecessary-parens.rs:25:16\n+  --> $DIR/lint-unnecessary-parens.rs:26:16\n    |\n LL |     if let 1 = (1) {}\n    |                ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around `let` head expression\n-  --> $DIR/lint-unnecessary-parens.rs:26:19\n+  --> $DIR/lint-unnecessary-parens.rs:27:19\n    |\n LL |     while let 1 = (2) {}\n    |                   ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around method argument\n-  --> $DIR/lint-unnecessary-parens.rs:40:24\n+  --> $DIR/lint-unnecessary-parens.rs:41:24\n    |\n LL |     X { y: false }.foo((true));\n    |                        ^^^^^^ help: remove these parentheses\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:42:18\n+  --> $DIR/lint-unnecessary-parens.rs:43:18\n    |\n LL |     let mut _a = (0);\n    |                  ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:43:10\n+  --> $DIR/lint-unnecessary-parens.rs:44:10\n    |\n LL |     _a = (0);\n    |          ^^^ help: remove these parentheses\n \n error: unnecessary parentheses around assigned value\n-  --> $DIR/lint-unnecessary-parens.rs:44:11\n+  --> $DIR/lint-unnecessary-parens.rs:45:11\n    |\n LL |     _a += (1);\n    |           ^^^ help: remove these parentheses"}, {"sha": "de7c1fb898679e0ea5fde2850739b3967b9b7f7e", "filename": "src/test/ui/lint/suggestions.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr?ref=547735457ff698dd44ba818a65d1f10853fbeb8e", "patch": "@@ -1,3 +1,11 @@\n+warning: denote infinite loops with `loop { ... }`\n+  --> $DIR/suggestions.rs:46:5\n+   |\n+LL |     while true {\n+   |     ^^^^^^^^^^ help: use `loop`\n+   |\n+   = note: #[warn(while_true)] on by default\n+\n warning: unnecessary parentheses around assigned value\n   --> $DIR/suggestions.rs:49:31\n    |\n@@ -65,14 +73,6 @@ LL | pub fn defiant<T>(_t: T) {}\n    |\n    = note: #[warn(no_mangle_generic_items)] on by default\n \n-warning: denote infinite loops with `loop { ... }`\n-  --> $DIR/suggestions.rs:46:5\n-   |\n-LL |     while true {\n-   |     ^^^^^^^^^^ help: use `loop`\n-   |\n-   = note: #[warn(while_true)] on by default\n-\n warning: the `warp_factor:` in this pattern is redundant\n   --> $DIR/suggestions.rs:61:23\n    |"}, {"sha": "9f3ebf1362b823fc736e10d3999584a826e2a5dd", "filename": "src/test/ui/liveness/liveness-move-in-while.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.rs?ref=547735457ff698dd44ba818a65d1f10853fbeb8e", "patch": "@@ -6,5 +6,8 @@ fn main() {\n     loop {\n         println!(\"{}\", y); //~ ERROR borrow of moved value: `y`\n         while true { while true { while true { x = y; x.clone(); } } }\n+        //~^ WARN denote infinite loops with\n+        //~| WARN denote infinite loops with\n+        //~| WARN denote infinite loops with\n     }\n }"}, {"sha": "bbf5e50f1e09d3662a259cacf0aab17f6f5c1e39", "filename": "src/test/ui/liveness/liveness-move-in-while.stderr", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.stderr?ref=547735457ff698dd44ba818a65d1f10853fbeb8e", "patch": "@@ -1,3 +1,23 @@\n+warning: denote infinite loops with `loop { ... }`\n+  --> $DIR/liveness-move-in-while.rs:8:9\n+   |\n+LL |         while true { while true { while true { x = y; x.clone(); } } }\n+   |         ^^^^^^^^^^ help: use `loop`\n+   |\n+   = note: #[warn(while_true)] on by default\n+\n+warning: denote infinite loops with `loop { ... }`\n+  --> $DIR/liveness-move-in-while.rs:8:22\n+   |\n+LL |         while true { while true { while true { x = y; x.clone(); } } }\n+   |                      ^^^^^^^^^^ help: use `loop`\n+\n+warning: denote infinite loops with `loop { ... }`\n+  --> $DIR/liveness-move-in-while.rs:8:35\n+   |\n+LL |         while true { while true { while true { x = y; x.clone(); } } }\n+   |                                   ^^^^^^^^^^ help: use `loop`\n+\n error[E0382]: borrow of moved value: `y`\n   --> $DIR/liveness-move-in-while.rs:7:24\n    |"}, {"sha": "7c2f63ec51a79d0bf22f3241df642b86511cadd9", "filename": "src/test/ui/loops/loop-break-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fui%2Floops%2Floop-break-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fui%2Floops%2Floop-break-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-break-value.rs?ref=547735457ff698dd44ba818a65d1f10853fbeb8e", "patch": "@@ -23,7 +23,7 @@ fn main() {\n         };\n     };\n \n-    'while_loop: while true {\n+    'while_loop: while true { //~ WARN denote infinite loops with\n         break;\n         break (); //~ ERROR `break` with value from a `while` loop\n         loop {"}, {"sha": "f458c88ea4892989b7fac8a14b94ee6adf510578", "filename": "src/test/ui/loops/loop-break-value.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/547735457ff698dd44ba818a65d1f10853fbeb8e/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr?ref=547735457ff698dd44ba818a65d1f10853fbeb8e", "patch": "@@ -1,3 +1,11 @@\n+warning: denote infinite loops with `loop { ... }`\n+  --> $DIR/loop-break-value.rs:26:5\n+   |\n+LL |     'while_loop: while true {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: use `loop`\n+   |\n+   = note: #[warn(while_true)] on by default\n+\n error[E0571]: `break` with value from a `while` loop\n   --> $DIR/loop-break-value.rs:28:9\n    |"}]}