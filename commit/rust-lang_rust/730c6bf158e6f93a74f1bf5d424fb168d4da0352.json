{"sha": "730c6bf158e6f93a74f1bf5d424fb168d4da0352", "node_id": "C_kwDOAAsO6NoAKDczMGM2YmYxNThlNmY5M2E3NGYxYmY1ZDQyNGZiMTY4ZDRkYTAzNTI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-09T18:00:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-09T18:00:42Z"}, "message": "Rollup merge of #90613 - GuillaumeGomez:specific-rustdoc-js-test, r=Mark-Simulacrum\n\nAllow to run a specific rustdoc-js* test\n\nr? ``@Mark-Simulacrum``", "tree": {"sha": "216254d13d37a0abe3df48d4f6595775c6ed92f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/216254d13d37a0abe3df48d4f6595775c6ed92f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/730c6bf158e6f93a74f1bf5d424fb168d4da0352", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhirdLCRBK7hj4Ov3rIwAA+4oIAEopANqc3zJCeL854sZ1+msp\n4Ltq1nmhXwQsLWSPUSRCWleF0MGiKmmwZWIQj7x2QyZmqd6iHRY4mvjDDfTex5Lx\n8IsYkTMDJDdSkUSxA6wzFQiq1yFKcdGlVeTtmRnkMDH5cQpL/9+qycQti5SZOdKr\nwqjtETilWZ6pFm5+6kBqgSObD2/75l708X8A8eE9ltVPPxXA8YH/dJihGPnuthQZ\nltTo2Be+slAECBeFEsM1WtzJY5h7vb+2rfJ3Z5E0N+bQzCMmO+gnevHYD3+QZHAl\nZp28Lu0DxJTJ4QC6CWPH9LbCxBMhqiBlXZ1ppM96mzwPIq3fbx2f2SK9fIOXKM0=\n=hLo0\n-----END PGP SIGNATURE-----\n", "payload": "tree 216254d13d37a0abe3df48d4f6595775c6ed92f3\nparent 610b4e503ccc5cb6d4ef98bb5016ba42eaf94522\nparent 10d65a9636907ff5555307e9a3ebe0123ca2c3e6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1636480842 +0100\ncommitter GitHub <noreply@github.com> 1636480842 +0100\n\nRollup merge of #90613 - GuillaumeGomez:specific-rustdoc-js-test, r=Mark-Simulacrum\n\nAllow to run a specific rustdoc-js* test\n\nr? ``@Mark-Simulacrum``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/730c6bf158e6f93a74f1bf5d424fb168d4da0352", "html_url": "https://github.com/rust-lang/rust/commit/730c6bf158e6f93a74f1bf5d424fb168d4da0352", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/730c6bf158e6f93a74f1bf5d424fb168d4da0352/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "610b4e503ccc5cb6d4ef98bb5016ba42eaf94522", "url": "https://api.github.com/repos/rust-lang/rust/commits/610b4e503ccc5cb6d4ef98bb5016ba42eaf94522", "html_url": "https://github.com/rust-lang/rust/commit/610b4e503ccc5cb6d4ef98bb5016ba42eaf94522"}, {"sha": "10d65a9636907ff5555307e9a3ebe0123ca2c3e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/10d65a9636907ff5555307e9a3ebe0123ca2c3e6", "html_url": "https://github.com/rust-lang/rust/commit/10d65a9636907ff5555307e9a3ebe0123ca2c3e6"}], "stats": {"total": 103, "additions": 64, "deletions": 39}, "files": [{"sha": "22bf6b8a9d4dce99392222a591a10154fb821e7d", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 20, "deletions": 33, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/730c6bf158e6f93a74f1bf5d424fb168d4da0352/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730c6bf158e6f93a74f1bf5d424fb168d4da0352/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=730c6bf158e6f93a74f1bf5d424fb168d4da0352", "patch": "@@ -763,7 +763,7 @@ impl Step for RustdocJSStd {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"src/test/rustdoc-js-std\")\n+        run.suite_path(\"src/test/rustdoc-js-std\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -783,6 +783,17 @@ impl Step for RustdocJSStd {\n                 .arg(builder.doc_out(self.target))\n                 .arg(\"--test-folder\")\n                 .arg(builder.src.join(\"src/test/rustdoc-js-std\"));\n+            for path in &builder.paths {\n+                if let Some(p) =\n+                    util::is_valid_test_suite_arg(path, \"src/test/rustdoc-js-std\", builder)\n+                {\n+                    if !p.ends_with(\".js\") {\n+                        eprintln!(\"A non-js file was given: `{}`\", path.display());\n+                        panic!(\"Cannot run rustdoc-js-std tests\");\n+                    }\n+                    command.arg(\"--test-file\").arg(path);\n+                }\n+            }\n             builder.ensure(crate::doc::Std { target: self.target, stage: builder.top_stage });\n             builder.run(&mut command);\n         } else {\n@@ -803,7 +814,7 @@ impl Step for RustdocJSNotStd {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"src/test/rustdoc-js\")\n+        run.suite_path(\"src/test/rustdoc-js\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -938,8 +949,12 @@ impl Step for RustdocGUI {\n             .arg(\"--tests-folder\")\n             .arg(builder.build.src.join(\"src/test/rustdoc-gui\"));\n         for path in &builder.paths {\n-            if let Some(name) = path.file_name().and_then(|f| f.to_str()) {\n-                if name.ends_with(\".goml\") {\n+            if let Some(p) = util::is_valid_test_suite_arg(path, \"src/test/rustdoc-gui\", builder) {\n+                if !p.ends_with(\".goml\") {\n+                    eprintln!(\"A non-goml file was given: `{}`\", path.display());\n+                    panic!(\"Cannot run rustdoc-gui tests\");\n+                }\n+                if let Some(name) = path.file_name().and_then(|f| f.to_str()) {\n                     command.arg(\"--file\").arg(name);\n                 }\n             }\n@@ -1416,35 +1431,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n         // Get test-args by striping suite path\n         let mut test_args: Vec<&str> = paths\n             .iter()\n-            .map(|p| match p.strip_prefix(\".\") {\n-                Ok(path) => path,\n-                Err(_) => p,\n-            })\n-            .filter(|p| p.starts_with(suite_path))\n-            .filter(|p| {\n-                let exists = p.is_dir() || p.is_file();\n-                if !exists {\n-                    if let Some(p) = p.to_str() {\n-                        builder.info(&format!(\n-                            \"Warning: Skipping \\\"{}\\\": not a regular file or directory\",\n-                            p\n-                        ));\n-                    }\n-                }\n-                exists\n-            })\n-            .filter_map(|p| {\n-                // Since test suite paths are themselves directories, if we don't\n-                // specify a directory or file, we'll get an empty string here\n-                // (the result of the test suite directory without its suite prefix).\n-                // Therefore, we need to filter these out, as only the first --test-args\n-                // flag is respected, so providing an empty --test-args conflicts with\n-                // any following it.\n-                match p.strip_prefix(suite_path).ok().and_then(|p| p.to_str()) {\n-                    Some(s) if !s.is_empty() => Some(s),\n-                    _ => None,\n-                }\n-            })\n+            .filter_map(|p| util::is_valid_test_suite_arg(p, suite_path, builder))\n             .collect();\n \n         test_args.append(&mut builder.config.cmd.test_args());"}, {"sha": "57178aa382ffd789ac68a6fb9b9cf9051aceb7b8", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/730c6bf158e6f93a74f1bf5d424fb168d4da0352/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730c6bf158e6f93a74f1bf5d424fb168d4da0352/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=730c6bf158e6f93a74f1bf5d424fb168d4da0352", "patch": "@@ -310,3 +310,35 @@ pub fn use_host_linker(target: TargetSelection) -> bool {\n         || target.contains(\"fuchsia\")\n         || target.contains(\"bpf\"))\n }\n+\n+pub fn is_valid_test_suite_arg<'a, P: AsRef<Path>>(\n+    path: &'a Path,\n+    suite_path: P,\n+    builder: &Builder<'_>,\n+) -> Option<&'a str> {\n+    let suite_path = suite_path.as_ref();\n+    let path = match path.strip_prefix(\".\") {\n+        Ok(p) => p,\n+        Err(_) => path,\n+    };\n+    if !path.starts_with(suite_path) {\n+        return None;\n+    }\n+    let exists = path.is_dir() || path.is_file();\n+    if !exists {\n+        if let Some(p) = path.to_str() {\n+            builder.info(&format!(\"Warning: Skipping \\\"{}\\\": not a regular file or directory\", p));\n+        }\n+        return None;\n+    }\n+    // Since test suite paths are themselves directories, if we don't\n+    // specify a directory or file, we'll get an empty string here\n+    // (the result of the test suite directory without its suite prefix).\n+    // Therefore, we need to filter these out, as only the first --test-args\n+    // flag is respected, so providing an empty --test-args conflicts with\n+    // any following it.\n+    match path.strip_prefix(suite_path).ok().and_then(|p| p.to_str()) {\n+        Some(s) if !s.is_empty() => Some(s),\n+        _ => None,\n+    }\n+}"}, {"sha": "4f73a7f634098f2f7d6846e593a083c24877fcb4", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/730c6bf158e6f93a74f1bf5d424fb168d4da0352/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/730c6bf158e6f93a74f1bf5d424fb168d4da0352/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=730c6bf158e6f93a74f1bf5d424fb168d4da0352", "patch": "@@ -401,7 +401,8 @@ function showHelp() {\n     console.log(\"  --doc-folder [PATH]        : location of the generated doc folder\");\n     console.log(\"  --help                     : show this message then quit\");\n     console.log(\"  --crate-name [STRING]      : crate name to be used\");\n-    console.log(\"  --test-file [PATH]         : location of the JS test file\");\n+    console.log(\"  --test-file [PATHs]        : location of the JS test files (can be called \" +\n+                \"multiple times)\");\n     console.log(\"  --test-folder [PATH]       : location of the JS tests folder\");\n     console.log(\"  --resource-suffix [STRING] : suffix to refer to the correct files\");\n }\n@@ -412,7 +413,7 @@ function parseOptions(args) {\n         \"resource_suffix\": \"\",\n         \"doc_folder\": \"\",\n         \"test_folder\": \"\",\n-        \"test_file\": \"\",\n+        \"test_file\": [],\n     };\n     var correspondences = {\n         \"--resource-suffix\": \"resource_suffix\",\n@@ -429,7 +430,11 @@ function parseOptions(args) {\n                 console.log(\"Missing argument after `\" + args[i - 1] + \"` option.\");\n                 return null;\n             }\n-            opts[correspondences[args[i - 1]]] = args[i];\n+            if (args[i - 1] !== \"--test-file\") {\n+                opts[correspondences[args[i - 1]]] = args[i];\n+            } else {\n+                opts[correspondences[args[i - 1]]].push(args[i]);\n+            }\n         } else if (args[i] === \"--help\") {\n             showHelp();\n             process.exit(0);\n@@ -471,9 +476,10 @@ function main(argv) {\n     var errors = 0;\n \n     if (opts[\"test_file\"].length !== 0) {\n-        errors += checkFile(opts[\"test_file\"], opts, loaded, index);\n-    }\n-    if (opts[\"test_folder\"].length !== 0) {\n+        opts[\"test_file\"].forEach(function(file) {\n+            errors += checkFile(file, opts, loaded, index);\n+        });\n+    } else if (opts[\"test_folder\"].length !== 0) {\n         fs.readdirSync(opts[\"test_folder\"]).forEach(function(file) {\n             if (!file.endsWith(\".js\")) {\n                 return;"}]}