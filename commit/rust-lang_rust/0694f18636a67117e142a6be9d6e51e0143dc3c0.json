{"sha": "0694f18636a67117e142a6be9d6e51e0143dc3c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2OTRmMTg2MzZhNjcxMTdlMTQyYTZiZTlkNmU1MWUwMTQzZGMzYzA=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2021-07-31T02:50:15Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2021-08-02T16:49:36Z"}, "message": "Sort struct fields", "tree": {"sha": "f6c5cf6a2137d7325bacf55e6a66e89b31f260a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6c5cf6a2137d7325bacf55e6a66e89b31f260a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0694f18636a67117e142a6be9d6e51e0143dc3c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0694f18636a67117e142a6be9d6e51e0143dc3c0", "html_url": "https://github.com/rust-lang/rust/commit/0694f18636a67117e142a6be9d6e51e0143dc3c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0694f18636a67117e142a6be9d6e51e0143dc3c0/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "643f3931f781940c0ee6c49be9f933f344d796a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/643f3931f781940c0ee6c49be9f933f344d796a3", "html_url": "https://github.com/rust-lang/rust/commit/643f3931f781940c0ee6c49be9f933f344d796a3"}], "stats": {"total": 120, "additions": 117, "deletions": 3}, "files": [{"sha": "c2144e1ad43769674631a7fc96b932ecccd4e9cc", "filename": "crates/ide_assists/src/handlers/sort_items.rs", "status": "modified", "additions": 117, "deletions": 3, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/0694f18636a67117e142a6be9d6e51e0143dc3c0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0694f18636a67117e142a6be9d6e51e0143dc3c0/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs?ref=0694f18636a67117e142a6be9d6e51e0143dc3c0", "patch": "@@ -14,15 +14,17 @@ use crate::{utils::get_methods, AssistContext, AssistId, AssistKind, Assists};\n //\n pub(crate) fn sort_items(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     if let Some(trait_ast) = ctx.find_node_at_offset::<ast::Trait>() {\n-        sort_methods_assist(acc, trait_ast.assoc_item_list()?)\n+        add_sort_methods_assist(acc, trait_ast.assoc_item_list()?)\n     } else if let Some(impl_ast) = ctx.find_node_at_offset::<ast::Impl>() {\n-        sort_methods_assist(acc, impl_ast.assoc_item_list()?)\n+        add_sort_methods_assist(acc, impl_ast.assoc_item_list()?)\n+    } else if let Some(struct_ast) = ctx.find_node_at_offset::<ast::Struct>() {\n+        add_sort_fields_assist(acc, struct_ast.field_list()?)\n     } else {\n         None\n     }\n }\n \n-fn sort_methods_assist(acc: &mut Assists, item_list: ast::AssocItemList) -> Option<()> {\n+fn add_sort_methods_assist(acc: &mut Assists, item_list: ast::AssocItemList) -> Option<()> {\n     let methods = get_methods(&item_list);\n     let sorted = sort_by_name(&methods);\n \n@@ -45,6 +47,36 @@ fn sort_methods_assist(acc: &mut Assists, item_list: ast::AssocItemList) -> Opti\n     )\n }\n \n+fn add_sort_fields_assist(acc: &mut Assists, field_list: ast::FieldList) -> Option<()> {\n+    fn record_fields(field_list: &ast::FieldList) -> Option<Vec<ast::RecordField>> {\n+        match field_list {\n+            ast::FieldList::RecordFieldList(it) => Some(it.fields().collect()),\n+            ast::FieldList::TupleFieldList(_) => None,\n+        }\n+    }\n+\n+    let fields = record_fields(&field_list)?;\n+    let sorted = sort_by_name(&fields);\n+\n+    if fields == sorted {\n+        cov_mark::hit!(not_applicable_if_sorted);\n+        return None;\n+    }\n+\n+    acc.add(\n+        AssistId(\"sort_items\", AssistKind::RefactorRewrite),\n+        \"Sort methods alphabetically\",\n+        field_list.syntax().text_range(),\n+        |builder| {\n+            let methods = fields.into_iter().map(|fn_| builder.make_mut(fn_)).collect::<Vec<_>>();\n+            methods\n+                .into_iter()\n+                .zip(sorted)\n+                .for_each(|(old, new)| ted::replace(old.syntax(), new.clone_for_update().syntax()));\n+        },\n+    )\n+}\n+\n fn sort_by_name<T: NameOwner + Clone>(initial: &[T]) -> Vec<T> {\n     initial\n         .iter()\n@@ -99,6 +131,22 @@ $0impl Bar {\n         )\n     }\n \n+    #[test]\n+    fn not_applicable_if_struct_sorted() {\n+        cov_mark::check!(not_applicable_if_sorted);\n+\n+        check_assist_not_applicable(\n+            sort_items,\n+            r#\"\n+$0struct Bar {\n+    a: u32,\n+    b: u8,\n+    c: u64,\n+}\n+        \"#,\n+        )\n+    }\n+\n     #[test]\n     fn sort_trait() {\n         check_assist(\n@@ -146,4 +194,70 @@ impl Bar {\n         \"#,\n         )\n     }\n+\n+    #[test]\n+    fn sort_struct() {\n+        check_assist(\n+            sort_items,\n+            r#\"\n+$0struct Bar {\n+    b: u8,\n+    a: u32,\n+    c: u64,\n+}\n+        \"#,\n+            r#\"\n+struct Bar {\n+    a: u32,\n+    b: u8,\n+    c: u64,\n+}\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn sort_generic_struct_with_lifetime() {\n+        check_assist(\n+            sort_items,\n+            r#\"\n+$0struct Bar<'a, T> {\n+    d: &'a str,\n+    b: u8,\n+    a: T,\n+    c: u64,\n+}\n+        \"#,\n+            r#\"\n+struct Bar<'a, T> {\n+    a: T,\n+    b: u8,\n+    c: u64,\n+    d: &'a str,\n+}\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn sort_struct_fields_diff_len() {\n+        check_assist(\n+            sort_items,\n+            r#\"\n+$0struct Bar {\n+    aaa: u8,\n+    a: usize,\n+    b: u8,\n+}\n+        \"#,\n+            r#\"\n+struct Bar {\n+    a: usize,\n+    aaa: u8,\n+    b: u8,\n+}\n+        \"#,\n+        )\n+    }\n+\n }"}]}