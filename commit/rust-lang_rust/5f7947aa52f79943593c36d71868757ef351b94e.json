{"sha": "5f7947aa52f79943593c36d71868757ef351b94e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNzk0N2FhNTJmNzk5NDM1OTNjMzZkNzE4Njg3NTdlZjM1MWI5NGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-28T02:18:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-28T02:18:33Z"}, "message": "auto merge of #6075 : thestinger/rust/no-no_core, r=brson\n\ncore injection works fine now", "tree": {"sha": "246190c51857def54922ac4888e990d2e53164ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/246190c51857def54922ac4888e990d2e53164ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f7947aa52f79943593c36d71868757ef351b94e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f7947aa52f79943593c36d71868757ef351b94e", "html_url": "https://github.com/rust-lang/rust/commit/5f7947aa52f79943593c36d71868757ef351b94e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f7947aa52f79943593c36d71868757ef351b94e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd5b1de1812f308ad68472d2ab06c15d3c342d75", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd5b1de1812f308ad68472d2ab06c15d3c342d75", "html_url": "https://github.com/rust-lang/rust/commit/dd5b1de1812f308ad68472d2ab06c15d3c342d75"}, {"sha": "f792baba42b79711b64950c46208a1eb4b9539be", "url": "https://api.github.com/repos/rust-lang/rust/commits/f792baba42b79711b64950c46208a1eb4b9539be", "html_url": "https://github.com/rust-lang/rust/commit/f792baba42b79711b64950c46208a1eb4b9539be"}], "stats": {"total": 816, "additions": 6, "deletions": 810}, "files": [{"sha": "e515ef302f6584768e10511fbaaba217313259c2", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n #[deriving(Eq)]\n pub enum mode {\n     mode_compile_fail,"}, {"sha": "4392ce7ba28915e4a360a321c3e1a4fa16abec0f", "filename": "src/compiletest/compiletest.rc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Fcompiletest%2Fcompiletest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Fcompiletest%2Fcompiletest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rc?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -10,14 +10,11 @@\n \n #[crate_type = \"bin\"];\n \n-#[no_core];\n-\n #[allow(vecs_implicitly_copyable)];\n #[allow(non_camel_case_types)];\n #[allow(deprecated_mode)];\n #[allow(deprecated_pattern)];\n \n-extern mod core(vers = \"0.7-pre\");\n extern mod std(vers = \"0.7-pre\");\n \n use core::*;"}, {"sha": "aa8d61027b3c304aefc72b3d25198be4617c6bf5", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,12 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n-use core::io;\n-use core::io::ReaderUtil;\n-use core::str;\n-\n pub struct ExpectedError { line: uint, kind: ~str, msg: ~str }\n \n // Load any test directives embedded in the file"}, {"sha": "b0d04c6739b4a00456fe9f77fe73742977cc0454", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,16 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use common;\n use common::config;\n \n-use core::io::ReaderUtil;\n-use core::io;\n-use core::os;\n-use core::str;\n-\n pub struct TestProps {\n     // Lines that should be expected, in order, on standard out\n     error_patterns: ~[~str],"}, {"sha": "fe08cf1201bf7f11098eaa0cc1cd66bbd42d0d13", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,16 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n-use core::io::{ReaderUtil, WriterUtil};\n-use core::io;\n use core::libc::c_int;\n-use core::os;\n use core::run::spawn_process;\n use core::run;\n-use core::str;\n-use core::task;\n \n #[cfg(target_os = \"win32\")]\n fn target_env(lib_path: ~str, prog: ~str) -> ~[(~str,~str)] {"}, {"sha": "fef4cabf7fd6d83018639ce041b09293370b3a71", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use common::mode_run_pass;\n use common::mode_run_fail;\n use common::mode_compile_fail;\n@@ -22,13 +20,6 @@ use procsrv;\n use util;\n use util::logv;\n \n-use core::io::WriterUtil;\n-use core::io;\n-use core::os;\n-use core::str;\n-use core::uint;\n-use core::vec;\n-\n pub fn run(config: config, testfile: ~str) {\n     if config.verbose {\n         // We're going to be dumping a lot of info. Start on a new line."}, {"sha": "51579c33e9a4b1319e1a162e9645a04e182c0797", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,11 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use common::config;\n \n-use core::io;\n use core::os::getenv;\n \n pub fn make_new_path(path: ~str) -> ~str {"}, {"sha": "df233a2f2b52b7cac9b754cbbdd0ab50e5550ebc", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -17,7 +17,6 @@\n #[comment = \"The Rust fuzzer library\"];\n #[license = \"MIT/ASL2\"];\n #[crate_type = \"lib\"];\n-#[no_core];\n \n #[legacy_modes];\n \n@@ -26,12 +25,10 @@\n #[allow(deprecated_mode)];\n #[allow(deprecated_pattern)];\n \n-extern mod core(vers = \"0.7-pre\");\n extern mod std(vers = \"0.7-pre\");\n extern mod syntax(vers = \"0.7-pre\");\n \n-use core::*;\n-use core::io::WriterUtil;\n+use core::run;\n \n use syntax::{ast, fold, visit, codemap};\n use syntax::parse;"}, {"sha": "ff15fc12ff4792ea7a623012c16e4c13b6e93294", "filename": "src/librust/rust.rc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrust%2Frust.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrust%2Frust.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrust%2Frust.rc?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -20,8 +20,6 @@\n #[license = \"MIT/ASL2\"];\n #[crate_type = \"lib\"];\n \n-extern mod core(vers = \"0.7-pre\");\n-\n use core::run;\n \n enum ValidUsage {"}, {"sha": "8c442f2d5c9f36b945f9c9d12102a1274970b4c8", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use back::rpath;\n use driver::session::Session;\n use driver::session;\n@@ -22,17 +20,12 @@ use middle::trans::common::CrateContext;\n use middle::ty;\n use util::ppaux;\n \n-use core::char;\n use core::hash::Streaming;\n use core::hash;\n use core::io::WriterUtil;\n use core::libc::{c_int, c_uint};\n use core::os::consts::{macos, freebsd, linux, android, win32};\n-use core::os;\n-use core::ptr;\n use core::run;\n-use core::str;\n-use core::vec;\n use syntax::ast;\n use syntax::ast_map::{path, path_mod, path_name};\n use syntax::attr;\n@@ -98,10 +91,7 @@ pub mod jit {\n     use lib::llvm::{ModuleRef, PassManagerRef};\n     use metadata::cstore;\n \n-    use core::cast;\n     use core::libc::c_int;\n-    use core::ptr;\n-    use core::str;\n \n     pub mod rusti {\n         #[nolink]\n@@ -183,10 +173,8 @@ pub mod write {\n     use lib::llvm::{False, ModuleRef, mk_pass_manager, mk_target_data};\n     use lib;\n \n-    use core::prelude::*;\n     use core::libc::{c_int, c_uint};\n     use core::path::Path;\n-    use core::str;\n     use core::run;\n \n     pub fn is_object_or_assembly_or_exe(ot: output_type) -> bool {"}, {"sha": "fab19b681740cee8a3865e22853235f3061ef826", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,16 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use driver::session;\n use metadata::cstore;\n use metadata::filesearch;\n \n-use core::os;\n-use core::uint;\n use core::util;\n-use core::vec;\n use core::hashmap::HashSet;\n \n fn not_win32(os: session::os) -> bool {\n@@ -201,7 +196,6 @@ mod test {\n     // FIXME(#2119): the outer attribute should be #[cfg(unix, test)], then\n     // these redundant #[cfg(test)] blocks can be removed\n     #[cfg(test)]\n-    use core::prelude::*;\n     #[cfg(test)]\n     use back::rpath::{get_absolute_rpath, get_install_prefix_rpath};\n     #[cfg(test)]"}, {"sha": "a6c061fee1e8eceeddb8a1e51045ea0d30334cee", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use back::link;\n use back::{arm, x86, x86_64, mips};\n use driver::session::{Aggressive};\n@@ -893,8 +891,6 @@ pub fn list_metadata(sess: Session, path: &Path, out: @io::Writer) {\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n-\n     use driver::driver::{build_configuration, build_session};\n     use driver::driver::{build_session_options, optgroups, str_input};\n "}, {"sha": "55c81e6d17b2001d982d6d7de527fbd6dbc9ba3c", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use back::link;\n use back::target_strs;\n use back;"}, {"sha": "75ae8724d720b7742bfb01b5c21fd97c3c9f7948", "filename": "src/librustc/front/config.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fconfig.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,13 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use syntax::{ast, fold, attr};\n \n-use core::option;\n-use core::vec;\n-\n type in_cfg_pred = @fn(attrs: ~[ast::attribute]) -> bool;\n \n struct Context {"}, {"sha": "ec5ba74b7cc80483f083fcb9c4c36181a122d92d", "filename": "src/librustc/front/core_inject.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Ffront%2Fcore_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Ffront%2Fcore_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fcore_inject.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,11 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use driver::session::Session;\n \n-use core::vec;\n use syntax::ast;\n use syntax::attr;\n use syntax::codemap;"}, {"sha": "54dbea27bacc93b631829371fbcd299b2d6c0a27", "filename": "src/librustc/front/intrinsic_inject.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Ffront%2Fintrinsic_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Ffront%2Fintrinsic_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fintrinsic_inject.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,15 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use driver::session::Session;\n use syntax::parse;\n use syntax::ast;\n use syntax::codemap::spanned;\n \n-use core::vec;\n-\n pub fn inject_intrinsic(sess: Session, crate: @ast::crate) -> @ast::crate {\n     let intrinsic_module = @(include_str!(\"intrinsic.rs\").to_owned());\n "}, {"sha": "02e2a4c8734f8b55635c82e1237cfd95bb462c88", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -10,12 +10,9 @@\n \n // Code that generates a test runner to run all the tests in a crate\n \n-use core::prelude::*;\n-\n use driver::session;\n use front::config;\n \n-use core::vec;\n use syntax::ast_util::*;\n use syntax::attr;\n use syntax::codemap::{dummy_sp, span, ExpandedFrom, CallInfo, NameAndSpan};"}, {"sha": "31050448e75520c53a2e9e0b129ea607a5f84df1", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,14 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use core::hashmap::HashMap;\n use core::libc::c_uint;\n-use core::option;\n-use core::ptr;\n-use core::str;\n-use core::vec;\n \n pub type Opcode = u32;\n pub type Bool = c_uint;"}, {"sha": "0d0f0d7ab69f3e3ffac57849a301112b266694f6", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -11,15 +11,12 @@\n \n //! Validates all used crates and extern libraries and loads their metadata\n \n-use core::prelude::*;\n-\n use metadata::cstore;\n use metadata::decoder;\n use metadata::filesearch::FileSearch;\n use metadata::loader;\n \n use core::hashmap::HashMap;\n-use core::vec;\n use syntax::attr;\n use syntax::codemap::{span, dummy_sp};\n use syntax::diagnostic::span_handler;"}, {"sha": "5626714260b87b013f70694f2070a1c48a7510ec", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,18 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n // Searching for information from the cstore\n \n-use core::prelude::*;\n-\n use metadata::common::*;\n use metadata::cstore;\n use metadata::decoder;\n use metadata;\n use middle::{ty, resolve};\n \n-use core::vec;\n use reader = std::ebml::reader;\n use syntax::ast;\n use syntax::ast_map;"}, {"sha": "05275a4c66558d27cc2df94b40b7969d6a889197", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -12,13 +12,10 @@\n // The crate store - a central repo for information collected about external\n // crates and libraries\n \n-use core::prelude::*;\n-\n use metadata::cstore;\n use metadata::decoder;\n \n use core::hashmap::HashMap;\n-use core::vec;\n use std;\n use syntax::ast;\n use syntax::parse::token::ident_interner;"}, {"sha": "1a94b57279cc4d8ecf956d7352d2ad876b32dcdb", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,11 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n // Decoding metadata from a single crate's metadata\n \n-use core::prelude::*;\n-\n use metadata::cstore::crate_metadata;\n use metadata::common::*;\n use metadata::csearch::{ProvidedTraitMethodInfo, StaticMethodInfo};"}, {"sha": "dd4ef0d2e688faffcba4b6a4873c635ef71d7dd8", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,11 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n // Metadata encoding\n \n-use core::prelude::*;\n-\n use metadata::common::*;\n use metadata::cstore;\n use metadata::decoder;\n@@ -26,13 +23,6 @@ use util::ppaux::ty_to_str;\n use core::flate;\n use core::hash::HashUtil;\n use core::hashmap::HashMap;\n-use core::int;\n-use core::io::{Writer, WriterUtil};\n-use core::io;\n-use core::str;\n-use core::to_bytes::IterBytes;\n-use core::uint;\n-use core::vec;\n use std::serialize::Encodable;\n use std;\n use syntax::abi::AbiSet;"}, {"sha": "c88d5437c840ec6d2cc14f3132923cfa318ae154", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,19 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n // A module for searching for libraries\n // FIXME (#2658): I'm not happy how this module turned out. Should\n // probably just be folded into cstore.\n \n-use core::prelude::*;\n-\n-use core::option;\n-use core::os;\n-use core::result::Result;\n-use core::result;\n-use core::str;\n-\n pub type pick<'self, T> = &'self fn(path: &Path) -> Option<T>;\n \n pub fn pick_file(file: Path, path: &Path) -> Option<Path> {"}, {"sha": "d2982e58038ddcb8bc7c1ec34ab2144e35e40cd6", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -11,8 +11,6 @@\n \n //! Finds crate binaries and loads their metadata\n \n-use core::prelude::*;\n-\n use lib::llvm::{False, llvm, mk_object_file, mk_section_iter};\n use metadata::decoder;\n use metadata::encoder;\n@@ -24,16 +22,8 @@ use syntax::parse::token::ident_interner;\n use syntax::print::pprust;\n use syntax::{ast, attr};\n \n-use core::cast;\n use core::flate;\n-use core::io::WriterUtil;\n-use core::io;\n use core::os::consts::{macos, freebsd, linux, android, win32};\n-use core::option;\n-use core::ptr;\n-use core::str;\n-use core::uint;\n-use core::vec;\n \n pub enum os {\n     os_macos,"}, {"sha": "bb8c93a9d5db1d68ed518898e05c31ac0a2f29fa", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -14,13 +14,8 @@\n // tjc note: Would be great to have a `match check` macro equivalent\n // for some of these\n \n-use core::prelude::*;\n-\n use middle::ty;\n \n-use core::str;\n-use core::uint;\n-use core::vec;\n use syntax::abi::AbiSet;\n use syntax::abi;\n use syntax::ast;"}, {"sha": "7c9de2d0b412ebb72a05b89258911f360f2b0f10", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,11 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n // Type encoding\n \n-use core::prelude::*;\n-\n use middle::ty::param_ty;\n use middle::ty;\n "}, {"sha": "f1fd1cd72421be0610839b032ba6694c2b8bb808", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use c = metadata::common;\n use cstore = metadata::cstore;\n use driver::session::Session;"}, {"sha": "07b6c80d4201cff7ed5762cd2d5f0c3afb6abc2b", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -17,8 +17,6 @@\n // 3. assignments do not affect things loaned out as immutable\n // 4. moves do not affect things loaned out in any way\n \n-use core::prelude::*;\n-\n use middle::moves;\n use middle::typeck::check::PurityState;\n use middle::borrowck::{Loan, bckerr, BorrowckCtxt, inherent_mutability};\n@@ -33,7 +31,6 @@ use middle::ty;\n use util::ppaux::ty_to_str;\n \n use core::hashmap::HashSet;\n-use core::uint;\n use core::util::with;\n use syntax::ast::m_mutbl;\n use syntax::ast;"}, {"sha": "92ac90e99da803747e536274f7617c391864ca4b", "filename": "src/librustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -16,8 +16,6 @@\n // their associated scopes.  In phase two, checking loans, we will then make\n // sure that all of these loans are honored.\n \n-use core::prelude::*;\n-\n use middle::borrowck::preserve::{PreserveCondition, PcOk, PcIfPure};\n use middle::borrowck::{Loan, bckerr, bckres, BorrowckCtxt, err_mutbl};\n use middle::borrowck::{LoanKind, TotalFreeze, PartialFreeze,\n@@ -32,7 +30,6 @@ use util::common::indenter;\n use util::ppaux::{Repr, region_to_str};\n \n use core::hashmap::{HashSet, HashMap};\n-use core::vec;\n use syntax::ast::{m_const, m_imm, m_mutbl};\n use syntax::ast;\n use syntax::codemap::span;"}, {"sha": "21de29b8f60ad4e6025e50a2c288b131bea55d54", "filename": "src/librustc/middle/borrowck/loan.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fborrowck%2Floan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fborrowck%2Floan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Floan.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -41,8 +41,6 @@ FIXME #4730 --- much more needed, don't have time to write this all up now\n // Loan(Ex, M, S) = Ls holds if ToAddr(Ex) will remain valid for the entirety\n // of the scope S, presuming that the returned set of loans `Ls` are honored.\n \n-use core::prelude::*;\n-\n use middle::borrowck::{Loan, bckerr, bckres, BorrowckCtxt, err_mutbl};\n use middle::borrowck::{LoanKind, TotalFreeze, PartialFreeze,\n                        TotalTake, PartialTake, Immobile};\n@@ -55,7 +53,6 @@ use middle::mem_categorization::{gc_ptr, region_ptr};\n use middle::ty;\n use util::common::indenter;\n \n-use core::result::{Err, Ok};\n use syntax::ast::m_imm;\n use syntax::ast;\n "}, {"sha": "3746f9c6e60b197b4351953c3f86d3862afc49fc", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -224,8 +224,6 @@ Borrowck results in two maps.\n   given a memory location and not used as immediates.\n  */\n \n-use core::prelude::*;\n-\n use middle::mem_categorization::*;\n use middle::ty;\n use middle::typeck;\n@@ -234,8 +232,6 @@ use util::common::stmt_set;\n use util::ppaux::note_and_explain_region;\n \n use core::hashmap::{HashSet, HashMap};\n-use core::io;\n-use core::result::{Result, Ok, Err};\n use core::to_bytes;\n use syntax::ast::{mutability, m_imm};\n use syntax::ast;"}, {"sha": "c44920fffa568d37f6f7392357a9c2f010309d46", "filename": "src/librustc/middle/borrowck/preserve.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fpreserve.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -13,8 +13,6 @@\n // the scope S.\n //\n \n-use core::prelude::*;\n-\n use middle::borrowck::{RootInfo, bckerr, bckerr_code, bckres, BorrowckCtxt};\n use middle::borrowck::{err_mut_uniq, err_mut_variant};\n use middle::borrowck::{err_out_of_root_scope, err_out_of_scope};"}, {"sha": "6a47eedcea8c330efcf85910f933b440e303333b", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use driver::session::Session;\n use middle::resolve;\n use middle::ty;"}, {"sha": "9ba1d2523c64575dee233bccb7b712beb727c3fe", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use middle::const_eval::{compare_const_vals, lookup_const_by_id};\n use middle::const_eval::{eval_const_expr, const_val, const_bool};\n use middle::pat_util::*;\n@@ -19,8 +17,6 @@ use middle::typeck::method_map;\n use middle::moves;\n use util::ppaux::ty_to_str;\n \n-use core::uint;\n-use core::vec;\n use std::sort;\n use syntax::ast::*;\n use syntax::ast_util::{unguarded_pat, walk_pat};"}, {"sha": "bba4d35b5604620dec2c0300b71f5901d4dbd1a4", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,15 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use metadata::csearch;\n use middle::astencode;\n use middle::ty;\n use middle;\n \n-use core::float;\n-use core::vec;\n use syntax::{ast, ast_map, ast_util, visit};\n use syntax::ast::*;\n "}, {"sha": "4c8d36f93f4b24bbf6e8abadbbeae03cedb1dc30", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,12 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n // A pass that annotates for each loops and functions with the free\n // variables that they contain.\n \n-use core::prelude::*;\n-\n use middle::resolve;\n use middle::ty;\n "}, {"sha": "cf488b0ac89395aa51e0c33e96ec21a1838dd30a", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use middle::freevars::freevar_entry;\n use middle::freevars;\n use middle::liveness;"}, {"sha": "6f7ccde586b0feb2c19c4f63cda7af541cdcb6b2", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n // Detecting language items.\n //\n // Language items are items that represent concepts intrinsic to the language\n@@ -20,8 +19,6 @@\n //\n // * Functions called by the compiler itself.\n \n-use core::prelude::*;\n-\n use driver::session::Session;\n use metadata::csearch::each_lang_item;\n use metadata::cstore::iter_crate_data;"}, {"sha": "cd26708ef9a4a89fe4f41fc28a6021d6d66c0b0d", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,29 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use driver::session::Session;\n use driver::session;\n use middle::ty;\n use middle::pat_util;\n use util::ppaux::{ty_to_str};\n \n use core::hashmap::HashMap;\n-use core::char;\n-use core::cmp;\n-use core::i8;\n-use core::i16;\n-use core::i32;\n-use core::i64;\n-use core::int;\n-use core::str;\n-use core::u8;\n-use core::u16;\n-use core::u32;\n-use core::u64;\n-use core::uint;\n-use core::vec;\n use std::smallintmap::SmallIntMap;\n use syntax::attr;\n use syntax::codemap::span;"}, {"sha": "5cc8cabbb38165001729b5bed068516b1c3c22f5", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n /*!\n  * A classic liveness analysis based on dataflow over the AST.  Computes,\n  * for each local variable in a function, whether that variable is live\n@@ -103,7 +102,6 @@\n  *   to return explicitly.\n  */\n \n-use core::prelude::*;\n \n use middle::lint::{unused_variable, dead_assignment};\n use middle::pat_util;\n@@ -113,12 +111,6 @@ use middle::moves;\n use util::ppaux::ty_to_str;\n \n use core::hashmap::HashMap;\n-use core::io::WriterUtil;\n-use core::io;\n-use core::ptr;\n-use core::to_str;\n-use core::uint;\n-use core::vec;\n use core::util::with;\n use syntax::ast::*;\n use syntax::codemap::span;"}, {"sha": "49c5717a357eaab7847aa67cba90534b29116ca2", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n /*!\n  * # Categorization\n  *\n@@ -47,14 +46,11 @@\n  * then an index to jump forward to the relevant item.\n  */\n \n-use core::prelude::*;\n-\n use middle::ty;\n use middle::typeck;\n use util::ppaux::{ty_to_str, region_to_str};\n use util::common::indenter;\n \n-use core::uint;\n use syntax::ast::{m_imm, m_const, m_mutbl};\n use syntax::ast;\n use syntax::codemap::span;"}, {"sha": "0eb5c53d6886d58bed657a0595abc2594d79c08f", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -206,8 +206,6 @@ and so on.\n \n */\n \n-use core::prelude::*;\n-\n use middle::pat_util::{pat_bindings};\n use middle::freevars;\n use middle::ty;\n@@ -216,7 +214,6 @@ use util::ppaux;\n use util::common::indenter;\n \n use core::hashmap::{HashSet, HashMap};\n-use core::vec;\n use syntax::ast::*;\n use syntax::ast_util;\n use syntax::visit;"}, {"sha": "3ca79982b7b9a812237f5cc02f98fb31a78f4514", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use middle::resolve;\n \n use core::hashmap::HashMap;"}, {"sha": "a37ebdcfaa263345260123f5c382cb1979e32c9f", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,12 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n // A pass that checks to make sure private fields and methods aren't used\n // outside their scopes.\n \n-use core::prelude::*;\n-\n use metadata::csearch;\n use middle::ty::{ty_struct, ty_enum};\n use middle::ty;"}, {"sha": "f32998281711fbccdea61d92ecd34ebcdc007eec", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -17,8 +17,6 @@ region parameterized.\n \n */\n \n-use core::prelude::*;\n-\n use driver::session::Session;\n use metadata::csearch;\n use middle::resolve;\n@@ -27,7 +25,6 @@ use middle::ty::{rv_contravariant, FreeRegion};\n use middle::ty;\n \n use core::hashmap::{HashMap, HashSet};\n-use core::vec;\n use syntax::ast_map;\n use syntax::codemap::span;\n use syntax::print::pprust;"}, {"sha": "5354ffc5d3c825f9804d2ebe7d9a565d7effaa31", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use driver::session;\n use driver::session::Session;\n use metadata::csearch::{each_path, get_trait_method_def_ids};\n@@ -23,8 +21,6 @@ use middle::lint::{allow, level, unused_imports};\n use middle::lint::{get_lint_level, get_lint_settings_level};\n use middle::pat_util::pat_bindings;\n \n-use core::str;\n-use core::vec;\n use syntax::ast::{RegionTyParamBound, TraitTyParamBound, _mod, add, arm};\n use syntax::ast::{binding_mode, bitand, bitor, bitxor, blk};\n use syntax::ast::{bind_infer, bind_by_ref, bind_by_copy};"}, {"sha": "c3a79373931a2cd91742e7786604ddfb465ce313", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -10,7 +10,6 @@\n \n // Type substitutions.\n \n-use core::prelude::*;\n use middle::ty;\n use util::ppaux::Repr;\n "}, {"sha": "e31ad63953e0535ecbd81284f3b83712840068ab", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -142,8 +142,6 @@\n  *\n  */\n \n-use core::prelude::*;\n-\n use back::abi;\n use lib::llvm::{llvm, ValueRef, BasicBlockRef};\n use middle::const_eval;"}, {"sha": "3d1c0f3f82c5c9bbc7c6e6cbd9436a8d26d7b554", "filename": "src/librustc/middle/trans/asm.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -12,8 +12,6 @@\n # Translation of inline assembly.\n */\n \n-use core::prelude::*;\n-\n use lib;\n use middle::trans::build::*;\n use middle::trans::callee;"}, {"sha": "03a85201862953ffd470e2bdcb05a93d51c6eac0", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -23,8 +23,6 @@\n //     but many TypeRefs correspond to one ty::t; for instance, tup(int, int,\n //     int) and rec(x=int, y=int, z=int) will have the same TypeRef.\n \n-use core::prelude::*;\n-\n use back::link::{mangle_exported_name};\n use back::{link, abi, upcall};\n use driver::session;\n@@ -68,10 +66,7 @@ use util::ppaux;\n \n use core::hash;\n use core::hashmap::{HashMap, HashSet};\n-use core::int;\n-use core::io;\n use core::libc::c_uint;\n-use core::uint;\n use std::time;\n use syntax::ast::ident;\n use syntax::ast_map::{path, path_elt_to_str, path_name};"}, {"sha": "9ade69b8b67096122c64f1680517777008dec816", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -16,15 +16,8 @@ use lib;\n use middle::trans::common::*;\n use syntax::codemap::span;\n \n-use core::prelude::*;\n-use core::cast;\n use core::hashmap::HashMap;\n use core::libc::{c_uint, c_ulonglong, c_char};\n-use core::libc;\n-use core::option::Some;\n-use core::ptr;\n-use core::str;\n-use core::vec;\n \n pub fn terminate(cx: block, _: &str) {\n     cx.terminated = true;\n@@ -174,7 +167,7 @@ pub fn IndirectBr(cx: block, Addr: ValueRef, NumDests: uint) {\n \n // This is a really awful way to get a zero-length c-string, but better (and a\n // lot more efficient) than doing str::as_c_str(\"\", ...) every time.\n-pub fn noname() -> *libc::c_char {\n+pub fn noname() -> *c_char {\n     unsafe {\n         static cnull: uint = 0u;\n         return cast::transmute(ptr::addr_of(&cnull));\n@@ -618,15 +611,15 @@ pub fn StructGEP(cx: block, Pointer: ValueRef, Idx: uint) -> ValueRef {\n     }\n }\n \n-pub fn GlobalString(cx: block, _Str: *libc::c_char) -> ValueRef {\n+pub fn GlobalString(cx: block, _Str: *c_char) -> ValueRef {\n     unsafe {\n         if cx.unreachable { return llvm::LLVMGetUndef(T_ptr(T_i8())); }\n         count_insn(cx, \"globalstring\");\n         return llvm::LLVMBuildGlobalString(B(cx), _Str, noname());\n     }\n }\n \n-pub fn GlobalStringPtr(cx: block, _Str: *libc::c_char) -> ValueRef {\n+pub fn GlobalStringPtr(cx: block, _Str: *c_char) -> ValueRef {\n     unsafe {\n         if cx.unreachable { return llvm::LLVMGetUndef(T_ptr(T_i8())); }\n         count_insn(cx, \"globalstringptr\");"}, {"sha": "971f2ae2bdbf5f01d220814f71109a75f84ac197", "filename": "src/librustc/middle/trans/cabi_mips.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::{ptr, vec, uint};\n-use core::option::*;\n use core::libc::c_uint;\n use lib::llvm::{llvm, TypeRef, Integer, Pointer, Float, Double};\n use lib::llvm::{Struct, Array, Attribute};"}, {"sha": "3a45b281543cf4e2b9b2a772bbfe6aa6f4ce2a0b", "filename": "src/librustc/middle/trans/cabi_x86.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use driver::session::{os_win32, os_macos};\n-use core::option::*;\n use lib::llvm::*;\n use lib::llvm::llvm::*;\n use super::cabi::*;"}, {"sha": "1965855586197a2a867edca8a323f33ff250a21b", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -16,8 +16,6 @@\n // and methods are represented as just a fn ptr and not a full\n // closure.\n \n-use core::prelude::*;\n-\n use back::abi;\n use driver::session;\n use lib;"}, {"sha": "e35fef6b6f66ae9da32700beaa1ac6d0e7fd2bcb", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use back::abi;\n use back::link::{mangle_internal_name_by_path_and_seq};\n use lib::llvm::{llvm, ValueRef};"}, {"sha": "c18c977bfb3452d49a1c6b47c5795b99ac955f19", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -14,8 +14,6 @@\n \n */\n \n-use core::prelude::*;\n-\n use back::{abi, upcall};\n use driver::session;\n use driver::session::Session;\n@@ -43,15 +41,11 @@ use middle::ty;\n use middle::typeck;\n use util::ppaux::{Repr};\n \n-use core::cast;\n use core::hash;\n use core::hashmap::{HashMap, HashSet};\n use core::libc::{c_uint, c_longlong, c_ulonglong};\n-use core::ptr;\n-use core::str;\n use core::to_bytes;\n use core::vec::raw::to_ptr;\n-use core::vec;\n use syntax::ast::ident;\n use syntax::ast_map::{path, path_elt};\n use syntax::codemap::span;"}, {"sha": "25f34b8eaa9d1e97f1a3fe114e415870e34c1bb6", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use back::abi;\n use lib::llvm::{llvm, SetLinkage, PrivateLinkage,\n                 ValueRef, TypeRef, Bool, True, False};"}, {"sha": "113136fa58d133c6946d5683340490fdeeb580d8", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use back::link;\n use lib;\n use lib::llvm::*;\n@@ -24,7 +22,6 @@ use middle::ty;\n use util::common::indenter;\n use util::ppaux;\n \n-use core::str;\n use syntax::ast;\n use syntax::ast::ident;\n use syntax::ast_map::path_mod;"}, {"sha": "fa27f652ac880c1bc8076a6e244a619667148811", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -85,8 +85,6 @@\n  * methods themselves.  Most are only suitable for some types of\n  * values. */\n \n-use core::prelude::*;\n-\n use lib;\n use lib::llvm::ValueRef;\n use middle::borrowck::{RootInfo, root_map_key};\n@@ -106,7 +104,6 @@ use util::ppaux::ty_to_str;\n \n use core::container::Set; // XXX: this should not be necessary\n use core::to_bytes;\n-use core::uint;\n use syntax::ast;\n use syntax::parse::token::special_idents;\n "}, {"sha": "2a2bf7ba4ad68334ec26ed7fb93ea97d9e752139", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use driver::session;\n use lib::llvm::ValueRef;\n@@ -22,8 +21,6 @@ use util::ppaux::ty_to_str;\n \n use core::hashmap::HashMap;\n use core::libc;\n-use core::option;\n-use core::sys;\n use syntax::codemap::span;\n use syntax::parse::token::ident_interner;\n use syntax::{ast, codemap, ast_util, ast_map};"}, {"sha": "f666eb2aaa64bc5a488393618949d1a15d2b965b", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -119,8 +119,6 @@ lvalues are *never* stored by value.\n \n */\n \n-use core::prelude::*;\n-\n use back::abi;\n use lib;\n use lib::llvm::{ValueRef, TypeRef, llvm};"}, {"sha": "aa6d9eec259e1320b394eda55b034ed5e3ab0234", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use back::{link, abi};\n use lib::llvm::{SequentiallyConsistent, Acquire, Release, Xchg};\n use lib::llvm::{TypeRef, ValueRef};"}, {"sha": "4c5a17056b2ea96a5d291ff64b2e12afcb299aa2", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -12,8 +12,6 @@\n //\n // Code relating to taking, dropping, etc as well as type descriptors.\n \n-use core::prelude::*;\n-\n use back::abi;\n use back::link::*;\n use driver::session;\n@@ -35,9 +33,7 @@ use middle::ty;\n use util::ppaux;\n use util::ppaux::ty_to_short_str;\n \n-use core::io;\n use core::libc::c_uint;\n-use core::str;\n use std::time;\n use syntax::ast;\n "}, {"sha": "7a7f03c2273e1ccb2a23260f22fa91ca61845090", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use metadata::csearch;\n use middle::astencode;\n use middle::trans::base::{get_insn_ctxt};\n@@ -19,7 +17,6 @@ use middle::trans::common::*;\n use middle::ty;\n use util::ppaux::ty_to_str;\n \n-use core::vec;\n use syntax::ast;\n use syntax::ast_map::path_name;\n use syntax::ast_util::local_def;"}, {"sha": "3ae2421a555899a435f37e2623984e598e6e0a95", "filename": "src/librustc/middle/trans/machine.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -10,8 +10,6 @@\n \n // Information concerning the machine representation of various types.\n \n-use core::prelude::*;\n-\n use lib::llvm::{ValueRef, TypeRef};\n use lib::llvm::False;\n use lib::llvm::llvm;"}, {"sha": "44e9c0f6802ae68df31e43cb74b089ca74bc4d2a", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use back::abi;\n use lib::llvm::llvm;\n use lib::llvm::ValueRef;"}, {"sha": "72ad6dde4f17d52f883508a05397d5ec923a31b9", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use back::link::mangle_exported_name;\n use driver::session;\n use lib::llvm::ValueRef;\n@@ -32,7 +30,6 @@ use middle::ty::{FnSig};\n use middle::typeck;\n use util::ppaux::Repr;\n \n-use core::vec;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_map::path_name;"}, {"sha": "3ccef0dbc4aca4a4afba47c470819ce0d2f1aab5", "filename": "src/librustc/middle/trans/reachable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -20,7 +20,6 @@ use middle::resolve;\n use middle::ty;\n use middle::typeck;\n \n-use core::prelude::*;\n use core::hashmap::HashSet;\n use syntax::ast;\n use syntax::ast::*;"}, {"sha": "5bf01b9a8831d0a50d0124d5dec8faf8e434fef5", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use lib::llvm::llvm;\n use lib::llvm::{TypeRef};\n use middle::trans::adt;\n@@ -19,7 +17,6 @@ use middle::trans::common;\n use middle::ty;\n use util::ppaux;\n \n-use core::option::None;\n use syntax::ast;\n \n pub fn arg_is_indirect(ccx: @CrateContext, arg: &ty::arg) -> bool {"}, {"sha": "dc3fb027dea73a51734236567ff3b0211fc0834e", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -27,8 +27,6 @@\n // much information, but have the disadvantage of being very\n // invasive.)\n \n-use core::prelude::*;\n-\n use middle::freevars;\n use middle::trans::common::*;\n use middle::trans::inline;"}, {"sha": "edd3a295bf922054309bd1cdc824f40b6ad247a1", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use driver::session;\n use metadata::csearch;\n@@ -29,15 +28,8 @@ use util::ppaux::Repr;\n use util::common::{indenter};\n \n use core;\n-use core::cast;\n-use core::cmp;\n-use core::ops;\n use core::ptr::to_unsafe_ptr;\n-use core::result::Result;\n-use core::result;\n use core::to_bytes;\n-use core::uint;\n-use core::vec;\n use core::hashmap::{HashMap, HashSet};\n use std::smallintmap::SmallIntMap;\n use syntax::ast::*;"}, {"sha": "ac745dce36d802f11ab3392fa50f88da74596d41", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -52,8 +52,6 @@\n  * an rptr (`&r.T`) use the region `r` that appears in the rptr.\n  */\n \n-use core::prelude::*;\n-\n use middle::const_eval;\n use middle::ty::{arg, substs};\n use middle::ty::{ty_param_substs_and_ty};\n@@ -62,8 +60,6 @@ use middle::typeck::rscope::in_binding_rscope;\n use middle::typeck::rscope::{region_scope, RegionError};\n use middle::typeck::rscope::RegionParamNames;\n \n-use core::result;\n-use core::vec;\n use syntax::abi::AbiSet;\n use syntax::{ast, ast_util};\n use syntax::codemap::span;"}, {"sha": "7f0066a1aa2721afa5f304a10ba23d060b1ab0f9", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use middle::pat_util::{PatIdMap, pat_id_map, pat_is_binding, pat_is_const};\n use middle::ty;\n use middle::typeck::check::demand;\n@@ -19,7 +17,6 @@ use middle::typeck::check::{structure_of, valid_range_bounds};\n use middle::typeck::require_same_types;\n \n use core::hashmap::{HashMap, HashSet};\n-use core::vec;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::codemap::span;"}, {"sha": "40ad8bcb8b26c9deb4f24dd9c9689a39e9ede85a", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -79,8 +79,6 @@ obtained the type `Foo`, we would never match this method.\n \n */\n \n-use core::prelude::*;\n-\n use middle::resolve;\n use middle::ty::*;\n use middle::ty;\n@@ -96,9 +94,6 @@ use middle::typeck::check::regionmanip::replace_bound_regions_in_fn_sig;\n use util::common::indenter;\n \n use core::hashmap::HashSet;\n-use core::result;\n-use core::uint;\n-use core::vec;\n use std::list::Nil;\n use syntax::ast::{def_id, sty_value, sty_region, sty_box};\n use syntax::ast::{sty_uniq, sty_static, node_id, by_copy, by_ref};"}, {"sha": "e230495e568956b817cbac968e6a41cc3d9ddc3b", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -76,8 +76,6 @@ type parameter).\n \n */\n \n-use core::prelude::*;\n-\n use middle::const_eval;\n use middle::pat_util::pat_id_map;\n use middle::pat_util;\n@@ -110,11 +108,6 @@ use util::ppaux::{bound_region_to_str};\n use util::ppaux;\n \n use core::hashmap::HashMap;\n-use core::ptr;\n-use core::result::{Result, Ok, Err};\n-use core::result;\n-use core::str;\n-use core::vec;\n use core::util::replace;\n use std::list::Nil;\n use syntax::abi::AbiSet;"}, {"sha": "1cffd375f9b6a9a286a3bdb59cff08d8a54b5408", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -27,8 +27,6 @@ this point a bit better.\n \n */\n \n-use core::prelude::*;\n-\n use middle::freevars::get_freevars;\n use middle::pat_util::pat_bindings;\n use middle::ty::{re_scope};\n@@ -41,7 +39,6 @@ use middle::typeck::infer::resolve_type;\n use util::ppaux::{note_and_explain_region, ty_to_str,\n                   region_to_str};\n \n-use core::result;\n use syntax::ast::{ManagedSigil, OwnedSigil, BorrowedSigil};\n use syntax::ast::{def_arg, def_binding, def_local, def_self, def_upvar};\n use syntax::ast;\n@@ -688,7 +685,6 @@ pub mod guarantor {\n      * but more special purpose.\n      */\n \n-    use core::prelude::*;\n     use middle::typeck::check::regionck::{Rcx, infallibly_mk_subr};\n     use middle::ty;\n     use syntax::ast;"}, {"sha": "f293893bc131ff7d15d15232348e2af0645fe6b0", "filename": "src/librustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -10,8 +10,6 @@\n \n // #[warn(deprecated_mode)];\n \n-use core::prelude::*;\n-\n use middle::ty;\n \n use middle::typeck::isr_alist;"}, {"sha": "44b621226124607452a5236a27a6963b1082372c", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use middle::resolve::Impl;\n use middle::ty::param_ty;\n use middle::ty;\n@@ -25,9 +23,6 @@ use util::common::indenter;\n use util::ppaux::tys_to_str;\n use util::ppaux;\n \n-use core::result::{Ok, Err};\n-use core::result;\n-use core::uint;\n use core::hashmap::HashSet;\n use syntax::ast;\n use syntax::ast_util;"}, {"sha": "0b0f7515b6b048e81792dad9b83cd99e96920c1f", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -12,8 +12,6 @@\n // unresolved type variables and replaces \"ty_var\" types with their\n // substitutions.\n \n-use core::prelude::*;\n-\n use middle::pat_util;\n use middle::ty::arg;\n use middle::ty;\n@@ -27,8 +25,6 @@ use middle::typeck::write_substs_to_tcx;\n use middle::typeck::write_ty_to_tcx;\n use util::ppaux;\n \n-use core::result::{Ok, Err};\n-use core::vec;\n use syntax::ast;\n use syntax::codemap::span;\n use syntax::print::pprust::pat_to_str;"}, {"sha": "73e4fe6a435bf4a6d03c8a59433525daa605cf12", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -14,7 +14,6 @@\n // has at most one implementation for each type. Then we build a mapping from\n // each trait in the system to its implementations.\n \n-use core::prelude::*;\n \n use driver;\n use metadata::csearch::{each_path, get_impl_traits};"}, {"sha": "828dfbb45cf724b3d426b10d5d5cd628a2e96443", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -30,8 +30,6 @@ are represented as `ty_param()` instances.\n \n */\n \n-use core::prelude::*;\n-\n use metadata::csearch;\n use middle::ty::{substs, ty_param_bounds_and_ty};\n use middle::ty;\n@@ -46,7 +44,6 @@ use middle::typeck::{CrateCtxt, lookup_def_tcx, no_params, write_ty_to_tcx};\n use util::common::{indenter, pluralize};\n use util::ppaux;\n \n-use core::vec;\n use syntax::abi::AbiSet;\n use syntax::ast::{RegionTyParamBound, TraitTyParamBound};\n use syntax::ast;"}, {"sha": "dcd1c861540f45e81e01a6ed2c4bd59984707a55", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -64,8 +64,6 @@ we may want to adjust precisely when coercions occur.\n \n */\n \n-use core::prelude::*;\n-\n use middle::ty::{AutoPtr, AutoBorrowVec, AutoBorrowFn};\n use middle::ty::{AutoDerefRef, AutoRef};\n use middle::ty::{vstore_slice, vstore_box, vstore_uniq};"}, {"sha": "58ad2fc1924edd410d13fda48754fd27a443b0f9", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -54,8 +54,6 @@\n // terms of error reporting, although we do not do that properly right\n // now.\n \n-use core::prelude::*;\n-\n use middle::ty::{FloatVar, FnSig, IntVar, TyVar};\n use middle::ty::{IntType, UintType, arg, substs};\n use middle::ty;\n@@ -67,7 +65,6 @@ use middle::typeck::infer::{cres, InferCtxt, ures, IntType, UintType};\n use util::common::indent;\n \n use core::result::{iter_vec2, map_vec2};\n-use core::vec;\n use syntax::ast::{Onceness, purity};\n use syntax::ast;\n use syntax::opt_vec;"}, {"sha": "78b3b097ae3057635c427ea6a3ae45477ffda292", "filename": "src/librustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use middle::ty::RegionVid;\n use middle::ty;\n use middle::typeck::infer::combine::*;"}, {"sha": "b9344724f60e54f027e91bbc75cacd9e26390710", "filename": "src/librustc/middle/typeck/infer/lattice.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -32,8 +32,6 @@\n  * a lattice.\n  */\n \n-use core::prelude::*;\n-\n use middle::ty::{RegionVid, TyVar, Vid};\n use middle::ty;\n use middle::typeck::isr_alist;"}, {"sha": "c79e530084f41fc2b5dc8832f94ec088db44bfa4", "filename": "src/librustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use middle::ty::RegionVid;\n use middle::ty;\n use middle::typeck::infer::combine::*;"}, {"sha": "7b5a93d4cad881ac2ee358cde7b6792226e1469f", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -242,8 +242,6 @@ section on \"Type Combining\" below for details.\n \n */\n \n-use core::prelude::*;\n-\n pub use middle::ty::IntVarValue;\n pub use middle::typeck::infer::resolve::resolve_and_force_all_but_regions;\n pub use middle::typeck::infer::resolve::{force_all, not_regions};\n@@ -267,10 +265,6 @@ use middle::typeck::isr_alist;\n use util::common::indent;\n use util::ppaux::{bound_region_to_str, ty_to_str, trait_ref_to_str};\n \n-use core::cmp::Eq;\n-use core::result::{Result, Ok, Err};\n-use core::result;\n-use core::vec;\n use std::list::Nil;\n use std::smallintmap::SmallIntMap;\n use syntax::ast::{m_imm, m_mutbl};"}, {"sha": "e12a3f2e97522bed8d1a4298a2c186a4e1f346fd", "filename": "src/librustc/middle/typeck/infer/region_inference.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -536,8 +536,6 @@ more convincing in the future.\n \n */\n \n-use core::prelude::*;\n-\n use middle::ty;\n use middle::ty::{FreeRegion, Region, RegionVid};\n use middle::ty::{re_static, re_infer, re_free, re_bound};\n@@ -548,10 +546,7 @@ use util::ppaux::note_and_explain_region;\n \n use core::cell::{Cell, empty_cell};\n use core::hashmap::{HashMap, HashSet};\n-use core::result::{Err, Ok};\n use core::to_bytes;\n-use core::uint;\n-use core::vec;\n use syntax::codemap::span;\n use syntax::ast;\n "}, {"sha": "9b648f6a053413ee6136a2c1437dc87a66931e01", "filename": "src/librustc/middle/typeck/infer/resolve.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -46,8 +46,6 @@\n // future).  If you want to resolve everything but one type, you are\n // probably better off writing `resolve_all - resolve_ivar`.\n \n-use core::prelude::*;\n-\n use middle::ty::{FloatVar, FloatVid, IntVar, IntVid, RegionVid, TyVar, TyVid};\n use middle::ty::{type_is_bot, IntType, UintType};\n use middle::ty;\n@@ -60,8 +58,6 @@ use util::ppaux::ty_to_str;\n \n use syntax::ast;\n \n-use core::vec;\n-\n pub static resolve_nested_tvar: uint = 0b0000000001;\n pub static resolve_rvar: uint        = 0b0000000010;\n pub static resolve_ivar: uint        = 0b0000000100;"}, {"sha": "b9541d4c066b925eaf7968cbe33f8d4e6c618ab5", "filename": "src/librustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use middle::ty;\n use middle::ty::TyVar;\n use middle::typeck::check::regionmanip::replace_bound_regions_in_fn_sig;\n@@ -29,7 +27,6 @@ use syntax::ast;\n use syntax::ast::{Onceness, m_const, purity};\n use syntax::codemap::span;\n \n-\n pub struct Sub(CombineFields);  // \"subtype\", \"subregion\" etc\n \n impl Combine for Sub {"}, {"sha": "7c992db67034797e2658ce6570de65dec73cb194", "filename": "src/librustc/middle/typeck/infer/test.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -16,8 +16,6 @@ Note: This module is only compiled when doing unit testing.\n \n */\n \n-use core::prelude::*;\n-\n use driver::diagnostic;\n use driver::driver::{optgroups, build_session_options, build_session};\n use driver::driver::{str_input, build_configuration};"}, {"sha": "779346c380cd41337b41702ce2a4ecdc1f8d955d", "filename": "src/librustc/middle/typeck/infer/to_str.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use middle::ty::{FnSig, Vid};\n use middle::ty::IntVarValue;\n use middle::ty;\n@@ -20,9 +18,6 @@ use util::ppaux::{mt_to_str, ty_to_str, trait_ref_to_str};\n \n use syntax::ast;\n \n-use core::uint;\n-use core::str;\n-\n pub trait InferStr {\n     fn inf_str(&self, cx: &InferCtxt) -> ~str;\n }"}, {"sha": "bc13074422450209ec33eba6818b27db7836da40", "filename": "src/librustc/middle/typeck/infer/unify.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n use std::smallintmap::SmallIntMap;\n \n use middle::ty::{Vid, expected_found, IntVarValue};"}, {"sha": "14ef3feb7d53ee7f391ba1ab7a18d949e31ceb0b", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -48,8 +48,6 @@ independently:\n \n */\n \n-use core::prelude::*;\n-\n use driver::session;\n \n use middle::resolve;\n@@ -59,8 +57,6 @@ use util::ppaux::Repr;\n use util::ppaux;\n \n use core::hashmap::HashMap;\n-use core::result;\n-use core::vec;\n use std::list::List;\n use std::list;\n use syntax::codemap::span;"}, {"sha": "65f5b910f37726f8224452ab5a91e55f9619962d", "filename": "src/librustc/middle/typeck/rscope.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,12 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use middle::ty;\n \n-use core::result::Result;\n-use core::result;\n use syntax::ast;\n use syntax::codemap::span;\n use syntax::opt_vec::OptVec;"}, {"sha": "54c51cf2e487aea7f11306c16fc41ea43b99d955", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n #[link(name = \"rustc\",\n        vers = \"0.7-pre\",\n        uuid = \"0ce89b41-2f92-459e-bbc1-8f5fe32f16cf\",\n@@ -23,13 +22,9 @@\n #[deny(deprecated_pattern)];\n #[deny(deprecated_mode)];\n \n-#[no_core];\n-\n-extern mod core(vers = \"0.7-pre\");\n extern mod std(vers = \"0.7-pre\");\n extern mod syntax(vers = \"0.7-pre\");\n \n-use core::prelude::*;\n \n use driver::driver::{host_triple, optgroups, early_error};\n use driver::driver::{str_input, file_input, build_session_options};\n@@ -39,8 +34,6 @@ use driver::driver::{compile_input};\n use driver::session;\n use middle::lint;\n \n-use core::io::ReaderUtil;\n-use core::result::{Ok, Err};\n use std::getopts::{groups, opt_present};\n use std::getopts;\n use syntax::codemap;"}, {"sha": "38f55b2b6e4233a5e478115958ba5e1905cd54c8", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,14 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use syntax::ast;\n use syntax::codemap::{span};\n use syntax::visit;\n \n use core::hashmap::HashSet;\n-use core::str;\n use std;\n \n pub fn time<T>(do_it: bool, what: ~str, thunk: &fn() -> T) -> T {"}, {"sha": "f0ea91c91534eba56f32bf5391c8f9001822fedc", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use middle::ty;\n use middle::typeck;\n use middle::ty::canon_mode;\n@@ -33,9 +31,6 @@ use syntax::{ast, ast_util};\n use syntax::ast_map;\n use syntax::abi::AbiSet;\n \n-use core::str;\n-use core::vec;\n-\n pub trait Repr {\n     fn repr(&self, tcx: ctxt) -> ~str;\n }"}, {"sha": "b8a66eb8f64f02765f544b9b8feaa7944b154bc8", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -17,8 +17,6 @@ query AST-related information, shielding the rest of Rustdoc from its\n non-sendableness.\n */\n \n-use core::prelude::*;\n-\n use parse;\n \n use core::cell::Cell;"}, {"sha": "5b97ccffc213de434501770934e9d8607e58cab9", "filename": "src/librustdoc/attr_parser.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_parser.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -15,9 +15,6 @@ The attribute parser provides methods for pulling documentation out of\n an AST's attributes.\n */\n \n-use core::prelude::*;\n-\n-use core::str;\n use syntax::ast;\n use syntax::attr;\n \n@@ -74,7 +71,6 @@ mod test {\n     use syntax::ast;\n     use syntax;\n     use super::{parse_hidden, parse_crate, parse_desc};\n-    use core::prelude::*;\n \n     fn parse_attributes(source: ~str) -> ~[ast::attribute] {\n         use syntax::parse;"}, {"sha": "204f3073e9c5d75d9f74c886f26b37852370240a", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -16,8 +16,6 @@ corresponding AST nodes. The information gathered here is the basis\n of the natural-language documentation for a crate.\n */\n \n-use core::prelude::*;\n-\n use astsrv;\n use attr_parser;\n use doc::ItemUtils;\n@@ -27,7 +25,6 @@ use fold::Fold;\n use fold;\n use pass::Pass;\n \n-use core::vec;\n use syntax::ast;\n use syntax::ast_map;\n \n@@ -240,7 +237,6 @@ mod test {\n     use attr_pass::run;\n     use doc;\n     use extract;\n-    use core::prelude::*;\n \n     fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {"}, {"sha": "0644b57a0f45b4a8ee1cb6afcbc4e26166177431", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,14 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use core::cell::Cell;\n-use core::os;\n-use core::result;\n use core::run;\n use core::run::ProgramOutput;\n-use core::vec;\n use core::result::Result;\n use std::getopts;\n \n@@ -246,7 +242,6 @@ pub fn maybe_find_pandoc(\n #[cfg(test)]\n mod test {\n     use config::*;\n-    use core::prelude::*;\n     use core::run::ProgramOutput;\n \n     fn parse_config(args: &[~str]) -> Result<Config, ~str> {\n@@ -379,4 +374,4 @@ mod test {\n         let config = parse_config(~[~\"rustdoc\", ~\"crate.rc\"]);\n         assert!(config.get().pandoc_cmd == Some(~\"pandoc\"));\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "7cbd92292c198ca64268d273df775ebe36358d45", "filename": "src/librustdoc/demo.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fdemo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fdemo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdemo.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -21,8 +21,6 @@\n  * tests on this file\n  */\n \n-use core::prelude::*;\n-\n /// The base price of a muffin on a non-holiday\n static price_of_a_muffin: float = 70f;\n "}, {"sha": "40ff9b218296476f7d456833a352f52526d814ac", "filename": "src/librustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -15,17 +15,13 @@ If the first paragraph of a long description is short enough then it\n is interpreted as the brief description.\n */\n \n-use core::prelude::*;\n-\n use astsrv;\n use doc::ItemUtils;\n use doc;\n use fold::Fold;\n use fold;\n use pass::Pass;\n \n-use core::str;\n-use core::vec;\n use core::util;\n \n pub fn mk_pass() -> Pass {\n@@ -189,7 +185,6 @@ mod test {\n     use super::{extract, paragraphs, run};\n     use doc;\n     use extract;\n-    use core::prelude::*;\n \n     fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {"}, {"sha": "1656eb03098120c58ae6b96277eb49b38a0bcf04", "filename": "src/librustdoc/doc.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoc.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -10,12 +10,8 @@\n \n //! The document model\n \n-use core::prelude::*;\n-\n use doc;\n \n-use core::vec;\n-\n pub type AstId = int;\n \n #[deriving(Eq)]"}, {"sha": "ce120f477a52329433b2e7e30d33694d5f29c695", "filename": "src/librustdoc/extract.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fextract.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -10,15 +10,11 @@\n \n //! Converts the Rust AST to the rustdoc document model\n \n-use core::prelude::*;\n-\n use astsrv;\n use doc::ItemUtils;\n use doc;\n \n-use core::cast;\n use core::task::local_data::local_data_get;\n-use core::vec;\n use syntax::ast;\n use syntax;\n "}, {"sha": "7c66b4f4d4e93be28272dc287e6194b6fe0476e6", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,14 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use doc;\n #[cfg(test)] use extract;\n #[cfg(test)] use parse;\n \n-use core::vec;\n-\n pub struct Fold<T> {\n     ctxt: T,\n     fold_doc: FoldDoc<T>,"}, {"sha": "d9e24453652a725813424d691a8456a0149dda25", "filename": "src/librustdoc/markdown_index_pass.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_index_pass.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -10,8 +10,6 @@\n \n //! Build indexes as appropriate for the markdown pass\n \n-use core::prelude::*;\n-\n use astsrv;\n use config;\n use doc::ItemUtils;\n@@ -22,8 +20,6 @@ use markdown_pass;\n use markdown_writer;\n use pass::Pass;\n \n-use core::str;\n-\n pub fn mk_pass(config: config::Config) -> Pass {\n     Pass {\n         name: ~\"markdown_index\",\n@@ -175,7 +171,6 @@ mod test {\n     use markdown_index_pass::run;\n     use path_pass;\n     use super::pandoc_header_id;\n-    use core::prelude::*;\n \n     fn mk_doc(output_style: config::OutputStyle, source: ~str)\n                -> doc::Doc {"}, {"sha": "3a8116b5ae6b05f5c5c9a348c31389083e0f998a", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -10,8 +10,6 @@\n \n //! Generate markdown from a document tree\n \n-use core::prelude::*;\n-\n use astsrv;\n use doc::ItemUtils;\n use doc;\n@@ -23,8 +21,6 @@ use pass::Pass;\n use sort_pass;\n \n use core::cell::Cell;\n-use core::str;\n-use core::vec;\n use syntax;\n \n pub fn mk_pass(writer_factory: WriterFactory) -> Pass {\n@@ -522,7 +518,6 @@ mod test {\n     use trim_pass;\n     use tystr_pass;\n     use unindent_pass;\n-    use core::prelude::*;\n \n     fn render(source: ~str) -> ~str {\n         let (srv, doc) = create_doc_srv(source);"}, {"sha": "b9a2ee7ccb7c9c0c47a6bdff09d1b88976397203", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,20 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use config;\n use doc::ItemUtils;\n use doc;\n \n-use core::io;\n use core::libc;\n-use core::os;\n-use core::comm;\n-use core::result;\n use core::run;\n-use core::str;\n-use core::task;\n use core::comm::*;\n use std::future;\n \n@@ -272,7 +264,6 @@ mod test {\n     use path_pass;\n     use config;\n     use super::make_local_filename;\n-    use core::prelude::*;\n \n     fn mk_doc(name: ~str, source: ~str) -> doc::Doc {\n         do astsrv::from_str(source) |srv| {"}, {"sha": "89a3acc6cac71131183e2e230d0857c519f27389", "filename": "src/librustdoc/page_pass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpage_pass.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -15,8 +15,6 @@ Each page corresponds is a logical section. There may be pages for\n individual modules, pages for the crate, indexes, etc.\n */\n \n-use core::prelude::*;\n-\n use astsrv;\n use config;\n use doc::ItemUtils;"}, {"sha": "1f4133592f242574b0a9dfe85ecc8c6b215e2a90", "filename": "src/librustdoc/parse.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fparse.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -10,8 +10,6 @@\n \n //! AST-parsing helpers\n \n-use core::prelude::*;\n-\n use rustc::driver::driver::{file_input, str_input};\n use rustc::driver::driver;\n use rustc::driver::session;"}, {"sha": "94db038bdec4bf12d3f1e0edeb38b8fca62996c8", "filename": "src/librustdoc/pass.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpass.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,16 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use astsrv;\n use doc;\n use time;\n \n #[cfg(test)] use extract;\n \n-use core::vec;\n-\n /// A single operation on the document model\n pub struct Pass {\n     name: ~str,"}, {"sha": "629c6955566f5422a5772bda4e010be19d0acaa6", "filename": "src/librustdoc/path_pass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpath_pass.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -10,8 +10,6 @@\n \n //! Records the full path to items\n \n-use core::prelude::*;\n-\n use astsrv;\n use doc::ItemUtils;\n use doc;"}, {"sha": "210ca5cfe704dc575ac49206389d69aac1daaee2", "filename": "src/librustdoc/prune_private_pass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fprune_private_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fprune_private_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_private_pass.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -10,8 +10,6 @@\n \n //! Prune things that are private\n \n-use core::prelude::*;\n-\n use extract;\n use syntax::ast;\n use syntax::ast_map;"}, {"sha": "333ea5bce2fdebcf5e28ac3d3abf948f171da416", "filename": "src/librustdoc/rustdoc.rc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rc?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -19,11 +19,8 @@\n #[license = \"MIT/ASL2\"];\n #[crate_type = \"lib\"];\n \n-#[no_core];\n-\n #[allow(non_implicitly_copyable_typarams)];\n \n-extern mod core(vers = \"0.7-pre\");\n extern mod std(vers = \"0.7-pre\");\n extern mod rustc(vers = \"0.7-pre\");\n extern mod syntax(vers = \"0.7-pre\");"}, {"sha": "c69f3b13e26d8bb754e6357cc80b6682bd521df4", "filename": "src/librustdoc/sectionalize_pass.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fsectionalize_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Fsectionalize_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsectionalize_pass.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -10,17 +10,13 @@\n \n //! Breaks rustdocs into sections according to their headers\n \n-use core::prelude::*;\n-\n use astsrv;\n use doc::ItemUtils;\n use doc;\n use fold::Fold;\n use fold;\n use pass::Pass;\n \n-use core::str;\n-\n pub fn mk_pass() -> Pass {\n     Pass {\n         name: ~\"sectionalize\",\n@@ -169,7 +165,6 @@ mod test {\n     use doc;\n     use extract;\n     use sectionalize_pass::run;\n-    use core::prelude::*;\n \n     fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {"}, {"sha": "61768e37a83ffdfea47c63c7284a97d9942a75ca", "filename": "src/librustdoc/text_pass.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Ftext_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Ftext_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftext_pass.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -10,8 +10,6 @@\n \n //! Generic pass for performing an operation on all descriptions\n \n-use core::prelude::*;\n-\n use astsrv;\n use doc::ItemUtils;\n use doc;\n@@ -147,8 +145,6 @@ mod test {\n     use sectionalize_pass;\n     use text_pass::mk_pass;\n \n-    use core::prelude::*;\n-\n     fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv.clone(), ~\"\");"}, {"sha": "303bdc53b69828a757d78e80e8ffac9e8937c3f1", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -10,8 +10,6 @@\n \n //! Pulls type information out of the AST and attaches it to the document\n \n-use core::prelude::*;\n-\n use astsrv;\n use doc::ItemUtils;\n use doc;\n@@ -21,7 +19,6 @@ use fold::Fold;\n use fold;\n use pass::Pass;\n \n-use core::vec;\n use syntax::ast;\n use syntax::print::pprust;\n use syntax::ast_map;\n@@ -358,7 +355,6 @@ mod test {\n     use doc;\n     use extract;\n     use tystr_pass::run;\n-    use core::prelude::*;\n \n     fn mk_doc(source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {"}, {"sha": "082c4dd1989a631a860abfd231b6b38311f06b90", "filename": "src/librustdoc/unindent_pass.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Funindent_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Funindent_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Funindent_pass.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -19,15 +19,9 @@ instances where the string containing the doc comment is opened in the\n middle of a line, and each of the following lines is indented.\n */\n \n-use core::prelude::*;\n-\n use pass::Pass;\n use text_pass;\n \n-use core::str;\n-use core::uint;\n-use core::vec;\n-\n pub fn mk_pass() -> Pass {\n     text_pass::mk_pass(~\"unindent\", unindent)\n }"}, {"sha": "0368b8a0346102f2947c1b2c7553d6b261178f1a", "filename": "src/librustdoc/util.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustdoc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Futil.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n // Just a named container for our op, so it can have impls\n pub struct NominalOp<T> {\n     op: T"}, {"sha": "0749f20156f1cc81db92506701676e531df8e11b", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -18,18 +18,14 @@\n #[license = \"MIT/ASL2\"];\n #[crate_type = \"lib\"];\n \n-#[no_core];\n-\n #[allow(vecs_implicitly_copyable,\n         non_implicitly_copyable_typarams)];\n \n-extern mod core(vers = \"0.7-pre\");\n extern mod std(vers = \"0.7-pre\");\n extern mod rustc(vers = \"0.7-pre\");\n extern mod syntax(vers = \"0.7-pre\");\n \n use core::*;\n-use core::io::{ReaderUtil, WriterUtil};\n use rustc::driver::{driver, session};\n use syntax::{ast, diagnostic};\n use syntax::ast_util::*;"}, {"sha": "0490f066f0bea7e478465285993ffe404ad5000f", "filename": "src/librustpkg/path_util.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -10,9 +10,6 @@\n \n // rustpkg utilities having to do with paths and directories\n \n-use core::path::*;\n-use core::{os, str};\n-use core::option::*;\n use util::PkgId;\n use core::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n "}, {"sha": "a296f0ca32a48137b8591d3b7581ef7cc117dbea", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -17,20 +17,16 @@\n \n #[license = \"MIT/ASL2\"];\n #[crate_type = \"lib\"];\n-#[no_core];\n #[allow(vecs_implicitly_copyable,\n         non_implicitly_copyable_typarams)];\n \n-extern mod core(vers = \"0.7-pre\");\n extern mod std(vers = \"0.7-pre\");\n extern mod rustc(vers = \"0.7-pre\");\n extern mod syntax(vers = \"0.7-pre\");\n \n use core::*;\n pub use core::path::Path;\n-use core::container::Map;\n use core::hashmap::HashMap;\n-use core::io::WriterUtil;\n use rustc::driver::{driver, session};\n use rustc::metadata::filesearch;\n use std::{getopts};"}, {"sha": "49cc875355b9ea1cb4157ad63b78177203c2f959", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -13,9 +13,6 @@\n use context::Ctx;\n use core::hashmap::HashMap;\n use core::path::Path;\n-use core::os;\n-use core::io;\n-use core::option::*;\n use std::tempfile::mkdtemp;\n use util::{PkgId, default_version};\n use path_util::{target_executable_in_workspace, target_library_in_workspace,\n@@ -101,4 +98,4 @@ fn test_install_invalid() {\n         fail!(~\"test_install_invalid failed, should have raised a condition\");\n     };\n     assert!(substituted == expected_path);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "f45fb4e7658330a60e3665b8c477a0474b8cb947", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -17,7 +17,6 @@ use sync;\n use sync::{Mutex, mutex_with_condvars, RWlock, rwlock_with_condvars};\n \n use core::cast;\n-use core::prelude::*;\n use core::unstable::{SharedMutableState, shared_mutable_state};\n use core::unstable::{clone_shared_mutable_state};\n use core::unstable::{get_shared_mutable_state, get_shared_immutable_state};\n@@ -478,7 +477,6 @@ pub impl<'self, T:Const + Owned> RWReadMode<'self, T> {\n \n #[cfg(test)]\n mod tests {\n-    use core::prelude::*;\n \n     use arc::*;\n     use arc;"}, {"sha": "8e2c7345045121d35a5c5d87ed12843da9dbb6aa", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -39,7 +39,6 @@ use core::at_vec;\n use core::cast::transmute;\n use core::cast;\n use core::libc::size_t;\n-use core::prelude::*;\n use core::ptr;\n use core::sys::TypeDesc;\n use core::sys;"}, {"sha": "5314c35419cc5aaf464eb2d981d614b2761943fc", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,12 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::container::{Container, Mutable, Set};\n-use core::ops;\n-use core::prelude::*;\n-use core::uint;\n use core::vec::from_elem;\n-use core::vec;\n \n struct SmallBitv {\n     /// only the lowest nbits of this value are used. the rest is undefined.\n@@ -867,7 +862,6 @@ priv impl BitvSet {\n \n #[cfg(test)]\n mod tests {\n-    use core::prelude::*;\n     use std::test::BenchHarness;\n \n     use bitv::*;"}, {"sha": "b4b4e2bf1a2cb8e7d8a0bf637d30cec5c68bf0f5", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -36,10 +36,6 @@\n  * still held if needed.\n  */\n \n-use core::option;\n-use core::prelude::*;\n-use core::ptr;\n-\n /**\n  * The type representing a foreign chunk of memory\n  *\n@@ -146,7 +142,6 @@ pub fn ptr<T>(t: CVec<T>) -> *mut T { t.base }\n \n #[cfg(test)]\n mod tests {\n-    use core::prelude::*;\n \n     use c_vec::*;\n "}, {"sha": "d866ee6cedbdd070bf208e15b061d0a4e6b01883", "filename": "src/libstd/comm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -17,7 +17,6 @@ Higher level communication abstractions.\n use core::comm::{GenericChan, GenericSmartChan, GenericPort};\n use core::comm::{Chan, Port, Selectable, Peekable};\n use core::pipes;\n-use core::prelude::*;\n \n /// An extension of `pipes::stream` that allows both sending and receiving.\n pub struct DuplexStream<T, U> {"}, {"sha": "5d52bb7c0810baaa87f153e948aa25723deeee6f", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -10,10 +10,6 @@\n \n //! A double-ended queue implemented as a circular buffer\n \n-use core::container::{Container, Mutable};\n-use core::prelude::*;\n-use core::vec;\n-\n static initial_capacity: uint = 32u; // 2^5\n \n pub struct Deque<T> {"}, {"sha": "5fdc467cfa2a0ecbb7ad2f84d8a17a7725d23688", "filename": "src/libstd/dlist.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdlist.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -18,7 +18,6 @@ Do not use ==, !=, <, etc on doubly-linked lists -- it may not terminate.\n \n */\n \n-use core::prelude::*;\n use core::managed;\n \n pub type DListLink<T> = Option<@mut DListNode<T>>;\n@@ -534,7 +533,6 @@ impl<T> BaseIter<T> for @mut DList<T> {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use core::prelude::*;\n \n     #[test]\n     fn test_dlist_concat() {"}, {"sha": "2598e96a141e2b0aee483cd72dbd3f360e3262c3", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n // Simple Extensible Binary Markup Language (ebml) reader and writer on a\n // cursor model. See the specification here:\n //     http://www.matroska.org/technical/specs/rfc/index.html\n@@ -62,7 +60,6 @@ pub mod reader {\n     use core::cast::transmute;\n     use core::int;\n     use core::io;\n-    use core::prelude::*;\n     use core::ptr::offset;\n     use core::str;\n     use core::unstable::intrinsics::bswap32;"}, {"sha": "a24b11d71c68d08abd02b82c8e46bba2b0c9d8da", "filename": "src/libstd/fileinput.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffileinput.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -96,7 +96,6 @@ total line count).\n \n #[allow(deprecated_mutable_fields)];\n \n-use core::prelude::*;\n use core::io::ReaderUtil;\n \n /**\n@@ -410,7 +409,6 @@ pub fn input_vec_state(files: ~[Option<Path>],\n #[cfg(test)]\n mod test {\n     use core::io::WriterUtil;\n-    use core::prelude::*;\n     use super::{FileInput, pathify, input_vec, input_vec_state};\n \n     fn make_file(path : &Path, contents: &[~str]) {"}, {"sha": "bd0acb849fcac8858596e9589ec05c949c3b8f7a", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -51,7 +51,6 @@ block the scheduler thread, so will their pipes.\n use core::io;\n use core::comm::GenericChan;\n use core::comm::GenericPort;\n-use core::prelude::*;\n use core::sys::size_of;\n use core::vec;\n \n@@ -177,7 +176,6 @@ pub mod pod {\n     use core::io::{Reader, Writer};\n     use core::comm::{Port, Chan};\n     use core::comm;\n-    use core::prelude::*;\n \n     pub type ReaderPort<T, R> =\n         FlatPort<T, PodUnflattener<T>, ReaderBytePort<R>>;\n@@ -341,7 +339,6 @@ pub mod flatteners {\n \n     use core::cast;\n     use core::io::{Writer, Reader, ReaderUtil};\n-    use core::prelude::*;\n     use core::ptr;\n     use core::sys::size_of;\n     use core::vec;\n@@ -504,7 +501,6 @@ pub mod bytepipes {\n \n     use core::io::{Writer, Reader, ReaderUtil};\n     use core::comm::{Port, Chan};\n-    use core::prelude::*;\n \n     pub struct ReaderBytePort<R> {\n         reader: R\n@@ -626,8 +622,6 @@ pub mod bytepipes {\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n-\n     use flatpipes::{Flattener, Unflattener};\n     use flatpipes::bytepipes::*;\n     use flatpipes::pod;\n@@ -636,11 +630,7 @@ mod test {\n     use flatpipes::{BytePort, FlatChan, FlatPort};\n     use net::tcp::TcpSocketBuf;\n \n-    use core::int;\n     use core::io::BytesWriter;\n-    use core::prelude::*;\n-    use core::result;\n-    use core::task;\n \n     #[test]\n     fn test_serializing_memory_stream() {\n@@ -805,7 +795,6 @@ mod test {\n         // Client task\n         let addr = copy addr0;\n         do task::spawn || {\n-\n             // Wait for the server to start listening\n             begin_connect_port.recv();\n \n@@ -858,17 +847,11 @@ mod test {\n     // Tests that the different backends behave the same when the\n     // binary streaming protocol is broken\n     mod broken_protocol {\n-        use core::prelude::*;\n-\n         use flatpipes::{BytePort, FlatPort};\n         use flatpipes::flatteners::PodUnflattener;\n         use flatpipes::pod;\n         use io_util::BufReader;\n \n-        use core::io;\n-        use core::sys;\n-        use core::task;\n-\n         type PortLoader<P> =\n             ~fn(~[u8]) -> FlatPort<int, PodUnflattener<int>, P>;\n "}, {"sha": "3bffeddbe092e66caca857422e0f31247c25c4bd", "filename": "src/libstd/fun_treemap.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Ffun_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Ffun_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffun_treemap.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -21,7 +21,6 @@\n \n use core::cmp::{Eq, Ord};\n use core::option::{Some, None};\n-use core::prelude::*;\n \n pub type Treemap<K, V> = @TreeNode<K, V>;\n "}, {"sha": "264f3072cb162e41304f3e83250956b3ddb43056", "filename": "src/libstd/future.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -25,7 +25,6 @@ use core::cast;\n use core::cell::Cell;\n use core::comm::{oneshot, PortOne, send_one};\n use core::pipes::recv;\n-use core::prelude::*;\n use core::task;\n \n #[doc = \"The future type\"]\n@@ -173,7 +172,6 @@ pub fn spawn<A:Owned>(blk: ~fn() -> A) -> Future<A> {\n #[allow(non_implicitly_copyable_typarams)]\n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n \n     use future::*;\n "}, {"sha": "fda5c105da5f7e53597743625d47d17ae56a90cd", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -79,7 +79,6 @@\n  */\n \n use core::cmp::Eq;\n-use core::prelude::*;\n use core::result::{Err, Ok};\n use core::result;\n use core::option::{Some, None};\n@@ -461,7 +460,6 @@ pub mod groups {\n     use getopts::{HasArg, Long, Maybe, Multi, No, Occur, Opt, Optional, Req};\n     use getopts::{Short, Yes};\n \n-    use core::prelude::*;\n     use core::str;\n     use core::vec;\n \n@@ -654,7 +652,6 @@ pub mod groups {\n \n #[cfg(test)]\n mod tests {\n-    use core::prelude::*;\n \n     use getopts::groups::OptGroup;\n     use getopts::*;"}, {"sha": "7353bec7333c5ca42287156280c0115ba7bcb3f4", "filename": "src/libstd/json.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -14,7 +14,6 @@\n \n //! json serialization\n \n-use core::prelude::*;\n use core::io::{WriterUtil, ReaderUtil};\n use core::hashmap::HashMap;\n \n@@ -1266,7 +1265,6 @@ impl to_str::ToStr for Error {\n mod tests {\n     use super::*;\n \n-    use core::prelude::*;\n     use core::hashmap::HashMap;\n \n     use std::serialize::Decodable;"}, {"sha": "401cc121a62a8eb2c424075a22b6bb6500fa7360", "filename": "src/libstd/list.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -10,11 +10,6 @@\n \n //! A standard linked list\n \n-use core::cmp::Eq;\n-use core::option::*;\n-use core::prelude::*;\n-use core::vec;\n-\n #[deriving(Eq)]\n pub enum List<T> {\n     Cons(T, @List<T>),"}, {"sha": "aa1903e4a217945f37b2ceb04a834a290c92e3db", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -11,7 +11,6 @@\n //! Types/fns concerning Internet Protocol (IP), versions 4 & 6\n \n use core::libc;\n-use core::prelude::*;\n use core::comm::{stream, SharedChan};\n use core::ptr;\n use core::result;\n@@ -152,7 +151,6 @@ pub mod v4 {\n     use uv_ip4_addr = uv::ll::ip4_addr;\n     use uv_ip4_name = uv::ll::ip4_name;\n \n-    use core::prelude::*;\n     use core::ptr;\n     use core::result;\n     use core::str;\n@@ -252,7 +250,6 @@ pub mod v6 {\n     use uv_ip6_addr = uv::ll::ip6_addr;\n     use uv_ip6_name = uv::ll::ip6_name;\n \n-    use core::prelude::*;\n     use core::result;\n     use core::str;\n \n@@ -364,7 +361,6 @@ extern fn get_addr_cb(handle: *uv_getaddrinfo_t, status: libc::c_int,\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n \n     use net_ip::*;\n     use net_ip::v4;"}, {"sha": "ee109047cb161d7e57d5441fd7b204966a792a41", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -24,7 +24,6 @@ use core::io;\n use core::libc::size_t;\n use core::libc;\n use core::comm::{stream, Port, SharedChan};\n-use core::prelude::*;\n use core::ptr;\n use core::result::{Result};\n use core::result;\n@@ -1449,7 +1448,6 @@ mod test {\n \n     use core::io;\n     use core::comm::{stream, SharedChan};\n-    use core::prelude::*;\n     use core::result;\n     use core::str;\n     use core::task;"}, {"sha": "f3b11c132798cfe3c2b7a3d6a2c99b13fad21503", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -16,7 +16,6 @@ use core::cmp::Eq;\n use core::from_str::FromStr;\n use core::io::{Reader, ReaderUtil};\n use core::io;\n-use core::prelude::*;\n use core::hashmap::HashMap;\n use core::str;\n use core::to_bytes::IterBytes;\n@@ -803,7 +802,6 @@ fn test_get_path() {\n \n #[cfg(test)]\n mod tests {\n-    use core::prelude::*;\n \n     use net_url::*;\n "}, {"sha": "02393b15cca0f492968eaebec214fdcd94bd582b", "filename": "src/libstd/num/complex.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fnum%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fnum%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fcomplex.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -12,7 +12,6 @@\n //! Complex numbers.\n \n use core::num::{Zero,One,ToStrRadix};\n-use core::prelude::*;\n \n // FIXME #1284: handle complex NaN & infinity etc. This\n // probably doesn't map to C's _Complex correctly.\n@@ -162,7 +161,6 @@ impl<T: ToStrRadix + Num + Ord> ToStrRadix for Cmplx<T> {\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n     use super::*;\n     use core::num::{Zero,One};\n "}, {"sha": "34308988fa5433c1bde3e081c7ec32df2f27fe4b", "filename": "src/libstd/num/rational.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Frational.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -13,9 +13,6 @@\n \n use core::num::{Zero,One,ToStrRadix,FromStrRadix,Round};\n use core::from_str::FromStr;\n-use core::to_str::ToStr;\n-use core::prelude::*;\n-use core::cmp::TotalEq;\n use super::bigint::BigInt;\n \n /// Represents the ratio between 2 numbers.\n@@ -299,7 +296,6 @@ impl<T: FromStrRadix + Copy + Num + Ord>\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n     use super::*;\n     use core::num::{Zero,One,FromStrRadix};\n     use core::from_str::FromStr;"}, {"sha": "cfedbb66caac54506f5e67274263ea31a42a9911", "filename": "src/libstd/par.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpar.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,16 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::cast;\n-use core::prelude::*;\n-use core::ptr;\n-use core::sys;\n-use core::uint;\n-use core::vec;\n-\n use future_spawn = future::spawn;\n \n-\n /**\n  * The maximum number of tasks this module will spawn for a single\n  * operation."}, {"sha": "08a58125d7ea5c15970415bfc5d5f70b13be1722", "filename": "src/libstd/priority_queue.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpriority_queue.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -10,12 +10,8 @@\n \n //! A priority queue implemented with a binary heap\n \n-use core::container::{Container, Mutable};\n-use core::cmp::Ord;\n use core::iter::BaseIter;\n-use core::prelude::*;\n use core::ptr::addr_of;\n-use core::vec;\n \n #[abi = \"rust-intrinsic\"]\n extern \"rust-intrinsic\" mod rusti {"}, {"sha": "b2407be0b991e7df4e4282168c95696cddd96f2b", "filename": "src/libstd/rl.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Frl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Frl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frl.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -12,9 +12,6 @@\n // state without mutexes.\n \n use core::libc::{c_char, c_int};\n-use core::prelude::*;\n-use core::str;\n-use core::task;\n \n pub mod rustrt {\n     use core::libc::{c_char, c_int};"}, {"sha": "1292d2a8585595a6528bc6002023f11874f42450", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -33,8 +33,6 @@\n  * * access to a character by index is logarithmic (linear in strings);\n  */\n \n-use core::prelude::*;\n-\n /// The type of ropes.\n pub type Rope = node::Root;\n \n@@ -443,7 +441,6 @@ pub mod iterator {\n     pub mod leaf {\n         use rope::{Rope, node};\n \n-        use core::prelude::*;\n \n         pub fn start(rope: Rope) -> node::leaf_iterator::T {\n             match (rope) {\n@@ -458,7 +455,6 @@ pub mod iterator {\n     pub mod char {\n         use rope::{Rope, node};\n \n-        use core::prelude::*;\n \n         pub fn start(rope: Rope) -> node::char_iterator::T {\n             match (rope) {\n@@ -554,8 +550,6 @@ pub fn char_at(rope: Rope, pos: uint) -> char {\n pub mod node {\n     use rope::node;\n \n-    use core::prelude::*;\n-\n     /// Implementation of type `rope`\n     pub enum Root {\n         /// An empty rope\n@@ -1135,8 +1129,6 @@ pub mod node {\n     pub mod leaf_iterator {\n         use rope::node::{Concat, Leaf, Node, height};\n \n-        use core::prelude::*;\n-\n         pub struct T {\n             stack: ~[@Node],\n             stackpos: int,\n@@ -1177,8 +1169,6 @@ pub mod node {\n         use rope::node::{Leaf, Node};\n         use rope::node::leaf_iterator;\n \n-        use core::prelude::*;\n-\n         pub struct T {\n             leaf_iterator: leaf_iterator::T,\n             leaf:  Option<Leaf>,"}, {"sha": "1ad581ba993e4402b065e0ab9304c8a4d0b6a0ed", "filename": "src/libstd/serialize.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialize.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -16,7 +16,6 @@ Core encoding and decoding interfaces.\n \n #[forbid(non_camel_case_types)];\n \n-use core::prelude::*;\n use core::hashmap::{HashMap, HashSet};\n use core::trie::{TrieMap, TrieSet};\n use deque::Deque;"}, {"sha": "487a5598d6f0bd973e62c966a6582e515f20303d", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -16,7 +16,6 @@\n use core::container::{Container, Mutable, Map, Set};\n use core::iter::{BaseIter};\n use core::option::{Some, None};\n-use core::prelude::*;\n \n pub struct SmallIntMap<T> {\n     priv v: ~[Option<T>],\n@@ -243,7 +242,6 @@ pub impl<V:Copy> SmallIntMap<V> {\n #[cfg(test)]\n mod tests {\n     use super::SmallIntMap;\n-    use core::prelude::*;\n \n     #[test]\n     fn test_find_mut() {"}, {"sha": "3e6011e80df81150a8aee7457a882c35213fbd88", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -11,7 +11,6 @@\n //! Sorting methods\n \n use core::cmp::{Eq, Ord};\n-use core::prelude::*;\n use core::util;\n use core::vec::len;\n use core::vec;\n@@ -836,7 +835,6 @@ mod test_qsort {\n \n #[cfg(test)]\n mod tests {\n-    use core::prelude::*;\n \n     use sort::*;\n \n@@ -905,7 +903,6 @@ mod tests {\n \n #[cfg(test)]\n mod test_tim_sort {\n-    use core::prelude::*;\n     use sort::tim_sort;\n     use core::rand::RngUtil;\n \n@@ -995,7 +992,6 @@ mod test_tim_sort {\n \n #[cfg(test)]\n mod big_tests {\n-    use core::prelude::*;\n     use sort::*;\n     use core::rand::RngUtil;\n "}, {"sha": "0a5348d79760ecf49b4779ecaf20a4a1862ab348", "filename": "src/libstd/std.rc", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -30,11 +30,6 @@ not required in or otherwise suitable for the core library.\n #[deny(non_camel_case_types)];\n #[allow(deprecated_mutable_fields)];\n \n-#[no_core];\n-\n-extern mod core(vers = \"0.7-pre\");\n-use core::prelude::*;\n-\n pub mod uv_ll;\n \n // General io and system-services modules"}, {"sha": "58e5352890fad887dbb0a6309f040922bb8c1531", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -15,7 +15,6 @@\n  * in std.\n  */\n \n-use core::prelude::*;\n use core::unstable::{Exclusive, exclusive};\n use core::ptr;\n use core::task;\n@@ -713,7 +712,6 @@ pub impl<'self> RWlockReadMode<'self> {\n \n #[cfg(test)]\n mod tests {\n-    use core::prelude::*;\n \n     use sync::*;\n "}, {"sha": "820536027552b8c4bc928ac905429fc7588c7f0e", "filename": "src/libstd/task_pool.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask_pool.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -12,7 +12,6 @@\n /// parallelism.\n \n use core::comm::Chan;\n-use core::prelude::*;\n use core::task::SchedMode;\n use core::task;\n use core::vec;"}, {"sha": "846a9aec153e8f67f4a35e5606a5eeb054489b5e", "filename": "src/libstd/tempfile.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftempfile.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -10,7 +10,6 @@\n \n //! Temporary files and directories\n \n-use core::prelude::*;\n use core::rand::RngUtil;\n \n pub fn mkdtemp(tmpdir: &Path, suffix: &str) -> Option<Path> {"}, {"sha": "278a326d1de959ca7f5fbad46f5dc8cd881ad5fa", "filename": "src/libstd/test.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -21,7 +21,6 @@ use term;\n \n use core::to_str::ToStr;\n use core::comm::{stream, SharedChan};\n-use core::prelude::*;\n \n pub mod rustrt {\n     use core::libc::size_t;\n@@ -597,7 +596,6 @@ pub mod bench {\n     use time::precise_time_ns;\n     use test::{BenchHarness, BenchSamples};\n     use stats::Stats;\n-    use core::prelude::*;\n     use core::rand::RngUtil;\n \n     pub impl BenchHarness {"}, {"sha": "8889abe6472b4617f2378c25046573661330a731", "filename": "src/libstd/time.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,15 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::cmp::{Eq, Ord};\n-use core::int;\n-use core::i32;\n-use core::io::{Reader, ReaderUtil};\n-use core::io;\n-use core::prelude::*;\n-use core::result::{Result, Ok, Err};\n-use core::str;\n-\n static NSEC_PER_SEC: i32 = 1_000_000_000_i32;\n \n pub mod rustrt {"}, {"sha": "a36a6da465360f619668877d51aea46dc7c2c2ce", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -14,13 +14,10 @@ use uv;\n use uv::iotask;\n use uv::iotask::IoTask;\n \n-use core::either;\n use core::libc;\n use core::libc::c_void;\n use core::cast::transmute;\n use core::comm::{stream, Chan, SharedChan, Port, select2i};\n-use core::prelude::*;\n-use core::ptr;\n \n /**\n  * Wait for timeout period then send provided value over a channel\n@@ -171,7 +168,6 @@ extern fn delayed_send_close_cb(handle: *uv::ll::uv_timer_t) {\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n \n     use timer::*;\n     use uv;"}, {"sha": "51695f2fa7d28ee9a799b6a28f802fc070420189", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -12,7 +12,6 @@\n //! trees. The only requirement for the types is that the key implements\n //! `TotalOrd`.\n \n-use core::prelude::*;\n use core::iterator::*;\n \n // This is implemented as an AA tree, which is a simplified variation of\n@@ -694,7 +693,6 @@ fn remove<K: TotalOrd, V>(node: &mut Option<~TreeNode<K, V>>,\n \n #[cfg(test)]\n mod test_treemap {\n-    use core::prelude::*;\n     use core::iterator::*;\n     use super::*;\n     use core::rand::RngUtil;\n@@ -1013,7 +1011,6 @@ mod test_treemap {\n \n #[cfg(test)]\n mod test_set {\n-    use core::prelude::*;\n     use core::iterator::*;\n     use super::*;\n "}, {"sha": "a9016697031c5da47facedb48a8261de049b8864", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -13,11 +13,9 @@\n use iotask = uv_iotask;\n use uv_iotask::{IoTask, spawn_iotask};\n \n-use core::clone::Clone;\n use core::comm::Chan;\n use core::option::{Some, None};\n use core::task::task;\n-use core::task;\n use core::unstable::global::{global_data_clone_create, global_data_clone};\n use core::unstable::weak_task::weaken_task;\n \n@@ -115,7 +113,6 @@ fn spawn_loop() -> IoTask {\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n \n     use get_gl = uv_global_loop::get;\n     use uv::iotask;"}, {"sha": "f03c60757f3344903626057de81778b7b460fb8c", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -20,9 +20,7 @@ use ll = uv_ll;\n use core::libc::c_void;\n use core::libc;\n use core::comm::{stream, Port, Chan, SharedChan};\n-use core::prelude::*;\n use core::ptr::addr_of;\n-use core::task;\n \n /// Used to abstract-away direct interaction with a libuv loop.\n pub struct IoTask {"}, {"sha": "fb40596b888ef9efda0525ba600412eadab749bb", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -34,7 +34,6 @@\n \n use core::libc::size_t;\n use core::libc::c_void;\n-use core::prelude::*;\n use core::ptr::to_unsafe_ptr;\n \n pub type uv_handle_t = c_void;\n@@ -1225,7 +1224,6 @@ pub unsafe fn addrinfo_as_sockaddr_in6(input: *addrinfo) -> *sockaddr_in6 {\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n     use core::comm::{SharedChan, stream, GenericChan, GenericPort};\n     use super::*;\n "}, {"sha": "ae09b9b9026571922ba38f56237dbc07a3ad02b5", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -16,16 +16,10 @@ use serialize::{Encoder, Encodable, Decoder, Decodable};\n use sort;\n \n use core::cell::Cell;\n-use core::cmp;\n-use core::either::{Either, Left, Right};\n-use core::io;\n use core::comm::{oneshot, PortOne, send_one};\n use core::pipes::recv;\n-use core::prelude::*;\n-use core::result;\n use core::run;\n use core::hashmap::HashMap;\n-use core::task;\n use core::to_bytes;\n \n /**"}, {"sha": "75782e9ca673ff6c57883a19f0df2fc75c48ea9d", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n use core::to_bytes;\n-use core::to_str::ToStr;\n \n #[deriving(Eq)]\n pub enum Abi {"}, {"sha": "f9828ad2b9e4e229d3aab19d820f35b443e9b581", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use abi::AbiSet;\n use ast::*;\n use ast;\n@@ -22,10 +20,7 @@ use parse::token::ident_interner;\n use print::pprust;\n use visit;\n \n-use core::cmp;\n use core::hashmap::HashMap;\n-use core::str;\n-use core::vec;\n \n pub enum path_elt {\n     path_mod(ident),"}, {"sha": "bfacfc38df6eda71443e30cf05163d5ebdae1f7a", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast::*;\n use ast;\n use ast_util;\n@@ -18,12 +16,7 @@ use parse::token;\n use visit;\n use opt_vec;\n \n-use core::int;\n-use core::option;\n-use core::str;\n use core::to_bytes;\n-use core::vec;\n-\n \n pub fn path_name_i(idents: &[ident], intr: @token::ident_interner) -> ~str {\n     // FIXME: Bad copies (#2543 -- same for everything else that says \"bad\")"}, {"sha": "2f8405c6e9689c8cbf6e786a3c07d9f6cc3dc6ae", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -10,16 +10,13 @@\n \n // Functions dealing with attributes and meta_items\n \n-use core::prelude::*;\n-\n use ast;\n use codemap::{spanned, dummy_spanned};\n use attr;\n use codemap::BytePos;\n use diagnostic::span_handler;\n use parse::comments::{doc_comment_style, strip_doc_comment_decoration};\n \n-use core::vec;\n use core::hashmap::HashSet;\n use std;\n "}, {"sha": "1194506a8876fb0a1884b3a6aa9ac0f6d5386e0b", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -21,12 +21,7 @@ source code snippets, etc.\n \n */\n \n-use core::prelude::*;\n-\n-use core::cmp;\n-use core::str;\n use core::to_bytes;\n-use core::uint;\n use std::serialize::{Encodable, Decodable, Encoder, Decoder};\n \n pub trait Pos {"}, {"sha": "0f2374a892b4a2875d8367b4f03352747cdc4254", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,16 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use codemap::{Pos, span};\n use codemap;\n \n-use core::io::WriterUtil;\n-use core::io;\n-use core::str;\n-use core::vec;\n-\n use std::term;\n \n pub type Emitter = @fn(cmsp: Option<(@codemap::CodeMap, span)>,"}, {"sha": "534027bd2958bdd78b8ba740994314b33bfe9e84", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,14 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n /*\n  * Inline assembly support.\n  */\n \n-use core::prelude::*;\n-\n use ast;\n use codemap::span;\n use ext::base;"}, {"sha": "0d451c66edb2b94de26b4057c8eb0f39df4dbc26", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -88,8 +88,6 @@ node twice.\n \n */\n \n-use core::prelude::*;\n-\n use ast;\n use ast_util;\n use attr;\n@@ -101,8 +99,6 @@ use opt_vec;\n use opt_vec::OptVec;\n use ext::build;\n \n-use core::vec;\n-\n // Transitional reexports so qquote can find the paths it is looking for\n mod syntax {\n     pub use ext;"}, {"sha": "ecbccedbd9d12f160f00abaf4305e11f13f6656f", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use codemap;\n use codemap::{CodeMap, span, ExpnInfo, ExpandedFrom};\n@@ -19,7 +17,6 @@ use ext;\n use parse;\n use parse::token;\n \n-use core::vec;\n use core::hashmap::HashMap;\n \n // new-style macro! tt code:"}, {"sha": "c4c2fed778f4f8dc60ad365c2ad9c496d9b05b5e", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use codemap;\n use codemap::span;\n@@ -18,8 +16,6 @@ use ext::build;\n \n use opt_vec::OptVec;\n \n-use core::option;\n-\n pub struct Field {\n     ident: ast::ident,\n     ex: @ast::expr"}, {"sha": "55e25e6993695de11cb9918ad4cb935ddb3e1024", "filename": "src/libsyntax/ext/concat_idents.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat_idents.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use codemap::span;\n use ext::base::*;"}, {"sha": "48f6d5baa8b9f4b4074b022fe6e9d2d802acef6d", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use ast::*;\n use ext::base::ext_ctxt;\n@@ -19,8 +17,6 @@ use codemap::{span, spanned};\n use ast_util;\n use opt_vec;\n \n-use core::uint;\n-\n pub fn expand_deriving_decodable(\n     cx: @ext_ctxt,\n     span: span,"}, {"sha": "640d0d0ff2d23f4ea03a5299b7be36f1f6951eeb", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use ast::*;\n use ext::base::ext_ctxt;\n@@ -19,8 +17,6 @@ use codemap::{span, spanned};\n use ast_util;\n use opt_vec;\n \n-use core::uint;\n-\n pub fn expand_deriving_encodable(\n     cx: @ext_ctxt,\n     span: span,"}, {"sha": "05941f4cbd65580b6f6495b1a987b933242b0c1b", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -125,8 +125,6 @@ For `C0(a)` and `C1 {x}` ,\n \n */\n \n-use core::prelude::*;\n-\n use ast;\n \n use ast::{"}, {"sha": "f03306ea07ac8e191a4cbb894536350f38e415a0", "filename": "src/libsyntax/ext/deriving/iter_bytes.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use ast::*;\n use ext::base::ext_ctxt;\n@@ -19,8 +17,6 @@ use codemap::{span, spanned};\n use ast_util;\n use opt_vec;\n \n-use core::uint;\n-\n pub fn expand_deriving_iter_bytes(cx: @ext_ctxt,\n                                   span: span,\n                                   _mitem: @meta_item,"}, {"sha": "5aeeef2b17aee7132fdee81bb7688016f02e0363", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -11,8 +11,6 @@\n /// The compiler code necessary to implement the #[deriving(Eq)] and\n /// #[deriving(IterBytes)] extensions.\n \n-use core::prelude::*;\n-\n use ast;\n use ast::{Ty, bind_by_ref, deref, enum_def};\n use ast::{expr, expr_match, ident, item, item_};\n@@ -28,8 +26,6 @@ use codemap::{span, respan};\n use parse::token::special_idents::clownshoes_extensions;\n use opt_vec;\n \n-use core::uint;\n-\n pub mod clone;\n pub mod iter_bytes;\n pub mod encodable;"}, {"sha": "5e5fd7d97b19f2d752635e10ab9834f515f9b1e4", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,15 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n /*\n  * The compiler code necessary to support the env! extension.  Eventually this\n  * should all get sucked into either the compiler syntax extension plugin\n  * interface.\n  */\n \n-use core::prelude::*;\n-\n use ast;\n use codemap::span;\n use ext::base::*;"}, {"sha": "fde5a2594226e6e5dce860b03ab52a0dcc82155f", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast::{blk_, attribute_, attr_outer, meta_word};\n use ast::{crate, expr_, expr_mac, mac_invoc_tt};\n use ast::{item_mac, stmt_, stmt_mac, stmt_expr, stmt_semi};\n@@ -22,8 +20,6 @@ use fold::*;\n use parse;\n use parse::{parse_item_from_source_str};\n \n-use core::vec;\n-\n pub fn expand_expr(extsbox: @mut SyntaxEnv,\n                    cx: @ext_ctxt,\n                    e: &expr_,"}, {"sha": "9bbe617eb070bbb95215feecadb013e018c96072", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,16 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n /*\n  * The compiler code necessary to support the fmt! extension. Eventually this\n  * should all get sucked into either the standard library extfmt module or the\n  * compiler syntax extension plugin interface.\n  */\n \n-use core::prelude::*;\n-\n use ast;\n use codemap::span;\n use ext::base::*;"}, {"sha": "34d6978abddddf50274e05c650e257d114bf80ce", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::io::WriterUtil;\n-use core::prelude::*;\n-\n use ast;\n use codemap;\n use ext::base::*;"}, {"sha": "ede3711b052dcd71d72bfbe64acbb1c3f7c545fb", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -13,8 +13,6 @@\n // To start with, it will be use dummy spans, but it might someday do\n // something smarter.\n \n-use core::prelude::*;\n-\n use abi::AbiSet;\n use ast::ident;\n use ast;\n@@ -26,8 +24,6 @@ use ext::quote::rt::*;\n use opt_vec;\n use opt_vec::OptVec;\n \n-use core::vec;\n-\n // Transitional reexports so qquote can find the paths it is looking for\n mod syntax {\n     pub use ext;"}, {"sha": "c2c0c06342bae95ff116ce61b392f8fc339d229f", "filename": "src/libsyntax/ext/pipes/check.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -29,8 +29,6 @@ that.\n \n */\n \n-use core::prelude::*;\n-\n use ast;\n use codemap::span;\n use ext::base::ext_ctxt;"}, {"sha": "4597dab89cbfe791056033cb24b8f93b806aa427", "filename": "src/libsyntax/ext/pipes/liveness.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -37,12 +37,9 @@ updating the states using rule (2) until there are no changes.\n \n */\n \n-use core::prelude::*;\n-\n use ext::base::ext_ctxt;\n use ext::pipes::proto::protocol;\n \n-use core::str;\n use std::bitv::Bitv;\n \n pub fn analyze(proto: protocol, _cx: @ext_ctxt) {"}, {"sha": "f9346f49b61f0c7949f17e068637933717303d6b", "filename": "src/libsyntax/ext/pipes/parse_proto.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -16,8 +16,6 @@ use parse::common::SeqSep;\n use parse::parser;\n use parse::token;\n \n-use core::prelude::*;\n-\n pub trait proto_parser {\n     fn parse_proto(&self, id: ~str) -> protocol;\n     fn parse_state(&self, proto: protocol);"}, {"sha": "e6f5d3608afc2b7ba86dbd8b64d54d5239649d07", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -20,11 +20,6 @@ use ext::quote::rt::*;\n use opt_vec;\n use opt_vec::OptVec;\n \n-use core::prelude::*;\n-use core::str;\n-use core::to_str::ToStr;\n-use core::vec;\n-\n pub trait gen_send {\n     fn gen_send(&mut self, cx: @ext_ctxt, try: bool) -> @ast::item;\n     fn to_ty(&mut self, cx: @ext_ctxt) -> @ast::Ty;"}, {"sha": "79072a2f577ff69c0dd988a305b38d5d010973cc", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,15 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use codemap::span;\n use ext::base::ext_ctxt;\n use ext::pipes::ast_builder::{append_types, ext_ctxt_ast_builder, path};\n \n-use core::to_str::ToStr;\n-\n #[deriving(Eq)]\n pub enum direction { send, recv }\n "}, {"sha": "f7412a4502c1687bc89ff43f01d1fa9b829fc173", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -17,8 +17,6 @@ use parse::token::*;\n use parse::token;\n use parse;\n \n-use core::prelude::*;\n-\n /**\n *\n * Quasiquoting works via token trees.\n@@ -36,7 +34,6 @@ pub mod rt {\n     use parse;\n     use print::pprust;\n \n-    use core::prelude::*;\n     use core::str;\n \n     pub use ast::*;"}, {"sha": "70aa9472c855ba2f5e869319980c2c0619653105", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -18,12 +18,6 @@ use ext::build::{mk_base_vec_e, mk_uint, mk_u8, mk_base_str};\n use parse;\n use print::pprust;\n \n-use core::io;\n-use core::prelude::*;\n-use core::result;\n-use core::str;\n-use core::vec;\n-\n // These macros all relate to the file system; they either return\n // the column/row/filename of the expression, or they include\n // a given file into the current one."}, {"sha": "a29a0f33e0d0c70ec0c29a6d070ffbf10c53775f", "filename": "src/libsyntax/ext/trace_macros.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftrace_macros.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use codemap::span;\n use ext::base::ext_ctxt;"}, {"sha": "e4e033e0ffff7e0c7cd089cdd9060e2fc5bab21e", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -19,7 +19,6 @@ use parse::parser::Parser;\n use parse::token::{Token, EOF, to_str, nonterminal};\n use parse::token;\n \n-use core::prelude::*;\n use core::hashmap::HashMap;\n \n /* This is an Earley-like parser, without support for in-grammar nonterminals,"}, {"sha": "39c3c63a9b7fc39310a92ff038795f4b878f828a", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use ast::{ident, matcher_, matcher, match_tok, match_nonterminal, match_seq};\n use ast::{tt_delim};"}, {"sha": "19c83e21a867e0c67470f0cc2365d31d01db99f1", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use ast::{token_tree, tt_delim, tt_tok, tt_seq, tt_nonterminal,ident};\n use codemap::{span, dummy_sp};\n@@ -19,8 +17,6 @@ use parse::token::{EOF, INTERPOLATED, IDENT, Token, nt_ident, ident_interner};\n use parse::lexer::TokenAndSpan;\n \n use core::hashmap::HashMap;\n-use core::option;\n-use core::vec;\n \n ///an unzipping of `token_tree`s\n struct TtFrame {"}, {"sha": "da6d0e8bf7be62b34145bb94dccfd20faa44a965", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,15 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast::*;\n use ast;\n use codemap::{span, spanned};\n use opt_vec::OptVec;\n \n-use core::vec;\n-\n pub trait ast_fold {\n     fn fold_crate(@self, &crate) -> crate;\n     fn fold_view_item(@self, @view_item) -> @view_item;"}, {"sha": "88d7c39cc83769f377fc98d17c0fef90af4a6762", "filename": "src/libsyntax/opt_vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fopt_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fopt_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fopt_vec.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -16,7 +16,6 @@\n  * other useful things like `push()` and `len()`.\n  */\n \n-use core::prelude::*;\n use core::iter;\n use core::iter::BaseIter;\n "}, {"sha": "40bfd3d380c132cd9ff74c78c8b7cacb205adcdf", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use codemap::{BytePos, CharPos, CodeMap, Pos};\n use diagnostic;\n@@ -20,12 +18,6 @@ use parse::lexer;\n use parse::token;\n use parse;\n \n-use core::io::ReaderUtil;\n-use core::io;\n-use core::str;\n-use core::uint;\n-use core::vec;\n-\n #[deriving(Eq)]\n pub enum cmnt_style {\n     isolated, // No code on either side of each line of the comment"}, {"sha": "01f80c032e9a0b78ac68ddea8de14173d95438aa", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,16 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use codemap::{BytePos, spanned};\n use parse::lexer::reader;\n use parse::parser::Parser;\n use parse::token;\n \n-use core::option::{None, Option, Some};\n-\n use opt_vec;\n use opt_vec::OptVec;\n "}, {"sha": "fa425cf6285e0143820dfa3023362130a204d568", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use codemap::{BytePos, CharPos, CodeMap, Pos, span};\n use codemap;\n@@ -18,11 +16,6 @@ use ext::tt::transcribe::{tt_next_token};\n use ext::tt::transcribe::{dup_tt_reader};\n use parse::token;\n \n-use core::char;\n-use core::either;\n-use core::str;\n-use core::u64;\n-\n pub use ext::tt::transcribe::{TtReader, new_tt_reader};\n \n //use std;"}, {"sha": "e6e98a35d6ecb81d7b477d41d03037db064511d4", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -17,7 +17,6 @@ Obsolete syntax that becomes too hard to parse can be\n removed.\n */\n \n-use core::prelude::*;\n \n use ast::{expr, expr_lit, lit_nil};\n use ast;\n@@ -26,7 +25,6 @@ use parse::parser::Parser;\n use parse::token::Token;\n use parse::token;\n \n-use core::str;\n use core::to_bytes;\n \n /// The specific types of unsupported syntax"}, {"sha": "c35b0e2e8c2e619a08d17fe27d8b5888a91c01ae", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use abi;\n use abi::AbiSet;\n use ast::{Sigil, BorrowedSigil, ManagedSigil, OwnedSigil};"}, {"sha": "5f37c922c1e10f49e518091d0dfe4a4403ae0409", "filename": "src/libsyntax/parse/prec.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fparse%2Fprec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fparse%2Fprec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fprec.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -13,8 +13,6 @@ use ast::*;\n use parse::token::*;\n use parse::token::Token;\n \n-use core::prelude::*;\n-\n /// Unary operators have higher precedence than binary\n pub static unop_prec: uint = 100u;\n "}, {"sha": "413f1688df1c4b95b05b487534473ea85663b12a", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,20 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use ast;\n use ast_util;\n use parse::token;\n use util::interner::Interner;\n use util::interner;\n \n-use core::cast;\n-use core::char;\n use core::cmp::Equiv;\n use core::hashmap::HashSet;\n-use core::str;\n-use core::task;\n use core::to_bytes;\n \n #[auto_encode]"}, {"sha": "e2ad5becb123b31a7e1efb816f39ef0c080fcec1", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,12 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n-use core::io::WriterUtil;\n-use core::io;\n-use core::vec;\n-\n /*\n  * This pretty-printer is a direct reimplementation of Philip Karlton's\n  * Mesa pretty-printer, as described in appendix A of"}, {"sha": "918fc8051943f79bc87e0f82a978acd33865dd6c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n \n use abi::AbiSet;\n use ast::{RegionTyParamBound, TraitTyParamBound, required, provided};\n@@ -29,12 +28,6 @@ use print::pp::{breaks, consistent, inconsistent, eof};\n use print::pp;\n use print::pprust;\n \n-use core::char;\n-use core::io;\n-use core::str;\n-use core::u64;\n-use core::vec;\n-\n // The @ps is stored here to prevent recursive type.\n pub enum ann_node<'self> {\n     node_block(@ps, &'self ast::blk),"}, {"sha": "2682139ce3f1a03f454d28c8596f92f58f2188fb", "filename": "src/libsyntax/syntax.rc", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fsyntax.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fsyntax.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsyntax.rc?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -12,8 +12,6 @@\n        vers = \"0.7-pre\",\n        uuid = \"9311401b-d6ea-4cd9-a1d9-61f89499c645\")];\n \n-\n-\n #[license = \"MIT/ASL2\"];\n #[crate_type = \"lib\"];\n \n@@ -22,13 +20,8 @@\n #[deny(deprecated_mode)];\n #[deny(deprecated_pattern)];\n \n-#[no_core];\n-\n-extern mod core(vers = \"0.7-pre\");\n extern mod std(vers = \"0.7-pre\");\n \n-use core::*;\n-\n // allow the interner_key macro\n // to escape this module:\n #[macro_escape]"}, {"sha": "9ab7d4bc443efe96ad425a6c29dfe297a10c1345", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -15,7 +15,6 @@\n // allow the interner_key macro to escape this module:\n #[macro_escape];\n \n-use core::prelude::*;\n use core::cmp::Equiv;\n use core::hashmap::HashMap;\n "}, {"sha": "80df8fb91a51561b545e8ba9e171949aaca411fb", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7947aa52f79943593c36d71868757ef351b94e/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=5f7947aa52f79943593c36d71868757ef351b94e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::prelude::*;\n-\n use abi::AbiSet;\n use ast::*;\n use ast;"}]}