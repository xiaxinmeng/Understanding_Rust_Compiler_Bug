{"sha": "e9dd18ca749801a19d85bfb424ae12011a8ff894", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5ZGQxOGNhNzQ5ODAxYTE5ZDg1YmZiNDI0YWUxMjAxMWE4ZmY4OTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-04T04:51:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-04T04:51:49Z"}, "message": "Auto merge of #79686 - Dylan-DPC:rollup-leama5f, r=Dylan-DPC\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #77686 (Render Markdown in search results)\n - #79541 (Doc keyword lint pass)\n - #79602 (Fix SGX CI)\n - #79611 (Use more std:: instead of core:: in docs for consistency)\n - #79623 (Pass around Symbols instead of Idents in doctree)\n - #79627 (Update cargo)\n - #79631 (disable a ptr equality test on Miri)\n - #79638 (Use `item_name` instead of pretty printing for resolving `Self` on intra-doc links)\n - #79646 (rustc_metadata: Remove some dead code)\n - #79664 (move interpret::MemoryKind::Heap to const eval)\n - #79678 (Fix some clippy lints)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ff6d9acd47c92008a14624ee9a038130fe7d1760", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff6d9acd47c92008a14624ee9a038130fe7d1760"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9dd18ca749801a19d85bfb424ae12011a8ff894", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9dd18ca749801a19d85bfb424ae12011a8ff894", "html_url": "https://github.com/rust-lang/rust/commit/e9dd18ca749801a19d85bfb424ae12011a8ff894", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9dd18ca749801a19d85bfb424ae12011a8ff894/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6513f5029183471993bab4b05ae5f5433f461b08", "url": "https://api.github.com/repos/rust-lang/rust/commits/6513f5029183471993bab4b05ae5f5433f461b08", "html_url": "https://github.com/rust-lang/rust/commit/6513f5029183471993bab4b05ae5f5433f461b08"}, {"sha": "5cebbaa6a1509ca17cef41ef61df624dad9740c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cebbaa6a1509ca17cef41ef61df624dad9740c2", "html_url": "https://github.com/rust-lang/rust/commit/5cebbaa6a1509ca17cef41ef61df624dad9740c2"}], "stats": {"total": 610, "additions": 430, "deletions": 180}, "files": [{"sha": "335f3b7a9a011b703480b1d1e19a31193f0830da", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -235,12 +235,10 @@ impl Annotatable {\n     pub fn derive_allowed(&self) -> bool {\n         match *self {\n             Annotatable::Stmt(ref stmt) => match stmt.kind {\n-                ast::StmtKind::Item(ref item) => match item.kind {\n-                    ast::ItemKind::Struct(..)\n-                    | ast::ItemKind::Enum(..)\n-                    | ast::ItemKind::Union(..) => true,\n-                    _ => false,\n-                },\n+                ast::StmtKind::Item(ref item) => matches!(\n+                    item.kind,\n+                    ast::ItemKind::Struct(..) | ast::ItemKind::Enum(..) | ast::ItemKind::Union(..)\n+                ),\n                 _ => false,\n             },\n             Annotatable::Item(ref item) => match item.kind {"}, {"sha": "2da5bde028fc12925b98a88700ed5068bc2481a5", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -1134,7 +1134,9 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             if let Some(attr) = self.take_first_attr_no_derive(&mut expr) {\n                 // Collect the invoc regardless of whether or not attributes are permitted here\n                 // expansion will eat the attribute so it won't error later.\n-                attr.0.as_ref().map(|attr| self.cfg.maybe_emit_expr_attr_err(attr));\n+                if let Some(attr) = attr.0.as_ref() {\n+                    self.cfg.maybe_emit_expr_attr_err(attr)\n+                }\n \n                 // AstFragmentKind::Expr requires the macro to emit an expression.\n                 return self\n@@ -1231,7 +1233,9 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             self.cfg.configure_expr_kind(&mut expr.kind);\n \n             if let Some(attr) = self.take_first_attr_no_derive(&mut expr) {\n-                attr.0.as_ref().map(|attr| self.cfg.maybe_emit_expr_attr_err(attr));\n+                if let Some(attr) = attr.0.as_ref() {\n+                    self.cfg.maybe_emit_expr_attr_err(attr)\n+                }\n \n                 return self\n                     .collect_attr(attr, Annotatable::Expr(P(expr)), AstFragmentKind::OptExpr)"}, {"sha": "44dc6673564a5d12a88a46e0c8a9c2963e93c9c1", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -2401,7 +2401,7 @@ impl StructField<'_> {\n     // Still necessary in couple of places\n     pub fn is_positional(&self) -> bool {\n         let first = self.ident.as_str().as_bytes()[0];\n-        first >= b'0' && first <= b'9'\n+        (b'0'..=b'9').contains(&first)\n     }\n }\n "}, {"sha": "44fc4db7dc199fd7fd9f6ffaae750be288643222", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -267,8 +267,8 @@ pub fn is_whitespace(c: char) -> bool {\n pub fn is_id_start(c: char) -> bool {\n     // This is XID_Start OR '_' (which formally is not a XID_Start).\n     // We also add fast-path for ascii idents\n-    ('a' <= c && c <= 'z')\n-        || ('A' <= c && c <= 'Z')\n+    ('a'..='z').contains(&c)\n+        || ('A'..='Z').contains(&c)\n         || c == '_'\n         || (c > '\\x7f' && unicode_xid::UnicodeXID::is_xid_start(c))\n }\n@@ -279,9 +279,9 @@ pub fn is_id_start(c: char) -> bool {\n pub fn is_id_continue(c: char) -> bool {\n     // This is exactly XID_Continue.\n     // We also add fast-path for ascii idents\n-    ('a' <= c && c <= 'z')\n-        || ('A' <= c && c <= 'Z')\n-        || ('0' <= c && c <= '9')\n+    ('a'..='z').contains(&c)\n+        || ('A'..='Z').contains(&c)\n+        || ('0'..='9').contains(&c)\n         || c == '_'\n         || (c > '\\x7f' && unicode_xid::UnicodeXID::is_xid_continue(c))\n }"}, {"sha": "af5972c6c81c7ff608ef2079b8b4c049634bdd09", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::{GenericArg, HirId, MutTy, Mutability, Path, PathSegment, QPath,\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n-use rustc_span::symbol::{sym, Ident, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n \n declare_tool_lint! {\n     pub rustc::DEFAULT_HASH_TYPES,\n@@ -267,3 +267,47 @@ impl EarlyLintPass for LintPassImpl {\n         }\n     }\n }\n+\n+declare_tool_lint! {\n+    pub rustc::EXISTING_DOC_KEYWORD,\n+    Allow,\n+    \"Check that documented keywords in std and core actually exist\",\n+    report_in_external_macro: true\n+}\n+\n+declare_lint_pass!(ExistingDocKeyword => [EXISTING_DOC_KEYWORD]);\n+\n+fn is_doc_keyword(s: Symbol) -> bool {\n+    s <= kw::Union\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for ExistingDocKeyword {\n+    fn check_item(&mut self, cx: &LateContext<'_>, item: &rustc_hir::Item<'_>) {\n+        for attr in item.attrs {\n+            if !attr.has_name(sym::doc) {\n+                continue;\n+            }\n+            if let Some(list) = attr.meta_item_list() {\n+                for nested in list {\n+                    if nested.has_name(sym::keyword) {\n+                        let v = nested\n+                            .value_str()\n+                            .expect(\"#[doc(keyword = \\\"...\\\")] expected a value!\");\n+                        if is_doc_keyword(v) {\n+                            return;\n+                        }\n+                        cx.struct_span_lint(EXISTING_DOC_KEYWORD, attr.span, |lint| {\n+                            lint.build(&format!(\n+                                \"Found non-existing keyword `{}` used in \\\n+                                     `#[doc(keyword = \\\"...\\\")]`\",\n+                                v,\n+                            ))\n+                            .help(\"only existing keywords are allowed in core/std\")\n+                            .emit();\n+                        });\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "80ef855c3859e14f650a46a7d061467719bb2675", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -463,6 +463,8 @@ fn register_internals(store: &mut LintStore) {\n     store.register_early_pass(|| box DefaultHashTypes::new());\n     store.register_lints(&LintPassImpl::get_lints());\n     store.register_early_pass(|| box LintPassImpl);\n+    store.register_lints(&ExistingDocKeyword::get_lints());\n+    store.register_late_pass(|| box ExistingDocKeyword);\n     store.register_lints(&TyTyKind::get_lints());\n     store.register_late_pass(|| box TyTyKind);\n     store.register_group(\n@@ -475,6 +477,7 @@ fn register_internals(store: &mut LintStore) {\n             LintId::of(LINT_PASS_IMPL_WITHOUT_MACRO),\n             LintId::of(TY_PASS_BY_REFERENCE),\n             LintId::of(USAGE_OF_QUALIFIED_TY),\n+            LintId::of(EXISTING_DOC_KEYWORD),\n         ],\n     );\n }"}, {"sha": "c571ed7b61262824d907fbb65bf731e84d00f3dc", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -1592,23 +1592,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         self.def_path_hash_unlocked(index, &mut def_path_hashes)\n     }\n \n-    fn all_def_path_hashes_and_def_ids(&self) -> Vec<(DefPathHash, DefId)> {\n-        let mut def_path_hashes = self.def_path_hash_cache.lock();\n-        let mut def_index_to_data = |index| {\n-            (self.def_path_hash_unlocked(index, &mut def_path_hashes), self.local_def_id(index))\n-        };\n-        if let Some(data) = &self.root.proc_macro_data {\n-            std::iter::once(CRATE_DEF_INDEX)\n-                .chain(data.macros.decode(self))\n-                .map(def_index_to_data)\n-                .collect()\n-        } else {\n-            (0..self.num_def_ids())\n-                .map(|index| def_index_to_data(DefIndex::from_usize(index)))\n-                .collect()\n-        }\n-    }\n-\n     /// Get the `DepNodeIndex` corresponding this crate. The result of this\n     /// method is cached in the `dep_node_index` field.\n     fn get_crate_dep_node_index(&self, tcx: TyCtxt<'tcx>) -> DepNodeIndex {"}, {"sha": "b7f22885217908e9d44388b39d1eab8e19ba04b3", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -456,6 +456,10 @@ impl CStore {\n     pub fn module_expansion_untracked(&self, def_id: DefId, sess: &Session) -> ExpnId {\n         self.get_crate_data(def_id.krate).module_expansion(def_id.index, sess)\n     }\n+\n+    pub fn num_def_ids(&self, cnum: CrateNum) -> usize {\n+        self.get_crate_data(cnum).num_def_ids()\n+    }\n }\n \n impl CrateStore for CStore {\n@@ -498,14 +502,6 @@ impl CrateStore for CStore {\n         self.get_crate_data(def.krate).def_path_hash(def.index)\n     }\n \n-    fn all_def_path_hashes_and_def_ids(&self, cnum: CrateNum) -> Vec<(DefPathHash, DefId)> {\n-        self.get_crate_data(cnum).all_def_path_hashes_and_def_ids()\n-    }\n-\n-    fn num_def_ids(&self, cnum: CrateNum) -> usize {\n-        self.get_crate_data(cnum).num_def_ids()\n-    }\n-\n     // See `CrateMetadataRef::def_path_hash_to_def_id` for more details\n     fn def_path_hash_to_def_id(\n         &self,"}, {"sha": "6d2c43874bc0fe59e2b0faa7c4b8c905be43caa8", "filename": "compiler/rustc_middle/src/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -189,8 +189,6 @@ pub trait CrateStore {\n     fn def_kind(&self, def: DefId) -> DefKind;\n     fn def_path(&self, def: DefId) -> DefPath;\n     fn def_path_hash(&self, def: DefId) -> DefPathHash;\n-    fn all_def_path_hashes_and_def_ids(&self, cnum: CrateNum) -> Vec<(DefPathHash, DefId)>;\n-    fn num_def_ids(&self, cnum: CrateNum) -> usize;\n     fn def_path_hash_to_def_id(\n         &self,\n         cnum: CrateNum,"}, {"sha": "187f6fab5181f70f2417b11ec8575619fd0e507a", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -7,6 +7,7 @@ use std::collections::hash_map::Entry;\n use std::hash::Hash;\n \n use rustc_data_structures::fx::FxHashMap;\n+use std::fmt;\n \n use rustc_ast::Mutability;\n use rustc_hir::def_id::DefId;\n@@ -179,6 +180,28 @@ impl<K: Hash + Eq, V> interpret::AllocMap<K, V> for FxHashMap<K, V> {\n crate type CompileTimeEvalContext<'mir, 'tcx> =\n     InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>>;\n \n+#[derive(Debug, PartialEq, Eq, Copy, Clone)]\n+pub enum MemoryKind {\n+    Heap,\n+}\n+\n+impl fmt::Display for MemoryKind {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            MemoryKind::Heap => write!(f, \"heap allocation\"),\n+        }\n+    }\n+}\n+\n+impl interpret::MayLeak for MemoryKind {\n+    #[inline(always)]\n+    fn may_leak(self) -> bool {\n+        match self {\n+            MemoryKind::Heap => false,\n+        }\n+    }\n+}\n+\n impl interpret::MayLeak for ! {\n     #[inline(always)]\n     fn may_leak(self) -> bool {\n@@ -222,6 +245,8 @@ impl<'mir, 'tcx: 'mir> CompileTimeEvalContext<'mir, 'tcx> {\n impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir, 'tcx> {\n     compile_time_machine!(<'mir, 'tcx>);\n \n+    type MemoryKind = MemoryKind;\n+\n     type MemoryExtra = MemoryExtra;\n \n     fn find_mir_or_eval_fn(\n@@ -317,7 +342,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                 let ptr = ecx.memory.allocate(\n                     Size::from_bytes(size as u64),\n                     align,\n-                    interpret::MemoryKind::ConstHeap,\n+                    interpret::MemoryKind::Machine(MemoryKind::Heap),\n                 );\n                 ecx.write_scalar(Scalar::Ptr(ptr), dest)?;\n             }"}, {"sha": "01d58c47e3ab9f52141a8a12197cb396f967eed4", "filename": "compiler/rustc_mir/src/interpret/intern.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -25,19 +25,20 @@ use rustc_target::abi::Size;\n use rustc_ast::Mutability;\n \n use super::{AllocId, Allocation, InterpCx, MPlaceTy, Machine, MemoryKind, Scalar, ValueVisitor};\n+use crate::const_eval;\n \n-pub trait CompileTimeMachine<'mir, 'tcx> = Machine<\n+pub trait CompileTimeMachine<'mir, 'tcx, T> = Machine<\n     'mir,\n     'tcx,\n-    MemoryKind = !,\n+    MemoryKind = T,\n     PointerTag = (),\n     ExtraFnVal = !,\n     FrameExtra = (),\n     AllocExtra = (),\n-    MemoryMap = FxHashMap<AllocId, (MemoryKind<!>, Allocation)>,\n+    MemoryMap = FxHashMap<AllocId, (MemoryKind<T>, Allocation)>,\n >;\n \n-struct InternVisitor<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>> {\n+struct InternVisitor<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx, const_eval::MemoryKind>> {\n     /// The ectx from which we intern.\n     ecx: &'rt mut InterpCx<'mir, 'tcx, M>,\n     /// Previously encountered safe references.\n@@ -74,7 +75,7 @@ struct IsStaticOrFn;\n /// `immutable` things might become mutable if `ty` is not frozen.\n /// `ty` can be `None` if there is no potential interior mutability\n /// to account for (e.g. for vtables).\n-fn intern_shallow<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>>(\n+fn intern_shallow<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx, const_eval::MemoryKind>>(\n     ecx: &'rt mut InterpCx<'mir, 'tcx, M>,\n     leftover_allocations: &'rt mut FxHashSet<AllocId>,\n     alloc_id: AllocId,\n@@ -105,7 +106,7 @@ fn intern_shallow<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>>(\n     // changes in this function.\n     match kind {\n         MemoryKind::Stack\n-        | MemoryKind::ConstHeap\n+        | MemoryKind::Machine(const_eval::MemoryKind::Heap)\n         | MemoryKind::Vtable\n         | MemoryKind::CallerLocation => {}\n     }\n@@ -141,7 +142,9 @@ fn intern_shallow<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>>(\n     None\n }\n \n-impl<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>> InternVisitor<'rt, 'mir, 'tcx, M> {\n+impl<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx, const_eval::MemoryKind>>\n+    InternVisitor<'rt, 'mir, 'tcx, M>\n+{\n     fn intern_shallow(\n         &mut self,\n         alloc_id: AllocId,\n@@ -152,8 +155,8 @@ impl<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>> InternVisitor<'rt, 'mir\n     }\n }\n \n-impl<'rt, 'mir, 'tcx: 'mir, M: CompileTimeMachine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n-    for InternVisitor<'rt, 'mir, 'tcx, M>\n+impl<'rt, 'mir, 'tcx: 'mir, M: CompileTimeMachine<'mir, 'tcx, const_eval::MemoryKind>>\n+    ValueVisitor<'mir, 'tcx, M> for InternVisitor<'rt, 'mir, 'tcx, M>\n {\n     type V = MPlaceTy<'tcx>;\n \n@@ -290,7 +293,7 @@ pub enum InternKind {\n /// Any errors here would anyway be turned into `const_err` lints, whereas validation failures\n /// are hard errors.\n #[tracing::instrument(skip(ecx))]\n-pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n+pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx, const_eval::MemoryKind>>(\n     ecx: &mut InterpCx<'mir, 'tcx, M>,\n     intern_kind: InternKind,\n     ret: MPlaceTy<'tcx>,\n@@ -421,7 +424,9 @@ where\n     Ok(())\n }\n \n-impl<'mir, 'tcx: 'mir, M: super::intern::CompileTimeMachine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n+impl<'mir, 'tcx: 'mir, M: super::intern::CompileTimeMachine<'mir, 'tcx, !>>\n+    InterpCx<'mir, 'tcx, M>\n+{\n     /// A helper function that allocates memory for the layout given and gives you access to mutate\n     /// it. Once your own mutation code is done, the backing `Allocation` is removed from the\n     /// current `Memory` and returned."}, {"sha": "0bba02737722931910c8e5ce2bf5be59ee2cf359", "filename": "compiler/rustc_mir/src/interpret/machine.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -366,9 +366,9 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n     type PointerTag = ();\n     type ExtraFnVal = !;\n \n-    type MemoryKind = !;\n-    type MemoryMap = rustc_data_structures::fx::FxHashMap<AllocId, (MemoryKind<!>, Allocation)>;\n-    const GLOBAL_KIND: Option<!> = None; // no copying of globals from `tcx` to machine memory\n+    type MemoryMap =\n+        rustc_data_structures::fx::FxHashMap<AllocId, (MemoryKind<Self::MemoryKind>, Allocation)>;\n+    const GLOBAL_KIND: Option<Self::MemoryKind> = None; // no copying of globals from `tcx` to machine memory\n \n     type AllocExtra = ();\n     type FrameExtra = ();\n@@ -407,7 +407,7 @@ pub macro compile_time_machine(<$mir: lifetime, $tcx: lifetime>) {\n         _memory_extra: &Self::MemoryExtra,\n         _id: AllocId,\n         alloc: Cow<'b, Allocation>,\n-        _kind: Option<MemoryKind<!>>,\n+        _kind: Option<MemoryKind<Self::MemoryKind>>,\n     ) -> (Cow<'b, Allocation<Self::PointerTag>>, Self::PointerTag) {\n         // We do not use a tag so we can just cheaply forward the allocation\n         (alloc, ())"}, {"sha": "f3e373813ca537c3e40bcccb63b2410f254bcea1", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -27,9 +27,6 @@ use crate::util::pretty;\n pub enum MemoryKind<T> {\n     /// Stack memory. Error if deallocated except during a stack pop.\n     Stack,\n-    /// Heap memory.\n-    /// FIXME: this variant should be in const_eval\n-    ConstHeap,\n     /// Memory backing vtables. Error if ever deallocated.\n     Vtable,\n     /// Memory allocated by `caller_location` intrinsic. Error if ever deallocated.\n@@ -43,7 +40,6 @@ impl<T: MayLeak> MayLeak for MemoryKind<T> {\n     fn may_leak(self) -> bool {\n         match self {\n             MemoryKind::Stack => false,\n-            MemoryKind::ConstHeap => false,\n             MemoryKind::Vtable => true,\n             MemoryKind::CallerLocation => true,\n             MemoryKind::Machine(k) => k.may_leak(),\n@@ -55,7 +51,6 @@ impl<T: fmt::Display> fmt::Display for MemoryKind<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             MemoryKind::Stack => write!(f, \"stack variable\"),\n-            MemoryKind::ConstHeap => write!(f, \"heap allocation\"),\n             MemoryKind::Vtable => write!(f, \"vtable\"),\n             MemoryKind::CallerLocation => write!(f, \"caller location\"),\n             MemoryKind::Machine(m) => write!(f, \"{}\", m),"}, {"sha": "1d949e020ed5ced7a7a4bc6f88c249707c18a9cd", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -180,6 +180,8 @@ impl<'mir, 'tcx> ConstPropMachine<'mir, 'tcx> {\n impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx> {\n     compile_time_machine!(<'mir, 'tcx>);\n \n+    type MemoryKind = !;\n+\n     type MemoryExtra = ();\n \n     fn find_mir_or_eval_fn("}, {"sha": "bbbe568f17a8fbd303d8d25934cbd25156fb8ef3", "filename": "compiler/rustc_serialize/src/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_serialize%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_serialize%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fjson.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -1859,7 +1859,7 @@ impl<T: Iterator<Item = char>> Parser<T> {\n                             }\n \n                             let n2 = self.decode_hex_escape()?;\n-                            if n2 < 0xDC00 || n2 > 0xDFFF {\n+                            if !(0xDC00..=0xDFFF).contains(&n2) {\n                                 return self.error(LoneLeadingSurrogateInHexEscape);\n                             }\n                             let c ="}, {"sha": "5987fb2a198974a47baf836fd0b2242c11d93801", "filename": "compiler/rustc_span/src/analyze_source_file.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_span%2Fsrc%2Fanalyze_source_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_span%2Fsrc%2Fanalyze_source_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fanalyze_source_file.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -97,7 +97,7 @@ cfg_if::cfg_if! {\n                 let ptr = src_bytes.as_ptr() as *const __m128i;\n                 // We don't know if the pointer is aligned to 16 bytes, so we\n                 // use `loadu`, which supports unaligned loading.\n-                let chunk = _mm_loadu_si128(ptr.offset(chunk_index as isize));\n+                let chunk = _mm_loadu_si128(ptr.add(chunk_index));\n \n                 // For character in the chunk, see if its byte value is < 0, which\n                 // indicates that it's part of a UTF-8 char.\n@@ -253,7 +253,7 @@ fn analyze_source_file_generic(\n             let pos = BytePos::from_usize(i) + output_offset;\n \n             if char_len > 1 {\n-                assert!(char_len >= 2 && char_len <= 4);\n+                assert!((2..=4).contains(&char_len));\n                 let mbc = MultiByteChar { pos, bytes: char_len as u8 };\n                 multi_byte_chars.push(mbc);\n             }"}, {"sha": "f63a73acbf4ba164c5130eaaa41e9e015f3be718", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -1015,10 +1015,7 @@ pub enum ExternalSourceKind {\n \n impl ExternalSource {\n     pub fn is_absent(&self) -> bool {\n-        match self {\n-            ExternalSource::Foreign { kind: ExternalSourceKind::Present(_), .. } => false,\n-            _ => true,\n-        }\n+        !matches!(self, ExternalSource::Foreign { kind: ExternalSourceKind::Present(_), .. })\n     }\n \n     pub fn get_source(&self) -> Option<&Lrc<String>> {"}, {"sha": "e9b4eb6e4abe0357a144b17a6e42dcde2cc6e8a7", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -623,7 +623,7 @@ impl SourceMap {\n         self.span_to_source(sp, |src, start_index, end_index| {\n             src.get(start_index..end_index)\n                 .map(|s| s.to_string())\n-                .ok_or_else(|| SpanSnippetError::IllFormedSpan(sp))\n+                .ok_or(SpanSnippetError::IllFormedSpan(sp))\n         })\n     }\n \n@@ -640,9 +640,7 @@ impl SourceMap {\n     /// Returns the source snippet as `String` before the given `Span`.\n     pub fn span_to_prev_source(&self, sp: Span) -> Result<String, SpanSnippetError> {\n         self.span_to_source(sp, |src, start_index, _| {\n-            src.get(..start_index)\n-                .map(|s| s.to_string())\n-                .ok_or_else(|| SpanSnippetError::IllFormedSpan(sp))\n+            src.get(..start_index).map(|s| s.to_string()).ok_or(SpanSnippetError::IllFormedSpan(sp))\n         })\n     }\n "}, {"sha": "e75ddb36ff876aa0e5ba42d4df00278aaf6db450", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -1363,15 +1363,13 @@ impl fmt::Display for IdentPrinter {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         if self.is_raw {\n             f.write_str(\"r#\")?;\n-        } else {\n-            if self.symbol == kw::DollarCrate {\n-                if let Some(span) = self.convert_dollar_crate {\n-                    let converted = span.ctxt().dollar_crate_name();\n-                    if !converted.is_path_segment_keyword() {\n-                        f.write_str(\"::\")?;\n-                    }\n-                    return fmt::Display::fmt(&converted, f);\n+        } else if self.symbol == kw::DollarCrate {\n+            if let Some(span) = self.convert_dollar_crate {\n+                let converted = span.ctxt().dollar_crate_name();\n+                if !converted.is_path_segment_keyword() {\n+                    f.write_str(\"::\")?;\n                 }\n+                return fmt::Display::fmt(&converted, f);\n             }\n         }\n         fmt::Display::fmt(&self.symbol, f)"}, {"sha": "604835e6cc4a695ecc13bc1f0baea0f9a088fd68", "filename": "library/alloc/tests/str.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/library%2Falloc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/library%2Falloc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstr.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -1978,9 +1978,14 @@ fn const_str_ptr() {\n     const B: &'static [u8; 2] = &A;\n     const C: *const u8 = B as *const u8;\n \n-    unsafe {\n+    // Miri does not deduplicate consts (https://github.com/rust-lang/miri/issues/131)\n+    #[cfg(not(miri))]\n+    {\n         let foo = &A as *const u8;\n         assert_eq!(foo, C);\n+    }\n+\n+    unsafe {\n         assert_eq!(from_utf8_unchecked(&A), \"hi\");\n         assert_eq!(*C, A[0]);\n         assert_eq!(*(&B[0] as *const u8), A[0]);"}, {"sha": "0c65c1c9eb7e9fdc5b4f1b04e82461cec3d36319", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -403,7 +403,7 @@ impl<'a> Arguments<'a> {\n     /// ```rust\n     /// #![feature(fmt_as_str)]\n     ///\n-    /// use core::fmt::Arguments;\n+    /// use std::fmt::Arguments;\n     ///\n     /// fn write_str(_: &str) { /* ... */ }\n     ///"}, {"sha": "560dd25ecff4218961f07cb6a953d414f40a1940", "filename": "library/core/src/future/pending.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/library%2Fcore%2Fsrc%2Ffuture%2Fpending.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/library%2Fcore%2Fsrc%2Ffuture%2Fpending.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fpending.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -21,7 +21,7 @@ pub struct Pending<T> {\n /// # Examples\n ///\n /// ```no_run\n-/// use core::future;\n+/// use std::future;\n ///\n /// # async fn run() {\n /// let future = future::pending();"}, {"sha": "9ae118e29f1103ee747a4c94d322a551f2f67947", "filename": "library/core/src/future/poll_fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/library%2Fcore%2Fsrc%2Ffuture%2Fpoll_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/library%2Fcore%2Fsrc%2Ffuture%2Fpoll_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fpoll_fn.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -3,7 +3,7 @@ use crate::future::Future;\n use crate::pin::Pin;\n use crate::task::{Context, Poll};\n \n-/// Creates a future that wraps a function returning `Poll`.\n+/// Creates a future that wraps a function returning [`Poll`].\n ///\n /// Polling the future delegates to the wrapped function.\n ///\n@@ -13,7 +13,7 @@ use crate::task::{Context, Poll};\n /// #![feature(future_poll_fn)]\n /// # async fn run() {\n /// use core::future::poll_fn;\n-/// use core::task::{Context, Poll};\n+/// use std::task::{Context, Poll};\n ///\n /// fn read_line(_cx: &mut Context<'_>) -> Poll<String> {\n ///     Poll::Ready(\"Hello, World!\".into())\n@@ -31,7 +31,7 @@ where\n     PollFn { f }\n }\n \n-/// A Future that wraps a function returning `Poll`.\n+/// A Future that wraps a function returning [`Poll`].\n ///\n /// This `struct` is created by [`poll_fn()`]. See its\n /// documentation for more."}, {"sha": "b0c7fbb1d7a760ef65d367878d310ee166e7b513", "filename": "library/core/src/future/ready.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/library%2Fcore%2Fsrc%2Ffuture%2Fready.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/library%2Fcore%2Fsrc%2Ffuture%2Fready.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fready.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -33,7 +33,7 @@ impl<T> Future for Ready<T> {\n /// # Examples\n ///\n /// ```\n-/// use core::future;\n+/// use std::future;\n ///\n /// # async fn run() {\n /// let a = future::ready(1);"}, {"sha": "03bb849509ad4f993041b9e241c1807019e3ff8a", "filename": "library/core/src/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/library%2Fcore%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/library%2Fcore%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -189,7 +189,7 @@ impl<'a> Location<'a> {\n     /// # Examples\n     ///\n     /// ```\n-    /// use core::panic::Location;\n+    /// use std::panic::Location;\n     ///\n     /// /// Returns the [`Location`] at which it is called.\n     /// #[track_caller]"}, {"sha": "cbf699000158991d74b6650534bb66d2dcd948b0", "filename": "library/core/src/task/ready.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/library%2Fcore%2Fsrc%2Ftask%2Fready.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/library%2Fcore%2Fsrc%2Ftask%2Fready.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fready.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -1,15 +1,18 @@\n-/// Extracts the successful type of a `Poll<T>`.\n+/// Extracts the successful type of a [`Poll<T>`].\n ///\n-/// This macro bakes in propagation of `Pending` signals by returning early.\n+/// This macro bakes in propagation of [`Pending`] signals by returning early.\n+///\n+/// [`Poll<T>`]: crate::task::Poll\n+/// [`Pending`]: crate::task::Poll::Pending\n ///\n /// # Examples\n ///\n /// ```\n /// #![feature(ready_macro)]\n ///\n-/// use core::task::{ready, Context, Poll};\n-/// use core::future::{self, Future};\n-/// use core::pin::Pin;\n+/// use std::task::{ready, Context, Poll};\n+/// use std::future::{self, Future};\n+/// use std::pin::Pin;\n ///\n /// pub fn do_poll(cx: &mut Context<'_>) -> Poll<()> {\n ///     let mut fut = future::ready(42);\n@@ -28,9 +31,9 @@\n /// ```\n /// # #![feature(ready_macro)]\n /// #\n-/// # use core::task::{Context, Poll};\n-/// # use core::future::{self, Future};\n-/// # use core::pin::Pin;\n+/// # use std::task::{Context, Poll};\n+/// # use std::future::{self, Future};\n+/// # use std::pin::Pin;\n /// #\n /// # pub fn do_poll(cx: &mut Context<'_>) -> Poll<()> {\n ///     # let mut fut = future::ready(42);"}, {"sha": "6c240cb4c3ed9bf0fa9b0b0daffb8b63397feafe", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -212,6 +212,7 @@\n     all(target_vendor = \"fortanix\", target_env = \"sgx\"),\n     feature(slice_index_methods, coerce_unsized, sgx_platform)\n )]\n+#![deny(rustc::existing_doc_keyword)]\n #![cfg_attr(all(test, target_vendor = \"fortanix\", target_env = \"sgx\"), feature(fixed_size_array))]\n // std is implemented with unstable features, many of which are internal\n // compiler details that will never be stable"}, {"sha": "55171ef2292d718f9155bc4078ea16ad7b4d4c07", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -198,7 +198,7 @@ mod prim_bool {}\n /// words, they can't return `!` from every code path. As an example, this code doesn't compile:\n ///\n /// ```compile_fail\n-/// use core::ops::Add;\n+/// use std::ops::Add;\n ///\n /// fn foo() -> impl Add<u32> {\n ///     unimplemented!()\n@@ -208,7 +208,7 @@ mod prim_bool {}\n /// But this code does:\n ///\n /// ```\n-/// use core::ops::Add;\n+/// use std::ops::Add;\n ///\n /// fn foo() -> impl Add<u32> {\n ///     if true {"}, {"sha": "76056637a4cf911f216dc2357ea1de548bdd05db", "filename": "library/std/tests/env.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/library%2Fstd%2Ftests%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/library%2Fstd%2Ftests%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Ftests%2Fenv.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -1,6 +1,5 @@\n use std::env::*;\n use std::ffi::{OsStr, OsString};\n-use std::path::PathBuf;\n \n use rand::distributions::Alphanumeric;\n use rand::{thread_rng, Rng};\n@@ -92,6 +91,8 @@ fn env_home_dir() {\n \n     cfg_if::cfg_if! {\n         if #[cfg(unix)] {\n+            use std::path::PathBuf;\n+\n             let oldhome = var_to_os_string(var(\"HOME\"));\n \n             set_var(\"HOME\", \"/home/MountainView\");\n@@ -109,6 +110,8 @@ fn env_home_dir() {\n \n             if let Some(oldhome) = oldhome { set_var(\"HOME\", oldhome); }\n         } else if #[cfg(windows)] {\n+            use std::path::PathBuf;\n+\n             let oldhome = var_to_os_string(var(\"HOME\"));\n             let olduserprofile = var_to_os_string(var(\"USERPROFILE\"));\n "}, {"sha": "8c344338de7a589978344b049bcadc17f2f8b396", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -1000,7 +1000,7 @@ impl<'tcx> Clean<FnDecl> for (DefId, ty::PolyFnSig<'tcx>) {\n                     .iter()\n                     .map(|t| Argument {\n                         type_: t.clean(cx),\n-                        name: names.next().map_or(String::new(), |name| name.to_string()),\n+                        name: names.next().map_or_else(|| String::new(), |name| name.to_string()),\n                     })\n                     .collect(),\n             },\n@@ -1974,16 +1974,13 @@ impl Clean<BareFunctionDecl> for hir::BareFnTy<'_> {\n     }\n }\n \n-impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Ident>) {\n+impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Symbol>) {\n     fn clean(&self, cx: &DocContext<'_>) -> Vec<Item> {\n         use hir::ItemKind;\n \n         let (item, renamed) = self;\n         let def_id = cx.tcx.hir().local_def_id(item.hir_id).to_def_id();\n-        let mut name = match renamed {\n-            Some(ident) => ident.name,\n-            None => cx.tcx.hir().name(item.hir_id),\n-        };\n+        let mut name = renamed.unwrap_or_else(|| cx.tcx.hir().name(item.hir_id));\n         cx.with_param_env(def_id, || {\n             let kind = match item.kind {\n                 ItemKind::Static(ty, mutability, body_id) => StaticItem(Static {\n@@ -2276,7 +2273,7 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n     }\n }\n \n-impl Clean<Item> for (&hir::ForeignItem<'_>, Option<Ident>) {\n+impl Clean<Item> for (&hir::ForeignItem<'_>, Option<Symbol>) {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         let (item, renamed) = self;\n         cx.with_param_env(cx.tcx.hir().local_def_id(item.hir_id).to_def_id(), || {\n@@ -2310,18 +2307,18 @@ impl Clean<Item> for (&hir::ForeignItem<'_>, Option<Ident>) {\n \n             Item::from_hir_id_and_parts(\n                 item.hir_id,\n-                Some(renamed.unwrap_or(item.ident).name),\n+                Some(renamed.unwrap_or(item.ident.name)),\n                 kind,\n                 cx,\n             )\n         })\n     }\n }\n \n-impl Clean<Item> for (&hir::MacroDef<'_>, Option<Ident>) {\n+impl Clean<Item> for (&hir::MacroDef<'_>, Option<Symbol>) {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         let (item, renamed) = self;\n-        let name = renamed.unwrap_or(item.ident).name;\n+        let name = renamed.unwrap_or(item.ident.name);\n         let tts = item.ast.body.inner_tokens().trees().collect::<Vec<_>>();\n         // Extract the spans of all matchers. They represent the \"interface\" of the macro.\n         let matchers = tts.chunks(4).map(|arm| arm[0].span()).collect::<Vec<_>>();"}, {"sha": "9c693c290e7f4a694b62ce41e6c4bbbfad252bbd", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -13,7 +13,6 @@ use rustc_hir::{\n };\n use rustc_interface::interface;\n use rustc_middle::hir::map::Map;\n-use rustc_middle::middle::cstore::CrateStore;\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::ty::{ParamEnv, Ty, TyCtxt};\n use rustc_resolve as resolve;"}, {"sha": "ee9a6981857998546af36a594fa4c259cb5f437f", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -3,7 +3,7 @@\n crate use self::StructType::*;\n \n use rustc_ast as ast;\n-use rustc_span::{self, symbol::Ident, Span, Symbol};\n+use rustc_span::{self, Span, Symbol};\n \n use rustc_hir as hir;\n \n@@ -16,9 +16,9 @@ crate struct Module<'hir> {\n     crate mods: Vec<Module<'hir>>,\n     crate id: hir::HirId,\n     // (item, renamed)\n-    crate items: Vec<(&'hir hir::Item<'hir>, Option<Ident>)>,\n-    crate foreigns: Vec<(&'hir hir::ForeignItem<'hir>, Option<Ident>)>,\n-    crate macros: Vec<(&'hir hir::MacroDef<'hir>, Option<Ident>)>,\n+    crate items: Vec<(&'hir hir::Item<'hir>, Option<Symbol>)>,\n+    crate foreigns: Vec<(&'hir hir::ForeignItem<'hir>, Option<Symbol>)>,\n+    crate macros: Vec<(&'hir hir::MacroDef<'hir>, Option<Symbol>)>,\n     crate is_crate: bool,\n }\n "}, {"sha": "e82bc540e95af25bfee284c8f5e97ad16a3c1b97", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -14,13 +14,13 @@ use crate::config::RenderInfo;\n use crate::fold::DocFolder;\n use crate::formats::item_type::ItemType;\n use crate::formats::Impl;\n+use crate::html::markdown::short_markdown_summary;\n use crate::html::render::cache::{extern_location, get_index_search_type, ExternalLocation};\n use crate::html::render::IndexItem;\n-use crate::html::render::{plain_text_summary, shorten};\n \n thread_local!(crate static CACHE_KEY: RefCell<Arc<Cache>> = Default::default());\n \n-/// This cache is used to store information about the `clean::Crate` being\n+/// This cache is used to store information about the [`clean::Crate`] being\n /// rendered in order to provide more useful documentation. This contains\n /// information like all implementors of a trait, all traits a type implements,\n /// documentation for all known traits, etc.\n@@ -313,7 +313,9 @@ impl DocFolder for Cache {\n                             ty: item.type_(),\n                             name: s.to_string(),\n                             path: path.join(\"::\"),\n-                            desc: shorten(plain_text_summary(item.doc_value())),\n+                            desc: item\n+                                .doc_value()\n+                                .map_or_else(|| String::new(), short_markdown_summary),\n                             parent,\n                             parent_idx: None,\n                             search_type: get_index_search_type(&item),"}, {"sha": "0e4c5410abe1e17255a1ec1dc9687967e1f63f2a", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 88, "deletions": 2, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -17,8 +17,6 @@\n //! // ... something using html\n //! ```\n \n-#![allow(non_camel_case_types)]\n-\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefId;\n use rustc_hir::HirId;\n@@ -1037,7 +1035,95 @@ impl MarkdownSummaryLine<'_> {\n     }\n }\n \n+/// Renders a subset of Markdown in the first paragraph of the provided Markdown.\n+///\n+/// - *Italics*, **bold**, and `inline code` styles **are** rendered.\n+/// - Headings and links are stripped (though the text *is* rendered).\n+/// - HTML, code blocks, and everything else are ignored.\n+///\n+/// Returns a tuple of the rendered HTML string and whether the output was shortened\n+/// due to the provided `length_limit`.\n+fn markdown_summary_with_limit(md: &str, length_limit: usize) -> (String, bool) {\n+    if md.is_empty() {\n+        return (String::new(), false);\n+    }\n+\n+    let mut s = String::with_capacity(md.len() * 3 / 2);\n+    let mut text_length = 0;\n+    let mut stopped_early = false;\n+\n+    fn push(s: &mut String, text_length: &mut usize, text: &str) {\n+        s.push_str(text);\n+        *text_length += text.len();\n+    };\n+\n+    'outer: for event in Parser::new_ext(md, Options::ENABLE_STRIKETHROUGH) {\n+        match &event {\n+            Event::Text(text) => {\n+                for word in text.split_inclusive(char::is_whitespace) {\n+                    if text_length + word.len() >= length_limit {\n+                        stopped_early = true;\n+                        break 'outer;\n+                    }\n+\n+                    push(&mut s, &mut text_length, word);\n+                }\n+            }\n+            Event::Code(code) => {\n+                if text_length + code.len() >= length_limit {\n+                    stopped_early = true;\n+                    break;\n+                }\n+\n+                s.push_str(\"<code>\");\n+                push(&mut s, &mut text_length, code);\n+                s.push_str(\"</code>\");\n+            }\n+            Event::Start(tag) => match tag {\n+                Tag::Emphasis => s.push_str(\"<em>\"),\n+                Tag::Strong => s.push_str(\"<strong>\"),\n+                Tag::CodeBlock(..) => break,\n+                _ => {}\n+            },\n+            Event::End(tag) => match tag {\n+                Tag::Emphasis => s.push_str(\"</em>\"),\n+                Tag::Strong => s.push_str(\"</strong>\"),\n+                Tag::Paragraph => break,\n+                _ => {}\n+            },\n+            Event::HardBreak | Event::SoftBreak => {\n+                if text_length + 1 >= length_limit {\n+                    stopped_early = true;\n+                    break;\n+                }\n+\n+                push(&mut s, &mut text_length, \" \");\n+            }\n+            _ => {}\n+        }\n+    }\n+\n+    (s, stopped_early)\n+}\n+\n+/// Renders a shortened first paragraph of the given Markdown as a subset of Markdown,\n+/// making it suitable for contexts like the search index.\n+///\n+/// Will shorten to 59 or 60 characters, including an ellipsis (\u2026) if it was shortened.\n+///\n+/// See [`markdown_summary_with_limit`] for details about what is rendered and what is not.\n+crate fn short_markdown_summary(markdown: &str) -> String {\n+    let (mut s, was_shortened) = markdown_summary_with_limit(markdown, 59);\n+\n+    if was_shortened {\n+        s.push('\u2026');\n+    }\n+\n+    s\n+}\n+\n /// Renders the first paragraph of the provided markdown as plain text.\n+/// Useful for alt-text.\n ///\n /// - Headings, links, and formatting are stripped.\n /// - Inline code is rendered as-is, surrounded by backticks."}, {"sha": "9807d8632c75d272486bbb839cdd484dbd1e49b4", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -1,4 +1,4 @@\n-use super::plain_text_summary;\n+use super::{plain_text_summary, short_markdown_summary};\n use super::{ErrorCodes, IdMap, Ignore, LangString, Markdown, MarkdownHtml};\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use std::cell::RefCell;\n@@ -204,6 +204,33 @@ fn test_header_ids_multiple_blocks() {\n     );\n }\n \n+#[test]\n+fn test_short_markdown_summary() {\n+    fn t(input: &str, expect: &str) {\n+        let output = short_markdown_summary(input);\n+        assert_eq!(output, expect, \"original: {}\", input);\n+    }\n+\n+    t(\"hello [Rust](https://www.rust-lang.org) :)\", \"hello Rust :)\");\n+    t(\"*italic*\", \"<em>italic</em>\");\n+    t(\"**bold**\", \"<strong>bold</strong>\");\n+    t(\"Multi-line\\nsummary\", \"Multi-line summary\");\n+    t(\"Hard-break  \\nsummary\", \"Hard-break summary\");\n+    t(\"hello [Rust] :)\\n\\n[Rust]: https://www.rust-lang.org\", \"hello Rust :)\");\n+    t(\"hello [Rust](https://www.rust-lang.org \\\"Rust\\\") :)\", \"hello Rust :)\");\n+    t(\"code `let x = i32;` ...\", \"code <code>let x = i32;</code> ...\");\n+    t(\"type `Type<'static>` ...\", \"type <code>Type<'static></code> ...\");\n+    t(\"# top header\", \"top header\");\n+    t(\"## header\", \"header\");\n+    t(\"first paragraph\\n\\nsecond paragraph\", \"first paragraph\");\n+    t(\"```\\nfn main() {}\\n```\", \"\");\n+    t(\"<div>hello</div>\", \"\");\n+    t(\n+        \"a *very*, **very** long first paragraph. it has lots of `inline code: Vec<T>`. and it has a [link](https://www.rust-lang.org).\\nthat was a soft line break!  \\nthat was a hard one\\n\\nsecond paragraph.\",\n+        \"a <em>very</em>, <strong>very</strong> long first paragraph. it has lots of \u2026\",\n+    );\n+}\n+\n #[test]\n fn test_plain_text_summary() {\n     fn t(input: &str, expect: &str) {\n@@ -224,6 +251,10 @@ fn test_plain_text_summary() {\n     t(\"first paragraph\\n\\nsecond paragraph\", \"first paragraph\");\n     t(\"```\\nfn main() {}\\n```\", \"\");\n     t(\"<div>hello</div>\", \"\");\n+    t(\n+        \"a *very*, **very** long first paragraph. it has lots of `inline code: Vec<T>`. and it has a [link](https://www.rust-lang.org).\\nthat was a soft line break!  \\nthat was a hard one\\n\\nsecond paragraph.\",\n+        \"a very, very long first paragraph. it has lots of `inline code: Vec<T>`. and it has a link. that was a soft line break! that was a hard one\",\n+    );\n }\n \n #[test]"}, {"sha": "97f764517faf6e8b71b2e2ebd381c7d1e6fe9142", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -9,7 +9,7 @@ use crate::clean::types::GetDefId;\n use crate::clean::{self, AttributesExt};\n use crate::formats::cache::Cache;\n use crate::formats::item_type::ItemType;\n-use crate::html::render::{plain_text_summary, shorten};\n+use crate::html::markdown::short_markdown_summary;\n use crate::html::render::{Generic, IndexItem, IndexItemFunctionType, RenderType, TypeWithKind};\n \n /// Indicates where an external crate can be found.\n@@ -78,7 +78,7 @@ crate fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n                 ty: item.type_(),\n                 name: item.name.clone().unwrap(),\n                 path: fqp[..fqp.len() - 1].join(\"::\"),\n-                desc: shorten(plain_text_summary(item.doc_value())),\n+                desc: item.doc_value().map_or_else(|| String::new(), short_markdown_summary),\n                 parent: Some(did),\n                 parent_idx: None,\n                 search_type: get_index_search_type(&item),\n@@ -127,7 +127,7 @@ crate fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n     let crate_doc = krate\n         .module\n         .as_ref()\n-        .map(|module| shorten(plain_text_summary(module.doc_value())))\n+        .map(|module| module.doc_value().map_or_else(|| String::new(), short_markdown_summary))\n         .unwrap_or_default();\n \n     #[derive(Serialize)]"}, {"sha": "901f00b21da9d7cb63383bbb3d8b5306d0f3a302", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 7, "deletions": 34, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -76,7 +76,9 @@ use crate::html::format::fmt_impl_for_trait_page;\n use crate::html::format::Function;\n use crate::html::format::{href, print_default_space, print_generic_bounds, WhereClause};\n use crate::html::format::{print_abi_with_space, Buffer, PrintWithSpace};\n-use crate::html::markdown::{self, ErrorCodes, IdMap, Markdown, MarkdownHtml, MarkdownSummaryLine};\n+use crate::html::markdown::{\n+    self, plain_text_summary, ErrorCodes, IdMap, Markdown, MarkdownHtml, MarkdownSummaryLine,\n+};\n use crate::html::sources;\n use crate::html::{highlight, layout, static_files};\n use cache::{build_index, ExternalLocation};\n@@ -1604,9 +1606,10 @@ impl Context {\n                 Some(ref s) => s.to_string(),\n             };\n             let short = short.to_string();\n-            map.entry(short)\n-                .or_default()\n-                .push((myname, Some(plain_text_summary(item.doc_value()))));\n+            map.entry(short).or_default().push((\n+                myname,\n+                Some(item.doc_value().map_or_else(|| String::new(), plain_text_summary)),\n+            ));\n         }\n \n         if self.shared.sort_modules_alphabetically {\n@@ -1810,36 +1813,6 @@ fn full_path(cx: &Context, item: &clean::Item) -> String {\n     s\n }\n \n-/// Renders the first paragraph of the given markdown as plain text, making it suitable for\n-/// contexts like alt-text or the search index.\n-///\n-/// If no markdown is supplied, the empty string is returned.\n-///\n-/// See [`markdown::plain_text_summary`] for further details.\n-#[inline]\n-crate fn plain_text_summary(s: Option<&str>) -> String {\n-    s.map(markdown::plain_text_summary).unwrap_or_default()\n-}\n-\n-crate fn shorten(s: String) -> String {\n-    if s.chars().count() > 60 {\n-        let mut len = 0;\n-        let mut ret = s\n-            .split_whitespace()\n-            .take_while(|p| {\n-                // + 1 for the added character after the word.\n-                len += p.chars().count() + 1;\n-                len < 60\n-            })\n-            .collect::<Vec<_>>()\n-            .join(\" \");\n-        ret.push('\u2026');\n-        ret\n-    } else {\n-        s\n-    }\n-}\n-\n fn document(w: &mut Buffer, cx: &Context, item: &clean::Item, parent: Option<&clean::Item>) {\n     if let Some(ref name) = item.name {\n         info!(\"Documenting {}\", name);"}, {"sha": "0884351a9fd80a9172c5e252456a40841140abb6", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -1611,7 +1611,7 @@ function defocusSearchBar() {\n                               item.displayPath + \"<span class=\\\"\" + type + \"\\\">\" +\n                               name + \"</span></a></td><td>\" +\n                               \"<a href=\\\"\" + item.href + \"\\\">\" +\n-                              \"<span class=\\\"desc\\\">\" + escape(item.desc) +\n+                              \"<span class=\\\"desc\\\">\" + item.desc +\n                               \"&nbsp;</span></a></td></tr>\";\n                 });\n                 output += \"</table>\";\n@@ -2013,7 +2013,9 @@ function defocusSearchBar() {\n                     }\n                     var link = document.createElement(\"a\");\n                     link.href = rootPath + crates[i] + \"/index.html\";\n-                    link.title = rawSearchIndex[crates[i]].doc;\n+                    // The summary in the search index has HTML, so we need to\n+                    // dynamically render it as plaintext.\n+                    link.title = convertHTMLToPlaintext(rawSearchIndex[crates[i]].doc);\n                     link.className = klass;\n                     link.textContent = crates[i];\n \n@@ -2026,6 +2028,23 @@ function defocusSearchBar() {\n         }\n     };\n \n+    /**\n+     * Convert HTML to plaintext:\n+     *\n+     *   * Replace \"<code>foo</code>\" with \"`foo`\"\n+     *   * Strip all other HTML tags\n+     *\n+     * Used by the dynamic sidebar crate list renderer.\n+     *\n+     * @param  {[string]} html [The HTML to convert]\n+     * @return {[string]}      [The resulting plaintext]\n+     */\n+    function convertHTMLToPlaintext(html) {\n+        var x = document.createElement(\"div\");\n+        x.innerHTML = html.replace('<code>', '`').replace('</code>', '`');\n+        return x.innerText;\n+    }\n+\n \n     // delayed sidebar rendering.\n     window.initSidebarItems = function(items) {"}, {"sha": "26bf4b569ff4bc499ba6075f7b37d500e1afbece", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -15,6 +15,7 @@\n #![feature(never_type)]\n #![feature(once_cell)]\n #![feature(type_ascription)]\n+#![feature(split_inclusive)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "551c086a8d4e3b7cf54e8669a91740a0c529712d", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -847,12 +847,17 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n \n         // FIXME(jynelson): this shouldn't go through stringification, rustdoc should just use the DefId directly\n         let self_name = self_id.and_then(|self_id| {\n+            use ty::TyKind;\n             if matches!(self.cx.tcx.def_kind(self_id), DefKind::Impl) {\n-                // using `ty.to_string()` directly has issues with shortening paths\n+                // using `ty.to_string()` (or any variant) has issues with raw idents\n                 let ty = self.cx.tcx.type_of(self_id);\n-                let name = ty::print::with_crate_prefix(|| ty.to_string());\n-                debug!(\"using type_of(): {}\", name);\n-                Some(name)\n+                let name = match ty.kind() {\n+                    TyKind::Adt(def, _) => Some(self.cx.tcx.item_name(def.did).to_string()),\n+                    other if other.is_primitive() => Some(ty.to_string()),\n+                    _ => None,\n+                };\n+                debug!(\"using type_of(): {:?}\", name);\n+                name\n             } else {\n                 let name = self.cx.tcx.opt_item_name(self_id).map(|sym| sym.to_string());\n                 debug!(\"using item_name(): {:?}\", name);"}, {"sha": "f9cb1d586b10266b53601e6842c46d2de4d3ba1c", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::Node;\n use rustc_middle::middle::privacy::AccessLevel;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::source_map::Spanned;\n-use rustc_span::symbol::{kw, sym, Ident, Symbol};\n+use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{self, Span};\n \n use std::mem;\n@@ -116,7 +116,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         &mut self,\n         id: hir::HirId,\n         res: Res,\n-        renamed: Option<Ident>,\n+        renamed: Option<Symbol>,\n         glob: bool,\n         om: &mut Module<'tcx>,\n         please_inline: bool,\n@@ -226,11 +226,11 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     fn visit_item(\n         &mut self,\n         item: &'tcx hir::Item<'_>,\n-        renamed: Option<Ident>,\n+        renamed: Option<Symbol>,\n         om: &mut Module<'tcx>,\n     ) {\n         debug!(\"visiting item {:?}\", item);\n-        let ident = renamed.unwrap_or(item.ident);\n+        let name = renamed.unwrap_or(item.ident.name);\n \n         if item.vis.node.is_pub() {\n             let def_id = self.cx.tcx.hir().local_def_id(item.hir_id);\n@@ -266,7 +266,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                         }\n                         _ => false,\n                     });\n-                    let ident = if is_glob { None } else { Some(ident) };\n+                    let ident = if is_glob { None } else { Some(name) };\n                     if self.maybe_inline_local(\n                         item.hir_id,\n                         path.res,\n@@ -280,7 +280,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 }\n \n                 om.imports.push(Import {\n-                    name: ident.name,\n+                    name,\n                     id: item.hir_id,\n                     vis: &item.vis,\n                     attrs: &item.attrs,\n@@ -296,7 +296,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     &item.vis,\n                     item.hir_id,\n                     m,\n-                    Some(ident.name),\n+                    Some(name),\n                 ));\n             }\n             hir::ItemKind::Fn(..)\n@@ -312,7 +312,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             hir::ItemKind::Const(..) => {\n                 // Underscore constants do not correspond to a nameable item and\n                 // so are never useful in documentation.\n-                if ident.name != kw::Underscore {\n+                if name != kw::Underscore {\n                     om.items.push((item, renamed));\n                 }\n             }\n@@ -329,7 +329,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     fn visit_foreign_item(\n         &mut self,\n         item: &'tcx hir::ForeignItem<'_>,\n-        renamed: Option<Ident>,\n+        renamed: Option<Symbol>,\n         om: &mut Module<'tcx>,\n     ) {\n         // If inlining we only want to include public functions."}, {"sha": "da946a58b1c88f84e2ed2bdb7b605899d3913dd9", "filename": "src/test/rustdoc-js/basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Ftest%2Frustdoc-js%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Ftest%2Frustdoc-js%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fbasic.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -1,2 +1,2 @@\n-/// Foo\n+/// Docs for Foo\n pub struct Foo;"}, {"sha": "f175e47342df64d64321297dd9d8f0c12d2349ce", "filename": "src/test/rustdoc-js/summaries.js", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Ftest%2Frustdoc-js%2Fsummaries.js", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Ftest%2Frustdoc-js%2Fsummaries.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fsummaries.js?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -0,0 +1,21 @@\n+// ignore-tidy-linelength\n+\n+const QUERY = ['summaries', 'summaries::Sidebar', 'summaries::Sidebar2'];\n+\n+const EXPECTED = [\n+    {\n+        'others': [\n+           { 'path': '', 'name': 'summaries', 'desc': 'This <em>summary</em> has a link and <code>code</code>.' },\n+        ],\n+    },\n+    {\n+        'others': [\n+            { 'path': 'summaries', 'name': 'Sidebar', 'desc': 'This <code>code</code> will be rendered in a code tag.' },\n+        ],\n+    },\n+    {\n+        'others': [\n+            { 'path': 'summaries', 'name': 'Sidebar2', 'desc': '' },\n+        ],\n+    },\n+];"}, {"sha": "beb91e286b61080b127cbcefb420fdb632e82ea7", "filename": "src/test/rustdoc-js/summaries.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Ftest%2Frustdoc-js%2Fsummaries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Ftest%2Frustdoc-js%2Fsummaries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fsummaries.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -0,0 +1,18 @@\n+#![crate_type = \"lib\"]\n+#![crate_name = \"summaries\"]\n+\n+//! This *summary* has a [link] and `code`.\n+//!\n+//! This is the second paragraph.\n+//!\n+//! [link]: https://example.com\n+\n+/// This `code` will be rendered in a code tag.\n+///\n+/// This text should not be rendered.\n+pub struct Sidebar;\n+\n+/// ```text\n+/// this block should not be rendered\n+/// ```\n+pub struct Sidebar2;"}, {"sha": "d289797f1465201ee71bcb16b13eec01c2771c92", "filename": "src/test/rustdoc/intra-doc/raw-ident-self.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Ftest%2Frustdoc%2Fintra-doc%2Fraw-ident-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Ftest%2Frustdoc%2Fintra-doc%2Fraw-ident-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fraw-ident-self.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -0,0 +1,13 @@\n+#![deny(broken_intra_doc_links)]\n+pub mod r#impl {\n+    pub struct S;\n+\n+    impl S {\n+        /// See [Self::b].\n+        // @has raw_ident_self/impl/struct.S.html\n+        // @has - '//a[@href=\"../../raw_ident_self/impl/struct.S.html#method.b\"]' 'Self::b'\n+        pub fn a() {}\n+\n+        pub fn b() {}\n+    }\n+}"}, {"sha": "b843e28e7b0d3a9e7ccd1c06e659618eeed01eb4", "filename": "src/test/rustdoc/markdown-summaries.rs", "status": "renamed", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Ftest%2Frustdoc%2Fmarkdown-summaries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Ftest%2Frustdoc%2Fmarkdown-summaries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmarkdown-summaries.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -1,21 +1,22 @@\n #![crate_type = \"lib\"]\n #![crate_name = \"summaries\"]\n \n-//! This summary has a [link] and `code`.\n+//! This *summary* has a [link] and `code`.\n //!\n //! This is the second paragraph.\n //!\n //! [link]: https://example.com\n \n-// @has search-index.js 'This summary has a link and `code`.'\n+// @has search-index.js 'This <em>summary</em> has a link and <code>code</code>.'\n // @!has - 'second paragraph'\n \n-/// This `code` should be in backticks.\n+/// This `code` will be rendered in a code tag.\n ///\n /// This text should not be rendered.\n pub struct Sidebar;\n \n-// @has summaries/sidebar-items.js 'This `code` should be in backticks.'\n+// @has search-index.js 'This <code>code</code> will be rendered in a code tag.'\n+// @has summaries/sidebar-items.js 'This `code` will be rendered in a code tag.'\n // @!has - 'text should not be rendered'\n \n /// ```text", "previous_filename": "src/test/rustdoc/plain-text-summaries.rs"}, {"sha": "053712a4b4ee647d8d152bce6edc8483d2efa368", "filename": "src/test/ui-fulldeps/internal-lints/existing_doc_keyword.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fexisting_doc_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fexisting_doc_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fexisting_doc_keyword.rs?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -0,0 +1,11 @@\n+// compile-flags: -Z unstable-options\n+\n+#![feature(rustc_private)]\n+#![feature(doc_keyword)]\n+\n+#![crate_type = \"lib\"]\n+\n+#![deny(rustc::existing_doc_keyword)]\n+\n+#[doc(keyword = \"tadam\")] //~ ERROR\n+mod tadam {}"}, {"sha": "bac44f338b74c04fc2a575d02253a544911b6913", "filename": "src/test/ui-fulldeps/internal-lints/existing_doc_keyword.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fexisting_doc_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd18ca749801a19d85bfb424ae12011a8ff894/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fexisting_doc_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fexisting_doc_keyword.stderr?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -0,0 +1,15 @@\n+error: Found non-existing keyword `tadam` used in `#[doc(keyword = \"...\")]`\n+  --> $DIR/existing_doc_keyword.rs:10:1\n+   |\n+LL | #[doc(keyword = \"tadam\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/existing_doc_keyword.rs:8:9\n+   |\n+LL | #![deny(rustc::existing_doc_keyword)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: only existing keywords are allowed in core/std\n+\n+error: aborting due to previous error\n+"}, {"sha": "63d0fe43449adcb316d34d98a982b597faca4178", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=e9dd18ca749801a19d85bfb424ae12011a8ff894", "patch": "@@ -1 +1 @@\n-Subproject commit bfca1cd22bf514d5f2b6c1089b0ded0ba7dfaa6e\n+Subproject commit 63d0fe43449adcb316d34d98a982b597faca4178"}]}