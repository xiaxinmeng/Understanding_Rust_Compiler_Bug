{"sha": "4f52ab52c19154f63f09d9f3d066af61264b1600", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNTJhYjUyYzE5MTU0ZjYzZjA5ZDlmM2QwNjZhZjYxMjY0YjE2MDA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-03T22:51:21Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-03T22:56:00Z"}, "message": "Remove everything to do with rustboot from makefiles.", "tree": {"sha": "ea13b0413497b12c7f2dc56e2884133df56157c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea13b0413497b12c7f2dc56e2884133df56157c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f52ab52c19154f63f09d9f3d066af61264b1600", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f52ab52c19154f63f09d9f3d066af61264b1600", "html_url": "https://github.com/rust-lang/rust/commit/4f52ab52c19154f63f09d9f3d066af61264b1600", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f52ab52c19154f63f09d9f3d066af61264b1600/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b453c3c72825f70499819d97b879c805cac1e5b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b453c3c72825f70499819d97b879c805cac1e5b1", "html_url": "https://github.com/rust-lang/rust/commit/b453c3c72825f70499819d97b879c805cac1e5b1"}], "stats": {"total": 184, "additions": 44, "deletions": 140}, "files": [{"sha": "676b4cfb7a0159ddeea2113c638b8648b0c0a368", "filename": "Makefile.in", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4f52ab52c19154f63f09d9f3d066af61264b1600/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/4f52ab52c19154f63f09d9f3d066af61264b1600/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=4f52ab52c19154f63f09d9f3d066af61264b1600", "patch": "@@ -11,8 +11,6 @@ endif\n \n CFG_INFO := $(info cfg: building on $(CFG_OSTYPE) $(CFG_CPUTYPE))\n \n-CFG_BOOT_FLAGS := $(BOOT_FLAGS)\n-\n ifdef CFG_DISABLE_OPTIMIZE\n   $(info cfg: disabling rustc optimization (CFG_DISABLE_OPTIMIZE))\n   CFG_RUSTC_FLAGS :=\n@@ -128,7 +126,6 @@ COMPILER_INPUTS := $(wildcard $(addprefix $(S)src/comp/, \\\n ######################################################################\n \n LREQ := rt/$(CFG_RUNTIME) rustllvm/$(CFG_RUSTLLVM)\n-BREQ := boot/rustboot$(X) stage0/$(CFG_STDLIB)\n SREQ0 := stage0/rustc$(X) $(LREQ) stage1/glue.o stage1/$(CFG_STDLIB)\n SREQ1 := stage1/rustc$(X) $(LREQ) stage2/glue.o stage2/$(CFG_STDLIB)\n SREQ2 := stage2/rustc$(X) $(LREQ) stage3/glue.o stage3/$(CFG_STDLIB)\n@@ -145,8 +142,7 @@ export CFG_SRC_DIR\n # Single-target rules\n ######################################################################\n \n-all: boot/rustboot$(X)          \\\n-     rt/$(CFG_RUNTIME)          \\\n+all: rt/$(CFG_RUNTIME)          \\\n      rustllvm/$(CFG_RUSTLLVM)   \\\n      stage0/$(CFG_STDLIB)       \\\n      stage0/rustc$(X)           \\\n@@ -157,10 +153,10 @@ all: boot/rustboot$(X)          \\\n      stage1/rustc$(X)           \\\n      stage2/$(CFG_STDLIB)       \\\n      stage2/glue.o              \\\n-     stage2/rustc$(X)\n-#     stage3/$(CFG_STDLIB)       \\\n-#     stage3/glue.o              \\\n-#     stage3/rustc$(X)           \\\n+     stage2/rustc$(X)           \\\n+     stage3/$(CFG_STDLIB)       \\\n+     stage3/glue.o              \\\n+     stage3/rustc$(X)\n \n \n ######################################################################\n@@ -176,10 +172,10 @@ config.mk: $(S)configure $(S)Makefile.in\n # Additional makefiles\n ######################################################################\n \n-include $(CFG_SRC_DIR)/mk/boot.mk\n include $(CFG_SRC_DIR)/mk/stage0.mk\n include $(CFG_SRC_DIR)/mk/stage1.mk\n include $(CFG_SRC_DIR)/mk/stage2.mk\n+include $(CFG_SRC_DIR)/mk/stage3.mk\n include $(CFG_SRC_DIR)/mk/rt.mk\n include $(CFG_SRC_DIR)/mk/rustllvm.mk\n include $(CFG_SRC_DIR)/mk/docs.mk"}, {"sha": "1eacbac1652e4e51e6d58209522480ecc1b1df41", "filename": "mk/autodep.mk", "status": "modified", "additions": 2, "deletions": 52, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4f52ab52c19154f63f09d9f3d066af61264b1600/mk%2Fautodep.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4f52ab52c19154f63f09d9f3d066af61264b1600/mk%2Fautodep.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fautodep.mk?ref=4f52ab52c19154f63f09d9f3d066af61264b1600", "patch": "@@ -2,7 +2,6 @@\n # Auto-dependency\n ######################################################################\n \n-ML_DEPFILES := $(BOOT_MLS:%.ml=%.d)\n C_DEPFILES := $(RUNTIME_CS:%.cpp=%.d) $(RUSTLLVM_LIB_CS:%.cpp=%.d) \\\n               $(RUSTLLVM_OBJS_CS:%.cpp=%.d)\n \n@@ -24,57 +23,8 @@ rustllvm/%.d: rustllvm/%.cpp $(MKFILES)\n \t$(Q)rm -f $@.tmp.bak\n \t$(Q)mv $@.tmp $@\n \n-%.d: %.ml $(MKFILES)\n-\t@$(call E, dep: $@)\n-\t$(Q)ocamldep$(OPT) -slash $(BOOT_ML_DEP_INCS) $< >$@.tmp\n-\t$(Q)$(CFG_PATH_MUNGE) $@.tmp\n-\t$(Q)rm -f $@.tmp.bak\n-\t$(Q)perl -i.bak -pe \"s@$(S)src/@@go\" $@.tmp\n-\t$(Q)rm -f $@.tmp.bak\n-\t$(Q)mv $@.tmp $@\n-\n-%.d: %.mli $(MKFILES)\n-\t@$(call E, dep: $@)\n-\t$(Q)ocamldep$(OPT) -slash $(BOOT_ML_DEP_INCS) $< >$@.tmp\n-\t$(Q)$(CFG_PATH_MUNGE) $@.tmp\n-\t$(Q)rm -f $@.tmp.bak\n-\t$(Q)perl -i.bak -pe \"s@$(S)src/@@go\" $@.tmp\n-\t$(Q)rm -f $@.tmp.bak\n-\t$(Q)mv $@.tmp $@\n-\n ifneq ($(MAKECMDGOALS),clean)\n--include $(ML_DEPFILES) $(C_DEPFILES)\n-endif\n-\n-RUSTBOOT_PROBE := $(wildcard boot/rustboot$(X))\n-\n-ifneq ($(RUSTBOOT_PROBE),)\n-CFG_INFO := $(info cfg: using built boot/rustboot$(X) for rust deps)\n-CRATE_DEPFILES := $(subst $(S)src/,,$(ALL_TEST_CRATES:%.rc=%.d)) \\\n-                  boot/$(CFG_STDLIB).d \\\n-                  stage0/rustc$(X).d \\\n-                  stage0/$(CFG_STDLIB).d\n-\n-boot/$(CFG_STDLIB).d: $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n-                      $(MKFILES) boot/rustboot$(X)\n-\t@$(call E, dep: $@)\n-\t$(BOOT) -o $(patsubst %.d,%$(X),$@) -shared -rdeps $< >$@.tmp\n-\t$(Q)$(CFG_PATH_MUNGE) $@.tmp\n-\t$(Q)rm -f $@.tmp.bak\n-\t$(Q)mv $@.tmp $@\n-\n-stage0/rustc$(X).d: $(COMPILER_CRATE) $(COMPILER_INPUTS) \\\n-                    $(STDLIB_CRATE) $(MKFILES) boot/rustboot$(X)\n-\t@$(call E, dep: $@)\n-\t$(Q)touch $@\n-\n-%.d: %.rc $(MKFILES)\n-\t@$(call E, dep: $@)\n-\t$(Q)touch $@\n-\n-ifneq ($(MAKECMDGOALS),clean)\n--include $(CRATE_DEPFILES)\n-endif\n+-include $(C_DEPFILES)\n endif\n \n-depend: boot/rustboot$(X) $(CRATE_DEPFILES) $(ML_DEPFILES) $(C_DEPFILES)\n+depend: $(C_DEPFILES)"}, {"sha": "938bc79eb3c4582e6854cd0ee15f74babaf577b2", "filename": "mk/clean.mk", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4f52ab52c19154f63f09d9f3d066af61264b1600/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4f52ab52c19154f63f09d9f3d066af61264b1600/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=4f52ab52c19154f63f09d9f3d066af61264b1600", "patch": "@@ -23,20 +23,17 @@ clean:\n \t$(Q)rm -f $(C_DEPFILES:%.d=%.d.tmp)\n \t$(Q)rm -f $(CRATE_DEPFILES:%.d=%.d.tmp)\n \t$(Q)rm -f $(GENERATED)\n-\t$(Q)rm -f boot/rustboot$(X) boot/$(CFG_STDLIB)\n \t$(Q)rm -f stage0/rustc$(X) stage0/$(CFG_STDLIB)\n \t$(Q)rm -f stage1/rustc$(X) stage1/$(CFG_STDLIB) stage1/glue*\n \t$(Q)rm -f stage2/rustc$(X) stage2/$(CFG_STDLIB) stage2/glue*\n \t$(Q)rm -f stage3/rustc$(X) stage3/$(CFG_STDLIB) stage3/glue*\n \t$(Q)rm -f rustllvm/$(CFG_RUSTLLVM) rustllvm/rustllvmbits.a\n \t$(Q)rm -f rt/$(CFG_RUNTIME)\n \t$(Q)rm -Rf $(PKG_NAME)-*.tar.gz dist\n-\t$(Q)rm -f $(foreach ext,cmx cmi cmo cma bc o a d exe,\\\n-                        $(wildcard boot/*/*.$(ext) boot/*/*/*.$(ext)))\n \t$(Q)rm -f $(foreach ext,o a d bc s exe,$(wildcard stage*/*.$(ext)))\n-\t$(Q)rm -Rf $(foreach ext,out out.tmp                               \\\n-                             boot$(X) stage0$(X) stage1$(X) stage2$(X) \\\n-                             bc o s exe dSYM,                          \\\n+\t$(Q)rm -Rf $(foreach ext,out out.tmp                      \\\n+                             stage0$(X) stage1$(X) stage2$(X) \\\n+                             bc o s exe dSYM,                 \\\n                         $(wildcard test/*/*.$(ext) test/bench/*/*.$(ext)))\n \t$(Q)rm -Rf $(foreach ext, \\\n                  aux cp fn ky log pdf html pg toc tp vr cps, \\"}, {"sha": "810d5ce7031a98e683864daff0c76ed379eb6f41", "filename": "mk/dist.mk", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f52ab52c19154f63f09d9f3d066af61264b1600/mk%2Fdist.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4f52ab52c19154f63f09d9f3d066af61264b1600/mk%2Fdist.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdist.mk?ref=4f52ab52c19154f63f09d9f3d066af61264b1600", "patch": "@@ -18,14 +18,12 @@ PKG_FILES = \\\n     $(S)LICENSE.txt $(S)README                 \\\n     $(S)configure $(S)Makefile.in              \\\n     $(addprefix $(S)src/,                      \\\n-      README boot/README comp/README           \\\n-      $(filter-out $(GENERATED), $(BOOT_MLS))  \\\n+      README comp/README                       \\\n       $(RUNTIME_CS) $(RUNTIME_HDR)             \\\n       $(RUSTLLVM_LIB_CS) $(RUSTLLVM_OBJS_CS)   \\\n       $(RUSTLLVM_HDR)                          \\\n       $(PKG_3RDPARTY))                         \\\n     $(GENERATED)                               \\\n-    $(S)src/boot/fe/lexer.ml                   \\\n     $(COMPILER_INPUTS)                         \\\n     $(STDLIB_INPUTS)                           \\\n     $(ALL_TEST_INPUTS)                         \\"}, {"sha": "493f9e0058585f3e092e982c06a4ada85a9feea3", "filename": "mk/stage0.mk", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4f52ab52c19154f63f09d9f3d066af61264b1600/mk%2Fstage0.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4f52ab52c19154f63f09d9f3d066af61264b1600/mk%2Fstage0.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage0.mk?ref=4f52ab52c19154f63f09d9f3d066af61264b1600", "patch": "@@ -1,9 +1,12 @@\n stage0/rustc$(X): $(S)src/snapshots.txt $(S)src/etc/get-snapshot.py $(MKFILES)\n \t@$(call E, fetch: $@)\n-\t$(S)src/etc/get-snapshot.py\n+\t$(Q)$(S)src/etc/get-snapshot.py\n+\t$(Q)touch $@\n \n # These two will be made in the process of making rustc above.\n \n stage0/glue.o: stage0/rustc$(X)\n+\t$(Q)touch $@\n \n stage0/$(CFG_STDLIB): stage0/rustc$(X)\n+\t$(Q)touch $@"}, {"sha": "c25715abc4face73214846f3baa0bb8fefec087f", "filename": "mk/tests.mk", "status": "modified", "additions": 28, "deletions": 68, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/4f52ab52c19154f63f09d9f3d066af61264b1600/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4f52ab52c19154f63f09d9f3d066af61264b1600/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=4f52ab52c19154f63f09d9f3d066af61264b1600", "patch": "@@ -6,19 +6,16 @@ ALL_TEST_INPUTS = $(wildcard $(S)src/test/*/*.rs   \\\n                               $(S)src/test/*/*/*.rs \\\n                               $(S)src/test/*/*.rc)\n \n-TEST_XFAILS_BOOT = $(shell grep -l xfail-boot $(ALL_TEST_INPUTS))\n TEST_XFAILS_STAGE0 = $(shell grep -l xfail-stage0 $(ALL_TEST_INPUTS))\n TEST_XFAILS_STAGE1 = $(shell grep -l xfail-stage1 $(ALL_TEST_INPUTS))\n TEST_XFAILS_STAGE2 = $(shell grep -l xfail-stage2 $(ALL_TEST_INPUTS))\n \n ifdef MINGW_CROSS\n-TEST_XFAILS_BOOT += $(S)src/test/run-pass/native-mod.rc\n TEST_XFAILS_STAGE0 += $(S)src/test/run-pass/native-mod.rc\n TEST_XFAILS_STAGE1 += $(S)src/test/run-pass/native-mod.rc\n TEST_XFAILS_STAGE2 += $(S)src/test/run-pass/native-mod.rc\n endif\n ifdef CFG_WINDOWSY\n-TEST_XFAILS_BOOT += $(S)src/test/run-pass/native-mod.rc\n TEST_XFAILS_STAGE0 += $(S)src/test/run-pass/native-mod.rc\n TEST_XFAILS_STAGE1 += $(S)src/test/run-pass/native-mod.rc\n TEST_XFAILS_STAGE2 += $(S)src/test/run-pass/native-mod.rc\n@@ -34,28 +31,21 @@ CFAIL_RC = $(wildcard $(S)src/test/compile-fail/*.rc)\n CFAIL_RS = $(wildcard $(S)src/test/compile-fail/*.rs)\n \n ifdef CHECK_XFAILS\n-TEST_RPASS_CRATES_BOOT = $(filter $(TEST_XFAILS_BOOT), $(RPASS_RC))\n TEST_RPASS_CRATES_STAGE0 = $(filter $(TEST_XFAILS_STAGE0), $(RPASS_RC))\n TEST_RPASS_CRATES_STAGE1 = $(filter $(TEST_XFAILS_STAGE1), $(RPASS_RC))\n TEST_RPASS_CRATES_STAGE2 = $(filter $(TEST_XFAILS_STAGE2), $(RPASS_RC))\n-TEST_RPASS_SOURCES_BOOT = $(filter $(TEST_XFAILS_BOOT), $(RPASS_RS))\n TEST_RPASS_SOURCES_STAGE0 = $(filter $(TEST_XFAILS_STAGE0), $(RPASS_RS))\n TEST_RPASS_SOURCES_STAGE1 = $(filter $(TEST_XFAILS_STAGE1), $(RPASS_RS))\n TEST_RPASS_SOURCES_STAGE2 = $(filter $(TEST_XFAILS_STAGE2), $(RPASS_RS))\n else\n-TEST_RPASS_CRATES_BOOT = $(filter-out $(TEST_XFAILS_BOOT), $(RPASS_RC))\n TEST_RPASS_CRATES_STAGE0 = $(filter-out $(TEST_XFAILS_STAGE0), $(RPASS_RC))\n TEST_RPASS_CRATES_STAGE1 = $(filter-out $(TEST_XFAILS_STAGE1), $(RPASS_RC))\n TEST_RPASS_CRATES_STAGE1 = $(filter-out $(TEST_XFAILS_STAGE2), $(RPASS_RC))\n-TEST_RPASS_SOURCES_BOOT = $(filter-out $(TEST_XFAILS_BOOT), $(RPASS_RS))\n TEST_RPASS_SOURCES_STAGE0 = $(filter-out $(TEST_XFAILS_STAGE0), $(RPASS_RS))\n TEST_RPASS_SOURCES_STAGE1 = $(filter-out $(TEST_XFAILS_STAGE1), $(RPASS_RS))\n TEST_RPASS_SOURCES_STAGE2 = $(filter-out $(TEST_XFAILS_STAGE2), $(RPASS_RS))\n endif\n \n-TEST_RPASS_EXES_BOOT = \\\n-  $(subst $(S)src/,,$(TEST_RPASS_CRATES_BOOT:.rc=.boot$(X))) \\\n-  $(subst $(S)src/,,$(TEST_RPASS_SOURCES_BOOT:.rs=.boot$(X)))\n TEST_RPASS_EXES_STAGE0 = \\\n   $(subst $(S)src/,,$(TEST_RPASS_CRATES_STAGE0:.rc=.stage0$(X))) \\\n   $(subst $(S)src/,,$(TEST_RPASS_SOURCES_STAGE0:.rs=.stage0$(X)))\n@@ -66,17 +56,13 @@ TEST_RPASS_EXES_STAGE2 = \\\n   $(subst $(S)src/,,$(TEST_RPASS_CRATES_STAGE1:.rc=.stage2$(X))) \\\n   $(subst $(S)src/,,$(TEST_RPASS_SOURCES_STAGE1:.rs=.stage2$(X)))\n \n-TEST_RPASS_OUTS_BOOT  = \\\n-  $(TEST_RPASS_EXES_BOOT:.boot$(X)=.boot.out)\n TEST_RPASS_OUTS_STAGE0 = \\\n   $(TEST_RPASS_EXES_STAGE0:.stage0$(X)=.stage0.out)\n TEST_RPASS_OUTS_STAGE1 = \\\n   $(TEST_RPASS_EXES_STAGE1:.stage1$(X)=.stage1.out)\n TEST_RPASS_OUTS_STAGE2 = \\\n   $(TEST_RPASS_EXES_STAGE2:.stage2$(X)=.stage2.out)\n \n-TEST_RPASS_TMPS_BOOT  = \\\n-  $(TEST_RPASS_EXES_BOOT:.boot$(X)=.boot$(X).tmp)\n TEST_RPASS_TMPS_STAGE0 = \\\n   $(TEST_RPASS_EXES_STAGE0:.stage0$(X)=.stage0$(X).tmp)\n TEST_RPASS_TMPS_STAGE1 = \\\n@@ -85,18 +71,13 @@ TEST_RPASS_TMPS_STAGE2 = \\\n   $(TEST_RPASS_EXES_STAGE2:.stage2$(X)=.stage2$(X).tmp)\n \n \n-TEST_RFAIL_CRATES_BOOT = $(filter-out $(TEST_XFAILS_BOOT), $(RFAIL_RC))\n TEST_RFAIL_CRATES_STAGE0 = $(filter-out $(TEST_XFAILS_STAGE0), $(RFAIL_RC))\n TEST_RFAIL_CRATES_STAGE1 = $(filter-out $(TEST_XFAILS_STAGE1), $(RFAIL_RC))\n TEST_RFAIL_CRATES_STAGE2 = $(filter-out $(TEST_XFAILS_STAGE2), $(RFAIL_RC))\n-TEST_RFAIL_SOURCES_BOOT = $(filter-out $(TEST_XFAILS_BOOT), $(RFAIL_RS))\n TEST_RFAIL_SOURCES_STAGE0 = $(filter-out $(TEST_XFAILS_STAGE0), $(RFAIL_RS))\n TEST_RFAIL_SOURCES_STAGE1 = $(filter-out $(TEST_XFAILS_STAGE1), $(RFAIL_RS))\n TEST_RFAIL_SOURCES_STAGE2 = $(filter-out $(TEST_XFAILS_STAGE2), $(RFAIL_RS))\n \n-TEST_RFAIL_EXES_BOOT = \\\n-  $(subst $(S)src/,,$(TEST_RFAIL_CRATES_BOOT:.rc=.boot$(X))) \\\n-  $(subst $(S)src/,,$(TEST_RFAIL_SOURCES_BOOT:.rs=.boot$(X)))\n TEST_RFAIL_EXES_STAGE0 = \\\n   $(subst $(S)src/,,$(TEST_RFAIL_CRATES_STAGE0:.rc=.stage0$(X))) \\\n   $(subst $(S)src/,,$(TEST_RFAIL_SOURCES_STAGE0:.rs=.stage0$(X)))\n@@ -107,36 +88,27 @@ TEST_RFAIL_EXES_STAGE2 = \\\n   $(subst $(S)src/,,$(TEST_RFAIL_CRATES_STAGE2:.rc=.stage2$(X))) \\\n   $(subst $(S)src/,,$(TEST_RFAIL_SOURCES_STAGE2:.rs=.stage2$(X)))\n \n-TEST_RFAIL_OUTS_BOOT  = \\\n-  $(TEST_RFAIL_EXES_BOOT:.boot$(X)=.boot.out)\n TEST_RFAIL_OUTS_STAGE0 = \\\n   $(TEST_RFAIL_EXES_STAGE0:.stage0$(X)=.stage0.out)\n TEST_RFAIL_OUTS_STAGE1 = \\\n   $(TEST_RFAIL_EXES_STAGE0:.stage1$(X)=.stage1.out)\n TEST_RFAIL_OUTS_STAGE2 = \\\n   $(TEST_RFAIL_EXES_STAGE0:.stage2$(X)=.stage2.out)\n \n-TEST_RFAIL_TMPS_BOOT  = \\\n-  $(TEST_RFAIL_EXES_BOOT:.boot$(X)=.boot$(X).tmp)\n TEST_RFAIL_TMPS_STAGE0 = \\\n   $(TEST_RFAIL_EXES_STAGE0:.stage0$(X)=.stage0$(X).tmp)\n TEST_RFAIL_TMPS_STAGE1 = \\\n   $(TEST_RFAIL_EXES_STAGE1:.stage1$(X)=.stage1$(X).tmp)\n TEST_RFAIL_TMPS_STAGE2 = \\\n   $(TEST_RFAIL_EXES_STAGE2:.stage2$(X)=.stage2$(X).tmp)\n \n-TEST_CFAIL_CRATES_BOOT = $(filter-out $(TEST_XFAILS_BOOT), $(CFAIL_RC))\n TEST_CFAIL_CRATES_STAGE0 = $(filter-out $(TEST_XFAILS_STAGE0), $(CFAIL_RC))\n TEST_CFAIL_CRATES_STAGE1 = $(filter-out $(TEST_XFAILS_STAGE1), $(CFAIL_RC))\n TEST_CFAIL_CRATES_STAGE2 = $(filter-out $(TEST_XFAILS_STAGE2), $(CFAIL_RC))\n-TEST_CFAIL_SOURCES_BOOT = $(filter-out $(TEST_XFAILS_BOOT), $(CFAIL_RS))\n TEST_CFAIL_SOURCES_STAGE0 = $(filter-out $(TEST_XFAILS_STAGE0), $(CFAIL_RS))\n TEST_CFAIL_SOURCES_STAGE1 = $(filter-out $(TEST_XFAILS_STAGE1), $(CFAIL_RS))\n TEST_CFAIL_SOURCES_STAGE2 = $(filter-out $(TEST_XFAILS_STAGE2), $(CFAIL_RS))\n \n-TEST_CFAIL_EXES_BOOT = \\\n-  $(subst $(S)src/,,$(TEST_CFAIL_CRATES_BOOT:.rc=.boot$(X))) \\\n-  $(subst $(S)src/,,$(TEST_CFAIL_SOURCES_BOOT:.rs=.boot$(X)))\n TEST_CFAIL_EXES_STAGE0 = \\\n   $(subst $(S)src/,,$(TEST_CFAIL_CRATES_STAGE0:.rc=.stage0$(X))) \\\n   $(subst $(S)src/,,$(TEST_CFAIL_SOURCES_STAGE0:.rs=.stage0$(X)))\n@@ -147,17 +119,13 @@ TEST_CFAIL_EXES_STAGE2 = \\\n   $(subst $(S)src/,,$(TEST_CFAIL_CRATES_STAGE2:.rc=.stage2$(X))) \\\n   $(subst $(S)src/,,$(TEST_CFAIL_SOURCES_STAGE2:.rs=.stage2$(X)))\n \n-TEST_CFAIL_OUTS_BOOT = \\\n-  $(TEST_CFAIL_EXES_BOOT:.boot$(X)=.boot.out)\n TEST_CFAIL_OUTS_STAGE0 = \\\n   $(TEST_CFAIL_EXES_STAGE0:.stage0$(X)=.stage0.out)\n TEST_CFAIL_OUTS_STAGE1 = \\\n   $(TEST_CFAIL_EXES_STAGE1:.stage1$(X)=.stage1.out)\n TEST_CFAIL_OUTS_STAGE2 = \\\n   $(TEST_CFAIL_EXES_STAGE0:.stage2$(X)=.stage2.out)\n \n-TEST_CFAIL_TMPS_BOOT = \\\n-  $(TEST_CFAIL_EXES_BOOT:.boot$(X)=.boot$(X).tmp)\n TEST_CFAIL_TMPS_STAGE0 = \\\n   $(TEST_CFAIL_EXES_STAGE0:.stage0$(X)=.stage0$(X).tmp)\n TEST_CFAIL_TMPS_STAGE1 = \\\n@@ -166,10 +134,7 @@ TEST_CFAIL_TMPS_STAGE0 = \\\n   $(TEST_CFAIL_EXES_STAGE2:.stage2$(X)=.stage2$(X).tmp)\n \n \n-ALL_TEST_CRATES = $(TEST_CFAIL_CRATES_BOOT) \\\n-                   $(TEST_RFAIL_CRATES_BOOT) \\\n-                   $(TEST_RPASS_CRATES_BOOT) \\\n-                   $(TEST_CFAIL_CRATES_STAGE0) \\\n+ALL_TEST_CRATES =  $(TEST_CFAIL_CRATES_STAGE0) \\\n                    $(TEST_RFAIL_CRATES_STAGE0) \\\n                    $(TEST_RPASS_CRATES_STAGE0) \\\n                    $(TEST_CFAIL_CRATES_STAGE1) \\\n@@ -179,10 +144,7 @@ ALL_TEST_CRATES = $(TEST_CFAIL_CRATES_BOOT) \\\n                    $(TEST_RFAIL_CRATES_STAGE2) \\\n                    $(TEST_RPASS_CRATES_STAGE2)\n \n-ALL_TEST_SOURCES = $(TEST_CFAIL_SOURCES_BOOT) \\\n-                    $(TEST_RFAIL_SOURCES_BOOT) \\\n-                    $(TEST_RPASS_SOURCES_BOOT) \\\n-                    $(TEST_CFAIL_SOURCES_STAGE0) \\\n+ALL_TEST_SOURCES =  $(TEST_CFAIL_SOURCES_STAGE0) \\\n                     $(TEST_RFAIL_SOURCES_STAGE0) \\\n                     $(TEST_RPASS_SOURCES_STAGE0) \\\n                     $(TEST_CFAIL_SOURCES_STAGE1) \\\n@@ -197,26 +159,23 @@ ALL_TEST_SOURCES = $(TEST_CFAIL_SOURCES_BOOT) \\\n unexport RUST_LOG\n \n \n-check_nocompile: $(TEST_CFAIL_OUTS_BOOT) \\\n-                 $(TEST_CFAIL_OUTS_STAGE0)\n+check_nocompile: $(TEST_CFAIL_OUTS_STAGE0) \\\n+                 $(TEST_CFAIL_OUTS_STAGE1) \\\n+                 $(TEST_CFAIL_OUTS_STAGE2)\n \n check: tidy \\\n-       $(TEST_RPASS_EXES_BOOT) $(TEST_RFAIL_EXES_BOOT) \\\n-       $(TEST_RPASS_OUTS_BOOT) $(TEST_RFAIL_OUTS_BOOT) \\\n-       $(TEST_CFAIL_OUTS_BOOT) \\\n        $(TEST_RPASS_EXES_STAGE0) $(TEST_RFAIL_EXES_STAGE0) \\\n        $(TEST_RPASS_OUTS_STAGE0) $(TEST_RFAIL_OUTS_STAGE0) \\\n-       $(TEST_CFAIL_OUTS_STAGE0)\n-#       $(TEST_RPASS_EXES_STAGE1) $(TEST_RFAIL_EXES_STAGE1) \\\n-#       $(TEST_RPASS_OUTS_STAGE1) $(TEST_RFAIL_OUTS_STAGE1) \\\n-#       $(TEST_CFAIL_OUTS_STAGE1) \\\n-#       $(TEST_RPASS_EXES_STAGE2) $(TEST_RFAIL_EXES_STAGE2) \\\n-#       $(TEST_RPASS_OUTS_STAGE2) $(TEST_RFAIL_OUTS_STAGE2) \\\n-#       $(TEST_CFAIL_OUTS_STAGE2)\n+       $(TEST_CFAIL_OUTS_STAGE0) \\\n+       $(TEST_RPASS_EXES_STAGE1) $(TEST_RFAIL_EXES_STAGE1) \\\n+       $(TEST_RPASS_OUTS_STAGE1) $(TEST_RFAIL_OUTS_STAGE1) \\\n+       $(TEST_CFAIL_OUTS_STAGE1) \\\n+       $(TEST_RPASS_EXES_STAGE2) $(TEST_RFAIL_EXES_STAGE2) \\\n+       $(TEST_RPASS_OUTS_STAGE2) $(TEST_RFAIL_OUTS_STAGE2) \\\n+       $(TEST_CFAIL_OUTS_STAGE2)\n \n \n compile-check: tidy \\\n-       $(TEST_RPASS_EXES_BOOT) $(TEST_RFAIL_EXES_BOOT) \\\n        $(TEST_RPASS_EXES_STAGE0) $(TEST_RFAIL_EXES_STAGE0) \\\n        $(TEST_RPASS_EXES_STAGE1) $(TEST_RFAIL_EXES_STAGE1) \\\n        $(TEST_RPASS_EXES_STAGE2) $(TEST_RFAIL_EXES_STAGE2)\n@@ -254,15 +213,6 @@ compile-check: tidy \\\n \t-$(Q)$(CFG_DSYMUTIL) $@\n \n \n-\n-%.boot$(X): %.rs $(BREQ)\n-\t@$(call E, compile [boot]: $@)\n-\t$(BOOT) -o $@ $<\n-\n-%.boot$(X): %.rc $(BREQ)\n-\t@$(call E, compile [boot]: $@)\n-\t$(BOOT) -o $@ $<\n-\n %.stage0.o: %.rc $(SREQ0)\n \t@$(call E, compile [stage0]: $@)\n \t$(STAGE0) -c -o $@ $<\n@@ -271,6 +221,7 @@ compile-check: tidy \\\n \t@$(call E, compile [stage0]: $@)\n \t$(STAGE0) -c -o $@ $<\n \n+\n %.stage1.o: %.rc $(SREQ1)\n \t@$(call E, compile [stage1]: $@)\n \t$(STAGE1) -c -o $@ $<\n@@ -279,6 +230,7 @@ compile-check: tidy \\\n \t@$(call E, compile [stage1]: $@)\n \t$(STAGE1) -c -o $@ $<\n \n+\n %.stage2.o: %.rc $(SREQ2)\n \t@$(call E, compile [stage2]: $@)\n \t$(STAGE2) -c -o $@ $<\n@@ -322,18 +274,26 @@ test/run-fail/%.out.tmp: test/run-fail/%$(X) \\\n       \"$$(grep error-pattern $(S)src/test/run-fail/$(basename $*).rs \\\n         | cut -d : -f 2- | tr -d '\\n\\r')\" $@\n \n-test/compile-fail/%.boot.out.tmp: test/compile-fail/%.rs $(BREQ)\n-\t@$(call E, compile [boot]: $@)\n+test/compile-fail/%.stage0.out.tmp: test/compile-fail/%.rs $(SREQ0)\n+\t@$(call E, compile [stage0]: $@)\n \t$(Q)grep -q error-pattern $<\n \t$(Q)rm -f $@\n-\t$(BOOT) -o $(@:.out=$(X)) $< >$@ 2>&1; test $$? -ne 0\n+\t$(STAGE0) -o $(@:.out=$(X)) $< >$@ 2>&1; test $$? -ne 0\n \t$(Q)grep --text --quiet \\\n       \"$$(grep error-pattern $< | cut -d : -f 2- | tr -d '\\n\\r')\" $@\n \n-test/compile-fail/%.stage0.out.tmp: test/compile-fail/%.rs $(SREQ0)\n-\t@$(call E, compile [stage0]: $@)\n+test/compile-fail/%.stage1.out.tmp: test/compile-fail/%.rs $(SREQ1)\n+\t@$(call E, compile [stage1]: $@)\n \t$(Q)grep -q error-pattern $<\n \t$(Q)rm -f $@\n-\t$(STAGE0) -o $(@:.out=$(X)) $< >$@ 2>&1; test $$? -ne 0\n+\t$(STAGE1) -o $(@:.out=$(X)) $< >$@ 2>&1; test $$? -ne 0\n+\t$(Q)grep --text --quiet \\\n+      \"$$(grep error-pattern $< | cut -d : -f 2- | tr -d '\\n\\r')\" $@\n+\n+test/compile-fail/%.stage2.out.tmp: test/compile-fail/%.rs $(SREQ2)\n+\t@$(call E, compile [stage2]: $@)\n+\t$(Q)grep -q error-pattern $<\n+\t$(Q)rm -f $@\n+\t$(STAGE2) -o $(@:.out=$(X)) $< >$@ 2>&1; test $$? -ne 0\n \t$(Q)grep --text --quiet \\\n       \"$$(grep error-pattern $< | cut -d : -f 2- | tr -d '\\n\\r')\" $@"}]}