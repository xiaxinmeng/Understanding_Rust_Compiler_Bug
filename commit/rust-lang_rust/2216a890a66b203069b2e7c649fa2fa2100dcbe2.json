{"sha": "2216a890a66b203069b2e7c649fa2fa2100dcbe2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMTZhODkwYTY2YjIwMzA2OWIyZTdjNjQ5ZmEyZmEyMTAwZGNiZTI=", "commit": {"author": {"name": "Mrmaxmeier", "email": "Mrmaxmeier@gmail.com", "date": "2017-02-02T16:53:28Z"}, "committer": {"name": "Mrmaxmeier", "email": "Mrmaxmeier@gmail.com", "date": "2017-02-03T13:16:07Z"}, "message": "TyCtxt::map is now called TyCtxt::hir", "tree": {"sha": "1ed1ec4d1a40674d7465389d8a0da5c5b39c0fc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ed1ec4d1a40674d7465389d8a0da5c5b39c0fc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2216a890a66b203069b2e7c649fa2fa2100dcbe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2216a890a66b203069b2e7c649fa2fa2100dcbe2", "html_url": "https://github.com/rust-lang/rust/commit/2216a890a66b203069b2e7c649fa2fa2100dcbe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2216a890a66b203069b2e7c649fa2fa2100dcbe2/comments", "author": {"login": "Mrmaxmeier", "id": 3913977, "node_id": "MDQ6VXNlcjM5MTM5Nzc=", "avatar_url": "https://avatars.githubusercontent.com/u/3913977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mrmaxmeier", "html_url": "https://github.com/Mrmaxmeier", "followers_url": "https://api.github.com/users/Mrmaxmeier/followers", "following_url": "https://api.github.com/users/Mrmaxmeier/following{/other_user}", "gists_url": "https://api.github.com/users/Mrmaxmeier/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mrmaxmeier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mrmaxmeier/subscriptions", "organizations_url": "https://api.github.com/users/Mrmaxmeier/orgs", "repos_url": "https://api.github.com/users/Mrmaxmeier/repos", "events_url": "https://api.github.com/users/Mrmaxmeier/events{/privacy}", "received_events_url": "https://api.github.com/users/Mrmaxmeier/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mrmaxmeier", "id": 3913977, "node_id": "MDQ6VXNlcjM5MTM5Nzc=", "avatar_url": "https://avatars.githubusercontent.com/u/3913977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mrmaxmeier", "html_url": "https://github.com/Mrmaxmeier", "followers_url": "https://api.github.com/users/Mrmaxmeier/followers", "following_url": "https://api.github.com/users/Mrmaxmeier/following{/other_user}", "gists_url": "https://api.github.com/users/Mrmaxmeier/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mrmaxmeier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mrmaxmeier/subscriptions", "organizations_url": "https://api.github.com/users/Mrmaxmeier/orgs", "repos_url": "https://api.github.com/users/Mrmaxmeier/repos", "events_url": "https://api.github.com/users/Mrmaxmeier/events{/privacy}", "received_events_url": "https://api.github.com/users/Mrmaxmeier/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1be0d64573a5fd02d238a5ad16444f79ce745a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1be0d64573a5fd02d238a5ad16444f79ce745a5", "html_url": "https://github.com/rust-lang/rust/commit/b1be0d64573a5fd02d238a5ad16444f79ce745a5"}], "stats": {"total": 154, "additions": 77, "deletions": 77}, "files": [{"sha": "71ebb996fc579e86c68f3f91312cda6a66135083", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -143,12 +143,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                                             return; // useless if the trait doesn't exist\n                                         };\n                                         // check that we are not inside an `impl AssignOp` of this exact operation\n-                                        let parent_fn = cx.tcx.map.get_parent(e.id);\n-                                        let parent_impl = cx.tcx.map.get_parent(parent_fn);\n+                                        let parent_fn = cx.tcx.hir.get_parent(e.id);\n+                                        let parent_impl = cx.tcx.hir.get_parent(parent_fn);\n                                         // the crate node is the only one that is not in the map\n                                         if_let_chain!{[\n                                             parent_impl != ast::CRATE_NODE_ID,\n-                                            let hir::map::Node::NodeItem(item) = cx.tcx.map.get(parent_impl),\n+                                            let hir::map::Node::NodeItem(item) = cx.tcx.hir.get(parent_impl),\n                                             let hir::Item_::ItemImpl(_, _, _, Some(ref trait_ref), _, _) = item.node,\n                                             trait_ref.path.def.def_id() == trait_id\n                                         ], { return; }}"}, {"sha": "bf6f165cdd800137ed01d4516b0175ce0bf8d80a", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -158,15 +158,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n \n fn is_relevant_item(tcx: ty::TyCtxt, item: &Item) -> bool {\n     if let ItemFn(_, _, _, _, _, eid) = item.node {\n-        is_relevant_expr(tcx, tcx.body_tables(eid), &tcx.map.body(eid).value)\n+        is_relevant_expr(tcx, tcx.body_tables(eid), &tcx.hir.body(eid).value)\n     } else {\n         false\n     }\n }\n \n fn is_relevant_impl(tcx: ty::TyCtxt, item: &ImplItem) -> bool {\n     match item.node {\n-        ImplItemKind::Method(_, eid) => is_relevant_expr(tcx, tcx.body_tables(eid), &tcx.map.body(eid).value),\n+        ImplItemKind::Method(_, eid) => is_relevant_expr(tcx, tcx.body_tables(eid), &tcx.hir.body(eid).value),\n         _ => false,\n     }\n }\n@@ -175,7 +175,7 @@ fn is_relevant_trait(tcx: ty::TyCtxt, item: &TraitItem) -> bool {\n     match item.node {\n         TraitItemKind::Method(_, TraitMethod::Required(_)) => true,\n         TraitItemKind::Method(_, TraitMethod::Provided(eid)) => {\n-            is_relevant_expr(tcx, tcx.body_tables(eid), &tcx.map.body(eid).value)\n+            is_relevant_expr(tcx, tcx.body_tables(eid), &tcx.hir.body(eid).value)\n         },\n         _ => false,\n     }"}, {"sha": "5fd8020e1a8805ec4938962c0f11f0e147f57d23", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -57,7 +57,7 @@ struct ExVisitor<'a, 'tcx: 'a> {\n impl<'a, 'tcx: 'a> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr) {\n         if let ExprClosure(_, _, eid, _) = expr.node {\n-            let body = self.cx.tcx.map.body(eid);\n+            let body = self.cx.tcx.hir.body(eid);\n             let ex = &body.value;\n             if matches!(ex.node, ExprBlock(_)) {\n                 self.found_block = Some(ex);\n@@ -67,7 +67,7 @@ impl<'a, 'tcx: 'a> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n         walk_expr(self, expr);\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::All(&self.cx.tcx.map)\n+        NestedVisitorMap::All(&self.cx.tcx.hir)\n     }\n }\n "}, {"sha": "f6c9619dcf0a92c1b796175d2fb43f5908cabaf2", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -263,7 +263,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n             ExprRepeat(ref value, number_id) => {\n                 if let Some(lcx) = self.lcx {\n                     self.binop_apply(value,\n-                                     &lcx.tcx.map.body(number_id).value,\n+                                     &lcx.tcx.hir.body(number_id).value,\n                                      |v, n| Some(Constant::Repeat(Box::new(v), n.as_u64() as usize)))\n                 } else {\n                     None"}, {"sha": "9d6056de3434712f181ce751762c19cf151fb826", "filename": "clippy_lints/src/cyclomatic_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -99,7 +99,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CyclomaticComplexity {\n         span: Span,\n         node_id: NodeId\n     ) {\n-        let def_id = cx.tcx.map.local_def_id(node_id);\n+        let def_id = cx.tcx.hir.local_def_id(node_id);\n         if !cx.tcx.has_attr(def_id, \"test\") {\n             self.check(cx, &body.value, span);\n         }"}, {"sha": "b2a8d26000d14f2abe87f887a1bfb1de8072bc5a", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -73,7 +73,7 @@ impl LintPass for Derive {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Derive {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n         if let ItemImpl(_, _, _, Some(ref trait_ref), _, _) = item.node {\n-            let ty = cx.tcx.item_type(cx.tcx.map.local_def_id(item.id));\n+            let ty = cx.tcx.item_type(cx.tcx.hir.local_def_id(item.id));\n             let is_automatically_derived = is_automatically_derived(&*item.attrs);\n \n             check_hash_peq(cx, item.span, trait_ref, ty, is_automatically_derived);\n@@ -122,9 +122,9 @@ fn check_hash_peq<'a, 'tcx>(\n                     cx, DERIVE_HASH_XOR_EQ, span,\n                     mess,\n                     |db| {\n-                    if let Some(node_id) = cx.tcx.map.as_local_node_id(impl_id) {\n+                    if let Some(node_id) = cx.tcx.hir.as_local_node_id(impl_id) {\n                         db.span_note(\n-                            cx.tcx.map.span(node_id),\n+                            cx.tcx.hir.span(node_id),\n                             \"`PartialEq` implemented here\"\n                         );\n                     }"}, {"sha": "8c8165592b52239785d6225759ca6e1fc9008a66", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -148,6 +148,6 @@ impl<'a, 'tcx, 'b> Visitor<'tcx> for InsertVisitor<'a, 'tcx, 'b> {\n         }\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::All(&self.cx.tcx.map)\n+        NestedVisitorMap::All(&self.cx.tcx.hir)\n     }\n }"}, {"sha": "e924ae79df9fe66cd163bfb8bec5f50eb80a76a3", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -45,7 +45,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnportableVariant {\n                 if let Some(body_id) = variant.disr_expr {\n                     use rustc_const_eval::*;\n                     let constcx = ConstContext::new(cx.tcx, body_id);\n-                    let bad = match constcx.eval(&cx.tcx.map.body(body_id).value, EvalHint::ExprTypeChecked) {\n+                    let bad = match constcx.eval(&cx.tcx.hir.body(body_id).value, EvalHint::ExprTypeChecked) {\n                         Ok(ConstVal::Integral(Usize(Us64(i)))) => i as u32 as u64 != i,\n                         Ok(ConstVal::Integral(Isize(Is64(i)))) => i as i32 as i64 != i,\n                         _ => false,"}, {"sha": "2a53cab8cd2e394a03c92bdcda5e65ae4b3348a2", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -89,7 +89,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         for node in v.set {\n             span_lint(cx,\n                       BOXED_LOCAL,\n-                      cx.tcx.map.span(node),\n+                      cx.tcx.hir.span(node),\n                       \"local variable doesn't need to be boxed here\");\n         }\n     }\n@@ -108,7 +108,7 @@ impl<'a, 'tcx: 'a> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n     }\n     fn matched_pat(&mut self, _: &Pat, _: cmt<'tcx>, _: MatchMode) {}\n     fn consume_pat(&mut self, consume_pat: &Pat, cmt: cmt<'tcx>, _: ConsumeMode) {\n-        let map = &self.tcx.map;\n+        let map = &self.tcx.hir;\n         if map.is_argument(consume_pat.id) {\n             // Skip closure arguments\n             if let Some(NodeExpr(..)) = map.find(map.get_parent_node(consume_pat.id)) {\n@@ -180,7 +180,7 @@ impl<'a, 'tcx: 'a> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n                         self.tables\n                             .adjustments\n                             .get(&self.tcx\n-                                .map\n+                                .hir\n                                 .get_parent_node(borrow_id))\n                             .map(|a| &a.kind) {\n                         if autoderefs <= 1 {"}, {"sha": "40678e324b0a3d26229876237c7d99b6cc56abc7", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -49,7 +49,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EtaPass {\n \n fn check_closure(cx: &LateContext, expr: &Expr) {\n     if let ExprClosure(_, ref decl, eid, _) = expr.node {\n-        let body = cx.tcx.map.body(eid);\n+        let body = cx.tcx.hir.body(eid);\n         let ex = &body.value;\n         if let ExprCall(ref caller, ref args) = ex.node {\n             if args.len() != decl.inputs.len() {"}, {"sha": "798bd6cf1f7e245ea900a78e3c85378c79dfe490", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -156,7 +156,7 @@ impl<'a, 'tcx> Visitor<'tcx> for DivergenceVisitor<'a, 'tcx> {\n         // don't continue over blocks, LateLintPass already does that\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::All(&self.cx.tcx.map)\n+        NestedVisitorMap::All(&self.cx.tcx.hir)\n     }\n }\n \n@@ -176,7 +176,7 @@ impl<'a, 'tcx> Visitor<'tcx> for DivergenceVisitor<'a, 'tcx> {\n ///\n /// When such a read is found, the lint is triggered.\n fn check_for_unsequenced_reads(vis: &mut ReadVisitor) {\n-    let map = &vis.cx.tcx.map;\n+    let map = &vis.cx.tcx.hir;\n     let mut cur_id = vis.write_expr.id;\n     loop {\n         let parent_id = map.get_parent_node(cur_id);\n@@ -342,7 +342,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ReadVisitor<'a, 'tcx> {\n         walk_expr(self, expr);\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::All(&self.cx.tcx.map)\n+        NestedVisitorMap::All(&self.cx.tcx.hir)\n     }\n }\n "}, {"sha": "69ef78a305641d05aec322b1c7b128bf1942d76c", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -78,10 +78,10 @@ pub fn get_argument_fmtstr_parts<'a, 'b>(cx: &LateContext<'a, 'b>, expr: &'a Exp\n         block.stmts.len() == 1,\n         let StmtDecl(ref decl, _) = block.stmts[0].node,\n         let DeclItem(ref decl) = decl.node,\n-        let Some(NodeItem(decl)) = cx.tcx.map.find(decl.id),\n+        let Some(NodeItem(decl)) = cx.tcx.hir.find(decl.id),\n         &*decl.name.as_str() == \"__STATIC_FMTSTR\",\n         let ItemStatic(_, _, ref expr) = decl.node,\n-        let ExprAddrOf(_, ref expr) = cx.tcx.map.body(*expr).value.node, // &[\"\u2026\", \"\u2026\", \u2026]\n+        let ExprAddrOf(_, ref expr) = cx.tcx.hir.body(*expr).value.node, // &[\"\u2026\", \"\u2026\", \u2026]\n         let ExprArray(ref exprs) = expr.node,\n     ], {\n         let mut result = Vec::new();"}, {"sha": "6d630c7cc8891fd0daf1a3b01b52bc7b9865fce2", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -80,7 +80,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n     ) {\n         use rustc::hir::map::Node::*;\n \n-        let is_impl = if let Some(NodeItem(item)) = cx.tcx.map.find(cx.tcx.map.get_parent_node(nodeid)) {\n+        let is_impl = if let Some(NodeItem(item)) = cx.tcx.hir.find(cx.tcx.hir.get_parent_node(nodeid)) {\n             matches!(item.node, hir::ItemImpl(_, _, _, Some(_), _, _) | hir::ItemDefaultImpl(..))\n         } else {\n             false\n@@ -113,7 +113,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n             }\n \n             if let hir::TraitMethod::Provided(eid) = *eid {\n-                let body = cx.tcx.map.body(eid);\n+                let body = cx.tcx.hir.body(eid);\n                 self.check_raw_ptr(cx, sig.unsafety, &sig.decl, body, item.id);\n             }\n         }\n@@ -200,7 +200,7 @@ impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for DerefVisitor<'a, 'tcx> {\n         hir::intravisit::walk_expr(self, expr);\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n-        intravisit::NestedVisitorMap::All(&self.cx.tcx.map)\n+        intravisit::NestedVisitorMap::All(&self.cx.tcx.hir)\n     }\n }\n "}, {"sha": "36c5e7a288aed6b30503e2c617ef541169e799e5", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -46,7 +46,7 @@ impl LintPass for LargeEnumVariant {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeEnumVariant {\n     fn check_item(&mut self, cx: &LateContext, item: &Item) {\n-        let did = cx.tcx.map.local_def_id(item.id);\n+        let did = cx.tcx.hir.local_def_id(item.id);\n         if let ItemEnum(ref def, _) = item.node {\n             let ty = cx.tcx.item_type(did);\n             let adt = ty.ty_adt_def().expect(\"already checked whether this is an enum\");"}, {"sha": "8a2f37e5aa1fa07fbd4979de9aa4c4694bfc9a7e", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -93,7 +93,7 @@ fn check_trait_items(cx: &LateContext, item: &Item, trait_items: &[TraitItemRef]\n         if let AssociatedItemKind::Method { has_self } = item.kind {\n             has_self &&\n             {\n-                let did = cx.tcx.map.local_def_id(item.id.node_id);\n+                let did = cx.tcx.hir.local_def_id(item.id.node_id);\n                 let impl_ty = cx.tcx.item_type(did);\n                 impl_ty.fn_args().skip_binder().len() == 1\n             }\n@@ -120,7 +120,7 @@ fn check_impl_items(cx: &LateContext, item: &Item, impl_items: &[ImplItemRef]) {\n         if let AssociatedItemKind::Method { has_self } = item.kind {\n             has_self &&\n             {\n-                let did = cx.tcx.map.local_def_id(item.id.node_id);\n+                let did = cx.tcx.hir.local_def_id(item.id.node_id);\n                 let impl_ty = cx.tcx.item_type(did);\n                 impl_ty.fn_args().skip_binder().len() == 1\n             }\n@@ -141,7 +141,7 @@ fn check_impl_items(cx: &LateContext, item: &Item, impl_items: &[ImplItemRef]) {\n \n     if let Some(i) = impl_items.iter().find(|i| is_named_self(cx, i, \"len\")) {\n         if cx.access_levels.is_exported(i.id.node_id) {\n-            let def_id = cx.tcx.map.local_def_id(item.id);\n+            let def_id = cx.tcx.hir.local_def_id(item.id);\n             let ty = cx.tcx.item_type(def_id);\n \n             span_lint(cx,"}, {"sha": "cfc8d4bbd68985f736e3d1ec8fee37aab608f14b", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -145,7 +145,7 @@ impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for UsedVisitor<'a, 'tcx> {\n         hir::intravisit::walk_expr(self, expr);\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> hir::intravisit::NestedVisitorMap<'this, 'tcx> {\n-        hir::intravisit::NestedVisitorMap::All(&self.cx.tcx.map)\n+        hir::intravisit::NestedVisitorMap::All(&self.cx.tcx.hir)\n     }\n }\n "}, {"sha": "c863b11e0b89b6583b65112cb6ea8af0a499373e", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -677,7 +677,7 @@ fn check_for_loop_explicit_counter<'a, 'tcx>(\n \n     // For each candidate, check the parent block to see if\n     // it's initialized to zero at the start of the loop.\n-    let map = &cx.tcx.map;\n+    let map = &cx.tcx.hir;\n     let parent_scope = map.get_enclosing_scope(expr.id).and_then(|id| map.get_enclosing_scope(id));\n     if let Some(parent_id) = parent_scope {\n         if let NodeBlock(block) = map.get(parent_id) {\n@@ -794,7 +794,7 @@ impl<'a, 'tcx: 'a> Visitor<'tcx> for UsedVisitor<'a, 'tcx> {\n         walk_expr(self, expr);\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::All(&self.cx.tcx.map)\n+        NestedVisitorMap::All(&self.cx.tcx.hir)\n     }\n }\n \n@@ -822,7 +822,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                         match def {\n                             Def::Local(..) | Def::Upvar(..) => {\n                                 let def_id = def.def_id();\n-                                let node_id = self.cx.tcx.map.as_local_node_id(def_id).unwrap();\n+                                let node_id = self.cx.tcx.hir.as_local_node_id(def_id).unwrap();\n \n                                 let extent = self.cx.tcx.region_maps.var_scope(node_id);\n                                 self.indexed.insert(seqvar.segments[0].name, Some(extent));\n@@ -844,7 +844,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n         walk_expr(self, expr);\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::All(&self.cx.tcx.map)\n+        NestedVisitorMap::All(&self.cx.tcx.hir)\n     }\n }\n \n@@ -886,7 +886,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarUsedAfterLoopVisitor<'a, 'tcx> {\n         walk_expr(self, expr);\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::All(&self.cx.tcx.map)\n+        NestedVisitorMap::All(&self.cx.tcx.hir)\n     }\n }\n \n@@ -1029,7 +1029,7 @@ impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n         walk_expr(self, expr);\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::All(&self.cx.tcx.map)\n+        NestedVisitorMap::All(&self.cx.tcx.hir)\n     }\n }\n \n@@ -1116,15 +1116,15 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n         walk_expr(self, expr);\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::All(&self.cx.tcx.map)\n+        NestedVisitorMap::All(&self.cx.tcx.hir)\n     }\n }\n \n fn var_def_id(cx: &LateContext, expr: &Expr) -> Option<NodeId> {\n     if let ExprPath(ref qpath) = expr.node {\n         let path_res = cx.tables.qpath_def(qpath, expr.id);\n         if let Def::Local(def_id) = path_res {\n-            let node_id = cx.tcx.map.as_local_node_id(def_id).expect(\"That DefId should be valid\");\n+            let node_id = cx.tcx.hir.as_local_node_id(def_id).expect(\"That DefId should be valid\");\n             return Some(node_id);\n         }\n     }"}, {"sha": "087ae8c31b926efc53ef3308d87866b1e9ec64a6", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -31,7 +31,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             if &*name.node.as_str() == \"map\" && args.len() == 2 {\n                 match args[1].node {\n                     ExprClosure(_, ref decl, closure_eid, _) => {\n-                        let body = cx.tcx.map.body(closure_eid);\n+                        let body = cx.tcx.hir.body(closure_eid);\n                         let closure_expr = remove_blocks(&body.value);\n                         if_let_chain! {[\n                             // nothing special in the argument, besides reference bindings"}, {"sha": "3ad649b93da04c776094a993686123e31ced67a8", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -614,12 +614,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             return;\n         }\n         let name = implitem.name;\n-        let parent = cx.tcx.map.get_parent(implitem.id);\n-        let item = cx.tcx.map.expect_item(parent);\n+        let parent = cx.tcx.hir.get_parent(implitem.id);\n+        let item = cx.tcx.hir.expect_item(parent);\n         if_let_chain! {[\n             let hir::ImplItemKind::Method(ref sig, id) = implitem.node,\n             let Some(first_arg_ty) = sig.decl.inputs.get(0),\n-            let Some(first_arg) = iter_input_pats(&sig.decl, cx.tcx.map.body(id)).next(),\n+            let Some(first_arg) = iter_input_pats(&sig.decl, cx.tcx.hir.body(id)).next(),\n             let hir::ItemImpl(_, _, _, None, ref self_ty, _) = item.node,\n         ], {\n             // check missing trait implementations\n@@ -635,7 +635,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             }\n \n             // check conventions w.r.t. conversion method names and predicates\n-            let ty = cx.tcx.item_type(cx.tcx.map.local_def_id(item.id));\n+            let ty = cx.tcx.item_type(cx.tcx.hir.local_def_id(item.id));\n             let is_copy = is_copy(cx, ty, item.id);\n             for &(ref conv, self_kinds) in &CONVENTIONS {\n                 if_let_chain! {[\n@@ -798,7 +798,7 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[hir:\n /// Checks for the `CLONE_ON_COPY` lint.\n fn lint_clone_on_copy(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr, arg_ty: ty::Ty) {\n     let ty = cx.tables.expr_ty(expr);\n-    let parent = cx.tcx.map.get_parent(expr.id);\n+    let parent = cx.tcx.hir.get_parent(expr.id);\n     let parameter_environment = ty::ParameterEnvironment::for_item(cx.tcx, parent);\n     if let ty::TyRef(_, ty::TypeAndMut { ty: inner, .. }) = arg_ty.sty {\n         if let ty::TyRef(..) = inner.sty {"}, {"sha": "d397d4251117661ae062ddde754f2ce55c3bf72d", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -477,7 +477,7 @@ fn non_macro_local(cx: &LateContext, def: &def::Def) -> bool {\n     match *def {\n         def::Def::Local(id) |\n         def::Def::Upvar(id, _, _) => {\n-            if let Some(span) = cx.tcx.map.span_if_local(id) {\n+            if let Some(span) = cx.tcx.hir.span_if_local(id) {\n                 !in_macro(cx, span)\n             } else {\n                 true"}, {"sha": "348e66a679e86cf551e26333ad7cb1a525b10d14", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -146,7 +146,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, impl_item: &'tcx hir::ImplItem) {\n         // If the method is an impl for a trait, don't doc.\n-        let def_id = cx.tcx.map.local_def_id(impl_item.id);\n+        let def_id = cx.tcx.hir.local_def_id(impl_item.id);\n         match cx.tcx.associated_item(def_id).container {\n             ty::TraitContainer(_) => return,\n             ty::ImplContainer(cid) => {"}, {"sha": "d5e4a0fdb26c93295e9610a537bae3428833b0c1", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -91,6 +91,6 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for MutVisitor<'a, 'tcx> {\n         intravisit::walk_ty(self, ty);\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n-        intravisit::NestedVisitorMap::All(&self.cx.tcx.map)\n+        intravisit::NestedVisitorMap::All(&self.cx.tcx.hir)\n     }\n }"}, {"sha": "e4e98c260388736e90c9387205cacf6b84929f39", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -110,7 +110,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n             }\n             if decl.inputs.is_empty() && &*name.as_str() == \"new\" && cx.access_levels.is_reachable(id) {\n                 let self_ty = cx.tcx\n-                    .item_type(cx.tcx.map.local_def_id(cx.tcx.map.get_parent(id)));\n+                    .item_type(cx.tcx.hir.local_def_id(cx.tcx.hir.get_parent(id)));\n                 if_let_chain!{[\n                     self_ty.walk_shallow().next().is_none(), // implements_trait does not work with generics\n                     same_tys(cx, self_ty, return_ty(cx, id), id),\n@@ -160,7 +160,7 @@ fn can_derive_default<'t, 'c>(ty: ty::Ty<'t>, cx: &LateContext<'c, 't>, default_\n                     return None;\n                 }\n             }\n-            cx.tcx.map.span_if_local(adt_def.did)\n+            cx.tcx.hir.span_if_local(adt_def.did)\n         },\n         _ => None,\n     }"}, {"sha": "0776b660b41794aee6b02db516e4f2aa39e97294", "filename": "clippy_lints/src/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprint.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -135,7 +135,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n }\n \n fn is_in_debug_impl(cx: &LateContext, expr: &Expr) -> bool {\n-    let map = &cx.tcx.map;\n+    let map = &cx.tcx.hir;\n \n     // `fmt` method\n     if let Some(NodeImplItem(item)) = map.find(map.get_parent(expr.id)) {"}, {"sha": "590e3d587d4ebb1fc04fb78f9ac24085f60268ca", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -63,7 +63,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PointerPass {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem) {\n         if let ImplItemKind::Method(ref sig, _) = item.node {\n-            if let Some(NodeItem(it)) = cx.tcx.map.find(cx.tcx.map.get_parent(item.id)) {\n+            if let Some(NodeItem(it)) = cx.tcx.hir.find(cx.tcx.hir.get_parent(item.id)) {\n                 if let ItemImpl(_, _, _, Some(_), _, _) = it.node {\n                     return; // ignore trait impls\n                 }\n@@ -91,7 +91,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PointerPass {\n }\n \n fn check_fn(cx: &LateContext, decl: &FnDecl, fn_id: NodeId) {\n-    let fn_def_id = cx.tcx.map.local_def_id(fn_id);\n+    let fn_def_id = cx.tcx.hir.local_def_id(fn_id);\n     let fn_ty = cx.tcx.item_type(fn_def_id).fn_sig().skip_binder();\n \n     for (arg, ty) in decl.inputs.iter().zip(fn_ty.inputs()) {"}, {"sha": "62ef155c3211cbaa2aa9cb9ac014861f77147c14", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -338,7 +338,7 @@ fn check_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: &'tcx Ty, bindings: &mut V\n         TySlice(ref sty) => check_ty(cx, sty, bindings),\n         TyArray(ref fty, body_id) => {\n             check_ty(cx, fty, bindings);\n-            check_expr(cx, &cx.tcx.map.body(body_id).value, bindings);\n+            check_expr(cx, &cx.tcx.hir.body(body_id).value, bindings);\n         },\n         TyPtr(MutTy { ty: ref mty, .. }) |\n         TyRptr(_, MutTy { ty: ref mty, .. }) => check_ty(cx, mty, bindings),\n@@ -347,7 +347,7 @@ fn check_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: &'tcx Ty, bindings: &mut V\n                 check_ty(cx, t, bindings)\n             }\n         },\n-        TyTypeof(body_id) => check_expr(cx, &cx.tcx.map.body(body_id).value, bindings),\n+        TyTypeof(body_id) => check_expr(cx, &cx.tcx.hir.body(body_id).value, bindings),\n         _ => (),\n     }\n }\n@@ -382,7 +382,7 @@ impl<'a, 'tcx: 'a> Visitor<'tcx> for ContainsSelf<'a, 'tcx> {\n         }\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::All(&self.cx.tcx.map)\n+        NestedVisitorMap::All(&self.cx.tcx.hir)\n     }\n }\n "}, {"sha": "5656af6644996e99349c2e3f3a3efe1da8dc3a13", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -72,7 +72,7 @@ impl LintPass for TypePass {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypePass {\n     fn check_fn(&mut self, cx: &LateContext, _: FnKind, decl: &FnDecl, _: &Body, _: Span, id: NodeId) {\n         // skip trait implementations, see #605\n-        if let Some(map::NodeItem(item)) = cx.tcx.map.find(cx.tcx.map.get_parent(id)) {\n+        if let Some(map::NodeItem(item)) = cx.tcx.hir.find(cx.tcx.hir.get_parent(id)) {\n             if let ItemImpl(_, _, _, Some(..), _, _) = item.node {\n                 return;\n             }\n@@ -725,7 +725,7 @@ impl<'a, 'tcx: 'a> Visitor<'tcx> for TypeComplexityVisitor<'a, 'tcx> {\n         self.nest -= sub_nest;\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::All(&self.cx.tcx.map)\n+        NestedVisitorMap::All(&self.cx.tcx.hir)\n     }\n }\n "}, {"sha": "c74554d5083b4f0de1175f4b48a44fe3fd90a6a2", "filename": "clippy_lints/src/unused_label.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Funused_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Funused_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_label.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -83,6 +83,6 @@ impl<'a, 'tcx: 'a> Visitor<'tcx> for UnusedLabelVisitor<'a, 'tcx> {\n         walk_expr(self, expr);\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::All(&self.cx.tcx.map)\n+        NestedVisitorMap::All(&self.cx.tcx.hir)\n     }\n }"}, {"sha": "2c5c19b2185d4e081bd2f637398f44f909ebdafd", "filename": "clippy_lints/src/utils/hir.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Futils%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Futils%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -114,7 +114,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             },\n             (&ExprRepeat(ref le, ll_id), &ExprRepeat(ref re, rl_id)) => {\n                 self.eq_expr(le, re) &&\n-                self.eq_expr(&self.cx.tcx.map.body(ll_id).value, &self.cx.tcx.map.body(rl_id).value)\n+                self.eq_expr(&self.cx.tcx.hir.body(ll_id).value, &self.cx.tcx.hir.body(rl_id).value)\n             },\n             (&ExprRet(ref l), &ExprRet(ref r)) => both(l, r, |l, r| self.eq_expr(l, r)),\n             (&ExprPath(ref l), &ExprPath(ref r)) => self.eq_qpath(l, r),\n@@ -217,7 +217,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             (&TySlice(ref l_vec), &TySlice(ref r_vec)) => self.eq_ty(l_vec, r_vec),\n             (&TyArray(ref lt, ll_id), &TyArray(ref rt, rl_id)) => {\n                 self.eq_ty(lt, rt) &&\n-                self.eq_expr(&self.cx.tcx.map.body(ll_id).value, &self.cx.tcx.map.body(rl_id).value)\n+                self.eq_expr(&self.cx.tcx.hir.body(ll_id).value, &self.cx.tcx.hir.body(rl_id).value)\n             },\n             (&TyPtr(ref l_mut), &TyPtr(ref r_mut)) => l_mut.mutbl == r_mut.mutbl && self.eq_ty(&*l_mut.ty, &*r_mut.ty),\n             (&TyRptr(_, ref l_rmut), &TyRptr(_, ref r_rmut)) => {\n@@ -370,7 +370,7 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                 let c: fn(_, _, _, _) -> _ = ExprClosure;\n                 c.hash(&mut self.s);\n                 cap.hash(&mut self.s);\n-                self.hash_expr(&self.cx.tcx.map.body(eid).value);\n+                self.hash_expr(&self.cx.tcx.hir.body(eid).value);\n             },\n             ExprField(ref e, ref f) => {\n                 let c: fn(_, _) -> _ = ExprField;\n@@ -435,7 +435,7 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                 let c: fn(_, _) -> _ = ExprRepeat;\n                 c.hash(&mut self.s);\n                 self.hash_expr(e);\n-                self.hash_expr(&self.cx.tcx.map.body(l_id).value);\n+                self.hash_expr(&self.cx.tcx.hir.body(l_id).value);\n             },\n             ExprRet(ref e) => {\n                 let c: fn(_) -> _ = ExprRet;"}, {"sha": "66c1ba89353e09e03b87e290e8e7d7b24d9a31b3", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -65,7 +65,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         match item.node {\n             hir::ImplItemKind::Const(_, body_id) => {\n                 println!(\"associated constant\");\n-                print_expr(cx, &cx.tcx.map.body(body_id).value, 1);\n+                print_expr(cx, &cx.tcx.hir.body(body_id).value, 1);\n             },\n             hir::ImplItemKind::Method(..) => println!(\"method\"),\n             hir::ImplItemKind::Type(_) => println!(\"associated type\"),\n@@ -332,13 +332,13 @@ fn print_expr(cx: &LateContext, expr: &hir::Expr, indent: usize) {\n             println!(\"{}value:\", ind);\n             print_expr(cx, val, indent + 1);\n             println!(\"{}repeat count:\", ind);\n-            print_expr(cx, &cx.tcx.map.body(body_id).value, indent + 1);\n+            print_expr(cx, &cx.tcx.hir.body(body_id).value, indent + 1);\n         },\n     }\n }\n \n fn print_item(cx: &LateContext, item: &hir::Item) {\n-    let did = cx.tcx.map.local_def_id(item.id);\n+    let did = cx.tcx.hir.local_def_id(item.id);\n     println!(\"item `{}`\", item.name);\n     match item.vis {\n         hir::Visibility::Public => println!(\"public\"),"}, {"sha": "c41fe2fb49fdb1f773c6f5bd594f89090f49206b", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -114,7 +114,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n                     output: &mut self.registered_lints,\n                     cx: cx,\n                 };\n-                collector.visit_expr(&cx.tcx.map.body(body_id).value);\n+                collector.visit_expr(&cx.tcx.hir.body(body_id).value);\n             }\n         }\n     }\n@@ -142,7 +142,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n \n \n fn is_lint_ref_type(ty: &Ty) -> bool {\n-    if let TyRptr(Some(_), MutTy { ty: ref inner, mutbl: MutImmutable }) = ty.node {\n+    if let TyRptr(_, MutTy { ty: ref inner, mutbl: MutImmutable }) = ty.node {\n         if let TyPath(ref path) = inner.node {\n             return match_path(path, &paths::LINT);\n         }\n@@ -175,6 +175,6 @@ impl<'a, 'tcx: 'a> Visitor<'tcx> for LintCollector<'a, 'tcx> {\n         }\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::All(&self.cx.tcx.map)\n+        NestedVisitorMap::All(&self.cx.tcx.hir)\n     }\n }"}, {"sha": "1211b77ddb87c0a0a4964a14953d0e37f197ded5", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -362,8 +362,8 @@ pub fn method_chain_args<'a>(expr: &'a Expr, methods: &[&str]) -> Option<Vec<&'a\n \n /// Get the name of the item the expression is in, if available.\n pub fn get_item_name(cx: &LateContext, expr: &Expr) -> Option<Name> {\n-    let parent_id = cx.tcx.map.get_parent(expr.id);\n-    match cx.tcx.map.find(parent_id) {\n+    let parent_id = cx.tcx.hir.get_parent(expr.id);\n+    match cx.tcx.hir.find(parent_id) {\n         Some(Node::NodeItem(&Item { ref name, .. })) |\n         Some(Node::NodeTraitItem(&TraitItem { ref name, .. })) |\n         Some(Node::NodeImplItem(&ImplItem { ref name, .. })) => Some(*name),\n@@ -458,7 +458,7 @@ fn trim_multiline_inner(s: Cow<str>, ignore_first: bool, ch: char) -> Cow<str> {\n \n /// Get a parent expressions if any \u2013 this is useful to constrain a lint.\n pub fn get_parent_expr<'c>(cx: &'c LateContext, e: &Expr) -> Option<&'c Expr> {\n-    let map = &cx.tcx.map;\n+    let map = &cx.tcx.hir;\n     let node_id: NodeId = e.id;\n     let parent_id: NodeId = map.get_parent_node(node_id);\n     if node_id == parent_id {\n@@ -472,14 +472,14 @@ pub fn get_parent_expr<'c>(cx: &'c LateContext, e: &Expr) -> Option<&'c Expr> {\n }\n \n pub fn get_enclosing_block<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, node: NodeId) -> Option<&'tcx Block> {\n-    let map = &cx.tcx.map;\n+    let map = &cx.tcx.hir;\n     let enclosing_node = map.get_enclosing_scope(node)\n         .and_then(|enclosing_id| map.find(enclosing_id));\n     if let Some(node) = enclosing_node {\n         match node {\n             Node::NodeBlock(block) => Some(block),\n             Node::NodeItem(&Item { node: ItemFn(_, _, _, _, _, eid), .. }) => {\n-                match cx.tcx.map.body(eid).value.node {\n+                match cx.tcx.hir.body(eid).value.node {\n                     ExprBlock(ref block) => Some(block),\n                     _ => None,\n                 }\n@@ -762,7 +762,7 @@ pub fn camel_case_from(s: &str) -> usize {\n /// Convenience function to get the return type of a function\n pub fn return_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, fn_item: NodeId) -> ty::Ty<'tcx> {\n     let parameter_env = ty::ParameterEnvironment::for_item(cx.tcx, fn_item);\n-    let fn_def_id = cx.tcx.map.local_def_id(fn_item);\n+    let fn_def_id = cx.tcx.hir.local_def_id(fn_item);\n     let fn_sig = cx.tcx.item_type(fn_def_id).fn_sig();\n     let fn_sig = cx.tcx.liberate_late_bound_regions(parameter_env.free_id_outlive, fn_sig);\n     fn_sig.output()"}, {"sha": "a8d2701ccfa829f44ad69737ff2d96840da44e2b", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2216a890a66b203069b2e7c649fa2fa2100dcbe2/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=2216a890a66b203069b2e7c649fa2fa2100dcbe2", "patch": "@@ -48,7 +48,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         if_let_chain!{[\n             let Some((_, arg, _)) = higher::for_loop(expr),\n             let Some(vec_args) = higher::vec_macro(cx, arg),\n-            is_copy(cx, vec_type(cx.tables.expr_ty_adjusted(arg)), cx.tcx.map.get_parent(expr.id)),\n+            is_copy(cx, vec_type(cx.tables.expr_ty_adjusted(arg)), cx.tcx.hir.get_parent(expr.id)),\n         ], {\n             // report the error around the `vec!` not inside `<std macros>:`\n             let span = cx.sess().codemap().source_callsite(arg.span);"}]}