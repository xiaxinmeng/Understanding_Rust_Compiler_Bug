{"sha": "6eb3c0f30daa0db6fc219694a3028917bb1596af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlYjNjMGYzMGRhYTBkYjZmYzIxOTY5NGEzMDI4OTE3YmIxNTk2YWY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-06-20T09:50:02Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-06-20T09:50:09Z"}, "message": "debuginfo.rs: Removed trailing whitespace.", "tree": {"sha": "ed69ff7fd8bdbfcb928dd51cfdb9d799939eaf48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed69ff7fd8bdbfcb928dd51cfdb9d799939eaf48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6eb3c0f30daa0db6fc219694a3028917bb1596af", "comment_count": 15, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6eb3c0f30daa0db6fc219694a3028917bb1596af", "html_url": "https://github.com/rust-lang/rust/commit/6eb3c0f30daa0db6fc219694a3028917bb1596af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6eb3c0f30daa0db6fc219694a3028917bb1596af/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60474f395c1736773fdd1d86d053dc380b2dad8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/60474f395c1736773fdd1d86d053dc380b2dad8c", "html_url": "https://github.com/rust-lang/rust/commit/60474f395c1736773fdd1d86d053dc380b2dad8c"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "06938c807c95c27efc5f43906826997c117d7425", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6eb3c0f30daa0db6fc219694a3028917bb1596af/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb3c0f30daa0db6fc219694a3028917bb1596af/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=6eb3c0f30daa0db6fc219694a3028917bb1596af", "patch": "@@ -11,21 +11,21 @@\n /*!\n # Debug Info Module\n \n-This module serves the purpose of generating debug symbols. We use LLVM's \n+This module serves the purpose of generating debug symbols. We use LLVM's\n [source level debugging](http://llvm.org/docs/SourceLevelDebugging.html) features for generating\n the debug information. The general principle is this:\n \n-Given the right metadata in the LLVM IR, the LLVM code generator is able to create DWARF debug \n-symbols for the given code. The [metadata](http://llvm.org/docs/LangRef.html#metadata-type) is \n-structured much like DWARF *debugging information entries* (DIE), representing type information \n+Given the right metadata in the LLVM IR, the LLVM code generator is able to create DWARF debug\n+symbols for the given code. The [metadata](http://llvm.org/docs/LangRef.html#metadata-type) is\n+structured much like DWARF *debugging information entries* (DIE), representing type information\n such as datatype layout, function signatures, block layout, variable location and scope information,\n etc. It is the purpose of this module to generate correct metadata and insert it into the LLVM IR.\n \n As the exact format of metadata trees may change between different LLVM versions, we now use LLVM\n [DIBuilder](http://llvm.org/docs/doxygen/html/classllvm_1_1DIBuilder.html) to create metadata\n-where possible. This will hopefully ease the adaption of this module to future LLVM versions. \n+where possible. This will hopefully ease the adaption of this module to future LLVM versions.\n \n-The public API of the module is a set of functions that will insert the correct metadata into the \n+The public API of the module is a set of functions that will insert the correct metadata into the\n LLVM IR when called with the right parameters. The module is thus driven from an outside client with\n functions like `debuginfo::create_local_var(bcx: block, local: @ast::local)`.\n \n@@ -129,7 +129,7 @@ pub fn finalize(cx: @mut CrateContext) {\n \n /// Creates debug information for the given local variable.\n ///\n-/// Adds the created metadata nodes directly to the crate's IR. \n+/// Adds the created metadata nodes directly to the crate's IR.\n /// The return value should be ignored if called from outside of the debuginfo module.\n pub fn create_local_var(bcx: block, local: @ast::local) -> DIVariable {\n     let cx = bcx.ccx();\n@@ -182,7 +182,7 @@ pub fn create_local_var(bcx: block, local: @ast::local) -> DIVariable {\n \n /// Creates debug information for the given function argument.\n ///\n-/// Adds the created metadata nodes directly to the crate's IR. \n+/// Adds the created metadata nodes directly to the crate's IR.\n /// The return value should be ignored if called from outside of the debuginfo module.\n pub fn create_arg(bcx: block, arg: ast::arg, span: span) -> Option<DIVariable> {\n     debug!(\"create_arg\");\n@@ -246,7 +246,7 @@ pub fn update_source_pos(bcx: block, span: span) {\n \n /// Creates debug information for the given function.\n ///\n-/// Adds the created metadata nodes directly to the crate's IR. \n+/// Adds the created metadata nodes directly to the crate's IR.\n /// The return value should be ignored if called from outside of the debuginfo module.\n pub fn create_function(fcx: fn_ctxt) -> DISubprogram {\n     let cx = fcx.ccx;"}]}