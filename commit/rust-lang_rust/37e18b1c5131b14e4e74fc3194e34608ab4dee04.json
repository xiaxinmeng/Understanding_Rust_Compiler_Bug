{"sha": "37e18b1c5131b14e4e74fc3194e34608ab4dee04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZTE4YjFjNTEzMWIxNGU0ZTc0ZmMzMTk0ZTM0NjA4YWI0ZGVlMDQ=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-09-05T21:26:50Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-09-13T08:01:18Z"}, "message": "Updated suggestion/help messages.", "tree": {"sha": "7843a383188e6f5f80852199b30db473119cee1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7843a383188e6f5f80852199b30db473119cee1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37e18b1c5131b14e4e74fc3194e34608ab4dee04", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAluaGU4ACgkQAXYLT59T\n8VQXjQ//YmE5TLAt0ONy8OENDtJAN8fWU3prGGNz1wfpg1Y4y1pwwfayv5aj1YY6\n/pdq1a8kQbFUxzGaVX5j3QiMLgVrw9lwQotcvczO3QaZvHCafikzvW/kIob4pDmr\nz+P9pskIdb07J86Td14G7QaC1EbUHKkuswscQyiTmOVgBP3mgv/ElfJjg764XNQD\nRxi/hHfiYkm88Mw2TxMrTbMPg2cm1cSBYiK8D6roeDu3vrXTpCweqPiNd4p+VxtE\n/o4fWaq6mfZid8+xcYSfoPH1L3sYG4u+N28t9QGQ5zeyhcUanQEy8jnQBnDt5i8Z\nL+hbPQeGwJ5weGsC+OE8T58ELooRbuP+OU4Enc0hpnAByANtBFxYChQr2aXGrt2Z\nWGAtle35SkRgws549TuDNsbE5jBI9aGkrCollmvsl4mBaz86vwGXgcLkpByH7/u2\nuiSMT8En3Ja6HXf+C5T4S/We5jGa2Fddo+LsJVtNn8oywl631AmJNFhqU+UjeIkH\nYTj5A7LcwHLw3PLMKV6XZ4Ej8pwCnxdVSnhUzicMCVQTCLYFGoOpc7KKxiHd1Lnb\nEotsIN53icawdxgZlX3N6AMpFsXpvFRUmDse0wvEp/tqXpFMAcLWDn4rIJZS+70o\nW09Uf6xs+1GowRJRvhKODj45JVeZM1VjqBEbz/BDWGkxCujJMsQ=\n=eXc4\n-----END PGP SIGNATURE-----", "payload": "tree 7843a383188e6f5f80852199b30db473119cee1f\nparent 7a89e93519ce0880fe10c37c2ca8f63686fc210b\nauthor David Wood <david@davidtw.co> 1536182810 +0200\ncommitter David Wood <david@davidtw.co> 1536825678 +0200\n\nUpdated suggestion/help messages.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37e18b1c5131b14e4e74fc3194e34608ab4dee04", "html_url": "https://github.com/rust-lang/rust/commit/37e18b1c5131b14e4e74fc3194e34608ab4dee04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37e18b1c5131b14e4e74fc3194e34608ab4dee04/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a89e93519ce0880fe10c37c2ca8f63686fc210b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a89e93519ce0880fe10c37c2ca8f63686fc210b", "html_url": "https://github.com/rust-lang/rust/commit/7a89e93519ce0880fe10c37c2ca8f63686fc210b"}], "stats": {"total": 92, "additions": 44, "deletions": 48}, "files": [{"sha": "4db9507ac77d09fb2bf3646136329786b8975a5b", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 39, "deletions": 41, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/37e18b1c5131b14e4e74fc3194e34608ab4dee04/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37e18b1c5131b14e4e74fc3194e34608ab4dee04/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=37e18b1c5131b14e4e74fc3194e34608ab4dee04", "patch": "@@ -15,7 +15,7 @@ use rustc::hir::def_id::DefId;\n use rustc::infer::error_reporting::nice_region_error::NiceRegionError;\n use rustc::infer::InferCtxt;\n use rustc::mir::{self, Location, Mir, Place, Rvalue, StatementKind, TerminatorKind};\n-use rustc::ty::{self, TyCtxt, Region, RegionKind, RegionVid};\n+use rustc::ty::{self, TyCtxt, RegionVid};\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_errors::{Diagnostic, DiagnosticBuilder};\n use std::collections::VecDeque;\n@@ -347,9 +347,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         );\n \n         // Check if we can use one of the \"nice region errors\".\n-        let fr_region = self.to_error_region(fr);\n-        let outlived_fr_region = self.to_error_region(outlived_fr);\n-        if let (Some(f), Some(o)) = (fr_region, outlived_fr_region) {\n+        if let (Some(f), Some(o)) = (self.to_error_region(fr), self.to_error_region(outlived_fr)) {\n             let tables = infcx.tcx.typeck_tables_of(mir_def_id);\n             let nice = NiceRegionError::new_from_span(infcx.tcx, span, o, f, Some(tables));\n             if let Some(_error_reported) = nice.try_report_from_nll() {\n@@ -362,17 +360,16 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             self.universal_regions.is_local_free_region(outlived_fr),\n         );\n \n-        debug!(\"report_error: fr_is_local={:?} outlived_fr_is_local={:?} fr_region={:?} \\\n-                outlived_fr_region={:?} category={:?}\",\n-               fr_is_local, outlived_fr_is_local, fr_region, outlived_fr_region, category);\n+        debug!(\"report_error: fr_is_local={:?} outlived_fr_is_local={:?} category={:?}\",\n+               fr_is_local, outlived_fr_is_local, category);\n         match (category, fr_is_local, outlived_fr_is_local) {\n             (ConstraintCategory::Assignment, true, false) |\n             (ConstraintCategory::CallArgument, true, false) =>\n-                self.report_escaping_data_error(mir, infcx, mir_def_id, fr, fr_region, outlived_fr,\n-                                                outlived_fr_region, category, span, errors_buffer),\n+                self.report_escaping_data_error(mir, infcx, mir_def_id, fr, outlived_fr,\n+                                                category, span, errors_buffer),\n             _ =>\n-                self.report_general_error(mir, infcx, mir_def_id, fr, fr_is_local, fr_region,\n-                                          outlived_fr, outlived_fr_is_local, outlived_fr_region,\n+                self.report_general_error(mir, infcx, mir_def_id, fr, fr_is_local,\n+                                          outlived_fr, outlived_fr_is_local,\n                                           category, span, errors_buffer),\n         };\n     }\n@@ -383,9 +380,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n         mir_def_id: DefId,\n         fr: RegionVid,\n-        fr_region: Option<Region<'tcx>>,\n         outlived_fr: RegionVid,\n-        outlived_fr_region: Option<Region<'tcx>>,\n         category: ConstraintCategory,\n         span: Span,\n         errors_buffer: &mut Vec<Diagnostic>,\n@@ -398,8 +393,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         if fr_name_and_span.is_none() && outlived_fr_name_and_span.is_none() {\n             return self.report_general_error(mir, infcx, mir_def_id,\n-                                             fr, true, fr_region,\n-                                             outlived_fr, false, outlived_fr_region,\n+                                             fr, true, outlived_fr, false,\n                                              category, span, errors_buffer);\n         }\n \n@@ -439,10 +433,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         mir_def_id: DefId,\n         fr: RegionVid,\n         fr_is_local: bool,\n-        fr_region: Option<Region<'tcx>>,\n         outlived_fr: RegionVid,\n         outlived_fr_is_local: bool,\n-        outlived_fr_region: Option<Region<'tcx>>,\n         category: ConstraintCategory,\n         span: Span,\n         errors_buffer: &mut Vec<Diagnostic>,\n@@ -477,7 +469,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         }\n \n         self.add_static_impl_trait_suggestion(\n-            infcx, &mut diag, fr_name, fr_region, outlived_fr_region\n+            infcx, &mut diag, fr, fr_name, outlived_fr,\n         );\n \n         diag.buffer(errors_buffer);\n@@ -487,11 +479,15 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         &self,\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n         diag: &mut DiagnosticBuilder<'_>,\n+        fr: RegionVid,\n+        // We need to pass `fr_name` - computing it again will label it twice.\n         fr_name: RegionName,\n-        fr_region: Option<Region<'tcx>>,\n-        outlived_fr_region: Option<Region<'tcx>>,\n+        outlived_fr: RegionVid,\n     ) {\n-        if let (Some(f), Some(ty::RegionKind::ReStatic)) = (fr_region, outlived_fr_region) {\n+        if let (\n+            Some(f),\n+            Some(ty::RegionKind::ReStatic)\n+        ) = (self.to_error_region(fr), self.to_error_region(outlived_fr)) {\n             if let Some(ty::TyS {\n                 sty: ty::TyKind::Anon(did, substs),\n                 ..\n@@ -500,6 +496,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     .map(|id| infcx.tcx.return_type_impl_trait(id))\n                     .unwrap_or(None)\n             {\n+                // Check whether or not the impl trait return type is intended to capture\n+                // data with the static lifetime.\n+                //\n+                // eg. check for `impl Trait + 'static` instead of `impl Trait`.\n                 let has_static_predicate = {\n                     let predicates_of = infcx.tcx.predicates_of(*did);\n                     let bounds = predicates_of.instantiate(infcx.tcx, substs);\n@@ -509,7 +509,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                         if let ty::Predicate::TypeOutlives(binder) = predicate {\n                             if let ty::OutlivesPredicate(\n                                 _,\n-                                RegionKind::ReStatic\n+                                ty::RegionKind::ReStatic\n                             ) = binder.skip_binder() {\n                                 found = true;\n                                 break;\n@@ -523,33 +523,31 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 debug!(\"add_static_impl_trait_suggestion: has_static_predicate={:?}\",\n                        has_static_predicate);\n                 let static_str = keywords::StaticLifetime.name();\n+                // If there is a static predicate, then the only sensible suggestion is to replace\n+                // fr with `'static`.\n                 if has_static_predicate {\n-                    let span = self.get_span_of_named_region(infcx.tcx, f, &fr_name);\n-                    if let Ok(snippet) = infcx.tcx.sess.source_map().span_to_snippet(span) {\n-                        diag.span_suggestion(\n-                            span,\n-                            &format!(\n-                                \"you can add a constraint to the definition of `{}` to require it \\\n-                                 outlive `{}`\",\n-                                fr_name, static_str,\n-                            ),\n-                            format!(\"{}: {}\", snippet, static_str),\n-                        );\n-                    }\n+                    diag.help(\n+                        &format!(\n+                            \"consider replacing `{}` with `{}`\",\n+                            fr_name, static_str,\n+                        ),\n+                    );\n                 } else {\n+                    // Otherwise, we should suggest adding a constraint on the return type.\n                     let span = infcx.tcx.def_span(*did);\n                     if let Ok(snippet) = infcx.tcx.sess.source_map().span_to_snippet(span) {\n+                        let suggestable_fr_name = match fr_name {\n+                            RegionName::Named(name) => format!(\"{}\", name),\n+                            RegionName::Synthesized(_) => \"'_\".to_string(),\n+                        };\n                         diag.span_suggestion(\n                             span,\n                             &format!(\n-                                \"you can add a constraint to the return type to make it last \\\n-                                 less than `{}` and match `{}`\",\n-                                static_str, fr_name,\n+                                \"to allow this impl Trait to capture borrowed data with lifetime \\\n+                                 `{}`, add `{}` as a constraint\",\n+                                fr_name, suggestable_fr_name,\n                             ),\n-                            match fr_name {\n-                                RegionName::Named(name) => format!(\"{} + {}\", snippet, name),\n-                                RegionName::Synthesized(_) => format!(\"{} + '_\", snippet),\n-                            },\n+                            format!(\"{} + {}\", snippet, suggestable_fr_name),\n                         );\n                     }\n                 }"}, {"sha": "3019e3aa1f7324c64535d2ee08b85f7c5275dbce", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37e18b1c5131b14e4e74fc3194e34608ab4dee04/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37e18b1c5131b14e4e74fc3194e34608ab4dee04/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=37e18b1c5131b14e4e74fc3194e34608ab4dee04", "patch": "@@ -11,7 +11,7 @@ error: unsatisfied lifetime constraints\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |             -- lifetime `'a` defined here  ^ returning this value requires that `'a` must outlive `'static`\n-help: you can add a constraint to the return type to make it last less than `'static` and match `'a`\n+help: to allow this impl Trait to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                ^^^^^^^^^^^^^^\n@@ -21,10 +21,8 @@ error: unsatisfied lifetime constraints\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |               -- lifetime `'a` defined here                         ^ returning this value requires that `'a` must outlive `'static`\n-help: you can add a constraint to the definition of `'a` to require it outlive `'static`\n    |\n-LL | fn with_bound<'a: 'static>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n-   |               ^^^^^^^^^^^\n+   = help: consider replacing `'a` with `'static`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/must_outlive_least_region_or_bound.rs:29:5"}, {"sha": "4bc8876c232e3354d3bf76a39e6d1a52265d77cb", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37e18b1c5131b14e4e74fc3194e34608ab4dee04/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37e18b1c5131b14e4e74fc3194e34608ab4dee04/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr?ref=37e18b1c5131b14e4e74fc3194e34608ab4dee04", "patch": "@@ -5,9 +5,9 @@ LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n    |                         - let's call the lifetime of this reference `'1`\n LL |         self.x.iter().map(|a| a.0)\n    |         ^^^^^^ cast requires that `'1` must outlive `'static`\n-help: you can add a constraint to the return type to make it last less than `'static` and match '1\n+help: to allow this impl Trait to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n    |\n-LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '1 {\n+LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unsatisfied lifetime constraints\n@@ -17,7 +17,7 @@ LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n    |                    -- lifetime `'a` defined here\n LL |         self.x.iter().map(|a| a.0)\n    |         ^^^^^^ cast requires that `'a` must outlive `'static`\n-help: you can add a constraint to the return type to make it last less than `'static` and match 'a\n+help: to allow this impl Trait to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}