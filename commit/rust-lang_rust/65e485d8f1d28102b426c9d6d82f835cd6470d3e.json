{"sha": "65e485d8f1d28102b426c9d6d82f835cd6470d3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZTQ4NWQ4ZjFkMjgxMDJiNDI2YzlkNmQ4MmY4MzVjZDY0NzBkM2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-05T22:20:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-05T22:20:25Z"}, "message": "Auto merge of #54922 - murarth:rc-ub-fix, r=alexcrichton\n\nFix undefined behavior in Rc/Arc allocation\n\nManually calculate allocation layout for `Rc`/`Arc` to avoid undefined behavior\n\nCloses #54908", "tree": {"sha": "74b98cfe9744cc783e1aaacfc309e81bda6bdfa4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74b98cfe9744cc783e1aaacfc309e81bda6bdfa4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65e485d8f1d28102b426c9d6d82f835cd6470d3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65e485d8f1d28102b426c9d6d82f835cd6470d3e", "html_url": "https://github.com/rust-lang/rust/commit/65e485d8f1d28102b426c9d6d82f835cd6470d3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65e485d8f1d28102b426c9d6d82f835cd6470d3e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13dab66a6f6403f4eee092456f7f8f46199c5859", "url": "https://api.github.com/repos/rust-lang/rust/commits/13dab66a6f6403f4eee092456f7f8f46199c5859", "html_url": "https://github.com/rust-lang/rust/commit/13dab66a6f6403f4eee092456f7f8f46199c5859"}, {"sha": "d60290fc63bcc19714abb7fad2c01cf2efe91efa", "url": "https://api.github.com/repos/rust-lang/rust/commits/d60290fc63bcc19714abb7fad2c01cf2efe91efa", "html_url": "https://github.com/rust-lang/rust/commit/d60290fc63bcc19714abb7fad2c01cf2efe91efa"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "45f035ad04f8ff812de4c3bd4e1862bb5d47c65a", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65e485d8f1d28102b426c9d6d82f835cd6470d3e/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e485d8f1d28102b426c9d6d82f835cd6470d3e/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=65e485d8f1d28102b426c9d6d82f835cd6470d3e", "patch": "@@ -668,15 +668,17 @@ impl Rc<dyn Any> {\n impl<T: ?Sized> Rc<T> {\n     // Allocates an `RcBox<T>` with sufficient space for an unsized value\n     unsafe fn allocate_for_ptr(ptr: *const T) -> *mut RcBox<T> {\n-        // Create a fake RcBox to find allocation size and alignment\n-        let fake_ptr = ptr as *mut RcBox<T>;\n-\n-        let layout = Layout::for_value(&*fake_ptr);\n+        // Calculate layout using the given value.\n+        // Previously, layout was calculated on the expression\n+        // `&*(ptr as *const RcBox<T>)`, but this created a misaligned\n+        // reference (see #54908).\n+        let (layout, _) = Layout::new::<RcBox<()>>()\n+            .extend(Layout::for_value(&*ptr)).unwrap();\n \n         let mem = Global.alloc(layout)\n             .unwrap_or_else(|_| handle_alloc_error(layout));\n \n-        // Initialize the real RcBox\n+        // Initialize the RcBox\n         let inner = set_data_ptr(ptr as *mut T, mem.as_ptr() as *mut u8) as *mut RcBox<T>;\n \n         ptr::write(&mut (*inner).strong, Cell::new(1));"}, {"sha": "2c396b3b06bda34351046554a73a3f41e79844c9", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65e485d8f1d28102b426c9d6d82f835cd6470d3e/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e485d8f1d28102b426c9d6d82f835cd6470d3e/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=65e485d8f1d28102b426c9d6d82f835cd6470d3e", "patch": "@@ -571,15 +571,17 @@ impl<T: ?Sized> Arc<T> {\n impl<T: ?Sized> Arc<T> {\n     // Allocates an `ArcInner<T>` with sufficient space for an unsized value\n     unsafe fn allocate_for_ptr(ptr: *const T) -> *mut ArcInner<T> {\n-        // Create a fake ArcInner to find allocation size and alignment\n-        let fake_ptr = ptr as *mut ArcInner<T>;\n-\n-        let layout = Layout::for_value(&*fake_ptr);\n+        // Calculate layout using the given value.\n+        // Previously, layout was calculated on the expression\n+        // `&*(ptr as *const ArcInner<T>)`, but this created a misaligned\n+        // reference (see #54908).\n+        let (layout, _) = Layout::new::<ArcInner<()>>()\n+            .extend(Layout::for_value(&*ptr)).unwrap();\n \n         let mem = Global.alloc(layout)\n             .unwrap_or_else(|_| handle_alloc_error(layout));\n \n-        // Initialize the real ArcInner\n+        // Initialize the ArcInner\n         let inner = set_data_ptr(ptr as *mut T, mem.as_ptr() as *mut u8) as *mut ArcInner<T>;\n \n         ptr::write(&mut (*inner).strong, atomic::AtomicUsize::new(1));"}]}