{"sha": "7f08d04d60d03e1a52dae61ce6aa50996898702b", "node_id": "C_kwDOAAsO6NoAKDdmMDhkMDRkNjBkMDNlMWE1MmRhZTYxY2U2YWE1MDk5Njg5ODcwMmI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-27T22:22:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-27T22:22:58Z"}, "message": "Auto merge of #98591 - matthiaskrgr:rollup-7dok1wq, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #98331 (Fix rustdoc argument error)\n - #98506 (Fix span issues in object safety suggestions)\n - #98563 (interpret: refactor allocation info query)\n - #98576 (small regions refactoring)\n - #98577 (Fix \"kind\" for associated types in trait implementations in rustdoc JSON)\n - #98578 (Remove eddyb from miri failure pings)\n - #98579 (liballoc tests: avoid int2ptr cast)\n - #98581 (Add triagebot mentions.)\n - #98587 (libcore tests: avoid int2ptr casts)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "4f3ebf4f1d9ac26ef88a8b0281d40932cf55a39a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f3ebf4f1d9ac26ef88a8b0281d40932cf55a39a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f08d04d60d03e1a52dae61ce6aa50996898702b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f08d04d60d03e1a52dae61ce6aa50996898702b", "html_url": "https://github.com/rust-lang/rust/commit/7f08d04d60d03e1a52dae61ce6aa50996898702b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f08d04d60d03e1a52dae61ce6aa50996898702b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f3ddd9f594adf9773547aa7cedb43c4ac8ffd2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f3ddd9f594adf9773547aa7cedb43c4ac8ffd2f", "html_url": "https://github.com/rust-lang/rust/commit/2f3ddd9f594adf9773547aa7cedb43c4ac8ffd2f"}, {"sha": "f266821d8f4f4ad37b858c894d3d52a35f55353f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f266821d8f4f4ad37b858c894d3d52a35f55353f", "html_url": "https://github.com/rust-lang/rust/commit/f266821d8f4f4ad37b858c894d3d52a35f55353f"}], "stats": {"total": 1203, "additions": 968, "deletions": 235}, "files": [{"sha": "e60e11f11df9fdd8addebe7a8eae426fd29fa017", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -879,7 +879,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         }\n \n         let mut found = false;\n-        tcx.fold_regions(tcx.type_of(body_parent_did), &mut true, |r: ty::Region<'tcx>, _| {\n+        tcx.fold_regions(tcx.type_of(body_parent_did), |r: ty::Region<'tcx>, _| {\n             if *r == ty::ReEarlyBound(region) {\n                 found = true;\n             }"}, {"sha": "f5c9392948b24c5391f0107e981410359802132b", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -1009,7 +1009,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         debug!(\"try_promote_type_test_subject(ty = {:?})\", ty);\n \n-        let ty = tcx.fold_regions(ty, &mut false, |r, _depth| {\n+        let ty = tcx.fold_regions(ty, |r, _depth| {\n             let region_vid = self.to_region_vid(r);\n \n             // The challenge if this. We have some region variable `r`\n@@ -1289,7 +1289,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        tcx.fold_regions(value, &mut false, |r, _db| {\n+        tcx.fold_regions(value, |r, _db| {\n             let vid = self.to_region_vid(r);\n             let scc = self.constraint_sccs.scc(vid);\n             let repr = self.scc_representatives[scc];"}, {"sha": "d182c0cf4e8695cbbe2dae9f87ffc00f6154bb19", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -59,7 +59,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             debug!(?concrete_type, ?substs);\n \n             let mut subst_regions = vec![self.universal_regions.fr_static];\n-            let universal_substs = infcx.tcx.fold_regions(substs, &mut false, |region, _| {\n+            let universal_substs = infcx.tcx.fold_regions(substs, |region, _| {\n                 if let ty::RePlaceholder(..) = region.kind() {\n                     // Higher kinded regions don't need remapping, they don't refer to anything outside of this the substs.\n                     return region;\n@@ -91,7 +91,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             subst_regions.dedup();\n \n             let universal_concrete_type =\n-                infcx.tcx.fold_regions(concrete_type, &mut false, |region, _| match *region {\n+                infcx.tcx.fold_regions(concrete_type, |region, _| match *region {\n                     ty::ReVar(vid) => subst_regions\n                         .iter()\n                         .find(|ur_vid| self.eval_equal(vid, **ur_vid))\n@@ -146,7 +146,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        tcx.fold_regions(ty, &mut false, |region, _| match *region {\n+        tcx.fold_regions(ty, |region, _| match *region {\n             ty::ReVar(vid) => {\n                 // Find something that we can name\n                 let upper_bound = self.approx_universal_upper_bound(vid);"}, {"sha": "7a8ce621c5d0bfdc5e46a4e62e2f19e281599153", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -31,7 +31,7 @@ pub fn renumber_regions<'tcx, T>(infcx: &InferCtxt<'_, 'tcx>, value: T) -> T\n where\n     T: TypeFoldable<'tcx>,\n {\n-    infcx.tcx.fold_regions(value, &mut false, |_region, _depth| {\n+    infcx.tcx.fold_regions(value, |_region, _depth| {\n         let origin = NllRegionVariableOrigin::Existential { from_forall: false };\n         infcx.next_nll_region_var(origin)\n     })"}, {"sha": "5e33d9d25c223d4b29571c2672fd0d6e03e59ca9", "filename": "compiler/rustc_borrowck/src/type_check/constraint_conversion.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -23,7 +23,7 @@ pub(crate) struct ConstraintConversion<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     universal_regions: &'a UniversalRegions<'tcx>,\n     region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n-    implicit_region_bound: Option<ty::Region<'tcx>>,\n+    implicit_region_bound: ty::Region<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     locations: Locations,\n     span: Span,\n@@ -36,7 +36,7 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n         infcx: &'a InferCtxt<'a, 'tcx>,\n         universal_regions: &'a UniversalRegions<'tcx>,\n         region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n-        implicit_region_bound: Option<ty::Region<'tcx>>,\n+        implicit_region_bound: ty::Region<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         locations: Locations,\n         span: Span,\n@@ -108,7 +108,7 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n                 // create new region variables, which can't be done later when\n                 // verifying these bounds.\n                 if t1.has_placeholders() {\n-                    t1 = tcx.fold_regions(t1, &mut false, |r, _| match *r {\n+                    t1 = tcx.fold_regions(t1, |r, _| match *r {\n                         ty::RePlaceholder(placeholder) => {\n                             self.constraints.placeholder_region(self.infcx, placeholder)\n                         }\n@@ -120,7 +120,7 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n                     &mut *self,\n                     tcx,\n                     region_bound_pairs,\n-                    implicit_region_bound,\n+                    Some(implicit_region_bound),\n                     param_env,\n                 )\n                 .type_must_outlive(origin, t1, r2);"}, {"sha": "421ef5be8128705d6b6456240c90e0bbe0b3dfc7", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -61,7 +61,7 @@ pub(crate) struct CreateResult<'tcx> {\n pub(crate) fn create<'tcx>(\n     infcx: &InferCtxt<'_, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    implicit_region_bound: Option<ty::Region<'tcx>>,\n+    implicit_region_bound: ty::Region<'tcx>,\n     universal_regions: &Rc<UniversalRegions<'tcx>>,\n     constraints: &mut MirTypeckRegionConstraints<'tcx>,\n ) -> CreateResult<'tcx> {\n@@ -223,7 +223,7 @@ struct UniversalRegionRelationsBuilder<'this, 'tcx> {\n     infcx: &'this InferCtxt<'this, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     universal_regions: Rc<UniversalRegions<'tcx>>,\n-    implicit_region_bound: Option<ty::Region<'tcx>>,\n+    implicit_region_bound: ty::Region<'tcx>,\n     constraints: &'this mut MirTypeckRegionConstraints<'tcx>,\n \n     // outputs:"}, {"sha": "2a6ca5246daa9b57cf778d0afe603a6344bbb87c", "filename": "compiler/rustc_borrowck/src/type_check/input_output.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -230,7 +230,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 self.infcx,\n                 &self.borrowck_context.universal_regions,\n                 &self.region_bound_pairs,\n-                Some(self.implicit_region_bound),\n+                self.implicit_region_bound,\n                 self.param_env,\n                 Locations::All(DUMMY_SP),\n                 DUMMY_SP,"}, {"sha": "542fc6b0f485d439d99baaf6dcd8be4f0a865dbe", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -157,7 +157,7 @@ pub(crate) fn type_check<'mir, 'tcx>(\n     } = free_region_relations::create(\n         infcx,\n         param_env,\n-        Some(implicit_region_bound),\n+        implicit_region_bound,\n         universal_regions,\n         &mut constraints,\n     );\n@@ -1142,7 +1142,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             self.infcx,\n             self.borrowck_context.universal_regions,\n             self.region_bound_pairs,\n-            Some(self.implicit_region_bound),\n+            self.implicit_region_bound,\n             self.param_env,\n             locations,\n             locations.span(self.body),"}, {"sha": "89d84fcf09cfe66c7250f6435ce486ec2e54b557", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -725,7 +725,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        self.tcx.fold_regions(value, &mut false, |_region, _depth| self.next_nll_region_var(origin))\n+        self.tcx.fold_regions(value, |_region, _depth| self.next_nll_region_var(origin))\n     }\n \n     #[instrument(level = \"debug\", skip(self, indices))]\n@@ -817,9 +817,7 @@ impl<'tcx> UniversalRegionIndices<'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        tcx.fold_regions(value, &mut false, |region, _| {\n-            tcx.mk_region(ty::ReVar(self.to_region_vid(region)))\n-        })\n+        tcx.fold_regions(value, |region, _| tcx.mk_region(ty::ReVar(self.to_region_vid(region))))\n     }\n }\n "}, {"sha": "d5e68dbd5b7a9d43d5da0686ea6ec1a839df95a9", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 33, "deletions": 50, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -56,15 +56,14 @@ impl<T: fmt::Display> fmt::Display for MemoryKind<T> {\n     }\n }\n \n-/// Used by `get_size_and_align` to indicate whether the allocation needs to be live.\n-#[derive(Debug, Copy, Clone)]\n-pub enum AllocCheck {\n-    /// Allocation must be live and not a function pointer.\n-    Dereferenceable,\n-    /// Allocations needs to be live, but may be a function pointer.\n-    Live,\n-    /// Allocation may be dead.\n-    MaybeDead,\n+/// The return value of `get_alloc_info` indicates the \"kind\" of the allocation.\n+pub enum AllocKind {\n+    /// A regular live data allocation.\n+    LiveData,\n+    /// A function allocation (that fn ptrs point to).\n+    Function,\n+    /// A dead allocation.\n+    Dead,\n }\n \n /// The value of a function pointer.\n@@ -360,8 +359,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             align,\n             CheckInAllocMsg::MemoryAccessTest,\n             |alloc_id, offset, tag| {\n-                let (size, align) =\n-                    self.get_alloc_size_and_align(alloc_id, AllocCheck::Dereferenceable)?;\n+                let (size, align) = self.get_live_alloc_size_and_align(alloc_id)?;\n                 Ok((size, align, (alloc_id, offset, tag)))\n             },\n         )\n@@ -379,15 +377,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         msg: CheckInAllocMsg,\n     ) -> InterpResult<'tcx> {\n         self.check_and_deref_ptr(ptr, size, Some(align), msg, |alloc_id, _, _| {\n-            let check = match msg {\n-                CheckInAllocMsg::DerefTest | CheckInAllocMsg::MemoryAccessTest => {\n-                    AllocCheck::Dereferenceable\n-                }\n-                CheckInAllocMsg::PointerArithmeticTest\n-                | CheckInAllocMsg::OffsetFromTest\n-                | CheckInAllocMsg::InboundsTest => AllocCheck::Live,\n-            };\n-            let (size, align) = self.get_alloc_size_and_align(alloc_id, check)?;\n+            let (size, align) = self.get_live_alloc_size_and_align(alloc_id)?;\n             Ok((size, align, ()))\n         })?;\n         Ok(())\n@@ -655,30 +645,19 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     /// Obtain the size and alignment of an allocation, even if that allocation has\n     /// been deallocated.\n-    ///\n-    /// If `liveness` is `AllocCheck::MaybeDead`, this function always returns `Ok`.\n-    pub fn get_alloc_size_and_align(\n-        &self,\n-        id: AllocId,\n-        liveness: AllocCheck,\n-    ) -> InterpResult<'tcx, (Size, Align)> {\n+    pub fn get_alloc_info(&self, id: AllocId) -> (Size, Align, AllocKind) {\n         // # Regular allocations\n         // Don't use `self.get_raw` here as that will\n         // a) cause cycles in case `id` refers to a static\n         // b) duplicate a global's allocation in miri\n         if let Some((_, alloc)) = self.memory.alloc_map.get(id) {\n-            return Ok((alloc.size(), alloc.align));\n+            return (alloc.size(), alloc.align, AllocKind::LiveData);\n         }\n \n         // # Function pointers\n         // (both global from `alloc_map` and local from `extra_fn_ptr_map`)\n         if self.get_fn_alloc(id).is_some() {\n-            return if let AllocCheck::Dereferenceable = liveness {\n-                // The caller requested no function pointers.\n-                throw_ub!(DerefFunctionPointer(id))\n-            } else {\n-                Ok((Size::ZERO, Align::ONE))\n-            };\n+            return (Size::ZERO, Align::ONE, AllocKind::Function);\n         }\n \n         // # Statics\n@@ -690,32 +669,38 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // Use size and align of the type.\n                 let ty = self.tcx.type_of(did);\n                 let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n-                Ok((layout.size, layout.align.abi))\n+                (layout.size, layout.align.abi, AllocKind::LiveData)\n             }\n             Some(GlobalAlloc::Memory(alloc)) => {\n                 // Need to duplicate the logic here, because the global allocations have\n                 // different associated types than the interpreter-local ones.\n                 let alloc = alloc.inner();\n-                Ok((alloc.size(), alloc.align))\n+                (alloc.size(), alloc.align, AllocKind::LiveData)\n             }\n             Some(GlobalAlloc::Function(_)) => bug!(\"We already checked function pointers above\"),\n             // The rest must be dead.\n             None => {\n-                if let AllocCheck::MaybeDead = liveness {\n-                    // Deallocated pointers are allowed, we should be able to find\n-                    // them in the map.\n-                    Ok(*self\n-                        .memory\n-                        .dead_alloc_map\n-                        .get(&id)\n-                        .expect(\"deallocated pointers should all be recorded in `dead_alloc_map`\"))\n-                } else {\n-                    throw_ub!(PointerUseAfterFree(id))\n-                }\n+                // Deallocated pointers are allowed, we should be able to find\n+                // them in the map.\n+                let (size, align) = *self\n+                    .memory\n+                    .dead_alloc_map\n+                    .get(&id)\n+                    .expect(\"deallocated pointers should all be recorded in `dead_alloc_map`\");\n+                (size, align, AllocKind::Dead)\n             }\n         }\n     }\n \n+    /// Obtain the size and alignment of a live allocation.\n+    pub fn get_live_alloc_size_and_align(&self, id: AllocId) -> InterpResult<'tcx, (Size, Align)> {\n+        let (size, align, kind) = self.get_alloc_info(id);\n+        if matches!(kind, AllocKind::Dead) {\n+            throw_ub!(PointerUseAfterFree(id))\n+        }\n+        Ok((size, align))\n+    }\n+\n     fn get_fn_alloc(&self, id: AllocId) -> Option<FnVal<'tcx, M::ExtraFnVal>> {\n         if let Some(extra) = self.memory.extra_fn_ptr_map.get(&id) {\n             Some(FnVal::Other(*extra))\n@@ -1187,9 +1172,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let ptr = self.scalar_to_ptr(scalar)?;\n                 match self.ptr_try_get_alloc_id(ptr) {\n                     Ok((alloc_id, offset, _)) => {\n-                        let (size, _align) = self\n-                            .get_alloc_size_and_align(alloc_id, AllocCheck::MaybeDead)\n-                            .expect(\"alloc info with MaybeDead cannot fail\");\n+                        let (size, _align, _kind) = self.get_alloc_info(alloc_id);\n                         // If the pointer is out-of-bounds, it may be null.\n                         // Note that one-past-the-end (offset == size) is still inbounds, and never null.\n                         offset > size"}, {"sha": "92f0a7498e3ee536c890ba8c111b0cdf0d889a30", "filename": "compiler/rustc_const_eval/src/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmod.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -23,7 +23,7 @@ pub use self::eval_context::{\n };\n pub use self::intern::{intern_const_alloc_recursive, InternKind};\n pub use self::machine::{compile_time_machine, AllocMap, Machine, MayLeak, StackPopJump};\n-pub use self::memory::{AllocCheck, AllocRef, AllocRefMut, FnVal, Memory, MemoryKind};\n+pub use self::memory::{AllocKind, AllocRef, AllocRefMut, FnVal, Memory, MemoryKind};\n pub use self::operand::{ImmTy, Immediate, OpTy, Operand};\n pub use self::place::{MPlaceTy, MemPlace, MemPlaceMeta, Place, PlaceTy};\n pub use self::validity::{CtfeValidationMode, RefTracking};"}, {"sha": "3096af90d47702d481f7d39934c4784a1c6ec6c5", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -932,7 +932,7 @@ fn describe_codegen_flags() {\n     print_flag_list(\"-C\", config::CG_OPTIONS);\n }\n \n-fn print_flag_list<T>(\n+pub fn print_flag_list<T>(\n     cmdline_opt: &str,\n     flag_list: &[(&'static str, T, &'static str, &'static str)],\n ) {"}, {"sha": "42d52446ab6c72615887430790a430f2ae7a0c2b", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -79,7 +79,7 @@ pub fn find_param_with_region<'tcx>(\n             // May return None; sometimes the tables are not yet populated.\n             let ty = fn_sig.inputs()[index];\n             let mut found_anon_region = false;\n-            let new_param_ty = tcx.fold_regions(ty, &mut false, |r, _| {\n+            let new_param_ty = tcx.fold_regions(ty, |r, _| {\n                 if r == anon_region {\n                     found_anon_region = true;\n                     replace_region"}, {"sha": "68c709a2e24d3517464abeeeb38f8e514395bbca", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -868,7 +868,7 @@ impl<'tcx> LexicalRegionResolutions<'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        tcx.fold_regions(value, &mut false, |r, _db| match *r {\n+        tcx.fold_regions(value, |r, _db| match *r {\n             ty::ReVar(rid) => self.resolve_var(rid),\n             _ => r,\n         })"}, {"sha": "1c1906f3375af7d0c115b3f36546b31309a7a1b6", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -141,17 +141,13 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     ///   `('a, K)` in this list tells us that the bounds in scope\n     ///   indicate that `K: 'a`, where `K` is either a generic\n     ///   parameter like `T` or a projection like `T::Item`.\n-    /// - `implicit_region_bound`: if some, this is a region bound\n-    ///   that is considered to hold for all type parameters (the\n-    ///   function body).\n     /// - `param_env` is the parameter environment for the enclosing function.\n     /// - `body_id` is the body-id whose region obligations are being\n     ///   processed.\n     #[instrument(level = \"debug\", skip(self, region_bound_pairs_map))]\n     pub fn process_registered_region_obligations(\n         &self,\n         region_bound_pairs_map: &FxHashMap<hir::HirId, RegionBoundPairs<'tcx>>,\n-        implicit_region_bound: Option<ty::Region<'tcx>>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) {\n         assert!(\n@@ -170,13 +166,8 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n             let sup_type = self.resolve_vars_if_possible(sup_type);\n \n             if let Some(region_bound_pairs) = region_bound_pairs_map.get(&body_id) {\n-                let outlives = &mut TypeOutlives::new(\n-                    self,\n-                    self.tcx,\n-                    &region_bound_pairs,\n-                    implicit_region_bound,\n-                    param_env,\n-                );\n+                let outlives =\n+                    &mut TypeOutlives::new(self, self.tcx, &region_bound_pairs, None, param_env);\n                 outlives.type_must_outlive(origin, sup_type, sub_region);\n             } else {\n                 self.tcx.sess.delay_span_bug("}, {"sha": "86b025dce5edac979f911adbd82c24eb358e9404", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -16,6 +16,11 @@ use rustc_middle::ty::{self, EarlyBinder, Ty, TyCtxt};\n pub struct VerifyBoundCx<'cx, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     region_bound_pairs: &'cx RegionBoundPairs<'tcx>,\n+    /// During borrowck, if there are no outlives bounds on a generic\n+    /// parameter `T`, we assume that `T: 'in_fn_body` holds.\n+    ///\n+    /// Outside of borrowck the only way to prove `T: '?0` is by\n+    /// setting  `'?0` to `'empty`.\n     implicit_region_bound: Option<ty::Region<'tcx>>,\n     param_env: ty::ParamEnv<'tcx>,\n }\n@@ -263,8 +268,8 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         //     fn foo<'a, A>(x: &'a A) { x.bar() }\n         //\n         // The problem is that the type of `x` is `&'a A`. To be\n-        // well-formed, then, A must be lower-generic by `'a`, but we\n-        // don't know that this holds from first principles.\n+        // well-formed, then, A must outlive `'a`, but we don't know that\n+        // this holds from first principles.\n         let from_region_bound_pairs = self.region_bound_pairs.iter().filter_map(|&(r, p)| {\n             debug!(\n                 \"declared_generic_bounds_from_env_for_erased_ty: region_bound_pair = {:?}\","}, {"sha": "ed8de24a65eefbf3b93d90746d9575d072c484f4", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 29, "deletions": 38, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -863,7 +863,7 @@ pub enum ObjectSafetyViolation {\n \n impl ObjectSafetyViolation {\n     pub fn error_msg(&self) -> Cow<'static, str> {\n-        match *self {\n+        match self {\n             ObjectSafetyViolation::SizedSelf(_) => \"it requires `Self: Sized`\".into(),\n             ObjectSafetyViolation::SupertraitSelf(ref spans) => {\n                 if spans.iter().any(|sp| *sp != DUMMY_SP) {\n@@ -873,7 +873,7 @@ impl ObjectSafetyViolation {\n                         .into()\n                 }\n             }\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod(_, _, _), _) => {\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod(_), _) => {\n                 format!(\"associated function `{}` has no `self` parameter\", name).into()\n             }\n             ObjectSafetyViolation::Method(\n@@ -897,9 +897,11 @@ impl ObjectSafetyViolation {\n             ObjectSafetyViolation::Method(name, MethodViolationCode::Generic, _) => {\n                 format!(\"method `{}` has generic type parameters\", name).into()\n             }\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::UndispatchableReceiver, _) => {\n-                format!(\"method `{}`'s `self` parameter cannot be dispatched on\", name).into()\n-            }\n+            ObjectSafetyViolation::Method(\n+                name,\n+                MethodViolationCode::UndispatchableReceiver(_),\n+                _,\n+            ) => format!(\"method `{}`'s `self` parameter cannot be dispatched on\", name).into(),\n             ObjectSafetyViolation::AssocConst(name, DUMMY_SP) => {\n                 format!(\"it contains associated `const` `{}`\", name).into()\n             }\n@@ -911,51 +913,40 @@ impl ObjectSafetyViolation {\n     }\n \n     pub fn solution(&self, err: &mut Diagnostic) {\n-        match *self {\n+        match self {\n             ObjectSafetyViolation::SizedSelf(_) | ObjectSafetyViolation::SupertraitSelf(_) => {}\n             ObjectSafetyViolation::Method(\n                 name,\n-                MethodViolationCode::StaticMethod(sugg, self_span, has_args),\n+                MethodViolationCode::StaticMethod(Some((add_self_sugg, make_sized_sugg))),\n                 _,\n             ) => {\n                 err.span_suggestion(\n-                    self_span,\n-                    &format!(\n+                    add_self_sugg.1,\n+                    format!(\n                         \"consider turning `{}` into a method by giving it a `&self` argument\",\n                         name\n                     ),\n-                    format!(\"&self{}\", if has_args { \", \" } else { \"\" }),\n+                    add_self_sugg.0.to_string(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+                err.span_suggestion(\n+                    make_sized_sugg.1,\n+                    format!(\n+                        \"alternatively, consider constraining `{}` so it does not apply to \\\n+                             trait objects\",\n+                        name\n+                    ),\n+                    make_sized_sugg.0.to_string(),\n                     Applicability::MaybeIncorrect,\n                 );\n-                match sugg {\n-                    Some((sugg, span)) => {\n-                        err.span_suggestion(\n-                            span,\n-                            &format!(\n-                                \"alternatively, consider constraining `{}` so it does not apply to \\\n-                                 trait objects\",\n-                                name\n-                            ),\n-                            sugg,\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    }\n-                    None => {\n-                        err.help(&format!(\n-                            \"consider turning `{}` into a method by giving it a `&self` \\\n-                             argument or constraining it so it does not apply to trait objects\",\n-                            name\n-                        ));\n-                    }\n-                }\n             }\n             ObjectSafetyViolation::Method(\n                 name,\n-                MethodViolationCode::UndispatchableReceiver,\n-                span,\n+                MethodViolationCode::UndispatchableReceiver(Some(span)),\n+                _,\n             ) => {\n                 err.span_suggestion(\n-                    span,\n+                    *span,\n                     &format!(\n                         \"consider changing method `{}`'s `self` parameter to be `&self`\",\n                         name\n@@ -991,13 +982,13 @@ impl ObjectSafetyViolation {\n }\n \n /// Reasons a method might not be object-safe.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, PartialOrd, Ord)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, HashStable, PartialOrd, Ord)]\n pub enum MethodViolationCode {\n     /// e.g., `fn foo()`\n-    StaticMethod(Option<(&'static str, Span)>, Span, bool /* has args */),\n+    StaticMethod(Option<(/* add &self */ (String, Span), /* add Self: Sized */ (String, Span))>),\n \n     /// e.g., `fn foo(&self, x: Self)`\n-    ReferencesSelfInput(usize),\n+    ReferencesSelfInput(Option<Span>),\n \n     /// e.g., `fn foo(&self) -> Self`\n     ReferencesSelfOutput,\n@@ -1009,7 +1000,7 @@ pub enum MethodViolationCode {\n     Generic,\n \n     /// the method's receiver (`self` argument) can't be dispatched on\n-    UndispatchableReceiver,\n+    UndispatchableReceiver(Option<Span>),\n }\n \n /// These are the error cases for `codegen_fulfill_obligation`."}, {"sha": "a6310ae5e66bda9b4aea10c176709f150d053c53", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -465,13 +465,12 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn fold_regions<T>(\n         self,\n         value: T,\n-        skipped_regions: &mut bool,\n         mut f: impl FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,\n     ) -> T\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        value.fold_with(&mut RegionFolder::new(self, skipped_regions, &mut f))\n+        value.fold_with(&mut RegionFolder::new(self, &mut f))\n     }\n \n     /// Invoke `callback` on every region appearing free in `value`.\n@@ -579,7 +578,6 @@ impl<'tcx> TyCtxt<'tcx> {\n \n pub struct RegionFolder<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    skipped_regions: &'a mut bool,\n \n     /// Stores the index of a binder *just outside* the stuff we have\n     /// visited.  So this begins as INNERMOST; when we pass through a\n@@ -597,10 +595,9 @@ impl<'a, 'tcx> RegionFolder<'a, 'tcx> {\n     #[inline]\n     pub fn new(\n         tcx: TyCtxt<'tcx>,\n-        skipped_regions: &'a mut bool,\n         fold_region_fn: &'a mut dyn FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,\n     ) -> RegionFolder<'a, 'tcx> {\n-        RegionFolder { tcx, skipped_regions, current_index: ty::INNERMOST, fold_region_fn }\n+        RegionFolder { tcx, current_index: ty::INNERMOST, fold_region_fn }\n     }\n }\n \n@@ -624,7 +621,6 @@ impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n         match *r {\n             ty::ReLateBound(debruijn, _) if debruijn < self.current_index => {\n                 debug!(?self.current_index, \"skipped bound region\");\n-                *self.skipped_regions = true;\n                 r\n             }\n             _ => {"}, {"sha": "90ff07cba026a595b77a85e369204f95e875014d", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -220,7 +220,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                 .map(|&(id, _)| (id, vec![]))\n                 .collect();\n \n-            infcx.process_registered_region_obligations(&body_id_map, None, full_env);\n+            infcx.process_registered_region_obligations(&body_id_map, full_env);\n \n             let region_data = infcx\n                 .inner"}, {"sha": "2b26b916d32899b239496c2999e2c2b4ef679e6c", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -407,11 +407,7 @@ fn resolve_negative_obligation<'cx, 'tcx>(\n     // function bodies with closures).\n     outlives_env.save_implied_bounds(CRATE_HIR_ID);\n \n-    infcx.process_registered_region_obligations(\n-        outlives_env.region_bound_pairs_map(),\n-        Some(tcx.lifetimes.re_root_empty),\n-        param_env,\n-    );\n+    infcx.process_registered_region_obligations(outlives_env.region_bound_pairs_map(), param_env);\n \n     let errors = infcx.resolve_regions(region_context, &outlives_env);\n "}, {"sha": "8d3445919156fd0c77d4c82f46971b1b81b93e26", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 45, "deletions": 33, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -366,15 +366,9 @@ fn object_safety_violation_for_method(\n     // Get an accurate span depending on the violation.\n     violation.map(|v| {\n         let node = tcx.hir().get_if_local(method.def_id);\n-        let span = match (v, node) {\n-            (MethodViolationCode::ReferencesSelfInput(arg), Some(node)) => node\n-                .fn_decl()\n-                .and_then(|decl| decl.inputs.get(arg + 1))\n-                .map_or(method.ident(tcx).span, |arg| arg.span),\n-            (MethodViolationCode::UndispatchableReceiver, Some(node)) => node\n-                .fn_decl()\n-                .and_then(|decl| decl.inputs.get(0))\n-                .map_or(method.ident(tcx).span, |arg| arg.span),\n+        let span = match (&v, node) {\n+            (MethodViolationCode::ReferencesSelfInput(Some(span)), _) => *span,\n+            (MethodViolationCode::UndispatchableReceiver(Some(span)), _) => *span,\n             (MethodViolationCode::ReferencesSelfOutput, Some(node)) => {\n                 node.fn_decl().map_or(method.ident(tcx).span, |decl| decl.output.span())\n             }\n@@ -397,32 +391,41 @@ fn virtual_call_violation_for_method<'tcx>(\n \n     // The method's first parameter must be named `self`\n     if !method.fn_has_self_parameter {\n-        // We'll attempt to provide a structured suggestion for `Self: Sized`.\n-        let sugg =\n-            tcx.hir().get_if_local(method.def_id).as_ref().and_then(|node| node.generics()).map(\n-                |generics| match generics.predicates {\n-                    [] => (\" where Self: Sized\", generics.where_clause_span),\n-                    [.., pred] => (\", Self: Sized\", pred.span().shrink_to_hi()),\n-                },\n-            );\n-        // Get the span pointing at where the `self` receiver should be.\n-        let sm = tcx.sess.source_map();\n-        let self_span = method.ident(tcx).span.to(tcx\n-            .hir()\n-            .span_if_local(method.def_id)\n-            .unwrap_or_else(|| sm.next_point(method.ident(tcx).span))\n-            .shrink_to_hi());\n-        let self_span = sm.span_through_char(self_span, '(').shrink_to_hi();\n-        return Some(MethodViolationCode::StaticMethod(\n-            sugg,\n-            self_span,\n-            !sig.inputs().skip_binder().is_empty(),\n-        ));\n+        let sugg = if let Some(hir::Node::TraitItem(hir::TraitItem {\n+            generics,\n+            kind: hir::TraitItemKind::Fn(sig, _),\n+            ..\n+        })) = tcx.hir().get_if_local(method.def_id).as_ref()\n+        {\n+            let sm = tcx.sess.source_map();\n+            Some((\n+                (\n+                    format!(\"&self{}\", if sig.decl.inputs.is_empty() { \"\" } else { \", \" }),\n+                    sm.span_through_char(sig.span, '(').shrink_to_hi(),\n+                ),\n+                (\n+                    format!(\"{} Self: Sized\", generics.add_where_or_trailing_comma()),\n+                    generics.tail_span_for_predicate_suggestion(),\n+                ),\n+            ))\n+        } else {\n+            None\n+        };\n+        return Some(MethodViolationCode::StaticMethod(sugg));\n     }\n \n-    for (i, &input_ty) in sig.skip_binder().inputs()[1..].iter().enumerate() {\n+    for (i, &input_ty) in sig.skip_binder().inputs().iter().enumerate().skip(1) {\n         if contains_illegal_self_type_reference(tcx, trait_def_id, sig.rebind(input_ty)) {\n-            return Some(MethodViolationCode::ReferencesSelfInput(i));\n+            let span = if let Some(hir::Node::TraitItem(hir::TraitItem {\n+                kind: hir::TraitItemKind::Fn(sig, _),\n+                ..\n+            })) = tcx.hir().get_if_local(method.def_id).as_ref()\n+            {\n+                Some(sig.decl.inputs[i].span)\n+            } else {\n+                None\n+            };\n+            return Some(MethodViolationCode::ReferencesSelfInput(span));\n         }\n     }\n     if contains_illegal_self_type_reference(tcx, trait_def_id, sig.output()) {\n@@ -456,7 +459,16 @@ fn virtual_call_violation_for_method<'tcx>(\n     // `Receiver: Unsize<Receiver[Self => dyn Trait]>`.\n     if receiver_ty != tcx.types.self_param {\n         if !receiver_is_dispatchable(tcx, method, receiver_ty) {\n-            return Some(MethodViolationCode::UndispatchableReceiver);\n+            let span = if let Some(hir::Node::TraitItem(hir::TraitItem {\n+                kind: hir::TraitItemKind::Fn(sig, _),\n+                ..\n+            })) = tcx.hir().get_if_local(method.def_id).as_ref()\n+            {\n+                Some(sig.decl.inputs[0].span)\n+            } else {\n+                None\n+            };\n+            return Some(MethodViolationCode::UndispatchableReceiver(span));\n         } else {\n             // Do sanity check to make sure the receiver actually has the layout of a pointer.\n "}, {"sha": "6ee989070b429ebff0d1b1e00ba21f2363bd5fd3", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -225,7 +225,7 @@ pub fn resolve_interior<'a, 'tcx>(\n                 // Note that each region slot in the types gets a new fresh late bound region,\n                 // which means that none of the regions inside relate to any other, even if\n                 // typeck had previously found constraints that would cause them to be related.\n-                let folded = fcx.tcx.fold_regions(erased, &mut false, |_, current_depth| {\n+                let folded = fcx.tcx.fold_regions(erased, |_, current_depth| {\n                     let br = ty::BoundRegion {\n                         var: ty::BoundVar::from_u32(counter),\n                         kind: ty::BrAnon(counter),"}, {"sha": "0ce63922098948e4ebc35c519cd216d3c0ef8b38", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -366,7 +366,6 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n     fn resolve_regions_and_report_errors(&self) {\n         self.infcx.process_registered_region_obligations(\n             self.outlives_environment.region_bound_pairs_map(),\n-            Some(self.tcx.lifetimes.re_root_empty),\n             self.param_env,\n         );\n "}, {"sha": "40344b2ed602167681af335c9522fbe4b9f3e2a7", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -596,13 +596,7 @@ fn ty_known_to_outlive<'tcx>(\n ) -> bool {\n     resolve_regions_with_wf_tys(tcx, id, param_env, &wf_tys, |infcx, region_bound_pairs| {\n         let origin = infer::RelateParamBound(DUMMY_SP, ty, None);\n-        let outlives = &mut TypeOutlives::new(\n-            infcx,\n-            tcx,\n-            region_bound_pairs,\n-            Some(infcx.tcx.lifetimes.re_root_empty),\n-            param_env,\n-        );\n+        let outlives = &mut TypeOutlives::new(infcx, tcx, region_bound_pairs, None, param_env);\n         outlives.type_must_outlive(origin, ty, region);\n     })\n }"}, {"sha": "2a52167c59767fafc5ba72862e8142568fcada24", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -393,7 +393,7 @@ impl<'tcx> AstConv<'tcx> for ItemCtxt<'tcx> {\n     }\n \n     fn ct_infer(&self, ty: Ty<'tcx>, _: Option<&ty::GenericParamDef>, span: Span) -> Const<'tcx> {\n-        let ty = self.tcx.fold_regions(ty, &mut false, |r, _| match *r {\n+        let ty = self.tcx.fold_regions(ty, |r, _| match *r {\n             ty::ReErased => self.tcx.lifetimes.re_static,\n             _ => r,\n         });\n@@ -1917,7 +1917,7 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n         Some(ty) => {\n             let fn_sig = tcx.typeck(def_id).liberated_fn_sigs()[hir_id];\n             // Typeck doesn't expect erased regions to be returned from `type_of`.\n-            let fn_sig = tcx.fold_regions(fn_sig, &mut false, |r, _| match *r {\n+            let fn_sig = tcx.fold_regions(fn_sig, |r, _| match *r {\n                 ty::ReErased => tcx.lifetimes.re_static,\n                 _ => r,\n             });"}, {"sha": "6ee2b5449167c3701590ee6031d9f070ea52b000", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -772,7 +772,7 @@ fn infer_placeholder_type<'a>(\n     }\n \n     // Typeck doesn't expect erased regions to be returned from `type_of`.\n-    tcx.fold_regions(ty, &mut false, |r, _| match *r {\n+    tcx.fold_regions(ty, |r, _| match *r {\n         ty::ReErased => tcx.lifetimes.re_static,\n         _ => r,\n     })"}, {"sha": "5ee6db43fda24e5aeea513450d0fc691ee70f86f", "filename": "library/alloc/tests/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/library%2Falloc%2Ftests%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/library%2Falloc%2Ftests%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Ffmt.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -207,7 +207,7 @@ fn test_format_macro_interface() {\n     {\n         let val = usize::MAX;\n         let exp = format!(\"{val:#x}\");\n-        t!(format!(\"{:p}\", val as *const isize), exp);\n+        t!(format!(\"{:p}\", std::ptr::invalid::<isize>(val)), exp);\n     }\n \n     // Escaping"}, {"sha": "8a5a06b3440f85cf33b614091b26759a442c90e9", "filename": "library/core/tests/alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/library%2Fcore%2Ftests%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/library%2Fcore%2Ftests%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Falloc.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -1,5 +1,5 @@\n use core::alloc::Layout;\n-use core::ptr::NonNull;\n+use core::ptr::{self, NonNull};\n \n #[test]\n fn const_unchecked_layout() {\n@@ -9,7 +9,7 @@ fn const_unchecked_layout() {\n     const DANGLING: NonNull<u8> = LAYOUT.dangling();\n     assert_eq!(LAYOUT.size(), SIZE);\n     assert_eq!(LAYOUT.align(), ALIGN);\n-    assert_eq!(Some(DANGLING), NonNull::new(ALIGN as *mut u8));\n+    assert_eq!(Some(DANGLING), NonNull::new(ptr::invalid_mut(ALIGN)));\n }\n \n #[test]"}, {"sha": "f7934d062a3798051fbbbbf57bcefb832c5d3963", "filename": "library/core/tests/hash/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/library%2Fcore%2Ftests%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/library%2Fcore%2Ftests%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fhash%2Fmod.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -2,6 +2,7 @@ mod sip;\n \n use std::default::Default;\n use std::hash::{BuildHasher, Hash, Hasher};\n+use std::ptr;\n use std::rc::Rc;\n \n struct MyHasher {\n@@ -69,10 +70,10 @@ fn test_writer_hasher() {\n     let cs: Rc<[u8]> = Rc::new([1, 2, 3]);\n     assert_eq!(hash(&cs), 9);\n \n-    let ptr = 5_usize as *const i32;\n+    let ptr = ptr::invalid::<i32>(5_usize);\n     assert_eq!(hash(&ptr), 5);\n \n-    let ptr = 5_usize as *mut i32;\n+    let ptr = ptr::invalid_mut::<i32>(5_usize);\n     assert_eq!(hash(&ptr), 5);\n \n     if cfg!(miri) {"}, {"sha": "187a7db7fcb832e229b12e12359f65525adf27fb", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -353,9 +353,9 @@ fn align_offset_zst() {\n     // all, because no amount of elements will align the pointer.\n     let mut p = 1;\n     while p < 1024 {\n-        assert_eq!((p as *const ()).align_offset(p), 0);\n+        assert_eq!(ptr::invalid::<()>(p).align_offset(p), 0);\n         if p != 1 {\n-            assert_eq!(((p + 1) as *const ()).align_offset(p), !0);\n+            assert_eq!(ptr::invalid::<()>(p + 1).align_offset(p), !0);\n         }\n         p = (p + 1).next_power_of_two();\n     }\n@@ -371,7 +371,7 @@ fn align_offset_stride1() {\n             let expected = ptr % align;\n             let offset = if expected == 0 { 0 } else { align - expected };\n             assert_eq!(\n-                (ptr as *const u8).align_offset(align),\n+                ptr::invalid::<u8>(ptr).align_offset(align),\n                 offset,\n                 \"ptr = {}, align = {}, size = 1\",\n                 ptr,\n@@ -434,14 +434,14 @@ fn align_offset_weird_strides() {\n     while align < limit {\n         for ptr in 1usize..4 * align {\n             unsafe {\n-                x |= test_weird_stride::<A3>(ptr as *const A3, align);\n-                x |= test_weird_stride::<A4>(ptr as *const A4, align);\n-                x |= test_weird_stride::<A5>(ptr as *const A5, align);\n-                x |= test_weird_stride::<A6>(ptr as *const A6, align);\n-                x |= test_weird_stride::<A7>(ptr as *const A7, align);\n-                x |= test_weird_stride::<A8>(ptr as *const A8, align);\n-                x |= test_weird_stride::<A9>(ptr as *const A9, align);\n-                x |= test_weird_stride::<A10>(ptr as *const A10, align);\n+                x |= test_weird_stride::<A3>(ptr::invalid::<A3>(ptr), align);\n+                x |= test_weird_stride::<A4>(ptr::invalid::<A4>(ptr), align);\n+                x |= test_weird_stride::<A5>(ptr::invalid::<A5>(ptr), align);\n+                x |= test_weird_stride::<A6>(ptr::invalid::<A6>(ptr), align);\n+                x |= test_weird_stride::<A7>(ptr::invalid::<A7>(ptr), align);\n+                x |= test_weird_stride::<A8>(ptr::invalid::<A8>(ptr), align);\n+                x |= test_weird_stride::<A9>(ptr::invalid::<A9>(ptr), align);\n+                x |= test_weird_stride::<A10>(ptr::invalid::<A10>(ptr), align);\n             }\n         }\n         align = (align + 1).next_power_of_two();\n@@ -479,8 +479,8 @@ fn ptr_metadata() {\n     let () = metadata(&[4, 7]);\n     let () = metadata(&(4, String::new()));\n     let () = metadata(&Pair(4, String::new()));\n-    let () = metadata(0 as *const Extern);\n-    let () = metadata(0 as *const <&u32 as std::ops::Deref>::Target);\n+    let () = metadata(ptr::null::<()>() as *const Extern);\n+    let () = metadata(ptr::null::<()>() as *const <&u32 as std::ops::Deref>::Target);\n \n     assert_eq!(metadata(\"foo\"), 3_usize);\n     assert_eq!(metadata(&[4, 7][..]), 2_usize);"}, {"sha": "38a3a0adad98ebb898f717fa7a8a87502740de7f", "filename": "library/core/tests/waker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/library%2Fcore%2Ftests%2Fwaker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/library%2Fcore%2Ftests%2Fwaker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fwaker.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -3,7 +3,7 @@ use std::task::{RawWaker, RawWakerVTable, Waker};\n \n #[test]\n fn test_waker_getters() {\n-    let raw_waker = RawWaker::new(42usize as *mut (), &WAKER_VTABLE);\n+    let raw_waker = RawWaker::new(ptr::invalid_mut(42usize), &WAKER_VTABLE);\n     assert_eq!(raw_waker.data() as usize, 42);\n     assert!(ptr::eq(raw_waker.vtable(), &WAKER_VTABLE));\n \n@@ -15,7 +15,7 @@ fn test_waker_getters() {\n }\n \n static WAKER_VTABLE: RawWakerVTable = RawWakerVTable::new(\n-    |data| RawWaker::new((data as usize + 1) as *mut (), &WAKER_VTABLE),\n+    |data| RawWaker::new(ptr::invalid_mut(data as usize + 1), &WAKER_VTABLE),\n     |_| {},\n     |_| {},\n     |_| {},"}, {"sha": "6e3651665c8c406b2f49897d39a16e8eb807113d", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -6,6 +6,7 @@ use std::path::PathBuf;\n use std::str::FromStr;\n \n use rustc_data_structures::fx::FxHashMap;\n+use rustc_driver::print_flag_list;\n use rustc_session::config::{\n     self, parse_crate_types_from_list, parse_externs, parse_target_triple, CrateType,\n };\n@@ -310,11 +311,15 @@ impl RenderOptions {\n impl Options {\n     /// Parses the given command-line for options. If an error message or other early-return has\n     /// been printed, returns `Err` with the exit code.\n-    pub(crate) fn from_matches(matches: &getopts::Matches) -> Result<Options, i32> {\n+    pub(crate) fn from_matches(\n+        matches: &getopts::Matches,\n+        args: Vec<String>,\n+    ) -> Result<Options, i32> {\n+        let args = &args[1..];\n         // Check for unstable options.\n         nightly_options::check_nightly_options(matches, &opts());\n \n-        if matches.opt_present(\"h\") || matches.opt_present(\"help\") {\n+        if args.is_empty() || matches.opt_present(\"h\") || matches.opt_present(\"help\") {\n             crate::usage(\"rustdoc\");\n             return Err(0);\n         } else if matches.opt_present(\"version\") {\n@@ -335,6 +340,21 @@ impl Options {\n         // check for deprecated options\n         check_deprecated_options(matches, &diag);\n \n+        let z_flags = matches.opt_strs(\"Z\");\n+        if z_flags.iter().any(|x| *x == \"help\") {\n+            print_flag_list(\"-Z\", config::DB_OPTIONS);\n+            return Err(0);\n+        }\n+        let c_flags = matches.opt_strs(\"C\");\n+        if c_flags.iter().any(|x| *x == \"help\") {\n+            print_flag_list(\"-C\", config::CG_OPTIONS);\n+            return Err(0);\n+        }\n+        let w_flags = matches.opt_strs(\"W\");\n+        if w_flags.iter().any(|x| *x == \"help\") {\n+            print_flag_list(\"-W\", config::DB_OPTIONS);\n+            return Err(0);\n+        }\n         if matches.opt_strs(\"passes\") == [\"list\"] {\n             println!(\"Available passes for running rustdoc:\");\n             for pass in passes::PASSES {"}, {"sha": "428519dbc16b31df8814af4fc89460d93f66c9b2", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -252,8 +252,11 @@ fn from_clean_item(item: clean::Item, tcx: TyCtxt<'_>) -> ItemEnum {\n             bounds: b.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n             default: None,\n         },\n-        // FIXME: do not map to Typedef but to a custom variant\n-        AssocTypeItem(t, _) => ItemEnum::Typedef(t.into_tcx(tcx)),\n+        AssocTypeItem(t, b) => ItemEnum::AssocType {\n+            generics: t.generics.into_tcx(tcx),\n+            bounds: b.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n+            default: t.item_type.map(|ty| ty.into_tcx(tcx)),\n+        },\n         // `convert_item` early returns `None` for striped items and keywords.\n         StrippedItem(_) | KeywordItem(_) => unreachable!(),\n         ExternCrateItem { ref src } => ItemEnum::ExternCrate {"}, {"sha": "db4c3d102370097d35eab949f29208ca70911f88", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -686,7 +686,7 @@ fn main_args(at_args: &[String]) -> MainResult {\n \n     // Note that we discard any distinction between different non-zero exit\n     // codes from `from_matches` here.\n-    let options = match config::Options::from_matches(&matches) {\n+    let options = match config::Options::from_matches(&matches, args) {\n         Ok(opts) => opts,\n         Err(code) => {\n             return if code == 0 {"}, {"sha": "cacbcbf3933a44e4e2811fe98d92a3e356af344c", "filename": "src/test/run-make/issue-88756-default-output/Makefile", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2FMakefile?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -0,0 +1,4 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+all:\n+\t$(BARE_RUSTDOC) 2>&1 | sed -E 's@/nightly/|/beta/|/stable/|/1\\.[0-9]+\\.[0-9]+/@/$$CHANNEL/@g' | diff - output-default.stdout"}, {"sha": "8cbfac4f7d2f10d659e80fa048961e12d8981234", "filename": "src/test/run-make/issue-88756-default-output/README.md", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2FREADME.md?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -0,0 +1 @@\n+This is a test to verify that the default behavior of `rustdoc` is printing out help output instead of erroring out (#88756)."}, {"sha": "6d16fe5673bc136e848ac1d8278738fdd5e40770", "filename": "src/test/run-make/issue-88756-default-output/output-default.stdout", "status": "added", "additions": 193, "deletions": 0, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2Foutput-default.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2Foutput-default.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2Foutput-default.stdout?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -0,0 +1,193 @@\n+rustdoc [options] <input>\n+\n+Options:\n+    -h, --help          show this help message\n+    -V, --version       print rustdoc's version\n+    -v, --verbose       use verbose output\n+    -w, --output-format [html]\n+                        the output type to write\n+        --output PATH   Which directory to place the output. This option is\n+                        deprecated, use --out-dir instead.\n+    -o, --out-dir PATH  which directory to place the output\n+        --crate-name NAME\n+                        specify the name of this crate\n+        --crate-type [bin|lib|rlib|dylib|cdylib|staticlib|proc-macro]\n+                        Comma separated list of types of crates\n+                        for the compiler to emit\n+    -L, --library-path DIR\n+                        directory to add to crate search path\n+        --cfg           pass a --cfg to rustc\n+        --check-cfg     pass a --check-cfg to rustc\n+        --extern NAME[=PATH]\n+                        pass an --extern to rustc\n+        --extern-html-root-url NAME=URL\n+                        base URL to use for dependencies; for example,\n+                        \"std=/doc\" links std::vec::Vec to\n+                        /doc/std/vec/struct.Vec.html\n+        --extern-html-root-takes-precedence \n+                        give precedence to `--extern-html-root-url`, not\n+                        `html_root_url`\n+    -C, --codegen OPT[=VALUE]\n+                        pass a codegen option to rustc\n+        --document-private-items \n+                        document private items\n+        --document-hidden-items \n+                        document items that have doc(hidden)\n+        --test          run code examples as tests\n+        --test-args ARGS\n+                        arguments to pass to the test runner\n+        --test-run-directory PATH\n+                        The working directory in which to run tests\n+        --target TRIPLE target triple to document\n+        --markdown-css FILES\n+                        CSS files to include via <link> in a rendered Markdown\n+                        file\n+        --html-in-header FILES\n+                        files to include inline in the <head> section of a\n+                        rendered Markdown file or generated documentation\n+        --html-before-content FILES\n+                        files to include inline between <body> and the content\n+                        of a rendered Markdown file or generated documentation\n+        --html-after-content FILES\n+                        files to include inline between the content and\n+                        </body> of a rendered Markdown file or generated\n+                        documentation\n+        --markdown-before-content FILES\n+                        files to include inline between <body> and the content\n+                        of a rendered Markdown file or generated documentation\n+        --markdown-after-content FILES\n+                        files to include inline between the content and\n+                        </body> of a rendered Markdown file or generated\n+                        documentation\n+        --markdown-playground-url URL\n+                        URL to send code snippets to\n+        --markdown-no-toc \n+                        don't include table of contents\n+    -e, --extend-css PATH\n+                        To add some CSS rules with a given file to generate\n+                        doc with your own theme. However, your theme might\n+                        break if the rustdoc's generated HTML changes, so be\n+                        careful!\n+    -Z FLAG             internal and debugging options (only on nightly build)\n+        --sysroot PATH  Override the system root\n+        --playground-url URL\n+                        URL to send code snippets to, may be reset by\n+                        --markdown-playground-url or\n+                        `#![doc(html_playground_url=...)]`\n+        --display-doctest-warnings \n+                        show warnings that originate in doctests\n+        --crate-version VERSION\n+                        crate version to print into documentation\n+        --sort-modules-by-appearance \n+                        sort modules by where they appear in the program,\n+                        rather than alphabetically\n+        --default-theme THEME\n+                        Set the default theme. THEME should be the theme name,\n+                        generally lowercase. If an unknown default theme is\n+                        specified, the builtin default is used. The set of\n+                        themes, and the rustdoc built-in default, are not\n+                        stable.\n+        --default-setting SETTING[=VALUE]\n+                        Default value for a rustdoc setting (used when\n+                        \"rustdoc-SETTING\" is absent from web browser Local\n+                        Storage). If VALUE is not supplied, \"true\" is used.\n+                        Supported SETTINGs and VALUEs are not documented and\n+                        not stable.\n+        --theme FILES   additional themes which will be added to the generated\n+                        docs\n+        --check-theme FILES\n+                        check if given theme is valid\n+        --resource-suffix PATH\n+                        suffix to add to CSS and JavaScript files, e.g.,\n+                        \"light.css\" will become \"light-suffix.css\"\n+        --edition EDITION\n+                        edition to use when compiling rust code (default:\n+                        2015)\n+        --color auto|always|never\n+                        Configure coloring of output:\n+                        auto = colorize, if output goes to a tty (default);\n+                        always = always colorize output;\n+                        never = never colorize output\n+        --error-format human|json|short\n+                        How errors and other messages are produced\n+        --json CONFIG   Configure the structure of JSON diagnostics\n+        --disable-minification \n+                        Disable minification applied on JS files\n+    -A, --allow LINT    Set lint allowed\n+    -W, --warn LINT     Set lint warnings\n+        --force-warn LINT\n+                        Set lint force-warn\n+    -D, --deny LINT     Set lint denied\n+    -F, --forbid LINT   Set lint forbidden\n+        --cap-lints LEVEL\n+                        Set the most restrictive lint level. More restrictive\n+                        lints are capped at this level. By default, it is at\n+                        `forbid` level.\n+        --index-page PATH\n+                        Markdown file to be used as index page\n+        --enable-index-page \n+                        To enable generation of the index page\n+        --static-root-path PATH\n+                        Path string to force loading static files from in\n+                        output pages. If not set, uses combinations of '../'\n+                        to reach the documentation root.\n+        --disable-per-crate-search \n+                        disables generating the crate selector on the search\n+                        box\n+        --persist-doctests PATH\n+                        Directory to persist doctest executables into\n+        --show-coverage \n+                        calculate percentage of public items with\n+                        documentation\n+        --enable-per-target-ignores \n+                        parse ignore-foo for ignoring doctests on a per-target\n+                        basis\n+        --runtool The tool to run tests with when building for a different target than host\n+                        \n+        --runtool-arg One (of possibly many) arguments to pass to the runtool\n+                        \n+        --test-builder PATH\n+                        The rustc-like binary to use as the test builder\n+        --check         Run rustdoc checks\n+        --generate-redirect-map \n+                        Generate JSON file at the top level instead of\n+                        generating HTML redirection files\n+        --emit [unversioned-shared-resources,toolchain-shared-resources,invocation-specific]\n+                        Comma separated list of types of output for rustdoc to\n+                        emit\n+        --no-run        Compile doctests without running them\n+        --show-type-layout \n+                        Include the memory layout of types in the docs\n+        --nocapture     Don't capture stdout and stderr of tests\n+        --generate-link-to-definition \n+                        Make the identifiers in the HTML source code pages\n+                        navigable\n+        --scrape-examples-output-path collect function call information and output at the given path\n+                        \n+        --scrape-examples-target-crate collect function call information for functions from the target crate\n+                        \n+        --scrape-tests  Include test code when scraping examples\n+        --with-examples path to function call information (for displaying examples in the documentation)\n+                        \n+        --plugin-path DIR\n+                        removed, see issue #44136\n+                        <https://github.com/rust-lang/rust/issues/44136> for\n+                        more information\n+        --passes PASSES removed, see issue #44136\n+                        <https://github.com/rust-lang/rust/issues/44136> for\n+                        more information\n+        --plugins PLUGINS\n+                        removed, see issue #44136\n+                        <https://github.com/rust-lang/rust/issues/44136> for\n+                        more information\n+        --no-defaults   removed, see issue #44136\n+                        <https://github.com/rust-lang/rust/issues/44136> for\n+                        more information\n+    -r, --input-format [rust]\n+                        removed, see issue #44136\n+                        <https://github.com/rust-lang/rust/issues/44136> for\n+                        more information\n+\n+    @path               Read newline separated options from `path`\n+\n+More information available at https://doc.rust-lang.org/$CHANNEL/rustdoc/what-is-rustdoc.html"}, {"sha": "5df7576133a684ab8f887f442084e99062eb4886", "filename": "src/test/run-make/issue-88756-default-output/x.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2Fx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2Fx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2Fx.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -0,0 +1 @@\n+// nothing to see here"}, {"sha": "8ababbf5b4ebd76659800c295e8aef5aab9030db", "filename": "src/test/run-make/issue-88756-opt-help/Makefile", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2FMakefile?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -0,0 +1,4 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+all:\n+\t$(RUSTDOC) -W help 2>&1 | diff - output-default.stdout"}, {"sha": "9b742753f25b6b86300baaad0b3f3b97b463072c", "filename": "src/test/run-make/issue-88756-opt-help/README.md", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2FREADME.md?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -0,0 +1 @@\n+This is a test to verify that `rustdoc` behaves the same as rustc and prints out help output for its options like -W (#88756)."}, {"sha": "5cb7ecb649a962b89b9912e1ca8018f71e1f9da3", "filename": "src/test/run-make/issue-88756-opt-help/output-default.stdout", "status": "added", "additions": 193, "deletions": 0, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2Foutput-default.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2Foutput-default.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2Foutput-default.stdout?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -0,0 +1,193 @@\n+    -W                          allow-features=val -- only allow the listed language features to be enabled in code (space separated)\n+    -W                       always-encode-mir=val -- encode MIR of all functions into the crate metadata (default: no)\n+    -W               assume-incomplete-release=val -- make cfg(version) treat the current version as incomplete (default: no)\n+    -W                            asm-comments=val -- generate comments into the assembly (may change behavior) (default: no)\n+    -W                       assert-incr-state=val -- assert that the incremental cache is in given state: either `loaded` or `not-loaded`.\n+    -W                      binary-dep-depinfo=val -- include artifacts (sysroot, crate dependencies) used during compilation in dep-info (default: no)\n+    -W                       branch-protection=val -- set options for branch target identification and pointer authentication on AArch64\n+    -W                           cf-protection=val -- instrument control-flow architecture protection\n+    -W               cgu-partitioning-strategy=val -- the codegen unit partitioning strategy to use\n+    -W                                   chalk=val -- enable the experimental Chalk-based trait solving engine\n+    -W                         codegen-backend=val -- the backend to use\n+    -W                             combine-cgu=val -- combine CGUs into a single one\n+    -W                              crate-attr=val -- inject the given attribute in the crate\n+    -W                debug-info-for-profiling=val -- emit discriminators and other data necessary for AutoFDO\n+    -W                            debug-macros=val -- emit line numbers debug info inside macros (default: no)\n+    -W                 deduplicate-diagnostics=val -- deduplicate identical diagnostics (default: yes)\n+    -W                  dep-info-omit-d-target=val -- in dep-info output, omit targets for tracking dependencies of the dep-info files themselves (default: no)\n+    -W                               dep-tasks=val -- print tasks that execute and the color their dep node gets (requires debug build) (default: no)\n+    -W                                 dlltool=val -- import library generation tool (windows-gnu only)\n+    -W                 dont-buffer-diagnostics=val -- emit diagnostics rather than buffering (breaks NLL error downgrading, sorting) (default: no)\n+    -W                           drop-tracking=val -- enables drop tracking in generators (default: no)\n+    -W                        dual-proc-macros=val -- load proc macros for both target and host, but only link to the target (default: no)\n+    -W                          dump-dep-graph=val -- dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv) (default: no)\n+    -W                                dump-mir=val -- dump MIR state to file.\n+        `val` is used to select which passes and functions to dump. For example:\n+        `all` matches all passes and functions,\n+        `foo` matches all passes for functions whose name contains 'foo',\n+        `foo & ConstProp` only the 'ConstProp' pass for function names containing 'foo',\n+        `foo | bar` all passes for function names containing 'foo' or 'bar'.\n+    -W                       dump-mir-dataflow=val -- in addition to `.mir` files, create graphviz `.dot` files with dataflow results (default: no)\n+    -W                            dump-mir-dir=val -- the directory the MIR is dumped into (default: `mir_dump`)\n+    -W            dump-mir-exclude-pass-number=val -- exclude the pass number when dumping MIR (used in tests) (default: no)\n+    -W                       dump-mir-graphviz=val -- in addition to `.mir` files, create graphviz `.dot` files (and with `-Z instrument-coverage`, also create a `.dot` file for the MIR-derived coverage graph) (default: no)\n+    -W                       dump-mir-spanview=val -- in addition to `.mir` files, create `.html` files to view spans for all `statement`s (including terminators), only `terminator` spans, or computed `block` spans (one span encompassing a block's terminator and all statements). If `-Z instrument-coverage` is also enabled, create an additional `.html` file showing the computed coverage spans.\n+    -W                        emit-stack-sizes=val -- emit a section containing stack size metadata (default: no)\n+    -W                             fewer-names=val -- reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR) (default: no)\n+    -W              force-unstable-if-unmarked=val -- force all crates to be `rustc_private` unstable (default: no)\n+    -W                                    fuel=val -- set the optimization fuel quota for a crate\n+    -W                       function-sections=val -- whether each function should go in its own section\n+    -W                    future-incompat-test=val -- forces all lints to be future incompatible, used for internal testing (default: no)\n+    -W                                  gcc-ld=val -- implementation of ld used by cc\n+    -W                      graphviz-dark-mode=val -- use dark-themed colors in graphviz output (default: no)\n+    -W                           graphviz-font=val -- use the given `fontname` in graphviz output; can be overridden by setting environment variable `RUSTC_GRAPHVIZ_FONT` (default: `Courier, monospace`)\n+    -W                               hir-stats=val -- print some statistics about AST and HIR (default: no)\n+    -W                human-readable-cgu-names=val -- generate human-readable, predictable names for codegen units (default: no)\n+    -W                        identify-regions=val -- display unnamed regions as `'<id>`, using a non-ident unique id (default: no)\n+    -W                incremental-ignore-spans=val -- ignore spans during ICH computation -- used for testing (default: no)\n+    -W                        incremental-info=val -- print high-level information about incremental reuse (or the lack thereof) (default: no)\n+    -W              incremental-relative-spans=val -- hash spans relative to their parent item for incr. comp. (default: no)\n+    -W                  incremental-verify-ich=val -- verify incr. comp. hashes of green query instances (default: no)\n+    -W                              inline-mir=val -- enable MIR inlining (default: no)\n+    -W                    inline-mir-threshold=val -- a default MIR inlining threshold (default: 50)\n+    -W               inline-mir-hint-threshold=val -- inlining threshold for functions with inline hint (default: 100)\n+    -W                      inline-in-all-cgus=val -- control whether `#[inline]` functions are in all CGUs\n+    -W                             input-stats=val -- gather statistics about the input (default: no)\n+    -W                     instrument-coverage=val -- instrument the generated code to support LLVM source-based code coverage reports (note, the compiler build config must include `profiler = true`); implies `-C symbol-mangling-version=v0`. Optional values are:\n+        `=all` (implicit value)\n+        `=except-unused-generics`\n+        `=except-unused-functions`\n+        `=off` (default)\n+    -W                       instrument-mcount=val -- insert function instrument code for mcount-based tracing (default: no)\n+    -W                       keep-hygiene-data=val -- keep hygiene data after analysis (default: no)\n+    -W                   link-native-libraries=val -- link native libraries in the linker invocation (default: yes)\n+    -W                               link-only=val -- link the `.rlink` file generated by `-Z no-link` (default: no)\n+    -W                            llvm-plugins=val -- a list LLVM plugins to enable (space separated)\n+    -W                         llvm-time-trace=val -- generate JSON tracing data file from LLVM data (default: no)\n+    -W                         location-detail=val -- comma separated list of location details to be tracked when using caller_location valid options are `file`, `line`, and `column` (default: all)\n+    -W                                      ls=val -- list the symbols defined by a library crate (default: no)\n+    -W                         macro-backtrace=val -- show macro backtraces (default: no)\n+    -W                         merge-functions=val -- control the operation of the MergeFunctions LLVM pass, taking the same values as the target option of the same name\n+    -W                              meta-stats=val -- gather metadata statistics (default: no)\n+    -W                          mir-emit-retag=val -- emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 (default: no)\n+    -W                       mir-enable-passes=val -- use like `-Zmir-enable-passes=+DestProp,-InstCombine`. Forces the specified passes to be enabled, overriding all other checks. Passes that are not specified are enabled or disabled by other flags as usual.\n+    -W                           mir-opt-level=val -- MIR optimization level (0-4; default: 1 in non optimized builds and 2 in optimized builds)\n+    -W                         move-size-limit=val -- the size at which the `large_assignments` lint starts to be emitted\n+    -W                         mutable-noalias=val -- emit noalias metadata for mutable references (default: yes)\n+    -W                   new-llvm-pass-manager=val -- use new LLVM pass manager (default: no)\n+    -W                               nll-facts=val -- dump facts from NLL analysis into side files (default: no)\n+    -W                           nll-facts-dir=val -- the directory the NLL facts are dumped into (default: `nll-facts`)\n+    -W                             no-analysis=val -- parse and expand the source, but run no analysis\n+    -W                              no-codegen=val -- run all passes except codegen; no output\n+    -W              no-generate-arange-section=val -- omit DWARF address ranges that give faster lookups\n+    -W                     no-interleave-lints=val -- execute lints separately; allows benchmarking individual lints\n+    -W                           no-leak-check=val -- disable the 'leak check' for subtyping; unsound, but useful for tests\n+    -W                                 no-link=val -- compile without linking\n+    -W                        no-parallel-llvm=val -- run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO)\n+    -W                 no-unique-section-names=val -- do not use unique names for text and data sections when -Z function-sections is used\n+    -W                     no-profiler-runtime=val -- prevent automatic injection of the profiler_builtins crate\n+    -W                          normalize-docs=val -- normalize associated items in rustdoc when generating documentation\n+    -W                                     oom=val -- panic strategy for out-of-memory handling\n+    -W                  osx-rpath-install-name=val -- pass `-install_name @rpath/...` to the macOS linker (default: no)\n+    -W                       panic-abort-tests=val -- support compiling tests with panic=abort (default: no)\n+    -W                           panic-in-drop=val -- panic strategy for panics in drops\n+    -W                              parse-only=val -- parse only; do not compile, assemble, or link (default: no)\n+    -W                              perf-stats=val -- print some performance-related statistics (default: no)\n+    -W pick-stable-methods-before-any-unstable=val -- try to pick stable methods first before picking any unstable methods (default: yes)\n+    -W                                     plt=val -- whether to use the PLT when calling into shared libraries;\n+        only has effect for PIC code on systems with ELF binaries\n+        (default: PLT is disabled if full relro is enabled)\n+    -W                                polonius=val -- enable polonius-based borrow-checker (default: no)\n+    -W                            polymorphize=val -- perform polymorphization analysis\n+    -W                            pre-link-arg=val -- a single extra argument to prepend the linker invocation (can be used several times)\n+    -W                           pre-link-args=val -- extra arguments to prepend to the linker invocation (space separated)\n+    -W           precise-enum-drop-elaboration=val -- use a more precise version of drop elaboration for matches on enums (default: yes). This results in better codegen, but has caused miscompilations on some tier 2 platforms. See #77382 and #74551.\n+    -W                              print-fuel=val -- make rustc print the total optimization fuel used by a crate\n+    -W                       print-llvm-passes=val -- print the LLVM optimization passes being run (default: no)\n+    -W                        print-mono-items=val -- print the result of the monomorphization collection pass\n+    -W                        print-type-sizes=val -- print layout information for each type encountered (default: no)\n+    -W                    proc-macro-backtrace=val -- show backtraces for panics during proc-macro execution (default: no)\n+    -W                                 profile=val -- insert profiling code (default: no)\n+    -W                        profile-closures=val -- profile size of closures\n+    -W                            profile-emit=val -- file path to emit profiling data at runtime when using 'profile' (default based on relative source path)\n+    -W                        profiler-runtime=val -- name of the profiler runtime crate to automatically inject (default: `profiler_builtins`)\n+    -W                      profile-sample-use=val -- use the given `.prof` file for sampled profile-guided optimization (also known as AutoFDO)\n+    -W                         query-dep-graph=val -- enable queries of the dependency graph for regression testing (default: no)\n+    -W                        randomize-layout=val -- randomize the layout of types (default: no)\n+    -W                             layout-seed=val -- seed layout randomization\n+    -W                   relax-elf-relocations=val -- whether ELF relocations can be relaxed\n+    -W                             relro-level=val -- choose which RELRO level to use\n+    -W                        remap-cwd-prefix=val -- remap paths under the current working directory to this path prefix\n+    -W         simulate-remapped-rust-src-base=val -- simulate the effect of remap-debuginfo = true at bootstrapping by remapping path to rust's source base directory. only meant for testing purposes\n+    -W                     report-delayed-bugs=val -- immediately print bugs registered with `delay_span_bug` (default: no)\n+    -W                               sanitizer=val -- use a sanitizer\n+    -W          sanitizer-memory-track-origins=val -- enable origins tracking in MemorySanitizer\n+    -W                       sanitizer-recover=val -- enable recovery for selected sanitizers\n+    -W                  saturating-float-casts=val -- make float->int casts UB-free: numbers outside the integer type's range are clipped to the max/min integer respectively, and NaN is mapped to 0 (default: yes)\n+    -W                           save-analysis=val -- write syntax and type analysis (in JSON format) information, in addition to normal output (default: no)\n+    -W                            self-profile=val -- run the self profiler and output the raw event data\n+    -W                     self-profile-events=val -- specify the events recorded by the self profiler;\n+        for example: `-Z self-profile-events=default,query-keys`\n+        all options: none, all, default, generic-activity, query-provider, query-cache-hit\n+                     query-blocked, incr-cache-load, incr-result-hashing, query-keys, function-args, args, llvm, artifact-sizes\n+    -W                    self-profile-counter=val -- counter used by the self profiler (default: `wall-time`), one of:\n+        `wall-time` (monotonic clock, i.e. `std::time::Instant`)\n+        `instructions:u` (retired instructions, userspace-only)\n+        `instructions-minus-irqs:u` (subtracting hardware interrupt counts for extra accuracy)\n+    -W                          share-generics=val -- make the current crate share its generic instantiations\n+    -W                               show-span=val -- show spans for compiler debugging (expr|pat|ty)\n+    -W                              span-debug=val -- forward proc_macro::Span's `Debug` impl to `Span`\n+    -W                       span-free-formats=val -- exclude spans when debug-printing compiler state (default: no)\n+    -W                      src-hash-algorithm=val -- hash algorithm of source files in debug info (`md5`, `sha1`, or `sha256`)\n+    -W                         stack-protector=val -- control stack smash protection strategy (`rustc --print stack-protector-strategies` for details)\n+    -W                      strict-init-checks=val -- control if mem::uninitialized and mem::zeroed panic on more UB\n+    -W                                   strip=val -- tell the linker which information to strip (`none` (default), `debuginfo` or `symbols`)\n+    -W                        split-dwarf-kind=val -- split dwarf variant (only if -Csplit-debuginfo is enabled and on relevant platform)\n+        (default: `split`)\n+\n+        `split`: sections which do not require relocation are written into a DWARF object (`.dwo`)\n+                 file which is ignored by the linker\n+        `single`: sections which do not require relocation are written into object file but ignored\n+                  by the linker\n+    -W                    split-dwarf-inlining=val -- provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF\n+    -W                 symbol-mangling-version=val -- which mangling version to use for symbol names ('legacy' (default) or 'v0')\n+    -W                                   teach=val -- show extended diagnostic help (default: no)\n+    -W                               temps-dir=val -- the directory the intermediate files are written to\n+    -W                          terminal-width=val -- set the current terminal width\n+    -W                          translate-lang=val -- language identifier for diagnostic output\n+    -W                translate-additional-ftl=val -- additional fluent translation to preferentially use (for testing translation)\n+    -W        translate-directionality-markers=val -- emit directionality isolation markers in translated diagnostics\n+    -W                                tune-cpu=val -- select processor to schedule for (`rustc --print target-cpus` for details)\n+    -W                                 thinlto=val -- enable ThinLTO when possible\n+    -W                           thir-unsafeck=val -- use the THIR unsafety checker (default: no)\n+    -W                                 threads=val -- use a thread pool with N threads\n+    -W                                    time=val -- measure time of rustc processes (default: no)\n+    -W                        time-llvm-passes=val -- measure time of each LLVM pass (default: no)\n+    -W                             time-passes=val -- measure time of each rustc pass (default: no)\n+    -W                               tls-model=val -- choose the TLS model to use (`rustc --print tls-models` for details)\n+    -W                            trace-macros=val -- for every macro invocation, print its name and arguments (default: no)\n+    -W   translate-remapped-path-to-local-path=val -- translate remapped paths into local paths when possible (default: yes)\n+    -W                        trap-unreachable=val -- generate trap instructions for unreachable intrinsics (default: use target setting, usually yes)\n+    -W                        treat-err-as-bug=val -- treat error number `val` that occurs as bug\n+    -W                   trim-diagnostic-paths=val -- in diagnostics, use heuristics to shorten paths referring to items\n+    -W                              ui-testing=val -- emit compiler diagnostics in a form suitable for UI testing (default: no)\n+    -W            uninit-const-chunk-threshold=val -- allow generating const initializers with mixed init/uninit chunks, and set the maximum number of chunks for which this is allowed (default: 16)\n+    -W          unleash-the-miri-inside-of-you=val -- take the brakes off const evaluation. NOTE: this is unsound (default: no)\n+    -W                                unpretty=val -- present the input source, unstable (and less-pretty) variants;\n+        `normal`, `identified`,\n+        `expanded`, `expanded,identified`,\n+        `expanded,hygiene` (with internal representations),\n+        `ast-tree` (raw AST before expansion),\n+        `ast-tree,expanded` (raw AST after expansion),\n+        `hir` (the HIR), `hir,identified`,\n+        `hir,typed` (HIR with types for each node),\n+        `hir-tree` (dump the raw HIR),\n+        `mir` (the MIR), or `mir-cfg` (graphviz formatted MIR)\n+    -W                        unsound-mir-opts=val -- enable unsound and buggy MIR optimizations (default: no)\n+    -W                        unstable-options=val -- adds unstable command line options to rustc interface (default: no)\n+    -W                       use-ctors-section=val -- use legacy .ctors section for initializers rather than .init_array\n+    -W                            validate-mir=val -- validate MIR after each transformation\n+    -W                                 verbose=val -- in general, enable more debug printouts (default: no)\n+    -W                          verify-llvm-ir=val -- verify LLVM IR (default: no)\n+    -W            virtual-function-elimination=val -- enables dead virtual function elimination optimization. Requires `-Clto[=[fat,yes]]`\n+    -W                         wasi-exec-model=val -- whether to build a wasi command or reactor"}, {"sha": "5df7576133a684ab8f887f442084e99062eb4886", "filename": "src/test/run-make/issue-88756-opt-help/x.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2Fx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2Fx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2Fx.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -0,0 +1 @@\n+// nothing to see here"}, {"sha": "2ee64c9f6eb99237865f75a9d5e627561517d1ab", "filename": "src/test/rustdoc-json/assoc_items.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Frustdoc-json%2Fassoc_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Frustdoc-json%2Fassoc_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fassoc_items.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -0,0 +1,29 @@\n+#![no_std]\n+\n+// @has assoc_items.json\n+\n+pub struct Simple;\n+\n+impl Simple {\n+    // @has - \"$.index[*][?(@.name=='CONSTANT')].kind\" \\\"assoc_const\\\"\n+    pub const CONSTANT: usize = 0;\n+}\n+\n+pub trait EasyToImpl {\n+    // @has - \"$.index[*][?(@.name=='ToDeclare')].kind\" \\\"assoc_type\\\"\n+    // @has - \"$.index[*][?(@.name=='ToDeclare')].inner.default\" null\n+    type ToDeclare;\n+    // @has - \"$.index[*][?(@.name=='AN_ATTRIBUTE')].kind\" \\\"assoc_const\\\"\n+    // @has - \"$.index[*][?(@.name=='AN_ATTRIBUTE')].inner.default\" null\n+    const AN_ATTRIBUTE: usize;\n+}\n+\n+impl EasyToImpl for Simple {\n+    // @has - \"$.index[*][?(@.name=='ToDeclare')].inner.default.kind\" \\\"primitive\\\"\n+    // @has - \"$.index[*][?(@.name=='ToDeclare')].inner.default.inner\" \\\"usize\\\"\n+    type ToDeclare = usize;\n+    // @has - \"$.index[*][?(@.name=='AN_ATTRIBUTE')].inner.type.kind\" \\\"primitive\\\"\n+    // @has - \"$.index[*][?(@.name=='AN_ATTRIBUTE')].inner.type.inner\" \\\"usize\\\"\n+    // @has - \"$.index[*][?(@.name=='AN_ATTRIBUTE')].inner.default\" \\\"12\\\"\n+    const AN_ATTRIBUTE: usize = 12;\n+}"}, {"sha": "5cb7ecb649a962b89b9912e1ca8018f71e1f9da3", "filename": "src/test/rustdoc-ui/issue-83883-describe-lints.stdout", "status": "modified", "additions": 192, "deletions": 24, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Frustdoc-ui%2Fissue-83883-describe-lints.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Frustdoc-ui%2Fissue-83883-describe-lints.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-83883-describe-lints.stdout?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -1,25 +1,193 @@\n+    -W                          allow-features=val -- only allow the listed language features to be enabled in code (space separated)\n+    -W                       always-encode-mir=val -- encode MIR of all functions into the crate metadata (default: no)\n+    -W               assume-incomplete-release=val -- make cfg(version) treat the current version as incomplete (default: no)\n+    -W                            asm-comments=val -- generate comments into the assembly (may change behavior) (default: no)\n+    -W                       assert-incr-state=val -- assert that the incremental cache is in given state: either `loaded` or `not-loaded`.\n+    -W                      binary-dep-depinfo=val -- include artifacts (sysroot, crate dependencies) used during compilation in dep-info (default: no)\n+    -W                       branch-protection=val -- set options for branch target identification and pointer authentication on AArch64\n+    -W                           cf-protection=val -- instrument control-flow architecture protection\n+    -W               cgu-partitioning-strategy=val -- the codegen unit partitioning strategy to use\n+    -W                                   chalk=val -- enable the experimental Chalk-based trait solving engine\n+    -W                         codegen-backend=val -- the backend to use\n+    -W                             combine-cgu=val -- combine CGUs into a single one\n+    -W                              crate-attr=val -- inject the given attribute in the crate\n+    -W                debug-info-for-profiling=val -- emit discriminators and other data necessary for AutoFDO\n+    -W                            debug-macros=val -- emit line numbers debug info inside macros (default: no)\n+    -W                 deduplicate-diagnostics=val -- deduplicate identical diagnostics (default: yes)\n+    -W                  dep-info-omit-d-target=val -- in dep-info output, omit targets for tracking dependencies of the dep-info files themselves (default: no)\n+    -W                               dep-tasks=val -- print tasks that execute and the color their dep node gets (requires debug build) (default: no)\n+    -W                                 dlltool=val -- import library generation tool (windows-gnu only)\n+    -W                 dont-buffer-diagnostics=val -- emit diagnostics rather than buffering (breaks NLL error downgrading, sorting) (default: no)\n+    -W                           drop-tracking=val -- enables drop tracking in generators (default: no)\n+    -W                        dual-proc-macros=val -- load proc macros for both target and host, but only link to the target (default: no)\n+    -W                          dump-dep-graph=val -- dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv) (default: no)\n+    -W                                dump-mir=val -- dump MIR state to file.\n+        `val` is used to select which passes and functions to dump. For example:\n+        `all` matches all passes and functions,\n+        `foo` matches all passes for functions whose name contains 'foo',\n+        `foo & ConstProp` only the 'ConstProp' pass for function names containing 'foo',\n+        `foo | bar` all passes for function names containing 'foo' or 'bar'.\n+    -W                       dump-mir-dataflow=val -- in addition to `.mir` files, create graphviz `.dot` files with dataflow results (default: no)\n+    -W                            dump-mir-dir=val -- the directory the MIR is dumped into (default: `mir_dump`)\n+    -W            dump-mir-exclude-pass-number=val -- exclude the pass number when dumping MIR (used in tests) (default: no)\n+    -W                       dump-mir-graphviz=val -- in addition to `.mir` files, create graphviz `.dot` files (and with `-Z instrument-coverage`, also create a `.dot` file for the MIR-derived coverage graph) (default: no)\n+    -W                       dump-mir-spanview=val -- in addition to `.mir` files, create `.html` files to view spans for all `statement`s (including terminators), only `terminator` spans, or computed `block` spans (one span encompassing a block's terminator and all statements). If `-Z instrument-coverage` is also enabled, create an additional `.html` file showing the computed coverage spans.\n+    -W                        emit-stack-sizes=val -- emit a section containing stack size metadata (default: no)\n+    -W                             fewer-names=val -- reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR) (default: no)\n+    -W              force-unstable-if-unmarked=val -- force all crates to be `rustc_private` unstable (default: no)\n+    -W                                    fuel=val -- set the optimization fuel quota for a crate\n+    -W                       function-sections=val -- whether each function should go in its own section\n+    -W                    future-incompat-test=val -- forces all lints to be future incompatible, used for internal testing (default: no)\n+    -W                                  gcc-ld=val -- implementation of ld used by cc\n+    -W                      graphviz-dark-mode=val -- use dark-themed colors in graphviz output (default: no)\n+    -W                           graphviz-font=val -- use the given `fontname` in graphviz output; can be overridden by setting environment variable `RUSTC_GRAPHVIZ_FONT` (default: `Courier, monospace`)\n+    -W                               hir-stats=val -- print some statistics about AST and HIR (default: no)\n+    -W                human-readable-cgu-names=val -- generate human-readable, predictable names for codegen units (default: no)\n+    -W                        identify-regions=val -- display unnamed regions as `'<id>`, using a non-ident unique id (default: no)\n+    -W                incremental-ignore-spans=val -- ignore spans during ICH computation -- used for testing (default: no)\n+    -W                        incremental-info=val -- print high-level information about incremental reuse (or the lack thereof) (default: no)\n+    -W              incremental-relative-spans=val -- hash spans relative to their parent item for incr. comp. (default: no)\n+    -W                  incremental-verify-ich=val -- verify incr. comp. hashes of green query instances (default: no)\n+    -W                              inline-mir=val -- enable MIR inlining (default: no)\n+    -W                    inline-mir-threshold=val -- a default MIR inlining threshold (default: 50)\n+    -W               inline-mir-hint-threshold=val -- inlining threshold for functions with inline hint (default: 100)\n+    -W                      inline-in-all-cgus=val -- control whether `#[inline]` functions are in all CGUs\n+    -W                             input-stats=val -- gather statistics about the input (default: no)\n+    -W                     instrument-coverage=val -- instrument the generated code to support LLVM source-based code coverage reports (note, the compiler build config must include `profiler = true`); implies `-C symbol-mangling-version=v0`. Optional values are:\n+        `=all` (implicit value)\n+        `=except-unused-generics`\n+        `=except-unused-functions`\n+        `=off` (default)\n+    -W                       instrument-mcount=val -- insert function instrument code for mcount-based tracing (default: no)\n+    -W                       keep-hygiene-data=val -- keep hygiene data after analysis (default: no)\n+    -W                   link-native-libraries=val -- link native libraries in the linker invocation (default: yes)\n+    -W                               link-only=val -- link the `.rlink` file generated by `-Z no-link` (default: no)\n+    -W                            llvm-plugins=val -- a list LLVM plugins to enable (space separated)\n+    -W                         llvm-time-trace=val -- generate JSON tracing data file from LLVM data (default: no)\n+    -W                         location-detail=val -- comma separated list of location details to be tracked when using caller_location valid options are `file`, `line`, and `column` (default: all)\n+    -W                                      ls=val -- list the symbols defined by a library crate (default: no)\n+    -W                         macro-backtrace=val -- show macro backtraces (default: no)\n+    -W                         merge-functions=val -- control the operation of the MergeFunctions LLVM pass, taking the same values as the target option of the same name\n+    -W                              meta-stats=val -- gather metadata statistics (default: no)\n+    -W                          mir-emit-retag=val -- emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 (default: no)\n+    -W                       mir-enable-passes=val -- use like `-Zmir-enable-passes=+DestProp,-InstCombine`. Forces the specified passes to be enabled, overriding all other checks. Passes that are not specified are enabled or disabled by other flags as usual.\n+    -W                           mir-opt-level=val -- MIR optimization level (0-4; default: 1 in non optimized builds and 2 in optimized builds)\n+    -W                         move-size-limit=val -- the size at which the `large_assignments` lint starts to be emitted\n+    -W                         mutable-noalias=val -- emit noalias metadata for mutable references (default: yes)\n+    -W                   new-llvm-pass-manager=val -- use new LLVM pass manager (default: no)\n+    -W                               nll-facts=val -- dump facts from NLL analysis into side files (default: no)\n+    -W                           nll-facts-dir=val -- the directory the NLL facts are dumped into (default: `nll-facts`)\n+    -W                             no-analysis=val -- parse and expand the source, but run no analysis\n+    -W                              no-codegen=val -- run all passes except codegen; no output\n+    -W              no-generate-arange-section=val -- omit DWARF address ranges that give faster lookups\n+    -W                     no-interleave-lints=val -- execute lints separately; allows benchmarking individual lints\n+    -W                           no-leak-check=val -- disable the 'leak check' for subtyping; unsound, but useful for tests\n+    -W                                 no-link=val -- compile without linking\n+    -W                        no-parallel-llvm=val -- run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO)\n+    -W                 no-unique-section-names=val -- do not use unique names for text and data sections when -Z function-sections is used\n+    -W                     no-profiler-runtime=val -- prevent automatic injection of the profiler_builtins crate\n+    -W                          normalize-docs=val -- normalize associated items in rustdoc when generating documentation\n+    -W                                     oom=val -- panic strategy for out-of-memory handling\n+    -W                  osx-rpath-install-name=val -- pass `-install_name @rpath/...` to the macOS linker (default: no)\n+    -W                       panic-abort-tests=val -- support compiling tests with panic=abort (default: no)\n+    -W                           panic-in-drop=val -- panic strategy for panics in drops\n+    -W                              parse-only=val -- parse only; do not compile, assemble, or link (default: no)\n+    -W                              perf-stats=val -- print some performance-related statistics (default: no)\n+    -W pick-stable-methods-before-any-unstable=val -- try to pick stable methods first before picking any unstable methods (default: yes)\n+    -W                                     plt=val -- whether to use the PLT when calling into shared libraries;\n+        only has effect for PIC code on systems with ELF binaries\n+        (default: PLT is disabled if full relro is enabled)\n+    -W                                polonius=val -- enable polonius-based borrow-checker (default: no)\n+    -W                            polymorphize=val -- perform polymorphization analysis\n+    -W                            pre-link-arg=val -- a single extra argument to prepend the linker invocation (can be used several times)\n+    -W                           pre-link-args=val -- extra arguments to prepend to the linker invocation (space separated)\n+    -W           precise-enum-drop-elaboration=val -- use a more precise version of drop elaboration for matches on enums (default: yes). This results in better codegen, but has caused miscompilations on some tier 2 platforms. See #77382 and #74551.\n+    -W                              print-fuel=val -- make rustc print the total optimization fuel used by a crate\n+    -W                       print-llvm-passes=val -- print the LLVM optimization passes being run (default: no)\n+    -W                        print-mono-items=val -- print the result of the monomorphization collection pass\n+    -W                        print-type-sizes=val -- print layout information for each type encountered (default: no)\n+    -W                    proc-macro-backtrace=val -- show backtraces for panics during proc-macro execution (default: no)\n+    -W                                 profile=val -- insert profiling code (default: no)\n+    -W                        profile-closures=val -- profile size of closures\n+    -W                            profile-emit=val -- file path to emit profiling data at runtime when using 'profile' (default based on relative source path)\n+    -W                        profiler-runtime=val -- name of the profiler runtime crate to automatically inject (default: `profiler_builtins`)\n+    -W                      profile-sample-use=val -- use the given `.prof` file for sampled profile-guided optimization (also known as AutoFDO)\n+    -W                         query-dep-graph=val -- enable queries of the dependency graph for regression testing (default: no)\n+    -W                        randomize-layout=val -- randomize the layout of types (default: no)\n+    -W                             layout-seed=val -- seed layout randomization\n+    -W                   relax-elf-relocations=val -- whether ELF relocations can be relaxed\n+    -W                             relro-level=val -- choose which RELRO level to use\n+    -W                        remap-cwd-prefix=val -- remap paths under the current working directory to this path prefix\n+    -W         simulate-remapped-rust-src-base=val -- simulate the effect of remap-debuginfo = true at bootstrapping by remapping path to rust's source base directory. only meant for testing purposes\n+    -W                     report-delayed-bugs=val -- immediately print bugs registered with `delay_span_bug` (default: no)\n+    -W                               sanitizer=val -- use a sanitizer\n+    -W          sanitizer-memory-track-origins=val -- enable origins tracking in MemorySanitizer\n+    -W                       sanitizer-recover=val -- enable recovery for selected sanitizers\n+    -W                  saturating-float-casts=val -- make float->int casts UB-free: numbers outside the integer type's range are clipped to the max/min integer respectively, and NaN is mapped to 0 (default: yes)\n+    -W                           save-analysis=val -- write syntax and type analysis (in JSON format) information, in addition to normal output (default: no)\n+    -W                            self-profile=val -- run the self profiler and output the raw event data\n+    -W                     self-profile-events=val -- specify the events recorded by the self profiler;\n+        for example: `-Z self-profile-events=default,query-keys`\n+        all options: none, all, default, generic-activity, query-provider, query-cache-hit\n+                     query-blocked, incr-cache-load, incr-result-hashing, query-keys, function-args, args, llvm, artifact-sizes\n+    -W                    self-profile-counter=val -- counter used by the self profiler (default: `wall-time`), one of:\n+        `wall-time` (monotonic clock, i.e. `std::time::Instant`)\n+        `instructions:u` (retired instructions, userspace-only)\n+        `instructions-minus-irqs:u` (subtracting hardware interrupt counts for extra accuracy)\n+    -W                          share-generics=val -- make the current crate share its generic instantiations\n+    -W                               show-span=val -- show spans for compiler debugging (expr|pat|ty)\n+    -W                              span-debug=val -- forward proc_macro::Span's `Debug` impl to `Span`\n+    -W                       span-free-formats=val -- exclude spans when debug-printing compiler state (default: no)\n+    -W                      src-hash-algorithm=val -- hash algorithm of source files in debug info (`md5`, `sha1`, or `sha256`)\n+    -W                         stack-protector=val -- control stack smash protection strategy (`rustc --print stack-protector-strategies` for details)\n+    -W                      strict-init-checks=val -- control if mem::uninitialized and mem::zeroed panic on more UB\n+    -W                                   strip=val -- tell the linker which information to strip (`none` (default), `debuginfo` or `symbols`)\n+    -W                        split-dwarf-kind=val -- split dwarf variant (only if -Csplit-debuginfo is enabled and on relevant platform)\n+        (default: `split`)\n \n-Available lint options:\n-    -W <foo>           Warn about <foo>\n-    -A <foo>           Allow <foo>\n-    -D <foo>           Deny <foo>\n-    -F <foo>           Forbid <foo> (deny <foo> and all attempts to override)\n-\n-\n-Lint checks provided by rustc:\n-\n-    $NAMES  $LEVELS  $MEANINGS\n-\n-Lint groups provided by rustc:\n-\n-    $NAMES  $SUB_LINTS\n-\n-Lint checks provided by plugins loaded by this crate:\n-\n-    $NAMES  $LEVELS  $MEANINGS\n-\n-Lint groups provided by plugins loaded by this crate:\n-\n-    rustdoc::all  $GROUPS\n-\n-\n+        `split`: sections which do not require relocation are written into a DWARF object (`.dwo`)\n+                 file which is ignored by the linker\n+        `single`: sections which do not require relocation are written into object file but ignored\n+                  by the linker\n+    -W                    split-dwarf-inlining=val -- provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF\n+    -W                 symbol-mangling-version=val -- which mangling version to use for symbol names ('legacy' (default) or 'v0')\n+    -W                                   teach=val -- show extended diagnostic help (default: no)\n+    -W                               temps-dir=val -- the directory the intermediate files are written to\n+    -W                          terminal-width=val -- set the current terminal width\n+    -W                          translate-lang=val -- language identifier for diagnostic output\n+    -W                translate-additional-ftl=val -- additional fluent translation to preferentially use (for testing translation)\n+    -W        translate-directionality-markers=val -- emit directionality isolation markers in translated diagnostics\n+    -W                                tune-cpu=val -- select processor to schedule for (`rustc --print target-cpus` for details)\n+    -W                                 thinlto=val -- enable ThinLTO when possible\n+    -W                           thir-unsafeck=val -- use the THIR unsafety checker (default: no)\n+    -W                                 threads=val -- use a thread pool with N threads\n+    -W                                    time=val -- measure time of rustc processes (default: no)\n+    -W                        time-llvm-passes=val -- measure time of each LLVM pass (default: no)\n+    -W                             time-passes=val -- measure time of each rustc pass (default: no)\n+    -W                               tls-model=val -- choose the TLS model to use (`rustc --print tls-models` for details)\n+    -W                            trace-macros=val -- for every macro invocation, print its name and arguments (default: no)\n+    -W   translate-remapped-path-to-local-path=val -- translate remapped paths into local paths when possible (default: yes)\n+    -W                        trap-unreachable=val -- generate trap instructions for unreachable intrinsics (default: use target setting, usually yes)\n+    -W                        treat-err-as-bug=val -- treat error number `val` that occurs as bug\n+    -W                   trim-diagnostic-paths=val -- in diagnostics, use heuristics to shorten paths referring to items\n+    -W                              ui-testing=val -- emit compiler diagnostics in a form suitable for UI testing (default: no)\n+    -W            uninit-const-chunk-threshold=val -- allow generating const initializers with mixed init/uninit chunks, and set the maximum number of chunks for which this is allowed (default: 16)\n+    -W          unleash-the-miri-inside-of-you=val -- take the brakes off const evaluation. NOTE: this is unsound (default: no)\n+    -W                                unpretty=val -- present the input source, unstable (and less-pretty) variants;\n+        `normal`, `identified`,\n+        `expanded`, `expanded,identified`,\n+        `expanded,hygiene` (with internal representations),\n+        `ast-tree` (raw AST before expansion),\n+        `ast-tree,expanded` (raw AST after expansion),\n+        `hir` (the HIR), `hir,identified`,\n+        `hir,typed` (HIR with types for each node),\n+        `hir-tree` (dump the raw HIR),\n+        `mir` (the MIR), or `mir-cfg` (graphviz formatted MIR)\n+    -W                        unsound-mir-opts=val -- enable unsound and buggy MIR optimizations (default: no)\n+    -W                        unstable-options=val -- adds unstable command line options to rustc interface (default: no)\n+    -W                       use-ctors-section=val -- use legacy .ctors section for initializers rather than .init_array\n+    -W                            validate-mir=val -- validate MIR after each transformation\n+    -W                                 verbose=val -- in general, enable more debug printouts (default: no)\n+    -W                          verify-llvm-ir=val -- verify LLVM IR (default: no)\n+    -W            virtual-function-elimination=val -- enables dead virtual function elimination optimization. Requires `-Clto[=[fat,yes]]`\n+    -W                         wasi-exec-model=val -- whether to build a wasi command or reactor"}, {"sha": "7c9829b823ede6510af1368a6282776ee4662d4f", "filename": "src/test/ui/suggestions/auxiliary/not-object-safe.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fnot-object-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fnot-object-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fauxiliary%2Fnot-object-safe.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -0,0 +1,6 @@\n+use std::sync::Arc;\n+\n+pub trait A {\n+    fn f();\n+    fn f2(self: &Arc<Self>);\n+}"}, {"sha": "a2717fd9206d10d128d9cdd1ab97d7e10d018d8a", "filename": "src/test/ui/suggestions/issue-98500.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-98500.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-98500.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-98500.rs?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -0,0 +1,14 @@\n+// aux-build:not-object-safe.rs\n+\n+extern crate not_object_safe;\n+\n+pub trait B where\n+    Self: not_object_safe::A,\n+{\n+    fn f2(&self);\n+}\n+\n+struct S(Box<dyn B>);\n+//~^ ERROR the trait `B` cannot be made into an object\n+\n+fn main() {}"}, {"sha": "e7251d735e38e6e9dc8dc01ee5edb6041a43b71a", "filename": "src/test/ui/suggestions/issue-98500.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-98500.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Fui%2Fsuggestions%2Fissue-98500.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-98500.stderr?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -0,0 +1,24 @@\n+error[E0038]: the trait `B` cannot be made into an object\n+  --> $DIR/issue-98500.rs:11:14\n+   |\n+LL | struct S(Box<dyn B>);\n+   |              ^^^^^ `B` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/auxiliary/not-object-safe.rs:4:8\n+   |\n+LL |     fn f();\n+   |        ^ ...because associated function `f` has no `self` parameter\n+LL |     fn f2(self: &Arc<Self>);\n+   |        ^^ ...because method `f2`'s `self` parameter cannot be dispatched on\n+   |\n+  ::: $DIR/issue-98500.rs:5:11\n+   |\n+LL | pub trait B where\n+   |           - this trait cannot be made into an object...\n+   = help: consider moving `f` to another trait\n+   = help: consider moving `f2` to another trait\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "69487c565c933e00e1d77beddaaec98c6bf3714f", "filename": "src/test/ui/suggestions/object-unsafe-trait-should-use-where-sized.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.fixed?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -2,7 +2,7 @@\n #![allow(unused_variables, dead_code)]\n \n trait Trait {\n-    fn foo(&self) where Self: Other, Self: Sized, { }\n+    fn foo(&self) where Self: Other, Self: Sized { }\n     fn bar(self: &Self) {} //~ ERROR invalid `self` parameter type\n }\n "}, {"sha": "66969c170665421031a884ec3797a89adea89746", "filename": "src/test/ui/suggestions/object-unsafe-trait-should-use-where-sized.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.stderr?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -28,8 +28,8 @@ LL |     fn foo(&self) where Self: Other, { }\n    |            +++++\n help: alternatively, consider constraining `foo` so it does not apply to trait objects\n    |\n-LL |     fn foo() where Self: Other, Self: Sized, { }\n-   |                               +++++++++++++\n+LL |     fn foo() where Self: Other, Self: Sized { }\n+   |                               ~~~~~~~~~~~~~\n help: consider changing method `bar`'s `self` parameter to be `&self`\n    |\n LL |     fn bar(self: &Self) {}"}, {"sha": "fe5195738c10abd6d83554011b3214a42c51af8e", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -30,7 +30,7 @@\n # These should be collaborators of the rust-lang/rust repository (with at least\n # read privileges on it). CI will fail otherwise.\n MAINTAINERS = {\n-    'miri': {'oli-obk', 'RalfJung', 'eddyb'},\n+    'miri': {'oli-obk', 'RalfJung'},\n     'rls': {'Xanewok'},\n     'rustfmt': {'topecongiro', 'calebcartwright'},\n     'book': {'carols10cents', 'steveklabnik'},"}, {"sha": "8aefb1f620b3d62b90a5d84a2f6df46cb4f6bba0", "filename": "triagebot.toml", "status": "modified", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/7f08d04d60d03e1a52dae61ce6aa50996898702b/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7f08d04d60d03e1a52dae61ce6aa50996898702b/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=7f08d04d60d03e1a52dae61ce6aa50996898702b", "patch": "@@ -215,3 +215,108 @@ changelog-path = \"RELEASES.md\"\n changelog-branch = \"master\"\n \n [shortcut]\n+\n+\n+[mentions.\"compiler/rustc_apfloat\"]\n+message = \"\"\"\n+Changes rustc_apfloat. rustc_apfloat is currently in limbo and you almost\n+certainly don't want to change it (see #55993).\n+\"\"\"\n+cc = [\"@eddyb\"]\n+\n+[mentions.\"compiler/rustc_codegen_cranelift\"]\n+cc = [\"@bjorn3\"]\n+\n+[mentions.\"compiler/rustc_codegen_gcc\"]\n+cc = [\"@antoyo\"]\n+\n+[mentions.\"compiler/rustc_const_eval/src/interpret\"]\n+message = \"Some changes occurred to the CTFE / Miri engine\"\n+cc = [\"@rust-lang/miri\"]\n+\n+[mentions.\"compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs\"]\n+message = \"Some changes occurred in need_type_info.rs\"\n+cc = [\"@lcnr\"]\n+\n+[mentions.\"compiler/rustc_middle/src/mir/interpret\"]\n+message = \"Some changes occurred to the CTFE / Miri engine\"\n+cc = [\"@rust-lang/miri\"]\n+\n+[mentions.\"compiler/rustc_mir_transform/src/\"]\n+message = \"Some changes occurred to MIR optimizations\"\n+cc = [\"@rust-lang/mir-opt\"]\n+\n+[mentions.\"compiler/rustc_trait_selection/src/traits/const_evaluatable.rs\"]\n+message = \"Some changes occurred in const_evaluatable.rs\"\n+cc = [\"@lcnr\"]\n+\n+[mentions.\"compiler/rustc_error_codes/src/error_codes.rs\"]\n+message = \"Some changes occurred in diagnostic error codes\"\n+cc = [\"@GuillaumeGomez\"]\n+\n+[mentions.\"library\"]\n+message = \"\"\"\n+Hey! It looks like you've submitted a new PR for the library teams!\n+\n+If this PR contains changes to any `rust-lang/rust` public library APIs then\n+please comment with `@rustbot label +T-libs-api -T-libs` to tag it\n+appropriately. If this PR contains changes to any unstable APIs please edit\n+the PR description to add a link to the relevant [API Change\n+Proposal](https://std-dev-guide.rust-lang.org/feature-lifecycle/api-change-proposals.html)\n+or [create one](https://github.com/rust-lang/libs-team/issues/new?assignees=&labels=api-change-proposal%2C+T-libs-api&template=api-change-proposal.md&title=%28My+API+Change+Proposal%29)\n+if you haven't already. If you're unsure where your change falls no worries,\n+just leave it as is and the reviewer will take a look and make a decision to\n+forward on if necessary.\n+\n+Examples of `T-libs-api` changes:\n+\n+* Stabilizing library features\n+* Introducing insta-stable changes such as new implementations of existing\n+  stable traits on existing stable types\n+* Introducing new or changing existing unstable library APIs (excluding\n+  permanently unstable features / features without a tracking issue)\n+* Changing public documentation in ways that create new stability guarantees\n+* Changing observable runtime behavior of library APIs\n+\"\"\"\n+\n+[mentions.\"src/librustdoc/clean/types.rs\"]\n+cc = [\"@camelid\"]\n+\n+[mentions.\"src/librustdoc/html/static\"]\n+message = \"Some changes occurred in HTML/CSS/JS.\"\n+cc = [\n+    \"@GuillaumeGomez\",\n+    \"@Folyd\",\n+    \"@jsha\",\n+]\n+\n+[mentions.\"src/librustdoc/html/static/css/themes\"]\n+message = \"Some changes occurred in HTML/CSS themes.\"\n+cc = [\"@GuillaumeGomez\"]\n+\n+[mentions.\"src/librustdoc/html/static/css/themes/ayu.css\"]\n+message = \"A change occurred in the Ayu theme.\"\n+cc = [\"@Cldfire\"]\n+\n+[mentions.\"src/rustdoc-json-types\"]\n+message = \"\"\"\n+rustdoc-json-types is a **public** (although nightly-only) API.\n+If possible, consider changing `src/librustdoc/json/conversions.rs`;\n+otherwise, make sure you bump the `FORMAT_VERSION` constant.\n+\"\"\"\n+cc = [\n+    \"@CraftSpider\",\n+    \"@aDotInTheVoid\",\n+]\n+\n+[mentions.\"src/tools/cargo\"]\n+cc = [\"@ehuss\"]\n+\n+[mentions.\"src/tools/clippy\"]\n+cc = [\"@rust-lang/clippy\"]\n+\n+[mentions.\"src/tools/miri\"]\n+cc = [\"@rust-lang/miri\"]\n+\n+[mentions.\"src/tools/rustfmt\"]\n+cc = [\"@rust-lang/rustfmt\"]"}]}