{"sha": "1992931c9e1a04f2403b92132d51533e233f4020", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5OTI5MzFjOWUxYTA0ZjI0MDNiOTIxMzJkNTE1MzNlMjMzZjQwMjA=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-06-30T17:12:56Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-07-01T15:12:28Z"}, "message": "ci: finish the migration to azure", "tree": {"sha": "9c32273fb0b6ab6736c835fcbb2052aa0064bce4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c32273fb0b6ab6736c835fcbb2052aa0064bce4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1992931c9e1a04f2403b92132d51533e233f4020", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl0aItwACgkQPgar6Auq\n8ZzW1A//RHjH0UHnoJO27quECQTdJDBTqDmzMOlaaFdL1yZQo5qGJ64gByfqmkdl\nh7j+Aq+pgHnlKWnXR2sy2jAdRlkHJ8yYIUuQVEDvEirM34AEuQdc5UWN/Bwn/l0g\nCy9gZGe/CAXx84Hcyykla9G8hEl2nLA18tlirZis0Tft2LINqoahTh1vrbIEB98W\naq0EMEAuiREbNCUwTE1vkSF2zGjFIcTWWJHLpUxIgKfJaztxJC11wVCGBVivJmib\nqnyd1xQJTBCOH26xUITE3CgOb3kIImSM/XiCj5LBr+Mo+1HPoAWimK4ttk02VcOR\nkhibt45Y3FdlVPHrk2KIQijQXi3TBGiqPZ7MQe+MY2rZMMogRauA3bkMXtmHiZBR\nsPcKY0OuaxtDeEskHesnbqQFLNgmoUv/fyTkZse+PXJcOXmdBjDSxIjTOaeJRxso\n3jXtfsIAT32cVq2zhqCLmMLMlbdyJXduv4z0p/UJTIpJ2ZIxKVM6t4mI+uKR/9Xq\nWoVz+jySv4J50Z3AdZZ/mbP2G8PQKV2srfjW01TMppnA0JsdWN7eUGPHNCDybphs\nWaHZMIOetEcAszrUTTcB2B6LxUF22sDN/AgV4lIIWDlcjQnm8wQZWleY8aJOHgmu\nw4Ch01uFsrejLTX3sMWKlysarsS8ze7nn0F7OL4+POyZJlQor0c=\n=ogP9\n-----END PGP SIGNATURE-----", "payload": "tree 9c32273fb0b6ab6736c835fcbb2052aa0064bce4\nparent 765eebf064ae17347f3532791760fc5c2150b5ea\nauthor Pietro Albini <pietro@pietroalbini.org> 1561914776 +0200\ncommitter Pietro Albini <pietro@pietroalbini.org> 1561993948 +0200\n\nci: finish the migration to azure\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1992931c9e1a04f2403b92132d51533e233f4020", "html_url": "https://github.com/rust-lang/rust/commit/1992931c9e1a04f2403b92132d51533e233f4020", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1992931c9e1a04f2403b92132d51533e233f4020/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "765eebf064ae17347f3532791760fc5c2150b5ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/765eebf064ae17347f3532791760fc5c2150b5ea", "html_url": "https://github.com/rust-lang/rust/commit/765eebf064ae17347f3532791760fc5c2150b5ea"}], "stats": {"total": 288, "additions": 13, "deletions": 275}, "files": [{"sha": "2e6c3b7a992af5621184683acbd7a40d080b1659", "filename": ".azure-pipelines/auto.yml", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1992931c9e1a04f2403b92132d51533e233f4020/.azure-pipelines%2Fauto.yml", "raw_url": "https://github.com/rust-lang/rust/raw/1992931c9e1a04f2403b92132d51533e233f4020/.azure-pipelines%2Fauto.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.azure-pipelines%2Fauto.yml?ref=1992931c9e1a04f2403b92132d51533e233f4020", "patch": "@@ -138,9 +138,8 @@ jobs:\n         IMAGE: x86_64-gnu-full-bootstrap\n       x86_64-gnu-aux:\n         IMAGE: x86_64-gnu-aux\n-        # FIXME: needs reenabling here rather than Travis\n-      # x86_64-gnu-tools:\n-      #   IMAGE: x86_64-gnu-tools\n+      x86_64-gnu-tools:\n+        IMAGE: x86_64-gnu-tools\n       x86_64-gnu-debug:\n         IMAGE: x86_64-gnu-debug\n       x86_64-gnu-nopt:\n@@ -252,12 +251,10 @@ jobs:\n         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc\n         VCVARS_BAT: vcvars64.bat\n       # MSVC tools tests\n-      # FIXME: broken on azure right now, need to figure out a cause and\n-      # reenable\n-      # x86_64-msvc-tools:\n-      #   MSYS_BITS: 64\n-      #   SCRIPT: src/ci/docker/x86_64-gnu-tools/checktools.sh x.py /tmp/toolstates.json windows\n-      #   RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --save-toolstates=/tmp/toolstates.json --enable-test-miri\n+      x86_64-msvc-tools:\n+        MSYS_BITS: 64\n+        SCRIPT: src/ci/docker/x86_64-gnu-tools/checktools.sh x.py /tmp/toolstates.json windows\n+        RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --save-toolstates=/tmp/toolstates.json --enable-test-miri\n \n       # 32/64-bit MinGW builds.\n       #"}, {"sha": "1d35ea0efacc247512c214f8baec0b6cdb0fe1ee", "filename": ".travis.yml", "status": "modified", "additions": 5, "deletions": 159, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/1992931c9e1a04f2403b92132d51533e233f4020/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/1992931c9e1a04f2403b92132d51533e233f4020/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=1992931c9e1a04f2403b92132d51533e233f4020", "patch": "@@ -1,164 +1,10 @@\n language: shell\n-sudo: required\n-dist: xenial\n-services:\n-  - docker\n-addons:\n-  apt:\n-    packages:\n-      - gdb\n+script: echo Travis CI is not used anymore\n \n-git:\n-  depth: 2\n-  submodules: false\n-\n-env:\n-  global:\n-    - CI_JOB_NAME=$TRAVIS_JOB_NAME\n-\n-matrix:\n-  fast_finish: true\n-  include:\n-    - env: IMAGE=x86_64-gnu-tools\n-      name: x86_64-gnu-tools\n-      if: branch = auto OR (type = pull_request AND commit_message =~ /(?i:^update.*\\b(rls|rustfmt|clippy|miri|cargo)\\b)/)\n-\n-before_install:\n-  # We'll use the AWS cli to download/upload cached docker layers as well as\n-  # push our deployments, so download that here.\n-  - pip install --user awscli; export PATH=$PATH:$HOME/.local/bin:$HOME/Library/Python/2.7/bin/\n-  - mkdir -p $HOME/rustsrc\n-  # FIXME(#46924): these two commands are required to enable IPv6,\n-  # they shouldn't exist, please revert once more official solutions appeared.\n-  # see https://github.com/travis-ci/travis-ci/issues/8891#issuecomment-353403729\n-  - if [ \"$TRAVIS_OS_NAME\" = linux ]; then\n-      echo '{\"ipv6\":true,\"fixed-cidr-v6\":\"fd9a:8454:6789:13f7::/64\"}' | sudo tee /etc/docker/daemon.json;\n-      sudo service docker restart;\n-    fi\n-\n-install:\n-  - case \"$TRAVIS_OS_NAME\" in\n-        linux)\n-          travis_retry curl -fo $HOME/stamp https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-03-17-stamp-x86_64-unknown-linux-musl &&\n-            chmod +x $HOME/stamp &&\n-            export PATH=$PATH:$HOME\n-          ;;\n-        osx)\n-          if [[ \"$SCRIPT\" == \"./x.py dist\" ]]; then\n-            travis_retry brew update &&\n-            travis_retry brew install xz &&\n-            travis_retry brew install swig@3 &&\n-            brew link --force swig@3;\n-          fi &&\n-          travis_retry curl -fo /usr/local/bin/sccache https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2018-04-02-sccache-x86_64-apple-darwin &&\n-            chmod +x /usr/local/bin/sccache &&\n-          travis_retry curl -fo /usr/local/bin/stamp https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/2017-03-17-stamp-x86_64-apple-darwin &&\n-            chmod +x /usr/local/bin/stamp &&\n-          travis_retry curl -f http://releases.llvm.org/7.0.0/clang+llvm-7.0.0-x86_64-apple-darwin.tar.xz | tar xJf - &&\n-            export CC=`pwd`/clang+llvm-7.0.0-x86_64-apple-darwin/bin/clang &&\n-            export CXX=`pwd`/clang+llvm-7.0.0-x86_64-apple-darwin/bin/clang++ &&\n-            export AR=ar\n-          ;;\n-    esac\n-\n-before_script:\n-  - >\n-      echo \"#### Disk usage before running script:\";\n-      df -h;\n-      du . | sort -nr | head -n100\n-  - >\n-      RUN_SCRIPT=\"src/ci/init_repo.sh . $HOME/rustsrc\";\n-      if [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then\n-          export RUN_SCRIPT=\"$RUN_SCRIPT && src/ci/run.sh\";\n-      else\n-          export RUN_SCRIPT=\"$RUN_SCRIPT && src/ci/docker/run.sh $IMAGE\";\n-          # Enable core dump on Linux.\n-          sudo sh -c 'echo \"/checkout/obj/cores/core.%p.%E\" > /proc/sys/kernel/core_pattern';\n-      fi\n-  - >\n-      if [ \"$IMAGE\" = mingw-check ]; then\n-        # verify the publish_toolstate script works.\n-        git clone --depth=1 https://github.com/rust-lang-nursery/rust-toolstate.git;\n-        cd rust-toolstate;\n-        python2.7 \"$TRAVIS_BUILD_DIR/src/tools/publish_toolstate.py\" \"$(git rev-parse HEAD)\" \"$(git log --format=%s -n1 HEAD)\" \"\" \"\";\n-        cd ..;\n-        rm -rf rust-toolstate;\n-      fi\n-\n-# Log time information from this machine and an external machine for insight into possible\n-# clock drift. Timezones don't matter since relative deltas give all the necessary info.\n-script:\n-  - >\n-      date && (curl -fs --head https://google.com | grep ^Date: | sed 's/Date: //g' || true)\n-  - stamp sh -x -c \"$RUN_SCRIPT\"\n-  - >\n-      date && (curl -fs --head https://google.com | grep ^Date: | sed 's/Date: //g' || true)\n-\n-after_success:\n-  - >\n-      echo \"#### Build successful; Disk usage after running script:\";\n-      df -h;\n-      du . | sort -nr | head -n100\n-  - >\n-      if [ \"$DEPLOY$DEPLOY_ALT\" == \"1\" ]; then\n-        mkdir -p deploy/$TRAVIS_COMMIT;\n-        if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then\n-            rm -rf build/dist/doc &&\n-            cp -r build/dist/* deploy/$TRAVIS_COMMIT;\n-        else\n-            rm -rf obj/build/dist/doc &&\n-            cp -r obj/build/dist/* deploy/$TRAVIS_COMMIT;\n-        fi;\n-        ls -la deploy/$TRAVIS_COMMIT;\n-        deploy_dir=rustc-builds;\n-        if [ \"$DEPLOY_ALT\" == \"1\" ]; then\n-            deploy_dir=rustc-builds-alt;\n-        fi;\n-        travis_retry aws s3 cp --no-progress --recursive --acl public-read ./deploy s3://rust-lang-ci2/$deploy_dir\n-      fi\n-\n-after_failure:\n-  - >\n-      echo \"#### Build failed; Disk usage after running script:\";\n-      df -h;\n-      du . | sort -nr | head -n100\n-\n-  # Random attempt at debugging currently. Just poking around in here to see if\n-  # anything shows up.\n-\n-  # Dump backtrace for macOS\n-  - ls -lat $HOME/Library/Logs/DiagnosticReports/\n-  - find $HOME/Library/Logs/DiagnosticReports\n-      -type f\n-      -name '*.crash'\n-      -not -name '*.stage2-*.crash'\n-      -not -name 'com.apple.CoreSimulator.CoreSimulatorService-*.crash'\n-      -exec printf travis_fold\":start:crashlog\\n\\033[31;1m%s\\033[0m\\n\" {} \\;\n-      -exec head -750 {} \\;\n-      -exec echo travis_fold\":\"end:crashlog \\; || true\n-\n-  # Dump backtrace for Linux\n-  - ln -s . checkout &&\n-    for CORE in obj/cores/core.*; do\n-      EXE=$(echo $CORE | sed 's|obj/cores/core\\.[0-9]*\\.!checkout!\\(.*\\)|\\1|;y|!|/|');\n-      if [ -f \"$EXE\" ]; then\n-        printf travis_fold\":start:crashlog\\n\\033[31;1m%s\\033[0m\\n\" \"$CORE\";\n-        gdb --batch -q -c \"$CORE\" \"$EXE\"\n-          -iex 'set auto-load off'\n-          -iex 'dir src/'\n-          -iex 'set sysroot .'\n-          -ex bt\n-          -ex q;\n-        echo travis_fold\":\"end:crashlog;\n-      fi;\n-    done || true\n-\n-  # see #50887\n-  - cat ./obj/build/x86_64-unknown-linux-gnu/native/asan/build/lib/asan/clang_rt.asan-dynamic-i386.vers || true\n-\n-  # attempt to debug anything killed by the oom killer on linux, just to see if\n-  # it happened\n-  - dmesg | grep -i kill\n+branches:\n+  only:\n+    - auto\n+    - try\n \n notifications:\n   email: false"}, {"sha": "003de85184c32b3c4ffa35747f01148c24b948d7", "filename": "appveyor.yml", "status": "modified", "additions": 2, "deletions": 107, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/1992931c9e1a04f2403b92132d51533e233f4020/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/1992931c9e1a04f2403b92132d51533e233f4020/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=1992931c9e1a04f2403b92132d51533e233f4020", "patch": "@@ -1,113 +1,8 @@\n-environment:\n-  # This is required for at least an AArch64 compiler in one image, and is also\n-  # going to soon be required for compiling LLVM.\n-  APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017 Preview\n-\n-  # By default schannel checks revocation of certificates unlike some other SSL\n-  # backends, but we've historically had problems on CI where a revocation\n-  # server goes down presumably. See #43333 for more info\n-  CARGO_HTTP_CHECK_REVOKE: false\n-\n-  matrix:\n-  # MSVC tools tests\n-  - CI_JOB_NAME: x86_64-msvc-tools\n-    MSYS_BITS: 64\n-    SCRIPT: src/ci/docker/x86_64-gnu-tools/checktools.sh x.py /tmp/toolstates.json windows\n-    RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --save-toolstates=/tmp/toolstates.json --enable-test-miri\n-\n-matrix:\n-  fast_finish: true\n-\n-clone_depth: 2\n+clone_depth: 1\n build: false\n \n-install:\n-  # Print which AppVeyor agent version we're running on.\n-  - appveyor version\n-  # If we need to download a custom MinGW, do so here and set the path\n-  # appropriately.\n-  #\n-  # Note that this *also* means that we're not using what is typically\n-  # /mingw32/bin/python2.7.exe, which is a \"correct\" python interpreter where\n-  # /usr/bin/python2.7.exe is not. To ensure we use the right interpreter we\n-  # move `C:\\Python27` ahead in PATH and then also make sure the `python2.7.exe`\n-  # file exists in there (which it doesn't by default).\n-  - if defined MINGW_URL appveyor-retry appveyor DownloadFile %MINGW_URL%/%MINGW_ARCHIVE%\n-  - if defined MINGW_URL 7z x -y %MINGW_ARCHIVE% > nul\n-  - if defined MINGW_URL set PATH=%CD%\\%MINGW_DIR%\\bin;C:\\msys64\\usr\\bin;%PATH%\n-\n-  # If we're compiling for MSVC then we, like most other distribution builders,\n-  # switch to clang as the compiler. This'll allow us eventually to enable LTO\n-  # amongst LLVM and rustc. Note that we only do this on MSVC as I don't think\n-  # clang has an output mode compatible with MinGW that we need. If it does we\n-  # should switch to clang for MinGW as well!\n-  #\n-  # Note that the LLVM installer is an NSIS installer\n-  #\n-  # Original downloaded here came from\n-  # http://releases.llvm.org/8.0.0/LLVM-8.0.0-win64.exe\n-  - if NOT defined MINGW_URL appveyor-retry appveyor DownloadFile https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/LLVM-8.0.0-win64.exe\n-  - if NOT defined MINGW_URL .\\LLVM-8.0.0-win64.exe /S /NCRC /D=C:\\clang-rust\n-  - if NOT defined MINGW_URL set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --set llvm.clang-cl=C:\\clang-rust\\bin\\clang-cl.exe\n-\n-  # Here we do a pretty heinous thing which is to mangle the MinGW installation\n-  # we just had above. Currently, as of this writing, we're using MinGW-w64\n-  # builds of gcc, and that's currently at 6.3.0. We use 6.3.0 as it appears to\n-  # be the first version which contains a fix for #40546, builds randomly\n-  # failing during LLVM due to ar.exe/ranlib.exe failures.\n-  #\n-  # Unfortunately, though, 6.3.0 *also* is the first version of MinGW-w64 builds\n-  # to contain a regression in gdb (#40184). As a result if we were to use the\n-  # gdb provided (7.11.1) then we would fail all debuginfo tests.\n-  #\n-  # In order to fix spurious failures (pretty high priority) we use 6.3.0. To\n-  # avoid disabling gdb tests we download an *old* version of gdb, specifically\n-  # that found inside the 6.2.0 distribution. We then overwrite the 6.3.0 gdb\n-  # with the 6.2.0 gdb to get tests passing.\n-  #\n-  # Note that we don't literally overwrite the gdb.exe binary because it appears\n-  # to just use gdborig.exe, so that's the binary we deal with instead.\n-  - if defined MINGW_URL appveyor-retry appveyor DownloadFile %MINGW_URL%/2017-04-20-%MSYS_BITS%bit-gdborig.exe\n-  - if defined MINGW_URL mv 2017-04-20-%MSYS_BITS%bit-gdborig.exe %MINGW_DIR%\\bin\\gdborig.exe\n-\n-  # Otherwise pull in the MinGW installed on appveyor\n-  - if NOT defined MINGW_URL set PATH=C:\\msys64\\mingw%MSYS_BITS%\\bin;C:\\msys64\\usr\\bin;%PATH%\n-\n-  # Prefer the \"native\" Python as LLVM has trouble building with MSYS sometimes\n-  - copy C:\\Python27\\python.exe C:\\Python27\\python2.7.exe\n-  - set PATH=C:\\Python27;%PATH%\n-\n-  # Download and install sccache\n-  - appveyor-retry appveyor DownloadFile https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/2018-04-26-sccache-x86_64-pc-windows-msvc\n-  - mv 2018-04-26-sccache-x86_64-pc-windows-msvc sccache.exe\n-  - set PATH=%PATH%;%CD%\n-\n-  # Download and install ninja\n-  #\n-  # Note that this is originally from the github releases patch of Ninja\n-  - appveyor-retry appveyor DownloadFile https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/2017-03-15-ninja-win.zip\n-  - 7z x 2017-03-15-ninja-win.zip\n-  - set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --enable-ninja\n-  # - set PATH=%PATH%;%CD% -- this already happens above for sccache\n-\n-  # Install InnoSetup to get `iscc` used to produce installers\n-  - appveyor-retry appveyor DownloadFile https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/2017-08-22-is.exe\n-  - 2017-08-22-is.exe /VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-\n-  - set PATH=\"C:\\Program Files (x86)\\Inno Setup 5\";%PATH%\n-\n-  # Help debug some handle issues on AppVeyor\n-  - appveyor-retry appveyor DownloadFile https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/2017-05-15-Handle.zip\n-  - mkdir handle\n-  - 7z x -ohandle 2017-05-15-Handle.zip\n-  - set PATH=%PATH%;%CD%\\handle\n-  - handle.exe -accepteula -help\n-\n test_script:\n-  - if not exist C:\\cache\\rustsrc\\NUL mkdir C:\\cache\\rustsrc\n-  - sh src/ci/init_repo.sh . /c/cache/rustsrc\n-  - set SRC=.\n-  - set NO_CCACHE=1\n-  - sh src/ci/run.sh\n+  - echo AppVeyor is not used anymore\n \n branches:\n   only:"}]}