{"sha": "7f90000ab6d823300c73a232715bb965935c932d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmOTAwMDBhYjZkODIzMzAwYzczYTIzMjcxNWJiOTY1OTM1YzkzMmQ=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-19T02:24:27Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-19T02:53:26Z"}, "message": "Precision overrides 0-padding in #fmt", "tree": {"sha": "ced515ef18ad488f13a61f2b10c5c5272c2edf4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ced515ef18ad488f13a61f2b10c5c5272c2edf4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f90000ab6d823300c73a232715bb965935c932d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f90000ab6d823300c73a232715bb965935c932d", "html_url": "https://github.com/rust-lang/rust/commit/7f90000ab6d823300c73a232715bb965935c932d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f90000ab6d823300c73a232715bb965935c932d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59d5267936934f8f653be44d2728fe7f618b89a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/59d5267936934f8f653be44d2728fe7f618b89a4", "html_url": "https://github.com/rust-lang/rust/commit/59d5267936934f8f653be44d2728fe7f618b89a4"}], "stats": {"total": 95, "additions": 60, "deletions": 35}, "files": [{"sha": "64157cdab334b6762ad5bd1ef86f845fdf9a64fd", "filename": "src/lib/ExtFmt.rs", "status": "modified", "additions": 49, "deletions": 34, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/7f90000ab6d823300c73a232715bb965935c932d/src%2Flib%2FExtFmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f90000ab6d823300c73a232715bb965935c932d/src%2Flib%2FExtFmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2FExtFmt.rs?ref=7f90000ab6d823300c73a232715bb965935c932d", "patch": "@@ -451,13 +451,13 @@ mod RT {\n         ret _str.unsafe_from_bytes(svec);\n     }\n \n-    tag pad_type {\n+    tag pad_mode {\n         pad_signed;\n         pad_unsigned;\n         pad_nozero;\n     }\n \n-    fn pad(&conv cv, str s, pad_type pt) -> str {\n+    fn pad(&conv cv, str s, pad_mode mode) -> str {\n         auto uwidth;\n         alt (cv.width) {\n             case (count_implied) {\n@@ -479,44 +479,59 @@ mod RT {\n         if (have_flag(cv.flags, flag_left_justify)) {\n             auto padstr = str_init_elt(padchar, diff);\n             ret s + padstr;\n-        } else {\n-            auto zero_padding = false;\n-            auto signed = false;\n-            alt (pt) {\n-                case (pad_nozero) {\n-                    // fallthrough\n-                }\n-                case (pad_signed) {\n-                    signed = true;\n-                    if (have_flag(cv.flags, flag_left_zero_pad)) {\n-                        padchar = '0';\n-                        zero_padding = true;\n-                    }\n+        }\n+\n+        auto might_zero_pad = false;\n+        auto signed = false;\n+\n+        alt (mode) {\n+            case (pad_nozero) {\n+                // fallthrough\n+            }\n+            case (pad_signed) {\n+                might_zero_pad = true;\n+                signed = true;\n+            }\n+            case (pad_unsigned) {\n+                might_zero_pad = true;\n+            }\n+        }\n+\n+        fn have_precision(&conv cv) -> bool {\n+            alt (cv.precision) {\n+                case (count_implied) {\n+                    ret false;\n                 }\n-                case (pad_unsigned) {\n-                    if (have_flag(cv.flags, flag_left_zero_pad)) {\n-                        padchar = '0';\n-                        zero_padding = true;\n-                    }\n+                case (_) {\n+                    ret true;\n                 }\n             }\n+        }\n \n-            auto padstr = str_init_elt(padchar, diff);\n+        auto zero_padding = false;\n+        if (might_zero_pad\n+            && have_flag(cv.flags, flag_left_zero_pad)\n+            && !have_precision(cv)) {\n \n-            // This is completely heinous. If we have a signed value then\n-            // potentially rip apart the intermediate result and insert some\n-            // zeros. It may make sense to convert zero padding to a precision\n-            // instead.\n-            if (signed\n-                && zero_padding\n-                && _str.byte_len(s) > 0u\n-                && s.(0) == '-' as u8) {\n-\n-                auto bytelen = _str.byte_len(s);\n-                auto numpart = _str.substr(s, 1u, bytelen - 1u);\n-                ret \"-\" + padstr + numpart;\n-            }\n+            padchar = '0';\n+            zero_padding = true;\n+        }\n+\n+        auto padstr = str_init_elt(padchar, diff);\n \n+        // This is completely heinous. If we have a signed value then\n+        // potentially rip apart the intermediate result and insert some\n+        // zeros. It may make sense to convert zero padding to a precision\n+        // instead.\n+        if (signed\n+            && zero_padding\n+            && _str.byte_len(s) > 0u\n+            && s.(0) == '-' as u8) {\n+\n+            auto bytelen = _str.byte_len(s);\n+            auto numpart = _str.substr(s, 1u, bytelen - 1u);\n+            ret \"-\" + padstr + numpart;\n+        } else {\n             ret padstr + s;\n         }\n     }"}, {"sha": "c5ad77f80d224036a3a21f9ad081a4439424e746", "filename": "src/test/run-pass/syntax-extension-fmt.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7f90000ab6d823300c73a232715bb965935c932d/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f90000ab6d823300c73a232715bb965935c932d/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs?ref=7f90000ab6d823300c73a232715bb965935c932d", "patch": "@@ -150,7 +150,17 @@ fn main() {\n   test(#fmt(\"%-05s\", \"test\"), \"test \");\n   test(#fmt(\"%-05b\", true), \"true \");\n \n-  // TODO: Precision overrides 0-padding\n+  // Precision overrides 0-padding\n+  test(#fmt(\"%06.5d\", 0), \" 00000\");\n+  test(#fmt(\"%06.5u\", 0u), \" 00000\");\n+  test(#fmt(\"%06.5x\", 0u), \" 00000\");\n+  test(#fmt(\"%06.5d\", 10), \" 00010\");\n+  test(#fmt(\"%06.5d\", -10), \"-00010\");\n+  test(#fmt(\"%06.5u\", 10u), \" 00010\");\n+  test(#fmt(\"%06.5s\", \"test\"), \"  test\");\n+  test(#fmt(\"%06.5x\", 127u), \" 0007f\");\n+  test(#fmt(\"%06.5X\", 127u), \" 0007F\");\n+\n   // TODO: Padding and +\n   // TODO: Padding and ' '\n }"}]}