{"sha": "958e64594672ccd11fba5ec6925e33ef223301ee", "node_id": "C_kwDOAAsO6NoAKDk1OGU2NDU5NDY3MmNjZDExZmJhNWVjNjkyNWUzM2VmMjIzMzAxZWU", "commit": {"author": {"name": "Jakob Degen", "email": "jakob@degen.com", "date": "2021-10-26T00:04:35Z"}, "committer": {"name": "Jakob Degen", "email": "jakob@degen.com", "date": "2021-10-27T02:17:01Z"}, "message": "Adds hint if a trait fails to resolve and a newly added one in Edition 2021 is suggested", "tree": {"sha": "b010b428a007c3dbd68c7c71f824bcacfd0b1b30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b010b428a007c3dbd68c7c71f824bcacfd0b1b30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/958e64594672ccd11fba5ec6925e33ef223301ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/958e64594672ccd11fba5ec6925e33ef223301ee", "html_url": "https://github.com/rust-lang/rust/commit/958e64594672ccd11fba5ec6925e33ef223301ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/958e64594672ccd11fba5ec6925e33ef223301ee/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e91d5ca197b966b841c4e49c921215a69f9d9c19", "url": "https://api.github.com/repos/rust-lang/rust/commits/e91d5ca197b966b841c4e49c921215a69f9d9c19", "html_url": "https://github.com/rust-lang/rust/commit/e91d5ca197b966b841c4e49c921215a69f9d9c19"}], "stats": {"total": 149, "additions": 134, "deletions": 15}, "files": [{"sha": "57acca16d94a854eacce73d693bc92e41ea0bf53", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 50, "deletions": 7, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/958e64594672ccd11fba5ec6925e33ef223301ee/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958e64594672ccd11fba5ec6925e33ef223301ee/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=958e64594672ccd11fba5ec6925e33ef223301ee", "patch": "@@ -66,6 +66,8 @@ crate struct ImportSuggestion {\n     pub descr: &'static str,\n     pub path: Path,\n     pub accessible: bool,\n+    /// An extra note that should be issued if this item is suggested\n+    pub note: Option<String>,\n }\n \n /// Adjust the impl span so that just the `impl` keyword is taken by removing\n@@ -872,11 +874,38 @@ impl<'a> Resolver<'a> {\n                         }\n \n                         if candidates.iter().all(|v: &ImportSuggestion| v.did != did) {\n+                            // See if we're recommending TryFrom, TryInto, or FromIterator and add\n+                            // a note about editions\n+                            let note = if let Some(did) = did {\n+                                let requires_note = !did.is_local()\n+                                    && this.cstore().item_attrs(did, this.session).iter().any(\n+                                        |attr| {\n+                                            if attr.has_name(sym::rustc_diagnostic_item) {\n+                                                [sym::TryInto, sym::TryFrom, sym::FromIterator]\n+                                                    .map(|x| Some(x))\n+                                                    .contains(&attr.value_str())\n+                                            } else {\n+                                                false\n+                                            }\n+                                        },\n+                                    );\n+\n+                                requires_note.then(|| {\n+                                    format!(\n+                                        \"'{}' is included in the prelude starting in Edition 2021\",\n+                                        path_names_to_string(&path)\n+                                    )\n+                                })\n+                            } else {\n+                                None\n+                            };\n+\n                             candidates.push(ImportSuggestion {\n                                 did,\n                                 descr: res.descr(),\n                                 path,\n                                 accessible: child_accessible,\n+                                note,\n                             });\n                         }\n                     }\n@@ -1764,12 +1793,14 @@ crate fn show_candidates(\n         return;\n     }\n \n-    let mut accessible_path_strings: Vec<(String, &str, Option<DefId>)> = Vec::new();\n-    let mut inaccessible_path_strings: Vec<(String, &str, Option<DefId>)> = Vec::new();\n+    let mut accessible_path_strings: Vec<(String, &str, Option<DefId>, &Option<String>)> =\n+        Vec::new();\n+    let mut inaccessible_path_strings: Vec<(String, &str, Option<DefId>, &Option<String>)> =\n+        Vec::new();\n \n     candidates.iter().for_each(|c| {\n         (if c.accessible { &mut accessible_path_strings } else { &mut inaccessible_path_strings })\n-            .push((path_names_to_string(&c.path), c.descr, c.did))\n+            .push((path_names_to_string(&c.path), c.descr, c.did, &c.note))\n     });\n \n     // we want consistent results across executions, but candidates are produced\n@@ -1792,6 +1823,11 @@ crate fn show_candidates(\n         let instead = if instead { \" instead\" } else { \"\" };\n         let mut msg = format!(\"consider importing {} {}{}\", determiner, kind, instead);\n \n+        // Issue notes\n+        for note in accessible_path_strings.iter().map(|cand| cand.3.as_ref()).flatten() {\n+            err.note(note);\n+        }\n+\n         if let Some(span) = use_placement_span {\n             for candidate in &mut accessible_path_strings {\n                 // produce an additional newline to separate the new use statement\n@@ -1820,7 +1856,7 @@ crate fn show_candidates(\n         assert!(!inaccessible_path_strings.is_empty());\n \n         if inaccessible_path_strings.len() == 1 {\n-            let (name, descr, def_id) = &inaccessible_path_strings[0];\n+            let (name, descr, def_id, note) = &inaccessible_path_strings[0];\n             let msg = format!(\"{} `{}` exists but is inaccessible\", descr, name);\n \n             if let Some(local_def_id) = def_id.and_then(|did| did.as_local()) {\n@@ -1832,12 +1868,15 @@ crate fn show_candidates(\n             } else {\n                 err.note(&msg);\n             }\n+            if let Some(note) = (*note).as_deref() {\n+                err.note(note);\n+            }\n         } else {\n-            let (_, descr_first, _) = &inaccessible_path_strings[0];\n+            let (_, descr_first, _, _) = &inaccessible_path_strings[0];\n             let descr = if inaccessible_path_strings\n                 .iter()\n                 .skip(1)\n-                .all(|(_, descr, _)| descr == descr_first)\n+                .all(|(_, descr, _, _)| descr == descr_first)\n             {\n                 descr_first.to_string()\n             } else {\n@@ -1848,7 +1887,7 @@ crate fn show_candidates(\n             let mut has_colon = false;\n \n             let mut spans = Vec::new();\n-            for (name, _, def_id) in &inaccessible_path_strings {\n+            for (name, _, def_id, _) in &inaccessible_path_strings {\n                 if let Some(local_def_id) = def_id.and_then(|did| did.as_local()) {\n                     let span = definitions.def_span(local_def_id);\n                     let span = session.source_map().guess_head_span(span);\n@@ -1868,6 +1907,10 @@ crate fn show_candidates(\n                 multi_span.push_span_label(span, format!(\"`{}`: not accessible\", name));\n             }\n \n+            for note in inaccessible_path_strings.iter().map(|cand| cand.3.as_ref()).flatten() {\n+                err.note(note);\n+            }\n+\n             err.span_note(multi_span, &msg);\n         }\n     }"}, {"sha": "5f90fcdfa64e2cc205525adfa782b98bdb29484b", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/958e64594672ccd11fba5ec6925e33ef223301ee/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958e64594672ccd11fba5ec6925e33ef223301ee/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=958e64594672ccd11fba5ec6925e33ef223301ee", "patch": "@@ -1502,6 +1502,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                                 descr: \"module\",\n                                 path,\n                                 accessible: true,\n+                                note: None,\n                             },\n                         ));\n                     } else {"}, {"sha": "f03b42bbe47518d95f4202d66e3736e046cc532d", "filename": "src/test/ui/suggestions/suggest-tryinto-edition-change.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/958e64594672ccd11fba5ec6925e33ef223301ee/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958e64594672ccd11fba5ec6925e33ef223301ee/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.rs?ref=958e64594672ccd11fba5ec6925e33ef223301ee", "patch": "@@ -1,11 +1,31 @@\n-// Make sure that calling `.try_into()` in pre-2021 mentions Edition 2021 change\n+// Make sure that trying to access `TryInto`, `TryFrom`, `FromIterator` in pre-2021 mentions\n+// Edition 2021 change\n // edition:2018\n \n fn test() {\n-    let i: i16 = 0_i32.try_into().unwrap();\n+    let _i: i16 = 0_i32.try_into().unwrap();\n     //~^ ERROR no method named `try_into` found for type `i32` in the current scope\n     //~| NOTE method not found in `i32`\n     //~| NOTE 'std::convert::TryInto' is included in the prelude starting in Edition 2021\n+\n+    let _i: i16 = TryFrom::try_from(0_i32).unwrap();\n+    //~^ ERROR failed to resolve: use of undeclared type\n+    //~| NOTE not found in this scope\n+    //~| NOTE 'std::convert::TryFrom' is included in the prelude starting in Edition 2021\n+    //~| NOTE 'core::convert::TryFrom' is included in the prelude starting in Edition 2021\n+\n+    let _i: i16 = TryInto::try_into(0_i32).unwrap();\n+    //~^ ERROR failed to resolve: use of undeclared type\n+    //~| NOTE not found in this scope\n+    //~| NOTE 'std::convert::TryInto' is included in the prelude starting in Edition 2021\n+    //~| NOTE 'core::convert::TryInto' is included in the prelude starting in Edition 2021\n+\n+    let _v: Vec<_> = FromIterator::from_iter(&[1]);\n+    //~^ ERROR failed to resolve: use of undeclared type\n+    //~| NOTE 'std::iter::FromIterator' is included in the prelude starting in Edition 2021\n+    //~| NOTE 'core::iter::FromIterator' is included in the prelude starting in Edition 2021\n }\n \n-fn main() {}\n+fn main() {\n+    test();\n+}"}, {"sha": "80191ec4fd7b4f4595988d01fb76a510ad03ac68", "filename": "src/test/ui/suggestions/suggest-tryinto-edition-change.stderr", "status": "modified", "additions": 60, "deletions": 5, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/958e64594672ccd11fba5ec6925e33ef223301ee/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/958e64594672ccd11fba5ec6925e33ef223301ee/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.stderr?ref=958e64594672ccd11fba5ec6925e33ef223301ee", "patch": "@@ -1,8 +1,62 @@\n+error[E0433]: failed to resolve: use of undeclared type `TryFrom`\n+  --> $DIR/suggest-tryinto-edition-change.rs:11:19\n+   |\n+LL |     let _i: i16 = TryFrom::try_from(0_i32).unwrap();\n+   |                   ^^^^^^^ not found in this scope\n+   |\n+   = note: 'std::convert::TryFrom' is included in the prelude starting in Edition 2021\n+   = note: 'core::convert::TryFrom' is included in the prelude starting in Edition 2021\n+help: consider importing one of these items\n+   |\n+LL | use std::convert::TryFrom;\n+   |\n+LL | use core::convert::TryFrom;\n+   |\n+\n+error[E0433]: failed to resolve: use of undeclared type `TryInto`\n+  --> $DIR/suggest-tryinto-edition-change.rs:17:19\n+   |\n+LL |     let _i: i16 = TryInto::try_into(0_i32).unwrap();\n+   |                   ^^^^^^^ not found in this scope\n+   |\n+   = note: 'std::convert::TryInto' is included in the prelude starting in Edition 2021\n+   = note: 'core::convert::TryInto' is included in the prelude starting in Edition 2021\n+help: consider importing one of these items\n+   |\n+LL | use std::convert::TryInto;\n+   |\n+LL | use core::convert::TryInto;\n+   |\n+\n+error[E0433]: failed to resolve: use of undeclared type `FromIterator`\n+  --> $DIR/suggest-tryinto-edition-change.rs:23:22\n+   |\n+LL |     let _v: Vec<_> = FromIterator::from_iter(&[1]);\n+   |                      ^^^^^^^^^^^^\n+   |\n+  ::: $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL | pub trait IntoIterator {\n+   | ---------------------- similarly named trait `IntoIterator` defined here\n+   |\n+   = note: 'std::iter::FromIterator' is included in the prelude starting in Edition 2021\n+   = note: 'core::iter::FromIterator' is included in the prelude starting in Edition 2021\n+help: a trait with a similar name exists\n+   |\n+LL |     let _v: Vec<_> = IntoIterator::from_iter(&[1]);\n+   |                      ~~~~~~~~~~~~\n+help: consider importing one of these items\n+   |\n+LL | use std::iter::FromIterator;\n+   |\n+LL | use core::iter::FromIterator;\n+   |\n+\n error[E0599]: no method named `try_into` found for type `i32` in the current scope\n-  --> $DIR/suggest-tryinto-edition-change.rs:5:24\n+  --> $DIR/suggest-tryinto-edition-change.rs:6:25\n    |\n-LL |     let i: i16 = 0_i32.try_into().unwrap();\n-   |                        ^^^^^^^^ method not found in `i32`\n+LL |     let _i: i16 = 0_i32.try_into().unwrap();\n+   |                         ^^^^^^^^ method not found in `i32`\n    |\n   ::: $SRC_DIR/core/src/convert/mod.rs:LL:COL\n    |\n@@ -16,6 +70,7 @@ help: the following trait is implemented but not in scope; perhaps add a `use` f\n LL | use std::convert::TryInto;\n    |\n \n-error: aborting due to previous error\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0599`.\n+Some errors have detailed explanations: E0433, E0599.\n+For more information about an error, try `rustc --explain E0433`."}]}