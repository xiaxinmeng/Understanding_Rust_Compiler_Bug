{"sha": "b7f6a0b322dd48d972c3643b19d56232c118a3bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZjZhMGIzMjJkZDQ4ZDk3MmMzNjQzYjE5ZDU2MjMyYzExOGEzYmY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-30T21:09:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-30T21:09:02Z"}, "message": "Rollup merge of #72773 - Rantanen:is_char_boundary-docs, r=joshtriplett\n\nFix is_char_boundary documentation\n\nGiven the \"start _and/or end_\" wording in the original, the way I understood it was that the `str::is_char_boundary` method would also return `true` for the last byte in a UTF-8 code point sequence. (Which would have meant that for a string consisting of nothing but 1 and 2 byte UTF-8 code point sequences, it would return nothing but `true`.)\n\nIn practice the method returns `true` only for the starting byte of each sequence and the end of the string: [Playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=e9f5fc4d6bf2f1bf57a75f3c9a180770)\n\nI was also somewhat tempted to remove the _The start and end of the string are considered to be boundaries_, since that's implied by the first sentence, but I decided to avoid bikeshedding over it and left it as it was since it's not wrong in relation to how the method behaves.", "tree": {"sha": "6efafc79f7f16cf4d27df28f6053fd6007271c2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6efafc79f7f16cf4d27df28f6053fd6007271c2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7f6a0b322dd48d972c3643b19d56232c118a3bf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe0stvCRBK7hj4Ov3rIwAAdHIIAATUqWbQffGmk0XW4Akx4+/Q\n3zuXga4v2WL59wir/od3a3d6dXCUzvwije0+c7XZ4mSewJHpUuMqatvrDpChOuUS\ngU992NINHEMMZgGFWCmhdAN9dsstwYVPPzk5PkCkE5cFj76mIlnnj1MkPhTylB9Z\natrSxH7A+uPBzzOXcgVKqSbonCdbgytzjSrWfJ/XSkrjpDdwLYCvWIXuHzKiyE0/\nOUpad50M8mY790cnGBe7Hl3/zB82MVZVp7amdMQysDsph1EK7iLoFfS9iIKsYNbv\n/ViZL6eRxZv9dj22/ghgzdBohZJi5xXGBUPPkHvd1o2e0ncQrk+7sMeN5OABCKM=\n=qqxL\n-----END PGP SIGNATURE-----\n", "payload": "tree 6efafc79f7f16cf4d27df28f6053fd6007271c2e\nparent 356d1e9f4f3a1b86311f17a6e76609a642338279\nparent 66e99849389475f1f425512278bfeddb25944deb\nauthor Ralf Jung <post@ralfj.de> 1590872942 +0200\ncommitter GitHub <noreply@github.com> 1590872942 +0200\n\nRollup merge of #72773 - Rantanen:is_char_boundary-docs, r=joshtriplett\n\nFix is_char_boundary documentation\n\nGiven the \"start _and/or end_\" wording in the original, the way I understood it was that the `str::is_char_boundary` method would also return `true` for the last byte in a UTF-8 code point sequence. (Which would have meant that for a string consisting of nothing but 1 and 2 byte UTF-8 code point sequences, it would return nothing but `true`.)\n\nIn practice the method returns `true` only for the starting byte of each sequence and the end of the string: [Playground](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=e9f5fc4d6bf2f1bf57a75f3c9a180770)\n\nI was also somewhat tempted to remove the _The start and end of the string are considered to be boundaries_, since that's implied by the first sentence, but I decided to avoid bikeshedding over it and left it as it was since it's not wrong in relation to how the method behaves.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7f6a0b322dd48d972c3643b19d56232c118a3bf", "html_url": "https://github.com/rust-lang/rust/commit/b7f6a0b322dd48d972c3643b19d56232c118a3bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7f6a0b322dd48d972c3643b19d56232c118a3bf/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "356d1e9f4f3a1b86311f17a6e76609a642338279", "url": "https://api.github.com/repos/rust-lang/rust/commits/356d1e9f4f3a1b86311f17a6e76609a642338279", "html_url": "https://github.com/rust-lang/rust/commit/356d1e9f4f3a1b86311f17a6e76609a642338279"}, {"sha": "66e99849389475f1f425512278bfeddb25944deb", "url": "https://api.github.com/repos/rust-lang/rust/commits/66e99849389475f1f425512278bfeddb25944deb", "html_url": "https://github.com/rust-lang/rust/commit/66e99849389475f1f425512278bfeddb25944deb"}], "stats": {"total": 7, "additions": 3, "deletions": 4}, "files": [{"sha": "316c2cd55aceaf60527b454354f737ee5ce0fc88", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b7f6a0b322dd48d972c3643b19d56232c118a3bf/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f6a0b322dd48d972c3643b19d56232c118a3bf/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=b7f6a0b322dd48d972c3643b19d56232c118a3bf", "patch": "@@ -2270,12 +2270,11 @@ impl str {\n         self.len() == 0\n     }\n \n-    /// Checks that `index`-th byte lies at the start and/or end of a\n-    /// UTF-8 code point sequence.\n+    /// Checks that `index`-th byte is the first byte in a UTF-8 code point\n+    /// sequence or the end of the string.\n     ///\n     /// The start and end of the string (when `index == self.len()`) are\n-    /// considered to be\n-    /// boundaries.\n+    /// considered to be boundaries.\n     ///\n     /// Returns `false` if `index` is greater than `self.len()`.\n     ///"}]}