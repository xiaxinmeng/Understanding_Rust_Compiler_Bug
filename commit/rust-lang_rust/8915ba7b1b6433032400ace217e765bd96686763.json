{"sha": "8915ba7b1b6433032400ace217e765bd96686763", "node_id": "C_kwDOAAsO6NoAKDg5MTViYTdiMWI2NDMzMDMyNDAwYWNlMjE3ZTc2NWJkOTY2ODY3NjM", "commit": {"author": {"name": "Alex Touchet", "email": "alextouchet@outlook.com", "date": "2022-12-29T05:47:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-29T05:47:09Z"}, "message": "Improve Markdown styling in README", "tree": {"sha": "a8a5ce1f45d27df5660602c6ebe9fa1bd28b9ad6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8a5ce1f45d27df5660602c6ebe9fa1bd28b9ad6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8915ba7b1b6433032400ace217e765bd96686763", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjrSndCRBK7hj4Ov3rIwAAtqcIAJ602nphzLyasY6f5r/hH5YL\nL+aZVwOZmuanVXTfcfp7gMuO3ywTbZlOvR6Pq26x5b9U0X3XXrUExjp6oce1CF1Q\nFBecDpFlLMTxAIbcDmJRtM6MX6cbD+t8qA9pJzU4rVkSCHM0Of3EtyedjYFzIVOE\nSts36XNpkgaQXDoRcf5q1DSMROkn/aeLuOjxFMSfTUgqe8tgVg/LoaC4lrOk4JVC\n5TLCFp3Cc0lezA3EM10YXxjoHSmnPfID2BrYHUzFBABFDEZiR/qaEseW6yZ2R3nm\n6JCkUm2eimpWY3fEJcTr1L74pu8eoywLSRlvWLF2AFPexIkHVQerxq7gNbyiKE8=\n=xZji\n-----END PGP SIGNATURE-----\n", "payload": "tree a8a5ce1f45d27df5660602c6ebe9fa1bd28b9ad6\nparent b15ca6635f752fefebfd101aa944c6167128183c\nauthor Alex Touchet <alextouchet@outlook.com> 1672292829 -0800\ncommitter GitHub <noreply@github.com> 1672292829 -0800\n\nImprove Markdown styling in README"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8915ba7b1b6433032400ace217e765bd96686763", "html_url": "https://github.com/rust-lang/rust/commit/8915ba7b1b6433032400ace217e765bd96686763", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8915ba7b1b6433032400ace217e765bd96686763/comments", "author": {"login": "atouchet", "id": 26315797, "node_id": "MDQ6VXNlcjI2MzE1Nzk3", "avatar_url": "https://avatars.githubusercontent.com/u/26315797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atouchet", "html_url": "https://github.com/atouchet", "followers_url": "https://api.github.com/users/atouchet/followers", "following_url": "https://api.github.com/users/atouchet/following{/other_user}", "gists_url": "https://api.github.com/users/atouchet/gists{/gist_id}", "starred_url": "https://api.github.com/users/atouchet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atouchet/subscriptions", "organizations_url": "https://api.github.com/users/atouchet/orgs", "repos_url": "https://api.github.com/users/atouchet/repos", "events_url": "https://api.github.com/users/atouchet/events{/privacy}", "received_events_url": "https://api.github.com/users/atouchet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b15ca6635f752fefebfd101aa944c6167128183c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b15ca6635f752fefebfd101aa944c6167128183c", "html_url": "https://github.com/rust-lang/rust/commit/b15ca6635f752fefebfd101aa944c6167128183c"}], "stats": {"total": 163, "additions": 90, "deletions": 73}, "files": [{"sha": "0eb7c4b266a9f3a529e1b3c555ac2bf1dee974c1", "filename": "README.md", "status": "modified", "additions": 90, "deletions": 73, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/8915ba7b1b6433032400ace217e765bd96686763/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/8915ba7b1b6433032400ace217e765bd96686763/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=8915ba7b1b6433032400ace217e765bd96686763", "patch": "@@ -3,10 +3,11 @@\n This is the main source code repository for [Rust]. It contains the compiler,\n standard library, and documentation.\n \n-[Rust]: https://www.rust-lang.org\n+[Rust]: https://www.rust-lang.org/\n \n **Note: this README is for _users_ rather than _contributors_.**\n-If you wish to _contribute_ to the compiler, you should read [CONTRIBUTING.md](CONTRIBUTING.md) instead.\n+If you wish to _contribute_ to the compiler, you should read\n+[CONTRIBUTING.md](CONTRIBUTING.md) instead.\n \n ## Quick Start\n \n@@ -20,13 +21,15 @@ Read [\"Installation\"] from [The Book].\n The Rust build system uses a Python script called `x.py` to build the compiler,\n which manages the bootstrapping process. It lives at the root of the project.\n \n-The `x.py` command can be run directly on most Unix systems in the following format:\n+The `x.py` command can be run directly on most Unix systems in the following\n+format:\n \n ```sh\n ./x.py <subcommand> [flags]\n ```\n \n-This is how the documentation and examples assume you are running `x.py`. Some alternative ways are:\n+This is how the documentation and examples assume you are running `x.py`.\n+Some alternative ways are:\n \n ```sh\n # On a Unix shell if you don't have the necessary `python3` command\n@@ -39,8 +42,8 @@ x.py <subcommand> [flags]\n python x.py <subcommand> [flags]\n ```\n \n-More information about `x.py` can be found\n-by running it with the `--help` flag or reading the [rustc dev guide][rustcguidebuild].\n+More information about `x.py` can be found by running it with the `--help` flag\n+or reading the [rustc dev guide][rustcguidebuild].\n \n [gettingstarted]: https://rustc-dev-guide.rust-lang.org/getting-started.html\n [rustcguidebuild]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html\n@@ -49,24 +52,29 @@ by running it with the `--help` flag or reading the [rustc dev guide][rustcguide\n \n Make sure you have installed the dependencies:\n \n-   * `python` 3 or 2.7\n-   * `git`\n-   * A C compiler (when building for the host, `cc` is enough; cross-compiling may need additional compilers)\n-   * `curl` (not needed on Windows)\n-   * `pkg-config` if you are compiling on Linux and targeting Linux\n-   * `libiconv` (already included with glibc on Debian-based distros)\n+* `python` 3 or 2.7\n+* `git`\n+* A C compiler (when building for the host, `cc` is enough; cross-compiling may\n+  need additional compilers)\n+* `curl` (not needed on Windows)\n+* `pkg-config` if you are compiling on Linux and targeting Linux\n+* `libiconv` (already included with glibc on Debian-based distros)\n \n-To build cargo, you'll also need OpenSSL (`libssl-dev` or `openssl-devel` on most Unix distros).\n+To build Cargo, you'll also need OpenSSL (`libssl-dev` or `openssl-devel` on\n+most Unix distros).\n \n If building LLVM from source, you'll need additional tools:\n \n * `g++`, `clang++`, or MSVC with versions listed on\n   [LLVM's documentation](https://llvm.org/docs/GettingStarted.html#host-c-toolchain-both-compiler-and-standard-library)\n-* `ninja`, or GNU `make` 3.81 or later (ninja is recommended, especially on Windows)\n+* `ninja`, or GNU `make` 3.81 or later (Ninja is recommended, especially on\n+  Windows)\n * `cmake` 3.13.4 or later\n-* `libstdc++-static` may be required on some Linux distributions such as Fedora and Ubuntu\n+* `libstdc++-static` may be required on some Linux distributions such as Fedora\n+  and Ubuntu\n \n-On tier 1 or tier 2 with host tools platforms, you can also choose to download LLVM by setting `llvm.download-ci-llvm = true`.\n+On tier 1 or tier 2 with host tools platforms, you can also choose to download\n+LLVM by setting `llvm.download-ci-llvm = true`.\n Otherwise, you'll need LLVM installed and `llvm-config` in your path.\n See [the rustc-dev-guide for more info][sysllvm].\n \n@@ -86,52 +94,57 @@ See [the rustc-dev-guide for more info][sysllvm].\n \n 2. Configure the build settings:\n \n-    The Rust build system uses a file named `config.toml` in the root of the\n-    source tree to determine various configuration settings for the build.\n-    Set up the defaults intended for distros to get started. You can see a full list of options\n-    in `config.toml.example`.\n+   The Rust build system uses a file named `config.toml` in the root of the\n+   source tree to determine various configuration settings for the build.\n+   Set up the defaults intended for distros to get started. You can see a full\n+   list of options in `config.toml.example`.\n \n-    ```sh\n-    printf 'profile = \"user\" \\nchangelog-seen = 2 \\n' > config.toml\n-    ```\n+   ```sh\n+   printf 'profile = \"user\" \\nchangelog-seen = 2 \\n' > config.toml\n+   ```\n \n-    If you plan to use `x.py install` to create an installation, it is recommended\n-    that you set the `prefix` value in the `[install]` section to a directory.\n+   If you plan to use `x.py install` to create an installation, it is\n+   recommended that you set the `prefix` value in the `[install]` section to a\n+   directory.\n \n 3. Build and install:\n \n-    ```sh\n-    ./x.py build && ./x.py install\n-    ```\n+   ```sh\n+   ./x.py build && ./x.py install\n+   ```\n \n-    When complete, `./x.py install` will place several programs into\n-    `$PREFIX/bin`: `rustc`, the Rust compiler, and `rustdoc`, the\n-    API-documentation tool. If you've set `profile = \"user\"` or `build.extended = true`, it will\n-    also include [Cargo], Rust's package manager.\n+   When complete, `./x.py install` will place several programs into\n+   `$PREFIX/bin`: `rustc`, the Rust compiler, and `rustdoc`, the\n+   API-documentation tool. If you've set `profile = \"user\"` or\n+   `build.extended = true`, it will also include [Cargo], Rust's package\n+   manager.\n \n [Cargo]: https://github.com/rust-lang/cargo\n \n ### Building on Windows\n \n-On Windows, we suggest using [winget] to install dependencies by running the following in a terminal:\n+On Windows, we suggest using [winget] to install dependencies by running the\n+following in a terminal:\n \n ```powershell\n winget install -e Python.Python.3\n winget install -e Kitware.CMake\n winget install -e Git.Git\n ```\n \n-Then edit your system's `PATH` variable and add: `C:\\Program Files\\CMake\\bin`. See\n-[this guide on editing the system `PATH`](https://www.java.com/en/download/help/path.html) from the\n-Java documentation.\n+Then edit your system's `PATH` variable and add: `C:\\Program Files\\CMake\\bin`.\n+See\n+[this guide on editing the system `PATH`](https://www.java.com/en/download/help/path.html)\n+from the Java documentation.\n \n [winget]: https://github.com/microsoft/winget-cli\n \n There are two prominent ABIs in use on Windows: the native (MSVC) ABI used by\n Visual Studio and the GNU ABI used by the GCC toolchain. Which version of Rust\n you need depends largely on what C/C++ libraries you want to interoperate with.\n-Use the MSVC build of Rust to interop with software produced by Visual Studio and\n-the GNU build to interop with GNU software built using the MinGW/MSYS2 toolchain.\n+Use the MSVC build of Rust to interop with software produced by Visual Studio\n+and the GNU build to interop with GNU software built using the MinGW/MSYS2\n+toolchain.\n \n #### MinGW\n \n@@ -144,7 +157,7 @@ the GNU build to interop with GNU software built using the MinGW/MSYS2 toolchain\n 2. Run `mingw32_shell.bat` or `mingw64_shell.bat` from the MSYS2 installation\n    directory (e.g. `C:\\msys64`), depending on whether you want 32-bit or 64-bit\n    Rust. (As of the latest version of MSYS2 you have to run `msys2_shell.cmd\n-   -mingw32` or `msys2_shell.cmd -mingw64` from the command line instead)\n+   -mingw32` or `msys2_shell.cmd -mingw64` from the command line instead.)\n \n 3. From this terminal, install the required tools:\n \n@@ -153,11 +166,11 @@ the GNU build to interop with GNU software built using the MinGW/MSYS2 toolchain\n    pacman -Sy pacman-mirrors\n \n    # Install build tools needed for Rust. If you're building a 32-bit compiler,\n-   # then replace \"x86_64\" below with \"i686\". If you've already got git, python,\n-   # or CMake installed and in PATH you can remove them from this list. Note\n-   # that it is important that you do **not** use the 'python2', 'cmake' and 'ninja'\n-   # packages from the 'msys2' subsystem. The build has historically been known\n-   # to fail with these packages.\n+   # then replace \"x86_64\" below with \"i686\". If you've already got Git, Python,\n+   # or CMake installed and in PATH you can remove them from this list.\n+   # Note that it is important that you do **not** use the 'python2', 'cmake',\n+   # and 'ninja' packages from the 'msys2' subsystem.\n+   # The build has historically been known to fail with these packages.\n    pacman -S git \\\n                make \\\n                diffutils \\\n@@ -178,12 +191,12 @@ the GNU build to interop with GNU software built using the MinGW/MSYS2 toolchain\n \n MSVC builds of Rust additionally require an installation of Visual Studio 2017\n (or later) so `rustc` can use its linker.  The simplest way is to get\n-[Visual Studio], check the \u201cC++ build tools\u201d and \u201cWindows 10 SDK\u201d workload.\n+[Visual Studio], check the \"C++ build tools\" and \"Windows 10 SDK\" workload.\n \n [Visual Studio]: https://visualstudio.microsoft.com/downloads/\n \n-(If you're installing cmake yourself, be careful that \u201cC++ CMake tools for\n-Windows\u201d doesn't get included under \u201cIndividual components\u201d.)\n+(If you're installing CMake yourself, be careful that \"C++ CMake tools for\n+Windows\" doesn't get included under \"Individual components\".)\n \n With these dependencies installed, you can build the compiler in a `cmd.exe`\n shell with:\n@@ -192,10 +205,11 @@ shell with:\n python x.py build\n ```\n \n-Right now, building Rust only works with some known versions of Visual Studio. If\n-you have a more recent version installed and the build system doesn't understand,\n-you may need to force rustbuild to use an older version. This can be done\n-by manually calling the appropriate vcvars file before running the bootstrap.\n+Right now, building Rust only works with some known versions of Visual Studio.\n+If you have a more recent version installed and the build system doesn't\n+understand, you may need to force rustbuild to use an older version.\n+This can be done by manually calling the appropriate vcvars file before running\n+the bootstrap.\n \n ```batch\n CALL \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat\"\n@@ -215,9 +229,9 @@ Windows build triples are:\n     - `x86_64-pc-windows-msvc`\n \n The build triple can be specified by either specifying `--build=<triple>` when\n-invoking `x.py` commands, or by creating a `config.toml` file (as described\n-in [Installing From Source](#installing-from-source)), and modifying the\n-`build` option under the `[build]` section.\n+invoking `x.py` commands, or by creating a `config.toml` file (as described in\n+[Installing from Source](#installing-from-source)), and modifying the `build`\n+option under the `[build]` section.\n \n ### Configure and Make\n \n@@ -229,33 +243,35 @@ configure script and makefile (the latter of which just invokes `x.py`).\n make && sudo make install\n ```\n \n-`configure` generates a `config.toml` which can also be used with normal `x.py` invocations.\n+`configure` generates a `config.toml` which can also be used with normal `x.py`\n+invocations.\n \n ## Building Documentation\n \n-If you\u2019d like to build the documentation, it\u2019s almost the same:\n+If you'd like to build the documentation, it's almost the same:\n \n ```sh\n ./x.py doc\n ```\n \n The generated documentation will appear under `doc` in the `build` directory for\n-the ABI used. I.e., if the ABI was `x86_64-pc-windows-msvc`, the directory will be\n-`build\\x86_64-pc-windows-msvc\\doc`.\n+the ABI used. That is, if the ABI was `x86_64-pc-windows-msvc`, the directory\n+will be `build\\x86_64-pc-windows-msvc\\doc`.\n \n ## Notes\n \n-Since the Rust compiler is written in Rust, it must be built by a\n-precompiled \"snapshot\" version of itself (made in an earlier stage of\n-development). As such, source builds require an Internet connection to\n-fetch snapshots, and an OS that can execute the available snapshot binaries.\n+Since the Rust compiler is written in Rust, it must be built by a precompiled\n+\"snapshot\" version of itself (made in an earlier stage of development).\n+As such, source builds require an Internet connection to fetch snapshots, and an\n+OS that can execute the available snapshot binaries.\n \n-See https://doc.rust-lang.org/nightly/rustc/platform-support.html for a list of supported platforms.\n-Only \"host tools\" platforms have a pre-compiled snapshot binary available; to compile for a platform\n-without host tools you must cross-compile.\n+See https://doc.rust-lang.org/nightly/rustc/platform-support.html for a list of\n+supported platforms.\n+Only \"host tools\" platforms have a pre-compiled snapshot binary available; to\n+compile for a platform without host tools you must cross-compile.\n \n-You may find that other platforms work, but these are our officially\n-supported build environments that are most likely to work.\n+You may find that other platforms work, but these are our officially supported\n+build environments that are most likely to work.\n \n ## Getting Help\n \n@@ -267,23 +283,24 @@ See [CONTRIBUTING.md](CONTRIBUTING.md).\n \n ## License\n \n-Rust is primarily distributed under the terms of both the MIT license\n-and the Apache License (Version 2.0), with portions covered by various\n-BSD-like licenses.\n+Rust is primarily distributed under the terms of both the MIT license and the\n+Apache License (Version 2.0), with portions covered by various BSD-like\n+licenses.\n \n See [LICENSE-APACHE](LICENSE-APACHE), [LICENSE-MIT](LICENSE-MIT), and\n [COPYRIGHT](COPYRIGHT) for details.\n \n ## Trademark\n \n [The Rust Foundation][rust-foundation] owns and protects the Rust and Cargo\n-trademarks and logos (the \u201cRust Trademarks\u201d).\n+trademarks and logos (the \"Rust Trademarks\").\n \n-If you want to use these names or brands, please read the [media guide][media-guide].\n+If you want to use these names or brands, please read the\n+[media guide][media-guide].\n \n Third-party logos may be subject to third-party copyrights and trademarks. See\n [Licenses][policies-licenses] for details.\n \n [rust-foundation]: https://foundation.rust-lang.org/\n-[media-guide]: https://www.rust-lang.org/policies/media-guide\n+[media-guide]: https://foundation.rust-lang.org/policies/logo-policy-and-media-guide/\n [policies-licenses]: https://www.rust-lang.org/policies/licenses"}]}