{"sha": "9766ee0b2040d93c7ff4af237c3c839d54adf8ea", "node_id": "C_kwDOAAsO6NoAKDk3NjZlZTBiMjA0MGQ5M2M3ZmY0YWYyMzdjM2M4MzlkNTRhZGY4ZWE", "commit": {"author": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-11-09T17:21:42Z"}, "committer": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-11-09T17:21:42Z"}, "message": "Fix struct field tracking and add tests for it", "tree": {"sha": "16004fc510ef6d40424a563df191f59343361ef1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16004fc510ef6d40424a563df191f59343361ef1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9766ee0b2040d93c7ff4af237c3c839d54adf8ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9766ee0b2040d93c7ff4af237c3c839d54adf8ea", "html_url": "https://github.com/rust-lang/rust/commit/9766ee0b2040d93c7ff4af237c3c839d54adf8ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9766ee0b2040d93c7ff4af237c3c839d54adf8ea/comments", "author": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfbca6c75c1502b14ffda12afa2b688fe42288fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfbca6c75c1502b14ffda12afa2b688fe42288fc", "html_url": "https://github.com/rust-lang/rust/commit/bfbca6c75c1502b14ffda12afa2b688fe42288fc"}], "stats": {"total": 155, "additions": 145, "deletions": 10}, "files": [{"sha": "17d349fb526998db82fa77f023ae6682fdab942c", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9766ee0b2040d93c7ff4af237c3c839d54adf8ea/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9766ee0b2040d93c7ff4af237c3c839d54adf8ea/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=9766ee0b2040d93c7ff4af237c3c839d54adf8ea", "patch": "@@ -151,9 +151,7 @@ pub trait ValueAnalysis<'tcx> {\n     ) -> ValueOrPlace<Self::Value> {\n         match rvalue {\n             Rvalue::Use(operand) => self.handle_operand(operand, state),\n-            Rvalue::CopyForDeref(place) => {\n-                self.handle_operand(&Operand::Copy(*place), state)\n-            }\n+            Rvalue::CopyForDeref(place) => self.handle_operand(&Operand::Copy(*place), state),\n             Rvalue::Ref(..) | Rvalue::AddressOf(..) => {\n                 // We don't track such places.\n                 ValueOrPlace::top()\n@@ -638,9 +636,7 @@ impl Map {\n                 return;\n             }\n             projection.push(PlaceElem::Field(field, ty));\n-            self.register_with_filter_rec(\n-                tcx, local, projection, ty, filter, exclude,\n-            );\n+            self.register_with_filter_rec(tcx, local, projection, ty, filter, exclude);\n             projection.pop();\n         });\n     }\n@@ -842,13 +838,17 @@ fn iter_fields<'tcx>(\n             }\n         }\n         ty::Adt(def, substs) => {\n+            if def.is_union() {\n+                return;\n+            }\n             for (v_index, v_def) in def.variants().iter_enumerated() {\n+                let variant = if def.is_struct() { None } else { Some(v_index) };\n                 for (f_index, f_def) in v_def.fields.iter().enumerate() {\n                     let field_ty = f_def.ty(tcx, substs);\n                     let field_ty = tcx\n                         .try_normalize_erasing_regions(ty::ParamEnv::reveal_all(), field_ty)\n                         .unwrap_or(field_ty);\n-                    f(Some(v_index), f_index.into(), field_ty);\n+                    f(variant, f_index.into(), field_ty);\n                 }\n             }\n         }"}, {"sha": "e1c7b6ab1803adddb14621b21d5f3e27d079be8f", "filename": "compiler/rustc_mir_transform/src/dataflow_const_prop.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9766ee0b2040d93c7ff4af237c3c839d54adf8ea/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9766ee0b2040d93c7ff4af237c3c839d54adf8ea/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs?ref=9766ee0b2040d93c7ff4af237c3c839d54adf8ea", "patch": "@@ -7,9 +7,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::mir::visit::{MutVisitor, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n-use rustc_mir_dataflow::value_analysis::{\n-    Map, State, TrackElem, ValueAnalysis, ValueOrPlace,\n-};\n+use rustc_mir_dataflow::value_analysis::{Map, State, TrackElem, ValueAnalysis, ValueOrPlace};\n use rustc_mir_dataflow::{lattice::FlatSet, Analysis, ResultsVisitor, SwitchIntEdgeEffects};\n use rustc_span::DUMMY_SP;\n "}, {"sha": "2ced794e628f0462813e4f0065136af076984464", "filename": "src/test/mir-opt/dataflow-const-prop/enum.main.DataflowConstProp.diff", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/9766ee0b2040d93c7ff4af237c3c839d54adf8ea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fenum.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9766ee0b2040d93c7ff4af237c3c839d54adf8ea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fenum.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fenum.main.DataflowConstProp.diff?ref=9766ee0b2040d93c7ff4af237c3c839d54adf8ea", "patch": "@@ -0,0 +1,61 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/enum.rs:+0:11: +0:11\n+      let _1: E;                           // in scope 0 at $DIR/enum.rs:+1:9: +1:10\n+      let mut _3: isize;                   // in scope 0 at $DIR/enum.rs:+2:23: +2:31\n+      scope 1 {\n+          debug e => _1;                   // in scope 1 at $DIR/enum.rs:+1:9: +1:10\n+          let _2: i32;                     // in scope 1 at $DIR/enum.rs:+2:9: +2:10\n+          let _4: i32;                     // in scope 1 at $DIR/enum.rs:+2:29: +2:30\n+          let _5: i32;                     // in scope 1 at $DIR/enum.rs:+2:44: +2:45\n+          scope 2 {\n+              debug x => _2;               // in scope 2 at $DIR/enum.rs:+2:9: +2:10\n+          }\n+          scope 3 {\n+              debug x => _4;               // in scope 3 at $DIR/enum.rs:+2:29: +2:30\n+          }\n+          scope 4 {\n+              debug x => _5;               // in scope 4 at $DIR/enum.rs:+2:44: +2:45\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/enum.rs:+1:9: +1:10\n+          Deinit(_1);                      // scope 0 at $DIR/enum.rs:+1:13: +1:21\n+          ((_1 as V1).0: i32) = const 0_i32; // scope 0 at $DIR/enum.rs:+1:13: +1:21\n+          discriminant(_1) = 0;            // scope 0 at $DIR/enum.rs:+1:13: +1:21\n+          StorageLive(_2);                 // scope 1 at $DIR/enum.rs:+2:9: +2:10\n+          _3 = discriminant(_1);           // scope 1 at $DIR/enum.rs:+2:19: +2:20\n+          switchInt(move _3) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 1 at $DIR/enum.rs:+2:13: +2:20\n+      }\n+  \n+      bb1: {\n+          StorageLive(_5);                 // scope 1 at $DIR/enum.rs:+2:44: +2:45\n+          _5 = ((_1 as V2).0: i32);        // scope 1 at $DIR/enum.rs:+2:44: +2:45\n+          _2 = _5;                         // scope 4 at $DIR/enum.rs:+2:50: +2:51\n+          StorageDead(_5);                 // scope 1 at $DIR/enum.rs:+2:50: +2:51\n+          goto -> bb4;                     // scope 1 at $DIR/enum.rs:+2:50: +2:51\n+      }\n+  \n+      bb2: {\n+          unreachable;                     // scope 1 at $DIR/enum.rs:+2:19: +2:20\n+      }\n+  \n+      bb3: {\n+          StorageLive(_4);                 // scope 1 at $DIR/enum.rs:+2:29: +2:30\n+          _4 = ((_1 as V1).0: i32);        // scope 1 at $DIR/enum.rs:+2:29: +2:30\n+          _2 = _4;                         // scope 3 at $DIR/enum.rs:+2:35: +2:36\n+          StorageDead(_4);                 // scope 1 at $DIR/enum.rs:+2:35: +2:36\n+          goto -> bb4;                     // scope 1 at $DIR/enum.rs:+2:35: +2:36\n+      }\n+  \n+      bb4: {\n+          _0 = const ();                   // scope 0 at $DIR/enum.rs:+0:11: +3:2\n+          StorageDead(_2);                 // scope 1 at $DIR/enum.rs:+3:1: +3:2\n+          StorageDead(_1);                 // scope 0 at $DIR/enum.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/enum.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "13288577dea3f4d6bcbddde2d40174fb478537b7", "filename": "src/test/mir-opt/dataflow-const-prop/enum.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9766ee0b2040d93c7ff4af237c3c839d54adf8ea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9766ee0b2040d93c7ff4af237c3c839d54adf8ea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fenum.rs?ref=9766ee0b2040d93c7ff4af237c3c839d54adf8ea", "patch": "@@ -0,0 +1,13 @@\n+// unit-test: DataflowConstProp\n+\n+// Not trackable, because variants could be aliased.\n+enum E {\n+    V1(i32),\n+    V2(i32)\n+}\n+\n+// EMIT_MIR enum.main.DataflowConstProp.diff\n+fn main() {\n+    let e = E::V1(0);\n+    let x = match e { E::V1(x) => x, E::V2(x) => x };\n+}"}, {"sha": "cfb2706c167cdeea9d9fe67d646e91c75eaf2160", "filename": "src/test/mir-opt/dataflow-const-prop/struct.main.DataflowConstProp.diff", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/9766ee0b2040d93c7ff4af237c3c839d54adf8ea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fstruct.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9766ee0b2040d93c7ff4af237c3c839d54adf8ea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fstruct.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fstruct.main.DataflowConstProp.diff?ref=9766ee0b2040d93c7ff4af237c3c839d54adf8ea", "patch": "@@ -0,0 +1,52 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/struct.rs:+0:11: +0:11\n+      let mut _1: S;                       // in scope 0 at $DIR/struct.rs:+1:9: +1:14\n+      let mut _3: i32;                     // in scope 0 at $DIR/struct.rs:+2:13: +2:16\n+      let mut _5: i32;                     // in scope 0 at $DIR/struct.rs:+4:13: +4:14\n+      let mut _6: i32;                     // in scope 0 at $DIR/struct.rs:+4:17: +4:20\n+      scope 1 {\n+          debug s => _1;                   // in scope 1 at $DIR/struct.rs:+1:9: +1:14\n+          let _2: i32;                     // in scope 1 at $DIR/struct.rs:+2:9: +2:10\n+          scope 2 {\n+              debug a => _2;               // in scope 2 at $DIR/struct.rs:+2:9: +2:10\n+              let _4: i32;                 // in scope 2 at $DIR/struct.rs:+4:9: +4:10\n+              scope 3 {\n+                  debug b => _4;           // in scope 3 at $DIR/struct.rs:+4:9: +4:10\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/struct.rs:+1:9: +1:14\n+          Deinit(_1);                      // scope 0 at $DIR/struct.rs:+1:17: +1:21\n+          (_1.0: i32) = const 1_i32;       // scope 0 at $DIR/struct.rs:+1:17: +1:21\n+          StorageLive(_2);                 // scope 1 at $DIR/struct.rs:+2:9: +2:10\n+          StorageLive(_3);                 // scope 1 at $DIR/struct.rs:+2:13: +2:16\n+-         _3 = (_1.0: i32);                // scope 1 at $DIR/struct.rs:+2:13: +2:16\n+-         _2 = Add(move _3, const 2_i32);  // scope 1 at $DIR/struct.rs:+2:13: +2:20\n++         _3 = const 1_i32;                // scope 1 at $DIR/struct.rs:+2:13: +2:16\n++         _2 = const 3_i32;                // scope 1 at $DIR/struct.rs:+2:13: +2:20\n+          StorageDead(_3);                 // scope 1 at $DIR/struct.rs:+2:19: +2:20\n+          (_1.0: i32) = const 3_i32;       // scope 2 at $DIR/struct.rs:+3:5: +3:12\n+          StorageLive(_4);                 // scope 2 at $DIR/struct.rs:+4:9: +4:10\n+          StorageLive(_5);                 // scope 2 at $DIR/struct.rs:+4:13: +4:14\n+-         _5 = _2;                         // scope 2 at $DIR/struct.rs:+4:13: +4:14\n++         _5 = const 3_i32;                // scope 2 at $DIR/struct.rs:+4:13: +4:14\n+          StorageLive(_6);                 // scope 2 at $DIR/struct.rs:+4:17: +4:20\n+-         _6 = (_1.0: i32);                // scope 2 at $DIR/struct.rs:+4:17: +4:20\n+-         _4 = Add(move _5, move _6);      // scope 2 at $DIR/struct.rs:+4:13: +4:20\n++         _6 = const 3_i32;                // scope 2 at $DIR/struct.rs:+4:17: +4:20\n++         _4 = const 6_i32;                // scope 2 at $DIR/struct.rs:+4:13: +4:20\n+          StorageDead(_6);                 // scope 2 at $DIR/struct.rs:+4:19: +4:20\n+          StorageDead(_5);                 // scope 2 at $DIR/struct.rs:+4:19: +4:20\n+          _0 = const ();                   // scope 0 at $DIR/struct.rs:+0:11: +5:2\n+          StorageDead(_4);                 // scope 2 at $DIR/struct.rs:+5:1: +5:2\n+          StorageDead(_2);                 // scope 1 at $DIR/struct.rs:+5:1: +5:2\n+          StorageDead(_1);                 // scope 0 at $DIR/struct.rs:+5:1: +5:2\n+          return;                          // scope 0 at $DIR/struct.rs:+5:2: +5:2\n+      }\n+  }\n+  "}, {"sha": "841b279e03eee7b23195ee77ac5d67846376c691", "filename": "src/test/mir-opt/dataflow-const-prop/struct.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9766ee0b2040d93c7ff4af237c3c839d54adf8ea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9766ee0b2040d93c7ff4af237c3c839d54adf8ea/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fstruct.rs?ref=9766ee0b2040d93c7ff4af237c3c839d54adf8ea", "patch": "@@ -0,0 +1,11 @@\n+// unit-test: DataflowConstProp\n+\n+struct S(i32);\n+\n+// EMIT_MIR struct.main.DataflowConstProp.diff\n+fn main() {\n+    let mut s = S(1);\n+    let a = s.0 + 2;\n+    s.0 = 3;\n+    let b = a + s.0;\n+}"}]}