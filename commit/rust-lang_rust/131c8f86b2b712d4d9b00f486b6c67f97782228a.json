{"sha": "131c8f86b2b712d4d9b00f486b6c67f97782228a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMWM4Zjg2YjJiNzEyZDRkOWIwMGY0ODZiNmM2N2Y5Nzc4MjIyOGE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-09-02T07:59:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-02T07:59:06Z"}, "message": "Merge pull request #3113 from mikerite/fix-3112\n\nFix #3112", "tree": {"sha": "0cba33fb7b3eab1c3c9aeb2ece5d0a2f1537b651", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cba33fb7b3eab1c3c9aeb2ece5d0a2f1537b651"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/131c8f86b2b712d4d9b00f486b6c67f97782228a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbi5hKCRBK7hj4Ov3rIwAAdHIIAAoJCxmEk9r2F6yfZJXB8TZn\nLdz3xNWjfyxzX6l1c5umZnoTUQJwv+OAyPFMIFJzt5ccSoCnAuOc0BIkDFZP1Uw7\n/DyUfQjYLDxTnSzgORFeq07glva+9gcGfyFq7iqu/coxDNovqqNpEceOZITS+nHD\nzw6qqRrR/uTMc91a6k3k5sapObDeTprox8YCprfE6ITnP1vge/cOBcu84MAxKqGJ\nLHfZAlD9IacPHl1PjOaSh1mJT+5hyxAX6s/e9EmGZltrnhpz3LNa+l3v+WqnzhvV\njVJz7ziTk0KkCBcSiJfZOjvE2HSvYmkKlf8i8aLYFcDdgNMZdEzIM8vPzob9dfA=\n=39hL\n-----END PGP SIGNATURE-----\n", "payload": "tree 0cba33fb7b3eab1c3c9aeb2ece5d0a2f1537b651\nparent c81d70e6bdf264c62136b571760f152be9638ec0\nparent 19157c02cb25fa2e1e2995793f4b7da5ef107317\nauthor Manish Goregaokar <manishsmail@gmail.com> 1535875146 +0530\ncommitter GitHub <noreply@github.com> 1535875146 +0530\n\nMerge pull request #3113 from mikerite/fix-3112\n\nFix #3112"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/131c8f86b2b712d4d9b00f486b6c67f97782228a", "html_url": "https://github.com/rust-lang/rust/commit/131c8f86b2b712d4d9b00f486b6c67f97782228a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/131c8f86b2b712d4d9b00f486b6c67f97782228a/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c81d70e6bdf264c62136b571760f152be9638ec0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c81d70e6bdf264c62136b571760f152be9638ec0", "html_url": "https://github.com/rust-lang/rust/commit/c81d70e6bdf264c62136b571760f152be9638ec0"}, {"sha": "19157c02cb25fa2e1e2995793f4b7da5ef107317", "url": "https://api.github.com/repos/rust-lang/rust/commits/19157c02cb25fa2e1e2995793f4b7da5ef107317", "html_url": "https://github.com/rust-lang/rust/commit/19157c02cb25fa2e1e2995793f4b7da5ef107317"}], "stats": {"total": 53, "additions": 45, "deletions": 8}, "files": [{"sha": "e3ae560764560a4c46ff4943d07e5728edc24d1f", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/131c8f86b2b712d4d9b00f486b6c67f97782228a/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/131c8f86b2b712d4d9b00f486b6c67f97782228a/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=131c8f86b2b712d4d9b00f486b6c67f97782228a", "patch": "@@ -109,7 +109,9 @@ impl<'a, 'tcx> DivergenceVisitor<'a, 'tcx> {\n                 self.visit_expr(e);\n                 for arm in arms {\n                     if let Some(ref guard) = arm.guard {\n-                        self.visit_expr(guard);\n+                        match guard {\n+                            Guard::If(if_expr) => self.visit_expr(if_expr),\n+                        }\n                     }\n                     // make sure top level arm expressions aren't linted\n                     self.maybe_walk_expr(&*arm.body);"}, {"sha": "1191723ba62c003904deae18d512334414293fcd", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/131c8f86b2b712d4d9b00f486b6c67f97782228a/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/131c8f86b2b712d4d9b00f486b6c67f97782228a/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=131c8f86b2b712d4d9b00f486b6c67f97782228a", "patch": "@@ -339,7 +339,9 @@ fn check_expr<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, bindings:\n                     check_pat(cx, pat, Some(&**init), pat.span, bindings);\n                     // This is ugly, but needed to get the right type\n                     if let Some(ref guard) = arm.guard {\n-                        check_expr(cx, guard, bindings);\n+                        match guard {\n+                            Guard::If(if_expr) => check_expr(cx, if_expr, bindings),\n+                        }\n                     }\n                     check_expr(cx, &arm.body, bindings);\n                     bindings.truncate(len);"}, {"sha": "e2c809c0c7cc2e0687a21c43f7ac1c305dfd5ff8", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/131c8f86b2b712d4d9b00f486b6c67f97782228a/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/131c8f86b2b712d4d9b00f486b6c67f97782228a/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=131c8f86b2b712d4d9b00f486b6c67f97782228a", "patch": "@@ -345,9 +345,15 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                     self.visit_expr(&arm.body);\n                     if let Some(ref guard) = arm.guard {\n                         let guard_pat = self.next(\"guard\");\n-                        println!(\"    if let Some(ref {}) = {}[{}].guard\", guard_pat, arms_pat, i);\n-                        self.current = guard_pat;\n-                        self.visit_expr(guard);\n+                        println!(\"    if let Some(ref {}) = {}[{}].guard;\", guard_pat, arms_pat, i);\n+                        match guard {\n+                            hir::Guard::If(ref if_expr) => {\n+                                let if_expr_pat = self.next(\"expr\");\n+                                println!(\"    if let Guard::If(ref {}) = {};\", if_expr_pat, guard_pat);\n+                                self.current = if_expr_pat;\n+                                self.visit_expr(if_expr);\n+                            }\n+                        }\n                     }\n                     println!(\"    if {}[{}].pats.len() == {};\", arms_pat, i, arm.pats.len());\n                     for (j, pat) in arm.pats.iter().enumerate() {"}, {"sha": "939b4f595e4d09a9d32440aba3e0aae44ff3ce6f", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/131c8f86b2b712d4d9b00f486b6c67f97782228a/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/131c8f86b2b712d4d9b00f486b6c67f97782228a/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=131c8f86b2b712d4d9b00f486b6c67f97782228a", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             },\n             (&ExprKind::Match(ref le, ref la, ref ls), &ExprKind::Match(ref re, ref ra, ref rs)) => {\n                 ls == rs && self.eq_expr(le, re) && over(la, ra, |l, r| {\n-                    self.eq_expr(&l.body, &r.body) && both(&l.guard, &r.guard, |l, r| self.eq_expr(l, r))\n+                    self.eq_expr(&l.body, &r.body) && both(&l.guard, &r.guard, |l, r| self.eq_guard(l, r))\n                         && over(&l.pats, &r.pats, |l, r| self.eq_pat(l, r))\n                 })\n             },\n@@ -152,6 +152,12 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n         left.ident.name == right.ident.name && self.eq_expr(&left.expr, &right.expr)\n     }\n \n+    fn eq_guard(&mut self, left: &Guard, right: &Guard) -> bool {\n+        match (left, right) {\n+            (Guard::If(l), Guard::If(r)) => self.eq_expr(l, r),\n+        }\n+    }\n+\n     fn eq_generic_arg(&mut self, left: &GenericArg, right: &GenericArg) -> bool {\n         match (left, right) {\n             (GenericArg::Lifetime(l_lt), GenericArg::Lifetime(r_lt)) => self.eq_lifetime(l_lt, r_lt),\n@@ -497,7 +503,7 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n                 for arm in arms {\n                     // TODO: arm.pat?\n                     if let Some(ref e) = arm.guard {\n-                        self.hash_expr(e);\n+                        self.hash_guard(e);\n                     }\n                     self.hash_expr(&arm.body);\n                 }\n@@ -637,4 +643,14 @@ impl<'a, 'tcx: 'a> SpanlessHash<'a, 'tcx> {\n             },\n         }\n     }\n+\n+    pub fn hash_guard(&mut self, g: &Guard) {\n+        match g {\n+            Guard::If(ref expr) => {\n+                let c: fn(_) -> _ = Guard::If;\n+                c.hash(&mut self.s);\n+                self.hash_expr(expr);\n+            }\n+        }\n+    }\n }"}, {"sha": "56b76fdc7b0548f947ac517c12fcc1775fc4e713", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/131c8f86b2b712d4d9b00f486b6c67f97782228a/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/131c8f86b2b712d4d9b00f486b6c67f97782228a/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=131c8f86b2b712d4d9b00f486b6c67f97782228a", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         }\n         if let Some(ref guard) = arm.guard {\n             println!(\"guard:\");\n-            print_expr(cx, guard, 1);\n+            print_guard(cx, guard, 1);\n         }\n         println!(\"body:\");\n         print_expr(cx, &arm.body, 1);\n@@ -515,3 +515,14 @@ fn print_pat(cx: &LateContext<'_, '_>, pat: &hir::Pat, indent: usize) {\n         },\n     }\n }\n+\n+fn print_guard(cx: &LateContext<'_, '_>, guard: &hir::Guard, indent: usize) {\n+    let ind = \"  \".repeat(indent);\n+    println!(\"{}+\", ind);\n+    match guard {\n+        hir::Guard::If(expr) => {\n+            println!(\"{}If\", ind);\n+            print_expr(cx, expr, indent + 1);\n+        }\n+    }\n+}"}]}