{"sha": "c4f02a7925df2dcd8575f1e4d9dc66f76f9d0495", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ZjAyYTc5MjVkZjJkY2Q4NTc1ZjFlNGQ5ZGM2NmY3NmY5ZDA0OTU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-22T19:07:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-22T20:53:33Z"}, "message": "Sprinkle some asserts through trans_uniq", "tree": {"sha": "41caf27eb36e7fcfe5c62fc7a580259610dbf9fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41caf27eb36e7fcfe5c62fc7a580259610dbf9fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4f02a7925df2dcd8575f1e4d9dc66f76f9d0495", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4f02a7925df2dcd8575f1e4d9dc66f76f9d0495", "html_url": "https://github.com/rust-lang/rust/commit/c4f02a7925df2dcd8575f1e4d9dc66f76f9d0495", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4f02a7925df2dcd8575f1e4d9dc66f76f9d0495/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8492eed137ab9435d76c7ff2bdad491dff5756e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8492eed137ab9435d76c7ff2bdad491dff5756e2", "html_url": "https://github.com/rust-lang/rust/commit/8492eed137ab9435d76c7ff2bdad491dff5756e2"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "ca85f94b4aee577b7abeb28e2ece438b617691bf", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c4f02a7925df2dcd8575f1e4d9dc66f76f9d0495/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4f02a7925df2dcd8575f1e4d9dc66f76f9d0495/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=c4f02a7925df2dcd8575f1e4d9dc66f76f9d0495", "patch": "@@ -2028,6 +2028,13 @@ fn copy_val_no_check(cx: @block_ctxt, action: copy_action, dst: ValueRef,\n         Store(bcx, src, dst);\n         ret take_ty(bcx, dst, t);\n     }\n+    if ty::type_is_unique_box(ccx.tcx, t) {\n+        let bcx = cx;\n+        // FIXME (409): Write a test and uncomment\n+        //if action == DROP_EXISTING { bcx = drop_ty(cx, dst, t); }\n+        //ret trans_uniq::copy_val(bcx, dst, src, t);\n+        fail;\n+    }\n     if type_is_structural_or_param(ccx.tcx, t) || ty::type_is_vec(ccx.tcx, t)\n         {\n         let bcx = cx;"}, {"sha": "851aec853008835c24635761be1948206ef6cfe3", "filename": "src/comp/middle/trans_uniq.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c4f02a7925df2dcd8575f1e4d9dc66f76f9d0495/src%2Fcomp%2Fmiddle%2Ftrans_uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4f02a7925df2dcd8575f1e4d9dc66f76f9d0495/src%2Fcomp%2Fmiddle%2Ftrans_uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_uniq.rs?ref=c4f02a7925df2dcd8575f1e4d9dc66f76f9d0495", "patch": "@@ -25,6 +25,7 @@ fn trans_uniq(cx: @block_ctxt, contents: @ast::expr,\n     bcx = lv.bcx;\n \n     let uniq_ty = node_id_type(bcx_ccx(cx), node_id);\n+    assert ty::type_is_unique_box(bcx_tcx(cx), uniq_ty);\n     let {bcx, val: llptr} = alloc_uniq(bcx, uniq_ty);\n \n     bcx = move_val_if_temp(bcx, INIT, llptr, lv,\n@@ -34,6 +35,8 @@ fn trans_uniq(cx: @block_ctxt, contents: @ast::expr,\n }\n \n fn alloc_uniq(cx: @block_ctxt, uniq_ty: ty::t) -> result {\n+    assert ty::type_is_unique_box(bcx_tcx(cx), uniq_ty);\n+\n     let bcx = cx;\n     let contents_ty = content_ty(bcx, uniq_ty);\n     let r = size_of(bcx, contents_ty);\n@@ -52,6 +55,8 @@ fn alloc_uniq(cx: @block_ctxt, uniq_ty: ty::t) -> result {\n }\n \n fn make_free_glue(bcx: @block_ctxt, v: ValueRef, t: ty::t) -> @block_ctxt {\n+    assert ty::type_is_unique_box(bcx_tcx(bcx), t);\n+\n     let free_cx = new_sub_block_ctxt(bcx, \"uniq_free\");\n     let next_cx = new_sub_block_ctxt(bcx, \"uniq_free_next\");\n     let vptr = Load(bcx, v);\n@@ -68,6 +73,8 @@ fn make_free_glue(bcx: @block_ctxt, v: ValueRef, t: ty::t) -> @block_ctxt {\n }\n \n fn content_ty(bcx: @block_ctxt, t: ty::t) -> ty::t {\n+    assert ty::type_is_unique_box(bcx_tcx(bcx), t);\n+\n     alt ty::struct(bcx_tcx(bcx), t) {\n       ty::ty_uniq({ty: ct, _}) { ct }\n     }"}]}