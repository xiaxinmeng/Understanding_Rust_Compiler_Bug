{"sha": "abe2ad0ff86639a100c164d020a474e232c97318", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZTJhZDBmZjg2NjM5YTEwMGMxNjRkMDIwYTQ3NGUyMzJjOTczMTg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T22:23:40Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:31Z"}, "message": "librustc: De-`@mut` `Module::anonymous_children`", "tree": {"sha": "11422d51e1f93fcb89e57aa057e749d04ab5ed2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11422d51e1f93fcb89e57aa057e749d04ab5ed2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abe2ad0ff86639a100c164d020a474e232c97318", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abe2ad0ff86639a100c164d020a474e232c97318", "html_url": "https://github.com/rust-lang/rust/commit/abe2ad0ff86639a100c164d020a474e232c97318", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abe2ad0ff86639a100c164d020a474e232c97318/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9988970e81ab877f8cba0bf0d0cc6df7aed52fb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9988970e81ab877f8cba0bf0d0cc6df7aed52fb7", "html_url": "https://github.com/rust-lang/rust/commit/9988970e81ab877f8cba0bf0d0cc6df7aed52fb7"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "ed17d96b9ba14039906157e755da881917216567", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/abe2ad0ff86639a100c164d020a474e232c97318/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abe2ad0ff86639a100c164d020a474e232c97318/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=abe2ad0ff86639a100c164d020a474e232c97318", "patch": "@@ -439,7 +439,7 @@ struct Module {\n     //\n     // There will be an anonymous module created around `g` with the ID of the\n     // entry block for `f`.\n-    anonymous_children: @mut HashMap<NodeId,@Module>,\n+    anonymous_children: RefCell<HashMap<NodeId,@Module>>,\n \n     // The status of resolving each import in this module.\n     import_resolutions: @mut HashMap<Name, @mut ImportResolution>,\n@@ -471,7 +471,7 @@ impl Module {\n             children: @mut HashMap::new(),\n             imports: @mut ~[],\n             external_module_children: RefCell::new(HashMap::new()),\n-            anonymous_children: @mut HashMap::new(),\n+            anonymous_children: RefCell::new(HashMap::new()),\n             import_resolutions: @mut HashMap::new(),\n             glob_count: Cell::new(0),\n             resolved_import_count: Cell::new(0),\n@@ -1579,8 +1579,12 @@ impl Resolver {\n                 AnonymousModuleKind,\n                 false,\n                 false);\n-            parent_module.anonymous_children.insert(block_id, new_module);\n-            ModuleReducedGraphParent(new_module)\n+            {\n+                let mut anonymous_children = parent_module.anonymous_children\n+                                                          .borrow_mut();\n+                anonymous_children.get().insert(block_id, new_module);\n+                ModuleReducedGraphParent(new_module)\n+            }\n         } else {\n             parent\n         }\n@@ -2031,7 +2035,8 @@ impl Resolver {\n             }\n         }\n \n-        for (_, &child_module) in module_.anonymous_children.iter() {\n+        let anonymous_children = module_.anonymous_children.borrow();\n+        for (_, &child_module) in anonymous_children.get().iter() {\n             self.resolve_imports_for_module_subtree(child_module);\n         }\n     }\n@@ -3201,7 +3206,8 @@ impl Resolver {\n             }\n         }\n \n-        for (_, &module_) in module_.anonymous_children.iter() {\n+        let anonymous_children = module_.anonymous_children.borrow();\n+        for (_, &module_) in anonymous_children.get().iter() {\n             self.report_unresolved_imports(module_);\n         }\n     }\n@@ -3261,7 +3267,8 @@ impl Resolver {\n             }\n         }\n \n-        for (_, &child_module) in module_.anonymous_children.iter() {\n+        let anonymous_children = module_.anonymous_children.borrow();\n+        for (_, &child_module) in anonymous_children.get().iter() {\n             self.record_exports_for_module_subtree(child_module);\n         }\n     }\n@@ -4142,7 +4149,10 @@ impl Resolver {\n \n         // Move down in the graph, if there's an anonymous module rooted here.\n         let orig_module = self.current_module;\n-        match self.current_module.anonymous_children.find(&block.id) {\n+        let anonymous_children = self.current_module\n+                                     .anonymous_children\n+                                     .borrow();\n+        match anonymous_children.get().find(&block.id) {\n             None => { /* Nothing to do. */ }\n             Some(&anonymous_module) => {\n                 debug!(\"(resolving block) found anonymous module, moving \\"}]}