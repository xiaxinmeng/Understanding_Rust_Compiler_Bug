{"sha": "8794107f74682607f368776cc8b78820629778e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3OTQxMDdmNzQ2ODI2MDdmMzY4Nzc2Y2M4Yjc4ODIwNjI5Nzc4ZTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-04T04:27:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-04T04:27:05Z"}, "message": "auto merge of #17754 : O-I/rust/update-guide, r=steveklabnik\n\nHi,\r\n\r\nThese are a few small edits to the Guide that I made while reading online. Really well done and approachable.\r\n\r\nI have a few questions below, but I don't know if this is the proper place to ask them, so feel free to ignore the below.\r\n\r\n1. Trailing commas seem to be a convention in Rust and are used quite a bit throughout the Guide, but are never explicitly mentioned. Maybe adding a short mention about them when they first appear in the Structs section might be helpful to those who are unfamiliar with or don't use them in other languages.\r\n\r\n2. In the Iterators section, there is a block of code like this:\r\n\r\n```rust\r\nlet mut range = range(0i, 10i);\r\n\r\nloop {\r\n    match range.next() {\r\n        Some(x) => {\r\n            println!(\"{}\", x);\r\n        }  // no comma needed?\r\n        None => { break }\r\n    }\r\n}\r\n```\r\n\r\nMy inclination would be to put a comma where the comment is to separate the two arms to get this to compile, but it runs fine either way. Is there a convention on commas for scenarios like this where each arm is enclosed in `{}`?\r\n\r\nAll the best,\r\nO-I", "tree": {"sha": "989174ccb800fb13840b843ac246eeea0f1c9c1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/989174ccb800fb13840b843ac246eeea0f1c9c1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8794107f74682607f368776cc8b78820629778e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8794107f74682607f368776cc8b78820629778e6", "html_url": "https://github.com/rust-lang/rust/commit/8794107f74682607f368776cc8b78820629778e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8794107f74682607f368776cc8b78820629778e6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "908c9e6a1b94674eee2727edb25dda58727a03b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/908c9e6a1b94674eee2727edb25dda58727a03b7", "html_url": "https://github.com/rust-lang/rust/commit/908c9e6a1b94674eee2727edb25dda58727a03b7"}, {"sha": "9040948ef39ed66a700a9dacfab29a8ddf723888", "url": "https://api.github.com/repos/rust-lang/rust/commits/9040948ef39ed66a700a9dacfab29a8ddf723888", "html_url": "https://github.com/rust-lang/rust/commit/9040948ef39ed66a700a9dacfab29a8ddf723888"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "871ceb21f6a59c7829e782f8833220a121593c11", "filename": "src/doc/guide.md", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8794107f74682607f368776cc8b78820629778e6/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/8794107f74682607f368776cc8b78820629778e6/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=8794107f74682607f368776cc8b78820629778e6", "patch": "@@ -961,7 +961,7 @@ struct Point {\n }\n \n fn main() {\n-    let origin = Point { x: 0i, y:  0i };\n+    let origin = Point { x: 0i, y: 0i };\n \n     println!(\"The origin is at ({}, {})\", origin.x, origin.y);\n }\n@@ -988,7 +988,7 @@ struct Point {\n }\n \n fn main() {\n-    let mut point = Point { x: 0i, y:  0i };\n+    let mut point = Point { x: 0i, y: 0i };\n \n     point.x = 5;\n \n@@ -1140,13 +1140,13 @@ You can have any number of values in an enum:\n ```{rust}\n enum OptionalColor {\n     Color(int, int, int),\n-    Missing\n+    Missing,\n }\n ```\n \n Enums with values are quite useful, but as I mentioned, they're even more\n useful when they're generic across types. But before we get to generics, let's\n-talk about how to fix this big `if`/`else` statements we've been writing. We'll\n+talk about how to fix these big `if`/`else` statements we've been writing. We'll\n do that with `match`.\n \n # Match\n@@ -1561,7 +1561,7 @@ println!(\"The second name is: {}\", names[1]);\n \n These subscripts start at zero, like in most programming languages, so the\n first name is `names[0]` and the second name is `names[1]`. The above example\n-prints `The second name is Brian`.\n+prints `The second name is: Brian`.\n \n There's a whole lot more to vectors, but that's enough to get started. We have\n now learned all of the most basic Rust concepts. We're ready to start building\n@@ -2084,7 +2084,7 @@ fn main() {\n     match cmp(input, secret_number) {\n         Less    => println!(\"Too small!\"),\n         Greater => println!(\"Too big!\"),\n-        Equal   => { println!(\"You win!\"); },\n+        Equal   => println!(\"You win!\"),\n     }\n }\n \n@@ -2176,14 +2176,12 @@ fn main() {\n                            .expect(\"Failed to read line\");\n     let input_num: Option<uint> = from_str(input.as_slice());\n \n-\n-\n     println!(\"You guessed: {}\", input_num);\n \n     match cmp(input_num, secret_number) {\n         Less    => println!(\"Too small!\"),\n         Greater => println!(\"Too big!\"),\n-        Equal   => { println!(\"You win!\"); },\n+        Equal   => println!(\"You win!\"),\n     }\n }\n \n@@ -2241,7 +2239,7 @@ fn main() {\n     match cmp(num, secret_number) {\n         Less    => println!(\"Too small!\"),\n         Greater => println!(\"Too big!\"),\n-        Equal   => { println!(\"You win!\"); },\n+        Equal   => println!(\"You win!\"),\n     }\n }\n \n@@ -2307,7 +2305,7 @@ fn main() {\n     match cmp(num, secret_number) {\n         Less    => println!(\"Too small!\"),\n         Greater => println!(\"Too big!\"),\n-        Equal   => { println!(\"You win!\"); },\n+        Equal   => println!(\"You win!\"),\n     }\n }\n \n@@ -2382,7 +2380,7 @@ fn main() {\n         match cmp(num, secret_number) {\n             Less    => println!(\"Too small!\"),\n             Greater => println!(\"Too big!\"),\n-            Equal   => { println!(\"You win!\"); },\n+            Equal   => println!(\"You win!\"),\n         }\n     }\n }\n@@ -2619,7 +2617,7 @@ Rust's more unique features.\n \n Rust features a strong module system, but it works a bit differently than in\n other programming languages. Rust's module system has two main components:\n-**crate**s, and **module**s.\n+**crate**s and **module**s.\n \n A crate is Rust's unit of independent compilation. Rust always compiles one\n crate at a time, producing either a library or an executable. However, executables\n@@ -2640,6 +2638,7 @@ Enough talk, let's build something! Let's make a new project called `modules`.\n ```{bash,ignore}\n $ cd ~/projects\n $ cargo new modules --bin\n+$ cd modules\n ```\n \n Let's double check our work by compiling:\n@@ -3622,7 +3621,7 @@ let x = box 5i;\n ```\n \n This allocates an integer `5` on the heap, and creates a binding `x` that\n-refers to it.. The great thing about boxed pointers is that we don't have to\n+refers to it. The great thing about boxed pointers is that we don't have to\n manually free this allocation! If we write\n \n ```{rust}\n@@ -3994,7 +3993,7 @@ Let's make a closure:\n ```{rust}\n let add_one = |x| { 1i + x };\n \n-println!(\"The 5 plus 1 is {}.\", add_one(5i));\n+println!(\"The sum of 5 plus 1 is {}.\", add_one(5i));\n ```\n \n We create a closure using the `|...| { ... }` syntax, and then we create a\n@@ -4089,7 +4088,7 @@ fn main() {\n }\n ```\n \n-Let's break example down, starting with `main`:\n+Let's break the example down, starting with `main`:\n \n ```{rust}\n let square = |x: int| { x * x };\n@@ -4210,7 +4209,7 @@ loop {\n     match range.next() {\n         Some(x) => {\n             println!(\"{}\", x);\n-        }\n+        },\n         None => { break }\n     }\n }"}]}