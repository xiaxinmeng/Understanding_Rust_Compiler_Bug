{"sha": "ed084ba292609da9fe05808f186b72453013c094", "node_id": "C_kwDOAAsO6NoAKGVkMDg0YmEyOTI2MDlkYTlmZTA1ODA4ZjE4NmI3MjQ1MzAxM2MwOTQ", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-08-19T09:23:00Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-08-20T21:32:40Z"}, "message": "Remove useless pointer cast", "tree": {"sha": "293ea3fe72467600f6585b78e8b2f09d26675c6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/293ea3fe72467600f6585b78e8b2f09d26675c6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed084ba292609da9fe05808f186b72453013c094", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed084ba292609da9fe05808f186b72453013c094", "html_url": "https://github.com/rust-lang/rust/commit/ed084ba292609da9fe05808f186b72453013c094", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed084ba292609da9fe05808f186b72453013c094/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c943bad02626dddc5e5135b23c77429b6e4a063", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c943bad02626dddc5e5135b23c77429b6e4a063", "html_url": "https://github.com/rust-lang/rust/commit/6c943bad02626dddc5e5135b23c77429b6e4a063"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "606e32446268ba6b3c181d8b9b07378ebacdd219", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed084ba292609da9fe05808f186b72453013c094/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed084ba292609da9fe05808f186b72453013c094/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=ed084ba292609da9fe05808f186b72453013c094", "patch": "@@ -148,7 +148,7 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n \n     #[inline]\n     fn next(&mut self) -> Option<T> {\n-        if self.ptr as *const _ == self.end {\n+        if self.ptr == self.end {\n             None\n         } else if mem::size_of::<T>() == 0 {\n             // purposefully don't use 'ptr.offset' because for"}]}