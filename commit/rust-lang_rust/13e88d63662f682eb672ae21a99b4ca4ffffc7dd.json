{"sha": "13e88d63662f682eb672ae21a99b4ca4ffffc7dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZTg4ZDYzNjYyZjY4MmViNjcyYWUyMWE5OWI0Y2E0ZmZmZmM3ZGQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-26T23:44:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-26T23:44:41Z"}, "message": "Rollup merge of #76635 - scottmcm:slice-as-chunks, r=LukasKalbertodt\n\nAdd [T]::as_chunks(_mut)\n\nAllows getting the slices directly, rather than just through an iterator as in `array_chunks(_mut)`.  The constructors for those iterators are then written in terms of these methods, so the iterator constructors no longer have any `unsafe` of their own.\n\nUnstable, of course. #74985", "tree": {"sha": "0602a3bfc468c33c50d4b1b34eb93d25231b0100", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0602a3bfc468c33c50d4b1b34eb93d25231b0100"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13e88d63662f682eb672ae21a99b4ca4ffffc7dd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfl19qCRBK7hj4Ov3rIwAAdHIIAI3rGwBlsE1AttE1aTLHwxJO\nNg2g8MiJZXp8+ka1fHrOyhqb+igb5bW+v7Gl3fDixM4pIf3yWlL914bTV33sfhBx\nkrg3a/L3D0PIykPqUDZqbgwPTUd6m6K5ijsF+2LkpAOld+XfnVjl+GgsKyNL4Ncp\nmWoJXNah9OfMDhNAenobVK9d2EbIvMdPnkZkPMA6myLrwnzaSCv3NGDIR1I8qiQN\ni36eJ3jQ4IfBFCzsYzq9G9OAt8LANrX5XlNK/e1dqMxrqHuHvkAX0Iwm9ycEts0l\nA0/Aqh9kscyV9At3TdSuHQesCz1JFO0XSXX3tGOzgC5/xxKyp0Qawo4s18SzY2g=\n=LaAu\n-----END PGP SIGNATURE-----\n", "payload": "tree 0602a3bfc468c33c50d4b1b34eb93d25231b0100\nparent fd542592f08ca0d1f7255600115c2eafdf6b5da7\nparent 652f34d2709ec0c323ae632ba14992f80ebf7629\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1603755881 +0900\ncommitter GitHub <noreply@github.com> 1603755881 +0900\n\nRollup merge of #76635 - scottmcm:slice-as-chunks, r=LukasKalbertodt\n\nAdd [T]::as_chunks(_mut)\n\nAllows getting the slices directly, rather than just through an iterator as in `array_chunks(_mut)`.  The constructors for those iterators are then written in terms of these methods, so the iterator constructors no longer have any `unsafe` of their own.\n\nUnstable, of course. #74985\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13e88d63662f682eb672ae21a99b4ca4ffffc7dd", "html_url": "https://github.com/rust-lang/rust/commit/13e88d63662f682eb672ae21a99b4ca4ffffc7dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13e88d63662f682eb672ae21a99b4ca4ffffc7dd/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd542592f08ca0d1f7255600115c2eafdf6b5da7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd542592f08ca0d1f7255600115c2eafdf6b5da7", "html_url": "https://github.com/rust-lang/rust/commit/fd542592f08ca0d1f7255600115c2eafdf6b5da7"}, {"sha": "652f34d2709ec0c323ae632ba14992f80ebf7629", "url": "https://api.github.com/repos/rust-lang/rust/commits/652f34d2709ec0c323ae632ba14992f80ebf7629", "html_url": "https://github.com/rust-lang/rust/commit/652f34d2709ec0c323ae632ba14992f80ebf7629"}], "stats": {"total": 86, "additions": 71, "deletions": 15}, "files": [{"sha": "e373936a6c74d848a2c527f6791146578251b34a", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/13e88d63662f682eb672ae21a99b4ca4ffffc7dd/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e88d63662f682eb672ae21a99b4ca4ffffc7dd/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=13e88d63662f682eb672ae21a99b4ca4ffffc7dd", "patch": "@@ -2103,13 +2103,8 @@ pub struct ArrayChunks<'a, T: 'a, const N: usize> {\n impl<'a, T, const N: usize> ArrayChunks<'a, T, N> {\n     #[inline]\n     pub(super) fn new(slice: &'a [T]) -> Self {\n-        let len = slice.len() / N;\n-        let (fst, snd) = slice.split_at(len * N);\n-        // SAFETY: We cast a slice of `len * N` elements into\n-        // a slice of `len` many `N` elements chunks.\n-        let array_slice: &[[T; N]] = unsafe { from_raw_parts(fst.as_ptr().cast(), len) };\n-\n-        Self { iter: array_slice.iter(), rem: snd }\n+        let (array_slice, rem) = slice.as_chunks();\n+        Self { iter: array_slice.iter(), rem }\n     }\n \n     /// Returns the remainder of the original slice that is not going to be\n@@ -2230,14 +2225,8 @@ pub struct ArrayChunksMut<'a, T: 'a, const N: usize> {\n impl<'a, T, const N: usize> ArrayChunksMut<'a, T, N> {\n     #[inline]\n     pub(super) fn new(slice: &'a mut [T]) -> Self {\n-        let len = slice.len() / N;\n-        let (fst, snd) = slice.split_at_mut(len * N);\n-        // SAFETY: We cast a slice of `len * N` elements into\n-        // a slice of `len` many `N` elements chunks.\n-        unsafe {\n-            let array_slice: &mut [[T; N]] = from_raw_parts_mut(fst.as_mut_ptr().cast(), len);\n-            Self { iter: array_slice.iter_mut(), rem: snd }\n-        }\n+        let (array_slice, rem) = slice.as_chunks_mut();\n+        Self { iter: array_slice.iter_mut(), rem }\n     }\n \n     /// Returns the remainder of the original slice that is not going to be"}, {"sha": "f514a90c2b80b5187681ae023f0b1eb1f0dd47c2", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/13e88d63662f682eb672ae21a99b4ca4ffffc7dd/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e88d63662f682eb672ae21a99b4ca4ffffc7dd/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=13e88d63662f682eb672ae21a99b4ca4ffffc7dd", "patch": "@@ -882,6 +882,36 @@ impl<T> [T] {\n         ChunksExactMut::new(self, chunk_size)\n     }\n \n+    /// Splits the slice into a slice of `N`-element arrays,\n+    /// starting at the beginning of the slice,\n+    /// and a remainder slice with length strictly less than `N`.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `N` is 0. This check will most probably get changed to a compile time\n+    /// error before this method gets stabilized.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_as_chunks)]\n+    /// let slice = ['l', 'o', 'r', 'e', 'm'];\n+    /// let (chunks, remainder) = slice.as_chunks();\n+    /// assert_eq!(chunks, &[['l', 'o'], ['r', 'e']]);\n+    /// assert_eq!(remainder, &['m']);\n+    /// ```\n+    #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n+    #[inline]\n+    pub fn as_chunks<const N: usize>(&self) -> (&[[T; N]], &[T]) {\n+        assert_ne!(N, 0);\n+        let len = self.len() / N;\n+        let (multiple_of_n, remainder) = self.split_at(len * N);\n+        // SAFETY: We cast a slice of `len * N` elements into\n+        // a slice of `len` many `N` elements chunks.\n+        let array_slice: &[[T; N]] = unsafe { from_raw_parts(multiple_of_n.as_ptr().cast(), len) };\n+        (array_slice, remainder)\n+    }\n+\n     /// Returns an iterator over `N` elements of the slice at a time, starting at the\n     /// beginning of the slice.\n     ///\n@@ -916,6 +946,43 @@ impl<T> [T] {\n         ArrayChunks::new(self)\n     }\n \n+    /// Splits the slice into a slice of `N`-element arrays,\n+    /// starting at the beginning of the slice,\n+    /// and a remainder slice with length strictly less than `N`.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `N` is 0. This check will most probably get changed to a compile time\n+    /// error before this method gets stabilized.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_as_chunks)]\n+    /// let v = &mut [0, 0, 0, 0, 0];\n+    /// let mut count = 1;\n+    ///\n+    /// let (chunks, remainder) = v.as_chunks_mut();\n+    /// remainder[0] = 9;\n+    /// for chunk in chunks {\n+    ///     *chunk = [count; 2];\n+    ///     count += 1;\n+    /// }\n+    /// assert_eq!(v, &[1, 1, 2, 2, 9]);\n+    /// ```\n+    #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n+    #[inline]\n+    pub fn as_chunks_mut<const N: usize>(&mut self) -> (&mut [[T; N]], &mut [T]) {\n+        assert_ne!(N, 0);\n+        let len = self.len() / N;\n+        let (multiple_of_n, remainder) = self.split_at_mut(len * N);\n+        let array_slice: &mut [[T; N]] =\n+            // SAFETY: We cast a slice of `len * N` elements into\n+            // a slice of `len` many `N` elements chunks.\n+            unsafe { from_raw_parts_mut(multiple_of_n.as_mut_ptr().cast(), len) };\n+        (array_slice, remainder)\n+    }\n+\n     /// Returns an iterator over `N` elements of the slice at a time, starting at the\n     /// beginning of the slice.\n     ///"}]}