{"sha": "ff95904c488f573bfd07e94a0d456e4d35f325ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmOTU5MDRjNDg4ZjU3M2JmZDA3ZTk0YTBkNDU2ZTRkMzVmMzI1Y2U=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-06T22:07:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-10T10:38:51Z"}, "message": "Remove usage of io::FILE_writer", "tree": {"sha": "b9eb8189e87458018d39a65edbb86b28966fb358", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9eb8189e87458018d39a65edbb86b28966fb358"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff95904c488f573bfd07e94a0d456e4d35f325ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff95904c488f573bfd07e94a0d456e4d35f325ce", "html_url": "https://github.com/rust-lang/rust/commit/ff95904c488f573bfd07e94a0d456e4d35f325ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff95904c488f573bfd07e94a0d456e4d35f325ce/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b07ab1fe4baa584401fa17a7ba20bea8c97c5043", "url": "https://api.github.com/repos/rust-lang/rust/commits/b07ab1fe4baa584401fa17a7ba20bea8c97c5043", "html_url": "https://github.com/rust-lang/rust/commit/b07ab1fe4baa584401fa17a7ba20bea8c97c5043"}], "stats": {"total": 62, "additions": 13, "deletions": 49}, "files": [{"sha": "791616d330e69d1523d5410191da85c25e9a4827", "filename": "src/libstd/io.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ff95904c488f573bfd07e94a0d456e4d35f325ce/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff95904c488f573bfd07e94a0d456e4d35f325ce/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=ff95904c488f573bfd07e94a0d456e4d35f325ce", "patch": "@@ -1233,14 +1233,6 @@ impl Writer for *libc::FILE {\n     }\n }\n \n-pub fn FILE_writer(f: *libc::FILE, cleanup: bool) -> @Writer {\n-    if cleanup {\n-        @Wrapper { base: f, cleanup: FILERes::new(f) } as @Writer\n-    } else {\n-        @f as @Writer\n-    }\n-}\n-\n impl Writer for fd_t {\n     fn write(&self, v: &[u8]) {\n         #[fixed_stack_segment]; #[inline(never)];\n@@ -1618,25 +1610,6 @@ pub fn file_writer(path: &Path, flags: &[FileFlag]) -> Result<@Writer, ~str> {\n     mk_file_writer(path, flags).and_then(|w| Ok(w))\n }\n \n-\n-// FIXME: fileflags // #2004\n-pub fn buffered_file_writer(path: &Path) -> Result<@Writer, ~str> {\n-    #[fixed_stack_segment]; #[inline(never)];\n-\n-    unsafe {\n-        let f = do path.with_c_str |pathbuf| {\n-            do \"w\".with_c_str |modebuf| {\n-                libc::fopen(pathbuf, modebuf)\n-            }\n-        };\n-        return if f as uint == 0u {\n-            Err(~\"error opening \" + path.to_str())\n-        } else {\n-            Ok(FILE_writer(f, true))\n-        }\n-    }\n-}\n-\n // FIXME (#2004) it would be great if this could be a const\n // FIXME (#2004) why are these different from the way stdin() is\n // implemented?\n@@ -2086,16 +2059,6 @@ mod tests {\n         }\n     }\n \n-    #[test]\n-    fn buffered_file_writer_bad_name() {\n-        match io::buffered_file_writer(&Path(\"?/?\")) {\n-          Err(e) => {\n-            assert!(e.starts_with(\"error opening\"));\n-          }\n-          Ok(_) => fail2!()\n-        }\n-    }\n-\n     #[test]\n     fn bytes_buffer_overwrite() {\n         let wr = BytesWriter::new();"}, {"sha": "8712d01aae9639339a38a7d98cfa77049311342e", "filename": "src/libstd/run.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ff95904c488f573bfd07e94a0d456e4d35f325ce/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff95904c488f573bfd07e94a0d456e4d35f325ce/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=ff95904c488f573bfd07e94a0d456e4d35f325ce", "patch": "@@ -307,14 +307,15 @@ pub fn process_output(prog: &str, args: &[~str]) -> ProcessOutput {\n \n #[cfg(test)]\n mod tests {\n-    use io;\n     use libc::c_int;\n     use option::{Option, None, Some};\n     use os;\n     use path::Path;\n     use run;\n     use str;\n     use unstable::running_on_valgrind;\n+    use rt::io::native::file;\n+    use rt::io::{Writer, Reader};\n \n     #[test]\n     #[cfg(not(target_os=\"android\"))]\n@@ -412,21 +413,21 @@ mod tests {\n     }\n \n     fn writeclose(fd: c_int, s: &str) {\n-        let writer = io::fd_writer(fd, false);\n-        writer.write_str(s);\n-        os::close(fd);\n+        let mut writer = file::FileDesc::new(fd);\n+        writer.write(s.as_bytes());\n     }\n \n     fn readclose(fd: c_int) -> ~str {\n-        #[fixed_stack_segment]; #[inline(never)];\n-\n-        unsafe {\n-            let file = os::fdopen(fd);\n-            let reader = io::FILE_reader(file, false);\n-            let buf = reader.read_whole_stream();\n-            os::fclose(file);\n-            str::from_utf8(buf)\n+        let mut res = ~[];\n+        let mut reader = file::FileDesc::new(fd);\n+        let mut buf = [0, ..1024];\n+        loop {\n+            match reader.read(buf) {\n+                Some(n) => { res.push_all(buf.slice_to(n)); }\n+                None => break\n+            }\n         }\n+        str::from_utf8_owned(res)\n     }\n \n     #[test]"}]}