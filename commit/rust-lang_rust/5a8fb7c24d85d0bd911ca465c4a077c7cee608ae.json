{"sha": "5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhOGZiN2MyNGQ4NWQwYmQ5MTFjYTQ2NWM0YTA3N2M3Y2VlNjA4YWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-06T04:59:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-06T04:59:16Z"}, "message": "Auto merge of #65152 - tmandry:rollup-btn4a01, r=tmandry\n\nRollup of 18 pull requests\n\nThis contains changes from all the successful runs that bors marked as timed out, plus a revert of #63649 which appears to be the immediate cause of the timeouts.\n\nSuccessful merges:\n\n - #64708 (Stabilize `Option::as_deref` and `Option::as_deref_mut`)\n - #64728 (Stabilize UdpSocket::peer_addr)\n - #64765 (std: Reduce checks for `feature = \"backtrace\"`)\n - #64909 (When encountering chained operators use heuristics to recover from bad turbofish)\n - #65011 (Do not ICE when dereferencing non-Copy raw pointer)\n - #65064 (permit asyncawait-ondeck to be added by anyone)\n - #65066 ([const-prop] Fix ICE when trying to eval polymorphic promoted MIR)\n - #65100 (Replace GeneratorSubsts with SubstsRef)\n - #65105 (Split out some passes from librustc)\n - #65106 (Allow unused attributes to avoid incremental bug)\n - #65113 (Fix lonely backtick)\n - #65116 (Remove unneeded visit_statement definition)\n - #65118 (Update the documented default of -Z mutable-noalias)\n - #65123 (Account for macro invocation in `let mut $pat` diagnostic.)\n - #65124 (Replace some instances of `as *[const | mut] _` with `.cast()`)\n - #65126 (Fix typo on `now()` comments)\n - #65130 (lint: extern non-exhaustive types are improper)\n - #65151 (Revert #63649 - \"Upgrade Emscripten targets to use upstream LLVM backend\")\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "b096ac2dd13c5edbfc3edaf9ecce9edde915470d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b096ac2dd13c5edbfc3edaf9ecce9edde915470d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "html_url": "https://github.com/rust-lang/rust/commit/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "url": "https://api.github.com/repos/rust-lang/rust/commits/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "html_url": "https://github.com/rust-lang/rust/commit/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91"}, {"sha": "69598dc3cfd7e0ad63282268ea58ebac0b6031dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/69598dc3cfd7e0ad63282268ea58ebac0b6031dc", "html_url": "https://github.com/rust-lang/rust/commit/69598dc3cfd7e0ad63282268ea58ebac0b6031dc"}], "stats": {"total": 2567, "additions": 1601, "deletions": 966}, "files": [{"sha": "512dc5fd887c62a2d5a1534642894cbb07ed4184", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -3613,6 +3613,8 @@ dependencies = [\n  \"rustc\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n+ \"rustc_index\",\n+ \"rustc_target\",\n  \"syntax\",\n  \"syntax_pos\",\n ]"}, {"sha": "848147c2974c1d77bc1a7c7c4e88c6cb7bef9cfe", "filename": "config.toml.example", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -377,7 +377,6 @@\n # but you can also optionally enable the \"emscripten\" backend for asm.js or\n # make this an empty array (but that probably won't get too far in the\n # bootstrap)\n-# FIXME: remove the obsolete emscripten backend option.\n #codegen-backends = [\"llvm\"]\n \n # This is the name of the directory in which codegen backends will get installed"}, {"sha": "5d586f0c461dbd722c1d3d9aec881049c2a5b0d5", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -970,7 +970,6 @@ impl<'a> Builder<'a> {\n                 Some(\"-Wl,-rpath,@loader_path/../lib\")\n             } else if !target.contains(\"windows\") &&\n                       !target.contains(\"wasm32\") &&\n-                      !target.contains(\"emscripten\") &&\n                       !target.contains(\"fuchsia\") {\n                 Some(\"-Wl,-rpath,$ORIGIN/../lib\")\n             } else {"}, {"sha": "b7ce9c7b39709e34d4e30d987ff5dd5561aa4d4b", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1047,11 +1047,10 @@ impl Step for Compiletest {\n         // Also provide `rust_test_helpers` for the host.\n         builder.ensure(native::TestHelpers { target: compiler.host });\n \n-        // As well as the target, except for plain wasm32, which can't build it\n-        if !target.contains(\"wasm32\") || target.contains(\"emscripten\") {\n+        // wasm32 can't build the test helpers\n+        if !target.contains(\"wasm32\") {\n             builder.ensure(native::TestHelpers { target });\n         }\n-\n         builder.ensure(RemoteCopyLibs { compiler, target });\n \n         let mut cmd = builder.tool_cmd(Tool::Compiletest);"}, {"sha": "3abaab6b34ef0dece78106d7955dc7f24c084a5d", "filename": "src/ci/docker/asmjs/Dockerfile", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -11,8 +11,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   cmake \\\n   sudo \\\n   gdb \\\n-  xz-utils \\\n-  bzip2\n+  xz-utils\n \n COPY scripts/emscripten.sh /scripts/\n RUN bash /scripts/emscripten.sh\n@@ -21,16 +20,28 @@ COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n ENV PATH=$PATH:/emsdk-portable\n-ENV PATH=$PATH:/emsdk-portable/upstream/emscripten/\n-ENV PATH=$PATH:/emsdk-portable/node/12.9.1_64bit/bin/\n-ENV BINARYEN_ROOT=/emsdk-portable/upstream/\n+ENV PATH=$PATH:/emsdk-portable/clang/e1.38.15_64bit/\n+ENV PATH=$PATH:/emsdk-portable/emscripten/1.38.15/\n+ENV PATH=$PATH:/emsdk-portable/node/8.9.1_64bit/bin/\n+ENV EMSCRIPTEN=/emsdk-portable/emscripten/1.38.15/\n+ENV BINARYEN_ROOT=/emsdk-portable/clang/e1.38.15_64bit/binaryen/\n ENV EM_CONFIG=/emsdk-portable/.emscripten\n \n ENV TARGETS=asmjs-unknown-emscripten\n \n-ENV SCRIPT python2.7 ../x.py test --target $TARGETS\n+ENV RUST_CONFIGURE_ARGS --enable-emscripten --disable-optimize-tests\n \n-# This is almost identical to the wasm32-unknown-emscripten target, so\n-# running with assertions again is not useful\n-ENV NO_DEBUG_ASSERTIONS=1\n+ENV SCRIPT python2.7 ../x.py test --target $TARGETS \\\n+  src/test/ui \\\n+  src/test/run-fail \\\n+  src/libstd \\\n+  src/liballoc \\\n+  src/libcore\n+\n+# Debug assertions in rustc are largely covered by other builders, and LLVM\n+# assertions cause this builder to slow down by quite a large amount and don't\n+# buy us a huge amount over other builders (not sure if we've ever seen an\n+# asmjs-specific backend assertion trip), so disable assertions for these\n+# tests.\n ENV NO_LLVM_ASSERTIONS=1\n+ENV NO_DEBUG_ASSERTIONS=1"}, {"sha": "420d47b314c0f63da8e006eb78688c6051eec6c5", "filename": "src/ci/docker/disabled/wasm32-exp/Dockerfile", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32-exp%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32-exp%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32-exp%2FDockerfile?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -0,0 +1,35 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && apt-get install -y --no-install-recommends \\\n+  g++ \\\n+  make \\\n+  file \\\n+  curl \\\n+  ca-certificates \\\n+  python \\\n+  git \\\n+  cmake \\\n+  sudo \\\n+  gdb \\\n+  xz-utils \\\n+  jq \\\n+  bzip2\n+\n+# emscripten\n+COPY scripts/emscripten-wasm.sh /scripts/\n+COPY wasm32-exp/node.sh /usr/local/bin/node\n+RUN bash /scripts/emscripten-wasm.sh\n+\n+# cache\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+# env\n+ENV PATH=/wasm-install/emscripten:/wasm-install/bin:$PATH\n+ENV EM_CONFIG=/root/.emscripten\n+\n+ENV TARGETS=wasm32-experimental-emscripten\n+\n+ENV RUST_CONFIGURE_ARGS --experimental-targets=WebAssembly\n+\n+ENV SCRIPT python2.7 ../x.py test --target $TARGETS"}, {"sha": "aa938971c702f713e857c159d8bd8b67003ff982", "filename": "src/ci/docker/disabled/wasm32-exp/node.sh", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32-exp%2Fnode.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32-exp%2Fnode.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32-exp%2Fnode.sh?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -0,0 +1,9 @@\n+#!/usr/bin/env bash\n+\n+path=\"$(dirname $1)\"\n+file=\"$(basename $1)\"\n+\n+shift\n+\n+cd \"$path\"\n+exec /node-v8.0.0-linux-x64/bin/node \"$file\" \"$@\""}, {"sha": "0d2bd39303ef8e1191b6986be45d546842b2b734", "filename": "src/ci/docker/disabled/wasm32/Dockerfile", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -11,28 +11,22 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   cmake \\\n   sudo \\\n   gdb \\\n-  xz-utils \\\n-  bzip2\n+  xz-utils\n \n+# emscripten\n COPY scripts/emscripten.sh /scripts/\n RUN bash /scripts/emscripten.sh\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n ENV PATH=$PATH:/emsdk-portable\n-ENV PATH=$PATH:/emsdk-portable/upstream/emscripten/\n-ENV PATH=$PATH:/emsdk-portable/node/12.9.1_64bit/bin/\n-ENV BINARYEN_ROOT=/emsdk-portable/upstream/\n+ENV PATH=$PATH:/emsdk-portable/clang/e1.38.15_64bit/\n+ENV PATH=$PATH:/emsdk-portable/emscripten/1.38.15/\n+ENV PATH=$PATH:/emsdk-portable/node/8.9.1_64bit/bin/\n+ENV EMSCRIPTEN=/emsdk-portable/emscripten/1.38.15/\n+ENV BINARYEN_ROOT=/emsdk-portable/clang/e1.38.15_64bit/binaryen/\n ENV EM_CONFIG=/emsdk-portable/.emscripten\n \n ENV TARGETS=wasm32-unknown-emscripten\n-\n-# FIXME: Re-enable these tests once Cargo stops trying to execute wasms\n-ENV SCRIPT python2.7 ../x.py test --target $TARGETS \\\n-    --exclude src/libcore \\\n-    --exclude src/liballoc \\\n-    --exclude src/libproc_macro \\\n-    --exclude src/libstd \\\n-    --exclude src/libterm \\\n-    --exclude src/libtest\n+ENV SCRIPT python2.7 ../x.py test --target $TARGETS"}, {"sha": "e4a93d7a100920a6941c97bb1e62e095b8b74a83", "filename": "src/ci/docker/scripts/emscripten-wasm.sh", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Fci%2Fdocker%2Fscripts%2Femscripten-wasm.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Fci%2Fdocker%2Fscripts%2Femscripten-wasm.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Femscripten-wasm.sh?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -0,0 +1,37 @@\n+set -ex\n+\n+hide_output() {\n+  set +x\n+  on_err=\"\n+echo ERROR: An error was encountered with the build.\n+cat /tmp/build.log\n+exit 1\n+\"\n+  trap \"$on_err\" ERR\n+  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n+  PING_LOOP_PID=$!\n+  $@ &> /tmp/build.log\n+  trap - ERR\n+  kill $PING_LOOP_PID\n+  rm -f /tmp/build.log\n+  set -x\n+}\n+\n+# Download last known good emscripten from WebAssembly waterfall\n+BUILD=$(curl -fL https://storage.googleapis.com/wasm-llvm/builds/linux/lkgr.json | \\\n+    jq '.build | tonumber')\n+curl -sL https://storage.googleapis.com/wasm-llvm/builds/linux/$BUILD/wasm-binaries.tbz2 | \\\n+    hide_output tar xvkj\n+\n+# node 8 is required to run wasm\n+cd /\n+curl -sL https://nodejs.org/dist/v8.0.0/node-v8.0.0-linux-x64.tar.xz | \\\n+    tar -xJ\n+\n+# Make emscripten use wasm-ready node and LLVM tools\n+echo \"EMSCRIPTEN_ROOT = '/wasm-install/emscripten'\" >> /root/.emscripten\n+echo \"NODE_JS='/usr/local/bin/node'\" >> /root/.emscripten\n+echo \"LLVM_ROOT='/wasm-install/bin'\" >> /root/.emscripten\n+echo \"BINARYEN_ROOT = '/wasm-install'\" >> /root/.emscripten\n+echo \"COMPILER_ENGINE = NODE_JS\" >> /root/.emscripten\n+echo \"JS_ENGINES = [NODE_JS]\" >> /root/.emscripten"}, {"sha": "47196e8939626a69bc82255bac116f0a68981459", "filename": "src/ci/docker/scripts/emscripten.sh", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -17,15 +17,20 @@ exit 1\n   set -x\n }\n \n-git clone https://github.com/emscripten-core/emsdk.git /emsdk-portable\n+cd /\n+curl -fL https://mozilla-games.s3.amazonaws.com/emscripten/releases/emsdk-portable.tar.gz | \\\n+    tar -xz\n+\n cd /emsdk-portable\n-hide_output ./emsdk install 1.38.46-upstream\n-./emsdk activate 1.38.46-upstream\n+./emsdk update\n+hide_output ./emsdk install sdk-1.38.15-64bit\n+./emsdk activate sdk-1.38.15-64bit\n \n # Compile and cache libc\n source ./emsdk_env.sh\n echo \"main(){}\" > a.c\n HOME=/emsdk-portable/ emcc a.c\n+HOME=/emsdk-portable/ emcc -s BINARYEN=1 a.c\n rm -f a.*\n \n # Make emsdk usable by any user"}, {"sha": "0685fa943c0b87a78c4312cb4e8cee7789b0776c", "filename": "src/liballoc/tests/binary_heap.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbinary_heap.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,5 +1,10 @@\n+use std::cmp;\n use std::collections::BinaryHeap;\n use std::collections::binary_heap::{Drain, PeekMut};\n+use std::panic::{self, AssertUnwindSafe};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+\n+use rand::{thread_rng, seq::SliceRandom};\n \n #[test]\n fn test_iterator() {\n@@ -276,15 +281,9 @@ fn assert_covariance() {\n // even if the order may not be correct.\n //\n // Destructors must be called exactly once per element.\n-// FIXME: re-enable emscripten once it can unwind again\n #[test]\n-#[cfg(not(any(miri, target_os = \"emscripten\")))] // Miri does not support catching panics\n+#[cfg(not(miri))] // Miri does not support catching panics\n fn panic_safe() {\n-    use std::cmp;\n-    use std::panic::{self, AssertUnwindSafe};\n-    use std::sync::atomic::{AtomicUsize, Ordering};\n-    use rand::{thread_rng, seq::SliceRandom};\n-\n     static DROP_COUNTER: AtomicUsize = AtomicUsize::new(0);\n \n     #[derive(Eq, PartialEq, Ord, Clone, Debug)]"}, {"sha": "4332b2e90fdaf0493deb3f1489137632fa2ede6e", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -483,7 +483,7 @@ mod slice_index {\n     }\n \n     #[test]\n-    #[cfg(not(target_os = \"emscripten\"))] // hits an OOM\n+    #[cfg(not(target_arch = \"asmjs\"))] // hits an OOM\n     #[cfg(not(miri))] // Miri is too slow\n     fn simple_big() {\n         fn a_million_letter_x() -> String {"}, {"sha": "abcba0c2e8479a314a6ae30552ce3053e1ffd82f", "filename": "src/liballoc/tests/str.rs.rej", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Fliballoc%2Ftests%2Fstr.rs.rej", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Fliballoc%2Ftests%2Fstr.rs.rej", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs.rej?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,10 +0,0 @@\n-diff a/src/liballoc/tests/str.rs b/src/liballoc/tests/str.rs\t(rejected hunks)\n-@@ -483,7 +483,7 @@ mod slice_index {\n-     }\n- \n-     #[test]\n--    #[cfg(not(target_arch = \"asmjs\"))] // hits an OOM\n-+    #[cfg(not(target_arch = \"js\"))] // hits an OOM\n-     #[cfg(not(miri))] // Miri is too slow\n-     fn simple_big() {\n-         fn a_million_letter_x() -> String {"}, {"sha": "98d013dfa2b57616889bb8b3150111077fe90fcf", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -944,10 +944,8 @@ fn drain_filter_complex() {\n     }\n }\n \n-// Miri does not support catching panics\n-// FIXME: re-enable emscripten once it can unwind again\n #[test]\n-#[cfg(not(any(miri, target_os = \"emscripten\")))]\n+#[cfg(not(miri))] // Miri does not support catching panics\n fn drain_filter_consumed_panic() {\n     use std::rc::Rc;\n     use std::sync::Mutex;\n@@ -997,9 +995,8 @@ fn drain_filter_consumed_panic() {\n     }\n }\n \n-// FIXME: Re-enable emscripten once it can catch panics\n #[test]\n-#[cfg(not(any(miri, target_os = \"emscripten\")))] // Miri does not support catching panics\n+#[cfg(not(miri))] // Miri does not support catching panics\n fn drain_filter_unconsumed_panic() {\n     use std::rc::Rc;\n     use std::sync::Mutex;"}, {"sha": "eda0e7c518c58290b6f212c2319dae92ee038948", "filename": "src/libcore/ffi.rs", "status": "modified", "additions": 38, "deletions": 18, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibcore%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibcore%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fffi.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -49,10 +49,8 @@ impl fmt::Debug for c_void {\n /// Basic implementation of a `va_list`.\n // The name is WIP, using `VaListImpl` for now.\n #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n-              not(target_arch = \"x86_64\")),\n+              not(target_arch = \"x86_64\"), not(target_arch = \"asmjs\")),\n           all(target_arch = \"aarch64\", target_os = \"ios\"),\n-          target_arch = \"wasm32\",\n-          target_arch = \"asmjs\",\n           windows))]\n #[repr(transparent)]\n #[unstable(feature = \"c_variadic\",\n@@ -69,10 +67,8 @@ pub struct VaListImpl<'f> {\n }\n \n #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n-              not(target_arch = \"x86_64\")),\n+              not(target_arch = \"x86_64\"), not(target_arch = \"asmjs\")),\n           all(target_arch = \"aarch64\", target_os = \"ios\"),\n-          target_arch = \"wasm32\",\n-          target_arch = \"asmjs\",\n           windows))]\n #[unstable(feature = \"c_variadic\",\n            reason = \"the `c_variadic` feature has not been properly tested on \\\n@@ -141,6 +137,38 @@ pub struct VaListImpl<'f> {\n     _marker: PhantomData<&'f mut &'f c_void>,\n }\n \n+/// asm.js ABI implementation of a `va_list`.\n+// asm.js uses the PNaCl ABI, which specifies that a `va_list` is\n+// an array of 4 32-bit integers, according to the old PNaCl docs at\n+// https://web.archive.org/web/20130518054430/https://www.chromium.org/nativeclient/pnacl/bitcode-abi#TOC-Derived-Types\n+// and clang does the same in `CreatePNaClABIBuiltinVaListDecl` from `lib/AST/ASTContext.cpp`\n+#[cfg(all(target_arch = \"asmjs\", not(windows)))]\n+#[repr(C)]\n+#[unstable(feature = \"c_variadic\",\n+           reason = \"the `c_variadic` feature has not been properly tested on \\\n+                     all supported platforms\",\n+           issue = \"44930\")]\n+#[lang = \"va_list\"]\n+pub struct VaListImpl<'f> {\n+    inner: [crate::mem::MaybeUninit<i32>; 4],\n+    _marker: PhantomData<&'f mut &'f c_void>,\n+}\n+\n+#[cfg(all(target_arch = \"asmjs\", not(windows)))]\n+#[unstable(feature = \"c_variadic\",\n+           reason = \"the `c_variadic` feature has not been properly tested on \\\n+                     all supported platforms\",\n+           issue = \"44930\")]\n+impl<'f> fmt::Debug for VaListImpl<'f> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        unsafe {\n+            write!(f, \"va_list* [{:#x}, {:#x}, {:#x}, {:#x}]\",\n+                   self.inner[0].read(), self.inner[1].read(),\n+                   self.inner[2].read(), self.inner[3].read())\n+        }\n+    }\n+}\n+\n /// A wrapper for a `va_list`\n #[repr(transparent)]\n #[derive(Debug)]\n@@ -150,29 +178,23 @@ pub struct VaListImpl<'f> {\n            issue = \"44930\")]\n pub struct VaList<'a, 'f: 'a> {\n     #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n-                  not(target_arch = \"x86_64\")),\n+                  not(target_arch = \"x86_64\"), not(target_arch = \"asmjs\")),\n               all(target_arch = \"aarch64\", target_os = \"ios\"),\n-              target_arch = \"wasm32\",\n-              target_arch = \"asmjs\",\n               windows))]\n     inner: VaListImpl<'f>,\n \n     #[cfg(all(any(target_arch = \"aarch64\", target_arch = \"powerpc\",\n-                  target_arch = \"x86_64\"),\n+                  target_arch = \"x86_64\", target_arch = \"asmjs\"),\n               any(not(target_arch = \"aarch64\"), not(target_os = \"ios\")),\n-              not(target_arch = \"wasm32\"),\n-              not(target_arch = \"asmjs\"),\n               not(windows)))]\n     inner: &'a mut VaListImpl<'f>,\n \n     _marker: PhantomData<&'a mut VaListImpl<'f>>,\n }\n \n #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n-              not(target_arch = \"x86_64\")),\n+              not(target_arch = \"x86_64\"), not(target_arch = \"asmjs\")),\n           all(target_arch = \"aarch64\", target_os = \"ios\"),\n-          target_arch = \"wasm32\",\n-          target_arch = \"asmjs\",\n           windows))]\n #[unstable(feature = \"c_variadic\",\n            reason = \"the `c_variadic` feature has not been properly tested on \\\n@@ -190,10 +212,8 @@ impl<'f> VaListImpl<'f> {\n }\n \n #[cfg(all(any(target_arch = \"aarch64\", target_arch = \"powerpc\",\n-              target_arch = \"x86_64\"),\n+              target_arch = \"x86_64\", target_arch = \"asmjs\"),\n           any(not(target_arch = \"aarch64\"), not(target_os = \"ios\")),\n-          not(target_arch = \"wasm32\"),\n-          not(target_arch = \"asmjs\"),\n           not(windows)))]\n #[unstable(feature = \"c_variadic\",\n            reason = \"the `c_variadic` feature has not been properly tested on \\"}, {"sha": "ee4be6c9151194b0e7a58e32b8be797e188bd933", "filename": "src/libcore/hint.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -114,8 +114,24 @@ pub fn black_box<T>(dummy: T) -> T {\n     // this. LLVM's intepretation of inline assembly is that it's, well, a black\n     // box. This isn't the greatest implementation since it probably deoptimizes\n     // more than we want, but it's so far good enough.\n+    #[cfg(not(any(\n+        target_arch = \"asmjs\",\n+        all(\n+            target_arch = \"wasm32\",\n+            target_os = \"emscripten\"\n+        )\n+    )))]\n     unsafe {\n         asm!(\"\" : : \"r\"(&dummy));\n         return dummy;\n     }\n+\n+    // Not all platforms support inline assembly so try to do something without\n+    // inline assembly which in theory still hinders at least some optimizations\n+    // on those targets. This is the \"best effort\" scenario.\n+    unsafe {\n+        let ret = crate::ptr::read_volatile(&dummy);\n+        crate::mem::forget(dummy);\n+        ret\n+    }\n }"}, {"sha": "47e3a0d21676f6caed5ed4c23832283215947ab5", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1102,7 +1102,6 @@ impl<T: Default> Option<T> {\n     }\n }\n \n-#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n impl<T: Deref> Option<T> {\n     /// Converts from `Option<T>` (or `&Option<T>`) to `Option<&T::Target>`.\n     ///\n@@ -1114,20 +1113,18 @@ impl<T: Deref> Option<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(inner_deref)]\n-    ///\n     /// let x: Option<String> = Some(\"hey\".to_owned());\n     /// assert_eq!(x.as_deref(), Some(\"hey\"));\n     ///\n     /// let x: Option<String> = None;\n     /// assert_eq!(x.as_deref(), None);\n     /// ```\n+    #[stable(feature = \"option_deref\", since = \"1.40.0\")]\n     pub fn as_deref(&self) -> Option<&T::Target> {\n         self.as_ref().map(|t| t.deref())\n     }\n }\n \n-#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n impl<T: DerefMut> Option<T> {\n     /// Converts from `Option<T>` (or `&mut Option<T>`) to `Option<&mut T::Target>`.\n     ///\n@@ -1137,14 +1134,13 @@ impl<T: DerefMut> Option<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(inner_deref)]\n-    ///\n     /// let mut x: Option<String> = Some(\"hey\".to_owned());\n     /// assert_eq!(x.as_deref_mut().map(|x| {\n     ///     x.make_ascii_uppercase();\n     ///     x\n     /// }), Some(\"HEY\".to_owned().as_mut_str()));\n     /// ```\n+    #[stable(feature = \"option_deref\", since = \"1.40.0\")]\n     pub fn as_deref_mut(&mut self) -> Option<&mut T::Target> {\n         self.as_mut().map(|t| t.deref_mut())\n     }"}, {"sha": "4e79ea812044b41deb1c370c296965c7dde34f13", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -63,6 +63,7 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     // SAFETY: const sound because we transmute out the length field as a usize (which it must be)\n+    #[allow(unused_attributes)]\n     #[allow_internal_unstable(const_fn_union)]\n     pub const fn len(&self) -> usize {\n         unsafe {"}, {"sha": "885696e5acf49f8550c6fa85acc4eda8ec2b891a", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -2167,6 +2167,7 @@ impl str {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline(always)]\n     // SAFETY: const sound because we transmute two types with the same layout\n+    #[allow(unused_attributes)]\n     #[allow_internal_unstable(const_fn_union)]\n     pub const fn as_bytes(&self) -> &[u8] {\n         #[repr(C)]"}, {"sha": "66c51000066b2d35e1b89d41b07ad92b0262df4e", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 0, "deletions": 180, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -466,66 +466,6 @@ fn main() {\n ```\n \"##,\n \n-// This shouldn't really ever trigger since the repeated value error comes first\n-E0136: r##\"\n-A binary can only have one entry point, and by default that entry point is the\n-function `main()`. If there are multiple such functions, please rename one.\n-\"##,\n-\n-E0137: r##\"\n-More than one function was declared with the `#[main]` attribute.\n-\n-Erroneous code example:\n-\n-```compile_fail,E0137\n-#![feature(main)]\n-\n-#[main]\n-fn foo() {}\n-\n-#[main]\n-fn f() {} // error: multiple functions with a `#[main]` attribute\n-```\n-\n-This error indicates that the compiler found multiple functions with the\n-`#[main]` attribute. This is an error because there must be a unique entry\n-point into a Rust program. Example:\n-\n-```\n-#![feature(main)]\n-\n-#[main]\n-fn f() {} // ok!\n-```\n-\"##,\n-\n-E0138: r##\"\n-More than one function was declared with the `#[start]` attribute.\n-\n-Erroneous code example:\n-\n-```compile_fail,E0138\n-#![feature(start)]\n-\n-#[start]\n-fn foo(argc: isize, argv: *const *const u8) -> isize {}\n-\n-#[start]\n-fn f(argc: isize, argv: *const *const u8) -> isize {}\n-// error: multiple 'start' functions\n-```\n-\n-This error indicates that the compiler found multiple functions with the\n-`#[start]` attribute. This is an error because there must be a unique entry\n-point into a Rust program. Example:\n-\n-```\n-#![feature(start)]\n-\n-#[start]\n-fn foo(argc: isize, argv: *const *const u8) -> isize { 0 } // ok!\n-```\n-\"##,\n \n E0139: r##\"\n #### Note: this error code is no longer emitted by the compiler.\n@@ -1626,33 +1566,6 @@ It is not possible to use stability attributes outside of the standard library.\n Also, for now, it is not possible to write deprecation messages either.\n \"##,\n \n-E0512: r##\"\n-Transmute with two differently sized types was attempted. Erroneous code\n-example:\n-\n-```compile_fail,E0512\n-fn takes_u8(_: u8) {}\n-\n-fn main() {\n-    unsafe { takes_u8(::std::mem::transmute(0u16)); }\n-    // error: cannot transmute between types of different sizes,\n-    //        or dependently-sized types\n-}\n-```\n-\n-Please use types with same size or use the expected type directly. Example:\n-\n-```\n-fn takes_u8(_: u8) {}\n-\n-fn main() {\n-    unsafe { takes_u8(::std::mem::transmute(0i8)); } // ok!\n-    // or:\n-    unsafe { takes_u8(0u8); } // ok!\n-}\n-```\n-\"##,\n-\n E0517: r##\"\n This error indicates that a `#[repr(..)]` attribute was placed on an\n unsupported item.\n@@ -1847,84 +1760,6 @@ See [RFC 1522] for more details.\n [RFC 1522]: https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\n \"##,\n \n-E0591: r##\"\n-Per [RFC 401][rfc401], if you have a function declaration `foo`:\n-\n-```\n-// For the purposes of this explanation, all of these\n-// different kinds of `fn` declarations are equivalent:\n-struct S;\n-fn foo(x: S) { /* ... */ }\n-# #[cfg(for_demonstration_only)]\n-extern \"C\" { fn foo(x: S); }\n-# #[cfg(for_demonstration_only)]\n-impl S { fn foo(self) { /* ... */ } }\n-```\n-\n-the type of `foo` is **not** `fn(S)`, as one might expect.\n-Rather, it is a unique, zero-sized marker type written here as `typeof(foo)`.\n-However, `typeof(foo)` can be _coerced_ to a function pointer `fn(S)`,\n-so you rarely notice this:\n-\n-```\n-# struct S;\n-# fn foo(_: S) {}\n-let x: fn(S) = foo; // OK, coerces\n-```\n-\n-The reason that this matter is that the type `fn(S)` is not specific to\n-any particular function: it's a function _pointer_. So calling `x()` results\n-in a virtual call, whereas `foo()` is statically dispatched, because the type\n-of `foo` tells us precisely what function is being called.\n-\n-As noted above, coercions mean that most code doesn't have to be\n-concerned with this distinction. However, you can tell the difference\n-when using **transmute** to convert a fn item into a fn pointer.\n-\n-This is sometimes done as part of an FFI:\n-\n-```compile_fail,E0591\n-extern \"C\" fn foo(userdata: Box<i32>) {\n-    /* ... */\n-}\n-\n-# fn callback(_: extern \"C\" fn(*mut i32)) {}\n-# use std::mem::transmute;\n-# unsafe {\n-let f: extern \"C\" fn(*mut i32) = transmute(foo);\n-callback(f);\n-# }\n-```\n-\n-Here, transmute is being used to convert the types of the fn arguments.\n-This pattern is incorrect because, because the type of `foo` is a function\n-**item** (`typeof(foo)`), which is zero-sized, and the target type (`fn()`)\n-is a function pointer, which is not zero-sized.\n-This pattern should be rewritten. There are a few possible ways to do this:\n-\n-- change the original fn declaration to match the expected signature,\n-  and do the cast in the fn body (the preferred option)\n-- cast the fn item fo a fn pointer before calling transmute, as shown here:\n-\n-    ```\n-    # extern \"C\" fn foo(_: Box<i32>) {}\n-    # use std::mem::transmute;\n-    # unsafe {\n-    let f: extern \"C\" fn(*mut i32) = transmute(foo as extern \"C\" fn(_));\n-    let f: extern \"C\" fn(*mut i32) = transmute(foo as usize); // works too\n-    # }\n-    ```\n-\n-The same applies to transmutes to `*mut fn()`, which were observed in practice.\n-Note though that use of this type is generally incorrect.\n-The intention is typically to describe a function pointer, but just `fn()`\n-alone suffices for that. `*mut fn()` is a pointer to a fn pointer.\n-(Since these values are typically just passed to C code, however, this rarely\n-makes a difference in practice.)\n-\n-[rfc401]: https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md\n-\"##,\n-\n E0593: r##\"\n You tried to supply an `Fn`-based type with an incorrect number of arguments\n than what was expected.\n@@ -1941,21 +1776,6 @@ fn main() {\n ```\n \"##,\n \n-E0601: r##\"\n-No `main` function was found in a binary crate. To fix this error, add a\n-`main` function. For example:\n-\n-```\n-fn main() {\n-    // Your program will start here.\n-    println!(\"Hello world!\");\n-}\n-```\n-\n-If you don't know the basics of Rust, you can go look to the Rust Book to get\n-started: https://doc.rust-lang.org/book/\n-\"##,\n-\n E0602: r##\"\n An unknown lint was used on the command line.\n "}, {"sha": "bd19a002fe8b7bf676e185b527bd5a034eaa574c", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -733,12 +733,12 @@ where\n                 // Skip lifetime parameters of the enclosing item(s)\n                 // Also skip the witness type, because that has no free regions.\n \n-                for upvar_ty in substs.upvar_tys(def_id, self.tcx) {\n+                for upvar_ty in substs.as_generator().upvar_tys(def_id, self.tcx) {\n                     upvar_ty.visit_with(self);\n                 }\n \n-                substs.return_ty(def_id, self.tcx).visit_with(self);\n-                substs.yield_ty(def_id, self.tcx).visit_with(self);\n+                substs.as_generator().return_ty(def_id, self.tcx).visit_with(self);\n+                substs.as_generator().yield_ty(def_id, self.tcx).visit_with(self);\n             }\n             _ => {\n                 ty.super_visit_with(self);\n@@ -902,7 +902,7 @@ impl TypeFolder<'tcx> for ReverseMapper<'tcx> {\n             ty::Generator(def_id, substs, movability) => {\n                 let generics = self.tcx.generics_of(def_id);\n                 let substs =\n-                    self.tcx.mk_substs(substs.substs.iter().enumerate().map(|(index, &kind)| {\n+                    self.tcx.mk_substs(substs.iter().enumerate().map(|(index, &kind)| {\n                         if index < generics.parent_count {\n                             // Accommodate missing regions in the parent kinds...\n                             self.fold_kind_mapping_missing_regions_to_empty(kind)\n@@ -912,7 +912,7 @@ impl TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                         }\n                     }));\n \n-                self.tcx.mk_generator(def_id, ty::GeneratorSubsts { substs }, movability)\n+                self.tcx.mk_generator(def_id, substs, movability)\n             }\n \n             ty::Param(..) => {"}, {"sha": "9c3cb3af9e79c9e61f493a065f88bbd08c8ca514", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -35,7 +35,6 @@\n #![feature(const_transmute)]\n #![feature(core_intrinsics)]\n #![feature(drain_filter)]\n-#![feature(inner_deref)]\n #![cfg_attr(windows, feature(libc))]\n #![feature(never_type)]\n #![feature(exhaustive_patterns)]\n@@ -102,16 +101,12 @@ pub mod lint;\n pub mod middle {\n     pub mod expr_use_visitor;\n     pub mod cstore;\n-    pub mod dead;\n     pub mod dependency_format;\n     pub mod diagnostic_items;\n-    pub mod entry;\n     pub mod exported_symbols;\n     pub mod free_region;\n-    pub mod intrinsicck;\n     pub mod lib_features;\n     pub mod lang_items;\n-    pub mod liveness;\n     pub mod mem_categorization;\n     pub mod privacy;\n     pub mod reachable;"}, {"sha": "2b5212cb7efaa5ca5c095da678a6f079845fd998", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -15,7 +15,7 @@ use crate::ty::layout::VariantIdx;\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::{\n-    self, AdtDef, CanonicalUserTypeAnnotations, GeneratorSubsts, Region, Ty, TyCtxt,\n+    self, AdtDef, CanonicalUserTypeAnnotations, Region, Ty, TyCtxt,\n     UserTypeAnnotationIndex,\n };\n \n@@ -2189,7 +2189,7 @@ pub enum AggregateKind<'tcx> {\n     Adt(&'tcx AdtDef, VariantIdx, SubstsRef<'tcx>, Option<UserTypeAnnotationIndex>, Option<usize>),\n \n     Closure(DefId, SubstsRef<'tcx>),\n-    Generator(DefId, GeneratorSubsts<'tcx>, hir::GeneratorMovability),\n+    Generator(DefId, SubstsRef<'tcx>, hir::GeneratorMovability),\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]"}, {"sha": "e87aabf9a0566498cbe1cd615819a20a58c1a2b6", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -197,7 +197,7 @@ impl<'tcx> Rvalue<'tcx> {\n                 let ty = place.ty(local_decls, tcx).ty;\n                 match ty.kind {\n                     ty::Adt(adt_def, _) => adt_def.repr.discr_type().to_ty(tcx),\n-                    ty::Generator(_, substs, _) => substs.discr_ty(tcx),\n+                    ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),\n                     _ => {\n                         // This can only be `0`, for now, so `u8` will suffice.\n                         tcx.types.u8"}, {"sha": "edc7922f46eec1bb7b84978225a28dd25146b678", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,5 +1,5 @@\n use crate::ty::subst::SubstsRef;\n-use crate::ty::{CanonicalUserTypeAnnotation, GeneratorSubsts, Ty};\n+use crate::ty::{CanonicalUserTypeAnnotation, Ty};\n use crate::mir::*;\n use syntax_pos::Span;\n \n@@ -230,12 +230,6 @@ macro_rules! make_mir_visitor {\n                 self.super_substs(substs);\n             }\n \n-            fn visit_generator_substs(&mut self,\n-                                      substs: & $($mutability)? GeneratorSubsts<'tcx>,\n-                                    _: Location) {\n-                self.super_generator_substs(substs);\n-            }\n-\n             fn visit_local_decl(&mut self,\n                                 local: Local,\n                                 local_decl: & $($mutability)? LocalDecl<'tcx>) {\n@@ -628,7 +622,7 @@ macro_rules! make_mir_visitor {\n                                 generator_substs,\n                                 _movability,\n                             ) => {\n-                                self.visit_generator_substs(generator_substs, location);\n+                                self.visit_substs(generator_substs, location);\n                             }\n                         }\n \n@@ -846,10 +840,6 @@ macro_rules! make_mir_visitor {\n             fn super_substs(&mut self, _substs: & $($mutability)? SubstsRef<'tcx>) {\n             }\n \n-            fn super_generator_substs(&mut self,\n-                                      _substs: & $($mutability)? GeneratorSubsts<'tcx>) {\n-            }\n-\n             // Convenience methods\n \n             fn visit_location(&mut self, body: & $($mutability)? Body<'tcx>, location: Location) {"}, {"sha": "b48353e73308be6beb95ada4e1240351a45de971", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1345,7 +1345,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     mir_opt_level: usize = (1, parse_uint, [TRACKED],\n         \"set the MIR optimization level (0-3, default: 1)\"),\n     mutable_noalias: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-        \"emit noalias metadata for mutable references (default: yes on LLVM >= 6)\"),\n+        \"emit noalias metadata for mutable references (default: no)\"),\n     dump_mir: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"dump MIR state to file.\n         `val` is used to select which passes and functions to dump. For example:"}, {"sha": "d96330bf0a9b4680b88b16328cea577577d4749b", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -610,7 +610,7 @@ pub struct VtableImplData<'tcx, N> {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]\n pub struct VtableGeneratorData<'tcx, N> {\n     pub generator_def_id: DefId,\n-    pub substs: ty::GeneratorSubsts<'tcx>,\n+    pub substs: SubstsRef<'tcx>,\n     /// Nested obligations. This can be non-empty if the generator\n     /// signature contains associated types.\n     pub nested: Vec<N>"}, {"sha": "5b4ec885d7785e23a0976dbc8ee49d8db18ffb05", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1259,7 +1259,7 @@ fn confirm_generator_candidate<'cx, 'tcx>(\n     obligation: &ProjectionTyObligation<'tcx>,\n     vtable: VtableGeneratorData<'tcx, PredicateObligation<'tcx>>,\n ) -> Progress<'tcx> {\n-    let gen_sig = vtable.substs.poly_sig(vtable.generator_def_id, selcx.tcx());\n+    let gen_sig = vtable.substs.as_generator().poly_sig(vtable.generator_def_id, selcx.tcx());\n     let Normalized {\n         value: gen_sig,\n         obligations"}, {"sha": "4ee5700f43fe12cbf35fa36a0e51df0d689dabb4", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -2761,8 +2761,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 .collect(),\n \n             ty::Generator(def_id, ref substs, _) => {\n-                let witness = substs.witness(def_id, self.tcx());\n+                let witness = substs.as_generator().witness(def_id, self.tcx());\n                 substs\n+                    .as_generator()\n                     .upvar_tys(def_id, self.tcx())\n                     .chain(iter::once(witness))\n                     .collect()\n@@ -3324,8 +3325,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         )?);\n \n         Ok(VtableGeneratorData {\n-            generator_def_id: generator_def_id,\n-            substs: substs.clone(),\n+            generator_def_id,\n+            substs,\n             nested: obligations,\n         })\n     }\n@@ -3911,9 +3912,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n         closure_def_id: DefId,\n-        substs: ty::GeneratorSubsts<'tcx>,\n+        substs: SubstsRef<'tcx>,\n     ) -> ty::PolyTraitRef<'tcx> {\n-        let gen_sig = substs.poly_sig(closure_def_id, self.tcx());\n+        let gen_sig = substs.as_generator().poly_sig(closure_def_id, self.tcx());\n \n         // (1) Feels icky to skip the binder here, but OTOH we know\n         // that the self-type is an generator type and hence is"}, {"sha": "eb380eb12d8e7545e572748c9858eef24cd13441", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -29,7 +29,7 @@ use crate::traits;\n use crate::traits::{Clause, Clauses, GoalKind, Goal, Goals};\n use crate::ty::{self, DefIdTree, Ty, TypeAndMut};\n use crate::ty::{TyS, TyKind, List};\n-use crate::ty::{AdtKind, AdtDef, GeneratorSubsts, Region, Const};\n+use crate::ty::{AdtKind, AdtDef, Region, Const};\n use crate::ty::{PolyFnSig, InferTy, ParamTy, ProjectionTy, ExistentialPredicate, Predicate};\n use crate::ty::RegionKind;\n use crate::ty::{TyVar, TyVid, IntVar, IntVid, FloatVar, FloatVid, ConstVid};\n@@ -2510,7 +2510,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     #[inline]\n     pub fn mk_generator(self,\n                         id: DefId,\n-                        generator_substs: GeneratorSubsts<'tcx>,\n+                        generator_substs: SubstsRef<'tcx>,\n                         movability: hir::GeneratorMovability)\n                         -> Ty<'tcx> {\n         self.mk_ty(Generator(id, generator_substs, movability))"}, {"sha": "4ff5e1a7b8de2615ada83db44d27b8b56e218704", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -94,7 +94,7 @@ impl FlagComputation {\n             &ty::Generator(_, ref substs, _) => {\n                 self.add_flags(TypeFlags::HAS_TY_CLOSURE);\n                 self.add_flags(TypeFlags::HAS_FREE_LOCAL_NAMES);\n-                self.add_substs(&substs.substs);\n+                self.add_substs(substs);\n             }\n \n             &ty::GeneratorWitness(ref ts) => {"}, {"sha": "93a8341e74628063fdda5cd8144c1d1dfdbc6b2c", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -71,7 +71,7 @@ impl<'tcx> Instance<'tcx> {\n                 ))\n             }\n             ty::Generator(def_id, substs, _) => {\n-                let sig = substs.poly_sig(def_id, tcx);\n+                let sig = substs.as_generator().poly_sig(def_id, tcx);\n \n                 let env_region = ty::ReLateBound(ty::INNERMOST, ty::BrEnv);\n                 let env_ty = tcx.mk_mut_ref(tcx.mk_region(env_region), ty);\n@@ -395,7 +395,7 @@ fn resolve_associated_item<'tcx>(\n         traits::VtableGenerator(generator_data) => {\n             Some(Instance {\n                 def: ty::InstanceDef::Item(generator_data.generator_def_id),\n-                substs: generator_data.substs.substs\n+                substs: generator_data.substs\n             })\n         }\n         traits::VtableClosure(closure_data) => {"}, {"sha": "ce7e1822d9ab5d6bbc09a6a79f795d0045100553", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,5 +1,5 @@\n use crate::session::{self, DataTypeKind};\n-use crate::ty::{self, Ty, TyCtxt, TypeFoldable, ReprOptions};\n+use crate::ty::{self, Ty, TyCtxt, TypeFoldable, ReprOptions, subst::SubstsRef};\n \n use syntax::ast::{self, Ident, IntTy, UintTy};\n use syntax::attr;\n@@ -15,7 +15,6 @@ use std::ops::Bound;\n use crate::hir;\n use crate::ich::StableHashingContext;\n use crate::mir::{GeneratorLayout, GeneratorSavedLocal};\n-use crate::ty::GeneratorSubsts;\n use crate::ty::subst::Subst;\n use rustc_index::bit_set::BitSet;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -671,7 +670,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 tcx.intern_layout(unit)\n             }\n \n-            ty::Generator(def_id, substs, _) => self.generator_layout(ty, def_id, &substs)?,\n+            ty::Generator(def_id, substs, _) => self.generator_layout(ty, def_id, substs)?,\n \n             ty::Closure(def_id, ref substs) => {\n                 let tys = substs.as_closure().upvar_tys(def_id, tcx);\n@@ -1406,22 +1405,22 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         &self,\n         ty: Ty<'tcx>,\n         def_id: hir::def_id::DefId,\n-        substs: &GeneratorSubsts<'tcx>,\n+        substs: SubstsRef<'tcx>,\n     ) -> Result<&'tcx LayoutDetails, LayoutError<'tcx>> {\n         use SavedLocalEligibility::*;\n         let tcx = self.tcx;\n \n-        let subst_field = |ty: Ty<'tcx>| { ty.subst(tcx, substs.substs) };\n+        let subst_field = |ty: Ty<'tcx>| { ty.subst(tcx, substs) };\n \n         let info = tcx.generator_layout(def_id);\n         let (ineligible_locals, assignments) = self.generator_saved_local_eligibility(&info);\n \n         // Build a prefix layout, including \"promoting\" all ineligible\n         // locals as part of the prefix. We compute the layout of all of\n         // these fields at once to get optimal packing.\n-        let discr_index = substs.prefix_tys(def_id, tcx).count();\n+        let discr_index = substs.as_generator().prefix_tys(def_id, tcx).count();\n         // FIXME(eddyb) set the correct vaidity range for the discriminant.\n-        let discr_layout = self.layout_of(substs.discr_ty(tcx))?;\n+        let discr_layout = self.layout_of(substs.as_generator().discr_ty(tcx))?;\n         let discr = match &discr_layout.abi {\n             Abi::Scalar(s) => s.clone(),\n             _ => bug!(),\n@@ -1430,7 +1429,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             .map(|local| subst_field(info.field_tys[local]))\n             .map(|ty| tcx.mk_maybe_uninit(ty))\n             .map(|ty| self.layout_of(ty));\n-        let prefix_layouts = substs.prefix_tys(def_id, tcx)\n+        let prefix_layouts = substs.as_generator().prefix_tys(def_id, tcx)\n             .map(|ty| self.layout_of(ty))\n             .chain(iter::once(Ok(discr_layout)))\n             .chain(promoted_layouts)\n@@ -2153,15 +2152,15 @@ where\n             ty::Generator(def_id, ref substs, _) => {\n                 match this.variants {\n                     Variants::Single { index } => {\n-                        substs.state_tys(def_id, tcx)\n+                        substs.as_generator().state_tys(def_id, tcx)\n                             .nth(index.as_usize()).unwrap()\n                             .nth(i).unwrap()\n                     }\n                     Variants::Multiple { ref discr, discr_index, .. } => {\n                         if i == discr_index {\n                             return discr_layout(discr);\n                         }\n-                        substs.prefix_tys(def_id, tcx).nth(i).unwrap()\n+                        substs.as_generator().prefix_tys(def_id, tcx).nth(i).unwrap()\n                     }\n                 }\n             }"}, {"sha": "80e77cdfad0b6ec97f5eaa990f2e3e88bb97eaf1", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -69,7 +69,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n             ty::Generator(def_id, ref substs, _) => {\n                 // Same as the closure case\n-                for upvar_ty in substs.upvar_tys(def_id, *self) {\n+                for upvar_ty in substs.as_generator().upvar_tys(def_id, *self) {\n                     self.compute_components(upvar_ty, out);\n                 }\n "}, {"sha": "df39d0ccc9eed08eab509f2504669679056ad7c0", "filename": "src/librustc/ty/print/obsolete.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -8,7 +8,7 @@\n use rustc::hir::def_id::DefId;\n use rustc::mir::interpret::ConstValue;\n use rustc::ty::subst::SubstsRef;\n-use rustc::ty::{self, Const, GeneratorSubsts, Instance, Ty, TyCtxt};\n+use rustc::ty::{self, Const, Instance, Ty, TyCtxt};\n use rustc::{bug, hir};\n use std::fmt::Write;\n use std::iter;\n@@ -154,7 +154,7 @@ impl DefPathBasedNames<'tcx> {\n                     self.push_type_name(sig.output(), output, debug);\n                 }\n             }\n-            ty::Generator(def_id, GeneratorSubsts { substs }, _)\n+            ty::Generator(def_id,  substs, _)\n             | ty::Closure(def_id, substs) => {\n                 self.push_def_path(def_id, output);\n                 let generics = self.tcx.generics_of(self.tcx.closure_base_def_id(def_id));"}, {"sha": "732638929963d83fb4dc8bdb09c2c525852ee4b7", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -605,8 +605,8 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             ty::Str => p!(write(\"str\")),\n             ty::Generator(did, substs, movability) => {\n-                let upvar_tys = substs.upvar_tys(did, self.tcx());\n-                let witness = substs.witness(did, self.tcx());\n+                let upvar_tys = substs.as_generator().upvar_tys(did, self.tcx());\n+                let witness = substs.as_generator().witness(did, self.tcx());\n                 if movability == hir::GeneratorMovability::Movable {\n                     p!(write(\"[generator\"));\n                 } else {"}, {"sha": "e27236b47e07f8501557f344457077532ea503c5", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -163,7 +163,7 @@ pub enum TyKind<'tcx> {\n \n     /// The anonymous type of a generator. Used to represent the type of\n     /// `|a| yield a`.\n-    Generator(DefId, GeneratorSubsts<'tcx>, hir::GeneratorMovability),\n+    Generator(DefId, SubstsRef<'tcx>, hir::GeneratorMovability),\n \n     /// A type representin the types stored inside a generator.\n     /// This should only appear in GeneratorInteriors.\n@@ -512,7 +512,7 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n     /// variant indices.\n     #[inline]\n     pub fn discriminants(\n-        &'tcx self,\n+        self,\n         def_id: DefId,\n         tcx: TyCtxt<'tcx>,\n     ) -> impl Iterator<Item = (VariantIdx, Discr<'tcx>)> + Captures<'tcx> {\n@@ -524,7 +524,7 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n     /// Calls `f` with a reference to the name of the enumerator for the given\n     /// variant `v`.\n     #[inline]\n-    pub fn variant_name(&self, v: VariantIdx) -> Cow<'static, str> {\n+    pub fn variant_name(self, v: VariantIdx) -> Cow<'static, str> {\n         match v.as_usize() {\n             Self::UNRESUMED => Cow::from(Self::UNRESUMED_NAME),\n             Self::RETURNED => Cow::from(Self::RETURNED_NAME),\n@@ -570,7 +570,7 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n #[derive(Debug, Copy, Clone)]\n pub enum UpvarSubsts<'tcx> {\n     Closure(SubstsRef<'tcx>),\n-    Generator(GeneratorSubsts<'tcx>),\n+    Generator(SubstsRef<'tcx>),\n }\n \n impl<'tcx> UpvarSubsts<'tcx> {\n@@ -582,7 +582,7 @@ impl<'tcx> UpvarSubsts<'tcx> {\n     ) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n         let upvar_kinds = match self {\n             UpvarSubsts::Closure(substs) => substs.as_closure().split(def_id, tcx).upvar_kinds,\n-            UpvarSubsts::Generator(substs) => substs.split(def_id, tcx).upvar_kinds,\n+            UpvarSubsts::Generator(substs) => substs.as_generator().split(def_id, tcx).upvar_kinds,\n         };\n         upvar_kinds.iter().map(|t| {\n             if let GenericArgKind::Type(ty) = t.unpack() {\n@@ -2109,7 +2109,8 @@ impl<'tcx> TyS<'tcx> {\n     pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {\n         match self.kind {\n             TyKind::Adt(adt, _) => Some(adt.variant_range()),\n-            TyKind::Generator(def_id, substs, _) => Some(substs.variant_range(def_id, tcx)),\n+            TyKind::Generator(def_id, substs, _) =>\n+                Some(substs.as_generator().variant_range(def_id, tcx)),\n             _ => None,\n         }\n     }\n@@ -2126,7 +2127,7 @@ impl<'tcx> TyS<'tcx> {\n         match self.kind {\n             TyKind::Adt(adt, _) => Some(adt.discriminant_for_variant(tcx, variant_index)),\n             TyKind::Generator(def_id, substs, _) =>\n-                Some(substs.discriminant_for_variant(def_id, tcx, variant_index)),\n+                Some(substs.as_generator().discriminant_for_variant(def_id, tcx, variant_index)),\n             _ => None,\n         }\n     }\n@@ -2149,7 +2150,7 @@ impl<'tcx> TyS<'tcx> {\n                 out.extend(substs.regions())\n             }\n             Closure(_, ref substs ) |\n-            Generator(_, GeneratorSubsts { ref substs }, _) => {\n+            Generator(_, ref substs, _) => {\n                 out.extend(substs.regions())\n             }\n             Projection(ref data) | UnnormalizedProjection(ref data) => {"}, {"sha": "7c5daaf14d784588df3dd6bf78ae0ed63aa615be", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -5,7 +5,7 @@ use crate::infer::canonical::Canonical;\n use crate::ty::{self, Lift, List, Ty, TyCtxt, InferConst, ParamConst};\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use crate::mir::interpret::ConstValue;\n-use crate::ty::sty::ClosureSubsts;\n+use crate::ty::sty::{ClosureSubsts, GeneratorSubsts};\n \n use rustc_serialize::{self, Encodable, Encoder, Decodable, Decoder};\n use syntax_pos::{Span, DUMMY_SP};\n@@ -194,6 +194,14 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n         }\n     }\n \n+    /// Interpret these substitutions as the substitutions of a generator type.\n+    /// Closure substitutions have a particular structure controlled by the\n+    /// compiler that encodes information like the signature and generator kind;\n+    /// see `ty::GeneratorSubsts` struct for more comments.\n+    pub fn as_generator(&'tcx self) -> GeneratorSubsts<'tcx> {\n+        GeneratorSubsts { substs: self }\n+    }\n+\n     /// Creates a `InternalSubsts` that maps each generic parameter to itself.\n     pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {\n         Self::for_item(tcx, def_id, |param, _| {"}, {"sha": "f5b1902e3cc8c5ab0085125d7c51f4c61351db96", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -110,12 +110,10 @@ fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n         ty::Adt(_, substs) | ty::Opaque(_, substs) => {\n             stack.extend(substs.types().rev());\n         }\n-        ty::Closure(_, ref substs) => {\n+        ty::Closure(_, ref substs)\n+        | ty::Generator(_, ref substs, _) => {\n             stack.extend(substs.types().rev());\n         }\n-        ty::Generator(_, ref substs, _) => {\n-            stack.extend(substs.substs.types().rev());\n-        }\n         ty::GeneratorWitness(ts) => {\n             stack.extend(ts.skip_binder().iter().cloned().rev());\n         }"}, {"sha": "f31765cea4f122f3f4069eac19b5c09793553adc", "filename": "src/librustc_codegen_llvm/allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_codegen_llvm%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fallocator.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -68,7 +68,7 @@ pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut ModuleLlvm, kind: Alloc\n \n         let llbb = llvm::LLVMAppendBasicBlockInContext(llcx,\n                                                        llfn,\n-                                                       \"entry\\0\".as_ptr() as *const _);\n+                                                       \"entry\\0\".as_ptr().cast());\n \n         let llbuilder = llvm::LLVMCreateBuilderInContext(llcx);\n         llvm::LLVMPositionBuilderAtEnd(llbuilder, llbb);\n@@ -80,7 +80,7 @@ pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut ModuleLlvm, kind: Alloc\n                                           args.as_ptr(),\n                                           args.len() as c_uint,\n                                           None,\n-                                          \"\\0\".as_ptr() as *const _);\n+                                          \"\\0\".as_ptr().cast());\n         llvm::LLVMSetTailCall(ret, True);\n         if output.is_some() {\n             llvm::LLVMBuildRet(llbuilder, ret);"}, {"sha": "e49c64923aa665067c25c903159812acb218e9e9", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -546,7 +546,7 @@ pub(crate) fn run_pass_manager(cgcx: &CodegenContext<LlvmCodegenBackend>,\n         llvm::LLVMRustAddAnalysisPasses(module.module_llvm.tm, pm, module.module_llvm.llmod());\n \n         if config.verify_llvm_ir {\n-            let pass = llvm::LLVMRustFindAndCreatePass(\"verify\\0\".as_ptr() as *const _);\n+            let pass = llvm::LLVMRustFindAndCreatePass(\"verify\\0\".as_ptr().cast());\n             llvm::LLVMRustAddPass(pm, pass.unwrap());\n         }\n \n@@ -581,12 +581,12 @@ pub(crate) fn run_pass_manager(cgcx: &CodegenContext<LlvmCodegenBackend>,\n         // We always generate bitcode through ThinLTOBuffers,\n         // which do not support anonymous globals\n         if config.bitcode_needed() {\n-            let pass = llvm::LLVMRustFindAndCreatePass(\"name-anon-globals\\0\".as_ptr() as *const _);\n+            let pass = llvm::LLVMRustFindAndCreatePass(\"name-anon-globals\\0\".as_ptr().cast());\n             llvm::LLVMRustAddPass(pm, pass.unwrap());\n         }\n \n         if config.verify_llvm_ir {\n-            let pass = llvm::LLVMRustFindAndCreatePass(\"verify\\0\".as_ptr() as *const _);\n+            let pass = llvm::LLVMRustFindAndCreatePass(\"verify\\0\".as_ptr().cast());\n             llvm::LLVMRustAddPass(pm, pass.unwrap());\n         }\n "}, {"sha": "b1a9552d56fba33ce9dfcc61d3744e2d351f6c18", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -221,8 +221,8 @@ impl<'a> DiagnosticHandlers<'a> {\n                llcx: &'a llvm::Context) -> Self {\n         let data = Box::into_raw(Box::new((cgcx, handler)));\n         unsafe {\n-            llvm::LLVMRustSetInlineAsmDiagnosticHandler(llcx, inline_asm_handler, data as *mut _);\n-            llvm::LLVMContextSetDiagnosticHandler(llcx, diagnostic_handler, data as *mut _);\n+            llvm::LLVMRustSetInlineAsmDiagnosticHandler(llcx, inline_asm_handler, data.cast());\n+            llvm::LLVMContextSetDiagnosticHandler(llcx, diagnostic_handler, data.cast());\n         }\n         DiagnosticHandlers { data, llcx }\n     }\n@@ -672,7 +672,7 @@ unsafe fn embed_bitcode(cgcx: &CodegenContext<LlvmCodegenBackend>,\n     let llglobal = llvm::LLVMAddGlobal(\n         llmod,\n         common::val_ty(llconst),\n-        \"rustc.embedded.module\\0\".as_ptr() as *const _,\n+        \"rustc.embedded.module\\0\".as_ptr().cast(),\n     );\n     llvm::LLVMSetInitializer(llglobal, llconst);\n \n@@ -684,23 +684,23 @@ unsafe fn embed_bitcode(cgcx: &CodegenContext<LlvmCodegenBackend>,\n     } else {\n         \".llvmbc\\0\"\n     };\n-    llvm::LLVMSetSection(llglobal, section.as_ptr() as *const _);\n+    llvm::LLVMSetSection(llglobal, section.as_ptr().cast());\n     llvm::LLVMRustSetLinkage(llglobal, llvm::Linkage::PrivateLinkage);\n     llvm::LLVMSetGlobalConstant(llglobal, llvm::True);\n \n     let llconst = common::bytes_in_context(llcx, &[]);\n     let llglobal = llvm::LLVMAddGlobal(\n         llmod,\n         common::val_ty(llconst),\n-        \"rustc.embedded.cmdline\\0\".as_ptr() as *const _,\n+        \"rustc.embedded.cmdline\\0\".as_ptr().cast(),\n     );\n     llvm::LLVMSetInitializer(llglobal, llconst);\n     let section = if  is_apple {\n         \"__LLVM,__cmdline\\0\"\n     } else {\n         \".llvmcmd\\0\"\n     };\n-    llvm::LLVMSetSection(llglobal, section.as_ptr() as *const _);\n+    llvm::LLVMSetSection(llglobal, section.as_ptr().cast());\n     llvm::LLVMRustSetLinkage(llglobal, llvm::Linkage::PrivateLinkage);\n }\n \n@@ -842,7 +842,7 @@ fn create_msvc_imps(\n         for (imp_name, val) in globals {\n             let imp = llvm::LLVMAddGlobal(llmod,\n                                           i8p_ty,\n-                                          imp_name.as_ptr() as *const _);\n+                                          imp_name.as_ptr().cast());\n             llvm::LLVMSetInitializer(imp, consts::ptrcast(val, i8p_ty));\n             llvm::LLVMRustSetLinkage(imp, llvm::Linkage::ExternalLinkage);\n         }"}, {"sha": "d4df5b4a804ef8345e06ba20a87b1fcd496f1f8c", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -488,7 +488,7 @@ impl StaticMethods for CodegenCx<'ll, 'tcx> {\n                 if let Some(section) = attrs.link_section {\n                     let section = llvm::LLVMMDStringInContext(\n                         self.llcx,\n-                        section.as_str().as_ptr() as *const _,\n+                        section.as_str().as_ptr().cast(),\n                         section.as_str().len() as c_uint,\n                     );\n                     assert!(alloc.relocations().is_empty());\n@@ -500,14 +500,14 @@ impl StaticMethods for CodegenCx<'ll, 'tcx> {\n                         0..alloc.len());\n                     let alloc = llvm::LLVMMDStringInContext(\n                         self.llcx,\n-                        bytes.as_ptr() as *const _,\n+                        bytes.as_ptr().cast(),\n                         bytes.len() as c_uint,\n                     );\n                     let data = [section, alloc];\n                     let meta = llvm::LLVMMDNodeInContext(self.llcx, data.as_ptr(), 2);\n                     llvm::LLVMAddNamedMetadataOperand(\n                         self.llmod,\n-                        \"wasm.custom_sections\\0\".as_ptr() as *const _,\n+                        \"wasm.custom_sections\\0\".as_ptr().cast(),\n                         meta,\n                     );\n                 }"}, {"sha": "18a5970fcd04432e2c45515d458de2194b8c8607", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -211,7 +211,7 @@ pub unsafe fn create_module(\n     // If skipping the PLT is enabled, we need to add some module metadata\n     // to ensure intrinsic calls don't use it.\n     if !sess.needs_plt() {\n-        let avoid_plt = \"RtLibUseGOT\\0\".as_ptr() as *const _;\n+        let avoid_plt = \"RtLibUseGOT\\0\".as_ptr().cast();\n         llvm::LLVMRustAddModuleFlag(llmod, avoid_plt, 1);\n     }\n "}, {"sha": "9ed1c1730a697b1a44307c5d72be2454adb8a0b7", "filename": "src/librustc_codegen_llvm/debuginfo/gdb.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -37,7 +37,7 @@ pub fn get_or_insert_gdb_debug_scripts_section_global(cx: &CodegenCx<'ll, '_>)\n \n     let section_var = unsafe {\n         llvm::LLVMGetNamedGlobal(cx.llmod,\n-                                 c_section_var_name.as_ptr() as *const _)\n+                                 c_section_var_name.as_ptr().cast())\n     };\n \n     section_var.unwrap_or_else(|| {\n@@ -52,7 +52,7 @@ pub fn get_or_insert_gdb_debug_scripts_section_global(cx: &CodegenCx<'ll, '_>)\n                                                      llvm_type).unwrap_or_else(||{\n                 bug!(\"symbol `{}` is already defined\", section_var_name)\n             });\n-            llvm::LLVMSetSection(section_var, section_name.as_ptr() as *const _);\n+            llvm::LLVMSetSection(section_var, section_name.as_ptr().cast());\n             llvm::LLVMSetInitializer(section_var, cx.const_bytes(section_contents));\n             llvm::LLVMSetGlobalConstant(section_var, llvm::True);\n             llvm::LLVMSetUnnamedAddr(section_var, llvm::True);"}, {"sha": "438a660b8a8673b5895737f732373da26868cbf3", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -30,7 +30,7 @@ use rustc::ty::Instance;\n use rustc::ty::{self, AdtKind, ParamEnv, Ty, TyCtxt};\n use rustc::ty::layout::{self, Align, Integer, IntegerExt, LayoutOf,\n                         PrimitiveExt, Size, TyLayout, VariantIdx};\n-use rustc::ty::subst::GenericArgKind;\n+use rustc::ty::subst::{GenericArgKind, SubstsRef};\n use rustc::session::config::{self, DebugInfo};\n use rustc::util::nodemap::FxHashMap;\n use rustc_fs_util::path_to_c_string;\n@@ -692,9 +692,10 @@ pub fn type_metadata(\n                                    Some(containing_scope)).finalize(cx)\n         }\n         ty::Generator(def_id, substs,  _) => {\n-            let upvar_tys : Vec<_> = substs.prefix_tys(def_id, cx.tcx).map(|t| {\n-                cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), t)\n-            }).collect();\n+            let upvar_tys : Vec<_> = substs\n+                .as_generator().prefix_tys(def_id, cx.tcx).map(|t| {\n+                    cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), t)\n+                }).collect();\n             prepare_enum_metadata(cx,\n                                   t,\n                                   def_id,\n@@ -960,9 +961,9 @@ pub fn compile_unit_metadata(\n             file_metadata,\n             producer.as_ptr(),\n             tcx.sess.opts.optimize != config::OptLevel::No,\n-            flags.as_ptr() as *const _,\n+            flags.as_ptr().cast(),\n             0,\n-            split_name.as_ptr() as *const _,\n+            split_name.as_ptr().cast(),\n             kind);\n \n         if tcx.sess.opts.debugging_opts.profile {\n@@ -991,7 +992,7 @@ pub fn compile_unit_metadata(\n         if tcx.sess.opts.target_triple.triple().starts_with(\"wasm32\") {\n             let name_metadata = llvm::LLVMMDStringInContext(\n                 debug_context.llcontext,\n-                rustc_producer.as_ptr() as *const _,\n+                rustc_producer.as_ptr().cast(),\n                 rustc_producer.as_bytes().len() as c_uint,\n             );\n             llvm::LLVMAddNamedMetadataOperand(\n@@ -1338,7 +1339,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                 ty::Adt(adt, _) => VariantInfo::Adt(&adt.variants[index]),\n                 ty::Generator(def_id, substs, _) => {\n                     let generator_layout = cx.tcx.generator_layout(*def_id);\n-                    VariantInfo::Generator(*substs, generator_layout, index)\n+                    VariantInfo::Generator(substs, generator_layout, index)\n                 }\n                 _ => bug!(),\n             }\n@@ -1611,15 +1612,15 @@ enum EnumDiscriminantInfo<'ll> {\n #[derive(Copy, Clone)]\n enum VariantInfo<'tcx> {\n     Adt(&'tcx ty::VariantDef),\n-    Generator(ty::GeneratorSubsts<'tcx>, &'tcx GeneratorLayout<'tcx>, VariantIdx),\n+    Generator(SubstsRef<'tcx>, &'tcx GeneratorLayout<'tcx>, VariantIdx),\n }\n \n impl<'tcx> VariantInfo<'tcx> {\n     fn map_struct_name<R>(&self, f: impl FnOnce(&str) -> R) -> R {\n         match self {\n             VariantInfo::Adt(variant) => f(&variant.ident.as_str()),\n             VariantInfo::Generator(substs, _, variant_index) =>\n-                f(&substs.variant_name(*variant_index)),\n+                f(&substs.as_generator().variant_name(*variant_index)),\n         }\n     }\n \n@@ -1763,9 +1764,10 @@ fn prepare_enum_metadata(\n                 })\n                 .collect(),\n             ty::Generator(_, substs, _) => substs\n+                .as_generator()\n                 .variant_range(enum_def_id, cx.tcx)\n                 .map(|variant_index| {\n-                    let name = SmallCStr::new(&substs.variant_name(variant_index));\n+                    let name = SmallCStr::new(&substs.as_generator().variant_name(variant_index));\n                     unsafe {\n                         Some(llvm::LLVMRustDIBuilderCreateEnumerator(\n                             DIB(cx),"}, {"sha": "6e4ed42c45e9792ad2e019c8a0d50457310b34b2", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -127,20 +127,20 @@ pub fn finalize(cx: &CodegenCx<'_, '_>) {\n         if cx.sess().target.target.options.is_like_osx ||\n            cx.sess().target.target.options.is_like_android {\n             llvm::LLVMRustAddModuleFlag(cx.llmod,\n-                                        \"Dwarf Version\\0\".as_ptr() as *const _,\n+                                        \"Dwarf Version\\0\".as_ptr().cast(),\n                                         2)\n         }\n \n         // Indicate that we want CodeView debug information on MSVC\n         if cx.sess().target.target.options.is_like_msvc {\n             llvm::LLVMRustAddModuleFlag(cx.llmod,\n-                                        \"CodeView\\0\".as_ptr() as *const _,\n+                                        \"CodeView\\0\".as_ptr().cast(),\n                                         1)\n         }\n \n         // Prevent bitcode readers from deleting the debug info.\n         let ptr = \"Debug Info Version\\0\".as_ptr();\n-        llvm::LLVMRustAddModuleFlag(cx.llmod, ptr as *const _,\n+        llvm::LLVMRustAddModuleFlag(cx.llmod, ptr.cast(),\n                                     llvm::LLVMRustDebugMetadataVersion());\n     };\n }"}, {"sha": "541d3d98b79bda83cbc591d2273b8f48a32b6a81", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -257,7 +257,8 @@ pub fn target_feature_whitelist(sess: &Session)\n         \"hexagon\" => HEXAGON_WHITELIST,\n         \"mips\" | \"mips64\" => MIPS_WHITELIST,\n         \"powerpc\" | \"powerpc64\" => POWERPC_WHITELIST,\n-        \"wasm32\" => WASM_WHITELIST,\n+        // wasm32 on emscripten does not support these target features\n+        \"wasm32\" if !sess.target.target.options.is_like_emscripten => WASM_WHITELIST,\n         _ => &[],\n     }\n }"}, {"sha": "d921bbc96adeebeedcab5dfbeab0530ede3ee620", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -65,7 +65,7 @@ fn uncached_llvm_type<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n             if let (&ty::Generator(_, substs, _), &layout::Variants::Single { index })\n                  = (&layout.ty.kind, &layout.variants)\n             {\n-                write!(&mut name, \"::{}\", substs.variant_name(index)).unwrap();\n+                write!(&mut name, \"::{}\", substs.as_generator().variant_name(index)).unwrap();\n             }\n             Some(name)\n         }"}, {"sha": "f1cfac270332223d80d3a766bd22889208a934f2", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -142,12 +142,15 @@ impl ModuleConfig {\n         // Copy what clang does by turning on loop vectorization at O2 and\n         // slp vectorization at O3. Otherwise configure other optimization aspects\n         // of this pass manager builder.\n+        // Turn off vectorization for emscripten, as it's not very well supported.\n         self.vectorize_loop = !sess.opts.cg.no_vectorize_loops &&\n                              (sess.opts.optimize == config::OptLevel::Default ||\n-                              sess.opts.optimize == config::OptLevel::Aggressive);\n+                              sess.opts.optimize == config::OptLevel::Aggressive) &&\n+                             !sess.target.target.options.is_like_emscripten;\n \n         self.vectorize_slp = !sess.opts.cg.no_vectorize_slp &&\n-                            sess.opts.optimize == config::OptLevel::Aggressive;\n+                            sess.opts.optimize == config::OptLevel::Aggressive &&\n+                            !sess.target.target.options.is_like_emscripten;\n \n         // Some targets (namely, NVPTX) interact badly with the MergeFunctions\n         // pass. This is because MergeFunctions can generate new function calls"}, {"sha": "9d2f8b42c704f0d193d82e6e23c788498ac24056", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -636,7 +636,7 @@ fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n                         ty::Generator(def_id, substs, _) => (def_id, substs),\n                         _ => bug!(\"generator layout without generator substs\"),\n                     };\n-                    let state_tys = gen_substs.state_tys(def_id, tcx);\n+                    let state_tys = gen_substs.as_generator().state_tys(def_id, tcx);\n \n                     generator_layout.variant_fields.iter()\n                         .zip(state_tys)"}, {"sha": "cf575c54293c76ab690f86c98783088b5c42e189", "filename": "src/librustc_codegen_utils/symbol_names/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -225,7 +225,7 @@ impl Printer<'tcx> for SymbolPrinter<'tcx> {\n             ty::Projection(ty::ProjectionTy { item_def_id: def_id, substs }) |\n             ty::UnnormalizedProjection(ty::ProjectionTy { item_def_id: def_id, substs }) |\n             ty::Closure(def_id, substs) |\n-            ty::Generator(def_id, ty::GeneratorSubsts { substs }, _) => {\n+            ty::Generator(def_id, substs, _) => {\n                 self.print_def_path(def_id, substs)\n             }\n             _ => self.pretty_print_type(ty),"}, {"sha": "55b148fceb2177393101b9524258e9d8da68b64c", "filename": "src/librustc_codegen_utils/symbol_names/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -415,7 +415,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n             ty::Projection(ty::ProjectionTy { item_def_id: def_id, substs }) |\n             ty::UnnormalizedProjection(ty::ProjectionTy { item_def_id: def_id, substs }) |\n             ty::Closure(def_id, substs) |\n-            ty::Generator(def_id, ty::GeneratorSubsts { substs }, _) => {\n+            ty::Generator(def_id, substs, _) => {\n                 self = self.print_def_path(def_id, substs)?;\n             }\n             ty::Foreign(def_id) => {"}, {"sha": "fd74d8673da4dbc482430bd764caccf5d61a0dd6", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 68, "deletions": 37, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -298,9 +298,31 @@ impl Diagnostic {\n     /// * may contain a name of a function, variable, or type, but not whole expressions\n     ///\n     /// See `CodeSuggestion` for more information.\n-    pub fn span_suggestion(&mut self, sp: Span, msg: &str,\n-                                       suggestion: String,\n-                                       applicability: Applicability) -> &mut Self {\n+    pub fn span_suggestion(\n+        &mut self,\n+        sp: Span,\n+        msg: &str,\n+        suggestion: String,\n+        applicability: Applicability,\n+    ) -> &mut Self {\n+        self.span_suggestion_with_style(\n+            sp,\n+            msg,\n+            suggestion,\n+            applicability,\n+            SuggestionStyle::ShowCode,\n+        );\n+        self\n+    }\n+\n+    pub fn span_suggestion_with_style(\n+        &mut self,\n+        sp: Span,\n+        msg: &str,\n+        suggestion: String,\n+        applicability: Applicability,\n+        style: SuggestionStyle,\n+    ) -> &mut Self {\n         self.suggestions.push(CodeSuggestion {\n             substitutions: vec![Substitution {\n                 parts: vec![SubstitutionPart {\n@@ -309,16 +331,37 @@ impl Diagnostic {\n                 }],\n             }],\n             msg: msg.to_owned(),\n-            style: SuggestionStyle::ShowCode,\n+            style,\n             applicability,\n         });\n         self\n     }\n \n+    pub fn span_suggestion_verbose(\n+        &mut self,\n+        sp: Span,\n+        msg: &str,\n+        suggestion: String,\n+        applicability: Applicability,\n+    ) -> &mut Self {\n+        self.span_suggestion_with_style(\n+            sp,\n+            msg,\n+            suggestion,\n+            applicability,\n+            SuggestionStyle::ShowAlways,\n+        );\n+        self\n+    }\n+\n     /// Prints out a message with multiple suggested edits of the code.\n-    pub fn span_suggestions(&mut self, sp: Span, msg: &str,\n-        suggestions: impl Iterator<Item = String>, applicability: Applicability) -> &mut Self\n-    {\n+    pub fn span_suggestions(\n+        &mut self,\n+        sp: Span,\n+        msg: &str,\n+        suggestions: impl Iterator<Item = String>,\n+        applicability: Applicability,\n+    ) -> &mut Self {\n         self.suggestions.push(CodeSuggestion {\n             substitutions: suggestions.map(|snippet| Substitution {\n                 parts: vec![SubstitutionPart {\n@@ -340,17 +383,13 @@ impl Diagnostic {\n     pub fn span_suggestion_short(\n         &mut self, sp: Span, msg: &str, suggestion: String, applicability: Applicability\n     ) -> &mut Self {\n-        self.suggestions.push(CodeSuggestion {\n-            substitutions: vec![Substitution {\n-                parts: vec![SubstitutionPart {\n-                    snippet: suggestion,\n-                    span: sp,\n-                }],\n-            }],\n-            msg: msg.to_owned(),\n-            style: SuggestionStyle::HideCodeInline,\n+        self.span_suggestion_with_style(\n+            sp,\n+            msg,\n+            suggestion,\n             applicability,\n-        });\n+            SuggestionStyle::HideCodeInline,\n+        );\n         self\n     }\n \n@@ -363,17 +402,13 @@ impl Diagnostic {\n     pub fn span_suggestion_hidden(\n         &mut self, sp: Span, msg: &str, suggestion: String, applicability: Applicability\n     ) -> &mut Self {\n-        self.suggestions.push(CodeSuggestion {\n-            substitutions: vec![Substitution {\n-                parts: vec![SubstitutionPart {\n-                    snippet: suggestion,\n-                    span: sp,\n-                }],\n-            }],\n-            msg: msg.to_owned(),\n-            style: SuggestionStyle::HideCodeAlways,\n+        self.span_suggestion_with_style(\n+            sp,\n+            msg,\n+            suggestion,\n             applicability,\n-        });\n+            SuggestionStyle::HideCodeAlways,\n+        );\n         self\n     }\n \n@@ -384,17 +419,13 @@ impl Diagnostic {\n     pub fn tool_only_span_suggestion(\n         &mut self, sp: Span, msg: &str, suggestion: String, applicability: Applicability\n     ) -> &mut Self {\n-        self.suggestions.push(CodeSuggestion {\n-            substitutions: vec![Substitution {\n-                parts: vec![SubstitutionPart {\n-                    snippet: suggestion,\n-                    span: sp,\n-                }],\n-            }],\n-            msg: msg.to_owned(),\n-            style: SuggestionStyle::CompletelyHidden,\n+        self.span_suggestion_with_style(\n+            sp,\n+            msg,\n+            suggestion,\n             applicability,\n-        });\n+            SuggestionStyle::CompletelyHidden,\n+        );\n         self\n     }\n "}, {"sha": "68f933363daa1e85a87b6ca68cbdddea1bb7a1bf", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -218,10 +218,14 @@ pub trait Emitter {\n                sugg.msg.split_whitespace().count() < 10 &&\n                // don't display multiline suggestions as labels\n                !sugg.substitutions[0].parts[0].snippet.contains('\\n') &&\n-               // when this style is set we want the suggestion to be a message, not inline\n-               sugg.style != SuggestionStyle::HideCodeAlways &&\n-               // trivial suggestion for tooling's sake, never shown\n-               sugg.style != SuggestionStyle::CompletelyHidden\n+               ![\n+                    // when this style is set we want the suggestion to be a message, not inline\n+                    SuggestionStyle::HideCodeAlways,\n+                    // trivial suggestion for tooling's sake, never shown\n+                    SuggestionStyle::CompletelyHidden,\n+                    // subtle suggestion, never shown inline\n+                    SuggestionStyle::ShowAlways,\n+               ].contains(&sugg.style)\n             {\n                 let substitution = &sugg.substitutions[0].parts[0].snippet.trim();\n                 let msg = if substitution.len() == 0 || sugg.style.hide_inline() {"}, {"sha": "2fae584c153621a8eb891575b8a13295419d07ab", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -81,6 +81,8 @@ pub enum SuggestionStyle {\n     /// This will *not* show the code if the suggestion is inline *and* the suggested code is\n     /// empty.\n     ShowCode,\n+    /// Always show the suggested code independently.\n+    ShowAlways,\n }\n \n impl SuggestionStyle {"}, {"sha": "870f804ed4478e62d32584fcc0c2717d6e3b8e9f", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -780,13 +780,10 @@ pub fn default_provide(providers: &mut ty::query::Providers<'_>) {\n     ty::provide(providers);\n     traits::provide(providers);\n     stability::provide(providers);\n-    middle::intrinsicck::provide(providers);\n-    middle::liveness::provide(providers);\n     reachable::provide(providers);\n     rustc_passes::provide(providers);\n     rustc_traits::provide(providers);\n     middle::region::provide(providers);\n-    middle::entry::provide(providers);\n     cstore::provide(providers);\n     lint::provide(providers);\n     rustc_lint::provide(providers);\n@@ -892,7 +889,7 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n     time(sess, \"misc checking 1\", || {\n         parallel!({\n             entry_point = time(sess, \"looking for entry point\", || {\n-                middle::entry::find_entry_point(tcx)\n+                rustc_passes::entry::find_entry_point(tcx)\n             });\n \n             time(sess, \"looking for plugin registrar\", || {\n@@ -973,7 +970,7 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n                     tcx.ensure().check_private_in_public(LOCAL_CRATE);\n                 });\n             }, {\n-                time(sess, \"death checking\", || middle::dead::check_crate(tcx));\n+                time(sess, \"death checking\", || rustc_passes::dead::check_crate(tcx));\n             },  {\n                 time(sess, \"unused lib feature checking\", || {\n                     stability::check_unused_or_stable_features(tcx)"}, {"sha": "aa6dfa50dddf3030267ec8325078545196ae0296", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -631,6 +631,16 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                             };\n                         }\n \n+                        let is_non_exhaustive =\n+                            def.non_enum_variant().is_field_list_non_exhaustive();\n+                        if is_non_exhaustive && !def.did.is_local() {\n+                            return FfiUnsafe {\n+                                ty,\n+                                reason: \"this struct is non-exhaustive\",\n+                                help: None,\n+                            };\n+                        }\n+\n                         if def.non_enum_variant().fields.is_empty() {\n                             return FfiUnsafe {\n                                 ty,\n@@ -730,8 +740,25 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                             }\n                         }\n \n+                        if def.is_variant_list_non_exhaustive() && !def.did.is_local() {\n+                            return FfiUnsafe {\n+                                ty,\n+                                reason: \"this enum is non-exhaustive\",\n+                                help: None,\n+                            };\n+                        }\n+\n                         // Check the contained variants.\n                         for variant in &def.variants {\n+                            let is_non_exhaustive = variant.is_field_list_non_exhaustive();\n+                            if is_non_exhaustive && !variant.def_id.is_local() {\n+                                return FfiUnsafe {\n+                                    ty,\n+                                    reason: \"this enum has non-exhaustive variants\",\n+                                    help: None,\n+                                };\n+                            }\n+\n                             for field in &variant.fields {\n                                 let field_ty = cx.normalize_erasing_regions(\n                                     ParamEnv::reveal_all(),"}, {"sha": "eed355cbc13588c6e70d15f91e25ffc7da6de3e7", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -919,7 +919,7 @@ impl<'a, 'tcx> CrateMetadata {\n         self.entry_unless_proc_macro(id)\n             .and_then(|entry| entry.mir.map(|mir| mir.decode((self, tcx))))\n             .unwrap_or_else(|| {\n-                bug!(\"get_optimized_mir: missing MIR for `{:?}\", self.local_def_id(id))\n+                bug!(\"get_optimized_mir: missing MIR for `{:?}`\", self.local_def_id(id))\n             })\n     }\n "}, {"sha": "75d4b56fdb7c20480890b3e62c44380ef7ac0651", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1944,14 +1944,16 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     self.is_mutable(place.as_ref(), is_local_mutation_allowed),\n                     self.errors_buffer.is_empty()\n                 ) {\n-                    // rust-lang/rust#46908: In pure NLL mode this code path should\n-                    // be unreachable (and thus we signal an ICE in the else branch here).\n-                    span_bug!(\n-                        span,\n+                    // rust-lang/rust#46908: In pure NLL mode this code path should be\n+                    // unreachable, but we use `delay_span_bug` because we can hit this when\n+                    // dereferencing a non-Copy raw pointer *and* have `-Ztreat-err-as-bug`\n+                    // enabled. We don't want to ICE for that case, as other errors will have\n+                    // been emitted (#52262).\n+                    self.infcx.tcx.sess.delay_span_bug(span, &format!(\n                         \"Accessing `{:?}` with the kind `{:?}` shouldn't be possible\",\n                         place,\n                         kind,\n-                    );\n+                    ));\n                 }\n                 return false;\n             }"}, {"sha": "b105664399a5cbb6bd1ef6ea36adc1048f73388e", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -12,7 +12,7 @@ use rustc::mir::{\n     SourceInfo, Statement, StatementKind, Terminator, TerminatorKind, UserTypeProjection,\n };\n use rustc::ty::fold::TypeFoldable;\n-use rustc::ty::{self, GeneratorSubsts, RegionVid, Ty};\n+use rustc::ty::{self, RegionVid, Ty};\n use rustc::ty::subst::SubstsRef;\n \n pub(super) fn generate_constraints<'cx, 'tcx>(\n@@ -91,13 +91,6 @@ impl<'cg, 'cx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'tcx> {\n         self.super_ty(ty);\n     }\n \n-    /// We sometimes have `generator_substs` within an rvalue, or within a\n-    /// call. Make them live at the location where they appear.\n-    fn visit_generator_substs(&mut self, substs: &GeneratorSubsts<'tcx>, location: Location) {\n-        self.add_regular_live_constraint(*substs, location);\n-        self.super_generator_substs(substs);\n-    }\n-\n     fn visit_statement(\n         &mut self,\n         statement: &Statement<'tcx>,"}, {"sha": "88ad1fb1295094a97f35d6f6d97bf4066f0930ef", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,5 +1,5 @@\n use rustc::ty::subst::SubstsRef;\n-use rustc::ty::{self, GeneratorSubsts, Ty, TypeFoldable};\n+use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::mir::{Location, Body, Promoted};\n use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n@@ -82,18 +82,4 @@ impl<'a, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'tcx> {\n     fn visit_const(&mut self, constant: &mut &'tcx ty::Const<'tcx>, _location: Location) {\n         *constant = self.renumber_regions(&*constant);\n     }\n-\n-    fn visit_generator_substs(&mut self,\n-                              substs: &mut GeneratorSubsts<'tcx>,\n-                              location: Location) {\n-        debug!(\n-            \"visit_generator_substs(substs={:?}, location={:?})\",\n-            substs,\n-            location,\n-        );\n-\n-        *substs = self.renumber_regions(substs);\n-\n-        debug!(\"visit_generator_substs: substs={:?}\", substs);\n-    }\n }"}, {"sha": "1563a27250eb9e391d148d4a50646eeb2b5ecf8a", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -759,13 +759,13 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n             PlaceTy { ty, variant_index: Some(variant_index) } => match ty.kind {\n                 ty::Adt(adt_def, substs) => (&adt_def.variants[variant_index], substs),\n                 ty::Generator(def_id, substs, _) => {\n-                    let mut variants = substs.state_tys(def_id, tcx);\n+                    let mut variants = substs.as_generator().state_tys(def_id, tcx);\n                     let mut variant = match variants.nth(variant_index.into()) {\n                         Some(v) => v,\n                         None => {\n                             bug!(\"variant_index of generator out of range: {:?}/{:?}\",\n                                  variant_index,\n-                                 substs.state_tys(def_id, tcx).count())\n+                                 substs.as_generator().state_tys(def_id, tcx).count())\n                         }\n                     };\n                     return match variant.nth(field.index()) {\n@@ -791,10 +791,10 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n                 ty::Generator(def_id, substs, _) => {\n                     // Only prefix fields (upvars and current state) are\n                     // accessible without a variant index.\n-                    return match substs.prefix_tys(def_id, tcx).nth(field.index()) {\n+                    return match substs.as_generator().prefix_tys(def_id, tcx).nth(field.index()) {\n                         Some(ty) => Ok(ty),\n                         None => Err(FieldAccessError::OutOfRange {\n-                            field_count: substs.prefix_tys(def_id, tcx).count(),\n+                            field_count: substs.as_generator().prefix_tys(def_id, tcx).count(),\n                         }),\n                     }\n                 }\n@@ -1963,10 +1963,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 // It doesn't make sense to look at a field beyond the prefix;\n                 // these require a variant index, and are not initialized in\n                 // aggregate rvalues.\n-                match substs.prefix_tys(def_id, tcx).nth(field_index) {\n+                match substs.as_generator().prefix_tys(def_id, tcx).nth(field_index) {\n                     Some(ty) => Ok(ty),\n                     None => Err(FieldAccessError::OutOfRange {\n-                        field_count: substs.prefix_tys(def_id, tcx).count(),\n+                        field_count: substs.as_generator().prefix_tys(def_id, tcx).count(),\n                     }),\n                 }\n             }\n@@ -2541,7 +2541,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             // these extra requirements are basically like where\n             // clauses on the struct.\n             AggregateKind::Closure(def_id, substs)\n-            | AggregateKind::Generator(def_id, ty::GeneratorSubsts { substs }, _) => {\n+            | AggregateKind::Generator(def_id, substs, _) => {\n                 self.prove_closure_bounds(tcx, *def_id, substs, location)\n             }\n "}, {"sha": "5f6951856434e8021bbf7866ec51356fb452ea73", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -19,7 +19,7 @@ use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n use rustc::middle::lang_items;\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::{InternalSubsts, SubstsRef, Subst};\n-use rustc::ty::{self, GeneratorSubsts, RegionVid, Ty, TyCtxt};\n+use rustc::ty::{self, RegionVid, Ty, TyCtxt};\n use rustc::util::nodemap::FxHashMap;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_errors::DiagnosticBuilder;\n@@ -90,7 +90,7 @@ pub enum DefiningTy<'tcx> {\n     /// The MIR is a generator. The signature is that generators take\n     /// no parameters and return the result of\n     /// `ClosureSubsts::generator_return_ty`.\n-    Generator(DefId, ty::GeneratorSubsts<'tcx>, hir::GeneratorMovability),\n+    Generator(DefId, SubstsRef<'tcx>, hir::GeneratorMovability),\n \n     /// The MIR is a fn item with the given `DefId` and substs. The signature\n     /// of the function can be bound then with the `fn_sig` query.\n@@ -113,7 +113,7 @@ impl<'tcx> DefiningTy<'tcx> {\n                 substs.as_closure().upvar_tys(def_id, tcx)\n             ),\n             DefiningTy::Generator(def_id, substs, _) => {\n-                Either::Right(Either::Left(substs.upvar_tys(def_id, tcx)))\n+                Either::Right(Either::Left(substs.as_generator().upvar_tys(def_id, tcx)))\n             }\n             DefiningTy::FnDef(..) | DefiningTy::Const(..) => {\n                 Either::Right(Either::Right(iter::empty()))\n@@ -334,7 +334,7 @@ impl<'tcx> UniversalRegions<'tcx> {\n                 err.note(&format!(\n                     \"defining type: {:?} with generator substs {:#?}\",\n                     def_id,\n-                    &substs.substs[..]\n+                    &substs[..]\n                 ));\n \n                 // FIXME: As above, we'd like to print out the region\n@@ -470,7 +470,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n \n         let yield_ty = match defining_ty {\n             DefiningTy::Generator(def_id, substs, _) => {\n-                Some(substs.yield_ty(def_id, self.infcx.tcx))\n+                Some(substs.as_generator().yield_ty(def_id, self.infcx.tcx))\n             }\n             _ => None,\n         };\n@@ -549,7 +549,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         let identity_substs = InternalSubsts::identity_for_item(tcx, closure_base_def_id);\n         let fr_substs = match defining_ty {\n             DefiningTy::Closure(_, ref substs)\n-            | DefiningTy::Generator(_, GeneratorSubsts { ref substs }, _) => {\n+            | DefiningTy::Generator(_, ref substs, _) => {\n                 // In the case of closures, we rely on the fact that\n                 // the first N elements in the ClosureSubsts are\n                 // inherited from the `closure_base_def_id`.\n@@ -612,7 +612,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n \n             DefiningTy::Generator(def_id, substs, movability) => {\n                 assert_eq!(self.mir_def_id, def_id);\n-                let output = substs.return_ty(def_id, tcx);\n+                let output = substs.as_generator().return_ty(def_id, tcx);\n                 let generator_ty = tcx.mk_generator(def_id, substs, movability);\n                 let inputs_and_output = self.infcx.tcx.intern_type_list(&[generator_ty, output]);\n                 ty::Binder::dummy(inputs_and_output)"}, {"sha": "6b6eac5add2fa04f3bcae1368e24853a2891c00c", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -146,7 +146,7 @@ pub fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> Body<'_> {\n             let (yield_ty, return_ty) = if body.generator_kind.is_some() {\n                 let gen_sig = match ty.kind {\n                     ty::Generator(gen_def_id, gen_substs, ..) =>\n-                        gen_substs.sig(gen_def_id, tcx),\n+                        gen_substs.as_generator().sig(gen_def_id, tcx),\n                     _ =>\n                         span_bug!(tcx.hir().span(id),\n                                   \"generator w/o generator type: {:?}\", ty),"}, {"sha": "f9200f8c1c04239c87ba03610dee0027ff50f31f", "filename": "src/librustc_mir/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -68,8 +68,7 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n             | ty::Projection(ty::ProjectionTy { item_def_id: def_id, substs })\n             | ty::UnnormalizedProjection(ty::ProjectionTy { item_def_id: def_id, substs })\n             | ty::Closure(def_id, substs)\n-            | ty::Generator(def_id, ty::GeneratorSubsts { substs }, _)\n-            => self.print_def_path(def_id, substs),\n+            | ty::Generator(def_id, substs, _) => self.print_def_path(def_id, substs),\n             ty::Foreign(def_id) => self.print_def_path(def_id, &[]),\n \n             ty::GeneratorWitness(_) => {"}, {"sha": "4bdd71f9602ac2b25c336960eda4c49568ed049f", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -664,14 +664,18 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     bits_discr\n                 };\n                 // Make sure we catch invalid discriminants\n-                let index = match &rval.layout.ty.kind {\n+                let index = match rval.layout.ty.kind {\n                     ty::Adt(adt, _) => adt\n                         .discriminants(self.tcx.tcx)\n                         .find(|(_, var)| var.val == real_discr),\n-                    ty::Generator(def_id, substs, _) => substs\n-                        .discriminants(*def_id, self.tcx.tcx)\n-                        .find(|(_, var)| var.val == real_discr),\n+                    ty::Generator(def_id, substs, _) => {\n+                        let substs = substs.as_generator();\n+                        substs\n+                            .discriminants(def_id, self.tcx.tcx)\n+                            .find(|(_, var)| var.val == real_discr)\n+                    }\n                     _ => bug!(\"tagged layout for non-adt non-generator\"),\n+\n                 }.ok_or_else(\n                     || err_unsup!(InvalidDiscriminant(raw_discr.erase_tag()))\n                 )?;"}, {"sha": "3ba989529f18f1263b943da1e2f6d310d4c7d4a5", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -594,6 +594,13 @@ where\n             StaticKind::Promoted(promoted, promoted_substs) => {\n                 let substs = self.subst_from_frame_and_normalize_erasing_regions(promoted_substs);\n                 let instance = ty::Instance::new(place_static.def_id, substs);\n+\n+                // Even after getting `substs` from the frame, this instance may still be\n+                // polymorphic because `ConstProp` will try to promote polymorphic MIR.\n+                if instance.needs_subst() {\n+                    throw_inval!(TooGeneric);\n+                }\n+\n                 self.const_eval_raw(GlobalId {\n                     instance,\n                     promoted: Some(promoted),"}, {"sha": "78008e2fcd361c69004d9c619b425a30ff999f14", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -169,7 +169,7 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n     // Check if this is a generator, if so, return the drop glue for it\n     if let Some(&ty::TyS { kind: ty::Generator(gen_def_id, substs, _), .. }) = ty {\n         let body = &**tcx.optimized_mir(gen_def_id).generator_drop.as_ref().unwrap();\n-        return body.subst(tcx, substs.substs);\n+        return body.subst(tcx, substs);\n     }\n \n     let substs = if let Some(ty) = ty {"}, {"sha": "38a04ce8f38158f68bdeaca16caca4e9b08f2304", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -39,12 +39,6 @@ impl MutVisitor<'tcx> for EraseRegionsVisitor<'tcx> {\n     fn visit_substs(&mut self, substs: &mut SubstsRef<'tcx>, _: Location) {\n         *substs = self.tcx.erase_regions(substs);\n     }\n-\n-    fn visit_statement(&mut self,\n-                       statement: &mut Statement<'tcx>,\n-                       location: Location) {\n-        self.super_statement(statement, location);\n-    }\n }\n \n pub struct EraseRegions;"}, {"sha": "a648fadde43bec5c43ebd83746a715cf83bcd513", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1126,6 +1126,7 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n         // Get the interior types and substs which typeck computed\n         let (upvars, interior, discr_ty, movable) = match gen_ty.kind {\n             ty::Generator(_, substs, movability) => {\n+                let substs = substs.as_generator();\n                 (substs.upvar_tys(def_id, tcx).collect(),\n                  substs.witness(def_id, tcx),\n                  substs.discr_ty(tcx),"}, {"sha": "f7ba6f1ec6993994d8595ab43d4d44721db210f8", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -798,7 +798,7 @@ where\n             // It effetively only contains upvars until the generator transformation runs.\n             // See librustc_body/transform/generator.rs for more details.\n             ty::Generator(def_id, substs, _) => {\n-                let tys : Vec<_> = substs.upvar_tys(def_id, self.tcx()).collect();\n+                let tys : Vec<_> = substs.as_generator().upvar_tys(def_id, self.tcx()).collect();\n                 self.open_drop_for_tuple(&tys)\n             }\n             ty::Tuple(..) => {"}, {"sha": "9d29a230314437f8e6b887d91c901551ebffdd78", "filename": "src/librustc_passes/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2FCargo.toml?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -15,3 +15,5 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n+rustc_target = { path = \"../librustc_target\" }\n+rustc_index = { path = \"../librustc_index\" }"}, {"sha": "f2aef2c12c7df1b4d3cfffb223247ea3d83265b4", "filename": "src/librustc_passes/dead.rs", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -2,18 +2,18 @@\n // closely. The idea is that all reachable symbols are live, codes called\n // from live codes are live, and everything else is dead.\n \n-use crate::hir::Node;\n-use crate::hir::{self, PatKind, TyKind};\n-use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n-use crate::hir::itemlikevisit::ItemLikeVisitor;\n-\n-use crate::hir::def::{CtorOf, Res, DefKind};\n-use crate::hir::CodegenFnAttrFlags;\n-use crate::hir::def_id::{DefId, LOCAL_CRATE};\n-use crate::lint;\n-use crate::middle::privacy;\n-use crate::ty::{self, DefIdTree, TyCtxt};\n-use crate::util::nodemap::FxHashSet;\n+use rustc::hir::Node;\n+use rustc::hir::{self, PatKind, TyKind};\n+use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n+\n+use rustc::hir::def::{CtorOf, Res, DefKind};\n+use rustc::hir::CodegenFnAttrFlags;\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::lint;\n+use rustc::middle::privacy;\n+use rustc::ty::{self, DefIdTree, TyCtxt};\n+use rustc::util::nodemap::FxHashSet;\n \n use rustc_data_structures::fx::FxHashMap;\n ", "previous_filename": "src/librustc/middle/dead.rs"}, {"sha": "bf68807a0c29b1ffd24069fad760e9163edb8b3f", "filename": "src/librustc_passes/entry.rs", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,15 +1,15 @@\n-use crate::hir::map as hir_map;\n-use crate::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n-use crate::session::{config, Session};\n-use crate::session::config::EntryFnType;\n+use rustc::hir::map as hir_map;\n+use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n+use rustc::session::{config, Session};\n+use rustc::session::config::EntryFnType;\n use syntax::attr;\n use syntax::entry::EntryPointType;\n use syntax::symbol::sym;\n use syntax_pos::Span;\n-use crate::hir::{HirId, Item, ItemKind, ImplItem, TraitItem};\n-use crate::hir::itemlikevisit::ItemLikeVisitor;\n-use crate::ty::TyCtxt;\n-use crate::ty::query::Providers;\n+use rustc::hir::{HirId, Item, ItemKind, ImplItem, TraitItem};\n+use rustc::hir::itemlikevisit::ItemLikeVisitor;\n+use rustc::ty::TyCtxt;\n+use rustc::ty::query::Providers;\n \n struct EntryContext<'a, 'tcx> {\n     session: &'a Session,", "previous_filename": "src/librustc/middle/entry.rs"}, {"sha": "1c61eb35497d7ab26adbdc83533d794d2b93cadf", "filename": "src/librustc_passes/error_codes.rs", "status": "modified", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_passes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_passes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Ferror_codes.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -319,6 +319,188 @@ async fn foo() {}\n \n Switch to the Rust 2018 edition to use `async fn`.\n \"##,\n+\n+// This shouldn't really ever trigger since the repeated value error comes first\n+E0136: r##\"\n+A binary can only have one entry point, and by default that entry point is the\n+function `main()`. If there are multiple such functions, please rename one.\n+\"##,\n+\n+E0137: r##\"\n+More than one function was declared with the `#[main]` attribute.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0137\n+#![feature(main)]\n+\n+#[main]\n+fn foo() {}\n+\n+#[main]\n+fn f() {} // error: multiple functions with a `#[main]` attribute\n+```\n+\n+This error indicates that the compiler found multiple functions with the\n+`#[main]` attribute. This is an error because there must be a unique entry\n+point into a Rust program. Example:\n+\n+```\n+#![feature(main)]\n+\n+#[main]\n+fn f() {} // ok!\n+```\n+\"##,\n+\n+E0138: r##\"\n+More than one function was declared with the `#[start]` attribute.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0138\n+#![feature(start)]\n+\n+#[start]\n+fn foo(argc: isize, argv: *const *const u8) -> isize {}\n+\n+#[start]\n+fn f(argc: isize, argv: *const *const u8) -> isize {}\n+// error: multiple 'start' functions\n+```\n+\n+This error indicates that the compiler found multiple functions with the\n+`#[start]` attribute. This is an error because there must be a unique entry\n+point into a Rust program. Example:\n+\n+```\n+#![feature(start)]\n+\n+#[start]\n+fn foo(argc: isize, argv: *const *const u8) -> isize { 0 } // ok!\n+```\n+\"##,\n+\n+E0601: r##\"\n+No `main` function was found in a binary crate. To fix this error, add a\n+`main` function. For example:\n+\n+```\n+fn main() {\n+    // Your program will start here.\n+    println!(\"Hello world!\");\n+}\n+```\n+\n+If you don't know the basics of Rust, you can go look to the Rust Book to get\n+started: https://doc.rust-lang.org/book/\n+\"##,\n+\n+E0591: r##\"\n+Per [RFC 401][rfc401], if you have a function declaration `foo`:\n+\n+```\n+// For the purposes of this explanation, all of these\n+// different kinds of `fn` declarations are equivalent:\n+struct S;\n+fn foo(x: S) { /* ... */ }\n+# #[cfg(for_demonstration_only)]\n+extern \"C\" { fn foo(x: S); }\n+# #[cfg(for_demonstration_only)]\n+impl S { fn foo(self) { /* ... */ } }\n+```\n+\n+the type of `foo` is **not** `fn(S)`, as one might expect.\n+Rather, it is a unique, zero-sized marker type written here as `typeof(foo)`.\n+However, `typeof(foo)` can be _coerced_ to a function pointer `fn(S)`,\n+so you rarely notice this:\n+\n+```\n+# struct S;\n+# fn foo(_: S) {}\n+let x: fn(S) = foo; // OK, coerces\n+```\n+\n+The reason that this matter is that the type `fn(S)` is not specific to\n+any particular function: it's a function _pointer_. So calling `x()` results\n+in a virtual call, whereas `foo()` is statically dispatched, because the type\n+of `foo` tells us precisely what function is being called.\n+\n+As noted above, coercions mean that most code doesn't have to be\n+concerned with this distinction. However, you can tell the difference\n+when using **transmute** to convert a fn item into a fn pointer.\n+\n+This is sometimes done as part of an FFI:\n+\n+```compile_fail,E0591\n+extern \"C\" fn foo(userdata: Box<i32>) {\n+    /* ... */\n+}\n+\n+# fn callback(_: extern \"C\" fn(*mut i32)) {}\n+# use std::mem::transmute;\n+# unsafe {\n+let f: extern \"C\" fn(*mut i32) = transmute(foo);\n+callback(f);\n+# }\n+```\n+\n+Here, transmute is being used to convert the types of the fn arguments.\n+This pattern is incorrect because, because the type of `foo` is a function\n+**item** (`typeof(foo)`), which is zero-sized, and the target type (`fn()`)\n+is a function pointer, which is not zero-sized.\n+This pattern should be rewritten. There are a few possible ways to do this:\n+\n+- change the original fn declaration to match the expected signature,\n+  and do the cast in the fn body (the preferred option)\n+- cast the fn item fo a fn pointer before calling transmute, as shown here:\n+\n+    ```\n+    # extern \"C\" fn foo(_: Box<i32>) {}\n+    # use std::mem::transmute;\n+    # unsafe {\n+    let f: extern \"C\" fn(*mut i32) = transmute(foo as extern \"C\" fn(_));\n+    let f: extern \"C\" fn(*mut i32) = transmute(foo as usize); // works too\n+    # }\n+    ```\n+\n+The same applies to transmutes to `*mut fn()`, which were observed in practice.\n+Note though that use of this type is generally incorrect.\n+The intention is typically to describe a function pointer, but just `fn()`\n+alone suffices for that. `*mut fn()` is a pointer to a fn pointer.\n+(Since these values are typically just passed to C code, however, this rarely\n+makes a difference in practice.)\n+\n+[rfc401]: https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md\n+\"##,\n+\n+E0512: r##\"\n+Transmute with two differently sized types was attempted. Erroneous code\n+example:\n+\n+```compile_fail,E0512\n+fn takes_u8(_: u8) {}\n+\n+fn main() {\n+    unsafe { takes_u8(::std::mem::transmute(0u16)); }\n+    // error: cannot transmute between types of different sizes,\n+    //        or dependently-sized types\n+}\n+```\n+\n+Please use types with same size or use the expected type directly. Example:\n+\n+```\n+fn takes_u8(_: u8) {}\n+\n+fn main() {\n+    unsafe { takes_u8(::std::mem::transmute(0i8)); } // ok!\n+    // or:\n+    unsafe { takes_u8(0u8); } // ok!\n+}\n+```\n+\"##,\n+\n ;\n     E0226, // only a single explicit lifetime bound is permitted\n     E0472, // asm! is unsupported on this target"}, {"sha": "91a7e9f5d7fcadbaf8eea16c67cc91676fd3e8f0", "filename": "src/librustc_passes/intrinsicck.rs", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,14 +1,14 @@\n-use crate::hir::def::{Res, DefKind};\n-use crate::hir::def_id::DefId;\n-use crate::ty::{self, Ty, TyCtxt};\n-use crate::ty::layout::{LayoutError, Pointer, SizeSkeleton, VariantIdx};\n-use crate::ty::query::Providers;\n+use rustc::hir::def::{Res, DefKind};\n+use rustc::hir::def_id::DefId;\n+use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::layout::{LayoutError, Pointer, SizeSkeleton, VariantIdx};\n+use rustc::ty::query::Providers;\n \n use rustc_target::spec::abi::Abi::RustIntrinsic;\n use rustc_index::vec::Idx;\n use syntax_pos::{Span, sym};\n-use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n-use crate::hir;\n+use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n+use rustc::hir;\n \n fn check_mod_intrinsics(tcx: TyCtxt<'_>, module_def_id: DefId) {\n     tcx.hir().visit_item_likes_in_module(", "previous_filename": "src/librustc/middle/intrinsicck.rs"}, {"sha": "db59d8e101f77df07c0655f3e7bc5c761196cd7a", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -13,6 +13,10 @@\n \n #[macro_use]\n extern crate rustc;\n+#[macro_use]\n+extern crate log;\n+#[macro_use]\n+extern crate syntax;\n \n use rustc::ty::query::Providers;\n \n@@ -22,7 +26,14 @@ pub mod ast_validation;\n pub mod hir_stats;\n pub mod layout_test;\n pub mod loops;\n+pub mod dead;\n+pub mod entry;\n+mod liveness;\n+mod intrinsicck;\n \n pub fn provide(providers: &mut Providers<'_>) {\n+    entry::provide(providers);\n     loops::provide(providers);\n+    liveness::provide(providers);\n+    intrinsicck::provide(providers);\n }"}, {"sha": "fb06808619f66f096719656fc0fc507a061a9d03", "filename": "src/librustc_passes/liveness.rs", "status": "renamed", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -96,17 +96,17 @@\n use self::LiveNodeKind::*;\n use self::VarKind::*;\n \n-use crate::hir;\n-use crate::hir::{Expr, HirId};\n-use crate::hir::def::*;\n-use crate::hir::def_id::DefId;\n-use crate::hir::intravisit::{self, Visitor, FnKind, NestedVisitorMap};\n-use crate::hir::Node;\n-use crate::hir::ptr::P;\n-use crate::ty::{self, TyCtxt};\n-use crate::ty::query::Providers;\n-use crate::lint;\n-use crate::util::nodemap::{HirIdMap, HirIdSet};\n+use rustc::hir;\n+use rustc::hir::{Expr, HirId};\n+use rustc::hir::def::*;\n+use rustc::hir::def_id::DefId;\n+use rustc::hir::intravisit::{self, Visitor, FnKind, NestedVisitorMap};\n+use rustc::hir::Node;\n+use rustc::hir::ptr::P;\n+use rustc::ty::{self, TyCtxt};\n+use rustc::ty::query::Providers;\n+use rustc::lint;\n+use rustc::util::nodemap::{HirIdMap, HirIdSet};\n \n use errors::Applicability;\n use rustc_data_structures::fx::FxIndexMap;\n@@ -373,7 +373,7 @@ fn visit_fn<'tcx>(\n \n     for param in &body.params {\n         let is_shorthand = match param.pat.kind {\n-            crate::hir::PatKind::Struct(..) => true,\n+            rustc::hir::PatKind::Struct(..) => true,\n             _ => false,\n         };\n         param.pat.each_binding(|_bm, hir_id, _x, ident| {\n@@ -411,7 +411,7 @@ fn add_from_pat(ir: &mut IrMaps<'_>, pat: &P<hir::Pat>) {\n     let mut pats = VecDeque::new();\n     pats.push_back(pat);\n     while let Some(pat) = pats.pop_front() {\n-        use crate::hir::PatKind::*;\n+        use rustc::hir::PatKind::*;\n         match &pat.kind {\n             Binding(.., inner_pat) => {\n                 pats.extend(inner_pat.iter());", "previous_filename": "src/librustc/middle/liveness.rs"}, {"sha": "68d3bb00abc00d3125df312de431e0ca1c6ecd12", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -9,7 +9,6 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n-#![feature(inner_deref)]\n #![feature(crate_visibility_modifier)]\n #![feature(label_break_value)]\n #![feature(mem_take)]"}, {"sha": "70b508d4786975d9b68d329482a68bb5d1201bf1", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,6 +1,5 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(nll)]\n-#![feature(inner_deref)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "92c86372a86f331c5b7a0ab137958e1996fe9b1f", "filename": "src/librustc_target/abi/call/asmjs.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_target%2Fabi%2Fcall%2Fasmjs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_target%2Fabi%2Fcall%2Fasmjs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fasmjs.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -0,0 +1,47 @@\n+use crate::abi::call::{FnType, ArgType, Uniform};\n+use crate::abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n+\n+// Data layout: e-p:32:32-i64:64-v128:32:128-n32-S128\n+\n+// See the https://github.com/kripken/emscripten-fastcomp-clang repository.\n+// The class `EmscriptenABIInfo` in `/lib/CodeGen/TargetInfo.cpp` contains the ABI definitions.\n+\n+fn classify_ret_ty<'a, Ty, C>(cx: &C, ret: &mut ArgType<'a, Ty>)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n+    if ret.layout.is_aggregate() {\n+        if let Some(unit) = ret.layout.homogeneous_aggregate(cx).unit() {\n+            let size = ret.layout.size;\n+            if unit.size == size {\n+                ret.cast_to(Uniform {\n+                    unit,\n+                    total: size\n+                });\n+                return;\n+            }\n+        }\n+\n+        ret.make_indirect();\n+    }\n+}\n+\n+fn classify_arg_ty<Ty>(arg: &mut ArgType<'_, Ty>) {\n+    if arg.layout.is_aggregate() {\n+        arg.make_indirect_byval();\n+    }\n+}\n+\n+pub fn compute_abi_info<'a, Ty, C>(cx: &C, fty: &mut FnType<'a, Ty>)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n+    if !fty.ret.is_ignore() {\n+        classify_ret_ty(cx, &mut fty.ret);\n+    }\n+\n+    for arg in &mut fty.args {\n+        if arg.is_ignore() { continue; }\n+        classify_arg_ty(arg);\n+    }\n+}"}, {"sha": "bc21113527ecfa83b7602319689a882517713c5d", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -5,6 +5,7 @@ use crate::spec::{self, HasTargetSpec};\n mod aarch64;\n mod amdgpu;\n mod arm;\n+mod asmjs;\n mod hexagon;\n mod mips;\n mod mips64;\n@@ -21,7 +22,6 @@ mod x86;\n mod x86_64;\n mod x86_win64;\n mod wasm32;\n-mod wasm32_bindgen_compat;\n \n #[derive(Clone, Copy, PartialEq, Eq, Debug)]\n pub enum PassMode {\n@@ -557,6 +557,14 @@ impl<'a, Ty> FnType<'a, Ty> {\n             \"powerpc\" => powerpc::compute_abi_info(cx, self),\n             \"powerpc64\" => powerpc64::compute_abi_info(cx, self),\n             \"s390x\" => s390x::compute_abi_info(cx, self),\n+            \"asmjs\" => asmjs::compute_abi_info(cx, self),\n+            \"wasm32\" => {\n+                if cx.target_spec().llvm_target.contains(\"emscripten\") {\n+                    asmjs::compute_abi_info(cx, self)\n+                } else {\n+                    wasm32::compute_abi_info(self)\n+                }\n+            }\n             \"msp430\" => msp430::compute_abi_info(self),\n             \"sparc\" => sparc::compute_abi_info(cx, self),\n             \"sparc64\" => sparc64::compute_abi_info(cx, self),\n@@ -565,9 +573,6 @@ impl<'a, Ty> FnType<'a, Ty> {\n             \"hexagon\" => hexagon::compute_abi_info(self),\n             \"riscv32\" => riscv::compute_abi_info(self, 32),\n             \"riscv64\" => riscv::compute_abi_info(self, 64),\n-            \"wasm32\" if cx.target_spec().target_os != \"emscripten\"\n-                => wasm32_bindgen_compat::compute_abi_info(self),\n-            \"wasm32\" | \"asmjs\" => wasm32::compute_abi_info(cx, self),\n             a => return Err(format!(\"unrecognized arch \\\"{}\\\" in target specification\", a))\n         }\n "}, {"sha": "1fdcbb8e39bdff0397f0aaa6a3599d6dcc301f3c", "filename": "src/librustc_target/abi/call/wasm32.rs", "status": "modified", "additions": 6, "deletions": 46, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,60 +1,20 @@\n-use crate::abi::call::{FnType, ArgType, Uniform};\n-use crate::abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n+use crate::abi::call::{FnType, ArgType};\n \n-fn unwrap_trivial_aggregate<'a, Ty, C>(cx: &C, val: &mut ArgType<'a, Ty>) -> bool\n-    where Ty: TyLayoutMethods<'a, C> + Copy,\n-          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n-{\n-    if val.layout.is_aggregate() {\n-        if let Some(unit) = val.layout.homogeneous_aggregate(cx).unit() {\n-            let size = val.layout.size;\n-            if unit.size == size {\n-                val.cast_to(Uniform {\n-                    unit,\n-                    total: size\n-                });\n-                return true;\n-            }\n-        }\n-    }\n-    false\n-}\n-\n-\n-fn classify_ret_ty<'a, Ty, C>(cx: &C, ret: &mut ArgType<'a, Ty>)\n-    where Ty: TyLayoutMethods<'a, C> + Copy,\n-          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n-{\n+fn classify_ret_ty<Ty>(ret: &mut ArgType<'_, Ty>) {\n     ret.extend_integer_width_to(32);\n-    if ret.layout.is_aggregate() {\n-        if !unwrap_trivial_aggregate(cx, ret) {\n-            ret.make_indirect();\n-        }\n-    }\n }\n \n-fn classify_arg_ty<'a, Ty, C>(cx: &C, arg: &mut ArgType<'a, Ty>)\n-    where Ty: TyLayoutMethods<'a, C> + Copy,\n-          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n-{\n+fn classify_arg_ty<Ty>(arg: &mut ArgType<'_, Ty>) {\n     arg.extend_integer_width_to(32);\n-    if arg.layout.is_aggregate() {\n-        if !unwrap_trivial_aggregate(cx, arg) {\n-            arg.make_indirect_byval();\n-        }\n-    }\n }\n \n-pub fn compute_abi_info<'a, Ty, C>(cx: &C, fty: &mut FnType<'a, Ty>)\n-    where Ty: TyLayoutMethods<'a, C> + Copy,\n-          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n-{\n+pub fn compute_abi_info<Ty>(fty: &mut FnType<'_, Ty>) {\n     if !fty.ret.is_ignore() {\n-        classify_ret_ty(cx, &mut fty.ret);\n+        classify_ret_ty(&mut fty.ret);\n     }\n \n     for arg in &mut fty.args {\n         if arg.is_ignore() { continue; }\n-        classify_arg_ty(cx, arg);\n+        classify_arg_ty(arg);\n     }\n }"}, {"sha": "2645e30594ceae0725fff9690ba20309bf6156b6", "filename": "src/librustc_target/abi/call/wasm32_bindgen_compat.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32_bindgen_compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32_bindgen_compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32_bindgen_compat.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,27 +0,0 @@\n-// This is not and has never been a correct C ABI for WebAssembly, but\n-// for a long time this was the C ABI that Rust used. wasm-bindgen\n-// depends on ABI details for this ABI and is incompatible with the\n-// correct C ABI, so this ABI is being kept around until wasm-bindgen\n-// can be fixed to work with the correct ABI. See #63649 for further\n-// discussion.\n-\n-use crate::abi::call::{FnType, ArgType};\n-\n-fn classify_ret_ty<Ty>(ret: &mut ArgType<'_, Ty>) {\n-    ret.extend_integer_width_to(32);\n-}\n-\n-fn classify_arg_ty<Ty>(arg: &mut ArgType<'_, Ty>) {\n-    arg.extend_integer_width_to(32);\n-}\n-\n-pub fn compute_abi_info<Ty>(fty: &mut FnType<'_, Ty>) {\n-    if !fty.ret.is_ignore() {\n-        classify_ret_ty(&mut fty.ret);\n-    }\n-\n-    for arg in &mut fty.args {\n-        if arg.is_ignore() { continue; }\n-        classify_arg_ty(arg);\n-    }\n-}"}, {"sha": "6dc140cf160eadb6e727d5f2abf99831ea5153fb", "filename": "src/librustc_target/spec/asmjs_unknown_emscripten.rs", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_target%2Fspec%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_target%2Fspec%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fasmjs_unknown_emscripten.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,10 +1,40 @@\n-use super::{LinkerFlavor, Target, wasm32_unknown_emscripten};\n+use super::{LinkArgs, LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Result<Target, String> {\n-    let mut target = wasm32_unknown_emscripten::target()?;\n-    target.options.post_link_args\n-        .entry(LinkerFlavor::Em)\n-        .or_default()\n-        .extend(vec![\"-s\".to_string(), \"WASM=0\".to_string()]);\n-    Ok(target)\n+    let mut args = LinkArgs::new();\n+    args.insert(LinkerFlavor::Em,\n+                vec![\"-s\".to_string(),\n+                     \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string(),\n+                     \"-s\".to_string(),\n+                     \"ABORTING_MALLOC=0\".to_string(),\n+                     \"-s\".to_string(),\n+                     \"WASM=0\".to_string()]);\n+\n+    let opts = TargetOptions {\n+        dynamic_linking: false,\n+        executables: true,\n+        exe_suffix: \".js\".to_string(),\n+        linker_is_gnu: true,\n+        allow_asm: false,\n+        obj_is_bitcode: true,\n+        is_like_emscripten: true,\n+        max_atomic_width: Some(32),\n+        post_link_args: args,\n+        target_family: Some(\"unix\".to_string()),\n+        codegen_backend: \"emscripten\".to_string(),\n+        .. Default::default()\n+    };\n+    Ok(Target {\n+        llvm_target: \"asmjs-unknown-emscripten\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        target_os: \"emscripten\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: \"unknown\".to_string(),\n+        data_layout: \"e-p:32:32-i64:64-v128:32:128-n32-S128\".to_string(),\n+        arch: \"asmjs\".to_string(),\n+        linker_flavor: LinkerFlavor::Em,\n+        options: opts,\n+    })\n }"}, {"sha": "25add0cc6a4be2cede092124a1ed10954cbdf989", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -462,6 +462,7 @@ supported_targets! {\n     (\"wasm32-unknown-emscripten\", wasm32_unknown_emscripten),\n     (\"wasm32-unknown-unknown\", wasm32_unknown_unknown),\n     (\"wasm32-wasi\", wasm32_wasi),\n+    (\"wasm32-experimental-emscripten\", wasm32_experimental_emscripten),\n \n     (\"thumbv6m-none-eabi\", thumbv6m_none_eabi),\n     (\"thumbv7m-none-eabi\", thumbv7m_none_eabi),"}, {"sha": "b802bee25ae7a04ee301dc597e6e1c048694452e", "filename": "src/librustc_target/spec/wasm32_experimental_emscripten.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_target%2Fspec%2Fwasm32_experimental_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_target%2Fspec%2Fwasm32_experimental_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_experimental_emscripten.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -0,0 +1,44 @@\n+use super::{LinkArgs, LinkerFlavor, Target, TargetOptions};\n+\n+pub fn target() -> Result<Target, String> {\n+    let mut post_link_args = LinkArgs::new();\n+    post_link_args.insert(LinkerFlavor::Em,\n+                          vec![\"-s\".to_string(),\n+                               \"WASM=1\".to_string(),\n+                               \"-s\".to_string(),\n+                               \"ASSERTIONS=1\".to_string(),\n+                               \"-s\".to_string(),\n+                               \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string(),\n+                               \"-g3\".to_string()]);\n+\n+    let opts = TargetOptions {\n+        dynamic_linking: false,\n+        executables: true,\n+        // Today emcc emits two files - a .js file to bootstrap and\n+        // possibly interpret the wasm, and a .wasm file\n+        exe_suffix: \".js\".to_string(),\n+        linker_is_gnu: true,\n+        link_env: vec![(\"EMCC_WASM_BACKEND\".to_string(), \"1\".to_string())],\n+        allow_asm: false,\n+        obj_is_bitcode: true,\n+        is_like_emscripten: true,\n+        max_atomic_width: Some(32),\n+        post_link_args,\n+        limit_rdylib_exports: false,\n+        target_family: Some(\"unix\".to_string()),\n+        .. Default::default()\n+    };\n+    Ok(Target {\n+        llvm_target: \"wasm32-unknown-unknown\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        target_os: \"emscripten\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: \"unknown\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-n32:64-S128\".to_string(),\n+        arch: \"wasm32\".to_string(),\n+        linker_flavor: LinkerFlavor::Em,\n+        options: opts,\n+    })\n+}"}, {"sha": "e0df36884bf5629f6325948002fbf61ea6224cf7", "filename": "src/librustc_target/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,46 +1,45 @@\n-use super::wasm32_base;\n-use super::{LinkArgs, LinkerFlavor, Target, TargetOptions, PanicStrategy};\n+use super::{LinkArgs, LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Result<Target, String> {\n+    // FIXME(nikic) BINARYEN_TRAP_MODE=clamp is needed to avoid trapping in our\n+    // -Zsaturating-float-casts implementation. This can be dropped if/when\n+    // we have native fpto[su]i.sat intrinsics, or the implementation otherwise\n+    // stops relying on non-trapping fpto[su]i.\n     let mut post_link_args = LinkArgs::new();\n     post_link_args.insert(LinkerFlavor::Em,\n                           vec![\"-s\".to_string(),\n-                               \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string(),\n-                               \"-s\".to_string(),\n-                               \"ASSERTIONS=1\".to_string(),\n+                               \"BINARYEN=1\".to_string(),\n                                \"-s\".to_string(),\n-                               \"DISABLE_EXCEPTION_CATCHING=1\".to_string(),\n+                               \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string(),\n                                \"-s\".to_string(),\n-                               \"ABORTING_MALLOC=0\".to_string(),\n-                               // FIXME(tlively): Enable this linker option once libc type errors\n-                               // are resolved. See https://github.com/rust-lang/libc/pull/1478.\n-                               // \"-Wl,--fatal-warnings\".to_string(),\n-                               ]);\n+                               \"BINARYEN_TRAP_MODE='clamp'\".to_string()]);\n \n     let opts = TargetOptions {\n-        // emcc emits two files - a .js file to instantiate the wasm and supply platform\n-        // functionality, and a .wasm file.\n+        dynamic_linking: false,\n+        executables: true,\n+        // Today emcc emits two files - a .js file to bootstrap and\n+        // possibly interpret the wasm, and a .wasm file\n         exe_suffix: \".js\".to_string(),\n-        linker: None,\n         linker_is_gnu: true,\n+        allow_asm: false,\n+        obj_is_bitcode: true,\n         is_like_emscripten: true,\n-        // FIXME(tlively): Emscripten supports unwinding, but we would have to pass\n-        // -enable-emscripten-cxx-exceptions to LLVM at codegen time and merge\n-        // https://reviews.llvm.org/rG5c3cdef84b82464756bb571c13c31cf7773860c3to use it.\n-        panic_strategy: PanicStrategy::Abort,\n+        max_atomic_width: Some(32),\n         post_link_args,\n+        limit_rdylib_exports: false,\n         target_family: Some(\"unix\".to_string()),\n-        .. wasm32_base::options()\n+        codegen_backend: \"emscripten\".to_string(),\n+        .. Default::default()\n     };\n     Ok(Target {\n-        llvm_target: \"wasm32-unknown-emscripten\".to_string(),\n+        llvm_target: \"asmjs-unknown-emscripten\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n         target_os: \"emscripten\".to_string(),\n         target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-n32:64-S128\".to_string(),\n+        data_layout: \"e-p:32:32-i64:64-v128:32:128-n32-S128\".to_string(),\n         arch: \"wasm32\".to_string(),\n         linker_flavor: LinkerFlavor::Em,\n         options: opts,"}, {"sha": "88e62db9a10d8aacbda75a3a4f60af3c1ab0a41f", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -223,7 +223,7 @@ fn dtorck_constraint_for_ty<'tcx>(\n             // *do* incorporate the upvars here.\n \n             let constraint = DtorckConstraint {\n-                outlives: substs.upvar_tys(def_id, tcx).map(|t| t.into()).collect(),\n+                outlives: substs.as_generator().upvar_tys(def_id, tcx).map(|t| t.into()).collect(),\n                 dtorck_types: vec![],\n                 overflows: vec![],\n             };"}, {"sha": "cc5348623fabda0dfdf0eda61c36b30fafc7e935", "filename": "src/librustc_traits/generic_types.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_traits%2Fgeneric_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_traits%2Fgeneric_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fgeneric_types.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -73,7 +73,9 @@ crate fn closure(tcx: TyCtxt<'tcx>, def_id: DefId) -> Ty<'tcx> {\n }\n \n crate fn generator(tcx: TyCtxt<'tcx>, def_id: DefId) -> Ty<'tcx> {\n-    tcx.mk_generator(def_id, ty::GeneratorSubsts {\n-        substs: InternalSubsts::bound_vars_for_item(tcx, def_id),\n-    }, hir::GeneratorMovability::Movable)\n+    tcx.mk_generator(\n+        def_id,\n+        InternalSubsts::bound_vars_for_item(tcx, def_id),\n+        hir::GeneratorMovability::Movable\n+    )\n }"}, {"sha": "8b97bf643e9bb9a2ab9f4da7f87dafa5b37572af", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -113,21 +113,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         });\n         if let Some(GeneratorTypes { yield_ty, interior, movability }) = generator_types {\n-            let substs = ty::GeneratorSubsts { substs };\n+            let generator_substs = substs.as_generator();\n             self.demand_eqtype(\n                 expr.span,\n                 yield_ty,\n-                substs.yield_ty(expr_def_id, self.tcx),\n+                generator_substs.yield_ty(expr_def_id, self.tcx),\n             );\n             self.demand_eqtype(\n                 expr.span,\n                 liberated_sig.output(),\n-                substs.return_ty(expr_def_id, self.tcx),\n+                generator_substs.return_ty(expr_def_id, self.tcx),\n             );\n             self.demand_eqtype(\n                 expr.span,\n                 interior,\n-                substs.witness(expr_def_id, self.tcx),\n+                generator_substs.witness(expr_def_id, self.tcx),\n             );\n             return self.tcx.mk_generator(expr_def_id, substs, movability);\n         }"}, {"sha": "e2e8c09bb5840be06a1a4cca793bcc44fbf0352b", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -67,7 +67,6 @@ This API is completely unstable and subject to change.\n #![feature(nll)]\n #![feature(slice_patterns)]\n #![feature(never_type)]\n-#![feature(inner_deref)]\n #![feature(mem_take)]\n \n #![recursion_limit=\"256\"]"}, {"sha": "da3b52afadffb50a6252d2e43e9cef0fac1dbe0a", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -360,7 +360,7 @@ impl<'a> fmt::Display for Html<'a> {\n                     (\"target_arch\", Some(arch)) => match &*arch.as_str() {\n                         \"aarch64\" => \"AArch64\",\n                         \"arm\" => \"ARM\",\n-                        \"asmjs\" => \"JavaScript\",\n+                        \"asmjs\" => \"asm.js\",\n                         \"mips\" => \"MIPS\",\n                         \"mips64\" => \"MIPS-64\",\n                         \"msp430\" => \"MSP430\","}, {"sha": "faa8eab7a29d72508b7b997005782fdc4660c481", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -14,7 +14,6 @@\n #![feature(crate_visibility_modifier)]\n #![feature(const_fn)]\n #![feature(drain_filter)]\n-#![feature(inner_deref)]\n #![feature(never_type)]\n #![feature(mem_take)]\n #![feature(unicode_internals)]"}, {"sha": "46bbd8855dedabdf098e2b7b90139ae12befe940", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -185,7 +185,6 @@ impl UdpSocket {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// #![feature(udp_peer_addr)]\n     /// use std::net::{Ipv4Addr, SocketAddr, SocketAddrV4, UdpSocket};\n     ///\n     /// let socket = UdpSocket::bind(\"127.0.0.1:34254\").expect(\"couldn't bind to address\");\n@@ -199,14 +198,13 @@ impl UdpSocket {\n     /// [`NotConnected`]: ../../std/io/enum.ErrorKind.html#variant.NotConnected\n     ///\n     /// ```no_run\n-    /// #![feature(udp_peer_addr)]\n     /// use std::net::UdpSocket;\n     ///\n     /// let socket = UdpSocket::bind(\"127.0.0.1:34254\").expect(\"couldn't bind to address\");\n     /// assert_eq!(socket.peer_addr().unwrap_err().kind(),\n     ///            ::std::io::ErrorKind::NotConnected);\n     /// ```\n-    #[unstable(feature = \"udp_peer_addr\", issue = \"59127\")]\n+    #[stable(feature = \"udp_peer_addr\", since = \"1.40.0\")]\n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n         self.0.peer_addr()\n     }"}, {"sha": "638ce1679b8e98dc0c4db2f37b0462f9516d4a8c", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -15,9 +15,11 @@ use crate::intrinsics;\n use crate::mem;\n use crate::ptr;\n use crate::raw;\n+use crate::sync::atomic::{AtomicBool, Ordering};\n use crate::sys::stdio::panic_output;\n use crate::sys_common::rwlock::RWLock;\n-use crate::sys_common::{thread_info, util, backtrace};\n+use crate::sys_common::{thread_info, util};\n+use crate::sys_common::backtrace::{self, RustBacktrace};\n use crate::thread;\n \n #[cfg(not(test))]\n@@ -158,16 +160,10 @@ pub fn take_hook() -> Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send> {\n fn default_hook(info: &PanicInfo<'_>) {\n     // If this is a double panic, make sure that we print a backtrace\n     // for this panic. Otherwise only print it if logging is enabled.\n-    let log_backtrace = if cfg!(feature = \"backtrace\") {\n-        let panics = update_panic_count(0);\n-\n-        if panics >= 2 {\n-            Some(backtrace_rs::PrintFmt::Full)\n-        } else {\n-            backtrace::log_enabled()\n-        }\n+    let backtrace_env = if update_panic_count(0) >= 2 {\n+        RustBacktrace::Print(backtrace_rs::PrintFmt::Full)\n     } else {\n-        None\n+        backtrace::rust_backtrace_env()\n     };\n \n     // The current implementation always returns `Some`.\n@@ -187,16 +183,16 @@ fn default_hook(info: &PanicInfo<'_>) {\n         let _ = writeln!(err, \"thread '{}' panicked at '{}', {}\",\n                          name, msg, location);\n \n-        if cfg!(feature = \"backtrace\") {\n-            use crate::sync::atomic::{AtomicBool, Ordering};\n-\n-            static FIRST_PANIC: AtomicBool = AtomicBool::new(true);\n+        static FIRST_PANIC: AtomicBool = AtomicBool::new(true);\n \n-            if let Some(format) = log_backtrace {\n-                let _ = backtrace::print(err, format);\n-            } else if FIRST_PANIC.compare_and_swap(true, false, Ordering::SeqCst) {\n-                let _ = writeln!(err, \"note: run with `RUST_BACKTRACE=1` \\\n-                                       environment variable to display a backtrace.\");\n+        match backtrace_env {\n+            RustBacktrace::Print(format) => drop(backtrace::print(err, format)),\n+            RustBacktrace::Disabled => {}\n+            RustBacktrace::RuntimeDisabled => {\n+                if FIRST_PANIC.swap(false, Ordering::SeqCst) {\n+                    let _ = writeln!(err, \"note: run with `RUST_BACKTRACE=1` \\\n+                                           environment variable to display a backtrace.\");\n+                }\n             }\n         }\n     };"}, {"sha": "63e35d5ed919a294fa1c191479b008650b363aac", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -44,12 +44,9 @@ fn lang_start_internal(main: &(dyn Fn() -> i32 + Sync + crate::panic::RefUnwindS\n         sys::args::init(argc, argv);\n \n         // Let's run some code!\n-        #[cfg(feature = \"backtrace\")]\n         let exit_code = panic::catch_unwind(|| {\n             sys_common::backtrace::__rust_begin_short_backtrace(move || main())\n         });\n-        #[cfg(not(feature = \"backtrace\"))]\n-        let exit_code = panic::catch_unwind(move || main());\n \n         sys_common::cleanup();\n         exit_code.unwrap_or(101) as isize"}, {"sha": "952ba40ee87a9d786a2762d1d6546f26a150edc4", "filename": "src/libstd/sys/unix/fast_thread_local.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -10,8 +10,7 @@\n // fallback implementation to use as well.\n //\n // Due to rust-lang/rust#18804, make sure this is not generic!\n-#[cfg(any(target_os = \"linux\", target_os = \"fuchsia\", target_os = \"hermit\", target_os = \"redox\",\n-          target_os = \"emscripten\"))]\n+#[cfg(any(target_os = \"linux\", target_os = \"fuchsia\", target_os = \"hermit\", target_os = \"redox\"))]\n pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern fn(*mut u8)) {\n     use crate::mem;\n     use crate::sys_common::thread_local::register_dtor_fallback;"}, {"sha": "9c406ec39cc45a3afebe9154db865346318337a2", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 35, "deletions": 25, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -7,6 +7,7 @@ use crate::io;\n use crate::borrow::Cow;\n use crate::io::prelude::*;\n use crate::path::{self, Path, PathBuf};\n+use crate::sync::atomic::{self, Ordering};\n use crate::sys::mutex::Mutex;\n \n use backtrace_rs::{BacktraceFmt, BytesOrWideString, PrintFmt};\n@@ -115,8 +116,10 @@ unsafe fn _print_fmt(fmt: &mut fmt::Formatter<'_>, print_fmt: PrintFmt) -> fmt::\n     Ok(())\n }\n \n-/// Fixed frame used to clean the backtrace with `RUST_BACKTRACE=1`.\n-#[inline(never)]\n+/// Fixed frame used to clean the backtrace with `RUST_BACKTRACE=1`. Note that\n+/// this is only inline(never) when backtraces in libstd are enabled, otherwise\n+/// it's fine to optimize away.\n+#[cfg_attr(feature = \"backtrace\", inline(never))]\n pub fn __rust_begin_short_backtrace<F, T>(f: F) -> T\n where\n     F: FnOnce() -> T,\n@@ -126,42 +129,49 @@ where\n     f()\n }\n \n+pub enum RustBacktrace {\n+    Print(PrintFmt),\n+    Disabled,\n+    RuntimeDisabled,\n+}\n+\n // For now logging is turned off by default, and this function checks to see\n // whether the magical environment variable is present to see if it's turned on.\n-pub fn log_enabled() -> Option<PrintFmt> {\n-    use crate::sync::atomic::{self, Ordering};\n+pub fn rust_backtrace_env() -> RustBacktrace {\n+    // If the `backtrace` feature of this crate isn't enabled quickly return\n+    // `None` so this can be constant propagated all over the place to turn\n+    // optimize away callers.\n+    if !cfg!(feature = \"backtrace\") {\n+        return RustBacktrace::Disabled;\n+    }\n \n     // Setting environment variables for Fuchsia components isn't a standard\n     // or easily supported workflow. For now, always display backtraces.\n     if cfg!(target_os = \"fuchsia\") {\n-        return Some(PrintFmt::Full);\n+        return RustBacktrace::Print(PrintFmt::Full);\n     }\n \n     static ENABLED: atomic::AtomicIsize = atomic::AtomicIsize::new(0);\n     match ENABLED.load(Ordering::SeqCst) {\n         0 => {}\n-        1 => return None,\n-        2 => return Some(PrintFmt::Short),\n-        _ => return Some(PrintFmt::Full),\n+        1 => return RustBacktrace::RuntimeDisabled,\n+        2 => return RustBacktrace::Print(PrintFmt::Short),\n+        _ => return RustBacktrace::Print(PrintFmt::Full),\n     }\n \n-    let val = env::var_os(\"RUST_BACKTRACE\").and_then(|x| {\n-        if &x == \"0\" {\n-            None\n-        } else if &x == \"full\" {\n-            Some(PrintFmt::Full)\n-        } else {\n-            Some(PrintFmt::Short)\n-        }\n-    });\n-    ENABLED.store(\n-        match val {\n-            Some(v) => v as isize,\n-            None => 1,\n-        },\n-        Ordering::SeqCst,\n-    );\n-    val\n+    let (format, cache) = env::var_os(\"RUST_BACKTRACE\")\n+        .map(|x| {\n+            if &x == \"0\" {\n+                (RustBacktrace::RuntimeDisabled, 1)\n+            } else if &x == \"full\" {\n+                (RustBacktrace::Print(PrintFmt::Full), 3)\n+            } else {\n+                (RustBacktrace::Print(PrintFmt::Short), 2)\n+            }\n+        })\n+        .unwrap_or((RustBacktrace::RuntimeDisabled, 1));\n+    ENABLED.store(cache, Ordering::SeqCst);\n+    format\n }\n \n /// Prints the filename of the backtrace frame."}, {"sha": "0ffa6ace2e4d2ea73ce1824b2149152c2bd90b70", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -465,12 +465,9 @@ impl Builder {\n             }\n \n             thread_info::set(imp::guard::current(), their_thread);\n-            #[cfg(feature = \"backtrace\")]\n             let try_result = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n                 crate::sys_common::backtrace::__rust_begin_short_backtrace(f)\n             }));\n-            #[cfg(not(feature = \"backtrace\"))]\n-            let try_result = panic::catch_unwind(panic::AssertUnwindSafe(f));\n             *their_packet.get() = Some(try_result);\n         };\n "}, {"sha": "e1ae01b602a8db8d97e1620837b79af23a485d04", "filename": "src/libstd/time.rs", "status": "modified", "additions": 23, "deletions": 28, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -15,10 +15,10 @@\n use crate::cmp;\n use crate::error::Error;\n use crate::fmt;\n-use crate::ops::{Add, Sub, AddAssign, SubAssign};\n+use crate::ops::{Add, AddAssign, Sub, SubAssign};\n use crate::sys::time;\n-use crate::sys_common::FromInner;\n use crate::sys_common::mutex::Mutex;\n+use crate::sys_common::FromInner;\n \n #[stable(feature = \"time\", since = \"1.3.0\")]\n pub use core::time::Duration;\n@@ -216,17 +216,17 @@ impl Instant {\n         // * https://bugzilla.mozilla.org/show_bug.cgi?id=1487778 - a similar\n         //   Firefox bug\n         //\n-        // It simply seems that this it just happens so that a lot in the wild\n-        // we're seeing panics across various platforms where consecutive calls\n+        // It seems that this just happens a lot in the wild.\n+        // We're seeing panics across various platforms where consecutive calls\n         // to `Instant::now`, such as via the `elapsed` function, are panicking\n         // as they're going backwards. Placed here is a last-ditch effort to try\n         // to fix things up. We keep a global \"latest now\" instance which is\n         // returned instead of what the OS says if the OS goes backwards.\n         //\n-        // To hopefully mitigate the impact of this though a few platforms are\n+        // To hopefully mitigate the impact of this, a few platforms are\n         // whitelisted as \"these at least haven't gone backwards yet\".\n         if time::Instant::actually_monotonic() {\n-            return Instant(os_now)\n+            return Instant(os_now);\n         }\n \n         static LOCK: Mutex = Mutex::new();\n@@ -353,8 +353,7 @@ impl Add<Duration> for Instant {\n     ///\n     /// [`checked_add`]: ../../std/time/struct.Instant.html#method.checked_add\n     fn add(self, other: Duration) -> Instant {\n-        self.checked_add(other)\n-            .expect(\"overflow when adding duration to instant\")\n+        self.checked_add(other).expect(\"overflow when adding duration to instant\")\n     }\n }\n \n@@ -370,8 +369,7 @@ impl Sub<Duration> for Instant {\n     type Output = Instant;\n \n     fn sub(self, other: Duration) -> Instant {\n-        self.checked_sub(other)\n-            .expect(\"overflow when subtracting duration from instant\")\n+        self.checked_sub(other).expect(\"overflow when subtracting duration from instant\")\n     }\n }\n \n@@ -464,8 +462,7 @@ impl SystemTime {\n     /// println!(\"{:?}\", difference);\n     /// ```\n     #[stable(feature = \"time2\", since = \"1.8.0\")]\n-    pub fn duration_since(&self, earlier: SystemTime)\n-                          -> Result<Duration, SystemTimeError> {\n+    pub fn duration_since(&self, earlier: SystemTime) -> Result<Duration, SystemTimeError> {\n         self.0.sub_time(&earlier.0).map_err(SystemTimeError)\n     }\n \n@@ -532,8 +529,7 @@ impl Add<Duration> for SystemTime {\n     ///\n     /// [`checked_add`]: ../../std/time/struct.SystemTime.html#method.checked_add\n     fn add(self, dur: Duration) -> SystemTime {\n-        self.checked_add(dur)\n-            .expect(\"overflow when adding duration to instant\")\n+        self.checked_add(dur).expect(\"overflow when adding duration to instant\")\n     }\n }\n \n@@ -549,8 +545,7 @@ impl Sub<Duration> for SystemTime {\n     type Output = SystemTime;\n \n     fn sub(self, dur: Duration) -> SystemTime {\n-        self.checked_sub(dur)\n-            .expect(\"overflow when subtracting duration from instant\")\n+        self.checked_sub(dur).expect(\"overflow when subtracting duration from instant\")\n     }\n }\n \n@@ -626,7 +621,9 @@ impl SystemTimeError {\n \n #[stable(feature = \"time2\", since = \"1.8.0\")]\n impl Error for SystemTimeError {\n-    fn description(&self) -> &str { \"other time was not earlier than self\" }\n+    fn description(&self) -> &str {\n+        \"other time was not earlier than self\"\n+    }\n }\n \n #[stable(feature = \"time2\", since = \"1.8.0\")]\n@@ -644,17 +641,16 @@ impl FromInner<time::SystemTime> for SystemTime {\n \n #[cfg(test)]\n mod tests {\n-    use super::{Instant, SystemTime, Duration, UNIX_EPOCH};\n+    use super::{Duration, Instant, SystemTime, UNIX_EPOCH};\n \n     macro_rules! assert_almost_eq {\n-        ($a:expr, $b:expr) => ({\n+        ($a:expr, $b:expr) => {{\n             let (a, b) = ($a, $b);\n             if a != b {\n-                let (a, b) = if a > b {(a, b)} else {(b, a)};\n-                assert!(a - Duration::new(0, 1000) <= b,\n-                        \"{:?} is not almost equal to {:?}\", a, b);\n+                let (a, b) = if a > b { (a, b) } else { (b, a) };\n+                assert!(a - Duration::new(0, 1000) <= b, \"{:?} is not almost equal to {:?}\", a, b);\n             }\n-        })\n+        }};\n     }\n \n     #[test]\n@@ -729,7 +725,7 @@ mod tests {\n     fn instant_saturating_duration_since_nopanic() {\n         let a = Instant::now();\n         let ret = (a - Duration::new(1, 0)).saturating_duration_since(a);\n-        assert_eq!(ret, Duration::new(0,0));\n+        assert_eq!(ret, Duration::new(0, 0));\n     }\n \n     #[test]\n@@ -755,15 +751,14 @@ mod tests {\n \n         let second = Duration::new(1, 0);\n         assert_almost_eq!(a.duration_since(a - second).unwrap(), second);\n-        assert_almost_eq!(a.duration_since(a + second).unwrap_err()\n-                           .duration(), second);\n+        assert_almost_eq!(a.duration_since(a + second).unwrap_err().duration(), second);\n \n         assert_almost_eq!(a - second + second, a);\n         assert_almost_eq!(a.checked_sub(second).unwrap().checked_add(second).unwrap(), a);\n \n         let one_second_from_epoch = UNIX_EPOCH + Duration::new(1, 0);\n-        let one_second_from_epoch2 = UNIX_EPOCH + Duration::new(0, 500_000_000)\n-            + Duration::new(0, 500_000_000);\n+        let one_second_from_epoch2 =\n+            UNIX_EPOCH + Duration::new(0, 500_000_000) + Duration::new(0, 500_000_000);\n         assert_eq!(one_second_from_epoch, one_second_from_epoch2);\n \n         // checked_add_duration will not panic on overflow"}, {"sha": "f376c19a66ccd5e294669421ed8f576bb7253bf9", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 150, "deletions": 13, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -17,6 +17,7 @@ use syntax_pos::{Span, DUMMY_SP, MultiSpan, SpanSnippetError};\n use log::{debug, trace};\n use std::mem;\n \n+const TURBOFISH: &'static str = \"use `::<...>` instead of `<...>` to specify type arguments\";\n /// Creates a placeholder argument.\n crate fn dummy_arg(ident: Ident) -> Param {\n     let pat = P(Pat {\n@@ -543,35 +544,154 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Produces an error if comparison operators are chained (RFC #558).\n-    /// We only need to check the LHS, not the RHS, because all comparison ops\n-    /// have same precedence and are left-associative.\n-    crate fn check_no_chained_comparison(&self, lhs: &Expr, outer_op: &AssocOp) -> PResult<'a, ()> {\n-        debug_assert!(outer_op.is_comparison(),\n-                      \"check_no_chained_comparison: {:?} is not comparison\",\n-                      outer_op);\n+    /// We only need to check the LHS, not the RHS, because all comparison ops have same\n+    /// precedence (see `fn precedence`) and are left-associative (see `fn fixity`).\n+    ///\n+    /// This can also be hit if someone incorrectly writes `foo<bar>()` when they should have used\n+    /// the turbofish (`foo::<bar>()`) syntax. We attempt some heuristic recovery if that is the\n+    /// case.\n+    ///\n+    /// Keep in mind that given that `outer_op.is_comparison()` holds and comparison ops are left\n+    /// associative we can infer that we have:\n+    ///\n+    ///           outer_op\n+    ///           /   \\\n+    ///     inner_op   r2\n+    ///        /  \\\n+    ///     l1    r1\n+    crate fn check_no_chained_comparison(\n+        &mut self,\n+        lhs: &Expr,\n+        outer_op: &AssocOp,\n+    ) -> PResult<'a, Option<P<Expr>>> {\n+        debug_assert!(\n+            outer_op.is_comparison(),\n+            \"check_no_chained_comparison: {:?} is not comparison\",\n+            outer_op,\n+        );\n+\n+        let mk_err_expr = |this: &Self, span| {\n+            Ok(Some(this.mk_expr(span, ExprKind::Err, ThinVec::new())))\n+        };\n+\n         match lhs.kind {\n             ExprKind::Binary(op, _, _) if op.node.is_comparison() => {\n                 // Respan to include both operators.\n-                let op_span = op.span.to(self.token.span);\n+                let op_span = op.span.to(self.prev_span);\n                 let mut err = self.struct_span_err(\n                     op_span,\n                     \"chained comparison operators require parentheses\",\n                 );\n+\n+                let suggest = |err: &mut DiagnosticBuilder<'_>| {\n+                    err.span_suggestion_verbose(\n+                        op_span.shrink_to_lo(),\n+                        TURBOFISH,\n+                        \"::\".to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                };\n+\n                 if op.node == BinOpKind::Lt &&\n                     *outer_op == AssocOp::Less ||  // Include `<` to provide this recommendation\n                     *outer_op == AssocOp::Greater  // even in a case like the following:\n                 {                                  //     Foo<Bar<Baz<Qux, ()>>>\n-                    err.help(\n-                        \"use `::<...>` instead of `<...>` if you meant to specify type arguments\");\n-                    err.help(\"or use `(...)` if you meant to specify fn arguments\");\n-                    // These cases cause too many knock-down errors, bail out (#61329).\n-                    return Err(err);\n+                    if *outer_op == AssocOp::Less {\n+                        let snapshot = self.clone();\n+                        self.bump();\n+                        // So far we have parsed `foo<bar<`, consume the rest of the type args.\n+                        let modifiers = [\n+                            (token::Lt, 1),\n+                            (token::Gt, -1),\n+                            (token::BinOp(token::Shr), -2),\n+                        ];\n+                        self.consume_tts(1, &modifiers[..]);\n+\n+                        if !&[\n+                            token::OpenDelim(token::Paren),\n+                            token::ModSep,\n+                        ].contains(&self.token.kind) {\n+                            // We don't have `foo< bar >(` or `foo< bar >::`, so we rewind the\n+                            // parser and bail out.\n+                            mem::replace(self, snapshot.clone());\n+                        }\n+                    }\n+                    return if token::ModSep == self.token.kind {\n+                        // We have some certainty that this was a bad turbofish at this point.\n+                        // `foo< bar >::`\n+                        suggest(&mut err);\n+\n+                        let snapshot = self.clone();\n+                        self.bump(); // `::`\n+\n+                        // Consume the rest of the likely `foo<bar>::new()` or return at `foo<bar>`.\n+                        match self.parse_expr() {\n+                            Ok(_) => {\n+                                // 99% certain that the suggestion is correct, continue parsing.\n+                                err.emit();\n+                                // FIXME: actually check that the two expressions in the binop are\n+                                // paths and resynthesize new fn call expression instead of using\n+                                // `ExprKind::Err` placeholder.\n+                                mk_err_expr(self, lhs.span.to(self.prev_span))\n+                            }\n+                            Err(mut expr_err) => {\n+                                expr_err.cancel();\n+                                // Not entirely sure now, but we bubble the error up with the\n+                                // suggestion.\n+                                mem::replace(self, snapshot);\n+                                Err(err)\n+                            }\n+                        }\n+                    } else if token::OpenDelim(token::Paren) == self.token.kind {\n+                        // We have high certainty that this was a bad turbofish at this point.\n+                        // `foo< bar >(`\n+                        suggest(&mut err);\n+                        // Consume the fn call arguments.\n+                        match self.consume_fn_args() {\n+                            Err(()) => Err(err),\n+                            Ok(()) => {\n+                                err.emit();\n+                                // FIXME: actually check that the two expressions in the binop are\n+                                // paths and resynthesize new fn call expression instead of using\n+                                // `ExprKind::Err` placeholder.\n+                                mk_err_expr(self, lhs.span.to(self.prev_span))\n+                            }\n+                        }\n+                    } else {\n+                        // All we know is that this is `foo < bar >` and *nothing* else. Try to\n+                        // be helpful, but don't attempt to recover.\n+                        err.help(TURBOFISH);\n+                        err.help(\"or use `(...)` if you meant to specify fn arguments\");\n+                        // These cases cause too many knock-down errors, bail out (#61329).\n+                        Err(err)\n+                    };\n                 }\n                 err.emit();\n             }\n             _ => {}\n         }\n-        Ok(())\n+        Ok(None)\n+    }\n+\n+    fn consume_fn_args(&mut self) -> Result<(), ()> {\n+        let snapshot = self.clone();\n+        self.bump(); // `(`\n+\n+        // Consume the fn call arguments.\n+        let modifiers = [\n+            (token::OpenDelim(token::Paren), 1),\n+            (token::CloseDelim(token::Paren), -1),\n+        ];\n+        self.consume_tts(1, &modifiers[..]);\n+\n+        if self.token.kind == token::Eof {\n+            // Not entirely sure that what we consumed were fn arguments, rollback.\n+            mem::replace(self, snapshot);\n+            Err(())\n+        } else {\n+            // 99% certain that the suggestion is correct, continue parsing.\n+            Ok(())\n+        }\n     }\n \n     crate fn maybe_report_ambiguous_plus(\n@@ -1364,6 +1484,23 @@ impl<'a> Parser<'a> {\n         err\n     }\n \n+    fn consume_tts(\n+        &mut self,\n+        mut acc: i64, // `i64` because malformed code can have more closing delims than opening.\n+        // Not using `FxHashMap` due to `token::TokenKind: !Eq + !Hash`.\n+        modifier: &[(token::TokenKind, i64)],\n+    ) {\n+        while acc > 0 {\n+            if let Some((_, val)) = modifier.iter().find(|(t, _)| *t == self.token.kind) {\n+                acc += *val;\n+            }\n+            if self.token.kind == token::Eof {\n+                break;\n+            }\n+            self.bump();\n+        }\n+    }\n+\n     /// Replace duplicated recovered parameters with `_` pattern to avoid unecessary errors.\n     ///\n     /// This is necessary because at this point we don't know whether we parsed a function with"}, {"sha": "b459782d237c7c6ecbeadc84db10eef5e203fc1a", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -238,7 +238,9 @@ impl<'a> Parser<'a> {\n \n             self.bump();\n             if op.is_comparison() {\n-                self.check_no_chained_comparison(&lhs, &op)?;\n+                if let Some(expr) = self.check_no_chained_comparison(&lhs, &op)? {\n+                    return Ok(expr);\n+                }\n             }\n             // Special cases:\n             if op == AssocOp::As {"}, {"sha": "48f9e30161031948dcadbce9e40bd106e8a3aaea", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -4,7 +4,7 @@ use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n use crate::ptr::P;\n use crate::ast::{self, Attribute, Pat, PatKind, FieldPat, RangeEnd, RangeSyntax, Mac};\n use crate::ast::{BindingMode, Ident, Mutability, Path, QSelf, Expr, ExprKind};\n-use crate::mut_visit::{noop_visit_pat, MutVisitor};\n+use crate::mut_visit::{noop_visit_pat, noop_visit_mac, MutVisitor};\n use crate::parse::token::{self};\n use crate::print::pprust;\n use crate::source_map::{respan, Span, Spanned};\n@@ -481,6 +481,10 @@ impl<'a> Parser<'a> {\n     fn make_all_value_bindings_mutable(pat: &mut P<Pat>) -> bool {\n         struct AddMut(bool);\n         impl MutVisitor for AddMut {\n+            fn visit_mac(&mut self, mac: &mut Mac) {\n+                noop_visit_mac(mac, self);\n+            }\n+\n             fn visit_pat(&mut self, pat: &mut P<Pat>) {\n                 if let PatKind::Ident(BindingMode::ByValue(ref mut m @ Mutability::Immutable), ..)\n                     = pat.kind"}, {"sha": "8b76080fc68c61718d6e3e69c59a07e9691d8df2", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1478,9 +1478,9 @@ pub fn run_test(\n ) {\n     let TestDescAndFn { desc, testfn } = test;\n \n-    // FIXME: Re-enable emscripten once it can catch panics again\n-    let ignore_because_no_process_support = desc.should_panic != ShouldPanic::No\n-        && (cfg!(target_arch = \"wasm32\") || cfg!(target_os = \"emscripten\"));\n+    let ignore_because_no_process_support = cfg!(target_arch = \"wasm32\")\n+        && !cfg!(target_os = \"emscripten\")\n+        && desc.should_panic != ShouldPanic::No;\n \n     if force_ignore || desc.ignore || ignore_because_no_process_support {\n         monitor_ch.send((desc, TrIgnored, None, Vec::new())).unwrap();"}, {"sha": "b95fb5df710d35873be882a3900c6b8c4dd97ac7", "filename": "src/libtest/tests.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibtest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Flibtest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Ftests.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -2,7 +2,7 @@ use super::*;\n \n use crate::test::{\n     filter_tests, parse_opts, run_test, DynTestFn, DynTestName, MetricMap, RunIgnored, RunStrategy,\n-    ShouldPanic, StaticTestName, TestDesc, TestDescAndFn, TestOpts,\n+    ShouldPanic, StaticTestName, TestDesc, TestDescAndFn, TestOpts, TrFailedMsg,\n     TrIgnored, TrOk,\n };\n use std::sync::mpsc::channel;\n@@ -90,9 +90,7 @@ pub fn ignored_tests_result_in_ignored() {\n     assert!(res == TrIgnored);\n }\n \n-// FIXME: Re-enable emscripten once it can catch panics again\n #[test]\n-#[cfg(not(target_os = \"emscripten\"))]\n fn test_should_panic() {\n     fn f() {\n         panic!();\n@@ -112,9 +110,7 @@ fn test_should_panic() {\n     assert!(res == TrOk);\n }\n \n-// FIXME: Re-enable emscripten once it can catch panics again\n #[test]\n-#[cfg(not(target_os = \"emscripten\"))]\n fn test_should_panic_good_message() {\n     fn f() {\n         panic!(\"an error message\");\n@@ -134,11 +130,8 @@ fn test_should_panic_good_message() {\n     assert!(res == TrOk);\n }\n \n-// FIXME: Re-enable emscripten once it can catch panics again\n #[test]\n-#[cfg(not(target_os = \"emscripten\"))]\n fn test_should_panic_bad_message() {\n-    use crate::tests::TrFailedMsg;\n     fn f() {\n         panic!(\"an error message\");\n     }\n@@ -159,9 +152,7 @@ fn test_should_panic_bad_message() {\n     assert!(res == TrFailedMsg(format!(\"{} '{}'\", failed_msg, expected)));\n }\n \n-// FIXME: Re-enable emscripten once it can catch panics again\n #[test]\n-#[cfg(not(target_os = \"emscripten\"))]\n fn test_should_panic_but_succeeds() {\n     fn f() {}\n     let desc = TestDescAndFn {"}, {"sha": "2acf95de97ee8fcf4ecd83829ac3f92b274cb8a2", "filename": "src/test/codegen/c-variadic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fc-variadic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fc-variadic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fc-variadic.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,4 +1,3 @@\n-// ignore-emscripten compiled with panic=abort by default\n // compile-flags: -C no-prepopulate-passes\n // ignore-tidy-linelength\n "}, {"sha": "307c4e2c1e273b061c987bc20c538996e42c4c68", "filename": "src/test/codegen/drop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdrop.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,4 +1,3 @@\n-// ignore-emscripten compiled with panic=abort by default\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "a935d8865226777371e97ea07c52039f46ddaead", "filename": "src/test/codegen/extern-functions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fextern-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fextern-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fextern-functions.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,4 +1,3 @@\n-// ignore-emscripten compiled with panic=abort by default\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "e44373926b76aa45cb952d54f11808fe367fe62d", "filename": "src/test/codegen/external-no-mangle-statics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,4 +1,3 @@\n-// ignore-emscripten default visibility is hidden\n // compile-flags: -O\n // `#[no_mangle]`d static variables always have external linkage, i.e., no `internal` in their\n // definitions"}, {"sha": "86c1365fdb7118977c0db1d29cfe9a9a9afdf026", "filename": "src/test/codegen/link_section.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Flink_section.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Flink_section.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Flink_section.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,4 +1,3 @@\n-// ignore-emscripten default visibility is hidden\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "ad497b25a9ec52e8330b41bf4d3c616002428e65", "filename": "src/test/codegen/no-output-asm-is-volatile.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fno-output-asm-is-volatile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fno-output-asm-is-volatile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fno-output-asm-is-volatile.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,5 +1,7 @@\n // compile-flags: -O\n \n+// ignore-asmjs\n+\n #![feature(asm)]\n #![crate_type = \"lib\"]\n "}, {"sha": "05888c0e733ad10bbcb52a7a40a238d9e29c319c", "filename": "src/test/codegen/personality_lifetimes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fpersonality_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fpersonality_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpersonality_lifetimes.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,5 +1,4 @@\n // ignore-msvc\n-// ignore-emscripten compiled with panic=abort by default\n \n // compile-flags: -O -C no-prepopulate-passes\n "}, {"sha": "5521c3c849f5363a661ec24f58235e503cfae22f", "filename": "src/test/codegen/repr-transparent-aggregates-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,14 +1,15 @@\n // compile-flags: -C no-prepopulate-passes\n \n // ignore-aarch64\n-// ignore-emscripten\n+// ignore-asmjs\n // ignore-mips64\n // ignore-powerpc\n // ignore-powerpc64\n // ignore-powerpc64le\n // ignore-s390x\n // ignore-sparc\n // ignore-sparc64\n+// ignore-wasm\n // ignore-x86\n // ignore-x86_64\n // See repr-transparent.rs"}, {"sha": "acb993d51fb8c928aa9138d1cc3c14f8e4ac95f9", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-abs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-abs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-abs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-abs.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "58667af7e50edcb0dcd7eff217adcea710616ac7", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-ceil.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-ceil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-ceil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-ceil.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "affbe17d3341f22f870846c0caf3e8ac52300470", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-cos.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-cos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-cos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-cos.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "43472d9dece8ea98f278cb887f1f197262b3b61d", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-exp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "471d49b7841eceea455f324229930bdb2917ed12", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-exp2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp2.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "bd8ba8b6cd774a286cc0ea39e7c5274c0921b232", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-floor.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-floor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-floor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-floor.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "8ad9e9004c2cd77b578f399f5c3c3141ca613ae1", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-fma.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fma.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "ecffca960dab4d4d2646cdaf9898a81e86d01c48", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-fsqrt.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fsqrt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fsqrt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fsqrt.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "79e6ed54690bf9628eafd64dbc119d3861802222", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-log.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "db92a94fca84b32c6cb59e783b11b7d1df470e89", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-log10.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log10.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "90d9ec3cedd6f5a7d1ffb419721cc48bdb0a5e49", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-log2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log2.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "2761392e6a92357be53c3a39e4466d7a8136b4a0", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-minmax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-minmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-minmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-minmax.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,3 +1,4 @@\n+// ignore-emscripten\n // min-llvm-version 7.0\n \n // compile-flags: -C no-prepopulate-passes"}, {"sha": "1dd2c2ccb83db98c6f70bb6c77efecf4bfbf6088", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-pow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-pow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-pow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-pow.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "09f31bdd6bbdfa56de0fa80e88c061b91f0103b9", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-powi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-powi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-powi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-powi.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "dc87651c2aa1f058d81fcef013132b7ada2d0120", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-sin.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-sin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-sin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-sin.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,3 +1,5 @@\n+// ignore-emscripten\n+\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "adee796d2475a19302082318c19a93dfef86bf48", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-generic-arithmetic-saturating.rs", "status": "modified", "additions": 80, "deletions": 80, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -119,140 +119,140 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @sadd_i8x2\n #[no_mangle]\n pub unsafe fn sadd_i8x2(x: i8x2, y: i8x2) -> i8x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.sadd.sat.v2i8(<2 x i8> %{{[0-9a-z]+}}, <2 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.sadd.sat.v2i8(<2 x i8> %{{[0-9]+}}, <2 x i8> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i8x4\n #[no_mangle]\n pub unsafe fn sadd_i8x4(x: i8x4, y: i8x4) -> i8x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.sadd.sat.v4i8(<4 x i8> %{{[0-9a-z]+}}, <4 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.sadd.sat.v4i8(<4 x i8> %{{[0-9]+}}, <4 x i8> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i8x8\n #[no_mangle]\n pub unsafe fn sadd_i8x8(x: i8x8, y: i8x8) -> i8x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.sadd.sat.v8i8(<8 x i8> %{{[0-9a-z]+}}, <8 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.sadd.sat.v8i8(<8 x i8> %{{[0-9]+}}, <8 x i8> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i8x16\n #[no_mangle]\n pub unsafe fn sadd_i8x16(x: i8x16, y: i8x16) -> i8x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8> %{{[0-9a-z]+}}, <16 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8> %{{[0-9]+}}, <16 x i8> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i8x32\n #[no_mangle]\n pub unsafe fn sadd_i8x32(x: i8x32, y: i8x32) -> i8x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.sadd.sat.v32i8(<32 x i8> %{{[0-9a-z]+}}, <32 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.sadd.sat.v32i8(<32 x i8> %{{[0-9]+}}, <32 x i8> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i8x64\n #[no_mangle]\n pub unsafe fn sadd_i8x64(x: i8x64, y: i8x64) -> i8x64 {\n-    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.sadd.sat.v64i8(<64 x i8> %{{[0-9a-z]+}}, <64 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.sadd.sat.v64i8(<64 x i8> %{{[0-9]+}}, <64 x i8> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i16x2\n #[no_mangle]\n pub unsafe fn sadd_i16x2(x: i16x2, y: i16x2) -> i16x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.sadd.sat.v2i16(<2 x i16> %{{[0-9a-z]+}}, <2 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.sadd.sat.v2i16(<2 x i16> %{{[0-9]+}}, <2 x i16> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i16x4\n #[no_mangle]\n pub unsafe fn sadd_i16x4(x: i16x4, y: i16x4) -> i16x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.sadd.sat.v4i16(<4 x i16> %{{[0-9a-z]+}}, <4 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.sadd.sat.v4i16(<4 x i16> %{{[0-9]+}}, <4 x i16> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i16x8\n #[no_mangle]\n pub unsafe fn sadd_i16x8(x: i16x8, y: i16x8) -> i16x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %{{[0-9a-z]+}}, <8 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %{{[0-9]+}}, <8 x i16> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i16x16\n #[no_mangle]\n pub unsafe fn sadd_i16x16(x: i16x16, y: i16x16) -> i16x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %{{[0-9a-z]+}}, <16 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %{{[0-9]+}}, <16 x i16> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i16x32\n #[no_mangle]\n pub unsafe fn sadd_i16x32(x: i16x32, y: i16x32) -> i16x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.sadd.sat.v32i16(<32 x i16> %{{[0-9a-z]+}}, <32 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.sadd.sat.v32i16(<32 x i16> %{{[0-9]+}}, <32 x i16> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i32x2\n #[no_mangle]\n pub unsafe fn sadd_i32x2(x: i32x2, y: i32x2) -> i32x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.sadd.sat.v2i32(<2 x i32> %{{[0-9a-z]+}}, <2 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.sadd.sat.v2i32(<2 x i32> %{{[0-9]+}}, <2 x i32> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i32x4\n #[no_mangle]\n pub unsafe fn sadd_i32x4(x: i32x4, y: i32x4) -> i32x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.sadd.sat.v4i32(<4 x i32> %{{[0-9a-z]+}}, <4 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.sadd.sat.v4i32(<4 x i32> %{{[0-9]+}}, <4 x i32> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i32x8\n #[no_mangle]\n pub unsafe fn sadd_i32x8(x: i32x8, y: i32x8) -> i32x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.sadd.sat.v8i32(<8 x i32> %{{[0-9a-z]+}}, <8 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.sadd.sat.v8i32(<8 x i32> %{{[0-9]+}}, <8 x i32> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i32x16\n #[no_mangle]\n pub unsafe fn sadd_i32x16(x: i32x16, y: i32x16) -> i32x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.sadd.sat.v16i32(<16 x i32> %{{[0-9a-z]+}}, <16 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.sadd.sat.v16i32(<16 x i32> %{{[0-9]+}}, <16 x i32> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i64x2\n #[no_mangle]\n pub unsafe fn sadd_i64x2(x: i64x2, y: i64x2) -> i64x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.sadd.sat.v2i64(<2 x i64> %{{[0-9a-z]+}}, <2 x i64> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.sadd.sat.v2i64(<2 x i64> %{{[0-9]+}}, <2 x i64> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i64x4\n #[no_mangle]\n pub unsafe fn sadd_i64x4(x: i64x4, y: i64x4) -> i64x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.sadd.sat.v4i64(<4 x i64> %{{[0-9a-z]+}}, <4 x i64> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.sadd.sat.v4i64(<4 x i64> %{{[0-9]+}}, <4 x i64> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i64x8\n #[no_mangle]\n pub unsafe fn sadd_i64x8(x: i64x8, y: i64x8) -> i64x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.sadd.sat.v8i64(<8 x i64> %{{[0-9a-z]+}}, <8 x i64> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.sadd.sat.v8i64(<8 x i64> %{{[0-9]+}}, <8 x i64> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i128x2\n #[no_mangle]\n pub unsafe fn sadd_i128x2(x: i128x2, y: i128x2) -> i128x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.sadd.sat.v2i128(<2 x i128> %{{[0-9a-z]+}}, <2 x i128> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.sadd.sat.v2i128(<2 x i128> %{{[0-9]+}}, <2 x i128> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i128x4\n #[no_mangle]\n pub unsafe fn sadd_i128x4(x: i128x4, y: i128x4) -> i128x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.sadd.sat.v4i128(<4 x i128> %{{[0-9a-z]+}}, <4 x i128> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.sadd.sat.v4i128(<4 x i128> %{{[0-9]+}}, <4 x i128> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n@@ -261,140 +261,140 @@ pub unsafe fn sadd_i128x4(x: i128x4, y: i128x4) -> i128x4 {\n // CHECK-LABEL: @uadd_u8x2\n #[no_mangle]\n pub unsafe fn uadd_u8x2(x: u8x2, y: u8x2) -> u8x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.uadd.sat.v2i8(<2 x i8> %{{[0-9a-z]+}}, <2 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.uadd.sat.v2i8(<2 x i8> %{{[0-9]+}}, <2 x i8> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u8x4\n #[no_mangle]\n pub unsafe fn uadd_u8x4(x: u8x4, y: u8x4) -> u8x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.uadd.sat.v4i8(<4 x i8> %{{[0-9a-z]+}}, <4 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.uadd.sat.v4i8(<4 x i8> %{{[0-9]+}}, <4 x i8> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u8x8\n #[no_mangle]\n pub unsafe fn uadd_u8x8(x: u8x8, y: u8x8) -> u8x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.uadd.sat.v8i8(<8 x i8> %{{[0-9a-z]+}}, <8 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.uadd.sat.v8i8(<8 x i8> %{{[0-9]+}}, <8 x i8> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u8x16\n #[no_mangle]\n pub unsafe fn uadd_u8x16(x: u8x16, y: u8x16) -> u8x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %{{[0-9a-z]+}}, <16 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %{{[0-9]+}}, <16 x i8> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u8x32\n #[no_mangle]\n pub unsafe fn uadd_u8x32(x: u8x32, y: u8x32) -> u8x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.uadd.sat.v32i8(<32 x i8> %{{[0-9a-z]+}}, <32 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.uadd.sat.v32i8(<32 x i8> %{{[0-9]+}}, <32 x i8> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u8x64\n #[no_mangle]\n pub unsafe fn uadd_u8x64(x: u8x64, y: u8x64) -> u8x64 {\n-    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.uadd.sat.v64i8(<64 x i8> %{{[0-9a-z]+}}, <64 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.uadd.sat.v64i8(<64 x i8> %{{[0-9]+}}, <64 x i8> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u16x2\n #[no_mangle]\n pub unsafe fn uadd_u16x2(x: u16x2, y: u16x2) -> u16x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.uadd.sat.v2i16(<2 x i16> %{{[0-9a-z]+}}, <2 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.uadd.sat.v2i16(<2 x i16> %{{[0-9]+}}, <2 x i16> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u16x4\n #[no_mangle]\n pub unsafe fn uadd_u16x4(x: u16x4, y: u16x4) -> u16x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.uadd.sat.v4i16(<4 x i16> %{{[0-9a-z]+}}, <4 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.uadd.sat.v4i16(<4 x i16> %{{[0-9]+}}, <4 x i16> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u16x8\n #[no_mangle]\n pub unsafe fn uadd_u16x8(x: u16x8, y: u16x8) -> u16x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %{{[0-9a-z]+}}, <8 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %{{[0-9]+}}, <8 x i16> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u16x16\n #[no_mangle]\n pub unsafe fn uadd_u16x16(x: u16x16, y: u16x16) -> u16x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.uadd.sat.v16i16(<16 x i16> %{{[0-9a-z]+}}, <16 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.uadd.sat.v16i16(<16 x i16> %{{[0-9]+}}, <16 x i16> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u16x32\n #[no_mangle]\n pub unsafe fn uadd_u16x32(x: u16x32, y: u16x32) -> u16x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.uadd.sat.v32i16(<32 x i16> %{{[0-9a-z]+}}, <32 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.uadd.sat.v32i16(<32 x i16> %{{[0-9]+}}, <32 x i16> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u32x2\n #[no_mangle]\n pub unsafe fn uadd_u32x2(x: u32x2, y: u32x2) -> u32x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.uadd.sat.v2i32(<2 x i32> %{{[0-9a-z]+}}, <2 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.uadd.sat.v2i32(<2 x i32> %{{[0-9]+}}, <2 x i32> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u32x4\n #[no_mangle]\n pub unsafe fn uadd_u32x4(x: u32x4, y: u32x4) -> u32x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.uadd.sat.v4i32(<4 x i32> %{{[0-9a-z]+}}, <4 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.uadd.sat.v4i32(<4 x i32> %{{[0-9]+}}, <4 x i32> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u32x8\n #[no_mangle]\n pub unsafe fn uadd_u32x8(x: u32x8, y: u32x8) -> u32x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.uadd.sat.v8i32(<8 x i32> %{{[0-9a-z]+}}, <8 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.uadd.sat.v8i32(<8 x i32> %{{[0-9]+}}, <8 x i32> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u32x16\n #[no_mangle]\n pub unsafe fn uadd_u32x16(x: u32x16, y: u32x16) -> u32x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.uadd.sat.v16i32(<16 x i32> %{{[0-9a-z]+}}, <16 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.uadd.sat.v16i32(<16 x i32> %{{[0-9]+}}, <16 x i32> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u64x2\n #[no_mangle]\n pub unsafe fn uadd_u64x2(x: u64x2, y: u64x2) -> u64x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.uadd.sat.v2i64(<2 x i64> %{{[0-9a-z]+}}, <2 x i64> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.uadd.sat.v2i64(<2 x i64> %{{[0-9]+}}, <2 x i64> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u64x4\n #[no_mangle]\n pub unsafe fn uadd_u64x4(x: u64x4, y: u64x4) -> u64x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.uadd.sat.v4i64(<4 x i64> %{{[0-9a-z]+}}, <4 x i64> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.uadd.sat.v4i64(<4 x i64> %{{[0-9]+}}, <4 x i64> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u64x8\n #[no_mangle]\n pub unsafe fn uadd_u64x8(x: u64x8, y: u64x8) -> u64x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.uadd.sat.v8i64(<8 x i64> %{{[0-9a-z]+}}, <8 x i64> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.uadd.sat.v8i64(<8 x i64> %{{[0-9]+}}, <8 x i64> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u128x2\n #[no_mangle]\n pub unsafe fn uadd_u128x2(x: u128x2, y: u128x2) -> u128x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.uadd.sat.v2i128(<2 x i128> %{{[0-9a-z]+}}, <2 x i128> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.uadd.sat.v2i128(<2 x i128> %{{[0-9]+}}, <2 x i128> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u128x4\n #[no_mangle]\n pub unsafe fn uadd_u128x4(x: u128x4, y: u128x4) -> u128x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.uadd.sat.v4i128(<4 x i128> %{{[0-9a-z]+}}, <4 x i128> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.uadd.sat.v4i128(<4 x i128> %{{[0-9]+}}, <4 x i128> %{{[0-9]+}})\n     simd_saturating_add(x, y)\n }\n \n@@ -405,140 +405,140 @@ pub unsafe fn uadd_u128x4(x: u128x4, y: u128x4) -> u128x4 {\n // CHECK-LABEL: @ssub_i8x2\n #[no_mangle]\n pub unsafe fn ssub_i8x2(x: i8x2, y: i8x2) -> i8x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.ssub.sat.v2i8(<2 x i8> %{{[0-9a-z]+}}, <2 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.ssub.sat.v2i8(<2 x i8> %{{[0-9]+}}, <2 x i8> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i8x4\n #[no_mangle]\n pub unsafe fn ssub_i8x4(x: i8x4, y: i8x4) -> i8x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.ssub.sat.v4i8(<4 x i8> %{{[0-9a-z]+}}, <4 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.ssub.sat.v4i8(<4 x i8> %{{[0-9]+}}, <4 x i8> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i8x8\n #[no_mangle]\n pub unsafe fn ssub_i8x8(x: i8x8, y: i8x8) -> i8x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.ssub.sat.v8i8(<8 x i8> %{{[0-9a-z]+}}, <8 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.ssub.sat.v8i8(<8 x i8> %{{[0-9]+}}, <8 x i8> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i8x16\n #[no_mangle]\n pub unsafe fn ssub_i8x16(x: i8x16, y: i8x16) -> i8x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8> %{{[0-9a-z]+}}, <16 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8> %{{[0-9]+}}, <16 x i8> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i8x32\n #[no_mangle]\n pub unsafe fn ssub_i8x32(x: i8x32, y: i8x32) -> i8x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.ssub.sat.v32i8(<32 x i8> %{{[0-9a-z]+}}, <32 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.ssub.sat.v32i8(<32 x i8> %{{[0-9]+}}, <32 x i8> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i8x64\n #[no_mangle]\n pub unsafe fn ssub_i8x64(x: i8x64, y: i8x64) -> i8x64 {\n-    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.ssub.sat.v64i8(<64 x i8> %{{[0-9a-z]+}}, <64 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.ssub.sat.v64i8(<64 x i8> %{{[0-9]+}}, <64 x i8> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i16x2\n #[no_mangle]\n pub unsafe fn ssub_i16x2(x: i16x2, y: i16x2) -> i16x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.ssub.sat.v2i16(<2 x i16> %{{[0-9a-z]+}}, <2 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.ssub.sat.v2i16(<2 x i16> %{{[0-9]+}}, <2 x i16> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i16x4\n #[no_mangle]\n pub unsafe fn ssub_i16x4(x: i16x4, y: i16x4) -> i16x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.ssub.sat.v4i16(<4 x i16> %{{[0-9a-z]+}}, <4 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.ssub.sat.v4i16(<4 x i16> %{{[0-9]+}}, <4 x i16> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i16x8\n #[no_mangle]\n pub unsafe fn ssub_i16x8(x: i16x8, y: i16x8) -> i16x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %{{[0-9a-z]+}}, <8 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %{{[0-9]+}}, <8 x i16> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i16x16\n #[no_mangle]\n pub unsafe fn ssub_i16x16(x: i16x16, y: i16x16) -> i16x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.ssub.sat.v16i16(<16 x i16> %{{[0-9a-z]+}}, <16 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.ssub.sat.v16i16(<16 x i16> %{{[0-9]+}}, <16 x i16> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i16x32\n #[no_mangle]\n pub unsafe fn ssub_i16x32(x: i16x32, y: i16x32) -> i16x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.ssub.sat.v32i16(<32 x i16> %{{[0-9a-z]+}}, <32 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.ssub.sat.v32i16(<32 x i16> %{{[0-9]+}}, <32 x i16> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i32x2\n #[no_mangle]\n pub unsafe fn ssub_i32x2(x: i32x2, y: i32x2) -> i32x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.ssub.sat.v2i32(<2 x i32> %{{[0-9a-z]+}}, <2 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.ssub.sat.v2i32(<2 x i32> %{{[0-9]+}}, <2 x i32> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i32x4\n #[no_mangle]\n pub unsafe fn ssub_i32x4(x: i32x4, y: i32x4) -> i32x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.ssub.sat.v4i32(<4 x i32> %{{[0-9a-z]+}}, <4 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.ssub.sat.v4i32(<4 x i32> %{{[0-9]+}}, <4 x i32> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i32x8\n #[no_mangle]\n pub unsafe fn ssub_i32x8(x: i32x8, y: i32x8) -> i32x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.ssub.sat.v8i32(<8 x i32> %{{[0-9a-z]+}}, <8 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.ssub.sat.v8i32(<8 x i32> %{{[0-9]+}}, <8 x i32> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i32x16\n #[no_mangle]\n pub unsafe fn ssub_i32x16(x: i32x16, y: i32x16) -> i32x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.ssub.sat.v16i32(<16 x i32> %{{[0-9a-z]+}}, <16 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.ssub.sat.v16i32(<16 x i32> %{{[0-9]+}}, <16 x i32> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i64x2\n #[no_mangle]\n pub unsafe fn ssub_i64x2(x: i64x2, y: i64x2) -> i64x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.ssub.sat.v2i64(<2 x i64> %{{[0-9a-z]+}}, <2 x i64> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.ssub.sat.v2i64(<2 x i64> %{{[0-9]+}}, <2 x i64> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i64x4\n #[no_mangle]\n pub unsafe fn ssub_i64x4(x: i64x4, y: i64x4) -> i64x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.ssub.sat.v4i64(<4 x i64> %{{[0-9a-z]+}}, <4 x i64> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.ssub.sat.v4i64(<4 x i64> %{{[0-9]+}}, <4 x i64> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i64x8\n #[no_mangle]\n pub unsafe fn ssub_i64x8(x: i64x8, y: i64x8) -> i64x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.ssub.sat.v8i64(<8 x i64> %{{[0-9a-z]+}}, <8 x i64> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.ssub.sat.v8i64(<8 x i64> %{{[0-9]+}}, <8 x i64> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i128x2\n #[no_mangle]\n pub unsafe fn ssub_i128x2(x: i128x2, y: i128x2) -> i128x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.ssub.sat.v2i128(<2 x i128> %{{[0-9a-z]+}}, <2 x i128> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.ssub.sat.v2i128(<2 x i128> %{{[0-9]+}}, <2 x i128> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i128x4\n #[no_mangle]\n pub unsafe fn ssub_i128x4(x: i128x4, y: i128x4) -> i128x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.ssub.sat.v4i128(<4 x i128> %{{[0-9a-z]+}}, <4 x i128> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.ssub.sat.v4i128(<4 x i128> %{{[0-9]+}}, <4 x i128> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n@@ -547,139 +547,139 @@ pub unsafe fn ssub_i128x4(x: i128x4, y: i128x4) -> i128x4 {\n // CHECK-LABEL: @usub_u8x2\n #[no_mangle]\n pub unsafe fn usub_u8x2(x: u8x2, y: u8x2) -> u8x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.usub.sat.v2i8(<2 x i8> %{{[0-9a-z]+}}, <2 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.usub.sat.v2i8(<2 x i8> %{{[0-9]+}}, <2 x i8> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u8x4\n #[no_mangle]\n pub unsafe fn usub_u8x4(x: u8x4, y: u8x4) -> u8x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.usub.sat.v4i8(<4 x i8> %{{[0-9a-z]+}}, <4 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.usub.sat.v4i8(<4 x i8> %{{[0-9]+}}, <4 x i8> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u8x8\n #[no_mangle]\n pub unsafe fn usub_u8x8(x: u8x8, y: u8x8) -> u8x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.usub.sat.v8i8(<8 x i8> %{{[0-9a-z]+}}, <8 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.usub.sat.v8i8(<8 x i8> %{{[0-9]+}}, <8 x i8> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u8x16\n #[no_mangle]\n pub unsafe fn usub_u8x16(x: u8x16, y: u8x16) -> u8x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %{{[0-9a-z]+}}, <16 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %{{[0-9]+}}, <16 x i8> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u8x32\n #[no_mangle]\n pub unsafe fn usub_u8x32(x: u8x32, y: u8x32) -> u8x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.usub.sat.v32i8(<32 x i8> %{{[0-9a-z]+}}, <32 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.usub.sat.v32i8(<32 x i8> %{{[0-9]+}}, <32 x i8> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u8x64\n #[no_mangle]\n pub unsafe fn usub_u8x64(x: u8x64, y: u8x64) -> u8x64 {\n-    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.usub.sat.v64i8(<64 x i8> %{{[0-9a-z]+}}, <64 x i8> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.usub.sat.v64i8(<64 x i8> %{{[0-9]+}}, <64 x i8> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u16x2\n #[no_mangle]\n pub unsafe fn usub_u16x2(x: u16x2, y: u16x2) -> u16x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.usub.sat.v2i16(<2 x i16> %{{[0-9a-z]+}}, <2 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.usub.sat.v2i16(<2 x i16> %{{[0-9]+}}, <2 x i16> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u16x4\n #[no_mangle]\n pub unsafe fn usub_u16x4(x: u16x4, y: u16x4) -> u16x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.usub.sat.v4i16(<4 x i16> %{{[0-9a-z]+}}, <4 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.usub.sat.v4i16(<4 x i16> %{{[0-9]+}}, <4 x i16> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u16x8\n #[no_mangle]\n pub unsafe fn usub_u16x8(x: u16x8, y: u16x8) -> u16x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %{{[0-9a-z]+}}, <8 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %{{[0-9]+}}, <8 x i16> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u16x16\n #[no_mangle]\n pub unsafe fn usub_u16x16(x: u16x16, y: u16x16) -> u16x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.usub.sat.v16i16(<16 x i16> %{{[0-9a-z]+}}, <16 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.usub.sat.v16i16(<16 x i16> %{{[0-9]+}}, <16 x i16> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u16x32\n #[no_mangle]\n pub unsafe fn usub_u16x32(x: u16x32, y: u16x32) -> u16x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.usub.sat.v32i16(<32 x i16> %{{[0-9a-z]+}}, <32 x i16> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.usub.sat.v32i16(<32 x i16> %{{[0-9]+}}, <32 x i16> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u32x2\n #[no_mangle]\n pub unsafe fn usub_u32x2(x: u32x2, y: u32x2) -> u32x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.usub.sat.v2i32(<2 x i32> %{{[0-9a-z]+}}, <2 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.usub.sat.v2i32(<2 x i32> %{{[0-9]+}}, <2 x i32> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u32x4\n #[no_mangle]\n pub unsafe fn usub_u32x4(x: u32x4, y: u32x4) -> u32x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.usub.sat.v4i32(<4 x i32> %{{[0-9a-z]+}}, <4 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.usub.sat.v4i32(<4 x i32> %{{[0-9]+}}, <4 x i32> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u32x8\n #[no_mangle]\n pub unsafe fn usub_u32x8(x: u32x8, y: u32x8) -> u32x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.usub.sat.v8i32(<8 x i32> %{{[0-9a-z]+}}, <8 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.usub.sat.v8i32(<8 x i32> %{{[0-9]+}}, <8 x i32> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u32x16\n #[no_mangle]\n pub unsafe fn usub_u32x16(x: u32x16, y: u32x16) -> u32x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.usub.sat.v16i32(<16 x i32> %{{[0-9a-z]+}}, <16 x i32> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.usub.sat.v16i32(<16 x i32> %{{[0-9]+}}, <16 x i32> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u64x2\n #[no_mangle]\n pub unsafe fn usub_u64x2(x: u64x2, y: u64x2) -> u64x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.usub.sat.v2i64(<2 x i64> %{{[0-9a-z]+}}, <2 x i64> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.usub.sat.v2i64(<2 x i64> %{{[0-9]+}}, <2 x i64> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u64x4\n #[no_mangle]\n pub unsafe fn usub_u64x4(x: u64x4, y: u64x4) -> u64x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.usub.sat.v4i64(<4 x i64> %{{[0-9a-z]+}}, <4 x i64> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.usub.sat.v4i64(<4 x i64> %{{[0-9]+}}, <4 x i64> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u64x8\n #[no_mangle]\n pub unsafe fn usub_u64x8(x: u64x8, y: u64x8) -> u64x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.usub.sat.v8i64(<8 x i64> %{{[0-9a-z]+}}, <8 x i64> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.usub.sat.v8i64(<8 x i64> %{{[0-9]+}}, <8 x i64> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u128x2\n #[no_mangle]\n pub unsafe fn usub_u128x2(x: u128x2, y: u128x2) -> u128x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.usub.sat.v2i128(<2 x i128> %{{[0-9a-z]+}}, <2 x i128> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.usub.sat.v2i128(<2 x i128> %{{[0-9]+}}, <2 x i128> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u128x4\n #[no_mangle]\n pub unsafe fn usub_u128x4(x: u128x4, y: u128x4) -> u128x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.usub.sat.v4i128(<4 x i128> %{{[0-9a-z]+}}, <4 x i128> %{{[0-9a-z]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.usub.sat.v4i128(<4 x i128> %{{[0-9]+}}, <4 x i128> %{{[0-9]+}})\n     simd_saturating_sub(x, y)\n }"}, {"sha": "cd8130f92314856320a11dbb181882a71ca856ea", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-generic-bitmask.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -29,7 +29,7 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @bitmask_int\n #[no_mangle]\n pub unsafe fn bitmask_int(x: i32x2) -> u8 {\n-    // CHECK: [[A:%[0-9]+]] = lshr <2 x i32> %{{[0-9a-z]+}}, <i32 31, i32 31>\n+    // CHECK: [[A:%[0-9]+]] = lshr <2 x i32> %{{[0-9]+}}, <i32 31, i32 31>\n     // CHECK: [[B:%[0-9]+]] = trunc <2 x i32> [[A]] to <2 x i1>\n     // CHECK: [[C:%[0-9]+]] = bitcast <2 x i1> [[B]] to i2\n     // CHECK: %{{[0-9]+}} = zext i2 [[C]] to i8\n@@ -39,7 +39,7 @@ pub unsafe fn bitmask_int(x: i32x2) -> u8 {\n // CHECK-LABEL: @bitmask_uint\n #[no_mangle]\n pub unsafe fn bitmask_uint(x: u32x2) -> u8 {\n-    // CHECK: [[A:%[0-9]+]] = lshr <2 x i32> %{{[0-9a-z]+}}, <i32 31, i32 31>\n+    // CHECK: [[A:%[0-9]+]] = lshr <2 x i32> %{{[0-9]+}}, <i32 31, i32 31>\n     // CHECK: [[B:%[0-9]+]] = trunc <2 x i32> [[A]] to <2 x i1>\n     // CHECK: [[C:%[0-9]+]] = bitcast <2 x i1> [[B]] to i2\n     // CHECK: %{{[0-9]+}} = zext i2 [[C]] to i8\n@@ -49,7 +49,7 @@ pub unsafe fn bitmask_uint(x: u32x2) -> u8 {\n // CHECK-LABEL: @bitmask_int16\n #[no_mangle]\n pub unsafe fn bitmask_int16(x: i8x16) -> u16 {\n-    // CHECK: [[A:%[0-9]+]] = lshr <16 x i8> %{{[0-9a-z]+}}, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>\n+    // CHECK: [[A:%[0-9]+]] = lshr <16 x i8> %{{[0-9]+}}, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>\n     // CHECK: [[B:%[0-9]+]] = trunc <16 x i8> [[A]] to <16 x i1>\n     // CHECK: %{{[0-9]+}} = bitcast <16 x i1> [[B]] to i16\n     // CHECK-NOT: zext"}, {"sha": "3389104219ddf7df27afbb77ab9a062c05148d5b", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-generic-gather.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-gather.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-gather.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-gather.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,3 +1,4 @@\n+// ignore-emscripten\n // ignore-tidy-linelength\n \n // compile-flags: -C no-prepopulate-passes"}, {"sha": "dd0a9801bc5fa6b9b59e9093fea6b44df3fced0e", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-generic-scatter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-scatter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-scatter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-scatter.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,3 +1,4 @@\n+// ignore-emscripten\n // ignore-tidy-linelength\n \n // compile-flags: -C no-prepopulate-passes"}, {"sha": "7339df17b057a230004e2eb3fbc703fc534ce668", "filename": "src/test/codegen/union-abi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Funion-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcodegen%2Funion-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funion-abi.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,4 +1,3 @@\n-// ignore-emscripten vectors passed directly\n // compile-flags: -C no-prepopulate-passes\n \n // This test that using union forward the abi of the inner type, as"}, {"sha": "768b936dc2713492462dbc190fea536e871c28e6", "filename": "src/test/compile-fail/weak-lang-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,7 +1,7 @@\n // aux-build:weak-lang-items.rs\n // error-pattern: `#[panic_handler]` function required, but not found\n // error-pattern: language item required, but not found: `eh_personality`\n-// ignore-emscripten compiled with panic=abort, personality not required\n+// ignore-wasm32-bare compiled with panic=abort, personality not required\n \n #![no_std]\n "}, {"sha": "f5d1acb621be38e65e868ab3ef75df8b297c5bb4", "filename": "src/test/incremental/change_crate_dep_kind.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fincremental%2Fchange_crate_dep_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fincremental%2Fchange_crate_dep_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_crate_dep_kind.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,7 +1,6 @@\n // Test that we detect changes to the `dep_kind` query. If the change is not\n // detected then -Zincremental-verify-ich will trigger an assertion.\n \n-// ignore-emscripten compiled with panic=abort by default\n // revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph -Cpanic=unwind\n // build-pass (FIXME(62277): could be check-pass?)"}, {"sha": "e5b84267b290312ecf08518de9b08518d1ea78ee", "filename": "src/test/incremental/commandline-args.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fincremental%2Fcommandline-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fincremental%2Fcommandline-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fcommandline-args.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,7 +1,6 @@\n // Test that changing a tracked commandline argument invalidates\n // the cache while changing an untracked one doesn't.\n \n-// ignore-asmjs wasm2js does not support source maps yet\n // revisions:rpass1 rpass2 rpass3\n // compile-flags: -Z query-dep-graph\n "}, {"sha": "12411a928799f2e3a39cbfc6708fdb98f325f924", "filename": "src/test/incremental/remapped_paths_cc/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fmain.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -2,7 +2,6 @@\n // compile-flags: -Z query-dep-graph -g\n // aux-build:extern_crate.rs\n \n-// ignore-asmjs wasm2js does not support source maps yet\n // This test case makes sure that we detect if paths emitted into debuginfo\n // are changed, even when the change happens in an external crate.\n "}, {"sha": "f1d7de1455938d218b8e47cff51d45d7a8db2d74", "filename": "src/test/incremental/span_hash_stable/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fincremental%2Fspan_hash_stable%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fincremental%2Fspan_hash_stable%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspan_hash_stable%2Fmain.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -3,7 +3,6 @@\n // the spans and this test makes sure that we handle them correctly by hashing\n // file:line:column instead of raw byte offset.\n \n-// ignore-asmjs wasm2js does not support source maps yet\n // revisions:rpass1 rpass2\n // compile-flags: -g -Z query-dep-graph\n "}, {"sha": "8ed469db6e6336b7c8a810a2d249f4394443b690", "filename": "src/test/incremental/spans_in_type_debuginfo.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fincremental%2Fspans_in_type_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fincremental%2Fspans_in_type_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspans_in_type_debuginfo.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,7 +1,6 @@\n // Test that moving a type definition within a source file does not affect\n // re-compilation.\n \n-// ignore-asmjs wasm2js does not support source maps yet\n // revisions:rpass1 rpass2\n // compile-flags: -Z query-dep-graph -g\n "}, {"sha": "87c97ba06c46a0c97b0d25bb02179f1243e466f8", "filename": "src/test/incremental/spans_significant_w_debuginfo.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -3,7 +3,6 @@\n \n // revisions:rpass1 rpass2\n \n-// ignore-asmjs wasm2js does not support source maps yet\n // compile-flags: -g -Z query-dep-graph\n \n #![feature(rustc_attrs)]"}, {"sha": "8dc6b73edf6d473ecd804cdd314597fbdb86dcd9", "filename": "src/test/mir-opt/box_expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,4 +1,4 @@\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(box_syntax)]\n "}, {"sha": "109304d6d22ccdd4cb9368c12bbea673702e2f76", "filename": "src/test/mir-opt/generator-storage-dead-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,4 +1,4 @@\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n // Test that we generate StorageDead on unwind paths for generators.\n //"}, {"sha": "e73390f52b5d552fc3287e923a0f52ac9a117c52", "filename": "src/test/mir-opt/issue-41110.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41110.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,4 +1,4 @@\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n // check that we don't emit multiple drop flags when they are not needed.\n "}, {"sha": "a3b517e9bca87bfa0cf295af84a7496c3ad5fe65", "filename": "src/test/mir-opt/issue-62289.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fmir-opt%2Fissue-62289.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fmir-opt%2Fissue-62289.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-62289.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,7 +1,7 @@\n // check that we don't forget to drop the Box if we early return before\n // initializing it\n // ignore-tidy-linelength\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(box_syntax)]\n "}, {"sha": "782bc31186ca5fb8eb8a4931bc077d8579e4d351", "filename": "src/test/mir-opt/no-spurious-drop-after-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,4 +1,4 @@\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n // Test that after the call to `std::mem::drop` we do not generate a\n // MIR drop of the argument. (We used to have a `DROP(_2)` in the code"}, {"sha": "da73cc96348f059e4c15e29ce839204b2b824ed4", "filename": "src/test/mir-opt/packed-struct-drop-aligned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,4 +1,4 @@\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n fn main() {\n     let mut x = Packed(Aligned(Droppy(0)));"}, {"sha": "3245d38b2580bd20a03a44463524eee16b645ca9", "filename": "src/test/mir-opt/remove_fake_borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,6 +1,6 @@\n // Test that the fake borrows for matches are removed after borrow checking.\n \n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare\n \n fn match_guard(x: Option<&&i32>, c: bool) -> i32 {\n     match x {"}, {"sha": "db36a1fab5f2104f48e2dc3a3dedea1532753d86", "filename": "src/test/mir-opt/retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fmir-opt%2Fretag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fmir-opt%2Fretag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,4 +1,4 @@\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // ignore-tidy-linelength\n // compile-flags: -Z mir-emit-retag -Z mir-opt-level=0 -Z span_free_formats\n "}, {"sha": "7c64dc58bf791a7561ff5fe2e1da263a0b67f2d5", "filename": "src/test/run-make/wasm-custom-section/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Frun-make%2Fwasm-custom-section%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Frun-make%2Fwasm-custom-section%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-custom-section%2FMakefile?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,6 +1,6 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-# only-wasm32-bare\n+# only-wasm32\n \n all:\n \t$(RUSTC) foo.rs --target wasm32-unknown-unknown"}, {"sha": "fec7643d20c537151e3c3a6aaafad8047893c239", "filename": "src/test/run-make/wasm-custom-sections-opt/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Frun-make%2Fwasm-custom-sections-opt%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Frun-make%2Fwasm-custom-sections-opt%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-custom-sections-opt%2FMakefile?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,6 +1,6 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-# only-wasm32-bare\n+# only-wasm32\n \n all:\n \t$(RUSTC) foo.rs -O --target wasm32-unknown-unknown"}, {"sha": "15403d8d4109d88ba8b4088ab691493304f0ad81", "filename": "src/test/run-make/wasm-export-all-symbols/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2FMakefile?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,6 +1,6 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-# only-wasm32-bare\n+# only-wasm32\n \n all:\n \t$(RUSTC) bar.rs --target wasm32-unknown-unknown"}, {"sha": "255d8f1ef0e63f3bd6b76da6b96a8afa46be1585", "filename": "src/test/run-make/wasm-import-module/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Frun-make%2Fwasm-import-module%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Frun-make%2Fwasm-import-module%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-import-module%2FMakefile?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,6 +1,6 @@\n -include ../../run-make-fulldeps/tools.mk\n \n- # only-wasm32-bare\n+ # only-wasm32\n \n all:\n \t$(RUSTC) foo.rs --target wasm32-unknown-unknown"}, {"sha": "b9141f93d538ceb07e8ce82f54fff10cdce4746e", "filename": "src/test/run-make/wasm-panic-small/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Frun-make%2Fwasm-panic-small%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Frun-make%2Fwasm-panic-small%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-panic-small%2FMakefile?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,6 +1,6 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-# only-wasm32-bare\n+# only-wasm32\n \n all:\n \t$(RUSTC) foo.rs -C lto -O --target wasm32-unknown-unknown --cfg a"}, {"sha": "b17e04b77177356822bca5ff7a6b1e06582d7ea1", "filename": "src/test/run-make/wasm-symbols-not-exported/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Frun-make%2Fwasm-symbols-not-exported%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Frun-make%2Fwasm-symbols-not-exported%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-symbols-not-exported%2FMakefile?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,6 +1,6 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-# only-wasm32-bare\n+# only-wasm32\n \n all:\n \t$(RUSTC) foo.rs --target wasm32-unknown-unknown"}, {"sha": "b8f64e06f31ef844accfbd0b4a16f4e8d19f7544", "filename": "src/test/run-make/wasm-symbols-not-imported/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Frun-make%2Fwasm-symbols-not-imported%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Frun-make%2Fwasm-symbols-not-imported%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-symbols-not-imported%2FMakefile?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,6 +1,6 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-# only-wasm32-bare\n+# only-wasm32\n \n all:\n \t$(RUSTC) foo.rs --target wasm32-unknown-unknown"}, {"sha": "5d6fa416b9895e7e3aa2a1890a64f3c9846589cb", "filename": "src/test/ui/abi/statics/static-mut-foreign.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fabi%2Fstatics%2Fstatic-mut-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fabi%2Fstatics%2Fstatic-mut-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fstatics%2Fstatic-mut-foreign.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -5,10 +5,6 @@\n \n // ignore-wasm32-bare no libc to test ffi with\n \n-// FIXME: This will work on emscripten once libc is updated to include\n-// rust-lang/libc/#1478\n-// ignore-emscripten libc type mismatch\n-\n #![feature(rustc_private)]\n \n extern crate libc;"}, {"sha": "3ffcbb58595eb75807f772be549d11f4cdda2726", "filename": "src/test/ui/async-await/async-fn-size-moved-locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -7,7 +7,7 @@\n //\n // See issue #59123 for a full explanation.\n \n-// ignore-emscripten (sizes don't match)\n+// ignore-wasm32-bare (sizes don't match)\n // run-pass\n \n // edition:2018"}, {"sha": "9ee419c4a56fb16c0d2058c50cc33d8ef2f7c49c", "filename": "src/test/ui/async-await/issue-60709.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fasync-await%2Fissue-60709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fasync-await%2Fissue-60709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-60709.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -3,7 +3,6 @@\n // compile-flags: -Copt-level=z -Cdebuginfo=2 --edition=2018\n \n // run-pass\n-// ignore-asmjs wasm2js does not support source maps yet\n \n use std::future::Future;\n use std::task::Poll;"}, {"sha": "ea4a9e5afa50157279c76ac8d737e16e329f2ab7", "filename": "src/test/ui/binding/fn-arg-incomplete-pattern-drop-order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fbinding%2Ffn-arg-incomplete-pattern-drop-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fbinding%2Ffn-arg-incomplete-pattern-drop-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Ffn-arg-incomplete-pattern-drop-order.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -2,7 +2,7 @@\n // Check that partially moved from function parameters are dropped after the\n // named bindings that move from them.\n \n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n use std::{panic, cell::RefCell};\n "}, {"sha": "5f7e357eeb2a9f591c03502c1a516c64512c461c", "filename": "src/test/ui/binding/match-arm-statics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fbinding%2Fmatch-arm-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fbinding%2Fmatch-arm-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fmatch-arm-statics.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n #![allow(dead_code)]\n // compile-flags: -g\n-// ignore-asmjs wasm2js does not support source maps yet\n \n #[derive(PartialEq, Eq)]\n struct NewBool(bool);"}, {"sha": "339bcfa1060a48e6a3c560176a987535317c2230", "filename": "src/test/ui/builtin-clone-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fbuiltin-clone-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fbuiltin-clone-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-clone-unwind.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -2,7 +2,7 @@\n \n #![allow(unused_variables)]\n #![allow(unused_imports)]\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n // Test that builtin implementations of `Clone` cleanup everything\n // in case of unwinding."}, {"sha": "f181991713b2cd3fb4add9cec8f6f0db83a35bfb", "filename": "src/test/ui/catch-unwind-bang.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fcatch-unwind-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fcatch-unwind-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcatch-unwind-bang.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n fn worker() -> ! {\n     panic!()"}, {"sha": "b85cecda16e9550fb45726a14b0e55c367ff4cfb", "filename": "src/test/ui/consts/const-eval/issue-50814.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -11,7 +11,6 @@ struct Sum<A,B>(A,B);\n \n impl<A: Unsigned, B: Unsigned> Unsigned for Sum<A,B> {\n     const MAX: u8 = A::MAX + B::MAX; //~ ERROR any use of this value will cause an error\n-    //~| ERROR any use of this value will cause an error\n }\n \n fn foo<T>(_: T) -> &'static u8 {"}, {"sha": "707dfee7cd5b89c96b2128a858a80a5ebf91ef64", "filename": "src/test/ui/consts/const-eval/issue-50814.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -9,21 +9,13 @@ LL |     const MAX: u8 = A::MAX + B::MAX;\n    = note: `#[deny(const_err)]` on by default\n \n error[E0080]: evaluation of constant expression failed\n-  --> $DIR/issue-50814.rs:18:5\n+  --> $DIR/issue-50814.rs:17:5\n    |\n LL |     &Sum::<U8,U8>::MAX\n    |     ^-----------------\n    |      |\n    |      referenced constant has errors\n \n-error: any use of this value will cause an error\n-  --> $DIR/issue-50814.rs:13:21\n-   |\n-LL |     const MAX: u8 = A::MAX + B::MAX;\n-   |     ----------------^^^^^^^^^^^^^^^-\n-   |                     |\n-   |                     attempt to add with overflow\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "d2e095072844ff1f6cd5a0baad255a07cac7c844", "filename": "src/test/ui/consts/const-eval/issue-64908.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-64908.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-64908.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-64908.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -0,0 +1,20 @@\n+// run-pass\n+\n+// This test verifies that the `ConstProp` pass doesn't cause an ICE when evaluating polymorphic\n+// promoted MIR.\n+\n+pub trait ArrowPrimitiveType {\n+    type Native;\n+}\n+\n+pub fn new<T: ArrowPrimitiveType>() {\n+    assert_eq!(0, std::mem::size_of::<T::Native>());\n+}\n+\n+impl ArrowPrimitiveType for () {\n+    type Native = ();\n+}\n+\n+fn main() {\n+    new::<()>();\n+}"}, {"sha": "394d6c17f5adfcb69b760274be4e062a50be7a91", "filename": "src/test/ui/consts/const-int-saturating-arith.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fconsts%2Fconst-int-saturating-arith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fconsts%2Fconst-int-saturating-arith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-saturating-arith.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// ignore-emscripten no i128 support\n #![feature(const_saturating_int_methods)]\n \n const INT_U32_NO: u32 = (42 as u32).saturating_add(2);"}, {"sha": "e4beee9e737ba3cc0e6d0773ddc45143b30f5344", "filename": "src/test/ui/debuginfo-lto.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fdebuginfo-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fdebuginfo-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdebuginfo-lto.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -7,7 +7,6 @@\n // aux-build:debuginfo-lto-aux.rs\n // compile-flags: -C lto -g\n // no-prefer-dynamic\n-// ignore-asmjs wasm2js does not support source maps yet\n \n extern crate debuginfo_lto_aux;\n "}, {"sha": "189335520543331b5aea5c52951a28cd83ed0e37", "filename": "src/test/ui/did_you_mean/issue-40396.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,16 +1,8 @@\n-fn foo() {\n+fn main() {\n     (0..13).collect<Vec<i32>>();\n     //~^ ERROR chained comparison\n-}\n-\n-fn bar() {\n     Vec<i32>::new();\n     //~^ ERROR chained comparison\n-}\n-\n-fn qux() {\n     (0..13).collect<Vec<i32>();\n     //~^ ERROR chained comparison\n }\n-\n-fn main() {}"}, {"sha": "7fc7c2628c472ddbc46f76f1d1d7e28c9a5986e4", "filename": "src/test/ui/did_you_mean/issue-40396.stderr", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -2,28 +2,31 @@ error: chained comparison operators require parentheses\n   --> $DIR/issue-40396.rs:2:20\n    |\n LL |     (0..13).collect<Vec<i32>>();\n-   |                    ^^^^^^^^\n+   |                    ^^^^^\n+help: use `::<...>` instead of `<...>` to specify type arguments\n    |\n-   = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n-   = help: or use `(...)` if you meant to specify fn arguments\n+LL |     (0..13).collect::<Vec<i32>>();\n+   |                    ^^\n \n error: chained comparison operators require parentheses\n-  --> $DIR/issue-40396.rs:7:8\n+  --> $DIR/issue-40396.rs:4:8\n    |\n LL |     Vec<i32>::new();\n-   |        ^^^^^^^\n+   |        ^^^^^\n+help: use `::<...>` instead of `<...>` to specify type arguments\n    |\n-   = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n-   = help: or use `(...)` if you meant to specify fn arguments\n+LL |     Vec::<i32>::new();\n+   |        ^^\n \n error: chained comparison operators require parentheses\n-  --> $DIR/issue-40396.rs:12:20\n+  --> $DIR/issue-40396.rs:6:20\n    |\n LL |     (0..13).collect<Vec<i32>();\n-   |                    ^^^^^^^^\n+   |                    ^^^^^\n+help: use `::<...>` instead of `<...>` to specify type arguments\n    |\n-   = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n-   = help: or use `(...)` if you meant to specify fn arguments\n+LL |     (0..13).collect::<Vec<i32>();\n+   |                    ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "91063edf0f6c4badf45a759ad86bcb9722290287", "filename": "src/test/ui/drop/dynamic-drop-async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -5,7 +5,7 @@\n \n // run-pass\n // edition:2018\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(slice_patterns)]\n #![allow(unused)]"}, {"sha": "8516bc3d96424cb452adb6ccd7051d11d21728b0", "filename": "src/test/ui/drop/dynamic-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -2,7 +2,7 @@\n #![allow(unused_assignments)]\n #![allow(unused_variables)]\n \n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(generators, generator_trait, untagged_unions)]\n #![feature(slice_patterns)]"}, {"sha": "0eec9fb3ee647c3143b0c7bc4d8e695f48c07fcd", "filename": "src/test/ui/extern/extern-const.fixed", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fextern%2Fextern-const.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fextern%2Fextern-const.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-const.fixed?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -5,8 +5,7 @@\n // compile. To sidestep this by using one that *is* defined.\n \n // run-rustfix\n-// ignore-wasm32-bare no external library to link to.\n-// ignore-asmjs wasm2js does not support source maps yet\n+// ignore-wasm32 no external library to link to.\n // compile-flags: -g\n #![feature(rustc_private)]\n extern crate libc;"}, {"sha": "ca5d7ddf27e3ab9a1f84e5bc9edd1795a4f6ccf4", "filename": "src/test/ui/extern/extern-const.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fextern%2Fextern-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fextern%2Fextern-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-const.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -5,8 +5,7 @@\n // compile. To sidestep this by using one that *is* defined.\n \n // run-rustfix\n-// ignore-wasm32-bare no external library to link to.\n-// ignore-asmjs wasm2js does not support source maps yet\n+// ignore-wasm32 no external library to link to.\n // compile-flags: -g\n #![feature(rustc_private)]\n extern crate libc;"}, {"sha": "77406be2095cff1d52277d043441650d501a8040", "filename": "src/test/ui/extern/extern-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fextern%2Fextern-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fextern%2Fextern-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-const.stderr?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,5 +1,5 @@\n error: extern items cannot be `const`\n-  --> $DIR/extern-const.rs:16:5\n+  --> $DIR/extern-const.rs:15:5\n    |\n LL |     const rust_dbg_static_mut: libc::c_int;\n    |     ^^^^^ help: try using a static value: `static`"}, {"sha": "43b37a9afc2cc9f26284625ef86f912e14557424", "filename": "src/test/ui/generator/issue-58888.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fgenerator%2Fissue-58888.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fgenerator%2Fissue-58888.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-58888.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // compile-flags: -g\n-// ignore-asmjs wasm2js does not support source maps yet\n \n #![feature(generators, generator_trait)]\n "}, {"sha": "5ac97585f4b575339f8f06cdeb6eb2d06cd391b6", "filename": "src/test/ui/generator/panic-drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled as panic=abort by default\n \n #![feature(generators, generator_trait)]\n "}, {"sha": "5f6778674dce13a5e9fd32e8ff61ff3c2bbef2bb", "filename": "src/test/ui/generator/panic-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fgenerator%2Fpanic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fgenerator%2Fpanic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpanic-safe.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(generators, generator_trait)]\n "}, {"sha": "71a68ff684af31c6656fb61cc9bd20ecafa0e7fa", "filename": "src/test/ui/generator/resume-after-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fgenerator%2Fresume-after-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fgenerator%2Fresume-after-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-after-return.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(generators, generator_trait)]\n "}, {"sha": "01db971434bbc8c9e0e36ab34cdd41dbc854ba33", "filename": "src/test/ui/generator/size-moved-locals.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fgenerator%2Fsize-moved-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fgenerator%2Fsize-moved-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsize-moved-locals.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -11,7 +11,6 @@\n \n // edition:2018\n // ignore-wasm32 issue #62807\n-// ignore-asmjs issue #62807\n \n #![feature(generators, generator_trait)]\n "}, {"sha": "0154f0499502959fe95372e12aa730acd6f61217", "filename": "src/test/ui/intrinsics/intrinsics-integer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsics-integer.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// ignore-emscripten no i128 support\n \n #![feature(intrinsics)]\n "}, {"sha": "a2fd796245822dcb3056890324bc512574f2c170", "filename": "src/test/ui/issues/issue-14875.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-14875.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-14875.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14875.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare always compiled as panic=abort right now\n \n // Check that values are not leaked when a dtor panics (#14875)\n "}, {"sha": "1ce05ba390d76aee7401a08636191c2b982881b4", "filename": "src/test/ui/issues/issue-23477.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-23477.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-23477.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23477.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,5 +1,4 @@\n // build-pass\n-// ignore-asmjs wasm2js does not support source maps yet\n // compile-flags: -g\n \n pub struct Dst {"}, {"sha": "773792c7a3f1f3492ecf737a50ea7d5fa50eb6a4", "filename": "src/test/ui/issues/issue-24687-embed-debuginfo/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-24687-embed-debuginfo%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-24687-embed-debuginfo%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24687-embed-debuginfo%2Fmain.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n // aux-build:issue-24687-lib.rs\n // compile-flags:-g\n-// ignore-asmjs wasm2js does not support source maps yet\n \n extern crate issue_24687_lib as d;\n "}, {"sha": "cf3834952c6a6da264c672e4e8da017a41b45f8b", "filename": "src/test/ui/issues/issue-24945-repeat-dash-opts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-24945-repeat-dash-opts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-24945-repeat-dash-opts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24945-repeat-dash-opts.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -3,7 +3,6 @@\n // as options to the compiler.\n \n // compile-flags:-g -g -O -O\n-// ignore-asmjs wasm2js does not support source maps yet\n \n fn main() {\n     assert_eq!(1, 1);"}, {"sha": "3b40b3dd8f075480a4fb09e392540cceafd439f9", "filename": "src/test/ui/issues/issue-26484.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-26484.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-26484.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26484.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // compile-flags:-g\n-// ignore-asmjs wasm2js does not support source maps yet\n \n fn helper<F: FnOnce(usize) -> bool>(_f: F) {\n     print!(\"\");"}, {"sha": "8ede8143ea6572a1b718fb0298ccde7248f6e1b9", "filename": "src/test/ui/issues/issue-29948.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-29948.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-29948.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29948.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n use std::panic;\n "}, {"sha": "f0b472e2fe821e8a489f56eee942cb6618c5410c", "filename": "src/test/ui/issues/issue-33096.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-33096.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-33096.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33096.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // compile-flags: -g\n-// ignore-asmjs wasm2js does not support source maps yet\n \n use std::ops::Deref;\n "}, {"sha": "94fccff9fc65db7908ad92af58e516019a816104", "filename": "src/test/ui/issues/issue-33992.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-33992.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-33992.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33992.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // ignore-windows\n // ignore-macos\n-// ignore-emscripten common linkage not implemented right now\n+// ignore-wasm32-bare common linkage not implemented right now\n \n #![feature(linkage)]\n "}, {"sha": "1f68560509e8c6a5c2e24ad04912c91f8780cb02", "filename": "src/test/ui/issues/issue-34569.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-34569.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-34569.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34569.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // compile-flags:-g\n-// ignore-asmjs wasm2js does not support source maps yet\n \n // In this test we just want to make sure that the code below does not lead to\n // a debuginfo verification assertion during compilation. This was caused by the"}, {"sha": "f2dfaf3dd367e71b368949866f7dc8182766d4d1", "filename": "src/test/ui/issues/issue-36856.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-36856.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-36856.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36856.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -2,7 +2,6 @@\n // Regression test for #36856.\n \n // compile-flags:-g\n-// ignore-asmjs wasm2js does not support source maps yet\n \n fn g() -> bool {\n     false"}, {"sha": "318e3099f98ba4139df86f2dbaf881881d5ed754", "filename": "src/test/ui/issues/issue-42210.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-42210.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-42210.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42210.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -2,7 +2,6 @@\n // Regression test for #42210.\n \n // compile-flags: -g\n-// ignore-asmjs wasm2js does not support source maps yet\n \n trait Foo {\n     fn foo() { }"}, {"sha": "47c3ab59aa2eb9c2eba273f77eb142336a9cbc48", "filename": "src/test/ui/issues/issue-43853.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-43853.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-43853.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43853.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n use std::panic;\n "}, {"sha": "d20c07276a8c50667fda628a0456540c8ec00be9", "filename": "src/test/ui/issues/issue-45731.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-45731.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-45731.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45731.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n #![allow(unused_variables)]\n // compile-flags:--test -g\n-// ignore-asmjs wasm2js does not support source maps yet\n \n #[cfg(target_os = \"macos\")]\n #[test]"}, {"sha": "461ea2498b0d47f0f4c633fe639e839ee65db00e", "filename": "src/test/ui/issues/issue-46519.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-46519.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-46519.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46519.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n // compile-flags:--test -O\n \n-// ignore-emscripten compiled with panic=abort by default\n-\n #[test]\n #[should_panic(expected = \"creating inhabited type\")]\n fn test() {"}, {"sha": "385192b882ba80acf76c84d9e1e4a8678e7f5d07", "filename": "src/test/ui/issues/issue-48508.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-48508.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-48508.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48508.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -8,7 +8,6 @@\n \n // compile-flags:-g\n // ignore-pretty issue #37195\n-// ignore-asmjs wasm2js does not support source maps yet\n \n #![feature(non_ascii_idents)]\n "}, {"sha": "79cc107d4fec216eb56e66f707a76c477362cce8", "filename": "src/test/ui/issues/issue-49579.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-49579.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-49579.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49579.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,4 +1,5 @@\n // build-pass (FIXME(62277): could be check-pass?)\n+// ignore-emscripten no i128 support\n \n fn fibs(n: u32) -> impl Iterator<Item=u128> {\n     (0 .. n)"}, {"sha": "24c61425b8e29e2b7cce1e00efff8fd10eb616b1", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-as_deref.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,5 +1,3 @@\n-#![feature(inner_deref)]\n-\n fn main() {\n     let _result = &Some(42).as_deref();\n //~^ ERROR no method named `as_deref` found for type `std::option::Option<{integer}>`"}, {"sha": "0eb7bf0247565d5a4bfd61ff34811520d40e904e", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-as_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref.stderr?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `as_deref` found for type `std::option::Option<{integer}>` in the current scope\n-  --> $DIR/option-as_deref.rs:4:29\n+  --> $DIR/option-as_deref.rs:2:29\n    |\n LL |     let _result = &Some(42).as_deref();\n    |                             ^^^^^^^^ help: there is a method with a similar name: `as_ref`"}, {"sha": "67ad73f58477396e6801f47bf01f1860c6fa3e8f", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-as_deref_mut.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,5 +1,3 @@\n-#![feature(inner_deref)]\n-\n fn main() {\n     let _result = &mut Some(42).as_deref_mut();\n //~^ ERROR no method named `as_deref_mut` found for type `std::option::Option<{integer}>`"}, {"sha": "845ddb52319c722a043faa2f54e6e862ca0b3e15", "filename": "src/test/ui/issues/issue-50264-inner-deref-trait/option-as_deref_mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50264-inner-deref-trait%2Foption-as_deref_mut.stderr?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,5 +1,5 @@\n error[E0599]: no method named `as_deref_mut` found for type `std::option::Option<{integer}>` in the current scope\n-  --> $DIR/option-as_deref_mut.rs:4:33\n+  --> $DIR/option-as_deref_mut.rs:2:33\n    |\n LL |     let _result = &mut Some(42).as_deref_mut();\n    |                                 ^^^^^^^^^^^^ method not found in `std::option::Option<{integer}>`"}, {"sha": "2195b89555791c3c17053540a14587c2db125ea5", "filename": "src/test/ui/issues/issue-52262.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-52262.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-52262.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52262.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -0,0 +1,25 @@\n+// compile-flags:-Ztreat-err-as-bug=5\n+#[derive(Debug)]\n+enum MyError {\n+    NotFound { key: Vec<u8> },\n+    Err41,\n+}\n+\n+impl std::error::Error for MyError {}\n+\n+impl std::fmt::Display for MyError {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        match self {\n+            MyError::NotFound { key } => write!(\n+                f,\n+                \"unknown error with code {}.\",\n+                String::from_utf8(*key).unwrap()\n+                //~^ ERROR cannot move out of `*key` which is behind a shared reference\n+            ),\n+            MyError::Err41 => write!(f, \"Sit by a lake\"),\n+        }\n+    }\n+}\n+fn main() {\n+    println!(\"Hello, world!\");\n+}"}, {"sha": "7312976c80159e98ece2833251127f0d11e23dc4", "filename": "src/test/ui/issues/issue-52262.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-52262.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-52262.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52262.stderr?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -0,0 +1,9 @@\n+error[E0507]: cannot move out of `*key` which is behind a shared reference\n+  --> $DIR/issue-52262.rs:16:35\n+   |\n+LL |                 String::from_utf8(*key).unwrap()\n+   |                                   ^^^^ move occurs because `*key` has type `std::vec::Vec<u8>`, which does not implement the `Copy` trait\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "8ab845366b7b4b873687dbc9e7aa6c4b82cd4237", "filename": "src/test/ui/issues/issue-58463.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-58463.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fissues%2Fissue-58463.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58463.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n // compile-flags:-C debuginfo=2\n-// ignore-asmjs wasm2js does not support source maps yet\n-\n fn foo() -> impl Copy {\n     foo\n }"}, {"sha": "d6612035750836e49accc865a8f2d05dcaeb35b3", "filename": "src/test/ui/iterators/iter-count-overflow-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fiterators%2Fiter-count-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fiterators%2Fiter-count-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-count-overflow-debug.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n // only-32bit too impatient for 2\u2076\u2074 items\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -C debug_assertions=yes -C opt-level=3\n \n use std::panic;"}, {"sha": "f1eded31702c4449d4ebf383127d13b251d84b81", "filename": "src/test/ui/iterators/iter-position-overflow-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fiterators%2Fiter-position-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fiterators%2Fiter-position-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-position-overflow-debug.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n // only-32bit too impatient for 2\u2076\u2074 items\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -C debug_assertions=yes -C opt-level=3\n \n use std::panic;"}, {"sha": "5d67c7cbb42565e00898ee95cb7d5b155a201c7f", "filename": "src/test/ui/iterators/iter-step-overflow-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fiterators%2Fiter-step-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fiterators%2Fiter-step-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-step-overflow-debug.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -C debug_assertions=yes\n \n use std::panic;"}, {"sha": "ee4ab4d24c6ab22da3d6c2579bf01308c144c0cf", "filename": "src/test/ui/iterators/iter-sum-overflow-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-debug.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -C debug_assertions=yes\n \n use std::panic;"}, {"sha": "429f8e0bc9648a61aeecc631e91202fce4770891", "filename": "src/test/ui/iterators/iter-sum-overflow-overflow-checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-overflow-checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-overflow-checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-overflow-checks.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -C overflow-checks\n \n use std::panic;"}, {"sha": "9f1a31d1ae2741cb033adf3598d713f25211c1e9", "filename": "src/test/ui/macros/macro-comma-behavior-rpass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -13,8 +13,6 @@\n // compile-flags: --test -C debug_assertions=yes\n // revisions: std core\n \n-// ignore-emscripten compiled with panic=abort by default\n-\n #![cfg_attr(core, no_std)]\n \n #[cfg(std)] use std::fmt;"}, {"sha": "6f13d5612ce51b93a333eaf4dfbcb558e68f5b17", "filename": "src/test/ui/mir/mir_calls_to_shims.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fmir%2Fmir_calls_to_shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fmir%2Fmir_calls_to_shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_calls_to_shims.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![feature(fn_traits)]\n #![feature(never_type)]"}, {"sha": "2949437b1e4b659db6463f812ae0239c8c6fdb5b", "filename": "src/test/ui/mir/mir_drop_order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fmir%2Fmir_drop_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fmir%2Fmir_drop_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_drop_order.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n use std::cell::RefCell;\n use std::panic;"}, {"sha": "d210abdf499d0422e94cbe1ef49635a48381c278", "filename": "src/test/ui/numbers-arithmetic/float-int-invalid-const-cast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Ffloat-int-invalid-const-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Ffloat-int-invalid-const-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Ffloat-int-invalid-const-cast.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// ignore-emscripten no i128 support\n \n #![deny(const_err)]\n "}, {"sha": "ea0ef95e4f1af3d5c8bf3a1ff6aa6eb10221ea1a", "filename": "src/test/ui/numbers-arithmetic/i128.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fi128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fi128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fi128.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,6 +1,9 @@\n // run-pass\n #![allow(overflowing_literals)]\n \n+// ignore-emscripten i128 doesn't work\n+\n+\n #![feature(test)]\n \n extern crate test;"}, {"sha": "e9927304f23f8c380a0f1c9ea5fa0d76a79e2536", "filename": "src/test/ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnext-power-of-two-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnext-power-of-two-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnext-power-of-two-overflow-debug.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n // compile-flags: -C debug_assertions=yes\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // ignore-emscripten dies with an LLVM error\n \n use std::panic;"}, {"sha": "bef7deb62760e45191fbb7d118a1429a0ab3df75", "filename": "src/test/ui/numbers-arithmetic/u128-as-f32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fu128-as-f32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fu128-as-f32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fu128-as-f32.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+// ignore-emscripten u128 not supported\n \n #![feature(test)]\n #![deny(overflowing_literals)]"}, {"sha": "9394071632377eec0b7ec4baa72fb1d9cdeba500", "filename": "src/test/ui/numbers-arithmetic/u128.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fu128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fu128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fu128.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,4 +1,6 @@\n // run-pass\n+// ignore-emscripten u128 not supported\n+\n \n #![feature(test)]\n "}, {"sha": "5d72771c2dcff1bdff532ec1214b0acb67daa901", "filename": "src/test/ui/panic-runtime/transitive-link-a-bunch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -4,7 +4,7 @@\n // aux-build:wants-panic-runtime-abort.rs\n // aux-build:panic-runtime-lang-items.rs\n // error-pattern: is not compiled with this crate's panic strategy `unwind`\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![no_std]\n #![no_main]"}, {"sha": "4c25c09d6438f3146ca04a355be849481707add5", "filename": "src/test/ui/panic-runtime/want-unwind-got-abort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:is incompatible with this crate's strategy of `unwind`\n // aux-build:panic-runtime-abort.rs\n // aux-build:panic-runtime-lang-items.rs\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![no_std]\n #![no_main]"}, {"sha": "478af451e7f657bbd73ecceb3ca5b180027019ca", "filename": "src/test/ui/panic-runtime/want-unwind-got-abort2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -2,7 +2,7 @@\n // aux-build:panic-runtime-abort.rs\n // aux-build:wants-panic-runtime-abort.rs\n // aux-build:panic-runtime-lang-items.rs\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![no_std]\n #![no_main]"}, {"sha": "b0d6629561803077c5324c0c2d9d61e553657557", "filename": "src/test/ui/panic-uninitialized-zeroed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-uninitialized-zeroed.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare always compiled as panic=abort right now and this requires unwinding\n // This test checks that instantiating an uninhabited type via `mem::{uninitialized,zeroed}` results\n // in a runtime panic.\n "}, {"sha": "97a405b6999c3e779427365e933f4547dba106d4", "filename": "src/test/ui/parser/issue-65122-mac-invoc-in-mut-patterns.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fparser%2Fissue-65122-mac-invoc-in-mut-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fparser%2Fissue-65122-mac-invoc-in-mut-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-65122-mac-invoc-in-mut-patterns.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -0,0 +1,26 @@\n+// Regression test; used to ICE with 'visit_mac disabled by default' due to a\n+// `MutVisitor` in `fn make_all_value_bindings_mutable` (`parse/parser/pat.rs`).\n+\n+macro_rules! mac1 {\n+    ($eval:expr) => {\n+        let mut $eval = ();\n+        //~^ ERROR `mut` must be followed by a named binding\n+    };\n+}\n+\n+macro_rules! mac2 {\n+    ($eval:pat) => {\n+        let mut $eval = ();\n+        //~^ ERROR `mut` must be followed by a named binding\n+        //~| ERROR expected identifier, found `does_not_exist!()`\n+    };\n+}\n+\n+fn foo() {\n+    mac1! { does_not_exist!() }\n+    //~^ ERROR cannot find macro `does_not_exist` in this scope\n+    mac2! { does_not_exist!() }\n+    //~^ ERROR cannot find macro `does_not_exist` in this scope\n+}\n+\n+fn main() {}"}, {"sha": "dd193d6a86ebdfbe1d2bd23b29cfdd22caab7dea", "filename": "src/test/ui/parser/issue-65122-mac-invoc-in-mut-patterns.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fparser%2Fissue-65122-mac-invoc-in-mut-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fparser%2Fissue-65122-mac-invoc-in-mut-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-65122-mac-invoc-in-mut-patterns.stderr?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -0,0 +1,45 @@\n+error: `mut` must be followed by a named binding\n+  --> $DIR/issue-65122-mac-invoc-in-mut-patterns.rs:6:13\n+   |\n+LL |         let mut $eval = ();\n+   |             ^^^^^^^^^ help: remove the `mut` prefix: `does_not_exist!()`\n+...\n+LL |     mac1! { does_not_exist!() }\n+   |     --------------------------- in this macro invocation\n+   |\n+   = note: `mut` may be followed by `variable` and `variable @ pattern`\n+\n+error: expected identifier, found `does_not_exist!()`\n+  --> $DIR/issue-65122-mac-invoc-in-mut-patterns.rs:13:17\n+   |\n+LL |         let mut $eval = ();\n+   |                 ^^^^^ expected identifier\n+...\n+LL |     mac2! { does_not_exist!() }\n+   |     --------------------------- in this macro invocation\n+\n+error: `mut` must be followed by a named binding\n+  --> $DIR/issue-65122-mac-invoc-in-mut-patterns.rs:13:13\n+   |\n+LL |         let mut $eval = ();\n+   |             ^^^ help: remove the `mut` prefix: `does_not_exist!()`\n+...\n+LL |     mac2! { does_not_exist!() }\n+   |     --------------------------- in this macro invocation\n+   |\n+   = note: `mut` may be followed by `variable` and `variable @ pattern`\n+\n+error: cannot find macro `does_not_exist` in this scope\n+  --> $DIR/issue-65122-mac-invoc-in-mut-patterns.rs:20:13\n+   |\n+LL |     mac1! { does_not_exist!() }\n+   |             ^^^^^^^^^^^^^^\n+\n+error: cannot find macro `does_not_exist` in this scope\n+  --> $DIR/issue-65122-mac-invoc-in-mut-patterns.rs:22:13\n+   |\n+LL |     mac2! { does_not_exist!() }\n+   |             ^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "9c7a25d589a1f9aafa988098042db58979b5dc5a", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -3,15 +3,24 @@ struct X;\n \n fn main() {\n     false == false == false;\n-    //~^ ERROR: chained comparison operators require parentheses\n+    //~^ ERROR chained comparison operators require parentheses\n \n     false == 0 < 2;\n-    //~^ ERROR: chained comparison operators require parentheses\n-    //~| ERROR: mismatched types\n-    //~| ERROR: mismatched types\n+    //~^ ERROR chained comparison operators require parentheses\n+    //~| ERROR mismatched types\n+    //~| ERROR mismatched types\n \n     f<X>();\n     //~^ ERROR chained comparison operators require parentheses\n-    //~| HELP: use `::<...>` instead of `<...>`\n-    //~| HELP: or use `(...)`\n+    //~| HELP use `::<...>` instead of `<...>` to specify type arguments\n+\n+    f<Result<Option<X>, Option<Option<X>>>(1, 2);\n+    //~^ ERROR chained comparison operators require parentheses\n+    //~| HELP use `::<...>` instead of `<...>` to specify type arguments\n+\n+    use std::convert::identity;\n+    let _ = identity<u8>;\n+    //~^ ERROR chained comparison operators require parentheses\n+    //~| HELP use `::<...>` instead of `<...>` to specify type arguments\n+    //~| HELP or use `(...)` if you meant to specify fn arguments\n }"}, {"sha": "5aa37a40cbd3dc23d1383eae5f2325096400bb16", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.stderr", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -2,21 +2,41 @@ error: chained comparison operators require parentheses\n   --> $DIR/require-parens-for-chained-comparison.rs:5:11\n    |\n LL |     false == false == false;\n-   |           ^^^^^^^^^^^^^^^^^\n+   |           ^^^^^^^^^^^\n \n error: chained comparison operators require parentheses\n   --> $DIR/require-parens-for-chained-comparison.rs:8:11\n    |\n LL |     false == 0 < 2;\n-   |           ^^^^^^^^\n+   |           ^^^^^^\n \n error: chained comparison operators require parentheses\n   --> $DIR/require-parens-for-chained-comparison.rs:13:6\n    |\n LL |     f<X>();\n-   |      ^^^^\n+   |      ^^^\n+help: use `::<...>` instead of `<...>` to specify type arguments\n    |\n-   = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n+LL |     f::<X>();\n+   |      ^^\n+\n+error: chained comparison operators require parentheses\n+  --> $DIR/require-parens-for-chained-comparison.rs:17:6\n+   |\n+LL |     f<Result<Option<X>, Option<Option<X>>>(1, 2);\n+   |      ^^^^^^^^\n+help: use `::<...>` instead of `<...>` to specify type arguments\n+   |\n+LL |     f::<Result<Option<X>, Option<Option<X>>>(1, 2);\n+   |      ^^\n+\n+error: chained comparison operators require parentheses\n+  --> $DIR/require-parens-for-chained-comparison.rs:22:21\n+   |\n+LL |     let _ = identity<u8>;\n+   |                     ^^^^\n+   |\n+   = help: use `::<...>` instead of `<...>` to specify type arguments\n    = help: or use `(...)` if you meant to specify fn arguments\n \n error[E0308]: mismatched types\n@@ -37,6 +57,6 @@ LL |     false == 0 < 2;\n    = note: expected type `bool`\n               found type `{integer}`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "418178d0f0ead071c24efda048d43721ac535eec", "filename": "src/test/ui/proc-macro/expand-with-a-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-with-a-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-with-a-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-with-a-macro.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // aux-build:expand-with-a-macro.rs\n \n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![deny(warnings)]\n "}, {"sha": "f1e53a0d8b4266658134f0953db9b546126ee211", "filename": "src/test/ui/reachable-unnameable-items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Freachable-unnameable-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Freachable-unnameable-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable-unnameable-items.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // aux-build:reachable-unnameable-items.rs\n \n extern crate reachable_unnameable_items;"}, {"sha": "39825c4f9a93890ce663f31422b39d0b33a3cdcb", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-in-test.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,8 +1,6 @@\n // compile-flags: --test\n // run-pass\n \n-// ignore-emscripten compiled with panic=abort by default\n-\n #![feature(test)]\n \n extern crate test;"}, {"sha": "1a187d042517e170255a29a1f89f4587bbee8640", "filename": "src/test/ui/rfc-2008-non-exhaustive/improper_ctypes/auxiliary/types.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fauxiliary%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fauxiliary%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fauxiliary%2Ftypes.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -0,0 +1,31 @@\n+#![feature(non_exhaustive)]\n+\n+#[non_exhaustive]\n+#[repr(C)]\n+pub enum NonExhaustiveEnum {\n+    Unit,\n+    Tuple(u32),\n+    Struct { field: u32 }\n+}\n+\n+#[non_exhaustive]\n+#[repr(C)]\n+pub struct NormalStruct {\n+    pub first_field: u16,\n+    pub second_field: u16,\n+}\n+\n+#[non_exhaustive]\n+#[repr(C)]\n+pub struct UnitStruct;\n+\n+#[non_exhaustive]\n+#[repr(C)]\n+pub struct TupleStruct (pub u16, pub u16);\n+\n+#[repr(C)]\n+pub enum NonExhaustiveVariants {\n+    #[non_exhaustive] Unit,\n+    #[non_exhaustive] Tuple(u32),\n+    #[non_exhaustive] Struct { field: u32 }\n+}"}, {"sha": "900b9333f76e8ffe9d7dd3dea9854f5da9d36468", "filename": "src/test/ui/rfc-2008-non-exhaustive/improper_ctypes/extern_crate_improper.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fextern_crate_improper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fextern_crate_improper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fextern_crate_improper.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -0,0 +1,24 @@\n+// aux-build:types.rs\n+#![deny(improper_ctypes)]\n+\n+extern crate types;\n+\n+// This test checks that non-exhaustive types with `#[repr(C)]` from an extern crate are considered\n+// improper.\n+\n+use types::{NonExhaustiveEnum, NormalStruct, UnitStruct, TupleStruct, NonExhaustiveVariants};\n+\n+extern {\n+    pub fn non_exhaustive_enum(_: NonExhaustiveEnum);\n+    //~^ ERROR `extern` block uses type `types::NonExhaustiveEnum`, which is not FFI-safe\n+    pub fn non_exhaustive_normal_struct(_: NormalStruct);\n+    //~^ ERROR `extern` block uses type `types::NormalStruct`, which is not FFI-safe\n+    pub fn non_exhaustive_unit_struct(_: UnitStruct);\n+    //~^ ERROR `extern` block uses type `types::UnitStruct`, which is not FFI-safe\n+    pub fn non_exhaustive_tuple_struct(_: TupleStruct);\n+    //~^ ERROR `extern` block uses type `types::TupleStruct`, which is not FFI-safe\n+    pub fn non_exhaustive_variant(_: NonExhaustiveVariants);\n+    //~^ ERROR `extern` block uses type `types::NonExhaustiveVariants`, which is not FFI-safe\n+}\n+\n+fn main() { }"}, {"sha": "7fbf1157e56f8bcc6a3d00eeaa8edd83a8bc344a", "filename": "src/test/ui/rfc-2008-non-exhaustive/improper_ctypes/extern_crate_improper.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fextern_crate_improper.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fextern_crate_improper.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fextern_crate_improper.stderr?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -0,0 +1,47 @@\n+error: `extern` block uses type `types::NonExhaustiveEnum`, which is not FFI-safe\n+  --> $DIR/extern_crate_improper.rs:12:35\n+   |\n+LL |     pub fn non_exhaustive_enum(_: NonExhaustiveEnum);\n+   |                                   ^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+note: lint level defined here\n+  --> $DIR/extern_crate_improper.rs:2:9\n+   |\n+LL | #![deny(improper_ctypes)]\n+   |         ^^^^^^^^^^^^^^^\n+   = note: this enum is non-exhaustive\n+\n+error: `extern` block uses type `types::NormalStruct`, which is not FFI-safe\n+  --> $DIR/extern_crate_improper.rs:14:44\n+   |\n+LL |     pub fn non_exhaustive_normal_struct(_: NormalStruct);\n+   |                                            ^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: this struct is non-exhaustive\n+\n+error: `extern` block uses type `types::UnitStruct`, which is not FFI-safe\n+  --> $DIR/extern_crate_improper.rs:16:42\n+   |\n+LL |     pub fn non_exhaustive_unit_struct(_: UnitStruct);\n+   |                                          ^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: this struct is non-exhaustive\n+\n+error: `extern` block uses type `types::TupleStruct`, which is not FFI-safe\n+  --> $DIR/extern_crate_improper.rs:18:43\n+   |\n+LL |     pub fn non_exhaustive_tuple_struct(_: TupleStruct);\n+   |                                           ^^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: this struct is non-exhaustive\n+\n+error: `extern` block uses type `types::NonExhaustiveVariants`, which is not FFI-safe\n+  --> $DIR/extern_crate_improper.rs:20:38\n+   |\n+LL |     pub fn non_exhaustive_variant(_: NonExhaustiveVariants);\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: this enum has non-exhaustive variants\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "3f38e3cd8e5a7904cf38f1bcef0db9812223d5ca", "filename": "src/test/ui/rfc-2008-non-exhaustive/improper_ctypes/same_crate_proper.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fsame_crate_proper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fsame_crate_proper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fsame_crate_proper.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -0,0 +1,46 @@\n+// check-pass\n+#![feature(non_exhaustive)]\n+#![deny(improper_ctypes)]\n+\n+// This test checks that non-exhaustive types with `#[repr(C)]` are considered proper within\n+// the defining crate.\n+\n+#[non_exhaustive]\n+#[repr(C)]\n+pub enum NonExhaustiveEnum {\n+    Unit,\n+    Tuple(u32),\n+    Struct { field: u32 }\n+}\n+\n+#[non_exhaustive]\n+#[repr(C)]\n+pub struct NormalStruct {\n+    pub first_field: u16,\n+    pub second_field: u16,\n+}\n+\n+#[non_exhaustive]\n+#[repr(C)]\n+pub struct UnitStruct;\n+\n+#[non_exhaustive]\n+#[repr(C)]\n+pub struct TupleStruct (pub u16, pub u16);\n+\n+#[repr(C)]\n+pub enum NonExhaustiveVariants {\n+    #[non_exhaustive] Unit,\n+    #[non_exhaustive] Tuple(u32),\n+    #[non_exhaustive] Struct { field: u32 }\n+}\n+\n+extern {\n+    // Unit structs aren't tested here because they will trigger `improper_ctypes` anyway.\n+    pub fn non_exhaustive_enum(_: NonExhaustiveEnum);\n+    pub fn non_exhaustive_normal_struct(_: NormalStruct);\n+    pub fn non_exhaustive_tuple_struct(_: TupleStruct);\n+    pub fn non_exhaustive_variant(_: NonExhaustiveVariants);\n+}\n+\n+fn main() { }"}, {"sha": "7923aa7c0e22f31affe992fabc45afaa67d844f9", "filename": "src/test/ui/rfcs/rfc1857-drop-order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Frfcs%2Frfc1857-drop-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Frfcs%2Frfc1857-drop-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc1857-drop-order.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![allow(dead_code, unreachable_code)]\n "}, {"sha": "164ae79c254faaeb6ce9ad8e3cf5ee327cfac3e0", "filename": "src/test/ui/sepcomp/sepcomp-lib-lto.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fsepcomp%2Fsepcomp-lib-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Fsepcomp%2Fsepcomp-lib-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsepcomp%2Fsepcomp-lib-lto.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -4,7 +4,6 @@\n \n // aux-build:sepcomp_lib.rs\n // compile-flags: -C lto -g\n-// ignore-asmjs wasm2js does not support source maps yet\n // no-prefer-dynamic\n \n extern crate sepcomp_lib;"}, {"sha": "1a478460efc6c8954c6714450b848652cd700a85", "filename": "src/test/ui/test-attrs/test-allow-fail-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-allow-fail-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-allow-fail-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-allow-fail-attr.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: --test\n #![feature(allow_fail)]\n "}, {"sha": "9fa759f9eb4837a25ff0b215cba976b78f849412", "filename": "src/test/ui/test-attrs/test-should-fail-good-message.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-fail-good-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-fail-good-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-fail-good-message.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: --test\n #[test]\n #[should_panic(expected = \"foo\")]"}, {"sha": "f86499e2e3f86d9130f34c69da1ecef4844af05d", "filename": "src/test/ui/unboxed-closures/unboxed-closures-unique-type-id.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unique-type-id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unique-type-id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unique-type-id.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -10,7 +10,6 @@\n // This is a regression test for issue #17021.\n //\n // compile-flags: -g\n-// ignore-asmjs wasm2js does not support source maps yet\n \n use std::ptr;\n "}, {"sha": "df56448dd225df39686f1ef541cb395776f8ee5d", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -141,10 +141,7 @@ impl EarlyProps {\n                 if config.target == \"wasm32-unknown-unknown\" && config.parse_check_run_results(ln) {\n                     props.ignore = Ignore::Ignore;\n                 }\n-                // FIXME: Re-enable run-fail once panics are handled correctly\n-                if config.target.contains(\"emscripten\") && config.mode == common::RunFail {\n-                    props.ignore = Ignore::Ignore;\n-                }\n+\n             }\n \n             if (config.mode == common::DebugInfoGdb || config.mode == common::DebugInfoGdbLldb) &&"}, {"sha": "d87c5b64c21c26c0fb7ba6a0c797af768235ac97", "filename": "triagebot.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5a8fb7c24d85d0bd911ca465c4a077c7cee608ae/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=5a8fb7c24d85d0bd911ca465c4a077c7cee608ae", "patch": "@@ -3,7 +3,8 @@ allow-unauthenticated = [\n     \"C-*\", \"A-*\", \"E-*\", \"NLL-*\", \"O-*\", \"S-*\", \"T-*\", \"WG-*\", \"F-*\",\n     \"requires-nightly\",\n     # I-* without I-nominated\n-    \"I-compilemem\", \"I-compiletime\", \"I-crash\", \"I-hang\", \"I-ICE\", \"I-slow\",\n+    \"I-*\", \"!I-nominated\",\n+    \"AsyncAwait-OnDeck\",\n ]\n \n [assign]"}]}