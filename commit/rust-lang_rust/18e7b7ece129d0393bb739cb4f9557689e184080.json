{"sha": "18e7b7ece129d0393bb739cb4f9557689e184080", "node_id": "C_kwDOAAsO6NoAKDE4ZTdiN2VjZTEyOWQwMzkzYmI3MzljYjRmOTU1NzY4OWUxODQwODA", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-01-28T00:25:15Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-02-15T05:08:52Z"}, "message": "Overhaul `RegionKind` and `Region`.\n\nSpecifically, change `Region` from this:\n```\npub type Region<'tcx> = &'tcx RegionKind;\n```\nto this:\n```\npub struct Region<'tcx>(&'tcx Interned<RegionKind>);\n```\n\nThis now matches `Ty` and `Predicate` more closely.\n\nThings to note\n- Regions have always been interned, but we haven't been using pointer-based\n  `Eq` and `Hash`. This is now happening.\n- I chose to impl `Deref` for `Region` because it makes pattern matching a lot\n  nicer, and `Region` can be viewed as just a smart wrapper for `RegionKind`.\n- Various methods are moved from `RegionKind` to `Region`.\n- There is a lot of tedious sigil changes.\n- A couple of types like `HighlightBuilder`, `RegionHighlightMode` now have a\n  `'tcx` lifetime because they hold a `Ty<'tcx>`, so they can call `mk_region`.\n- A couple of test outputs change slightly, I'm not sure why, but the new\n  outputs are a little better.", "tree": {"sha": "3502fb68651acb833b75c61bccc871b2ccb64ca5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3502fb68651acb833b75c61bccc871b2ccb64ca5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18e7b7ece129d0393bb739cb4f9557689e184080", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18e7b7ece129d0393bb739cb4f9557689e184080", "html_url": "https://github.com/rust-lang/rust/commit/18e7b7ece129d0393bb739cb4f9557689e184080", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18e7b7ece129d0393bb739cb4f9557689e184080/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a20fa93b594a0d166402e811a033c6f1e153cf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a20fa93b594a0d166402e811a033c6f1e153cf2", "html_url": "https://github.com/rust-lang/rust/commit/6a20fa93b594a0d166402e811a033c6f1e153cf2"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "a0550860fa54531be5476ad9298b7333f4edfa72", "filename": "src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18e7b7ece129d0393bb739cb4f9557689e184080/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18e7b7ece129d0393bb739cb4f9557689e184080/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=18e7b7ece129d0393bb739cb4f9557689e184080", "patch": "@@ -544,7 +544,7 @@ pub(crate) fn codegen_drop<'tcx>(\n                 let arg_value = drop_place.place_ref(\n                     fx,\n                     fx.layout_of(fx.tcx.mk_ref(\n-                        &ty::RegionKind::ReErased,\n+                        fx.tcx.lifetimes.re_erased,\n                         TypeAndMut { ty, mutbl: crate::rustc_hir::Mutability::Mut },\n                     )),\n                 );"}]}