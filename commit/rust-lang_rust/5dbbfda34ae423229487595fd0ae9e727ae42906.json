{"sha": "5dbbfda34ae423229487595fd0ae9e727ae42906", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYmJmZGEzNGFlNDIzMjI5NDg3NTk1ZmQwYWU5ZTcyN2FlNDI5MDY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-28T16:50:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-28T16:50:16Z"}, "message": "simplify strip attrs", "tree": {"sha": "647be92788a5d338bcfbb088ffb4e56582ad3367", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/647be92788a5d338bcfbb088ffb4e56582ad3367"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dbbfda34ae423229487595fd0ae9e727ae42906", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dbbfda34ae423229487595fd0ae9e727ae42906", "html_url": "https://github.com/rust-lang/rust/commit/5dbbfda34ae423229487595fd0ae9e727ae42906", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dbbfda34ae423229487595fd0ae9e727ae42906/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbdf0e24d51ce425c0066a76a0efc723e41e5071", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbdf0e24d51ce425c0066a76a0efc723e41e5071", "html_url": "https://github.com/rust-lang/rust/commit/dbdf0e24d51ce425c0066a76a0efc723e41e5071"}], "stats": {"total": 64, "additions": 35, "deletions": 29}, "files": [{"sha": "3fce4a5b78d7ed9efa1c0df2c0f2e319e76acc88", "filename": "crates/ra_assists/src/assists/add_missing_impl_members.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5dbbfda34ae423229487595fd0ae9e727ae42906/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dbbfda34ae423229487595fd0ae9e727ae42906/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs?ref=5dbbfda34ae423229487595fd0ae9e727ae42906", "patch": "@@ -1,6 +1,6 @@\n use hir::{db::HirDatabase, HasSource};\n use ra_syntax::{\n-    ast::{self, make, AstNode, NameOwner},\n+    ast::{self, edit, make, AstNode, NameOwner},\n     SmolStr,\n };\n \n@@ -76,8 +76,8 @@ fn add_missing_impl_members_inner(\n     ctx.add_action(AssistId(assist_id), label, |edit| {\n         let n_existing_items = impl_item_list.impl_items().count();\n         let items = missing_items.into_iter().map(|it| match it {\n-            ast::ImplItem::FnDef(def) => strip_docstring(add_body(def).into()),\n-            _ => strip_docstring(it),\n+            ast::ImplItem::FnDef(def) => edit::strip_attrs_and_docs(add_body(def).into()),\n+            _ => edit::strip_attrs_and_docs(it),\n         });\n         let mut ast_editor = AstEditor::new(impl_item_list);\n \n@@ -93,12 +93,6 @@ fn add_missing_impl_members_inner(\n     ctx.build()\n }\n \n-fn strip_docstring(item: ast::ImplItem) -> ast::ImplItem {\n-    let mut ast_editor = AstEditor::new(item);\n-    ast_editor.strip_attrs_and_docs();\n-    ast_editor.ast().to_owned()\n-}\n-\n fn add_body(fn_def: ast::FnDef) -> ast::FnDef {\n     if fn_def.body().is_none() {\n         fn_def.with_body(make::block_from_expr(make::expr_unimplemented()))"}, {"sha": "60b8923e1e09ecbe410bad9e8d3a1a346520c72b", "filename": "crates/ra_assists/src/ast_editor.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5dbbfda34ae423229487595fd0ae9e727ae42906/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dbbfda34ae423229487595fd0ae9e727ae42906/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_editor.rs?ref=5dbbfda34ae423229487595fd0ae9e727ae42906", "patch": "@@ -212,23 +212,6 @@ impl AstEditor<ast::ItemList> {\n     }\n }\n \n-impl AstEditor<ast::ImplItem> {\n-    pub fn strip_attrs_and_docs(&mut self) {\n-        while let Some(start) = self\n-            .ast()\n-            .syntax()\n-            .children_with_tokens()\n-            .find(|it| it.kind() == ATTR || it.kind() == COMMENT)\n-        {\n-            let end = match &start.next_sibling_or_token() {\n-                Some(el) if el.kind() == WHITESPACE => el.clone(),\n-                Some(_) | None => start.clone(),\n-            };\n-            self.ast = self.replace_children(RangeInclusive::new(start, end), iter::empty());\n-        }\n-    }\n-}\n-\n impl AstEditor<ast::TypeParam> {\n     pub fn remove_bounds(&mut self) -> &mut Self {\n         let colon = match self.ast.colon_token() {"}, {"sha": "1b2ce921a51c8d128066b11b06305954095d2966", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dbbfda34ae423229487595fd0ae9e727ae42906/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dbbfda34ae423229487595fd0ae9e727ae42906/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=5dbbfda34ae423229487595fd0ae9e727ae42906", "patch": "@@ -5,7 +5,7 @@ mod traits;\n mod tokens;\n mod extensions;\n mod expr_extensions;\n-mod edit;\n+pub mod edit;\n pub mod make;\n \n use std::marker::PhantomData;"}, {"sha": "7013cc9b5b67e829e379a91a61b645248238e7d9", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5dbbfda34ae423229487595fd0ae9e727ae42906/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dbbfda34ae423229487595fd0ae9e727ae42906/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=5dbbfda34ae423229487595fd0ae9e727ae42906", "patch": "@@ -1,14 +1,16 @@\n //! This module contains functions for editing syntax trees. As the trees are\n //! immutable, all function here return a fresh copy of the tree, instead of\n //! doing an in-place modification.\n+use std::{iter, ops::RangeInclusive};\n \n use arrayvec::ArrayVec;\n-use std::ops::RangeInclusive;\n \n use crate::{\n     algo,\n     ast::{self, make, AstNode},\n     InsertPosition, SyntaxElement,\n+    SyntaxKind::{ATTR, COMMENT, WHITESPACE},\n+    SyntaxNode,\n };\n \n impl ast::FnDef {\n@@ -31,6 +33,23 @@ impl ast::FnDef {\n     }\n }\n \n+pub fn strip_attrs_and_docs<N: ast::AttrsOwner>(node: N) -> N {\n+    N::cast(strip_attrs_and_docs_inner(node.syntax().clone())).unwrap()\n+}\n+\n+fn strip_attrs_and_docs_inner(mut node: SyntaxNode) -> SyntaxNode {\n+    while let Some(start) =\n+        node.children_with_tokens().find(|it| it.kind() == ATTR || it.kind() == COMMENT)\n+    {\n+        let end = match &start.next_sibling_or_token() {\n+            Some(el) if el.kind() == WHITESPACE => el.clone(),\n+            Some(_) | None => start.clone(),\n+        };\n+        node = algo::replace_children(&node, RangeInclusive::new(start, end), &mut iter::empty());\n+    }\n+    node\n+}\n+\n #[must_use]\n fn insert_children<N: AstNode>(\n     parent: &N,"}, {"sha": "8c5ece65d2bb1bd3cc4cc9bc14cd1d5d2ecc711f", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5dbbfda34ae423229487595fd0ae9e727ae42906/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dbbfda34ae423229487595fd0ae9e727ae42906/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=5dbbfda34ae423229487595fd0ae9e727ae42906", "patch": "@@ -4,7 +4,7 @@\n use itertools::Itertools;\n \n use crate::{\n-    ast::{self, child_opt, children, AstNode, SyntaxNode},\n+    ast::{self, child_opt, children, AstChildren, AstNode, SyntaxNode},\n     SmolStr, SyntaxElement,\n     SyntaxKind::*,\n     SyntaxToken, T,\n@@ -203,6 +203,16 @@ impl ast::ImplBlock {\n     }\n }\n \n+impl ast::AttrsOwner for ast::ImplItem {\n+    fn attrs(&self) -> AstChildren<ast::Attr> {\n+        match self {\n+            ast::ImplItem::FnDef(it) => it.attrs(),\n+            ast::ImplItem::TypeAliasDef(it) => it.attrs(),\n+            ast::ImplItem::ConstDef(it) => it.attrs(),\n+        }\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub enum StructKind {\n     Tuple(ast::TupleFieldDefList),"}]}