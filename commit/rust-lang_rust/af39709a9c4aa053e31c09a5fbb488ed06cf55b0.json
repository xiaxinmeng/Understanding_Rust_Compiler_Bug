{"sha": "af39709a9c4aa053e31c09a5fbb488ed06cf55b0", "node_id": "C_kwDOAAsO6NoAKGFmMzk3MDlhOWM0YWEwNTNlMzFjMDlhNWZiYjQ4OGVkMDZjZjU1YjA", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-01T14:14:31Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-01T14:14:31Z"}, "message": "rustup", "tree": {"sha": "1150daec101d33bacb573c502f2cb6913da594d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1150daec101d33bacb573c502f2cb6913da594d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af39709a9c4aa053e31c09a5fbb488ed06cf55b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af39709a9c4aa053e31c09a5fbb488ed06cf55b0", "html_url": "https://github.com/rust-lang/rust/commit/af39709a9c4aa053e31c09a5fbb488ed06cf55b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af39709a9c4aa053e31c09a5fbb488ed06cf55b0/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9e0cf4951c0e27897a3f129cd354d7713020e9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9e0cf4951c0e27897a3f129cd354d7713020e9f", "html_url": "https://github.com/rust-lang/rust/commit/f9e0cf4951c0e27897a3f129cd354d7713020e9f"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "4198e8cf3c0868f4536832baf9cb6a9305a31804", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af39709a9c4aa053e31c09a5fbb488ed06cf55b0/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/af39709a9c4aa053e31c09a5fbb488ed06cf55b0/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=af39709a9c4aa053e31c09a5fbb488ed06cf55b0", "patch": "@@ -1 +1 @@\n-bf45371f262e184b4a77adea88c8ac01ac79759b\n+ca1e68b3229e710c3948a361ee770d846a88e6da"}, {"sha": "7f6304c3815f1edfa2265c98e029160badb7a513", "filename": "src/concurrency/data_race.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/af39709a9c4aa053e31c09a5fbb488ed06cf55b0/src%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af39709a9c4aa053e31c09a5fbb488ed06cf55b0/src%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Fdata_race.rs?ref=af39709a9c4aa053e31c09a5fbb488ed06cf55b0", "patch": "@@ -535,7 +535,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         this.validate_overlapping_atomic(dest)?;\n-        this.allow_data_races_mut(move |this| this.write_scalar(val, &(*dest).into()))?;\n+        this.allow_data_races_mut(move |this| this.write_scalar(val, &dest.into()))?;\n         this.validate_atomic_store(dest, atomic)?;\n         // FIXME: it's not possible to get the value before write_scalar. A read_scalar will cause\n         // side effects from a read the program did not perform. So we have to initialise\n@@ -562,7 +562,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n         // Atomics wrap around on overflow.\n         let val = this.binary_op(op, &old, rhs)?;\n         let val = if neg { this.unary_op(mir::UnOp::Not, &val)? } else { val };\n-        this.allow_data_races_mut(|this| this.write_immediate(*val, &(*place).into()))?;\n+        this.allow_data_races_mut(|this| this.write_immediate(*val, &place.into()))?;\n \n         this.validate_atomic_rmw(place, atomic)?;\n \n@@ -587,7 +587,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n \n         this.validate_overlapping_atomic(place)?;\n         let old = this.allow_data_races_mut(|this| this.read_scalar(&place.into()))?;\n-        this.allow_data_races_mut(|this| this.write_scalar(new, &(*place).into()))?;\n+        this.allow_data_races_mut(|this| this.write_scalar(new, &place.into()))?;\n \n         this.validate_atomic_rmw(place, atomic)?;\n \n@@ -616,7 +616,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n             if lt { &rhs } else { &old }\n         };\n \n-        this.allow_data_races_mut(|this| this.write_immediate(**new_val, &(*place).into()))?;\n+        this.allow_data_races_mut(|this| this.write_immediate(**new_val, &place.into()))?;\n \n         this.validate_atomic_rmw(place, atomic)?;\n \n@@ -675,7 +675,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n         // if successful, perform a full rw-atomic validation\n         // otherwise treat this as an atomic load with the fail ordering.\n         if cmpxchg_success {\n-            this.allow_data_races_mut(|this| this.write_scalar(new, &(*place).into()))?;\n+            this.allow_data_races_mut(|this| this.write_scalar(new, &place.into()))?;\n             this.validate_atomic_rmw(place, success)?;\n             this.buffered_atomic_rmw(new, place, success, old.to_scalar_or_uninit())?;\n         } else {"}, {"sha": "5ca58d90e07d97001faad8c58887d8b27a693d89", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af39709a9c4aa053e31c09a5fbb488ed06cf55b0/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af39709a9c4aa053e31c09a5fbb488ed06cf55b0/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=af39709a9c4aa053e31c09a5fbb488ed06cf55b0", "patch": "@@ -1097,7 +1097,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 if let Some((mutbl, protector)) = qualify(place.layout.ty, self.kind) {\n                     let val = self.ecx.read_immediate(&place.into())?;\n                     let val = self.ecx.retag_reference(&val, mutbl, protector)?;\n-                    self.ecx.write_immediate(*val, &(*place).into())?;\n+                    self.ecx.write_immediate(*val, &place.into())?;\n                 } else {\n                     // Maybe we need to go deeper.\n                     self.walk_value(place)?;"}]}