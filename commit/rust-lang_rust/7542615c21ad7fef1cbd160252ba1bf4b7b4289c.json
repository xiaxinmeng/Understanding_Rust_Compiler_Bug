{"sha": "7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NDI2MTVjMjFhZDdmZWYxY2JkMTYwMjUyYmExYmY0YjdiNDI4OWM=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-08-18T20:44:06Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-08-18T20:44:06Z"}, "message": "change const param ty warning message", "tree": {"sha": "770418c4943bc54b199bae6d8f48e20c906c498b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/770418c4943bc54b199bae6d8f48e20c906c498b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "html_url": "https://github.com/rust-lang/rust/commit/7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ad01e993272132b96e9f1f9c390c85816672ce3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ad01e993272132b96e9f1f9c390c85816672ce3", "html_url": "https://github.com/rust-lang/rust/commit/6ad01e993272132b96e9f1f9c390c85816672ce3"}], "stats": {"total": 164, "additions": 78, "deletions": 86}, "files": [{"sha": "810bf59ea6c35ad936da1cbcdd6266520379b658", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "patch": "@@ -289,12 +289,14 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n             let ty = tcx.type_of(tcx.hir().local_def_id(param.hir_id));\n \n             let err_ty_str;\n+            let mut is_ptr = true;\n             let err = if tcx.features().min_const_generics {\n                 match ty.kind {\n                     ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Error(_) => None,\n                     ty::FnPtr(_) => Some(\"function pointers\"),\n                     ty::RawPtr(_) => Some(\"raw pointers\"),\n                     _ => {\n+                        is_ptr = false;\n                         err_ty_str = format!(\"`{}`\", ty);\n                         Some(err_ty_str.as_str())\n                     }\n@@ -307,19 +309,29 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n                 }\n             };\n             if let Some(unsupported_type) = err {\n-                let mut err = tcx.sess.struct_span_err(\n-                    hir_ty.span,\n-                    &format!(\"using {} as const generic parameters is forbidden\", unsupported_type),\n-                );\n-\n-                if tcx.features().min_const_generics {\n-                    err.note(\"the only supported types are integers, `bool` and `char`\")\n+                if is_ptr {\n+                    tcx.sess.span_err(\n+                        hir_ty.span,\n+                        &format!(\n+                            \"using {} as const generic parameters is forbidden\",\n+                            unsupported_type\n+                        ),\n+                    )\n+                } else {\n+                    tcx.sess\n+                        .struct_span_err(\n+                            hir_ty.span,\n+                            &format!(\n+                                \"{} is forbidden as the type of a const generic parameter\",\n+                                unsupported_type\n+                            ),\n+                        )\n+                        .note(\"the only supported types are integers, `bool` and `char`\")\n                         .note(\"more complex types are supported with `#[feature(const_generics)]`\")\n                         .emit()\n-                } else {\n-                    err.emit();\n                 }\n             };\n+\n             if traits::search_for_structural_match_violation(param.hir_id, param.span, tcx, ty)\n                 .is_some()\n             {"}, {"sha": "809514e8a1c9da2ecdebddeb3cbf309a61eb098a", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr?ref=7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "patch": "@@ -14,7 +14,7 @@ LL |     arr: [u8; CFG.arr_size],\n    |\n    = help: it is currently only allowed to use either `CFG` or `{ CFG }` as generic constants\n \n-error: using `Config` as const generic parameters is forbidden\n+error: `Config` is forbidden as the type of a const generic parameter\n   --> $DIR/array-size-in-generic-struct-param.rs:18:21\n    |\n LL | struct B<const CFG: Config> {"}, {"sha": "8bd3b78725957785ddf5f7509e52e60c0d020fdd", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs?ref=7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "patch": "@@ -16,7 +16,7 @@ struct Config {\n }\n \n struct B<const CFG: Config> {\n-    //[min]~^ ERROR using `Config` as const generic parameters is forbidden\n+    //[min]~^ ERROR `Config` is forbidden\n     arr: [u8; CFG.arr_size],\n     //[full]~^ ERROR constant expression depends on a generic parameter\n     //[min]~^^ ERROR generic parameters must not be used inside of non trivial"}, {"sha": "81dbaee0ec514ff062cd597731958f1d6d483e59", "filename": "src/test/ui/const-generics/const-param-elided-lifetime.min.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.min.stderr?ref=7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "patch": "@@ -28,7 +28,7 @@ error[E0637]: `&` without an explicit lifetime name cannot be used here\n LL | fn bar<const N: &u8>() {}\n    |                 ^ explicit lifetime name needed here\n \n-error: using `&'static u8` as const generic parameters is forbidden\n+error: `&'static u8` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-elided-lifetime.rs:11:19\n    |\n LL | struct A<const N: &u8>;\n@@ -37,7 +37,7 @@ LL | struct A<const N: &u8>;\n    = note: the only supported types are integers, `bool` and `char`\n    = note: more complex types are supported with `#[feature(const_generics)]`\n \n-error: using `&'static u8` as const generic parameters is forbidden\n+error: `&'static u8` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-elided-lifetime.rs:16:15\n    |\n LL | impl<const N: &u8> A<N> {\n@@ -46,7 +46,7 @@ LL | impl<const N: &u8> A<N> {\n    = note: the only supported types are integers, `bool` and `char`\n    = note: more complex types are supported with `#[feature(const_generics)]`\n \n-error: using `&'static u8` as const generic parameters is forbidden\n+error: `&'static u8` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-elided-lifetime.rs:24:15\n    |\n LL | impl<const N: &u8> B for A<N> {}\n@@ -55,7 +55,7 @@ LL | impl<const N: &u8> B for A<N> {}\n    = note: the only supported types are integers, `bool` and `char`\n    = note: more complex types are supported with `#[feature(const_generics)]`\n \n-error: using `&'static u8` as const generic parameters is forbidden\n+error: `&'static u8` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-elided-lifetime.rs:28:17\n    |\n LL | fn bar<const N: &u8>() {}\n@@ -64,7 +64,7 @@ LL | fn bar<const N: &u8>() {}\n    = note: the only supported types are integers, `bool` and `char`\n    = note: more complex types are supported with `#[feature(const_generics)]`\n \n-error: using `&'static u8` as const generic parameters is forbidden\n+error: `&'static u8` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-elided-lifetime.rs:19:21\n    |\n LL |     fn foo<const M: &u8>(&self) {}"}, {"sha": "633e876f1d7dd29c054eed348a3c317a848fc591", "filename": "src/test/ui/const-generics/const-param-elided-lifetime.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.rs?ref=7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "patch": "@@ -10,23 +10,23 @@\n \n struct A<const N: &u8>;\n //~^ ERROR `&` without an explicit lifetime name cannot be used here\n-//[min]~^^ ERROR using `&'static u8` as const generic parameters is forbidden\n+//[min]~^^ ERROR `&'static u8` is forbidden\n trait B {}\n \n impl<const N: &u8> A<N> {\n //~^ ERROR `&` without an explicit lifetime name cannot be used here\n-//[min]~^^ ERROR using `&'static u8` as const generic parameters is forbidden\n+//[min]~^^ ERROR `&'static u8` is forbidden\n     fn foo<const M: &u8>(&self) {}\n     //~^ ERROR `&` without an explicit lifetime name cannot be used here\n-    //[min]~^^ ERROR using `&'static u8` as const generic parameters is forbidden\n+    //[min]~^^ ERROR `&'static u8` is forbidden\n }\n \n impl<const N: &u8> B for A<N> {}\n //~^ ERROR `&` without an explicit lifetime name cannot be used here\n-//[min]~^^ ERROR using `&'static u8` as const generic parameters is forbidden\n+//[min]~^^ ERROR `&'static u8` is forbidden\n \n fn bar<const N: &u8>() {}\n //~^ ERROR `&` without an explicit lifetime name cannot be used here\n-//[min]~^^ ERROR using `&'static u8` as const generic parameters is forbidden\n+//[min]~^^ ERROR `&'static u8` is forbidden\n \n fn main() {}"}, {"sha": "b00a160787629a1be9be1ba90b4de8e57d82592a", "filename": "src/test/ui/const-generics/const-param-type-depends-on-const-param.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr?ref=7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "patch": "@@ -10,7 +10,7 @@ error[E0770]: the type of const parameters must not depend on other generic para\n LL | pub struct SelfDependent<const N: [u8; N]>;\n    |                                        ^ the type must not depend on the parameter `N`\n \n-error: using `[u8; _]` as const generic parameters is forbidden\n+error: `[u8; _]` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-type-depends-on-const-param.rs:12:47\n    |\n LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n@@ -19,7 +19,7 @@ LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n    = note: the only supported types are integers, `bool` and `char`\n    = note: more complex types are supported with `#[feature(const_generics)]`\n \n-error: using `[u8; _]` as const generic parameters is forbidden\n+error: `[u8; _]` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-type-depends-on-const-param.rs:16:35\n    |\n LL | pub struct SelfDependent<const N: [u8; N]>;"}, {"sha": "29371eeb21d1cf0721c0370982eb6009d6f1a910", "filename": "src/test/ui/const-generics/const-param-type-depends-on-const-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs?ref=7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "patch": "@@ -11,10 +11,10 @@\n \n pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n //~^ ERROR: the type of const parameters must not depend on other generic parameters\n-//[min]~^^ ERROR using `[u8; _]` as const generic parameters is forbidden\n+//[min]~^^ ERROR `[u8; _]` is forbidden\n \n pub struct SelfDependent<const N: [u8; N]>;\n //~^ ERROR: the type of const parameters must not depend on other generic parameters\n-//[min]~^^ ERROR using `[u8; _]` as const generic parameters is forbidden\n+//[min]~^^ ERROR `[u8; _]` is forbidden\n \n fn main() {}"}, {"sha": "050b28abe5088168cdc1c8f402489ed3d7a1d6f9", "filename": "src/test/ui/const-generics/different_byref.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.min.stderr?ref=7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "patch": "@@ -1,4 +1,4 @@\n-error: using `[usize; 1]` as const generic parameters is forbidden\n+error: `[usize; 1]` is forbidden as the type of a const generic parameter\n   --> $DIR/different_byref.rs:8:23\n    |\n LL | struct Const<const V: [usize; 1]> {}"}, {"sha": "cd3960eeb8e0d16cab324fcfe6468f020ca149cb", "filename": "src/test/ui/const-generics/different_byref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.rs?ref=7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "patch": "@@ -6,7 +6,7 @@\n #![cfg_attr(min, feature(min_const_generics))]\n \n struct Const<const V: [usize; 1]> {}\n-//[min]~^ using `[usize; 1]` as const generic parameters is forbidden\n+//[min]~^ ERROR `[usize; 1]` is forbidden\n \n fn main() {\n     let mut x = Const::<{ [3] }> {};"}, {"sha": "f1bd8def9ff161cf89c88289aaf01f5315ab2bba", "filename": "src/test/ui/const-generics/fn-const-param-call.min.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-call.min.stderr?ref=7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "patch": "@@ -3,18 +3,12 @@ error: using function pointers as const generic parameters is forbidden\n    |\n LL | struct Wrapper<const F: fn() -> u32>;\n    |                         ^^^^^^^^^^^\n-   |\n-   = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n \n error: using function pointers as const generic parameters is forbidden\n   --> $DIR/fn-const-param-call.rs:14:15\n    |\n LL | impl<const F: fn() -> u32> Wrapper<F> {\n    |               ^^^^^^^^^^^\n-   |\n-   = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4bdc9b89af607d25e63f90cbbb4292a034dd1c39", "filename": "src/test/ui/const-generics/fn-const-param-infer.min.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.min.stderr?ref=7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "patch": "@@ -3,9 +3,6 @@ error: using function pointers as const generic parameters is forbidden\n    |\n LL | struct Checked<const F: fn(usize) -> bool>;\n    |                         ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n \n error: aborting due to previous error\n "}, {"sha": "40d8f44cafc04c8f5dc1d678c4e6849de2b30ce8", "filename": "src/test/ui/const-generics/forbid-non-structural_match-types.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.min.stderr?ref=7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "patch": "@@ -1,4 +1,4 @@\n-error: using `A` as const generic parameters is forbidden\n+error: `A` is forbidden as the type of a const generic parameter\n   --> $DIR/forbid-non-structural_match-types.rs:10:19\n    |\n LL | struct B<const X: A>; // ok\n@@ -7,7 +7,7 @@ LL | struct B<const X: A>; // ok\n    = note: the only supported types are integers, `bool` and `char`\n    = note: more complex types are supported with `#[feature(const_generics)]`\n \n-error: using `C` as const generic parameters is forbidden\n+error: `C` is forbidden as the type of a const generic parameter\n   --> $DIR/forbid-non-structural_match-types.rs:15:19\n    |\n LL | struct D<const X: C>;"}, {"sha": "e7356d485dbffa662f21f30259e03e1846598a11", "filename": "src/test/ui/const-generics/forbid-non-structural_match-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.rs?ref=7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "patch": "@@ -8,11 +8,11 @@\n struct A;\n \n struct B<const X: A>; // ok\n-//[min]~^ ERROR using `A` as const generic parameters is forbidden\n+//[min]~^ ERROR `A` is forbidden\n \n struct C;\n \n struct D<const X: C>; //~ ERROR `C` must be annotated with `#[derive(PartialEq, Eq)]`\n-//[min]~^ ERROR using `C` as const generic parameters is forbidden\n+//[min]~^ ERROR `C` is forbidden\n \n fn main() {}"}, {"sha": "786ded3c2fe42aabc4b2201d3fcb021fd410db84", "filename": "src/test/ui/const-generics/issue-66596-impl-trait-for-str-const-arg.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.min.stderr?ref=7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "patch": "@@ -1,4 +1,4 @@\n-error: using `&'static str` as const generic parameters is forbidden\n+error: `&'static str` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-66596-impl-trait-for-str-const-arg.rs:9:25\n    |\n LL | trait Trait<const NAME: &'static str> {"}, {"sha": "11d4bf4c3e6aa87f58b688f0f6a20d69457fcade", "filename": "src/test/ui/const-generics/issue-66596-impl-trait-for-str-const-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.rs?ref=7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "patch": "@@ -7,7 +7,7 @@\n \n \n trait Trait<const NAME: &'static str> {\n-//[min]~^ ERROR using `&'static str` as const generic parameters is forbidden\n+//[min]~^ ERROR `&'static str` is forbidden\n     type Assoc;\n }\n "}, {"sha": "f093e6651bc2826bd14c7536ea3264f3a32e31c4", "filename": "src/test/ui/const-generics/issues/issue-74950.min.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.min.stderr?ref=7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "patch": "@@ -1,4 +1,4 @@\n-error: using `Inner` as const generic parameters is forbidden\n+error: `Inner` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-74950.rs:18:23\n    |\n LL | struct Outer<const I: Inner>;\n@@ -7,7 +7,7 @@ LL | struct Outer<const I: Inner>;\n    = note: the only supported types are integers, `bool` and `char`\n    = note: more complex types are supported with `#[feature(const_generics)]`\n \n-error: using `Inner` as const generic parameters is forbidden\n+error: `Inner` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-74950.rs:18:23\n    |\n LL | struct Outer<const I: Inner>;\n@@ -16,7 +16,7 @@ LL | struct Outer<const I: Inner>;\n    = note: the only supported types are integers, `bool` and `char`\n    = note: more complex types are supported with `#[feature(const_generics)]`\n \n-error: using `Inner` as const generic parameters is forbidden\n+error: `Inner` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-74950.rs:18:23\n    |\n LL | struct Outer<const I: Inner>;\n@@ -25,7 +25,7 @@ LL | struct Outer<const I: Inner>;\n    = note: the only supported types are integers, `bool` and `char`\n    = note: more complex types are supported with `#[feature(const_generics)]`\n \n-error: using `Inner` as const generic parameters is forbidden\n+error: `Inner` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-74950.rs:18:23\n    |\n LL | struct Outer<const I: Inner>;\n@@ -34,7 +34,7 @@ LL | struct Outer<const I: Inner>;\n    = note: the only supported types are integers, `bool` and `char`\n    = note: more complex types are supported with `#[feature(const_generics)]`\n \n-error: using `Inner` as const generic parameters is forbidden\n+error: `Inner` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-74950.rs:18:23\n    |\n LL | struct Outer<const I: Inner>;"}, {"sha": "39f91f2b83dfbe7a08687457e57a5abf124c57ca", "filename": "src/test/ui/const-generics/issues/issue-74950.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.rs?ref=7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "patch": "@@ -16,10 +16,10 @@ struct Inner;\n // - impl StructuralEq\n #[derive(PartialEq, Eq)]\n struct Outer<const I: Inner>;\n-//[min]~^ using `Inner` as const generic parameters is forbidden\n-//[min]~| using `Inner` as const generic parameters is forbidden\n-//[min]~| using `Inner` as const generic parameters is forbidden\n-//[min]~| using `Inner` as const generic parameters is forbidden\n-//[min]~| using `Inner` as const generic parameters is forbidden\n+//[min]~^ `Inner` is forbidden\n+//[min]~| `Inner` is forbidden\n+//[min]~| `Inner` is forbidden\n+//[min]~| `Inner` is forbidden\n+//[min]~| `Inner` is forbidden\n \n fn main() {}"}, {"sha": "98bc99d019421f3c6f69344d3df62502678d3999", "filename": "src/test/ui/const-generics/min_const_generics/complex-types.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.rs?ref=7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "patch": "@@ -1,18 +1,17 @@\n #![feature(min_const_generics)]\n \n struct Foo<const N: [u8; 0]>;\n-//~^ ERROR using `[u8; 0]` as const generic parameters is forbidden\n+//~^ ERROR `[u8; 0]` is forbidden\n \n struct Bar<const N: ()>;\n-//~^ ERROR using `()` as const generic parameters is forbidden\n-\n+//~^ ERROR `()` is forbidden\n #[derive(PartialEq, Eq)]\n struct No;\n \n struct Fez<const N: No>;\n-//~^ ERROR using `No` as const generic parameters is forbidden\n+//~^ ERROR `No` is forbidden\n \n struct Faz<const N: &'static u8>;\n-//~^ ERROR using `&'static u8` as const generic parameters is forbidden\n+//~^ ERROR `&'static u8` is forbidden\n \n fn main() {}"}, {"sha": "4772aaf1b3e0c252c2fdec741953387892dc79b5", "filename": "src/test/ui/const-generics/min_const_generics/complex-types.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.stderr?ref=7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "patch": "@@ -1,4 +1,4 @@\n-error: using `[u8; 0]` as const generic parameters is forbidden\n+error: `[u8; 0]` is forbidden as the type of a const generic parameter\n   --> $DIR/complex-types.rs:3:21\n    |\n LL | struct Foo<const N: [u8; 0]>;\n@@ -7,7 +7,7 @@ LL | struct Foo<const N: [u8; 0]>;\n    = note: the only supported types are integers, `bool` and `char`\n    = note: more complex types are supported with `#[feature(const_generics)]`\n \n-error: using `()` as const generic parameters is forbidden\n+error: `()` is forbidden as the type of a const generic parameter\n   --> $DIR/complex-types.rs:6:21\n    |\n LL | struct Bar<const N: ()>;\n@@ -16,17 +16,17 @@ LL | struct Bar<const N: ()>;\n    = note: the only supported types are integers, `bool` and `char`\n    = note: more complex types are supported with `#[feature(const_generics)]`\n \n-error: using `No` as const generic parameters is forbidden\n-  --> $DIR/complex-types.rs:12:21\n+error: `No` is forbidden as the type of a const generic parameter\n+  --> $DIR/complex-types.rs:11:21\n    |\n LL | struct Fez<const N: No>;\n    |                     ^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n    = note: more complex types are supported with `#[feature(const_generics)]`\n \n-error: using `&'static u8` as const generic parameters is forbidden\n-  --> $DIR/complex-types.rs:15:21\n+error: `&'static u8` is forbidden as the type of a const generic parameter\n+  --> $DIR/complex-types.rs:14:21\n    |\n LL | struct Faz<const N: &'static u8>;\n    |                     ^^^^^^^^^^^"}, {"sha": "ded6f882caf42f139cd5a2850645ca3ec5c66b88", "filename": "src/test/ui/const-generics/nested-type.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.full.stderr?ref=7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "patch": "@@ -1,11 +1,11 @@\n error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/nested-type.rs:17:5\n+  --> $DIR/nested-type.rs:16:5\n    |\n LL |     Foo::<17>::value()\n    |     ^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/nested-type.rs:17:5\n+  --> $DIR/nested-type.rs:16:5\n    |\n LL |     Foo::<17>::value()\n    |     ^^^^^^^^^^^^^^^^^^ calling non-const function `Foo::{{constant}}#0::Foo::<17_usize>::value`"}, {"sha": "55f6fe7cc16e85eab2dc01521212e4a21576fdbd", "filename": "src/test/ui/const-generics/nested-type.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.min.stderr?ref=7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "patch": "@@ -1,11 +1,11 @@\n-error: using `[u8; _]` as const generic parameters is forbidden\n+error: `[u8; _]` is forbidden as the type of a const generic parameter\n   --> $DIR/nested-type.rs:7:21\n    |\n LL |   struct Foo<const N: [u8; {\n    |  _____________________^\n-LL | |\n LL | |     struct Foo<const N: usize>;\n LL | |\n+LL | |     impl<const N: usize> Foo<N> {\n ...  |\n LL | |\n LL | | }]>;\n@@ -15,13 +15,13 @@ LL | | }]>;\n    = note: more complex types are supported with `#[feature(const_generics)]`\n \n error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/nested-type.rs:17:5\n+  --> $DIR/nested-type.rs:16:5\n    |\n LL |     Foo::<17>::value()\n    |     ^^^^^^^^^^^^^^^^^^\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/nested-type.rs:17:5\n+  --> $DIR/nested-type.rs:16:5\n    |\n LL |     Foo::<17>::value()\n    |     ^^^^^^^^^^^^^^^^^^ calling non-const function `Foo::{{constant}}#0::Foo::<17_usize>::value`"}, {"sha": "8372551fb450b5293254031f60a3a0b0d26b840c", "filename": "src/test/ui/const-generics/nested-type.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.rs?ref=7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "patch": "@@ -4,8 +4,7 @@\n #![cfg_attr(full, allow(incomplete_features))]\n #![cfg_attr(min, feature(min_const_generics))]\n \n-struct Foo<const N: [u8; {\n-//[min]~^ ERROR using `[u8; _]` as const generic\n+struct Foo<const N: [u8; { //[min]~ ERROR `[u8; _]` is forbidden\n     struct Foo<const N: usize>;\n \n     impl<const N: usize> Foo<N> {"}, {"sha": "ffaab51f766d8d8b264c03f9096935041fc9a7cc", "filename": "src/test/ui/const-generics/raw-ptr-const-param-deref.min.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param-deref.min.stderr?ref=7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "patch": "@@ -3,18 +3,12 @@ error: using raw pointers as const generic parameters is forbidden\n    |\n LL | struct Const<const P: *const u32>;\n    |                       ^^^^^^^^^^\n-   |\n-   = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n \n error: using raw pointers as const generic parameters is forbidden\n   --> $DIR/raw-ptr-const-param-deref.rs:12:15\n    |\n LL | impl<const P: *const u32> Const<P> {\n    |               ^^^^^^^^^^\n-   |\n-   = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d317aa0f585cf9c616ae74b02b5f952ee24a5faa", "filename": "src/test/ui/const-generics/raw-ptr-const-param.min.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.min.stderr?ref=7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "patch": "@@ -3,9 +3,6 @@ error: using raw pointers as const generic parameters is forbidden\n    |\n LL | struct Const<const P: *const u32>;\n    |                       ^^^^^^^^^^\n-   |\n-   = note: the only supported types are integers, `bool` and `char`\n-   = note: more complex types are supported with `#[feature(const_generics)]`\n \n error: aborting due to previous error\n "}, {"sha": "1f711bef4aa633bed823f9ec73383956e8d4ce6a", "filename": "src/test/ui/const-generics/slice-const-param-mismatch.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.min.stderr?ref=7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "patch": "@@ -1,4 +1,4 @@\n-error: using `&'static str` as const generic parameters is forbidden\n+error: `&'static str` is forbidden as the type of a const generic parameter\n   --> $DIR/slice-const-param-mismatch.rs:8:29\n    |\n LL | struct ConstString<const T: &'static str>;\n@@ -7,7 +7,7 @@ LL | struct ConstString<const T: &'static str>;\n    = note: the only supported types are integers, `bool` and `char`\n    = note: more complex types are supported with `#[feature(const_generics)]`\n \n-error: using `&'static [u8]` as const generic parameters is forbidden\n+error: `&'static [u8]` is forbidden as the type of a const generic parameter\n   --> $DIR/slice-const-param-mismatch.rs:10:28\n    |\n LL | struct ConstBytes<const T: &'static [u8]>;"}, {"sha": "2a49619e6614ae308b4f554b9dab88001f6299c1", "filename": "src/test/ui/const-generics/slice-const-param.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.min.stderr?ref=7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "patch": "@@ -1,4 +1,4 @@\n-error: using `&'static str` as const generic parameters is forbidden\n+error: `&'static str` is forbidden as the type of a const generic parameter\n   --> $DIR/slice-const-param.rs:8:40\n    |\n LL | pub fn function_with_str<const STRING: &'static str>() -> &'static str {\n@@ -7,7 +7,7 @@ LL | pub fn function_with_str<const STRING: &'static str>() -> &'static str {\n    = note: the only supported types are integers, `bool` and `char`\n    = note: more complex types are supported with `#[feature(const_generics)]`\n \n-error: using `&'static [u8]` as const generic parameters is forbidden\n+error: `&'static [u8]` is forbidden as the type of a const generic parameter\n   --> $DIR/slice-const-param.rs:13:41\n    |\n LL | pub fn function_with_bytes<const BYTES: &'static [u8]>() -> &'static [u8] {"}, {"sha": "f76e948c4af2b81ef0fce0735719e073ff6d8ccd", "filename": "src/test/ui/const-generics/slice-const-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7542615c21ad7fef1cbd160252ba1bf4b7b4289c/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.rs?ref=7542615c21ad7fef1cbd160252ba1bf4b7b4289c", "patch": "@@ -6,12 +6,12 @@\n #![cfg_attr(min, feature(min_const_generics))]\n \n pub fn function_with_str<const STRING: &'static str>() -> &'static str {\n-    //[min]~^ ERROR using `&'static str` as const\n+    //[min]~^ ERROR `&'static str` is forbidden\n     STRING\n }\n \n pub fn function_with_bytes<const BYTES: &'static [u8]>() -> &'static [u8] {\n-    //[min]~^ ERROR using `&'static [u8]` as const\n+    //[min]~^ ERROR `&'static [u8]` is forbidden\n     BYTES\n }\n "}]}