{"sha": "f007e6f442adafae3e5f2f7f635dc12463bbe0bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMDdlNmY0NDJhZGFmYWUzZTVmMmY3ZjYzNWRjMTI0NjNiYmUwYmI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-04-23T02:37:23Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-04-29T21:07:02Z"}, "message": "Identify when a stmt could have been parsed as an expr\n\nThere are some expressions that can be parsed as a statement without\na trailing semicolon depending on the context, which can lead to\nconfusing errors due to the same looking code being accepted in some\nplaces and not others. Identify these cases and suggest enclosing in\nparenthesis making the parse non-ambiguous without changing the\naccepted grammar.", "tree": {"sha": "7b48de502fcceeefbb8b6767455aa1d7248e4c3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b48de502fcceeefbb8b6767455aa1d7248e4c3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f007e6f442adafae3e5f2f7f635dc12463bbe0bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f007e6f442adafae3e5f2f7f635dc12463bbe0bb", "html_url": "https://github.com/rust-lang/rust/commit/f007e6f442adafae3e5f2f7f635dc12463bbe0bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f007e6f442adafae3e5f2f7f635dc12463bbe0bb/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a55c2eb325029960991508e64650a139b040d24f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a55c2eb325029960991508e64650a139b040d24f", "html_url": "https://github.com/rust-lang/rust/commit/a55c2eb325029960991508e64650a139b040d24f"}], "stats": {"total": 281, "additions": 270, "deletions": 11}, "files": [{"sha": "61270716dfcbce318a8f3b4935666fa1edc454ad", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f007e6f442adafae3e5f2f7f635dc12463bbe0bb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f007e6f442adafae3e5f2f7f635dc12463bbe0bb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f007e6f442adafae3e5f2f7f635dc12463bbe0bb", "patch": "@@ -4165,9 +4165,31 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                 oprnd_t = self.make_overloaded_place_return_type(method).ty;\n                                 self.write_method_call(expr.hir_id, method);\n                             } else {\n-                                type_error_struct!(tcx.sess, expr.span, oprnd_t, E0614,\n-                                                   \"type `{}` cannot be dereferenced\",\n-                                                   oprnd_t).emit();\n+                                let mut err = type_error_struct!(\n+                                    tcx.sess,\n+                                    expr.span,\n+                                    oprnd_t,\n+                                    E0614,\n+                                    \"type `{}` cannot be dereferenced\",\n+                                    oprnd_t,\n+                                );\n+                                let sp = tcx.sess.source_map().start_point(expr.span);\n+                                if let Some(sp) = tcx.sess.parse_sess.abiguous_block_expr_parse\n+                                    .borrow().get(&sp)\n+                                {\n+                                    if let Ok(snippet) = tcx.sess.source_map()\n+                                        .span_to_snippet(*sp)\n+                                    {\n+                                        err.span_suggestion(\n+                                            *sp,\n+                                            \"parenthesis are required to parse this \\\n+                                             as an expression\",\n+                                            format!(\"({})\", snippet),\n+                                            Applicability::MachineApplicable,\n+                                        );\n+                                    }\n+                                }\n+                                err.emit();\n                                 oprnd_t = tcx.types.err;\n                             }\n                         }"}, {"sha": "e7d79a647d360034e1ecc7bd2103d35b056ffcc9", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f007e6f442adafae3e5f2f7f635dc12463bbe0bb/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f007e6f442adafae3e5f2f7f635dc12463bbe0bb/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=f007e6f442adafae3e5f2f7f635dc12463bbe0bb", "patch": "@@ -1899,7 +1899,7 @@ mod tests {\n     use std::io;\n     use std::path::PathBuf;\n     use syntax_pos::{BytePos, Span, NO_EXPANSION};\n-    use rustc_data_structures::fx::FxHashSet;\n+    use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n     use rustc_data_structures::sync::Lock;\n \n     fn mk_sess(sm: Lrc<SourceMap>) -> ParseSess {\n@@ -1918,6 +1918,7 @@ mod tests {\n             raw_identifier_spans: Lock::new(Vec::new()),\n             registered_diagnostics: Lock::new(ErrorMap::new()),\n             buffered_lints: Lock::new(vec![]),\n+            abiguous_block_expr_parse: Lock::new(FxHashMap::default()),\n         }\n     }\n "}, {"sha": "94bbd5ba2f75bc2abec6ecb45e7fc48082a406cc", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f007e6f442adafae3e5f2f7f635dc12463bbe0bb/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f007e6f442adafae3e5f2f7f635dc12463bbe0bb/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=f007e6f442adafae3e5f2f7f635dc12463bbe0bb", "patch": "@@ -16,7 +16,7 @@ use rustc_data_structures::sync::{Lrc, Lock};\n use syntax_pos::{Span, SourceFile, FileName, MultiSpan};\n use log::debug;\n \n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use std::borrow::Cow;\n use std::iter;\n use std::path::{Path, PathBuf};\n@@ -47,6 +47,7 @@ pub struct ParseSess {\n     included_mod_stack: Lock<Vec<PathBuf>>,\n     source_map: Lrc<SourceMap>,\n     pub buffered_lints: Lock<Vec<BufferedEarlyLint>>,\n+    pub abiguous_block_expr_parse: Lock<FxHashMap<Span, Span>>,\n }\n \n impl ParseSess {\n@@ -70,6 +71,7 @@ impl ParseSess {\n             included_mod_stack: Lock::new(vec![]),\n             source_map,\n             buffered_lints: Lock::new(vec![]),\n+            abiguous_block_expr_parse: Lock::new(FxHashMap::default()),\n         }\n     }\n "}, {"sha": "3c7f477cc8f00e43743dd5c9d7937d2ec0216f6d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 61, "deletions": 3, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/f007e6f442adafae3e5f2f7f635dc12463bbe0bb/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f007e6f442adafae3e5f2f7f635dc12463bbe0bb/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f007e6f442adafae3e5f2f7f635dc12463bbe0bb", "patch": "@@ -186,6 +186,7 @@ enum PrevTokenKind {\n     Interpolated,\n     Eof,\n     Ident,\n+    BitOr,\n     Other,\n }\n \n@@ -1410,6 +1411,7 @@ impl<'a> Parser<'a> {\n             token::DocComment(..) => PrevTokenKind::DocComment,\n             token::Comma => PrevTokenKind::Comma,\n             token::BinOp(token::Plus) => PrevTokenKind::Plus,\n+            token::BinOp(token::Or) => PrevTokenKind::BitOr,\n             token::Interpolated(..) => PrevTokenKind::Interpolated,\n             token::Eof => PrevTokenKind::Eof,\n             token::Ident(..) => PrevTokenKind::Ident,\n@@ -2925,6 +2927,19 @@ impl<'a> Parser<'a> {\n                             let msg = format!(\"expected expression, found {}\",\n                                               self.this_token_descr());\n                             let mut err = self.fatal(&msg);\n+                            let sp = self.sess.source_map().start_point(self.span);\n+                            if let Some(sp) = self.sess.abiguous_block_expr_parse.borrow()\n+                                .get(&sp)\n+                            {\n+                                if let Ok(snippet) = self.sess.source_map().span_to_snippet(*sp) {\n+                                    err.span_suggestion(\n+                                        *sp,\n+                                        \"parenthesis are required to parse this as an expression\",\n+                                        format!(\"({})\", snippet),\n+                                        Applicability::MachineApplicable,\n+                                    );\n+                                }\n+                            }\n                             err.span_label(self.span, \"expected expression\");\n                             return Err(err);\n                         }\n@@ -3616,9 +3631,41 @@ impl<'a> Parser<'a> {\n             }\n         };\n \n-        if self.expr_is_complete(&lhs) {\n-            // Semi-statement forms are odd. See https://github.com/rust-lang/rust/issues/29071\n-            return Ok(lhs);\n+        match (self.expr_is_complete(&lhs), AssocOp::from_token(&self.token)) {\n+            (true, None) => {\n+                // Semi-statement forms are odd. See https://github.com/rust-lang/rust/issues/29071\n+                return Ok(lhs);\n+            }\n+            (false, _) => {} // continue parsing the expression\n+            (true, Some(AssocOp::Multiply)) | // `{ 42 } *foo = bar;`\n+            (true, Some(AssocOp::Subtract)) | // `{ 42 } -5`\n+            (true, Some(AssocOp::Add)) => { // `{ 42 } + 42\n+                // These cases are ambiguous and can't be identified in the parser alone\n+                let sp = self.sess.source_map().start_point(self.span);\n+                self.sess.abiguous_block_expr_parse.borrow_mut().insert(sp, lhs.span);\n+                return Ok(lhs);\n+            }\n+            (true, Some(ref op)) if !op.can_continue_expr_unambiguously() => {\n+                return Ok(lhs);\n+            }\n+            (true, Some(_)) => {\n+                // #54186, #54482, #59975\n+                // We've found an expression that would be parsed as a statement, but the next\n+                // token implies this should be parsed as an expression.\n+                let mut err = self.sess.span_diagnostic.struct_span_err(\n+                    self.span,\n+                    \"ambiguous parse\",\n+                );\n+                let snippet = self.sess.source_map().span_to_snippet(lhs.span)\n+                    .unwrap_or_else(|_| pprust::expr_to_string(&lhs));\n+                err.span_suggestion(\n+                    lhs.span,\n+                    \"parenthesis are required to parse this as an expression\",\n+                    format!(\"({})\", snippet),\n+                    Applicability::MachineApplicable,\n+                );\n+                err.emit();\n+            }\n         }\n         self.expected_tokens.push(TokenType::Operator);\n         while let Some(op) = AssocOp::from_token(&self.token) {\n@@ -4929,6 +4976,17 @@ impl<'a> Parser<'a> {\n                         );\n                         let mut err = self.fatal(&msg);\n                         err.span_label(self.span, format!(\"expected {}\", expected));\n+                        let sp = self.sess.source_map().start_point(self.span);\n+                        if let Some(sp) = self.sess.abiguous_block_expr_parse.borrow().get(&sp) {\n+                            if let Ok(snippet) = self.sess.source_map().span_to_snippet(*sp) {\n+                                err.span_suggestion(\n+                                    *sp,\n+                                    \"parenthesis are required to parse this as an expression\",\n+                                    format!(\"({})\", snippet),\n+                                    Applicability::MachineApplicable,\n+                                );\n+                            }\n+                        }\n                         return Err(err);\n                     }\n                 }"}, {"sha": "d76dede8155a0ddbe23b2eeb922bb3e58f0ccee4", "filename": "src/libsyntax/util/parser.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f007e6f442adafae3e5f2f7f635dc12463bbe0bb/src%2Flibsyntax%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f007e6f442adafae3e5f2f7f635dc12463bbe0bb/src%2Flibsyntax%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser.rs?ref=f007e6f442adafae3e5f2f7f635dc12463bbe0bb", "patch": "@@ -207,6 +207,28 @@ impl AssocOp {\n             ObsoleteInPlace | Assign | AssignOp(_) | As | DotDot | DotDotEq | Colon => None\n         }\n     }\n+\n+    pub fn can_continue_expr_unambiguously(&self) -> bool {\n+        use AssocOp::*;\n+        match self {\n+            BitXor | // `{ 42 } ^ 3`\n+            Assign | // `{ 42 } = { 42 }`\n+            Divide | // `{ 42 } / 42`\n+            Modulus | // `{ 42 } % 2`\n+            ShiftRight | // `{ 42 } >> 2`\n+            LessEqual | // `{ 42 } <= 3`\n+            Greater | // `{ 42 } > 3`\n+            GreaterEqual | // `{ 42 } >= 3`\n+            AssignOp(_) | // `{ 42 } +=`\n+            LAnd | // `{ 42 } &&foo`\n+            As | // `{ 42 } as usize`\n+            // Equal | // `{ 42 } == { 42 }`    Accepting these here would regress incorrect\n+            // NotEqual | // `{ 42 } != { 42 }  struct literals parser recovery.\n+            Colon => true, // `{ 42 }: usize`\n+            _ => false,\n+        }\n+\n+    }\n }\n \n pub const PREC_RESET: i8 = -100;"}, {"sha": "a0abd00a15c2afb2bd379f33612a7e397238f892", "filename": "src/test/ui/parser/expr-as-stmt.fixed", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f007e6f442adafae3e5f2f7f635dc12463bbe0bb/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f007e6f442adafae3e5f2f7f635dc12463bbe0bb/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed?ref=f007e6f442adafae3e5f2f7f635dc12463bbe0bb", "patch": "@@ -0,0 +1,34 @@\n+// run-rustfix\n+#![allow(unused_variables)]\n+#![allow(dead_code)]\n+#![allow(unused_must_use)]\n+\n+fn foo() -> i32 {\n+    ({2}) + {2} //~ ERROR expected expression, found `+`\n+    //~^ ERROR mismatched types\n+}\n+\n+fn bar() -> i32 {\n+    ({2}) + 2 //~ ERROR expected expression, found `+`\n+    //~^ ERROR mismatched types\n+}\n+\n+fn zul() -> u32 {\n+    let foo = 3;\n+    ({ 42 }) + foo; //~ ERROR expected expression, found `+`\n+    //~^ ERROR mismatched types\n+    32\n+}\n+\n+fn baz() -> i32 {\n+    ({ 3 }) * 3 //~ ERROR type `{integer}` cannot be dereferenced\n+    //~^ ERROR mismatched types\n+}\n+\n+fn qux(a: Option<u32>, b: Option<u32>) -> bool {\n+    (if let Some(x) = a { true } else { false })\n+    && //~ ERROR ambiguous parse\n+    if let Some(y) = a { true } else { false }\n+}\n+\n+fn main() {}"}, {"sha": "cf2e7266a4aaceca67c27808bceec0f430220ee9", "filename": "src/test/ui/parser/expr-as-stmt.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f007e6f442adafae3e5f2f7f635dc12463bbe0bb/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f007e6f442adafae3e5f2f7f635dc12463bbe0bb/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs?ref=f007e6f442adafae3e5f2f7f635dc12463bbe0bb", "patch": "@@ -0,0 +1,34 @@\n+// run-rustfix\n+#![allow(unused_variables)]\n+#![allow(dead_code)]\n+#![allow(unused_must_use)]\n+\n+fn foo() -> i32 {\n+    {2} + {2} //~ ERROR expected expression, found `+`\n+    //~^ ERROR mismatched types\n+}\n+\n+fn bar() -> i32 {\n+    {2} + 2 //~ ERROR expected expression, found `+`\n+    //~^ ERROR mismatched types\n+}\n+\n+fn zul() -> u32 {\n+    let foo = 3;\n+    { 42 } + foo; //~ ERROR expected expression, found `+`\n+    //~^ ERROR mismatched types\n+    32\n+}\n+\n+fn baz() -> i32 {\n+    { 3 } * 3 //~ ERROR type `{integer}` cannot be dereferenced\n+    //~^ ERROR mismatched types\n+}\n+\n+fn qux(a: Option<u32>, b: Option<u32>) -> bool {\n+    if let Some(x) = a { true } else { false }\n+    && //~ ERROR ambiguous parse\n+    if let Some(y) = a { true } else { false }\n+}\n+\n+fn main() {}"}, {"sha": "031196054327757554ae70429a06d5e3aa9eacc4", "filename": "src/test/ui/parser/expr-as-stmt.stderr", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/f007e6f442adafae3e5f2f7f635dc12463bbe0bb/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f007e6f442adafae3e5f2f7f635dc12463bbe0bb/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr?ref=f007e6f442adafae3e5f2f7f635dc12463bbe0bb", "patch": "@@ -0,0 +1,80 @@\n+error: expected expression, found `+`\n+  --> $DIR/expr-as-stmt.rs:7:9\n+   |\n+LL |     {2} + {2}\n+   |     --- ^ expected expression\n+   |     |\n+   |     help: parenthesis are required to parse this as an expression: `({2})`\n+\n+error: expected expression, found `+`\n+  --> $DIR/expr-as-stmt.rs:12:9\n+   |\n+LL |     {2} + 2\n+   |     --- ^ expected expression\n+   |     |\n+   |     help: parenthesis are required to parse this as an expression: `({2})`\n+\n+error: expected expression, found `+`\n+  --> $DIR/expr-as-stmt.rs:18:12\n+   |\n+LL |     { 42 } + foo;\n+   |     ------ ^ expected expression\n+   |     |\n+   |     help: parenthesis are required to parse this as an expression: `({ 42 })`\n+\n+error: ambiguous parse\n+  --> $DIR/expr-as-stmt.rs:30:5\n+   |\n+LL |     if let Some(x) = a { true } else { false }\n+   |     ------------------------------------------ help: parenthesis are required to parse this as an expression: `(if let Some(x) = a { true } else { false })`\n+LL |     &&\n+   |     ^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt.rs:7:6\n+   |\n+LL |     {2} + {2}\n+   |      ^ expected (), found integer\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt.rs:12:6\n+   |\n+LL |     {2} + 2\n+   |      ^ expected (), found integer\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt.rs:18:7\n+   |\n+LL |     { 42 } + foo;\n+   |       ^^ expected (), found integer\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt.rs:24:7\n+   |\n+LL |     { 3 } * 3\n+   |       ^ expected (), found integer\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error[E0614]: type `{integer}` cannot be dereferenced\n+  --> $DIR/expr-as-stmt.rs:24:11\n+   |\n+LL |     { 3 } * 3\n+   |     ----- ^^^\n+   |     |\n+   |     help: parenthesis are required to parse this as an expression: `({ 3 })`\n+\n+error: aborting due to 9 previous errors\n+\n+Some errors have detailed explanations: E0308, E0614.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "56c917c7462f2e2d838edd6c73639bdf893a9fad", "filename": "src/test/ui/parser/match-arrows-block-then-binop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f007e6f442adafae3e5f2f7f635dc12463bbe0bb/src%2Ftest%2Fui%2Fparser%2Fmatch-arrows-block-then-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f007e6f442adafae3e5f2f7f635dc12463bbe0bb/src%2Ftest%2Fui%2Fparser%2Fmatch-arrows-block-then-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-arrows-block-then-binop.rs?ref=f007e6f442adafae3e5f2f7f635dc12463bbe0bb", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n-\n-    match 0 {\n+    let _ = match 0 {\n       0 => {\n+        0\n       } + 5 //~ ERROR expected pattern, found `+`\n-    }\n+    };\n }"}, {"sha": "0d7f81645b46a68f558eae76f81bb6905dc7b25e", "filename": "src/test/ui/parser/match-arrows-block-then-binop.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f007e6f442adafae3e5f2f7f635dc12463bbe0bb/src%2Ftest%2Fui%2Fparser%2Fmatch-arrows-block-then-binop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f007e6f442adafae3e5f2f7f635dc12463bbe0bb/src%2Ftest%2Fui%2Fparser%2Fmatch-arrows-block-then-binop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-arrows-block-then-binop.stderr?ref=f007e6f442adafae3e5f2f7f635dc12463bbe0bb", "patch": "@@ -3,6 +3,12 @@ error: expected pattern, found `+`\n    |\n LL |       } + 5\n    |         ^ expected pattern\n+help: parenthesis are required to parse this as an expression\n+   |\n+LL |       0 => ({\n+LL |         0\n+LL |       }) + 5\n+   |\n \n error: aborting due to previous error\n "}]}