{"sha": "215b9b9cccd66c9e9413e7581931371daa0c94e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNWI5YjljY2NkNjZjOWU5NDEzZTc1ODE5MzEzNzFkYWEwYzk0ZTU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-31T18:29:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-31T18:29:21Z"}, "message": "Merge #5632\n\n5632: Cleanup impl gramamr r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "342258c6744a6ec8189b9910f2b3bb7efd73f06b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/342258c6744a6ec8189b9910f2b3bb7efd73f06b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/215b9b9cccd66c9e9413e7581931371daa0c94e5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfJGMBCRBK7hj4Ov3rIwAAdHIIAIxDftlYRx9/XEG4tflmN3sr\nbqZgH3cU1wPH2qbVm2u9JsMaw/qFeqGtVlXqFS0MDwqHCqOa0wXr+WqXqJxfYaVJ\nzuMLlJtm6Xgiozh01lwlia6dTjGx0c5iwxmAPHFEpeNdbwgwE/5zwXf2YTKYzQpz\nAPe6TfnsoVRuVla+xyUMNm+uxwwWXMjZS+d4DMTNNJPPn+XjKACfZLSmIrfmTHbD\nbandbyC3kjOKGhyJxjNrs1R/283KI4qXpnq7lDdK6F2CL7Dl8BMp9N/2nb7qvR44\nm03jZ+lcdw7rQ6+wz9TUTCb+Gm2nSho2ZgoKj72B4rlxa4sRJo2jS4FhVVWlqeY=\n=L7ul\n-----END PGP SIGNATURE-----\n", "payload": "tree 342258c6744a6ec8189b9910f2b3bb7efd73f06b\nparent 38ab326aac70484cb951fe9389d788d525d41550\nparent af53d5f4b081ad50d8fe08fc1e107aa6025b2491\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1596220161 +0000\ncommitter GitHub <noreply@github.com> 1596220161 +0000\n\nMerge #5632\n\n5632: Cleanup impl gramamr r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/215b9b9cccd66c9e9413e7581931371daa0c94e5", "html_url": "https://github.com/rust-lang/rust/commit/215b9b9cccd66c9e9413e7581931371daa0c94e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/215b9b9cccd66c9e9413e7581931371daa0c94e5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38ab326aac70484cb951fe9389d788d525d41550", "url": "https://api.github.com/repos/rust-lang/rust/commits/38ab326aac70484cb951fe9389d788d525d41550", "html_url": "https://github.com/rust-lang/rust/commit/38ab326aac70484cb951fe9389d788d525d41550"}, {"sha": "af53d5f4b081ad50d8fe08fc1e107aa6025b2491", "url": "https://api.github.com/repos/rust-lang/rust/commits/af53d5f4b081ad50d8fe08fc1e107aa6025b2491", "html_url": "https://github.com/rust-lang/rust/commit/af53d5f4b081ad50d8fe08fc1e107aa6025b2491"}], "stats": {"total": 41, "additions": 19, "deletions": 22}, "files": [{"sha": "28f3f3546c4fb2b4f4638f231d8f684d52aa349f", "filename": "crates/ra_assists/src/ast_transform.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/215b9b9cccd66c9e9413e7581931371daa0c94e5/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215b9b9cccd66c9e9413e7581931371daa0c94e5/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_transform.rs?ref=215b9b9cccd66c9e9413e7581931371daa0c94e5", "patch": "@@ -81,7 +81,7 @@ impl<'a> SubstituteTypeParams<'a> {\n         // FIXME: It would probably be nicer if we could get this via HIR (i.e. get the\n         // trait ref, and then go from the types in the substs back to the syntax).\n         fn get_syntactic_substs(impl_def: ast::Impl) -> Option<Vec<ast::Type>> {\n-            let target_trait = impl_def.target_trait()?;\n+            let target_trait = impl_def.trait_()?;\n             let path_type = match target_trait {\n                 ast::Type::PathType(path) => path,\n                 _ => return None,"}, {"sha": "373de273caba17c838b11492da4e78da933ba96e", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/215b9b9cccd66c9e9413e7581931371daa0c94e5/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215b9b9cccd66c9e9413e7581931371daa0c94e5/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=215b9b9cccd66c9e9413e7581931371daa0c94e5", "patch": "@@ -111,11 +111,8 @@ pub(crate) fn resolve_target_trait(\n     sema: &Semantics<RootDatabase>,\n     impl_def: &ast::Impl,\n ) -> Option<hir::Trait> {\n-    let ast_path = impl_def\n-        .target_trait()\n-        .map(|it| it.syntax().clone())\n-        .and_then(ast::PathType::cast)?\n-        .path()?;\n+    let ast_path =\n+        impl_def.trait_().map(|it| it.syntax().clone()).and_then(ast::PathType::cast)?.path()?;\n \n     match sema.resolve_path(&ast_path) {\n         Some(hir::PathResolution::Def(hir::ModuleDef::Trait(def))) => Some(def),"}, {"sha": "450ef879814e06a1c13e7468dd027f0e18c6a901", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/215b9b9cccd66c9e9413e7581931371daa0c94e5/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215b9b9cccd66c9e9413e7581931371daa0c94e5/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=215b9b9cccd66c9e9413e7581931371daa0c94e5", "patch": "@@ -448,8 +448,8 @@ impl Ctx {\n     fn lower_impl(&mut self, impl_def: &ast::Impl) -> Option<FileItemTreeId<Impl>> {\n         let generic_params =\n             self.lower_generic_params_and_inner_items(GenericsOwner::Impl, impl_def);\n-        let target_trait = impl_def.target_trait().map(|tr| self.lower_type_ref(&tr));\n-        let target_type = self.lower_type_ref(&impl_def.target_type()?);\n+        let target_trait = impl_def.trait_().map(|tr| self.lower_type_ref(&tr));\n+        let target_type = self.lower_type_ref(&impl_def.self_ty()?);\n         let is_negative = impl_def.excl_token().is_some();\n \n         // We cannot use `assoc_items()` here as that does not include macro calls."}, {"sha": "fdbf75abd9188a83a78c23d490f101d2abec90eb", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/215b9b9cccd66c9e9413e7581931371daa0c94e5/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215b9b9cccd66c9e9413e7581931371daa0c94e5/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=215b9b9cccd66c9e9413e7581931371daa0c94e5", "patch": "@@ -253,7 +253,7 @@ impl ToNav for hir::ImplDef {\n         let focus_range = if derive_attr.is_some() {\n             None\n         } else {\n-            src.value.target_type().map(|ty| original_range(db, src.with_value(ty.syntax())).range)\n+            src.value.self_ty().map(|ty| original_range(db, src.with_value(ty.syntax())).range)\n         };\n \n         NavigationTarget::from_syntax("}, {"sha": "87cab4503731faca64f694fb93db75b668cb213e", "filename": "crates/ra_ide/src/file_structure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/215b9b9cccd66c9e9413e7581931371daa0c94e5/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215b9b9cccd66c9e9413e7581931371daa0c94e5/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs?ref=215b9b9cccd66c9e9413e7581931371daa0c94e5", "patch": "@@ -130,8 +130,8 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n             ast::Const(it) => decl_with_type_ref(&it, it.ty()),\n             ast::Static(it) => decl_with_type_ref(&it, it.ty()),\n             ast::Impl(it) => {\n-                let target_type = it.target_type()?;\n-                let target_trait = it.target_trait();\n+                let target_type = it.self_ty()?;\n+                let target_trait = it.trait_();\n                 let label = match target_trait {\n                     None => format!(\"impl {}\", target_type.syntax().text()),\n                     Some(t) => {"}, {"sha": "3cd6c815b1415e71a7e7a912321ef8b62c42c58d", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/215b9b9cccd66c9e9413e7581931371daa0c94e5/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215b9b9cccd66c9e9413e7581931371daa0c94e5/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=215b9b9cccd66c9e9413e7581931371daa0c94e5", "patch": "@@ -194,7 +194,7 @@ fn text_edit_from_self_param(\n     new_name: &str,\n ) -> Option<TextEdit> {\n     fn target_type_name(impl_def: &ast::Impl) -> Option<String> {\n-        if let Some(ast::Type::PathType(p)) = impl_def.target_type() {\n+        if let Some(ast::Type::PathType(p)) = impl_def.self_ty() {\n             return Some(p.path()?.segment()?.name_ref()?.text().to_string());\n         }\n         None"}, {"sha": "01aefb60d7fba1a570b761723ca0fcf7e9d07474", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/215b9b9cccd66c9e9413e7581931371daa0c94e5/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215b9b9cccd66c9e9413e7581931371daa0c94e5/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=215b9b9cccd66c9e9413e7581931371daa0c94e5", "patch": "@@ -267,7 +267,6 @@ impl Impl {\n     pub fn unsafe_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![unsafe]) }\n     pub fn impl_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![impl]) }\n     pub fn const_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![const]) }\n-    pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n     pub fn excl_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![!]) }\n     pub fn for_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![for]) }\n     pub fn assoc_item_list(&self) -> Option<AssocItemList> { support::child(&self.syntax) }"}, {"sha": "af5a93d1d017ea4fea8912c2b1cee7dba7442232", "filename": "crates/ra_syntax/src/ast/node_ext.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/215b9b9cccd66c9e9413e7581931371daa0c94e5/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215b9b9cccd66c9e9413e7581931371daa0c94e5/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=215b9b9cccd66c9e9413e7581931371daa0c94e5", "patch": "@@ -136,14 +136,14 @@ impl ast::UseTreeList {\n }\n \n impl ast::Impl {\n-    pub fn target_type(&self) -> Option<ast::Type> {\n+    pub fn self_ty(&self) -> Option<ast::Type> {\n         match self.target() {\n             (Some(t), None) | (_, Some(t)) => Some(t),\n             _ => None,\n         }\n     }\n \n-    pub fn target_trait(&self) -> Option<ast::Type> {\n+    pub fn trait_(&self) -> Option<ast::Type> {\n         match self.target() {\n             (Some(t), Some(_)) => Some(t),\n             _ => None,"}, {"sha": "2dddaf09a405fab03a475ab3f9fc9b156d90f03b", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/215b9b9cccd66c9e9413e7581931371daa0c94e5/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215b9b9cccd66c9e9413e7581931371daa0c94e5/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=215b9b9cccd66c9e9413e7581931371daa0c94e5", "patch": "@@ -208,7 +208,7 @@ fn validate_visibility(vis: ast::Visibility, errors: &mut Vec<SyntaxError>) {\n         Some(it) => it,\n         None => return,\n     };\n-    if impl_def.target_trait().is_some() {\n+    if impl_def.trait_().is_some() {\n         errors.push(SyntaxError::new(\"Unnecessary visibility qualifier\", vis.syntax.text_range()));\n     }\n }"}, {"sha": "4602ff1d72b66716b9b9f800cbb0ea71e89a818f", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/215b9b9cccd66c9e9413e7581931371daa0c94e5/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215b9b9cccd66c9e9413e7581931371daa0c94e5/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=215b9b9cccd66c9e9413e7581931371daa0c94e5", "patch": "@@ -591,6 +591,8 @@ fn lower_rule(acc: &mut Vec<Field>, grammar: &Grammar, label: Option<&String>, r\n                     | \"index\"\n                     | \"base\"\n                     | \"value\"\n+                    | \"target_type\"\n+                    | \"target_trait\"\n             );\n             if manually_implemented {\n                 return;"}, {"sha": "25d6f7a20ab2958a8f73146fbe927625e377039a", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/215b9b9cccd66c9e9413e7581931371daa0c94e5/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/215b9b9cccd66c9e9413e7581931371daa0c94e5/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=215b9b9cccd66c9e9413e7581931371daa0c94e5", "patch": "@@ -194,12 +194,11 @@ AssocItem =\n | TypeAlias\n \n Impl =\n- Attr* Visibility?\n- 'default'? 'unsafe'? 'impl' 'const'? GenericParamList? (\n-   Type\n- | '!'? Type 'for' Type\n- ) WhereClause?\n- AssocItemList\n+  Attr* Visibility?\n+  'default'? 'unsafe'? 'impl' 'const'? GenericParamList?\n+  ('!'? target_trait:Type 'for')? target_type:Type\n+  WhereClause?\n+  AssocItemList\n \n ExternBlock =\n   Attr* Abi ExternItemList"}]}