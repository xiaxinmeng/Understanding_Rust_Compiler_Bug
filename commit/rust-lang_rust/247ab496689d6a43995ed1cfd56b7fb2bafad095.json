{"sha": "247ab496689d6a43995ed1cfd56b7fb2bafad095", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0N2FiNDk2Njg5ZDZhNDM5OTVlZDFjZmQ1NmI3ZmIyYmFmYWQwOTU=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-11-30T07:45:15Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-11-30T07:45:15Z"}, "message": "Pacify tidy", "tree": {"sha": "8e492fb3433e152573a74b2b8ac32ad053523002", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e492fb3433e152573a74b2b8ac32ad053523002"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/247ab496689d6a43995ed1cfd56b7fb2bafad095", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlwA6pIACgkQtvoGpuDi\nZlvfNw/8DrsU2IoRypR0uhPt31GAU4TtAhR61BqLUnB7jqeSmetngLZhWHkclxG+\nnCOKmIXYVGMgYZTQwsdqj5Mr6Qkl7hWf5WsvVKgzkzisAGOq4gQpT8SE03TNvneF\neVcstAs9+oNU4THBc411JUJTKAuS6i/l1scd/3nCVxVVyLs/WkA1uCKST9PGaOPr\nLdyrfCCe0ut/XIjf5ILXcF4VXmM/Wy5wBRGt3010nOOs+w436Ly8R1CGjIzrKLh0\niCrNwIeqgvwMGOHbdkku//v5wN7Misv3LZGJnLsyVSlajsNCa6fjNo8F5rQgh9hv\nou6k0vmloVCgWnrZkrglKrVFXi/73ekRLbLkQknEE55efQKfofyj02t858P5Doej\nJJoWITbp+ZFe9sSjhan6CEKG8j9DAy8bKUf9BF83ykZMUQPUxFQD21PZuDW26myJ\nr4phiSTDm0z8RY7p2sHWXVaGRU3GYjPMSSU/dKWHUTINX7Yxa72uLwimmc+9Xel3\nV4AG14CH/SQ20nhGIoqVdP62HufEhBJkK8jakqOSnHWdtZchbn2jLnkyPXnir9tc\nBfltZCEF2qtYwT+DhZyQA+zlbThYNKdOjw3OKb4RBn1D+rtMXM/QByGXMYEM76qr\n0FI5TiJghOYhaMCXkUBLVU+ONcFIt1Kuxd9EKbH2K+cSvGT+D3U=\n=5sAs\n-----END PGP SIGNATURE-----", "payload": "tree 8e492fb3433e152573a74b2b8ac32ad053523002\nparent 9b847f0f9644325e8a6764f84244b977ecd9fa05\nauthor Philipp Hansch <dev@phansch.net> 1543563915 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1543563915 +0100\n\nPacify tidy\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/247ab496689d6a43995ed1cfd56b7fb2bafad095", "html_url": "https://github.com/rust-lang/rust/commit/247ab496689d6a43995ed1cfd56b7fb2bafad095", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/247ab496689d6a43995ed1cfd56b7fb2bafad095/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b847f0f9644325e8a6764f84244b977ecd9fa05", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b847f0f9644325e8a6764f84244b977ecd9fa05", "html_url": "https://github.com/rust-lang/rust/commit/9b847f0f9644325e8a6764f84244b977ecd9fa05"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "bcee6d75b5a4a84974ee2dfdcc6d8c0dc94619bb", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/247ab496689d6a43995ed1cfd56b7fb2bafad095/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/247ab496689d6a43995ed1cfd56b7fb2bafad095/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=247ab496689d6a43995ed1cfd56b7fb2bafad095", "patch": "@@ -924,8 +924,8 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                                 | \"add_with_overflow\"\n                                 | \"sub_with_overflow\"\n                                 | \"mul_with_overflow\"\n-                                // no need to check feature gates, intrinsics are only callable from the\n-                                // libstd or with forever unstable feature gates\n+                                // no need to check feature gates, intrinsics are only callable\n+                                // from the libstd or with forever unstable feature gates\n                                 => is_const_fn = true,\n                                 // special intrinsic that can be called diretly without an intrinsic\n                                 // feature gate needs a language feature gate\n@@ -969,9 +969,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                                     is_const_fn = true;\n                                 } else if self.is_const_panic_fn(def_id) {\n                                     // check the const_panic feature gate\n-                                    // FIXME: cannot allow this inside `allow_internal_unstable` because\n-                                    // that would make `panic!` insta stable in constants, since the\n-                                    // macro is marked with the attr\n+                                    // FIXME: cannot allow this inside `allow_internal_unstable`\n+                                    // because that would make `panic!` insta stable in constants,\n+                                    // since the macro is marked with the attr\n                                     if self.tcx.features().const_panic {\n                                         is_const_fn = true;\n                                     } else {\n@@ -984,10 +984,10 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                                             &format!(\"panicking in {}s is unstable\", self.mode),\n                                         );\n                                     }\n-                                } else if let Some(feature) = self.tcx.is_unstable_const_fn(def_id) {\n+                                } else if let Some(feat) = self.tcx.is_unstable_const_fn(def_id) {\n                                     // check `#[unstable]` const fns or `#[rustc_const_unstable]`\n-                                    // functions without the feature gate active in this crate to report\n-                                    // a better error message than the one below\n+                                    // functions without the feature gate active in this crate to\n+                                    // report a better error message than the one below\n                                     if self.span.allows_unstable() {\n                                         // `allow_internal_unstable` can make such calls stable\n                                         is_const_fn = true;\n@@ -998,7 +998,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                                         help!(&mut err,\n                                             \"in Nightly builds, add `#![feature({})]` \\\n                                             to the crate attributes to enable\",\n-                                            feature);\n+                                            feat);\n                                         err.emit();\n                                     }\n                                 } else {"}]}