{"sha": "9f0cb566ea2f81392de6fb49b09c7e9b4ef4bf1d", "node_id": "C_kwDOAAsO6NoAKDlmMGNiNTY2ZWEyZjgxMzkyZGU2ZmI0OWIwOWM3ZTliNGVmNGJmMWQ", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-10-06T19:20:02Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-11-22T22:12:26Z"}, "message": "optimize field ordering by grouping power-of-two arrays with larger types", "tree": {"sha": "c93cdc0a0a7d19bc3eb82a91bb6bb637c20da85e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c93cdc0a0a7d19bc3eb82a91bb6bb637c20da85e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f0cb566ea2f81392de6fb49b09c7e9b4ef4bf1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f0cb566ea2f81392de6fb49b09c7e9b4ef4bf1d", "html_url": "https://github.com/rust-lang/rust/commit/9f0cb566ea2f81392de6fb49b09c7e9b4ef4bf1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f0cb566ea2f81392de6fb49b09c7e9b4ef4bf1d/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66ccf36f161f67b121290e2af2517ead7e695d3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/66ccf36f161f67b121290e2af2517ead7e695d3b", "html_url": "https://github.com/rust-lang/rust/commit/66ccf36f161f67b121290e2af2517ead7e695d3b"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "1505ce41b9630f78fd78f60d17d2deaa30cb97e2", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9f0cb566ea2f81392de6fb49b09c7e9b4ef4bf1d/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f0cb566ea2f81392de6fb49b09c7e9b4ef4bf1d/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=9f0cb566ea2f81392de6fb49b09c7e9b4ef4bf1d", "patch": "@@ -138,8 +138,17 @@ fn univariant_uninterned<'tcx>(\n     if optimize {\n         let end = if let StructKind::MaybeUnsized = kind { fields.len() - 1 } else { fields.len() };\n         let optimizing = &mut inverse_memory_index[..end];\n-        let field_align = |f: &TyAndLayout<'_>| {\n-            if let Some(pack) = pack { f.align.abi.min(pack) } else { f.align.abi }\n+        let effective_field_align = |f: &TyAndLayout<'_>| {\n+            if let Some(pack) = pack {\n+                f.align.abi.min(pack)\n+            } else if f.size.bytes().is_power_of_two() && f.size.bytes() >= f.align.abi.bytes() {\n+                // Try to put fields which have a 2^n size and smaller alignment together with\n+                // fields that have an alignment matching that size.\n+                // E.g. group [u8; 4] with u32 fields\n+                Align::from_bytes(f.align.abi.bytes()).unwrap_or(f.align.abi)\n+            } else {\n+                f.align.abi\n+            }\n         };\n \n         // If `-Z randomize-layout` was enabled for the type definition we can shuffle\n@@ -161,14 +170,14 @@ fn univariant_uninterned<'tcx>(\n                         // Place ZSTs first to avoid \"interesting offsets\",\n                         // especially with only one or two non-ZST fields.\n                         let f = &fields[x as usize];\n-                        (!f.is_zst(), cmp::Reverse(field_align(f)))\n+                        (!f.is_zst(), cmp::Reverse(effective_field_align(f)))\n                     });\n                 }\n \n                 StructKind::Prefixed(..) => {\n                     // Sort in ascending alignment so that the layout stays optimal\n                     // regardless of the prefix\n-                    optimizing.sort_by_key(|&x| field_align(&fields[x as usize]));\n+                    optimizing.sort_by_key(|&x| effective_field_align(&fields[x as usize]));\n                 }\n             }\n "}]}