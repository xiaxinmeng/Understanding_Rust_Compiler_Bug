{"sha": "c7560387afc9660b4ea6a15eef1f387182c6ae51", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NTYwMzg3YWZjOTY2MGI0ZWE2YTE1ZWVmMWYzODcxODJjNmFlNTE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-02-09T12:37:03Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-02-11T21:55:24Z"}, "message": "libgetopts -- fix unsafe sharing in closures", "tree": {"sha": "2f1167f3e7c619cfcc5e8439103a12b84ec60217", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f1167f3e7c619cfcc5e8439103a12b84ec60217"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7560387afc9660b4ea6a15eef1f387182c6ae51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7560387afc9660b4ea6a15eef1f387182c6ae51", "html_url": "https://github.com/rust-lang/rust/commit/c7560387afc9660b4ea6a15eef1f387182c6ae51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7560387afc9660b4ea6a15eef1f387182c6ae51/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ffa67ce924352d4ac726bec48e4e554b5bb0f8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ffa67ce924352d4ac726bec48e4e554b5bb0f8c", "html_url": "https://github.com/rust-lang/rust/commit/7ffa67ce924352d4ac726bec48e4e554b5bb0f8c"}], "stats": {"total": 50, "additions": 37, "deletions": 13}, "files": [{"sha": "34e09ac1913db23a645e5edf45188f8df7e395fa", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c7560387afc9660b4ea6a15eef1f387182c6ae51/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7560387afc9660b4ea6a15eef1f387182c6ae51/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=c7560387afc9660b4ea6a15eef1f387182c6ae51", "patch": "@@ -775,14 +775,13 @@ fn each_split_within<'a>(ss: &'a str, lim: uint, it: |&'a str| -> bool)\n     let mut lim = lim;\n \n     let mut cont = true;\n-    let slice: || = || { cont = it(ss.slice(slice_start, last_end)) };\n \n     // if the limit is larger than the string, lower it to save cycles\n     if lim >= fake_i {\n         lim = fake_i;\n     }\n \n-    let machine: |(uint, char)| -> bool = |(i, c)| {\n+    let machine: |&mut bool, (uint, char)| -> bool = |cont, (i, c)| {\n         let whitespace = if ::std::char::is_whitespace(c) { Ws }       else { Cr };\n         let limit      = if (i - slice_start + 1) <= lim  { UnderLim } else { OverLim };\n \n@@ -794,24 +793,49 @@ fn each_split_within<'a>(ss: &'a str, lim: uint, it: |&'a str| -> bool)\n             (B, Cr, OverLim)  if (i - last_start + 1) > lim\n                             => fail!(\"word starting with {} longer than limit!\",\n                                     ss.slice(last_start, i + 1)),\n-            (B, Cr, OverLim)  => { slice(); slice_start = last_start; B }\n-            (B, Ws, UnderLim) => { last_end = i; C }\n-            (B, Ws, OverLim)  => { last_end = i; slice(); A }\n-\n-            (C, Cr, UnderLim) => { last_start = i; B }\n-            (C, Cr, OverLim)  => { slice(); slice_start = i; last_start = i; last_end = i; B }\n-            (C, Ws, OverLim)  => { slice(); A }\n-            (C, Ws, UnderLim) => { C }\n+            (B, Cr, OverLim)  => {\n+                *cont = it(ss.slice(slice_start, last_end));\n+                slice_start = last_start;\n+                B\n+            }\n+            (B, Ws, UnderLim) => {\n+                last_end = i;\n+                C\n+            }\n+            (B, Ws, OverLim)  => {\n+                last_end = i;\n+                *cont = it(ss.slice(slice_start, last_end));\n+                A\n+            }\n+\n+            (C, Cr, UnderLim) => {\n+                last_start = i;\n+                B\n+            }\n+            (C, Cr, OverLim)  => {\n+                *cont = it(ss.slice(slice_start, last_end));\n+                slice_start = i;\n+                last_start = i;\n+                last_end = i;\n+                B\n+            }\n+            (C, Ws, OverLim)  => {\n+                *cont = it(ss.slice(slice_start, last_end));\n+                A\n+            }\n+            (C, Ws, UnderLim) => {\n+                C\n+            }\n         };\n \n-        cont\n+        *cont\n     };\n \n-    ss.char_indices().advance(|x| machine(x));\n+    ss.char_indices().advance(|x| machine(&mut cont, x));\n \n     // Let the automaton 'run out' by supplying trailing whitespace\n     while cont && match state { B | C => true, A => false } {\n-        machine((fake_i, ' '));\n+        machine(&mut cont, (fake_i, ' '));\n         fake_i += 1;\n     }\n     return cont;"}]}