{"sha": "5c706196449f679b163a8a5fbfb08d842db07e29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNzA2MTk2NDQ5ZjY3OWIxNjNhOGE1ZmJmYjA4ZDg0MmRiMDdlMjk=", "commit": {"author": {"name": "flip1995", "email": "uwdkn@student.kit.edu", "date": "2018-02-24T15:40:51Z"}, "committer": {"name": "flip1995", "email": "uwdkn@student.kit.edu", "date": "2018-03-01T00:34:25Z"}, "message": "Rewrite error reporting as requested", "tree": {"sha": "6b81a4701d9676cf9800652d66749a6818f86b3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b81a4701d9676cf9800652d66749a6818f86b3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c706196449f679b163a8a5fbfb08d842db07e29", "comment_count": 0, "verification": {"verified": false, "reason": "unverified_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz66kzxK9mXB0K2lyZ1erJvcvAIQFAlqXSpEACgkQZ1erJvcv\nAIR3ZQ/7Bzls+4KBnpzgBWGng5VzpK2pVhVWIjsATILl4NfeVN7JXBZ6K7r7sarX\nismDlwf2pgQ61vPq1NjPrtJ7oY+dnK8Dtg0tV+dd/TdSoNRJIZzWfkM1EcsnYLi/\nTcnx+qT17J2p3qUP79cibRCfjh0lAJTPRayJKD+J3RIbn8XcCtgXYmAXWAdXRaDV\nr/lf5Loo5qDG/bX6IPmYWU5zZ871ms+co/xUNjbZEZ62Jh463MiYTjNAEl8C4LJY\nS3zYRz/NWNqA8H2Dw2+tI1/q4tofLGI2Hqhkhim3x1IRRrtcVpcbgsV1LtD6jL/V\ngYdT3/juC9gW4Cs9cUAqVytxYSv5CObeQ4UJcN4VG03gSJbLnOAbg3lUkgn45BCk\nOYKYQRAWILjY2RyprwGDwm574SM3eePtM2vgWy4RoEMMz94aBBHSerGl19ZLxvCr\nfdVfV6p14xkx3A/yI1SF2S2YUpaj+IZLlPvlvolC1IZIIV9ZMSFjDpulIohNufrJ\n031S8NkxENJnXncFjsNO7W0Z1I0w7j61bpgXYYEITEzDPQ4qrLlb7nS+34iz/SIi\nRJkgFUQPPNpiPEFDWzKPX5T8crw7RB1LiwuYLC8Q6dsVqK4jSu1luma34BPj0BxW\nqSeJPvliVdDAAB7aPIZDcZeALxuurjgR2tYreShT/3pY0LiuuAY=\n=7FXx\n-----END PGP SIGNATURE-----", "payload": "tree 6b81a4701d9676cf9800652d66749a6818f86b3c\nparent 19c4771eeb5fc8fb18bb2e9a3f16ee474d8e67e3\nauthor flip1995 <uwdkn@student.kit.edu> 1519486851 +0100\ncommitter flip1995 <uwdkn@student.kit.edu> 1519864465 +0100\n\nRewrite error reporting as requested\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c706196449f679b163a8a5fbfb08d842db07e29", "html_url": "https://github.com/rust-lang/rust/commit/5c706196449f679b163a8a5fbfb08d842db07e29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c706196449f679b163a8a5fbfb08d842db07e29/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19c4771eeb5fc8fb18bb2e9a3f16ee474d8e67e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/19c4771eeb5fc8fb18bb2e9a3f16ee474d8e67e3", "html_url": "https://github.com/rust-lang/rust/commit/19c4771eeb5fc8fb18bb2e9a3f16ee474d8e67e3"}], "stats": {"total": 144, "additions": 82, "deletions": 62}, "files": [{"sha": "02aef271c37db2d916830fb4d7f762c021923ea1", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 69, "deletions": 45, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/5c706196449f679b163a8a5fbfb08d842db07e29/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c706196449f679b163a8a5fbfb08d842db07e29/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=5c706196449f679b163a8a5fbfb08d842db07e29", "patch": "@@ -152,29 +152,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                                 // avoiding use of -min to prevent overflow/panic\n                                 if (negative && v > max + 1) || (!negative && v > max) {\n                                     if let Some(repr_str) = get_bin_hex_repr(cx, lit) {\n-                                        let bits = int_ty_bits(t, cx.sess().target.isize_ty);\n-                                        let actually =\n-                                            ((v << (128 - bits)) as i128) >> (128 - bits);\n-                                        let mut err = cx.struct_span_lint(\n-                                            OVERFLOWING_LITERALS,\n-                                            e.span,\n-                                            &format!(\"literal out of range for {:?}\", t),\n-                                        );\n-                                        err.note(&format!(\n-                                            \"the literal `{}` (decimal `{}`) does not fit into \\\n-                                             an `{:?}` and will become `{}{:?}`.\",\n-                                            repr_str, v, t, actually, t\n-                                        ));\n-                                        let sugg_ty = get_type_suggestion(\n-                                            &cx.tables.node_id_to_type(e.hir_id).sty,\n+                                        report_bin_hex_error(\n+                                            cx,\n+                                            e,\n+                                            ty::TyInt(t),\n+                                            repr_str,\n                                             v,\n                                             negative,\n                                         );\n-                                        if !sugg_ty.is_empty() {\n-                                            err.help(&sugg_ty);\n-                                        }\n-\n-                                        err.emit();\n                                         return;\n                                     }\n                                     cx.span_lint(\n@@ -219,28 +204,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                                 }\n                             }\n                             if let Some(repr_str) = get_bin_hex_repr(cx, lit) {\n-                                let bits = uint_ty_bits(t, cx.sess().target.usize_ty);\n-                                let actually = (lit_val << (128 - bits)) >> (128 - bits);\n-                                let mut err = cx.struct_span_lint(\n-                                    OVERFLOWING_LITERALS,\n-                                    e.span,\n-                                    &format!(\"literal out of range for {:?}\", t),\n-                                );\n-                                err.note(&format!(\n-                                    \"the literal `{}` (decimal `{}`) does not fit into \\\n-                                     an `{:?}` and will become `{}{:?}`.\",\n-                                    repr_str, lit_val, t, actually, t\n-                                ));\n-                                let sugg_ty = get_type_suggestion(\n-                                    &cx.tables.node_id_to_type(e.hir_id).sty,\n+                                report_bin_hex_error(\n+                                    cx,\n+                                    e,\n+                                    ty::TyUint(t),\n+                                    repr_str,\n                                     lit_val,\n                                     false,\n                                 );\n-                                if !sugg_ty.is_empty() {\n-                                    err.help(&sugg_ty);\n-                                }\n-\n-                                err.emit();\n                                 return;\n                             }\n                             cx.span_lint(\n@@ -414,7 +385,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n         //  - `uX` => `uY`\n         //\n         // No suggestion for: `isize`, `usize`.\n-        fn get_type_suggestion<'a>(t: &ty::TypeVariants, val: u128, negative: bool) -> String {\n+        fn get_type_suggestion<'a>(\n+            t: &ty::TypeVariants,\n+            val: u128,\n+            negative: bool,\n+        ) -> Option<String> {\n             use syntax::ast::IntTy::*;\n             use syntax::ast::UintTy::*;\n             macro_rules! find_fit {\n@@ -425,14 +400,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                         match $ty {\n                             $($type => {\n                                 $(if !negative && val <= uint_ty_range($utypes).1 {\n-                                    return format!(\"Consider using `{:?}`\", $utypes)\n+                                    return Some(format!(\"{:?}\", $utypes))\n                                 })*\n                                 $(if val <= int_ty_range($itypes).1 as u128 + _neg {\n-                                    return format!(\"Consider using `{:?}`\", $itypes)\n+                                    return Some(format!(\"{:?}\", $itypes))\n                                 })*\n-                                String::new()\n+                                None\n                             },)*\n-                            _ => String::new()\n+                            _ => None\n                         }\n                     }\n                 }\n@@ -450,8 +425,57 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                               U32 => [U32, U64, U128] => [],\n                               U64 => [U64, U128] => [],\n                               U128 => [U128] => []),\n-                _ => String::new(),\n+                _ => None,\n+            }\n+        }\n+\n+        fn report_bin_hex_error(\n+            cx: &LateContext,\n+            expr: &hir::Expr,\n+            ty: ty::TypeVariants,\n+            repr_str: String,\n+            val: u128,\n+            negative: bool,\n+        ) {\n+            let (t, actually) = match ty {\n+                ty::TyInt(t) => {\n+                    let bits = int_ty_bits(t, cx.sess().target.isize_ty);\n+                    let actually = (val << (128 - bits)) as i128 >> (128 - bits);\n+                    (format!(\"{:?}\", t), actually.to_string())\n+                }\n+                ty::TyUint(t) => {\n+                    let bits = uint_ty_bits(t, cx.sess().target.usize_ty);\n+                    let actually = (val << (128 - bits)) >> (128 - bits);\n+                    (format!(\"{:?}\", t), actually.to_string())\n+                }\n+                _ => bug!(),\n+            };\n+            let mut err = cx.struct_span_lint(\n+                OVERFLOWING_LITERALS,\n+                expr.span,\n+                &format!(\"literal out of range for {}\", t),\n+            );\n+            err.note(&format!(\n+                \"the literal `{}` (decimal `{}`) does not fit into \\\n+                 an `{}` and will become `{}{}`\",\n+                repr_str, val, t, actually, t\n+            ));\n+            if let Some(sugg_ty) =\n+                get_type_suggestion(&cx.tables.node_id_to_type(expr.hir_id).sty, val, negative)\n+            {\n+                if let Some(pos) = repr_str.chars().position(|c| c == 'i' || c == 'u') {\n+                    let (sans_suffix, _) = repr_str.split_at(pos);\n+                    err.span_suggestion(\n+                        expr.span,\n+                        &format!(\"consider using `{}` instead\", sugg_ty),\n+                        format!(\"{}{}\", sans_suffix, sugg_ty),\n+                    );\n+                } else {\n+                    err.help(&format!(\"consider using `{}` instead\", sugg_ty));\n+                }\n             }\n+\n+            err.emit();\n         }\n     }\n }"}, {"sha": "89718c7696a8dda4eb35035467d73dfcdf2b7081", "filename": "src/test/ui/lint/type-overflow.stderr", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5c706196449f679b163a8a5fbfb08d842db07e29/src%2Ftest%2Fui%2Flint%2Ftype-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c706196449f679b163a8a5fbfb08d842db07e29/src%2Ftest%2Fui%2Flint%2Ftype-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftype-overflow.stderr?ref=5c706196449f679b163a8a5fbfb08d842db07e29", "patch": "@@ -10,61 +10,57 @@ warning: literal out of range for i8\n   --> $DIR/type-overflow.rs:21:16\n    |\n 21 |     let fail = 0b1000_0001i8; //~WARNING literal out of range for i8\n-   |                ^^^^^^^^^^^^^\n+   |                ^^^^^^^^^^^^^ help: consider using `u8` instead: `0b1000_0001u8`\n    |\n-   = note: the literal `0b1000_0001i8` (decimal `129`) does not fit into an `i8` and will become `-127i8`.\n-   = help: Consider using `u8`\n+   = note: the literal `0b1000_0001i8` (decimal `129`) does not fit into an `i8` and will become `-127i8`\n \n warning: literal out of range for i64\n   --> $DIR/type-overflow.rs:23:16\n    |\n 23 |     let fail = 0x8000_0000_0000_0000i64; //~WARNING literal out of range for i64\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `u64` instead: `0x8000_0000_0000_0000u64`\n    |\n-   = note: the literal `0x8000_0000_0000_0000i64` (decimal `9223372036854775808`) does not fit into an `i64` and will become `-9223372036854775808i64`.\n-   = help: Consider using `u64`\n+   = note: the literal `0x8000_0000_0000_0000i64` (decimal `9223372036854775808`) does not fit into an `i64` and will become `-9223372036854775808i64`\n \n warning: literal out of range for u32\n   --> $DIR/type-overflow.rs:25:16\n    |\n 25 |     let fail = 0x1_FFFF_FFFFu32; //~WARNING literal out of range for u32\n-   |                ^^^^^^^^^^^^^^^^\n+   |                ^^^^^^^^^^^^^^^^ help: consider using `u64` instead: `0x1_FFFF_FFFFu64`\n    |\n-   = note: the literal `0x1_FFFF_FFFFu32` (decimal `8589934591`) does not fit into an `u32` and will become `4294967295u32`.\n-   = help: Consider using `u64`\n+   = note: the literal `0x1_FFFF_FFFFu32` (decimal `8589934591`) does not fit into an `u32` and will become `4294967295u32`\n \n warning: literal out of range for i128\n   --> $DIR/type-overflow.rs:27:22\n    |\n 27 |     let fail: i128 = 0x8000_0000_0000_0000_0000_0000_0000_0000;\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: the literal `0x8000_0000_0000_0000_0000_0000_0000_0000` (decimal `170141183460469231731687303715884105728`) does not fit into an `i128` and will become `-170141183460469231731687303715884105728i128`.\n-   = help: Consider using `u128`\n+   = note: the literal `0x8000_0000_0000_0000_0000_0000_0000_0000` (decimal `170141183460469231731687303715884105728`) does not fit into an `i128` and will become `-170141183460469231731687303715884105728i128`\n+   = help: consider using `u128` instead\n \n warning: literal out of range for i32\n   --> $DIR/type-overflow.rs:30:16\n    |\n 30 |     let fail = 0x8FFF_FFFF_FFFF_FFFE; //~WARNING literal out of range for i32\n    |                ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: the literal `0x8FFF_FFFF_FFFF_FFFE` (decimal `10376293541461622782`) does not fit into an `i32` and will become `-2i32`.\n-   = help: Consider using `i128`\n+   = note: the literal `0x8FFF_FFFF_FFFF_FFFE` (decimal `10376293541461622782`) does not fit into an `i32` and will become `-2i32`\n+   = help: consider using `i128` instead\n \n warning: literal out of range for isize\n   --> $DIR/type-overflow.rs:32:23\n    |\n 32 |     let fail: isize = 0x8000_0000_0000_0000; //~WARNING literal out of range for isize\n    |                       ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: the literal `0x8000_0000_0000_0000` (decimal `9223372036854775808`) does not fit into an `isize` and will become `-9223372036854775808isize`.\n+   = note: the literal `0x8000_0000_0000_0000` (decimal `9223372036854775808`) does not fit into an `isize` and will become `-9223372036854775808isize`\n \n warning: literal out of range for i8\n   --> $DIR/type-overflow.rs:34:17\n    |\n 34 |     let fail = -0b1111_1111i8; //~WARNING literal out of range for i8\n-   |                 ^^^^^^^^^^^^^\n+   |                 ^^^^^^^^^^^^^ help: consider using `i16` instead: `0b1111_1111i16`\n    |\n-   = note: the literal `0b1111_1111i8` (decimal `255`) does not fit into an `i8` and will become `-1i8`.\n-   = help: Consider using `i16`\n+   = note: the literal `0b1111_1111i8` (decimal `255`) does not fit into an `i8` and will become `-1i8`\n "}]}