{"sha": "f9c1a7dcd976bac5b357266d273c271d457c41b0", "node_id": "C_kwDOAAsO6NoAKGY5YzFhN2RjZDk3NmJhYzViMzU3MjY2ZDI3M2MyNzFkNDU3YzQxYjA", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-06-03T09:40:25Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-06-03T10:58:35Z"}, "message": "fix: assignment operators are right associative", "tree": {"sha": "7438de131d2d0e399ae0b2a5e46c8931824ba9b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7438de131d2d0e399ae0b2a5e46c8931824ba9b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9c1a7dcd976bac5b357266d273c271d457c41b0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmR7HNsACgkQ4laYqTBY\nYXHIeA/+KOa48lmxs+6fbJcwTLpEM0fBlzXwf3tdFXIdRA+7WbYx04bijnnGqkFU\nt5Vi0DBJQ3gDQ98RfHUrEGawSQjpxPWucqp9k6lx2GrjBTC2zUw8TAL1Tbf/9qFR\n2eM8+y8Mu7BFw7PMQK53rp62leQGBQKJxBnTvFDSkrSw8Wq2T/1VLd7+jIO6ZQaV\nih0vjUo5qSir0eMsG2dBveeAQh+8zf1x374v9AJk+xQMS+2ZxuCFxmeoMv2ks3KZ\noaRyXgsJo67caZ+uqKl9HHn0OdhskTnJuNZh5Y+yZv6kkngOlKJEL7HhmsnB0fXR\nNX9u+Yfbh8UBH2jcnUcMTool3sGVjWniAN9xo1cq9TOSraTDzSUOFxwXDep6UpoQ\nAxCnOTc8LwTC+HH70QN2H87l8nDqnc6d9wx2iYh3DnVrzoe1ZrV+d3QgtyZyrCb/\nj87Ko3Uo6yMMPkTpdZELWa/Iqo6SDhFWLlStH7OrnsldESPGqxNlQ783OFoM8ZB/\n9j9bakwcDzirKiQQrt5h7PKzrl0kLCer6exQr/tabgMSbQfN0usG3MJFcM8o+hXH\nS8t5gX/EH4G4a1G4fxoHN0ezbNBISfMdQE8YWHBMgvU9snQ2ogSx+nXLRDM7+LPL\nxRfljtootR0yfT0U72KKje5mOgBaH79+ZlLgHpHWv4QNsHtEjkc=\n=jkI2\n-----END PGP SIGNATURE-----", "payload": "tree 7438de131d2d0e399ae0b2a5e46c8931824ba9b8\nparent 0b4c09b1d2d3e6be0499f2683743716661821bf2\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1685785225 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1685789915 +0900\n\nfix: assignment operators are right associative\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9c1a7dcd976bac5b357266d273c271d457c41b0", "html_url": "https://github.com/rust-lang/rust/commit/f9c1a7dcd976bac5b357266d273c271d457c41b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9c1a7dcd976bac5b357266d273c271d457c41b0/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b4c09b1d2d3e6be0499f2683743716661821bf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b4c09b1d2d3e6be0499f2683743716661821bf2", "html_url": "https://github.com/rust-lang/rust/commit/0b4c09b1d2d3e6be0499f2683743716661821bf2"}], "stats": {"total": 449, "additions": 374, "deletions": 75}, "files": [{"sha": "1cbd1663230bd5bc4903f82b073967645b896822", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 51, "deletions": 38, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1a7dcd976bac5b357266d273c271d457c41b0/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1a7dcd976bac5b357266d273c271d457c41b0/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=f9c1a7dcd976bac5b357266d273c271d457c41b0", "patch": "@@ -4,8 +4,8 @@ use crate::grammar::attributes::ATTRIBUTE_FIRST;\n \n use super::*;\n \n-pub(crate) use self::atom::{block_expr, match_arm_list};\n-pub(super) use self::atom::{literal, LITERAL_FIRST};\n+pub(crate) use atom::{block_expr, match_arm_list};\n+pub(super) use atom::{literal, LITERAL_FIRST};\n \n #[derive(PartialEq, Eq)]\n pub(super) enum Semicolon {\n@@ -188,47 +188,56 @@ struct Restrictions {\n     prefer_stmt: bool,\n }\n \n+enum Associativity {\n+    Left,\n+    Right,\n+}\n+\n /// Binding powers of operators for a Pratt parser.\n ///\n /// See <https://matklad.github.io/2020/04/13/simple-but-powerful-pratt-parsing.html>\n+///\n+/// Note that Rust doesn't define associativity for some infix operators (e.g. `==` and `..`) and\n+/// requires parentheses to disambiguate. We just treat them as left associative.\n #[rustfmt::skip]\n-fn current_op(p: &Parser<'_>) -> (u8, SyntaxKind) {\n-    const NOT_AN_OP: (u8, SyntaxKind) = (0, T![@]);\n+fn current_op(p: &Parser<'_>) -> (u8, SyntaxKind, Associativity) {\n+    use Associativity::*;\n+    const NOT_AN_OP: (u8, SyntaxKind, Associativity) = (0, T![@], Left);\n     match p.current() {\n-        T![|] if p.at(T![||])  => (3,  T![||]),\n-        T![|] if p.at(T![|=])  => (1,  T![|=]),\n-        T![|]                  => (6,  T![|]),\n-        T![>] if p.at(T![>>=]) => (1,  T![>>=]),\n-        T![>] if p.at(T![>>])  => (9,  T![>>]),\n-        T![>] if p.at(T![>=])  => (5,  T![>=]),\n-        T![>]                  => (5,  T![>]),\n+        T![|] if p.at(T![||])  => (3,  T![||],  Left),\n+        T![|] if p.at(T![|=])  => (1,  T![|=],  Right),\n+        T![|]                  => (6,  T![|],   Left),\n+        T![>] if p.at(T![>>=]) => (1,  T![>>=], Right),\n+        T![>] if p.at(T![>>])  => (9,  T![>>],  Left),\n+        T![>] if p.at(T![>=])  => (5,  T![>=],  Left),\n+        T![>]                  => (5,  T![>],   Left),\n         T![=] if p.at(T![=>])  => NOT_AN_OP,\n-        T![=] if p.at(T![==])  => (5,  T![==]),\n-        T![=]                  => (1,  T![=]),\n-        T![<] if p.at(T![<=])  => (5,  T![<=]),\n-        T![<] if p.at(T![<<=]) => (1,  T![<<=]),\n-        T![<] if p.at(T![<<])  => (9,  T![<<]),\n-        T![<]                  => (5,  T![<]),\n-        T![+] if p.at(T![+=])  => (1,  T![+=]),\n-        T![+]                  => (10, T![+]),\n-        T![^] if p.at(T![^=])  => (1,  T![^=]),\n-        T![^]                  => (7,  T![^]),\n-        T![%] if p.at(T![%=])  => (1,  T![%=]),\n-        T![%]                  => (11, T![%]),\n-        T![&] if p.at(T![&=])  => (1,  T![&=]),\n+        T![=] if p.at(T![==])  => (5,  T![==],  Left),\n+        T![=]                  => (1,  T![=],   Right),\n+        T![<] if p.at(T![<=])  => (5,  T![<=],  Left),\n+        T![<] if p.at(T![<<=]) => (1,  T![<<=], Right),\n+        T![<] if p.at(T![<<])  => (9,  T![<<],  Left),\n+        T![<]                  => (5,  T![<],   Left),\n+        T![+] if p.at(T![+=])  => (1,  T![+=],  Right),\n+        T![+]                  => (10, T![+],   Left),\n+        T![^] if p.at(T![^=])  => (1,  T![^=],  Right),\n+        T![^]                  => (7,  T![^],   Left),\n+        T![%] if p.at(T![%=])  => (1,  T![%=],  Right),\n+        T![%]                  => (11, T![%],   Left),\n+        T![&] if p.at(T![&=])  => (1,  T![&=],  Right),\n         // If you update this, remember to update `expr_let()` too.\n-        T![&] if p.at(T![&&])  => (4,  T![&&]),\n-        T![&]                  => (8,  T![&]),\n-        T![/] if p.at(T![/=])  => (1,  T![/=]),\n-        T![/]                  => (11, T![/]),\n-        T![*] if p.at(T![*=])  => (1,  T![*=]),\n-        T![*]                  => (11, T![*]),\n-        T![.] if p.at(T![..=]) => (2,  T![..=]),\n-        T![.] if p.at(T![..])  => (2,  T![..]),\n-        T![!] if p.at(T![!=])  => (5,  T![!=]),\n-        T![-] if p.at(T![-=])  => (1,  T![-=]),\n-        T![-]                  => (10, T![-]),\n-        T![as]                 => (12, T![as]),\n+        T![&] if p.at(T![&&])  => (4,  T![&&],  Left),\n+        T![&]                  => (8,  T![&],   Left),\n+        T![/] if p.at(T![/=])  => (1,  T![/=],  Right),\n+        T![/]                  => (11, T![/],   Left),\n+        T![*] if p.at(T![*=])  => (1,  T![*=],  Right),\n+        T![*]                  => (11, T![*],   Left),\n+        T![.] if p.at(T![..=]) => (2,  T![..=], Left),\n+        T![.] if p.at(T![..])  => (2,  T![..],  Left),\n+        T![!] if p.at(T![!=])  => (5,  T![!=],  Left),\n+        T![-] if p.at(T![-=])  => (1,  T![-=],  Right),\n+        T![-]                  => (10, T![-],   Left),\n+        T![as]                 => (12, T![as],  Left),\n \n         _                      => NOT_AN_OP\n     }\n@@ -273,7 +282,7 @@ fn expr_bp(\n \n     loop {\n         let is_range = p.at(T![..]) || p.at(T![..=]);\n-        let (op_bp, op) = current_op(p);\n+        let (op_bp, op, associativity) = current_op(p);\n         if op_bp < bp {\n             break;\n         }\n@@ -306,7 +315,11 @@ fn expr_bp(\n             }\n         }\n \n-        expr_bp(p, None, Restrictions { prefer_stmt: false, ..r }, op_bp + 1);\n+        let op_bp = match associativity {\n+            Associativity::Left => op_bp + 1,\n+            Associativity::Right => op_bp,\n+        };\n+        expr_bp(p, None, Restrictions { prefer_stmt: false, ..r }, op_bp);\n         lhs = m.complete(p, if is_range { RANGE_EXPR } else { BIN_EXPR });\n     }\n     Some((lhs, BlockLike::NotBlock))"}, {"sha": "43802572888f0733486ed49fa02d71ccd0134e3b", "filename": "crates/parser/test_data/parser/ok/0028_operator_binding_power.rast", "status": "modified", "additions": 269, "deletions": 0, "changes": 269, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1a7dcd976bac5b357266d273c271d457c41b0/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0028_operator_binding_power.rast", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1a7dcd976bac5b357266d273c271d457c41b0/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0028_operator_binding_power.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0028_operator_binding_power.rast?ref=f9c1a7dcd976bac5b357266d273c271d457c41b0", "patch": "@@ -183,4 +183,273 @@ SOURCE_FILE\n         COMMENT \"//---&*1 - --2 * 9;\"\n         WHITESPACE \"\\n\"\n         R_CURLY \"}\"\n+  WHITESPACE \"\\n\\n\"\n+  FN\n+    FN_KW \"fn\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"right_associative\"\n+    PARAM_LIST\n+      L_PAREN \"(\"\n+      R_PAREN \")\"\n+    WHITESPACE \" \"\n+    BLOCK_EXPR\n+      STMT_LIST\n+        L_CURLY \"{\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          BIN_EXPR\n+            PATH_EXPR\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"a\"\n+            WHITESPACE \" \"\n+            EQ \"=\"\n+            WHITESPACE \" \"\n+            BIN_EXPR\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"b\"\n+              WHITESPACE \" \"\n+              EQ \"=\"\n+              WHITESPACE \" \"\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"c\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          BIN_EXPR\n+            PATH_EXPR\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"a\"\n+            WHITESPACE \" \"\n+            EQ \"=\"\n+            WHITESPACE \" \"\n+            BIN_EXPR\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"b\"\n+              WHITESPACE \" \"\n+              PLUSEQ \"+=\"\n+              WHITESPACE \" \"\n+              BIN_EXPR\n+                PATH_EXPR\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"c\"\n+                WHITESPACE \" \"\n+                MINUSEQ \"-=\"\n+                WHITESPACE \" \"\n+                PATH_EXPR\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"d\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          BIN_EXPR\n+            PATH_EXPR\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"a\"\n+            WHITESPACE \" \"\n+            EQ \"=\"\n+            WHITESPACE \" \"\n+            BIN_EXPR\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"b\"\n+              WHITESPACE \" \"\n+              STAREQ \"*=\"\n+              WHITESPACE \" \"\n+              BIN_EXPR\n+                PATH_EXPR\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"c\"\n+                WHITESPACE \" \"\n+                SLASHEQ \"/=\"\n+                WHITESPACE \" \"\n+                BIN_EXPR\n+                  PATH_EXPR\n+                    PATH\n+                      PATH_SEGMENT\n+                        NAME_REF\n+                          IDENT \"d\"\n+                  WHITESPACE \" \"\n+                  PERCENTEQ \"%=\"\n+                  WHITESPACE \" \"\n+                  PATH_EXPR\n+                    PATH\n+                      PATH_SEGMENT\n+                        NAME_REF\n+                          IDENT \"e\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          BIN_EXPR\n+            PATH_EXPR\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"a\"\n+            WHITESPACE \" \"\n+            EQ \"=\"\n+            WHITESPACE \" \"\n+            BIN_EXPR\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"b\"\n+              WHITESPACE \" \"\n+              AMPEQ \"&=\"\n+              WHITESPACE \" \"\n+              BIN_EXPR\n+                PATH_EXPR\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"c\"\n+                WHITESPACE \" \"\n+                PIPEEQ \"|=\"\n+                WHITESPACE \" \"\n+                BIN_EXPR\n+                  PATH_EXPR\n+                    PATH\n+                      PATH_SEGMENT\n+                        NAME_REF\n+                          IDENT \"d\"\n+                  WHITESPACE \" \"\n+                  CARETEQ \"^=\"\n+                  WHITESPACE \" \"\n+                  PATH_EXPR\n+                    PATH\n+                      PATH_SEGMENT\n+                        NAME_REF\n+                          IDENT \"e\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          BIN_EXPR\n+            PATH_EXPR\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"a\"\n+            WHITESPACE \" \"\n+            EQ \"=\"\n+            WHITESPACE \" \"\n+            BIN_EXPR\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"b\"\n+              WHITESPACE \" \"\n+              SHLEQ \"<<=\"\n+              WHITESPACE \" \"\n+              BIN_EXPR\n+                PATH_EXPR\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"c\"\n+                WHITESPACE \" \"\n+                SHREQ \">>=\"\n+                WHITESPACE \" \"\n+                PATH_EXPR\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"d\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n\"\n+        R_CURLY \"}\"\n+  WHITESPACE \"\\n\\n\"\n+  FN\n+    FN_KW \"fn\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"mixed_associativity\"\n+    PARAM_LIST\n+      L_PAREN \"(\"\n+      R_PAREN \")\"\n+    WHITESPACE \" \"\n+    BLOCK_EXPR\n+      STMT_LIST\n+        L_CURLY \"{\"\n+        WHITESPACE \"\\n    \"\n+        COMMENT \"// (a + b) = (c += ((d * e) = f))\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          BIN_EXPR\n+            BIN_EXPR\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"a\"\n+              WHITESPACE \" \"\n+              PLUS \"+\"\n+              WHITESPACE \" \"\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"b\"\n+            WHITESPACE \" \"\n+            EQ \"=\"\n+            WHITESPACE \" \"\n+            BIN_EXPR\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"c\"\n+              WHITESPACE \" \"\n+              PLUSEQ \"+=\"\n+              WHITESPACE \" \"\n+              BIN_EXPR\n+                BIN_EXPR\n+                  PATH_EXPR\n+                    PATH\n+                      PATH_SEGMENT\n+                        NAME_REF\n+                          IDENT \"d\"\n+                  WHITESPACE \" \"\n+                  STAR \"*\"\n+                  WHITESPACE \" \"\n+                  PATH_EXPR\n+                    PATH\n+                      PATH_SEGMENT\n+                        NAME_REF\n+                          IDENT \"e\"\n+                WHITESPACE \" \"\n+                EQ \"=\"\n+                WHITESPACE \" \"\n+                PATH_EXPR\n+                  PATH\n+                    PATH_SEGMENT\n+                      NAME_REF\n+                        IDENT \"f\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n\"\n+        R_CURLY \"}\"\n   WHITESPACE \"\\n\""}, {"sha": "7ee3013a0c89e7842ac82486b93b850fea4ae4e3", "filename": "crates/parser/test_data/parser/ok/0028_operator_binding_power.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1a7dcd976bac5b357266d273c271d457c41b0/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0028_operator_binding_power.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1a7dcd976bac5b357266d273c271d457c41b0/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0028_operator_binding_power.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0028_operator_binding_power.rs?ref=f9c1a7dcd976bac5b357266d273c271d457c41b0", "patch": "@@ -12,3 +12,16 @@ fn binding_power() {\n     //1 = 2 .. 3;\n     //---&*1 - --2 * 9;\n }\n+\n+fn right_associative() {\n+    a = b = c;\n+    a = b += c -= d;\n+    a = b *= c /= d %= e;\n+    a = b &= c |= d ^= e;\n+    a = b <<= c >>= d;\n+}\n+\n+fn mixed_associativity() {\n+    // (a + b) = (c += ((d * e) = f))\n+    a + b = c += d * e = f;\n+}"}, {"sha": "ce75c55189a0c5d85ee73703c8b71bad346abfc9", "filename": "crates/parser/test_data/parser/ok/0072_destructuring_assignment.rast", "status": "modified", "additions": 40, "deletions": 36, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1a7dcd976bac5b357266d273c271d457c41b0/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0072_destructuring_assignment.rast", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1a7dcd976bac5b357266d273c271d457c41b0/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0072_destructuring_assignment.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0072_destructuring_assignment.rast?ref=f9c1a7dcd976bac5b357266d273c271d457c41b0", "patch": "@@ -168,42 +168,46 @@ SOURCE_FILE\n         WHITESPACE \"\\n    \"\n         EXPR_STMT\n           BIN_EXPR\n-            BIN_EXPR\n-              CALL_EXPR\n-                PATH_EXPR\n-                  PATH\n-                    PATH_SEGMENT\n-                      NAME_REF\n-                        IDENT \"Some\"\n-                ARG_LIST\n-                  L_PAREN \"(\"\n-                  RANGE_EXPR\n-                    DOT2 \"..\"\n-                  R_PAREN \")\"\n-              WHITESPACE \" \"\n-              EQ \"=\"\n-              WHITESPACE \" \"\n-              METHOD_CALL_EXPR\n-                CALL_EXPR\n-                  PATH_EXPR\n-                    PATH\n-                      PATH_SEGMENT\n-                        NAME_REF\n-                          IDENT \"Some\"\n-                  ARG_LIST\n-                    L_PAREN \"(\"\n-                    LITERAL\n-                      INT_NUMBER \"0\"\n-                    R_PAREN \")\"\n-                DOT \".\"\n-                WHITESPACE \"\\n    \"\n-                NAME_REF\n-                  IDENT \"Ok\"\n-                ARG_LIST\n-                  L_PAREN \"(\"\n-                  UNDERSCORE_EXPR\n-                    UNDERSCORE \"_\"\n-                  R_PAREN \")\"\n+            CALL_EXPR\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"Some\"\n+              ARG_LIST\n+                L_PAREN \"(\"\n+                RANGE_EXPR\n+                  DOT2 \"..\"\n+                R_PAREN \")\"\n+            WHITESPACE \" \"\n+            EQ \"=\"\n+            WHITESPACE \" \"\n+            CALL_EXPR\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"Some\"\n+              ARG_LIST\n+                L_PAREN \"(\"\n+                LITERAL\n+                  INT_NUMBER \"0\"\n+                R_PAREN \")\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        EXPR_STMT\n+          BIN_EXPR\n+            CALL_EXPR\n+              PATH_EXPR\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"Ok\"\n+              ARG_LIST\n+                L_PAREN \"(\"\n+                UNDERSCORE_EXPR\n+                  UNDERSCORE \"_\"\n+                R_PAREN \")\"\n             WHITESPACE \" \"\n             EQ \"=\"\n             WHITESPACE \" \""}, {"sha": "d223b11f239e13b062eb385919c03dc82cfe11a8", "filename": "crates/parser/test_data/parser/ok/0072_destructuring_assignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9c1a7dcd976bac5b357266d273c271d457c41b0/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0072_destructuring_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c1a7dcd976bac5b357266d273c271d457c41b0/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0072_destructuring_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Fok%2F0072_destructuring_assignment.rs?ref=f9c1a7dcd976bac5b357266d273c271d457c41b0", "patch": "@@ -4,7 +4,7 @@ fn foo() {\n     (_) = ..;\n     struct S { a: i32 }\n     S { .. } = S { ..S::default() };\n-    Some(..) = Some(0).\n+    Some(..) = Some(0);\n     Ok(_) = 0;\n     let (a, b);\n     [a, .., b] = [1, .., 2];"}]}