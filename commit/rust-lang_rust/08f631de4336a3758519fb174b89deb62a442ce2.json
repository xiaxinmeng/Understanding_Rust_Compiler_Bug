{"sha": "08f631de4336a3758519fb174b89deb62a442ce2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ZjYzMWRlNDMzNmEzNzU4NTE5ZmIxNzRiODlkZWI2MmE0NDJjZTI=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-05-24T22:50:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-24T22:50:17Z"}, "message": "Merge pull request #1582 from topecongiro/poor/fn_call_style_block\n\nDecide whether args fit in a single line inside rewrite_call_args", "tree": {"sha": "db78732af29e003e120d88ed526ef711749fb12f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db78732af29e003e120d88ed526ef711749fb12f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08f631de4336a3758519fb174b89deb62a442ce2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08f631de4336a3758519fb174b89deb62a442ce2", "html_url": "https://github.com/rust-lang/rust/commit/08f631de4336a3758519fb174b89deb62a442ce2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08f631de4336a3758519fb174b89deb62a442ce2/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93c556c6ba197ce136aa50a2d252e77a1421cba5", "url": "https://api.github.com/repos/rust-lang/rust/commits/93c556c6ba197ce136aa50a2d252e77a1421cba5", "html_url": "https://github.com/rust-lang/rust/commit/93c556c6ba197ce136aa50a2d252e77a1421cba5"}, {"sha": "c8ad521c9f4d45935cc24c87772f00f6df360152", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8ad521c9f4d45935cc24c87772f00f6df360152", "html_url": "https://github.com/rust-lang/rust/commit/c8ad521c9f4d45935cc24c87772f00f6df360152"}], "stats": {"total": 57, "additions": 44, "deletions": 13}, "files": [{"sha": "bb9e55e4f16cb76c8879391a4689da70491408ee", "filename": "src/expr.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/08f631de4336a3758519fb174b89deb62a442ce2/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08f631de4336a3758519fb174b89deb62a442ce2/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=08f631de4336a3758519fb174b89deb62a442ce2", "patch": "@@ -1673,15 +1673,9 @@ fn rewrite_call_inner<R>(context: &RewriteContext,\n                                                    one_line_width,\n                                                    force_trailing_comma)\n         .ok_or(Ordering::Less)?;\n-    let arg_one_line_budget = min(one_line_width, context.config.fn_call_width());\n     Ok(format!(\"{}{}\",\n                callee_str,\n-               wrap_args_with_parens(context,\n-                                     &list_str,\n-                                     extendable,\n-                                     arg_one_line_budget,\n-                                     shape,\n-                                     nested_shape)))\n+               wrap_args_with_parens(context, &list_str, extendable, shape, nested_shape)))\n }\n \n fn rewrite_call_args(context: &RewriteContext,\n@@ -1771,12 +1765,16 @@ fn rewrite_call_args(context: &RewriteContext,\n         config: context.config,\n     };\n \n-    let args_in_single_line =\n+    let almost_no_newline =\n         item_vec\n             .iter()\n             .rev()\n             .skip(1)\n             .all(|item| item.item.as_ref().map_or(false, |s| !s.contains('\\n')));\n+    let extendable = almost_no_newline &&\n+                     item_vec.iter().fold(0, |acc, item| {\n+        acc + item.item.as_ref().map_or(0, |s| 2 + first_line_width(s))\n+    }) <= min(one_line_width, context.config.fn_call_width()) + 2;\n \n     match write_list(&item_vec, &fmt) {\n         // If arguments do not fit in a single line and do not contain newline,\n@@ -1791,7 +1789,15 @@ fn rewrite_call_args(context: &RewriteContext,\n             fmt.tactic = DefinitiveListTactic::Vertical;\n             write_list(&item_vec, &fmt).map(|rw| (false, rw))\n         }\n-        rewrite @ _ => rewrite.map(|rw| (args_in_single_line && is_extendable(args), rw)),\n+        rewrite @ _ => {\n+            rewrite.map(|rw| {\n+                            (extendable &&\n+                             rw.chars()\n+                                 .last()\n+                                 .map_or(true, |c| force_trailing_comma || c != ','),\n+                             rw)\n+                        })\n+        }\n     }\n }\n \n@@ -1841,14 +1847,11 @@ fn is_extendable(args: &[ptr::P<ast::Expr>]) -> bool {\n fn wrap_args_with_parens(context: &RewriteContext,\n                          args_str: &str,\n                          is_extendable: bool,\n-                         one_line_budget: usize,\n                          shape: Shape,\n                          nested_shape: Shape)\n                          -> String {\n     if context.config.fn_call_style() == IndentStyle::Visual ||\n-       (context.inside_macro && !args_str.contains('\\n')) ||\n-       ((is_extendable || !args_str.contains('\\n')) &&\n-        first_line_width(&args_str) <= one_line_budget) {\n+       (context.inside_macro && !args_str.contains('\\n')) || is_extendable {\n         if context.config.spaces_within_parens() && args_str.len() > 0 {\n             format!(\"( {} )\", args_str)\n         } else {"}, {"sha": "6b5f00a92419352613d965c55bad430372eeb039", "filename": "tests/source/configs-fn_call_style-block.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/08f631de4336a3758519fb174b89deb62a442ce2/tests%2Fsource%2Fconfigs-fn_call_style-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08f631de4336a3758519fb174b89deb62a442ce2/tests%2Fsource%2Fconfigs-fn_call_style-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-fn_call_style-block.rs?ref=08f631de4336a3758519fb174b89deb62a442ce2", "patch": "@@ -96,3 +96,17 @@ impl Cursor {\n             });\n     }\n }\n+\n+fn issue1581() {\n+    bootstrap.checks.register(\n+        \"PERSISTED_LOCATIONS\",\n+        move || if locations2.0.inner_mut.lock().poisoned {\n+            Check::new(\n+                State::Error,\n+                \"Persisted location storage is poisoned due to a write failure\",\n+            )\n+        } else {\n+            Check::new(State::Healthy, \"Persisted location storage is healthy\")\n+        },\n+    );\n+}"}, {"sha": "c50eb5bc8da108df8398dcac2dd0cd11764e5111", "filename": "tests/target/configs-fn_call_style-block.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/08f631de4336a3758519fb174b89deb62a442ce2/tests%2Ftarget%2Fconfigs-fn_call_style-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08f631de4336a3758519fb174b89deb62a442ce2/tests%2Ftarget%2Fconfigs-fn_call_style-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_call_style-block.rs?ref=08f631de4336a3758519fb174b89deb62a442ce2", "patch": "@@ -106,3 +106,17 @@ impl Cursor {\n             });\n     }\n }\n+\n+fn issue1581() {\n+    bootstrap.checks.register(\n+        \"PERSISTED_LOCATIONS\",\n+        move || if locations2.0.inner_mut.lock().poisoned {\n+            Check::new(\n+                State::Error,\n+                \"Persisted location storage is poisoned due to a write failure\",\n+            )\n+        } else {\n+            Check::new(State::Healthy, \"Persisted location storage is healthy\")\n+        },\n+    );\n+}"}]}