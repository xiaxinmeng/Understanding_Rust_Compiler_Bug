{"sha": "de337f3ddfbef800a8cf731e0b593e341af1e3e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMzM3ZjNkZGZiZWY4MDBhOGNmNzMxZTBiNTkzZTM0MWFmMWUzZTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-28T18:21:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-28T18:21:34Z"}, "message": "auto merge of #15191 : pcwalton/rust/variance-in-trait-matching, r=huonw\n\nI believe that #5781 got fixed by the DST work. It duplicated the\r\nvariance inference work in #12828. Therefore, all that is left in #5781\r\nis adding a test.\r\n\r\nCloses #5781.\r\n\r\nr? @huonw", "tree": {"sha": "7f35eb443f0b58d81dc39f6d19da42bac4645d7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f35eb443f0b58d81dc39f6d19da42bac4645d7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de337f3ddfbef800a8cf731e0b593e341af1e3e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de337f3ddfbef800a8cf731e0b593e341af1e3e5", "html_url": "https://github.com/rust-lang/rust/commit/de337f3ddfbef800a8cf731e0b593e341af1e3e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de337f3ddfbef800a8cf731e0b593e341af1e3e5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b47f2226a25654c5b781d27a91f2fa5274b3a347", "url": "https://api.github.com/repos/rust-lang/rust/commits/b47f2226a25654c5b781d27a91f2fa5274b3a347", "html_url": "https://github.com/rust-lang/rust/commit/b47f2226a25654c5b781d27a91f2fa5274b3a347"}, {"sha": "05e3248a7974f55b64f75a2483b37ff8c001a4ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/05e3248a7974f55b64f75a2483b37ff8c001a4ff", "html_url": "https://github.com/rust-lang/rust/commit/05e3248a7974f55b64f75a2483b37ff8c001a4ff"}], "stats": {"total": 298, "additions": 214, "deletions": 84}, "files": [{"sha": "94b8bee8cc9d2f2005390caa768cd6aeee173162", "filename": "src/liballoc/owned.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Fliballoc%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Fliballoc%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fowned.rs?ref=de337f3ddfbef800a8cf731e0b593e341af1e3e5", "patch": "@@ -16,6 +16,7 @@ use core::cmp::{PartialEq, PartialOrd, Eq, Ord, Ordering};\n use core::default::Default;\n use core::fmt;\n use core::intrinsics;\n+use core::kinds::Send;\n use core::mem;\n use core::raw::TraitObject;\n use core::result::{Ok, Err, Result};\n@@ -106,6 +107,34 @@ impl AnyOwnExt for Box<Any> {\n     }\n }\n \n+/// Extension methods for an owning `Any+Send` trait object\n+pub trait AnySendOwnExt {\n+    /// Returns the boxed value if it is of type `T`, or\n+    /// `Err(Self)` if it isn't.\n+    fn move_send<T: 'static>(self) -> Result<Box<T>, Self>;\n+}\n+\n+impl AnySendOwnExt for Box<Any+Send> {\n+    #[inline]\n+    fn move_send<T: 'static>(self) -> Result<Box<T>, Box<Any+Send>> {\n+        if self.is::<T>() {\n+            unsafe {\n+                // Get the raw representation of the trait object\n+                let to: TraitObject =\n+                    *mem::transmute::<&Box<Any+Send>, &TraitObject>(&self);\n+\n+                // Prevent destructor on self being run\n+                intrinsics::forget(self);\n+\n+                // Extract the data pointer\n+                Ok(mem::transmute(to.data))\n+            }\n+        } else {\n+            Err(self)\n+        }\n+    }\n+}\n+\n impl<T: fmt::Show> fmt::Show for Box<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         (**self).fmt(f)"}, {"sha": "ec53ef93dc1dde10ff34a0443dd767756b85049f", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=de337f3ddfbef800a8cf731e0b593e341af1e3e5", "patch": "@@ -135,7 +135,8 @@ pub trait Iterator<A> {\n     /// let a = [0i];\n     /// let b = [1i];\n     /// let mut it = a.iter().zip(b.iter());\n-    /// assert_eq!(it.next().unwrap(), (&0, &1));\n+    /// let (x0, x1) = (0i, 1i);\n+    /// assert_eq!(it.next().unwrap(), (&x0, &x1));\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n@@ -202,8 +203,9 @@ pub trait Iterator<A> {\n     /// ```rust\n     /// let a = [100i, 200];\n     /// let mut it = a.iter().enumerate();\n-    /// assert_eq!(it.next().unwrap(), (0, &100));\n-    /// assert_eq!(it.next().unwrap(), (1, &200));\n+    /// let (x100, x200) = (100i, 200i);\n+    /// assert_eq!(it.next().unwrap(), (0, &x100));\n+    /// assert_eq!(it.next().unwrap(), (1, &x200));\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n@@ -220,11 +222,11 @@ pub trait Iterator<A> {\n     /// ```rust\n     /// let xs = [100i, 200, 300];\n     /// let mut it = xs.iter().map(|x| *x).peekable();\n-    /// assert_eq!(it.peek().unwrap(), &100);\n+    /// assert_eq!(*it.peek().unwrap(), 100);\n     /// assert_eq!(it.next().unwrap(), 100);\n     /// assert_eq!(it.next().unwrap(), 200);\n-    /// assert_eq!(it.peek().unwrap(), &300);\n-    /// assert_eq!(it.peek().unwrap(), &300);\n+    /// assert_eq!(*it.peek().unwrap(), 300);\n+    /// assert_eq!(*it.peek().unwrap(), 300);\n     /// assert_eq!(it.next().unwrap(), 300);\n     /// assert!(it.peek().is_none());\n     /// assert!(it.next().is_none());"}, {"sha": "33e0d0331be6c23d3e0725e161b083f8a74a877a", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=de337f3ddfbef800a8cf731e0b593e341af1e3e5", "patch": "@@ -352,17 +352,15 @@ fn search_for_vtable(vcx: &VtableContext,\n         // the next impl.\n         //\n         // FIXME: document a bit more what this means\n-        //\n-        // FIXME(#5781) this should be mk_eqty not mk_subty\n         let TypeAndSubsts {\n             substs: substs,\n             ty: for_ty\n         } = impl_self_ty(vcx, span, impl_did);\n-        match infer::mk_subty(vcx.infcx,\n-                              false,\n-                              infer::RelateSelfType(span),\n-                              ty,\n-                              for_ty) {\n+        match infer::mk_eqty(vcx.infcx,\n+                             false,\n+                             infer::RelateSelfType(span),\n+                             ty,\n+                             for_ty) {\n             Err(_) => continue,\n             Ok(()) => ()\n         }"}, {"sha": "f374f1dc26795104f2fc31ea551a254cbbd27c4a", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 10, "deletions": 26, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=de337f3ddfbef800a8cf731e0b593e341af1e3e5", "patch": "@@ -84,41 +84,25 @@ pub trait Combine {\n     fn tys(&self, a: ty::t, b: ty::t) -> cres<ty::t>;\n \n     fn tps(&self,\n-           space: subst::ParamSpace,\n+           _: subst::ParamSpace,\n            as_: &[ty::t],\n            bs: &[ty::t])\n-           -> cres<Vec<ty::t>>\n-    {\n-        // FIXME(#5781) -- In general, we treat variance a bit wrong\n-        // here. For historical reasons, we treat Self as\n-        // contravariant and other tps as invariant. Both are wrong:\n-        // Self may or may not be contravariant, and other tps do not\n-        // need to be invariant.\n+           -> cres<Vec<ty::t>> {\n+        // FIXME -- In general, we treat variance a bit wrong\n+        // here. For historical reasons, we treat tps and Self\n+        // as invariant. This is overly conservative.\n \n         if as_.len() != bs.len() {\n             return Err(ty::terr_ty_param_size(expected_found(self,\n                                                              as_.len(),\n                                                              bs.len())));\n         }\n \n-        match space {\n-            subst::SelfSpace => {\n-                result::fold(as_\n-                             .iter()\n-                             .zip(bs.iter())\n-                             .map(|(a, b)| self.contratys(*a, *b)),\n-                             Vec::new(),\n-                             |mut v, a| { v.push(a); v })\n-            }\n-\n-            subst::TypeSpace | subst::FnSpace => {\n-                try!(result::fold_(as_\n-                                  .iter()\n-                                  .zip(bs.iter())\n-                                  .map(|(a, b)| eq_tys(self, *a, *b))));\n-                Ok(Vec::from_slice(as_))\n-            }\n-        }\n+        try!(result::fold_(as_\n+                          .iter()\n+                          .zip(bs.iter())\n+                          .map(|(a, b)| eq_tys(self, *a, *b))));\n+        Ok(Vec::from_slice(as_))\n     }\n \n     fn substs(&self,"}, {"sha": "0a60a5ce0e9fa3900a5d8b7d031f189f45e17aa8", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=de337f3ddfbef800a8cf731e0b593e341af1e3e5", "patch": "@@ -78,8 +78,8 @@ receiver position from being called via an object.)\n #### Trait variance and vtable resolution\n \n But traits aren't only used with objects. They're also used when\n-deciding whether a given impl satisfies a given trait bound (or should\n-be -- FIXME #5781). To set the scene here, imagine I had a function:\n+deciding whether a given impl satisfies a given trait bound. To set the\n+scene here, imagine I had a function:\n \n     fn convertAll<A,T:ConvertTo<A>>(v: &[T]) {\n         ..."}, {"sha": "7e7f10f71783dd9d07171e2512dcfbda8e774b89", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=de337f3ddfbef800a8cf731e0b593e341af1e3e5", "patch": "@@ -140,7 +140,14 @@ fn runtest(test: &str, cratename: &str, libs: HashSet<Path>, should_fail: bool,\n     let old = io::stdio::set_stderr(box w1);\n     spawn(proc() {\n         let mut p = io::ChanReader::new(rx);\n-        let mut err = old.unwrap_or(box io::stderr() as Box<Writer + Send>);\n+        let mut err = match old {\n+            Some(old) => {\n+                // Chop off the `Send` bound.\n+                let old: Box<Writer> = old;\n+                old\n+            }\n+            None => box io::stderr() as Box<Writer>,\n+        };\n         io::util::copy(&mut p, &mut err).unwrap();\n     });\n     let emitter = diagnostic::EmitterWriter::new(box w2);"}, {"sha": "cd5887b7add0011d6ebf96cae8caad21019922a6", "filename": "src/libstd/io/comm_adapters.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcomm_adapters.rs?ref=de337f3ddfbef800a8cf731e0b593e341af1e3e5", "patch": "@@ -183,7 +183,10 @@ mod test {\n         writer.write_be_u32(42).unwrap();\n \n         let wanted = vec![0u8, 0u8, 0u8, 42u8];\n-        let got = task::try(proc() { rx.recv() }).unwrap();\n+        let got = match task::try(proc() { rx.recv() }) {\n+            Ok(got) => got,\n+            Err(_) => fail!(),\n+        };\n         assert_eq!(wanted, got);\n \n         match writer.write_u8(1) {"}, {"sha": "8ccded6681b07d1838915487b2f6714f23c5211a", "filename": "src/libstd/task.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=de337f3ddfbef800a8cf731e0b593e341af1e3e5", "patch": "@@ -630,9 +630,11 @@ mod test {\n         let mut reader = ChanReader::new(rx);\n         let stdout = ChanWriter::new(tx);\n \n-        TaskBuilder::new().stdout(box stdout as Box<Writer + Send>).try(proc() {\n-            print!(\"Hello, world!\");\n-        }).unwrap();\n+        let r = TaskBuilder::new().stdout(box stdout as Box<Writer + Send>)\n+                                  .try(proc() {\n+                print!(\"Hello, world!\");\n+            });\n+        assert!(r.is_ok());\n \n         let output = reader.read_to_str().unwrap();\n         assert_eq!(output, \"Hello, world!\".to_string());"}, {"sha": "90569bfc132c7de3b2c819c37e92a85ee12a501d", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=de337f3ddfbef800a8cf731e0b593e341af1e3e5", "patch": "@@ -18,6 +18,7 @@ use std::fmt;\n use std::io;\n use std::iter::range;\n use std::string::String;\n+use term::WriterWrapper;\n use term;\n \n // maximum number of lines we will print for each error; arbitrary.\n@@ -281,7 +282,7 @@ pub struct EmitterWriter {\n }\n \n enum Destination {\n-    Terminal(Box<term::Terminal<Box<Writer + Send>> + Send>),\n+    Terminal(Box<term::Terminal<WriterWrapper> + Send>),\n     Raw(Box<Writer + Send>),\n }\n "}, {"sha": "34d60ddbe9db9375416437d4f747508578bd2503", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 52, "deletions": 22, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=de337f3ddfbef800a8cf731e0b593e341af1e3e5", "patch": "@@ -66,54 +66,84 @@ pub mod terminfo;\n #[cfg(windows)]\n mod win;\n \n+/// A hack to work around the fact that `Box<Writer + Send>` does not\n+/// currently implement `Writer`.\n+pub struct WriterWrapper {\n+    wrapped: Box<Writer + Send>,\n+}\n+\n+impl Writer for WriterWrapper {\n+    #[inline]\n+    fn write(&mut self, buf: &[u8]) -> IoResult<()> {\n+        self.wrapped.write(buf)\n+    }\n+\n+    #[inline]\n+    fn flush(&mut self) -> IoResult<()> {\n+        self.wrapped.flush()\n+    }\n+}\n+\n #[cfg(not(windows))]\n /// Return a Terminal wrapping stdout, or None if a terminal couldn't be\n /// opened.\n-pub fn stdout() -> Option<Box<Terminal<Box<Writer + Send>> + Send>> {\n-    let ti: Option<TerminfoTerminal<Box<Writer + Send>>>\n-        = Terminal::new(box std::io::stdout() as Box<Writer + Send>);\n-    ti.map(|t| box t as Box<Terminal<Box<Writer + Send> + Send> + Send>)\n+pub fn stdout() -> Option<Box<Terminal<WriterWrapper> + Send>> {\n+    let ti: Option<TerminfoTerminal<WriterWrapper>>\n+        = Terminal::new(WriterWrapper {\n+            wrapped: box std::io::stdout() as Box<Writer + Send>,\n+        });\n+    ti.map(|t| box t as Box<Terminal<WriterWrapper> + Send>)\n }\n \n #[cfg(windows)]\n /// Return a Terminal wrapping stdout, or None if a terminal couldn't be\n /// opened.\n-pub fn stdout() -> Option<Box<Terminal<Box<Writer + Send> + Send> + Send>> {\n-    let ti: Option<TerminfoTerminal<Box<Writer + Send>>>\n-        = Terminal::new(box std::io::stdout() as Box<Writer + Send>);\n+pub fn stdout() -> Option<Box<Terminal<WriterWrapper> + Send>> {\n+    let ti: Option<TerminfoTerminal<WriterWrapper>>\n+        = Terminal::new(WriterWrapper {\n+            wrapped: box std::io::stdout() as Box<Writer + Send>,\n+        });\n \n     match ti {\n-        Some(t) => Some(box t as Box<Terminal<Box<Writer + Send> + Send> + Send>),\n+        Some(t) => Some(box t as Box<Terminal<WriterWrapper> + Send>),\n         None => {\n-            let wc: Option<WinConsole<Box<Writer + Send>>>\n-                = Terminal::new(box std::io::stdout() as Box<Writer + Send>);\n-            wc.map(|w| box w as Box<Terminal<Box<Writer + Send> + Send> + Send>)\n+            let wc: Option<WinConsole<WriterWrapper>>\n+                = Terminal::new(WriterWrapper {\n+                    wrapped: box std::io::stdout() as Box<Writer + Send>,\n+                });\n+            wc.map(|w| box w as Box<Terminal<WriterWrapper> + Send>)\n         }\n     }\n }\n \n #[cfg(not(windows))]\n /// Return a Terminal wrapping stderr, or None if a terminal couldn't be\n /// opened.\n-pub fn stderr() -> Option<Box<Terminal<Box<Writer + Send> + Send> + Send> + Send> {\n-    let ti: Option<TerminfoTerminal<Box<Writer + Send>>>\n-        = Terminal::new(box std::io::stderr() as Box<Writer + Send>);\n-    ti.map(|t| box t as Box<Terminal<Box<Writer + Send> + Send> + Send>)\n+pub fn stderr() -> Option<Box<Terminal<WriterWrapper> + Send> + Send> {\n+    let ti: Option<TerminfoTerminal<WriterWrapper>>\n+        = Terminal::new(WriterWrapper {\n+            wrapped: box std::io::stderr() as Box<Writer + Send>,\n+        });\n+    ti.map(|t| box t as Box<Terminal<WriterWrapper> + Send>)\n }\n \n #[cfg(windows)]\n /// Return a Terminal wrapping stderr, or None if a terminal couldn't be\n /// opened.\n-pub fn stderr() -> Option<Box<Terminal<Box<Writer + Send> + Send> + Send>> {\n-    let ti: Option<TerminfoTerminal<Box<Writer + Send>>>\n-        = Terminal::new(box std::io::stderr() as Box<Writer + Send>);\n+pub fn stderr() -> Option<Box<Terminal<WriterWrapper> + Send> + Send> {\n+    let ti: Option<TerminfoTerminal<WriterWrapper>>\n+        = Terminal::new(WriterWrapper {\n+            wrapped: box std::io::stderr() as Box<Writer + Send>,\n+        });\n \n     match ti {\n-        Some(t) => Some(box t as Box<Terminal<Box<Writer + Send> + Send> + Send>),\n+        Some(t) => Some(box t as Box<Terminal<WriterWrapper> + Send>),\n         None => {\n-            let wc: Option<WinConsole<Box<Writer + Send>>>\n-                = Terminal::new(box std::io::stderr() as Box<Writer + Send>);\n-            wc.map(|w| box w as Box<Terminal<Box<Writer + Send> + Send> + Send>)\n+            let wc: Option<WinConsole<WriterWrapper>>\n+                = Terminal::new(WriterWrapper {\n+                    wrapped: box std::io::stderr() as Box<Writer + Send>,\n+                });\n+            wc.map(|w| box w as Box<Terminal<WriterWrapper> + Send>)\n         }\n     }\n }"}, {"sha": "26c9aaed568af47e9bc24fcca5a1a4ecb3efcafe", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=de337f3ddfbef800a8cf731e0b593e341af1e3e5", "patch": "@@ -474,7 +474,7 @@ pub enum TestResult {\n }\n \n enum OutputLocation<T> {\n-    Pretty(Box<term::Terminal<Box<Writer + Send>> + Send>),\n+    Pretty(Box<term::Terminal<term::WriterWrapper> + Send>),\n     Raw(T),\n }\n "}, {"sha": "980a4aed34f9ebfa6daff2768a98b42b28fb8a85", "filename": "src/test/compile-fail/regions-escape-via-trait-or-not.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-trait-or-not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-trait-or-not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-trait-or-not.rs?ref=de337f3ddfbef800a8cf731e0b593e341af1e3e5", "patch": "@@ -23,7 +23,7 @@ fn with<R:deref>(f: |x: &int| -> R) -> int {\n }\n \n fn return_it() -> int {\n-    with(|o| o) //~ ERROR lifetime of function argument does not outlive the function call\n+    with(|o| o) //~ ERROR cannot infer an appropriate lifetime\n }\n \n fn main() {"}, {"sha": "f549c78be9d0d17d1a3fd4e8742f595f973e880d", "filename": "src/test/compile-fail/variance-trait-matching-2.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Ftest%2Fcompile-fail%2Fvariance-trait-matching-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Ftest%2Fcompile-fail%2Fvariance-trait-matching-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-trait-matching-2.rs?ref=de337f3ddfbef800a8cf731e0b593e341af1e3e5", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate serialize;\n+\n+use std::io::MemWriter;\n+use std::io;\n+use serialize::{Encodable, Encoder};\n+\n+pub fn buffer_encode<'a,\n+                     T:Encodable<serialize::json::Encoder<'a>,io::IoError>>(\n+                     to_encode_object: &T)\n+                     -> Vec<u8> {\n+    let mut m = MemWriter::new();\n+    {\n+        let mut encoder =\n+            serialize::json::Encoder::new(&mut m as &mut io::Writer);\n+        //~^ ERROR `m` does not live long enough\n+        to_encode_object.encode(&mut encoder);\n+    }\n+    m.unwrap()\n+}\n+\n+fn main() {}"}, {"sha": "1644705222f704efbd47e472ceaecc024fac182f", "filename": "src/test/compile-fail/variance-trait-matching.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Ftest%2Fcompile-fail%2Fvariance-trait-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Ftest%2Fcompile-fail%2Fvariance-trait-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-trait-matching.rs?ref=de337f3ddfbef800a8cf731e0b593e341af1e3e5", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue #5781. Tests that subtyping is handled properly in trait matching.\n+\n+trait Make<'a> {\n+    fn make(x: &'a mut int) -> Self;\n+}\n+\n+impl<'a> Make<'a> for &'a mut int {\n+    fn make(x: &'a mut int) -> &'a mut int {\n+        x\n+    }\n+}\n+\n+fn f() -> &'static mut int {\n+    let mut x = 1;\n+    let y: &'static mut int = Make::make(&mut x);   //~ ERROR `x` does not live long enough\n+    y\n+}\n+\n+fn main() {}\n+"}, {"sha": "75d23d0f4fdf2e47919a99d619e64d732c2059b4", "filename": "src/test/run-fail/fail-task-name-none.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Ftest%2Frun-fail%2Ffail-task-name-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Ftest%2Frun-fail%2Ffail-task-name-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-task-name-none.rs?ref=de337f3ddfbef800a8cf731e0b593e341af1e3e5", "patch": "@@ -13,8 +13,9 @@\n use std::task;\n \n fn main() {\n-    task::try(proc() {\n+    let r: Result<int,_> = task::try(proc() {\n         fail!(\"test\");\n-        1\n-    }).unwrap()\n+        1i\n+    });\n+    assert!(r.is_ok());\n }"}, {"sha": "b1c8963e684d68bd8cfb5d27f9a6e256746878af", "filename": "src/test/run-fail/fail-task-name-owned.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Ftest%2Frun-fail%2Ffail-task-name-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Ftest%2Frun-fail%2Ffail-task-name-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-task-name-owned.rs?ref=de337f3ddfbef800a8cf731e0b593e341af1e3e5", "patch": "@@ -13,8 +13,10 @@\n use std::task::TaskBuilder;\n \n fn main() {\n-    TaskBuilder::new().named(\"owned name\".to_string()).try(proc() {\n+    let r: Result<int,_> = TaskBuilder::new().named(\"owned name\".to_string())\n+                                             .try(proc() {\n         fail!(\"test\");\n         1\n-    }).unwrap()\n+    });\n+    assert!(r.is_ok());\n }"}, {"sha": "5153c5f2807b04b36f332cb36a472c89a548d080", "filename": "src/test/run-fail/fail-task-name-send-str.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Ftest%2Frun-fail%2Ffail-task-name-send-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Ftest%2Frun-fail%2Ffail-task-name-send-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-task-name-send-str.rs?ref=de337f3ddfbef800a8cf731e0b593e341af1e3e5", "patch": "@@ -11,8 +11,11 @@\n // error-pattern:task 'send name' failed at 'test'\n \n fn main() {\n-    ::std::task::TaskBuilder::new().named(\"send name\".into_maybe_owned()).try(proc() {\n-        fail!(\"test\");\n-        3\n-    }).unwrap()\n+    let r: Result<int,_> =\n+        ::std::task::TaskBuilder::new().named(\"send name\".into_maybe_owned())\n+                                       .try(proc() {\n+            fail!(\"test\");\n+            3\n+        });\n+    assert!(r.is_ok());\n }"}, {"sha": "0b2901889cbf233e6d9e2975f6befe26224edf31", "filename": "src/test/run-fail/fail-task-name-static.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Ftest%2Frun-fail%2Ffail-task-name-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Ftest%2Frun-fail%2Ffail-task-name-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-task-name-static.rs?ref=de337f3ddfbef800a8cf731e0b593e341af1e3e5", "patch": "@@ -11,7 +11,9 @@\n // error-pattern:task 'static name' failed at 'test'\n \n fn main() {\n-    ::std::task::TaskBuilder::new().named(\"static name\").try(proc() {\n-        fail!(\"test\");\n-    }).unwrap()\n+    let r: Result<int,_> =\n+        ::std::task::TaskBuilder::new().named(\"static name\").try(proc() {\n+            fail!(\"test\");\n+        });\n+    assert!(r.is_ok());\n }"}, {"sha": "e7fd97f8d31f386deeef8e56a82c32995370d82a", "filename": "src/test/run-fail/task-spawn-barefn.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Ftest%2Frun-fail%2Ftask-spawn-barefn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Ftest%2Frun-fail%2Ftask-spawn-barefn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftask-spawn-barefn.rs?ref=de337f3ddfbef800a8cf731e0b593e341af1e3e5", "patch": "@@ -15,7 +15,10 @@ use std::task;\n fn main() {\n     // the purpose of this test is to make sure that task::spawn()\n     // works when provided with a bare function:\n-    task::try(startfn).unwrap();\n+    let r = task::try(startfn);\n+    if r.is_err() {\n+        fail!()\n+    }\n }\n \n fn startfn() {"}, {"sha": "e06e01b9e0512652fceadd0f95989b4c7d90dd96", "filename": "src/test/run-pass/trait-contravariant-self.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Ftest%2Frun-pass%2Ftrait-contravariant-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de337f3ddfbef800a8cf731e0b593e341af1e3e5/src%2Ftest%2Frun-pass%2Ftrait-contravariant-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-contravariant-self.rs?ref=de337f3ddfbef800a8cf731e0b593e341af1e3e5", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test\n+\n // Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}]}