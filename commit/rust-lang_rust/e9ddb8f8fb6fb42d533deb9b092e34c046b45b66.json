{"sha": "e9ddb8f8fb6fb42d533deb9b092e34c046b45b66", "node_id": "C_kwDOAAsO6NoAKGU5ZGRiOGY4ZmI2ZmI0MmQ1MzNkZWI5YjA5MmUzNGMwNDZiNDViNjY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-03-07T02:38:42Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-03-07T02:44:01Z"}, "message": "use impl substs in on_unimplemented", "tree": {"sha": "2ee27fb233a3e22d2c7fa1afd77a8572b3a70287", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ee27fb233a3e22d2c7fa1afd77a8572b3a70287"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9ddb8f8fb6fb42d533deb9b092e34c046b45b66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9ddb8f8fb6fb42d533deb9b092e34c046b45b66", "html_url": "https://github.com/rust-lang/rust/commit/e9ddb8f8fb6fb42d533deb9b092e34c046b45b66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9ddb8f8fb6fb42d533deb9b092e34c046b45b66/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38a0b81b1c32764d6a583a5efb6f306b8c44c503", "url": "https://api.github.com/repos/rust-lang/rust/commits/38a0b81b1c32764d6a583a5efb6f306b8c44c503", "html_url": "https://github.com/rust-lang/rust/commit/38a0b81b1c32764d6a583a5efb6f306b8c44c503"}], "stats": {"total": 84, "additions": 70, "deletions": 14}, "files": [{"sha": "8b0e7794f92ace6b3af4ba94c24d2f41e311cc40", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9ddb8f8fb6fb42d533deb9b092e34c046b45b66/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ddb8f8fb6fb42d533deb9b092e34c046b45b66/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=e9ddb8f8fb6fb42d533deb9b092e34c046b45b66", "patch": "@@ -977,7 +977,6 @@ impl<'tcx> TraitRef<'tcx> {\n         substs: SubstsRef<'tcx>,\n     ) -> ty::TraitRef<'tcx> {\n         let defs = tcx.generics_of(trait_id);\n-\n         ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }\n     }\n }"}, {"sha": "d05f62ea29e41ccba7186c45ede6fe8ef82b4971", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e9ddb8f8fb6fb42d533deb9b092e34c046b45b66/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ddb8f8fb6fb42d533deb9b092e34c046b45b66/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=e9ddb8f8fb6fb42d533deb9b092e34c046b45b66", "patch": "@@ -4,7 +4,7 @@ use super::{\n use crate::infer::InferCtxt;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::subst::Subst;\n+use rustc_middle::ty::subst::{Subst, SubstsRef};\n use rustc_middle::ty::{self, GenericParamDefKind};\n use rustc_span::symbol::sym;\n use std::iter;\n@@ -17,7 +17,7 @@ crate trait InferCtxtExt<'tcx> {\n         &self,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         obligation: &PredicateObligation<'tcx>,\n-    ) -> Option<DefId>;\n+    ) -> Option<(DefId, SubstsRef<'tcx>)>;\n \n     /*private*/\n     fn describe_enclosure(&self, hir_id: hir::HirId) -> Option<&'static str>;\n@@ -34,7 +34,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         &self,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         obligation: &PredicateObligation<'tcx>,\n-    ) -> Option<DefId> {\n+    ) -> Option<(DefId, SubstsRef<'tcx>)> {\n         let tcx = self.tcx;\n         let param_env = obligation.param_env;\n         let trait_ref = tcx.erase_late_bound_regions(trait_ref);\n@@ -50,28 +50,29 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             let impl_self_ty = impl_trait_ref.self_ty();\n \n             if let Ok(..) = self.can_eq(param_env, trait_self_ty, impl_self_ty) {\n-                self_match_impls.push(def_id);\n+                self_match_impls.push((def_id, impl_substs));\n \n                 if iter::zip(\n                     trait_ref.substs.types().skip(1),\n                     impl_trait_ref.substs.types().skip(1),\n                 )\n                 .all(|(u, v)| self.fuzzy_match_tys(u, v, false).is_some())\n                 {\n-                    fuzzy_match_impls.push(def_id);\n+                    fuzzy_match_impls.push((def_id, impl_substs));\n                 }\n             }\n         });\n \n-        let impl_def_id = if self_match_impls.len() == 1 {\n+        let impl_def_id_and_substs = if self_match_impls.len() == 1 {\n             self_match_impls[0]\n         } else if fuzzy_match_impls.len() == 1 {\n             fuzzy_match_impls[0]\n         } else {\n             return None;\n         };\n \n-        tcx.has_attr(impl_def_id, sym::rustc_on_unimplemented).then_some(impl_def_id)\n+        tcx.has_attr(impl_def_id_and_substs.0, sym::rustc_on_unimplemented)\n+            .then_some(impl_def_id_and_substs)\n     }\n \n     /// Used to set on_unimplemented's `ItemContext`\n@@ -120,8 +121,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         obligation: &PredicateObligation<'tcx>,\n     ) -> OnUnimplementedNote {\n-        let def_id =\n-            self.impl_similar_to(trait_ref, obligation).unwrap_or_else(|| trait_ref.def_id());\n+        let (def_id, substs) = self\n+            .impl_similar_to(trait_ref, obligation)\n+            .unwrap_or_else(|| (trait_ref.def_id(), trait_ref.skip_binder().substs));\n         let trait_ref = trait_ref.skip_binder();\n \n         let mut flags = vec![(\n@@ -176,15 +178,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             for param in generics.params.iter() {\n                 let value = match param.kind {\n                     GenericParamDefKind::Type { .. } | GenericParamDefKind::Const { .. } => {\n-                        trait_ref.substs[param.index as usize].to_string()\n+                        substs[param.index as usize].to_string()\n                     }\n                     GenericParamDefKind::Lifetime => continue,\n                 };\n                 let name = param.name;\n                 flags.push((name, Some(value)));\n \n                 if let GenericParamDefKind::Type { .. } = param.kind {\n-                    let param_ty = trait_ref.substs[param.index as usize].expect_ty();\n+                    let param_ty = substs[param.index as usize].expect_ty();\n                     if let Some(def) = param_ty.ty_adt_def() {\n                         // We also want to be able to select the parameter's\n                         // original signature with no type arguments resolved"}, {"sha": "0604aab3bcd2cfcda041008fa606bcc9dcff6c71", "filename": "src/test/ui/consts/issue-94675.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e9ddb8f8fb6fb42d533deb9b092e34c046b45b66/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ddb8f8fb6fb42d533deb9b092e34c046b45b66/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.rs?ref=e9ddb8f8fb6fb42d533deb9b092e34c046b45b66", "patch": "@@ -0,0 +1,16 @@\n+#![feature(const_trait_impl, const_mut_refs)]\n+\n+struct Foo<'a> {\n+    bar: &'a mut Vec<usize>,\n+}\n+\n+impl<'a> Foo<'a> {\n+    const fn spam(&mut self, baz: &mut Vec<u32>) {\n+        self.bar[0] = baz.len();\n+        //~^ ERROR cannot call non-const fn `Vec::<u32>::len` in constant functions\n+        //~| ERROR the trait bound `Vec<usize>: ~const IndexMut<usize>` is not satisfied\n+        //~| ERROR cannot call non-const operator in constant functions\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "6665e42835b7109d39b2eb30b1c8b449756f7faa", "filename": "src/test/ui/consts/issue-94675.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e9ddb8f8fb6fb42d533deb9b092e34c046b45b66/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9ddb8f8fb6fb42d533deb9b092e34c046b45b66/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-94675.stderr?ref=e9ddb8f8fb6fb42d533deb9b092e34c046b45b66", "patch": "@@ -0,0 +1,38 @@\n+error[E0015]: cannot call non-const fn `Vec::<u32>::len` in constant functions\n+  --> $DIR/issue-94675.rs:9:27\n+   |\n+LL |         self.bar[0] = baz.len();\n+   |                           ^^^^^\n+   |\n+   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+\n+error[E0277]: the trait bound `Vec<usize>: ~const IndexMut<usize>` is not satisfied\n+  --> $DIR/issue-94675.rs:9:9\n+   |\n+LL |         self.bar[0] = baz.len();\n+   |         ^^^^^^^^^^^ vector indices are of type `usize` or ranges of `usize`\n+   |\n+   = help: the trait `~const IndexMut<usize>` is not implemented for `Vec<usize>`\n+note: the trait `IndexMut<usize>` is implemented for `Vec<usize>`, but that implementation is not `const`\n+  --> $DIR/issue-94675.rs:9:9\n+   |\n+LL |         self.bar[0] = baz.len();\n+   |         ^^^^^^^^^^^\n+\n+error[E0015]: cannot call non-const operator in constant functions\n+  --> $DIR/issue-94675.rs:9:9\n+   |\n+LL |         self.bar[0] = baz.len();\n+   |         ^^^^^^^^^^^\n+   |\n+note: impl defined here, but it is not `const`\n+  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+   |\n+LL | impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0015, E0277.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "26e9e2c8f91cf67409f196878302ee80dfcfa51a", "filename": "src/test/ui/issues/issue-87707.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9ddb8f8fb6fb42d533deb9b092e34c046b45b66/src%2Ftest%2Fui%2Fissues%2Fissue-87707.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ddb8f8fb6fb42d533deb9b092e34c046b45b66/src%2Ftest%2Fui%2Fissues%2Fissue-87707.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-87707.rs?ref=e9ddb8f8fb6fb42d533deb9b092e34c046b45b66", "patch": "@@ -1,6 +1,7 @@\n // test for #87707\n // edition:2018\n // run-fail\n+// exec-env:RUST_BACKTRACE=0\n // check-run-results\n \n use std::sync::Once;"}, {"sha": "e6c9ea0eb53c39033cca72cfa11f927268799a73", "filename": "src/test/ui/issues/issue-87707.run.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ddb8f8fb6fb42d533deb9b092e34c046b45b66/src%2Ftest%2Fui%2Fissues%2Fissue-87707.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9ddb8f8fb6fb42d533deb9b092e34c046b45b66/src%2Ftest%2Fui%2Fissues%2Fissue-87707.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-87707.run.stderr?ref=e9ddb8f8fb6fb42d533deb9b092e34c046b45b66", "patch": "@@ -1,3 +1,3 @@\n-thread 'main' panicked at 'Here Once instance is poisoned.', $DIR/issue-87707.rs:12:24\n+thread 'main' panicked at 'Here Once instance is poisoned.', $DIR/issue-87707.rs:13:24\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n-thread 'main' panicked at 'Once instance has previously been poisoned', $DIR/issue-87707.rs:14:7\n+thread 'main' panicked at 'Once instance has previously been poisoned', $DIR/issue-87707.rs:15:7"}]}