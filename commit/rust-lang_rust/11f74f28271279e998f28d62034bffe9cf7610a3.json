{"sha": "11f74f28271279e998f28d62034bffe9cf7610a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZjc0ZjI4MjcxMjc5ZTk5OGYyOGQ2MjAzNGJmZmU5Y2Y3NjEwYTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-30T07:52:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-30T07:52:07Z"}, "message": "Merge #4653\n\n4653: Fix match ergonomics in closure parameters r=matklad a=flodiebold\n\nFixes #4476.\n\nCo-authored-by: Florian Diebold <florian.diebold@freiheit.com>", "tree": {"sha": "bb41fa611ad3ef43c9f25650576b412144dd779b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb41fa611ad3ef43c9f25650576b412144dd779b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11f74f28271279e998f28d62034bffe9cf7610a3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe0hCnCRBK7hj4Ov3rIwAAdHIIAJCJ0Kcjg2Na/esmt8LwsStp\nsX2dqUOV7eeKeqUAzsh1Sfmji6nrDJlwVERdQjd8+5N4HI/PNa3KJJtsXU58BhHO\nborM1bB84rLCoKBZLVLLyzaVo4wkLPw7XpqDBzlSQTBXECEdCHJtpwDE1A4R56R/\nRPMRDydQqlwNuszfTeltUG2kJjMytz/00qK1TFmODSmEsM0te+oP9w3DvlCrNEWi\nrL/+8af9pW1agy3FbzSDv2Whscqyxk29Mfq1N+EKdzAvAbQO+1ri6TX7FqDbP141\nDQTC7Gxfb7abEQAWzuoUb9uhCmCEm1+mc/bjtc23UmyhJPp2EXqNAPgC9iAXv4g=\n=A4ab\n-----END PGP SIGNATURE-----\n", "payload": "tree bb41fa611ad3ef43c9f25650576b412144dd779b\nparent 40bdd2e161e0e29805462fe3f2a8ea624e4a38d4\nparent 6f67a46a6a264ac7985a10ee19fbf9bbaef924bc\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1590825127 +0000\ncommitter GitHub <noreply@github.com> 1590825127 +0000\n\nMerge #4653\n\n4653: Fix match ergonomics in closure parameters r=matklad a=flodiebold\n\nFixes #4476.\n\nCo-authored-by: Florian Diebold <florian.diebold@freiheit.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11f74f28271279e998f28d62034bffe9cf7610a3", "html_url": "https://github.com/rust-lang/rust/commit/11f74f28271279e998f28d62034bffe9cf7610a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11f74f28271279e998f28d62034bffe9cf7610a3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40bdd2e161e0e29805462fe3f2a8ea624e4a38d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/40bdd2e161e0e29805462fe3f2a8ea624e4a38d4", "html_url": "https://github.com/rust-lang/rust/commit/40bdd2e161e0e29805462fe3f2a8ea624e4a38d4"}, {"sha": "6f67a46a6a264ac7985a10ee19fbf9bbaef924bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f67a46a6a264ac7985a10ee19fbf9bbaef924bc", "html_url": "https://github.com/rust-lang/rust/commit/6f67a46a6a264ac7985a10ee19fbf9bbaef924bc"}], "stats": {"total": 66, "additions": 61, "deletions": 5}, "files": [{"sha": "78084cb573cb844af10fe56b844573302a901b85", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/11f74f28271279e998f28d62034bffe9cf7610a3/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f74f28271279e998f28d62034bffe9cf7610a3/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=11f74f28271279e998f28d62034bffe9cf7610a3", "patch": "@@ -140,13 +140,13 @@ impl<'a> InferenceContext<'a> {\n \n                 let mut sig_tys = Vec::new();\n \n-                for (arg_pat, arg_type) in args.iter().zip(arg_types.iter()) {\n-                    let expected = if let Some(type_ref) = arg_type {\n+                // collect explicitly written argument types\n+                for arg_type in arg_types.iter() {\n+                    let arg_ty = if let Some(type_ref) = arg_type {\n                         self.make_ty(type_ref)\n                     } else {\n-                        Ty::Unknown\n+                        self.table.new_type_var()\n                     };\n-                    let arg_ty = self.infer_pat(*arg_pat, &expected, BindingMode::default());\n                     sig_tys.push(arg_ty);\n                 }\n \n@@ -158,7 +158,7 @@ impl<'a> InferenceContext<'a> {\n                 sig_tys.push(ret_ty.clone());\n                 let sig_ty = Ty::apply(\n                     TypeCtor::FnPtr { num_args: sig_tys.len() as u16 - 1 },\n-                    Substs(sig_tys.into()),\n+                    Substs(sig_tys.clone().into()),\n                 );\n                 let closure_ty =\n                     Ty::apply_one(TypeCtor::Closure { def: self.owner, expr: tgt_expr }, sig_ty);\n@@ -168,6 +168,12 @@ impl<'a> InferenceContext<'a> {\n                 // infer the body.\n                 self.coerce(&closure_ty, &expected.ty);\n \n+                // Now go through the argument patterns\n+                for (arg_pat, arg_ty) in args.iter().zip(sig_tys) {\n+                    let resolved = self.resolve_ty_as_possible(arg_ty);\n+                    self.infer_pat(*arg_pat, &resolved, BindingMode::default());\n+                }\n+\n                 let prev_diverges = mem::replace(&mut self.diverges, Diverges::Maybe);\n                 let prev_ret_ty = mem::replace(&mut self.return_ty, ret_ty.clone());\n "}, {"sha": "fe62587c0d7014595bb83b5f4dc9df81faecd7f3", "filename": "crates/ra_hir_ty/src/tests/patterns.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/11f74f28271279e998f28d62034bffe9cf7610a3/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f74f28271279e998f28d62034bffe9cf7610a3/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=11f74f28271279e998f28d62034bffe9cf7610a3", "patch": "@@ -520,3 +520,53 @@ fn main() {\n         105..107 '()': ()\n     \")\n }\n+\n+#[test]\n+fn match_ergonomics_in_closure_params() {\n+    assert_snapshot!(\n+        infer(r#\"\n+#[lang = \"fn_once\"]\n+trait FnOnce<Args> {\n+    type Output;\n+}\n+\n+fn foo<T, U, F: FnOnce(T) -> U>(t: T, f: F) -> U { loop {} }\n+\n+fn test() {\n+    foo(&(1, \"a\"), |&(x, y)| x); // normal, no match ergonomics\n+    foo(&(1, \"a\"), |(x, y)| x);\n+}\n+\"#),\n+        @r###\"\n+    94..95 't': T\n+    100..101 'f': F\n+    111..122 '{ loop {} }': U\n+    113..120 'loop {}': !\n+    118..120 '{}': ()\n+    134..233 '{     ... x); }': ()\n+    140..143 'foo': fn foo<&(i32, &str), i32, |&(i32, &str)| -> i32>(&(i32, &str), |&(i32, &str)| -> i32) -> i32\n+    140..167 'foo(&(...y)| x)': i32\n+    144..153 '&(1, \"a\")': &(i32, &str)\n+    145..153 '(1, \"a\")': (i32, &str)\n+    146..147 '1': i32\n+    149..152 '\"a\"': &str\n+    155..166 '|&(x, y)| x': |&(i32, &str)| -> i32\n+    156..163 '&(x, y)': &(i32, &str)\n+    157..163 '(x, y)': (i32, &str)\n+    158..159 'x': i32\n+    161..162 'y': &str\n+    165..166 'x': i32\n+    204..207 'foo': fn foo<&(i32, &str), &i32, |&(i32, &str)| -> &i32>(&(i32, &str), |&(i32, &str)| -> &i32) -> &i32\n+    204..230 'foo(&(...y)| x)': &i32\n+    208..217 '&(1, \"a\")': &(i32, &str)\n+    209..217 '(1, \"a\")': (i32, &str)\n+    210..211 '1': i32\n+    213..216 '\"a\"': &str\n+    219..229 '|(x, y)| x': |&(i32, &str)| -> &i32\n+    220..226 '(x, y)': (i32, &str)\n+    221..222 'x': &i32\n+    224..225 'y': &&str\n+    228..229 'x': &i32\n+    \"###\n+    );\n+}"}]}