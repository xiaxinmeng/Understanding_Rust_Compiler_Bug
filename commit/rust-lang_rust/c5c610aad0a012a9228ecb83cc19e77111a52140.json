{"sha": "c5c610aad0a012a9228ecb83cc19e77111a52140", "node_id": "C_kwDOAAsO6NoAKGM1YzYxMGFhZDBhMDEyYTkyMjhlY2I4M2NjMTllNzcxMTFhNTIxNDA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-14T18:28:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-14T18:28:04Z"}, "message": "Auto merge of #93652 - spastorino:fix-negative-overlap-check-regions, r=nikomatsakis\n\nFix negative overlap check regions\n\nr? `@nikomatsakis`", "tree": {"sha": "2e850b967ae757a87ec68bed6b9f57a1693f6041", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e850b967ae757a87ec68bed6b9f57a1693f6041"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5c610aad0a012a9228ecb83cc19e77111a52140", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5c610aad0a012a9228ecb83cc19e77111a52140", "html_url": "https://github.com/rust-lang/rust/commit/c5c610aad0a012a9228ecb83cc19e77111a52140", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5c610aad0a012a9228ecb83cc19e77111a52140/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52dd59ed2154f4158ae37e6994b678a6249a7bb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/52dd59ed2154f4158ae37e6994b678a6249a7bb0", "html_url": "https://github.com/rust-lang/rust/commit/52dd59ed2154f4158ae37e6994b678a6249a7bb0"}, {"sha": "3c7fa0bcf36ff5c6e7c2f0096513e300ee4dc20e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c7fa0bcf36ff5c6e7c2f0096513e300ee4dc20e", "html_url": "https://github.com/rust-lang/rust/commit/3c7fa0bcf36ff5c6e7c2f0096513e300ee4dc20e"}], "stats": {"total": 167, "additions": 134, "deletions": 33}, "files": [{"sha": "8a50179cd3b642144113181bfe7d72ea8aad4cec", "filename": "compiler/rustc_data_structures/src/snapshot_map/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c610aad0a012a9228ecb83cc19e77111a52140/compiler%2Frustc_data_structures%2Fsrc%2Fsnapshot_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c610aad0a012a9228ecb83cc19e77111a52140/compiler%2Frustc_data_structures%2Fsrc%2Fsnapshot_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsnapshot_map%2Fmod.rs?ref=c5c610aad0a012a9228ecb83cc19e77111a52140", "patch": "@@ -13,6 +13,7 @@ mod tests;\n pub type SnapshotMapStorage<K, V> = SnapshotMap<K, V, FxHashMap<K, V>, ()>;\n pub type SnapshotMapRef<'a, K, V, L> = SnapshotMap<K, V, &'a mut FxHashMap<K, V>, &'a mut L>;\n \n+#[derive(Clone)]\n pub struct SnapshotMap<K, V, M = FxHashMap<K, V>, L = VecLog<UndoLog<K, V>>> {\n     map: M,\n     undo_log: L,\n@@ -30,6 +31,7 @@ where\n     }\n }\n \n+#[derive(Clone)]\n pub enum UndoLog<K, V> {\n     Inserted(K),\n     Overwrite(K, V),"}, {"sha": "77e72b042523ca813789ea65075a652aa26a558f", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c5c610aad0a012a9228ecb83cc19e77111a52140/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c610aad0a012a9228ecb83cc19e77111a52140/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=c5c610aad0a012a9228ecb83cc19e77111a52140", "patch": "@@ -51,6 +51,28 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     ) -> At<'a, 'tcx> {\n         At { infcx: self, cause, param_env }\n     }\n+\n+    /// Forks the inference context, creating a new inference context with the same inference\n+    /// variables in the same state. This can be used to \"branch off\" many tests from the same\n+    /// common state. Used in coherence.\n+    pub fn fork(&self) -> Self {\n+        Self {\n+            tcx: self.tcx.clone(),\n+            defining_use_anchor: self.defining_use_anchor.clone(),\n+            in_progress_typeck_results: self.in_progress_typeck_results.clone(),\n+            inner: self.inner.clone(),\n+            skip_leak_check: self.skip_leak_check.clone(),\n+            lexical_region_resolutions: self.lexical_region_resolutions.clone(),\n+            selection_cache: self.selection_cache.clone(),\n+            evaluation_cache: self.evaluation_cache.clone(),\n+            reported_trait_errors: self.reported_trait_errors.clone(),\n+            reported_closure_mismatch: self.reported_closure_mismatch.clone(),\n+            tainted_by_errors_flag: self.tainted_by_errors_flag.clone(),\n+            err_count_on_creation: self.err_count_on_creation,\n+            in_snapshot: self.in_snapshot.clone(),\n+            universe: self.universe.clone(),\n+        }\n+    }\n }\n \n pub trait ToTrace<'tcx>: Relate<'tcx> + Copy {"}, {"sha": "f5e61d28ac5e5a775d725ac463c665feb2132a79", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5c610aad0a012a9228ecb83cc19e77111a52140/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c610aad0a012a9228ecb83cc19e77111a52140/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=c5c610aad0a012a9228ecb83cc19e77111a52140", "patch": "@@ -61,6 +61,7 @@ pub(crate) fn resolve<'tcx>(\n \n /// Contains the result of lexical region resolution. Offers methods\n /// to lookup up the final value of a region variable.\n+#[derive(Clone)]\n pub struct LexicalRegionResolutions<'tcx> {\n     values: IndexVec<RegionVid, VarValue<'tcx>>,\n     error_region: ty::Region<'tcx>,"}, {"sha": "be38ace3bd2b851de8bf69257f667dab2f0edeaf", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5c610aad0a012a9228ecb83cc19e77111a52140/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c610aad0a012a9228ecb83cc19e77111a52140/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=c5c610aad0a012a9228ecb83cc19e77111a52140", "patch": "@@ -130,6 +130,7 @@ impl RegionckMode {\n /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot\n /// operations are hot enough that we want only one call to `borrow_mut` per\n /// call to `start_snapshot` and `rollback_to`.\n+#[derive(Clone)]\n pub struct InferCtxtInner<'tcx> {\n     /// Cache for projections. This cache is snapshotted along with the infcx.\n     ///"}, {"sha": "078575b537708c344a382f51f1ed8d6309482bc5", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c610aad0a012a9228ecb83cc19e77111a52140/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c610aad0a012a9228ecb83cc19e77111a52140/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=c5c610aad0a012a9228ecb83cc19e77111a52140", "patch": "@@ -28,7 +28,7 @@ mod leak_check;\n \n pub use rustc_middle::infer::MemberConstraint;\n \n-#[derive(Default)]\n+#[derive(Clone, Default)]\n pub struct RegionConstraintStorage<'tcx> {\n     /// For each `RegionVid`, the corresponding `RegionVariableOrigin`.\n     var_infos: IndexVec<RegionVid, RegionVariableInfo>,"}, {"sha": "d320728a43f95c62ba7dbbb71dee418cbda7ed30", "filename": "compiler/rustc_infer/src/infer/type_variable.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c610aad0a012a9228ecb83cc19e77111a52140/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c610aad0a012a9228ecb83cc19e77111a52140/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs?ref=c5c610aad0a012a9228ecb83cc19e77111a52140", "patch": "@@ -14,6 +14,7 @@ use std::ops::Range;\n use rustc_data_structures::undo_log::{Rollback, UndoLogs};\n \n /// Represents a single undo-able action that affects a type inference variable.\n+#[derive(Clone)]\n pub(crate) enum UndoLog<'tcx> {\n     EqRelation(sv::UndoLog<ut::Delegate<TyVidEqKey<'tcx>>>),\n     SubRelation(sv::UndoLog<ut::Delegate<ty::TyVid>>),\n@@ -58,6 +59,7 @@ impl<'tcx> Rollback<UndoLog<'tcx>> for TypeVariableStorage<'tcx> {\n     }\n }\n \n+#[derive(Clone)]\n pub struct TypeVariableStorage<'tcx> {\n     values: sv::SnapshotVecStorage<Delegate>,\n \n@@ -137,6 +139,7 @@ pub enum TypeVariableOriginKind {\n     LatticeVariable,\n }\n \n+#[derive(Clone)]\n pub(crate) struct TypeVariableData {\n     origin: TypeVariableOrigin,\n }\n@@ -165,6 +168,7 @@ impl<'tcx> TypeVariableValue<'tcx> {\n     }\n }\n \n+#[derive(Clone)]\n pub(crate) struct Instantiate;\n \n pub(crate) struct Delegate;"}, {"sha": "ecd886b547834f3b86a7966c63fb8772f56fd2d4", "filename": "compiler/rustc_infer/src/infer/undo_log.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c610aad0a012a9228ecb83cc19e77111a52140/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c610aad0a012a9228ecb83cc19e77111a52140/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs?ref=c5c610aad0a012a9228ecb83cc19e77111a52140", "patch": "@@ -17,6 +17,7 @@ pub struct Snapshot<'tcx> {\n }\n \n /// Records the \"undo\" data for a single operation that affects some form of inference variable.\n+#[derive(Clone)]\n pub(crate) enum UndoLog<'tcx> {\n     TypeVariables(type_variable::UndoLog<'tcx>),\n     ConstUnificationTable(sv::UndoLog<ut::Delegate<ty::ConstVid<'tcx>>>),\n@@ -84,6 +85,7 @@ impl<'tcx> Rollback<UndoLog<'tcx>> for InferCtxtInner<'tcx> {\n \n /// The combined undo log for all the various unification tables. For each change to the storage\n /// for any kind of inference variable, we record an UndoLog entry in the vector here.\n+#[derive(Clone)]\n pub(crate) struct InferCtxtUndoLogs<'tcx> {\n     logs: Vec<UndoLog<'tcx>>,\n     num_open_snapshots: usize,"}, {"sha": "b84ed3dc689376c830a32a9e4064ab153a8d16e9", "filename": "compiler/rustc_infer/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c610aad0a012a9228ecb83cc19e77111a52140/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c610aad0a012a9228ecb83cc19e77111a52140/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs?ref=c5c610aad0a012a9228ecb83cc19e77111a52140", "patch": "@@ -70,7 +70,7 @@ pub struct ProjectionCache<'a, 'tcx> {\n     undo_log: &'a mut InferCtxtUndoLogs<'tcx>,\n }\n \n-#[derive(Default)]\n+#[derive(Clone, Default)]\n pub struct ProjectionCacheStorage<'tcx> {\n     map: SnapshotMapStorage<ProjectionCacheKey<'tcx>, ProjectionCacheEntry<'tcx>>,\n }"}, {"sha": "82438feb39759acb467f0ef8be50a04870773169", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 52, "deletions": 25, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/c5c610aad0a012a9228ecb83cc19e77111a52140/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c610aad0a012a9228ecb83cc19e77111a52140/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=c5c610aad0a012a9228ecb83cc19e77111a52140", "patch": "@@ -4,16 +4,20 @@\n //! [trait-resolution]: https://rustc-dev-guide.rust-lang.org/traits/resolution.html\n //! [trait-specialization]: https://rustc-dev-guide.rust-lang.org/traits/specialization.html\n \n-use crate::infer::{CombinedSnapshot, InferOk, TyCtxtInferExt};\n-use crate::traits::query::evaluate_obligation::InferCtxtExt;\n+use crate::infer::outlives::env::OutlivesEnvironment;\n+use crate::infer::{CombinedSnapshot, InferOk, RegionckMode};\n use crate::traits::select::IntercrateAmbiguityCause;\n use crate::traits::util::impl_trait_ref_and_oblig;\n use crate::traits::SkipLeakCheck;\n use crate::traits::{\n     self, FulfillmentContext, Normalized, Obligation, ObligationCause, PredicateObligation,\n     PredicateObligations, SelectionContext,\n };\n+//use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::CRATE_HIR_ID;\n+use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_infer::traits::TraitEngine;\n use rustc_middle::traits::specialization_graph::OverlapMode;\n use rustc_middle::ty::fast_reject::{self, SimplifyParams};\n use rustc_middle::ty::fold::TypeFoldable;\n@@ -150,7 +154,10 @@ fn overlap<'cx, 'tcx>(\n     impl2_def_id: DefId,\n     overlap_mode: OverlapMode,\n ) -> Option<OverlapResult<'tcx>> {\n-    debug!(\"overlap(impl1_def_id={:?}, impl2_def_id={:?})\", impl1_def_id, impl2_def_id);\n+    debug!(\n+        \"overlap(impl1_def_id={:?}, impl2_def_id={:?}, overlap_mode={:?})\",\n+        impl1_def_id, impl2_def_id, overlap_mode\n+    );\n \n     selcx.infcx().probe_maybe_skip_leak_check(skip_leak_check.is_yes(), |snapshot| {\n         overlap_within_probe(\n@@ -191,9 +198,6 @@ fn overlap_within_probe<'cx, 'tcx>(\n     let impl1_header = with_fresh_ty_vars(selcx, param_env, impl1_def_id);\n     let impl2_header = with_fresh_ty_vars(selcx, param_env, impl2_def_id);\n \n-    debug!(\"overlap: impl1_header={:?}\", impl1_header);\n-    debug!(\"overlap: impl2_header={:?}\", impl2_header);\n-\n     let obligations = equate_impl_headers(selcx, &impl1_header, &impl2_header)?;\n     debug!(\"overlap: unification check succeeded\");\n \n@@ -226,6 +230,7 @@ fn equate_impl_headers<'cx, 'tcx>(\n     impl2_header: &ty::ImplHeader<'tcx>,\n ) -> Option<PredicateObligations<'tcx>> {\n     // Do `a` and `b` unify? If not, no overlap.\n+    debug!(\"equate_impl_headers(impl1_header={:?}, impl2_header={:?}\", impl1_header, impl2_header);\n     selcx\n         .infcx()\n         .at(&ObligationCause::dummy(), ty::ParamEnv::empty())\n@@ -264,8 +269,11 @@ fn implicit_negative<'cx, 'tcx>(\n     // If the obligation `&'?a str: Error` holds, it means that there's overlap. If that doesn't\n     // hold we need to check if `&'?a str: !Error` holds, if doesn't hold there's overlap because\n     // at some point an impl for `&'?a str: Error` could be added.\n+    debug!(\n+        \"implicit_negative(impl1_header={:?}, impl2_header={:?}, obligations={:?})\",\n+        impl1_header, impl2_header, obligations\n+    );\n     let infcx = selcx.infcx();\n-    let tcx = infcx.tcx;\n     let opt_failing_obligation = impl1_header\n         .predicates\n         .iter()\n@@ -279,12 +287,7 @@ fn implicit_negative<'cx, 'tcx>(\n             predicate: p,\n         })\n         .chain(obligations)\n-        .find(|o| {\n-            loose_check(selcx, o) || tcx.features().negative_impls && negative_impl_exists(selcx, o)\n-        });\n-    // FIXME: the call to `selcx.predicate_may_hold_fatal` above should be ported\n-    // to the canonical trait query form, `infcx.predicate_may_hold`, once\n-    // the new system supports intercrate mode (which coherence needs).\n+        .find(|o| !selcx.predicate_may_hold_fatal(o));\n \n     if let Some(failing_obligation) = opt_failing_obligation {\n         debug!(\"overlap: obligation unsatisfiable {:?}\", failing_obligation);\n@@ -301,6 +304,7 @@ fn negative_impl<'cx, 'tcx>(\n     impl1_def_id: DefId,\n     impl2_def_id: DefId,\n ) -> bool {\n+    debug!(\"negative_impl(impl1_def_id={:?}, impl2_def_id={:?})\", impl1_def_id, impl2_def_id);\n     let tcx = selcx.infcx().tcx;\n \n     // create a parameter environment corresponding to a (placeholder) instantiation of impl1\n@@ -348,7 +352,7 @@ fn negative_impl<'cx, 'tcx>(\n         let opt_failing_obligation = obligations\n             .into_iter()\n             .chain(more_obligations)\n-            .find(|o| negative_impl_exists(selcx, o));\n+            .find(|o| negative_impl_exists(selcx, impl1_env, impl1_def_id, o));\n \n         if let Some(failing_obligation) = opt_failing_obligation {\n             debug!(\"overlap: obligation unsatisfiable {:?}\", failing_obligation);\n@@ -359,24 +363,47 @@ fn negative_impl<'cx, 'tcx>(\n     })\n }\n \n-fn loose_check<'cx, 'tcx>(\n-    selcx: &mut SelectionContext<'cx, 'tcx>,\n-    o: &PredicateObligation<'tcx>,\n-) -> bool {\n-    !selcx.predicate_may_hold_fatal(o)\n-}\n-\n fn negative_impl_exists<'cx, 'tcx>(\n     selcx: &SelectionContext<'cx, 'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    region_context: DefId,\n     o: &PredicateObligation<'tcx>,\n ) -> bool {\n-    let infcx = selcx.infcx();\n+    let infcx = &selcx.infcx().fork();\n     let tcx = infcx.tcx;\n     o.flip_polarity(tcx)\n-        .as_ref()\n         .map(|o| {\n-            // FIXME This isn't quite correct, regions should be included\n-            selcx.infcx().predicate_must_hold_modulo_regions(o)\n+            let mut fulfillment_cx = FulfillmentContext::new();\n+            fulfillment_cx.register_predicate_obligation(infcx, o);\n+\n+            let errors = fulfillment_cx.select_all_or_error(infcx);\n+            if !errors.is_empty() {\n+                return false;\n+            }\n+\n+            let mut outlives_env = OutlivesEnvironment::new(param_env);\n+            // FIXME -- add \"assumed to be well formed\" types into the `outlives_env`\n+\n+            // \"Save\" the accumulated implied bounds into the outlives environment\n+            // (due to the FIXME above, there aren't any, but this step is still needed).\n+            // The \"body id\" is given as `CRATE_HIR_ID`, which is the same body-id used\n+            // by the \"dummy\" causes elsewhere (body-id is only relevant when checking\n+            // function bodies with closures).\n+            outlives_env.save_implied_bounds(CRATE_HIR_ID);\n+\n+            infcx.process_registered_region_obligations(\n+                outlives_env.region_bound_pairs_map(),\n+                Some(tcx.lifetimes.re_root_empty),\n+                param_env,\n+            );\n+\n+            let errors =\n+                infcx.resolve_regions(region_context, &outlives_env, RegionckMode::default());\n+            if !errors.is_empty() {\n+                return false;\n+            }\n+\n+            true\n         })\n         .unwrap_or(false)\n }"}, {"sha": "19ff9ae62fdc644002133c17e90d1d146572765e", "filename": "src/test/ui/coherence/auxiliary/error_lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5c610aad0a012a9228ecb83cc19e77111a52140/src%2Ftest%2Fui%2Fcoherence%2Fauxiliary%2Ferror_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c610aad0a012a9228ecb83cc19e77111a52140/src%2Ftest%2Fui%2Fcoherence%2Fauxiliary%2Ferror_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fauxiliary%2Ferror_lib.rs?ref=c5c610aad0a012a9228ecb83cc19e77111a52140", "patch": "@@ -1,5 +1,6 @@\n #![crate_type = \"lib\"]\n #![feature(negative_impls)]\n+#![feature(with_negative_coherence)]\n \n pub trait Error {}\n impl !Error for &str {}"}, {"sha": "159788b1b77f7ffe9b0de0d918e48219ebc1e8df", "filename": "src/test/ui/coherence/coherence-negative-outlives-lifetimes.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5c610aad0a012a9228ecb83cc19e77111a52140/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-outlives-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c610aad0a012a9228ecb83cc19e77111a52140/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-outlives-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-outlives-lifetimes.rs?ref=c5c610aad0a012a9228ecb83cc19e77111a52140", "patch": "@@ -0,0 +1,12 @@\n+#![feature(negative_impls)]\n+\n+// FIXME: this should compile\n+\n+trait MyPredicate<'a> {}\n+impl<'a, T> !MyPredicate<'a> for &T where T: 'a {}\n+trait MyTrait<'a> {}\n+impl<'a, T: MyPredicate<'a>> MyTrait<'a> for T {}\n+impl<'a, T> MyTrait<'a> for &'a T {}\n+//~^ ERROR: conflicting implementations of trait `MyTrait<'_>` for type `&_`\n+\n+fn main() {}"}, {"sha": "263bd19b4249e3a1283cea05cdf8ee06d7ed7693", "filename": "src/test/ui/coherence/coherence-negative-outlives-lifetimes.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c5c610aad0a012a9228ecb83cc19e77111a52140/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-outlives-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5c610aad0a012a9228ecb83cc19e77111a52140/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-outlives-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-outlives-lifetimes.stderr?ref=c5c610aad0a012a9228ecb83cc19e77111a52140", "patch": "@@ -0,0 +1,11 @@\n+error[E0119]: conflicting implementations of trait `MyTrait<'_>` for type `&_`\n+  --> $DIR/coherence-negative-outlives-lifetimes.rs:9:1\n+   |\n+LL | impl<'a, T: MyPredicate<'a>> MyTrait<'a> for T {}\n+   | ---------------------------------------------- first implementation here\n+LL | impl<'a, T> MyTrait<'a> for &'a T {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `&_`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "a0dd881d1aaad7455fa266dd44f0a47149949c66", "filename": "src/test/ui/coherence/coherence-overlap-negate-use-feature-gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c610aad0a012a9228ecb83cc19e77111a52140/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-negate-use-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c610aad0a012a9228ecb83cc19e77111a52140/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-negate-use-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-negate-use-feature-gate.rs?ref=c5c610aad0a012a9228ecb83cc19e77111a52140", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(negative_impls)]\n+#![feature(with_negative_coherence)]\n \n use std::ops::DerefMut;\n "}, {"sha": "8059d23ffd215f9b4df5a09900fb003ed893bf40", "filename": "src/test/ui/coherence/coherence-overlap-negative-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c610aad0a012a9228ecb83cc19e77111a52140/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-negative-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c610aad0a012a9228ecb83cc19e77111a52140/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-negative-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-negative-trait.rs?ref=c5c610aad0a012a9228ecb83cc19e77111a52140", "patch": "@@ -3,7 +3,7 @@\n //\n // Check that if we promise to not impl what would overlap it doesn't actually overlap\n \n-#![feature(negative_impls)]\n+#![feature(with_negative_coherence)]\n \n extern crate error_lib as lib;\n use lib::Error;"}, {"sha": "32f01f41801030c0197fca80cabec140488c246f", "filename": "src/test/ui/coherence/coherence-overlap-with-regions.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c5c610aad0a012a9228ecb83cc19e77111a52140/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-with-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c610aad0a012a9228ecb83cc19e77111a52140/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-with-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-with-regions.rs?ref=c5c610aad0a012a9228ecb83cc19e77111a52140", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+#![feature(negative_impls)]\n+#![feature(rustc_attrs)]\n+#![feature(with_negative_coherence)]\n+\n+#[rustc_strict_coherence]\n+trait Foo {}\n+impl<T> !Foo for &T where T: 'static {}\n+\n+#[rustc_strict_coherence]\n+trait Bar {}\n+impl<T: Foo> Bar for T {}\n+impl<T> Bar for &T where T: 'static {}\n+\n+fn main() {}"}, {"sha": "0e17f089048f72b23cd4c75e2c24fe6b1426f5a9", "filename": "src/test/ui/traits/negative-impls/auxiliary/foreign_trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5c610aad0a012a9228ecb83cc19e77111a52140/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fauxiliary%2Fforeign_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c610aad0a012a9228ecb83cc19e77111a52140/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fauxiliary%2Fforeign_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fauxiliary%2Fforeign_trait.rs?ref=c5c610aad0a012a9228ecb83cc19e77111a52140", "patch": "@@ -1,4 +1,5 @@\n #![feature(negative_impls)]\n+#![feature(with_negative_coherence)]\n \n pub trait ForeignTrait {}\n "}, {"sha": "c1f96ab8c149e37b0072d58504014761a5f4be24", "filename": "src/test/ui/traits/negative-impls/rely-on-negative-impl-in-coherence.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c5c610aad0a012a9228ecb83cc19e77111a52140/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Frely-on-negative-impl-in-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c610aad0a012a9228ecb83cc19e77111a52140/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Frely-on-negative-impl-in-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Frely-on-negative-impl-in-coherence.rs?ref=c5c610aad0a012a9228ecb83cc19e77111a52140", "patch": "@@ -1,6 +1,7 @@\n // check-pass\n \n #![feature(negative_impls)]\n+#![feature(with_negative_coherence)]\n \n // aux-build: foreign_trait.rs\n \n@@ -16,8 +17,8 @@\n extern crate foreign_trait;\n use foreign_trait::ForeignTrait;\n \n-trait LocalTrait { }\n-impl<T: ForeignTrait> LocalTrait for T { }\n-impl LocalTrait for String { }\n+trait LocalTrait {}\n+impl<T: ForeignTrait> LocalTrait for T {}\n+impl LocalTrait for String {}\n \n-fn main() { }\n+fn main() {}"}]}