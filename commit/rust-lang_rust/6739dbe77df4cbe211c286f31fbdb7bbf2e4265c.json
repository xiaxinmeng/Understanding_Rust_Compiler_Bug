{"sha": "6739dbe77df4cbe211c286f31fbdb7bbf2e4265c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MzlkYmU3N2RmNGNiZTIxMWMyODZmMzFmYmRiN2JiZjJlNDI2NWM=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-10-25T00:39:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-25T00:39:40Z"}, "message": "Merge pull request #3129 from otavio/issue-3104\n\ncargo-fmt: detect Rust edition in use", "tree": {"sha": "e0d3595dd22c14172bdceb73f9bc7597db516ab2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0d3595dd22c14172bdceb73f9bc7597db516ab2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6739dbe77df4cbe211c286f31fbdb7bbf2e4265c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb0RDMCRBK7hj4Ov3rIwAAdHIIACWttYrYrgCWYK1L0JH4uoIi\nCG0cRFPaXOMYK2r8s9sFNWQmf2vo3rI5YpeJNu54riiJcWMM/OpgHWXxroV6GUiU\nT28hsNGKbTAN2u1U0OJ6jipo/U1Kt/ft88kIOJu+M5Oai07NQgWUTyotioo6wG6u\n1Y2RL5OwhCu/TkasJgNzviWKWOMOcn4JoxbCnclCOquj9d53fRhf6B5HYauey4RC\nmyrbefis1FmidT0McLLjpSq5bDbGUue+Ozn6du0d/9Wi8/Tw6M1hHS2h5wedwfCB\n+C4OnS/PTHI3jusP4hvWglY0+B9QqSTVMH5RulY/4wQ3OrNSIW8KqtG45Hemfy0=\n=KnRo\n-----END PGP SIGNATURE-----\n", "payload": "tree e0d3595dd22c14172bdceb73f9bc7597db516ab2\nparent fbeabe9547954195a65077a54d41956257086ffb\nparent de0b661bfa7646b1c871b3b10de2672cd911e6d0\nauthor Nick Cameron <nrc@ncameron.org> 1540427980 +1300\ncommitter GitHub <noreply@github.com> 1540427980 +1300\n\nMerge pull request #3129 from otavio/issue-3104\n\ncargo-fmt: detect Rust edition in use"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6739dbe77df4cbe211c286f31fbdb7bbf2e4265c", "html_url": "https://github.com/rust-lang/rust/commit/6739dbe77df4cbe211c286f31fbdb7bbf2e4265c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6739dbe77df4cbe211c286f31fbdb7bbf2e4265c/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbeabe9547954195a65077a54d41956257086ffb", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbeabe9547954195a65077a54d41956257086ffb", "html_url": "https://github.com/rust-lang/rust/commit/fbeabe9547954195a65077a54d41956257086ffb"}, {"sha": "de0b661bfa7646b1c871b3b10de2672cd911e6d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/de0b661bfa7646b1c871b3b10de2672cd911e6d0", "html_url": "https://github.com/rust-lang/rust/commit/de0b661bfa7646b1c871b3b10de2672cd911e6d0"}], "stats": {"total": 150, "additions": 83, "deletions": 67}, "files": [{"sha": "a56ecda121403cc0cbdb9a18e2fe2cf9289432ea", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6739dbe77df4cbe211c286f31fbdb7bbf2e4265c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6739dbe77df4cbe211c286f31fbdb7bbf2e4265c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6739dbe77df4cbe211c286f31fbdb7bbf2e4265c", "patch": "@@ -78,7 +78,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"cargo_metadata\"\n-version = \"0.6.0\"\n+version = \"0.6.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"error-chain 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -607,7 +607,7 @@ dependencies = [\n  \"assert_cli 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bytecount 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cargo_metadata 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cargo_metadata 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"derive-new 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.5.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -864,7 +864,7 @@ dependencies = [\n \"checksum bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"228047a76f468627ca71776ecdebd732a3423081fcf5125585bcd7c49886ce12\"\n \"checksum bytecount 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f861d9ce359f56dbcb6e0c2a1cb84e52ad732cadb57b806adeb3c7668caccbd8\"\n \"checksum byteorder 1.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90492c5858dd7d2e78691cfb89f90d273a2800fc11d98f60786e5d87e2f83781\"\n-\"checksum cargo_metadata 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d6809b327f87369e6f3651efd2c5a96c49847a3ed2559477ecba79014751ee1\"\n+\"checksum cargo_metadata 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1aaa1a9856ae2d188340526d0986feb6899c9ad11c5dfd73453c784fed6e373d\"\n \"checksum cc 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f159dfd43363c4d08055a07703eb7a3406b0dac4d0584d96965a3262db3c9d16\"\n \"checksum cfg-if 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0c4e7bb64a8ebb0d856483e1e682ea3422f883c5f5615a90d51a2c82fe87fdd3\"\n \"checksum cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\""}, {"sha": "204efa19541c5e5ec3cf6fb344791addc7075458", "filename": "src/bin/main.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6739dbe77df4cbe211c286f31fbdb7bbf2e4265c/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6739dbe77df4cbe211c286f31fbdb7bbf2e4265c/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=6739dbe77df4cbe211c286f31fbdb7bbf2e4265c", "patch": "@@ -25,8 +25,8 @@ use failure::err_msg;\n use getopts::{Matches, Options};\n \n use rustfmt::{\n-    load_config, CliOptions, Color, Config, EmitMode, ErrorKind, FileLines, FileName, Input,\n-    Session, Verbosity,\n+    load_config, CliOptions, Color, Config, Edition, EmitMode, ErrorKind, FileLines, FileName,\n+    Input, Session, Verbosity,\n };\n \n fn main() {\n@@ -102,6 +102,7 @@ fn make_opts() -> Options {\n          found reverts to the input file path\",\n         \"[Path for the configuration file]\",\n     );\n+    opts.optopt(\"\", \"edition\", \"Rust edition to use\", \"[2015|2018]\");\n     opts.optopt(\n         \"\",\n         \"color\",\n@@ -437,6 +438,7 @@ struct GetOptsOptions {\n     emit_mode: EmitMode,\n     backup: bool,\n     check: bool,\n+    edition: Edition,\n     color: Option<Color>,\n     file_lines: FileLines, // Default is all lines in all files.\n     unstable_features: bool,\n@@ -496,11 +498,12 @@ impl GetOptsOptions {\n             if options.check {\n                 return Err(format_err!(\"Invalid to use `--emit` and `--check`\"));\n             }\n-            if let Ok(emit_mode) = emit_mode_from_emit_str(emit_str) {\n-                options.emit_mode = emit_mode;\n-            } else {\n-                return Err(format_err!(\"Invalid value for `--emit`\"));\n-            }\n+\n+            options.emit_mode = emit_mode_from_emit_str(emit_str)?;\n+        }\n+\n+        if let Some(ref edition_str) = matches.opt_str(\"edition\") {\n+            options.edition = edition_from_edition_str(edition_str)?;\n         }\n \n         if matches.opt_present(\"backup\") {\n@@ -556,6 +559,7 @@ impl CliOptions for GetOptsOptions {\n         if let Some(error_on_unformatted) = self.error_on_unformatted {\n             config.set().error_on_unformatted(error_on_unformatted);\n         }\n+        config.set().edition(self.edition);\n         if self.check {\n             config.set().emit_mode(EmitMode::Diff);\n         } else {\n@@ -574,6 +578,14 @@ impl CliOptions for GetOptsOptions {\n     }\n }\n \n+fn edition_from_edition_str(edition_str: &str) -> Result<Edition, failure::Error> {\n+    match edition_str {\n+        \"2015\" => Ok(Edition::Edition2015),\n+        \"2018\" => Ok(Edition::Edition2018),\n+        _ => Err(format_err!(\"Invalid value for `--edition`\")),\n+    }\n+}\n+\n fn emit_mode_from_emit_str(emit_str: &str) -> Result<EmitMode, failure::Error> {\n     match emit_str {\n         \"files\" => Ok(EmitMode::Files),"}, {"sha": "45d00251828606fda6fad66ab242359521960b2e", "filename": "src/cargo-fmt/main.rs", "status": "modified", "additions": 53, "deletions": 55, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/6739dbe77df4cbe211c286f31fbdb7bbf2e4265c/src%2Fcargo-fmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6739dbe77df4cbe211c286f31fbdb7bbf2e4265c/src%2Fcargo-fmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo-fmt%2Fmain.rs?ref=6739dbe77df4cbe211c286f31fbdb7bbf2e4265c", "patch": "@@ -17,14 +17,14 @@ extern crate cargo_metadata;\n extern crate getopts;\n extern crate serde_json as json;\n \n-use std::collections::HashSet;\n+use std::collections::{HashMap, HashSet};\n use std::env;\n use std::fs;\n use std::hash::{Hash, Hasher};\n use std::io::{self, Write};\n use std::iter::FromIterator;\n use std::path::{Path, PathBuf};\n-use std::process::{Command, ExitStatus};\n+use std::process::Command;\n use std::str;\n \n use getopts::{Matches, Options};\n@@ -122,30 +122,21 @@ pub enum Verbosity {\n     Quiet,\n }\n \n-fn handle_command_status(status: Result<ExitStatus, io::Error>, opts: &getopts::Options) -> i32 {\n+fn handle_command_status(status: Result<i32, io::Error>, opts: &getopts::Options) -> i32 {\n     match status {\n         Err(e) => {\n             print_usage_to_stderr(opts, &e.to_string());\n             FAILURE\n         }\n-        Ok(status) => {\n-            if status.success() {\n-                SUCCESS\n-            } else {\n-                status.code().unwrap_or(FAILURE)\n-            }\n-        }\n+        Ok(status) => status,\n     }\n }\n \n-fn get_version(verbosity: Verbosity) -> Result<ExitStatus, io::Error> {\n-    run_rustfmt(&[], &[String::from(\"--version\")], verbosity)\n+fn get_version(verbosity: Verbosity) -> Result<i32, io::Error> {\n+    run_rustfmt(&HashSet::new(), &[String::from(\"--version\")], verbosity)\n }\n \n-fn format_crate(\n-    verbosity: Verbosity,\n-    strategy: &CargoFmtStrategy,\n-) -> Result<ExitStatus, io::Error> {\n+fn format_crate(verbosity: Verbosity, strategy: &CargoFmtStrategy) -> Result<i32, io::Error> {\n     let rustfmt_args = get_fmt_args();\n     let targets = if rustfmt_args\n         .iter()\n@@ -157,17 +148,7 @@ fn format_crate(\n     };\n \n     // Currently only bin and lib files get formatted\n-    let files: Vec<_> = targets\n-        .into_iter()\n-        .inspect(|t| {\n-            if verbosity == Verbosity::Verbose {\n-                println!(\"[{}] {:?}\", t.kind, t.path)\n-            }\n-        })\n-        .map(|t| t.path)\n-        .collect();\n-\n-    run_rustfmt(&files, &rustfmt_args, verbosity)\n+    run_rustfmt(&targets, &rustfmt_args, verbosity)\n }\n \n fn get_fmt_args() -> Vec<String> {\n@@ -182,6 +163,8 @@ pub struct Target {\n     path: PathBuf,\n     /// A kind of target (e.g. lib, bin, example, ...).\n     kind: String,\n+    /// Rust edition for this target.\n+    edition: String,\n }\n \n impl Target {\n@@ -192,6 +175,7 @@ impl Target {\n         Target {\n             path: canonicalized,\n             kind: target.kind[0].clone(),\n+            edition: target.edition.clone(),\n         }\n     }\n }\n@@ -334,41 +318,55 @@ fn add_targets(target_paths: &[cargo_metadata::Target], targets: &mut HashSet<Ta\n }\n \n fn run_rustfmt(\n-    files: &[PathBuf],\n+    targets: &HashSet<Target>,\n     fmt_args: &[String],\n     verbosity: Verbosity,\n-) -> Result<ExitStatus, io::Error> {\n-    let stdout = if verbosity == Verbosity::Quiet {\n-        std::process::Stdio::null()\n-    } else {\n-        std::process::Stdio::inherit()\n-    };\n+) -> Result<i32, io::Error> {\n+    let by_edition: HashMap<_, _> = targets\n+        .iter()\n+        .inspect(|t| {\n+            if verbosity == Verbosity::Verbose {\n+                println!(\"[{} ({})] {:?}\", t.kind, t.edition, t.path)\n+            }\n+        })\n+        .map(|t| (&t.edition, vec![&t.path]))\n+        .collect();\n \n-    if verbosity == Verbosity::Verbose {\n-        print!(\"rustfmt\");\n-        for a in fmt_args {\n-            print!(\" {}\", a);\n+    for (edition, files) in by_edition {\n+        let stdout = if verbosity == Verbosity::Quiet {\n+            std::process::Stdio::null()\n+        } else {\n+            std::process::Stdio::inherit()\n+        };\n+\n+        if verbosity == Verbosity::Verbose {\n+            print!(\"rustfmt\");\n+            fmt_args.iter().for_each(|f| print!(\" {}\", f));\n+            files.iter().for_each(|f| print!(\" {}\", f.display()));\n+            println!();\n         }\n-        for f in files {\n-            print!(\" {}\", f.display());\n+\n+        let mut command = Command::new(\"rustfmt\")\n+            .stdout(stdout)\n+            .args(files)\n+            .args(&[\"--edition\", edition])\n+            .args(fmt_args)\n+            .spawn()\n+            .map_err(|e| match e.kind() {\n+                io::ErrorKind::NotFound => io::Error::new(\n+                    io::ErrorKind::Other,\n+                    \"Could not run rustfmt, please make sure it is in your PATH.\",\n+                ),\n+                _ => e,\n+            })?;\n+\n+        let status = command.wait()?;\n+        if !status.success() {\n+            return Ok(status.code().unwrap_or(FAILURE));\n         }\n-        println!();\n     }\n \n-    let mut command = Command::new(\"rustfmt\")\n-        .stdout(stdout)\n-        .args(files)\n-        .args(fmt_args)\n-        .spawn()\n-        .map_err(|e| match e.kind() {\n-            io::ErrorKind::NotFound => io::Error::new(\n-                io::ErrorKind::Other,\n-                \"Could not run rustfmt, please make sure it is in your PATH.\",\n-            ),\n-            _ => e,\n-        })?;\n-\n-    command.wait()\n+    Ok(SUCCESS)\n }\n \n fn get_cargo_metadata(manifest_path: Option<&Path>) -> Result<cargo_metadata::Metadata, io::Error> {"}, {"sha": "38ed1e526eb2363827496a55eff0f60dacb2dec9", "filename": "src/config/options.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6739dbe77df4cbe211c286f31fbdb7bbf2e4265c/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6739dbe77df4cbe211c286f31fbdb7bbf2e4265c/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=6739dbe77df4cbe211c286f31fbdb7bbf2e4265c", "patch": "@@ -452,6 +452,12 @@ configuration_option_enum!{ Edition:\n     Edition2018: 2018,\n }\n \n+impl Default for Edition {\n+    fn default() -> Edition {\n+        Edition::Edition2015\n+    }\n+}\n+\n impl Edition {\n     pub(crate) fn to_libsyntax_pos_edition(self) -> syntax_pos::edition::Edition {\n         match self {"}, {"sha": "751f9acfd66f7eff2bbcd238fe70dea1c6262bd8", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6739dbe77df4cbe211c286f31fbdb7bbf2e4265c/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6739dbe77df4cbe211c286f31fbdb7bbf2e4265c/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=6739dbe77df4cbe211c286f31fbdb7bbf2e4265c", "patch": "@@ -48,8 +48,8 @@ use issues::Issue;\n use shape::Indent;\n \n pub use config::{\n-    load_config, CliOptions, Color, Config, EmitMode, FileLines, FileName, NewlineStyle, Range,\n-    Verbosity,\n+    load_config, CliOptions, Color, Config, Edition, EmitMode, FileLines, FileName, NewlineStyle,\n+    Range, Verbosity,\n };\n \n #[macro_use]"}]}