{"sha": "77794e91e219b85663cf693d35f677e564151420", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3Nzk0ZTkxZTIxOWI4NTY2M2NmNjkzZDM1ZjY3N2U1NjQxNTE0MjA=", "commit": {"author": {"name": "Michael A. Plikk", "email": "michael@aptoma.com", "date": "2018-05-23T14:43:05Z"}, "committer": {"name": "Michael A. Plikk", "email": "michael@aptoma.com", "date": "2018-05-24T08:04:18Z"}, "message": "Create lint for unimplemented!()", "tree": {"sha": "a8fc8605098be95e5aa2fa3e62c5add244fa3a28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8fc8605098be95e5aa2fa3e62c5add244fa3a28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77794e91e219b85663cf693d35f677e564151420", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77794e91e219b85663cf693d35f677e564151420", "html_url": "https://github.com/rust-lang/rust/commit/77794e91e219b85663cf693d35f677e564151420", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77794e91e219b85663cf693d35f677e564151420/comments", "author": {"login": "mipli", "id": 795482, "node_id": "MDQ6VXNlcjc5NTQ4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/795482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mipli", "html_url": "https://github.com/mipli", "followers_url": "https://api.github.com/users/mipli/followers", "following_url": "https://api.github.com/users/mipli/following{/other_user}", "gists_url": "https://api.github.com/users/mipli/gists{/gist_id}", "starred_url": "https://api.github.com/users/mipli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mipli/subscriptions", "organizations_url": "https://api.github.com/users/mipli/orgs", "repos_url": "https://api.github.com/users/mipli/repos", "events_url": "https://api.github.com/users/mipli/events{/privacy}", "received_events_url": "https://api.github.com/users/mipli/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mipli", "id": 795482, "node_id": "MDQ6VXNlcjc5NTQ4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/795482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mipli", "html_url": "https://github.com/mipli", "followers_url": "https://api.github.com/users/mipli/followers", "following_url": "https://api.github.com/users/mipli/following{/other_user}", "gists_url": "https://api.github.com/users/mipli/gists{/gist_id}", "starred_url": "https://api.github.com/users/mipli/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mipli/subscriptions", "organizations_url": "https://api.github.com/users/mipli/orgs", "repos_url": "https://api.github.com/users/mipli/repos", "events_url": "https://api.github.com/users/mipli/events{/privacy}", "received_events_url": "https://api.github.com/users/mipli/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7a3e03c6e7dd2c342847adec6b3531324195d31", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7a3e03c6e7dd2c342847adec6b3531324195d31", "html_url": "https://github.com/rust-lang/rust/commit/e7a3e03c6e7dd2c342847adec6b3531324195d31"}], "stats": {"total": 79, "additions": 63, "deletions": 16}, "files": [{"sha": "9e233837be4345b0ef263a3167353cdd9e4c94d0", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77794e91e219b85663cf693d35f677e564151420/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/77794e91e219b85663cf693d35f677e564151420/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=77794e91e219b85663cf693d35f677e564151420", "patch": "@@ -815,6 +815,7 @@ All notable changes to this project will be documented in this file.\n [`trivial_regex`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#trivial_regex\n [`type_complexity`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#type_complexity\n [`unicode_not_nfc`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unicode_not_nfc\n+[`unimplemented`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unimplemented\n [`unit_arg`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unit_arg\n [`unit_cmp`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unit_cmp\n [`unnecessary_cast`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#unnecessary_cast"}, {"sha": "506615014778c6e88a36343fbe0d4c2d96350619", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77794e91e219b85663cf693d35f677e564151420/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/77794e91e219b85663cf693d35f677e564151420/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=77794e91e219b85663cf693d35f677e564151420", "patch": "@@ -7,7 +7,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 258 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n+[There are 259 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "9dd9a364be7c0bd7542ade66311f88c5de6c7ea4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77794e91e219b85663cf693d35f677e564151420/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77794e91e219b85663cf693d35f677e564151420/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=77794e91e219b85663cf693d35f677e564151420", "patch": "@@ -627,6 +627,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         open_options::NONSENSICAL_OPEN_OPTIONS,\n         overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,\n         panic::PANIC_PARAMS,\n+        panic::UNIMPLEMENTED,\n         partialeq_ne_impl::PARTIALEQ_NE_IMPL,\n         precedence::PRECEDENCE,\n         ptr::CMP_NULL,\n@@ -749,6 +750,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         non_expressive_names::MANY_SINGLE_CHAR_NAMES,\n         ok_if_let::IF_LET_SOME_RESULT,\n         panic::PANIC_PARAMS,\n+        panic::UNIMPLEMENTED,\n         ptr::CMP_NULL,\n         ptr::PTR_ARG,\n         question_mark::QUESTION_MARK,"}, {"sha": "7f1b6775bab92f6db5ae9c5eb45d3d3bd7e48040", "filename": "clippy_lints/src/panic.rs", "status": "modified", "additions": 43, "deletions": 13, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/77794e91e219b85663cf693d35f677e564151420/clippy_lints%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77794e91e219b85663cf693d35f677e564151420/clippy_lints%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic.rs?ref=77794e91e219b85663cf693d35f677e564151420", "patch": "@@ -1,7 +1,8 @@\n use rustc::hir::*;\n use rustc::lint::*;\n use syntax::ast::LitKind;\n-use utils::{is_direct_expn_of, match_def_path, opt_def_id, paths, resolve_node, span_lint};\n+use syntax::ptr::P;\n+use utils::{is_direct_expn_of, is_expn_of, match_def_path, opt_def_id, paths, resolve_node, span_lint};\n \n /// **What it does:** Checks for missing parameters in `panic!`.\n ///\n@@ -22,12 +23,28 @@ declare_clippy_lint! {\n     \"missing parameters in `panic!` calls\"\n }\n \n+/// **What it does:** Checks for usage of `unimplemented!`.\n+///\n+/// **Why is this bad?** This macro should not be present in production code\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// unimplemented!();\n+/// ```\n+declare_clippy_lint! {\n+    pub UNIMPLEMENTED,\n+    style,\n+    \"`unimplemented!` should not be present in production code\"\n+}\n+\n #[allow(missing_copy_implementations)]\n pub struct Pass;\n \n impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(PANIC_PARAMS)\n+        lint_array!(PANIC_PARAMS, UNIMPLEMENTED)\n     }\n }\n \n@@ -37,22 +54,35 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             if let ExprBlock(ref block, _) = expr.node;\n             if let Some(ref ex) = block.expr;\n             if let ExprCall(ref fun, ref params) = ex.node;\n-            if params.len() == 2;\n             if let ExprPath(ref qpath) = fun.node;\n             if let Some(fun_def_id) = opt_def_id(resolve_node(cx, qpath, fun.hir_id));\n             if match_def_path(cx.tcx, fun_def_id, &paths::BEGIN_PANIC);\n-            if let ExprLit(ref lit) = params[0].node;\n-            if is_direct_expn_of(expr.span, \"panic\").is_some();\n-            if let LitKind::Str(ref string, _) = lit.node;\n-            let string = string.as_str().replace(\"{{\", \"\").replace(\"}}\", \"\");\n-            if let Some(par) = string.find('{');\n-            if string[par..].contains('}');\n-            if params[0].span.source_callee().is_none();\n-            if params[0].span.lo() != params[0].span.hi();\n+            if params.len() == 2;\n             then {\n-                span_lint(cx, PANIC_PARAMS, params[0].span,\n-                          \"you probably are missing some parameter in your format string\");\n+                if is_expn_of(expr.span, \"unimplemented\").is_some() {\n+                    span_lint(cx, UNIMPLEMENTED, expr.span,\n+                              \"`unimplemented` should not be present in production code\");\n+                } else {\n+                    match_panic(params, expr, cx);\n+                }\n             }\n         }\n     }\n }\n+\n+fn match_panic(params: &P<[Expr]>, expr: &Expr, cx: &LateContext) {\n+    if_chain! {\n+        if let ExprLit(ref lit) = params[0].node;\n+        if is_direct_expn_of(expr.span, \"panic\").is_some();\n+        if let LitKind::Str(ref string, _) = lit.node;\n+        let string = string.as_str().replace(\"{{\", \"\").replace(\"}}\", \"\");\n+        if let Some(par) = string.find('{');\n+        if string[par..].contains('}');\n+        if params[0].span.source_callee().is_none();\n+        if params[0].span.lo() != params[0].span.hi();\n+        then {\n+            span_lint(cx, PANIC_PARAMS, params[0].span,\n+                      \"you probably are missing some parameter in your format string\");\n+        }\n+    }\n+}"}, {"sha": "56d06f23904b52dc41719ca106eba8781205cf62", "filename": "tests/ui/panic.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/77794e91e219b85663cf693d35f677e564151420/tests%2Fui%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77794e91e219b85663cf693d35f677e564151420/tests%2Fui%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic.rs?ref=77794e91e219b85663cf693d35f677e564151420", "patch": "@@ -1,7 +1,7 @@\n \n \n \n-#![warn(panic_params)]\n+#![warn(panic_params, unimplemented)]\n \n fn missing() {\n     if true {\n@@ -53,6 +53,10 @@ fn ok_escaped() {\n     panic!(\"{case }}\");\n }\n \n+fn unimplemented() {\n+    unimplemented!();\n+}\n+\n fn main() {\n     missing();\n     ok_single();\n@@ -61,4 +65,5 @@ fn main() {\n     ok_inner();\n     ok_nomsg();\n     ok_escaped();\n+    unimplemented();\n }"}, {"sha": "786a20c031b318492072bc6c5d993e82706e426a", "filename": "tests/ui/panic.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/77794e91e219b85663cf693d35f677e564151420/tests%2Fui%2Fpanic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/77794e91e219b85663cf693d35f677e564151420/tests%2Fui%2Fpanic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic.stderr?ref=77794e91e219b85663cf693d35f677e564151420", "patch": "@@ -24,5 +24,14 @@ error: you probably are missing some parameter in your format string\n 15 |     panic!(\"{{{this}}}\");\n    |            ^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: `unimplemented` should not be present in production code\n+  --> $DIR/panic.rs:57:5\n+   |\n+57 |     unimplemented!();\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D unimplemented` implied by `-D warnings`\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to 5 previous errors\n "}]}