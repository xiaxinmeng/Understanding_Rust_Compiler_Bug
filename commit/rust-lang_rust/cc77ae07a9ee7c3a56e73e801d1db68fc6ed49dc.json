{"sha": "cc77ae07a9ee7c3a56e73e801d1db68fc6ed49dc", "node_id": "C_kwDOAAsO6NoAKGNjNzdhZTA3YTllZTdjM2E1NmU3M2U4MDFkMWRiNjhmYzZlZDQ5ZGM", "commit": {"author": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2023-04-03T12:12:21Z"}, "committer": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2023-04-04T12:12:36Z"}, "message": "Use existing llvm methods, instead of rust wrappers for:\n\nLLVMRustBuildCleanupPad -> LLVMBuildCleanupPad\nLLVMRustBuildCleanupRet -> LLVMBuildCleanupRet\nLLVMRustBuildCatchPad -> LLVMBuildCatchPad\nLLVMRustBuildCatchRet -> LLVMBuildCatchRet\nLLVMRustBuildCatchSwitch -> LLVMBuildCatchSwitch", "tree": {"sha": "0a5a23a53acb9a75e54a56c2172cb04948712239", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a5a23a53acb9a75e54a56c2172cb04948712239"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc77ae07a9ee7c3a56e73e801d1db68fc6ed49dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc77ae07a9ee7c3a56e73e801d1db68fc6ed49dc", "html_url": "https://github.com/rust-lang/rust/commit/cc77ae07a9ee7c3a56e73e801d1db68fc6ed49dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc77ae07a9ee7c3a56e73e801d1db68fc6ed49dc/comments", "author": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "076116bb4ca84801e5f513fc7cf280c55f32e8c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/076116bb4ca84801e5f513fc7cf280c55f32e8c4", "html_url": "https://github.com/rust-lang/rust/commit/076116bb4ca84801e5f513fc7cf280c55f32e8c4"}], "stats": {"total": 84, "additions": 17, "deletions": 67}, "files": [{"sha": "6290452315b43eda45c6a288bcc43b53d4bb7964", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cc77ae07a9ee7c3a56e73e801d1db68fc6ed49dc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc77ae07a9ee7c3a56e73e801d1db68fc6ed49dc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=cc77ae07a9ee7c3a56e73e801d1db68fc6ed49dc", "patch": "@@ -1001,11 +1001,11 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     fn cleanup_pad(&mut self, parent: Option<&'ll Value>, args: &[&'ll Value]) -> Funclet<'ll> {\n         let name = cstr!(\"cleanuppad\");\n         let ret = unsafe {\n-            llvm::LLVMRustBuildCleanupPad(\n+            llvm::LLVMBuildCleanupPad(\n                 self.llbuilder,\n                 parent,\n-                args.len() as c_uint,\n                 args.as_ptr(),\n+                args.len() as c_uint,\n                 name.as_ptr(),\n             )\n         };\n@@ -1014,19 +1014,19 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n \n     fn cleanup_ret(&mut self, funclet: &Funclet<'ll>, unwind: Option<&'ll BasicBlock>) {\n         unsafe {\n-            llvm::LLVMRustBuildCleanupRet(self.llbuilder, funclet.cleanuppad(), unwind)\n+            llvm::LLVMBuildCleanupRet(self.llbuilder, funclet.cleanuppad(), unwind)\n                 .expect(\"LLVM does not have support for cleanupret\");\n         }\n     }\n \n     fn catch_pad(&mut self, parent: &'ll Value, args: &[&'ll Value]) -> Funclet<'ll> {\n         let name = cstr!(\"catchpad\");\n         let ret = unsafe {\n-            llvm::LLVMRustBuildCatchPad(\n+            llvm::LLVMBuildCatchPad(\n                 self.llbuilder,\n                 parent,\n-                args.len() as c_uint,\n                 args.as_ptr(),\n+                args.len() as c_uint,\n                 name.as_ptr(),\n             )\n         };\n@@ -1041,7 +1041,7 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     ) -> &'ll Value {\n         let name = cstr!(\"catchswitch\");\n         let ret = unsafe {\n-            llvm::LLVMRustBuildCatchSwitch(\n+            llvm::LLVMBuildCatchSwitch(\n                 self.llbuilder,\n                 parent,\n                 unwind,\n@@ -1376,8 +1376,7 @@ impl<'a, 'll, 'tcx> Builder<'a, 'll, 'tcx> {\n     }\n \n     pub fn catch_ret(&mut self, funclet: &Funclet<'ll>, unwind: &'ll BasicBlock) -> &'ll Value {\n-        let ret =\n-            unsafe { llvm::LLVMRustBuildCatchRet(self.llbuilder, funclet.cleanuppad(), unwind) };\n+        let ret = unsafe { llvm::LLVMBuildCatchRet(self.llbuilder, funclet.cleanuppad(), unwind) };\n         ret.expect(\"LLVM does not have support for catchret\")\n     }\n "}, {"sha": "727a3f90efaa70998b4ca1ab1e35d97ec9362572", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cc77ae07a9ee7c3a56e73e801d1db68fc6ed49dc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc77ae07a9ee7c3a56e73e801d1db68fc6ed49dc/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=cc77ae07a9ee7c3a56e73e801d1db68fc6ed49dc", "patch": "@@ -1298,34 +1298,34 @@ extern \"C\" {\n     pub fn LLVMBuildResume<'a>(B: &Builder<'a>, Exn: &'a Value) -> &'a Value;\n     pub fn LLVMBuildUnreachable<'a>(B: &Builder<'a>) -> &'a Value;\n \n-    pub fn LLVMRustBuildCleanupPad<'a>(\n+    pub fn LLVMBuildCleanupPad<'a>(\n         B: &Builder<'a>,\n         ParentPad: Option<&'a Value>,\n-        ArgCnt: c_uint,\n         Args: *const &'a Value,\n+        NumArgs: c_uint,\n         Name: *const c_char,\n     ) -> Option<&'a Value>;\n-    pub fn LLVMRustBuildCleanupRet<'a>(\n+    pub fn LLVMBuildCleanupRet<'a>(\n         B: &Builder<'a>,\n         CleanupPad: &'a Value,\n-        UnwindBB: Option<&'a BasicBlock>,\n+        BB: Option<&'a BasicBlock>,\n     ) -> Option<&'a Value>;\n-    pub fn LLVMRustBuildCatchPad<'a>(\n+    pub fn LLVMBuildCatchPad<'a>(\n         B: &Builder<'a>,\n         ParentPad: &'a Value,\n-        ArgCnt: c_uint,\n         Args: *const &'a Value,\n+        NumArgs: c_uint,\n         Name: *const c_char,\n     ) -> Option<&'a Value>;\n-    pub fn LLVMRustBuildCatchRet<'a>(\n+    pub fn LLVMBuildCatchRet<'a>(\n         B: &Builder<'a>,\n-        Pad: &'a Value,\n+        CatchPad: &'a Value,\n         BB: &'a BasicBlock,\n     ) -> Option<&'a Value>;\n-    pub fn LLVMRustBuildCatchSwitch<'a>(\n+    pub fn LLVMBuildCatchSwitch<'a>(\n         Builder: &Builder<'a>,\n         ParentPad: Option<&'a Value>,\n-        BB: Option<&'a BasicBlock>,\n+        UnwindBB: Option<&'a BasicBlock>,\n         NumHandlers: c_uint,\n         Name: *const c_char,\n     ) -> Option<&'a Value>;"}, {"sha": "ea45b30351b21edd0fd19e7fe7747a0cf465365c", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/cc77ae07a9ee7c3a56e73e801d1db68fc6ed49dc/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/cc77ae07a9ee7c3a56e73e801d1db68fc6ed49dc/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=cc77ae07a9ee7c3a56e73e801d1db68fc6ed49dc", "patch": "@@ -1394,55 +1394,6 @@ extern \"C\" bool LLVMRustUnpackSMDiagnostic(LLVMSMDiagnosticRef DRef,\n   return true;\n }\n \n-extern \"C\" LLVMValueRef LLVMRustBuildCleanupPad(LLVMBuilderRef B,\n-                                                LLVMValueRef ParentPad,\n-                                                unsigned ArgCount,\n-                                                LLVMValueRef *LLArgs,\n-                                                const char *Name) {\n-  Value **Args = unwrap(LLArgs);\n-  if (ParentPad == nullptr) {\n-    Type *Ty = Type::getTokenTy(unwrap(B)->getContext());\n-    ParentPad = wrap(Constant::getNullValue(Ty));\n-  }\n-  return wrap(unwrap(B)->CreateCleanupPad(\n-      unwrap(ParentPad), ArrayRef<Value *>(Args, ArgCount), Name));\n-}\n-\n-extern \"C\" LLVMValueRef LLVMRustBuildCleanupRet(LLVMBuilderRef B,\n-                                                LLVMValueRef CleanupPad,\n-                                                LLVMBasicBlockRef UnwindBB) {\n-  CleanupPadInst *Inst = cast<CleanupPadInst>(unwrap(CleanupPad));\n-  return wrap(unwrap(B)->CreateCleanupRet(Inst, unwrap(UnwindBB)));\n-}\n-\n-extern \"C\" LLVMValueRef\n-LLVMRustBuildCatchPad(LLVMBuilderRef B, LLVMValueRef ParentPad,\n-                      unsigned ArgCount, LLVMValueRef *LLArgs, const char *Name) {\n-  Value **Args = unwrap(LLArgs);\n-  return wrap(unwrap(B)->CreateCatchPad(\n-      unwrap(ParentPad), ArrayRef<Value *>(Args, ArgCount), Name));\n-}\n-\n-extern \"C\" LLVMValueRef LLVMRustBuildCatchRet(LLVMBuilderRef B,\n-                                              LLVMValueRef Pad,\n-                                              LLVMBasicBlockRef BB) {\n-  return wrap(unwrap(B)->CreateCatchRet(cast<CatchPadInst>(unwrap(Pad)),\n-                                              unwrap(BB)));\n-}\n-\n-extern \"C\" LLVMValueRef LLVMRustBuildCatchSwitch(LLVMBuilderRef B,\n-                                                 LLVMValueRef ParentPad,\n-                                                 LLVMBasicBlockRef BB,\n-                                                 unsigned NumHandlers,\n-                                                 const char *Name) {\n-  if (ParentPad == nullptr) {\n-    Type *Ty = Type::getTokenTy(unwrap(B)->getContext());\n-    ParentPad = wrap(Constant::getNullValue(Ty));\n-  }\n-  return wrap(unwrap(B)->CreateCatchSwitch(unwrap(ParentPad), unwrap(BB),\n-                                                 NumHandlers, Name));\n-}\n-\n extern \"C\" void LLVMRustAddHandler(LLVMValueRef CatchSwitchRef,\n                                    LLVMBasicBlockRef Handler) {\n   Value *CatchSwitch = unwrap(CatchSwitchRef);"}]}