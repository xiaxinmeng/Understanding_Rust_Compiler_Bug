{"sha": "d331cb710f0dd969d779510a49a3bafc7f78a54e", "node_id": "C_kwDOAAsO6NoAKGQzMzFjYjcxMGYwZGQ5NjlkNzc5NTEwYTQ5YTNiYWZjN2Y3OGE1NGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-29T22:35:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-29T22:35:11Z"}, "message": "Auto merge of #88354 - Jmc18134:hint-space-pauth-opt, r=nagisa\n\nAdd codegen option for branch protection and pointer authentication on AArch64\n\nThe branch-protection codegen option enables the use of hint-space pointer\nauthentication code for AArch64 targets.", "tree": {"sha": "ff97d24d16d1380b3fea3dd0ae3cbb23828596ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff97d24d16d1380b3fea3dd0ae3cbb23828596ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d331cb710f0dd969d779510a49a3bafc7f78a54e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d331cb710f0dd969d779510a49a3bafc7f78a54e", "html_url": "https://github.com/rust-lang/rust/commit/d331cb710f0dd969d779510a49a3bafc7f78a54e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d331cb710f0dd969d779510a49a3bafc7f78a54e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78fd0f633faaa5b6dd254fc1456735f63a1b1238", "url": "https://api.github.com/repos/rust-lang/rust/commits/78fd0f633faaa5b6dd254fc1456735f63a1b1238", "html_url": "https://github.com/rust-lang/rust/commit/78fd0f633faaa5b6dd254fc1456735f63a1b1238"}, {"sha": "984ca4689dbceea29bbfcf54c4743b45fccf7ad1", "url": "https://api.github.com/repos/rust-lang/rust/commits/984ca4689dbceea29bbfcf54c4743b45fccf7ad1", "html_url": "https://github.com/rust-lang/rust/commit/984ca4689dbceea29bbfcf54c4743b45fccf7ad1"}], "stats": {"total": 208, "additions": 202, "deletions": 6}, "files": [{"sha": "bb16bc5dccdfcaba1bca3f8ad821d86398c2d506", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d331cb710f0dd969d779510a49a3bafc7f78a54e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d331cb710f0dd969d779510a49a3bafc7f78a54e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=d331cb710f0dd969d779510a49a3bafc7f78a54e", "patch": "@@ -21,7 +21,7 @@ use rustc_middle::ty::layout::{\n };\n use rustc_middle::ty::{self, Instance, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug};\n-use rustc_session::config::{CFGuard, CrateType, DebugInfo};\n+use rustc_session::config::{BranchProtection, CFGuard, CrateType, DebugInfo, PAuthKey, PacRet};\n use rustc_session::Session;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n@@ -242,6 +242,34 @@ pub unsafe fn create_module<'ll>(\n         }\n     }\n \n+    if sess.target.arch == \"aarch64\" {\n+        let BranchProtection { bti, pac_ret: pac } = sess.opts.debugging_opts.branch_protection;\n+\n+        llvm::LLVMRustAddModuleFlag(\n+            llmod,\n+            \"branch-target-enforcement\\0\".as_ptr().cast(),\n+            bti.into(),\n+        );\n+\n+        llvm::LLVMRustAddModuleFlag(\n+            llmod,\n+            \"sign-return-address\\0\".as_ptr().cast(),\n+            pac.is_some().into(),\n+        );\n+        let pac_opts = pac.unwrap_or(PacRet { leaf: false, key: PAuthKey::A });\n+        llvm::LLVMRustAddModuleFlag(\n+            llmod,\n+            \"sign-return-address-all\\0\".as_ptr().cast(),\n+            pac_opts.leaf.into(),\n+        );\n+        let is_bkey = if pac_opts.key == PAuthKey::A { false } else { true };\n+        llvm::LLVMRustAddModuleFlag(\n+            llmod,\n+            \"sign-return-address-with-bkey\\0\".as_ptr().cast(),\n+            is_bkey.into(),\n+        );\n+    }\n+\n     llmod\n }\n "}, {"sha": "a6e06ffa819ca2f4310eaccc64eaf1fc2b0d3622", "filename": "compiler/rustc_codegen_llvm/src/declare.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d331cb710f0dd969d779510a49a3bafc7f78a54e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d331cb710f0dd969d779510a49a3bafc7f78a54e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs?ref=d331cb710f0dd969d779510a49a3bafc7f78a54e", "patch": "@@ -47,6 +47,7 @@ fn declare_raw_fn<'ll>(\n \n     attributes::default_optimisation_attrs(cx.tcx.sess, llfn);\n     attributes::non_lazy_bind(cx.sess(), llfn);\n+\n     llfn\n }\n "}, {"sha": "4a181ce544de0204ee490912eb165bb3802a540b", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d331cb710f0dd969d779510a49a3bafc7f78a54e/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d331cb710f0dd969d779510a49a3bafc7f78a54e/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=d331cb710f0dd969d779510a49a3bafc7f78a54e", "patch": "@@ -8,10 +8,11 @@ use rustc_session::config::{build_configuration, build_session_options, to_crate\n use rustc_session::config::{\n     rustc_optgroups, ErrorOutputType, ExternLocation, LocationDetail, Options, Passes,\n };\n-use rustc_session::config::{CFGuard, ExternEntry, LinkerPluginLto, LtoCli, SwitchWithOptPath};\n use rustc_session::config::{\n-    Externs, OutputType, OutputTypes, SymbolManglingVersion, WasiExecModel,\n+    BranchProtection, Externs, OutputType, OutputTypes, PAuthKey, PacRet, SymbolManglingVersion,\n+    WasiExecModel,\n };\n+use rustc_session::config::{CFGuard, ExternEntry, LinkerPluginLto, LtoCli, SwitchWithOptPath};\n use rustc_session::lint::Level;\n use rustc_session::search_paths::SearchPath;\n use rustc_session::utils::{CanonicalizedPath, NativeLib, NativeLibKind};\n@@ -717,6 +718,10 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(asm_comments, true);\n     tracked!(assume_incomplete_release, true);\n     tracked!(binary_dep_depinfo, true);\n+    tracked!(\n+        branch_protection,\n+        BranchProtection { bti: true, pac_ret: Some(PacRet { leaf: true, key: PAuthKey::B }) }\n+    );\n     tracked!(chalk, true);\n     tracked!(codegen_backend, Some(\"abc\".to_string()));\n     tracked!(crate_attr, vec![\"abc\".to_string()]);"}, {"sha": "607ee8da975ccb0457455e0d52921355a2dd58b8", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d331cb710f0dd969d779510a49a3bafc7f78a54e/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d331cb710f0dd969d779510a49a3bafc7f78a54e/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=d331cb710f0dd969d779510a49a3bafc7f78a54e", "patch": "@@ -843,6 +843,30 @@ impl Passes {\n     }\n }\n \n+#[derive(Clone, Copy, Hash, Debug, PartialEq)]\n+pub enum PAuthKey {\n+    A,\n+    B,\n+}\n+\n+#[derive(Clone, Copy, Hash, Debug, PartialEq)]\n+pub struct PacRet {\n+    pub leaf: bool,\n+    pub key: PAuthKey,\n+}\n+\n+#[derive(Clone, Copy, Hash, Debug, PartialEq)]\n+pub struct BranchProtection {\n+    pub bti: bool,\n+    pub pac_ret: Option<PacRet>,\n+}\n+\n+impl Default for BranchProtection {\n+    fn default() -> Self {\n+        BranchProtection { bti: false, pac_ret: None }\n+    }\n+}\n+\n pub const fn default_lib_output() -> CrateType {\n     CrateType::Rlib\n }\n@@ -2497,9 +2521,9 @@ impl PpMode {\n crate mod dep_tracking {\n     use super::LdImpl;\n     use super::{\n-        CFGuard, CrateType, DebugInfo, ErrorOutputType, InstrumentCoverage, LinkerPluginLto,\n-        LocationDetail, LtoCli, OptLevel, OutputType, OutputTypes, Passes, SourceFileHashAlgorithm,\n-        SwitchWithOptPath, SymbolManglingVersion, TrimmedDefPaths,\n+        BranchProtection, CFGuard, CrateType, DebugInfo, ErrorOutputType, InstrumentCoverage,\n+        LinkerPluginLto, LocationDetail, LtoCli, OptLevel, OutputType, OutputTypes, Passes,\n+        SourceFileHashAlgorithm, SwitchWithOptPath, SymbolManglingVersion, TrimmedDefPaths,\n     };\n     use crate::lint;\n     use crate::options::WasiExecModel;\n@@ -2593,6 +2617,7 @@ crate mod dep_tracking {\n         OutputType,\n         RealFileName,\n         LocationDetail,\n+        BranchProtection,\n     );\n \n     impl<T1, T2> DepTrackingHash for (T1, T2)"}, {"sha": "f59b9b304ca6f21361967ff12d6799258065aa84", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d331cb710f0dd969d779510a49a3bafc7f78a54e/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d331cb710f0dd969d779510a49a3bafc7f78a54e/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=d331cb710f0dd969d779510a49a3bafc7f78a54e", "patch": "@@ -415,6 +415,8 @@ mod desc {\n     pub const parse_gcc_ld: &str = \"one of: no value, `lld`\";\n     pub const parse_stack_protector: &str =\n         \"one of (`none` (default), `basic`, `strong`, or `all`)\";\n+    pub const parse_branch_protection: &str =\n+        \"a `,` separated combination of `bti`, `b-key`, `pac-ret`, or `leaf`\";\n }\n \n mod parse {\n@@ -955,6 +957,32 @@ mod parse {\n         }\n         true\n     }\n+\n+    crate fn parse_branch_protection(slot: &mut BranchProtection, v: Option<&str>) -> bool {\n+        match v {\n+            Some(s) => {\n+                for opt in s.split(',') {\n+                    match opt {\n+                        \"bti\" => slot.bti = true,\n+                        \"pac-ret\" if slot.pac_ret.is_none() => {\n+                            slot.pac_ret = Some(PacRet { leaf: false, key: PAuthKey::A })\n+                        }\n+                        \"leaf\" => match slot.pac_ret.as_mut() {\n+                            Some(pac) => pac.leaf = true,\n+                            _ => return false,\n+                        },\n+                        \"b-key\" => match slot.pac_ret.as_mut() {\n+                            Some(pac) => pac.key = PAuthKey::B,\n+                            _ => return false,\n+                        },\n+                        _ => return false,\n+                    };\n+                }\n+            }\n+            _ => return false,\n+        }\n+        true\n+    }\n }\n \n options! {\n@@ -1096,6 +1124,8 @@ options! {\n         (default: no)\"),\n     borrowck: String = (\"migrate\".to_string(), parse_string, [UNTRACKED],\n         \"select which borrowck is used (`mir` or `migrate`) (default: `migrate`)\"),\n+    branch_protection: BranchProtection = (BranchProtection::default(), parse_branch_protection, [TRACKED],\n+        \"set options for branch target identification and pointer authentication on AArch64\"),\n     cgu_partitioning_strategy: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"the codegen unit partitioning strategy to use\"),\n     chalk: bool = (false, parse_bool, [TRACKED],"}, {"sha": "85403748e1dcdab014366fea01034f98adf508d2", "filename": "src/doc/unstable-book/src/compiler-flags/branch-protection.md", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d331cb710f0dd969d779510a49a3bafc7f78a54e/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fbranch-protection.md", "raw_url": "https://github.com/rust-lang/rust/raw/d331cb710f0dd969d779510a49a3bafc7f78a54e/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fbranch-protection.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fbranch-protection.md?ref=d331cb710f0dd969d779510a49a3bafc7f78a54e", "patch": "@@ -0,0 +1,18 @@\n+# `branch-protection`\n+\n+This option lets you enable branch authentication instructions on AArch64.\n+This option is ignored for non-AArch64 architectures.\n+It takes some combination of the following values, separated by a `,`.\n+\n+- `pac-ret` - Enable pointer authentication for non-leaf functions.\n+- `leaf` - Enable pointer authentication for all functions, including leaf functions.\n+- `b-key` - Sign return addresses with key B, instead of the default key A.\n+- `bti` - Enable branch target identification.\n+\n+`leaf` and `b-key` are only valid if `pac-ret` was previously specified.\n+For example, `-Z branch-protection=bti,pac-ret,leaf` is valid, but\n+`-Z branch-protection=bti,leaf,pac-ret` is not.\n+\n+Rust's standard library does not ship with BTI or pointer authentication enabled by default.\n+In Cargo projects the standard library can be recompiled with pointer authentication using the nightly\n+[build-std](https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#build-std) feature."}, {"sha": "27e289086b9dd00c9c14256a1975243a2bd57b85", "filename": "src/test/assembly/aarch64-pointer-auth.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d331cb710f0dd969d779510a49a3bafc7f78a54e/src%2Ftest%2Fassembly%2Faarch64-pointer-auth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d331cb710f0dd969d779510a49a3bafc7f78a54e/src%2Ftest%2Fassembly%2Faarch64-pointer-auth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Faarch64-pointer-auth.rs?ref=d331cb710f0dd969d779510a49a3bafc7f78a54e", "patch": "@@ -0,0 +1,22 @@\n+// Test that PAC instructions are emitted when branch-protection is specified.\n+\n+// min-llvm-version: 10.0.1\n+// assembly-output: emit-asm\n+// compile-flags: --target aarch64-unknown-linux-gnu\n+// compile-flags: -Z branch-protection=pac-ret,leaf\n+// needs-llvm-components: aarch64\n+\n+#![feature(no_core, lang_items)]\n+#![no_std]\n+#![no_core]\n+#![crate_type = \"lib\"]\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+\n+// CHECK: hint #25\n+// CHECK: hint #29\n+#[no_mangle]\n+pub fn test() -> u8 {\n+    42\n+}"}, {"sha": "106c9b148ee35e6bc7ce59566abe68050f80482b", "filename": "src/test/codegen/branch-protection.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d331cb710f0dd969d779510a49a3bafc7f78a54e/src%2Ftest%2Fcodegen%2Fbranch-protection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d331cb710f0dd969d779510a49a3bafc7f78a54e/src%2Ftest%2Fcodegen%2Fbranch-protection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fbranch-protection.rs?ref=d331cb710f0dd969d779510a49a3bafc7f78a54e", "patch": "@@ -0,0 +1,41 @@\n+// Test that the correct module flags are emitted with different branch protection flags.\n+\n+// revisions: bti pac-ret leaf b-key\n+// min-llvm-version: 12.0.0\n+// needs-llvm-components: aarch64\n+// [bti] compile-flags: -Z branch-protection=bti\n+// [pac-ret] compile-flags: -Z branch-protection=pac-ret\n+// [leaf] compile-flags: -Z branch-protection=pac-ret,leaf\n+// [b-key] compile-flags: -Z branch-protection=pac-ret,b-key\n+// compile-flags: --target aarch64-unknown-linux-gnu\n+\n+#![crate_type = \"lib\"]\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized { }\n+\n+// A basic test function.\n+pub fn test() {\n+}\n+\n+// bti: !\"branch-target-enforcement\", i32 1\n+// bti: !\"sign-return-address\", i32 0\n+// bti: !\"sign-return-address-all\", i32 0\n+// bti: !\"sign-return-address-with-bkey\", i32 0\n+\n+// pac-ret: !\"branch-target-enforcement\", i32 0\n+// pac-ret: !\"sign-return-address\", i32 1\n+// pac-ret: !\"sign-return-address-all\", i32 0\n+// pac-ret: !\"sign-return-address-with-bkey\", i32 0\n+\n+// leaf: !\"branch-target-enforcement\", i32 0\n+// leaf: !\"sign-return-address\", i32 1\n+// leaf: !\"sign-return-address-all\", i32 1\n+// leaf: !\"sign-return-address-with-bkey\", i32 0\n+\n+// b-key: !\"branch-target-enforcement\", i32 0\n+// b-key: !\"sign-return-address\", i32 1\n+// b-key: !\"sign-return-address-all\", i32 0\n+// b-key: !\"sign-return-address-with-bkey\", i32 1"}, {"sha": "d0e22cfef4c2ae74332475bad358ec26c22b435d", "filename": "src/test/run-make-fulldeps/pointer-auth-link-with-c/Makefile", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d331cb710f0dd969d779510a49a3bafc7f78a54e/src%2Ftest%2Frun-make-fulldeps%2Fpointer-auth-link-with-c%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d331cb710f0dd969d779510a49a3bafc7f78a54e/src%2Ftest%2Frun-make-fulldeps%2Fpointer-auth-link-with-c%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpointer-auth-link-with-c%2FMakefile?ref=d331cb710f0dd969d779510a49a3bafc7f78a54e", "patch": "@@ -0,0 +1,14 @@\n+-include ../tools.mk\n+\n+# only-aarch64\n+\n+all:\n+\t$(COMPILE_OBJ) $(TMPDIR)/test.o test.c\n+\t$(AR) rcs $(TMPDIR)/libtest.a $(TMPDIR)/test.o\n+\t$(RUSTC) -Z branch-protection=bti,pac-ret,leaf test.rs\n+\t$(call RUN,test)\n+\n+\t$(COMPILE_OBJ) $(TMPDIR)/test.o test.c -mbranch-protection=bti+pac-ret+leaf\n+\t$(AR) rcs $(TMPDIR)/libtest.a $(TMPDIR)/test.o\n+\t$(RUSTC) -Z branch-protection=bti,pac-ret,leaf test.rs\n+\t$(call RUN,test)"}, {"sha": "9fe07f82f9ed1495b13e4e4dcd2e092115b01b25", "filename": "src/test/run-make-fulldeps/pointer-auth-link-with-c/test.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d331cb710f0dd969d779510a49a3bafc7f78a54e/src%2Ftest%2Frun-make-fulldeps%2Fpointer-auth-link-with-c%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/d331cb710f0dd969d779510a49a3bafc7f78a54e/src%2Ftest%2Frun-make-fulldeps%2Fpointer-auth-link-with-c%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpointer-auth-link-with-c%2Ftest.c?ref=d331cb710f0dd969d779510a49a3bafc7f78a54e", "patch": "@@ -0,0 +1 @@\n+int foo() { return 0; }"}, {"sha": "615ad0aeb3d0e52c2030dc082a074bc96180027a", "filename": "src/test/run-make-fulldeps/pointer-auth-link-with-c/test.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d331cb710f0dd969d779510a49a3bafc7f78a54e/src%2Ftest%2Frun-make-fulldeps%2Fpointer-auth-link-with-c%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d331cb710f0dd969d779510a49a3bafc7f78a54e/src%2Ftest%2Frun-make-fulldeps%2Fpointer-auth-link-with-c%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpointer-auth-link-with-c%2Ftest.rs?ref=d331cb710f0dd969d779510a49a3bafc7f78a54e", "patch": "@@ -0,0 +1,8 @@\n+#[link(name = \"test\")]\n+extern \"C\" {\n+    fn foo() -> i32;\n+}\n+\n+fn main() {\n+    unsafe {foo();}\n+}"}, {"sha": "4f39d223a2e0c83407536575b0fff35cfb841cf6", "filename": "src/test/ui/invalid-compile-flags/branch-protection-missing-pac-ret.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d331cb710f0dd969d779510a49a3bafc7f78a54e/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fbranch-protection-missing-pac-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d331cb710f0dd969d779510a49a3bafc7f78a54e/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fbranch-protection-missing-pac-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fbranch-protection-missing-pac-ret.rs?ref=d331cb710f0dd969d779510a49a3bafc7f78a54e", "patch": "@@ -0,0 +1 @@\n+// compile-flags: -Z branch-protection=leaf"}, {"sha": "5528d2a0729c9b98749a71559c1128979621fe4a", "filename": "src/test/ui/invalid-compile-flags/branch-protection-missing-pac-ret.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d331cb710f0dd969d779510a49a3bafc7f78a54e/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fbranch-protection-missing-pac-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d331cb710f0dd969d779510a49a3bafc7f78a54e/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fbranch-protection-missing-pac-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid-compile-flags%2Fbranch-protection-missing-pac-ret.stderr?ref=d331cb710f0dd969d779510a49a3bafc7f78a54e", "patch": "@@ -0,0 +1,2 @@\n+error: incorrect value `leaf` for debugging option `branch-protection` - a `,` separated combination of `bti`, `b-key`, `pac-ret`, or `leaf` was expected\n+"}]}