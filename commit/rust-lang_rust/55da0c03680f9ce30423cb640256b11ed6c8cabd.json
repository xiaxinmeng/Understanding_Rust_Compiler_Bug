{"sha": "55da0c03680f9ce30423cb640256b11ed6c8cabd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1ZGEwYzAzNjgwZjljZTMwNDIzY2I2NDAyNTZiMTFlZDZjOGNhYmQ=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-10-28T17:26:16Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-15T18:33:32Z"}, "message": "Use new const-checker for `mir_const_qualif`\n\nNow `mir_const_qualif` must be called for `static`s and `const fn`s as\nwell as `const`s since it is responsible for const-checking. We return\nthe qualifs in the return place for everything, even though they will\nonly be used for `const`s.", "tree": {"sha": "19d4fcaa275227b2aa59babdaeaa760faa41205b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19d4fcaa275227b2aa59babdaeaa760faa41205b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55da0c03680f9ce30423cb640256b11ed6c8cabd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55da0c03680f9ce30423cb640256b11ed6c8cabd", "html_url": "https://github.com/rust-lang/rust/commit/55da0c03680f9ce30423cb640256b11ed6c8cabd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55da0c03680f9ce30423cb640256b11ed6c8cabd/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "973b16ab4b2d044f777616f59a2d33fbbbc0fe49", "url": "https://api.github.com/repos/rust-lang/rust/commits/973b16ab4b2d044f777616f59a2d33fbbbc0fe49", "html_url": "https://github.com/rust-lang/rust/commit/973b16ab4b2d044f777616f59a2d33fbbbc0fe49"}], "stats": {"total": 39, "additions": 37, "deletions": 2}, "files": [{"sha": "64649e93481f404aeba8ffc3e1bf4e5f514fc595", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/55da0c03680f9ce30423cb640256b11ed6c8cabd/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55da0c03680f9ce30423cb640256b11ed6c8cabd/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=55da0c03680f9ce30423cb640256b11ed6c8cabd", "patch": "@@ -2,7 +2,7 @@ use crate::{build, shim};\n use rustc_index::vec::IndexVec;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::mir::{Body, MirPhase, Promoted};\n-use rustc::ty::{TyCtxt, InstanceDef};\n+use rustc::ty::{TyCtxt, InstanceDef, TypeFoldable};\n use rustc::ty::query::Providers;\n use rustc::ty::steal::Steal;\n use rustc::hir;\n@@ -39,12 +39,12 @@ pub mod uniform_array_move_out;\n pub mod uninhabited_enum_branching;\n \n pub(crate) fn provide(providers: &mut Providers<'_>) {\n-    self::qualify_consts::provide(providers);\n     self::check_unsafety::provide(providers);\n     *providers = Providers {\n         mir_keys,\n         mir_built,\n         mir_const,\n+        mir_const_qualif,\n         mir_validated,\n         optimized_mir,\n         is_mir_available,\n@@ -185,6 +185,41 @@ pub fn run_passes(\n     body.phase = mir_phase;\n }\n \n+fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> u8 {\n+    let const_kind = check_consts::ConstKind::for_item(tcx, def_id);\n+\n+    // No need to const-check a non-const `fn`.\n+    if const_kind.is_none() {\n+        return 0;\n+    }\n+\n+    // N.B., this `borrow()` is guaranteed to be valid (i.e., the value\n+    // cannot yet be stolen), because `mir_validated()`, which steals\n+    // from `mir_const(), forces this query to execute before\n+    // performing the steal.\n+    let body = &tcx.mir_const(def_id).borrow();\n+\n+    if body.return_ty().references_error() {\n+        tcx.sess.delay_span_bug(body.span, \"mir_const_qualif: MIR had errors\");\n+        return 0;\n+    }\n+\n+    let item = check_consts::Item {\n+        body,\n+        tcx,\n+        def_id,\n+        const_kind,\n+        param_env: tcx.param_env(def_id),\n+    };\n+\n+    let mut validator = check_consts::validation::Validator::new(&item);\n+    validator.check_body();\n+\n+    // We return the qualifs in the return place for every MIR body, even though it is only used\n+    // when deciding to promote a reference to a `const` for now.\n+    validator.qualifs_in_return_place().into()\n+}\n+\n fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> &Steal<Body<'_>> {\n     // Unsafety check uses the raw mir, so make sure it is run\n     let _ = tcx.unsafety_check_result(def_id);"}]}