{"sha": "b9160fb56ced49c6087acb782c3260fab3936be9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MTYwZmI1NmNlZDQ5YzYwODdhY2I3ODJjMzI2MGZhYjM5MzZiZTk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-01-05T17:14:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-05T17:14:34Z"}, "message": "Rollup merge of #67882 - euclio:flock, r=rkruppe\n\nremove bespoke flock bindings\n\nReplaces some `struct flock` definitions with the definition from `libc`.", "tree": {"sha": "ee955ba17368f2ad7c13794858ce833864ae6a42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee955ba17368f2ad7c13794858ce833864ae6a42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9160fb56ced49c6087acb782c3260fab3936be9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeEhl6CRBK7hj4Ov3rIwAAdHIIAJGvLTylgTJBN37U48hYRDpv\ns0JSxnY6LnRla51dboz1BqrUxKfqnDPP0+koBwQDcrJLDOnO6LavKCeNiCssEhUe\nNxo0OYHctBcjkV1WFWgB8CQgJ796vtnuIRog/rL62/OfiAeKxdI64zGZS3Lrijto\nVCIEqToE89X96Sd8jxk8eKa7gBdYq3GTYkaAj8n93OlS2Nc7E/omKZT9flGVaNnD\nwkByXo4SWVpJTg1MusqJk8hSei8zR1UXErHCM8zUT4qYCuotkdMdDAyzt9wS0eiu\n+sdr8r69/lZkjeZ/qjkxzmevOdQ7OTTDNEFOwuutmle8E7ppHpN157CzAjEMDaM=\n=aYp0\n-----END PGP SIGNATURE-----\n", "payload": "tree ee955ba17368f2ad7c13794858ce833864ae6a42\nparent 10a12c539aed35a39372ebd7a88039922a306822\nparent c8774302d18a1b704b797f387108c5115cd87d3a\nauthor Dylan DPC <dylan.dpc@gmail.com> 1578244474 +0530\ncommitter GitHub <noreply@github.com> 1578244474 +0530\n\nRollup merge of #67882 - euclio:flock, r=rkruppe\n\nremove bespoke flock bindings\n\nReplaces some `struct flock` definitions with the definition from `libc`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9160fb56ced49c6087acb782c3260fab3936be9", "html_url": "https://github.com/rust-lang/rust/commit/b9160fb56ced49c6087acb782c3260fab3936be9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9160fb56ced49c6087acb782c3260fab3936be9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10a12c539aed35a39372ebd7a88039922a306822", "url": "https://api.github.com/repos/rust-lang/rust/commits/10a12c539aed35a39372ebd7a88039922a306822", "html_url": "https://github.com/rust-lang/rust/commit/10a12c539aed35a39372ebd7a88039922a306822"}, {"sha": "c8774302d18a1b704b797f387108c5115cd87d3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8774302d18a1b704b797f387108c5115cd87d3a", "html_url": "https://github.com/rust-lang/rust/commit/c8774302d18a1b704b797f387108c5115cd87d3a"}], "stats": {"total": 121, "additions": 15, "deletions": 106}, "files": [{"sha": "e3282c5d276b039291dfc2b9566b166afcedff6b", "filename": "src/librustc_data_structures/flock.rs", "status": "modified", "additions": 15, "deletions": 106, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/b9160fb56ced49c6087acb782c3260fab3936be9/src%2Flibrustc_data_structures%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9160fb56ced49c6087acb782c3260fab3936be9/src%2Flibrustc_data_structures%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fflock.rs?ref=b9160fb56ced49c6087acb782c3260fab3936be9", "patch": "@@ -13,96 +13,9 @@ use std::path::Path;\n cfg_if! {\n     if #[cfg(unix)] {\n         use std::ffi::{CString, OsStr};\n+        use std::mem;\n         use std::os::unix::prelude::*;\n \n-        #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n-        mod os {\n-            #[repr(C)]\n-            pub struct flock {\n-                pub l_type: libc::c_short,\n-                pub l_whence: libc::c_short,\n-                pub l_start: libc::off_t,\n-                pub l_len: libc::off_t,\n-                pub l_pid: libc::pid_t,\n-\n-                // not actually here, but brings in line with freebsd\n-                pub l_sysid: libc::c_int,\n-            }\n-        }\n-\n-        #[cfg(target_os = \"freebsd\")]\n-        mod os {\n-            #[repr(C)]\n-            pub struct flock {\n-                pub l_start: libc::off_t,\n-                pub l_len: libc::off_t,\n-                pub l_pid: libc::pid_t,\n-                pub l_type: libc::c_short,\n-                pub l_whence: libc::c_short,\n-                pub l_sysid: libc::c_int,\n-            }\n-        }\n-\n-        #[cfg(any(target_os = \"dragonfly\",\n-                  target_os = \"netbsd\",\n-                  target_os = \"openbsd\"))]\n-        mod os {\n-            #[repr(C)]\n-            pub struct flock {\n-                pub l_start: libc::off_t,\n-                pub l_len: libc::off_t,\n-                pub l_pid: libc::pid_t,\n-                pub l_type: libc::c_short,\n-                pub l_whence: libc::c_short,\n-\n-                // not actually here, but brings in line with freebsd\n-                pub l_sysid: libc::c_int,\n-            }\n-        }\n-\n-        #[cfg(target_os = \"haiku\")]\n-        mod os {\n-            #[repr(C)]\n-            pub struct flock {\n-                pub l_type: libc::c_short,\n-                pub l_whence: libc::c_short,\n-                pub l_start: libc::off_t,\n-                pub l_len: libc::off_t,\n-                pub l_pid: libc::pid_t,\n-\n-                // not actually here, but brings in line with freebsd\n-                pub l_sysid: libc::c_int,\n-            }\n-        }\n-\n-        #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n-        mod os {\n-            #[repr(C)]\n-            pub struct flock {\n-                pub l_start: libc::off_t,\n-                pub l_len: libc::off_t,\n-                pub l_pid: libc::pid_t,\n-                pub l_type: libc::c_short,\n-                pub l_whence: libc::c_short,\n-\n-                // not actually here, but brings in line with freebsd\n-                pub l_sysid: libc::c_int,\n-            }\n-        }\n-\n-        #[cfg(target_os = \"solaris\")]\n-        mod os {\n-            #[repr(C)]\n-            pub struct flock {\n-                pub l_type: libc::c_short,\n-                pub l_whence: libc::c_short,\n-                pub l_start: libc::off_t,\n-                pub l_len: libc::off_t,\n-                pub l_sysid: libc::c_int,\n-                pub l_pid: libc::pid_t,\n-            }\n-        }\n-\n         #[derive(Debug)]\n         pub struct Lock {\n             fd: libc::c_int,\n@@ -132,19 +45,17 @@ cfg_if! {\n                 }\n \n                 let lock_type = if exclusive {\n-                    libc::F_WRLCK as libc::c_short\n+                    libc::F_WRLCK\n                 } else {\n-                    libc::F_RDLCK as libc::c_short\n+                    libc::F_RDLCK\n                 };\n \n-                let flock = os::flock {\n-                    l_start: 0,\n-                    l_len: 0,\n-                    l_pid: 0,\n-                    l_whence: libc::SEEK_SET as libc::c_short,\n-                    l_type: lock_type,\n-                    l_sysid: 0,\n-                };\n+                let mut flock: libc::flock = unsafe { mem::zeroed() };\n+                flock.l_type = lock_type as libc::c_short;\n+                flock.l_whence = libc::SEEK_SET as libc::c_short;\n+                flock.l_start = 0;\n+                flock.l_len = 0;\n+\n                 let cmd = if wait { libc::F_SETLKW } else { libc::F_SETLK };\n                 let ret = unsafe {\n                     libc::fcntl(fd, cmd, &flock)\n@@ -161,14 +72,12 @@ cfg_if! {\n \n         impl Drop for Lock {\n             fn drop(&mut self) {\n-                let flock = os::flock {\n-                    l_start: 0,\n-                    l_len: 0,\n-                    l_pid: 0,\n-                    l_whence: libc::SEEK_SET as libc::c_short,\n-                    l_type: libc::F_UNLCK as libc::c_short,\n-                    l_sysid: 0,\n-                };\n+                let mut flock: libc::flock = unsafe { mem::zeroed() };\n+                flock.l_type = libc::F_UNLCK as libc::c_short;\n+                flock.l_whence = libc::SEEK_SET as libc::c_short;\n+                flock.l_start = 0;\n+                flock.l_len = 0;\n+\n                 unsafe {\n                     libc::fcntl(self.fd, libc::F_SETLK, &flock);\n                     libc::close(self.fd);"}]}