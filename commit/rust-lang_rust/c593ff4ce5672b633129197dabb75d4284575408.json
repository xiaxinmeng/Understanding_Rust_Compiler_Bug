{"sha": "c593ff4ce5672b633129197dabb75d4284575408", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1OTNmZjRjZTU2NzJiNjMzMTI5MTk3ZGFiYjc1ZDQyODQ1NzU0MDg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-01-19T10:56:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-01-19T10:56:09Z"}, "message": "Rollup merge of #39150 - birkenfeld:slice-doc, r=GuillaumeGomez\n\ncollections: update docs of slice get() and friends\n\nResubmit of #38216.\n\nr? @GuillaumeGomez\n\nBTW, instead of closing a PR just because it is old and the team member who offered to fix it up did not have the time to do so, why not ping them instead? (cc @alexcrichton)", "tree": {"sha": "67e98b991090a363a9482f21a86c092af87ea532", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67e98b991090a363a9482f21a86c092af87ea532"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c593ff4ce5672b633129197dabb75d4284575408", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c593ff4ce5672b633129197dabb75d4284575408", "html_url": "https://github.com/rust-lang/rust/commit/c593ff4ce5672b633129197dabb75d4284575408", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c593ff4ce5672b633129197dabb75d4284575408/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c044753f92c4981b1f761aaeea1b5d31a9d7653", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c044753f92c4981b1f761aaeea1b5d31a9d7653", "html_url": "https://github.com/rust-lang/rust/commit/2c044753f92c4981b1f761aaeea1b5d31a9d7653"}, {"sha": "871357a534925cf3476dca615d2a072cbc5cb4f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/871357a534925cf3476dca615d2a072cbc5cb4f2", "html_url": "https://github.com/rust-lang/rust/commit/871357a534925cf3476dca615d2a072cbc5cb4f2"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "d25799800b7d18e63de8c8542f54ce6a3b6fcc8e", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c593ff4ce5672b633129197dabb75d4284575408/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c593ff4ce5672b633129197dabb75d4284575408/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=c593ff4ce5672b633129197dabb75d4284575408", "patch": "@@ -342,15 +342,22 @@ impl<T> [T] {\n         core_slice::SliceExt::last_mut(self)\n     }\n \n-    /// Returns the element of a slice at the given index, or `None` if the\n-    /// index is out of bounds.\n+    /// Returns a reference to an element or subslice depending on the type of\n+    /// index.\n+    ///\n+    /// - If given a position, returns a reference to the element at that\n+    ///   position or `None` if out of bounds.\n+    /// - If given a range, returns the subslice corresponding to that range,\n+    ///   or `None` if out of bounds.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// let v = [10, 40, 30];\n     /// assert_eq!(Some(&40), v.get(1));\n+    /// assert_eq!(Some(&[10, 40][..]), v.get(0..2));\n     /// assert_eq!(None, v.get(3));\n+    /// assert_eq!(None, v.get(0..4));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -360,7 +367,10 @@ impl<T> [T] {\n         core_slice::SliceExt::get(self, index)\n     }\n \n-    /// Returns a mutable reference to the element at the given index.\n+    /// Returns a mutable reference to an element or subslice depending on the\n+    /// type of index (see [`get()`]) or `None` if the index is out of bounds.\n+    ///\n+    /// [`get()`]: #method.get\n     ///\n     /// # Examples\n     ///\n@@ -372,7 +382,6 @@ impl<T> [T] {\n     /// }\n     /// assert_eq!(x, &[0, 42, 2]);\n     /// ```\n-    /// or `None` if the index is out of bounds\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn get_mut<I>(&mut self, index: I) -> Option<&mut I::Output>\n@@ -381,8 +390,8 @@ impl<T> [T] {\n         core_slice::SliceExt::get_mut(self, index)\n     }\n \n-    /// Returns a pointer to the element at the given index, without doing\n-    /// bounds checking. So use it very carefully!\n+    /// Returns a reference to an element or subslice, without doing bounds\n+    /// checking. So use it very carefully!\n     ///\n     /// # Examples\n     ///\n@@ -401,8 +410,8 @@ impl<T> [T] {\n         core_slice::SliceExt::get_unchecked(self, index)\n     }\n \n-    /// Returns an unsafe mutable pointer to the element in index. So use it\n-    /// very carefully!\n+    /// Returns a mutable reference to an element or subslice, without doing\n+    /// bounds checking. So use it very carefully!\n     ///\n     /// # Examples\n     ///"}]}