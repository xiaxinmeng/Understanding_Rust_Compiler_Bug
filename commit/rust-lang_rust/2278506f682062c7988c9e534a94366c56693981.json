{"sha": "2278506f682062c7988c9e534a94366c56693981", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNzg1MDZmNjgyMDYyYzc5ODhjOWU1MzRhOTQzNjZjNTY2OTM5ODE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-03T19:07:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-03T19:07:45Z"}, "message": "Auto merge of #45247 - leodasvacas:implement-auto-trait-syntax, r=nikomatsakis\n\n[Syntax] Implement auto trait syntax\n\nImplements `auto trait Send {}` as a substitute for `trait Send {} impl Send for .. {}`.\n\nSee the [internals thread](https://internals.rust-lang.org/t/pre-rfc-renaming-oibits-and-changing-their-declaration-syntax/3086) for motivation. Part of #13231.\n\nThe first commit is just a rename moving from \"default trait\" to \"auto trait\". The rest is parser->AST->HIR work and making it the same as the current syntax for everything below HIR. It's under the `optin_builtin_traits` feature gate.\n\nWhen can we remove the old syntax? Do we need to wait for a new `stage0`? We also need to formally decide for the new form (even if the keyword is not settled yet).\n\nObservations:\n- If you `auto trait Auto {}` and then `impl Auto for .. {}` that's accepted even if it's redundant.\n- The new syntax is simpler internally which will allow for a net removal of code, for example well-formedness checks are effectively moved to the parser.\n- Rustfmt and clippy are broken, need to fix those.\n- Rustdoc just ignores it for now.\n\nping @petrochenkov @nikomatsakis", "tree": {"sha": "8c86635bbe81ad87b766c5de883e3cca11b2e30d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c86635bbe81ad87b766c5de883e3cca11b2e30d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2278506f682062c7988c9e534a94366c56693981", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2278506f682062c7988c9e534a94366c56693981", "html_url": "https://github.com/rust-lang/rust/commit/2278506f682062c7988c9e534a94366c56693981", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2278506f682062c7988c9e534a94366c56693981/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59d484575a714291481563d13ad058b9a3d31fa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/59d484575a714291481563d13ad058b9a3d31fa8", "html_url": "https://github.com/rust-lang/rust/commit/59d484575a714291481563d13ad058b9a3d31fa8"}, {"sha": "5190abb941773ec54632c19c73d1f456831323b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5190abb941773ec54632c19c73d1f456831323b3", "html_url": "https://github.com/rust-lang/rust/commit/5190abb941773ec54632c19c73d1f456831323b3"}], "stats": {"total": 710, "additions": 494, "deletions": 216}, "files": [{"sha": "97b57c690fcc811286dc6fde743a28eb8ef87929", "filename": "src/doc/unstable-book/src/language-features/optin-builtin-traits.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foptin-builtin-traits.md", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foptin-builtin-traits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foptin-builtin-traits.md?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -24,9 +24,7 @@ Example:\n ```rust\n #![feature(optin_builtin_traits)]\n \n-trait Valid {}\n-\n-impl Valid for .. {}\n+auto trait Valid {}\n \n struct True;\n struct False;"}, {"sha": "e47b99ed552d3be974624a6b3a56d367dfe84834", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -46,6 +46,8 @@ pub unsafe trait Send {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(unknown_lints)]\n+#[allow(auto_impl)]\n unsafe impl Send for .. { }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -349,6 +351,8 @@ pub unsafe trait Sync {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(unknown_lints)]\n+#[allow(auto_impl)]\n unsafe impl Sync for .. { }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -562,6 +566,8 @@ mod impls {\n #[lang = \"freeze\"]\n unsafe trait Freeze {}\n \n+#[allow(unknown_lints)]\n+#[allow(auto_impl)]\n unsafe impl Freeze for .. {}\n \n impl<T: ?Sized> !Freeze for UnsafeCell<T> {}"}, {"sha": "70cfe57d15023b8ba67a38221f116abd6fe443df", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -498,7 +498,7 @@ define_dep_nodes!( <'tcx>\n     [] SuperPredicatesOfItem(DefId),\n     [] TraitDefOfItem(DefId),\n     [] AdtDefOfItem(DefId),\n-    [] IsDefaultImpl(DefId),\n+    [] IsAutoImpl(DefId),\n     [] ImplTraitRef(DefId),\n     [] ImplPolarity(DefId),\n     [] ClosureKind(DefId),"}, {"sha": "c23a5fb1f7ebba3338c4aeb6343b617445b5cc81", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -503,7 +503,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             // visit_enum_def() takes care of visiting the Item's NodeId\n             visitor.visit_enum_def(enum_definition, type_parameters, item.id, item.span)\n         }\n-        ItemDefaultImpl(_, ref trait_ref) => {\n+        ItemAutoImpl(_, ref trait_ref) => {\n             visitor.visit_id(item.id);\n             visitor.visit_trait_ref(trait_ref)\n         }\n@@ -520,7 +520,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             visitor.visit_id(item.id);\n             visitor.visit_variant_data(struct_definition, item.name, generics, item.id, item.span);\n         }\n-        ItemTrait(_, ref generics, ref bounds, ref trait_item_refs) => {\n+        ItemTrait(.., ref generics, ref bounds, ref trait_item_refs) => {\n             visitor.visit_id(item.id);\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_ty_param_bound, bounds);"}, {"sha": "a69d41d16033f4a0c5b657c7e92e4faa685b7ac7", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -96,7 +96,7 @@ pub struct LoweringContext<'a> {\n     exported_macros: Vec<hir::MacroDef>,\n \n     trait_impls: BTreeMap<DefId, Vec<NodeId>>,\n-    trait_default_impl: BTreeMap<DefId, NodeId>,\n+    trait_auto_impl: BTreeMap<DefId, NodeId>,\n \n     is_generator: bool,\n \n@@ -146,7 +146,7 @@ pub fn lower_crate(sess: &Session,\n         impl_items: BTreeMap::new(),\n         bodies: BTreeMap::new(),\n         trait_impls: BTreeMap::new(),\n-        trait_default_impl: BTreeMap::new(),\n+        trait_auto_impl: BTreeMap::new(),\n         exported_macros: Vec::new(),\n         catch_scopes: Vec::new(),\n         loop_scopes: Vec::new(),\n@@ -198,7 +198,7 @@ impl<'a> LoweringContext<'a> {\n                     ItemKind::Union(_, ref generics) |\n                     ItemKind::Enum(_, ref generics) |\n                     ItemKind::Ty(_, ref generics) |\n-                    ItemKind::Trait(_, ref generics, ..) => {\n+                    ItemKind::Trait(_, _, ref generics, ..) => {\n                         let def_id = self.lctx.resolver.definitions().local_def_id(item.id);\n                         let count = generics.lifetimes.len();\n                         self.lctx.type_def_lifetime_params.insert(def_id, count);\n@@ -284,7 +284,7 @@ impl<'a> LoweringContext<'a> {\n             bodies: self.bodies,\n             body_ids,\n             trait_impls: self.trait_impls,\n-            trait_default_impl: self.trait_default_impl,\n+            trait_auto_impl: self.trait_auto_impl,\n         }\n     }\n \n@@ -1479,14 +1479,14 @@ impl<'a> LoweringContext<'a> {\n                 let vdata = self.lower_variant_data(vdata);\n                 hir::ItemUnion(vdata, self.lower_generics(generics))\n             }\n-            ItemKind::DefaultImpl(unsafety, ref trait_ref) => {\n+            ItemKind::AutoImpl(unsafety, ref trait_ref) => {\n                 let trait_ref = self.lower_trait_ref(trait_ref);\n \n                 if let Def::Trait(def_id) = trait_ref.path.def {\n-                    self.trait_default_impl.insert(def_id, id);\n+                    self.trait_auto_impl.insert(def_id, id);\n                 }\n \n-                hir::ItemDefaultImpl(self.lower_unsafety(unsafety),\n+                hir::ItemAutoImpl(self.lower_unsafety(unsafety),\n                                      trait_ref)\n             }\n             ItemKind::Impl(unsafety,\n@@ -1515,10 +1515,11 @@ impl<'a> LoweringContext<'a> {\n                               self.lower_ty(ty),\n                               new_impl_items)\n             }\n-            ItemKind::Trait(unsafety, ref generics, ref bounds, ref items) => {\n+            ItemKind::Trait(is_auto, unsafety, ref generics, ref bounds, ref items) => {\n                 let bounds = self.lower_bounds(bounds);\n                 let items = items.iter().map(|item| self.lower_trait_item_ref(item)).collect();\n-                hir::ItemTrait(self.lower_unsafety(unsafety),\n+                hir::ItemTrait(self.lower_is_auto(is_auto),\n+                               self.lower_unsafety(unsafety),\n                                self.lower_generics(generics),\n                                bounds,\n                                items)\n@@ -1741,6 +1742,13 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n+    fn lower_is_auto(&mut self, a: IsAuto) -> hir::IsAuto {\n+        match a {\n+            IsAuto::Yes => hir::IsAuto::Yes,\n+            IsAuto::No => hir::IsAuto::No,\n+        }\n+    }\n+\n     fn lower_unsafety(&mut self, u: Unsafety) -> hir::Unsafety {\n         match u {\n             Unsafety::Unsafe => hir::Unsafety::Unsafe,"}, {"sha": "5c1e74dcf43b9771065263be7b92c5452557a474", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -71,7 +71,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n                 impl_items: _,\n                 bodies: _,\n                 trait_impls: _,\n-                trait_default_impl: _,\n+                trait_auto_impl: _,\n                 body_ids: _,\n             } = *krate;\n "}, {"sha": "d8590c1de94e927ce1319b620e3064a21472a18d", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -104,7 +104,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         // Pick the def data. This need not be unique, but the more\n         // information we encapsulate into\n         let def_data = match i.node {\n-            ItemKind::DefaultImpl(..) | ItemKind::Impl(..) =>\n+            ItemKind::AutoImpl(..) | ItemKind::Impl(..) =>\n                 DefPathData::Impl,\n             ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) | ItemKind::Trait(..) |\n             ItemKind::ExternCrate(..) | ItemKind::ForeignMod(..) | ItemKind::Ty(..) =>"}, {"sha": "1236602aecf55ab9c04b4e4c856e1fd900c35666", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -474,16 +474,16 @@ impl<'hir> Map<'hir> {\n         self.forest.krate.trait_impls.get(&trait_did).map_or(&[], |xs| &xs[..])\n     }\n \n-    pub fn trait_default_impl(&self, trait_did: DefId) -> Option<NodeId> {\n+    pub fn trait_auto_impl(&self, trait_did: DefId) -> Option<NodeId> {\n         self.dep_graph.read(DepNode::new_no_params(DepKind::AllLocalTraitImpls));\n \n         // NB: intentionally bypass `self.forest.krate()` so that we\n         // do not trigger a read of the whole krate here\n-        self.forest.krate.trait_default_impl.get(&trait_did).cloned()\n+        self.forest.krate.trait_auto_impl.get(&trait_did).cloned()\n     }\n \n     pub fn trait_is_auto(&self, trait_did: DefId) -> bool {\n-        self.trait_default_impl(trait_did).is_some()\n+        self.trait_auto_impl(trait_did).is_some()\n     }\n \n     /// Get the attributes on the krate. This is preferable to\n@@ -1140,7 +1140,7 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n                 ItemUnion(..) => \"union\",\n                 ItemTrait(..) => \"trait\",\n                 ItemImpl(..) => \"impl\",\n-                ItemDefaultImpl(..) => \"default impl\",\n+                ItemAutoImpl(..) => \"default impl\",\n             };\n             format!(\"{} {}{}\", item_str, path_str(), id_str)\n         }"}, {"sha": "c9b1d70e7b60df57d2ebecc1c137384714a6ad97", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -499,7 +499,7 @@ pub struct Crate {\n     pub impl_items: BTreeMap<ImplItemId, ImplItem>,\n     pub bodies: BTreeMap<BodyId, Body>,\n     pub trait_impls: BTreeMap<DefId, Vec<NodeId>>,\n-    pub trait_default_impl: BTreeMap<DefId, NodeId>,\n+    pub trait_auto_impl: BTreeMap<DefId, NodeId>,\n \n     /// A list of the body ids written out in the order in which they\n     /// appear in the crate. If you're going to process all the bodies\n@@ -1500,6 +1500,13 @@ pub struct FnDecl {\n     pub has_implicit_self: bool,\n }\n \n+/// Is the trait definition an auto trait?\n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub enum IsAuto {\n+    Yes,\n+    No\n+}\n+\n #[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Unsafety {\n     Unsafe,\n@@ -1811,12 +1818,12 @@ pub enum Item_ {\n     /// A union definition, e.g. `union Foo<A, B> {x: A, y: B}`\n     ItemUnion(VariantData, Generics),\n     /// Represents a Trait Declaration\n-    ItemTrait(Unsafety, Generics, TyParamBounds, HirVec<TraitItemRef>),\n+    ItemTrait(IsAuto, Unsafety, Generics, TyParamBounds, HirVec<TraitItemRef>),\n \n-    // Default trait implementations\n+    /// Auto trait implementations\n     ///\n     /// `impl Trait for .. {}`\n-    ItemDefaultImpl(Unsafety, TraitRef),\n+    ItemAutoImpl(Unsafety, TraitRef),\n     /// An implementation, eg `impl<A> Trait for Foo { .. }`\n     ItemImpl(Unsafety,\n              ImplPolarity,\n@@ -1844,7 +1851,7 @@ impl Item_ {\n             ItemUnion(..) => \"union\",\n             ItemTrait(..) => \"trait\",\n             ItemImpl(..) |\n-            ItemDefaultImpl(..) => \"item\",\n+            ItemAutoImpl(..) => \"item\",\n         }\n     }\n \n@@ -1864,7 +1871,7 @@ impl Item_ {\n             ItemEnum(_, ref generics) |\n             ItemStruct(_, ref generics) |\n             ItemUnion(_, ref generics) |\n-            ItemTrait(_, ref generics, _, _) |\n+            ItemTrait(_, _, ref generics, _, _) |\n             ItemImpl(_, _, _, ref generics, _, _, _)=> generics,\n             _ => return None\n         })"}, {"sha": "7b4881f5486dc0b756ad233a7a16176a5a10e951", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -660,7 +660,7 @@ impl<'a> State<'a> {\n                 self.head(&visibility_qualified(&item.vis, \"union\"))?;\n                 self.print_struct(struct_def, generics, item.name, item.span, true)?;\n             }\n-            hir::ItemDefaultImpl(unsafety, ref trait_ref) => {\n+            hir::ItemAutoImpl(unsafety, ref trait_ref) => {\n                 self.head(\"\")?;\n                 self.print_visibility(&item.vis)?;\n                 self.print_unsafety(unsafety)?;\n@@ -717,9 +717,10 @@ impl<'a> State<'a> {\n                 }\n                 self.bclose(item.span)?;\n             }\n-            hir::ItemTrait(unsafety, ref generics, ref bounds, ref trait_items) => {\n+            hir::ItemTrait(is_auto, unsafety, ref generics, ref bounds, ref trait_items) => {\n                 self.head(\"\")?;\n                 self.print_visibility(&item.vis)?;\n+                self.print_is_auto(is_auto)?;\n                 self.print_unsafety(unsafety)?;\n                 self.word_nbsp(\"trait\")?;\n                 self.print_name(item.name)?;\n@@ -2274,6 +2275,13 @@ impl<'a> State<'a> {\n             hir::Unsafety::Unsafe => self.word_nbsp(\"unsafe\"),\n         }\n     }\n+\n+    pub fn print_is_auto(&mut self, s: hir::IsAuto) -> io::Result<()> {\n+        match s {\n+            hir::IsAuto::Yes => self.word_nbsp(\"auto\"),\n+            hir::IsAuto::No => Ok(()),\n+        }\n+    }\n }\n \n // Dup'ed from parse::classify, but adapted for the HIR."}, {"sha": "f0fe6205fb6d0bfb29624df39c7cd28c64a07103", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -898,7 +898,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for hir::Item {\n             hir::ItemForeignMod(..)  |\n             hir::ItemGlobalAsm(..)   |\n             hir::ItemMod(..)         |\n-            hir::ItemDefaultImpl(..) |\n+            hir::ItemAutoImpl(..) |\n             hir::ItemTrait(..)       |\n             hir::ItemImpl(..)        |\n             hir::ItemTy(..)          |\n@@ -944,8 +944,8 @@ impl_stable_hash_for!(enum hir::Item_ {\n     ItemEnum(enum_def, generics),\n     ItemStruct(variant_data, generics),\n     ItemUnion(variant_data, generics),\n-    ItemTrait(unsafety, generics, bounds, item_refs),\n-    ItemDefaultImpl(unsafety, trait_ref),\n+    ItemTrait(is_auto, unsafety, generics, bounds, item_refs),\n+    ItemAutoImpl(unsafety, trait_ref),\n     ItemImpl(unsafety, impl_polarity, impl_defaultness, generics, trait_ref, ty, impl_item_refs)\n });\n \n@@ -1126,6 +1126,10 @@ impl_stable_hash_for!(enum hir::Mutability {\n     MutImmutable\n });\n \n+impl_stable_hash_for!(enum hir::IsAuto {\n+    Yes,\n+    No\n+});\n \n impl_stable_hash_for!(enum hir::Unsafety {\n     Unsafe,"}, {"sha": "e7627b110fae4c3a414958c7d60bd819cf3b20bc", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -731,13 +731,13 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for ty::TraitDef {\n             def_id: _,\n             unsafety,\n             paren_sugar,\n-            has_default_impl,\n+            has_auto_impl,\n             def_path_hash,\n         } = *self;\n \n         unsafety.hash_stable(hcx, hasher);\n         paren_sugar.hash_stable(hcx, hasher);\n-        has_default_impl.hash_stable(hcx, hasher);\n+        has_auto_impl.hash_stable(hcx, hasher);\n         def_path_hash.hash_stable(hcx, hasher);\n     }\n }\n@@ -856,7 +856,7 @@ for traits::Vtable<'gcx, N> where N: HashStable<StableHashingContext<'gcx>> {\n \n         match self {\n             &VtableImpl(ref table_impl) => table_impl.hash_stable(hcx, hasher),\n-            &VtableDefaultImpl(ref table_def_impl) => table_def_impl.hash_stable(hcx, hasher),\n+            &VtableAutoImpl(ref table_def_impl) => table_def_impl.hash_stable(hcx, hasher),\n             &VtableParam(ref table_param) => table_param.hash_stable(hcx, hasher),\n             &VtableObject(ref table_obj) => table_obj.hash_stable(hcx, hasher),\n             &VtableBuiltin(ref table_builtin) => table_builtin.hash_stable(hcx, hasher),\n@@ -884,11 +884,11 @@ for traits::VtableImplData<'gcx, N> where N: HashStable<StableHashingContext<'gc\n }\n \n impl<'gcx, N> HashStable<StableHashingContext<'gcx>>\n-for traits::VtableDefaultImplData<N> where N: HashStable<StableHashingContext<'gcx>> {\n+for traits::VtableAutoImplData<N> where N: HashStable<StableHashingContext<'gcx>> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'gcx>,\n                                           hasher: &mut StableHasher<W>) {\n-        let traits::VtableDefaultImplData {\n+        let traits::VtableAutoImplData {\n             trait_def_id,\n             ref nested,\n         } = *self;"}, {"sha": "a42ff543227a8f61e9e055de58fa46c740edf6fa", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -562,7 +562,7 @@ impl<'a, 'tcx> Visitor<'tcx> for DeadVisitor<'a, 'tcx> {\n                 hir::ItemStruct(..) |\n                 hir::ItemUnion(..) |\n                 hir::ItemTrait(..) |\n-                hir::ItemDefaultImpl(..) |\n+                hir::ItemAutoImpl(..) |\n                 hir::ItemImpl(..) => self.tcx.sess.codemap().def_span(item.span),\n                 _ => item.span,\n             };"}, {"sha": "d5f26d1117c5be8fc3ae940df6e25a3c21f383df", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -270,7 +270,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                     hir::ItemMod(..) | hir::ItemForeignMod(..) |\n                     hir::ItemImpl(..) | hir::ItemTrait(..) |\n                     hir::ItemStruct(..) | hir::ItemEnum(..) |\n-                    hir::ItemUnion(..) | hir::ItemDefaultImpl(..) |\n+                    hir::ItemUnion(..) | hir::ItemAutoImpl(..) |\n                     hir::ItemGlobalAsm(..) => {}\n                 }\n             }"}, {"sha": "4c7ce4c09e25b4372b935ad8e4d845f33635d108", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -313,7 +313,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             hir::ItemExternCrate(_) |\n             hir::ItemUse(..) |\n             hir::ItemMod(..) |\n-            hir::ItemDefaultImpl(..) |\n+            hir::ItemAutoImpl(..) |\n             hir::ItemForeignMod(..) |\n             hir::ItemGlobalAsm(..) => {\n                 // These sorts of items have no lifetime parameters at all.\n@@ -332,7 +332,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             hir::ItemEnum(_, ref generics) |\n             hir::ItemStruct(_, ref generics) |\n             hir::ItemUnion(_, ref generics) |\n-            hir::ItemTrait(_, ref generics, ..) |\n+            hir::ItemTrait(_, _, ref generics, ..) |\n             hir::ItemImpl(_, _, _, ref generics, ..) => {\n                 // These kinds of items have only early bound lifetime parameters.\n                 let mut index = if let hir::ItemTrait(..) = item.node {\n@@ -688,7 +688,7 @@ fn compute_object_lifetime_defaults(sess: &Session, hir_map: &Map)\n             hir::ItemUnion(_, ref generics) |\n             hir::ItemEnum(_, ref generics) |\n             hir::ItemTy(_, ref generics) |\n-            hir::ItemTrait(_, ref generics, ..) => {\n+            hir::ItemTrait(_, _, ref generics, ..) => {\n                 let result = object_lifetime_defaults_for_item(hir_map, generics);\n \n                 // Debugging aid.\n@@ -844,7 +844,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 index += 1; // Self comes first.\n             }\n             match parent.node {\n-                hir::ItemTrait(_, ref generics, ..) |\n+                hir::ItemTrait(_, _, ref generics, ..) |\n                 hir::ItemImpl(_, _, _, ref generics, ..) => {\n                     index += (generics.lifetimes.len() + generics.ty_params.len()) as u32;\n                 }"}, {"sha": "c08fe187f99bfee2e56b95c5d5a7ea4d77b68468", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -288,11 +288,11 @@ pub enum Vtable<'tcx, N> {\n     /// Vtable identifying a particular impl.\n     VtableImpl(VtableImplData<'tcx, N>),\n \n-    /// Vtable for default trait implementations\n+    /// Vtable for auto trait implementations\n     /// This carries the information and nested obligations with regards\n-    /// to a default implementation for a trait `Trait`. The nested obligations\n+    /// to an auto implementation for a trait `Trait`. The nested obligations\n     /// ensure the trait implementation holds for all the constituent types.\n-    VtableDefaultImpl(VtableDefaultImplData<N>),\n+    VtableAutoImpl(VtableAutoImplData<N>),\n \n     /// Successful resolution to an obligation provided by the caller\n     /// for some type parameter. The `Vec<N>` represents the\n@@ -354,7 +354,7 @@ pub struct VtableClosureData<'tcx, N> {\n }\n \n #[derive(Clone)]\n-pub struct VtableDefaultImplData<N> {\n+pub struct VtableAutoImplData<N> {\n     pub trait_def_id: DefId,\n     pub nested: Vec<N>\n }\n@@ -758,7 +758,7 @@ impl<'tcx, N> Vtable<'tcx, N> {\n             VtableImpl(i) => i.nested,\n             VtableParam(n) => n,\n             VtableBuiltin(i) => i.nested,\n-            VtableDefaultImpl(d) => d.nested,\n+            VtableAutoImpl(d) => d.nested,\n             VtableClosure(c) => c.nested,\n             VtableGenerator(c) => c.nested,\n             VtableObject(d) => d.nested,\n@@ -771,7 +771,7 @@ impl<'tcx, N> Vtable<'tcx, N> {\n             &mut VtableImpl(ref mut i) => &mut i.nested,\n             &mut VtableParam(ref mut n) => n,\n             &mut VtableBuiltin(ref mut i) => &mut i.nested,\n-            &mut VtableDefaultImpl(ref mut d) => &mut d.nested,\n+            &mut VtableAutoImpl(ref mut d) => &mut d.nested,\n             &mut VtableGenerator(ref mut c) => &mut c.nested,\n             &mut VtableClosure(ref mut c) => &mut c.nested,\n             &mut VtableObject(ref mut d) => &mut d.nested,\n@@ -795,7 +795,7 @@ impl<'tcx, N> Vtable<'tcx, N> {\n                 vtable_base: o.vtable_base,\n                 nested: o.nested.into_iter().map(f).collect(),\n             }),\n-            VtableDefaultImpl(d) => VtableDefaultImpl(VtableDefaultImplData {\n+            VtableAutoImpl(d) => VtableAutoImpl(VtableAutoImplData {\n                 trait_def_id: d.trait_def_id,\n                 nested: d.nested.into_iter().map(f).collect(),\n             }),"}, {"sha": "9c56df058c3dd0fd2a1bb4dff47e8b45b9f52b96", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -1116,7 +1116,7 @@ fn assemble_candidates_from_impls<'cx, 'gcx, 'tcx>(\n                 // projection. And the projection where clause is handled\n                 // in `assemble_candidates_from_param_env`.\n             }\n-            super::VtableDefaultImpl(..) |\n+            super::VtableAutoImpl(..) |\n             super::VtableBuiltin(..) => {\n                 // These traits have no associated types.\n                 span_bug!(\n@@ -1182,7 +1182,7 @@ fn confirm_select_candidate<'cx, 'gcx, 'tcx>(\n             confirm_fn_pointer_candidate(selcx, obligation, data),\n         super::VtableObject(_) =>\n             confirm_object_candidate(selcx, obligation, obligation_trait_ref),\n-        super::VtableDefaultImpl(..) |\n+        super::VtableAutoImpl(..) |\n         super::VtableParam(..) |\n         super::VtableBuiltin(..) =>\n             // we don't create Select candidates with this kind of resolution"}, {"sha": "7716770d318bae1b47bf6d4d763240b73c199607", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -25,9 +25,9 @@ use super::TraitNotObjectSafe;\n use super::Selection;\n use super::SelectionResult;\n use super::{VtableBuiltin, VtableImpl, VtableParam, VtableClosure, VtableGenerator,\n-            VtableFnPointer, VtableObject, VtableDefaultImpl};\n+            VtableFnPointer, VtableObject, VtableAutoImpl};\n use super::{VtableImplData, VtableObjectData, VtableBuiltinData, VtableGeneratorData,\n-            VtableClosureData, VtableDefaultImplData, VtableFnPointerData};\n+            VtableClosureData, VtableAutoImplData, VtableFnPointerData};\n use super::util;\n \n use dep_graph::{DepNodeIndex, DepKind};\n@@ -225,7 +225,7 @@ enum SelectionCandidate<'tcx> {\n     BuiltinCandidate { has_nested: bool },\n     ParamCandidate(ty::PolyTraitRef<'tcx>),\n     ImplCandidate(DefId),\n-    DefaultImplCandidate(DefId),\n+    AutoImplCandidate(DefId),\n \n     /// This is a trait matching with a projected type as `Self`, and\n     /// we found an applicable bound in the trait definition.\n@@ -260,7 +260,7 @@ impl<'a, 'tcx> ty::Lift<'tcx> for SelectionCandidate<'a> {\n                 }\n             }\n             ImplCandidate(def_id) => ImplCandidate(def_id),\n-            DefaultImplCandidate(def_id) => DefaultImplCandidate(def_id),\n+            AutoImplCandidate(def_id) => AutoImplCandidate(def_id),\n             ProjectionCandidate => ProjectionCandidate,\n             FnPointerCandidate => FnPointerCandidate,\n             ObjectCandidate => ObjectCandidate,\n@@ -910,7 +910,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     fn coinductive_predicate(&self, predicate: ty::Predicate<'tcx>) -> bool {\n         let result = match predicate {\n             ty::Predicate::Trait(ref data) => {\n-                self.tcx().trait_has_default_impl(data.def_id())\n+                self.tcx().trait_is_auto(data.def_id())\n             }\n             _ => {\n                 false\n@@ -1368,10 +1368,10 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n         self.assemble_candidates_from_projected_tys(obligation, &mut candidates);\n         self.assemble_candidates_from_caller_bounds(stack, &mut candidates)?;\n-        // Default implementations have lower priority, so we only\n+        // Auto implementations have lower priority, so we only\n         // consider triggering a default if there is no other impl that can apply.\n         if candidates.vec.is_empty() {\n-            self.assemble_candidates_from_default_impls(obligation, &mut candidates)?;\n+            self.assemble_candidates_from_auto_impls(obligation, &mut candidates)?;\n         }\n         debug!(\"candidate list size: {}\", candidates.vec.len());\n         Ok(candidates)\n@@ -1686,18 +1686,18 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         Ok(())\n     }\n \n-    fn assemble_candidates_from_default_impls(&mut self,\n+    fn assemble_candidates_from_auto_impls(&mut self,\n                                               obligation: &TraitObligation<'tcx>,\n                                               candidates: &mut SelectionCandidateSet<'tcx>)\n                                               -> Result<(), SelectionError<'tcx>>\n     {\n         // OK to skip binder here because the tests we do below do not involve bound regions\n         let self_ty = *obligation.self_ty().skip_binder();\n-        debug!(\"assemble_candidates_from_default_impls(self_ty={:?})\", self_ty);\n+        debug!(\"assemble_candidates_from_auto_impls(self_ty={:?})\", self_ty);\n \n         let def_id = obligation.predicate.def_id();\n \n-        if self.tcx().trait_has_default_impl(def_id) {\n+        if self.tcx().trait_is_auto(def_id) {\n             match self_ty.sty {\n                 ty::TyDynamic(..) => {\n                     // For object types, we don't know what the closed\n@@ -1728,11 +1728,11 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                     // this path.\n                 }\n                 ty::TyInfer(ty::TyVar(_)) => {\n-                    // the defaulted impl might apply, we don't know\n+                    // the auto impl might apply, we don't know\n                     candidates.ambiguous = true;\n                 }\n                 _ => {\n-                    candidates.vec.push(DefaultImplCandidate(def_id.clone()))\n+                    candidates.vec.push(AutoImplCandidate(def_id.clone()))\n                 }\n             }\n         }\n@@ -1933,7 +1933,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         match other.candidate {\n             ObjectCandidate |\n             ParamCandidate(_) | ProjectionCandidate => match victim.candidate {\n-                DefaultImplCandidate(..) => {\n+                AutoImplCandidate(..) => {\n                     bug!(\n                         \"default implementations shouldn't be recorded \\\n                          when there are other valid candidates\");\n@@ -2282,9 +2282,9 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 Ok(VtableParam(obligations))\n             }\n \n-            DefaultImplCandidate(trait_def_id) => {\n-                let data = self.confirm_default_impl_candidate(obligation, trait_def_id);\n-                Ok(VtableDefaultImpl(data))\n+            AutoImplCandidate(trait_def_id) => {\n+                let data = self.confirm_auto_impl_candidate(obligation, trait_def_id);\n+                Ok(VtableAutoImpl(data))\n             }\n \n             ImplCandidate(impl_def_id) => {\n@@ -2417,29 +2417,29 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     ///\n     /// 1. For each constituent type `Y` in `X`, `Y : Foo` holds\n     /// 2. For each where-clause `C` declared on `Foo`, `[Self => X] C` holds.\n-    fn confirm_default_impl_candidate(&mut self,\n+    fn confirm_auto_impl_candidate(&mut self,\n                                       obligation: &TraitObligation<'tcx>,\n                                       trait_def_id: DefId)\n-                                      -> VtableDefaultImplData<PredicateObligation<'tcx>>\n+                                      -> VtableAutoImplData<PredicateObligation<'tcx>>\n     {\n-        debug!(\"confirm_default_impl_candidate({:?}, {:?})\",\n+        debug!(\"confirm_auto_impl_candidate({:?}, {:?})\",\n                obligation,\n                trait_def_id);\n \n         // binder is moved below\n         let self_ty = self.infcx.shallow_resolve(obligation.predicate.skip_binder().self_ty());\n         let types = self.constituent_types_for_ty(self_ty);\n-        self.vtable_default_impl(obligation, trait_def_id, ty::Binder(types))\n+        self.vtable_auto_impl(obligation, trait_def_id, ty::Binder(types))\n     }\n \n-    /// See `confirm_default_impl_candidate`\n-    fn vtable_default_impl(&mut self,\n+    /// See `confirm_auto_impl_candidate`\n+    fn vtable_auto_impl(&mut self,\n                            obligation: &TraitObligation<'tcx>,\n                            trait_def_id: DefId,\n                            nested: ty::Binder<Vec<Ty<'tcx>>>)\n-                           -> VtableDefaultImplData<PredicateObligation<'tcx>>\n+                           -> VtableAutoImplData<PredicateObligation<'tcx>>\n     {\n-        debug!(\"vtable_default_impl: nested={:?}\", nested);\n+        debug!(\"vtable_auto_impl: nested={:?}\", nested);\n \n         let cause = obligation.derived_cause(BuiltinDerivedObligation);\n         let mut obligations = self.collect_predicates_for_types(\n@@ -2465,9 +2465,9 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n         obligations.extend(trait_obligations);\n \n-        debug!(\"vtable_default_impl: obligations={:?}\", obligations);\n+        debug!(\"vtable_auto_impl: obligations={:?}\", obligations);\n \n-        VtableDefaultImplData {\n+        VtableAutoImplData {\n             trait_def_id,\n             nested: obligations\n         }"}, {"sha": "fd93aa162a612b291f04c338c4436916c1c1f95b", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -47,7 +47,7 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::Vtable<'tcx, N> {\n             super::VtableImpl(ref v) =>\n                 write!(f, \"{:?}\", v),\n \n-            super::VtableDefaultImpl(ref t) =>\n+            super::VtableAutoImpl(ref t) =>\n                 write!(f, \"{:?}\", t),\n \n             super::VtableClosure(ref d) =>\n@@ -104,9 +104,9 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableBuiltinData<N> {\n     }\n }\n \n-impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableDefaultImplData<N> {\n+impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableAutoImplData<N> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"VtableDefaultImplData(trait_def_id={:?}, nested={:?})\",\n+        write!(f, \"VtableAutoImplData(trait_def_id={:?}, nested={:?})\",\n                self.trait_def_id,\n                self.nested)\n     }\n@@ -292,7 +292,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::Vtable<'a, ()> {\n                     })\n                 })\n             }\n-            traits::VtableDefaultImpl(t) => Some(traits::VtableDefaultImpl(t)),\n+            traits::VtableAutoImpl(t) => Some(traits::VtableAutoImpl(t)),\n             traits::VtableGenerator(traits::VtableGeneratorData {\n                 closure_def_id,\n                 substs,\n@@ -407,9 +407,9 @@ impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::VtableClosureDa\n     }\n }\n \n-impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::VtableDefaultImplData<N> {\n+impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::VtableAutoImplData<N> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        traits::VtableDefaultImplData {\n+        traits::VtableAutoImplData {\n             trait_def_id: self.trait_def_id,\n             nested: self.nested.fold_with(folder),\n         }\n@@ -463,7 +463,7 @@ impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::Vtable<'tcx, N>\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         match *self {\n             traits::VtableImpl(ref v) => traits::VtableImpl(v.fold_with(folder)),\n-            traits::VtableDefaultImpl(ref t) => traits::VtableDefaultImpl(t.fold_with(folder)),\n+            traits::VtableAutoImpl(ref t) => traits::VtableAutoImpl(t.fold_with(folder)),\n             traits::VtableGenerator(ref d) => {\n                 traits::VtableGenerator(d.fold_with(folder))\n             }\n@@ -482,7 +482,7 @@ impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::Vtable<'tcx, N>\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         match *self {\n             traits::VtableImpl(ref v) => v.visit_with(visitor),\n-            traits::VtableDefaultImpl(ref t) => t.visit_with(visitor),\n+            traits::VtableAutoImpl(ref t) => t.visit_with(visitor),\n             traits::VtableGenerator(ref d) => d.visit_with(visitor),\n             traits::VtableClosure(ref d) => d.visit_with(visitor),\n             traits::VtableFnPointer(ref d) => d.visit_with(visitor),"}, {"sha": "253bee167c482c95ad9cdd629917993141c8e88c", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -256,7 +256,7 @@ fn resolve_associated_item<'a, 'tcx>(\n                 None\n             }\n         }\n-        traits::VtableDefaultImpl(..) | traits::VtableParam(..) => None\n+        traits::VtableAutoImpl(..) | traits::VtableParam(..) => None\n     }\n }\n "}, {"sha": "24c19bfc3f3f00f7ab78ad843457db824fde07b9", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -218,7 +218,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         // Always use types for non-local impls, where types are always\n         // available, and filename/line-number is mostly uninteresting.\n-        let use_types = !self.is_default_impl(impl_def_id) && (!impl_def_id.is_local() || {\n+        let use_types = !self.is_auto_impl(impl_def_id) && (!impl_def_id.is_local() || {\n             // Otherwise, use filename/line-number if forced.\n             let force_no_types = FORCE_IMPL_FILENAME_LINE.with(|f| f.get());\n             !force_no_types"}, {"sha": "7d8586741fb156557ea7bdd3de6a7afdb26c0b52", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -113,8 +113,8 @@ define_maps! { <'tcx>\n     /// True if this is a foreign item (i.e., linked via `extern { ... }`).\n     [] fn is_foreign_item: IsForeignItem(DefId) -> bool,\n \n-    /// True if this is a default impl (aka impl Foo for ..)\n-    [] fn is_default_impl: IsDefaultImpl(DefId) -> bool,\n+    /// True if this is an auto impl (aka impl Foo for ..)\n+    [] fn is_auto_impl: IsAutoImpl(DefId) -> bool,\n \n     /// Get a map with the variance of every item; use `item_variance`\n     /// instead."}, {"sha": "cc698cf03da98913131c6d88a51551d8510e8984", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -731,7 +731,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::SuperPredicatesOfItem => { force!(super_predicates_of, def_id!()); }\n         DepKind::TraitDefOfItem => { force!(trait_def, def_id!()); }\n         DepKind::AdtDefOfItem => { force!(adt_def, def_id!()); }\n-        DepKind::IsDefaultImpl => { force!(is_default_impl, def_id!()); }\n+        DepKind::IsAutoImpl => { force!(is_auto_impl, def_id!()); }\n         DepKind::ImplTraitRef => { force!(impl_trait_ref, def_id!()); }\n         DepKind::ImplPolarity => { force!(impl_polarity, def_id!()); }\n         DepKind::ClosureKind => { force!(closure_kind, def_id!()); }"}, {"sha": "81827192cf81457302c2f43763c41cc692389a1a", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -2308,8 +2308,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.get_attrs(did).iter().any(|item| item.check_name(attr))\n     }\n \n-    pub fn trait_has_default_impl(self, trait_def_id: DefId) -> bool {\n-        self.trait_def(trait_def_id).has_default_impl\n+    /// Returns true if this is an `auto trait`.\n+    ///\n+    /// NB. For a limited time, also returns true if `impl Trait for .. { }` is in the code-base.\n+    pub fn trait_is_auto(self, trait_def_id: DefId) -> bool {\n+        self.trait_def(trait_def_id).has_auto_impl\n     }\n \n     pub fn generator_layout(self, def_id: DefId) -> &'tcx GeneratorLayout<'tcx> {"}, {"sha": "0fbf9f1bd587bffc070f41544d43532dc455089c", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -34,7 +34,7 @@ pub struct TraitDef {\n     /// be usable with the sugar (or without it).\n     pub paren_sugar: bool,\n \n-    pub has_default_impl: bool,\n+    pub has_auto_impl: bool,\n \n     /// The ICH of this trait's DefPath, cached here so it doesn't have to be\n     /// recomputed all the time.\n@@ -51,14 +51,14 @@ impl<'a, 'gcx, 'tcx> TraitDef {\n     pub fn new(def_id: DefId,\n                unsafety: hir::Unsafety,\n                paren_sugar: bool,\n-               has_default_impl: bool,\n+               has_auto_impl: bool,\n                def_path_hash: DefPathHash)\n                -> TraitDef {\n         TraitDef {\n             def_id,\n             paren_sugar,\n             unsafety,\n-            has_default_impl,\n+            has_auto_impl,\n             def_path_hash,\n         }\n     }"}, {"sha": "5ff75351b635beedd99bb5503e17953c46d02341", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -253,7 +253,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n                 hir::ItemUnion(..) |\n                 hir::ItemTrait(..) |\n                 hir::ItemImpl(..) |\n-                hir::ItemDefaultImpl(..) => None,\n+                hir::ItemAutoImpl(..) => None,\n \n                 hir::ItemMod(ref m) => search_mod(this, m, idx, names),\n             };"}, {"sha": "e871c0dbdab138ad24ca5d169e1f7448c7cbaa55", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -409,7 +409,7 @@ impl<'a, 'tcx> DirtyCleanVisitor<'a, 'tcx> {\n                     //HirItem::ItemTrait(..) => (\"ItemTrait\", LABELS_TRAIT),\n \n                     // `impl Trait for .. {}`\n-                    HirItem::ItemDefaultImpl(..) => (\"ItemDefaultImpl\", LABELS_IMPL),\n+                    HirItem::ItemAutoImpl(..) => (\"ItemAutoImpl\", LABELS_IMPL),\n \n                     // An implementation, eg `impl<A> Trait for Foo { .. }`\n                     HirItem::ItemImpl(..) => (\"ItemImpl\", LABELS_IMPL),"}, {"sha": "d14a6943fc11279f55bcc66ce67f58f5156a71d7", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -23,7 +23,7 @@ use rustc::hir::intravisit::FnKind;\n \n #[derive(PartialEq)]\n pub enum MethodLateContext {\n-    TraitDefaultImpl,\n+    TraitAutoImpl,\n     TraitImpl,\n     PlainImpl,\n }\n@@ -32,7 +32,7 @@ pub fn method_context(cx: &LateContext, id: ast::NodeId) -> MethodLateContext {\n     let def_id = cx.tcx.hir.local_def_id(id);\n     let item = cx.tcx.associated_item(def_id);\n     match item.container {\n-        ty::TraitContainer(..) => MethodLateContext::TraitDefaultImpl,\n+        ty::TraitContainer(..) => MethodLateContext::TraitAutoImpl,\n         ty::ImplContainer(cid) => {\n             match cx.tcx.impl_trait_ref(cid) {\n                 Some(_) => MethodLateContext::TraitImpl,\n@@ -245,7 +245,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n                     MethodLateContext::PlainImpl => {\n                         self.check_snake_case(cx, \"method\", &name.as_str(), Some(span))\n                     }\n-                    MethodLateContext::TraitDefaultImpl => {\n+                    MethodLateContext::TraitAutoImpl => {\n                         self.check_snake_case(cx, \"trait method\", &name.as_str(), Some(span))\n                     }\n                     _ => (),"}, {"sha": "07874a8cc69dd0eaae4b3319d6d514f5425dec27", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -55,6 +55,31 @@ use bad_style::{MethodLateContext, method_context};\n // hardwired lints from librustc\n pub use lint::builtin::*;\n \n+declare_lint! {\n+    pub AUTO_IMPL,\n+    Deny,\n+    \"The form `impl Foo for .. {}` will be removed, please use `auto trait Foo {}`\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct AutoImpl;\n+\n+impl LintPass for AutoImpl {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(AUTO_IMPL)\n+    }\n+}\n+\n+impl EarlyLintPass for AutoImpl {\n+    fn check_item(&mut self, cx: &EarlyContext, item: &ast::Item) {\n+        let msg = \"The form `impl Foo for .. {}` will be removed, please use `auto trait Foo {}`\";\n+        match item.node {\n+            ast::ItemKind::AutoImpl(..) => cx.span_lint(AUTO_IMPL, item.span, msg),\n+            _ => ()\n+        }\n+     }\n+}\n+\n declare_lint! {\n     WHILE_TRUE,\n     Warn,\n@@ -228,7 +253,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnsafeCode {\n \n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n         match it.node {\n-            hir::ItemTrait(hir::Unsafety::Unsafe, ..) => {\n+            hir::ItemTrait(_, hir::Unsafety::Unsafe, ..) => {\n                 self.report_unsafe(cx, it.span, \"declaration of an `unsafe` trait\")\n             }\n "}, {"sha": "1a8ad9718cfabafcb85c5892535b8c3318b39e76", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -109,6 +109,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                        AnonymousParameters,\n                        IllegalFloatLiteralPattern,\n                        UnusedDocComment,\n+                       AutoImpl,\n                        );\n \n     add_early_builtin_with_new!(sess,\n@@ -182,6 +183,10 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     // - Eventually, remove lint\n     store.register_future_incompatible(sess,\n                                        vec![\n+        FutureIncompatibleInfo {\n+            id: LintId::of(AUTO_IMPL),\n+            reference: \"issue #13231 <https://github.com/rust-lang/rust/issues/13231>\",\n+        },\n         FutureIncompatibleInfo {\n             id: LintId::of(PRIVATE_IN_PUBLIC),\n             reference: \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\","}, {"sha": "97c00aede90cfd229b3948d14d618fb37395df19", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -144,7 +144,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     inherent_impls => { Rc::new(cdata.get_inherent_implementations_for_type(def_id.index)) }\n     is_const_fn => { cdata.is_const_fn(def_id.index) }\n     is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n-    is_default_impl => { cdata.is_default_impl(def_id.index) }\n+    is_auto_impl => { cdata.is_auto_impl(def_id.index) }\n     describe_def => { cdata.get_def(def_id.index) }\n     def_span => { cdata.get_span(def_id.index, &tcx.sess) }\n     lookup_stability => {"}, {"sha": "fa9b166ca942ed2c4bf12cf1339df788ef0afb1f", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -459,7 +459,7 @@ impl<'tcx> EntryKind<'tcx> {\n \n             EntryKind::ForeignMod |\n             EntryKind::Impl(_) |\n-            EntryKind::DefaultImpl(_) |\n+            EntryKind::AutoImpl(_) |\n             EntryKind::Field |\n             EntryKind::Generator(_) |\n             EntryKind::Closure(_) => return None,\n@@ -529,7 +529,7 @@ impl<'a, 'tcx> CrateMetadata {\n         ty::TraitDef::new(self.local_def_id(item_id),\n                           data.unsafety,\n                           data.paren_sugar,\n-                          data.has_default_impl,\n+                          data.has_auto_impl,\n                           self.def_path_table.def_path_hash(item_id))\n     }\n \n@@ -735,7 +735,7 @@ impl<'a, 'tcx> CrateMetadata {\n                         continue;\n                     }\n                     EntryKind::Impl(_) |\n-                    EntryKind::DefaultImpl(_) => continue,\n+                    EntryKind::AutoImpl(_) => continue,\n \n                     _ => {}\n                 }\n@@ -1082,9 +1082,9 @@ impl<'a, 'tcx> CrateMetadata {\n         self.dllimport_foreign_items.contains(&id)\n     }\n \n-    pub fn is_default_impl(&self, impl_id: DefIndex) -> bool {\n+    pub fn is_auto_impl(&self, impl_id: DefIndex) -> bool {\n         match self.entry(impl_id).kind {\n-            EntryKind::DefaultImpl(_) => true,\n+            EntryKind::AutoImpl(_) => true,\n             _ => false,\n         }\n     }"}, {"sha": "5f2b8efa5387f4c0d887064dbdac5f7ec4c9921f", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -919,7 +919,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                     ctor_sig: None,\n                 }), repr_options)\n             }\n-            hir::ItemDefaultImpl(..) => {\n+            hir::ItemAutoImpl(..) => {\n                 let data = ImplData {\n                     polarity: hir::ImplPolarity::Positive,\n                     defaultness: hir::Defaultness::Final,\n@@ -928,7 +928,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                     trait_ref: tcx.impl_trait_ref(def_id).map(|trait_ref| self.lazy(&trait_ref)),\n                 };\n \n-                EntryKind::DefaultImpl(self.lazy(&data))\n+                EntryKind::AutoImpl(self.lazy(&data))\n             }\n             hir::ItemImpl(_, polarity, defaultness, ..) => {\n                 let trait_ref = tcx.impl_trait_ref(def_id);\n@@ -970,7 +970,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                 let data = TraitData {\n                     unsafety: trait_def.unsafety,\n                     paren_sugar: trait_def.paren_sugar,\n-                    has_default_impl: tcx.trait_has_default_impl(def_id),\n+                    has_auto_impl: tcx.trait_is_auto(def_id),\n                     super_predicates: self.lazy(&tcx.super_predicates_of(def_id)),\n                 };\n \n@@ -1517,7 +1517,7 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n             hir::ItemGlobalAsm(..) |\n             hir::ItemExternCrate(..) |\n             hir::ItemUse(..) |\n-            hir::ItemDefaultImpl(..) |\n+            hir::ItemAutoImpl(..) |\n             hir::ItemTy(..) => {\n                 // no sub-item recording needed in these cases\n             }"}, {"sha": "3efe74bfecc92f1ea883a01686517c05b994818e", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -303,7 +303,7 @@ pub enum EntryKind<'tcx> {\n     Generator(Lazy<GeneratorData<'tcx>>),\n     Trait(Lazy<TraitData<'tcx>>),\n     Impl(Lazy<ImplData<'tcx>>),\n-    DefaultImpl(Lazy<ImplData<'tcx>>),\n+    AutoImpl(Lazy<ImplData<'tcx>>),\n     Method(Lazy<MethodData<'tcx>>),\n     AssociatedType(AssociatedContainer),\n     AssociatedConst(AssociatedContainer, u8),\n@@ -359,7 +359,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for EntryKind<'gcx> {\n             EntryKind::Trait(ref trait_data) => {\n                 trait_data.hash_stable(hcx, hasher);\n             }\n-            EntryKind::DefaultImpl(ref impl_data) |\n+            EntryKind::AutoImpl(ref impl_data) |\n             EntryKind::Impl(ref impl_data) => {\n                 impl_data.hash_stable(hcx, hasher);\n             }\n@@ -426,14 +426,14 @@ impl_stable_hash_for!(struct VariantData<'tcx> {\n pub struct TraitData<'tcx> {\n     pub unsafety: hir::Unsafety,\n     pub paren_sugar: bool,\n-    pub has_default_impl: bool,\n+    pub has_auto_impl: bool,\n     pub super_predicates: Lazy<ty::GenericPredicates<'tcx>>,\n }\n \n impl_stable_hash_for!(struct TraitData<'tcx> {\n     unsafety,\n     paren_sugar,\n-    has_default_impl,\n+    has_auto_impl,\n     super_predicates\n });\n "}, {"sha": "f2e4fd7dbe0e3c2a6ba589fcf205cf1e02c8141c", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -213,7 +213,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                                         item.span,\n                                         Some(\"place qualifiers on individual impl items instead\"));\n             }\n-            ItemKind::DefaultImpl(..) => {\n+            ItemKind::AutoImpl(..) => {\n                 self.invalid_visibility(&item.vis, item.span, None);\n             }\n             ItemKind::ForeignMod(..) => {\n@@ -229,7 +229,22 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     }\n                 }\n             }\n-            ItemKind::Trait(.., ref bounds, ref trait_items) => {\n+            ItemKind::Trait(is_auto, _, ref generics, ref bounds, ref trait_items) => {\n+                if is_auto == IsAuto::Yes {\n+                    // Auto traits cannot have generics, super traits nor contain items.\n+                    if !generics.ty_params.is_empty() {\n+                        self.err_handler().span_err(item.span,\n+                                                    \"auto traits cannot have generics\");\n+                    }\n+                    if !bounds.is_empty() {\n+                        self.err_handler().span_err(item.span,\n+                                                    \"auto traits cannot have super traits\");\n+                    }\n+                    if !trait_items.is_empty() {\n+                        self.err_handler().span_err(item.span,\n+                                                    \"auto traits cannot contain items\");\n+                    }\n+                }\n                 self.no_questions_in_bounds(bounds, \"supertraits\", true);\n                 for trait_item in trait_items {\n                     if let TraitItemKind::Method(ref sig, ref block) = trait_item.node {"}, {"sha": "11eb8ac5f367f4335e04e0d7bc0764de9fd3947c", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -147,7 +147,7 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n                 let def_id = self.tcx.hir.local_def_id(item.id);\n                 cmp::min(self.item_ty_level(def_id), self.impl_trait_level(def_id))\n             }\n-            hir::ItemDefaultImpl(..) => {\n+            hir::ItemAutoImpl(..) => {\n                 let def_id = self.tcx.hir.local_def_id(item.id);\n                 self.impl_trait_level(def_id)\n             }\n@@ -213,7 +213,7 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             }\n             hir::ItemUse(..) | hir::ItemStatic(..) | hir::ItemConst(..) |\n             hir::ItemGlobalAsm(..) | hir::ItemTy(..) | hir::ItemMod(..) |\n-            hir::ItemFn(..) | hir::ItemExternCrate(..) | hir::ItemDefaultImpl(..) => {}\n+            hir::ItemFn(..) | hir::ItemExternCrate(..) | hir::ItemAutoImpl(..) => {}\n         }\n \n         // Mark all items in interfaces of reachable items as reachable\n@@ -225,7 +225,7 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             // Reexports are handled in visit_mod\n             hir::ItemUse(..) => {}\n             // The interface is empty\n-            hir::ItemDefaultImpl(..) => {}\n+            hir::ItemAutoImpl(..) => {}\n             // The interface is empty\n             hir::ItemGlobalAsm(..) => {}\n             // Visit everything\n@@ -1504,7 +1504,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n                 }\n             }\n             // The interface is empty\n-            hir::ItemDefaultImpl(..) => {}\n+            hir::ItemAutoImpl(..) => {}\n             // An inherent impl is public when its type is public\n             // Subitems of inherent impls have their own publicity\n             hir::ItemImpl(.., None, _, ref impl_item_refs) => {"}, {"sha": "ef556019699a02478d36e3aa79839096158e0ead", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -376,7 +376,7 @@ impl<'a> Resolver<'a> {\n                 self.insert_field_names(item_def_id, field_names);\n             }\n \n-            ItemKind::DefaultImpl(..) | ItemKind::Impl(..) => {}\n+            ItemKind::AutoImpl(..) | ItemKind::Impl(..) => {}\n \n             ItemKind::Trait(..) => {\n                 let def_id = self.definitions.local_def_id(item.id);"}, {"sha": "c4f159544e407203ddf8e817604f15e949432ae6", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -1845,7 +1845,7 @@ impl<'a> Resolver<'a> {\n                                              |this| visit::walk_item(this, item));\n             }\n \n-            ItemKind::DefaultImpl(_, ref trait_ref) => {\n+            ItemKind::AutoImpl(_, ref trait_ref) => {\n                 self.with_optional_trait_ref(Some(trait_ref), |this, _| {\n                     // Resolve type arguments in trait path\n                     visit::walk_trait_ref(this, trait_ref);\n@@ -1858,7 +1858,7 @@ impl<'a> Resolver<'a> {\n                                             item.id,\n                                             impl_items),\n \n-            ItemKind::Trait(_, ref generics, ref bounds, ref trait_items) => {\n+            ItemKind::Trait(.., ref generics, ref bounds, ref trait_items) => {\n                 // Create a new rib for the trait-wide type parameters.\n                 self.with_type_parameter_rib(HasTypeParameters(generics, ItemRibKind), |this| {\n                     let local_def_id = this.definitions.local_def_id(item.id);"}, {"sha": "41288c88ede90c05c762d9512a413b258e76e881", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -1232,7 +1232,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n                  ref impl_items) => {\n                 self.process_impl(item, ty_params, trait_ref, &typ, impl_items)\n             }\n-            Trait(_, ref generics, ref trait_refs, ref methods) =>\n+            Trait(_, _, ref generics, ref trait_refs, ref methods) =>\n                 self.process_trait(item, generics, trait_refs, methods),\n             Mod(ref m) => {\n                 self.process_mod(item);"}, {"sha": "80c1b0ebeb0b2d307518dd11bd0f27fbebe5477b", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -477,8 +477,13 @@ impl Sig for ast::Item {\n                 sig.text.push_str(\" {}\");\n                 Ok(sig)\n             }\n-            ast::ItemKind::Trait(unsafety, ref generics, ref bounds, _) => {\n+            ast::ItemKind::Trait(is_auto, unsafety, ref generics, ref bounds, _) => {\n                 let mut text = String::new();\n+\n+                if is_auto == ast::IsAuto::Yes {\n+                    text.push_str(\"auto \");\n+                }\n+\n                 if unsafety == ast::Unsafety::Unsafe {\n                     text.push_str(\"unsafe \");\n                 }\n@@ -499,7 +504,7 @@ impl Sig for ast::Item {\n \n                 Ok(sig)\n             }\n-            ast::ItemKind::DefaultImpl(unsafety, ref trait_ref) => {\n+            ast::ItemKind::AutoImpl(unsafety, ref trait_ref) => {\n                 let mut text = String::new();\n                 if unsafety == ast::Unsafety::Unsafe {\n                     text.push_str(\"unsafe \");"}, {"sha": "c45ab65e9d850abc1c92faf5652d4f65f201fbcc", "filename": "src/librustc_trans_utils/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_trans_utils%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_trans_utils%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Fcollector.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -883,7 +883,7 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n             hir::ItemUse(..)         |\n             hir::ItemForeignMod(..)  |\n             hir::ItemTy(..)          |\n-            hir::ItemDefaultImpl(..) |\n+            hir::ItemAutoImpl(..) |\n             hir::ItemTrait(..)       |\n             hir::ItemMod(..)         => {\n                 // Nothing to do, just keep recursing..."}, {"sha": "483af08cabfce624deec7e8da665377672928f17", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -114,7 +114,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n                 // FIXME(#27579) what amount of WF checking do we need for neg impls?\n \n                 let trait_ref = tcx.impl_trait_ref(tcx.hir.local_def_id(item.id)).unwrap();\n-                if !tcx.trait_has_default_impl(trait_ref.def_id) {\n+                if !tcx.trait_is_auto(trait_ref.def_id) {\n                     error_192(tcx, item.span);\n                 }\n             }\n@@ -318,7 +318,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n     fn check_trait(&mut self, item: &hir::Item) {\n         let trait_def_id = self.tcx.hir.local_def_id(item.id);\n \n-        if self.tcx.trait_has_default_impl(trait_def_id) {\n+        if self.tcx.trait_is_auto(trait_def_id) {\n             self.check_auto_trait(trait_def_id, item.span);\n         }\n "}, {"sha": "90a0952af042504b7d5f245335e50741f577f503", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -132,7 +132,7 @@ pub fn check_coherence<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n \n     unsafety::check(tcx);\n     orphan::check(tcx);\n-    overlap::check_default_impls(tcx);\n+    overlap::check_auto_impls(tcx);\n \n     // these queries are executed for side-effects (error reporting):\n     tcx.crate_inherent_impls(LOCAL_CRATE);"}, {"sha": "9f183973621894e6ad465893540fd1d92fa3cfc7", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -100,11 +100,11 @@ impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for OrphanChecker<'cx, 'tcx> {\n                 // This final impl is legal according to the orpan\n                 // rules, but it invalidates the reasoning from\n                 // `two_foos` above.\n-                debug!(\"trait_ref={:?} trait_def_id={:?} trait_has_default_impl={}\",\n+                debug!(\"trait_ref={:?} trait_def_id={:?} trait_is_auto={}\",\n                        trait_ref,\n                        trait_def_id,\n-                       self.tcx.trait_has_default_impl(trait_def_id));\n-                if self.tcx.trait_has_default_impl(trait_def_id) &&\n+                       self.tcx.trait_is_auto(trait_def_id));\n+                if self.tcx.trait_is_auto(trait_def_id) &&\n                    !trait_def_id.is_local() {\n                     let self_ty = trait_ref.self_ty();\n                     let opt_self_def_id = match self_ty.sty {\n@@ -142,7 +142,7 @@ impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for OrphanChecker<'cx, 'tcx> {\n                     }\n                 }\n             }\n-            hir::ItemDefaultImpl(_, ref item_trait_ref) => {\n+            hir::ItemAutoImpl(_, ref item_trait_ref) => {\n                 // \"Trait\" impl\n                 debug!(\"coherence2::orphan check: default trait impl {}\",\n                        self.tcx.hir.node_to_string(item.id));"}, {"sha": "5cc6eaa5602fbe7d57bafe0f67853c8655bc1eee", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -18,7 +18,7 @@ use syntax::ast;\n use rustc::hir;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n \n-pub fn check_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n+pub fn check_auto_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut overlap = OverlapChecker { tcx };\n \n     // this secondary walk specifically checks for some other cases,\n@@ -74,19 +74,19 @@ struct OverlapChecker<'cx, 'tcx: 'cx> {\n impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for OverlapChecker<'cx, 'tcx> {\n     fn visit_item(&mut self, item: &'v hir::Item) {\n         match item.node {\n-            hir::ItemDefaultImpl(..) => {\n-                // look for another default impl; note that due to the\n+            hir::ItemAutoImpl(..) => {\n+                // look for another auto impl; note that due to the\n                 // general orphan/coherence rules, it must always be\n                 // in this crate.\n                 let impl_def_id = self.tcx.hir.local_def_id(item.id);\n                 let trait_ref = self.tcx.impl_trait_ref(impl_def_id).unwrap();\n \n-                let prev_id = self.tcx.hir.trait_default_impl(trait_ref.def_id).unwrap();\n+                let prev_id = self.tcx.hir.trait_auto_impl(trait_ref.def_id).unwrap();\n                 if prev_id != item.id {\n                     let mut err = struct_span_err!(self.tcx.sess,\n                                                    self.tcx.span_of_impl(impl_def_id).unwrap(),\n                                                    E0521,\n-                                                   \"redundant default implementations of trait \\\n+                                                   \"redundant auto implementations of trait \\\n                                                     `{}`:\",\n                                                    trait_ref);\n                     err.span_note(self.tcx"}, {"sha": "280fb04e040011f8af896dd646387652f4a6ab2d", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -84,7 +84,7 @@ impl<'cx, 'tcx, 'v> UnsafetyChecker<'cx, 'tcx> {\n impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for UnsafetyChecker<'cx, 'tcx> {\n     fn visit_item(&mut self, item: &'v hir::Item) {\n         match item.node {\n-            hir::ItemDefaultImpl(unsafety, _) => {\n+            hir::ItemAutoImpl(unsafety, _) => {\n                 self.check_unsafety_coherence(item, None, unsafety, hir::ImplPolarity::Positive);\n             }\n             hir::ItemImpl(unsafety, polarity, _, ref generics, ..) => {"}, {"sha": "814470974285fdf717da82936eab2a6b71da8c2b", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -73,7 +73,7 @@ pub fn provide(providers: &mut Providers) {\n         impl_trait_ref,\n         impl_polarity,\n         is_foreign_item,\n-        is_default_impl,\n+        is_auto_impl,\n         ..*providers\n     };\n }\n@@ -273,7 +273,7 @@ fn type_param_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 ItemEnum(_, ref generics) |\n                 ItemStruct(_, ref generics) |\n                 ItemUnion(_, ref generics) => generics,\n-                ItemTrait(_, ref generics, ..) => {\n+                ItemTrait(_, _, ref generics, ..) => {\n                     // Implied `Self: Trait` and supertrait bounds.\n                     if param_id == item_node_id {\n                         result.predicates.push(ty::TraitRef {\n@@ -425,7 +425,7 @@ fn convert_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_id: ast::NodeId) {\n             tcx.predicates_of(def_id);\n             convert_enum_variant_types(tcx, def_id, &enum_definition.variants);\n         },\n-        hir::ItemDefaultImpl(..) => {\n+        hir::ItemAutoImpl(..) => {\n             tcx.impl_trait_ref(def_id);\n         }\n         hir::ItemImpl(..) => {\n@@ -670,7 +670,7 @@ fn super_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     };\n \n     let (generics, bounds) = match item.node {\n-        hir::ItemTrait(_, ref generics, ref supertraits, _) => (generics, supertraits),\n+        hir::ItemTrait(.., ref generics, ref supertraits, _) => (generics, supertraits),\n         _ => span_bug!(item.span,\n                        \"super_predicates invoked on non-trait\"),\n     };\n@@ -713,7 +713,7 @@ fn trait_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let item = tcx.hir.expect_item(node_id);\n \n     let unsafety = match item.node {\n-        hir::ItemTrait(unsafety, ..) => unsafety,\n+        hir::ItemTrait(_, unsafety, ..) => unsafety,\n         _ => span_bug!(item.span, \"trait_def_of_item invoked on non-trait\"),\n     };\n \n@@ -730,11 +730,14 @@ fn trait_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n \n     let def_path_hash = tcx.def_path_hash(def_id);\n-    let has_default_impl = tcx.hir.trait_is_auto(def_id);\n+    let is_auto = match item.node {\n+        hir::ItemTrait(hir::IsAuto::Yes, ..) => true,\n+        _ => tcx.hir.trait_is_auto(def_id),\n+    };\n     let def = ty::TraitDef::new(def_id,\n                                 unsafety,\n                                 paren_sugar,\n-                                has_default_impl,\n+                                is_auto,\n                                 def_path_hash);\n     tcx.alloc_trait_def(def)\n }\n@@ -888,7 +891,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     generics\n                 }\n \n-                ItemTrait(_, ref generics, ..) => {\n+                ItemTrait(_, _, ref generics, ..) => {\n                     // Add in the self type parameter.\n                     //\n                     // Something of a hack: use the node id for the trait, also as\n@@ -1074,7 +1077,7 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     let substs = Substs::identity_for_item(tcx, def_id);\n                     tcx.mk_adt(def, substs)\n                 }\n-                ItemDefaultImpl(..) |\n+                ItemAutoImpl(..) |\n                 ItemTrait(..) |\n                 ItemMod(..) |\n                 ItemForeignMod(..) |\n@@ -1223,7 +1226,7 @@ fn impl_trait_ref<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n     match tcx.hir.expect_item(node_id).node {\n-        hir::ItemDefaultImpl(_, ref ast_trait_ref) => {\n+        hir::ItemAutoImpl(_, ref ast_trait_ref) => {\n             Some(AstConv::instantiate_mono_trait_ref(&icx,\n                                                      ast_trait_ref,\n                                                      tcx.mk_self_type()))\n@@ -1350,7 +1353,7 @@ fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     generics\n                 }\n \n-                ItemTrait(_, ref generics, .., ref items) => {\n+                ItemTrait(_, _, ref generics, .., ref items) => {\n                     is_trait = Some((ty::TraitRef {\n                         def_id,\n                         substs: Substs::identity_for_item(tcx, def_id)\n@@ -1665,13 +1668,13 @@ fn is_foreign_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n-fn is_default_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+fn is_auto_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              def_id: DefId)\n                              -> bool {\n     match tcx.hir.get_if_local(def_id) {\n-        Some(hir_map::NodeItem(&hir::Item { node: hir::ItemDefaultImpl(..), .. }))\n+        Some(hir_map::NodeItem(&hir::Item { node: hir::ItemAutoImpl(..), .. }))\n              => true,\n         Some(_) => false,\n-        _ => bug!(\"is_default_impl applied to non-local def-id {:?}\", def_id)\n+        _ => bug!(\"is_auto_impl applied to non-local def-id {:?}\", def_id)\n     }\n }"}, {"sha": "013eb9c8ed2daa4f6eec0ccdf5153870f91eae77", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -1854,7 +1854,7 @@ unsafe impl !Clone for Foo { }\n \n This will compile:\n \n-```\n+```ignore (ignore auto_trait future compatibility warning)\n #![feature(optin_builtin_traits)]\n \n struct Foo;\n@@ -4669,7 +4669,7 @@ register_diagnostics! {\n //  E0372, // coherence not object safe\n     E0377, // the trait `CoerceUnsized` may only be implemented for a coercion\n            // between structures with the same definition\n-    E0521, // redundant default implementations of trait\n+    E0521, // redundant auto implementations of trait\n     E0533, // `{}` does not name a unit variant, unit struct or a constant\n //  E0563, // cannot determine a type for this `impl Trait`: {} // removed in 6383de15\n     E0564, // only named lifetimes are allowed in `impl Trait`,"}, {"sha": "9fb9437e1bc9a717d8d796512932c269deecd272", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -292,10 +292,10 @@ pub fn build_impl(cx: &DocContext, did: DefId, ret: &mut Vec<clean::Item>) {\n         }\n     }\n \n-    // If this is a defaulted impl, then bail out early here\n-    if tcx.is_default_impl(did) {\n+    // If this is an auto impl, then bail out early here\n+    if tcx.is_auto_impl(did) {\n         return ret.push(clean::Item {\n-            inner: clean::DefaultImplItem(clean::DefaultImpl {\n+            inner: clean::AutoImplItem(clean::AutoImpl {\n                 // FIXME: this should be decoded\n                 unsafety: hir::Unsafety::Normal,\n                 trait_: match associated_trait.as_ref().unwrap().clean(cx) {"}, {"sha": "4b60536e1d17627513247312dbf4e8d299cad5e8", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -425,7 +425,7 @@ pub enum ItemEnum {\n     PrimitiveItem(PrimitiveType),\n     AssociatedConstItem(Type, Option<String>),\n     AssociatedTypeItem(Vec<TyParamBound>, Option<Type>),\n-    DefaultImplItem(DefaultImpl),\n+    AutoImplItem(AutoImpl),\n     /// An item that has been stripped by a rustdoc pass\n     StrippedItem(Box<ItemEnum>),\n }\n@@ -2733,12 +2733,12 @@ fn build_deref_target_impls(cx: &DocContext,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub struct DefaultImpl {\n+pub struct AutoImpl {\n     pub unsafety: hir::Unsafety,\n     pub trait_: Type,\n }\n \n-impl Clean<Item> for doctree::DefaultImpl {\n+impl Clean<Item> for doctree::AutoImpl {\n     fn clean(&self, cx: &DocContext) -> Item {\n         Item {\n             name: None,\n@@ -2748,7 +2748,7 @@ impl Clean<Item> for doctree::DefaultImpl {\n             visibility: Some(Public),\n             stability: None,\n             deprecation: None,\n-            inner: DefaultImplItem(DefaultImpl {\n+            inner: AutoImplItem(AutoImpl {\n                 unsafety: self.unsafety,\n                 trait_: self.trait_.clean(cx),\n             }),"}, {"sha": "c21bfd8842f7240efdc7220be531038bbd55920c", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -44,7 +44,7 @@ pub struct Module {\n     pub stab: Option<attr::Stability>,\n     pub depr: Option<attr::Deprecation>,\n     pub impls: Vec<Impl>,\n-    pub def_traits: Vec<DefaultImpl>,\n+    pub def_traits: Vec<AutoImpl>,\n     pub foreigns: Vec<hir::ForeignMod>,\n     pub macros: Vec<Macro>,\n     pub is_crate: bool,\n@@ -227,7 +227,7 @@ pub struct Impl {\n     pub id: ast::NodeId,\n }\n \n-pub struct DefaultImpl {\n+pub struct AutoImpl {\n     pub unsafety: hir::Unsafety,\n     pub trait_: hir::TraitRef,\n     pub id: ast::NodeId,"}, {"sha": "c214c15ed4b2be1a0c0b56b736decaf70095fbf4", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -82,7 +82,7 @@ impl<'a> From<&'a clean::Item> for ItemType {\n             clean::PrimitiveItem(..)       => ItemType::Primitive,\n             clean::AssociatedConstItem(..) => ItemType::AssociatedConst,\n             clean::AssociatedTypeItem(..)  => ItemType::AssociatedType,\n-            clean::DefaultImplItem(..)     => ItemType::Impl,\n+            clean::AutoImplItem(..)        => ItemType::Impl,\n             clean::ForeignTypeItem         => ItemType::ForeignType,\n             clean::StrippedItem(..)        => unreachable!(),\n         }"}, {"sha": "7e1742c6e10853099f8339916e9a468ddf636930", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -1929,7 +1929,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n     document(w, cx, item)?;\n \n     let mut indices = (0..items.len()).filter(|i| {\n-        if let clean::DefaultImplItem(..) = items[*i].inner {\n+        if let clean::AutoImplItem(..) = items[*i].inner {\n             return false;\n         }\n         !items[*i].is_stripped()\n@@ -3744,7 +3744,7 @@ fn sidebar_module(fmt: &mut fmt::Formatter, _it: &clean::Item,\n                    ItemType::TyMethod, ItemType::Method, ItemType::StructField, ItemType::Variant,\n                    ItemType::AssociatedType, ItemType::AssociatedConst, ItemType::ForeignType] {\n         if items.iter().any(|it| {\n-            if let clean::DefaultImplItem(..) = it.inner {\n+            if let clean::AutoImplItem(..) = it.inner {\n                 false\n             } else {\n                 !it.is_stripped() && it.type_() == myty"}, {"sha": "77d97c84c99bf0e77c125d57ab9575816d60b713", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -116,7 +116,7 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n             // handled in the `strip-priv-imports` pass\n             clean::ExternCrateItem(..) | clean::ImportItem(..) => {}\n \n-            clean::DefaultImplItem(..) | clean::ImplItem(..) => {}\n+            clean::AutoImplItem(..) | clean::ImplItem(..) => {}\n \n             // tymethods/macros have no control over privacy\n             clean::MacroItem(..) | clean::TyMethodItem(..) => {}"}, {"sha": "b55076a01afe02c3de5a24f7229791730dd81259", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -481,7 +481,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 };\n                 om.constants.push(s);\n             },\n-            hir::ItemTrait(unsafety, ref gen, ref b, ref item_ids) => {\n+            hir::ItemTrait(_, unsafety, ref gen, ref b, ref item_ids) => {\n                 let items = item_ids.iter()\n                                     .map(|ti| self.cx.tcx.hir.trait_item(ti.id).clone())\n                                     .collect();\n@@ -532,10 +532,10 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     om.impls.push(i);\n                 }\n             },\n-            hir::ItemDefaultImpl(unsafety, ref trait_ref) => {\n+            hir::ItemAutoImpl(unsafety, ref trait_ref) => {\n                 // See comment above about ItemImpl.\n                 if !self.inlining {\n-                    let i = DefaultImpl {\n+                    let i = AutoImpl {\n                         unsafety,\n                         trait_: trait_ref.clone(),\n                         id: item.id,"}, {"sha": "385076e50ddeafc0e2341508472fadf589d2c91d", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -188,6 +188,8 @@ pub struct AssertUnwindSafe<T>(\n // * Types like Mutex/RwLock which are explicilty poisoned are unwind safe\n // * Our custom AssertUnwindSafe wrapper is indeed unwind safe\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n+#[allow(unknown_lints)]\n+#[allow(auto_impl)]\n impl UnwindSafe for .. {}\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n impl<'a, T: ?Sized> !UnwindSafe for &'a mut T {}\n@@ -221,6 +223,8 @@ impl<T: RefUnwindSafe + ?Sized> UnwindSafe for Arc<T> {}\n // only thing which doesn't implement it (which then transitively applies to\n // everything else).\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n+#[allow(unknown_lints)]\n+#[allow(auto_impl)]\n impl RefUnwindSafe for .. {}\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n impl<T: ?Sized> !RefUnwindSafe for UnsafeCell<T> {}"}, {"sha": "99dff4edaade751cfcf5492bcd0969ee1f2e2428", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -1581,6 +1581,13 @@ impl FnDecl {\n     }\n }\n \n+/// Is the trait definition an auto trait?\n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub enum IsAuto {\n+    Yes,\n+    No\n+}\n+\n #[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Unsafety {\n     Unsafe,\n@@ -1942,12 +1949,12 @@ pub enum ItemKind {\n     Union(VariantData, Generics),\n     /// A Trait declaration (`trait` or `pub trait`).\n     ///\n-    /// E.g. `trait Foo { .. }` or `trait Foo<T> { .. }`\n-    Trait(Unsafety, Generics, TyParamBounds, Vec<TraitItem>),\n+    /// E.g. `trait Foo { .. }`, `trait Foo<T> { .. }` or `auto trait Foo {}`\n+    Trait(IsAuto, Unsafety, Generics, TyParamBounds, Vec<TraitItem>),\n     /// Auto trait implementation.\n     ///\n     /// E.g. `impl Trait for .. {}` or `impl<T> Trait<T> for .. {}`\n-    DefaultImpl(Unsafety, TraitRef),\n+    AutoImpl(Unsafety, TraitRef),\n     /// An implementation.\n     ///\n     /// E.g. `impl<A> Foo<A> { .. }` or `impl<A> Trait for Foo<A> { .. }`\n@@ -1986,7 +1993,7 @@ impl ItemKind {\n             ItemKind::Mac(..) |\n             ItemKind::MacroDef(..) |\n             ItemKind::Impl(..) |\n-            ItemKind::DefaultImpl(..) => \"item\"\n+            ItemKind::AutoImpl(..) => \"item\"\n         }\n     }\n }"}, {"sha": "e354d56f5afc276c622eec3fc1f1dc260df60323", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -1357,10 +1357,10 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 }\n             }\n \n-            ast::ItemKind::DefaultImpl(..) => {\n+            ast::ItemKind::AutoImpl(..) => {\n                 gate_feature_post!(&self, optin_builtin_traits,\n                                    i.span,\n-                                   \"default trait implementations are experimental \\\n+                                   \"auto trait implementations are experimental \\\n                                     and possibly buggy\");\n             }\n \n@@ -1389,6 +1389,12 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 }\n             }\n \n+            ast::ItemKind::Trait(ast::IsAuto::Yes, ..) => {\n+                gate_feature_post!(&self, optin_builtin_traits,\n+                                   i.span,\n+                                   \"auto traits are experimental and possibly buggy\");\n+            }\n+\n             ast::ItemKind::MacroDef(ast::MacroDef { legacy: false, .. }) => {\n                 let msg = \"`macro` is experimental\";\n                 gate_feature_post!(&self, decl_macro, i.span, msg);"}, {"sha": "cc63bffec48a1652eca563e33bc0b58096eb8768", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -908,8 +908,8 @@ pub fn noop_fold_item_kind<T: Folder>(i: ItemKind, folder: &mut T) -> ItemKind {\n             let generics = folder.fold_generics(generics);\n             ItemKind::Union(folder.fold_variant_data(struct_def), generics)\n         }\n-        ItemKind::DefaultImpl(unsafety, ref trait_ref) => {\n-            ItemKind::DefaultImpl(unsafety, folder.fold_trait_ref((*trait_ref).clone()))\n+        ItemKind::AutoImpl(unsafety, ref trait_ref) => {\n+            ItemKind::AutoImpl(unsafety, folder.fold_trait_ref((*trait_ref).clone()))\n         }\n         ItemKind::Impl(unsafety,\n                        polarity,\n@@ -926,7 +926,8 @@ pub fn noop_fold_item_kind<T: Folder>(i: ItemKind, folder: &mut T) -> ItemKind {\n             folder.fold_ty(ty),\n             impl_items.move_flat_map(|item| folder.fold_impl_item(item)),\n         ),\n-        ItemKind::Trait(unsafety, generics, bounds, items) => ItemKind::Trait(\n+        ItemKind::Trait(is_auto, unsafety, generics, bounds, items) => ItemKind::Trait(\n+            is_auto,\n             unsafety,\n             folder.fold_generics(generics),\n             folder.fold_bounds(bounds),"}, {"sha": "5176379ee2f88b08ef89e13884fbb789f346ce22", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 36, "deletions": 11, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -21,7 +21,7 @@ use ast::EnumDef;\n use ast::{Expr, ExprKind, RangeLimits};\n use ast::{Field, FnDecl};\n use ast::{ForeignItem, ForeignItemKind, FunctionRetTy};\n-use ast::{Ident, ImplItem, Item, ItemKind};\n+use ast::{Ident, ImplItem, IsAuto, Item, ItemKind};\n use ast::{Lifetime, LifetimeDef, Lit, LitKind, UintTy};\n use ast::Local;\n use ast::MacStmtStyle;\n@@ -3873,6 +3873,16 @@ impl<'a> Parser<'a> {\n         self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())\n     }\n \n+    fn eat_auto_trait(&mut self) -> bool {\n+        if self.token.is_keyword(keywords::Auto)\n+            && self.look_ahead(1, |t| t.is_keyword(keywords::Trait))\n+        {\n+            self.eat_keyword(keywords::Auto) && self.eat_keyword(keywords::Trait)\n+        } else {\n+            false\n+        }\n+    }\n+\n     fn is_defaultness(&self) -> bool {\n         // `pub` is included for better error messages\n         self.token.is_keyword(keywords::Default) &&\n@@ -5051,7 +5061,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse trait Foo { ... }\n-    fn parse_item_trait(&mut self, unsafety: Unsafety) -> PResult<'a, ItemInfo> {\n+    fn parse_item_trait(&mut self, is_auto: IsAuto, unsafety: Unsafety) -> PResult<'a, ItemInfo> {\n         let ident = self.parse_ident()?;\n         let mut tps = self.parse_generics()?;\n \n@@ -5078,7 +5088,7 @@ impl<'a> Parser<'a> {\n                 }\n             }\n         }\n-        Ok((ident, ItemKind::Trait(unsafety, tps, bounds, trait_items), None))\n+        Ok((ident, ItemKind::Trait(is_auto, unsafety, tps, bounds, trait_items), None))\n     }\n \n     /// Parses items implementations variants\n@@ -5133,19 +5143,19 @@ impl<'a> Parser<'a> {\n \n         if opt_trait.is_some() && self.eat(&token::DotDot) {\n             if generics.is_parameterized() {\n-                self.span_err(impl_span, \"default trait implementations are not \\\n+                self.span_err(impl_span, \"auto trait implementations are not \\\n                                           allowed to have generics\");\n             }\n \n             if let ast::Defaultness::Default = defaultness {\n                 self.span_err(impl_span, \"`default impl` is not allowed for \\\n-                                         default trait implementations\");\n+                                         auto trait implementations\");\n             }\n \n             self.expect(&token::OpenDelim(token::Brace))?;\n             self.expect(&token::CloseDelim(token::Brace))?;\n             Ok((keywords::Invalid.ident(),\n-             ItemKind::DefaultImpl(unsafety, opt_trait.unwrap()), None))\n+             ItemKind::AutoImpl(unsafety, opt_trait.unwrap()), None))\n         } else {\n             if opt_trait.is_some() {\n                 ty = self.parse_ty()?;\n@@ -5988,13 +5998,19 @@ impl<'a> Parser<'a> {\n             return Ok(Some(item));\n         }\n         if self.check_keyword(keywords::Unsafe) &&\n-            self.look_ahead(1, |t| t.is_keyword(keywords::Trait))\n+            (self.look_ahead(1, |t| t.is_keyword(keywords::Trait)) ||\n+            self.look_ahead(1, |t| t.is_keyword(keywords::Auto)))\n         {\n             // UNSAFE TRAIT ITEM\n             self.expect_keyword(keywords::Unsafe)?;\n-            self.expect_keyword(keywords::Trait)?;\n+            let is_auto = if self.eat_keyword(keywords::Trait) {\n+                IsAuto::No\n+            } else {\n+                self.eat_auto_trait();\n+                IsAuto::Yes\n+            };\n             let (ident, item_, extra_attrs) =\n-                self.parse_item_trait(ast::Unsafety::Unsafe)?;\n+                self.parse_item_trait(is_auto, ast::Unsafety::Unsafe)?;\n             let prev_span = self.prev_span;\n             let item = self.mk_item(lo.to(prev_span),\n                                     ident,\n@@ -6097,10 +6113,19 @@ impl<'a> Parser<'a> {\n                                     maybe_append(attrs, extra_attrs));\n             return Ok(Some(item));\n         }\n-        if self.eat_keyword(keywords::Trait) {\n+        if self.check_keyword(keywords::Trait)\n+            || (self.check_keyword(keywords::Auto)\n+                && self.look_ahead(1, |t| t.is_keyword(keywords::Trait)))\n+        {\n+            let is_auto = if self.eat_keyword(keywords::Trait) {\n+                IsAuto::No\n+            } else {\n+                self.eat_auto_trait();\n+                IsAuto::Yes\n+            };\n             // TRAIT ITEM\n             let (ident, item_, extra_attrs) =\n-                self.parse_item_trait(ast::Unsafety::Normal)?;\n+                self.parse_item_trait(is_auto, ast::Unsafety::Normal)?;\n             let prev_span = self.prev_span;\n             let item = self.mk_item(lo.to(prev_span),\n                                     ident,"}, {"sha": "227db93cf656e0196ee7af197b31b34df95c91e5", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -1287,7 +1287,7 @@ impl<'a> State<'a> {\n                 self.head(&visibility_qualified(&item.vis, \"union\"))?;\n                 self.print_struct(struct_def, generics, item.ident, item.span, true)?;\n             }\n-            ast::ItemKind::DefaultImpl(unsafety, ref trait_ref) => {\n+            ast::ItemKind::AutoImpl(unsafety, ref trait_ref) => {\n                 self.head(\"\")?;\n                 self.print_visibility(&item.vis)?;\n                 self.print_unsafety(unsafety)?;\n@@ -1338,10 +1338,11 @@ impl<'a> State<'a> {\n                 }\n                 self.bclose(item.span)?;\n             }\n-            ast::ItemKind::Trait(unsafety, ref generics, ref bounds, ref trait_items) => {\n+            ast::ItemKind::Trait(is_auto, unsafety, ref generics, ref bounds, ref trait_items) => {\n                 self.head(\"\")?;\n                 self.print_visibility(&item.vis)?;\n                 self.print_unsafety(unsafety)?;\n+                self.print_is_auto(is_auto)?;\n                 self.word_nbsp(\"trait\")?;\n                 self.print_ident(item.ident)?;\n                 self.print_generics(generics)?;\n@@ -3123,6 +3124,13 @@ impl<'a> State<'a> {\n             ast::Unsafety::Unsafe => self.word_nbsp(\"unsafe\"),\n         }\n     }\n+\n+    pub fn print_is_auto(&mut self, s: ast::IsAuto) -> io::Result<()> {\n+        match s {\n+            ast::IsAuto::Yes => self.word_nbsp(\"auto\"),\n+            ast::IsAuto::No => Ok(()),\n+        }\n+    }\n }\n \n fn repeat(s: &str, n: usize) -> String { iter::repeat(s).take(n).collect() }"}, {"sha": "c2e90f0bb13a32f30d19bf688c7a13e89ecc35a2", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -281,7 +281,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             visitor.visit_generics(type_parameters);\n             visitor.visit_enum_def(enum_definition, type_parameters, item.id, item.span)\n         }\n-        ItemKind::DefaultImpl(_, ref trait_ref) => {\n+        ItemKind::AutoImpl(_, ref trait_ref) => {\n             visitor.visit_trait_ref(trait_ref)\n         }\n         ItemKind::Impl(_, _, _,\n@@ -300,7 +300,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             visitor.visit_variant_data(struct_definition, item.ident,\n                                      generics, item.id, item.span);\n         }\n-        ItemKind::Trait(_, ref generics, ref bounds, ref methods) => {\n+        ItemKind::Trait(.., ref generics, ref bounds, ref methods) => {\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_ty_param_bound, bounds);\n             walk_list!(visitor, visit_trait_item, methods);"}, {"sha": "26e6f27e20f40d5f7774d52c12bc8f19450bcc7e", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -309,11 +309,12 @@ declare_keywords! {\n     (54, Yield,          \"yield\")\n \n     // Weak keywords, have special meaning only in specific contexts.\n-    (55, Catch,          \"catch\")\n-    (56, Default,        \"default\")\n-    (57, Dyn,            \"dyn\")\n-    (58, StaticLifetime, \"'static\")\n-    (59, Union,          \"union\")\n+    (55, Auto,           \"auto\")\n+    (56, Catch,          \"catch\")\n+    (57, Default,        \"default\")\n+    (58, Dyn,            \"dyn\")\n+    (59, StaticLifetime, \"'static\")\n+    (60, Union,          \"union\")\n }\n \n // If an interner exists in TLS, return it. Otherwise, prepare a fresh one."}, {"sha": "d33b52486296f8b3c7fe27e68ec99b9baeb97ab9", "filename": "src/rtstartup/rsbegin.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Frtstartup%2Frsbegin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Frtstartup%2Frsbegin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frtstartup%2Frsbegin.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -14,7 +14,7 @@\n // When an executable or dylib image is linked, all user code and libraries are\n // \"sandwiched\" between these two object files, so code or data from rsbegin.o\n // become first in the respective sections of the image, whereas code and data\n-// from rsend.o become the last ones.  This effect can be used to place symbols\n+// from rsend.o become the last ones. This effect can be used to place symbols\n // at the beginning or at the end of a section, as well as to insert any required\n // headers or footers.\n //\n@@ -31,11 +31,15 @@\n trait Sized {}\n #[lang = \"sync\"]\n trait Sync {}\n+#[allow(unknown_lints)]\n+#[allow(auto_impl)]\n impl Sync for .. {}\n #[lang = \"copy\"]\n trait Copy {}\n #[lang = \"freeze\"]\n trait Freeze {}\n+#[allow(unknown_lints)]\n+#[allow(auto_impl)]\n impl Freeze for .. {}\n \n #[lang = \"drop_in_place\"]"}, {"sha": "410366d0d7ff50f87039c0df29593afe67bff5da", "filename": "src/rtstartup/rsend.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Frtstartup%2Frsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Frtstartup%2Frsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frtstartup%2Frsend.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -23,6 +23,8 @@ impl<T> Sync for T {}\n trait Copy {}\n #[lang = \"freeze\"]\n trait Freeze {}\n+#[allow(unknown_lints)]\n+#[allow(auto_impl)]\n impl Freeze for .. {}\n \n #[lang = \"drop_in_place\"]"}, {"sha": "5c32a75639880c5483739371f1fac77da43844e2", "filename": "src/test/compile-fail/auto-impl-future-compat.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Fauto-impl-future-compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Fauto-impl-future-compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauto-impl-future-compat.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(optin_builtin_traits)]\n+\n+trait Foo {}\n+impl Foo for .. {}\n+//~^ ERROR The form `impl Foo for .. {}` will be removed, please use `auto trait Foo {}`\n+//~^^ WARN this was previously accepted by the compiler"}, {"sha": "b28b776d9c2a656d9ff05ef63aad076275695b14", "filename": "src/test/compile-fail/auto-trait-validation.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Fauto-trait-validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Fauto-trait-validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauto-trait-validation.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(optin_builtin_traits)]\n+\n+auto trait Generic<T> {}\n+//~^ ERROR auto traits cannot have generics\n+//~^^ traits with auto impls (`e.g. impl Trait for ..`) can not have type parameters\n+auto trait Bound : Copy {}\n+//~^ ERROR auto traits cannot have super traits\n+//~^^ traits with auto impls (`e.g. impl Trait for ..`) cannot have predicates\n+auto trait MyTrait { fn foo() {} }\n+//~^ ERROR auto traits cannot contain items\n+//~^^ traits with default impls (`e.g. impl Trait for ..`) must have no methods or associated items\n+fn main() {}"}, {"sha": "1e1c55de87e17aa1ecb57b6fb16c6a796633e8b0", "filename": "src/test/compile-fail/auxiliary/tdticc_coherence_lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Ftdticc_coherence_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Ftdticc_coherence_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Ftdticc_coherence_lib.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -12,6 +12,7 @@\n #![crate_type = \"rlib\"]\n \n pub trait DefaultedTrait { }\n+#[allow(auto_impl)]\n impl DefaultedTrait for .. { }\n \n pub struct Something<T> { t: T }"}, {"sha": "9c26b8b05f259ce1e8c3aa03b62bce48a1a06ff5", "filename": "src/test/compile-fail/coherence-default-trait-impl.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -12,18 +12,22 @@\n \n trait MyTrait { fn foo() {} }\n \n+#[allow(auto_impl)]\n impl MyTrait for .. {}\n-//~^ ERROR redundant default implementations of trait `MyTrait`\n+//~^ ERROR redundant auto implementations of trait `MyTrait`\n \n+#[allow(auto_impl)]\n impl MyTrait for .. {}\n \n trait MySafeTrait {}\n \n+#[allow(auto_impl)]\n unsafe impl MySafeTrait for .. {}\n //~^ ERROR implementing the trait `MySafeTrait` is not unsafe\n \n unsafe trait MyUnsafeTrait {}\n \n+#[allow(auto_impl)]\n impl MyUnsafeTrait for .. {}\n //~^ ERROR the trait `MyUnsafeTrait` requires an `unsafe impl` declaration\n "}, {"sha": "4c5502cec18a851ff4c7d25cb6e07c17dab1f9ea", "filename": "src/test/compile-fail/feature-gate-optin-builtin-traits.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Ffeature-gate-optin-builtin-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Ffeature-gate-optin-builtin-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-optin-builtin-traits.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -17,8 +17,12 @@ trait DummyTrait {\n     fn dummy(&self) {}\n }\n \n+auto trait AutoDummyTrait {}\n+//~^ ERROR auto traits are experimental and possibly buggy\n+\n+#[allow(auto_impl)]\n impl DummyTrait for .. {}\n-//~^ ERROR default trait implementations are experimental and possibly buggy\n+//~^ ERROR auto trait implementations are experimental and possibly buggy\n \n impl !DummyTrait for DummyStruct {}\n //~^ ERROR negative trait bounds are not yet fully implemented; use marker types for now"}, {"sha": "bf44cd53f67dc45bda84c3d1bbd7c25692315da3", "filename": "src/test/compile-fail/issue-23080-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Fissue-23080-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Fissue-23080-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23080-2.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -17,6 +17,7 @@ unsafe trait Trait {\n     type Output;\n }\n \n+#[allow(auto_impl)]\n unsafe impl Trait for .. {}\n \n fn call_method<T: Trait>(x: T) {}"}, {"sha": "1fb63391d5608df43db2846b69917f97cbccff97", "filename": "src/test/compile-fail/issue-23080.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Fissue-23080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Fissue-23080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23080.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -19,6 +19,7 @@ unsafe trait Trait {\n     }\n }\n \n+#[allow(auto_impl)]\n unsafe impl Trait for .. {}\n \n fn call_method<T: Trait>(x: T) {"}, {"sha": "1c1cb396a54f200e8a50eaa296dd3c30efd6c4c9", "filename": "src/test/compile-fail/phantom-oibit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -18,6 +18,7 @@ use std::marker::{PhantomData};\n \n unsafe trait Zen {}\n \n+#[allow(auto_impl)]\n unsafe impl Zen for .. {}\n \n unsafe impl<'a, T: 'a> Zen for &'a T where T: Sync {}"}, {"sha": "34082adb8f9a563a82c674d5fbb723f0e849a676", "filename": "src/test/compile-fail/privacy-sanity.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Fprivacy-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Fprivacy-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy-sanity.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -21,6 +21,7 @@ pub struct S {\n }\n struct Ts(pub u8);\n \n+#[allow(auto_impl)]\n pub impl MarkerTr for .. {} //~ ERROR unnecessary visibility qualifier\n pub impl Tr for S {  //~ ERROR unnecessary visibility qualifier\n     pub fn f() {} //~ ERROR unnecessary visibility qualifier\n@@ -49,6 +50,7 @@ const MAIN: u8 = {\n     }\n     struct Ts(pub u8);\n \n+    #[allow(auto_impl)]\n     pub impl MarkerTr for .. {} //~ ERROR unnecessary visibility qualifier\n     pub impl Tr for S {  //~ ERROR unnecessary visibility qualifier\n         pub fn f() {} //~ ERROR unnecessary visibility qualifier\n@@ -80,6 +82,7 @@ fn main() {\n     }\n     struct Ts(pub u8);\n \n+    #[allow(auto_impl)]\n     pub impl MarkerTr for .. {} //~ ERROR unnecessary visibility qualifier\n     pub impl Tr for S {  //~ ERROR unnecessary visibility qualifier\n         pub fn f() {} //~ ERROR unnecessary visibility qualifier"}, {"sha": "cad43ffeacec9afd002cf17275513a612faa147b", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-no-default-trait-implementations.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default-trait-implementations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default-trait-implementations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default-trait-implementations.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -13,7 +13,8 @@\n \n trait Foo {}\n \n+#[allow(auto_impl)]\n default impl Foo for .. {}\n-//~^ ERROR `default impl` is not allowed for default trait implementations\n+//~^ ERROR `default impl` is not allowed for auto trait implementations\n \n fn main() {}"}, {"sha": "c97cb3f6bb70b6c47a6d019ae2e21255a7f8137f", "filename": "src/test/compile-fail/specialization/specialization-polarity.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-polarity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-polarity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fspecialization-polarity.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -15,13 +15,15 @@\n \n trait Foo {}\n \n+#[allow(auto_impl)]\n impl Foo for .. {}\n \n impl<T> Foo for T {}\n impl !Foo for u8 {} //~ ERROR E0119\n \n trait Bar {}\n \n+#[allow(auto_impl)]\n impl Bar for .. {}\n \n impl<T> !Bar for T {}"}, {"sha": "45303cbf70025c2e283dbd422631888da47479ff", "filename": "src/test/compile-fail/syntaxt-default-trait-impls.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Fsyntaxt-default-trait-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Fsyntaxt-default-trait-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntaxt-default-trait-impls.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -10,9 +10,10 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait MyDefaultImpl {}\n+trait MyAutoImpl {}\n \n-impl<T> MyDefaultImpl for .. {}\n-//~^ ERROR default trait implementations are not allowed to have generics\n+#[allow(auto_impl)]\n+impl<T> MyAutoImpl for .. {}\n+//~^ ERROR auto trait implementations are not allowed to have generics\n \n fn main() {}"}, {"sha": "6c7928f13f8941f3052c74189e808490d1ca110b", "filename": "src/test/compile-fail/traits-inductive-overflow-supertrait-oibit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-supertrait-oibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-supertrait-oibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-supertrait-oibit.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -15,6 +15,7 @@\n #![feature(optin_builtin_traits)]\n \n trait Magic: Copy {} //~ ERROR E0568\n+#[allow(auto_impl)]\n impl Magic for .. {}\n \n fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }"}, {"sha": "173582ed22fdc2523f74fbef0296694abf7c5c2b", "filename": "src/test/compile-fail/typeck-auto-trait-no-supertraits-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits-2.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -11,6 +11,7 @@\n #![feature(optin_builtin_traits)]\n \n trait Magic : Sized where Option<Self> : Magic {} //~ ERROR E0568\n+#[allow(auto_impl)]\n impl Magic for .. {}\n impl<T:Magic> Magic for T {}\n "}, {"sha": "6802f72504b7d65adc1457fc8112254c89948f37", "filename": "src/test/compile-fail/typeck-auto-trait-no-supertraits.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-supertraits.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -35,6 +35,7 @@\n #![feature(optin_builtin_traits)]\n \n trait Magic: Copy {} //~ ERROR E0568\n+#[allow(auto_impl)]\n impl Magic for .. {}\n impl<T:Magic> Magic for T {}\n "}, {"sha": "3c409d1b371eb3ee90eb916adcb660fb1854698b", "filename": "src/test/compile-fail/typeck-auto-trait-no-typeparams.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-typeparams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-typeparams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-auto-trait-no-typeparams.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -11,4 +11,5 @@\n #![feature(optin_builtin_traits)]\n \n trait Magic<T> {} //~ ERROR E0567\n+#[allow(auto_impl)]\n impl Magic<isize> for .. {}"}, {"sha": "a837d8c9ca74eccf2d989c134f7a5d7ce8a155dd", "filename": "src/test/compile-fail/typeck-default-trait-impl-constituent-types-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types-2.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -12,6 +12,7 @@\n \n trait MyTrait {}\n \n+#[allow(auto_impl)]\n impl MyTrait for .. {}\n \n struct MyS;"}, {"sha": "bed184eb4ccca9e70f57e35bae9ccd28692ada6a", "filename": "src/test/compile-fail/typeck-default-trait-impl-constituent-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -12,6 +12,7 @@\n \n trait MyTrait {}\n \n+#[allow(auto_impl)]\n impl MyTrait for .. {}\n impl<T> !MyTrait for *mut T {}\n "}, {"sha": "f3a6d8a342e221c7153bc70f7255270f406de7a1", "filename": "src/test/compile-fail/typeck-default-trait-impl-negation.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -12,10 +12,12 @@\n \n trait MyTrait {}\n \n+#[allow(auto_impl)]\n impl MyTrait for .. {}\n \n unsafe trait MyUnsafeTrait {}\n \n+#[allow(auto_impl)]\n unsafe impl MyUnsafeTrait for .. {}\n \n struct ThisImplsTrait;"}, {"sha": "da3e926d6fc1fdd2375c1795c3cc178047d255df", "filename": "src/test/compile-fail/typeck-default-trait-impl-outside-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-outside-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-outside-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-outside-crate.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -10,6 +10,7 @@\n \n #![feature(optin_builtin_traits)]\n \n+#[allow(auto_impl)]\n impl Copy for .. {} //~ ERROR E0318\n      //~^ NOTE `Copy` trait not defined in this crate\n fn main() {}"}, {"sha": "bdd6487b86d74ea65de8026a350697aac56717b3", "filename": "src/test/compile-fail/typeck-default-trait-impl-precedence.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-precedence.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -16,6 +16,7 @@\n #![feature(optin_builtin_traits)]\n \n trait Defaulted { }\n+#[allow(auto_impl)]\n impl Defaulted for .. { }\n impl<'a,T:Signed> Defaulted for &'a T { }\n impl<'a,T:Signed> Defaulted for &'a mut T { }"}, {"sha": "108363a464519d56bb41a9de9876e5adace1ce6c", "filename": "src/test/incremental/hashes/trait_defs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -249,7 +249,7 @@ trait TraitChangeMethodParametersOrder {\n \n // Add default implementation to method -------------------------------------------\n #[cfg(cfail1)]\n-trait TraitAddMethodDefaultImplementation {\n+trait TraitAddMethodAutoImplementation {\n     fn method();\n }\n \n@@ -258,7 +258,7 @@ trait TraitAddMethodDefaultImplementation {\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-trait TraitAddMethodDefaultImplementation {\n+trait TraitAddMethodAutoImplementation {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]"}, {"sha": "842af49e8a7f9a968ff073e84aaf4cf81a121a63", "filename": "src/test/pretty/auto-trait.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fpretty%2Fauto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Fpretty%2Fauto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fauto-trait.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -12,8 +12,8 @@\n \n // pp-exact\n \n-trait MyTrait { }\n+auto trait MyTrait { }\n \n-impl MyTrait for .. { }\n+unsafe auto trait UnsafeMyTrait { }\n \n pub fn main() { }", "previous_filename": "src/test/pretty/default-trait-impl.rs"}, {"sha": "185476fb704f7fe4176766abe11d54c7c3e2025d", "filename": "src/test/run-make/simd-ffi/simd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsimd-ffi%2Fsimd.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -81,4 +81,5 @@ pub mod marker {\n \n #[lang = \"freeze\"]\n trait Freeze {}\n+#[allow(auto_impl)]\n impl Freeze for .. {}"}, {"sha": "a0feb72702834e74eed0166eaeab601f322cbfd3", "filename": "src/test/run-make/target-specs/foo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Frun-make%2Ftarget-specs%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Frun-make%2Ftarget-specs%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftarget-specs%2Ffoo.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -19,6 +19,7 @@ trait Sized { }\n \n #[lang = \"freeze\"]\n trait Freeze {}\n+#[allow(auto_impl)]\n impl Freeze for .. {}\n \n #[lang=\"start\"]"}, {"sha": "ad433cc26a790bdf3984052049e8d82bcfdf8fd2", "filename": "src/test/run-pass/auto-is-contextual.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Frun-pass%2Fauto-is-contextual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Frun-pass%2Fauto-is-contextual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-is-contextual.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! auto {\n+    () => (struct S;)\n+}\n+\n+auto!();\n+\n+fn auto() {}\n+\n+fn main() {\n+    auto();\n+    let auto = 10;\n+    auto;\n+    auto as u8;\n+}"}, {"sha": "752f5a11375adc68bc48a85fb368963f6c758496", "filename": "src/test/run-pass/auto-traits.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Frun-pass%2Fauto-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Frun-pass%2Fauto-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-traits.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(optin_builtin_traits)]\n+\n+auto trait Auto {}\n+// Redundant but accepted until we remove it.\n+#[allow(auto_impl)]\n+impl Auto for .. {}\n+\n+unsafe auto trait AutoUnsafe {}\n+\n+impl !Auto for bool {}\n+impl !AutoUnsafe for bool {}\n+\n+struct AutoBool(bool);\n+\n+impl Auto for AutoBool {}\n+unsafe impl AutoUnsafe for AutoBool {}\n+\n+fn take_auto<T: Auto>(_: T) {}\n+fn take_auto_unsafe<T: AutoUnsafe>(_: T) {}\n+\n+fn main() {\n+    take_auto(0);\n+    take_auto(AutoBool(true));\n+    take_auto_unsafe(0);\n+    take_auto_unsafe(AutoBool(true));\n+}"}, {"sha": "5fa0a002a10db9071c31f3f4418bda4ffccbc959", "filename": "src/test/run-pass/issue-29516.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Frun-pass%2Fissue-29516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Frun-pass%2Fissue-29516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-29516.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -11,6 +11,7 @@\n #![feature(optin_builtin_traits)]\n \n trait NotSame {}\n+#[allow(auto_impl)]\n impl NotSame for .. {}\n impl<A> !NotSame for (A, A) {}\n "}, {"sha": "4fd55bd482cd998029fb89eb2dcd477d999414c3", "filename": "src/test/rustdoc/auxiliary/rustdoc-default-impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Frustdoc%2Fauxiliary%2Frustdoc-default-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Frustdoc%2Fauxiliary%2Frustdoc-default-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Frustdoc-default-impl.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -16,6 +16,7 @@ pub mod bar {\n \n     pub trait Bar {}\n \n+    #[allow(auto_impl)]\n     impl Bar for .. {}\n \n     pub trait Foo {"}, {"sha": "d886778278dfd3dd86a35bc16c5096961eaca876", "filename": "src/test/rustdoc/auxiliary/rustdoc-impl-parts-crosscrate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Frustdoc%2Fauxiliary%2Frustdoc-impl-parts-crosscrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Frustdoc%2Fauxiliary%2Frustdoc-impl-parts-crosscrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Frustdoc-impl-parts-crosscrate.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -12,4 +12,5 @@\n \n pub trait AnOibit {}\n \n+#[allow(auto_impl)]\n impl AnOibit for .. {}"}, {"sha": "f74f66ce7290551849082781c0f7184313d6e956", "filename": "src/test/rustdoc/impl-parts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Frustdoc%2Fimpl-parts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftest%2Frustdoc%2Fimpl-parts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-parts.rs?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -12,6 +12,7 @@\n \n pub trait AnOibit {}\n \n+#[allow(auto_impl)]\n impl AnOibit for .. {}\n \n pub struct Foo<T> { field: T }"}, {"sha": "9dd420c14586d5add18cde7756c6af237e51d04a", "filename": "src/tools/toolstate.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2278506f682062c7988c9e534a94366c56693981/src%2Ftools%2Ftoolstate.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2278506f682062c7988c9e534a94366c56693981/src%2Ftools%2Ftoolstate.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftoolstate.toml?ref=2278506f682062c7988c9e534a94366c56693981", "patch": "@@ -29,7 +29,7 @@ miri = \"Broken\"\n clippy = \"Broken\"\n \n # ping @nrc\n-rls = \"Testing\"\n+rls = \"Broken\"\n \n # ping @nrc\n-rustfmt = \"Testing\"\n+rustfmt = \"Broken\""}]}