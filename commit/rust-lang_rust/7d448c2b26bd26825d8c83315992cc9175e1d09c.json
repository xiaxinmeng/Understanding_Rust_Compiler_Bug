{"sha": "7d448c2b26bd26825d8c83315992cc9175e1d09c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNDQ4YzJiMjZiZDI2ODI1ZDhjODMzMTU5OTJjYzkxNzVlMWQwOWM=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-09-29T03:45:42Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-09-29T03:45:42Z"}, "message": "Implement FnSig type", "tree": {"sha": "84aec1d40d297b5161cd84a8e0e723268c60c572", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84aec1d40d297b5161cd84a8e0e723268c60c572"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d448c2b26bd26825d8c83315992cc9175e1d09c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d448c2b26bd26825d8c83315992cc9175e1d09c", "html_url": "https://github.com/rust-lang/rust/commit/7d448c2b26bd26825d8c83315992cc9175e1d09c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d448c2b26bd26825d8c83315992cc9175e1d09c/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26fa7515e52d4434cd78d8d745f4de3a076b46fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/26fa7515e52d4434cd78d8d745f4de3a076b46fe", "html_url": "https://github.com/rust-lang/rust/commit/26fa7515e52d4434cd78d8d745f4de3a076b46fe"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "805be05c44b54b0b3953814393826f0518dec7e8", "filename": "src/items.rs", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/7d448c2b26bd26825d8c83315992cc9175e1d09c/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d448c2b26bd26825d8c83315992cc9175e1d09c/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=7d448c2b26bd26825d8c83315992cc9175e1d09c", "patch": "@@ -15,6 +15,7 @@ use std::cmp::min;\n use syntax::{abi, ast, ptr, symbol};\n use syntax::ast::ImplItem;\n use syntax::codemap::{BytePos, Span};\n+use syntax::visit;\n \n use spanned::Spanned;\n use codemap::{LineRangeUtils, SpanUtils};\n@@ -159,6 +160,74 @@ enum BodyElement<'a> {\n     ForeignItem(&'a ast::ForeignItem),\n }\n \n+/// Represents a fn's signature.\n+pub struct FnSig<'a> {\n+    decl: &'a ast::FnDecl,\n+    generics: &'a ast::Generics,\n+    abi: abi::Abi,\n+    constness: ast::Constness,\n+    defaultness: ast::Defaultness,\n+    unsafety: ast::Unsafety,\n+    visibility: ast::Visibility,\n+}\n+\n+impl<'a> FnSig<'a> {\n+    pub fn new(\n+        decl: &'a ast::FnDecl,\n+        generics: &'a ast::Generics,\n+        vis: ast::Visibility,\n+    ) -> FnSig<'a> {\n+        FnSig {\n+            decl: decl,\n+            generics: generics,\n+            abi: abi::Abi::Rust,\n+            constness: ast::Constness::NotConst,\n+            defaultness: ast::Defaultness::Final,\n+            unsafety: ast::Unsafety::Normal,\n+            visibility: vis,\n+        }\n+    }\n+\n+    pub fn from_method_sig(method_sig: &'a ast::MethodSig) -> FnSig {\n+        FnSig {\n+            unsafety: method_sig.unsafety,\n+            constness: method_sig.constness.node,\n+            defaultness: ast::Defaultness::Final,\n+            abi: method_sig.abi,\n+            decl: &*method_sig.decl,\n+            generics: &method_sig.generics,\n+            visibility: ast::Visibility::Inherited,\n+        }\n+    }\n+\n+    pub fn from_fn_kind(\n+        fn_kind: &'a visit::FnKind,\n+        decl: &'a ast::FnDecl,\n+        defualtness: ast::Defaultness,\n+    ) -> FnSig<'a> {\n+        match *fn_kind {\n+            visit::FnKind::ItemFn(_, generics, unsafety, constness, abi, visibility, _) => FnSig {\n+                decl: decl,\n+                generics: generics,\n+                abi: abi,\n+                constness: constness.node,\n+                defaultness: defualtness,\n+                unsafety: unsafety,\n+                visibility: visibility.clone(),\n+            },\n+            visit::FnKind::Method(_, ref method_sig, vis, _) => {\n+                let mut fn_sig = FnSig::from_method_sig(method_sig);\n+                fn_sig.defaultness = defualtness;\n+                if let Some(vis) = vis {\n+                    fn_sig.visibility = vis.clone();\n+                }\n+                fn_sig\n+            }\n+            _ => unreachable!(),\n+        }\n+    }\n+}\n+\n impl<'a> FmtVisitor<'a> {\n     fn format_item(&mut self, item: Item) {\n         self.buffer.push_str(&item.abi);"}]}