{"sha": "037bf3757cf54e38544c494657ac88bc002b945c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzN2JmMzc1N2NmNTRlMzg1NDRjNDk0NjU3YWM4OGJjMDAyYjk0NWM=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-07-26T02:21:46Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-07-26T02:21:46Z"}, "message": "libstd: Implement some missing udp methods.", "tree": {"sha": "13c2b954f06bbdc2a0149fe7df0c0dc2247d5a0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13c2b954f06bbdc2a0149fe7df0c0dc2247d5a0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/037bf3757cf54e38544c494657ac88bc002b945c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/037bf3757cf54e38544c494657ac88bc002b945c", "html_url": "https://github.com/rust-lang/rust/commit/037bf3757cf54e38544c494657ac88bc002b945c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/037bf3757cf54e38544c494657ac88bc002b945c/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5c6b85091e171c9ec85bad68774aece81af74fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c6b85091e171c9ec85bad68774aece81af74fa", "html_url": "https://github.com/rust-lang/rust/commit/a5c6b85091e171c9ec85bad68774aece81af74fa"}], "stats": {"total": 160, "additions": 139, "deletions": 21}, "files": [{"sha": "d293d46e0126256ba525ad9420ee57fbb42f8025", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/037bf3757cf54e38544c494657ac88bc002b945c/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/037bf3757cf54e38544c494657ac88bc002b945c/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=037bf3757cf54e38544c494657ac88bc002b945c", "patch": "@@ -74,17 +74,17 @@ pub trait RtioUdpSocket : RtioSocket {\n     fn recvfrom(&mut self, buf: &mut [u8]) -> Result<(uint, IpAddr), IoError>;\n     fn sendto(&mut self, buf: &[u8], dst: IpAddr) -> Result<(), IoError>;\n \n-    fn join_multicast(&mut self, multi: IpAddr);\n-    fn leave_multicast(&mut self, multi: IpAddr);\n+    fn join_multicast(&mut self, multi: IpAddr) -> Result<(), IoError>;\n+    fn leave_multicast(&mut self, multi: IpAddr) -> Result<(), IoError>;\n \n-    fn loop_multicast_locally(&mut self);\n-    fn dont_loop_multicast_locally(&mut self);\n+    fn loop_multicast_locally(&mut self) -> Result<(), IoError>;\n+    fn dont_loop_multicast_locally(&mut self) -> Result<(), IoError>;\n \n-    fn multicast_time_to_live(&mut self, ttl: int);\n-    fn time_to_live(&mut self, ttl: int);\n+    fn multicast_time_to_live(&mut self, ttl: int) -> Result<(), IoError>;\n+    fn time_to_live(&mut self, ttl: int) -> Result<(), IoError>;\n \n-    fn hear_broadcasts(&mut self);\n-    fn ignore_broadcasts(&mut self);\n+    fn hear_broadcasts(&mut self) -> Result<(), IoError>;\n+    fn ignore_broadcasts(&mut self) -> Result<(), IoError>;\n }\n \n pub trait RtioTimer {"}, {"sha": "fc4a668bdf662222d84f3c0c209acba65068c22f", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 111, "deletions": 10, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/037bf3757cf54e38544c494657ac88bc002b945c/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/037bf3757cf54e38544c494657ac88bc002b945c/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=037bf3757cf54e38544c494657ac88bc002b945c", "patch": "@@ -16,8 +16,9 @@ use cast;\n use cast::transmute;\n use clone::Clone;\n use libc::{c_int, c_uint, c_void};\n+use ptr;\n use rt::io::IoError;\n-use rt::io::net::ip::IpAddr;\n+use rt::io::net::ip::{IpAddr, Ipv4, Ipv6};\n use rt::uv::*;\n use rt::uv::idle::IdleWatcher;\n use rt::uv::net::{UvIpv4, UvIpv6};\n@@ -26,6 +27,7 @@ use rt::sched::Scheduler;\n use rt::io::{standard_error, OtherIoError};\n use rt::tube::Tube;\n use rt::local::Local;\n+use str::StrSlice;\n use unstable::sync::{Exclusive, exclusive};\n \n #[cfg(test)] use container::Container;\n@@ -657,18 +659,117 @@ impl RtioUdpSocket for UvUdpSocket {\n         return result_cell.take();\n     }\n \n-    // XXX implement\n-    fn join_multicast(&mut self, _multi: IpAddr) { fail!(); }\n-    fn leave_multicast(&mut self, _multi: IpAddr) { fail!(); }\n+    fn join_multicast(&mut self, multi: IpAddr) -> Result<(), IoError> {\n+        let ip_str = match multi {\n+            Ipv4(x1, x2, x3, x4, _) =>\n+                fmt!(\"%u.%u.%u.%u\", x1 as uint, x2 as uint, x3 as uint, x4 as uint),\n+            Ipv6(x1, x2, x3, x4, x5, x6, x7, x8, _) =>\n+                fmt!(\"%x:%x:%x:%x:%x:%x:%x:%x\",\n+                      x1 as uint, x2 as uint, x3 as uint, x4 as uint,\n+                      x5 as uint, x6 as uint, x7 as uint, x8 as uint),\n+        };\n+\n+        let r = unsafe {\n+            do ip_str.as_c_str |m_addr| {\n+                uvll::udp_set_membership(self.native_handle(), m_addr,\n+                                         ptr::null(), uvll::UV_JOIN_GROUP)\n+            }\n+        };\n+\n+        match status_to_maybe_uv_error(**self, r) {\n+            Some(err) => Err(uv_error_to_io_error(err)),\n+            None => Ok(())\n+        }\n+    }\n+\n+    fn leave_multicast(&mut self, multi: IpAddr) -> Result<(), IoError> {\n+        let ip_str = match multi {\n+            Ipv4(x1, x2, x3, x4, _) =>\n+                fmt!(\"%u.%u.%u.%u\", x1 as uint, x2 as uint, x3 as uint, x4 as uint),\n+            Ipv6(x1, x2, x3, x4, x5, x6, x7, x8, _) =>\n+                fmt!(\"%x:%x:%x:%x:%x:%x:%x:%x\",\n+                      x1 as uint, x2 as uint, x3 as uint, x4 as uint,\n+                      x5 as uint, x6 as uint, x7 as uint, x8 as uint),\n+        };\n+\n+        let r = unsafe {\n+            do ip_str.as_c_str |m_addr| {\n+                uvll::udp_set_membership(self.native_handle(), m_addr,\n+                                         ptr::null(), uvll::UV_LEAVE_GROUP)\n+            }\n+        };\n+\n+        match status_to_maybe_uv_error(**self, r) {\n+            Some(err) => Err(uv_error_to_io_error(err)),\n+            None => Ok(())\n+        }\n+    }\n+\n+    fn loop_multicast_locally(&mut self) -> Result<(), IoError> {\n+        let r = unsafe {\n+            uvll::udp_set_multicast_loop(self.native_handle(), 1 as c_int)\n+        };\n+\n+        match status_to_maybe_uv_error(**self, r) {\n+            Some(err) => Err(uv_error_to_io_error(err)),\n+            None => Ok(())\n+        }\n+    }\n+\n+    fn dont_loop_multicast_locally(&mut self) -> Result<(), IoError> {\n+        let r = unsafe {\n+            uvll::udp_set_multicast_loop(self.native_handle(), 0 as c_int)\n+        };\n+\n+        match status_to_maybe_uv_error(**self, r) {\n+            Some(err) => Err(uv_error_to_io_error(err)),\n+            None => Ok(())\n+        }\n+    }\n \n-    fn loop_multicast_locally(&mut self) { fail!(); }\n-    fn dont_loop_multicast_locally(&mut self) { fail!(); }\n+    fn multicast_time_to_live(&mut self, ttl: int) -> Result<(), IoError> {\n+        let r = unsafe {\n+            uvll::udp_set_multicast_ttl(self.native_handle(), ttl as c_int)\n+        };\n \n-    fn multicast_time_to_live(&mut self, _ttl: int) { fail!(); }\n-    fn time_to_live(&mut self, _ttl: int) { fail!(); }\n+        match status_to_maybe_uv_error(**self, r) {\n+            Some(err) => Err(uv_error_to_io_error(err)),\n+            None => Ok(())\n+        }\n+    }\n \n-    fn hear_broadcasts(&mut self) { fail!(); }\n-    fn ignore_broadcasts(&mut self) { fail!(); }\n+    fn time_to_live(&mut self, ttl: int) -> Result<(), IoError> {\n+        let r = unsafe {\n+            uvll::udp_set_ttl(self.native_handle(), ttl as c_int)\n+        };\n+\n+        match status_to_maybe_uv_error(**self, r) {\n+            Some(err) => Err(uv_error_to_io_error(err)),\n+            None => Ok(())\n+        }\n+    }\n+\n+    fn hear_broadcasts(&mut self) -> Result<(), IoError> {\n+        let r = unsafe {\n+            uvll::udp_set_broadcast(self.native_handle(), 1 as c_int)\n+        };\n+\n+        match status_to_maybe_uv_error(**self, r) {\n+            Some(err) => Err(uv_error_to_io_error(err)),\n+            None => Ok(())\n+        }\n+    }\n+\n+    fn ignore_broadcasts(&mut self) -> Result<(), IoError> {\n+        let r = unsafe {\n+            uvll::udp_set_broadcast(self.native_handle(), 0 as c_int)\n+        };\n+\n+        match status_to_maybe_uv_error(**self, r) {\n+            Some(err) => Err(uv_error_to_io_error(err)),\n+            None => Ok(())\n+        }\n+    }\n }\n \n pub struct UvTimer(timer::TimerWatcher);"}, {"sha": "07264839c3555dda0107bdc085540cf2168d98b8", "filename": "src/libstd/rt/uv/uvll.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/037bf3757cf54e38544c494657ac88bc002b945c/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/037bf3757cf54e38544c494657ac88bc002b945c/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs?ref=037bf3757cf54e38544c494657ac88bc002b945c", "patch": "@@ -78,7 +78,6 @@ pub type sockaddr = c_void;\n pub type sockaddr_in = c_void;\n pub type sockaddr_in6 = c_void;\n pub type sockaddr_storage = c_void;\n-pub type uv_membership = c_void;\n \n #[deriving(Eq)]\n pub enum uv_handle_type {\n@@ -117,6 +116,12 @@ pub enum uv_req_type {\n     UV_REQ_TYPE_MAX\n }\n \n+#[deriving(Eq)]\n+pub enum uv_membership {\n+    UV_LEAVE_GROUP,\n+    UV_JOIN_GROUP\n+}\n+\n pub unsafe fn malloc_handle(handle: uv_handle_type) -> *c_void {\n     assert!(handle != UV_UNKNOWN_HANDLE && handle != UV_HANDLE_TYPE_MAX);\n     let size = rust_uv_handle_size(handle as uint);\n@@ -240,7 +245,7 @@ pub unsafe fn udp_get_sockname(handle: *uv_udp_t, name: *sockaddr_storage) -> c_\n \n pub unsafe fn udp_set_membership(handle: *uv_udp_t, multicast_addr: *c_char,\n                                  interface_addr: *c_char, membership: uv_membership) -> c_int {\n-    return rust_uv_udp_set_membership(handle, multicast_addr, interface_addr, membership);\n+    return rust_uv_udp_set_membership(handle, multicast_addr, interface_addr, membership as c_int);\n }\n \n pub unsafe fn udp_set_multicast_loop(handle: *uv_udp_t, on: c_int) -> c_int {\n@@ -251,6 +256,10 @@ pub unsafe fn udp_set_multicast_ttl(handle: *uv_udp_t, ttl: c_int) -> c_int {\n     return rust_uv_udp_set_multicast_ttl(handle, ttl);\n }\n \n+pub unsafe fn udp_set_ttl(handle: *uv_udp_t, ttl: c_int) -> c_int {\n+    return rust_uv_udp_set_ttl(handle, ttl);\n+}\n+\n pub unsafe fn udp_set_broadcast(handle: *uv_udp_t, on: c_int) -> c_int {\n     return rust_uv_udp_set_broadcast(handle, on);\n }\n@@ -527,9 +536,10 @@ extern {\n     fn rust_uv_get_udp_handle_from_send_req(req: *uv_udp_send_t) -> *uv_udp_t;\n     fn rust_uv_udp_getsockname(handle: *uv_udp_t, name: *sockaddr_storage) -> c_int;\n     fn rust_uv_udp_set_membership(handle: *uv_udp_t, multicast_addr: *c_char,\n-                                  interface_addr: *c_char, membership: uv_membership) -> c_int;\n+                                  interface_addr: *c_char, membership: c_int) -> c_int;\n     fn rust_uv_udp_set_multicast_loop(handle: *uv_udp_t, on: c_int) -> c_int;\n     fn rust_uv_udp_set_multicast_ttl(handle: *uv_udp_t, ttl: c_int) -> c_int;\n+    fn rust_uv_udp_set_ttl(handle: *uv_udp_t, ttl: c_int) -> c_int;\n     fn rust_uv_udp_set_broadcast(handle: *uv_udp_t, on: c_int) -> c_int;\n \n     fn rust_uv_is_ipv4_sockaddr(addr: *sockaddr) -> c_int;"}, {"sha": "19162b8df6b0f163ee0bd8f4af692a34ffb7b18c", "filename": "src/rt/rust_uv.cpp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/037bf3757cf54e38544c494657ac88bc002b945c/src%2Frt%2Frust_uv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/037bf3757cf54e38544c494657ac88bc002b945c/src%2Frt%2Frust_uv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uv.cpp?ref=037bf3757cf54e38544c494657ac88bc002b945c", "patch": "@@ -385,6 +385,12 @@ rust_uv_udp_set_multicast_ttl\n     return uv_udp_set_multicast_ttl(handle, ttl);\n }\n \n+extern \"C\" int\n+rust_uv_udp_set_ttl\n+(uv_udp_t* handle, int ttl) {\n+    return uv_udp_set_ttl(handle, ttl);\n+}\n+\n extern \"C\" int\n rust_uv_udp_set_broadcast\n (uv_udp_t* handle, int on) {"}, {"sha": "fc7796ef66ce506f108c9f056bd456d166bde74d", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/037bf3757cf54e38544c494657ac88bc002b945c/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/037bf3757cf54e38544c494657ac88bc002b945c/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=037bf3757cf54e38544c494657ac88bc002b945c", "patch": "@@ -121,6 +121,7 @@ rust_uv_udp_getsockname\n rust_uv_udp_set_membership\n rust_uv_udp_set_multicast_loop\n rust_uv_udp_set_multicast_ttl\n+rust_uv_udp_set_ttl\n rust_uv_udp_set_broadcast\n rust_uv_is_ipv4_sockaddr\n rust_uv_is_ipv6_sockaddr"}]}