{"sha": "fd87c6dab95dc1b24f136f9b28b236999e8dd2cf", "node_id": "C_kwDOAAsO6NoAKGZkODdjNmRhYjk1ZGMxYjI0ZjEzNmY5YjI4YjIzNjk5OWU4ZGQyY2Y", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-11-18T18:30:28Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-11-18T18:30:28Z"}, "message": "Update to latest portable-simd version", "tree": {"sha": "ae58c49b2e19e824c786a6bb41f08df84a246223", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae58c49b2e19e824c786a6bb41f08df84a246223"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd87c6dab95dc1b24f136f9b28b236999e8dd2cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd87c6dab95dc1b24f136f9b28b236999e8dd2cf", "html_url": "https://github.com/rust-lang/rust/commit/fd87c6dab95dc1b24f136f9b28b236999e8dd2cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd87c6dab95dc1b24f136f9b28b236999e8dd2cf/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d288c6924d15e3202f006997167be0e54d307079", "url": "https://api.github.com/repos/rust-lang/rust/commits/d288c6924d15e3202f006997167be0e54d307079", "html_url": "https://github.com/rust-lang/rust/commit/d288c6924d15e3202f006997167be0e54d307079"}], "stats": {"total": 167, "additions": 79, "deletions": 88}, "files": [{"sha": "b3ee56753beb764482ded1e33369a9d04ae0d0e1", "filename": "build_system/prepare.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd87c6dab95dc1b24f136f9b28b236999e8dd2cf/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd87c6dab95dc1b24f136f9b28b236999e8dd2cf/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=fd87c6dab95dc1b24f136f9b28b236999e8dd2cf", "patch": "@@ -30,7 +30,7 @@ pub(crate) fn prepare() {\n     clone_repo(\n         \"portable-simd\",\n         \"https://github.com/rust-lang/portable-simd\",\n-        \"8cf7a62e5d2552961df51e5200aaa5b7c890a4bf\",\n+        \"b8d6b6844602f80af79cd96401339ec594d472d8\",\n     );\n     apply_patches(\"portable-simd\", Path::new(\"portable-simd\"));\n "}, {"sha": "c13259086917b9c8e996dd8b88d7a142137a0bc5", "filename": "patches/0001-portable-simd-Disable-unsupported-tests.patch", "status": "modified", "additions": 78, "deletions": 87, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/fd87c6dab95dc1b24f136f9b28b236999e8dd2cf/patches%2F0001-portable-simd-Disable-unsupported-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/fd87c6dab95dc1b24f136f9b28b236999e8dd2cf/patches%2F0001-portable-simd-Disable-unsupported-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0001-portable-simd-Disable-unsupported-tests.patch?ref=fd87c6dab95dc1b24f136f9b28b236999e8dd2cf", "patch": "@@ -1,152 +1,143 @@\n-From 6bfce5dc2cbf834c74dbccb7538adc08c6eb57e7 Mon Sep 17 00:00:00 2001\n+From 97c473937382a5b5858d9cce3c947855d23b2dc5 Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n-Date: Sun, 25 Jul 2021 18:39:31 +0200\n+Date: Thu, 18 Nov 2021 19:28:40 +0100\n Subject: [PATCH] Disable unsupported tests\n \n ---\n- crates/core_simd/src/vector.rs        |  2 ++\n- crates/core_simd/src/math.rs         |  4 ++++\n- crates/core_simd/tests/masks.rs      | 12 ------------\n- crates/core_simd/tests/ops_macros.rs |  6 ++++++\n- crates/core_simd/tests/round.rs      |  2 ++\n- 6 files changed, 15 insertions(+), 13 deletions(-)\n+ crates/core_simd/src/math.rs         | 6 ++++++\n+ crates/core_simd/src/vector.rs       | 2 ++\n+ crates/core_simd/tests/masks.rs      | 2 ++\n+ crates/core_simd/tests/ops_macros.rs | 4 ++++\n+ 4 files changed, 14 insertions(+)\n \n-diff --git a/crates/core_simd/src/vector.rs b/crates/core_simd/src/vector.rs\n-index 25c5309..2b3d819 100644\n---- a/crates/core_simd/src/vector.rs\n-+++ b/crates/core_simd/src/vector.rs\n-@@ -22,6 +22,7 @@ where\n-         self.0\n-     }\n- \n-+    /*\n-     /// SIMD gather: construct a SIMD vector by reading from a slice, using potentially discontiguous indices.\n-     /// If an index is out of bounds, that lane instead selects the value from the \"or\" vector.\n-     /// ```\n-@@ -150,6 +151,7 @@ where\n-             // Cleared \u2622\ufe0f *mut T Zone\n-         }\n-     }\n-+    */\n- }\n- \n- impl<T, const LANES: usize> Copy for Simd<T, LANES>\n diff --git a/crates/core_simd/src/math.rs b/crates/core_simd/src/math.rs\n-index 7290a28..e394730 100644\n+index 2bae414..2f87499 100644\n --- a/crates/core_simd/src/math.rs\n +++ b/crates/core_simd/src/math.rs\n-@@ -2,6 +2,7 @@ macro_rules! impl_uint_arith {\n+@@ -5,6 +5,7 @@ macro_rules! impl_uint_arith {\n      ($($ty:ty),+) => {\n          $( impl<const LANES: usize> Simd<$ty, LANES> where LaneCount<LANES>: SupportedLaneCount {\n  \n +            /*\n              /// Lanewise saturating add.\n              ///\n              /// # Examples\n-@@ -38,6 +39,7 @@ macro_rules! impl_uint_arith {\n+@@ -43,6 +44,7 @@ macro_rules! impl_uint_arith {\n              pub fn saturating_sub(self, second: Self) -> Self {\n-                 unsafe { crate::intrinsics::simd_saturating_sub(self, second) }\n+                 unsafe { simd_saturating_sub(self, second) }\n              }\n +            */\n          })+\n      }\n  }\n-@@ -46,6 +48,7 @@ macro_rules! impl_int_arith {\n+@@ -51,6 +53,7 @@ macro_rules! impl_int_arith {\n      ($($ty:ty),+) => {\n          $( impl<const LANES: usize> Simd<$ty, LANES> where LaneCount<LANES>: SupportedLaneCount {\n  \n +            /*\n              /// Lanewise saturating add.\n              ///\n              /// # Examples\n-@@ -141,6 +144,7 @@ macro_rules! impl_int_arith {\n+@@ -89,6 +92,7 @@ macro_rules! impl_int_arith {\n+             pub fn saturating_sub(self, second: Self) -> Self {\n+                 unsafe { simd_saturating_sub(self, second) }\n+             }\n++            */\n+ \n+             /// Lanewise absolute value, implemented in Rust.\n+             /// Every lane becomes its absolute value.\n+@@ -109,6 +113,7 @@ macro_rules! impl_int_arith {\n+                 (self^m) - m\n+             }\n+ \n++            /*\n+             /// Lanewise saturating absolute value, implemented in Rust.\n+             /// As abs(), except the MIN value becomes MAX instead of itself.\n+             ///\n+@@ -151,6 +156,7 @@ macro_rules! impl_int_arith {\n              pub fn saturating_neg(self) -> Self {\n                  Self::splat(0).saturating_sub(self)\n              }\n +            */\n          })+\n      }\n  }\n+diff --git a/crates/core_simd/src/vector.rs b/crates/core_simd/src/vector.rs\n+index 7c5ec2b..c8631e8 100644\n+--- a/crates/core_simd/src/vector.rs\n++++ b/crates/core_simd/src/vector.rs\n+@@ -75,6 +75,7 @@ where\n+         Self(array)\n+     }\n+ \n++    /*\n+     /// Reads from potentially discontiguous indices in `slice` to construct a SIMD vector.\n+     /// If an index is out-of-bounds, the lane is instead selected from the `or` vector.\n+     ///\n+@@ -297,6 +298,7 @@ where\n+             // Cleared \u2622\ufe0f *mut T Zone\n+         }\n+     }\n++    */\n+ }\n+ \n+ impl<T, const LANES: usize> Copy for Simd<T, LANES>\n diff --git a/crates/core_simd/tests/masks.rs b/crates/core_simd/tests/masks.rs\n-index 61d8e44..2bccae2 100644\n+index 6a8ecd3..68fcb49 100644\n --- a/crates/core_simd/tests/masks.rs\n +++ b/crates/core_simd/tests/masks.rs\n-@@ -67,19 +67,6 @@ macro_rules! test_mask_api {\n-                 assert_eq!(int.to_array(), [-1, 0, 0, -1, 0, 0, -1, 0]);\n+@@ -68,6 +68,7 @@ macro_rules! test_mask_api {\n                  assert_eq!(core_simd::Mask::<$type, 8>::from_int(int), mask);\n              }\n--\n--            #[cfg(feature = \"generic_const_exprs\")]\n--            #[test]\n--            fn roundtrip_bitmask_conversion() {\n--                let values = [\n--                    true, false, false, true, false, false, true, false,\n--                    true, true, false, false, false, false, false, true,\n--                ];\n--                let mask = core_simd::Mask::<$type, 16>::from_array(values);\n--                let bitmask = mask.to_bitmask();\n--                assert_eq!(bitmask, [0b01001001, 0b10000011]);\n--                assert_eq!(core_simd::Mask::<$type, 16>::from_bitmask(bitmask), mask);\n--            }\n+ \n++            /*\n+             #[cfg(feature = \"generic_const_exprs\")]\n+             #[test]\n+             fn roundtrip_bitmask_conversion() {\n+@@ -80,6 +81,7 @@ macro_rules! test_mask_api {\n+                 assert_eq!(bitmask, [0b01001001, 0b10000011]);\n+                 assert_eq!(core_simd::Mask::<$type, 16>::from_bitmask(bitmask), mask);\n+             }\n++            */\n          }\n      }\n  }\n diff --git a/crates/core_simd/tests/ops_macros.rs b/crates/core_simd/tests/ops_macros.rs\n-index cb39e73..fc0ebe1 100644\n+index 31b7ee2..bd04b3c 100644\n --- a/crates/core_simd/tests/ops_macros.rs\n +++ b/crates/core_simd/tests/ops_macros.rs\n-@@ -435,6 +435,7 @@ macro_rules! impl_float_tests {\n-                     )\n-                 }\n- \n-+                /*\n-                 fn mul_add<const LANES: usize>() {\n-                     test_helpers::test_ternary_elementwise(\n-                         &Vector::<LANES>::mul_add,\n-@@ -442,6 +443,7 @@ macro_rules! impl_float_tests {\n-                         &|_, _, _| true,\n-                     )\n-                 }\n-+                */\n- \n-                 fn recip<const LANES: usize>() {\n-                     test_helpers::test_unary_elementwise(\n-@@ -581,6 +585,7 @@ macro_rules! impl_float_tests {\n+@@ -567,6 +567,7 @@ macro_rules! impl_float_tests {\n                      });\n                  }\n  \n +                /*\n                  fn horizontal_max<const LANES: usize>() {\n                      test_helpers::test_1(&|x| {\n                          let vmax = Vector::<LANES>::from_array(x).horizontal_max();\n-@@ -604,6 +609,7 @@ macro_rules! impl_float_tests {\n+@@ -590,6 +591,7 @@ macro_rules! impl_float_tests {\n                          Ok(())\n                      });\n                  }\n +                */\n              }\n  \n              #[cfg(feature = \"std\")]\n-diff --git a/crates/core_simd/tests/round.rs b/crates/core_simd/tests/round.rs\n-index 37044a7..4cdc6b7 100644\n---- a/crates/core_simd/tests/round.rs\n-+++ b/crates/core_simd/tests/round.rs\n-@@ -25,6 +25,7 @@ macro_rules! float_rounding_test {\n-                     )\n-                 }\n+@@ -604,6 +606,7 @@ macro_rules! impl_float_tests {\n+                         )\n+                     }\n  \n-+                /*\n-                 fn round<const LANES: usize>() {\n-                     test_helpers::test_unary_elementwise(\n-                         &Vector::<LANES>::round,\n-@@ -32,6 +33,7 @@ macro_rules! float_rounding_test {\n-                         &|_| true,\n-                     )\n++                    /*\n+                     fn mul_add<const LANES: usize>() {\n+                         test_helpers::test_ternary_elementwise(\n+                             &Vector::<LANES>::mul_add,\n+@@ -611,6 +614,7 @@ macro_rules! impl_float_tests {\n+                             &|_, _, _| true,\n+                         )\n+                     }\n++                    */\n                  }\n-+                */\n- \n-                 fn trunc<const LANES: usize>() {\n-                     test_helpers::test_unary_elementwise(\n+             }\n+         }\n -- \n 2.26.2.7.g19db9cfb68\n "}]}