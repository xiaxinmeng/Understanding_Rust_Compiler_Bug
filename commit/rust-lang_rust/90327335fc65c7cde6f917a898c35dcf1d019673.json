{"sha": "90327335fc65c7cde6f917a898c35dcf1d019673", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMzI3MzM1ZmM2NWM3Y2RlNmY5MTdhODk4YzM1ZGNmMWQwMTk2NzM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-23T21:35:13Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-02T08:03:08Z"}, "message": "canonicalize alloc ID for ptr-to-int cast", "tree": {"sha": "7fbe19f15b8f8b4f153013f31509470248c06751", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fbe19f15b8f8b4f153013f31509470248c06751"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90327335fc65c7cde6f917a898c35dcf1d019673", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90327335fc65c7cde6f917a898c35dcf1d019673", "html_url": "https://github.com/rust-lang/rust/commit/90327335fc65c7cde6f917a898c35dcf1d019673", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90327335fc65c7cde6f917a898c35dcf1d019673/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ef303cd3263c8d30db711484393455b38c8d41c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ef303cd3263c8d30db711484393455b38c8d41c", "html_url": "https://github.com/rust-lang/rust/commit/8ef303cd3263c8d30db711484393455b38c8d41c"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "375ebf09967dba54c4ee28531998bdb973d9d08b", "filename": "src/intptrcast.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/90327335fc65c7cde6f917a898c35dcf1d019673/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90327335fc65c7cde6f917a898c35dcf1d019673/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=90327335fc65c7cde6f917a898c35dcf1d019673", "patch": "@@ -5,7 +5,7 @@ use std::collections::{hash_map::Entry, HashMap};\n use rand::Rng;\n \n use rustc::ty::layout::HasDataLayout;\n-use rustc_mir::interpret::{AllocCheck, AllocId, InterpResult, Memory, Pointer, PointerArithmetic};\n+use rustc_mir::interpret::{AllocCheck, AllocId, InterpResult, Memory, Machine, Pointer, PointerArithmetic};\n use rustc_target::abi::Size;\n \n use crate::{Evaluator, Tag, STACK_ADDR};\n@@ -80,12 +80,13 @@ impl<'mir, 'tcx> GlobalState {\n     ) -> InterpResult<'tcx, u64> {\n         let mut global_state = memory.extra.intptrcast.borrow_mut();\n         let global_state = &mut *global_state;\n+        let id = Evaluator::canonical_alloc_id(memory, ptr.alloc_id);\n \n         // There is nothing wrong with a raw pointer being cast to an integer only after\n         // it became dangling.  Hence `MaybeDead`.\n-        let (size, align) = memory.get_size_and_align(ptr.alloc_id, AllocCheck::MaybeDead)?;\n+        let (size, align) = memory.get_size_and_align(id, AllocCheck::MaybeDead)?;\n \n-        let base_addr = match global_state.base_addr.entry(ptr.alloc_id) {\n+        let base_addr = match global_state.base_addr.entry(id) {\n             Entry::Occupied(entry) => *entry.get(),\n             Entry::Vacant(entry) => {\n                 // This allocation does not have a base address yet, pick one.\n@@ -102,7 +103,7 @@ impl<'mir, 'tcx> GlobalState {\n                 trace!(\n                     \"Assigning base address {:#x} to allocation {:?} (slack: {}, align: {})\",\n                     base_addr,\n-                    ptr.alloc_id,\n+                    id,\n                     slack,\n                     align.bytes(),\n                 );\n@@ -112,7 +113,7 @@ impl<'mir, 'tcx> GlobalState {\n                 global_state.next_base_addr = base_addr.checked_add(max(size.bytes(), 1)).unwrap();\n                 // Given that `next_base_addr` increases in each allocation, pushing the\n                 // corresponding tuple keeps `int_to_ptr_map` sorted\n-                global_state.int_to_ptr_map.push((base_addr, ptr.alloc_id));\n+                global_state.int_to_ptr_map.push((base_addr, id));\n \n                 base_addr\n             }"}]}