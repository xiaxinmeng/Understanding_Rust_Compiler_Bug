{"sha": "6f7e5cbe21d99b7867d8d7383fd2ab753da1d256", "node_id": "C_kwDOAAsO6NoAKDZmN2U1Y2JlMjFkOTliNzg2N2Q4ZDczODNmZDJhYjc1M2RhMWQyNTY", "commit": {"author": {"name": "dswij", "email": "dswijj@gmail.com", "date": "2021-12-24T04:10:34Z"}, "committer": {"name": "Dharma Saputra Wijaya", "email": "dswijj@gmail.com", "date": "2021-12-25T13:55:20Z"}, "message": "Some minor cleanup", "tree": {"sha": "e2a9924eba27f95310b1000ea12a5dc30a273761", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2a9924eba27f95310b1000ea12a5dc30a273761"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f7e5cbe21d99b7867d8d7383fd2ab753da1d256", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f7e5cbe21d99b7867d8d7383fd2ab753da1d256", "html_url": "https://github.com/rust-lang/rust/commit/6f7e5cbe21d99b7867d8d7383fd2ab753da1d256", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f7e5cbe21d99b7867d8d7383fd2ab753da1d256/comments", "author": {"login": "dswij", "id": 44697459, "node_id": "MDQ6VXNlcjQ0Njk3NDU5", "avatar_url": "https://avatars.githubusercontent.com/u/44697459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dswij", "html_url": "https://github.com/dswij", "followers_url": "https://api.github.com/users/dswij/followers", "following_url": "https://api.github.com/users/dswij/following{/other_user}", "gists_url": "https://api.github.com/users/dswij/gists{/gist_id}", "starred_url": "https://api.github.com/users/dswij/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dswij/subscriptions", "organizations_url": "https://api.github.com/users/dswij/orgs", "repos_url": "https://api.github.com/users/dswij/repos", "events_url": "https://api.github.com/users/dswij/events{/privacy}", "received_events_url": "https://api.github.com/users/dswij/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dswij", "id": 44697459, "node_id": "MDQ6VXNlcjQ0Njk3NDU5", "avatar_url": "https://avatars.githubusercontent.com/u/44697459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dswij", "html_url": "https://github.com/dswij", "followers_url": "https://api.github.com/users/dswij/followers", "following_url": "https://api.github.com/users/dswij/following{/other_user}", "gists_url": "https://api.github.com/users/dswij/gists{/gist_id}", "starred_url": "https://api.github.com/users/dswij/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dswij/subscriptions", "organizations_url": "https://api.github.com/users/dswij/orgs", "repos_url": "https://api.github.com/users/dswij/repos", "events_url": "https://api.github.com/users/dswij/events{/privacy}", "received_events_url": "https://api.github.com/users/dswij/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8f016f921d8ade5bf97315d722bf24badca8519", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8f016f921d8ade5bf97315d722bf24badca8519", "html_url": "https://github.com/rust-lang/rust/commit/c8f016f921d8ade5bf97315d722bf24badca8519"}], "stats": {"total": 64, "additions": 34, "deletions": 30}, "files": [{"sha": "b13fd25c6e11ed27dec05ff366b3ebad1abf7c8c", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e5cbe21d99b7867d8d7383fd2ab753da1d256/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e5cbe21d99b7867d8d7383fd2ab753da1d256/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=6f7e5cbe21d99b7867d8d7383fd2ab753da1d256", "patch": "@@ -115,9 +115,9 @@ impl EnumVariantNames {\n }\n \n impl_lint_pass!(EnumVariantNames => [\n-                ENUM_VARIANT_NAMES,\n-                MODULE_NAME_REPETITIONS,\n-                MODULE_INCEPTION\n+    ENUM_VARIANT_NAMES,\n+    MODULE_NAME_REPETITIONS,\n+    MODULE_INCEPTION\n ]);\n \n fn check_enum_start(cx: &LateContext<'_>, item_name: &str, variant: &Variant<'_>) {\n@@ -169,17 +169,15 @@ fn check_variant(cx: &LateContext<'_>, threshold: u64, def: &EnumDef<'_>, item_n\n \n         pre = pre\n             .iter()\n-            .copied()\n-            .zip(variant_split.iter().copied())\n+            .zip(variant_split.iter())\n             .take_while(|(a, b)| a == b)\n-            .map(|e| e.0)\n+            .map(|e| *e.0)\n             .collect();\n         post = post\n             .iter()\n-            .copied()\n-            .zip(variant_split.iter().rev().copied())\n+            .zip(variant_split.iter().rev())\n             .take_while(|(a, b)| a == b)\n-            .map(|e| e.0)\n+            .map(|e| *e.0)\n             .collect();\n     }\n     let (what, value) = match (pre.is_empty(), post.is_empty()) {"}, {"sha": "03a9d3c25fd9862ac9efeaf616deba7fe6d34e2f", "filename": "clippy_utils/src/str_utils.rs", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6f7e5cbe21d99b7867d8d7383fd2ab753da1d256/clippy_utils%2Fsrc%2Fstr_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f7e5cbe21d99b7867d8d7383fd2ab753da1d256/clippy_utils%2Fsrc%2Fstr_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fstr_utils.rs?ref=6f7e5cbe21d99b7867d8d7383fd2ab753da1d256", "patch": "@@ -77,6 +77,9 @@ pub fn camel_case_start(s: &str) -> StrIndex {\n /// # use clippy_utils::str_utils::{camel_case_start_from_idx, StrIndex};\n /// assert_eq!(camel_case_start_from_idx(\"AbcDef\", 0), StrIndex::new(0, 0));\n /// assert_eq!(camel_case_start_from_idx(\"AbcDef\", 1), StrIndex::new(3, 3));\n+/// assert_eq!(camel_case_start_from_idx(\"AbcDefGhi\", 0), StrIndex::new(0, 0));\n+/// assert_eq!(camel_case_start_from_idx(\"AbcDefGhi\", 1), StrIndex::new(3, 3));\n+/// assert_eq!(camel_case_start_from_idx(\"Abcdefg\", 1), StrIndex::new(7, 7));\n /// ```\n pub fn camel_case_start_from_idx(s: &str, start_idx: usize) -> StrIndex {\n     let char_count = s.chars().count();\n@@ -94,7 +97,7 @@ pub fn camel_case_start_from_idx(s: &str, start_idx: usize) -> StrIndex {\n     let mut last_index = StrIndex::new(char_count, s.len());\n     for (char_index, (byte_index, c)) in iter {\n         if byte_index < start_idx {\n-            continue;\n+            break;\n         }\n         if down {\n             if c.is_uppercase() {\n@@ -120,12 +123,17 @@ pub fn camel_case_start_from_idx(s: &str, start_idx: usize) -> StrIndex {\n /// Get the indexes of camel case components of a string `s`\n ///\n /// ```\n-/// # use clippy_utils::str_utils::{camel_case_indexes, StrIndex};\n-/// assert_eq!(camel_case_indexes(\"AbcDef\"), vec![StrIndex::new(0, 0), StrIndex::new(3, 3),\n-/// StrIndex::new(6, 6)]);\n-/// assert_eq!(camel_case_indexes(\"abcDef\"), vec![StrIndex::new(3, 3), StrIndex::new(6, 6)]);\n+/// # use clippy_utils::str_utils::{camel_case_indices, StrIndex};\n+/// assert_eq!(\n+///     camel_case_indices(\"AbcDef\"),\n+///     vec![StrIndex::new(0, 0), StrIndex::new(3, 3), StrIndex::new(6, 6)]\n+/// );\n+/// assert_eq!(\n+///     camel_case_indices(\"abcDef\"),\n+///     vec![StrIndex::new(3, 3), StrIndex::new(6, 6)]\n+/// );\n /// ```\n-pub fn camel_case_indexes(s: &str) -> Vec<StrIndex> {\n+pub fn camel_case_indices(s: &str) -> Vec<StrIndex> {\n     let mut result = Vec::new();\n     let mut str_idx = camel_case_start(s);\n \n@@ -146,20 +154,15 @@ pub fn camel_case_indexes(s: &str) -> Vec<StrIndex> {\n /// assert_eq!(camel_case_split(\"AbcDef\"), vec![\"Abc\", \"Def\"]);\n /// ```\n pub fn camel_case_split(s: &str) -> Vec<&str> {\n-    let offsets = camel_case_indexes(s);\n-    let mut idxs_iter = offsets.iter().map(|str_idx| str_idx.byte_index).peekable();\n-    let idxs: Vec<usize> = if let Some(&idx) = idxs_iter.peek() {\n-        if idx == 0 {\n-            idxs_iter.collect()\n-        } else {\n-            Vec::<usize>::from([0]).into_iter().chain(idxs_iter).collect()\n-        }\n-    } else {\n-        return vec![s];\n-    };\n-    let split_points: Vec<(&usize, &usize)> = idxs[..idxs.len() - 1].iter().zip(&idxs[1..]).collect();\n+    let mut offsets = camel_case_indices(s)\n+        .iter()\n+        .map(|e| e.byte_index)\n+        .collect::<Vec<usize>>();\n+    if offsets[0] != 0 {\n+        offsets.insert(0, 0);\n+    }\n \n-    split_points.iter().map(|(&start, &stop)| &s[start..stop]).collect()\n+    offsets.windows(2).map(|w| &s[w[0]..w[1]]).collect()\n }\n \n /// Dealing with sting comparison can be complicated, this struct ensures that both the\n@@ -298,11 +301,14 @@ mod test {\n         assert_eq!(camel_case_start_from_idx(\"AbcDef\", 0), StrIndex::new(0, 0));\n         assert_eq!(camel_case_start_from_idx(\"AbcDef\", 1), StrIndex::new(3, 3));\n         assert_eq!(camel_case_start_from_idx(\"AbcDef\", 4), StrIndex::new(6, 6));\n+        assert_eq!(camel_case_start_from_idx(\"AbcDefGhi\", 0), StrIndex::new(0, 0));\n+        assert_eq!(camel_case_start_from_idx(\"AbcDefGhi\", 1), StrIndex::new(3, 3));\n+        assert_eq!(camel_case_start_from_idx(\"Abcdefg\", 1), StrIndex::new(7, 7));\n     }\n \n     #[test]\n-    fn camel_case_indexes_full() {\n-        assert_eq!(camel_case_indexes(\"Abc\\u{f6}\\u{f6}DD\"), vec![StrIndex::new(7, 9)]);\n+    fn camel_case_indices_full() {\n+        assert_eq!(camel_case_indices(\"Abc\\u{f6}\\u{f6}DD\"), vec![StrIndex::new(7, 9)]);\n     }\n \n     #[test]"}]}