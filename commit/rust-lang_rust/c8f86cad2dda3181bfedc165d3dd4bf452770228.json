{"sha": "c8f86cad2dda3181bfedc165d3dd4bf452770228", "node_id": "C_kwDOAAsO6NoAKGM4Zjg2Y2FkMmRkYTMxODFiZmVkYzE2NWQzZGQ0YmY0NTI3NzAyMjg", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2021-09-30T20:42:09Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2021-09-30T20:42:09Z"}, "message": "Elaborate predicates in min_specialization checks\n\nSupertraits of specialization markers could circumvent checks for\nmin_specialization. Elaborating predicates prevents this.", "tree": {"sha": "012323d94c268be61063babbaf00b1dfc8290c02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/012323d94c268be61063babbaf00b1dfc8290c02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8f86cad2dda3181bfedc165d3dd4bf452770228", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8f86cad2dda3181bfedc165d3dd4bf452770228", "html_url": "https://github.com/rust-lang/rust/commit/c8f86cad2dda3181bfedc165d3dd4bf452770228", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8f86cad2dda3181bfedc165d3dd4bf452770228/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dc08b909b469d58dd8fa54c57ab193b8cf95257", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dc08b909b469d58dd8fa54c57ab193b8cf95257", "html_url": "https://github.com/rust-lang/rust/commit/6dc08b909b469d58dd8fa54c57ab193b8cf95257"}], "stats": {"total": 94, "additions": 76, "deletions": 18}, "files": [{"sha": "d777f586e23c58b2d35f1f342a34a969872bfe7f", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8f86cad2dda3181bfedc165d3dd4bf452770228/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8f86cad2dda3181bfedc165d3dd4bf452770228/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=c8f86cad2dda3181bfedc165d3dd4bf452770228", "patch": "@@ -64,7 +64,9 @@ pub use self::specialize::specialization_graph::FutureCompatOverlapErrorKind;\n pub use self::specialize::{specialization_graph, translate_substs, OverlapError};\n pub use self::structural_match::search_for_structural_match_violation;\n pub use self::structural_match::NonStructuralMatchTy;\n-pub use self::util::{elaborate_predicates, elaborate_trait_ref, elaborate_trait_refs};\n+pub use self::util::{\n+    elaborate_obligations, elaborate_predicates, elaborate_trait_ref, elaborate_trait_refs,\n+};\n pub use self::util::{expand_trait_aliases, TraitAliasExpander};\n pub use self::util::{\n     get_vtable_index_of_object_method, impl_item_is_final, predicate_for_trait_def, upcast_choices,"}, {"sha": "f4bb5761c19bdbb944a4e88602786178ce9c49a5", "filename": "compiler/rustc_typeck/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c8f86cad2dda3181bfedc165d3dd4bf452770228/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8f86cad2dda3181bfedc165d3dd4bf452770228/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=c8f86cad2dda3181bfedc165d3dd4bf452770228", "patch": "@@ -74,7 +74,7 @@ use rustc_infer::infer::{InferCtxt, RegionckMode, TyCtxtInferExt};\n use rustc_infer::traits::specialization_graph::Node;\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts, SubstsRef};\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n-use rustc_middle::ty::{self, InstantiatedPredicates, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n use rustc_span::Span;\n use rustc_trait_selection::traits::{self, translate_substs, wf};\n \n@@ -294,13 +294,27 @@ fn check_predicates<'tcx>(\n     span: Span,\n ) {\n     let tcx = infcx.tcx;\n-    let impl1_predicates = tcx.predicates_of(impl1_def_id).instantiate(tcx, impl1_substs);\n+    let impl1_predicates: Vec<_> = traits::elaborate_predicates(\n+        tcx,\n+        tcx.predicates_of(impl1_def_id).instantiate(tcx, impl1_substs).predicates.into_iter(),\n+    )\n+    .map(|obligation| obligation.predicate)\n+    .collect();\n+\n     let mut impl2_predicates = if impl2_node.is_from_trait() {\n         // Always applicable traits have to be always applicable without any\n         // assumptions.\n-        InstantiatedPredicates::empty()\n+        Vec::new()\n     } else {\n-        tcx.predicates_of(impl2_node.def_id()).instantiate(tcx, impl2_substs)\n+        traits::elaborate_predicates(\n+            tcx,\n+            tcx.predicates_of(impl2_node.def_id())\n+                .instantiate(tcx, impl2_substs)\n+                .predicates\n+                .into_iter(),\n+        )\n+        .map(|obligation| obligation.predicate)\n+        .collect()\n     };\n     debug!(\n         \"check_always_applicable(\\nimpl1_predicates={:?},\\nimpl2_predicates={:?}\\n)\",\n@@ -322,13 +336,12 @@ fn check_predicates<'tcx>(\n     // which is sound because we forbid impls like the following\n     //\n     // impl<D: Debug> AlwaysApplicable for D { }\n-    let always_applicable_traits =\n-        impl1_predicates.predicates.iter().copied().filter(|&predicate| {\n-            matches!(\n-                trait_predicate_kind(tcx, predicate),\n-                Some(TraitSpecializationKind::AlwaysApplicable)\n-            )\n-        });\n+    let always_applicable_traits = impl1_predicates.iter().copied().filter(|&predicate| {\n+        matches!(\n+            trait_predicate_kind(tcx, predicate),\n+            Some(TraitSpecializationKind::AlwaysApplicable)\n+        )\n+    });\n \n     // Include the well-formed predicates of the type parameters of the impl.\n     for arg in tcx.impl_trait_ref(impl1_def_id).unwrap().substs {\n@@ -340,18 +353,19 @@ fn check_predicates<'tcx>(\n             arg,\n             span,\n         ) {\n-            impl2_predicates\n-                .predicates\n-                .extend(obligations.into_iter().map(|obligation| obligation.predicate))\n+            impl2_predicates.extend(\n+                traits::elaborate_obligations(tcx, obligations)\n+                    .map(|obligation| obligation.predicate),\n+            )\n         }\n     }\n-    impl2_predicates.predicates.extend(\n+    impl2_predicates.extend(\n         traits::elaborate_predicates(tcx, always_applicable_traits)\n             .map(|obligation| obligation.predicate),\n     );\n \n-    for predicate in impl1_predicates.predicates {\n-        if !impl2_predicates.predicates.contains(&predicate) {\n+    for predicate in impl1_predicates {\n+        if !impl2_predicates.contains(&predicate) {\n             check_specialization_on(tcx, predicate, span)\n         }\n     }"}, {"sha": "3bb2480e9e2bef50a4deef89bd73161d1ac0b537", "filename": "src/test/ui/specialization/min_specialization/spec-marker-supertraits.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c8f86cad2dda3181bfedc165d3dd4bf452770228/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspec-marker-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8f86cad2dda3181bfedc165d3dd4bf452770228/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspec-marker-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspec-marker-supertraits.rs?ref=c8f86cad2dda3181bfedc165d3dd4bf452770228", "patch": "@@ -0,0 +1,29 @@\n+// Check that supertraits cannot be used to work around min_specialization\n+// limitations.\n+\n+#![feature(min_specialization)]\n+#![feature(rustc_attrs)]\n+\n+trait HasMethod {\n+    fn method(&self);\n+}\n+\n+#[rustc_unsafe_specialization_marker]\n+trait Marker: HasMethod {}\n+\n+trait Spec {\n+    fn spec_me(&self);\n+}\n+\n+impl<T> Spec for T {\n+    default fn spec_me(&self) {}\n+}\n+\n+impl<T: Marker> Spec for T {\n+    //~^ ERROR cannot specialize on trait `HasMethod`\n+    fn spec_me(&self) {\n+        self.method();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "964109dd10f4741e9b9043cc522f60143c506b06", "filename": "src/test/ui/specialization/min_specialization/spec-marker-supertraits.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c8f86cad2dda3181bfedc165d3dd4bf452770228/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspec-marker-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8f86cad2dda3181bfedc165d3dd4bf452770228/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspec-marker-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspec-marker-supertraits.stderr?ref=c8f86cad2dda3181bfedc165d3dd4bf452770228", "patch": "@@ -0,0 +1,13 @@\n+error: cannot specialize on trait `HasMethod`\n+  --> $DIR/spec-marker-supertraits.rs:22:1\n+   |\n+LL | / impl<T: Marker> Spec for T {\n+LL | |\n+LL | |     fn spec_me(&self) {\n+LL | |         self.method();\n+LL | |     }\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}]}