{"sha": "4e9c50e081f92cbf45df7f8ecbff3b05e26abf36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlOWM1MGUwODFmOTJjYmY0NWRmN2Y4ZWNiZmYzYjA1ZTI2YWJmMzY=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-04T14:53:08Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-05T22:22:15Z"}, "message": "remove AdjustAddEnv", "tree": {"sha": "31b562c20378042f84e2b7ab893543e84c394feb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31b562c20378042f84e2b7ab893543e84c394feb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e9c50e081f92cbf45df7f8ecbff3b05e26abf36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e9c50e081f92cbf45df7f8ecbff3b05e26abf36", "html_url": "https://github.com/rust-lang/rust/commit/4e9c50e081f92cbf45df7f8ecbff3b05e26abf36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e9c50e081f92cbf45df7f8ecbff3b05e26abf36/comments", "author": null, "committer": null, "parents": [{"sha": "714a5b7f5e960c885030fac4b357ec1304f539f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/714a5b7f5e960c885030fac4b357ec1304f539f9", "html_url": "https://github.com/rust-lang/rust/commit/714a5b7f5e960c885030fac4b357ec1304f539f9"}], "stats": {"total": 78, "additions": 4, "deletions": 74}, "files": [{"sha": "93a19a01f668fb26d65d2b8b07ba29c40dfed7fd", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4e9c50e081f92cbf45df7f8ecbff3b05e26abf36/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e9c50e081f92cbf45df7f8ecbff3b05e26abf36/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=4e9c50e081f92cbf45df7f8ecbff3b05e26abf36", "patch": "@@ -1031,13 +1031,6 @@ impl<'a, 'tcx> rbml_writer_helpers<'tcx> for Encoder<'a> {\n \n         self.emit_enum(\"AutoAdjustment\", |this| {\n             match *adj {\n-                ty::AdjustAddEnv(def_id, store) => {\n-                    this.emit_enum_variant(\"AdjustAddEnv\", 0, 2, |this| {\n-                        this.emit_enum_variant_arg(0, |this| def_id.encode(this));\n-                        this.emit_enum_variant_arg(1, |this| store.encode(this))\n-                    })\n-                }\n-\n                 ty::AdjustReifyFnPointer(def_id) => {\n                     this.emit_enum_variant(\"AdjustReifyFnPointer\", 1, 2, |this| {\n                         this.emit_enum_variant_arg(0, |this| def_id.encode(this))\n@@ -1678,14 +1671,6 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n             let variants = [\"AutoAddEnv\", \"AutoDerefRef\"];\n             this.read_enum_variant(&variants, |this, i| {\n                 Ok(match i {\n-                    0 => {\n-                        let def_id: ast::DefId =\n-                            this.read_def_id(dcx);\n-                        let store: ty::TraitStore =\n-                            this.read_enum_variant_arg(0, |this| Decodable::decode(this)).unwrap();\n-\n-                        ty::AdjustAddEnv(def_id, store.tr(dcx))\n-                    }\n                     1 => {\n                         let def_id: ast::DefId =\n                             this.read_def_id(dcx);"}, {"sha": "df2a4e4c2532a988616508c89bab76516f8a1c73", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e9c50e081f92cbf45df7f8ecbff3b05e26abf36/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e9c50e081f92cbf45df7f8ecbff3b05e26abf36/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=4e9c50e081f92cbf45df7f8ecbff3b05e26abf36", "patch": "@@ -823,7 +823,6 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n             None => { }\n             Some(adjustment) => {\n                 match *adjustment {\n-                    ty::AdjustAddEnv(..) |\n                     ty::AdjustReifyFnPointer(..) => {\n                         // Creating a closure/fn-pointer consumes the\n                         // input and stores it into the resulting"}, {"sha": "dd61db4270ce3499bf2642edd8779d37a38578fa", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e9c50e081f92cbf45df7f8ecbff3b05e26abf36/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e9c50e081f92cbf45df7f8ecbff3b05e26abf36/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=4e9c50e081f92cbf45df7f8ecbff3b05e26abf36", "patch": "@@ -413,8 +413,8 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n \n             Some(adjustment) => {\n                 match *adjustment {\n-                    ty::AdjustAddEnv(..) | ty::AdjustReifyFnPointer(..) => {\n-                        debug!(\"cat_expr(AdjustAddEnv|AdjustReifyFnPointer): {}\",\n+                    ty::AdjustReifyFnPointer(..) => {\n+                        debug!(\"cat_expr(AdjustReifyFnPointer): {}\",\n                                expr.repr(self.tcx()));\n                         // Convert a bare fn to a closure by adding NULL env.\n                         // Result is an rvalue."}, {"sha": "bc6ac8abe38f536c765eab7453c8c03e16282b63", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 33, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4e9c50e081f92cbf45df7f8ecbff3b05e26abf36/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e9c50e081f92cbf45df7f8ecbff3b05e26abf36/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=4e9c50e081f92cbf45df7f8ecbff3b05e26abf36", "patch": "@@ -293,7 +293,6 @@ pub enum Variance {\n \n #[derive(Clone, Show)]\n pub enum AutoAdjustment<'tcx> {\n-    AdjustAddEnv(ast::DefId, ty::TraitStore),\n     AdjustReifyFnPointer(ast::DefId), // go from a fn-item type to a fn-pointer type\n     AdjustDerefRef(AutoDerefRef<'tcx>)\n }\n@@ -4315,33 +4314,6 @@ pub fn adjust_ty<'tcx, F>(cx: &ctxt<'tcx>,\n     return match adjustment {\n         Some(adjustment) => {\n             match *adjustment {\n-                AdjustAddEnv(_, store) => {\n-                    match unadjusted_ty.sty {\n-                        ty::ty_bare_fn(Some(_), ref b) => {\n-                            let bounds = ty::ExistentialBounds {\n-                                region_bound: ReStatic,\n-                                builtin_bounds: all_builtin_bounds(),\n-                                projection_bounds: vec!(),\n-                            };\n-\n-                            ty::mk_closure(\n-                                cx,\n-                                ty::ClosureTy {unsafety: b.unsafety,\n-                                               onceness: ast::Many,\n-                                               store: store,\n-                                               bounds: bounds,\n-                                               sig: b.sig.clone(),\n-                                               abi: b.abi})\n-                        }\n-                        ref b => {\n-                            cx.sess.bug(\n-                                format!(\"add_env adjustment on non-fn-item: \\\n-                                         {}\",\n-                                        b).as_slice());\n-                        }\n-                    }\n-                }\n-\n                 AdjustReifyFnPointer(_) => {\n                     match unadjusted_ty.sty {\n                         ty::ty_bare_fn(Some(_), b) => {\n@@ -6696,7 +6668,6 @@ pub fn with_freevars<T, F>(tcx: &ty::ctxt, fid: ast::NodeId, f: F) -> T where\n impl<'tcx> AutoAdjustment<'tcx> {\n     pub fn is_identity(&self) -> bool {\n         match *self {\n-            AdjustAddEnv(..) => false,\n             AdjustReifyFnPointer(..) => false,\n             AdjustDerefRef(ref r) => r.is_identity(),\n         }\n@@ -6820,11 +6791,8 @@ impl DebruijnIndex {\n impl<'tcx> Repr<'tcx> for AutoAdjustment<'tcx> {\n     fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n         match *self {\n-            AdjustAddEnv(def_id, ref trait_store) => {\n-                format!(\"AdjustAddEnv({},{})\", def_id.repr(tcx), trait_store)\n-            }\n             AdjustReifyFnPointer(def_id) => {\n-                format!(\"AdjustAddEnv({})\", def_id.repr(tcx))\n+                format!(\"AdjustReifyFnPointer({})\", def_id.repr(tcx))\n             }\n             AdjustDerefRef(ref data) => {\n                 data.repr(tcx)"}, {"sha": "2738f1bca6e1e48e169a6e31cfc58765192b20fe", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4e9c50e081f92cbf45df7f8ecbff3b05e26abf36/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e9c50e081f92cbf45df7f8ecbff3b05e26abf36/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=4e9c50e081f92cbf45df7f8ecbff3b05e26abf36", "patch": "@@ -189,20 +189,6 @@ pub fn const_expr<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, e: &ast::Expr)\n         None => { }\n         Some(adj) => {\n             match adj {\n-                ty::AdjustAddEnv(def_id, ty::RegionTraitStore(ty::ReStatic, _)) => {\n-                    let wrapper = closure::get_wrapper_for_bare_fn(cx,\n-                                                                   ety_adjusted,\n-                                                                   def_id,\n-                                                                   llconst,\n-                                                                   true);\n-                    llconst = C_struct(cx, &[wrapper, C_null(Type::i8p(cx))], false)\n-                }\n-                ty::AdjustAddEnv(_, store) => {\n-                    cx.sess()\n-                      .span_bug(e.span,\n-                                format!(\"unexpected static function: {}\",\n-                                        store)[])\n-                }\n                 ty::AdjustReifyFnPointer(_def_id) => {\n                     // FIXME(#19925) once fn item types are\n                     // zero-sized, we'll need to do something here"}, {"sha": "1bf96b7d180e23c734846f5ec37874cb0e993afc", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4e9c50e081f92cbf45df7f8ecbff3b05e26abf36/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e9c50e081f92cbf45df7f8ecbff3b05e26abf36/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=4e9c50e081f92cbf45df7f8ecbff3b05e26abf36", "patch": "@@ -54,7 +54,7 @@ use trans::inline;\n use trans::tvec;\n use trans::type_of;\n use middle::ty::{struct_fields, tup_fields};\n-use middle::ty::{AdjustDerefRef, AdjustReifyFnPointer, AdjustAddEnv, AutoUnsafe};\n+use middle::ty::{AdjustDerefRef, AdjustReifyFnPointer, AutoUnsafe};\n use middle::ty::{AutoPtr};\n use middle::ty::{self, Ty};\n use middle::ty::MethodCall;\n@@ -179,9 +179,6 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n            datum.to_string(bcx.ccx()),\n            adjustment.repr(bcx.tcx()));\n     match adjustment {\n-        AdjustAddEnv(def_id, _) => {\n-            datum = unpack_datum!(bcx, add_env(bcx, def_id, expr, datum));\n-        }\n         AdjustReifyFnPointer(_def_id) => {\n             // FIXME(#19925) once fn item types are\n             // zero-sized, we'll need to do something here"}, {"sha": "2940d556169686ddde78225def60113568f3fd54", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e9c50e081f92cbf45df7f8ecbff3b05e26abf36/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e9c50e081f92cbf45df7f8ecbff3b05e26abf36/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4e9c50e081f92cbf45df7f8ecbff3b05e26abf36", "patch": "@@ -1850,7 +1850,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                        span: Span,\n                                        adj: &ty::AutoAdjustment<'tcx>) {\n         match *adj {\n-            ty::AdjustAddEnv(..) |\n             ty::AdjustReifyFnPointer(..) => {\n             }\n             ty::AdjustDerefRef(ref d_r) => {"}, {"sha": "70644b6e7de5d5386b9822c655205263188547aa", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e9c50e081f92cbf45df7f8ecbff3b05e26abf36/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e9c50e081f92cbf45df7f8ecbff3b05e26abf36/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=4e9c50e081f92cbf45df7f8ecbff3b05e26abf36", "patch": "@@ -266,10 +266,6 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             Some(adjustment) => {\n                 let adj_object = ty::adjust_is_object(&adjustment);\n                 let resolved_adjustment = match adjustment {\n-                    ty::AdjustAddEnv(def_id, store) => {\n-                        ty::AdjustAddEnv(def_id, self.resolve(&store, reason))\n-                    }\n-\n                     ty::AdjustReifyFnPointer(def_id) => {\n                         ty::AdjustReifyFnPointer(def_id)\n                     }"}]}