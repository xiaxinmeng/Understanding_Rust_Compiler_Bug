{"sha": "e52d51cd45230068a98e5e809dabf1671bc6d630", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MmQ1MWNkNDUyMzAwNjhhOThlNWU4MDlkYWJmMTY3MWJjNmQ2MzA=", "commit": {"author": {"name": "miguel raz", "email": "miguelraz@gmail.com", "date": "2021-05-26T01:00:01Z"}, "committer": {"name": "miguel raz", "email": "miguelraz@gmail.com", "date": "2021-05-26T01:00:01Z"}, "message": "nbody example", "tree": {"sha": "7212d3c955fd552811b80c7ddf42515b7158f966", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7212d3c955fd552811b80c7ddf42515b7158f966"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e52d51cd45230068a98e5e809dabf1671bc6d630", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e52d51cd45230068a98e5e809dabf1671bc6d630", "html_url": "https://github.com/rust-lang/rust/commit/e52d51cd45230068a98e5e809dabf1671bc6d630", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e52d51cd45230068a98e5e809dabf1671bc6d630/comments", "author": {"login": "miguelraz", "id": 13056181, "node_id": "MDQ6VXNlcjEzMDU2MTgx", "avatar_url": "https://avatars.githubusercontent.com/u/13056181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miguelraz", "html_url": "https://github.com/miguelraz", "followers_url": "https://api.github.com/users/miguelraz/followers", "following_url": "https://api.github.com/users/miguelraz/following{/other_user}", "gists_url": "https://api.github.com/users/miguelraz/gists{/gist_id}", "starred_url": "https://api.github.com/users/miguelraz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miguelraz/subscriptions", "organizations_url": "https://api.github.com/users/miguelraz/orgs", "repos_url": "https://api.github.com/users/miguelraz/repos", "events_url": "https://api.github.com/users/miguelraz/events{/privacy}", "received_events_url": "https://api.github.com/users/miguelraz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "miguelraz", "id": 13056181, "node_id": "MDQ6VXNlcjEzMDU2MTgx", "avatar_url": "https://avatars.githubusercontent.com/u/13056181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miguelraz", "html_url": "https://github.com/miguelraz", "followers_url": "https://api.github.com/users/miguelraz/followers", "following_url": "https://api.github.com/users/miguelraz/following{/other_user}", "gists_url": "https://api.github.com/users/miguelraz/gists{/gist_id}", "starred_url": "https://api.github.com/users/miguelraz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miguelraz/subscriptions", "organizations_url": "https://api.github.com/users/miguelraz/orgs", "repos_url": "https://api.github.com/users/miguelraz/repos", "events_url": "https://api.github.com/users/miguelraz/events{/privacy}", "received_events_url": "https://api.github.com/users/miguelraz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6795814d402ec47c98c023dd3f298c6a3f5bfa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6795814d402ec47c98c023dd3f298c6a3f5bfa1", "html_url": "https://github.com/rust-lang/rust/commit/d6795814d402ec47c98c023dd3f298c6a3f5bfa1"}], "stats": {"total": 188, "additions": 188, "deletions": 0}, "files": [{"sha": "a474bbe39259b2ddfb24296eceb206c5ccf37367", "filename": "crates/core_simd/examples/nbody.rs", "status": "added", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/rust-lang/rust/blob/e52d51cd45230068a98e5e809dabf1671bc6d630/crates%2Fcore_simd%2Fexamples%2Fnbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52d51cd45230068a98e5e809dabf1671bc6d630/crates%2Fcore_simd%2Fexamples%2Fnbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fexamples%2Fnbody.rs?ref=e52d51cd45230068a98e5e809dabf1671bc6d630", "patch": "@@ -0,0 +1,188 @@\n+use stdsimd::simd::*;\n+\n+use std::f64::consts::PI;\n+const SOLAR_MASS: f64 = 4.0 * PI * PI;\n+const DAYS_PER_YEAR: f64 = 365.24;\n+\n+pub struct Body {\n+    pub x: f64x4,\n+    pub v: f64x4,\n+    pub mass: f64,\n+}\n+const N_BODIES: usize = 5;\n+#[allow(clippy::unreadable_literal)]\n+const BODIES: [Body; N_BODIES] = [\n+    // sun:\n+    Body {\n+        x: f64x4::new(0., 0., 0., 0.),\n+        v: f64x4::new(0., 0., 0., 0.),\n+        mass: SOLAR_MASS,\n+    },\n+    // jupiter:\n+    Body {\n+        x: f64x4::new(\n+            4.84143144246472090e+00,\n+            -1.16032004402742839e+00,\n+            -1.03622044471123109e-01,\n+            0.,\n+        ),\n+        v: f64x4::new(\n+            1.66007664274403694e-03 * DAYS_PER_YEAR,\n+            7.69901118419740425e-03 * DAYS_PER_YEAR,\n+            -6.90460016972063023e-05 * DAYS_PER_YEAR,\n+            0.,\n+        ),\n+        mass: 9.54791938424326609e-04 * SOLAR_MASS,\n+    },\n+    // saturn:\n+    Body {\n+        x: f64x4::new(\n+            8.34336671824457987e+00,\n+            4.12479856412430479e+00,\n+            -4.03523417114321381e-01,\n+            0.,\n+        ),\n+        v: f64x4::new(\n+            -2.76742510726862411e-03 * DAYS_PER_YEAR,\n+            4.99852801234917238e-03 * DAYS_PER_YEAR,\n+            2.30417297573763929e-05 * DAYS_PER_YEAR,\n+            0.,\n+        ),\n+        mass: 2.85885980666130812e-04 * SOLAR_MASS,\n+    },\n+    // uranus:\n+    Body {\n+        x: f64x4::new(\n+            1.28943695621391310e+01,\n+            -1.51111514016986312e+01,\n+            -2.23307578892655734e-01,\n+            0.,\n+        ),\n+        v: f64x4::new(\n+            2.96460137564761618e-03 * DAYS_PER_YEAR,\n+            2.37847173959480950e-03 * DAYS_PER_YEAR,\n+            -2.96589568540237556e-05 * DAYS_PER_YEAR,\n+            0.,\n+        ),\n+        mass: 4.36624404335156298e-05 * SOLAR_MASS,\n+    },\n+    // neptune:\n+    Body {\n+        x: f64x4::new(\n+            1.53796971148509165e+01,\n+            -2.59193146099879641e+01,\n+            1.79258772950371181e-01,\n+            0.,\n+        ),\n+        v: f64x4::new(\n+            2.68067772490389322e-03 * DAYS_PER_YEAR,\n+            1.62824170038242295e-03 * DAYS_PER_YEAR,\n+            -9.51592254519715870e-05 * DAYS_PER_YEAR,\n+            0.,\n+        ),\n+        mass: 5.15138902046611451e-05 * SOLAR_MASS,\n+    },\n+];\n+\n+pub fn offset_momentum(bodies: &mut [Body; N_BODIES]) {\n+    let (sun, rest) = bodies.split_at_mut(1);\n+    let sun = &mut sun[0];\n+    for body in rest {\n+        let m_ratio = body.mass / SOLAR_MASS;\n+        sun.v -= body.v * m_ratio;\n+    }\n+}\n+\n+pub fn energy(bodies: &[Body; N_BODIES]) -> f64 {\n+    let mut e = 0.;\n+    for i in 0..N_BODIES {\n+        let bi = &bodies[i];\n+        e += bi.mass * (bi.v * bi.v).sum() * 0.5;\n+        for bj in bodies.iter().take(N_BODIES).skip(i + 1) {\n+            let dx = bi.x - bj.x;\n+            e -= bi.mass * bj.mass / (dx * dx).sum().sqrt()\n+        }\n+    }\n+    e\n+}\n+\n+pub fn advance(bodies: &mut [Body; N_BODIES], dt: f64) {\n+    const N: usize = N_BODIES * (N_BODIES - 1) / 2;\n+\n+    // compute distance between bodies:\n+    let mut r = [f64x4::splat(0.); N];\n+    {\n+        let mut i = 0;\n+        for j in 0..N_BODIES {\n+            for k in j + 1..N_BODIES {\n+                r[i] = bodies[j].x - bodies[k].x;\n+                i += 1;\n+            }\n+        }\n+    }\n+\n+    let mut mag = [0.0; N];\n+    let mut i = 0;\n+    while i < N {\n+        let d2s = f64x2::new((r[i] * r[i]).sum(), (r[i + 1] * r[i + 1]).sum());\n+        let dmags = f64x2::splat(dt) / (d2s * d2s.sqrte());\n+        dmags.write_to_slice_unaligned(&mut mag[i..]);\n+        i += 2;\n+    }\n+\n+    i = 0;\n+    for j in 0..N_BODIES {\n+        for k in j + 1..N_BODIES {\n+            let f = r[i] * mag[i];\n+            bodies[j].v -= f * bodies[k].mass;\n+            bodies[k].v += f * bodies[j].mass;\n+            i += 1\n+        }\n+    }\n+    for body in bodies {\n+        body.x += dt * body.v\n+    }\n+}\n+\n+pub fn run_k<K>(n: usize, k: K) -> (f64, f64)\n+where\n+    K: Fn(&mut [Body; N_BODIES], f64),\n+{\n+    let mut bodies = BODIES;\n+    offset_momentum(&mut bodies);\n+    let energy_before = energy(&bodies);\n+    for _ in 0..n {\n+        k(&mut bodies, 0.01);\n+    }\n+    let energy_after = energy(&bodies);\n+\n+    (energy_before, energy_after)\n+}\n+\n+pub fn run(n: usize) -> (f64, f64) {\n+    run_k(n, advance)\n+}\n+\n+const OUTPUT: Vec<f64> = vec![-0.169075164, -0.169087605];\n+#[cfg(test)]\n+mod tests {\n+    #[test]\n+    fn test() {\n+        let mut out: Vec<u8> = Vec::new();\n+        run(&mut out, 1000, 0);\n+        for &(size, a_e, b_e) in crate::RESULTS {\n+            let (a, b) = super::run(size);\n+            assert_eq!(format!(\"{:.9}\", a), a_e);\n+            assert_eq!(format!(\"{:.9}\", b), b_e);\n+        }\n+    }\n+}\n+fn main() {\n+    //let n: usize = std::env::args()\n+    //.nth(1)\n+    //.expect(\"need one arg\")\n+    //.parse()\n+    //.expect(\"argument should be a usize\");\n+    //run(&mut std::io::stdout(), n, alg);\n+    println!(\"{:?}\", run_k<10>(10, 10));\n+}"}]}