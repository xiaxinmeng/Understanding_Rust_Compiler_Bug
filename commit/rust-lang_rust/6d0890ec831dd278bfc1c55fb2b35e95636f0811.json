{"sha": "6d0890ec831dd278bfc1c55fb2b35e95636f0811", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMDg5MGVjODMxZGQyNzhiZmMxYzU1ZmIyYjM1ZTk1NjM2ZjA4MTE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-20T10:08:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-20T10:08:33Z"}, "message": "Rollup merge of #76845 - Amjad50:fix-intra-docs-links, r=jyn514\n\nUse intra docs links in core::{ascii, option, str, pattern, hash::map}\n\nPartial fix for #75080\n\n@rustbot modify labels: T-doc A-intra-doc-links\n\nr? @jyn514", "tree": {"sha": "881dae9dea3e662963171d3c8ce9340742c466f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/881dae9dea3e662963171d3c8ce9340742c466f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d0890ec831dd278bfc1c55fb2b35e95636f0811", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfZyohCRBK7hj4Ov3rIwAAdHIIAF76w3ndaP1vX4Jny5zWb9u2\nNW8BPB1TXiTBj6U/fP/y/MfAutICR01Q/utf9GpTP9ErG0HZIl5LXh+GoXHirhz0\npjXz3bA1/hxEu0v28taji1SgUz52jDq5rJv1HmSLp/7U78UsqnSm1MCVKRUPQVYR\nBNWJ8PX+LZXr8ZYOr+UkE3FwoMNEWijsx+/KIHOgYvGLSSTPuJ+1dEGYCl73AVPo\nlOjGaOF2Y/uhW5sbfxOqBpVePUcXR3BxLZinyqh0ReqIzTAN6jyxYZQM3fWiP2So\n3GOP0wHT+mIhoR8QXBfGZ1s3D2iLgZdNykekesjwDMLhSe2E+LRKIAegH3EvSro=\n=Idfo\n-----END PGP SIGNATURE-----\n", "payload": "tree 881dae9dea3e662963171d3c8ce9340742c466f1\nparent a8151840ef892e1ec476a135d37daafca7ef9961\nparent 878dfa67182ca52eb1c8b638cee5dad4e94b6398\nauthor Ralf Jung <post@ralfj.de> 1600596513 +0200\ncommitter GitHub <noreply@github.com> 1600596513 +0200\n\nRollup merge of #76845 - Amjad50:fix-intra-docs-links, r=jyn514\n\nUse intra docs links in core::{ascii, option, str, pattern, hash::map}\n\nPartial fix for #75080\n\n@rustbot modify labels: T-doc A-intra-doc-links\n\nr? @jyn514\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d0890ec831dd278bfc1c55fb2b35e95636f0811", "html_url": "https://github.com/rust-lang/rust/commit/6d0890ec831dd278bfc1c55fb2b35e95636f0811", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d0890ec831dd278bfc1c55fb2b35e95636f0811/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8151840ef892e1ec476a135d37daafca7ef9961", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8151840ef892e1ec476a135d37daafca7ef9961", "html_url": "https://github.com/rust-lang/rust/commit/a8151840ef892e1ec476a135d37daafca7ef9961"}, {"sha": "878dfa67182ca52eb1c8b638cee5dad4e94b6398", "url": "https://api.github.com/repos/rust-lang/rust/commits/878dfa67182ca52eb1c8b638cee5dad4e94b6398", "html_url": "https://github.com/rust-lang/rust/commit/878dfa67182ca52eb1c8b638cee5dad4e94b6398"}], "stats": {"total": 35, "additions": 6, "deletions": 29}, "files": [{"sha": "a8a25f927163cd33a63ef4c1ba9194570febc65c", "filename": "library/core/src/ascii.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d0890ec831dd278bfc1c55fb2b35e95636f0811/library%2Fcore%2Fsrc%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0890ec831dd278bfc1c55fb2b35e95636f0811/library%2Fcore%2Fsrc%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fascii.rs?ref=6d0890ec831dd278bfc1c55fb2b35e95636f0811", "patch": "@@ -6,8 +6,6 @@\n //!\n //! The [`escape_default`] function provides an iterator over the bytes of an\n //! escaped version of the character given.\n-//!\n-//! [`escape_default`]: fn.escape_default.html\n \n #![stable(feature = \"core_ascii\", since = \"1.26.0\")]\n \n@@ -20,8 +18,6 @@ use crate::str::from_utf8_unchecked;\n ///\n /// This `struct` is created by the [`escape_default`] function. See its\n /// documentation for more.\n-///\n-/// [`escape_default`]: fn.escape_default.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct EscapeDefault {"}, {"sha": "7e560d63fe23b40245b66e001b6e958825600d0d", "filename": "library/core/src/option.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d0890ec831dd278bfc1c55fb2b35e95636f0811/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0890ec831dd278bfc1c55fb2b35e95636f0811/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=6d0890ec831dd278bfc1c55fb2b35e95636f0811", "patch": "@@ -1502,8 +1502,6 @@ unsafe impl<A> TrustedLen for IterMut<'_, A> {}\n /// The iterator yields one value if the [`Option`] is a [`Some`], otherwise none.\n ///\n /// This `struct` is created by the [`Option::into_iter`] function.\n-///\n-/// [`Option::into_iter`]: enum.Option.html#method.into_iter\n #[derive(Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<A> {"}, {"sha": "6dc14f9125fefc11425b27ce09338b4f92579e66", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6d0890ec831dd278bfc1c55fb2b35e95636f0811/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0890ec831dd278bfc1c55fb2b35e95636f0811/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=6d0890ec831dd278bfc1c55fb2b35e95636f0811", "patch": "@@ -4,7 +4,7 @@\n //!\n //! For more details, see the [`std::str`] module.\n //!\n-//! [`std::str`]: self\n+//! [`std::str`]: ../../std/str/index.html\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -84,9 +84,6 @@ pub trait FromStr: Sized {\n     /// when the string is ill-formatted return an error specific to the\n     /// inside [`Err`]. The error type is specific to implementation of the trait.\n     ///\n-    /// [`Ok`]: ../../std/result/enum.Result.html#variant.Ok\n-    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage with [`i32`][ithirtytwo], a type that implements `FromStr`:\n@@ -269,11 +266,9 @@ impl Utf8Error {\n ///\n /// If you are sure that the byte slice is valid UTF-8, and you don't want to\n /// incur the overhead of the validity check, there is an unsafe version of\n-/// this function, [`from_utf8_unchecked`][fromutf8u], which has the same\n+/// this function, [`from_utf8_unchecked`], which has the same\n /// behavior but skips the check.\n ///\n-/// [fromutf8u]: fn.from_utf8_unchecked.html\n-///\n /// If you need a `String` instead of a `&str`, consider\n /// [`String::from_utf8`][string].\n ///\n@@ -318,11 +313,9 @@ impl Utf8Error {\n /// assert!(str::from_utf8(&sparkle_heart).is_err());\n /// ```\n ///\n-/// See the docs for [`Utf8Error`][error] for more details on the kinds of\n+/// See the docs for [`Utf8Error`] for more details on the kinds of\n /// errors that can be returned.\n ///\n-/// [error]: struct.Utf8Error.html\n-///\n /// A \"stack allocated string\":\n ///\n /// ```\n@@ -371,10 +364,8 @@ pub fn from_utf8(v: &[u8]) -> Result<&str, Utf8Error> {\n ///\n /// assert!(str::from_utf8_mut(&mut invalid).is_err());\n /// ```\n-/// See the docs for [`Utf8Error`][error] for more details on the kinds of\n+/// See the docs for [`Utf8Error`] for more details on the kinds of\n /// errors that can be returned.\n-///\n-/// [error]: struct.Utf8Error.html\n #[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]\n pub fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n     run_utf8_validation(v)?;\n@@ -385,9 +376,7 @@ pub fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n /// Converts a slice of bytes to a string slice without checking\n /// that the string contains valid UTF-8.\n ///\n-/// See the safe version, [`from_utf8`][fromutf8], for more information.\n-///\n-/// [fromutf8]: fn.from_utf8.html\n+/// See the safe version, [`from_utf8`], for more information.\n ///\n /// # Safety\n ///"}, {"sha": "508c522e71aa25b7f9d60e6c90186dff41b7270c", "filename": "library/core/src/str/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d0890ec831dd278bfc1c55fb2b35e95636f0811/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0890ec831dd278bfc1c55fb2b35e95636f0811/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs?ref=6d0890ec831dd278bfc1c55fb2b35e95636f0811", "patch": "@@ -28,7 +28,7 @@\n //! assert_eq!(s.find(|c: char| c.is_ascii_punctuation()), Some(35));\n //! ```\n //!\n-//! [pattern-impls]: trait.Pattern.html#implementors\n+//! [pattern-impls]: Pattern#implementors\n \n #![unstable(\n     feature = \"pattern\","}, {"sha": "61d71d55d6593c3e267a6cbda4018114d2e09425", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d0890ec831dd278bfc1c55fb2b35e95636f0811/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d0890ec831dd278bfc1c55fb2b35e95636f0811/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=6d0890ec831dd278bfc1c55fb2b35e95636f0811", "patch": "@@ -1298,9 +1298,7 @@ pub struct RawEntryBuilderMut<'a, K: 'a, V: 'a, S: 'a> {\n /// This `enum` is constructed through the [`raw_entry_mut`] method on [`HashMap`],\n /// then calling one of the methods of that [`RawEntryBuilderMut`].\n ///\n-/// [`Entry`]: enum.Entry.html\n /// [`raw_entry_mut`]: HashMap::raw_entry_mut\n-/// [`RawEntryBuilderMut`]: struct.RawEntryBuilderMut.html\n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n pub enum RawEntryMut<'a, K: 'a, V: 'a, S: 'a> {\n     /// An occupied entry.\n@@ -1705,8 +1703,6 @@ impl<K: Debug, V: Debug> Debug for Entry<'_, K, V> {\n \n /// A view into an occupied entry in a `HashMap`.\n /// It is part of the [`Entry`] enum.\n-///\n-/// [`Entry`]: enum.Entry.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct OccupiedEntry<'a, K: 'a, V: 'a> {\n     base: base::RustcOccupiedEntry<'a, K, V>,\n@@ -1721,8 +1717,6 @@ impl<K: Debug, V: Debug> Debug for OccupiedEntry<'_, K, V> {\n \n /// A view into a vacant entry in a `HashMap`.\n /// It is part of the [`Entry`] enum.\n-///\n-/// [`Entry`]: enum.Entry.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct VacantEntry<'a, K: 'a, V: 'a> {\n     base: base::RustcVacantEntry<'a, K, V>,"}]}