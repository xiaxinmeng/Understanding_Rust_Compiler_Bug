{"sha": "6ce5ecbc2a6c7e323f8194229327c179cb7d976d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjZTVlY2JjMmE2YzdlMzIzZjgxOTQyMjkzMjdjMTc5Y2I3ZDk3NmQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-12-23T22:09:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-23T22:09:03Z"}, "message": "Rollup merge of #56917 - sinkuu:mir_build_logicop, r=davidtwco\n\nSimplify MIR generation for logical operations\n\nReduces one block and one branch from MIR generated for a logical operator.", "tree": {"sha": "770a573fdc2777f7148b64ad30d59b82fce53631", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/770a573fdc2777f7148b64ad30d59b82fce53631"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ce5ecbc2a6c7e323f8194229327c179cb7d976d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcIAd/CRBK7hj4Ov3rIwAAdHIIAAg9a5y2X5KdGO3RYngAP1WM\n/1rZ8FLDNpTDcI9ecvSukUcTNazMn2u515yMdidhAomQCmgjHoBimSjaTjLvpTha\njVApBpVdpIsrWCOrXoWs6dn/a27scKokN+bw040Y2VSUrYOCVuxIAFbzfEL2MRSJ\nE4V5OebUtgOBunYdtD3h8j8u65TZM9+ypHyA4fSccvXI1zqcJCTMprP/2mu4CorC\nRcu0xLebV7RVGCw/Oi5zOf0NX+TcTw+v8UssVeTHrv8QyAOtzlaw/77y8JLBoa7/\nhGgXXA4iGvQOPzSXwoDvLr3WZWJIN1YvyKOIDCG3TCwaLSOwVtm8+cN1Ur1nLic=\n=gH33\n-----END PGP SIGNATURE-----\n", "payload": "tree 770a573fdc2777f7148b64ad30d59b82fce53631\nparent 84bc34e70e2be9a0d4087ba030f7153fcf003ee9\nparent e38e954a0d249f88d0a55504f70d6055e865a931\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1545602943 +0100\ncommitter GitHub <noreply@github.com> 1545602943 +0100\n\nRollup merge of #56917 - sinkuu:mir_build_logicop, r=davidtwco\n\nSimplify MIR generation for logical operations\n\nReduces one block and one branch from MIR generated for a logical operator.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ce5ecbc2a6c7e323f8194229327c179cb7d976d", "html_url": "https://github.com/rust-lang/rust/commit/6ce5ecbc2a6c7e323f8194229327c179cb7d976d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ce5ecbc2a6c7e323f8194229327c179cb7d976d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84bc34e70e2be9a0d4087ba030f7153fcf003ee9", "url": "https://api.github.com/repos/rust-lang/rust/commits/84bc34e70e2be9a0d4087ba030f7153fcf003ee9", "html_url": "https://github.com/rust-lang/rust/commit/84bc34e70e2be9a0d4087ba030f7153fcf003ee9"}, {"sha": "e38e954a0d249f88d0a55504f70d6055e865a931", "url": "https://api.github.com/repos/rust-lang/rust/commits/e38e954a0d249f88d0a55504f70d6055e865a931", "html_url": "https://github.com/rust-lang/rust/commit/e38e954a0d249f88d0a55504f70d6055e865a931"}], "stats": {"total": 53, "additions": 23, "deletions": 30}, "files": [{"sha": "64defaf78a48779c70d4b841c567fb6640bab209", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 23, "deletions": 30, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/6ce5ecbc2a6c7e323f8194229327c179cb7d976d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ce5ecbc2a6c7e323f8194229327c179cb7d976d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=6ce5ecbc2a6c7e323f8194229327c179cb7d976d", "patch": "@@ -126,66 +126,59 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             ExprKind::LogicalOp { op, lhs, rhs } => {\n                 // And:\n                 //\n-                // [block: If(lhs)] -true-> [else_block: If(rhs)] -true-> [true_block]\n-                //        |                          | (false)\n-                //        +----------false-----------+------------------> [false_block]\n+                // [block: If(lhs)] -true-> [else_block: dest = (rhs)]\n+                //        | (false)\n+                //  [shortcurcuit_block: dest = false]\n                 //\n                 // Or:\n                 //\n-                // [block: If(lhs)] -false-> [else_block: If(rhs)] -true-> [true_block]\n-                //        | (true)                   | (false)\n-                //  [true_block]               [false_block]\n+                // [block: If(lhs)] -false-> [else_block: dest = (rhs)]\n+                //        | (true)\n+                //  [shortcurcuit_block: dest = true]\n \n-                let (true_block, false_block, mut else_block, join_block) = (\n-                    this.cfg.start_new_block(),\n+                let (shortcircuit_block, mut else_block, join_block) = (\n                     this.cfg.start_new_block(),\n                     this.cfg.start_new_block(),\n                     this.cfg.start_new_block(),\n                 );\n \n                 let lhs = unpack!(block = this.as_local_operand(block, lhs));\n                 let blocks = match op {\n-                    LogicalOp::And => (else_block, false_block),\n-                    LogicalOp::Or => (true_block, else_block),\n+                    LogicalOp::And => (else_block, shortcircuit_block),\n+                    LogicalOp::Or => (shortcircuit_block, else_block),\n                 };\n                 let term = TerminatorKind::if_(this.hir.tcx(), lhs, blocks.0, blocks.1);\n                 this.cfg.terminate(block, source_info, term);\n \n-                let rhs = unpack!(else_block = this.as_local_operand(else_block, rhs));\n-                let term = TerminatorKind::if_(this.hir.tcx(), rhs, true_block, false_block);\n-                this.cfg.terminate(else_block, source_info, term);\n-\n                 this.cfg.push_assign_constant(\n-                    true_block,\n+                    shortcircuit_block,\n                     source_info,\n                     destination,\n                     Constant {\n                         span: expr_span,\n                         ty: this.hir.bool_ty(),\n                         user_ty: None,\n-                        literal: this.hir.true_literal(),\n+                        literal: match op {\n+                            LogicalOp::And => this.hir.false_literal(),\n+                            LogicalOp::Or => this.hir.true_literal(),\n+                        },\n                     },\n                 );\n-\n-                this.cfg.push_assign_constant(\n-                    false_block,\n+                this.cfg.terminate(\n+                    shortcircuit_block,\n                     source_info,\n-                    destination,\n-                    Constant {\n-                        span: expr_span,\n-                        ty: this.hir.bool_ty(),\n-                        user_ty: None,\n-                        literal: this.hir.false_literal(),\n-                    },\n+                    TerminatorKind::Goto { target: join_block },\n                 );\n \n-                this.cfg.terminate(\n-                    true_block,\n+                let rhs = unpack!(else_block = this.as_local_operand(else_block, rhs));\n+                this.cfg.push_assign(\n+                    else_block,\n                     source_info,\n-                    TerminatorKind::Goto { target: join_block },\n+                    destination,\n+                    Rvalue::Use(rhs),\n                 );\n                 this.cfg.terminate(\n-                    false_block,\n+                    else_block,\n                     source_info,\n                     TerminatorKind::Goto { target: join_block },\n                 );"}]}