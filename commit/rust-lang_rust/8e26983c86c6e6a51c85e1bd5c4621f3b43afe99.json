{"sha": "8e26983c86c6e6a51c85e1bd5c4621f3b43afe99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMjY5ODNjODZjNmU2YTUxYzg1ZTFiZDVjNDYyMWYzYjQzYWZlOTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-13T21:11:54Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-13T22:37:47Z"}, "message": "pull stats out of `SharedCrateContext`\n\nshared mutable state is bad", "tree": {"sha": "c40cea478ad3932bd8bb92e474ee1988b3fe96bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c40cea478ad3932bd8bb92e474ee1988b3fe96bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e26983c86c6e6a51c85e1bd5c4621f3b43afe99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e26983c86c6e6a51c85e1bd5c4621f3b43afe99", "html_url": "https://github.com/rust-lang/rust/commit/8e26983c86c6e6a51c85e1bd5c4621f3b43afe99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e26983c86c6e6a51c85e1bd5c4621f3b43afe99/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f227187cb8ddd76ef93e630adc56eefc09ae7e59", "url": "https://api.github.com/repos/rust-lang/rust/commits/f227187cb8ddd76ef93e630adc56eefc09ae7e59", "html_url": "https://github.com/rust-lang/rust/commit/f227187cb8ddd76ef93e630adc56eefc09ae7e59"}], "stats": {"total": 111, "additions": 64, "deletions": 47}, "files": [{"sha": "3fd966eb73ee6bd32a1dfac023c996463599b3a0", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 40, "deletions": 30, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/8e26983c86c6e6a51c85e1bd5c4621f3b43afe99/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e26983c86c6e6a51c85e1bd5c4621f3b43afe99/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=8e26983c86c6e6a51c85e1bd5c4621f3b43afe99", "patch": "@@ -57,7 +57,7 @@ use common::CrateContext;\n use common::{type_is_zero_size, val_ty};\n use common;\n use consts;\n-use context::{self, LocalCrateContext, SharedCrateContext};\n+use context::{self, LocalCrateContext, SharedCrateContext, Stats};\n use debuginfo;\n use declare;\n use machine;\n@@ -1115,21 +1115,25 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let symbol_map = Rc::new(symbol_map);\n \n+    let mut all_stats = Stats::default();\n     let modules: Vec<ModuleTranslation> = codegen_units\n         .into_iter()\n         .map(|cgu| {\n             let dep_node = cgu.work_product_dep_node();\n-            tcx.dep_graph.with_task(dep_node,\n-                                    AssertDepGraphSafe(&shared_ccx),\n-                                    AssertDepGraphSafe((cgu, symbol_map.clone())),\n-                                    module_translation)\n+            let (stats, module) =\n+                tcx.dep_graph.with_task(dep_node,\n+                                        AssertDepGraphSafe(&shared_ccx),\n+                                        AssertDepGraphSafe((cgu, symbol_map.clone())),\n+                                        module_translation);\n+            all_stats.extend(stats);\n+            module\n         })\n         .collect();\n \n     fn module_translation<'a, 'tcx>(\n         scx: AssertDepGraphSafe<&SharedCrateContext<'a, 'tcx>>,\n         args: AssertDepGraphSafe<(CodegenUnit<'tcx>, Rc<SymbolMap<'tcx>>)>)\n-        -> ModuleTranslation\n+        -> (Stats, ModuleTranslation)\n     {\n         // FIXME(#40304): We ought to be using the id as a key and some queries, I think.\n         let AssertDepGraphSafe(scx) = scx;\n@@ -1161,12 +1165,19 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 }\n             });\n \n-        let source = if let Some(buf) = previous_work_product {\n+        if let Some(buf) = previous_work_product {\n             // Don't need to translate this module.\n-            ModuleSource::Preexisting(buf.clone())\n-        } else {\n-            // Instantiate translation items without filling out definitions yet...\n-            let lcx = LocalCrateContext::new(scx, cgu, symbol_map.clone());\n+            let module = ModuleTranslation {\n+                name: cgu_name,\n+                symbol_name_hash,\n+                source: ModuleSource::Preexisting(buf.clone())\n+            };\n+            return (Stats::default(), module);\n+        }\n+\n+        // Instantiate translation items without filling out definitions yet...\n+        let lcx = LocalCrateContext::new(scx, cgu, symbol_map.clone());\n+        let module = {\n             let ccx = CrateContext::new(scx, &lcx);\n             let trans_items = ccx.codegen_unit()\n                                  .items_in_deterministic_order(ccx.tcx(), &symbol_map);\n@@ -1214,38 +1225,37 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 debuginfo::finalize(&ccx);\n             }\n \n-            ModuleSource::Translated(ModuleLlvm {\n-                llcx: ccx.llcx(),\n-                llmod: ccx.llmod(),\n-            })\n+            ModuleTranslation {\n+                name: cgu_name,\n+                symbol_name_hash,\n+                source: ModuleSource::Translated(ModuleLlvm {\n+                    llcx: ccx.llcx(),\n+                    llmod: ccx.llmod(),\n+                })\n+            }\n         };\n \n-        ModuleTranslation {\n-            name: cgu_name,\n-            symbol_name_hash,\n-            source,\n-        }\n+        (lcx.into_stats(), module)\n     }\n \n     assert_module_sources::assert_module_sources(tcx, &modules);\n \n     symbol_names_test::report_symbol_names(&shared_ccx);\n \n     if shared_ccx.sess().trans_stats() {\n-        let stats = shared_ccx.stats();\n         println!(\"--- trans stats ---\");\n-        println!(\"n_glues_created: {}\", stats.n_glues_created.get());\n-        println!(\"n_null_glues: {}\", stats.n_null_glues.get());\n-        println!(\"n_real_glues: {}\", stats.n_real_glues.get());\n+        println!(\"n_glues_created: {}\", all_stats.n_glues_created.get());\n+        println!(\"n_null_glues: {}\", all_stats.n_null_glues.get());\n+        println!(\"n_real_glues: {}\", all_stats.n_real_glues.get());\n \n-        println!(\"n_fns: {}\", stats.n_fns.get());\n-        println!(\"n_inlines: {}\", stats.n_inlines.get());\n-        println!(\"n_closures: {}\", stats.n_closures.get());\n+        println!(\"n_fns: {}\", all_stats.n_fns.get());\n+        println!(\"n_inlines: {}\", all_stats.n_inlines.get());\n+        println!(\"n_closures: {}\", all_stats.n_closures.get());\n         println!(\"fn stats:\");\n-        stats.fn_stats.borrow_mut().sort_by(|&(_, insns_a), &(_, insns_b)| {\n+        all_stats.fn_stats.borrow_mut().sort_by(|&(_, insns_a), &(_, insns_b)| {\n             insns_b.cmp(&insns_a)\n         });\n-        for tuple in stats.fn_stats.borrow().iter() {\n+        for tuple in all_stats.fn_stats.borrow().iter() {\n             match *tuple {\n                 (ref name, insns) => {\n                     println!(\"{} insns, {}\", insns, *name);\n@@ -1255,7 +1265,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n \n     if shared_ccx.sess().count_llvm_insns() {\n-        for (k, v) in shared_ccx.stats().llvm_insns.borrow().iter() {\n+        for (k, v) in all_stats.llvm_insns.borrow().iter() {\n             println!(\"{:7} {}\", *v, *k);\n         }\n     }"}, {"sha": "7e49dee498d003047ae4a72446ffda5b3a2978be", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8e26983c86c6e6a51c85e1bd5c4621f3b43afe99/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e26983c86c6e6a51c85e1bd5c4621f3b43afe99/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=8e26983c86c6e6a51c85e1bd5c4621f3b43afe99", "patch": "@@ -45,6 +45,7 @@ use syntax::symbol::InternedString;\n use syntax_pos::DUMMY_SP;\n use abi::Abi;\n \n+#[derive(Clone, Default)]\n pub struct Stats {\n     pub n_glues_created: Cell<usize>,\n     pub n_null_glues: Cell<usize>,\n@@ -58,6 +59,22 @@ pub struct Stats {\n     pub fn_stats: RefCell<Vec<(String, usize)> >,\n }\n \n+impl Stats {\n+    pub fn extend(&mut self, stats: Stats) {\n+        self.n_glues_created.set(self.n_glues_created.get() + stats.n_glues_created.get());\n+        self.n_null_glues.set(self.n_null_glues.get() + stats.n_null_glues.get());\n+        self.n_real_glues.set(self.n_real_glues.get() + stats.n_real_glues.get());\n+        self.n_fns.set(self.n_fns.get() + stats.n_fns.get());\n+        self.n_inlines.set(self.n_inlines.get() + stats.n_inlines.get());\n+        self.n_closures.set(self.n_closures.get() + stats.n_closures.get());\n+        self.n_llvm_insns.set(self.n_llvm_insns.get() + stats.n_llvm_insns.get());\n+        self.llvm_insns.borrow_mut().extend(\n+            stats.llvm_insns.borrow().iter()\n+                                     .map(|(key, value)| (key.clone(), value.clone())));\n+        self.fn_stats.borrow_mut().append(&mut *stats.fn_stats.borrow_mut());\n+    }\n+}\n+\n /// The shared portion of a `CrateContext`.  There is one `SharedCrateContext`\n /// per crate.  The data here is shared between all compilation units of the\n /// crate, so it must not contain references to any LLVM data structures\n@@ -66,7 +83,6 @@ pub struct SharedCrateContext<'a, 'tcx: 'a> {\n     exported_symbols: NodeSet,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     empty_param_env: ty::ParameterEnvironment<'tcx>,\n-    stats: Stats,\n     check_overflow: bool,\n \n     use_dll_storage_attrs: bool,\n@@ -83,6 +99,7 @@ pub struct SharedCrateContext<'a, 'tcx: 'a> {\n pub struct LocalCrateContext<'tcx> {\n     llmod: ModuleRef,\n     llcx: ContextRef,\n+    stats: Stats,\n     codegen_unit: CodegenUnit<'tcx>,\n     needs_unwind_cleanup_cache: RefCell<FxHashMap<Ty<'tcx>, bool>>,\n     /// Cache instances of monomorphic and polymorphic items\n@@ -366,17 +383,6 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n             exported_symbols: exported_symbols,\n             empty_param_env: tcx.empty_parameter_environment(),\n             tcx: tcx,\n-            stats: Stats {\n-                n_glues_created: Cell::new(0),\n-                n_null_glues: Cell::new(0),\n-                n_real_glues: Cell::new(0),\n-                n_fns: Cell::new(0),\n-                n_inlines: Cell::new(0),\n-                n_closures: Cell::new(0),\n-                n_llvm_insns: Cell::new(0),\n-                llvm_insns: RefCell::new(FxHashMap()),\n-                fn_stats: RefCell::new(Vec::new()),\n-            },\n             check_overflow: check_overflow,\n             use_dll_storage_attrs: use_dll_storage_attrs,\n             translation_items: RefCell::new(FxHashSet()),\n@@ -417,10 +423,6 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n         &self.tcx.dep_graph\n     }\n \n-    pub fn stats<'a>(&'a self) -> &'a Stats {\n-        &self.stats\n-    }\n-\n     pub fn use_dll_storage_attrs(&self) -> bool {\n         self.use_dll_storage_attrs\n     }\n@@ -466,6 +468,7 @@ impl<'tcx> LocalCrateContext<'tcx> {\n             let local_ccx = LocalCrateContext {\n                 llmod: llmod,\n                 llcx: llcx,\n+                stats: Stats::default(),\n                 codegen_unit: codegen_unit,\n                 needs_unwind_cleanup_cache: RefCell::new(FxHashMap()),\n                 instances: RefCell::new(FxHashMap()),\n@@ -537,6 +540,10 @@ impl<'tcx> LocalCrateContext<'tcx> {\n             local_ccx: &local_ccxs[0]\n         }\n     }\n+\n+    pub fn into_stats(self) -> Stats {\n+        self.stats\n+    }\n }\n \n impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n@@ -651,7 +658,7 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n     }\n \n     pub fn stats<'a>(&'a self) -> &'a Stats {\n-        &self.shared.stats\n+        &self.local().stats\n     }\n \n     pub fn int_type(&self) -> Type {"}]}