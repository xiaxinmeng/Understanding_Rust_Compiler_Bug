{"sha": "9a460aac37e91f66f9ba79824dbf62105733efee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNDYwYWFjMzdlOTFmNjZmOWJhNzk4MjRkYmY2MjEwNTczM2VmZWU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-03T21:10:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-03T21:10:39Z"}, "message": "some type-level docs for MaybeUninit; rename into_inner -> into_initialized", "tree": {"sha": "ead66a857b27b8ea116a30023a1ffcdb9273019c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ead66a857b27b8ea116a30023a1ffcdb9273019c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a460aac37e91f66f9ba79824dbf62105733efee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a460aac37e91f66f9ba79824dbf62105733efee", "html_url": "https://github.com/rust-lang/rust/commit/9a460aac37e91f66f9ba79824dbf62105733efee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a460aac37e91f66f9ba79824dbf62105733efee/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2966fbc10d0fd4fe15a25608b9eca3e52ba24995", "url": "https://api.github.com/repos/rust-lang/rust/commits/2966fbc10d0fd4fe15a25608b9eca3e52ba24995", "html_url": "https://github.com/rust-lang/rust/commit/2966fbc10d0fd4fe15a25608b9eca3e52ba24995"}], "stats": {"total": 53, "additions": 47, "deletions": 6}, "files": [{"sha": "664490c1997eff19c0dcf520ca8b2209da33fe2f", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a460aac37e91f66f9ba79824dbf62105733efee/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a460aac37e91f66f9ba79824dbf62105733efee/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=9a460aac37e91f66f9ba79824dbf62105733efee", "patch": "@@ -555,12 +555,12 @@ macro_rules! unimplemented {\n #[macro_export]\n #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n macro_rules! uninitialized_array {\n-    // This `into_inner` is safe because an array of `MaybeUninit` does not\n+    // This `into_initialized` is safe because an array of `MaybeUninit` does not\n     // require initialization.\n     // FIXME(#49147): Could be replaced by an array initializer, once those can\n     // be any const expression.\n     ($t:ty; $size:expr) => (unsafe {\n-        MaybeUninit::<[MaybeUninit<$t>; $size]>::uninitialized().into_inner()\n+        MaybeUninit::<[MaybeUninit<$t>; $size]>::uninitialized().into_initialized()\n     });\n }\n "}, {"sha": "998e892bffb2609f4166b2cf7e8ba4302606e859", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/9a460aac37e91f66f9ba79824dbf62105733efee/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a460aac37e91f66f9ba79824dbf62105733efee/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=9a460aac37e91f66f9ba79824dbf62105733efee", "patch": "@@ -1034,7 +1034,41 @@ impl<T: ?Sized> DerefMut for ManuallyDrop<T> {\n     }\n }\n \n-/// A newtype to construct uninitialized instances of `T`\n+/// A newtype to construct uninitialized instances of `T`.\n+///\n+/// The compiler, in general, assumes that variables are properly initialized\n+/// at their respective type.  For example, a variable of reference type must\n+/// be aligned and non-NULL.  This is an invariant that must *always* be upheld,\n+/// even in unsafe code.  As a consequence, 0-initializing a variable of reference\n+/// type causes instantaneous undefined behavior, no matter whether that reference\n+/// ever gets used to access memory:\n+/// ```rust,ignore\n+/// use std::mem;\n+///\n+/// let x: &i32 = mem::zeroed(); // undefined behavior!\n+/// ```\n+/// This is exploitet by the compiler for various optimizations, such as eliding\n+/// run-time checks and optimizing `enum` layout.\n+///\n+/// Not initializing memory at all (instead of 0-initializing it) causes the same\n+/// issue: after all, the initial value of the variable might just happen to be\n+/// one that violates the invariant.\n+///\n+/// `MaybeUninit` serves to enable unsafe code to deal with uninitialized data:\n+/// it is a signal to the compiler indicating that the data here may *not*\n+/// be initialized:\n+/// ```rust\n+/// use std::mem::MaybeUninit;\n+///\n+/// // Create an explicitly uninitialized reference.\n+/// let mut x = MaybeUninit::<&i32>::uninitialized();\n+/// // Set it to a valid value.\n+/// x.set(&0);\n+/// // Extract the initialized data -- this is only allowed *after* properly\n+/// initializing `x`!\n+/// let x = unsafe { x.into_initialized() };\n+/// ```\n+/// The compiler then knows to not optimize this code.\n #[allow(missing_debug_implementations)]\n #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n // NOTE after stabilizing `MaybeUninit` proceed to deprecate `mem::{uninitialized,zeroed}`\n@@ -1101,11 +1135,18 @@ impl<T> MaybeUninit<T> {\n     /// state, otherwise this will immediately cause undefined behavior.\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n-    pub unsafe fn into_inner(self) -> T {\n+    pub unsafe fn into_initialized(self) -> T {\n         intrinsics::panic_if_uninhabited::<T>();\n         ManuallyDrop::into_inner(self.value)\n     }\n \n+    /// Deprecated alternative to `into_initialized`.  Will never get stabilized.\n+    /// Exists only to transition stdsimd to `into_initialized`.\n+    #[inline(always)]\n+    pub(crate) unsafe fn into_inner(self) -> T {\n+        self.into_initialized()\n+    }\n+\n     /// Get a reference to the contained value.\n     ///\n     /// # Unsafety"}, {"sha": "537aa92c2cf4edc279945238c762998948e15b1e", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a460aac37e91f66f9ba79824dbf62105733efee/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a460aac37e91f66f9ba79824dbf62105733efee/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=9a460aac37e91f66f9ba79824dbf62105733efee", "patch": "@@ -573,7 +573,7 @@ pub unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n pub unsafe fn read<T>(src: *const T) -> T {\n     let mut tmp = MaybeUninit::<T>::uninitialized();\n     copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);\n-    tmp.into_inner()\n+    tmp.into_initialized()\n }\n \n /// Reads the value from `src` without moving it. This leaves the\n@@ -642,7 +642,7 @@ pub unsafe fn read_unaligned<T>(src: *const T) -> T {\n     copy_nonoverlapping(src as *const u8,\n                         tmp.as_mut_ptr() as *mut u8,\n                         mem::size_of::<T>());\n-    tmp.into_inner()\n+    tmp.into_initialized()\n }\n \n /// Overwrites a memory location with the given value without reading or"}]}