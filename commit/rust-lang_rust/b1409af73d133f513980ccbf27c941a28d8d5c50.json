{"sha": "b1409af73d133f513980ccbf27c941a28d8d5c50", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNDA5YWY3M2QxMzNmNTEzOTgwY2NiZjI3Yzk0MWEyOGQ4ZDVjNTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-18T17:30:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-18T17:30:26Z"}, "message": "Auto merge of #46032 - KiChjang:ignore-borrowck-statics, r=nikomatsakis\n\nIgnore borrowck for static lvalues and allow assignment to static muts\n\nFixes #45129.\nFixes #45641.", "tree": {"sha": "8d454a850d0259d79a7c1bc5b0cc513eeafc58c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d454a850d0259d79a7c1bc5b0cc513eeafc58c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1409af73d133f513980ccbf27c941a28d8d5c50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1409af73d133f513980ccbf27c941a28d8d5c50", "html_url": "https://github.com/rust-lang/rust/commit/b1409af73d133f513980ccbf27c941a28d8d5c50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1409af73d133f513980ccbf27c941a28d8d5c50/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f491e07c9e8932fe47268af243f299ab685036f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f491e07c9e8932fe47268af243f299ab685036f", "html_url": "https://github.com/rust-lang/rust/commit/1f491e07c9e8932fe47268af243f299ab685036f"}, {"sha": "f8ba371b1ef4337b2181a8f6cc45a66303eb48e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8ba371b1ef4337b2181a8f6cc45a66303eb48e3", "html_url": "https://github.com/rust-lang/rust/commit/f8ba371b1ef4337b2181a8f6cc45a66303eb48e3"}], "stats": {"total": 152, "additions": 108, "deletions": 44}, "files": [{"sha": "cdac72b6dffb0ffa5d1820831721db9df3a5c0c9", "filename": "src/librustc_mir/borrow_check.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1409af73d133f513980ccbf27c941a28d8d5c50/src%2Flibrustc_mir%2Fborrow_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1409af73d133f513980ccbf27c941a28d8d5c50/src%2Flibrustc_mir%2Fborrow_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check.rs?ref=b1409af73d133f513980ccbf27c941a28d8d5c50", "patch": "@@ -707,10 +707,12 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         Mutability::Mut => return,\n                     }\n                 }\n-                Lvalue::Static(_) => {\n+                Lvalue::Static(ref static_) => {\n                     // mutation of non-mut static is always illegal,\n                     // independent of dataflow.\n-                    self.report_assignment_to_static(context, (lvalue, span));\n+                    if !self.tcx.is_static_mut(static_.def_id) {\n+                        self.report_assignment_to_static(context, (lvalue, span));\n+                    }\n                     return;\n                 }\n             }"}, {"sha": "acfa195d7b09a336ee920e7c630dd056668f351e", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 50, "deletions": 8, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/b1409af73d133f513980ccbf27c941a28d8d5c50/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1409af73d133f513980ccbf27c941a28d8d5c50/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=b1409af73d133f513980ccbf27c941a28d8d5c50", "patch": "@@ -10,7 +10,7 @@\n \n use rustc::mir::{self, Location, Mir};\n use rustc::mir::visit::Visitor;\n-use rustc::ty::{Region, TyCtxt};\n+use rustc::ty::{self, Region, TyCtxt};\n use rustc::ty::RegionKind;\n use rustc::ty::RegionKind::ReScope;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n@@ -71,10 +71,14 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n                mir: &'a Mir<'tcx>,\n                nonlexical_regioncx: Option<&'a RegionInferenceContext<'tcx>>)\n                -> Self {\n-        let mut visitor = GatherBorrows { idx_vec: IndexVec::new(),\n-                                          location_map: FxHashMap(),\n-                                          region_map: FxHashMap(),\n-                                          region_span_map: FxHashMap()};\n+        let mut visitor = GatherBorrows {\n+            tcx,\n+            mir,\n+            idx_vec: IndexVec::new(),\n+            location_map: FxHashMap(),\n+            region_map: FxHashMap(),\n+            region_span_map: FxHashMap()\n+        };\n         visitor.visit_mir(mir);\n         return Borrows { tcx: tcx,\n                          mir: mir,\n@@ -84,17 +88,22 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n                          region_span_map: visitor.region_span_map,\n                          nonlexical_regioncx };\n \n-        struct GatherBorrows<'tcx> {\n+        struct GatherBorrows<'a, 'gcx: 'tcx, 'tcx: 'a> {\n+            tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+            mir: &'a Mir<'tcx>,\n             idx_vec: IndexVec<BorrowIndex, BorrowData<'tcx>>,\n             location_map: FxHashMap<Location, BorrowIndex>,\n             region_map: FxHashMap<Region<'tcx>, FxHashSet<BorrowIndex>>,\n             region_span_map: FxHashMap<RegionKind, Span>,\n         }\n-        impl<'tcx> Visitor<'tcx> for GatherBorrows<'tcx> {\n+\n+        impl<'a, 'gcx, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'gcx, 'tcx> {\n             fn visit_rvalue(&mut self,\n                             rvalue: &mir::Rvalue<'tcx>,\n                             location: mir::Location) {\n                 if let mir::Rvalue::Ref(region, kind, ref lvalue) = *rvalue {\n+                    if is_unsafe_lvalue(self.tcx, self.mir, lvalue) { return; }\n+\n                     let borrow = BorrowData {\n                         location: location, kind: kind, region: region, lvalue: lvalue.clone(),\n                     };\n@@ -197,7 +206,8 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n             }\n \n             mir::StatementKind::Assign(_, ref rhs) => {\n-                if let mir::Rvalue::Ref(region, _, _) = *rhs {\n+                if let mir::Rvalue::Ref(region, _, ref lvalue) = *rhs {\n+                    if is_unsafe_lvalue(self.tcx, self.mir, lvalue) { return; }\n                     let index = self.location_map.get(&location).unwrap_or_else(|| {\n                         panic!(\"could not find BorrowIndex for location {:?}\", location);\n                     });\n@@ -248,3 +258,35 @@ impl<'a, 'gcx, 'tcx> DataflowOperator for Borrows<'a, 'gcx, 'tcx> {\n         false // bottom = no Rvalue::Refs are active by default\n     }\n }\n+\n+fn is_unsafe_lvalue<'a, 'gcx: 'tcx, 'tcx: 'a>(\n+    tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+    mir: &'a Mir<'tcx>,\n+    lvalue: &mir::Lvalue<'tcx>\n+) -> bool {\n+    use self::mir::Lvalue::*;\n+    use self::mir::ProjectionElem;\n+\n+    match *lvalue {\n+        Local(_) => false,\n+        Static(ref static_) => tcx.is_static_mut(static_.def_id),\n+        Projection(ref proj) => {\n+            match proj.elem {\n+                ProjectionElem::Field(..) |\n+                ProjectionElem::Downcast(..) |\n+                ProjectionElem::Subslice { .. } |\n+                ProjectionElem::ConstantIndex { .. } |\n+                ProjectionElem::Index(_) => {\n+                    is_unsafe_lvalue(tcx, mir, &proj.base)\n+                }\n+                ProjectionElem::Deref => {\n+                    let ty = proj.base.ty(mir, tcx).to_ty(tcx);\n+                    match ty.sty {\n+                        ty::TyRawPtr(..) => true,\n+                        _ => is_unsafe_lvalue(tcx, mir, &proj.base),\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "d1cf08ac75463e0329cf78361f2e91c64ff22d95", "filename": "src/test/compile-fail/borrowck/borrowck-describe-lvalue.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b1409af73d133f513980ccbf27c941a28d8d5c50/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-describe-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1409af73d133f513980ccbf27c941a28d8d5c50/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-describe-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-describe-lvalue.rs?ref=b1409af73d133f513980ccbf27c941a28d8d5c50", "patch": "@@ -46,12 +46,6 @@ impl Baz {\n     }\n }\n \n-static mut sfoo : Foo = Foo{x: 23 };\n-static mut sbar : Bar = Bar(23);\n-static mut stuple : (i32, i32) = (24, 25);\n-static mut senum : Baz = Baz::X(26);\n-static mut sunion : U = U { a: 0 };\n-\n fn main() {\n     // Local and field from struct\n     {\n@@ -96,34 +90,6 @@ fn main() {\n              //[mir]~^ ERROR cannot use `u.a` because it was mutably borrowed (Ast)\n              //[mir]~| ERROR cannot use `u.a` because it was mutably borrowed (Mir)\n     }\n-    // Static and field from struct\n-    unsafe {\n-        let _x = sfoo.x();\n-        sfoo.x; //[mir]~ ERROR cannot use `sfoo.x` because it was mutably borrowed (Mir)\n-    }\n-    // Static and field from tuple-struct\n-    unsafe {\n-        let _0 = sbar.x();\n-        sbar.0; //[mir]~ ERROR cannot use `sbar.0` because it was mutably borrowed (Mir)\n-    }\n-    // Static and field from tuple\n-    unsafe {\n-        let _0 = &mut stuple.0;\n-        stuple.0; //[mir]~ ERROR cannot use `stuple.0` because it was mutably borrowed (Mir)\n-    }\n-    // Static and field from enum\n-    unsafe {\n-        let _e0 = senum.x();\n-        match senum {\n-            Baz::X(value) => value\n-            //[mir]~^ ERROR cannot use `senum.0` because it was mutably borrowed (Mir)\n-        };\n-    }\n-    // Static and field from union\n-    unsafe {\n-        let _ra = &mut sunion.a;\n-        sunion.a; //[mir]~ ERROR cannot use `sunion.a` because it was mutably borrowed (Mir)\n-    }\n     // Deref and field from struct\n     {\n         let mut f = Box::new(Foo { x: 22 });"}, {"sha": "b241cb4928915e1ef23b0a9086c02ee8d28ce892", "filename": "src/test/run-pass/borrowck/borrowck-assignment-to-static-mut.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b1409af73d133f513980ccbf27c941a28d8d5c50/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-assignment-to-static-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1409af73d133f513980ccbf27c941a28d8d5c50/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-assignment-to-static-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-assignment-to-static-mut.rs?ref=b1409af73d133f513980ccbf27c941a28d8d5c50", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test taken from #45641 (https://github.com/rust-lang/rust/issues/45641)\n+\n+// ignore-tidy-linelength\n+// revisions: ast mir\n+//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+\n+static mut Y: u32 = 0;\n+\n+unsafe fn should_ok() {\n+    Y = 1;\n+}\n+\n+fn main() {}\n\\ No newline at end of file"}, {"sha": "a4dd7b9b125c2248c7e0c3c2911d8861ab2abc9a", "filename": "src/test/run-pass/borrowck/borrowck-unsafe-static-mutable-borrows.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b1409af73d133f513980ccbf27c941a28d8d5c50/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-unsafe-static-mutable-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1409af73d133f513980ccbf27c941a28d8d5c50/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-unsafe-static-mutable-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-unsafe-static-mutable-borrows.rs?ref=b1409af73d133f513980ccbf27c941a28d8d5c50", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// revisions: ast mir\n+//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+\n+// Test file taken from issue 45129 (https://github.com/rust-lang/rust/issues/45129)\n+\n+struct Foo { x: [usize; 2] }\n+\n+static mut SFOO: Foo = Foo { x: [23, 32] };\n+\n+impl Foo {\n+    fn x(&mut self) -> &mut usize { &mut self.x[0] }\n+}\n+\n+fn main() {\n+    unsafe {\n+        let sfoo: *mut Foo = &mut SFOO;\n+        let x = (*sfoo).x();\n+        (*sfoo).x[1] += 1;\n+        *x += 1;\n+    }\n+}"}]}