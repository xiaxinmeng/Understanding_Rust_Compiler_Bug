{"sha": "5339d541efa7245a17fabe8992065ff9d444f5a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMzlkNTQxZWZhNzI0NWExN2ZhYmU4OTkyMDY1ZmY5ZDQ0NGY1YTQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-23T09:33:49Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-23T09:33:49Z"}, "message": "cargo-miri: also find Rust sources when being run in a locally built, linked toolchain", "tree": {"sha": "faaa6e489696b6acab543beea7982c27c54f9143", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/faaa6e489696b6acab543beea7982c27c54f9143"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5339d541efa7245a17fabe8992065ff9d444f5a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5339d541efa7245a17fabe8992065ff9d444f5a4", "html_url": "https://github.com/rust-lang/rust/commit/5339d541efa7245a17fabe8992065ff9d444f5a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5339d541efa7245a17fabe8992065ff9d444f5a4/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1541fe80e1f5d0d83a94d2bb39d13cb641b985c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1541fe80e1f5d0d83a94d2bb39d13cb641b985c7", "html_url": "https://github.com/rust-lang/rust/commit/1541fe80e1f5d0d83a94d2bb39d13cb641b985c7"}], "stats": {"total": 52, "additions": 39, "deletions": 13}, "files": [{"sha": "f4fb13518e3053aa3ea498833074d2ced0fdaaca", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 39, "deletions": 13, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5339d541efa7245a17fabe8992065ff9d444f5a4/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5339d541efa7245a17fabe8992065ff9d444f5a4/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=5339d541efa7245a17fabe8992065ff9d444f5a4", "patch": "@@ -270,19 +270,44 @@ fn setup(ask_user: bool) {\n         ask_to_run(cmd, ask_user, \"install a recent enough xargo\");\n     }\n \n-    // Then, unless `XARGO_RUST_SRC` is set, we also need rust-src.\n-    // Let's see if it is already installed.\n-    if std::env::var(\"XARGO_RUST_SRC\").is_err() {\n-        let sysroot = Command::new(\"rustc\").args(&[\"--print\", \"sysroot\"]).output()\n-            .expect(\"failed to get rustc sysroot\")\n-            .stdout;\n-        let sysroot = std::str::from_utf8(&sysroot).unwrap();\n-        let src = Path::new(sysroot.trim_end_matches('\\n')).join(\"lib\").join(\"rustlib\").join(\"src\");\n-        if !src.exists() {\n-            let mut cmd = Command::new(\"rustup\");\n-            cmd.args(&[\"component\", \"add\", \"rust-src\"]);\n-            ask_to_run(cmd, ask_user, \"install the rustc-src component for the selected toolchain\");\n+    // Determine where the rust sources are located.  `XARGO_RUST_SRC` env var trumps everything.\n+    let rust_src = match std::env::var(\"XARGO_RUST_SRC\") {\n+        Ok(val) => PathBuf::from(val),\n+        Err(_) => {\n+            // Check for `rust-src` rustup component.\n+            let sysroot = Command::new(\"rustc\").args(&[\"--print\", \"sysroot\"]).output()\n+                .expect(\"failed to get rustc sysroot\")\n+                .stdout;\n+            let sysroot = std::str::from_utf8(&sysroot).unwrap();\n+            let sysroot = Path::new(sysroot.trim_end_matches('\\n'));\n+            // First try: `$SYSROOT/lib/rustlib/src/rust`; test if that contains `Cargo.lock`.\n+            let rustup_src = sysroot.join(\"lib\").join(\"rustlib\").join(\"src\").join(\"rust\");\n+            let base_dir = if rustup_src.join(\"Cargo.lock\").exists() {\n+                // Just use this.\n+                rustup_src\n+            } else {\n+                // Maybe this is a local toolchain built with `x.py` and linked into `rustup`?\n+                // Second try: `$SYSROOT/../../..`; test if that contains `x.py`.\n+                let local_src = sysroot.parent().and_then(Path::parent).and_then(Path::parent);\n+                match local_src {\n+                    Some(local_src) if local_src.join(\"x.py\").exists() => {\n+                        // Use this.\n+                        PathBuf::from(local_src)\n+                    }\n+                    _ => {\n+                        // Fallback: Ask the user to install the `rust-src` component, and use that.\n+                        let mut cmd = Command::new(\"rustup\");\n+                        cmd.args(&[\"component\", \"add\", \"rust-src\"]);\n+                        ask_to_run(cmd, ask_user, \"install the rustc-src component for the selected toolchain\");\n+                        rustup_src\n+                    }\n+                }\n+            };\n+            base_dir.join(\"src\") // Xargo wants the src-subdir\n         }\n+    };\n+    if !rust_src.exists() {\n+        show_error(format!(\"Given Rust source directory `{}` does not exist.\", rust_src.display()));\n     }\n \n     // Next, we need our own libstd. We will do this work in whatever is a good cache dir for this platform.\n@@ -321,7 +346,8 @@ path = \"lib.rs\"\n     command.arg(\"build\").arg(\"-q\");\n     command.current_dir(&dir);\n     command.env(\"RUSTFLAGS\", miri::miri_default_args().join(\" \"));\n-    command.env(\"XARGO_HOME\", dir.to_str().unwrap());\n+    command.env(\"XARGO_HOME\", &dir);\n+    command.env(\"XARGO_RUST_SRC\", &rust_src);\n     // In bootstrap, make sure we don't get debug assertons into our libstd.\n     command.env(\"RUSTC_DEBUG_ASSERTIONS\", \"false\");\n     // Handle target flag."}]}