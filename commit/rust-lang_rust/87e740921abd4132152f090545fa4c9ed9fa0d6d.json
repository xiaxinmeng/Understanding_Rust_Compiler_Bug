{"sha": "87e740921abd4132152f090545fa4c9ed9fa0d6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZTc0MDkyMWFiZDQxMzIxNTJmMDkwNTQ1ZmE0YzllZDlmYTBkNmQ=", "commit": {"author": {"name": "Christoph Walcher", "email": "christoph-wa@gmx.de", "date": "2020-08-07T15:55:25Z"}, "committer": {"name": "Christoph Walcher", "email": "christoph-wa@gmx.de", "date": "2020-08-07T16:30:20Z"}, "message": "check impl Ord / is_float", "tree": {"sha": "7d84798521a50c34946a2ff21970cefb34cbe9cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d84798521a50c34946a2ff21970cefb34cbe9cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87e740921abd4132152f090545fa4c9ed9fa0d6d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE2xeoiquC04hUiBqUoZMWSk0F7kQFAl8tgZ0ACgkQoZMWSk0F\n7kQMHQgAx9pXaYQeB81QAZpkLyzfKnUTA1pe+iRudDLoY6q3a/fs6IOnxOiUFYG7\nsFJ53HNEI8QL4USidhyyW77nXHdbJHfshlvUMm7RAVo0TyKVxJ3di5vExdDrS0jl\nHy5wHvpYtKHxibFRITonajftFkjfgsZhMX+PF/WI0ehq8bf5hIWJTuFznFlizxpl\nkMJMWWaOcL94vrsowyvMxBEcw6TWAi7psFLJ5ZodidpN5S3wP1YBL4PibQVQQCIB\nX18euXO0WxqctpwX08/UqOJjCfi0tbXhxSW/0XlY5VeIRKbzGXfWUU+NA0H/Lzpj\nF+KbjZUIgUuLjNh2O3c04AOUbNou7A==\n=WlSb\n-----END PGP SIGNATURE-----", "payload": "tree 7d84798521a50c34946a2ff21970cefb34cbe9cc\nparent 0abc4833e5dc8ec4da48d5b25e1d0df81cceec4d\nauthor Christoph Walcher <christoph-wa@gmx.de> 1596815725 +0200\ncommitter Christoph Walcher <christoph-wa@gmx.de> 1596817820 +0200\n\ncheck impl Ord / is_float\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87e740921abd4132152f090545fa4c9ed9fa0d6d", "html_url": "https://github.com/rust-lang/rust/commit/87e740921abd4132152f090545fa4c9ed9fa0d6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87e740921abd4132152f090545fa4c9ed9fa0d6d/comments", "author": {"login": "wiomoc", "id": 10638299, "node_id": "MDQ6VXNlcjEwNjM4Mjk5", "avatar_url": "https://avatars.githubusercontent.com/u/10638299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wiomoc", "html_url": "https://github.com/wiomoc", "followers_url": "https://api.github.com/users/wiomoc/followers", "following_url": "https://api.github.com/users/wiomoc/following{/other_user}", "gists_url": "https://api.github.com/users/wiomoc/gists{/gist_id}", "starred_url": "https://api.github.com/users/wiomoc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wiomoc/subscriptions", "organizations_url": "https://api.github.com/users/wiomoc/orgs", "repos_url": "https://api.github.com/users/wiomoc/repos", "events_url": "https://api.github.com/users/wiomoc/events{/privacy}", "received_events_url": "https://api.github.com/users/wiomoc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wiomoc", "id": 10638299, "node_id": "MDQ6VXNlcjEwNjM4Mjk5", "avatar_url": "https://avatars.githubusercontent.com/u/10638299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wiomoc", "html_url": "https://github.com/wiomoc", "followers_url": "https://api.github.com/users/wiomoc/followers", "following_url": "https://api.github.com/users/wiomoc/following{/other_user}", "gists_url": "https://api.github.com/users/wiomoc/gists{/gist_id}", "starred_url": "https://api.github.com/users/wiomoc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wiomoc/subscriptions", "organizations_url": "https://api.github.com/users/wiomoc/orgs", "repos_url": "https://api.github.com/users/wiomoc/repos", "events_url": "https://api.github.com/users/wiomoc/events{/privacy}", "received_events_url": "https://api.github.com/users/wiomoc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0abc4833e5dc8ec4da48d5b25e1d0df81cceec4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0abc4833e5dc8ec4da48d5b25e1d0df81cceec4d", "html_url": "https://github.com/rust-lang/rust/commit/0abc4833e5dc8ec4da48d5b25e1d0df81cceec4d"}], "stats": {"total": 73, "additions": 53, "deletions": 20}, "files": [{"sha": "004dd50a31be8716b7af5bc1727051261b2f2b84", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/87e740921abd4132152f090545fa4c9ed9fa0d6d/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e740921abd4132152f090545fa4c9ed9fa0d6d/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=87e740921abd4132152f090545fa4c9ed9fa0d6d", "patch": "@@ -1,5 +1,6 @@\n use crate::consts::{constant_simple, Constant};\n-use crate::utils::{match_def_path, paths, span_lint};\n+use crate::utils::{match_def_path, match_trait_method, paths, span_lint};\n+use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -84,12 +85,20 @@ fn min_max<'a>(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<(MinMax, Cons\n             }\n         },\n         ExprKind::MethodCall(ref path, _, ref args, _) => {\n-            if path.ident.as_str() == sym!(max).as_str() {\n-                fetch_const(cx, args, MinMax::Max)\n-            } else if path.ident.as_str() == sym!(min).as_str() {\n-                fetch_const(cx, args, MinMax::Min)\n-            } else {\n-                None\n+            if_chain! {\n+                if let [obj, _] = args;\n+                if cx.typeck_results().expr_ty(obj).is_floating_point() || match_trait_method(cx, expr, &paths::ORD);\n+                then {\n+                    if path.ident.as_str() == sym!(max).as_str() {\n+                        fetch_const(cx, args, MinMax::Max)\n+                    } else if path.ident.as_str() == sym!(min).as_str() {\n+                        fetch_const(cx, args, MinMax::Min)\n+                    } else {\n+                        None\n+                    }\n+                } else {\n+                    None\n+                }\n             }\n         },\n         _ => None,"}, {"sha": "f7ed72a11cf684b64f8d584cbaa990ae4aa0fa39", "filename": "tests/ui/min_max.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/87e740921abd4132152f090545fa4c9ed9fa0d6d/tests%2Fui%2Fmin_max.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e740921abd4132152f090545fa4c9ed9fa0d6d/tests%2Fui%2Fmin_max.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_max.rs?ref=87e740921abd4132152f090545fa4c9ed9fa0d6d", "patch": "@@ -6,6 +6,18 @@ use std::cmp::{max, min};\n \n const LARGE: usize = 3;\n \n+struct NotOrd(u64);\n+\n+impl NotOrd {\n+    fn min(self, x: u64) -> NotOrd {\n+        NotOrd(x)\n+    }\n+\n+    fn max(self, x: u64) -> NotOrd {\n+        NotOrd(x)\n+    }\n+}\n+\n fn main() {\n     let x;\n     x = 2usize;\n@@ -31,11 +43,14 @@ fn main() {\n \n     max(\"Apple\", min(s, \"Zoo\")); // ok\n \n+    let f = 3f32;\n     x.min(1).max(3);\n     x.max(3).min(1);\n+    f.max(3f32).min(1f32);\n \n     x.max(1).min(3); // ok\n     x.min(3).max(1); // ok\n+    f.min(3f32).max(1f32); // ok\n \n     max(x.min(1), 3);\n     min(x.max(1), 3); // ok\n@@ -44,4 +59,7 @@ fn main() {\n     s.min(\"Apple\").max(\"Zoo\");\n \n     s.min(\"Zoo\").max(\"Apple\"); // ok\n+\n+    let not_ord = NotOrd(1);\n+    not_ord.min(1).max(3); // ok\n }"}, {"sha": "9f8e26fa406f0e59c7458ec5b54ca234386abf6d", "filename": "tests/ui/min_max.stderr", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/87e740921abd4132152f090545fa4c9ed9fa0d6d/tests%2Fui%2Fmin_max.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87e740921abd4132152f090545fa4c9ed9fa0d6d/tests%2Fui%2Fmin_max.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_max.stderr?ref=87e740921abd4132152f090545fa4c9ed9fa0d6d", "patch": "@@ -1,76 +1,82 @@\n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:12:5\n+  --> $DIR/min_max.rs:24:5\n    |\n LL |     min(1, max(3, x));\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::min-max` implied by `-D warnings`\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:13:5\n+  --> $DIR/min_max.rs:25:5\n    |\n LL |     min(max(3, x), 1);\n    |     ^^^^^^^^^^^^^^^^^\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:14:5\n+  --> $DIR/min_max.rs:26:5\n    |\n LL |     max(min(x, 1), 3);\n    |     ^^^^^^^^^^^^^^^^^\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:15:5\n+  --> $DIR/min_max.rs:27:5\n    |\n LL |     max(3, min(x, 1));\n    |     ^^^^^^^^^^^^^^^^^\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:17:5\n+  --> $DIR/min_max.rs:29:5\n    |\n LL |     my_max(3, my_min(x, 1));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:29:5\n+  --> $DIR/min_max.rs:41:5\n    |\n LL |     min(\"Apple\", max(\"Zoo\", s));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:30:5\n+  --> $DIR/min_max.rs:42:5\n    |\n LL |     max(min(s, \"Apple\"), \"Zoo\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:34:5\n+  --> $DIR/min_max.rs:47:5\n    |\n LL |     x.min(1).max(3);\n    |     ^^^^^^^^^^^^^^^\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:35:5\n+  --> $DIR/min_max.rs:48:5\n    |\n LL |     x.max(3).min(1);\n    |     ^^^^^^^^^^^^^^^\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:40:5\n+  --> $DIR/min_max.rs:49:5\n+   |\n+LL |     f.max(3f32).min(1f32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this `min`/`max` combination leads to constant result\n+  --> $DIR/min_max.rs:55:5\n    |\n LL |     max(x.min(1), 3);\n    |     ^^^^^^^^^^^^^^^^\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:43:5\n+  --> $DIR/min_max.rs:58:5\n    |\n LL |     s.max(\"Zoo\").min(\"Apple\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:44:5\n+  --> $DIR/min_max.rs:59:5\n    |\n LL |     s.min(\"Apple\").max(\"Zoo\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 13 previous errors\n "}]}