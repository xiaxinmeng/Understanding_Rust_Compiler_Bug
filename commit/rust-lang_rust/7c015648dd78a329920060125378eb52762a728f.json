{"sha": "7c015648dd78a329920060125378eb52762a728f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMDE1NjQ4ZGQ3OGEzMjk5MjAwNjAxMjUzNzhlYjUyNzYyYTcyOGY=", "commit": {"author": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2021-08-07T15:04:32Z"}, "committer": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2021-08-16T16:28:18Z"}, "message": "Use llvm.compiler.used insetad of llvm.used\n\nThe #[used] attribute explicitly only requires symbols to be\nretained in object files, but allows the linker to drop them\nif dead. This corresponds to llvm.compiler.used semantics.\n\nThe motivation to change this *now* is that https://reviews.llvm.org/D97448\nstarts emitting #[used] symbols into unique sections with\nSHF_GNU_RETAIN flag. This triggers a bug in some version of gold,\nresulting in the ARGV_INIT_ARRAY symbol part of the .init_array\nsection to be incorrectly placed.", "tree": {"sha": "e7ec3ef94f4f8b328fb4dc0f37b1be38cff10c22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7ec3ef94f4f8b328fb4dc0f37b1be38cff10c22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c015648dd78a329920060125378eb52762a728f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c015648dd78a329920060125378eb52762a728f", "html_url": "https://github.com/rust-lang/rust/commit/7c015648dd78a329920060125378eb52762a728f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c015648dd78a329920060125378eb52762a728f/comments", "author": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "154c8408e9f9d90d82aa3060ed13732c955f0c53", "url": "https://api.github.com/repos/rust-lang/rust/commits/154c8408e9f9d90d82aa3060ed13732c955f0c53", "html_url": "https://github.com/rust-lang/rust/commit/154c8408e9f9d90d82aa3060ed13732c955f0c53"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "a9f43880ef6b8def05c761b568e2c53dc7895239", "filename": "compiler/rustc_codegen_llvm/src/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c015648dd78a329920060125378eb52762a728f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c015648dd78a329920060125378eb52762a728f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs?ref=7c015648dd78a329920060125378eb52762a728f", "patch": "@@ -157,12 +157,12 @@ pub fn compile_codegen_unit(\n             }\n \n             // Finalize code coverage by injecting the coverage map. Note, the coverage map will\n-            // also be added to the `llvm.used` variable, created next.\n+            // also be added to the `llvm.compiler.used` variable, created next.\n             if cx.sess().instrument_coverage() {\n                 cx.coverageinfo_finalize();\n             }\n \n-            // Create the llvm.used variable\n+            // Create the llvm.compiler.used variable\n             // This variable has type [N x i8*] and is stored in the llvm.metadata section\n             if !cx.used_statics().borrow().is_empty() {\n                 cx.create_used_variable()"}, {"sha": "7b14c1791748f04e0aa5e00eb65a5f7fbbec5d1a", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c015648dd78a329920060125378eb52762a728f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c015648dd78a329920060125378eb52762a728f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=7c015648dd78a329920060125378eb52762a728f", "patch": "@@ -479,7 +479,7 @@ impl StaticMethods for CodegenCx<'ll, 'tcx> {\n         }\n     }\n \n-    /// Add a global value to a list to be stored in the `llvm.used` variable, an array of i8*.\n+    /// Add a global value to a list to be stored in the `llvm.compiler.used` variable, an array of i8*.\n     fn add_used_global(&self, global: &'ll Value) {\n         let cast = unsafe { llvm::LLVMConstPointerCast(global, self.type_i8p()) };\n         self.used_statics.borrow_mut().push(cast);"}, {"sha": "9c0220d3448e6aa0a33a1c59b75f31b496115b5b", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7c015648dd78a329920060125378eb52762a728f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c015648dd78a329920060125378eb52762a728f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=7c015648dd78a329920060125378eb52762a728f", "patch": "@@ -71,8 +71,8 @@ pub struct CodegenCx<'ll, 'tcx> {\n     /// to constants.)\n     pub statics_to_rauw: RefCell<Vec<(&'ll Value, &'ll Value)>>,\n \n-    /// Statics that will be placed in the llvm.used variable\n-    /// See <https://llvm.org/docs/LangRef.html#the-llvm-used-global-variable> for details\n+    /// Statics that will be placed in the llvm.compiler.used variable\n+    /// See <https://llvm.org/docs/LangRef.html#the-llvm-compiler-used-global-variable> for details\n     pub used_statics: RefCell<Vec<&'ll Value>>,\n \n     /// Mapping of non-scalar types to llvm types and field remapping if needed.\n@@ -447,7 +447,13 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     }\n \n     fn create_used_variable(&self) {\n-        let name = cstr!(\"llvm.used\");\n+        // The semantics of #[used] in Rust only require the symbol to make it into the object\n+        // file. It is explicitly allowed for the linker to strip the symbol if it is dead.\n+        // As such, use llvm.compiler.used instead of llvm.used.\n+        // Additionally, https://reviews.llvm.org/D97448 in LLVM 13 started emitting unique\n+        // sections with SHF_GNU_RETAIN flag for llvm.used symbols, which may trigger bugs in\n+        // some versions of the gold linker.\n+        let name = cstr!(\"llvm.compiler.used\");\n         let section = cstr!(\"llvm.metadata\");\n         let array =\n             self.const_array(&self.type_ptr_to(self.type_i8()), &*self.used_statics.borrow());"}, {"sha": "ddb11985cd8b4dade20eee3af41052e5b8695b43", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c015648dd78a329920060125378eb52762a728f/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c015648dd78a329920060125378eb52762a728f/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=7c015648dd78a329920060125378eb52762a728f", "patch": "@@ -178,7 +178,7 @@ declare_features! (\n     /// Allows annotating functions conforming to `fn(&PanicInfo) -> !` with `#[panic_handler]`.\n     /// This defines the behavior of panics.\n     (accepted, panic_handler, \"1.30.0\", Some(44489), None),\n-    /// Allows `#[used]` to preserve symbols (see llvm.used).\n+    /// Allows `#[used]` to preserve symbols (see llvm.compiler.used).\n     (accepted, used, \"1.30.0\", Some(40289), None),\n     /// Allows `crate` in paths.\n     (accepted, crate_in_paths, \"1.30.0\", Some(45477), None),"}, {"sha": "9b1f810500bcfde85402b16e88010a8866b22671", "filename": "src/test/run-make-fulldeps/coverage-llvmir/filecheck.testprog.txt", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c015648dd78a329920060125378eb52762a728f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2Ffilecheck.testprog.txt", "raw_url": "https://github.com/rust-lang/rust/raw/7c015648dd78a329920060125378eb52762a728f/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2Ffilecheck.testprog.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2Ffilecheck.testprog.txt?ref=7c015648dd78a329920060125378eb52762a728f", "patch": "@@ -28,9 +28,11 @@ CHECK-SAME:   section \"[[INSTR_PROF_DATA]]\"{{.*}}, align 8\n CHECK:        @__llvm_prf_nm = private constant\n CHECK-SAME:   section \"[[INSTR_PROF_NAME]]\", align 1\n \n-CHECK:        @llvm.used = appending global\n+CHECK:        @llvm.compiler.used = appending global\n CHECK-SAME:   i8* bitcast ({ {{.*}} }* @__llvm_coverage_mapping to i8*)\n WINDOWS-SAME: i8* bitcast (i32 ()* @__llvm_profile_runtime_user to i8*)\n+CHECK-SAME:   section \"llvm.metadata\"\n+CHECK:        @llvm.used = appending global\n CHECK-SAME:   i8* getelementptr inbounds ({{.*}}* @__llvm_prf_nm, i32 0, i32 0)\n CHECK-SAME:   section \"llvm.metadata\"\n "}]}