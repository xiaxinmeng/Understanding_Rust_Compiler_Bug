{"sha": "f408ff50130eae0eb56e7f9668e9df39f7baa6dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MDhmZjUwMTMwZWFlMGViNTZlN2Y5NjY4ZTlkZjM5ZjdiYWE2ZGQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-30T15:23:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-30T15:23:21Z"}, "message": "Merge #7483\n\n7483: Classify function calls as functions when shadowed by types r=matklad a=Veykril\n\nFixes #7479\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "099e32b0fb1f94bef58d6d9a23d45d2e8b890ae1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/099e32b0fb1f94bef58d6d9a23d45d2e8b890ae1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f408ff50130eae0eb56e7f9668e9df39f7baa6dd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgFXnpCRBK7hj4Ov3rIwAAdHIIAFO6gQLboSCFujKF13vq2v2U\nzO5/Fqsp+rVm92ORf+Tw18hmExiKtO2N7VykMxWogtDrxVTF70oDV+b9LZiZcbMH\nPP7309lseb/g7D/amWP2rHWMWfnqbXaVcX78qqpUtb1qvce6OyBvOnM4tDT1Z7Ds\nVv2wI/r/b2i17/3qAoQQXfQfzWOSqQZ0vGDiW5TbL4Q4Vfu8uiFR1I6uuHe4ST1k\nsENu5/uIioN+rqcm9xQHMnqpdNW1zsmdAqu8ail4VCeG+xHYA5XVfqK61nKWhWDe\nPqf39Pmu0JrqhbwLnPu0NwHF5i8KeA8z7u7Q+hMn+ZCAlKC8VadUJNysNkJOAqs=\n=1O3T\n-----END PGP SIGNATURE-----\n", "payload": "tree 099e32b0fb1f94bef58d6d9a23d45d2e8b890ae1\nparent 557c1e36ddbb19cc76f7a1f04d1b327942aafcb9\nparent e3eeccf8ef2029bb54ba05af420a65b429763477\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1612020201 +0000\ncommitter GitHub <noreply@github.com> 1612020201 +0000\n\nMerge #7483\n\n7483: Classify function calls as functions when shadowed by types r=matklad a=Veykril\n\nFixes #7479\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f408ff50130eae0eb56e7f9668e9df39f7baa6dd", "html_url": "https://github.com/rust-lang/rust/commit/f408ff50130eae0eb56e7f9668e9df39f7baa6dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f408ff50130eae0eb56e7f9668e9df39f7baa6dd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "557c1e36ddbb19cc76f7a1f04d1b327942aafcb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/557c1e36ddbb19cc76f7a1f04d1b327942aafcb9", "html_url": "https://github.com/rust-lang/rust/commit/557c1e36ddbb19cc76f7a1f04d1b327942aafcb9"}, {"sha": "e3eeccf8ef2029bb54ba05af420a65b429763477", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3eeccf8ef2029bb54ba05af420a65b429763477", "html_url": "https://github.com/rust-lang/rust/commit/e3eeccf8ef2029bb54ba05af420a65b429763477"}], "stats": {"total": 86, "additions": 59, "deletions": 27}, "files": [{"sha": "626c3078a01edc070797670a26f993074833fa31", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 34, "deletions": 13, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f408ff50130eae0eb56e7f9668e9df39f7baa6dd/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f408ff50130eae0eb56e7f9668e9df39f7baa6dd/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=f408ff50130eae0eb56e7f9668e9df39f7baa6dd", "patch": "@@ -222,16 +222,19 @@ impl SourceAnalyzer {\n         db: &dyn HirDatabase,\n         path: &ast::Path,\n     ) -> Option<PathResolution> {\n+        let mut prefer_value_ns = false;\n         if let Some(path_expr) = path.syntax().parent().and_then(ast::PathExpr::cast) {\n             let expr_id = self.expr_id(db, &path_expr.into())?;\n-            if let Some(assoc) = self.infer.as_ref()?.assoc_resolutions_for_expr(expr_id) {\n+            let infer = self.infer.as_ref()?;\n+            if let Some(assoc) = infer.assoc_resolutions_for_expr(expr_id) {\n                 return Some(PathResolution::AssocItem(assoc.into()));\n             }\n             if let Some(VariantId::EnumVariantId(variant)) =\n-                self.infer.as_ref()?.variant_resolution_for_expr(expr_id)\n+                infer.variant_resolution_for_expr(expr_id)\n             {\n                 return Some(PathResolution::Def(ModuleDef::Variant(variant.into())));\n             }\n+            prefer_value_ns = true;\n         }\n \n         if let Some(path_pat) = path.syntax().parent().and_then(ast::PathPat::cast) {\n@@ -277,7 +280,7 @@ impl SourceAnalyzer {\n             }\n         }\n \n-        resolve_hir_path(db, &self.resolver, &hir_path)\n+        resolve_hir_path_(db, &self.resolver, &hir_path, prefer_value_ns)\n     }\n \n     pub(crate) fn record_literal_missing_fields(\n@@ -447,12 +450,22 @@ fn adjust(\n         .map(|(_ptr, scope)| *scope)\n }\n \n+#[inline]\n pub(crate) fn resolve_hir_path(\n     db: &dyn HirDatabase,\n     resolver: &Resolver,\n     path: &Path,\n ) -> Option<PathResolution> {\n-    let types =\n+    resolve_hir_path_(db, resolver, path, false)\n+}\n+\n+fn resolve_hir_path_(\n+    db: &dyn HirDatabase,\n+    resolver: &Resolver,\n+    path: &Path,\n+    prefer_value_ns: bool,\n+) -> Option<PathResolution> {\n+    let types = || {\n         resolver.resolve_path_in_type_ns_fully(db.upcast(), path.mod_path()).map(|ty| match ty {\n             TypeNs::SelfType(it) => PathResolution::SelfType(it.into()),\n             TypeNs::GenericParam(id) => PathResolution::TypeParam(TypeParam { id }),\n@@ -463,10 +476,11 @@ pub(crate) fn resolve_hir_path(\n             TypeNs::TypeAliasId(it) => PathResolution::Def(TypeAlias::from(it).into()),\n             TypeNs::BuiltinType(it) => PathResolution::Def(it.into()),\n             TypeNs::TraitId(it) => PathResolution::Def(Trait::from(it).into()),\n-        });\n+        })\n+    };\n \n     let body_owner = resolver.body_owner();\n-    let values =\n+    let values = || {\n         resolver.resolve_path_in_value_ns_fully(db.upcast(), path.mod_path()).and_then(|val| {\n             let res = match val {\n                 ValueNs::LocalBinding(pat_id) => {\n@@ -482,18 +496,25 @@ pub(crate) fn resolve_hir_path(\n                 ValueNs::GenericParam(it) => PathResolution::ConstParam(it.into()),\n             };\n             Some(res)\n-        });\n+        })\n+    };\n \n-    let items = resolver\n-        .resolve_module_path_in_items(db.upcast(), path.mod_path())\n-        .take_types()\n-        .map(|it| PathResolution::Def(it.into()));\n+    let items = || {\n+        resolver\n+            .resolve_module_path_in_items(db.upcast(), path.mod_path())\n+            .take_types()\n+            .map(|it| PathResolution::Def(it.into()))\n+    };\n \n-    types.or(values).or(items).or_else(|| {\n+    let macros = || {\n         resolver\n             .resolve_path_as_macro(db.upcast(), path.mod_path())\n             .map(|def| PathResolution::Macro(def.into()))\n-    })\n+    };\n+\n+    if prefer_value_ns { values().or_else(types) } else { types().or_else(values) }\n+        .or_else(items)\n+        .or_else(macros)\n }\n \n /// Resolves a path where we know it is a qualifier of another path."}, {"sha": "9c506112da2c5f32f96f19a53d9b9dcf21cb364a", "filename": "crates/hir_ty/src/diagnostics/unsafe_check.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f408ff50130eae0eb56e7f9668e9df39f7baa6dd/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f408ff50130eae0eb56e7f9668e9df39f7baa6dd/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs?ref=f408ff50130eae0eb56e7f9668e9df39f7baa6dd", "patch": "@@ -12,8 +12,7 @@ use hir_def::{\n use hir_expand::diagnostics::DiagnosticSink;\n \n use crate::{\n-    db::HirDatabase, diagnostics::MissingUnsafe, lower::CallableDefId, ApplicationTy,\n-    InferenceResult, Ty, TypeCtor,\n+    db::HirDatabase, diagnostics::MissingUnsafe, ApplicationTy, InferenceResult, Ty, TypeCtor,\n };\n \n pub(super) struct UnsafeValidator<'a, 'b: 'a> {\n@@ -87,13 +86,8 @@ fn walk_unsafe(\n ) {\n     let expr = &body.exprs[current];\n     match expr {\n-        Expr::Call { callee, .. } => {\n-            let ty = &infer[*callee];\n-            if let &Ty::Apply(ApplicationTy {\n-                ctor: TypeCtor::FnDef(CallableDefId::FunctionId(func)),\n-                ..\n-            }) = ty\n-            {\n+        &Expr::Call { callee, .. } => {\n+            if let Some(func) = infer[callee].as_fn_def() {\n                 if db.function_data(func).is_unsafe {\n                     unsafe_exprs.push(UnsafeExpr { expr: current, inside_unsafe_block });\n                 }"}, {"sha": "6bec389f83ebed638935ca96294135bed7cc4c06", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f408ff50130eae0eb56e7f9668e9df39f7baa6dd/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f408ff50130eae0eb56e7f9668e9df39f7baa6dd/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=f408ff50130eae0eb56e7f9668e9df39f7baa6dd", "patch": "@@ -29,8 +29,8 @@ use base_db::{salsa, CrateId};\n use hir_def::{\n     expr::ExprId,\n     type_ref::{Mutability, Rawness},\n-    AdtId, AssocContainerId, DefWithBodyId, GenericDefId, HasModule, LifetimeParamId, Lookup,\n-    TraitId, TypeAliasId, TypeParamId,\n+    AdtId, AssocContainerId, DefWithBodyId, FunctionId, GenericDefId, HasModule, LifetimeParamId,\n+    Lookup, TraitId, TypeAliasId, TypeParamId,\n };\n use itertools::Itertools;\n \n@@ -43,10 +43,9 @@ use crate::{\n \n pub use autoderef::autoderef;\n pub use infer::{InferTy, InferenceResult};\n-pub use lower::CallableDefId;\n pub use lower::{\n-    associated_type_shorthand_candidates, callable_item_sig, ImplTraitLoweringMode, TyDefId,\n-    TyLoweringContext, ValueTyDefId,\n+    associated_type_shorthand_candidates, callable_item_sig, CallableDefId, ImplTraitLoweringMode,\n+    TyDefId, TyLoweringContext, ValueTyDefId,\n };\n pub use traits::{InEnvironment, Obligation, ProjectionPredicate, TraitEnvironment};\n \n@@ -824,6 +823,16 @@ impl Ty {\n         }\n     }\n \n+    pub fn as_fn_def(&self) -> Option<FunctionId> {\n+        match self {\n+            &Ty::Apply(ApplicationTy {\n+                ctor: TypeCtor::FnDef(CallableDefId::FunctionId(func)),\n+                ..\n+            }) => Some(func),\n+            _ => None,\n+        }\n+    }\n+\n     pub fn callable_sig(&self, db: &dyn HirDatabase) -> Option<FnSig> {\n         match self {\n             Ty::Apply(a_ty) => match a_ty.ctor {"}, {"sha": "2f983c0b8a1977263c92f612083f31f6c075fb51", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f408ff50130eae0eb56e7f9668e9df39f7baa6dd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/f408ff50130eae0eb56e7f9668e9df39f7baa6dd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=f408ff50130eae0eb56e7f9668e9df39f7baa6dd", "patch": "@@ -108,6 +108,10 @@\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">str</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"function\">str</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+<span class=\"brace\">}</span>\n+\n <span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> <span class=\"static declaration mutable unsafe\">STATIC_MUT</span><span class=\"colon\">:</span> <span class=\"builtin_type\">i32</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"semicolon\">;</span>\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span><span class=\"angle\">&lt;</span><span class=\"lifetime declaration\">'a</span><span class=\"comma\">,</span> <span class=\"type_param declaration\">T</span><span class=\"angle\">&gt;</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"type_param\">T</span> <span class=\"brace\">{</span>"}, {"sha": "1854da914213ec4d59828982ce5cd15d8ae1436b", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f408ff50130eae0eb56e7f9668e9df39f7baa6dd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f408ff50130eae0eb56e7f9668e9df39f7baa6dd/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=f408ff50130eae0eb56e7f9668e9df39f7baa6dd", "patch": "@@ -81,6 +81,10 @@ impl FooCopy {\n     }\n }\n \n+fn str() {\n+    str();\n+}\n+\n static mut STATIC_MUT: i32 = 0;\n \n fn foo<'a, T>() -> T {"}]}