{"sha": "d932812134ff28d00a0c98791926b11d1fd2025a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MzI4MTIxMzRmZjI4ZDAwYTBjOTg3OTE5MjZiMTFkMWZkMjAyNWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-02-10T08:26:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-02-10T08:26:48Z"}, "message": "Use track caller in test documentation", "tree": {"sha": "7ca2ae395294da69c98f6809e3f90396d7b52a0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ca2ae395294da69c98f6809e3f90396d7b52a0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d932812134ff28d00a0c98791926b11d1fd2025a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d932812134ff28d00a0c98791926b11d1fd2025a", "html_url": "https://github.com/rust-lang/rust/commit/d932812134ff28d00a0c98791926b11d1fd2025a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d932812134ff28d00a0c98791926b11d1fd2025a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36465b34b3b7f991ebf85680924acdb809b0494e", "url": "https://api.github.com/repos/rust-lang/rust/commits/36465b34b3b7f991ebf85680924acdb809b0494e", "html_url": "https://github.com/rust-lang/rust/commit/36465b34b3b7f991ebf85680924acdb809b0494e"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "081ee5b9d9055b3c381f53dbdc508806352f24be", "filename": "docs/dev/architecture.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d932812134ff28d00a0c98791926b11d1fd2025a/docs%2Fdev%2Farchitecture.md", "raw_url": "https://github.com/rust-lang/rust/raw/d932812134ff28d00a0c98791926b11d1fd2025a/docs%2Fdev%2Farchitecture.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Farchitecture.md?ref=d932812134ff28d00a0c98791926b11d1fd2025a", "patch": "@@ -372,11 +372,11 @@ Tests which directly call various API functions are a liability, because they ma\n So most of the tests look like this:\n \n ```rust\n+#[track_caller]\n fn check(input: &str, expect: expect_test::Expect) {\n     // The single place that actually exercises a particular API\n }\n \n-\n #[test]\n fn foo() {\n     check(\"foo\", expect![[\"bar\"]]);"}]}