{"sha": "837029fec146b4eb7af4dae3f002b00306af00db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNzAyOWZlYzE0NmI0ZWI3YWY0ZGFlM2YwMDJiMDAzMDZhZjAwZGI=", "commit": {"author": {"name": "M Farkas-Dyck", "email": "mfdyck@google.com", "date": "2016-05-27T16:16:27Z"}, "committer": {"name": "M Farkas-Dyck", "email": "mfdyck@google.com", "date": "2016-07-14T01:40:16Z"}, "message": "add core::char::DecodeUtf8", "tree": {"sha": "d7a90d713528de58ee67a2956fead015ec8b0155", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7a90d713528de58ee67a2956fead015ec8b0155"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/837029fec146b4eb7af4dae3f002b00306af00db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/837029fec146b4eb7af4dae3f002b00306af00db", "html_url": "https://github.com/rust-lang/rust/commit/837029fec146b4eb7af4dae3f002b00306af00db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/837029fec146b4eb7af4dae3f002b00306af00db/comments", "author": null, "committer": null, "parents": [{"sha": "fe96928d7de991e527a7ed7b88bb30aa965c8a08", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe96928d7de991e527a7ed7b88bb30aa965c8a08", "html_url": "https://github.com/rust-lang/rust/commit/fe96928d7de991e527a7ed7b88bb30aa965c8a08"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "0e7f04c775825224cb8defe7af3b02b7681cbb3a", "filename": "src/libcore/char.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/837029fec146b4eb7af4dae3f002b00306af00db/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837029fec146b4eb7af4dae3f002b00306af00db/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=837029fec146b4eb7af4dae3f002b00306af00db", "patch": "@@ -676,3 +676,50 @@ impl Iterator for EncodeUtf16 {\n         self.as_slice().iter().size_hint()\n     }\n }\n+\n+\n+/// An iterator over an iterator of bytes of the characters the bytes represent\n+/// as UTF-8\n+#[unstable(feature = \"decode_utf8\", issue = \"33906\")]\n+#[derive(Clone, Debug)]\n+pub struct DecodeUtf8<I: Iterator<Item = u8>>(::iter::Peekable<I>);\n+\n+/// Decodes an `Iterator` of bytes as UTF-8.\n+#[unstable(feature = \"decode_utf8\", issue = \"33906\")]\n+#[inline]\n+pub fn decode_utf8<I: IntoIterator<Item = u8>>(i: I) -> DecodeUtf8<I::IntoIter> {\n+    DecodeUtf8(i.into_iter().peekable())\n+}\n+\n+/// `<DecodeUtf8 as Iterator>::next` returns this for an invalid input sequence.\n+#[unstable(feature = \"decode_utf8\", issue = \"33906\")]\n+#[derive(PartialEq, Debug)]\n+pub struct InvalidSequence(());\n+\n+#[unstable(feature = \"decode_utf8\", issue = \"33906\")]\n+impl<I: Iterator<Item = u8>> Iterator for DecodeUtf8<I> {\n+    type Item = Result<char, InvalidSequence>;\n+    #[inline]\n+    fn next(&mut self) -> Option<Result<char, InvalidSequence>> {\n+        self.0.next().map(|b| {\n+            if b & 0x80 == 0 { Ok(b as char) } else {\n+                let l = (!b).leading_zeros() as usize; // number of bytes in UTF-8 representation\n+                if l < 2 || l > 6 { return Err(InvalidSequence(())) };\n+                let mut x = (b as u32) & (0x7F >> l);\n+                for _ in 0..l-1 {\n+                    match self.0.peek() {\n+                        Some(&b) if b & 0xC0 == 0x80 => {\n+                            self.0.next();\n+                            x = (x << 6) | (b as u32) & 0x3F;\n+                        },\n+                        _ => return Err(InvalidSequence(())),\n+                    }\n+                }\n+                match from_u32(x) {\n+                    Some(x) if l == x.len_utf8() => Ok(x),\n+                    _ => Err(InvalidSequence(())),\n+                }\n+            }\n+        })\n+    }\n+}"}, {"sha": "c8906fed3d2fa28bca17d60c8819c0f9c72c54ee", "filename": "src/libcoretest/char.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/837029fec146b4eb7af4dae3f002b00306af00db/src%2Flibcoretest%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837029fec146b4eb7af4dae3f002b00306af00db/src%2Flibcoretest%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fchar.rs?ref=837029fec146b4eb7af4dae3f002b00306af00db", "patch": "@@ -302,3 +302,32 @@ fn eu_iterator_specializations() {\n     check('\\u{12340}');\n     check('\\u{10FFFF}');\n }\n+\n+#[test]\n+fn test_decode_utf8() {\n+    use core::char::*;\n+    use core::iter::FromIterator;\n+\n+    for &(str, bs) in [(\"\", &[] as &[u8]),\n+                       (\"A\", &[0x41u8] as &[u8]),\n+                       (\"\ufffd\", &[0xC1u8, 0x81u8] as &[u8]),\n+                       (\"\u2665\", &[0xE2u8, 0x99u8, 0xA5u8]),\n+                       (\"\u2665A\", &[0xE2u8, 0x99u8, 0xA5u8, 0x41u8] as &[u8]),\n+                       (\"\ufffd\", &[0xE2u8, 0x99u8] as &[u8]),\n+                       (\"\ufffdA\", &[0xE2u8, 0x99u8, 0x41u8] as &[u8]),\n+                       (\"\ufffd\", &[0xC0u8] as &[u8]),\n+                       (\"\ufffdA\", &[0xC0u8, 0x41u8] as &[u8]),\n+                       (\"\ufffd\", &[0x80u8] as &[u8]),\n+                       (\"\ufffdA\", &[0x80u8, 0x41u8] as &[u8]),\n+                       (\"\ufffd\", &[0xFEu8] as &[u8]),\n+                       (\"\ufffdA\", &[0xFEu8, 0x41u8] as &[u8]),\n+                       (\"\ufffd\", &[0xFFu8] as &[u8]),\n+                       (\"\ufffdA\", &[0xFFu8, 0x41u8] as &[u8])].into_iter() {\n+        assert!(Iterator::eq(str.chars(),\n+                             decode_utf8(bs.into_iter().map(|&b|b))\n+                                 .map(|r_b| r_b.unwrap_or('\\u{FFFD}'))),\n+                \"chars = {}, bytes = {:?}, decoded = {:?}\", str, bs,\n+                Vec::from_iter(decode_utf8(bs.into_iter().map(|&b|b))\n+                                   .map(|r_b| r_b.unwrap_or('\\u{FFFD}'))));\n+    }\n+}"}, {"sha": "d46dcdb51e85e90baa89b8409aa102976b829185", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/837029fec146b4eb7af4dae3f002b00306af00db/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837029fec146b4eb7af4dae3f002b00306af00db/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=837029fec146b4eb7af4dae3f002b00306af00db", "patch": "@@ -18,6 +18,7 @@\n #![feature(core_private_bignum)]\n #![feature(core_private_diy_float)]\n #![feature(dec2flt)]\n+#![feature(decode_utf8)]\n #![feature(fixed_size_array)]\n #![feature(float_extras)]\n #![feature(flt2dec)]"}, {"sha": "b1ec96238be7850648b5d2b539208ef27c74a9c2", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837029fec146b4eb7af4dae3f002b00306af00db/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837029fec146b4eb7af4dae3f002b00306af00db/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=837029fec146b4eb7af4dae3f002b00306af00db", "patch": "@@ -39,6 +39,8 @@ pub use core::char::{MAX, from_digit, from_u32, from_u32_unchecked};\n pub use core::char::{EncodeUtf16, EncodeUtf8, EscapeDefault, EscapeUnicode};\n \n // unstable reexports\n+#[unstable(feature = \"decode_utf8\", issue = \"33906\")]\n+pub use core::char::{DecodeUtf8, decode_utf8};\n #[unstable(feature = \"unicode\", issue = \"27783\")]\n pub use tables::UNICODE_VERSION;\n "}, {"sha": "f91a754ab57db3a71359a6b279fe0afc66a82cea", "filename": "src/librustc_unicode/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/837029fec146b4eb7af4dae3f002b00306af00db/src%2Flibrustc_unicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837029fec146b4eb7af4dae3f002b00306af00db/src%2Flibrustc_unicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Flib.rs?ref=837029fec146b4eb7af4dae3f002b00306af00db", "patch": "@@ -33,6 +33,7 @@\n #![no_std]\n \n #![feature(core_char_ext)]\n+#![feature(decode_utf8)]\n #![feature(lang_items)]\n #![feature(staged_api)]\n #![feature(unicode)]"}]}