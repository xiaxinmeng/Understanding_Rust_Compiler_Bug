{"sha": "e1d47cd5f1c8158671d4ae766235afd8a58783cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZDQ3Y2Q1ZjFjODE1ODY3MWQ0YWU3NjYyMzVhZmQ4YTU4NzgzY2I=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-03-07T06:42:38Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-03-07T07:17:43Z"}, "message": "Refactor: Extract `trait_ref_of_method` function", "tree": {"sha": "896490a1731c2a48fccc3fef554801df920ea756", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/896490a1731c2a48fccc3fef554801df920ea756"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1d47cd5f1c8158671d4ae766235afd8a58783cb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlyAxZgACgkQtvoGpuDi\nZlu7jBAAlWt2gIHd2o8kWu2JbiI/x+6KYd5pFgkP0DzW6rqcZABi1ha0hwne7pIY\nwawGq8OW3C0ucOgHrvHYoIsye6vIdl7HfWXDfjmSyWRMB8FehtucjPOkGh2E+CIi\ncww8SLbxWWnhEXSeV1ZeB7luJvZFJt3hIF9st+ChSgrFyH8MRQoAkJFYk/QLuW6N\nquJ8/xL9Sd5yiHu5ylmphgTLsHZTDHifLWVY4diYWIio9oKm2uhX7nPh42ClY1IB\nleQz8cP+AH8S7HR013J/+u5ApG8hlJgXkJne3CP4gqqEo8Szz0ibHawjo+iChAEq\nHKHOjjfd03vWICXEll28v7hknjCZJzXeO17wbTmjO5Ym+sTMmbaGC6RZhnpFbBse\ngwyzsOpzR235jdj6BxnG1B6t3gOcC7Z2S2Tkac0hXfkaeBJN/1e8CdUia6PimRMd\nlF2wKq8nzruyLw8OKqG7NOa7U3nW8hIrbWHGHY03zWfbh7heAN9eTmvVmWWGt9Mi\nM04vNWAArHMEwhscdPODQZ0yQ29WCbGZqec5Nlzy82zp5B5O0aSbwOPHKDQ9FwK5\nnIlZaPpXrBR/W/A7873mTe6vHG7lmh+lvsyZkqXR+3hYBK18LpsKcCHxpfVqiacO\nZ6JX1/DoR9opDL5Z/kSsVNSq9NWX2njXOwTao+1Qp9QhVwJ3kX8=\n=+dAt\n-----END PGP SIGNATURE-----", "payload": "tree 896490a1731c2a48fccc3fef554801df920ea756\nparent 00baf7a1118f4b8332a47f68e8bebbac963a5dcb\nauthor Philipp Hansch <dev@phansch.net> 1551940958 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1551943063 +0100\n\nRefactor: Extract `trait_ref_of_method` function\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d47cd5f1c8158671d4ae766235afd8a58783cb", "html_url": "https://github.com/rust-lang/rust/commit/e1d47cd5f1c8158671d4ae766235afd8a58783cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1d47cd5f1c8158671d4ae766235afd8a58783cb/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/00baf7a1118f4b8332a47f68e8bebbac963a5dcb", "html_url": "https://github.com/rust-lang/rust/commit/00baf7a1118f4b8332a47f68e8bebbac963a5dcb"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "b0bf250023d4e9c93a314888f715ebf39a3894e3", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e1d47cd5f1c8158671d4ae766235afd8a58783cb/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d47cd5f1c8158671d4ae766235afd8a58783cb/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=e1d47cd5f1c8158671d4ae766235afd8a58783cb", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{get_trait_def_id, implements_trait, snippet_opt, span_lint_and_then, SpanlessEq};\n+use crate::utils::{get_trait_def_id, implements_trait, snippet_opt, span_lint_and_then, trait_ref_of_method, SpanlessEq};\n use crate::utils::{higher, sugg};\n use if_chain::if_chain;\n use rustc::hir;\n@@ -140,13 +140,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                                         };\n                                         // check that we are not inside an `impl AssignOp` of this exact operation\n                                         let parent_fn = cx.tcx.hir().get_parent_item(e.hir_id);\n-                                        let parent_impl = cx.tcx.hir().get_parent_item(parent_fn);\n-                                        // the crate node is the only one that is not in the map\n                                         if_chain! {\n-                                            if parent_impl != hir::CRATE_HIR_ID;\n-                                            if let hir::Node::Item(item) = cx.tcx.hir().get_by_hir_id(parent_impl);\n-                                            if let hir::ItemKind::Impl(_, _, _, _, Some(trait_ref), _, _) =\n-                                                &item.node;\n+                                            if let Some(trait_ref) = trait_ref_of_method(cx, parent_fn);\n                                             if trait_ref.path.def.def_id() == trait_id;\n                                             then { return; }\n                                         }"}, {"sha": "5bc949a6688adff8625961945e514363f92608ab", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e1d47cd5f1c8158671d4ae766235afd8a58783cb/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d47cd5f1c8158671d4ae766235afd8a58783cb/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=e1d47cd5f1c8158671d4ae766235afd8a58783cb", "patch": "@@ -1,5 +1,4 @@\n-use crate::utils::{is_entrypoint_fn, span_lint};\n-use if_chain::if_chain;\n+use crate::utils::{is_entrypoint_fn, span_lint, trait_ref_of_method};\n use rustc::hir;\n use rustc::hir::intravisit::FnKind;\n use rustc::hir::{Body, Constness, FnDecl, HirId};\n@@ -96,7 +95,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n                 }\n             },\n             FnKind::Method(_, sig, ..) => {\n-                if is_trait_method(cx, hir_id) || already_const(sig.header) {\n+                if trait_ref_of_method(cx, hir_id).is_some() || already_const(sig.header) {\n                     return;\n                 }\n             },\n@@ -115,18 +114,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n     }\n }\n \n-fn is_trait_method(cx: &LateContext<'_, '_>, hir_id: HirId) -> bool {\n-    // Get the implemented trait for the current function\n-    let parent_impl = cx.tcx.hir().get_parent_item(hir_id);\n-    if_chain! {\n-        if parent_impl != hir::CRATE_HIR_ID;\n-        if let hir::Node::Item(item) = cx.tcx.hir().get_by_hir_id(parent_impl);\n-        if let hir::ItemKind::Impl(_, _, _, _, Some(_trait_ref), _, _) = &item.node;\n-        then { return true; }\n-    }\n-    false\n-}\n-\n // We don't have to lint on something that's already `const`\n fn already_const(header: hir::FnHeader) -> bool {\n     header.constness == Constness::Const"}, {"sha": "76ca1dc284827f8db4ecec3527637e976f942c29", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1d47cd5f1c8158671d4ae766235afd8a58783cb/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d47cd5f1c8158671d4ae766235afd8a58783cb/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=e1d47cd5f1c8158671d4ae766235afd8a58783cb", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{get_trait_def_id, span_lint};\n+use crate::utils::{get_trait_def_id, span_lint, trait_ref_of_method};\n use if_chain::if_chain;\n use rustc::hir;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n@@ -177,12 +177,9 @@ fn check_binop<'a>(\n \n     // Get the actually implemented trait\n     let parent_fn = cx.tcx.hir().get_parent_item(expr.hir_id);\n-    let parent_impl = cx.tcx.hir().get_parent_item(parent_fn);\n \n     if_chain! {\n-        if parent_impl != hir::CRATE_HIR_ID;\n-        if let hir::Node::Item(item) = cx.tcx.hir().get_by_hir_id(parent_impl);\n-        if let hir::ItemKind::Impl(_, _, _, _, Some(ref trait_ref), _, _) = item.node;\n+        if let Some(trait_ref) = trait_ref_of_method(cx, parent_fn);\n         if let Some(idx) = trait_ids.iter().position(|&tid| tid == trait_ref.path.def.def_id());\n         if binop != expected_ops[idx];\n         then{"}, {"sha": "6713f47690a14ae5cf85d348138783068e86cb3d", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e1d47cd5f1c8158671d4ae766235afd8a58783cb/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d47cd5f1c8158671d4ae766235afd8a58783cb/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=e1d47cd5f1c8158671d4ae766235afd8a58783cb", "patch": "@@ -301,6 +301,27 @@ pub fn implements_trait<'a, 'tcx>(\n         .enter(|infcx| infcx.predicate_must_hold_modulo_regions(&obligation))\n }\n \n+/// Get the `hir::TraitRef` of the trait the given method is implemented for\n+///\n+/// Use this if you want to find the `TraitRef` of the `Point` trait in this example:\n+///\n+/// ```rust\n+/// trait Point;\n+///\n+/// impl std::ops::Add for Point {}\n+/// ```\n+pub fn trait_ref_of_method(cx: &LateContext<'_, '_>, hir_id: HirId) -> Option<TraitRef> {\n+    // Get the implemented trait for the current function\n+    let parent_impl = cx.tcx.hir().get_parent_item(hir_id);\n+    if_chain! {\n+        if parent_impl != hir::CRATE_HIR_ID;\n+        if let hir::Node::Item(item) = cx.tcx.hir().get_by_hir_id(parent_impl);\n+        if let hir::ItemKind::Impl(_, _, _, _, trait_ref, _, _) = &item.node;\n+        then { return trait_ref.clone(); }\n+    }\n+    None\n+}\n+\n /// Check whether this type implements Drop.\n pub fn has_drop<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n     match ty.ty_adt_def() {"}]}