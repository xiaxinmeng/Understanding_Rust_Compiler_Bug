{"sha": "45673e2d443a7bc02469281c138b833c4d12528e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NjczZTJkNDQzYTdiYzAyNDY5MjgxYzEzOGI4MzNjNGQxMjUyOGU=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-02-22T01:52:23Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-02-22T02:45:56Z"}, "message": "rustdoc: Remove `fake_def_ids` RefCell", "tree": {"sha": "a14ee049b1ade24aa57b05b53ea007c79a1244dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a14ee049b1ade24aa57b05b53ea007c79a1244dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45673e2d443a7bc02469281c138b833c4d12528e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45673e2d443a7bc02469281c138b833c4d12528e", "html_url": "https://github.com/rust-lang/rust/commit/45673e2d443a7bc02469281c138b833c4d12528e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45673e2d443a7bc02469281c138b833c4d12528e/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e826bb11228508fbe749e594038d6727208aa94", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e826bb11228508fbe749e594038d6727208aa94", "html_url": "https://github.com/rust-lang/rust/commit/3e826bb11228508fbe749e594038d6727208aa94"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "1d249f1b913982f87f4da27ff6729de528d8327e", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45673e2d443a7bc02469281c138b833c4d12528e/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45673e2d443a7bc02469281c138b833c4d12528e/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=45673e2d443a7bc02469281c138b833c4d12528e", "patch": "@@ -67,7 +67,7 @@ crate struct DocContext<'tcx> {\n     crate ct_substs: RefCell<FxHashMap<DefId, clean::Constant>>,\n     /// Table synthetic type parameter for `impl Trait` in argument position -> bounds\n     crate impl_trait_bounds: RefCell<FxHashMap<ImplTraitParam, Vec<clean::GenericBound>>>,\n-    crate fake_def_ids: RefCell<FxHashMap<CrateNum, DefIndex>>,\n+    crate fake_def_ids: FxHashMap<CrateNum, DefIndex>,\n     /// Auto-trait or blanket impls processed so far, as `(self_ty, trait_def_id)`.\n     // FIXME(eddyb) make this a `ty::TraitRef<'tcx>` set.\n     crate generated_synthetics: RefCell<FxHashSet<(Ty<'tcx>, DefId)>>,\n@@ -140,16 +140,14 @@ impl<'tcx> DocContext<'tcx> {\n     /// [`RefCell`]: std::cell::RefCell\n     /// [`Debug`]: std::fmt::Debug\n     /// [`clean::Item`]: crate::clean::types::Item\n-    crate fn next_def_id(&self, crate_num: CrateNum) -> DefId {\n-        let mut fake_ids = self.fake_def_ids.borrow_mut();\n-\n-        let def_index = match fake_ids.entry(crate_num) {\n+    crate fn next_def_id(&mut self, crate_num: CrateNum) -> DefId {\n+        let def_index = match self.fake_def_ids.entry(crate_num) {\n             Entry::Vacant(e) => {\n                 let num_def_idx = {\n                     let num_def_idx = if crate_num == LOCAL_CRATE {\n                         self.tcx.hir().definitions().def_path_table().num_def_ids()\n                     } else {\n-                        self.enter_resolver(|r| r.cstore().num_def_ids(crate_num))\n+                        self.resolver.borrow_mut().access(|r| r.cstore().num_def_ids(crate_num))\n                     };\n \n                     DefIndex::from_usize(num_def_idx)"}]}