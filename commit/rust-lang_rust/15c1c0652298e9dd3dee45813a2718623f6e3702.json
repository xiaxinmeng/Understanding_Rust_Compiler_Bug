{"sha": "15c1c0652298e9dd3dee45813a2718623f6e3702", "node_id": "C_kwDOAAsO6NoAKDE1YzFjMDY1MjI5OGU5ZGQzZGVlNDU4MTNhMjcxODYyM2Y2ZTM3MDI", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-06-14T15:34:37Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-06-14T15:57:51Z"}, "message": "rebase", "tree": {"sha": "6581df2ee1f2078854db7ed00e98012b790a525a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6581df2ee1f2078854db7ed00e98012b790a525a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15c1c0652298e9dd3dee45813a2718623f6e3702", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15c1c0652298e9dd3dee45813a2718623f6e3702", "html_url": "https://github.com/rust-lang/rust/commit/15c1c0652298e9dd3dee45813a2718623f6e3702", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15c1c0652298e9dd3dee45813a2718623f6e3702/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e14b34c386ad2809e937e0e6e0379c5cc5474954", "url": "https://api.github.com/repos/rust-lang/rust/commits/e14b34c386ad2809e937e0e6e0379c5cc5474954", "html_url": "https://github.com/rust-lang/rust/commit/e14b34c386ad2809e937e0e6e0379c5cc5474954"}], "stats": {"total": 118, "additions": 36, "deletions": 82}, "files": [{"sha": "a1d2e5cf3ef1228f4754c0ab31672909f61a07ba", "filename": "compiler/rustc_const_eval/src/const_eval/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15c1c0652298e9dd3dee45813a2718623f6e3702/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c1c0652298e9dd3dee45813a2718623f6e3702/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs?ref=15c1c0652298e9dd3dee45813a2718623f6e3702", "patch": "@@ -97,7 +97,7 @@ pub(crate) fn try_destructure_const<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     const_: ty::Const<'tcx>,\n ) -> Option<ty::DestructuredConst<'tcx>> {\n-    if let ty::ConstKind::Value(valtree) = const_.val() {\n+    if let ty::ConstKind::Value(valtree) = const_.kind() {\n         let branches = match valtree {\n             ty::ValTree::Branch(b) => b,\n             _ => return None,\n@@ -216,7 +216,7 @@ pub(crate) fn deref_mir_constant<'tcx>(\n     let mplace = ecx.deref_operand(&op).unwrap();\n     if let Some(alloc_id) = mplace.ptr.provenance {\n         assert_eq!(\n-            tcx.get_global_alloc(alloc_id).unwrap().unwrap_memory().0 .0.mutability,\n+            tcx.get_global_alloc(alloc_id).unwrap().unwrap_memory().0.0.mutability,\n             Mutability::Not,\n             \"deref_mir_constant cannot be used with mutable allocations as \\\n             that could allow pattern matching to observe mutable statics\","}, {"sha": "6b05a49575fd9e2cf1279a6aea7797351417bec4", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15c1c0652298e9dd3dee45813a2718623f6e3702/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c1c0652298e9dd3dee45813a2718623f6e3702/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=15c1c0652298e9dd3dee45813a2718623f6e3702", "patch": "@@ -638,7 +638,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 span_bug!(self.cur_span(), \"const_to_op: Unexpected ConstKind {:?}\", c)\n             }\n             ty::ConstKind::Value(valtree) => {\n-                let ty = val.ty();\n+                let ty = c.ty();\n                 let const_val = self.tcx.valtree_to_const_val((ty, valtree));\n                 self.const_val_to_op(const_val, ty, layout)\n             }"}, {"sha": "c173d453041baf0c0549141e9592e2a951a32006", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/15c1c0652298e9dd3dee45813a2718623f6e3702/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c1c0652298e9dd3dee45813a2718623f6e3702/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=15c1c0652298e9dd3dee45813a2718623f6e3702", "patch": "@@ -1446,11 +1446,7 @@ impl<'tcx> BasicBlockData<'tcx> {\n     }\n \n     pub fn visitable(&self, index: usize) -> &dyn MirVisitable<'tcx> {\n-        if index < self.statements.len() {\n-            &self.statements[index]\n-        } else {\n-            &self.terminator\n-        }\n+        if index < self.statements.len() { &self.statements[index] } else { &self.terminator }\n     }\n }\n \n@@ -2471,11 +2467,7 @@ impl<'tcx> Operand<'tcx> {\n     /// find as the `func` in a [`TerminatorKind::Call`].\n     pub fn const_fn_def(&self) -> Option<(DefId, SubstsRef<'tcx>)> {\n         let const_ty = self.constant()?.literal.ty();\n-        if let ty::FnDef(def_id, substs) = *const_ty.kind() {\n-            Some((def_id, substs))\n-        } else {\n-            None\n-        }\n+        if let ty::FnDef(def_id, substs) = *const_ty.kind() { Some((def_id, substs)) } else { None }\n     }\n }\n \n@@ -2995,7 +2987,7 @@ impl<'tcx> ConstantKind<'tcx> {\n     #[inline]\n     pub fn try_to_scalar(self) -> Option<Scalar> {\n         match self {\n-            ConstantKind::Ty(c) => match c.val() {\n+            ConstantKind::Ty(c) => match c.kind() {\n                 ty::ConstKind::Value(valtree) => match valtree {\n                     ty::ValTree::Leaf(scalar_int) => Some(Scalar::Int(scalar_int)),\n                     ty::ValTree::Branch(_) => None,\n@@ -3291,7 +3283,7 @@ impl<'tcx> ConstantKind<'tcx> {\n     }\n \n     pub fn from_const(c: ty::Const<'tcx>, tcx: TyCtxt<'tcx>) -> Self {\n-        match c.val() {\n+        match c.kind() {\n             ty::ConstKind::Value(valtree) => {\n                 let const_val = tcx.valtree_to_const_val((c.ty(), valtree));\n                 Self::Val(const_val, c.ty())\n@@ -3587,7 +3579,7 @@ fn pretty_print_const_value<'tcx>(\n                 }\n             }\n             (ConstValue::ByRef { alloc, offset }, ty::Array(t, n)) if *t == u8_type => {\n-                let n = n.val().try_to_bits(tcx.data_layout.pointer_size).unwrap();\n+                let n = n.kind().try_to_bits(tcx.data_layout.pointer_size).unwrap();\n                 // cast is ok because we already checked for pointer size (32 or 64 bit) above\n                 let range = AllocRange { start: offset, size: Size::from_bytes(n) };\n                 let byte_str = alloc.inner().get_bytes(&tcx, range).unwrap();"}, {"sha": "462c0ada3cf87c2526821c7251ba2cc6e77d63df", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15c1c0652298e9dd3dee45813a2718623f6e3702/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c1c0652298e9dd3dee45813a2718623f6e3702/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=15c1c0652298e9dd3dee45813a2718623f6e3702", "patch": "@@ -484,7 +484,7 @@ impl<'tcx> Visitor<'tcx> for ExtraComments<'tcx> {\n             // This reflects what `Const` looked liked before `val` was renamed\n             // as `kind`. We print it like this to avoid having to update\n             // expected output in a lot of tests.\n-            self.push(&format!(\"+ literal: Const {{ ty: {}, val: {} }}\", literal.ty(), kind));\n+            self.push(&format!(\"+ literal: Const {{ ty: {}, val: {} }}\", literal.ty(), val));\n         }\n     }\n "}, {"sha": "bc52259b151d1c6dcbc8c03cb1ed0a11bdd74997", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15c1c0652298e9dd3dee45813a2718623f6e3702/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c1c0652298e9dd3dee45813a2718623f6e3702/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=15c1c0652298e9dd3dee45813a2718623f6e3702", "patch": "@@ -201,7 +201,7 @@ impl<'tcx> Const<'tcx> {\n \n     /// Panics if self.kind != ty::ConstKind::Value\n     pub fn to_valtree(self) -> ty::ValTree<'tcx> {\n-        match self.val() {\n+        match self.kind() {\n             ty::ConstKind::Value(valtree) => valtree,\n             _ => bug!(\"expected ConstKind::Value\"),\n         }\n@@ -286,7 +286,7 @@ impl<'tcx> Const<'tcx> {\n     /// Tries to evaluate the constant if it is `Unevaluated` and creates a ConstValue if the\n     /// evaluation succeeds. If it doesn't succeed, returns the unevaluated constant.\n     pub fn eval_for_mir(self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> ConstantKind<'tcx> {\n-        if let Some(val) = self.val().try_eval_for_mir(tcx, param_env) {\n+        if let Some(val) = self.kind().try_eval_for_mir(tcx, param_env) {\n             match val {\n                 Ok(const_val) => ConstantKind::from_value(const_val, self.ty()),\n                 Err(ErrorGuaranteed { .. }) => ConstantKind::Ty(tcx.const_error(self.ty())),"}, {"sha": "4cd25a616264fd3bedaaf1db7eef6c4007f5e581", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 19, "deletions": 45, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/15c1c0652298e9dd3dee45813a2718623f6e3702/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c1c0652298e9dd3dee45813a2718623f6e3702/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=15c1c0652298e9dd3dee45813a2718623f6e3702", "patch": "@@ -1186,7 +1186,11 @@ impl<'tcx> TyCtxt<'tcx> {\n             };\n             debug!(\"layout_scalar_valid_range: attr={:?}\", attr);\n             if let Some(\n-                &[ast::NestedMetaItem::Literal(ast::Lit { kind: ast::LitKind::Int(a, _), .. })],\n+                &[\n+                    ast::NestedMetaItem::Literal(ast::Lit {\n+                        kind: ast::LitKind::Int(a, _), ..\n+                    }),\n+                ],\n             ) = attr.meta_item_list().as_deref()\n             {\n                 Bound::Included(a)\n@@ -1659,7 +1663,7 @@ macro_rules! nop_lift {\n         impl<'a, 'tcx> Lift<'tcx> for $ty {\n             type Lifted = $lifted;\n             fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n-                if tcx.interners.$set.contains_pointer_to(&InternedInSet(&*self.0 .0)) {\n+                if tcx.interners.$set.contains_pointer_to(&InternedInSet(&*self.0.0)) {\n                     // SAFETY: `self` is interned and therefore valid\n                     // for the entire lifetime of the `TyCtxt`.\n                     Some(unsafe { mem::transmute(self) })\n@@ -2244,11 +2248,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// `*r == kind`.\n     #[inline]\n     pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {\n-        if *r == kind {\n-            r\n-        } else {\n-            self.mk_region(kind)\n-        }\n+        if *r == kind { r } else { self.mk_region(kind) }\n     }\n \n     #[allow(rustc::usage_of_ty_tykind)]\n@@ -2268,11 +2268,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         pred: Predicate<'tcx>,\n         binder: Binder<'tcx, PredicateKind<'tcx>>,\n     ) -> Predicate<'tcx> {\n-        if pred.kind() != binder {\n-            self.mk_predicate(binder)\n-        } else {\n-            pred\n-        }\n+        if pred.kind() != binder { self.mk_predicate(binder) } else { pred }\n     }\n \n     pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {\n@@ -2417,11 +2413,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_diverging_default(self) -> Ty<'tcx> {\n-        if self.features().never_type_fallback {\n-            self.types.never\n-        } else {\n-            self.types.unit\n-        }\n+        if self.features().never_type_fallback { self.types.never } else { self.types.unit }\n     }\n \n     #[inline]\n@@ -2572,9 +2564,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],\n     ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {\n         assert!(!eps.is_empty());\n-        assert!(eps\n-            .array_windows()\n-            .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder()) != Ordering::Greater));\n+        assert!(\n+            eps.array_windows()\n+                .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())\n+                    != Ordering::Greater)\n+        );\n         self._intern_poly_existential_predicates(eps)\n     }\n \n@@ -2607,49 +2601,29 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {\n-        if ts.is_empty() {\n-            List::empty()\n-        } else {\n-            self._intern_substs(ts)\n-        }\n+        if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }\n     }\n \n     pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {\n-        if ps.is_empty() {\n-            List::empty()\n-        } else {\n-            self._intern_projs(ps)\n-        }\n+        if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }\n     }\n \n     pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {\n-        if ts.is_empty() {\n-            List::empty()\n-        } else {\n-            self._intern_place_elems(ts)\n-        }\n+        if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }\n     }\n \n     pub fn intern_canonical_var_infos(\n         self,\n         ts: &[CanonicalVarInfo<'tcx>],\n     ) -> CanonicalVarInfos<'tcx> {\n-        if ts.is_empty() {\n-            List::empty()\n-        } else {\n-            self._intern_canonical_var_infos(ts)\n-        }\n+        if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }\n     }\n \n     pub fn intern_bound_variable_kinds(\n         self,\n         ts: &[ty::BoundVariableKind],\n     ) -> &'tcx List<ty::BoundVariableKind> {\n-        if ts.is_empty() {\n-            List::empty()\n-        } else {\n-            self._intern_bound_variable_kinds(ts)\n-        }\n+        if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }\n     }\n \n     pub fn mk_fn_sig<I>("}, {"sha": "58dab0f96aba576bc258b48e84e9fa67b258258e", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/15c1c0652298e9dd3dee45813a2718623f6e3702/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c1c0652298e9dd3dee45813a2718623f6e3702/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=15c1c0652298e9dd3dee45813a2718623f6e3702", "patch": "@@ -607,11 +607,7 @@ pub trait PrettyPrinter<'tcx>:\n                         }\n                     }\n                 } else {\n-                    if verbose {\n-                        p!(write(\"{:?}\", infer_ty))\n-                    } else {\n-                        p!(write(\"{}\", infer_ty))\n-                    }\n+                    if verbose { p!(write(\"{:?}\", infer_ty)) } else { p!(write(\"{}\", infer_ty)) }\n                 }\n             }\n             ty::Error(_) => p!(\"[type error]\"),\n@@ -1335,11 +1331,7 @@ pub trait PrettyPrinter<'tcx>:\n             ty::Uint(_) | ty::Int(_) => {\n                 let int =\n                     ConstInt::new(int, matches!(ty.kind(), ty::Int(_)), ty.is_ptr_sized_integral());\n-                if print_ty {\n-                    p!(write(\"{:#?}\", int))\n-                } else {\n-                    p!(write(\"{:?}\", int))\n-                }\n+                if print_ty { p!(write(\"{:#?}\", int)) } else { p!(write(\"{:?}\", int)) }\n             }\n             // Char\n             ty::Char if char::try_from(int).is_ok() => {\n@@ -2294,7 +2286,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n             type BreakTy = ();\n \n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-                trace!(\"address: {:p}\", r.0 .0);\n+                trace!(\"address: {:p}\", r.0.0);\n                 if let ty::ReLateBound(_, ty::BoundRegion { kind: ty::BrNamed(_, name), .. }) = *r {\n                     self.used_region_names.insert(name);\n                 } else if let ty::RePlaceholder(ty::PlaceholderRegion {"}, {"sha": "87b844ca759a56737912e2f572dfbfadc7171019", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15c1c0652298e9dd3dee45813a2718623f6e3702/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c1c0652298e9dd3dee45813a2718623f6e3702/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=15c1c0652298e9dd3dee45813a2718623f6e3702", "patch": "@@ -669,7 +669,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n                             .expect(\"tried to dereference on non-ptr type\")\n                             .ty;\n                         let dereferenced_const =\n-                            self.tcx.mk_const(ty::ConstS { val: ct.val(), ty: pointee_ty });\n+                            self.tcx.mk_const(ty::ConstS { kind: ct.kind(), ty: pointee_ty });\n                         self = dereferenced_const.print(self)?;\n                     }\n                 }"}, {"sha": "70d8fdae6514027430801b3bb62ba4f053a2bc72", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15c1c0652298e9dd3dee45813a2718623f6e3702/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c1c0652298e9dd3dee45813a2718623f6e3702/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=15c1c0652298e9dd3dee45813a2718623f6e3702", "patch": "@@ -407,7 +407,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                     let pred =\n                         ty::Binder::dummy(infcx.replace_bound_vars_with_placeholders(binder));\n                     ProcessResult::Changed(mk_pending(vec![\n-                        obligation.with(pred.to_predicate(self.selcx.tcx()))\n+                        obligation.with(pred.to_predicate(self.selcx.tcx())),\n                     ]))\n                 }\n                 ty::PredicateKind::TypeWellFormedFromEnv(..) => {"}, {"sha": "ee2c8da5a005df8f6e0c6ba14c48ebe9567c4e37", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15c1c0652298e9dd3dee45813a2718623f6e3702/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c1c0652298e9dd3dee45813a2718623f6e3702/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=15c1c0652298e9dd3dee45813a2718623f6e3702", "patch": "@@ -2578,11 +2578,7 @@ impl<'o, 'tcx> TraitObligationStackList<'o, 'tcx> {\n     }\n \n     fn depth(&self) -> usize {\n-        if let Some(head) = self.head {\n-            head.depth\n-        } else {\n-            0\n-        }\n+        if let Some(head) = self.head { head.depth } else { 0 }\n     }\n }\n "}]}