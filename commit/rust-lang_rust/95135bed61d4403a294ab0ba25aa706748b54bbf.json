{"sha": "95135bed61d4403a294ab0ba25aa706748b54bbf", "node_id": "C_kwDOAAsO6NoAKDk1MTM1YmVkNjFkNDQwM2EyOTRhYjBiYTI1YWE3MDY3NDhiNTRiYmY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-24T16:20:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-24T16:20:13Z"}, "message": "Rollup merge of #100906 - ChayimFriedman2:map-index-mut, r=davidtwco\n\nSuggest alternatives when trying to mutate a `HashMap`/`BTreeMap` via indexing\n\nThe error can be quite confusing to newcomers.\n\nFixes #100873.\n\nI'm not so sure about the message, open to wording suggestions.", "tree": {"sha": "50f53a3f918b3ab3b01c449103acbba0ca0e0da4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50f53a3f918b3ab3b01c449103acbba0ca0e0da4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95135bed61d4403a294ab0ba25aa706748b54bbf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjBk+9CRBK7hj4Ov3rIwAAo8kIAF/ZPBi+fsPWAJxiWB7heemb\nk0DhE3eupsvyzt54exB0THK3CamZI4obbmYJiYoFCP5nTVD2Wc/CAXodadHUf2ci\n90+7vvGmXkrZPTO71z67i9ac0QeXqcDvc+ZS9F68oJNIUK6XRjBzLgcoJP0/oeKf\nbfjbA0KnuV854ooyZtusZKZ9wV51i/SDgt/AXQ1k2cmTzff2Ztlu/YAqRAeZCu/L\nxd54dSLMRrgOv9u93KkXA35yQbZs7mZ2uBoWeKsMK/oHwkGPa3EIyOznuy1yuRlp\nx2IvqF/fCb1E5fO2x+UfhIPa2eTQW29mGZAFZ2XAc1vYngJVgo3VV89SYDr8/7E=\n=qwlX\n-----END PGP SIGNATURE-----\n", "payload": "tree 50f53a3f918b3ab3b01c449103acbba0ca0e0da4\nparent 1c0f60f904fbbee214b17306a8155079df01b2c4\nparent b0255a1849dea3e39ebd9089230a17446230c3d8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661358013 +0200\ncommitter GitHub <noreply@github.com> 1661358013 +0200\n\nRollup merge of #100906 - ChayimFriedman2:map-index-mut, r=davidtwco\n\nSuggest alternatives when trying to mutate a `HashMap`/`BTreeMap` via indexing\n\nThe error can be quite confusing to newcomers.\n\nFixes #100873.\n\nI'm not so sure about the message, open to wording suggestions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95135bed61d4403a294ab0ba25aa706748b54bbf", "html_url": "https://github.com/rust-lang/rust/commit/95135bed61d4403a294ab0ba25aa706748b54bbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95135bed61d4403a294ab0ba25aa706748b54bbf/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c0f60f904fbbee214b17306a8155079df01b2c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c0f60f904fbbee214b17306a8155079df01b2c4", "html_url": "https://github.com/rust-lang/rust/commit/1c0f60f904fbbee214b17306a8155079df01b2c4"}, {"sha": "b0255a1849dea3e39ebd9089230a17446230c3d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0255a1849dea3e39ebd9089230a17446230c3d8", "html_url": "https://github.com/rust-lang/rust/commit/b0255a1849dea3e39ebd9089230a17446230c3d8"}], "stats": {"total": 59, "additions": 57, "deletions": 2}, "files": [{"sha": "56721cc3f5c75a383d1338f3c8654c44ceb9e499", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/95135bed61d4403a294ab0ba25aa706748b54bbf/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95135bed61d4403a294ab0ba25aa706748b54bbf/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=95135bed61d4403a294ab0ba25aa706748b54bbf", "patch": "@@ -1,3 +1,4 @@\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::Node;\n use rustc_middle::hir::map::Map;\n@@ -12,12 +13,11 @@ use rustc_middle::{\n };\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::{kw, Symbol};\n-use rustc_span::{BytePos, Span};\n+use rustc_span::{sym, BytePos, Span};\n \n use crate::diagnostics::BorrowedContentSource;\n use crate::MirBorrowckCtxt;\n use rustc_const_eval::util::collect_writes::FindAssignments;\n-use rustc_errors::{Applicability, Diagnostic};\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub(crate) enum AccessKind {\n@@ -614,6 +614,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                             \"trait `IndexMut` is required to modify indexed content, \\\n                                 but it is not implemented for `{ty}`\",\n                         ));\n+                        self.suggest_map_index_mut_alternatives(ty, &mut err);\n                     }\n                     _ => (),\n                 }\n@@ -627,6 +628,20 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         self.buffer_error(err);\n     }\n \n+    fn suggest_map_index_mut_alternatives(\n+        &self,\n+        ty: Ty<'_>,\n+        err: &mut DiagnosticBuilder<'_, ErrorGuaranteed>,\n+    ) {\n+        let Some(adt) = ty.ty_adt_def() else { return };\n+        let did = adt.did();\n+        if self.infcx.tcx.is_diagnostic_item(sym::HashMap, did)\n+            || self.infcx.tcx.is_diagnostic_item(sym::BTreeMap, did)\n+        {\n+            err.help(format!(\"to modify a `{ty}`, use `.get_mut()`, `.insert()` or the entry API\"));\n+        }\n+    }\n+\n     /// User cannot make signature of a trait mutable without changing the\n     /// trait. So we find if this error belongs to a trait and if so we move\n     /// suggestion to the trait or disable it if it is out of scope of this crate"}, {"sha": "0ce60e3eb1db811173eb44a229650d4971215c6a", "filename": "src/test/ui/borrowck/index-mut-help.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/95135bed61d4403a294ab0ba25aa706748b54bbf/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95135bed61d4403a294ab0ba25aa706748b54bbf/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.stderr?ref=95135bed61d4403a294ab0ba25aa706748b54bbf", "patch": "@@ -5,6 +5,7 @@ LL |     map[\"peter\"].clear();\n    |     ^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n    |\n    = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `HashMap<&str, String>`\n+   = help: to modify a `HashMap<&str, String>`, use `.get_mut()`, `.insert()` or the entry API\n \n error[E0594]: cannot assign to data in an index of `HashMap<&str, String>`\n   --> $DIR/index-mut-help.rs:12:5\n@@ -13,6 +14,7 @@ LL |     map[\"peter\"] = \"0\".to_string();\n    |     ^^^^^^^^^^^^ cannot assign\n    |\n    = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `HashMap<&str, String>`\n+   = help: to modify a `HashMap<&str, String>`, use `.get_mut()`, `.insert()` or the entry API\n \n error[E0596]: cannot borrow data in an index of `HashMap<&str, String>` as mutable\n   --> $DIR/index-mut-help.rs:13:13\n@@ -21,6 +23,7 @@ LL |     let _ = &mut map[\"peter\"];\n    |             ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n    |\n    = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `HashMap<&str, String>`\n+   = help: to modify a `HashMap<&str, String>`, use `.get_mut()`, `.insert()` or the entry API\n \n error: aborting due to 3 previous errors\n "}, {"sha": "62972acab86ebcfc9b4e4d0b8bad4236bdb93921", "filename": "src/test/ui/btreemap/btreemap-index-mut.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95135bed61d4403a294ab0ba25aa706748b54bbf/src%2Ftest%2Fui%2Fbtreemap%2Fbtreemap-index-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95135bed61d4403a294ab0ba25aa706748b54bbf/src%2Ftest%2Fui%2Fbtreemap%2Fbtreemap-index-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbtreemap%2Fbtreemap-index-mut.rs?ref=95135bed61d4403a294ab0ba25aa706748b54bbf", "patch": "@@ -0,0 +1,6 @@\n+use std::collections::BTreeMap;\n+\n+fn main() {\n+    let mut map = BTreeMap::<u32, u32>::new();\n+    map[&0] = 1; //~ ERROR cannot assign\n+}"}, {"sha": "260f7100074262b495e0b0008ca15f951ef5e341", "filename": "src/test/ui/btreemap/btreemap-index-mut.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95135bed61d4403a294ab0ba25aa706748b54bbf/src%2Ftest%2Fui%2Fbtreemap%2Fbtreemap-index-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95135bed61d4403a294ab0ba25aa706748b54bbf/src%2Ftest%2Fui%2Fbtreemap%2Fbtreemap-index-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbtreemap%2Fbtreemap-index-mut.stderr?ref=95135bed61d4403a294ab0ba25aa706748b54bbf", "patch": "@@ -0,0 +1,12 @@\n+error[E0594]: cannot assign to data in an index of `BTreeMap<u32, u32>`\n+  --> $DIR/btreemap-index-mut.rs:5:5\n+   |\n+LL |     map[&0] = 1;\n+   |     ^^^^^^^^^^^ cannot assign\n+   |\n+   = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `BTreeMap<u32, u32>`\n+   = help: to modify a `BTreeMap<u32, u32>`, use `.get_mut()`, `.insert()` or the entry API\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "98448e9d5f0f0080caa6d44fb008bfd5b57facee", "filename": "src/test/ui/hashmap/hashmap-index-mut.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/95135bed61d4403a294ab0ba25aa706748b54bbf/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-index-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95135bed61d4403a294ab0ba25aa706748b54bbf/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-index-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-index-mut.rs?ref=95135bed61d4403a294ab0ba25aa706748b54bbf", "patch": "@@ -0,0 +1,6 @@\n+use std::collections::HashMap;\n+\n+fn main() {\n+    let mut map = HashMap::<u32, u32>::new();\n+    map[&0] = 1; //~ ERROR cannot assign\n+}"}, {"sha": "c72b380f4666d32d854791659607c23134f64ccb", "filename": "src/test/ui/hashmap/hashmap-index-mut.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95135bed61d4403a294ab0ba25aa706748b54bbf/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-index-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95135bed61d4403a294ab0ba25aa706748b54bbf/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-index-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-index-mut.stderr?ref=95135bed61d4403a294ab0ba25aa706748b54bbf", "patch": "@@ -0,0 +1,12 @@\n+error[E0594]: cannot assign to data in an index of `HashMap<u32, u32>`\n+  --> $DIR/hashmap-index-mut.rs:5:5\n+   |\n+LL |     map[&0] = 1;\n+   |     ^^^^^^^^^^^ cannot assign\n+   |\n+   = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `HashMap<u32, u32>`\n+   = help: to modify a `HashMap<u32, u32>`, use `.get_mut()`, `.insert()` or the entry API\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "9c70ab7d9711d455f370ce372fdb2e582d913b16", "filename": "src/test/ui/issues/issue-41726.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/95135bed61d4403a294ab0ba25aa706748b54bbf/src%2Ftest%2Fui%2Fissues%2Fissue-41726.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95135bed61d4403a294ab0ba25aa706748b54bbf/src%2Ftest%2Fui%2Fissues%2Fissue-41726.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41726.stderr?ref=95135bed61d4403a294ab0ba25aa706748b54bbf", "patch": "@@ -5,6 +5,7 @@ LL |         things[src.as_str()].sort();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n    |\n    = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `HashMap<String, Vec<String>>`\n+   = help: to modify a `HashMap<String, Vec<String>>`, use `.get_mut()`, `.insert()` or the entry API\n \n error: aborting due to previous error\n "}]}