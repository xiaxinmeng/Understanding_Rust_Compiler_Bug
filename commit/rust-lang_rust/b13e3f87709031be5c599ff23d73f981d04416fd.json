{"sha": "b13e3f87709031be5c599ff23d73f981d04416fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxM2UzZjg3NzA5MDMxYmU1YzU5OWZmMjNkNzNmOTgxZDA0NDE2ZmQ=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-08-06T20:42:26Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-08-06T20:42:26Z"}, "message": "Name return type in free region messages", "tree": {"sha": "aaec718bdcff412f4d3c38bd35bfd642118fe72f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aaec718bdcff412f4d3c38bd35bfd642118fe72f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b13e3f87709031be5c599ff23d73f981d04416fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b13e3f87709031be5c599ff23d73f981d04416fd", "html_url": "https://github.com/rust-lang/rust/commit/b13e3f87709031be5c599ff23d73f981d04416fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b13e3f87709031be5c599ff23d73f981d04416fd/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f72b8a44c51313d384deefcda753df668f2e265e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f72b8a44c51313d384deefcda753df668f2e265e", "html_url": "https://github.com/rust-lang/rust/commit/f72b8a44c51313d384deefcda753df668f2e265e"}], "stats": {"total": 59, "additions": 36, "deletions": 23}, "files": [{"sha": "8c2a5f19038bb37e28492da198cd0e569379889d", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b13e3f87709031be5c599ff23d73f981d04416fd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b13e3f87709031be5c599ff23d73f981d04416fd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=b13e3f87709031be5c599ff23d73f981d04416fd", "patch": "@@ -73,7 +73,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             })\n             .or_else(|| {\n                 self.give_name_if_anonymous_region_appears_in_output(\n-                    infcx.tcx, mir, mir_def_id, fr, counter, diag)\n+                    infcx, mir, mir_def_id, fr, counter, diag)\n             })\n             .unwrap_or_else(|| span_bug!(mir.span, \"can't make a name for free region {:?}\", fr))\n     }\n@@ -577,38 +577,51 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// or be early bound (named, not in argument).\n     fn give_name_if_anonymous_region_appears_in_output(\n         &self,\n-        tcx: TyCtxt<'_, '_, 'tcx>,\n+        infcx: &InferCtxt<'_, '_, 'tcx>,\n         mir: &Mir<'tcx>,\n         mir_def_id: DefId,\n         fr: RegionVid,\n         counter: &mut usize,\n         diag: &mut DiagnosticBuilder<'_>,\n     ) -> Option<InternedString> {\n+        let tcx = infcx.tcx;\n+\n         let return_ty = self.universal_regions.unnormalized_output_ty;\n         debug!(\n             \"give_name_if_anonymous_region_appears_in_output: return_ty = {:?}\",\n             return_ty\n         );\n-        if !tcx.any_free_region_meets(&return_ty, |r| r.to_region_vid() == fr) {\n+        if !infcx.tcx.any_free_region_meets(&return_ty, |r| r.to_region_vid() == fr) {\n             return None;\n         }\n \n-        let mir_node_id = tcx.hir.as_local_node_id(mir_def_id).expect(\"non-local mir\");\n-        let args_span = if let hir::ExprKind::Closure(_, _, _, span, _)\n+        let type_name = with_highlight_region(fr, *counter, || {\n+            infcx.extract_type_name(&return_ty)\n+        });\n+\n+                let mir_node_id = tcx.hir.as_local_node_id(mir_def_id).expect(\"non-local mir\");\n+\n+        let (return_span, mir_description) = if let hir::ExprKind::Closure(_, _, _, span, gen_move)\n             = tcx.hir.expect_expr(mir_node_id).node\n         {\n-            span\n+            (\n+                tcx.sess.codemap().end_point(span),\n+                if gen_move.is_some() { \" of generator\" } else { \" of closure\" }\n+            )\n         } else {\n-            mir.span\n+            // unreachable?\n+            (mir.span, \"\")\n         };\n \n-        let region_name = self.synthesize_region_name(counter);\n         diag.span_label(\n-            args_span,\n-            format!(\"lifetime `{}` appears in return type\", region_name),\n+            return_span,\n+            format!(\"return type{} is {}\", mir_description, type_name),\n         );\n \n-        Some(region_name)\n+        // This counter value will already have been used, so this function will increment it\n+        // so the next value will be used next and return the region name that would have been\n+        // used.\n+        Some(self.synthesize_region_name(counter))\n     }\n \n     /// Create a synthetic region named `'1`, incrementing the"}, {"sha": "3f9104373d6efb1e0fc69c458838fdda9743c3c6", "filename": "src/test/ui/error-codes/E0621-does-not-trigger-for-closures.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b13e3f87709031be5c599ff23d73f981d04416fd/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b13e3f87709031be5c599ff23d73f981d04416fd/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr?ref=b13e3f87709031be5c599ff23d73f981d04416fd", "patch": "@@ -8,10 +8,10 @@ error: unsatisfied lifetime constraints\n   --> $DIR/E0621-does-not-trigger-for-closures.rs:25:26\n    |\n LL |     invoke(&x, |a, b| if a > b { a } else { b }); //~ ERROR E0495\n-   |                ------    ^^^^^ requires that `'1` must outlive `'2`\n-   |                |   |\n-   |                |   has type `&'1 i32`\n-   |                lifetime `'2` appears in return type\n+   |                    --    ^^^^^ requires that `'1` must outlive `'2`\n+   |                    ||\n+   |                    |return type of closure is &'2 i32\n+   |                    has type `&'1 i32`\n \n error: aborting due to previous error\n "}, {"sha": "6c77bcb275724e4326b05a24f46d6b3edacecd82", "filename": "src/test/ui/issue-40510-1.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b13e3f87709031be5c599ff23d73f981d04416fd/src%2Ftest%2Fui%2Fissue-40510-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b13e3f87709031be5c599ff23d73f981d04416fd/src%2Ftest%2Fui%2Fissue-40510-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40510-1.nll.stderr?ref=b13e3f87709031be5c599ff23d73f981d04416fd", "patch": "@@ -3,9 +3,9 @@ error: unsatisfied lifetime constraints\n    |\n LL |     || {\n    |     --\n-   |     |\n+   |     ||\n+   |     |return type of closure is &'2 mut std::boxed::Box<()>\n    |     lifetime `'1` represents this closure's body\n-   |     lifetime `'2` appears in return type\n LL |         &mut x\n    |         ^^^^^^ return requires that `'1` must outlive `'2`\n    |"}, {"sha": "8aeef86c2e86b08c2a78a7ef837ff85fc2b5ea17", "filename": "src/test/ui/issue-40510-3.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b13e3f87709031be5c599ff23d73f981d04416fd/src%2Ftest%2Fui%2Fissue-40510-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b13e3f87709031be5c599ff23d73f981d04416fd/src%2Ftest%2Fui%2Fissue-40510-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40510-3.nll.stderr?ref=b13e3f87709031be5c599ff23d73f981d04416fd", "patch": "@@ -3,9 +3,9 @@ error: unsatisfied lifetime constraints\n    |\n LL |       || {\n    |       --\n-   |       |\n+   |       ||\n+   |       |return type of closure is [closure@$DIR/issue-40510-3.rs:18:9: 20:10 x:&'2 mut std::vec::Vec<()>]\n    |       lifetime `'1` represents this closure's body\n-   |       lifetime `'2` appears in return type\n LL | /         || {\n LL | |             x.push(())\n LL | |         }"}, {"sha": "fb4bed76a717f7c050cd80a983da89ed210fcc93", "filename": "src/test/ui/issue-49824.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b13e3f87709031be5c599ff23d73f981d04416fd/src%2Ftest%2Fui%2Fissue-49824.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b13e3f87709031be5c599ff23d73f981d04416fd/src%2Ftest%2Fui%2Fissue-49824.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-49824.nll.stderr?ref=b13e3f87709031be5c599ff23d73f981d04416fd", "patch": "@@ -3,9 +3,9 @@ error: unsatisfied lifetime constraints\n    |\n LL |       || {\n    |       --\n-   |       |\n+   |       ||\n+   |       |return type of closure is [closure@$DIR/issue-49824.rs:22:9: 24:10 x:&'2 mut i32]\n    |       lifetime `'1` represents this closure's body\n-   |       lifetime `'2` appears in return type\n LL | /         || {\n LL | |             let _y = &mut x;\n LL | |         }"}, {"sha": "84d0730025a5c93a8a6d8b36bbafd36905be1e57", "filename": "src/test/ui/nll/issue-48238.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b13e3f87709031be5c599ff23d73f981d04416fd/src%2Ftest%2Fui%2Fnll%2Fissue-48238.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b13e3f87709031be5c599ff23d73f981d04416fd/src%2Ftest%2Fui%2Fnll%2Fissue-48238.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-48238.stderr?ref=b13e3f87709031be5c599ff23d73f981d04416fd", "patch": "@@ -3,9 +3,9 @@ error: unsatisfied lifetime constraints\n    |\n LL |     move || use_val(&orig); //~ ERROR\n    |     ------- ^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n-   |     |\n+   |     |     |\n+   |     |     return type of closure is &'2 u8\n    |     lifetime `'1` represents this closure's body\n-   |     lifetime `'2` appears in return type\n    |\n    = note: closure implements `Fn`, so references to captured variables can't escape the closure\n "}]}