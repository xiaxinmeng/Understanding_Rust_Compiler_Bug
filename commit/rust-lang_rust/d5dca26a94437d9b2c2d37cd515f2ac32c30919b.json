{"sha": "d5dca26a94437d9b2c2d37cd515f2ac32c30919b", "node_id": "C_kwDOAAsO6NoAKGQ1ZGNhMjZhOTQ0MzdkOWIyYzJkMzdjZDUxNWYyYWMzMmMzMDkxOWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-17T10:32:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-17T10:32:49Z"}, "message": "Rollup merge of #100018 - nnethercote:clean-up-LitKind, r=petrochenkov\n\nClean up `LitKind`\n\nr? ``@petrochenkov``", "tree": {"sha": "4145261e4bd8e70cd79e7422f507c5684ee42eb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4145261e4bd8e70cd79e7422f507c5684ee42eb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5dca26a94437d9b2c2d37cd515f2ac32c30919b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi/MPRCRBK7hj4Ov3rIwAALpoIACqN/s9zwCP6i3pO+OfwGIc9\nflS6nW7FcsTBnwTstGyI6+9O+xhvhWBSCgXuzZtcQL4//S/04UwoR1e5F3YZrMyR\ngVSoLgBj5u9P2cUKae0Z/38XV6zty5X1cS02eNbO2I5u9o/jUM21nRDmcch54E7F\nCReuo+JRpt+LciTdkRg8BJvdi8ENenZ+weLRrIw4AsYWZz4+F1YgEZ2kPzWk7igz\nV73dkvkxS5DKeSBlICw02ttl14gN+noa4ZK+3mrQ+AB4faUB8my5pRoE2uRDwka9\n3i5CmOvJmufYJNgiDY9oD4x3+AkKoyrp2vsOqw0o0Op8wsmxizVRa7LAez2n3vg=\n=6rVz\n-----END PGP SIGNATURE-----\n", "payload": "tree 4145261e4bd8e70cd79e7422f507c5684ee42eb4\nparent bb77336c0a6708bdebcbf3a1df19b258919b582e\nparent 5d3cc1713a8816e3b4f10dc2cbaf910b16dc8763\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1660732369 +0200\ncommitter GitHub <noreply@github.com> 1660732369 +0200\n\nRollup merge of #100018 - nnethercote:clean-up-LitKind, r=petrochenkov\n\nClean up `LitKind`\n\nr? ``@petrochenkov``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5dca26a94437d9b2c2d37cd515f2ac32c30919b", "html_url": "https://github.com/rust-lang/rust/commit/d5dca26a94437d9b2c2d37cd515f2ac32c30919b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb77336c0a6708bdebcbf3a1df19b258919b582e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb77336c0a6708bdebcbf3a1df19b258919b582e", "html_url": "https://github.com/rust-lang/rust/commit/bb77336c0a6708bdebcbf3a1df19b258919b582e"}, {"sha": "5d3cc1713a8816e3b4f10dc2cbaf910b16dc8763", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d3cc1713a8816e3b4f10dc2cbaf910b16dc8763", "html_url": "https://github.com/rust-lang/rust/commit/5d3cc1713a8816e3b4f10dc2cbaf910b16dc8763"}], "stats": {"total": 139, "additions": 73, "deletions": 66}, "files": [{"sha": "268b0527b1cb2c438bfb5fc1cb6a432d69512d09", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=d5dca26a94437d9b2c2d37cd515f2ac32c30919b", "patch": "@@ -1689,7 +1689,7 @@ pub enum StrStyle {\n #[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]\n pub struct Lit {\n     /// The original literal token as written in source code.\n-    pub token: token::Lit,\n+    pub token_lit: token::Lit,\n     /// The \"semantic\" representation of the literal lowered from the original tokens.\n     /// Strings are unescaped, hexadecimal forms are eliminated, etc.\n     /// FIXME: Remove this and only create the semantic representation during lowering to HIR.\n@@ -1717,7 +1717,7 @@ impl StrLit {\n             StrStyle::Raw(n) => token::StrRaw(n),\n         };\n         Lit {\n-            token: token::Lit::new(token_kind, self.symbol, self.suffix),\n+            token_lit: token::Lit::new(token_kind, self.symbol, self.suffix),\n             span: self.span,\n             kind: LitKind::Str(self.symbol_unescaped, self.style),\n         }"}, {"sha": "0d114f1366c4d558988c980def48bad84514577e", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=d5dca26a94437d9b2c2d37cd515f2ac32c30919b", "patch": "@@ -184,13 +184,7 @@ impl MetaItem {\n     }\n \n     pub fn value_str(&self) -> Option<Symbol> {\n-        match self.kind {\n-            MetaItemKind::NameValue(ref v) => match v.kind {\n-                LitKind::Str(ref s, _) => Some(*s),\n-                _ => None,\n-            },\n-            _ => None,\n-        }\n+        self.kind.value_str()\n     }\n \n     pub fn meta_item_list(&self) -> Option<&[NestedMetaItem]> {"}, {"sha": "e6351d89c6c31055e73608ddb392b92327dcbe2e", "filename": "compiler/rustc_ast/src/util/literal.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs?ref=d5dca26a94437d9b2c2d37cd515f2ac32c30919b", "patch": "@@ -23,7 +23,7 @@ pub enum LitError {\n \n impl LitKind {\n     /// Converts literal token into a semantic literal.\n-    pub fn from_lit_token(lit: token::Lit) -> Result<LitKind, LitError> {\n+    pub fn from_token_lit(lit: token::Lit) -> Result<LitKind, LitError> {\n         let token::Lit { kind, symbol, suffix } = lit;\n         if suffix.is_some() && !kind.may_have_suffix() {\n             return Err(LitError::InvalidSuffix);\n@@ -153,7 +153,7 @@ impl LitKind {\n     /// Attempts to recover a token from semantic literal.\n     /// This function is used when the original token doesn't exist (e.g. the literal is created\n     /// by an AST-based macro) or unavailable (e.g. from HIR pretty-printing).\n-    pub fn to_lit_token(&self) -> token::Lit {\n+    pub fn to_token_lit(&self) -> token::Lit {\n         let (kind, symbol, suffix) = match *self {\n             LitKind::Str(symbol, ast::StrStyle::Cooked) => {\n                 // Don't re-intern unless the escaped string is different.\n@@ -208,8 +208,8 @@ impl LitKind {\n \n impl Lit {\n     /// Converts literal token into an AST literal.\n-    pub fn from_lit_token(token: token::Lit, span: Span) -> Result<Lit, LitError> {\n-        Ok(Lit { token, kind: LitKind::from_lit_token(token)?, span })\n+    pub fn from_token_lit(token_lit: token::Lit, span: Span) -> Result<Lit, LitError> {\n+        Ok(Lit { token_lit, kind: LitKind::from_token_lit(token_lit)?, span })\n     }\n \n     /// Converts arbitrary token into an AST literal.\n@@ -232,21 +232,21 @@ impl Lit {\n             _ => return Err(LitError::NotLiteral),\n         };\n \n-        Lit::from_lit_token(lit, token.span)\n+        Lit::from_token_lit(lit, token.span)\n     }\n \n     /// Attempts to recover an AST literal from semantic literal.\n     /// This function is used when the original token doesn't exist (e.g. the literal is created\n     /// by an AST-based macro) or unavailable (e.g. from HIR pretty-printing).\n     pub fn from_lit_kind(kind: LitKind, span: Span) -> Lit {\n-        Lit { token: kind.to_lit_token(), kind, span }\n+        Lit { token_lit: kind.to_token_lit(), kind, span }\n     }\n \n     /// Losslessly convert an AST literal into a token.\n     pub fn to_token(&self) -> Token {\n-        let kind = match self.token.kind {\n-            token::Bool => token::Ident(self.token.symbol, false),\n-            _ => token::Literal(self.token),\n+        let kind = match self.token_lit.kind {\n+            token::Bool => token::Ident(self.token_lit.symbol, false),\n+            _ => token::Literal(self.token_lit),\n         };\n         Token::new(kind, self.span)\n     }"}, {"sha": "1ac1d689efbdba0282f07ef945f76b706d01cf93", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=d5dca26a94437d9b2c2d37cd515f2ac32c30919b", "patch": "@@ -927,7 +927,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     lit.clone()\n                 } else {\n                     Lit {\n-                        token: token::Lit::new(token::LitKind::Err, kw::Empty, None),\n+                        token_lit: token::Lit::new(token::LitKind::Err, kw::Empty, None),\n                         kind: LitKind::Err(kw::Empty),\n                         span: DUMMY_SP,\n                     }"}, {"sha": "8749a13c5dde1ae1a6af2598bda8c8bdb14a2167", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=d5dca26a94437d9b2c2d37cd515f2ac32c30919b", "patch": "@@ -372,7 +372,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n \n     fn print_literal(&mut self, lit: &ast::Lit) {\n         self.maybe_print_comment(lit.span.lo());\n-        self.word(lit.token.to_string())\n+        self.word(lit.token_lit.to_string())\n     }\n \n     fn print_string(&mut self, st: &str, style: ast::StrStyle) {"}, {"sha": "c0f35d122f8e66ac294db443b4735b56654ae2de", "filename": "compiler/rustc_builtin_macros/src/concat_bytes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs?ref=d5dca26a94437d9b2c2d37cd515f2ac32c30919b", "patch": "@@ -1,6 +1,5 @@\n use rustc_ast as ast;\n use rustc_ast::{ptr::P, tokenstream::TokenStream};\n-use rustc_data_structures::sync::Lrc;\n use rustc_errors::Applicability;\n use rustc_expand::base::{self, DummyResult};\n \n@@ -185,5 +184,5 @@ pub fn expand_concat_bytes(\n         return base::MacEager::expr(DummyResult::raw_expr(sp, true));\n     }\n     let sp = cx.with_def_site_ctxt(sp);\n-    base::MacEager::expr(cx.expr_lit(sp, ast::LitKind::ByteStr(Lrc::from(accumulator))))\n+    base::MacEager::expr(cx.expr_byte_str(sp, accumulator))\n }"}, {"sha": "467ac34ded942f43c6aeb788964413500d8e7778", "filename": "compiler/rustc_builtin_macros/src/derive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs?ref=d5dca26a94437d9b2c2d37cd515f2ac32c30919b", "patch": "@@ -126,9 +126,9 @@ fn report_bad_target(sess: &Session, item: &Annotatable, span: Span) -> bool {\n }\n \n fn report_unexpected_literal(sess: &Session, lit: &ast::Lit) {\n-    let help_msg = match lit.token.kind {\n-        token::Str if rustc_lexer::is_ident(lit.token.symbol.as_str()) => {\n-            format!(\"try using `#[derive({})]`\", lit.token.symbol)\n+    let help_msg = match lit.token_lit.kind {\n+        token::Str if rustc_lexer::is_ident(lit.token_lit.symbol.as_str()) => {\n+            format!(\"try using `#[derive({})]`\", lit.token_lit.symbol)\n         }\n         _ => \"for example, write `#[derive(Debug)]` for `Debug`\".to_string(),\n     };"}, {"sha": "5ab70e441b8149bc712d82f10c081cfd4b7c3702", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=d5dca26a94437d9b2c2d37cd515f2ac32c30919b", "patch": "@@ -52,7 +52,7 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n \n     // We want to make sure we have the ctxt set so that we can use unstable methods\n     let span = cx.with_def_site_ctxt(span);\n-    let name = cx.expr_lit(span, ast::LitKind::Str(ident.name, ast::StrStyle::Cooked));\n+    let name = cx.expr_str(span, ident.name);\n     let fmt = substr.nonselflike_args[0].clone();\n \n     // Struct and tuples are similar enough that we use the same code for both,\n@@ -89,10 +89,7 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n         for i in 0..fields.len() {\n             let field = &fields[i];\n             if is_struct {\n-                let name = cx.expr_lit(\n-                    field.span,\n-                    ast::LitKind::Str(field.name.unwrap().name, ast::StrStyle::Cooked),\n-                );\n+                let name = cx.expr_str(field.span, field.name.unwrap().name);\n                 args.push(name);\n             }\n             // Use an extra indirection to make sure this works for unsized types.\n@@ -108,10 +105,7 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n \n         for field in fields {\n             if is_struct {\n-                name_exprs.push(cx.expr_lit(\n-                    field.span,\n-                    ast::LitKind::Str(field.name.unwrap().name, ast::StrStyle::Cooked),\n-                ));\n+                name_exprs.push(cx.expr_str(field.span, field.name.unwrap().name));\n             }\n \n             // Use an extra indirection to make sure this works for unsized types."}, {"sha": "08026c9d357846cc144cf718541b240a5a7aee05", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=d5dca26a94437d9b2c2d37cd515f2ac32c30919b", "patch": "@@ -923,7 +923,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 }\n \n                 // Build the format\n-                let fill = self.ecx.expr_lit(sp, ast::LitKind::Char(fill));\n+                let fill = self.ecx.expr_char(sp, fill);\n                 let align = |name| {\n                     let mut p = Context::rtpath(self.ecx, sym::Alignment);\n                     p.push(Ident::new(name, sp));"}, {"sha": "d78bbc3c932269c401400588536325cf2084c95a", "filename": "compiler/rustc_builtin_macros/src/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs?ref=d5dca26a94437d9b2c2d37cd515f2ac32c30919b", "patch": "@@ -216,7 +216,7 @@ pub fn expand_include_bytes(\n         }\n     };\n     match cx.source_map().load_binary_file(&file) {\n-        Ok(bytes) => base::MacEager::expr(cx.expr_lit(sp, ast::LitKind::ByteStr(bytes.into()))),\n+        Ok(bytes) => base::MacEager::expr(cx.expr_byte_str(sp, bytes)),\n         Err(e) => {\n             cx.span_err(sp, &format!(\"couldn't read {}: {}\", file.display(), e));\n             DummyResult::any(sp)"}, {"sha": "b971a63ec8977d303f1b37425137626c230c4230", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=d5dca26a94437d9b2c2d37cd515f2ac32c30919b", "patch": "@@ -3,6 +3,7 @@ use crate::base::ExtCtxt;\n use rustc_ast::attr;\n use rustc_ast::ptr::P;\n use rustc_ast::{self as ast, AttrVec, BlockCheckMode, Expr, LocalKind, PatKind, UnOp};\n+use rustc_data_structures::sync::Lrc;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n \n@@ -330,23 +331,38 @@ impl<'a> ExtCtxt<'a> {\n         self.expr_struct(span, self.path_ident(span, id), fields)\n     }\n \n-    pub fn expr_lit(&self, span: Span, lit_kind: ast::LitKind) -> P<ast::Expr> {\n+    fn expr_lit(&self, span: Span, lit_kind: ast::LitKind) -> P<ast::Expr> {\n         let lit = ast::Lit::from_lit_kind(lit_kind, span);\n         self.expr(span, ast::ExprKind::Lit(lit))\n     }\n+\n     pub fn expr_usize(&self, span: Span, i: usize) -> P<ast::Expr> {\n         self.expr_lit(\n             span,\n             ast::LitKind::Int(i as u128, ast::LitIntType::Unsigned(ast::UintTy::Usize)),\n         )\n     }\n+\n     pub fn expr_u32(&self, sp: Span, u: u32) -> P<ast::Expr> {\n         self.expr_lit(sp, ast::LitKind::Int(u as u128, ast::LitIntType::Unsigned(ast::UintTy::U32)))\n     }\n+\n     pub fn expr_bool(&self, sp: Span, value: bool) -> P<ast::Expr> {\n         self.expr_lit(sp, ast::LitKind::Bool(value))\n     }\n \n+    pub fn expr_str(&self, sp: Span, s: Symbol) -> P<ast::Expr> {\n+        self.expr_lit(sp, ast::LitKind::Str(s, ast::StrStyle::Cooked))\n+    }\n+\n+    pub fn expr_char(&self, sp: Span, ch: char) -> P<ast::Expr> {\n+        self.expr_lit(sp, ast::LitKind::Char(ch))\n+    }\n+\n+    pub fn expr_byte_str(&self, sp: Span, bytes: Vec<u8>) -> P<ast::Expr> {\n+        self.expr_lit(sp, ast::LitKind::ByteStr(Lrc::from(bytes)))\n+    }\n+\n     /// `[expr1, expr2, ...]`\n     pub fn expr_array(&self, sp: Span, exprs: Vec<P<ast::Expr>>) -> P<ast::Expr> {\n         self.expr(sp, ast::ExprKind::Array(exprs))\n@@ -357,10 +373,6 @@ impl<'a> ExtCtxt<'a> {\n         self.expr_addr_of(sp, self.expr_array(sp, exprs))\n     }\n \n-    pub fn expr_str(&self, sp: Span, s: Symbol) -> P<ast::Expr> {\n-        self.expr_lit(sp, ast::LitKind::Str(s, ast::StrStyle::Cooked))\n-    }\n-\n     pub fn expr_cast(&self, sp: Span, expr: P<ast::Expr>, ty: P<ast::Ty>) -> P<ast::Expr> {\n         self.expr(sp, ast::ExprKind::Cast(expr, ty))\n     }"}, {"sha": "99fe474541e9d03b72fad276e2b0e6fd163391d3", "filename": "compiler/rustc_expand/src/mbe/metavar_expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs?ref=d5dca26a94437d9b2c2d37cd515f2ac32c30919b", "patch": "@@ -112,7 +112,7 @@ fn parse_depth<'sess>(\n             \"meta-variable expression depth must be a literal\"\n         ));\n     };\n-    if let Ok(lit_kind) = LitKind::from_lit_token(*lit)\n+    if let Ok(lit_kind) = LitKind::from_token_lit(*lit)\n         && let LitKind::Int(n_u128, LitIntType::Unsuffixed) = lit_kind\n         && let Ok(n_usize) = usize::try_from(n_u128)\n     {"}, {"sha": "beb33c05913cf8c9e5ee81c064db5f1dd729c9c9", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=d5dca26a94437d9b2c2d37cd515f2ac32c30919b", "patch": "@@ -486,20 +486,26 @@ impl server::TokenStream for Rustc<'_, '_> {\n         // We don't use `TokenStream::from_ast` as the tokenstream currently cannot\n         // be recovered in the general case.\n         match &expr.kind {\n-            ast::ExprKind::Lit(l) if l.token.kind == token::Bool => Ok(\n-                tokenstream::TokenStream::token_alone(token::Ident(l.token.symbol, false), l.span),\n-            ),\n+            ast::ExprKind::Lit(l) if l.token_lit.kind == token::Bool => {\n+                Ok(tokenstream::TokenStream::token_alone(\n+                    token::Ident(l.token_lit.symbol, false),\n+                    l.span,\n+                ))\n+            }\n             ast::ExprKind::Lit(l) => {\n-                Ok(tokenstream::TokenStream::token_alone(token::Literal(l.token), l.span))\n+                Ok(tokenstream::TokenStream::token_alone(token::Literal(l.token_lit), l.span))\n             }\n             ast::ExprKind::Unary(ast::UnOp::Neg, e) => match &e.kind {\n-                ast::ExprKind::Lit(l) => match l.token {\n+                ast::ExprKind::Lit(l) => match l.token_lit {\n                     token::Lit { kind: token::Integer | token::Float, .. } => {\n                         Ok(Self::TokenStream::from_iter([\n                             // FIXME: The span of the `-` token is lost when\n                             // parsing, so we cannot faithfully recover it here.\n                             tokenstream::TokenTree::token_alone(token::BinOp(token::Minus), e.span),\n-                            tokenstream::TokenTree::token_alone(token::Literal(l.token), l.span),\n+                            tokenstream::TokenTree::token_alone(\n+                                token::Literal(l.token_lit),\n+                                l.span,\n+                            ),\n                         ]))\n                     }\n                     _ => Err(()),"}, {"sha": "0f754dddbec845c0b350ae3cf82b721ac1445aa6", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=d5dca26a94437d9b2c2d37cd515f2ac32c30919b", "patch": "@@ -1247,7 +1247,7 @@ impl<'a> State<'a> {\n \n     fn print_literal(&mut self, lit: &hir::Lit) {\n         self.maybe_print_comment(lit.span.lo());\n-        self.word(lit.node.to_lit_token().to_string())\n+        self.word(lit.node.to_token_lit().to_string())\n     }\n \n     fn print_inline_asm(&mut self, asm: &hir::InlineAsm<'_>) {"}, {"sha": "8f22221324a6e64343208b0bc84987485fffd145", "filename": "compiler/rustc_lint/src/hidden_unicode_codepoints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_lint%2Fsrc%2Fhidden_unicode_codepoints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_lint%2Fsrc%2Fhidden_unicode_codepoints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fhidden_unicode_codepoints.rs?ref=d5dca26a94437d9b2c2d37cd515f2ac32c30919b", "patch": "@@ -120,8 +120,8 @@ impl EarlyLintPass for HiddenUnicodeCodepoints {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {\n         // byte strings are already handled well enough by `EscapeError::NonAsciiCharInByteString`\n         let (text, span, padding) = match &expr.kind {\n-            ast::ExprKind::Lit(ast::Lit { token, kind, span }) => {\n-                let text = token.symbol;\n+            ast::ExprKind::Lit(ast::Lit { token_lit, kind, span }) => {\n+                let text = token_lit.symbol;\n                 if !contains_text_flow_control_chars(text.as_str()) {\n                     return;\n                 }"}, {"sha": "c824566c35ff47789bc57f9977a02f531068f0e0", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=d5dca26a94437d9b2c2d37cd515f2ac32c30919b", "patch": "@@ -1750,8 +1750,8 @@ impl<'a> Parser<'a> {\n             Some(lit) => match lit.kind {\n                 ast::LitKind::Str(symbol_unescaped, style) => Ok(ast::StrLit {\n                     style,\n-                    symbol: lit.token.symbol,\n-                    suffix: lit.token.suffix,\n+                    symbol: lit.token_lit.symbol,\n+                    suffix: lit.token_lit.suffix,\n                     span: lit.span,\n                     symbol_unescaped,\n                 }),\n@@ -1828,7 +1828,7 @@ impl<'a> Parser<'a> {\n                 let suffixless_lit = token::Lit::new(lit.kind, lit.symbol, None);\n                 let symbol = Symbol::intern(&suffixless_lit.to_string());\n                 let lit = token::Lit::new(token::Err, symbol, lit.suffix);\n-                Some(Lit::from_lit_token(lit, span).unwrap_or_else(|_| unreachable!()))\n+                Some(Lit::from_token_lit(lit, span).unwrap_or_else(|_| unreachable!()))\n             }\n         }\n     }"}, {"sha": "bffbf20b4d289982288b8a9ffb2e7eb81d39bc97", "filename": "src/tools/clippy/clippy_lints/src/octal_escapes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foctal_escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foctal_escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foctal_escapes.rs?ref=d5dca26a94437d9b2c2d37cd515f2ac32c30919b", "patch": "@@ -57,10 +57,10 @@ impl EarlyLintPass for OctalEscapes {\n         }\n \n         if let ExprKind::Lit(lit) = &expr.kind {\n-            if matches!(lit.token.kind, LitKind::Str) {\n-                check_lit(cx, &lit.token, lit.span, true);\n-            } else if matches!(lit.token.kind, LitKind::ByteStr) {\n-                check_lit(cx, &lit.token, lit.span, false);\n+            if matches!(lit.token_lit.kind, LitKind::Str) {\n+                check_lit(cx, &lit.token_lit, lit.span, true);\n+            } else if matches!(lit.token_lit.kind, LitKind::ByteStr) {\n+                check_lit(cx, &lit.token_lit, lit.span, false);\n             }\n         }\n     }"}, {"sha": "fa2383066f3f622af5353b45d5431fe33d7df445", "filename": "src/tools/clippy/clippy_lints/src/write.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs?ref=d5dca26a94437d9b2c2d37cd515f2ac32c30919b", "patch": "@@ -589,12 +589,12 @@ impl Write {\n                 },\n             };\n \n-            let replacement: String = match lit.token.kind {\n+            let replacement: String = match lit.token_lit.kind {\n                 LitKind::StrRaw(_) | LitKind::ByteStrRaw(_) if matches!(fmtstr.style, StrStyle::Raw(_)) => {\n-                    lit.token.symbol.as_str().replace('{', \"{{\").replace('}', \"}}\")\n+                    lit.token_lit.symbol.as_str().replace('{', \"{{\").replace('}', \"}}\")\n                 },\n                 LitKind::Str | LitKind::ByteStr if matches!(fmtstr.style, StrStyle::Cooked) => {\n-                    lit.token.symbol.as_str().replace('{', \"{{\").replace('}', \"}}\")\n+                    lit.token_lit.symbol.as_str().replace('{', \"{{\").replace('}', \"}}\")\n                 },\n                 LitKind::StrRaw(_)\n                 | LitKind::Str\n@@ -603,7 +603,7 @@ impl Write {\n                 | LitKind::Integer\n                 | LitKind::Float\n                 | LitKind::Err => continue,\n-                LitKind::Byte | LitKind::Char => match lit.token.symbol.as_str() {\n+                LitKind::Byte | LitKind::Char => match lit.token_lit.symbol.as_str() {\n                     \"\\\"\" if matches!(fmtstr.style, StrStyle::Cooked) => \"\\\\\\\"\",\n                     \"\\\"\" if matches!(fmtstr.style, StrStyle::Raw(0)) => continue,\n                     \"\\\\\\\\\" if matches!(fmtstr.style, StrStyle::Raw(_)) => \"\\\\\",\n@@ -614,7 +614,7 @@ impl Write {\n                     x => x,\n                 }\n                 .into(),\n-                LitKind::Bool => lit.token.symbol.as_str().deref().into(),\n+                LitKind::Bool => lit.token_lit.symbol.as_str().deref().into(),\n             };\n \n             if !fmt_spans.is_empty() {"}, {"sha": "3105882e2d308085a6e0f8ab2269e47594a0d8b2", "filename": "src/tools/rustfmt/src/expr.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5dca26a94437d9b2c2d37cd515f2ac32c30919b/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs?ref=d5dca26a94437d9b2c2d37cd515f2ac32c30919b", "patch": "@@ -79,7 +79,7 @@ pub(crate) fn format_expr(\n             if let Some(expr_rw) = rewrite_literal(context, l, shape) {\n                 Some(expr_rw)\n             } else {\n-                if let LitKind::StrRaw(_) = l.token.kind {\n+                if let LitKind::StrRaw(_) = l.token_lit.kind {\n                     Some(context.snippet(l.span).trim().into())\n                 } else {\n                     None\n@@ -1226,7 +1226,7 @@ fn rewrite_string_lit(context: &RewriteContext<'_>, span: Span, shape: Shape) ->\n \n fn rewrite_int_lit(context: &RewriteContext<'_>, lit: &ast::Lit, shape: Shape) -> Option<String> {\n     let span = lit.span;\n-    let symbol = lit.token.symbol.as_str();\n+    let symbol = lit.token_lit.symbol.as_str();\n \n     if let Some(symbol_stripped) = symbol.strip_prefix(\"0x\") {\n         let hex_lit = match context.config.hex_literal_case() {\n@@ -1239,7 +1239,9 @@ fn rewrite_int_lit(context: &RewriteContext<'_>, lit: &ast::Lit, shape: Shape) -\n                 format!(\n                     \"0x{}{}\",\n                     hex_lit,\n-                    lit.token.suffix.map_or(String::new(), |s| s.to_string())\n+                    lit.token_lit\n+                        .suffix\n+                        .map_or(String::new(), |s| s.to_string())\n                 ),\n                 context.config.max_width(),\n                 shape,"}]}