{"sha": "653c67cb6dc03478fad581ed7b55ea58ab2d13a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1M2M2N2NiNmRjMDM0NzhmYWQ1ODFlZDdiNTVlYTU4YWIyZDEzYTM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-06-17T16:46:11Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-06-17T16:46:11Z"}, "message": "Use verifier, perform assignment and field projection, fix branching", "tree": {"sha": "6d56450016b93c4f47f487229583113da8dbc123", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d56450016b93c4f47f487229583113da8dbc123"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/653c67cb6dc03478fad581ed7b55ea58ab2d13a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/653c67cb6dc03478fad581ed7b55ea58ab2d13a3", "html_url": "https://github.com/rust-lang/rust/commit/653c67cb6dc03478fad581ed7b55ea58ab2d13a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/653c67cb6dc03478fad581ed7b55ea58ab2d13a3/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d615dba0e913d807b38e893ec51e2bf6ea40287", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d615dba0e913d807b38e893ec51e2bf6ea40287", "html_url": "https://github.com/rust-lang/rust/commit/4d615dba0e913d807b38e893ec51e2bf6ea40287"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "548bd7368f3bb36cd0024b25d575b7f83b3fa394", "filename": "build.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/653c67cb6dc03478fad581ed7b55ea58ab2d13a3/build.sh", "raw_url": "https://github.com/rust-lang/rust/raw/653c67cb6dc03478fad581ed7b55ea58ab2d13a3/build.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.sh?ref=653c67cb6dc03478fad581ed7b55ea58ab2d13a3", "patch": "@@ -1,3 +1,3 @@\n cargo build || exit 1\n \n-rustc -Zcodegen-backend=$(pwd)/target/debug/librustc_codegen_cretonne.dylib example.rs --crate-type lib\n+rustc -Zcodegen-backend=$(pwd)/target/debug/librustc_codegen_cretonne.so example.rs --crate-type lib"}, {"sha": "ecee0aa31d0f7a0471f8edced4f5cbb019b0d14e", "filename": "src/base.rs", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/653c67cb6dc03478fad581ed7b55ea58ab2d13a3/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/653c67cb6dc03478fad581ed7b55ea58ab2d13a3/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=653c67cb6dc03478fad581ed7b55ea58ab2d13a3", "patch": "@@ -54,7 +54,7 @@ impl CValue {\n     fn load_value<'a, 'tcx: 'a>(self, ccx: &mut CodegenCtxt<'a, 'tcx>, ty: Ty<'tcx>) -> Value {\n         match self {\n             CValue::ByRef(value) => {\n-                let cton_ty = cton_type_from_ty(ty);\n+                let cton_ty = cton_type_from_ty(ty).unwrap();\n                 ccx.bcx.ins().load(cton_ty, MemFlags::new(), value, 0)\n             }\n             CValue::ByVal(value) => value,\n@@ -84,11 +84,16 @@ pub fn trans_crate<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Box<Any> {\n \n                 trans_fn(tcx, &mut f, def_id, substs);\n \n+                let flags = settings::Flags::new(settings::builder());\n+                let verify_error: String = ::cretonne::codegen::verify_function(&f, &flags)\n+                    .map(|_| String::new())\n+                    .unwrap_or_else(|err| format!(\"\\n\\ncretonne error: {}\", err));\n+\n                 let mut mir = ::std::io::Cursor::new(Vec::new());\n                 ::rustc_mir::util::write_mir_pretty(tcx, Some(def_id), &mut mir).unwrap();\n                 let mut cton = String::new();\n                 ::cretonne::codegen::write_function(&mut cton, &f, None).unwrap();\n-                tcx.sess.warn(&format!(\"{:?}:\\n\\n{}\\n\\n{}\", def_id, String::from_utf8_lossy(&mir.into_inner()), cton));\n+                tcx.sess.warn(&format!(\"{:?}:\\n\\n{}\\n\\n{}{}\", def_id, String::from_utf8_lossy(&mir.into_inner()), cton, verify_error));\n \n                 translated_mono_items.push(Translated {\n                     f,\n@@ -222,10 +227,10 @@ fn trans_fn<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, f: &mut Function, def_id:\n fn trans_stmt<'a, 'tcx: 'a>(ccx: &mut CodegenCtxt<'a, 'tcx>, stmt: &Statement<'tcx>) {\n     match &stmt.kind {\n         StatementKind::Assign(place, rval) => {\n-            let ty = place.ty(&ccx.mir.local_decls, ccx.tcx);\n+            let ty = place.ty(&ccx.mir.local_decls, ccx.tcx).to_ty(ccx.tcx);\n             let lval = trans_place(ccx, place);\n             let rval = trans_rval(ccx, rval);\n-            do_memcpy(ccx, lval, ty);\n+            do_memcpy(ccx, lval, rval, ty);\n         }\n         StatementKind::StorageLive(_) | StatementKind::StorageDead(_) | StatementKind::Nop => {}\n         _ => unimplemented!(\"stmt {:?}\", stmt),\n@@ -240,7 +245,9 @@ fn trans_place<'a, 'tcx: 'a>(ccx: &mut CodegenCtxt<'a, 'tcx>, place: &Place<'tcx\n             match projection.elem {\n                 ProjectionElem::Field(field, ty) => {\n                     let layout = ccx.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n-                    ccx.bcx.ins().iconst(types::I64, 0) // unimplemented =====================================================\n+                    let field_offset = layout.fields.offset(field.index());\n+                    let field_offset = ccx.bcx.ins().iconst(types::I64, field_offset.bytes() as i64);\n+                    ccx.bcx.ins().iadd(base, field_offset)\n                 }\n                 _ => unimplemented!(\"projection {:?}\", projection),\n             }\n@@ -287,7 +294,7 @@ fn trans_operand<'a, 'tcx>(ccx: &mut CodegenCtxt<'a, 'tcx>, operand: &Operand<'t\n                     let bits = value.to_scalar().unwrap().to_bits(layout.size).unwrap();\n                     match const_.ty.sty {\n                         TypeVariants::TyUint(_) => {\n-                            let iconst = ccx.bcx.ins().iconst(cton_type_from_ty(const_.ty), bits as u64 as i64);\n+                            let iconst = ccx.bcx.ins().iconst(cton_type_from_ty(const_.ty).unwrap(), bits as u64 as i64);\n                             CValue::ByVal(iconst)\n                         }\n                         _ => unimplemented!(),\n@@ -300,6 +307,14 @@ fn trans_operand<'a, 'tcx>(ccx: &mut CodegenCtxt<'a, 'tcx>, operand: &Operand<'t\n     }\n }\n \n+fn do_memcpy<'a, 'tcx: 'a>(ccx: &mut CodegenCtxt<'a, 'tcx>, to: Value, from: Value, ty: Ty<'tcx>) {\n+    let layout = ccx.tcx.layout_of(ParamEnv::reveal_all().and(ty)).unwrap();\n+    for i in 0..(layout.size.bytes() as i32) {\n+        let byte = ccx.bcx.ins().load_complex(types::I8, MemFlags::new(), &[from], i);\n+        ccx.bcx.ins().store_complex(MemFlags::new(), byte, &[to], i);\n+    }\n+}\n+\n fn ext_name_from_did(def_id: DefId) -> ExternalName {\n     ExternalName::user(def_id.krate.as_u32(), def_id.index.as_raw_u32())\n }\n@@ -321,9 +336,9 @@ fn cton_sig_from_fn_sig(sig: &FnSig) -> Signature {\n     }\n }\n \n-fn cton_type_from_ty(ty: Ty) -> types::Type {\n-    match ty.sty {\n-        TypeVariants::TyBool => types::B1,\n+fn cton_type_from_ty(ty: Ty) -> Option<types::Type> {\n+    Some(match ty.sty {\n+        TypeVariants::TyBool => types::I8,\n         TypeVariants::TyUint(size) => {\n             match size {\n                 UintTy::U8 => types::I8,\n@@ -344,6 +359,6 @@ fn cton_type_from_ty(ty: Ty) -> types::Type {\n                 IntTy::Isize => unimplemented!(),\n             }\n         }\n-        _ => unimplemented!(\"Cton type from {:?}\", ty),\n-    }\n-}\n\\ No newline at end of file\n+        _ => return None,\n+    })\n+}"}]}