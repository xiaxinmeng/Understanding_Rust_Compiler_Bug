{"sha": "28be77915f5b6750f0390e233a44499f2c3f2547", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4YmU3NzkxNWY1YjY3NTBmMDM5MGUyMzNhNDQ0OTlmMmMzZjI1NDc=", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2019-10-18T00:58:08Z"}, "committer": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2019-10-18T00:58:08Z"}, "message": "fix: nested comments in control flow condition pat", "tree": {"sha": "41b3a962a289e20a1253b118775f698ae74aaf69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41b3a962a289e20a1253b118775f698ae74aaf69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28be77915f5b6750f0390e233a44499f2c3f2547", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28be77915f5b6750f0390e233a44499f2c3f2547", "html_url": "https://github.com/rust-lang/rust/commit/28be77915f5b6750f0390e233a44499f2c3f2547", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28be77915f5b6750f0390e233a44499f2c3f2547/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a15e97f1e92b3621ab8c2f1585f27e8de583f74b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a15e97f1e92b3621ab8c2f1585f27e8de583f74b", "html_url": "https://github.com/rust-lang/rust/commit/a15e97f1e92b3621ab8c2f1585f27e8de583f74b"}], "stats": {"total": 139, "additions": 130, "deletions": 9}, "files": [{"sha": "baa39dbbce641a1dc7368d4a3adb0c43bee93d50", "filename": "src/patterns.rs", "status": "modified", "additions": 64, "deletions": 9, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/28be77915f5b6750f0390e233a44499f2c3f2547/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28be77915f5b6750f0390e233a44499f2c3f2547/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=28be77915f5b6750f0390e233a44499f2c3f2547", "patch": "@@ -89,26 +89,81 @@ impl Rewrite for Pat {\n             PatKind::Box(ref pat) => rewrite_unary_prefix(context, \"box \", &**pat, shape),\n             PatKind::Ident(binding_mode, ident, ref sub_pat) => {\n                 let (prefix, mutability) = match binding_mode {\n-                    BindingMode::ByRef(mutability) => (\"ref \", mutability),\n+                    BindingMode::ByRef(mutability) => (\"ref\", mutability),\n                     BindingMode::ByValue(mutability) => (\"\", mutability),\n                 };\n-                let mut_infix = format_mutability(mutability);\n+                let mut_infix = format_mutability(mutability).trim();\n                 let id_str = rewrite_ident(context, ident);\n                 let sub_pat = match *sub_pat {\n                     Some(ref p) => {\n-                        // 3 - ` @ `.\n+                        // 2 - `@ `.\n                         let width = shape\n                             .width\n-                            .checked_sub(prefix.len() + mut_infix.len() + id_str.len() + 3)?;\n-                        format!(\n-                            \" @ {}\",\n-                            p.rewrite(context, Shape::legacy(width, shape.indent))?\n-                        )\n+                            .checked_sub(prefix.len() + mut_infix.len() + id_str.len() + 2)?;\n+                        let lo = context.snippet_provider.span_after(self.span, \"@\");\n+                        combine_strs_with_missing_comments(\n+                            context,\n+                            \"@\",\n+                            &p.rewrite(context, Shape::legacy(width, shape.indent))?,\n+                            mk_sp(lo, p.span.lo()),\n+                            shape,\n+                            true,\n+                        )?\n                     }\n                     None => \"\".to_owned(),\n                 };\n \n-                Some(format!(\"{}{}{}{}\", prefix, mut_infix, id_str, sub_pat))\n+                // combine prefix and mut\n+                let (first_lo, first) = if !prefix.is_empty() && !mut_infix.is_empty() {\n+                    let hi = context.snippet_provider.span_before(self.span, \"mut\");\n+                    let lo = context.snippet_provider.span_after(self.span, \"ref\");\n+                    (\n+                        context.snippet_provider.span_after(self.span, \"mut\"),\n+                        combine_strs_with_missing_comments(\n+                            context,\n+                            prefix,\n+                            mut_infix,\n+                            mk_sp(lo, hi),\n+                            shape,\n+                            true,\n+                        )?,\n+                    )\n+                } else if !prefix.is_empty() {\n+                    (\n+                        context.snippet_provider.span_after(self.span, \"ref\"),\n+                        prefix.to_owned(),\n+                    )\n+                } else if !mut_infix.is_empty() {\n+                    (\n+                        context.snippet_provider.span_after(self.span, \"mut\"),\n+                        mut_infix.to_owned(),\n+                    )\n+                } else {\n+                    (self.span.lo(), \"\".to_owned())\n+                };\n+\n+                let next = if !sub_pat.is_empty() {\n+                    let hi = context.snippet_provider.span_before(self.span, \"@\");\n+                    combine_strs_with_missing_comments(\n+                        context,\n+                        id_str,\n+                        &sub_pat,\n+                        mk_sp(ident.span.hi(), hi),\n+                        shape,\n+                        true,\n+                    )?\n+                } else {\n+                    id_str.to_owned()\n+                };\n+\n+                combine_strs_with_missing_comments(\n+                    context,\n+                    &first,\n+                    &next,\n+                    mk_sp(first_lo, ident.span.lo()),\n+                    shape,\n+                    true,\n+                )\n             }\n             PatKind::Wild => {\n                 if 1 <= shape.width {"}, {"sha": "d2cd9a98a1f9dcc418ec806077c64df86e976e8e", "filename": "tests/source/issue_3853.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/28be77915f5b6750f0390e233a44499f2c3f2547/tests%2Fsource%2Fissue_3853.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28be77915f5b6750f0390e233a44499f2c3f2547/tests%2Fsource%2Fissue_3853.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue_3853.rs?ref=28be77915f5b6750f0390e233a44499f2c3f2547", "patch": "@@ -0,0 +1,35 @@\n+fn by_ref_with_block_before_ident() {\n+if let Some(ref     /*def*/      state)=        foo{\n+\t\t\t\tprintln!(\n+        \"asdfasdfasdf\");\t}\n+}\n+\n+fn mut_block_before_ident() {\n+if   let Some(mut     /*def*/    state  ) =foo{\n+\t\t\t\tprintln!(\n+        \"123\"   );\t}\n+}\n+\n+fn ref_and_mut_blocks_before_ident() {\n+if   let Some(ref  /*abc*/\n+    mut     /*def*/    state  )    =       foo {\n+\t\t\t\tprintln!(\n+ \"deefefefefefwea\"   );\t}\n+}\n+\n+fn sub_pattern() {\n+    let foo @             /*foo*/\n+bar(f) = 42;\n+}\n+\n+fn no_prefix_block_before_ident() {\n+if   let Some(\n+    /*def*/    state  )    =       foo {\n+\t\t\t\tprintln!(\n+ \"129387123123\"   );\t}\n+}\n+\n+fn issue_3853() {\n+if let Some(ref /*mut*/ state) = foo {\n+\t\t\t\t\t}\n+}"}, {"sha": "53b94d3fc007c6f6c15ab490e6c94811352dfae1", "filename": "tests/target/issue_3853.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/28be77915f5b6750f0390e233a44499f2c3f2547/tests%2Ftarget%2Fissue_3853.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28be77915f5b6750f0390e233a44499f2c3f2547/tests%2Ftarget%2Fissue_3853.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_3853.rs?ref=28be77915f5b6750f0390e233a44499f2c3f2547", "patch": "@@ -0,0 +1,31 @@\n+fn by_ref_with_block_before_ident() {\n+    if let Some(ref /*def*/ state) = foo {\n+        println!(\"asdfasdfasdf\");\n+    }\n+}\n+\n+fn mut_block_before_ident() {\n+    if let Some(mut /*def*/ state) = foo {\n+        println!(\"123\");\n+    }\n+}\n+\n+fn ref_and_mut_blocks_before_ident() {\n+    if let Some(ref /*abc*/ mut /*def*/ state) = foo {\n+        println!(\"deefefefefefwea\");\n+    }\n+}\n+\n+fn sub_pattern() {\n+    let foo @ /*foo*/ bar(f) = 42;\n+}\n+\n+fn no_prefix_block_before_ident() {\n+    if let Some(/*def*/ state) = foo {\n+        println!(\"129387123123\");\n+    }\n+}\n+\n+fn issue_3853() {\n+    if let Some(ref /*mut*/ state) = foo {}\n+}"}]}