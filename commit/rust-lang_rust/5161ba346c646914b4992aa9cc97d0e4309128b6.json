{"sha": "5161ba346c646914b4992aa9cc97d0e4309128b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNjFiYTM0NmM2NDY5MTRiNDk5MmFhOWNjOTdkMGU0MzA5MTI4YjY=", "commit": {"author": {"name": "Philippe Nadon", "email": "phil@nadon.io", "date": "2020-07-23T15:50:45Z"}, "committer": {"name": "Philippe Nadon", "email": "phil@nadon.io", "date": "2020-07-26T22:05:20Z"}, "message": "renamed ScalarMaybeUninit::not_undef to check_init\n\nRelated to PR https://github.com/rust-lang/rust/pull/74664", "tree": {"sha": "9f1adb0823c9dd9e521030455db53159aabea36f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f1adb0823c9dd9e521030455db53159aabea36f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5161ba346c646914b4992aa9cc97d0e4309128b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5161ba346c646914b4992aa9cc97d0e4309128b6", "html_url": "https://github.com/rust-lang/rust/commit/5161ba346c646914b4992aa9cc97d0e4309128b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5161ba346c646914b4992aa9cc97d0e4309128b6/comments", "author": {"login": "pnadon", "id": 12490688, "node_id": "MDQ6VXNlcjEyNDkwNjg4", "avatar_url": "https://avatars.githubusercontent.com/u/12490688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnadon", "html_url": "https://github.com/pnadon", "followers_url": "https://api.github.com/users/pnadon/followers", "following_url": "https://api.github.com/users/pnadon/following{/other_user}", "gists_url": "https://api.github.com/users/pnadon/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnadon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnadon/subscriptions", "organizations_url": "https://api.github.com/users/pnadon/orgs", "repos_url": "https://api.github.com/users/pnadon/repos", "events_url": "https://api.github.com/users/pnadon/events{/privacy}", "received_events_url": "https://api.github.com/users/pnadon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnadon", "id": 12490688, "node_id": "MDQ6VXNlcjEyNDkwNjg4", "avatar_url": "https://avatars.githubusercontent.com/u/12490688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnadon", "html_url": "https://github.com/pnadon", "followers_url": "https://api.github.com/users/pnadon/followers", "following_url": "https://api.github.com/users/pnadon/following{/other_user}", "gists_url": "https://api.github.com/users/pnadon/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnadon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnadon/subscriptions", "organizations_url": "https://api.github.com/users/pnadon/orgs", "repos_url": "https://api.github.com/users/pnadon/repos", "events_url": "https://api.github.com/users/pnadon/events{/privacy}", "received_events_url": "https://api.github.com/users/pnadon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91b58c93c5ab18969e7bdce3bf3e110c9b150d4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/91b58c93c5ab18969e7bdce3bf3e110c9b150d4b", "html_url": "https://github.com/rust-lang/rust/commit/91b58c93c5ab18969e7bdce3bf3e110c9b150d4b"}], "stats": {"total": 192, "additions": 96, "deletions": 96}, "files": [{"sha": "8561edcc05b9cd15c652a1159a290d389d012fa8", "filename": "src/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=5161ba346c646914b4992aa9cc97d0e4309128b6", "patch": "@@ -234,7 +234,7 @@ pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) ->\n                 }\n             }\n         }\n-        let return_code = ecx.read_scalar(ret_place.into())?.not_undef()?.to_machine_isize(&ecx)?;\n+        let return_code = ecx.read_scalar(ret_place.into())?.check_init()?.to_machine_isize(&ecx)?;\n         Ok(return_code)\n     })();\n "}, {"sha": "d271b845c21511c14ca85ebffdb2d8dd676c0e32", "filename": "src/helpers.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=5161ba346c646914b4992aa9cc97d0e4309128b6", "patch": "@@ -67,7 +67,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn eval_libc(&mut self, name: &str) -> InterpResult<'tcx, Scalar<Tag>> {\n         self.eval_context_mut()\n             .eval_path_scalar(&[\"libc\", name])?\n-            .not_undef()\n+            .check_init()\n     }\n \n     /// Helper function to get a `libc` constant as an `i32`.\n@@ -80,7 +80,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn eval_windows(&mut self, module: &str, name: &str) -> InterpResult<'tcx, Scalar<Tag>> {\n         self.eval_context_mut()\n             .eval_path_scalar(&[\"std\", \"sys\", \"windows\", module, name])?\n-            .not_undef()\n+            .check_init()\n     }\n \n     /// Helper function to get a `windows` constant as an `u64`.\n@@ -407,7 +407,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn get_last_error(&self) -> InterpResult<'tcx, Scalar<Tag>> {\n         let this = self.eval_context_ref();\n         let errno_place = this.machine.last_error.unwrap();\n-        this.read_scalar(errno_place.into())?.not_undef()\n+        this.read_scalar(errno_place.into())?.check_init()\n     }\n \n     /// Sets the last OS error using a `std::io::Error`. This function tries to produce the most\n@@ -467,7 +467,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n         }\n     }\n-    \n+\n     fn read_scalar_at_offset(\n         &self,\n         op: OpTy<'tcx, Tag>,"}, {"sha": "5b86b9a76f6b48125906a9fdbd5fac091b9c9008", "filename": "src/operator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=5161ba346c646914b4992aa9cc97d0e4309128b6", "patch": "@@ -32,11 +32,11 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n                 #[rustfmt::skip]\n                 let eq = match (*left, *right) {\n                     (Immediate::Scalar(left), Immediate::Scalar(right)) => {\n-                        self.ptr_eq(left.not_undef()?, right.not_undef()?)?\n+                        self.ptr_eq(left.check_init()?, right.check_init()?)?\n                     }\n                     (Immediate::ScalarPair(left1, left2), Immediate::ScalarPair(right1, right2)) => {\n-                        self.ptr_eq(left1.not_undef()?, right1.not_undef()?)?\n-                            && self.ptr_eq(left2.not_undef()?, right2.not_undef()?)?\n+                        self.ptr_eq(left1.check_init()?, right1.check_init()?)?\n+                            && self.ptr_eq(left2.check_init()?, right2.check_init()?)?\n                     }\n                     _ => bug!(\"Type system should not allow comparing Scalar with ScalarPair\"),\n                 };"}, {"sha": "86a7a58ac4aab67c362ba4939566247ddea92909", "filename": "src/shims/env.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=5161ba346c646914b4992aa9cc97d0e4309128b6", "patch": "@@ -69,7 +69,7 @@ impl<'tcx> EnvVars<'tcx> {\n         }\n         // Deallocate environ var list.\n         let environ = ecx.machine.env_vars.environ.unwrap();\n-        let old_vars_ptr = ecx.read_scalar(environ.into())?.not_undef()?;\n+        let old_vars_ptr = ecx.read_scalar(environ.into())?.check_init()?;\n         ecx.memory.deallocate(ecx.force_ptr(old_vars_ptr)?, None, MiriMemoryKind::Env.into())?;\n         Ok(())\n     }\n@@ -104,7 +104,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let target_os = &this.tcx.sess.target.target.target_os;\n         assert!(target_os == \"linux\" || target_os == \"macos\", \"`getenv` is only available for the UNIX target family\");\n \n-        let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n+        let name_ptr = this.read_scalar(name_op)?.check_init()?;\n         let name = this.read_os_str_from_c_str(name_ptr)?;\n         Ok(match this.machine.env_vars.map.get(name) {\n             Some(var_ptr) => {\n@@ -125,7 +125,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n         this.assert_target_os(\"windows\", \"GetEnvironmentVariableW\");\n \n-        let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n+        let name_ptr = this.read_scalar(name_op)?.check_init()?;\n         let name = this.read_os_str_from_wide_str(name_ptr)?;\n         Ok(match this.machine.env_vars.map.get(&name) {\n             Some(var_ptr) => {\n@@ -135,7 +135,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let var_ptr = Scalar::from(var_ptr.offset(Size::from_bytes(name_offset_bytes), this)?);\n                 let var = this.read_os_str_from_wide_str(var_ptr)?;\n \n-                let buf_ptr = this.read_scalar(buf_op)?.not_undef()?;\n+                let buf_ptr = this.read_scalar(buf_op)?.check_init()?;\n                 // `buf_size` represents the size in characters.\n                 let buf_size = u64::from(this.read_scalar(size_op)?.to_u32()?);\n                 windows_check_buffer_size(this.write_os_str_to_wide_str(&var, buf_ptr, buf_size)?)\n@@ -153,7 +153,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n         this.assert_target_os(\"windows\", \"GetEnvironmentStringsW\");\n \n-        // Info on layout of environment blocks in Windows: \n+        // Info on layout of environment blocks in Windows:\n         // https://docs.microsoft.com/en-us/windows/win32/procthread/environment-variables\n         let mut env_vars = std::ffi::OsString::new();\n         for &item in this.machine.env_vars.map.values() {\n@@ -173,7 +173,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n         this.assert_target_os(\"windows\", \"FreeEnvironmentStringsW\");\n \n-        let env_block_ptr = this.read_scalar(env_block_op)?.not_undef()?;\n+        let env_block_ptr = this.read_scalar(env_block_op)?.check_init()?;\n         let result = this.memory.deallocate(this.force_ptr(env_block_ptr)?, None, MiriMemoryKind::Env.into());\n         // If the function succeeds, the return value is nonzero.\n         Ok(result.is_ok() as i32)\n@@ -188,8 +188,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let target_os = &this.tcx.sess.target.target.target_os;\n         assert!(target_os == \"linux\" || target_os == \"macos\", \"`setenv` is only available for the UNIX target family\");\n \n-        let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n-        let value_ptr = this.read_scalar(value_op)?.not_undef()?;\n+        let name_ptr = this.read_scalar(name_op)?.check_init()?;\n+        let value_ptr = this.read_scalar(value_op)?.check_init()?;\n \n         let mut new = None;\n         if !this.is_null(name_ptr)? {\n@@ -224,14 +224,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let mut this = self.eval_context_mut();\n         this.assert_target_os(\"windows\", \"SetEnvironmentVariableW\");\n \n-        let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n-        let value_ptr = this.read_scalar(value_op)?.not_undef()?;\n+        let name_ptr = this.read_scalar(name_op)?.check_init()?;\n+        let value_ptr = this.read_scalar(value_op)?.check_init()?;\n \n         if this.is_null(name_ptr)? {\n             // ERROR CODE is not clearly explained in docs.. For now, throw UB instead.\n             throw_ub_format!(\"pointer to environment variable name is NULL\");\n         }\n-        \n+\n         let name = this.read_os_str_from_wide_str(name_ptr)?;\n         if name.is_empty() {\n             throw_unsup_format!(\"environment variable name is an empty string\");\n@@ -261,7 +261,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let target_os = &this.tcx.sess.target.target.target_os;\n         assert!(target_os == \"linux\" || target_os == \"macos\", \"`unsetenv` is only available for the UNIX target family\");\n \n-        let name_ptr = this.read_scalar(name_op)?.not_undef()?;\n+        let name_ptr = this.read_scalar(name_op)?.check_init()?;\n         let mut success = None;\n         if !this.is_null(name_ptr)? {\n             let name = this.read_os_str_from_c_str(name_ptr)?.to_owned();\n@@ -295,7 +295,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"getcwd\")?;\n \n-        let buf = this.read_scalar(buf_op)?.not_undef()?;\n+        let buf = this.read_scalar(buf_op)?.check_init()?;\n         let size = this.read_scalar(size_op)?.to_machine_usize(&*this.tcx)?;\n         // If we cannot get the current directory, we return null\n         match env::current_dir() {\n@@ -323,7 +323,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.check_no_isolation(\"GetCurrentDirectoryW\")?;\n \n         let size = u64::from(this.read_scalar(size_op)?.to_u32()?);\n-        let buf = this.read_scalar(buf_op)?.not_undef()?;\n+        let buf = this.read_scalar(buf_op)?.check_init()?;\n \n         // If we cannot get the current directory, we return 0\n         match env::current_dir() {\n@@ -341,7 +341,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"chdir\")?;\n \n-        let path = this.read_path_from_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n+        let path = this.read_path_from_c_str(this.read_scalar(path_op)?.check_init()?)?;\n \n         match env::set_current_dir(path) {\n             Ok(()) => Ok(0),\n@@ -362,7 +362,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"SetCurrentDirectoryW\")?;\n \n-        let path = this.read_path_from_wide_str(this.read_scalar(path_op)?.not_undef()?)?;\n+        let path = this.read_path_from_wide_str(this.read_scalar(path_op)?.check_init()?)?;\n \n         match env::set_current_dir(path) {\n             Ok(()) => Ok(1),\n@@ -379,7 +379,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n         // Deallocate the old environ list, if any.\n         if let Some(environ) = this.machine.env_vars.environ {\n-            let old_vars_ptr = this.read_scalar(environ.into())?.not_undef()?;\n+            let old_vars_ptr = this.read_scalar(environ.into())?.check_init()?;\n             this.memory.deallocate(this.force_ptr(old_vars_ptr)?, None, MiriMemoryKind::Env.into())?;\n         } else {\n             // No `environ` allocated yet, let's do that."}, {"sha": "d4f248f0329dc717c685cad010e897eb773ae53e", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=5161ba346c646914b4992aa9cc97d0e4309128b6", "patch": "@@ -226,12 +226,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             \"free\" => {\n                 let &[ptr] = check_arg_count(args)?;\n-                let ptr = this.read_scalar(ptr)?.not_undef()?;\n+                let ptr = this.read_scalar(ptr)?.check_init()?;\n                 this.free(ptr, MiriMemoryKind::C)?;\n             }\n             \"realloc\" => {\n                 let &[old_ptr, new_size] = check_arg_count(args)?;\n-                let old_ptr = this.read_scalar(old_ptr)?.not_undef()?;\n+                let old_ptr = this.read_scalar(old_ptr)?.check_init()?;\n                 let new_size = this.read_scalar(new_size)?.to_machine_usize(this)?;\n                 let res = this.realloc(old_ptr, new_size, MiriMemoryKind::C)?;\n                 this.write_scalar(res, dest)?;\n@@ -268,7 +268,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             \"__rust_dealloc\" => {\n                 let &[ptr, old_size, align] = check_arg_count(args)?;\n-                let ptr = this.read_scalar(ptr)?.not_undef()?;\n+                let ptr = this.read_scalar(ptr)?.check_init()?;\n                 let old_size = this.read_scalar(old_size)?.to_machine_usize(this)?;\n                 let align = this.read_scalar(align)?.to_machine_usize(this)?;\n                 // No need to check old_size/align; we anyway check that they match the allocation.\n@@ -281,7 +281,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             \"__rust_realloc\" => {\n                 let &[ptr, old_size, align, new_size] = check_arg_count(args)?;\n-                let ptr = this.force_ptr(this.read_scalar(ptr)?.not_undef()?)?;\n+                let ptr = this.force_ptr(this.read_scalar(ptr)?.check_init()?)?;\n                 let old_size = this.read_scalar(old_size)?.to_machine_usize(this)?;\n                 let align = this.read_scalar(align)?.to_machine_usize(this)?;\n                 let new_size = this.read_scalar(new_size)?.to_machine_usize(this)?;\n@@ -301,8 +301,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // C memory handling functions\n             \"memcmp\" => {\n                 let &[left, right, n] = check_arg_count(args)?;\n-                let left = this.read_scalar(left)?.not_undef()?;\n-                let right = this.read_scalar(right)?.not_undef()?;\n+                let left = this.read_scalar(left)?.check_init()?;\n+                let right = this.read_scalar(right)?.check_init()?;\n                 let n = Size::from_bytes(this.read_scalar(n)?.to_machine_usize(this)?);\n \n                 let result = {\n@@ -321,7 +321,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             \"memrchr\" => {\n                 let &[ptr, val, num] = check_arg_count(args)?;\n-                let ptr = this.read_scalar(ptr)?.not_undef()?;\n+                let ptr = this.read_scalar(ptr)?.check_init()?;\n                 let val = this.read_scalar(val)?.to_i32()? as u8;\n                 let num = this.read_scalar(num)?.to_machine_usize(this)?;\n                 if let Some(idx) = this\n@@ -339,7 +339,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             \"memchr\" => {\n                 let &[ptr, val, num] = check_arg_count(args)?;\n-                let ptr = this.read_scalar(ptr)?.not_undef()?;\n+                let ptr = this.read_scalar(ptr)?.check_init()?;\n                 let val = this.read_scalar(val)?.to_i32()? as u8;\n                 let num = this.read_scalar(num)?.to_machine_usize(this)?;\n                 let idx = this\n@@ -356,7 +356,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             \"strlen\" => {\n                 let &[ptr] = check_arg_count(args)?;\n-                let ptr = this.read_scalar(ptr)?.not_undef()?;\n+                let ptr = this.read_scalar(ptr)?.check_init()?;\n                 let n = this.memory.read_c_str(ptr)?.len();\n                 this.write_scalar(Scalar::from_machine_usize(u64::try_from(n).unwrap(), this), dest)?;\n             }"}, {"sha": "ce0368b4a082948ce8e936aaf11be5e36fc4f573", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=5161ba346c646914b4992aa9cc97d0e4309128b6", "patch": "@@ -68,9 +68,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n                 let size = elem_layout.size.checked_mul(count, this)\n                     .ok_or_else(|| err_ub_format!(\"overflow computing total size of `{}`\", intrinsic_name))?;\n-                let src = this.read_scalar(src)?.not_undef()?;\n+                let src = this.read_scalar(src)?.check_init()?;\n                 let src = this.memory.check_ptr_access(src, size, elem_align)?;\n-                let dest = this.read_scalar(dest)?.not_undef()?;\n+                let dest = this.read_scalar(dest)?.check_init()?;\n                 let dest = this.memory.check_ptr_access(dest, size, elem_align)?;\n \n                 if let (Some(src), Some(dest)) = (src, dest) {\n@@ -105,7 +105,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let ty = instance.substs.type_at(0);\n                 let ty_layout = this.layout_of(ty)?;\n                 let val_byte = this.read_scalar(val_byte)?.to_u8()?;\n-                let ptr = this.read_scalar(ptr)?.not_undef()?;\n+                let ptr = this.read_scalar(ptr)?.check_init()?;\n                 let count = this.read_scalar(count)?.to_machine_usize(this)?;\n                 let byte_count = ty_layout.size.checked_mul(count, this)\n                     .ok_or_else(|| err_ub_format!(\"overflow computing total size of `write_bytes`\"))?;\n@@ -503,7 +503,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Other\n             \"assume\" => {\n                 let &[cond] = check_arg_count(args)?;\n-                let cond = this.read_scalar(cond)?.not_undef()?.to_bool()?;\n+                let cond = this.read_scalar(cond)?.check_init()?.to_bool()?;\n                 if !cond {\n                     throw_ub_format!(\"`assume` intrinsic called with `false`\");\n                 }"}, {"sha": "05dd4059eb1bcfbd56c37965ab4fea5d3c1a38a6", "filename": "src/shims/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=5161ba346c646914b4992aa9cc97d0e4309128b6", "patch": "@@ -67,14 +67,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let (dest, ret) = ret.unwrap();\n \n         let req_align = this\n-            .force_bits(this.read_scalar(align_op)?.not_undef()?, this.pointer_size())?;\n+            .force_bits(this.read_scalar(align_op)?.check_init()?, this.pointer_size())?;\n \n         // Stop if the alignment is not a power of two.\n         if !req_align.is_power_of_two() {\n             return this.start_panic(\"align_offset: align is not a power-of-two\", unwind);\n         }\n \n-        let ptr_scalar = this.read_scalar(ptr_op)?.not_undef()?;\n+        let ptr_scalar = this.read_scalar(ptr_op)?.check_init()?;\n \n         // Default: no result.\n         let mut result = this.machine_usize_max();"}, {"sha": "45a41b9b7be0690b1dacd593dec8631a4e305e77", "filename": "src/shims/panic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=5161ba346c646914b4992aa9cc97d0e4309128b6", "patch": "@@ -47,7 +47,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         // Get the raw pointer stored in arg[0] (the panic payload).\n         let &[payload] = check_arg_count(args)?;\n-        let payload = this.read_scalar(payload)?.not_undef()?;\n+        let payload = this.read_scalar(payload)?.check_init()?;\n         assert!(\n             this.machine.panic_payload.is_none(),\n             \"the panic runtime should avoid double-panics\"\n@@ -81,9 +81,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         // Get all the arguments.\n         let &[try_fn, data, catch_fn] = check_arg_count(args)?;\n-        let try_fn = this.read_scalar(try_fn)?.not_undef()?;\n-        let data = this.read_scalar(data)?.not_undef()?;\n-        let catch_fn = this.read_scalar(catch_fn)?.not_undef()?;\n+        let try_fn = this.read_scalar(try_fn)?.check_init()?;\n+        let data = this.read_scalar(data)?.check_init()?;\n+        let catch_fn = this.read_scalar(catch_fn)?.check_init()?;\n \n         // Now we make a function call, and pass `data` as first and only argument.\n         let f_instance = this.memory.get_fn(try_fn)?.as_instance()?;"}, {"sha": "4bb94ae89449a6166351eaef621b2a8f9ff197f9", "filename": "src/shims/posix/foreign_items.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Fposix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Fposix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fforeign_items.rs?ref=5161ba346c646914b4992aa9cc97d0e4309128b6", "patch": "@@ -65,7 +65,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"read\" => {\n                 let &[fd, buf, count] = check_arg_count(args)?;\n                 let fd = this.read_scalar(fd)?.to_i32()?;\n-                let buf = this.read_scalar(buf)?.not_undef()?;\n+                let buf = this.read_scalar(buf)?.check_init()?;\n                 let count = this.read_scalar(count)?.to_machine_usize(this)?;\n                 let result = if fd == 0 {\n \n@@ -109,7 +109,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"write\" => {\n                 let &[fd, buf, n] = check_arg_count(args)?;\n                 let fd = this.read_scalar(fd)?.to_i32()?;\n-                let buf = this.read_scalar(buf)?.not_undef()?;\n+                let buf = this.read_scalar(buf)?.check_init()?;\n                 let count = this.read_scalar(n)?.to_machine_usize(this)?;\n                 trace!(\"Called write({:?}, {:?}, {:?})\", fd, buf, count);\n                 let result = if fd == 0 {\n@@ -225,7 +225,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"dlsym\" => {\n                 let &[handle, symbol] = check_arg_count(args)?;\n                 this.read_scalar(handle)?.to_machine_usize(this)?;\n-                let symbol = this.read_scalar(symbol)?.not_undef()?;\n+                let symbol = this.read_scalar(symbol)?.check_init()?;\n                 let symbol_name = this.memory.read_c_str(symbol)?;\n                 if let Some(dlsym) = Dlsym::from_str(symbol_name, &this.tcx.sess.target.target.target_os)? {\n                     let ptr = this.memory.create_fn_alloc(FnVal::Other(dlsym));\n@@ -263,7 +263,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"pthread_key_create\" => {\n                 let &[key, dtor] = check_arg_count(args)?;\n                 let key_place = this.deref_operand(key)?;\n-                let dtor = this.read_scalar(dtor)?.not_undef()?;\n+                let dtor = this.read_scalar(dtor)?.check_init()?;\n \n                 // Extract the function type out of the signature (that seems easier than constructing it ourselves).\n                 let dtor = match this.test_null(dtor)? {\n@@ -290,23 +290,23 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             \"pthread_key_delete\" => {\n                 let &[key] = check_arg_count(args)?;\n-                let key = this.force_bits(this.read_scalar(key)?.not_undef()?, key.layout.size)?;\n+                let key = this.force_bits(this.read_scalar(key)?.check_init()?, key.layout.size)?;\n                 this.machine.tls.delete_tls_key(key)?;\n                 // Return success (0)\n                 this.write_null(dest)?;\n             }\n             \"pthread_getspecific\" => {\n                 let &[key] = check_arg_count(args)?;\n-                let key = this.force_bits(this.read_scalar(key)?.not_undef()?, key.layout.size)?;\n+                let key = this.force_bits(this.read_scalar(key)?.check_init()?, key.layout.size)?;\n                 let active_thread = this.get_active_thread();\n                 let ptr = this.machine.tls.load_tls(key, active_thread, this)?;\n                 this.write_scalar(ptr, dest)?;\n             }\n             \"pthread_setspecific\" => {\n                 let &[key, new_ptr] = check_arg_count(args)?;\n-                let key = this.force_bits(this.read_scalar(key)?.not_undef()?, key.layout.size)?;\n+                let key = this.force_bits(this.read_scalar(key)?.check_init()?, key.layout.size)?;\n                 let active_thread = this.get_active_thread();\n-                let new_ptr = this.read_scalar(new_ptr)?.not_undef()?;\n+                let new_ptr = this.read_scalar(new_ptr)?.check_init()?;\n                 this.machine.tls.store_tls(key, active_thread, this.test_null(new_ptr)?)?;\n \n                 // Return success (`0`).\n@@ -462,9 +462,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             \"pthread_atfork\" => {\n                 let &[prepare, parent, child] = check_arg_count(args)?;\n-                this.force_bits(this.read_scalar(prepare)?.not_undef()?, this.memory.pointer_size())?;\n-                this.force_bits(this.read_scalar(parent)?.not_undef()?, this.memory.pointer_size())?;\n-                this.force_bits(this.read_scalar(child)?.not_undef()?, this.memory.pointer_size())?;\n+                this.force_bits(this.read_scalar(prepare)?.check_init()?, this.memory.pointer_size())?;\n+                this.force_bits(this.read_scalar(parent)?.check_init()?, this.memory.pointer_size())?;\n+                this.force_bits(this.read_scalar(child)?.check_init()?, this.memory.pointer_size())?;\n                 // We do not support forking, so there is nothing to do here.\n                 this.write_null(dest)?;\n             }"}, {"sha": "a50228a4847c6763452d31c1b91f19f9878a5717", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=5161ba346c646914b4992aa9cc97d0e4309128b6", "patch": "@@ -81,7 +81,7 @@ trait EvalContextExtPrivate<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, '\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        let path_scalar = this.read_scalar(path_op)?.not_undef()?;\n+        let path_scalar = this.read_scalar(path_op)?.check_init()?;\n         let path = this.read_path_from_c_str(path_scalar)?.into_owned();\n \n         let metadata = match FileMetadata::from_path(this, &path, follow_symlink)? {\n@@ -334,7 +334,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             throw_unsup_format!(\"unsupported flags {:#x}\", flag & !mirror);\n         }\n \n-        let path = this.read_path_from_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n+        let path = this.read_path_from_c_str(this.read_scalar(path_op)?.check_init()?)?;\n \n         let fd = options.open(&path).map(|file| {\n             let fh = &mut this.machine.file_handler;\n@@ -558,7 +558,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"unlink\")?;\n \n-        let path = this.read_path_from_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n+        let path = this.read_path_from_c_str(this.read_scalar(path_op)?.check_init()?)?;\n \n         let result = remove_file(path).map(|_| 0);\n         this.try_unwrap_io_result(result)\n@@ -588,8 +588,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"symlink\")?;\n \n-        let target = this.read_path_from_c_str(this.read_scalar(target_op)?.not_undef()?)?;\n-        let linkpath = this.read_path_from_c_str(this.read_scalar(linkpath_op)?.not_undef()?)?;\n+        let target = this.read_path_from_c_str(this.read_scalar(target_op)?.check_init()?)?;\n+        let linkpath = this.read_path_from_c_str(this.read_scalar(linkpath_op)?.check_init()?)?;\n \n         let result = create_link(&target, &linkpath).map(|_| 0);\n         this.try_unwrap_io_result(result)\n@@ -651,8 +651,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.assert_target_os(\"linux\", \"statx\");\n         this.check_no_isolation(\"statx\")?;\n \n-        let statxbuf_scalar = this.read_scalar(statxbuf_op)?.not_undef()?;\n-        let pathname_scalar = this.read_scalar(pathname_op)?.not_undef()?;\n+        let statxbuf_scalar = this.read_scalar(statxbuf_op)?.check_init()?;\n+        let pathname_scalar = this.read_scalar(pathname_op)?.check_init()?;\n \n         // If the statxbuf or pathname pointers are null, the function fails with `EFAULT`.\n         if this.is_null(statxbuf_scalar)? || this.is_null(pathname_scalar)? {\n@@ -810,8 +810,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"rename\")?;\n \n-        let oldpath_scalar = this.read_scalar(oldpath_op)?.not_undef()?;\n-        let newpath_scalar = this.read_scalar(newpath_op)?.not_undef()?;\n+        let oldpath_scalar = this.read_scalar(oldpath_op)?.check_init()?;\n+        let newpath_scalar = this.read_scalar(newpath_op)?.check_init()?;\n \n         if this.is_null(oldpath_scalar)? || this.is_null(newpath_scalar)? {\n             let efault = this.eval_libc(\"EFAULT\")?;\n@@ -838,12 +838,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         #[cfg_attr(not(unix), allow(unused_variables))]\n         let mode = if this.tcx.sess.target.target.target_os == \"macos\" {\n-            u32::from(this.read_scalar(mode_op)?.not_undef()?.to_u16()?)\n+            u32::from(this.read_scalar(mode_op)?.check_init()?.to_u16()?)\n         } else {\n             this.read_scalar(mode_op)?.to_u32()?\n         };\n \n-        let path = this.read_path_from_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n+        let path = this.read_path_from_c_str(this.read_scalar(path_op)?.check_init()?)?;\n \n         #[cfg_attr(not(unix), allow(unused_mut))]\n         let mut builder = DirBuilder::new();\n@@ -869,7 +869,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"rmdir\")?;\n \n-        let path = this.read_path_from_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n+        let path = this.read_path_from_c_str(this.read_scalar(path_op)?.check_init()?)?;\n \n         let result = remove_dir(path).map(|_| 0i32);\n \n@@ -881,7 +881,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.check_no_isolation(\"opendir\")?;\n \n-        let name = this.read_path_from_c_str(this.read_scalar(name_op)?.not_undef()?)?;\n+        let name = this.read_path_from_c_str(this.read_scalar(name_op)?.check_init()?)?;\n \n         let result = read_dir(name);\n "}, {"sha": "ccb0ef8226e6fd8900a2093031ead4ec4083ef3d", "filename": "src/shims/posix/linux/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs?ref=5161ba346c646914b4992aa9cc97d0e4309128b6", "patch": "@@ -181,7 +181,7 @@ fn getrandom<'tcx>(\n     flags: OpTy<'tcx, Tag>,\n     dest: PlaceTy<'tcx, Tag>,\n ) -> InterpResult<'tcx> {\n-    let ptr = this.read_scalar(ptr)?.not_undef()?;\n+    let ptr = this.read_scalar(ptr)?.check_init()?;\n     let len = this.read_scalar(len)?.to_machine_usize(this)?;\n \n     // The only supported flags are GRND_RANDOM and GRND_NONBLOCK,"}, {"sha": "0236b10e5fc8ece347bb52b0baca1080f5f6954f", "filename": "src/shims/posix/macos/dlsym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Fposix%2Fmacos%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Fposix%2Fmacos%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fmacos%2Fdlsym.rs?ref=5161ba346c646914b4992aa9cc97d0e4309128b6", "patch": "@@ -35,7 +35,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         match dlsym {\n             Dlsym::getentropy => {\n                 let &[ptr, len] = check_arg_count(args)?;\n-                let ptr = this.read_scalar(ptr)?.not_undef()?;\n+                let ptr = this.read_scalar(ptr)?.check_init()?;\n                 let len = this.read_scalar(len)?.to_machine_usize(this)?;\n                 this.gen_random(ptr, len)?;\n                 this.write_null(dest)?;"}, {"sha": "2e7258c800ac360877ef6de9c1c53a2bf0863533", "filename": "src/shims/posix/macos/foreign_items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fmacos%2Fforeign_items.rs?ref=5161ba346c646914b4992aa9cc97d0e4309128b6", "patch": "@@ -98,9 +98,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Thread-local storage\n             \"_tlv_atexit\" => {\n                 let &[dtor, data] = check_arg_count(args)?;\n-                let dtor = this.read_scalar(dtor)?.not_undef()?;\n+                let dtor = this.read_scalar(dtor)?.check_init()?;\n                 let dtor = this.memory.get_fn(dtor)?.as_instance()?;\n-                let data = this.read_scalar(data)?.not_undef()?;\n+                let data = this.read_scalar(data)?.check_init()?;\n                 let active_thread = this.get_active_thread();\n                 this.machine.tls.set_macos_thread_dtor(active_thread, dtor, data)?;\n             }\n@@ -122,7 +122,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Threading\n             \"pthread_setname_np\" => {\n                 let &[name] = check_arg_count(args)?;\n-                let name = this.read_scalar(name)?.not_undef()?;\n+                let name = this.read_scalar(name)?.check_init()?;\n                 this.pthread_setname_np(name)?;\n             }\n \n@@ -131,7 +131,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"mmap\" if this.frame().instance.to_string().starts_with(\"std::sys::unix::\") => {\n                 // This is a horrible hack, but since the guard page mechanism calls mmap and expects a particular return value, we just give it that value.\n                 let &[addr, _, _, _, _, _] = check_arg_count(args)?;\n-                let addr = this.read_scalar(addr)?.not_undef()?;\n+                let addr = this.read_scalar(addr)?.check_init()?;\n                 this.write_scalar(addr, dest)?;\n             }\n "}, {"sha": "28a45b194771eb6c5c55c92e328d38598ada16f1", "filename": "src/shims/posix/sync.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Fposix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Fposix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fsync.rs?ref=5161ba346c646914b4992aa9cc97d0e4309128b6", "patch": "@@ -288,7 +288,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        let kind = this.read_scalar(kind_op)?.not_undef()?;\n+        let kind = this.read_scalar(kind_op)?.check_init()?;\n         if kind == this.eval_libc(\"PTHREAD_MUTEX_NORMAL\")? {\n             // In `glibc` implementation, the numeric values of\n             // `PTHREAD_MUTEX_NORMAL` and `PTHREAD_MUTEX_DEFAULT` are equal.\n@@ -337,11 +337,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        let attr = this.read_scalar(attr_op)?.not_undef()?;\n+        let attr = this.read_scalar(attr_op)?.check_init()?;\n         let kind = if this.is_null(attr)? {\n             this.eval_libc(\"PTHREAD_MUTEX_DEFAULT\")?\n         } else {\n-            mutexattr_get_kind(this, attr_op)?.not_undef()?\n+            mutexattr_get_kind(this, attr_op)?.check_init()?\n         };\n \n         // Write 0 to use the same code path as the static initializers.\n@@ -355,7 +355,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_mutex_lock(&mut self, mutex_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        let kind = mutex_get_kind(this, mutex_op)?.not_undef()?;\n+        let kind = mutex_get_kind(this, mutex_op)?.check_init()?;\n         let id = mutex_get_or_create_id(this, mutex_op)?;\n         let active_thread = this.get_active_thread();\n \n@@ -392,7 +392,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_mutex_trylock(&mut self, mutex_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        let kind = mutex_get_kind(this, mutex_op)?.not_undef()?;\n+        let kind = mutex_get_kind(this, mutex_op)?.check_init()?;\n         let id = mutex_get_or_create_id(this, mutex_op)?;\n         let active_thread = this.get_active_thread();\n \n@@ -425,7 +425,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn pthread_mutex_unlock(&mut self, mutex_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        let kind = mutex_get_kind(this, mutex_op)?.not_undef()?;\n+        let kind = mutex_get_kind(this, mutex_op)?.check_init()?;\n         let id = mutex_get_or_create_id(this, mutex_op)?;\n         let active_thread = this.get_active_thread();\n \n@@ -589,7 +589,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        let clock_id = this.read_scalar(clock_id_op)?.not_undef()?;\n+        let clock_id = this.read_scalar(clock_id_op)?.check_init()?;\n         if clock_id == this.eval_libc(\"CLOCK_REALTIME\")?\n             || clock_id == this.eval_libc(\"CLOCK_MONOTONIC\")?\n         {\n@@ -630,11 +630,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        let attr = this.read_scalar(attr_op)?.not_undef()?;\n+        let attr = this.read_scalar(attr_op)?.check_init()?;\n         let clock_id = if this.is_null(attr)? {\n             this.eval_libc(\"CLOCK_REALTIME\")?\n         } else {\n-            condattr_get_clock_id(this, attr_op)?.not_undef()?\n+            condattr_get_clock_id(this, attr_op)?.check_init()?\n         };\n \n         // Write 0 to use the same code path as the static initializers."}, {"sha": "7c9c489e6fb4c076510cca61b76ed693811b636b", "filename": "src/shims/posix/thread.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Fposix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Fposix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fthread.rs?ref=5161ba346c646914b4992aa9cc97d0e4309128b6", "patch": "@@ -29,7 +29,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             thread_info_place.into(),\n         )?;\n \n-        let fn_ptr = this.read_scalar(start_routine)?.not_undef()?;\n+        let fn_ptr = this.read_scalar(start_routine)?.check_init()?;\n         let instance = this.memory.get_fn(fn_ptr)?.as_instance()?;\n \n         let func_arg = this.read_immediate(arg)?;\n@@ -59,7 +59,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        if !this.is_null(this.read_scalar(retval)?.not_undef()?)? {\n+        if !this.is_null(this.read_scalar(retval)?.check_init()?)? {\n             // FIXME: implement reading the thread function's return place.\n             throw_unsup_format!(\"Miri supports pthread_join only with retval==NULL\");\n         }\n@@ -99,15 +99,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let option = this.read_scalar(option)?.to_i32()?;\n         if option == this.eval_libc_i32(\"PR_SET_NAME\")? {\n-            let address = this.read_scalar(arg2)?.not_undef()?;\n+            let address = this.read_scalar(arg2)?.check_init()?;\n             let mut name = this.memory.read_c_str(address)?.to_owned();\n             // The name should be no more than 16 bytes, including the null\n             // byte. Since `read_c_str` returns the string without the null\n             // byte, we need to truncate to 15.\n             name.truncate(15);\n             this.set_active_thread_name(name);\n         } else if option == this.eval_libc_i32(\"PR_GET_NAME\")? {\n-            let address = this.read_scalar(arg2)?.not_undef()?;\n+            let address = this.read_scalar(arg2)?.check_init()?;\n             let mut name = this.get_active_thread_name().to_vec();\n             name.push(0u8);\n             assert!(name.len() <= 16);"}, {"sha": "193c87f7f099a7d5ee923e6879ceec51d2ffb763", "filename": "src/shims/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftime.rs?ref=5161ba346c646914b4992aa9cc97d0e4309128b6", "patch": "@@ -62,7 +62,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.check_no_isolation(\"gettimeofday\")?;\n \n         // Using tz is obsolete and should always be null\n-        let tz = this.read_scalar(tz_op)?.not_undef()?;\n+        let tz = this.read_scalar(tz_op)?.check_init()?;\n         if !this.is_null(tz)? {\n             let einval = this.eval_libc(\"EINVAL\")?;\n             this.set_last_error(einval)?;"}, {"sha": "8d05442ad6bc0604ea486a8783df2aee1bd01efc", "filename": "src/shims/tls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=5161ba346c646914b4992aa9cc97d0e4309128b6", "patch": "@@ -237,7 +237,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // we specifically look up the static in libstd that we know is placed\n         // in that section.\n         let thread_callback = this.eval_path_scalar(&[\"std\", \"sys\", \"windows\", \"thread_local_key\", \"p_thread_callback\"])?;\n-        let thread_callback = this.memory.get_fn(thread_callback.not_undef()?)?.as_instance()?;\n+        let thread_callback = this.memory.get_fn(thread_callback.check_init()?)?.as_instance()?;\n \n         // The signature of this function is `unsafe extern \"system\" fn(h: c::LPVOID, dwReason: c::DWORD, pv: c::LPVOID)`.\n         let reason = this.eval_path_scalar(&[\"std\", \"sys\", \"windows\", \"c\", \"DLL_THREAD_DETACH\"])?;"}, {"sha": "fc1093b64fb4bfc971ae8a2d735307ea7bbed3db", "filename": "src/shims/windows/foreign_items.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5161ba346c646914b4992aa9cc97d0e4309128b6/src%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fforeign_items.rs?ref=5161ba346c646914b4992aa9cc97d0e4309128b6", "patch": "@@ -67,7 +67,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let &[handle, buf, n, written_ptr, overlapped] = check_arg_count(args)?;\n                 this.read_scalar(overlapped)?.to_machine_usize(this)?; // this is a poiner, that we ignore\n                 let handle = this.read_scalar(handle)?.to_machine_isize(this)?;\n-                let buf = this.read_scalar(buf)?.not_undef()?;\n+                let buf = this.read_scalar(buf)?.check_init()?;\n                 let n = this.read_scalar(n)?.to_u32()?;\n                 let written_place = this.deref_operand(written_ptr)?;\n                 // Spec says to always write `0` first.\n@@ -111,15 +111,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let &[handle, flags, ptr] = check_arg_count(args)?;\n                 this.read_scalar(handle)?.to_machine_isize(this)?;\n                 this.read_scalar(flags)?.to_u32()?;\n-                let ptr = this.read_scalar(ptr)?.not_undef()?;\n+                let ptr = this.read_scalar(ptr)?.check_init()?;\n                 this.free(ptr, MiriMemoryKind::WinHeap)?;\n                 this.write_scalar(Scalar::from_i32(1), dest)?;\n             }\n             \"HeapReAlloc\" => {\n                 let &[handle, flags, ptr, size] = check_arg_count(args)?;\n                 this.read_scalar(handle)?.to_machine_isize(this)?;\n                 this.read_scalar(flags)?.to_u32()?;\n-                let ptr = this.read_scalar(ptr)?.not_undef()?;\n+                let ptr = this.read_scalar(ptr)?.check_init()?;\n                 let size = this.read_scalar(size)?.to_machine_usize(this)?;\n                 let res = this.realloc(ptr, size, MiriMemoryKind::WinHeap)?;\n                 this.write_scalar(res, dest)?;\n@@ -128,7 +128,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // errno\n             \"SetLastError\" => {\n                 let &[error] = check_arg_count(args)?;\n-                let error = this.read_scalar(error)?.not_undef()?;\n+                let error = this.read_scalar(error)?.check_init()?;\n                 this.set_last_error(error)?;\n             }\n             \"GetLastError\" => {\n@@ -172,7 +172,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let &[key, new_ptr] = check_arg_count(args)?;\n                 let key = u128::from(this.read_scalar(key)?.to_u32()?);\n                 let active_thread = this.get_active_thread();\n-                let new_ptr = this.read_scalar(new_ptr)?.not_undef()?;\n+                let new_ptr = this.read_scalar(new_ptr)?.check_init()?;\n                 this.machine.tls.store_tls(key, active_thread, this.test_null(new_ptr)?)?;\n \n                 // Return success (`1`).\n@@ -212,7 +212,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 #[allow(non_snake_case)]\n                 let &[hModule, lpProcName] = check_arg_count(args)?;\n                 this.read_scalar(hModule)?.to_machine_isize(this)?;\n-                let name = this.memory.read_c_str(this.read_scalar(lpProcName)?.not_undef()?)?;\n+                let name = this.memory.read_c_str(this.read_scalar(lpProcName)?.check_init()?)?;\n                 if let Some(dlsym) = Dlsym::from_str(name, &this.tcx.sess.target.target.target_os)? {\n                     let ptr = this.memory.create_fn_alloc(FnVal::Other(dlsym));\n                     this.write_scalar(Scalar::from(ptr), dest)?;\n@@ -225,7 +225,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"SystemFunction036\" => {\n                 // The actual name of 'RtlGenRandom'\n                 let &[ptr, len] = check_arg_count(args)?;\n-                let ptr = this.read_scalar(ptr)?.not_undef()?;\n+                let ptr = this.read_scalar(ptr)?.check_init()?;\n                 let len = this.read_scalar(len)?.to_u32()?;\n                 this.gen_random(ptr, len.into())?;\n                 this.write_scalar(Scalar::from_bool(true), dest)?;"}]}