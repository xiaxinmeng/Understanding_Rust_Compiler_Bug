{"sha": "27f5d0f208e12176c614d6ffbd410f7b53ed9eed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ZjVkMGYyMDhlMTIxNzZjNjE0ZDZmZmJkNDEwZjdiNTNlZDllZWQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-19T07:56:34Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-20T07:28:12Z"}, "message": "Arc: refactor away PhantomData noise.", "tree": {"sha": "041e06db27c2938aef700b5f3b1ca92d4a7259af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/041e06db27c2938aef700b5f3b1ca92d4a7259af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27f5d0f208e12176c614d6ffbd410f7b53ed9eed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27f5d0f208e12176c614d6ffbd410f7b53ed9eed", "html_url": "https://github.com/rust-lang/rust/commit/27f5d0f208e12176c614d6ffbd410f7b53ed9eed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27f5d0f208e12176c614d6ffbd410f7b53ed9eed/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "353c8eb828ec7a68621334b91bf0f01eaf3ed769", "url": "https://api.github.com/repos/rust-lang/rust/commits/353c8eb828ec7a68621334b91bf0f01eaf3ed769", "html_url": "https://github.com/rust-lang/rust/commit/353c8eb828ec7a68621334b91bf0f01eaf3ed769"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "de47e164c9201ca37afda5fb1117650f02fb43e3", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/27f5d0f208e12176c614d6ffbd410f7b53ed9eed/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27f5d0f208e12176c614d6ffbd410f7b53ed9eed/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=27f5d0f208e12176c614d6ffbd410f7b53ed9eed", "patch": "@@ -206,6 +206,19 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Arc<U>> for Arc<T> {}\n #[unstable(feature = \"dispatch_from_dyn\", issue = \"0\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Arc<U>> for Arc<T> {}\n \n+impl<T: ?Sized> Arc<T> {\n+    fn from_inner(ptr: NonNull<ArcInner<T>>) -> Self {\n+        Self {\n+            ptr,\n+            phantom: PhantomData,\n+        }\n+    }\n+\n+    unsafe fn from_ptr(ptr: *mut ArcInner<T>) -> Self {\n+        Self::from_inner(NonNull::new_unchecked(ptr))\n+    }\n+}\n+\n /// `Weak` is a version of [`Arc`] that holds a non-owning reference to the\n /// managed value. The value is accessed by calling [`upgrade`] on the `Weak`\n /// pointer, which returns an [`Option`]`<`[`Arc`]`<T>>`.\n@@ -290,7 +303,7 @@ impl<T> Arc<T> {\n             weak: atomic::AtomicUsize::new(1),\n             data,\n         };\n-        Arc { ptr: Box::into_raw_non_null(x), phantom: PhantomData }\n+        Self::from_inner(Box::into_raw_non_null(x))\n     }\n \n     /// Constructs a new `Pin<Arc<T>>`. If `T` does not implement `Unpin`, then\n@@ -403,10 +416,7 @@ impl<T: ?Sized> Arc<T> {\n         let fake_ptr = ptr as *mut ArcInner<T>;\n         let arc_ptr = set_data_ptr(fake_ptr, (ptr as *mut u8).offset(-offset));\n \n-        Arc {\n-            ptr: NonNull::new_unchecked(arc_ptr),\n-            phantom: PhantomData,\n-        }\n+        Self::from_ptr(arc_ptr)\n     }\n \n     /// Consumes the `Arc`, returning the wrapped pointer as `NonNull<T>`.\n@@ -617,7 +627,7 @@ impl<T: ?Sized> Arc<T> {\n             // Free the allocation without dropping its contents\n             box_free(box_unique);\n \n-            Arc { ptr: NonNull::new_unchecked(ptr), phantom: PhantomData }\n+            Self::from_ptr(ptr)\n         }\n     }\n }\n@@ -644,7 +654,7 @@ impl<T> Arc<[T]> {\n             &mut (*ptr).data as *mut [T] as *mut T,\n             v.len());\n \n-        Arc { ptr: NonNull::new_unchecked(ptr), phantom: PhantomData }\n+        Self::from_ptr(ptr)\n     }\n }\n \n@@ -702,7 +712,7 @@ impl<T: Clone> ArcFromSlice<T> for Arc<[T]> {\n             // All clear. Forget the guard so it doesn't free the new ArcInner.\n             mem::forget(guard);\n \n-            Arc { ptr: NonNull::new_unchecked(ptr), phantom: PhantomData }\n+            Self::from_ptr(ptr)\n         }\n     }\n }\n@@ -760,7 +770,7 @@ impl<T: ?Sized> Clone for Arc<T> {\n             }\n         }\n \n-        Arc { ptr: self.ptr, phantom: PhantomData }\n+        Self::from_inner(self.ptr)\n     }\n }\n \n@@ -1039,7 +1049,7 @@ impl Arc<dyn Any + Send + Sync> {\n         if (*self).is::<T>() {\n             let ptr = self.ptr.cast::<ArcInner<T>>();\n             mem::forget(self);\n-            Ok(Arc { ptr, phantom: PhantomData })\n+            Ok(Arc::from_inner(ptr))\n         } else {\n             Err(self)\n         }\n@@ -1260,11 +1270,7 @@ impl<T: ?Sized> Weak<T> {\n \n             // Relaxed is valid for the same reason it is on Arc's Clone impl\n             match inner.strong.compare_exchange_weak(n, n + 1, Relaxed, Relaxed) {\n-                Ok(_) => return Some(Arc {\n-                    // null checked above\n-                    ptr: self.ptr,\n-                    phantom: PhantomData,\n-                }),\n+                Ok(_) => return Some(Arc::from_inner(self.ptr)), // null checked above\n                 Err(old) => n = old,\n             }\n         }"}]}