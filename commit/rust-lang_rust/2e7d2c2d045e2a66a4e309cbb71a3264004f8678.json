{"sha": "2e7d2c2d045e2a66a4e309cbb71a3264004f8678", "node_id": "C_kwDOAAsO6NoAKDJlN2QyYzJkMDQ1ZTJhNjZhNGUzMDljYmI3MWEzMjY0MDA0Zjg2Nzg", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-03-03T15:23:56Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-03-03T15:23:56Z"}, "message": "Parse trait alias as a distinct AST type", "tree": {"sha": "c8da7ff5cbc0b2ca0def352fb807213212d49097", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8da7ff5cbc0b2ca0def352fb807213212d49097"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e7d2c2d045e2a66a4e309cbb71a3264004f8678", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmQCEQwACgkQ4laYqTBY\nYXF+5RAAgdi/IWqOHJKtZhPzt+ycvxAQlOwynvEokEBDL9fHDee0kWJzPQi80jdt\nCbqgLP03I/eW+MBF/Eyfgnt31SwzQxKtH3G5JJ4Oj3PlfTs5Ir9MrUBcks00oL3j\nZxorMPFZUbmcJ2QyWpR9ZmdF32sh/WE9yxq1CVaHwSaCJ80NvEPlBwqQUgJ4jKTl\nZYEJQGG4R4YQBO0NMjnQtynmISsTMiqBaUxmG8f+yCnJy9oN/6kaQuuetnIFdqiF\nGNAPDMyImUs08Z6mqqHEwY++VmtrXBuhoCqVvK611K5MLmgWzktga5XfmMVhYjWZ\nseean52+3mNuqV5FVkPHyEAlJTKWI/nTJDtX1DcEIq2c6BUIe9wuW3Mfio7D8Z4P\nCxzdyD0LXhmGPypiK0QClERalk+HHTXsxTd0P4HPYh2DBiYzYQmXBb0jwsBjFd+7\nucjRMJfhVxPCRbEQRalltlSG+dA/aeKsh/PDaQhwqKSaV8hKMuDu21toh+i7LGq3\nGQ5R2065xbFlrqhBdKBoDp28CSbCvKN/1RJqWbWqkoaK2X4JUpaK4lStYtdovH+W\nUSxn7yPAFHkWQVp6KhoEii3wi/FpKldRm0LLUlorYmViW2vnmbjyJ7NEFn51CkDD\nGFGAR5WlNtfbiQqWL4/f9xB2TXGOdc5tFUc/+C+Mobty+kMQL9w=\n=VNNF\n-----END PGP SIGNATURE-----", "payload": "tree c8da7ff5cbc0b2ca0def352fb807213212d49097\nparent 9b441b9c67531481c7c18cd09b2397c0591ae63f\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1677857036 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1677857036 +0900\n\nParse trait alias as a distinct AST type\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e7d2c2d045e2a66a4e309cbb71a3264004f8678", "html_url": "https://github.com/rust-lang/rust/commit/2e7d2c2d045e2a66a4e309cbb71a3264004f8678", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e7d2c2d045e2a66a4e309cbb71a3264004f8678/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b441b9c67531481c7c18cd09b2397c0591ae63f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b441b9c67531481c7c18cd09b2397c0591ae63f", "html_url": "https://github.com/rust-lang/rust/commit/9b441b9c67531481c7c18cd09b2397c0591ae63f"}], "stats": {"total": 113, "additions": 103, "deletions": 10}, "files": [{"sha": "bd7c556ae69db0b0abd44e1b7cb65eaa847b5fde", "filename": "crates/hir-def/src/item_tree/lower.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e7d2c2d045e2a66a4e309cbb71a3264004f8678/crates%2Fhir-def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7d2c2d045e2a66a4e309cbb71a3264004f8678/crates%2Fhir-def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fitem_tree%2Flower.rs?ref=2e7d2c2d045e2a66a4e309cbb71a3264004f8678", "patch": "@@ -110,6 +110,7 @@ impl<'a> Ctx<'a> {\n             ast::Item::Const(ast) => self.lower_const(ast).into(),\n             ast::Item::Module(ast) => self.lower_module(ast)?.into(),\n             ast::Item::Trait(ast) => self.lower_trait(ast)?.into(),\n+            ast::Item::TraitAlias(_) => return None,\n             ast::Item::Impl(ast) => self.lower_impl(ast)?.into(),\n             ast::Item::Use(ast) => self.lower_use(ast)?.into(),\n             ast::Item::ExternCrate(ast) => self.lower_extern_crate(ast)?.into(),"}, {"sha": "a8a1ccb15e6c21cc14134a4ac59fdc2d34407e76", "filename": "crates/parser/src/grammar/items/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e7d2c2d045e2a66a4e309cbb71a3264004f8678/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7d2c2d045e2a66a4e309cbb71a3264004f8678/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs?ref=2e7d2c2d045e2a66a4e309cbb71a3264004f8678", "patch": "@@ -20,7 +20,7 @@ pub(super) fn trait_(p: &mut Parser<'_>, m: Marker) {\n         // trait Z<U> = where Self: T<U>;\n         generic_params::opt_where_clause(p);\n         p.expect(T![;]);\n-        m.complete(p, TRAIT);\n+        m.complete(p, TRAIT_ALIAS);\n         return;\n     }\n "}, {"sha": "cd87b304a2fb3e5ae894b3a998274919451a3650", "filename": "crates/parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e7d2c2d045e2a66a4e309cbb71a3264004f8678/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7d2c2d045e2a66a4e309cbb71a3264004f8678/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=2e7d2c2d045e2a66a4e309cbb71a3264004f8678", "patch": "@@ -135,6 +135,7 @@ pub enum SyntaxKind {\n     STATIC,\n     CONST,\n     TRAIT,\n+    TRAIT_ALIAS,\n     IMPL,\n     TYPE_ALIAS,\n     MACRO_CALL,"}, {"sha": "c45f870898007e52fae3631cc054f55a360c0bc5", "filename": "crates/parser/test_data/parser/inline/ok/0151_trait_alias.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e7d2c2d045e2a66a4e309cbb71a3264004f8678/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0151_trait_alias.rast", "raw_url": "https://github.com/rust-lang/rust/raw/2e7d2c2d045e2a66a4e309cbb71a3264004f8678/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0151_trait_alias.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0151_trait_alias.rast?ref=2e7d2c2d045e2a66a4e309cbb71a3264004f8678", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE\n-  TRAIT\n+  TRAIT_ALIAS\n     TRAIT_KW \"trait\"\n     WHITESPACE \" \"\n     NAME"}, {"sha": "8f678247731dc3ed6b57660e631db4ec3380c4b0", "filename": "crates/parser/test_data/parser/inline/ok/0177_trait_alias_where_clause.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e7d2c2d045e2a66a4e309cbb71a3264004f8678/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0177_trait_alias_where_clause.rast", "raw_url": "https://github.com/rust-lang/rust/raw/2e7d2c2d045e2a66a4e309cbb71a3264004f8678/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0177_trait_alias_where_clause.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0177_trait_alias_where_clause.rast?ref=2e7d2c2d045e2a66a4e309cbb71a3264004f8678", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE\n-  TRAIT\n+  TRAIT_ALIAS\n     TRAIT_KW \"trait\"\n     WHITESPACE \" \"\n     NAME\n@@ -50,7 +50,7 @@ SOURCE_FILE\n                     IDENT \"Copy\"\n     SEMICOLON \";\"\n   WHITESPACE \"\\n\"\n-  TRAIT\n+  TRAIT_ALIAS\n     TRAIT_KW \"trait\"\n     WHITESPACE \" \"\n     NAME"}, {"sha": "548b5ba8b8b6d97797859e7616e74747e06b4657", "filename": "crates/syntax/rust.ungram", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2e7d2c2d045e2a66a4e309cbb71a3264004f8678/crates%2Fsyntax%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/2e7d2c2d045e2a66a4e309cbb71a3264004f8678/crates%2Fsyntax%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Frust.ungram?ref=2e7d2c2d045e2a66a4e309cbb71a3264004f8678", "patch": "@@ -97,6 +97,7 @@ Item =\n | Static\n | Struct\n | Trait\n+| TraitAlias\n | TypeAlias\n | Union\n | Use\n@@ -240,10 +241,11 @@ Trait =\n   Attr* Visibility?\n   'unsafe'? 'auto'?\n   'trait' Name GenericParamList?\n-  (\n-    (':' TypeBoundList?)? WhereClause? AssocItemList\n-    | '=' TypeBoundList? WhereClause? ';'\n-  )\n+  (':' TypeBoundList?)? WhereClause? AssocItemList\n+\n+TraitAlias =\n+  Attr* Visibility?\n+  'trait' Name GenericParamList? '=' TypeBoundList? WhereClause? ';'\n \n AssocItemList =\n   '{' Attr* AssocItem* '}'"}, {"sha": "745f2e14e95c8dcd0b152c83f7f6e61359ce4828", "filename": "crates/syntax/src/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e7d2c2d045e2a66a4e309cbb71a3264004f8678/crates%2Fsyntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7d2c2d045e2a66a4e309cbb71a3264004f8678/crates%2Fsyntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast.rs?ref=2e7d2c2d045e2a66a4e309cbb71a3264004f8678", "patch": "@@ -25,7 +25,8 @@ pub use self::{\n     generated::{nodes::*, tokens::*},\n     node_ext::{\n         AttrKind, FieldKind, Macro, NameLike, NameOrNameRef, PathSegmentKind, SelfParamKind,\n-        SlicePatComponents, StructKind, TypeBoundKind, TypeOrConstParam, VisibilityKind,\n+        SlicePatComponents, StructKind, TraitOrAlias, TypeBoundKind, TypeOrConstParam,\n+        VisibilityKind,\n     },\n     operators::{ArithOp, BinaryOp, CmpOp, LogicOp, Ordering, RangeOp, UnaryOp},\n     token_ext::{CommentKind, CommentPlacement, CommentShape, IsString, QuoteOffsets, Radix},"}, {"sha": "fe324845360d7b0ad95a3ff412628d74cf66fe73", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2e7d2c2d045e2a66a4e309cbb71a3264004f8678/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7d2c2d045e2a66a4e309cbb71a3264004f8678/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=2e7d2c2d045e2a66a4e309cbb71a3264004f8678", "patch": "@@ -407,7 +407,21 @@ impl Trait {\n     pub fn auto_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![auto]) }\n     pub fn trait_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![trait]) }\n     pub fn assoc_item_list(&self) -> Option<AssocItemList> { support::child(&self.syntax) }\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct TraitAlias {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ast::HasAttrs for TraitAlias {}\n+impl ast::HasName for TraitAlias {}\n+impl ast::HasVisibility for TraitAlias {}\n+impl ast::HasGenericParams for TraitAlias {}\n+impl ast::HasDocComments for TraitAlias {}\n+impl TraitAlias {\n+    pub fn trait_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![trait]) }\n     pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n+    pub fn type_bound_list(&self) -> Option<TypeBoundList> { support::child(&self.syntax) }\n     pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n }\n \n@@ -1573,6 +1587,7 @@ pub enum Item {\n     Static(Static),\n     Struct(Struct),\n     Trait(Trait),\n+    TraitAlias(TraitAlias),\n     TypeAlias(TypeAlias),\n     Union(Union),\n     Use(Use),\n@@ -2058,6 +2073,17 @@ impl AstNode for Trait {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for TraitAlias {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TRAIT_ALIAS }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for TypeAlias {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_ALIAS }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3570,6 +3596,9 @@ impl From<Struct> for Item {\n impl From<Trait> for Item {\n     fn from(node: Trait) -> Item { Item::Trait(node) }\n }\n+impl From<TraitAlias> for Item {\n+    fn from(node: TraitAlias) -> Item { Item::TraitAlias(node) }\n+}\n impl From<TypeAlias> for Item {\n     fn from(node: TypeAlias) -> Item { Item::TypeAlias(node) }\n }\n@@ -3596,6 +3625,7 @@ impl AstNode for Item {\n                 | STATIC\n                 | STRUCT\n                 | TRAIT\n+                | TRAIT_ALIAS\n                 | TYPE_ALIAS\n                 | UNION\n                 | USE\n@@ -3616,6 +3646,7 @@ impl AstNode for Item {\n             STATIC => Item::Static(Static { syntax }),\n             STRUCT => Item::Struct(Struct { syntax }),\n             TRAIT => Item::Trait(Trait { syntax }),\n+            TRAIT_ALIAS => Item::TraitAlias(TraitAlias { syntax }),\n             TYPE_ALIAS => Item::TypeAlias(TypeAlias { syntax }),\n             UNION => Item::Union(Union { syntax }),\n             USE => Item::Use(Use { syntax }),\n@@ -3638,6 +3669,7 @@ impl AstNode for Item {\n             Item::Static(it) => &it.syntax,\n             Item::Struct(it) => &it.syntax,\n             Item::Trait(it) => &it.syntax,\n+            Item::TraitAlias(it) => &it.syntax,\n             Item::TypeAlias(it) => &it.syntax,\n             Item::Union(it) => &it.syntax,\n             Item::Use(it) => &it.syntax,\n@@ -3950,6 +3982,7 @@ impl AstNode for AnyHasAttrs {\n                 | STATIC\n                 | STRUCT\n                 | TRAIT\n+                | TRAIT_ALIAS\n                 | TYPE_ALIAS\n                 | UNION\n                 | USE\n@@ -4035,6 +4068,7 @@ impl AstNode for AnyHasDocComments {\n                 | STATIC\n                 | STRUCT\n                 | TRAIT\n+                | TRAIT_ALIAS\n                 | TYPE_ALIAS\n                 | UNION\n                 | USE\n@@ -4056,7 +4090,7 @@ impl AnyHasGenericParams {\n }\n impl AstNode for AnyHasGenericParams {\n     fn can_cast(kind: SyntaxKind) -> bool {\n-        matches!(kind, ENUM | FN | IMPL | STRUCT | TRAIT | TYPE_ALIAS | UNION)\n+        matches!(kind, ENUM | FN | IMPL | STRUCT | TRAIT | TRAIT_ALIAS | TYPE_ALIAS | UNION)\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         Self::can_cast(syntax.kind()).then_some(AnyHasGenericParams { syntax })\n@@ -4108,6 +4142,7 @@ impl AstNode for AnyHasName {\n                 | STATIC\n                 | STRUCT\n                 | TRAIT\n+                | TRAIT_ALIAS\n                 | TYPE_ALIAS\n                 | UNION\n                 | RENAME\n@@ -4163,6 +4198,7 @@ impl AstNode for AnyHasVisibility {\n                 | STATIC\n                 | STRUCT\n                 | TRAIT\n+                | TRAIT_ALIAS\n                 | TYPE_ALIAS\n                 | UNION\n                 | USE\n@@ -4391,6 +4427,11 @@ impl std::fmt::Display for Trait {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for TraitAlias {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for TypeAlias {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "301fbcebf1c88c4443ef32973c5443bca3510dc2", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2e7d2c2d045e2a66a4e309cbb71a3264004f8678/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7d2c2d045e2a66a4e309cbb71a3264004f8678/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=2e7d2c2d045e2a66a4e309cbb71a3264004f8678", "patch": "@@ -680,6 +680,51 @@ impl TypeOrConstParam {\n     }\n }\n \n+#[derive(Debug, Clone)]\n+pub enum TraitOrAlias {\n+    Trait(ast::Trait),\n+    TraitAlias(ast::TraitAlias),\n+}\n+\n+impl TraitOrAlias {\n+    pub fn name(&self) -> Option<ast::Name> {\n+        match self {\n+            TraitOrAlias::Trait(x) => x.name(),\n+            TraitOrAlias::TraitAlias(x) => x.name(),\n+        }\n+    }\n+}\n+\n+impl AstNode for TraitOrAlias {\n+    fn can_cast(kind: SyntaxKind) -> bool\n+    where\n+        Self: Sized,\n+    {\n+        matches!(kind, SyntaxKind::TRAIT | SyntaxKind::TRAIT_ALIAS)\n+    }\n+\n+    fn cast(syntax: SyntaxNode) -> Option<Self>\n+    where\n+        Self: Sized,\n+    {\n+        let res = match syntax.kind() {\n+            SyntaxKind::TRAIT => TraitOrAlias::Trait(ast::Trait { syntax }),\n+            SyntaxKind::TRAIT_ALIAS => TraitOrAlias::TraitAlias(ast::TraitAlias { syntax }),\n+            _ => return None,\n+        };\n+        Some(res)\n+    }\n+\n+    fn syntax(&self) -> &SyntaxNode {\n+        match self {\n+            TraitOrAlias::Trait(it) => it.syntax(),\n+            TraitOrAlias::TraitAlias(it) => it.syntax(),\n+        }\n+    }\n+}\n+\n+impl HasAttrs for TraitOrAlias {}\n+\n pub enum VisibilityKind {\n     In(ast::Path),\n     PubCrate,"}, {"sha": "ccce71966ff889455c8bb3e3184e38b382a140f6", "filename": "crates/syntax/src/tests/ast_src.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e7d2c2d045e2a66a4e309cbb71a3264004f8678/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7d2c2d045e2a66a4e309cbb71a3264004f8678/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs?ref=2e7d2c2d045e2a66a4e309cbb71a3264004f8678", "patch": "@@ -86,6 +86,7 @@ pub(crate) const KINDS_SRC: KindsSrc<'_> = KindsSrc {\n         \"STATIC\",\n         \"CONST\",\n         \"TRAIT\",\n+        \"TRAIT_ALIAS\",\n         \"IMPL\",\n         \"TYPE_ALIAS\",\n         \"MACRO_CALL\","}, {"sha": "e954b58251faaf5bac7664f3fd48dd1a57c26468", "filename": "crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e7d2c2d045e2a66a4e309cbb71a3264004f8678/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7d2c2d045e2a66a4e309cbb71a3264004f8678/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=2e7d2c2d045e2a66a4e309cbb71a3264004f8678", "patch": "@@ -783,6 +783,7 @@ fn extract_struct_traits(ast: &mut AstSrc) {\n         \"Enum\",\n         \"Variant\",\n         \"Trait\",\n+        \"TraitAlias\",\n         \"Module\",\n         \"Static\",\n         \"Const\","}]}