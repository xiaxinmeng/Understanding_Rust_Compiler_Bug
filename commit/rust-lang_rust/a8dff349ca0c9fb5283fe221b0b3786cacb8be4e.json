{"sha": "a8dff349ca0c9fb5283fe221b0b3786cacb8be4e", "node_id": "C_kwDOAAsO6NoAKGE4ZGZmMzQ5Y2EwYzlmYjUyODNmZTIyMWIwYjM3ODZjYWNiOGJlNGU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-10T17:52:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-10T17:52:26Z"}, "message": "Rollup merge of #88447 - inquisitivecrystal:rustdoc-vis, r=jyn514\n\nUse computed visibility in rustdoc\n\nThis PR changes `librustdoc` to use computed visibility instead of syntactic visibility. It was initially part of #88019, but was separated due to concerns that it might cause a regression somewhere we couldn't predict.\n\nr? `@jyn514`\ncc `@cjgillot` `@petrochenkov`", "tree": {"sha": "7a5d46be7ad830af81f2548ed9ea5a906f9a5109", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a5d46be7ad830af81f2548ed9ea5a906f9a5109"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhjAbaCRBK7hj4Ov3rIwAAh7gIAAr1Bkqy3GUS0wrW2DOCUYdh\n2ZvCFmLlDMZM+qfYNzRMgyxpop6nZVIUbuS6t+xqbZRXZKkimreQC0UjH64lR0Fo\ndFN0J5o7rgSrOEPZMCEqNZQXX9Zmv3Iab5b/SC6yDBCg1Kdwqg4FqQ90H/5JijbU\nOPKc9yNG92jkH2HIug4ryTBFq5VFMT7JtQ2s8UCfhYZufTktZlqg9QawP3yb3bMW\n2bPipH9J4laMw8cJ6bdzU/CGSTmUdmdtVJTYTenTkEPCtYawEOdIkLCgInVvYGxR\nZu9anXVgbzAgkqM8L6Ogm0T/S51RUIs22gn1HIXct1maF36Jxk/mNJGu9uWcEI0=\n=99yQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 7a5d46be7ad830af81f2548ed9ea5a906f9a5109\nparent 68ca579406f2fa9ec62710e4a4d5d3e07a168d3c\nparent 6622376ff65d5c5f60f8a8877b223bb69e9a9552\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1636566746 +0100\ncommitter GitHub <noreply@github.com> 1636566746 +0100\n\nRollup merge of #88447 - inquisitivecrystal:rustdoc-vis, r=jyn514\n\nUse computed visibility in rustdoc\n\nThis PR changes `librustdoc` to use computed visibility instead of syntactic visibility. It was initially part of #88019, but was separated due to concerns that it might cause a regression somewhere we couldn't predict.\n\nr? `@jyn514`\ncc `@cjgillot` `@petrochenkov`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e", "html_url": "https://github.com/rust-lang/rust/commit/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68ca579406f2fa9ec62710e4a4d5d3e07a168d3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/68ca579406f2fa9ec62710e4a4d5d3e07a168d3c", "html_url": "https://github.com/rust-lang/rust/commit/68ca579406f2fa9ec62710e4a4d5d3e07a168d3c"}, {"sha": "6622376ff65d5c5f60f8a8877b223bb69e9a9552", "url": "https://api.github.com/repos/rust-lang/rust/commits/6622376ff65d5c5f60f8a8877b223bb69e9a9552", "html_url": "https://github.com/rust-lang/rust/commit/6622376ff65d5c5f60f8a8877b223bb69e9a9552"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "b2c7818a542189e79382e475f39f44d4b67e4c72", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=a8dff349ca0c9fb5283fe221b0b3786cacb8be4e", "patch": "@@ -1179,7 +1179,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                             let ctor_res =\n                                 Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id);\n                             let mut vis = self.get_visibility(ctor_def_id.index);\n-                            if ctor_def_id == def_id && vis == ty::Visibility::Public {\n+                            if ctor_def_id == def_id && vis.is_public() {\n                                 // For non-exhaustive variants lower the constructor visibility to\n                                 // within the crate. We only need this for fictive constructors,\n                                 // for other constructors correct visibilities"}, {"sha": "eeb0a77adc0ad73b06de2d381df0f1e0f2e01ac8", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=a8dff349ca0c9fb5283fe221b0b3786cacb8be4e", "patch": "@@ -318,7 +318,7 @@ pub fn provide(providers: &mut Providers) {\n             }\n \n             let mut add_child = |bfs_queue: &mut VecDeque<_>, child: &Export, parent: DefId| {\n-                if child.vis != ty::Visibility::Public {\n+                if !child.vis.is_public() {\n                     return;\n                 }\n "}, {"sha": "673733faa766ff5846c02075833be4fba79c0cf7", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=a8dff349ca0c9fb5283fe221b0b3786cacb8be4e", "patch": "@@ -333,6 +333,10 @@ impl Visibility {\n             Visibility::Invisible => false,\n         }\n     }\n+\n+    pub fn is_public(self) -> bool {\n+        matches!(self, Visibility::Public)\n+    }\n }\n \n /// The crate variances map is computed during typeck and contains the"}, {"sha": "5d9e7aaf72f8eece66bbee1f08eaab6b1f74aa70", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=a8dff349ca0c9fb5283fe221b0b3786cacb8be4e", "patch": "@@ -2404,7 +2404,7 @@ fn for_each_def(tcx: TyCtxt<'_>, mut collect_fn: impl for<'b> FnMut(&'b Ident, N\n     // Iterate external crate defs but be mindful about visibility\n     while let Some(def) = queue.pop() {\n         for child in tcx.item_children(def).iter() {\n-            if child.vis != ty::Visibility::Public {\n+            if !child.vis.is_public() {\n                 continue;\n             }\n "}, {"sha": "11668146f7b105560054110ed66e1c3d2cdd79f7", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=a8dff349ca0c9fb5283fe221b0b3786cacb8be4e", "patch": "@@ -543,7 +543,7 @@ impl EmbargoVisitor<'tcx> {\n         module: LocalDefId,\n     ) {\n         let level = Some(AccessLevel::Reachable);\n-        if let ty::Visibility::Public = vis {\n+        if vis.is_public() {\n             self.update(def_id, level);\n         }\n         match def_kind {\n@@ -580,7 +580,7 @@ impl EmbargoVisitor<'tcx> {\n \n             DefKind::Struct | DefKind::Union => {\n                 // While structs and unions have type privacy, their fields do not.\n-                if let ty::Visibility::Public = vis {\n+                if vis.is_public() {\n                     let item =\n                         self.tcx.hir().expect_item(self.tcx.hir().local_def_id_to_hir_id(def_id));\n                     if let hir::ItemKind::Struct(ref struct_def, _)\n@@ -933,7 +933,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             let def_id = self.tcx.hir().local_def_id(id);\n             if let Some(exports) = self.tcx.module_exports(def_id) {\n                 for export in exports.iter() {\n-                    if export.vis == ty::Visibility::Public {\n+                    if export.vis.is_public() {\n                         if let Some(def_id) = export.res.opt_def_id() {\n                             if let Some(def_id) = def_id.as_local() {\n                                 self.update(def_id, Some(AccessLevel::Exported));\n@@ -1918,8 +1918,7 @@ impl SearchInterfaceForPrivateItemsVisitor<'tcx> {\n     /// 1. It's contained within a public type\n     /// 2. It comes from a private crate\n     fn leaks_private_dep(&self, item_id: DefId) -> bool {\n-        let ret = self.required_visibility == ty::Visibility::Public\n-            && self.tcx.is_private_dep(item_id.krate);\n+        let ret = self.required_visibility.is_public() && self.tcx.is_private_dep(item_id.krate);\n \n         tracing::debug!(\"leaks_private_dep(item_id={:?})={}\", item_id, ret);\n         ret"}, {"sha": "63699128e9e1627ebbe2e36f83435db6a1489e9b", "filename": "compiler/rustc_resolve/src/check_unused.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs?ref=a8dff349ca0c9fb5283fe221b0b3786cacb8be4e", "patch": "@@ -32,7 +32,6 @@ use rustc_ast::visit::{self, Visitor};\n use rustc_ast_lowering::ResolverAstLowering;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::pluralize;\n-use rustc_middle::ty;\n use rustc_session::lint::builtin::{MACRO_USE_EXTERN_CRATE, UNUSED_IMPORTS};\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n@@ -228,7 +227,7 @@ impl Resolver<'_> {\n         for import in self.potentially_unused_imports.iter() {\n             match import.kind {\n                 _ if import.used.get()\n-                    || import.vis.get() == ty::Visibility::Public\n+                    || import.vis.get().is_public()\n                     || import.span.is_dummy() =>\n                 {\n                     if let ImportKind::MacroUse = import.kind {"}, {"sha": "094a5ed7bfbfeb0ee4a986efd728ce9752028d0f", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=a8dff349ca0c9fb5283fe221b0b3786cacb8be4e", "patch": "@@ -11,7 +11,7 @@ use rustc_hir::def::{self, CtorKind, CtorOf, DefKind, NonMacroAttrKind};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::PrimTy;\n use rustc_middle::bug;\n-use rustc_middle::ty::{self, DefIdTree};\n+use rustc_middle::ty::DefIdTree;\n use rustc_session::Session;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::lev_distance::find_best_match_for_name;\n@@ -1308,7 +1308,7 @@ impl<'a> Resolver<'a> {\n             );\n             let def_span = self.session.source_map().guess_head_span(binding.span);\n             let mut note_span = MultiSpan::from_span(def_span);\n-            if !first && binding.vis == ty::Visibility::Public {\n+            if !first && binding.vis.is_public() {\n                 note_span.push_span_label(def_span, \"consider importing it directly\".into());\n             }\n             err.span_note(note_span, &msg);"}, {"sha": "4262c1e9051ee57a1694c34aab3281198c4edf81", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=a8dff349ca0c9fb5283fe221b0b3786cacb8be4e", "patch": "@@ -164,7 +164,7 @@ fn pub_use_of_private_extern_crate_hack(import: &Import<'_>, binding: &NameBindi\n                 import: Import { kind: ImportKind::ExternCrate { .. }, .. },\n                 ..\n             },\n-        ) => import.vis.get() == ty::Visibility::Public,\n+        ) => import.vis.get().is_public(),\n         _ => false,\n     }\n }"}, {"sha": "5c79a067e9f047e74a66005f0365ed5620136d8a", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=a8dff349ca0c9fb5283fe221b0b3786cacb8be4e", "patch": "@@ -35,14 +35,11 @@ use rustc_hir::{ExprKind, QPath};\n use rustc_infer::infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::InferOk;\n-use rustc_middle::ty;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase};\n use rustc_middle::ty::error::TypeError::{FieldMisMatch, Sorts};\n use rustc_middle::ty::relate::expected_found_bool;\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::Ty;\n-use rustc_middle::ty::TypeFoldable;\n-use rustc_middle::ty::{AdtKind, Visibility};\n+use rustc_middle::ty::{self, AdtKind, Ty, TypeFoldable};\n use rustc_session::parse::feature_err;\n use rustc_span::edition::LATEST_STABLE_EDITION;\n use rustc_span::hygiene::DesugaringKind;\n@@ -1732,7 +1729,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .filter_map(|field| {\n                 // ignore already set fields and private fields from non-local crates\n                 if skip.iter().any(|&x| x == field.ident.name)\n-                    || (!variant.def_id.is_local() && field.vis != Visibility::Public)\n+                    || (!variant.def_id.is_local() && !field.vis.is_public())\n                 {\n                     None\n                 } else {"}, {"sha": "71cd8a43329c5df8a8f25bdab7c2d310fb3a1158", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=a8dff349ca0c9fb5283fe221b0b3786cacb8be4e", "patch": "@@ -1410,7 +1410,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 }\n                             }\n                             // We only want to suggest public or local traits (#45781).\n-                            item.vis == ty::Visibility::Public || info.def_id.is_local()\n+                            item.vis.is_public() || info.def_id.is_local()\n                         })\n                         .is_some()\n             })"}, {"sha": "4a8a316037961fcd056d0aa7b91e876bb24471b0", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=a8dff349ca0c9fb5283fe221b0b3786cacb8be4e", "patch": "@@ -435,7 +435,7 @@ crate fn build_impl(\n             tcx.associated_items(did)\n                 .in_definition_order()\n                 .filter_map(|item| {\n-                    if associated_trait.is_some() || item.vis == ty::Visibility::Public {\n+                    if associated_trait.is_some() || item.vis.is_public() {\n                         Some(item.clean(cx))\n                     } else {\n                         None\n@@ -515,7 +515,7 @@ fn build_module(\n     // two namespaces, so the target may be listed twice. Make sure we only\n     // visit each node at most once.\n     for &item in cx.tcx.item_children(did).iter() {\n-        if item.vis == ty::Visibility::Public {\n+        if item.vis.is_public() {\n             let res = item.res.expect_non_local();\n             if let Some(def_id) = res.mod_def_id() {\n                 if did == def_id || !visited.insert(def_id) {"}, {"sha": "a44641f4488e8aae4234608bdf8f740a2f159eac", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a8dff349ca0c9fb5283fe221b0b3786cacb8be4e", "patch": "@@ -1881,7 +1881,7 @@ fn clean_extern_crate(\n     // this is the ID of the crate itself\n     let crate_def_id = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n     let attrs = cx.tcx.hir().attrs(krate.hir_id());\n-    let please_inline = krate.vis.node.is_pub()\n+    let please_inline = cx.tcx.visibility(krate.def_id).is_public()\n         && attrs.iter().any(|a| {\n             a.has_name(sym::doc)\n                 && match a.meta_item_list() {\n@@ -1933,9 +1933,12 @@ fn clean_use_statement(\n         return Vec::new();\n     }\n \n+    let visibility = cx.tcx.visibility(import.def_id);\n     let attrs = cx.tcx.hir().attrs(import.hir_id());\n     let inline_attr = attrs.lists(sym::doc).get_word_attr(sym::inline);\n-    let pub_underscore = import.vis.node.is_pub() && name == kw::Underscore;\n+    let pub_underscore = visibility.is_public() && name == kw::Underscore;\n+    let current_mod = cx.tcx.parent_module_from_def_id(import.def_id);\n+    let parent_mod = cx.tcx.parent_module_from_def_id(current_mod);\n \n     if pub_underscore {\n         if let Some(ref inline) = inline_attr {\n@@ -1954,8 +1957,9 @@ fn clean_use_statement(\n     // forcefully don't inline if this is not public or if the\n     // #[doc(no_inline)] attribute is present.\n     // Don't inline doc(hidden) imports so they can be stripped at a later stage.\n-    let mut denied = !(import.vis.node.is_pub()\n-        || (cx.render_options.document_private && import.vis.node.is_pub_restricted()))\n+    let mut denied = !(visibility.is_public()\n+        || (cx.render_options.document_private\n+            && visibility.is_accessible_from(parent_mod.to_def_id(), cx.tcx)))\n         || pub_underscore\n         || attrs.iter().any(|a| {\n             a.has_name(sym::doc)"}, {"sha": "2dba52afcd9cd847203c001024e4cb157dc7aafa", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=a8dff349ca0c9fb5283fe221b0b3786cacb8be4e", "patch": "@@ -254,7 +254,7 @@ impl ExternalCrate {\n                             as_keyword(Res::Def(DefKind::Mod, id.def_id.to_def_id()))\n                         }\n                         hir::ItemKind::Use(path, hir::UseKind::Single)\n-                            if item.vis.node.is_pub() =>\n+                            if tcx.visibility(id.def_id).is_public() =>\n                         {\n                             as_keyword(path.res.expect_non_local())\n                                 .map(|(_, prim)| (id.def_id.to_def_id(), prim))\n@@ -320,7 +320,7 @@ impl ExternalCrate {\n                             as_primitive(Res::Def(DefKind::Mod, id.def_id.to_def_id()))\n                         }\n                         hir::ItemKind::Use(path, hir::UseKind::Single)\n-                            if item.vis.node.is_pub() =>\n+                            if tcx.visibility(id.def_id).is_public() =>\n                         {\n                             as_primitive(path.res.expect_non_local()).map(|(_, prim)| {\n                                 // Pretend the primitive is local."}, {"sha": "1191a94a7039bee6bf544d7d182dc31e706867c9", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=a8dff349ca0c9fb5283fe221b0b3786cacb8be4e", "patch": "@@ -10,7 +10,6 @@ use rustc_hir::CRATE_HIR_ID;\n use rustc_middle::middle::privacy::AccessLevel;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::{CRATE_DEF_ID, LOCAL_CRATE};\n-use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Symbol};\n \n use std::mem;\n@@ -72,9 +71,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     }\n \n     crate fn visit(mut self) -> Module<'tcx> {\n-        let span = self.cx.tcx.def_span(CRATE_DEF_ID);\n         let mut top_level_module = self.visit_mod_contents(\n-            &Spanned { span, node: hir::VisibilityKind::Public },\n             hir::CRATE_HIR_ID,\n             self.cx.tcx.hir().root_module(),\n             self.cx.tcx.crate_name(LOCAL_CRATE),\n@@ -134,15 +131,15 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n     fn visit_mod_contents(\n         &mut self,\n-        vis: &hir::Visibility<'_>,\n         id: hir::HirId,\n         m: &'tcx hir::Mod<'tcx>,\n         name: Symbol,\n     ) -> Module<'tcx> {\n         let mut om = Module::new(name, id, m.inner);\n+        let def_id = self.cx.tcx.hir().local_def_id(id).to_def_id();\n         // Keep track of if there were any private modules in the path.\n         let orig_inside_public_path = self.inside_public_path;\n-        self.inside_public_path &= vis.node.is_pub();\n+        self.inside_public_path &= self.cx.tcx.visibility(def_id).is_public();\n         for &i in m.item_ids {\n             let item = self.cx.tcx.hir().item(i);\n             self.visit_item(item, None, &mut om);\n@@ -259,7 +256,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         let name = renamed.unwrap_or(item.ident.name);\n \n         let def_id = item.def_id.to_def_id();\n-        let is_pub = item.vis.node.is_pub() || self.cx.tcx.has_attr(def_id, sym::macro_export);\n+        let is_pub = self.cx.tcx.visibility(def_id).is_public();\n \n         if is_pub {\n             self.store_path(item.def_id.to_def_id());\n@@ -332,7 +329,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 }\n             }\n             hir::ItemKind::Mod(ref m) => {\n-                om.mods.push(self.visit_mod_contents(&item.vis, item.hir_id(), m, name));\n+                om.mods.push(self.visit_mod_contents(item.hir_id(), m, name));\n             }\n             hir::ItemKind::Fn(..)\n             | hir::ItemKind::ExternCrate(..)\n@@ -368,7 +365,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         om: &mut Module<'tcx>,\n     ) {\n         // If inlining we only want to include public functions.\n-        if !self.inlining || item.vis.node.is_pub() {\n+        if !self.inlining || self.cx.tcx.visibility(item.def_id).is_public() {\n             om.foreigns.push((item, renamed));\n         }\n     }"}, {"sha": "791f7ff437c8bf4e86229cbb7831cdc0abd5407b", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8dff349ca0c9fb5283fe221b0b3786cacb8be4e/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=a8dff349ca0c9fb5283fe221b0b3786cacb8be4e", "patch": "@@ -2,7 +2,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX};\n use rustc_middle::middle::privacy::{AccessLevel, AccessLevels};\n-use rustc_middle::ty::{TyCtxt, Visibility};\n+use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::sym;\n \n use crate::clean::{AttributesExt, NestedAttributesExt};\n@@ -59,7 +59,7 @@ impl<'a, 'tcx> LibEmbargoVisitor<'a, 'tcx> {\n         for item in self.tcx.item_children(def_id).iter() {\n             if let Some(def_id) = item.res.opt_def_id() {\n                 if self.tcx.def_key(def_id).parent.map_or(false, |d| d == def_id.index)\n-                    || item.vis == Visibility::Public\n+                    || item.vis.is_public()\n                 {\n                     self.visit_item(item.res);\n                 }\n@@ -70,7 +70,7 @@ impl<'a, 'tcx> LibEmbargoVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, res: Res<!>) {\n         let def_id = res.def_id();\n         let vis = self.tcx.visibility(def_id);\n-        let inherited_item_level = if vis == Visibility::Public { self.prev_level } else { None };\n+        let inherited_item_level = if vis.is_public() { self.prev_level } else { None };\n \n         let item_level = self.update(def_id, inherited_item_level);\n "}]}