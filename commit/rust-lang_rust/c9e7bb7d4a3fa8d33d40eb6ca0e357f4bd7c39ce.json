{"sha": "c9e7bb7d4a3fa8d33d40eb6ca0e357f4bd7c39ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZTdiYjdkNGEzZmE4ZDMzZDQwZWI2Y2EwZTM1N2Y0YmQ3YzM5Y2U=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-06-16T09:04:53Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-06-17T08:16:13Z"}, "message": "Improved std::ascii\n- Fixed tests\n- Added methods\n- Renamed casting methods to be shorter\n\ncloses #7150", "tree": {"sha": "37e2c34d84e3b305edb4ab3b544b13bd6130555f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37e2c34d84e3b305edb4ab3b544b13bd6130555f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9e7bb7d4a3fa8d33d40eb6ca0e357f4bd7c39ce", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9e7bb7d4a3fa8d33d40eb6ca0e357f4bd7c39ce", "html_url": "https://github.com/rust-lang/rust/commit/c9e7bb7d4a3fa8d33d40eb6ca0e357f4bd7c39ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9e7bb7d4a3fa8d33d40eb6ca0e357f4bd7c39ce/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90b999aea1a4cfdda549c2ba8462d9eac23c681a", "url": "https://api.github.com/repos/rust-lang/rust/commits/90b999aea1a4cfdda549c2ba8462d9eac23c681a", "html_url": "https://github.com/rust-lang/rust/commit/90b999aea1a4cfdda549c2ba8462d9eac23c681a"}], "stats": {"total": 116, "additions": 91, "deletions": 25}, "files": [{"sha": "309df27e151d26009f90880119752bef2f26591f", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9e7bb7d4a3fa8d33d40eb6ca0e357f4bd7c39ce/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e7bb7d4a3fa8d33d40eb6ca0e357f4bd7c39ce/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=c9e7bb7d4a3fa8d33d40eb6ca0e357f4bd7c39ce", "patch": "@@ -61,7 +61,7 @@ pub use path::Path;\n pub use path::PosixPath;\n pub use path::WindowsPath;\n pub use ptr::RawPtr;\n-pub use ascii::{Ascii, AsciiCast, OwnedAsciiCast, AsciiStr};\n+pub use ascii::{Ascii, AsciiCast, OwnedAsciiCast, AsciiStr, ToBytesConsume};\n pub use str::{Str, StrVector, StrSlice, OwnedStr, StrUtil, NullTerminatedStr};\n pub use from_str::{FromStr};\n pub use to_bytes::IterBytes;"}, {"sha": "635510b3a78f00835aac232fa7141fc6e281dc02", "filename": "src/libstd/str/ascii.rs", "status": "modified", "additions": 89, "deletions": 23, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/c9e7bb7d4a3fa8d33d40eb6ca0e357f4bd7c39ce/src%2Flibstd%2Fstr%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e7bb7d4a3fa8d33d40eb6ca0e357f4bd7c39ce/src%2Flibstd%2Fstr%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr%2Fascii.rs?ref=c9e7bb7d4a3fa8d33d40eb6ca0e357f4bd7c39ce", "patch": "@@ -17,8 +17,9 @@ use cast;\n use old_iter::BaseIter;\n use iterator::IteratorUtil;\n use vec::{CopyableVector, ImmutableVector, OwnedVector};\n+use to_bytes::IterBytes;\n \n-/// Datatype to hold one ascii character. It is 8 bit long.\n+/// Datatype to hold one ascii character. It wraps a `u8`, with the highest bit always zero.\n #[deriving(Clone, Eq)]\n pub struct Ascii { priv chr: u8 }\n \n@@ -72,6 +73,9 @@ pub trait AsciiCast<T> {\n     /// Convert to an ascii type\n     fn to_ascii(&self) -> T;\n \n+    /// Convert to an ascii type, not doing any range asserts\n+    unsafe fn to_ascii_nocheck(&self) -> T;\n+\n     /// Check if convertible to ascii\n     fn is_ascii(&self) -> bool;\n }\n@@ -80,7 +84,12 @@ impl<'self> AsciiCast<&'self[Ascii]> for &'self [u8] {\n     #[inline(always)]\n     fn to_ascii(&self) -> &'self[Ascii] {\n         assert!(self.is_ascii());\n-        unsafe{ cast::transmute(*self) }\n+        unsafe {self.to_ascii_nocheck()}\n+    }\n+\n+    #[inline(always)]\n+    unsafe fn to_ascii_nocheck(&self) -> &'self[Ascii] {\n+        cast::transmute(*self)\n     }\n \n     #[inline(always)]\n@@ -96,8 +105,13 @@ impl<'self> AsciiCast<&'self[Ascii]> for &'self str {\n     #[inline(always)]\n     fn to_ascii(&self) -> &'self[Ascii] {\n         assert!(self.is_ascii());\n-        let (p,len): (*u8, uint) = unsafe{ cast::transmute(*self) };\n-        unsafe{ cast::transmute((p, len - 1))}\n+        unsafe {self.to_ascii_nocheck()}\n+    }\n+\n+    #[inline(always)]\n+    unsafe fn to_ascii_nocheck(&self) -> &'self[Ascii] {\n+        let (p,len): (*u8, uint) = cast::transmute(*self);\n+        cast::transmute((p, len - 1))\n     }\n \n     #[inline(always)]\n@@ -110,6 +124,11 @@ impl AsciiCast<Ascii> for u8 {\n     #[inline(always)]\n     fn to_ascii(&self) -> Ascii {\n         assert!(self.is_ascii());\n+        unsafe {self.to_ascii_nocheck()}\n+    }\n+\n+    #[inline(always)]\n+    unsafe fn to_ascii_nocheck(&self) -> Ascii {\n         Ascii{ chr: *self }\n     }\n \n@@ -123,6 +142,11 @@ impl AsciiCast<Ascii> for char {\n     #[inline(always)]\n     fn to_ascii(&self) -> Ascii {\n         assert!(self.is_ascii());\n+        unsafe {self.to_ascii_nocheck()}\n+    }\n+\n+    #[inline(always)]\n+    unsafe fn to_ascii_nocheck(&self) -> Ascii {\n         Ascii{ chr: *self as u8 }\n     }\n \n@@ -135,26 +159,38 @@ impl AsciiCast<Ascii> for char {\n /// Trait for copyless casting to an ascii vector.\n pub trait OwnedAsciiCast {\n     /// Take ownership and cast to an ascii vector without trailing zero element.\n-    fn to_ascii_consume(self) -> ~[Ascii];\n+    fn into_ascii(self) -> ~[Ascii];\n+\n+    /// Take ownership and cast to an ascii vector without trailing zero element.\n+    /// Does not perform validation checks.\n+    unsafe fn into_ascii_nocheck(self) -> ~[Ascii];\n }\n \n impl OwnedAsciiCast for ~[u8] {\n     #[inline(always)]\n-    fn to_ascii_consume(self) -> ~[Ascii] {\n+    fn into_ascii(self) -> ~[Ascii] {\n         assert!(self.is_ascii());\n-        unsafe {cast::transmute(self)}\n+        unsafe {self.into_ascii_nocheck()}\n+    }\n+\n+    #[inline(always)]\n+    unsafe fn into_ascii_nocheck(self) -> ~[Ascii] {\n+        cast::transmute(self)\n     }\n }\n \n impl OwnedAsciiCast for ~str {\n     #[inline(always)]\n-    fn to_ascii_consume(self) -> ~[Ascii] {\n+    fn into_ascii(self) -> ~[Ascii] {\n         assert!(self.is_ascii());\n-        let mut s = self;\n-        unsafe {\n-            str::raw::pop_byte(&mut s);\n-            cast::transmute(s)\n-        }\n+        unsafe {self.into_ascii_nocheck()}\n+    }\n+\n+    #[inline(always)]\n+    unsafe fn into_ascii_nocheck(self) -> ~[Ascii] {\n+        let mut r: ~[Ascii] = cast::transmute(self);\n+        r.pop();\n+        r\n     }\n }\n \n@@ -169,6 +205,8 @@ pub trait AsciiStr {\n     /// Convert to vector representing a upper cased ascii string.\n     fn to_upper(&self) -> ~[Ascii];\n \n+    /// Compares two Ascii strings ignoring case\n+    fn eq_ignore_case(self, other: &[Ascii]) -> bool;\n }\n \n impl<'self> AsciiStr for &'self [Ascii] {\n@@ -188,20 +226,45 @@ impl<'self> AsciiStr for &'self [Ascii] {\n     fn to_upper(&self) -> ~[Ascii] {\n         self.map(|a| a.to_upper())\n     }\n+\n+    #[inline(always)]\n+    fn eq_ignore_case(self, other: &[Ascii]) -> bool {\n+        do self.iter().zip(other.iter()).all |(&a, &b)| { a.eq_ignore_case(b) }\n+    }\n }\n \n impl ToStrConsume for ~[Ascii] {\n     #[inline(always)]\n-    fn to_str_consume(self) -> ~str {\n+    fn into_str(self) -> ~str {\n         let mut cpy = self;\n         cpy.push(0u8.to_ascii());\n         unsafe {cast::transmute(cpy)}\n     }\n }\n \n+impl IterBytes for Ascii {\n+    #[inline(always)]\n+    fn iter_bytes(&self, _lsb0: bool, f: &fn(buf: &[u8]) -> bool) -> bool {\n+        f([self.to_byte()])\n+    }\n+}\n+\n+/// Trait to convert to a owned byte array by consuming self\n+pub trait ToBytesConsume {\n+    /// Converts to a owned byte array by consuming self\n+    fn into_bytes(self) -> ~[u8];\n+}\n+\n+impl ToBytesConsume for ~[Ascii] {\n+    fn into_bytes(self) -> ~[u8] {\n+        unsafe {cast::transmute(self)}\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;\n+    use to_bytes::ToBytes;\n \n     macro_rules! v2ascii (\n         ( [$($e:expr),*]) => ( [$(Ascii{chr:$e}),*]);\n@@ -245,6 +308,8 @@ mod tests {\n         assert_eq!(\"YMCA\".to_ascii().to_lower().to_str_ascii(), ~\"ymca\");\n         assert_eq!(\"abcDEFxyz:.;\".to_ascii().to_upper().to_str_ascii(), ~\"ABCDEFXYZ:.;\");\n \n+        assert!(\"aBcDeF&?#\".to_ascii().eq_ignore_case(\"AbCdEf&?#\".to_ascii()));\n+\n         assert!(\"\".is_ascii());\n         assert!(\"a\".is_ascii());\n         assert!(!\"\\u2009\".is_ascii());\n@@ -253,21 +318,22 @@ mod tests {\n \n     #[test]\n     fn test_owned_ascii_vec() {\n-        // FIXME: #4318 Compiler crashes on moving self\n-        //assert_eq!(~\"( ;\".to_ascii_consume(), v2ascii!(~[40, 32, 59]));\n-        //assert_eq!(~[40u8, 32u8, 59u8].to_ascii_consume(), v2ascii!(~[40, 32, 59]));\n-        //assert_eq!(~\"( ;\".to_ascii_consume_with_null(), v2ascii!(~[40, 32, 59, 0]));\n-        //assert_eq!(~[40u8, 32u8, 59u8].to_ascii_consume_with_null(),\n-        //           v2ascii!(~[40, 32, 59, 0]));\n+        assert_eq!((~\"( ;\").into_ascii(), v2ascii!(~[40, 32, 59]));\n+        assert_eq!((~[40u8, 32u8, 59u8]).into_ascii(), v2ascii!(~[40, 32, 59]));\n     }\n \n     #[test]\n     fn test_ascii_to_str() { assert_eq!(v2ascii!([40, 32, 59]).to_str_ascii(), ~\"( ;\"); }\n \n     #[test]\n-    fn test_ascii_to_str_consume() {\n-        // FIXME: #4318 Compiler crashes on moving self\n-        //assert_eq!(v2ascii!(~[40, 32, 59]).to_str_consume(), ~\"( ;\");\n+    fn test_ascii_into_str() {\n+        assert_eq!(v2ascii!(~[40, 32, 59]).into_str(), ~\"( ;\");\n+    }\n+\n+    #[test]\n+    fn test_ascii_to_bytes() {\n+        assert_eq!(v2ascii!(~[40, 32, 59]).to_bytes(false), ~[40u8, 32u8, 59u8]);\n+        assert_eq!(v2ascii!(~[40, 32, 59]).into_bytes(), ~[40u8, 32u8, 59u8]);\n     }\n \n     #[test] #[should_fail]"}, {"sha": "46e50b6f76e0d328fd51676f23fa150be17d7cf3", "filename": "src/libstd/to_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9e7bb7d4a3fa8d33d40eb6ca0e357f4bd7c39ce/src%2Flibstd%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e7bb7d4a3fa8d33d40eb6ca0e357f4bd7c39ce/src%2Flibstd%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_str.rs?ref=c9e7bb7d4a3fa8d33d40eb6ca0e357f4bd7c39ce", "patch": "@@ -31,7 +31,7 @@ pub trait ToStr {\n /// Trait for converting a type to a string, consuming it in the process.\n pub trait ToStrConsume {\n     /// Cosume and convert to a string.\n-    fn to_str_consume(self) -> ~str;\n+    fn into_str(self) -> ~str;\n }\n \n impl ToStr for () {"}]}