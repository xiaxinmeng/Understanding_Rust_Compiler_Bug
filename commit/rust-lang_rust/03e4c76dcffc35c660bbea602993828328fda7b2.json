{"sha": "03e4c76dcffc35c660bbea602993828328fda7b2", "node_id": "C_kwDOAAsO6NoAKDAzZTRjNzZkY2ZmYzM1YzY2MGJiZWE2MDI5OTM4MjgzMjhmZGE3YjI", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-11-02T18:47:58Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-11-02T19:52:49Z"}, "message": "asm: Work around LLVM bug on AArch64\n\nUpstream issue: https://github.com/llvm/llvm-project/issues/58384\n\nLLVM gets confused if we assign a 32-bit value to a 64-bit register, so\npass the 32-bit register name to LLVM in that case.", "tree": {"sha": "dc7d2a362f2c9a3077865c3b5ece24a12e162981", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc7d2a362f2c9a3077865c3b5ece24a12e162981"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03e4c76dcffc35c660bbea602993828328fda7b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03e4c76dcffc35c660bbea602993828328fda7b2", "html_url": "https://github.com/rust-lang/rust/commit/03e4c76dcffc35c660bbea602993828328fda7b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03e4c76dcffc35c660bbea602993828328fda7b2/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0a76127283bc963b085f54a1b275a8e281e81e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0a76127283bc963b085f54a1b275a8e281e81e6", "html_url": "https://github.com/rust-lang/rust/commit/c0a76127283bc963b085f54a1b275a8e281e81e6"}], "stats": {"total": 73, "additions": 70, "deletions": 3}, "files": [{"sha": "2e65b1b34608a6e22bd5cc90455bb30f03138091", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 54, "deletions": 3, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/03e4c76dcffc35c660bbea602993828328fda7b2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03e4c76dcffc35c660bbea602993828328fda7b2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=03e4c76dcffc35c660bbea602993828328fda7b2", "patch": "@@ -496,6 +496,44 @@ fn xmm_reg_index(reg: InlineAsmReg) -> Option<u32> {\n     }\n }\n \n+/// If the register is an AArch64 integer register then return its index.\n+fn a64_reg_index(reg: InlineAsmReg) -> Option<u32> {\n+    match reg {\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x0) => Some(0),\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x1) => Some(1),\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x2) => Some(2),\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x3) => Some(3),\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x4) => Some(4),\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x5) => Some(5),\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x6) => Some(6),\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x7) => Some(7),\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x8) => Some(8),\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x9) => Some(9),\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x10) => Some(10),\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x11) => Some(11),\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x12) => Some(12),\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x13) => Some(13),\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x14) => Some(14),\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x15) => Some(15),\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x16) => Some(16),\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x17) => Some(17),\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x18) => Some(18),\n+        // x19 is reserved\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x20) => Some(20),\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x21) => Some(21),\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x22) => Some(22),\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x23) => Some(23),\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x24) => Some(24),\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x25) => Some(25),\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x26) => Some(26),\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x27) => Some(27),\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x28) => Some(28),\n+        // x29 is reserved\n+        InlineAsmReg::AArch64(AArch64InlineAsmReg::x30) => Some(30),\n+        _ => None,\n+    }\n+}\n+\n /// If the register is an AArch64 vector register then return its index.\n fn a64_vreg_index(reg: InlineAsmReg) -> Option<u32> {\n     match reg {\n@@ -526,6 +564,22 @@ fn reg_to_llvm(reg: InlineAsmRegOrRegClass, layout: Option<&TyAndLayout<'_>>) ->\n                     'x'\n                 };\n                 format!(\"{{{}mm{}}}\", class, idx)\n+            } else if let Some(idx) = a64_reg_index(reg) {\n+                let class = if let Some(layout) = layout {\n+                    match layout.size.bytes() {\n+                        8 => 'x',\n+                        _ => 'w',\n+                    }\n+                } else {\n+                    // We use i32 as the type for discarded outputs\n+                    'w'\n+                };\n+                if class == 'x' && reg == InlineAsmReg::AArch64(AArch64InlineAsmReg::x30) {\n+                    // LLVM doesn't recognize x30. use lr instead.\n+                    \"{lr}\".to_string()\n+                } else {\n+                    format!(\"{{{}{}}}\", class, idx)\n+                }\n             } else if let Some(idx) = a64_vreg_index(reg) {\n                 let class = if let Some(layout) = layout {\n                     match layout.size.bytes() {\n@@ -541,9 +595,6 @@ fn reg_to_llvm(reg: InlineAsmRegOrRegClass, layout: Option<&TyAndLayout<'_>>) ->\n                     'q'\n                 };\n                 format!(\"{{{}{}}}\", class, idx)\n-            } else if reg == InlineAsmReg::AArch64(AArch64InlineAsmReg::x30) {\n-                // LLVM doesn't recognize x30\n-                \"{lr}\".to_string()\n             } else if reg == InlineAsmReg::Arm(ArmInlineAsmReg::r14) {\n                 // LLVM doesn't recognize r14\n                 \"{lr}\".to_string()"}, {"sha": "308f789082959c70a30503abd0d51c540ed3cb13", "filename": "src/test/ui/asm/aarch64/llvm-58384.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/03e4c76dcffc35c660bbea602993828328fda7b2/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fllvm-58384.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03e4c76dcffc35c660bbea602993828328fda7b2/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fllvm-58384.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fllvm-58384.rs?ref=03e4c76dcffc35c660bbea602993828328fda7b2", "patch": "@@ -0,0 +1,16 @@\n+// only-aarch64\n+// run-pass\n+// needs-asm-support\n+\n+// Test that we properly work around this LLVM issue:\n+// https://github.com/llvm/llvm-project/issues/58384\n+\n+use std::arch::asm;\n+\n+fn main() {\n+    let a: i32;\n+    unsafe {\n+        asm!(\"\", inout(\"x0\") 435 => a);\n+    }\n+    assert_eq!(a, 435);\n+}"}]}