{"sha": "b7889ef23598524f310b8bb863271299bab628a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ODg5ZWYyMzU5ODUyNGYzMTBiOGJiODYzMjcxMjk5YmFiNjI4YTY=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-11T06:17:01Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-02-13T21:35:32Z"}, "message": "Report privacy errors at most once per import (fixes #31402)", "tree": {"sha": "d3236ece0aace13a3573efbc65e9257e9379c3b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3236ece0aace13a3573efbc65e9257e9379c3b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7889ef23598524f310b8bb863271299bab628a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7889ef23598524f310b8bb863271299bab628a6", "html_url": "https://github.com/rust-lang/rust/commit/b7889ef23598524f310b8bb863271299bab628a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7889ef23598524f310b8bb863271299bab628a6/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97842f54c9f98d0ed97eb4becad8906b9c1ba2da", "url": "https://api.github.com/repos/rust-lang/rust/commits/97842f54c9f98d0ed97eb4becad8906b9c1ba2da", "html_url": "https://github.com/rust-lang/rust/commit/97842f54c9f98d0ed97eb4becad8906b9c1ba2da"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "13b595e723416c3e58b41ac29aae0dea55e59dcb", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b7889ef23598524f310b8bb863271299bab628a6/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7889ef23598524f310b8bb863271299bab628a6/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=b7889ef23598524f310b8bb863271299bab628a6", "patch": "@@ -403,6 +403,23 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n             module_.increment_outstanding_references_for(target, TypeNS);\n         }\n \n+        match (&value_result, &type_result) {\n+            (&Indeterminate, _) | (_, &Indeterminate) => return Indeterminate,\n+            (&Failed(_), &Failed(_)) => {\n+                let children = target_module.children.borrow();\n+                let names = children.keys().map(|&(ref name, _)| name);\n+                let lev_suggestion = match find_best_match_for_name(names, &source.as_str(), None) {\n+                    Some(name) => format!(\". Did you mean to use `{}`?\", name),\n+                    None => \"\".to_owned(),\n+                };\n+                let msg = format!(\"There is no `{}` in `{}`{}\",\n+                                  source,\n+                                  module_to_string(target_module), lev_suggestion);\n+                return Failed(Some((directive.span, msg)));\n+            }\n+            _ => (),\n+        }\n+\n         match (&value_result, &type_result) {\n             (&Success(name_binding), _) if !name_binding.is_import() &&\n                                            directive.is_public &&\n@@ -437,23 +454,6 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n             _ => {}\n         }\n \n-        match (&value_result, &type_result) {\n-            (&Indeterminate, _) | (_, &Indeterminate) => return Indeterminate,\n-            (&Failed(_), &Failed(_)) => {\n-                let children = target_module.children.borrow();\n-                let names = children.keys().map(|&(ref name, _)| name);\n-                let lev_suggestion = match find_best_match_for_name(names, &source.as_str(), None) {\n-                    Some(name) => format!(\". Did you mean to use `{}`?\", name),\n-                    None => \"\".to_owned(),\n-                };\n-                let msg = format!(\"There is no `{}` in `{}`{}\",\n-                                  source,\n-                                  module_to_string(target_module), lev_suggestion);\n-                return Failed(Some((directive.span, msg)));\n-            }\n-            _ => (),\n-        }\n-\n         for &(ns, result) in &[(ValueNS, &value_result), (TypeNS, &type_result)] {\n             if let Success(binding) = *result {\n                 if !binding.defined_with(DefModifiers::IMPORTABLE) {"}]}