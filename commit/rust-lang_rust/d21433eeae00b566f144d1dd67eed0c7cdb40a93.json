{"sha": "d21433eeae00b566f144d1dd67eed0c7cdb40a93", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMTQzM2VlYWUwMGI1NjZmMTQ0ZDFkZDY3ZWVkMGM3Y2RiNDBhOTM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-14T07:23:08Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-14T07:23:08Z"}, "message": "Rollup merge of #49915 - llogiq:doc-shift-types, r=joshtriplett\n\n[doc] note the special type inference handling for shift ops\n\nThis adds a note to the docs about the difference between the shift ops and the corresponding trait methods when it comes to type inference.", "tree": {"sha": "c2fb279d57ed762cb361382916a675bdbf163678", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2fb279d57ed762cb361382916a675bdbf163678"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d21433eeae00b566f144d1dd67eed0c7cdb40a93", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlrRrFwACgkQ/vbIBR0O\nATwMNhAAuPXt88hFXp9s41cVM3P1zdGibV9LuLrboAT7gBqGHkj0K+yi5tZd6FIQ\nVutUs+m6e9jy+MD/0PMKOx4GzBooxFukmn1CnvpE2PivSD6+FDNvZKNg4A+1jHGv\nBnLo4ZiW49kQ4Zd0BC8Q1hCKuaL4Vi+1lYkOS9SJ99HWBTksmXaRouhP1+8abEDl\n5ZNzZMA51tU0smeaj9FVPuOww2z/3cgpjQUSm4xbnjXZenSdn3/JoJrl9yHaVuW+\noajKiMMa8vCjKM41yDd5GE3XboxJ7WlsnMLRBNufAq2tUi0GN7BJ3FqlVprKm7Q0\nOvBkCQYV/RgsAZ76ddYkiZnEpjPIV37iuoZcdqeW+kddA3YZCpEHnclAdchS1bjs\njJHFugGSjlo7UZSrAaDGIiA0bghEH+zuhtgb0+aYYzURpXm3mRRet3oYx4Rkprm5\nn4mir5pnXyICVEaoLu+JXqV1xi+9BRpKN1YiU7IOjPf9v9gmVrPxy+kctkn61LwC\ncsDsxU+WLnZxtzgWP+mZI/Z3V9XuaXY0TPiZO1b1yBAHSo2Pe5KqkevNx62V6RTf\nrCenRodkDNka5mFUuESE88OLa0oA1k0H4J+MClCTS0WfNyd7XUAFlnu+MaALYOHY\nTe2X8ysf0v+GsV+GqRdbZf+uEcQ6vyB5RLGUZAZ6zhFEgYwCHW4=\n=PdE2\n-----END PGP SIGNATURE-----", "payload": "tree c2fb279d57ed762cb361382916a675bdbf163678\nparent 6f629d365407cac1de372a64abec046dce6d9bb1\nparent b744e3d7f516f1c679a4f6315110e856b9731de4\nauthor kennytm <kennytm@gmail.com> 1523690588 +0800\ncommitter kennytm <kennytm@gmail.com> 1523690588 +0800\n\nRollup merge of #49915 - llogiq:doc-shift-types, r=joshtriplett\n\n[doc] note the special type inference handling for shift ops\n\nThis adds a note to the docs about the difference between the shift ops and the corresponding trait methods when it comes to type inference.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d21433eeae00b566f144d1dd67eed0c7cdb40a93", "html_url": "https://github.com/rust-lang/rust/commit/d21433eeae00b566f144d1dd67eed0c7cdb40a93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d21433eeae00b566f144d1dd67eed0c7cdb40a93/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f629d365407cac1de372a64abec046dce6d9bb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f629d365407cac1de372a64abec046dce6d9bb1", "html_url": "https://github.com/rust-lang/rust/commit/6f629d365407cac1de372a64abec046dce6d9bb1"}, {"sha": "b744e3d7f516f1c679a4f6315110e856b9731de4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b744e3d7f516f1c679a4f6315110e856b9731de4", "html_url": "https://github.com/rust-lang/rust/commit/b744e3d7f516f1c679a4f6315110e856b9731de4"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "ec1e65be774fa707031cf211011c44c2844b2506", "filename": "src/libcore/ops/bit.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d21433eeae00b566f144d1dd67eed0c7cdb40a93/src%2Flibcore%2Fops%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21433eeae00b566f144d1dd67eed0c7cdb40a93/src%2Flibcore%2Fops%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fbit.rs?ref=d21433eeae00b566f144d1dd67eed0c7cdb40a93", "patch": "@@ -315,7 +315,12 @@ macro_rules! bitxor_impl {\n \n bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n-/// The left shift operator `<<`.\n+/// The left shift operator `<<`. Note that because this trait is implemented\n+/// for all integer types with multiple right-hand-side types, Rust's type\n+/// checker has special handling for `_ << _`, setting the result type for\n+/// integer operations to the type of the left-hand-side operand. This means\n+/// that though `a << b` and `a.shl(b)` are one and the same from an evaluation\n+/// standpoint, they are different when it comes to type inference.\n ///\n /// # Examples\n ///\n@@ -417,7 +422,12 @@ macro_rules! shl_impl_all {\n \n shl_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 isize i128 }\n \n-/// The right shift operator `>>`.\n+/// The right shift operator `>>`. Note that because this trait is implemented\n+/// for all integer types with multiple right-hand-side types, Rust's type\n+/// checker has special handling for `_ >> _`, setting the result type for\n+/// integer operations to the type of the left-hand-side operand. This means\n+/// that though `a >> b` and `a.shr(b)` are one and the same from an evaluation\n+/// standpoint, they are different when it comes to type inference.\n ///\n /// # Examples\n ///"}]}