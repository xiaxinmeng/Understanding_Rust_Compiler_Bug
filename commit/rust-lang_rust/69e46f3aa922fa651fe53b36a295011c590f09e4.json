{"sha": "69e46f3aa922fa651fe53b36a295011c590f09e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5ZTQ2ZjNhYTkyMmZhNjUxZmU1M2IzNmEyOTUwMTFjNTkwZjA5ZTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-19T21:01:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-19T21:01:10Z"}, "message": "auto merge of #9956 : sfackler/rust/more-more-visibility, r=alexcrichton", "tree": {"sha": "062d45c2883b19bf46fafa871ff42b39b654d5fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/062d45c2883b19bf46fafa871ff42b39b654d5fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69e46f3aa922fa651fe53b36a295011c590f09e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69e46f3aa922fa651fe53b36a295011c590f09e4", "html_url": "https://github.com/rust-lang/rust/commit/69e46f3aa922fa651fe53b36a295011c590f09e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69e46f3aa922fa651fe53b36a295011c590f09e4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d047cdead764ae33e19a7149286302560b000f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d047cdead764ae33e19a7149286302560b000f2", "html_url": "https://github.com/rust-lang/rust/commit/9d047cdead764ae33e19a7149286302560b000f2"}, {"sha": "c18afcd83a810db6921841a30aa874f98fe18f12", "url": "https://api.github.com/repos/rust-lang/rust/commits/c18afcd83a810db6921841a30aa874f98fe18f12", "html_url": "https://github.com/rust-lang/rust/commit/c18afcd83a810db6921841a30aa874f98fe18f12"}], "stats": {"total": 52, "additions": 39, "deletions": 13}, "files": [{"sha": "c502dac7db01ecd0d79d7d07e54f873bcee33f99", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/69e46f3aa922fa651fe53b36a295011c590f09e4/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e46f3aa922fa651fe53b36a295011c590f09e4/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=69e46f3aa922fa651fe53b36a295011c590f09e4", "patch": "@@ -563,6 +563,20 @@ impl<'self> PrivacyVisitor<'self> {\n                 }\n             }\n         };\n+        let check_struct = |def: &@ast::struct_def| {\n+            for f in def.fields.iter() {\n+               match f.node.kind {\n+                    ast::named_field(_, ast::public) => {\n+                        tcx.sess.span_err(f.span, \"unnecessary `pub` \\\n+                                                   visibility\");\n+                    }\n+                    ast::named_field(_, ast::private) => {\n+                        // Fields should really be private by default...\n+                    }\n+                    ast::named_field(*) | ast::unnamed_field => {}\n+                }\n+            }\n+        };\n         match item.node {\n             // implementations of traits don't need visibility qualifiers because\n             // that's controlled by having the trait in scope.\n@@ -610,24 +624,16 @@ impl<'self> PrivacyVisitor<'self> {\n                         }\n                         ast::inherited => {}\n                     }\n-                }\n-            }\n \n-            ast::item_struct(ref def, _) => {\n-                for f in def.fields.iter() {\n-                   match f.node.kind {\n-                        ast::named_field(_, ast::public) => {\n-                            tcx.sess.span_err(f.span, \"unnecessary `pub` \\\n-                                                       visibility\");\n-                        }\n-                        ast::named_field(_, ast::private) => {\n-                            // Fields should really be private by default...\n-                        }\n-                        ast::named_field(*) | ast::unnamed_field => {}\n+                    match v.node.kind {\n+                        ast::struct_variant_kind(ref s) => check_struct(s),\n+                        ast::tuple_variant_kind(*) => {}\n                     }\n                 }\n             }\n \n+            ast::item_struct(ref def, _) => check_struct(def),\n+\n             ast::item_trait(_, _, ref methods) => {\n                 for m in methods.iter() {\n                     match *m {"}, {"sha": "f37e02be12cbab6701195ee2ce1532ee4ff32eeb", "filename": "src/test/compile-fail/struct-variant-privacy.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/69e46f3aa922fa651fe53b36a295011c590f09e4/src%2Ftest%2Fcompile-fail%2Fstruct-variant-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69e46f3aa922fa651fe53b36a295011c590f09e4/src%2Ftest%2Fcompile-fail%2Fstruct-variant-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-variant-privacy.rs?ref=69e46f3aa922fa651fe53b36a295011c590f09e4", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#[feature(struct_variant)];\n+\n+pub enum Foo {\n+    Bar {\n+        pub x: int, //~ ERROR unnecessary `pub` visibility\n+        y: int,\n+        priv z: int\n+    }\n+}\n+\n+fn main() {}"}]}