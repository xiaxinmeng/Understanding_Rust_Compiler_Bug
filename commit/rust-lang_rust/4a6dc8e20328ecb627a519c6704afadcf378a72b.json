{"sha": "4a6dc8e20328ecb627a519c6704afadcf378a72b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNmRjOGUyMDMyOGVjYjYyN2E1MTljNjcwNGFmYWRjZjM3OGE3MmI=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-12T12:02:29Z"}, "committer": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-03-15T17:36:57Z"}, "message": "Only allow tait defining uses in function and method return position", "tree": {"sha": "ee5607fbd29dd70d9a2bfce4f3e4ea15c8653db9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee5607fbd29dd70d9a2bfce4f3e4ea15c8653db9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a6dc8e20328ecb627a519c6704afadcf378a72b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a6dc8e20328ecb627a519c6704afadcf378a72b", "html_url": "https://github.com/rust-lang/rust/commit/4a6dc8e20328ecb627a519c6704afadcf378a72b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a6dc8e20328ecb627a519c6704afadcf378a72b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdbb0ff8ca7d6a4d6d858e03ffcc5360ddf60a3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdbb0ff8ca7d6a4d6d858e03ffcc5360ddf60a3f", "html_url": "https://github.com/rust-lang/rust/commit/cdbb0ff8ca7d6a4d6d858e03ffcc5360ddf60a3f"}], "stats": {"total": 497, "additions": 384, "deletions": 113}, "files": [{"sha": "5e0a0524690a50c53e66673094656a47304ef4e6", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -87,8 +87,26 @@ pub(super) fn check_fn<'a, 'tcx>(\n \n     let declared_ret_ty = fn_sig.output();\n \n-    let revealed_ret_ty =\n-        fcx.instantiate_opaque_types_from_value(fn_id, declared_ret_ty, decl.output.span());\n+    let feature = match tcx.hir().get(fn_id) {\n+        Node::Item(hir::Item { kind: ItemKind::Fn(..), .. }) |\n+        Node::ImplItem(hir::ImplItem {\n+            kind: hir::ImplItemKind::Fn(..), ..\n+        }) => None,\n+        // I don't know if TAIT uses in trait declarations make sense at all\n+        Node::TraitItem(hir::TraitItem {\n+            kind: hir::TraitItemKind::Fn(..),\n+            ..\n+        }) |\n+        // Forbid TAIT in closure return position for now.\n+        Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => Some(sym::type_alias_impl_trait),\n+        node => bug!(\"Item being checked wasn't a function/closure: {:?}\", node),\n+    };\n+    let revealed_ret_ty = fcx.instantiate_opaque_types_from_value(\n+        fn_id,\n+        declared_ret_ty,\n+        decl.output.span(),\n+        feature,\n+    );\n     debug!(\"check_fn: declared_ret_ty: {}, revealed_ret_ty: {}\", declared_ret_ty, revealed_ret_ty);\n     fcx.ret_coercion = Some(RefCell::new(CoerceMany::new(revealed_ret_ty)));\n     fcx.ret_type_span = Some(decl.output.span());"}, {"sha": "84ce6964f042f5cb9a5d1311cda14450cc5bf0e4", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -26,11 +26,11 @@ use rustc_middle::ty::{\n     self, AdtKind, CanonicalUserType, DefIdTree, GenericParamDefKind, ToPolyTraitRef, ToPredicate,\n     Ty, UserType,\n };\n-use rustc_session::lint;\n-use rustc_span::hygiene::DesugaringKind;\n+use rustc_session::{lint, parse::feature_err};\n use rustc_span::source_map::{original_sp, DUMMY_SP};\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{self, BytePos, MultiSpan, Span};\n+use rustc_span::{hygiene::DesugaringKind, Symbol};\n use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::opaque_types::InferCtxtExt as _;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt as _;\n@@ -362,6 +362,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         parent_id: hir::HirId,\n         value: T,\n         value_span: Span,\n+        feature: Option<Symbol>,\n     ) -> T {\n         let parent_def_id = self.tcx.hir().local_def_id(parent_id);\n         debug!(\n@@ -380,7 +381,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let mut opaque_types = self.opaque_types.borrow_mut();\n         let mut opaque_types_vars = self.opaque_types_vars.borrow_mut();\n+\n         for (ty, decl) in opaque_type_map {\n+            if let Some(feature) = feature {\n+                if let hir::OpaqueTyOrigin::TyAlias = decl.origin {\n+                    if !self.tcx.features().enabled(feature) {\n+                        feature_err(\n+                            &self.tcx.sess.parse_sess,\n+                            feature,\n+                            value_span,\n+                            \"type alias impl trait is not permitted here\",\n+                        )\n+                        .emit();\n+                    }\n+                }\n+            }\n             let _ = opaque_types.insert(ty, decl);\n             let _ = opaque_types_vars.insert(decl.concrete_ty, decl.opaque_type);\n         }"}, {"sha": "4c5d16d0b70c0a415f535ea187309394a64d65db", "filename": "compiler/rustc_typeck/src/check/gather_locals.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::PatKind;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_middle::ty::Ty;\n-use rustc_span::Span;\n+use rustc_span::{sym, Span};\n use rustc_trait_selection::traits;\n use std::mem;\n \n@@ -58,11 +58,12 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n             Some(ref ty) => {\n                 let o_ty = self.fcx.to_ty(&ty);\n \n-                let revealed_ty = if self.fcx.tcx.features().impl_trait_in_bindings {\n-                    self.fcx.instantiate_opaque_types_from_value(self.parent_id, o_ty, ty.span)\n-                } else {\n-                    o_ty\n-                };\n+                let revealed_ty = self.fcx.instantiate_opaque_types_from_value(\n+                    self.parent_id,\n+                    o_ty,\n+                    ty.span,\n+                    Some(sym::impl_trait_in_bindings),\n+                );\n \n                 let c_ty =\n                     self.fcx.inh.infcx.canonicalize_user_type_annotation(UserType::Ty(revealed_ty));"}, {"sha": "85bd45f0ca80d0071dda9b6a4f117c9132524487", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -121,9 +121,9 @@ use rustc_middle::ty::{self, RegionKind, Ty, TyCtxt, UserType};\n use rustc_session::config;\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n-use rustc_span::source_map::DUMMY_SP;\n use rustc_span::symbol::{kw, Ident};\n use rustc_span::{self, BytePos, MultiSpan, Span};\n+use rustc_span::{source_map::DUMMY_SP, sym};\n use rustc_target::abi::VariantIdx;\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n@@ -547,11 +547,12 @@ fn typeck_with_fallback<'tcx>(\n             let expected_type = fcx.normalize_associated_types_in(body.value.span, expected_type);\n             fcx.require_type_is_sized(expected_type, body.value.span, traits::ConstSized);\n \n-            let revealed_ty = if tcx.features().impl_trait_in_bindings {\n-                fcx.instantiate_opaque_types_from_value(id, expected_type, body.value.span)\n-            } else {\n-                expected_type\n-            };\n+            let revealed_ty = fcx.instantiate_opaque_types_from_value(\n+                id,\n+                expected_type,\n+                body.value.span,\n+                Some(sym::impl_trait_in_bindings),\n+            );\n \n             // Gather locals in statics (because of block expressions).\n             GatherLocalsVisitor::new(&fcx, id).visit_body(body);"}, {"sha": "dfd82a25f4c8757750cca9c99d0214a9669d0b60", "filename": "src/test/ui/feature-gates/feature-gate-type_alias_impl_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -13,7 +13,7 @@ fn define() -> Bar {\n type Foo2 = impl Debug;\n \n fn define2() {\n-    let x = || -> Foo2 { 42 };\n+    let x = || -> Foo2 { 42 }; //~ ERROR not permitted here\n }\n \n type Foo3 = impl Debug;\n@@ -31,7 +31,7 @@ type Foo4 = impl Debug;\n \n fn define4() {\n     let y: Foo4 = 42;\n-    //~^ ERROR mismatched types\n+    //~^ ERROR not permitted here\n }\n \n fn main() {}"}, {"sha": "43fd76ef0ed9fe2e0d6546750d0ab1ffb35ecad1", "filename": "src/test/ui/feature-gates/feature-gate-type_alias_impl_trait.stderr", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -10,6 +10,15 @@ LL |     Bar(42)\n    = note: expected opaque type `impl Debug`\n                      found type `{integer}`\n \n+error[E0658]: type alias impl trait is not permitted here\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:16:19\n+   |\n+LL |     let x = || -> Foo2 { 42 };\n+   |                   ^^^^\n+   |\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+\n error[E0308]: mismatched types\n   --> $DIR/feature-gate-type_alias_impl_trait.rs:23:18\n    |\n@@ -36,19 +45,14 @@ LL |     define3(42)\n    = note: expected opaque type `impl Debug`\n                      found type `{integer}`\n \n-error[E0308]: mismatched types\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:33:19\n+error[E0658]: type alias impl trait is not permitted here\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:33:12\n    |\n-LL | type Foo4 = impl Debug;\n-   |             ---------- the expected opaque type\n-...\n LL |     let y: Foo4 = 42;\n-   |            ----   ^^ expected opaque type, found integer\n-   |            |\n-   |            expected due to this\n+   |            ^^^^\n    |\n-   = note: expected opaque type `impl Debug`\n-                     found type `{integer}`\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error: could not find defining uses\n   --> $DIR/feature-gate-type_alias_impl_trait.rs:5:12\n@@ -68,6 +72,7 @@ error: could not find defining uses\n LL | type Foo4 = impl Debug;\n    |             ^^^^^^^^^^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0308, E0658.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "be469d781b5c62f388fdd3730fa353aede322919", "filename": "src/test/ui/generator/layout-error.min_tait.stderr", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.min_tait.stderr?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -4,6 +4,37 @@ error[E0425]: cannot find value `Foo` in this scope\n LL |         let a = Foo;\n    |                 ^^^ not found in this scope\n \n-error: aborting due to previous error\n+error[E0658]: type alias impl trait is not permitted here\n+  --> $DIR/layout-error.rs:31:27\n+   |\n+LL |     Task::spawn(&POOL, || cb());\n+   |                           ^\n+   |\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error[E0658]: type alias impl trait is not permitted here\n+  --> $DIR/layout-error.rs:30:28\n+   |\n+LL |     static POOL: Task<F> = Task::new();\n+   |                            ^^^^^^^^^^^\n+   |\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n+\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/layout-error.rs:31:24\n+   |\n+LL |     Task::spawn(&POOL, || cb());\n+   |                        ^^^^^^^ expected `[type error]`, got `impl Future`\n+   |\n+note: previous use here\n+  --> $DIR/layout-error.rs:30:5\n+   |\n+LL |     static POOL: Task<F> = Task::new();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0425`.\n+Some errors have detailed explanations: E0425, E0658.\n+For more information about an error, try `rustc --explain E0425`."}, {"sha": "9f15a6b2eca0011c50aeddc850abef9c090271e8", "filename": "src/test/ui/generator/layout-error.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.rs?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -12,7 +12,7 @@ use std::future::Future;\n \n pub struct Task<F: Future>(F);\n impl<F: Future> Task<F> {\n-    fn new() -> Self {\n+    const fn new() -> Self {\n         todo!()\n     }\n     fn spawn(&self, _: impl FnOnce() -> F) {\n@@ -27,6 +27,7 @@ fn main() {\n \n     type F = impl Future;\n     // Check that statics are inhabited computes they layout.\n-    static POOL: Task<F> = Task::new();\n-    Task::spawn(&POOL, || cb());\n+    static POOL: Task<F> = Task::new(); //[min_tait]~ ERROR not permitted here\n+    Task::spawn(&POOL, || cb()); //[min_tait]~ ERROR type alias impl trait is not permitted here\n+    //[min_tait]~^ ERROR concrete type differs from previous\n }"}, {"sha": "ce874c1518c0e15e42f7e7d91b1edfced3099212", "filename": "src/test/ui/generator/metadata-sufficient-for-layout.full_tait.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.full_tait.stderr?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/metadata-sufficient-for-layout.rs:11:32\n+  --> $DIR/metadata-sufficient-for-layout.rs:10:32\n    |\n LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n@@ -8,12 +8,18 @@ LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_binding\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/metadata-sufficient-for-layout.rs:11:55\n+  --> $DIR/metadata-sufficient-for-layout.rs:10:55\n    |\n LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n    |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n \n-warning: 2 warnings emitted\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/metadata-sufficient-for-layout.rs:29:1\n+   |\n+LL | fn main() {}\n+   | ^^^^^^^^^\n+\n+error: aborting due to previous error; 2 warnings emitted\n "}, {"sha": "e2b0d3622a6000231df82f07412ff28de922ea60", "filename": "src/test/ui/generator/metadata-sufficient-for-layout.min_tait.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.min_tait.stderr?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -0,0 +1,24 @@\n+error[E0658]: type alias impl trait is not permitted here\n+  --> $DIR/metadata-sufficient-for-layout.rs:22:23\n+   |\n+LL | static A: Option<F> = None;\n+   |                       ^^^^\n+   |\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n+\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/metadata-sufficient-for-layout.rs:25:1\n+   |\n+LL | fn f() -> F { metadata_sufficient_for_layout::g() }\n+   | ^^^^^^^^^^^ expected `[type error]`, got `impl Generator`\n+   |\n+note: previous use here\n+  --> $DIR/metadata-sufficient-for-layout.rs:22:1\n+   |\n+LL | static A: Option<F> = None;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "f206093d9710c23e5ea984ff938b8dfb50690358", "filename": "src/test/ui/generator/metadata-sufficient-for-layout.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.rs?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -4,10 +4,9 @@\n // Regression test for #80998.\n //\n // aux-build:metadata-sufficient-for-layout.rs\n-// check-pass\n \n // revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(min_type_alias_impl_trait, rustc_attrs)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n //[full_tait]~^ WARN incomplete\n //[full_tait]~| WARN incomplete\n@@ -21,7 +20,10 @@ type F = impl Generator<(), Yield = (), Return = ()>;\n \n // Static queries the layout of the generator.\n static A: Option<F> = None;\n+//[min_tait]~^ ERROR not permitted here\n \n fn f() -> F { metadata_sufficient_for_layout::g() }\n+//[min_tait]~^ ERROR concrete type differs\n \n-fn main() {}\n+#[rustc_error]\n+fn main() {} //[full_tait]~ ERROR"}, {"sha": "aff19094b7af8c2ed24eaddf7cce01eed9fc0d0d", "filename": "src/test/ui/mir/issue-75053.full_tait.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Fmir%2Fissue-75053.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Fmir%2Fissue-75053.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-75053.full_tait.stderr?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -7,11 +7,15 @@ LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-75053.rs:51:1\n+error[E0658]: type alias impl trait is not permitted here\n+  --> $DIR/issue-75053.rs:52:15\n    |\n-LL | fn main() {\n-   | ^^^^^^^^^\n+LL |     let _pos: Phantom1<DummyT<()>> = Scope::new().my_index();\n+   |               ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error: aborting due to previous error; 1 warning emitted\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "a43fabc8f5d91a55fcd31109a15117f9f607c446", "filename": "src/test/ui/mir/issue-75053.in_bindings.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Fmir%2Fissue-75053.in_bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Fmir%2Fissue-75053.in_bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-75053.in_bindings.stderr?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -8,7 +8,7 @@ LL | #![cfg_attr(in_bindings, feature(impl_trait_in_bindings))]\n    = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n \n error[E0282]: type annotations needed\n-  --> $DIR/issue-75053.rs:53:38\n+  --> $DIR/issue-75053.rs:52:38\n    |\n LL |     type O;\n    |     ------- `<Self as MyIndex<T>>::O` defined here"}, {"sha": "7ce91e851a755399783e5fee7a53ce54ea051681", "filename": "src/test/ui/mir/issue-75053.min_tait.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Fmir%2Fissue-75053.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Fmir%2Fissue-75053.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-75053.min_tait.stderr?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -1,8 +1,12 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-75053.rs:51:1\n+error[E0658]: type alias impl trait is not permitted here\n+  --> $DIR/issue-75053.rs:52:15\n    |\n-LL | fn main() {\n-   | ^^^^^^^^^\n+LL |     let _pos: Phantom1<DummyT<()>> = Scope::new().my_index();\n+   |               ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "fc88d00c0c34314e97e73cfa652d65017f2a8340", "filename": "src/test/ui/mir/issue-75053.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Fmir%2Fissue-75053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Fmir%2Fissue-75053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-75053.rs?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -49,7 +49,6 @@ impl<T: MyFrom<Phantom2<DummyT<U>>>, U> MyIndex<Phantom1<T>> for Scope<U> {\n \n #[rustc_error]\n fn main() {\n-    //[min_tait,full_tait]~^ ERROR rustc_error\n-    let _pos: Phantom1<DummyT<()>> = Scope::new().my_index();\n+    let _pos: Phantom1<DummyT<()>> = Scope::new().my_index(); //[min_tait,full_tait]~ ERROR not permitted here\n     //[in_bindings]~^ ERROR type annotations needed\n }"}, {"sha": "c2cb4829fb78a20dd1f0ce5ecddc1703391ddc4c", "filename": "src/test/ui/type-alias-impl-trait/issue-52843-closure-constrain.min_tait.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.min_tait.stderr?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -1,14 +1,24 @@\n+error[E0658]: type alias impl trait is not permitted here\n+  --> $DIR/issue-52843-closure-constrain.rs:13:22\n+   |\n+LL |     let null = || -> Opaque { 0 };\n+   |                      ^^^^^^\n+   |\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+\n error: concrete type differs from previous defining opaque type use\n   --> $DIR/issue-52843-closure-constrain.rs:13:16\n    |\n LL |     let null = || -> Opaque { 0 };\n-   |                ^^^^^^^^^^^^^^^^^^ expected `String`, got `i32`\n+   |                ^^^^^^^^^^^^^^^^^^ expected `String`, got `[type error]`\n    |\n note: previous use here\n   --> $DIR/issue-52843-closure-constrain.rs:12:5\n    |\n LL |     fn _unused() -> Opaque { String::new() }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "01f874155fa1e8f54594de9857f5c0a497075a73", "filename": "src/test/ui/type-alias-impl-trait/issue-52843-closure-constrain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-52843-closure-constrain.rs?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -10,7 +10,7 @@ use std::fmt::Debug;\n fn main() {\n     type Opaque = impl Debug;\n     fn _unused() -> Opaque { String::new() }\n-    let null = || -> Opaque { 0 };\n+    let null = || -> Opaque { 0 }; //[min_tait]~ ERROR: not permitted here\n     //~^ ERROR: concrete type differs from previous defining opaque type use\n     println!(\"{:?}\", null());\n }"}, {"sha": "1a03ce79661115b2e44b91f0587e816b4171cb90", "filename": "src/test/ui/type-alias-impl-trait/issue-53096.full_tait.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.full_tait.stderr?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-53096.rs:5:32\n+  --> $DIR/issue-53096.rs:4:32\n    |\n LL | #![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n    |                                ^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,12 +8,18 @@ LL | #![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trai\n    = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n \n warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-53096.rs:5:56\n+  --> $DIR/issue-53096.rs:4:56\n    |\n LL | #![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n    |                                                        ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-warning: 2 warnings emitted\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/issue-53096.rs:14:1\n+   |\n+LL | fn main() {}\n+   | ^^^^^^^^^\n+\n+error: aborting due to previous error; 2 warnings emitted\n "}, {"sha": "c6c7a51618dd3ad405220bb58783f384f514f9d8", "filename": "src/test/ui/type-alias-impl-trait/issue-53096.min_tait.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.min_tait.stderr?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: type alias impl trait is not permitted here\n+  --> $DIR/issue-53096.rs:10:19\n+   |\n+LL | const BAZR: Foo = bar();\n+   |                   ^^^^^\n+   |\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "fb621dc0bce9fecfdcba88c9e0edef58f89cad0b", "filename": "src/test/ui/type-alias-impl-trait/issue-53096.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -1,5 +1,4 @@\n-// check-pass\n-#![feature(const_impl_trait, const_fn_fn_ptr_basics)]\n+#![feature(const_impl_trait, const_fn_fn_ptr_basics, rustc_attrs)]\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n@@ -9,5 +8,7 @@\n type Foo = impl Fn() -> usize;\n const fn bar() -> Foo { || 0usize }\n const BAZR: Foo = bar();\n+//[min_tait]~^ ERROR not permitted here\n \n-fn main() {}\n+#[rustc_error]\n+fn main() {} //[full_tait]~ ERROR"}, {"sha": "70d049ffa76bdb367fb8272f8f2dffcf71c67621", "filename": "src/test/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.full_tait.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.full_tait.stderr?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-53678-generator-and-const-fn.rs:6:32\n+  --> $DIR/issue-53678-generator-and-const-fn.rs:4:32\n    |\n LL | #![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n    |                                ^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,12 +8,18 @@ LL | #![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trai\n    = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n \n warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-53678-generator-and-const-fn.rs:6:56\n+  --> $DIR/issue-53678-generator-and-const-fn.rs:4:56\n    |\n LL | #![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n    |                                                        ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-warning: 2 warnings emitted\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/issue-53678-generator-and-const-fn.rs:23:1\n+   |\n+LL | fn main() {}\n+   | ^^^^^^^^^\n+\n+error: aborting due to previous error; 2 warnings emitted\n "}, {"sha": "a3dea45a6a5ad6901fe72c20428147190e5c3c0b", "filename": "src/test/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.min_tait.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.min_tait.stderr?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: type alias impl trait is not permitted here\n+  --> $DIR/issue-53678-generator-and-const-fn.rs:20:36\n+   |\n+LL | const FOO: GenOnce<usize, usize> = const_generator(10, 100);\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "bf607d29ce46241ea6b833dfb317d5cce2b9b39a", "filename": "src/test/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -1,6 +1,4 @@\n-// check-pass\n-\n-#![feature(const_impl_trait, generators, generator_trait)]\n+#![feature(const_impl_trait, generators, generator_trait, rustc_attrs)]\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n@@ -19,6 +17,7 @@ const fn const_generator<Y, R>(yielding: Y, returning: R) -> GenOnce<Y, R> {\n     }\n }\n \n-const FOO: GenOnce<usize, usize> = const_generator(10, 100);\n+const FOO: GenOnce<usize, usize> = const_generator(10, 100); //[min_tait]~ ERROR not permitted here\n \n-fn main() {}\n+#[rustc_error]\n+fn main() {} //[full_tait]~ ERROR"}, {"sha": "4ac7f9423ff419f95f21f8075df2974ff5e5438c", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.rs?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -12,6 +12,7 @@ impl Bug for &() {\n     //~^^ ERROR could not find defining uses\n \n     const FUN: fn() -> Self::Item = || ();\n+    //~^ ERROR type alias impl trait is not permitted here\n }\n \n fn main() {}"}, {"sha": "255d381bf06837b9588828780c6fe1ae71132262", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -7,6 +7,15 @@ LL |     type Item = impl Bug;\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n \n+error[E0658]: type alias impl trait is not permitted here\n+  --> $DIR/issue-60371.rs:14:37\n+   |\n+LL |     const FUN: fn() -> Self::Item = || ();\n+   |                                     ^^^^^\n+   |\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n+\n error[E0277]: the trait bound `(): Bug` is not satisfied\n   --> $DIR/issue-60371.rs:10:17\n    |\n@@ -22,7 +31,7 @@ error: could not find defining uses\n LL |     type Item = impl Bug;\n    |                 ^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0277, E0658.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "5edf73c8cedc645a069f7d1522a6809e8133882b", "filename": "src/test/ui/type-alias-impl-trait/issue-60407.full_tait.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.full_tait.stderr?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-60407.rs:5:32\n+  --> $DIR/issue-60407.rs:3:32\n    |\n LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n@@ -8,12 +8,18 @@ LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_binding\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-60407.rs:5:55\n+  --> $DIR/issue-60407.rs:3:55\n    |\n LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n    |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n \n-warning: 2 warnings emitted\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/issue-60407.rs:12:1\n+   |\n+LL | fn main() {\n+   | ^^^^^^^^^\n+\n+error: aborting due to previous error; 2 warnings emitted\n "}, {"sha": "edb8141c1b1042de460106431d0a82dccb6bb04a", "filename": "src/test/ui/type-alias-impl-trait/issue-60407.min_tait.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.min_tait.stderr?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -0,0 +1,24 @@\n+error[E0658]: type alias impl trait is not permitted here\n+  --> $DIR/issue-60407.rs:9:39\n+   |\n+LL | static mut TEST: Option<Debuggable> = None;\n+   |                                       ^^^^\n+   |\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n+\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/issue-60407.rs:16:1\n+   |\n+LL | fn foo() -> Debuggable {\n+   | ^^^^^^^^^^^^^^^^^^^^^^ expected `[type error]`, got `u32`\n+   |\n+note: previous use here\n+  --> $DIR/issue-60407.rs:9:1\n+   |\n+LL | static mut TEST: Option<Debuggable> = None;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "afcbf313cc855497827b7f58771429416d32848e", "filename": "src/test/ui/type-alias-impl-trait/issue-60407.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.rs?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -1,19 +1,18 @@\n-// check-pass\n-\n // revisions: min_tait full_tait\n-#![feature(min_type_alias_impl_trait)]\n+#![feature(min_type_alias_impl_trait, rustc_attrs)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n //[full_tait]~^ WARN incomplete\n //[full_tait]~| WARN incomplete\n \n type Debuggable = impl core::fmt::Debug;\n \n-static mut TEST: Option<Debuggable> = None;\n+static mut TEST: Option<Debuggable> = None; //[min_tait]~ ERROR not permitted here\n \n-fn main() {\n+#[rustc_error]\n+fn main() { //[full_tait]~ ERROR\n     unsafe { TEST = Some(foo()) }\n }\n \n-fn foo() -> Debuggable {\n+fn foo() -> Debuggable { //[min_tait]~ ERROR concrete type differs\n     0u32\n }"}, {"sha": "bdf414d0badd3d1abbc6ce9986b8a5b952e3fa25", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.min_tait.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.min_tait.stderr?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -1,3 +1,12 @@\n+error[E0658]: type alias impl trait is not permitted here\n+  --> $DIR/issue-63279.rs:11:11\n+   |\n+LL |     || -> Closure { || () }\n+   |           ^^^^^^^\n+   |\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+\n error[E0271]: type mismatch resolving `<[closure@$DIR/issue-63279.rs:11:5: 11:28] as FnOnce<()>>::Output == ()`\n   --> $DIR/issue-63279.rs:8:16\n    |\n@@ -7,6 +16,7 @@ LL | type Closure = impl FnOnce();\n    = note: expected opaque type `impl FnOnce<()>`\n                 found unit type `()`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0271`.\n+Some errors have detailed explanations: E0271, E0658.\n+For more information about an error, try `rustc --explain E0271`."}, {"sha": "086715626bc16bb2730ec8798eb52cf6f52ab4c2", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.rs?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -8,7 +8,7 @@\n type Closure = impl FnOnce(); //~ ERROR: type mismatch resolving\n \n fn c() -> Closure {\n-    || -> Closure { || () }\n+    || -> Closure { || () } //[min_tait]~ ERROR: not permitted here\n }\n \n fn main() {}"}, {"sha": "cf668fc6e06665b87399a9724397be46d752c49c", "filename": "src/test/ui/type-alias-impl-trait/issue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:6:32\n+  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:5:32\n    |\n LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n@@ -8,12 +8,18 @@ LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_binding\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:6:55\n+  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:5:55\n    |\n LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n    |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n \n-warning: 2 warnings emitted\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:19:1\n+   |\n+LL | fn main() {\n+   | ^^^^^^^^^\n+\n+error: aborting due to previous error; 2 warnings emitted\n "}, {"sha": "5b6c4b5cda1fd39c8845ab594296c2dd0fd2ac73", "filename": "src/test/ui/type-alias-impl-trait/issue-65679-inst-opaque-ty-from-val-twice.min_tait.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.min_tait.stderr?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: type alias impl trait is not permitted here\n+  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:20:13\n+   |\n+LL |     take(|| {});\n+   |             ^\n+   |\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error[E0658]: type alias impl trait is not permitted here\n+  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:22:13\n+   |\n+LL |     take(|| {});\n+   |             ^\n+   |\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "b7f05bd83ed6e31f702afc8b0562dde717083385", "filename": "src/test/ui/type-alias-impl-trait/issue-65679-inst-opaque-ty-from-val-twice.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.rs?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -1,5 +1,4 @@\n // compile-flags: -Zsave-analysis\n-// check-pass\n \n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait, rustc_attrs)]\n@@ -16,7 +15,10 @@ type T = impl Sized;\n \n fn take(_: fn() -> T) {}\n \n-fn main() {\n+#[rustc_error]\n+fn main() { //[full_tait]~ ERROR fatal error triggered by #[rustc_error]\n     take(|| {});\n+    //[min_tait]~^ ERROR not permitted here\n     take(|| {});\n+    //[min_tait]~^ ERROR not permitted here\n }"}, {"sha": "40949c84d2395dec914174b9942124a340a2be78", "filename": "src/test/ui/type-alias-impl-trait/no_inferrable_concrete_type.full_tait.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.full_tait.stderr?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -1,17 +1,25 @@\n warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/no_inferrable_concrete_type.rs:6:32\n    |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n+warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/no_inferrable_concrete_type.rs:6:55\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+   |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+\n error: could not find defining uses\n-  --> $DIR/no_inferrable_concrete_type.rs:9:12\n+  --> $DIR/no_inferrable_concrete_type.rs:10:12\n    |\n LL | type Foo = impl Copy;\n    |            ^^^^^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error; 2 warnings emitted\n "}, {"sha": "d69e4cccdf0af6f3ff4bda9b741947fe106b6f42", "filename": "src/test/ui/type-alias-impl-trait/no_inferrable_concrete_type.min_tait.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.min_tait.stderr?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -1,8 +1,18 @@\n+error[E0658]: type alias impl trait is not permitted here\n+  --> $DIR/no_inferrable_concrete_type.rs:16:12\n+   |\n+LL |     let _: Foo = std::mem::transmute(0u8);\n+   |            ^^^\n+   |\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n+\n error: could not find defining uses\n-  --> $DIR/no_inferrable_concrete_type.rs:9:12\n+  --> $DIR/no_inferrable_concrete_type.rs:10:12\n    |\n LL | type Foo = impl Copy;\n    |            ^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "8ff588ef278ca194dd4e8e894394cc045ca8f095", "filename": "src/test/ui/type-alias-impl-trait/no_inferrable_concrete_type.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.rs?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -3,14 +3,15 @@\n \n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n //[full_tait]~^ WARN incomplete\n+//[full_tait]~| WARN incomplete\n \n type Foo = impl Copy; //~ could not find defining uses\n \n // make compiler happy about using 'Foo'\n fn bar(x: Foo) -> Foo { x }\n \n fn main() {\n-    let _: Foo = std::mem::transmute(0u8);\n+    let _: Foo = std::mem::transmute(0u8); //[min_tait]~ ERROR not permitted here\n }"}, {"sha": "e962b23a587de1dc7d8725ba9919d5c5b785d482", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.min_tait.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.min_tait.stderr?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -1,8 +1,12 @@\n-error: `impl Send` cannot be used in patterns\n-  --> $DIR/structural-match-no-leak.rs:19:9\n+error[E0658]: type alias impl trait is not permitted here\n+  --> $DIR/structural-match-no-leak.rs:15:24\n    |\n-LL |         LEAK_FREE => (),\n-   |         ^^^^^^^^^\n+LL | const LEAK_FREE: Bar = leak_free();\n+   |                        ^^^^^^^^^^^\n+   |\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "d0bae30f9963f5231086df4278a4b1f3c543b5da", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -12,12 +12,12 @@ type Bar = impl Send;\n const fn leak_free() -> Bar {\n     7i32\n }\n-const LEAK_FREE: Bar = leak_free();\n+const LEAK_FREE: Bar = leak_free(); //[min_tait]~ ERROR not permitted here\n \n fn leak_free_test() {\n     match todo!() {\n         LEAK_FREE => (),\n-        //~^ `impl Send` cannot be used in patterns\n+        //[full_tait]~^ `impl Send` cannot be used in patterns\n         _ => (),\n     }\n }"}, {"sha": "b94e06e6d0ef40222aaa33da3c71016ebe34ab7f", "filename": "src/test/ui/type-alias-impl-trait/structural-match.full_tait.stderr", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.full_tait.stderr?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -1,17 +1,25 @@\n warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/structural-match.rs:4:36\n+  --> $DIR/structural-match.rs:4:32\n    |\n-LL | #![cfg_attr(not(min_tait), feature(type_alias_impl_trait, min_type_alias_impl_trait))]\n-   |                                    ^^^^^^^^^^^^^^^^^^^^^\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n+warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/structural-match.rs:4:55\n+   |\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+   |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+\n error: `impl Send` cannot be used in patterns\n-  --> $DIR/structural-match.rs:19:9\n+  --> $DIR/structural-match.rs:20:9\n    |\n LL |         VALUE => (),\n    |         ^^^^^\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error; 2 warnings emitted\n "}, {"sha": "36c49a954bda8a0fc449071cec8c8f45659f3e8d", "filename": "src/test/ui/type-alias-impl-trait/structural-match.min_tait.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.min_tait.stderr?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -1,8 +1,12 @@\n-error: `impl Send` cannot be used in patterns\n-  --> $DIR/structural-match.rs:19:9\n+error[E0658]: type alias impl trait is not permitted here\n+  --> $DIR/structural-match.rs:16:20\n    |\n-LL |         VALUE => (),\n-   |         ^^^^^\n+LL | const VALUE: Foo = value();\n+   |                    ^^^^^^^\n+   |\n+   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "daf914cc494aca84e3d7b972f27d73960978d9f5", "filename": "src/test/ui/type-alias-impl-trait/structural-match.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6dc8e20328ecb627a519c6704afadcf378a72b/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs?ref=4a6dc8e20328ecb627a519c6704afadcf378a72b", "patch": "@@ -1,8 +1,9 @@\n #![feature(const_impl_trait)]\n // revisions: min_tait full_tait\n-#![cfg_attr(min_tait, feature(min_type_alias_impl_trait))]\n-#![cfg_attr(not(min_tait), feature(type_alias_impl_trait, min_type_alias_impl_trait))]\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n //[full_tait]~^ WARN incomplete\n+//[full_tait]~| WARN incomplete\n \n type Foo = impl Send;\n \n@@ -12,12 +13,12 @@ struct A;\n const fn value() -> Foo {\n     A\n }\n-const VALUE: Foo = value();\n+const VALUE: Foo = value(); //[min_tait]~ ERROR not permitted here\n \n fn test() {\n     match todo!() {\n         VALUE => (),\n-        //~^ `impl Send` cannot be used in patterns\n+        //[full_tait]~^ `impl Send` cannot be used in patterns\n         _ => (),\n     }\n }"}]}