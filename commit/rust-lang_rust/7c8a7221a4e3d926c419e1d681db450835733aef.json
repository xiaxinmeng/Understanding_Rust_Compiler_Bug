{"sha": "7c8a7221a4e3d926c419e1d681db450835733aef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjOGE3MjIxYTRlM2Q5MjZjNDE5ZTFkNjgxZGI0NTA4MzU3MzNhZWY=", "commit": {"author": {"name": "toidiu", "email": "toidiu@protonmail.com", "date": "2017-09-28T00:18:41Z"}, "committer": {"name": "toidiu", "email": "toidiu@protonmail.com", "date": "2017-10-16T18:26:11Z"}, "message": "create a seperate module for outlives. added a query for inferred_outlives. setup some files for upcoming tests", "tree": {"sha": "3497333f4e0ccafa57cb652d9619929060b79f85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3497333f4e0ccafa57cb652d9619929060b79f85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c8a7221a4e3d926c419e1d681db450835733aef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c8a7221a4e3d926c419e1d681db450835733aef", "html_url": "https://github.com/rust-lang/rust/commit/7c8a7221a4e3d926c419e1d681db450835733aef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c8a7221a4e3d926c419e1d681db450835733aef/comments", "author": null, "committer": null, "parents": [{"sha": "32b968ce443a840b51e605e8a29408aa903aa6bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/32b968ce443a840b51e605e8a29408aa903aa6bf", "html_url": "https://github.com/rust-lang/rust/commit/32b968ce443a840b51e605e8a29408aa903aa6bf"}], "stats": {"total": 82, "additions": 73, "deletions": 9}, "files": [{"sha": "d13de98df28ac56c5cf9d98aad4d676e3cb1abdd", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c8a7221a4e3d926c419e1d681db450835733aef/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8a7221a4e3d926c419e1d681db450835733aef/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=7c8a7221a4e3d926c419e1d681db450835733aef", "patch": "@@ -122,7 +122,7 @@ define_maps! { <'tcx>\n     [] fn variances_of: ItemVariances(DefId) -> Rc<Vec<ty::Variance>>,\n \n     /// Maps from def-id of a type to its (inferred) outlives.\n-    [] fn inferred_outlives_of: PredicatesOfItem(DefId) -> ty::GenericPredicates<'tcx>,\n+    [] fn inferred_outlives_of: PredicatesOfItem(DefId) -> Vec<ty::Predicate<'tcx>>,\n \n     /// Maps from an impl/trait def-id to a list of the def-ids of its items\n     [] fn associated_item_def_ids: AssociatedItemDefIds(DefId) -> Rc<Vec<DefId>>,"}, {"sha": "a5b3f8cb806be49b7bc76f13746207040a6f2286", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7c8a7221a4e3d926c419e1d681db450835733aef/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8a7221a4e3d926c419e1d681db450835733aef/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=7c8a7221a4e3d926c419e1d681db450835733aef", "patch": "@@ -1329,20 +1329,13 @@ fn early_bound_lifetimes_from_generics<'a, 'tcx>(\n         })\n }\n \n-//todo\n-fn inferred_outlives_of<'a, 'tcx>(_tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                           _def_id: DefId)\n-                           -> Vec<ty::Predicate<'tcx>> {\n-    Vec::new()\n-}\n-\n fn predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                            def_id: DefId)\n                            -> ty::GenericPredicates<'tcx> {\n     let explicit = explicit_predicates_of(tcx, def_id);\n     ty::GenericPredicates {\n         parent: explicit.parent,\n-        predicates: [&explicit.predicates[..], &inferred_outlives_of(tcx, def_id)[..]].concat()\n+        predicates: [&explicit.predicates[..], &tcx.inferred_outlives_of(def_id)[..]].concat()\n     }\n }\n "}, {"sha": "9cf954cecc90e45011793bf1ba65ab4fba238ae1", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7c8a7221a4e3d926c419e1d681db450835733aef/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8a7221a4e3d926c419e1d681db450835733aef/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=7c8a7221a4e3d926c419e1d681db450835733aef", "patch": "@@ -50,6 +50,8 @@ independently:\n \n - variance: variance inference\n \n+- outlives: outlives inference\n+\n - check: walks over function bodies and type checks them, inferring types for\n   local variables, type parameters, etc as necessary.\n \n@@ -122,6 +124,7 @@ mod collect;\n mod constrained_type_params;\n mod impl_wf_check;\n mod coherence;\n+mod outlives;\n mod variance;\n mod namespace;\n \n@@ -316,6 +319,11 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n              variance::test::test_variance(tcx));\n     })?;\n \n+//    tcx.sess.track_errors(|| {\n+//        time(time_passes, \"outlives testing\", ||\n+//            outlives::test::test_inferred_outlives(tcx));\n+//    })?;\n+\n     time(time_passes, \"wf checking\", || check::check_wf_new(tcx))?;\n \n     time(time_passes, \"item-types checking\", || check::check_item_types(tcx))?;"}, {"sha": "d496ed0e46d8617ef4d7be1724d6b0fd9074f222", "filename": "src/librustc_typeck/outlives/mod.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7c8a7221a4e3d926c419e1d681db450835733aef/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8a7221a4e3d926c419e1d681db450835733aef/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs?ref=7c8a7221a4e3d926c419e1d681db450835733aef", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::hir::def_id::DefId;\n+use rustc::ty::{self, TyCtxt};\n+\n+/// Code to write unit test for outlives.\n+pub mod test;\n+\n+//todo\n+pub fn inferred_outlives_of<'a, 'tcx>(_tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                  _def_id: DefId)\n+                                  -> Vec<ty::Predicate<'tcx>> {\n+    Vec::new()\n+}"}, {"sha": "0d45fc58637841adc9592ef2aa7ecd88101751da", "filename": "src/librustc_typeck/outlives/test.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7c8a7221a4e3d926c419e1d681db450835733aef/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8a7221a4e3d926c419e1d681db450835733aef/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs?ref=7c8a7221a4e3d926c419e1d681db450835733aef", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//use rustc::hir;\n+//use rustc::hir::itemlikevisit::ItemLikeVisitor;\n+use rustc::ty::TyCtxt;\n+\n+//pub fn test_outlives<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n+//    tcx.hir.krate().visit_all_item_likes(&mut OutlivesTest { tcx });\n+//}\n+\n+struct OutlivesTest<'a, 'tcx: 'a> {\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>\n+}\n+\n+//impl<'a, 'tcx> ItemLikeVisitor<'tcx> for OutlivesTest<'a, 'tcx> {\n+//    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+//        let item_def_id = self.tcx.hir.local_def_id(item.id);\n+//\n+//        // For unit testing: check for a special \"rustc_outlives\"\n+//        // attribute and report an error with various results if found.\n+//        if self.tcx.has_attr(item_def_id, \"rustc_outlives\") {\n+//            let outlives_of = self.tcx.outlives_of(item_def_id);\n+//            span_err!(self.tcx.sess,\n+//                      item.span,\n+//                      E0208,\n+//                      \"{:?}\",\n+//                      outlives_of);\n+//        }\n+//    }\n+//\n+//    fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem) { }\n+//    fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem) { }\n+//}"}]}