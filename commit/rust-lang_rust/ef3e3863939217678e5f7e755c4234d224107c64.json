{"sha": "ef3e3863939217678e5f7e755c4234d224107c64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmM2UzODYzOTM5MjE3Njc4ZTVmN2U3NTVjNDIzNGQyMjQxMDdjNjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-22T01:35:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-22T01:35:05Z"}, "message": "Auto merge of #78212 - JohnTitor:rollup-j5r6xuy, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #77420 (Unify const-checking structured errors for `&mut` and `&raw mut`)\n - #77554 (Support signed integers and `char` in v0 mangling)\n - #77976 (Mark inout asm! operands as used in liveness pass)\n - #78009 (Haiku: explicitly set CMAKE_SYSTEM_NAME when cross-compiling)\n - #78084 (Greatly improve display for small mobile devices screens)\n - #78155 (Fix two small issues in compiler/rustc_lint/src/types.rs)\n - #78156 (Fixed build failure of `rustfmt`)\n - #78172 (Add test case for #77062)\n - #78188 (Add tracking issue number for pin_static_ref)\n - #78200 (Add `ControlFlow::is_{break,continue}` methods)\n\nFailed merges:\n\nr? `@ghost`", "tree": {"sha": "989bb1f04f16af5610907083db2989c1eac9aa9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/989bb1f04f16af5610907083db2989c1eac9aa9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef3e3863939217678e5f7e755c4234d224107c64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef3e3863939217678e5f7e755c4234d224107c64", "html_url": "https://github.com/rust-lang/rust/commit/ef3e3863939217678e5f7e755c4234d224107c64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef3e3863939217678e5f7e755c4234d224107c64/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4fe25d8613a32dcd71e5258c22ff5685f12d4c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4fe25d8613a32dcd71e5258c22ff5685f12d4c3", "html_url": "https://github.com/rust-lang/rust/commit/c4fe25d8613a32dcd71e5258c22ff5685f12d4c3"}, {"sha": "69e0658f4110a1126ec4b6cc1119dd61bb3e8342", "url": "https://api.github.com/repos/rust-lang/rust/commits/69e0658f4110a1126ec4b6cc1119dd61bb3e8342", "html_url": "https://github.com/rust-lang/rust/commit/69e0658f4110a1126ec4b6cc1119dd61bb3e8342"}], "stats": {"total": 504, "additions": 411, "deletions": 93}, "files": [{"sha": "a3c4d2493ff180787fc38720ca1428c41833ea6e", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef3e3863939217678e5f7e755c4234d224107c64/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ef3e3863939217678e5f7e755c4234d224107c64/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ef3e3863939217678e5f7e755c4234d224107c64", "patch": "@@ -3276,9 +3276,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-demangle\"\n-version = \"0.1.16\"\n+version = \"0.1.18\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4c691c0e608126e00913e33f0ccf3727d5fc84573623b8d65b2df340b5201783\"\n+checksum = \"6e3bad0ee36814ca07d7968269dd4b7ec89ec2da10c4bb613928d3077083c232\"\n dependencies = [\n  \"compiler_builtins\",\n  \"rustc-std-workspace-core\","}, {"sha": "586b9d0837425d5c9f4016f552938ccfec7d954d", "filename": "compiler/rustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef3e3863939217678e5f7e755c4234d224107c64/compiler%2Frustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ef3e3863939217678e5f7e755c4234d224107c64/compiler%2Frustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2FCargo.toml?ref=ef3e3863939217678e5f7e755c4234d224107c64", "patch": "@@ -15,7 +15,7 @@ measureme = \"0.7.1\"\n snap = \"1\"\n tracing = \"0.1\"\n rustc_middle = { path = \"../rustc_middle\" }\n-rustc-demangle = \"0.1\"\n+rustc-demangle = \"0.1.18\"\n rustc_attr = { path = \"../rustc_attr\" }\n rustc_codegen_ssa = { path = \"../rustc_codegen_ssa\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }"}, {"sha": "b502bd7f7a1bd07248f77fecb05b3786aede8ce3", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ef3e3863939217678e5f7e755c4234d224107c64/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3e3863939217678e5f7e755c4234d224107c64/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=ef3e3863939217678e5f7e755c4234d224107c64", "patch": "@@ -145,9 +145,9 @@ fn lint_overflowing_range_endpoint<'tcx>(\n                     // We need to preserve the literal's suffix,\n                     // as it may determine typing information.\n                     let suffix = match lit.node {\n-                        LitKind::Int(_, LitIntType::Signed(s)) => s.name_str().to_string(),\n-                        LitKind::Int(_, LitIntType::Unsigned(s)) => s.name_str().to_string(),\n-                        LitKind::Int(_, LitIntType::Unsuffixed) => \"\".to_string(),\n+                        LitKind::Int(_, LitIntType::Signed(s)) => s.name_str(),\n+                        LitKind::Int(_, LitIntType::Unsigned(s)) => s.name_str(),\n+                        LitKind::Int(_, LitIntType::Unsuffixed) => \"\",\n                         _ => bug!(),\n                     };\n                     let suggestion = format!(\"{}..={}{}\", start, lit_val - 1, suffix);\n@@ -170,24 +170,25 @@ fn lint_overflowing_range_endpoint<'tcx>(\n // warnings are consistent between 32- and 64-bit platforms.\n fn int_ty_range(int_ty: ast::IntTy) -> (i128, i128) {\n     match int_ty {\n-        ast::IntTy::Isize => (i64::MIN as i128, i64::MAX as i128),\n-        ast::IntTy::I8 => (i8::MIN as i64 as i128, i8::MAX as i128),\n-        ast::IntTy::I16 => (i16::MIN as i64 as i128, i16::MAX as i128),\n-        ast::IntTy::I32 => (i32::MIN as i64 as i128, i32::MAX as i128),\n-        ast::IntTy::I64 => (i64::MIN as i128, i64::MAX as i128),\n-        ast::IntTy::I128 => (i128::MIN as i128, i128::MAX),\n+        ast::IntTy::Isize => (i64::MIN.into(), i64::MAX.into()),\n+        ast::IntTy::I8 => (i8::MIN.into(), i8::MAX.into()),\n+        ast::IntTy::I16 => (i16::MIN.into(), i16::MAX.into()),\n+        ast::IntTy::I32 => (i32::MIN.into(), i32::MAX.into()),\n+        ast::IntTy::I64 => (i64::MIN.into(), i64::MAX.into()),\n+        ast::IntTy::I128 => (i128::MIN, i128::MAX),\n     }\n }\n \n fn uint_ty_range(uint_ty: ast::UintTy) -> (u128, u128) {\n-    match uint_ty {\n-        ast::UintTy::Usize => (u64::MIN as u128, u64::MAX as u128),\n-        ast::UintTy::U8 => (u8::MIN as u128, u8::MAX as u128),\n-        ast::UintTy::U16 => (u16::MIN as u128, u16::MAX as u128),\n-        ast::UintTy::U32 => (u32::MIN as u128, u32::MAX as u128),\n-        ast::UintTy::U64 => (u64::MIN as u128, u64::MAX as u128),\n-        ast::UintTy::U128 => (u128::MIN, u128::MAX),\n-    }\n+    let max = match uint_ty {\n+        ast::UintTy::Usize => u64::MAX.into(),\n+        ast::UintTy::U8 => u8::MAX.into(),\n+        ast::UintTy::U16 => u16::MAX.into(),\n+        ast::UintTy::U32 => u32::MAX.into(),\n+        ast::UintTy::U64 => u64::MAX.into(),\n+        ast::UintTy::U128 => u128::MAX,\n+    };\n+    (0, max)\n }\n \n fn get_bin_hex_repr(cx: &LateContext<'_>, lit: &hir::Lit) -> Option<String> {"}, {"sha": "bd51136b8db586e240d788ae571159fe8017291e", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 11, "deletions": 27, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ef3e3863939217678e5f7e755c4234d224107c64/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3e3863939217678e5f7e755c4234d224107c64/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=ef3e3863939217678e5f7e755c4234d224107c64", "patch": "@@ -224,7 +224,8 @@ impl NonConstOp for CellBorrow {\n }\n \n #[derive(Debug)]\n-pub struct MutBorrow;\n+pub struct MutBorrow(pub hir::BorrowKind);\n+\n impl NonConstOp for MutBorrow {\n     fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n         // Forbid everywhere except in const fn with a feature gate\n@@ -236,22 +237,28 @@ impl NonConstOp for MutBorrow {\n     }\n \n     fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        let raw = match self.0 {\n+            hir::BorrowKind::Raw => \"raw \",\n+            hir::BorrowKind::Ref => \"\",\n+        };\n+\n         let mut err = if ccx.const_kind() == hir::ConstContext::ConstFn {\n             feature_err(\n                 &ccx.tcx.sess.parse_sess,\n                 sym::const_mut_refs,\n                 span,\n-                &format!(\"mutable references are not allowed in {}s\", ccx.const_kind()),\n+                &format!(\"{}mutable references are not allowed in {}s\", raw, ccx.const_kind()),\n             )\n         } else {\n             let mut err = struct_span_err!(\n                 ccx.tcx.sess,\n                 span,\n                 E0764,\n-                \"mutable references are not allowed in {}s\",\n+                \"{}mutable references are not allowed in {}s\",\n+                raw,\n                 ccx.const_kind(),\n             );\n-            err.span_label(span, format!(\"`&mut` is only allowed in `const fn`\"));\n+            err.span_label(span, format!(\"`&{}mut` is only allowed in `const fn`\", raw));\n             err\n         };\n         if ccx.tcx.sess.teach(&err.get_code().unwrap()) {\n@@ -270,29 +277,6 @@ impl NonConstOp for MutBorrow {\n     }\n }\n \n-// FIXME(ecstaticmorse): Unify this with `MutBorrow`. It has basically the same issues.\n-#[derive(Debug)]\n-pub struct MutAddressOf;\n-impl NonConstOp for MutAddressOf {\n-    fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n-        // Forbid everywhere except in const fn with a feature gate\n-        if ccx.const_kind() == hir::ConstContext::ConstFn {\n-            Status::Unstable(sym::const_mut_refs)\n-        } else {\n-            Status::Forbidden\n-        }\n-    }\n-\n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n-        feature_err(\n-            &ccx.tcx.sess.parse_sess,\n-            sym::const_mut_refs,\n-            span,\n-            &format!(\"`&raw mut` is not allowed in {}s\", ccx.const_kind()),\n-        )\n-    }\n-}\n-\n #[derive(Debug)]\n pub struct MutDeref;\n impl NonConstOp for MutDeref {"}, {"sha": "c991eb4bf5ecc7d80b94799669b4923a5acd8a59", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef3e3863939217678e5f7e755c4234d224107c64/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3e3863939217678e5f7e755c4234d224107c64/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=ef3e3863939217678e5f7e755c4234d224107c64", "patch": "@@ -525,14 +525,16 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n \n                 if !is_allowed {\n                     if let BorrowKind::Mut { .. } = kind {\n-                        self.check_op(ops::MutBorrow);\n+                        self.check_op(ops::MutBorrow(hir::BorrowKind::Ref));\n                     } else {\n                         self.check_op(ops::CellBorrow);\n                     }\n                 }\n             }\n \n-            Rvalue::AddressOf(Mutability::Mut, _) => self.check_op(ops::MutAddressOf),\n+            Rvalue::AddressOf(Mutability::Mut, _) => {\n+                self.check_op(ops::MutBorrow(hir::BorrowKind::Raw))\n+            }\n \n             Rvalue::Ref(_, BorrowKind::Shared | BorrowKind::Shallow, ref place)\n             | Rvalue::AddressOf(Mutability::Not, ref place) => {"}, {"sha": "a9620b83124e04b1037ee18e3210b216166e4d12", "filename": "compiler/rustc_mir_build/src/lints.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef3e3863939217678e5f7e755c4234d224107c64/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3e3863939217678e5f7e755c4234d224107c64/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flints.rs?ref=ef3e3863939217678e5f7e755c4234d224107c64", "patch": "@@ -71,12 +71,14 @@ impl<'mir, 'tcx> Search<'mir, 'tcx> {\n \n         let func_ty = func.ty(body, tcx);\n         if let ty::FnDef(callee, substs) = *func_ty.kind() {\n-            let (callee, call_substs) =\n-                if let Ok(Some(instance)) = Instance::resolve(tcx, param_env, callee, substs) {\n-                    (instance.def_id(), instance.substs)\n-                } else {\n-                    (callee, substs)\n-                };\n+            let normalized_substs = tcx.normalize_erasing_regions(param_env, substs);\n+            let (callee, call_substs) = if let Ok(Some(instance)) =\n+                Instance::resolve(tcx, param_env, callee, normalized_substs)\n+            {\n+                (instance.def_id(), instance.substs)\n+            } else {\n+                (callee, normalized_substs)\n+            };\n \n             // FIXME(#57965): Make this work across function boundaries\n "}, {"sha": "7288015e170293f2170263909f0918088939be60", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef3e3863939217678e5f7e755c4234d224107c64/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3e3863939217678e5f7e755c4234d224107c64/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=ef3e3863939217678e5f7e755c4234d224107c64", "patch": "@@ -1174,7 +1174,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                             }\n                         }\n                         hir::InlineAsmOperand::InOut { expr, .. } => {\n-                            succ = self.write_place(expr, succ, ACC_READ | ACC_WRITE);\n+                            succ = self.write_place(expr, succ, ACC_READ | ACC_WRITE | ACC_USE);\n                         }\n                         hir::InlineAsmOperand::SplitInOut { out_expr, .. } => {\n                             if let Some(expr) = out_expr {"}, {"sha": "3df5f16131922cfb3455d99aa19907ae1edd81cc", "filename": "compiler/rustc_symbol_mangling/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef3e3863939217678e5f7e755c4234d224107c64/compiler%2Frustc_symbol_mangling%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ef3e3863939217678e5f7e755c4234d224107c64/compiler%2Frustc_symbol_mangling%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2FCargo.toml?ref=ef3e3863939217678e5f7e755c4234d224107c64", "patch": "@@ -10,7 +10,7 @@ doctest = false\n [dependencies]\n tracing = \"0.1\"\n punycode = \"0.4.0\"\n-rustc-demangle = \"0.1.16\"\n+rustc-demangle = \"0.1.18\"\n \n rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }"}, {"sha": "7833385cbc99698271dc9478404f4ab8cff45a1c", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ef3e3863939217678e5f7e755c4234d224107c64/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3e3863939217678e5f7e755c4234d224107c64/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=ef3e3863939217678e5f7e755c4234d224107c64", "patch": "@@ -4,6 +4,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n+use rustc_middle::mir::interpret::sign_extend;\n use rustc_middle::ty::print::{Print, Printer};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n use rustc_middle::ty::{self, Instance, Ty, TyCtxt, TypeFoldable};\n@@ -527,17 +528,31 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         }\n         let start = self.out.len();\n \n-        match ct.ty.kind() {\n-            ty::Uint(_) => {}\n-            ty::Bool => {}\n+        let mut neg = false;\n+        let val = match ct.ty.kind() {\n+            ty::Uint(_) | ty::Bool | ty::Char => {\n+                ct.try_eval_bits(self.tcx, ty::ParamEnv::reveal_all(), ct.ty)\n+            }\n+            ty::Int(_) => {\n+                let param_env = ty::ParamEnv::reveal_all();\n+                ct.try_eval_bits(self.tcx, param_env, ct.ty).and_then(|b| {\n+                    let sz = self.tcx.layout_of(param_env.and(ct.ty)).ok()?.size;\n+                    let val = sign_extend(b, sz) as i128;\n+                    if val < 0 {\n+                        neg = true;\n+                    }\n+                    Some(val.wrapping_abs() as u128)\n+                })\n+            }\n             _ => {\n                 bug!(\"symbol_names: unsupported constant of type `{}` ({:?})\", ct.ty, ct);\n             }\n-        }\n-        self = ct.ty.print(self)?;\n+        };\n \n-        if let Some(bits) = ct.try_eval_bits(self.tcx, ty::ParamEnv::reveal_all(), ct.ty) {\n-            let _ = write!(self.out, \"{:x}_\", bits);\n+        if let Some(bits) = val {\n+            // We only print the type if the const can be evaluated.\n+            self = ct.ty.print(self)?;\n+            let _ = write!(self.out, \"{}{:x}_\", if neg { \"n\" } else { \"\" }, bits);\n         } else {\n             // NOTE(eddyb) despite having the path, we need to\n             // encode a placeholder, as the path could refer"}, {"sha": "3bca3ff97332bf1a0578ab83c7f2d273033f95f9", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ef3e3863939217678e5f7e755c4234d224107c64/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3e3863939217678e5f7e755c4234d224107c64/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=ef3e3863939217678e5f7e755c4234d224107c64", "patch": "@@ -32,6 +32,20 @@ impl<C, B> Try for ControlFlow<C, B> {\n }\n \n impl<C, B> ControlFlow<C, B> {\n+    /// Returns `true` if this is a `Break` variant.\n+    #[inline]\n+    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n+    pub fn is_break(&self) -> bool {\n+        matches!(*self, ControlFlow::Break(_))\n+    }\n+\n+    /// Returns `true` if this is a `Continue` variant.\n+    #[inline]\n+    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n+    pub fn is_continue(&self) -> bool {\n+        matches!(*self, ControlFlow::Continue(_))\n+    }\n+\n     /// Converts the `ControlFlow` into an `Option` which is `Some` if the\n     /// `ControlFlow` was `Break` and `None` otherwise.\n     #[inline]"}, {"sha": "0b9c733f7feadfdbcfe4949a4787ea3c134d2698", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef3e3863939217678e5f7e755c4234d224107c64/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3e3863939217678e5f7e755c4234d224107c64/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=ef3e3863939217678e5f7e755c4234d224107c64", "patch": "@@ -786,7 +786,7 @@ impl<T: ?Sized> Pin<&'static T> {\n     ///\n     /// This is safe, because `T` is borrowed for the `'static` lifetime, which\n     /// never ends.\n-    #[unstable(feature = \"pin_static_ref\", issue = \"none\")]\n+    #[unstable(feature = \"pin_static_ref\", issue = \"78186\")]\n     #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n     pub const fn static_ref(r: &'static T) -> Pin<&'static T> {\n         // SAFETY: The 'static borrow guarantees the data will not be\n@@ -800,7 +800,7 @@ impl<T: ?Sized> Pin<&'static mut T> {\n     ///\n     /// This is safe, because `T` is borrowed for the `'static` lifetime, which\n     /// never ends.\n-    #[unstable(feature = \"pin_static_ref\", issue = \"none\")]\n+    #[unstable(feature = \"pin_static_ref\", issue = \"78186\")]\n     #[rustc_const_unstable(feature = \"const_pin\", issue = \"76654\")]\n     pub const fn static_mut(r: &'static mut T) -> Pin<&'static mut T> {\n         // SAFETY: The 'static borrow guarantees the data will not be"}, {"sha": "47b59d4a6772ce2a58c36811887d4ef5376f698f", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef3e3863939217678e5f7e755c4234d224107c64/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ef3e3863939217678e5f7e755c4234d224107c64/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=ef3e3863939217678e5f7e755c4234d224107c64", "patch": "@@ -24,7 +24,7 @@ hashbrown = { version = \"0.9.0\", default-features = false, features = ['rustc-de\n \n # Dependencies of the `backtrace` crate\n addr2line = { version = \"0.13.0\", optional = true, default-features = false }\n-rustc-demangle = { version = \"0.1.4\", features = ['rustc-dep-of-std'] }\n+rustc-demangle = { version = \"0.1.18\", features = ['rustc-dep-of-std'] }\n miniz_oxide = { version = \"0.4.0\", optional = true, default-features = false }\n [dependencies.object]\n version = \"0.20\""}, {"sha": "37d6fab070b8e1d28a9f37b679b50170918d3f54", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef3e3863939217678e5f7e755c4234d224107c64/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3e3863939217678e5f7e755c4234d224107c64/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=ef3e3863939217678e5f7e755c4234d224107c64", "patch": "@@ -378,6 +378,8 @@ fn configure_cmake(\n             cfg.define(\"CMAKE_SYSTEM_NAME\", \"FreeBSD\");\n         } else if target.contains(\"windows\") {\n             cfg.define(\"CMAKE_SYSTEM_NAME\", \"Windows\");\n+        } else if target.contains(\"haiku\") {\n+            cfg.define(\"CMAKE_SYSTEM_NAME\", \"Haiku\");\n         }\n         // When cross-compiling we should also set CMAKE_SYSTEM_VERSION, but in\n         // that case like CMake we cannot easily determine system version either."}, {"sha": "7eccb09b073670fa93abf0656593142b2df7163c", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ef3e3863939217678e5f7e755c4234d224107c64/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/ef3e3863939217678e5f7e755c4234d224107c64/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=ef3e3863939217678e5f7e755c4234d224107c64", "patch": "@@ -1568,6 +1568,41 @@ h4 > .notable-traits {\n \t#titles, #titles > div {\n \t\theight: 73px;\n \t}\n+\n+\t#main > table:not(.table-display) td {\n+\t\tword-break: break-word;\n+\t\tmin-width: 10%;\n+\t}\n+\n+\t.search-container > div {\n+\t\tdisplay: block;\n+\t\twidth: calc(100% - 37px);\n+\t}\n+\n+\t#crate-search {\n+\t\twidth: 100%;\n+\t\tborder-radius: 4px;\n+\t\tborder: 0;\n+\t}\n+\n+\t#crate-search + .search-input {\n+\t\twidth: calc(100% + 71px);\n+\t\tmargin-left: -36px;\n+\t}\n+\n+\t#theme-picker, #settings-menu {\n+\t\tpadding: 5px;\n+\t\twidth: 31px;\n+\t\theight: 31px;\n+\t}\n+\n+\t#theme-picker {\n+\t\tmargin-top: -2px;\n+\t}\n+\n+\t#settings-menu {\n+\t\ttop: 7px;\n+\t}\n }\n \n h3.notable {"}, {"sha": "3788088b810b9e51e6ae444d0e470a63a3c55a5c", "filename": "src/test/ui/consts/const-address-of-mut.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef3e3863939217678e5f7e755c4234d224107c64/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3e3863939217678e5f7e755c4234d224107c64/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-mut.rs?ref=ef3e3863939217678e5f7e755c4234d224107c64", "patch": "@@ -1,14 +1,14 @@\n #![feature(raw_ref_op)]\n \n-const A: () = { let mut x = 2; &raw mut x; };           //~ ERROR `&raw mut` is not allowed\n+const A: () = { let mut x = 2; &raw mut x; };           //~ mutable reference\n \n-static B: () = { let mut x = 2; &raw mut x; };          //~ ERROR `&raw mut` is not allowed\n+static B: () = { let mut x = 2; &raw mut x; };          //~ mutable reference\n \n-static mut C: () = { let mut x = 2; &raw mut x; };      //~ ERROR `&raw mut` is not allowed\n+static mut C: () = { let mut x = 2; &raw mut x; };      //~ mutable reference\n \n const fn foo() {\n     let mut x = 0;\n-    let y = &raw mut x;                                 //~ ERROR `&raw mut` is not allowed\n+    let y = &raw mut x;                                 //~ mutable reference\n }\n \n fn main() {}"}, {"sha": "ec2dac5a7d16f951b036504cdd97239ba2b5f507", "filename": "src/test/ui/consts/const-address-of-mut.stderr", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ef3e3863939217678e5f7e755c4234d224107c64/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef3e3863939217678e5f7e755c4234d224107c64/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-mut.stderr?ref=ef3e3863939217678e5f7e755c4234d224107c64", "patch": "@@ -1,31 +1,22 @@\n-error[E0658]: `&raw mut` is not allowed in constants\n+error[E0764]: raw mutable references are not allowed in constants\n   --> $DIR/const-address-of-mut.rs:3:32\n    |\n LL | const A: () = { let mut x = 2; &raw mut x; };\n-   |                                ^^^^^^^^^^\n-   |\n-   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+   |                                ^^^^^^^^^^ `&raw mut` is only allowed in `const fn`\n \n-error[E0658]: `&raw mut` is not allowed in statics\n+error[E0764]: raw mutable references are not allowed in statics\n   --> $DIR/const-address-of-mut.rs:5:33\n    |\n LL | static B: () = { let mut x = 2; &raw mut x; };\n-   |                                 ^^^^^^^^^^\n-   |\n-   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+   |                                 ^^^^^^^^^^ `&raw mut` is only allowed in `const fn`\n \n-error[E0658]: `&raw mut` is not allowed in statics\n+error[E0764]: raw mutable references are not allowed in statics\n   --> $DIR/const-address-of-mut.rs:7:37\n    |\n LL | static mut C: () = { let mut x = 2; &raw mut x; };\n-   |                                     ^^^^^^^^^^\n-   |\n-   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+   |                                     ^^^^^^^^^^ `&raw mut` is only allowed in `const fn`\n \n-error[E0658]: `&raw mut` is not allowed in constant functions\n+error[E0658]: raw mutable references are not allowed in constant functions\n   --> $DIR/const-address-of-mut.rs:11:13\n    |\n LL |     let y = &raw mut x;\n@@ -36,4 +27,5 @@ LL |     let y = &raw mut x;\n \n error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors have detailed explanations: E0658, E0764.\n+For more information about an error, try `rustc --explain E0658`."}, {"sha": "0566b802e75b68a010971e5099ce75403508b1ce", "filename": "src/test/ui/consts/issue-77062-large-zst-array.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ef3e3863939217678e5f7e755c4234d224107c64/src%2Ftest%2Fui%2Fconsts%2Fissue-77062-large-zst-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3e3863939217678e5f7e755c4234d224107c64/src%2Ftest%2Fui%2Fconsts%2Fissue-77062-large-zst-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-77062-large-zst-array.rs?ref=ef3e3863939217678e5f7e755c4234d224107c64", "patch": "@@ -0,0 +1,5 @@\n+// build-pass\n+\n+fn main() {\n+    let _ = &[(); usize::MAX];\n+}"}, {"sha": "40d1882d7d2ad0ebab630acde3acd3fc77bd6278", "filename": "src/test/ui/consts/min_const_fn/address_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef3e3863939217678e5f7e755c4234d224107c64/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Faddress_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3e3863939217678e5f7e755c4234d224107c64/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Faddress_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Faddress_of.rs?ref=ef3e3863939217678e5f7e755c4234d224107c64", "patch": "@@ -2,15 +2,15 @@\n \n const fn mutable_address_of_in_const() {\n     let mut a = 0;\n-    let b = &raw mut a;         //~ ERROR `&raw mut` is not allowed\n+    let b = &raw mut a;         //~ ERROR mutable reference\n }\n \n struct X;\n \n impl X {\n     const fn inherent_mutable_address_of_in_const() {\n         let mut a = 0;\n-        let b = &raw mut a;     //~ ERROR `&raw mut` is not allowed\n+        let b = &raw mut a;     //~ ERROR mutable reference\n     }\n }\n "}, {"sha": "facc566513c28527112c0bccb7b6e9594d310a85", "filename": "src/test/ui/consts/min_const_fn/address_of.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef3e3863939217678e5f7e755c4234d224107c64/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Faddress_of.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef3e3863939217678e5f7e755c4234d224107c64/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Faddress_of.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Faddress_of.stderr?ref=ef3e3863939217678e5f7e755c4234d224107c64", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `&raw mut` is not allowed in constant functions\n+error[E0658]: raw mutable references are not allowed in constant functions\n   --> $DIR/address_of.rs:5:13\n    |\n LL |     let b = &raw mut a;\n@@ -7,7 +7,7 @@ LL |     let b = &raw mut a;\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0658]: `&raw mut` is not allowed in constant functions\n+error[E0658]: raw mutable references are not allowed in constant functions\n   --> $DIR/address_of.rs:13:17\n    |\n LL |         let b = &raw mut a;"}, {"sha": "b51da0e0d8cdd5945f9a0308794287cdaeb76b82", "filename": "src/test/ui/liveness/liveness-asm.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ef3e3863939217678e5f7e755c4234d224107c64/src%2Ftest%2Fui%2Fliveness%2Fliveness-asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3e3863939217678e5f7e755c4234d224107c64/src%2Ftest%2Fui%2Fliveness%2Fliveness-asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-asm.rs?ref=ef3e3863939217678e5f7e755c4234d224107c64", "patch": "@@ -0,0 +1,44 @@\n+// Ensure inout asm! operands are marked as used by the liveness pass\n+\n+// only-x86_64\n+// check-pass\n+\n+#![feature(asm)]\n+#![allow(dead_code)]\n+#![warn(unused_assignments)]\n+#![warn(unused_variables)]\n+\n+// Test the single inout case\n+unsafe fn f1(mut src: *const u8) {\n+    asm!(\"/*{0}*/\", inout(reg) src); //~ WARN value assigned to `src` is never read\n+}\n+\n+unsafe fn f2(mut src: *const u8) -> *const u8 {\n+    asm!(\"/*{0}*/\", inout(reg) src);\n+    src\n+}\n+\n+// Test the split inout case\n+unsafe fn f3(mut src: *const u8) {\n+    asm!(\"/*{0}*/\", inout(reg) src => src); //~ WARN value assigned to `src` is never read\n+}\n+\n+unsafe fn f4(mut src: *const u8) -> *const u8 {\n+    asm!(\"/*{0}*/\", inout(reg) src => src);\n+    src\n+}\n+\n+// Tests the use of field projections\n+struct S {\n+    field: *mut u8,\n+}\n+\n+unsafe fn f5(src: &mut S) {\n+    asm!(\"/*{0}*/\", inout(reg) src.field);\n+}\n+\n+unsafe fn f6(src: &mut S) {\n+    asm!(\"/*{0}*/\", inout(reg) src.field => src.field);\n+}\n+\n+fn main() {}"}, {"sha": "f385d7a8065b62174eecda05984a0d5a01bfe0dc", "filename": "src/test/ui/liveness/liveness-asm.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ef3e3863939217678e5f7e755c4234d224107c64/src%2Ftest%2Fui%2Fliveness%2Fliveness-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef3e3863939217678e5f7e755c4234d224107c64/src%2Ftest%2Fui%2Fliveness%2Fliveness-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-asm.stderr?ref=ef3e3863939217678e5f7e755c4234d224107c64", "patch": "@@ -0,0 +1,23 @@\n+warning: value assigned to `src` is never read\n+  --> $DIR/liveness-asm.rs:13:32\n+   |\n+LL |     asm!(\"/*{0}*/\", inout(reg) src);\n+   |                                ^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/liveness-asm.rs:8:9\n+   |\n+LL | #![warn(unused_assignments)]\n+   |         ^^^^^^^^^^^^^^^^^^\n+   = help: maybe it is overwritten before being read?\n+\n+warning: value assigned to `src` is never read\n+  --> $DIR/liveness-asm.rs:23:39\n+   |\n+LL |     asm!(\"/*{0}*/\", inout(reg) src => src);\n+   |                                       ^^^\n+   |\n+   = help: maybe it is overwritten before being read?\n+\n+warning: 2 warnings emitted\n+"}, {"sha": "e002124059f83dd322a1cb9f5e14b6202e5a9303", "filename": "src/test/ui/symbol-names/const-generics-demangling.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ef3e3863939217678e5f7e755c4234d224107c64/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3e3863939217678e5f7e755c4234d224107c64/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.rs?ref=ef3e3863939217678e5f7e755c4234d224107c64", "patch": "@@ -0,0 +1,38 @@\n+// build-fail\n+// compile-flags: -Z symbol-mangling-version=v0\n+\n+#![feature(min_const_generics, rustc_attrs)]\n+\n+pub struct Unsigned<const F: u8>;\n+\n+#[rustc_symbol_name]\n+//~^ ERROR symbol-name(_RMCs4fqI2P2rA04_25const_generics_demanglingINtB0_8UnsignedKhb_E)\n+//~| ERROR demangling(<const_generics_demangling[317d481089b8c8fe]::Unsigned<11: u8>>)\n+//~| ERROR demangling-alt(<const_generics_demangling::Unsigned<11>>)\n+impl Unsigned<11> {}\n+\n+pub struct Signed<const F: i16>;\n+\n+#[rustc_symbol_name]\n+//~^ ERROR symbol-name(_RMs_Cs4fqI2P2rA04_25const_generics_demanglingINtB2_6SignedKsn98_E)\n+//~| ERROR demangling(<const_generics_demangling[317d481089b8c8fe]::Signed<-152: i16>>)\n+//~| ERROR demangling-alt(<const_generics_demangling::Signed<-152>>)\n+impl Signed<-152> {}\n+\n+pub struct Bool<const F: bool>;\n+\n+#[rustc_symbol_name]\n+//~^ ERROR symbol-name(_RMs0_Cs4fqI2P2rA04_25const_generics_demanglingINtB3_4BoolKb1_E)\n+//~| ERROR demangling(<const_generics_demangling[317d481089b8c8fe]::Bool<true: bool>>)\n+//~| ERROR demangling-alt(<const_generics_demangling::Bool<true>>)\n+impl Bool<true> {}\n+\n+pub struct Char<const F: char>;\n+\n+#[rustc_symbol_name]\n+//~^ ERROR symbol-name(_RMs1_Cs4fqI2P2rA04_25const_generics_demanglingINtB3_4CharKc2202_E)\n+//~| ERROR demangling(<const_generics_demangling[317d481089b8c8fe]::Char<'\u2202': char>>)\n+//~| ERROR demangling-alt(<const_generics_demangling::Char<'\u2202'>>)\n+impl Char<'\u2202'> {}\n+\n+fn main() {}"}, {"sha": "022b3188373c935f56cc691e6db2dbb0fc9091cf", "filename": "src/test/ui/symbol-names/const-generics-demangling.stderr", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/ef3e3863939217678e5f7e755c4234d224107c64/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef3e3863939217678e5f7e755c4234d224107c64/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.stderr?ref=ef3e3863939217678e5f7e755c4234d224107c64", "patch": "@@ -0,0 +1,74 @@\n+error: symbol-name(_RMCs4fqI2P2rA04_25const_generics_demanglingINtB0_8UnsignedKhb_E)\n+  --> $DIR/const-generics-demangling.rs:8:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<const_generics_demangling[317d481089b8c8fe]::Unsigned<11: u8>>)\n+  --> $DIR/const-generics-demangling.rs:8:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<const_generics_demangling::Unsigned<11>>)\n+  --> $DIR/const-generics-demangling.rs:8:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RMs_Cs4fqI2P2rA04_25const_generics_demanglingINtB2_6SignedKsn98_E)\n+  --> $DIR/const-generics-demangling.rs:16:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<const_generics_demangling[317d481089b8c8fe]::Signed<-152: i16>>)\n+  --> $DIR/const-generics-demangling.rs:16:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<const_generics_demangling::Signed<-152>>)\n+  --> $DIR/const-generics-demangling.rs:16:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RMs0_Cs4fqI2P2rA04_25const_generics_demanglingINtB3_4BoolKb1_E)\n+  --> $DIR/const-generics-demangling.rs:24:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<const_generics_demangling[317d481089b8c8fe]::Bool<true: bool>>)\n+  --> $DIR/const-generics-demangling.rs:24:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<const_generics_demangling::Bool<true>>)\n+  --> $DIR/const-generics-demangling.rs:24:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RMs1_Cs4fqI2P2rA04_25const_generics_demanglingINtB3_4CharKc2202_E)\n+  --> $DIR/const-generics-demangling.rs:32:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<const_generics_demangling[317d481089b8c8fe]::Char<'\u2202': char>>)\n+  --> $DIR/const-generics-demangling.rs:32:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<const_generics_demangling::Char<'\u2202'>>)\n+  --> $DIR/const-generics-demangling.rs:32:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 12 previous errors\n+"}, {"sha": "ad87000228d04ac0a98fbdd0f178a3a3c2ea50db", "filename": "src/test/ui/symbol-names/const-generics.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/ef3e3863939217678e5f7e755c4234d224107c64/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef3e3863939217678e5f7e755c4234d224107c64/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics.rs?ref=ef3e3863939217678e5f7e755c4234d224107c64", "patch": "@@ -0,0 +1,87 @@\n+// check-pass\n+// revisions: legacy v0\n+//[legacy]compile-flags: -Z symbol-mangling-version=legacy --crate-type=lib\n+    //[v0]compile-flags: -Z symbol-mangling-version=v0 --crate-type=lib\n+\n+    #![feature(min_const_generics)]\n+\n+    // `char`\n+    pub struct Char<const F: char>;\n+\n+    impl Char<'A'> {\n+        pub fn foo() {}\n+    }\n+\n+    impl<const F: char> Char<F> {\n+        pub fn bar() {}\n+    }\n+\n+    // `i8`\n+    pub struct I8<const F: i8>;\n+\n+    impl I8<{std::i8::MIN}> {\n+        pub fn foo() {}\n+    }\n+\n+    impl I8<{std::i8::MAX}> {\n+        pub fn foo() {}\n+    }\n+\n+    impl<const F: i8> I8<F> {\n+        pub fn bar() {}\n+    }\n+\n+    // `i16`\n+    pub struct I16<const F: i16>;\n+\n+    impl I16<{std::i16::MIN}> {\n+        pub fn foo() {}\n+    }\n+\n+    impl<const F: i16> I16<F> {\n+        pub fn bar() {}\n+    }\n+\n+    // `i32`\n+    pub struct I32<const F: i32>;\n+\n+    impl I32<{std::i32::MIN}> {\n+        pub fn foo() {}\n+    }\n+\n+    impl<const F: i32> I32<F> {\n+        pub fn bar() {}\n+    }\n+\n+    // `i64`\n+    pub struct I64<const F: i64>;\n+\n+    impl I64<{std::i64::MIN}> {\n+        pub fn foo() {}\n+    }\n+\n+    impl<const F: i64> I64<F> {\n+        pub fn bar() {}\n+    }\n+\n+    // `i128`\n+    pub struct I128<const F: i128>;\n+\n+    impl I128<{std::i128::MIN}> {\n+        pub fn foo() {}\n+    }\n+\n+    impl<const F: i128> I128<F> {\n+        pub fn bar() {}\n+    }\n+\n+    // `isize`\n+    pub struct ISize<const F: isize>;\n+\n+    impl ISize<3> {\n+        pub fn foo() {}\n+    }\n+\n+    impl<const F: isize> ISize<F> {\n+        pub fn bar() {}\n+    }"}, {"sha": "ac684a3c47e42f8d6fc88b0383a0392982415aed", "filename": "src/tools/rust-demangler/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef3e3863939217678e5f7e755c4234d224107c64/src%2Ftools%2Frust-demangler%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ef3e3863939217678e5f7e755c4234d224107c64/src%2Ftools%2Frust-demangler%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-demangler%2FCargo.toml?ref=ef3e3863939217678e5f7e755c4234d224107c64", "patch": "@@ -6,7 +6,7 @@ edition = \"2018\"\n \n [dependencies]\n regex = \"1.0\"\n-rustc-demangle = \"0.1\"\n+rustc-demangle = \"0.1.17\"\n \n [[bin]]\n name = \"rust-demangler\""}]}