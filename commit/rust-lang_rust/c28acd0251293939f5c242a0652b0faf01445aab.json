{"sha": "c28acd0251293939f5c242a0652b0faf01445aab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyOGFjZDAyNTEyOTM5MzlmNWMyNDJhMDY1MmIwZmFmMDE0NDVhYWI=", "commit": {"author": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-19T21:39:49Z"}, "committer": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-19T21:39:49Z"}, "message": "rollup merge of #19090: kmcallister/deriving-non-type\n\nBesides being more helpful, this gives us the flexibility to later define a meaning for something like\n\n```rust\n#[deriving(...)]\nmod bar { ... }\n```", "tree": {"sha": "95cf7cd195bc0f7ff298c0906eda3311ab775288", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95cf7cd195bc0f7ff298c0906eda3311ab775288"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c28acd0251293939f5c242a0652b0faf01445aab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c28acd0251293939f5c242a0652b0faf01445aab", "html_url": "https://github.com/rust-lang/rust/commit/c28acd0251293939f5c242a0652b0faf01445aab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c28acd0251293939f5c242a0652b0faf01445aab/comments", "author": null, "committer": null, "parents": [{"sha": "7884dd9cec832e667594aaeed1144a2a9bab3800", "url": "https://api.github.com/repos/rust-lang/rust/commits/7884dd9cec832e667594aaeed1144a2a9bab3800", "html_url": "https://github.com/rust-lang/rust/commit/7884dd9cec832e667594aaeed1144a2a9bab3800"}, {"sha": "ad61ff4b817f8581ea4c12f897f5e6baafe27952", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad61ff4b817f8581ea4c12f897f5e6baafe27952", "html_url": "https://github.com/rust-lang/rust/commit/ad61ff4b817f8581ea4c12f897f5e6baafe27952"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "fcd4966683d3b3e16c4b971497ab973e6d7e1edd", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c28acd0251293939f5c242a0652b0faf01445aab/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28acd0251293939f5c242a0652b0faf01445aab/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=c28acd0251293939f5c242a0652b0faf01445aab", "patch": "@@ -335,7 +335,7 @@ pub fn combine_substructure<'a>(f: CombineSubstructureFunc<'a>)\n impl<'a> TraitDef<'a> {\n     pub fn expand(&self,\n                   cx: &mut ExtCtxt,\n-                  _mitem: &ast::MetaItem,\n+                  mitem: &ast::MetaItem,\n                   item: &ast::Item,\n                   push: |P<ast::Item>|) {\n         let newitem = match item.node {\n@@ -351,7 +351,10 @@ impl<'a> TraitDef<'a> {\n                                      item.ident,\n                                      generics)\n             }\n-            _ => return\n+            _ => {\n+                cx.span_err(mitem.span, \"`deriving` may only be applied to structs and enums\");\n+                return;\n+            }\n         };\n         // Keep the lint attributes of the previous item to control how the\n         // generated implementations are linted"}, {"sha": "8226bba42b0e1f345d03f5ce440673965b8809b9", "filename": "src/test/compile-fail/deriving-non-type.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c28acd0251293939f5c242a0652b0faf01445aab/src%2Ftest%2Fcompile-fail%2Fderiving-non-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28acd0251293939f5c242a0652b0faf01445aab/src%2Ftest%2Fcompile-fail%2Fderiving-non-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-non-type.rs?ref=c28acd0251293939f5c242a0652b0faf01445aab", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(dead_code)]\n+\n+struct S;\n+\n+#[deriving(PartialEq)] //~ ERROR: `deriving` may only be applied to structs and enums\n+trait T { }\n+\n+#[deriving(PartialEq)] //~ ERROR: `deriving` may only be applied to structs and enums\n+impl S { }\n+\n+#[deriving(PartialEq)] //~ ERROR: `deriving` may only be applied to structs and enums\n+impl T for S { }\n+\n+#[deriving(PartialEq)] //~ ERROR: `deriving` may only be applied to structs and enums\n+static s: uint = 0u;\n+\n+#[deriving(PartialEq)] //~ ERROR: `deriving` may only be applied to structs and enums\n+const c: uint = 0u;\n+\n+#[deriving(PartialEq)] //~ ERROR: `deriving` may only be applied to structs and enums\n+mod m { }\n+\n+#[deriving(PartialEq)] //~ ERROR: `deriving` may only be applied to structs and enums\n+extern \"C\" { }\n+\n+#[deriving(PartialEq)] //~ ERROR: `deriving` may only be applied to structs and enums\n+type A = uint;\n+\n+#[deriving(PartialEq)] //~ ERROR: `deriving` may only be applied to structs and enums\n+fn main() { }"}]}