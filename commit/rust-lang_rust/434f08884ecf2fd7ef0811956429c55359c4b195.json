{"sha": "434f08884ecf2fd7ef0811956429c55359c4b195", "node_id": "C_kwDOAAsO6NoAKDQzNGYwODg4NGVjZjJmZDdlZjA4MTE5NTY0MjljNTUzNTljNGIxOTU", "commit": {"author": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "me@fmease.dev", "date": "2023-05-17T17:47:23Z"}, "committer": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "me@fmease.dev", "date": "2023-05-17T21:53:58Z"}, "message": "Exclude inherent projections from some alias ty matches", "tree": {"sha": "c261a9c85e3c0e19a4c2b3bf5934dee54dfbe49c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c261a9c85e3c0e19a4c2b3bf5934dee54dfbe49c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/434f08884ecf2fd7ef0811956429c55359c4b195", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXSQFaHGAjVoD5I3F0XoHIV9o5xMFAmRlTPkACgkQ0XoHIV9o\n5xN+sxAAim4mD8irteGGSSGQjlVdEuiOX+hJSP/tNbC76BsepUZqKViuYWqQSVnN\n2wALK2IGb5glKeNUq5YISnVsjM5o+wY9rsOaluZj/q29OTIrlYNpDlASYgIBc3dI\nTg78HhEnovjVCQlBXIUrbhnII9W8ZPbDhfEjOUbAygWAWbYhPKPWYP2wvSPqw9wM\nGBLjxbqc4Ybc0FeyG0ljXAcGcN1UFfWpgC+iIbkXsfvC4PgdRRWRNsYYnBoq/u7Y\nYjFkycpH+z3+9XWiFNJtUvXqzuN3GUByVbVNVC6zhG1hLaf0Bq32BGp93Fb2J/hK\nxKOEBa60KJzySahMUZlRDgiOG40oy3JM4p+S6Z/CA55bPS23VVBRhsKAg4yTFx19\n/TKpdPsRas5ogVjyRURXB6L8CKHriDmPI1CxYXaUhELP1FiQxvgNZCFTlcd48kBP\ncUpWFk2bLoKWyiERARO9iQmmbH+a1/YRLUHjOATes+EVH253I3LGZ4zE5DG8UOQs\n8uZ/G9YY91HJrj5Z1ig1iyf1p7yiKzVXFMzzxOBhg/tD8jZEht1H38fVOJ6B2nTk\ncotUaIOWTqf5Ci8Q5+irPWUf2+hRikYqWSwoJxiQrSYUlzz1591rK429lkVHf2Jk\nIVL9xPGSNGzyFzKnnNy7fUsZSru+Q46yyUQd57YoH07w07b2o60=\n=+1iX\n-----END PGP SIGNATURE-----", "payload": "tree c261a9c85e3c0e19a4c2b3bf5934dee54dfbe49c\nparent c2ccc855e74aec03e434405eca3c247ee2432e53\nauthor Le\u00f3n Orell Valerian Liehr <me@fmease.dev> 1684345643 +0200\ncommitter Le\u00f3n Orell Valerian Liehr <me@fmease.dev> 1684360438 +0200\n\nExclude inherent projections from some alias ty matches\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/434f08884ecf2fd7ef0811956429c55359c4b195", "html_url": "https://github.com/rust-lang/rust/commit/434f08884ecf2fd7ef0811956429c55359c4b195", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/434f08884ecf2fd7ef0811956429c55359c4b195/comments", "author": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2ccc855e74aec03e434405eca3c247ee2432e53", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2ccc855e74aec03e434405eca3c247ee2432e53", "html_url": "https://github.com/rust-lang/rust/commit/c2ccc855e74aec03e434405eca3c247ee2432e53"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "d14e6244f7d0774335a413ce5649fe9adc796811", "filename": "compiler/rustc_trait_selection/src/solve/assembly/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/434f08884ecf2fd7ef0811956429c55359c4b195/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/434f08884ecf2fd7ef0811956429c55359c4b195/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs?ref=434f08884ecf2fd7ef0811956429c55359c4b195", "patch": "@@ -506,10 +506,12 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             | ty::Param(_)\n             | ty::Placeholder(..)\n             | ty::Infer(ty::IntVar(_) | ty::FloatVar(_))\n+            | ty::Alias(ty::Inherent, _)\n             | ty::Error(_) => return,\n             ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_))\n             | ty::Bound(..) => bug!(\"unexpected self type for `{goal:?}`\"),\n-            ty::Alias(_, alias_ty) => alias_ty,\n+            // Excluding IATs here as they don't have meaningful item bounds.\n+            ty::Alias(ty::Projection | ty::Opaque, alias_ty) => alias_ty,\n         };\n \n         for assumption in self.tcx().item_bounds(alias_ty.def_id).subst(self.tcx(), alias_ty.substs)"}, {"sha": "79ecbabb5f7a56fe7dec14829187044136bfefd8", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/434f08884ecf2fd7ef0811956429c55359c4b195/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/434f08884ecf2fd7ef0811956429c55359c4b195/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=434f08884ecf2fd7ef0811956429c55359c4b195", "patch": "@@ -1543,7 +1543,10 @@ fn assemble_candidates_from_trait_def<'cx, 'tcx>(\n     // Check whether the self-type is itself a projection.\n     // If so, extract what we know from the trait and try to come up with a good answer.\n     let bounds = match *obligation.predicate.self_ty().kind() {\n-        ty::Alias(_, ref data) => tcx.item_bounds(data.def_id).subst(tcx, data.substs),\n+        // Excluding IATs here as they don't have meaningful item bounds.\n+        ty::Alias(ty::Projection | ty::Opaque, ref data) => {\n+            tcx.item_bounds(data.def_id).subst(tcx, data.substs)\n+        }\n         ty::Infer(ty::TyVar(_)) => {\n             // If the self-type is an inference variable, then it MAY wind up\n             // being a projected type, so induce an ambiguity."}, {"sha": "aa230936903f1ce75a1473539d07594ec77c078c", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/434f08884ecf2fd7ef0811956429c55359c4b195/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/434f08884ecf2fd7ef0811956429c55359c4b195/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=434f08884ecf2fd7ef0811956429c55359c4b195", "patch": "@@ -143,7 +143,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // Before we go into the whole placeholder thing, just\n         // quickly check if the self-type is a projection at all.\n         match obligation.predicate.skip_binder().trait_ref.self_ty().kind() {\n-            ty::Alias(..) => {}\n+            // Excluding IATs here as they don't have meaningful item bounds.\n+            ty::Alias(ty::Projection | ty::Opaque, _) => {}\n             ty::Infer(ty::TyVar(_)) => {\n                 span_bug!(\n                     obligation.cause.span,"}, {"sha": "de023501f9e8595e69cff010498499fd109bf720", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/434f08884ecf2fd7ef0811956429c55359c4b195/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/434f08884ecf2fd7ef0811956429c55359c4b195/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=434f08884ecf2fd7ef0811956429c55359c4b195", "patch": "@@ -156,7 +156,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let placeholder_self_ty = placeholder_trait_predicate.self_ty();\n         let placeholder_trait_predicate = ty::Binder::dummy(placeholder_trait_predicate);\n         let (def_id, substs) = match *placeholder_self_ty.kind() {\n-            ty::Alias(_, ty::AliasTy { def_id, substs, .. }) => (def_id, substs),\n+            // Excluding IATs here as they don't have meaningful item bounds.\n+            ty::Alias(ty::Projection | ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n+                (def_id, substs)\n+            }\n             _ => bug!(\"projection candidate for unexpected type: {:?}\", placeholder_self_ty),\n         };\n "}, {"sha": "f1bd9f5bbf8fa649910d05a9fbaa455a661dbd74", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/434f08884ecf2fd7ef0811956429c55359c4b195/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/434f08884ecf2fd7ef0811956429c55359c4b195/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=434f08884ecf2fd7ef0811956429c55359c4b195", "patch": "@@ -1645,7 +1645,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let tcx = self.infcx.tcx;\n         let (def_id, substs) = match *placeholder_trait_predicate.trait_ref.self_ty().kind() {\n-            ty::Alias(_, ty::AliasTy { def_id, substs, .. }) => (def_id, substs),\n+            ty::Alias(ty::Projection | ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n+                (def_id, substs)\n+            }\n             _ => {\n                 span_bug!(\n                     obligation.cause.span,"}, {"sha": "b65e6c7261a57b3ed339abe49f97f8854b649c60", "filename": "src/tools/clippy/tests/ui/issue-111399.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/434f08884ecf2fd7ef0811956429c55359c4b195/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue-111399.rs", "raw_url": "https://github.com/rust-lang/rust/raw/434f08884ecf2fd7ef0811956429c55359c4b195/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue-111399.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue-111399.rs?ref=434f08884ecf2fd7ef0811956429c55359c4b195", "patch": "@@ -0,0 +1,13 @@\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+// Check that rustc doesn't crash on the trait bound `Self::Ty: std::marker::Freeze`.\n+\n+pub struct Struct;\n+\n+impl Struct {\n+    pub type Ty = usize;\n+    pub const CT: Self::Ty = 42;\n+}\n+\n+fn main() {}"}]}