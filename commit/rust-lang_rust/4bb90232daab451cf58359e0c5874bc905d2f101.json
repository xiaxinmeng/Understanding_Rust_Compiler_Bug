{"sha": "4bb90232daab451cf58359e0c5874bc905d2f101", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYjkwMjMyZGFhYjQ1MWNmNTgzNTllMGM1ODc0YmM5MDVkMmYxMDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-30T05:59:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-30T05:59:49Z"}, "message": "Auto merge of #27588 - cesarb:read_all, r=alexcrichton\n\nThis implements the proposed \"read_exact\" RFC (https://github.com/rust-lang/rfcs/pull/980).\r\n\r\nTracking issue: https://github.com/rust-lang/rust/issues/27585", "tree": {"sha": "3c58214650cd1c8c3cee6575d6ac2cb59cbdcf2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c58214650cd1c8c3cee6575d6ac2cb59cbdcf2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bb90232daab451cf58359e0c5874bc905d2f101", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb90232daab451cf58359e0c5874bc905d2f101", "html_url": "https://github.com/rust-lang/rust/commit/4bb90232daab451cf58359e0c5874bc905d2f101", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bb90232daab451cf58359e0c5874bc905d2f101/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f749254cafd4940243548730afc02c5410611bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f749254cafd4940243548730afc02c5410611bf", "html_url": "https://github.com/rust-lang/rust/commit/2f749254cafd4940243548730afc02c5410611bf"}, {"sha": "73e7a7269553f661501d54c1fe8c57aa12b126fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/73e7a7269553f661501d54c1fe8c57aa12b126fa", "html_url": "https://github.com/rust-lang/rust/commit/73e7a7269553f661501d54c1fe8c57aa12b126fa"}], "stats": {"total": 140, "additions": 140, "deletions": 0}, "files": [{"sha": "d161b6250687b1d25b39ec7354bbc14ed94bbd2f", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4bb90232daab451cf58359e0c5874bc905d2f101/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb90232daab451cf58359e0c5874bc905d2f101/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=4bb90232daab451cf58359e0c5874bc905d2f101", "patch": "@@ -150,6 +150,15 @@ pub enum ErrorKind {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Other,\n \n+    /// An error returned when an operation could not be completed because an\n+    /// \"end of file\" was reached prematurely.\n+    ///\n+    /// This typically means that an operation could only succeed if it read a\n+    /// particular number of bytes but only a smaller number of bytes could be\n+    /// read.\n+    #[unstable(feature = \"read_exact\", reason = \"recently added\", issue = \"27585\")]\n+    UnexpectedEOF,\n+\n     /// Any I/O error not part of this list.\n     #[unstable(feature = \"io_error_internals\",\n                reason = \"better expressed through extensible enums that this \\"}, {"sha": "79013000fe3b591c32ce1f65fd7632ddc191e5db", "filename": "src/libstd/io/impls.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4bb90232daab451cf58359e0c5874bc905d2f101/src%2Flibstd%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb90232daab451cf58359e0c5874bc905d2f101/src%2Flibstd%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fimpls.rs?ref=4bb90232daab451cf58359e0c5874bc905d2f101", "patch": "@@ -36,6 +36,11 @@ impl<'a, R: Read + ?Sized> Read for &'a mut R {\n     fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {\n         (**self).read_to_string(buf)\n     }\n+\n+    #[inline]\n+    fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {\n+        (**self).read_exact(buf)\n+    }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, W: Write + ?Sized> Write for &'a mut W {\n@@ -95,6 +100,11 @@ impl<R: Read + ?Sized> Read for Box<R> {\n     fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {\n         (**self).read_to_string(buf)\n     }\n+\n+    #[inline]\n+    fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {\n+        (**self).read_exact(buf)\n+    }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<W: Write + ?Sized> Write for Box<W> {\n@@ -151,6 +161,17 @@ impl<'a> Read for &'a [u8] {\n         *self = b;\n         Ok(amt)\n     }\n+\n+    #[inline]\n+    fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {\n+        if buf.len() > self.len() {\n+            return Err(Error::new(ErrorKind::UnexpectedEOF, \"failed to fill whole buffer\"));\n+        }\n+        let (a, b) = self.split_at(buf.len());\n+        slice::bytes::copy_memory(a, buf);\n+        *self = b;\n+        Ok(())\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "72a74c23dc8e3035ff87af77989612fc81b10456", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/4bb90232daab451cf58359e0c5874bc905d2f101/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb90232daab451cf58359e0c5874bc905d2f101/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=4bb90232daab451cf58359e0c5874bc905d2f101", "patch": "@@ -544,6 +544,72 @@ pub trait Read {\n         append_to_string(buf, |b| read_to_end(self, b))\n     }\n \n+    /// Read the exact number of bytes required to fill `buf`.\n+    ///\n+    /// This function reads as many bytes as necessary to completely fill the\n+    /// specified buffer `buf`.\n+    ///\n+    /// No guarantees are provided about the contents of `buf` when this\n+    /// function is called, implementations cannot rely on any property of the\n+    /// contents of `buf` being true. It is recommended that implementations\n+    /// only write data to `buf` instead of reading its contents.\n+    ///\n+    /// # Errors\n+    ///\n+    /// If this function encounters an error of the kind\n+    /// `ErrorKind::Interrupted` then the error is ignored and the operation\n+    /// will continue.\n+    ///\n+    /// If this function encounters an \"end of file\" before completely filling\n+    /// the buffer, it returns an error of the kind `ErrorKind::UnexpectedEOF`.\n+    /// The contents of `buf` are unspecified in this case.\n+    ///\n+    /// If any other read error is encountered then this function immediately\n+    /// returns. The contents of `buf` are unspecified in this case.\n+    ///\n+    /// If this function returns an error, it is unspecified how many bytes it\n+    /// has read, but it will never read more than would be necessary to\n+    /// completely fill the buffer.\n+    ///\n+    /// # Examples\n+    ///\n+    /// [`File`][file]s implement `Read`:\n+    ///\n+    /// [file]: ../std/fs/struct.File.html\n+    ///\n+    /// ```\n+    /// #![feature(read_exact)]\n+    /// use std::io;\n+    /// use std::io::prelude::*;\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let mut f = try!(File::open(\"foo.txt\"));\n+    /// let mut buffer = [0; 10];\n+    ///\n+    /// // read exactly 10 bytes\n+    /// try!(f.read_exact(&mut buffer));\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    #[unstable(feature = \"read_exact\", reason = \"recently added\", issue = \"27585\")]\n+    fn read_exact(&mut self, mut buf: &mut [u8]) -> Result<()> {\n+        while !buf.is_empty() {\n+            match self.read(buf) {\n+                Ok(0) => break,\n+                Ok(n) => { let tmp = buf; buf = &mut tmp[n..]; }\n+                Err(ref e) if e.kind() == ErrorKind::Interrupted => {}\n+                Err(e) => return Err(e),\n+            }\n+        }\n+        if !buf.is_empty() {\n+            Err(Error::new(ErrorKind::UnexpectedEOF,\n+                           \"failed to fill whole buffer\"))\n+        } else {\n+            Ok(())\n+        }\n+    }\n+\n     /// Creates a \"by reference\" adaptor for this instance of `Read`.\n     ///\n     /// The returned adaptor also implements `Read` and will simply borrow this\n@@ -1818,6 +1884,47 @@ mod tests {\n         assert!(c.read_to_string(&mut v).is_err());\n     }\n \n+    #[test]\n+    fn read_exact() {\n+        let mut buf = [0; 4];\n+\n+        let mut c = Cursor::new(&b\"\"[..]);\n+        assert_eq!(c.read_exact(&mut buf).unwrap_err().kind(),\n+                   io::ErrorKind::UnexpectedEOF);\n+\n+        let mut c = Cursor::new(&b\"123\"[..]).chain(Cursor::new(&b\"456789\"[..]));\n+        c.read_exact(&mut buf).unwrap();\n+        assert_eq!(&buf, b\"1234\");\n+        c.read_exact(&mut buf).unwrap();\n+        assert_eq!(&buf, b\"5678\");\n+        assert_eq!(c.read_exact(&mut buf).unwrap_err().kind(),\n+                   io::ErrorKind::UnexpectedEOF);\n+    }\n+\n+    #[test]\n+    fn read_exact_slice() {\n+        let mut buf = [0; 4];\n+\n+        let mut c = &b\"\"[..];\n+        assert_eq!(c.read_exact(&mut buf).unwrap_err().kind(),\n+                   io::ErrorKind::UnexpectedEOF);\n+\n+        let mut c = &b\"123\"[..];\n+        assert_eq!(c.read_exact(&mut buf).unwrap_err().kind(),\n+                   io::ErrorKind::UnexpectedEOF);\n+        // make sure the optimized (early returning) method is being used\n+        assert_eq!(&buf, &[0; 4]);\n+\n+        let mut c = &b\"1234\"[..];\n+        c.read_exact(&mut buf).unwrap();\n+        assert_eq!(&buf, b\"1234\");\n+\n+        let mut c = &b\"56789\"[..];\n+        c.read_exact(&mut buf).unwrap();\n+        assert_eq!(&buf, b\"5678\");\n+        assert_eq!(c, b\"9\");\n+    }\n+\n     #[test]\n     fn take_eof() {\n         struct R;"}, {"sha": "c2110ef1d83b512bc22e12d45a7da25d5cd82352", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4bb90232daab451cf58359e0c5874bc905d2f101/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb90232daab451cf58359e0c5874bc905d2f101/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=4bb90232daab451cf58359e0c5874bc905d2f101", "patch": "@@ -271,6 +271,9 @@ impl Read for Stdin {\n     fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {\n         self.lock().read_to_string(buf)\n     }\n+    fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {\n+        self.lock().read_exact(buf)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}