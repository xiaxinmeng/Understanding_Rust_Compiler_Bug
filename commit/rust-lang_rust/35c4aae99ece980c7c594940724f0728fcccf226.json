{"sha": "35c4aae99ece980c7c594940724f0728fcccf226", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YzRhYWU5OWVjZTk4MGM3YzU5NDk0MDcyNGYwNzI4ZmNjY2YyMjY=", "commit": {"author": {"name": "Sebastian Imlay", "email": "sebastian.imlay@gmail.com", "date": "2020-01-11T02:48:37Z"}, "committer": {"name": "Sebastian Imlay", "email": "sebastian.imlay@gmail.com", "date": "2020-01-11T02:48:37Z"}, "message": "Added tvOS as a backend", "tree": {"sha": "b26c09a15228c4c4f03cb4911d5c6b977e50edaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b26c09a15228c4c4f03cb4911d5c6b977e50edaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35c4aae99ece980c7c594940724f0728fcccf226", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35c4aae99ece980c7c594940724f0728fcccf226", "html_url": "https://github.com/rust-lang/rust/commit/35c4aae99ece980c7c594940724f0728fcccf226", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35c4aae99ece980c7c594940724f0728fcccf226/comments", "author": {"login": "simlay", "id": 1163510, "node_id": "MDQ6VXNlcjExNjM1MTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1163510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simlay", "html_url": "https://github.com/simlay", "followers_url": "https://api.github.com/users/simlay/followers", "following_url": "https://api.github.com/users/simlay/following{/other_user}", "gists_url": "https://api.github.com/users/simlay/gists{/gist_id}", "starred_url": "https://api.github.com/users/simlay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simlay/subscriptions", "organizations_url": "https://api.github.com/users/simlay/orgs", "repos_url": "https://api.github.com/users/simlay/repos", "events_url": "https://api.github.com/users/simlay/events{/privacy}", "received_events_url": "https://api.github.com/users/simlay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "simlay", "id": 1163510, "node_id": "MDQ6VXNlcjExNjM1MTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1163510?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simlay", "html_url": "https://github.com/simlay", "followers_url": "https://api.github.com/users/simlay/followers", "following_url": "https://api.github.com/users/simlay/following{/other_user}", "gists_url": "https://api.github.com/users/simlay/gists{/gist_id}", "starred_url": "https://api.github.com/users/simlay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simlay/subscriptions", "organizations_url": "https://api.github.com/users/simlay/orgs", "repos_url": "https://api.github.com/users/simlay/repos", "events_url": "https://api.github.com/users/simlay/events{/privacy}", "received_events_url": "https://api.github.com/users/simlay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59eb49d0da83fff01ae3c63f2e282b953e5f88df", "url": "https://api.github.com/repos/rust-lang/rust/commits/59eb49d0da83fff01ae3c63f2e282b953e5f88df", "html_url": "https://github.com/rust-lang/rust/commit/59eb49d0da83fff01ae3c63f2e282b953e5f88df"}], "stats": {"total": 170, "additions": 170, "deletions": 0}, "files": [{"sha": "420e0d1c64c359dce33c679dff2151de87599a27", "filename": "src/librustc_target/spec/aarch64_apple_tvos.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/35c4aae99ece980c7c594940724f0728fcccf226/src%2Flibrustc_target%2Fspec%2Faarch64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35c4aae99ece980c7c594940724f0728fcccf226/src%2Flibrustc_target%2Fspec%2Faarch64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_apple_tvos.rs?ref=35c4aae99ece980c7c594940724f0728fcccf226", "patch": "@@ -0,0 +1,25 @@\n+use super::apple_tvos_base::{opts, Arch};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let base = opts(Arch::Arm64)?;\n+    Ok(Target {\n+        llvm_target: \"arm64-apple-tvos\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:o-i64:64-i128:128-n32:64-S128\".to_string(),\n+        arch: \"aarch64\".to_string(),\n+        target_os: \"tvos\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: \"apple\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        options: TargetOptions {\n+            features: \"+neon,+fp-armv8,+cyclone\".to_string(),\n+            eliminate_frame_pointer: false,\n+            max_atomic_width: Some(128),\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n+            ..base\n+        },\n+    })\n+}"}, {"sha": "70dc8093f88c14938647f93a33eb79650950a9bc", "filename": "src/librustc_target/spec/apple_tvos_base.rs", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/35c4aae99ece980c7c594940724f0728fcccf226/src%2Flibrustc_target%2Fspec%2Fapple_tvos_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35c4aae99ece980c7c594940724f0728fcccf226/src%2Flibrustc_target%2Fspec%2Fapple_tvos_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fapple_tvos_base.rs?ref=35c4aae99ece980c7c594940724f0728fcccf226", "patch": "@@ -0,0 +1,123 @@\n+use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n+use std::env;\n+use std::io;\n+use std::path::Path;\n+use std::process::Command;\n+\n+use Arch::*;\n+\n+#[allow(non_camel_case_types)]\n+#[derive(Copy, Clone)]\n+pub enum Arch {\n+    Arm64,\n+    X86_64,\n+}\n+\n+impl Arch {\n+    pub fn to_string(self) -> &'static str {\n+        match self {\n+            Arm64 => \"arm64\",\n+            X86_64 => \"x86_64\",\n+        }\n+    }\n+}\n+\n+pub fn get_sdk_root(sdk_name: &str) -> Result<String, String> {\n+    // Following what clang does\n+    // (https://github.com/llvm/llvm-project/blob/\n+    // 296a80102a9b72c3eda80558fb78a3ed8849b341/clang/lib/Driver/ToolChains/Darwin.cpp#L1661-L1678)\n+    // to allow the SDK path to be set. (For clang, xcrun sets\n+    // SDKROOT; for rustc, the user or build system can set it, or we\n+    // can fall back to checking for xcrun on PATH.)\n+    if let Some(sdkroot) = env::var(\"SDKROOT\").ok() {\n+        let p = Path::new(&sdkroot);\n+        match sdk_name {\n+            // Ignore `SDKROOT` if it's clearly set for the wrong platform.\n+            \"appletvos\"\n+                if sdkroot.contains(\"TVSimulator.platform\")\n+                    || sdkroot.contains(\"MacOSX.platform\") =>\n+            {\n+                ()\n+            }\n+            \"appletvsimulator\"\n+                if sdkroot.contains(\"TVOS.platform\") || sdkroot.contains(\"MacOSX.platform\") =>\n+            {\n+                ()\n+            }\n+            // Ignore `SDKROOT` if it's not a valid path.\n+            _ if !p.is_absolute() || p == Path::new(\"/\") || !p.exists() => (),\n+            _ => return Ok(sdkroot),\n+        }\n+    }\n+    let res =\n+        Command::new(\"xcrun\").arg(\"--show-sdk-path\").arg(\"-sdk\").arg(sdk_name).output().and_then(\n+            |output| {\n+                if output.status.success() {\n+                    Ok(String::from_utf8(output.stdout).unwrap())\n+                } else {\n+                    let error = String::from_utf8(output.stderr);\n+                    let error = format!(\"process exit with error: {}\", error.unwrap());\n+                    Err(io::Error::new(io::ErrorKind::Other, &error[..]))\n+                }\n+            },\n+        );\n+\n+    match res {\n+        Ok(output) => Ok(output.trim().to_string()),\n+        Err(e) => Err(format!(\"failed to get {} SDK path: {}\", sdk_name, e)),\n+    }\n+}\n+\n+fn build_pre_link_args(arch: Arch) -> Result<LinkArgs, String> {\n+    let sdk_name = match arch {\n+        Arm64 => \"appletvos\",\n+        X86_64 => \"appletvsimulator\",\n+    };\n+\n+    let arch_name = arch.to_string();\n+\n+    let sdk_root = get_sdk_root(sdk_name)?;\n+\n+    let mut args = LinkArgs::new();\n+    args.insert(\n+        LinkerFlavor::Gcc,\n+        vec![\n+            \"-arch\".to_string(),\n+            arch_name.to_string(),\n+            \"-isysroot\".to_string(),\n+            sdk_root.clone(),\n+            \"-Wl,-syslibroot\".to_string(),\n+            sdk_root,\n+        ],\n+    );\n+\n+    Ok(args)\n+}\n+\n+fn target_cpu(arch: Arch) -> String {\n+    match arch {\n+        Arm64 => \"cyclone\",\n+        X86_64 => \"core2\",\n+    }\n+    .to_string()\n+}\n+\n+fn link_env_remove(arch: Arch) -> Vec<String> {\n+    match arch {\n+        Arm64 | X86_64 => vec![\"MACOSX_DEPLOYMENT_TARGET\".to_string()],\n+    }\n+}\n+\n+pub fn opts(arch: Arch) -> Result<TargetOptions, String> {\n+    let pre_link_args = build_pre_link_args(arch)?;\n+    Ok(TargetOptions {\n+        cpu: target_cpu(arch),\n+        dynamic_linking: false,\n+        executables: true,\n+        pre_link_args,\n+        link_env_remove: link_env_remove(arch),\n+        has_elf_tls: false,\n+        eliminate_frame_pointer: false,\n+        ..super::apple_base::opts()\n+    })\n+}"}, {"sha": "fddbcb90da143709af65ab10feabe2909adda085", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/35c4aae99ece980c7c594940724f0728fcccf226/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35c4aae99ece980c7c594940724f0728fcccf226/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=35c4aae99ece980c7c594940724f0728fcccf226", "patch": "@@ -48,6 +48,7 @@ pub mod abi;\n mod android_base;\n mod apple_base;\n mod apple_ios_base;\n+mod apple_tvos_base;\n mod arm_base;\n mod cloudabi_base;\n mod dragonfly_base;\n@@ -434,6 +435,8 @@ supported_targets! {\n     (\"armv7-apple-ios\", armv7_apple_ios),\n     (\"armv7s-apple-ios\", armv7s_apple_ios),\n     (\"x86_64-apple-ios-macabi\", x86_64_apple_ios_macabi),\n+    (\"aarch64-apple-tvos\", aarch64_apple_tvos),\n+    (\"x86_64-apple-tvos\", x86_64_apple_tvos),\n \n     (\"armebv7r-none-eabi\", armebv7r_none_eabi),\n     (\"armebv7r-none-eabihf\", armebv7r_none_eabihf),"}, {"sha": "e40d978e750b7497045ddaab0ab688b8c7123478", "filename": "src/librustc_target/spec/x86_64_apple_tvos.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/35c4aae99ece980c7c594940724f0728fcccf226/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_tvos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35c4aae99ece980c7c594940724f0728fcccf226/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_tvos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_tvos.rs?ref=35c4aae99ece980c7c594940724f0728fcccf226", "patch": "@@ -0,0 +1,19 @@\n+use super::apple_tvos_base::{opts, Arch};\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let base = opts(Arch::X86_64)?;\n+    Ok(Target {\n+        llvm_target: \"x86_64-apple-tvos\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:o-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        arch: \"x86_64\".to_string(),\n+        target_os: \"tvos\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: \"apple\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        options: TargetOptions { max_atomic_width: Some(64), stack_probes: true, ..base },\n+    })\n+}"}]}