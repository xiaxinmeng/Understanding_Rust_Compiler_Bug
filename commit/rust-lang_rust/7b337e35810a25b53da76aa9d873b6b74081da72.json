{"sha": "7b337e35810a25b53da76aa9d873b6b74081da72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMzM3ZTM1ODEwYTI1YjUzZGE3NmFhOWQ4NzNiNmI3NDA4MWRhNzI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-11T05:47:18Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-11T05:47:18Z"}, "message": "rustc: Don't free shared memory when --gc is on", "tree": {"sha": "be3c35ff47d12ca9429480d11a29a68c2fc3e0de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be3c35ff47d12ca9429480d11a29a68c2fc3e0de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b337e35810a25b53da76aa9d873b6b74081da72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b337e35810a25b53da76aa9d873b6b74081da72", "html_url": "https://github.com/rust-lang/rust/commit/7b337e35810a25b53da76aa9d873b6b74081da72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b337e35810a25b53da76aa9d873b6b74081da72/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5d5f9ef4871d5340f8a7820309ed6ea97648058", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5d5f9ef4871d5340f8a7820309ed6ea97648058", "html_url": "https://github.com/rust-lang/rust/commit/a5d5f9ef4871d5340f8a7820309ed6ea97648058"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "165ad2761881b895a9c8488e4de65d5f7d00d222", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7b337e35810a25b53da76aa9d873b6b74081da72/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b337e35810a25b53da76aa9d873b6b74081da72/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=7b337e35810a25b53da76aa9d873b6b74081da72", "patch": "@@ -1292,11 +1292,22 @@ fn make_free_glue(cx: &@block_ctxt, v0: ValueRef, t: &ty::t) {\n     // FIXME: switch gc/non-gc on layer of the type.\n     let rs =\n         alt ty::struct(bcx_tcx(cx), t) {\n-          ty::ty_str. { let v = cx.build.Load(v0); trans_non_gc_free(cx, v) }\n+          ty::ty_str. {\n+            let v = cx.build.Load(v0);\n+            if !bcx_ccx(cx).sess.get_opts().do_gc {\n+                trans_non_gc_free(cx, v)\n+            } else {\n+                rslt(cx, C_nil())\n+            }\n+          }\n           ty::ty_vec(_) {\n             let v = cx.build.Load(v0);\n             let rs = iter_sequence(cx, v, t, bind drop_ty(_, _, _));\n-            trans_non_gc_free(rs.bcx, v)\n+            if !bcx_ccx(cx).sess.get_opts().do_gc {\n+                trans_non_gc_free(rs.bcx, v)\n+            } else {\n+                rslt(cx, C_nil())\n+            }\n           }\n           ty::ty_box(body_mt) {\n             let v = cx.build.Load(v0);\n@@ -1305,7 +1316,11 @@ fn make_free_glue(cx: &@block_ctxt, v0: ValueRef, t: &ty::t) {\n             let body_ty = body_mt.ty;\n             let body_val = load_if_immediate(cx, body, body_ty);\n             let rs = drop_ty(cx, body_val, body_ty);\n-            trans_non_gc_free(rs.bcx, v)\n+            if !bcx_ccx(cx).sess.get_opts().do_gc {\n+                trans_non_gc_free(rs.bcx, v)\n+            } else {\n+                rslt(cx, C_nil())\n+            }\n           }\n           ty::ty_uniq(_) {\n             fail \"free uniq unimplemented\";\n@@ -1341,7 +1356,11 @@ fn make_free_glue(cx: &@block_ctxt, v0: ValueRef, t: &ty::t) {\n             let ti = none[@tydesc_info];\n             call_tydesc_glue_full(cx, body, tydesc,\n                                   abi::tydesc_field_drop_glue, ti);\n-            trans_non_gc_free(cx, b)\n+            if (!bcx_ccx(cx).sess.get_opts().do_gc) {\n+                trans_non_gc_free(cx, b)\n+            } else {\n+                rslt(cx, C_nil())\n+            }\n           }\n           ty::ty_fn(_, _, _, _, _) {\n             let box_cell =\n@@ -1358,7 +1377,11 @@ fn make_free_glue(cx: &@block_ctxt, v0: ValueRef, t: &ty::t) {\n             let ti = none[@tydesc_info];\n             call_tydesc_glue_full(cx, bindings, cx.build.Load(tydescptr),\n                                   abi::tydesc_field_drop_glue, ti);\n-            trans_non_gc_free(cx, v)\n+            if (!bcx_ccx(cx).sess.get_opts().do_gc) {\n+                trans_non_gc_free(cx, v)\n+            } else {\n+                rslt(cx, C_nil())\n+            }\n           }\n           _ { rslt(cx, C_nil()) }\n         };"}]}