{"sha": "352abbaadeab323c1b5a69d4669e052e9a34fb67", "node_id": "C_kwDOAAsO6NoAKDM1MmFiYmFhZGVhYjMyM2MxYjVhNjlkNDY2OWUwNTJlOWEzNGZiNjc", "commit": {"author": {"name": "Kjetil Kjeka", "email": "kjetilkjeka@gmail.com", "date": "2022-03-07T14:09:28Z"}, "committer": {"name": "Kjetil Kjeka", "email": "kjetilkjeka@gmail.com", "date": "2022-04-19T16:03:36Z"}, "message": "Fix a bug in the ptx-kernel calling convention where structs was passed indirectly\n\nStructs being passed indirectly is suprpising and have a high chance not to work as the device and host usually do not share memory.", "tree": {"sha": "5906f2f7fa8e288b9efea73cee854225054f9dd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5906f2f7fa8e288b9efea73cee854225054f9dd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/352abbaadeab323c1b5a69d4669e052e9a34fb67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/352abbaadeab323c1b5a69d4669e052e9a34fb67", "html_url": "https://github.com/rust-lang/rust/commit/352abbaadeab323c1b5a69d4669e052e9a34fb67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/352abbaadeab323c1b5a69d4669e052e9a34fb67/comments", "author": {"login": "kjetilkjeka", "id": 5366742, "node_id": "MDQ6VXNlcjUzNjY3NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/5366742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjetilkjeka", "html_url": "https://github.com/kjetilkjeka", "followers_url": "https://api.github.com/users/kjetilkjeka/followers", "following_url": "https://api.github.com/users/kjetilkjeka/following{/other_user}", "gists_url": "https://api.github.com/users/kjetilkjeka/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjetilkjeka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjetilkjeka/subscriptions", "organizations_url": "https://api.github.com/users/kjetilkjeka/orgs", "repos_url": "https://api.github.com/users/kjetilkjeka/repos", "events_url": "https://api.github.com/users/kjetilkjeka/events{/privacy}", "received_events_url": "https://api.github.com/users/kjetilkjeka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjetilkjeka", "id": 5366742, "node_id": "MDQ6VXNlcjUzNjY3NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/5366742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjetilkjeka", "html_url": "https://github.com/kjetilkjeka", "followers_url": "https://api.github.com/users/kjetilkjeka/followers", "following_url": "https://api.github.com/users/kjetilkjeka/following{/other_user}", "gists_url": "https://api.github.com/users/kjetilkjeka/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjetilkjeka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjetilkjeka/subscriptions", "organizations_url": "https://api.github.com/users/kjetilkjeka/orgs", "repos_url": "https://api.github.com/users/kjetilkjeka/repos", "events_url": "https://api.github.com/users/kjetilkjeka/events{/privacy}", "received_events_url": "https://api.github.com/users/kjetilkjeka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "297273c45b205820a4c055082c71677197a40b55", "url": "https://api.github.com/repos/rust-lang/rust/commits/297273c45b205820a4c055082c71677197a40b55", "html_url": "https://github.com/rust-lang/rust/commit/297273c45b205820a4c055082c71677197a40b55"}], "stats": {"total": 107, "additions": 98, "deletions": 9}, "files": [{"sha": "fe097f05267aad1da94fc3428f1bc1cf1be0aa73", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/352abbaadeab323c1b5a69d4669e052e9a34fb67/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352abbaadeab323c1b5a69d4669e052e9a34fb67/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=352abbaadeab323c1b5a69d4669e052e9a34fb67", "patch": "@@ -2568,6 +2568,22 @@ where\n \n         pointee_info\n     }\n+\n+    fn is_adt(this: TyAndLayout<'tcx>) -> bool {\n+        matches!(this.ty.kind(), ty::Adt(..))\n+    }\n+\n+    fn is_never(this: TyAndLayout<'tcx>) -> bool {\n+        this.ty.kind() == &ty::Never\n+    }\n+\n+    fn is_tuple(this: TyAndLayout<'tcx>) -> bool {\n+        matches!(this.ty.kind(), ty::Tuple(..))\n+    }\n+\n+    fn is_unit(this: TyAndLayout<'tcx>) -> bool {\n+        matches!(this.ty.kind(), ty::Tuple(list) if list.len() == 0)\n+    }\n }\n \n impl<'tcx> ty::Instance<'tcx> {"}, {"sha": "197dc9205b4804d97fb79d07360afba35606ce72", "filename": "compiler/rustc_middle/src/ty/list.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352abbaadeab323c1b5a69d4669e052e9a34fb67/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352abbaadeab323c1b5a69d4669e052e9a34fb67/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs?ref=352abbaadeab323c1b5a69d4669e052e9a34fb67", "patch": "@@ -61,6 +61,10 @@ impl<T> List<T> {\n         static EMPTY_SLICE: InOrder<usize, MaxAlign> = InOrder(0, MaxAlign);\n         unsafe { &*(&EMPTY_SLICE as *const _ as *const List<T>) }\n     }\n+\n+    pub fn len(&self) -> usize {\n+        self.len\n+    }\n }\n \n impl<T: Copy> List<T> {"}, {"sha": "e6e9876473732f9fb30db7f7e78db3f448e2d51c", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/352abbaadeab323c1b5a69d4669e052e9a34fb67/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352abbaadeab323c1b5a69d4669e052e9a34fb67/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=352abbaadeab323c1b5a69d4669e052e9a34fb67", "patch": "@@ -696,7 +696,13 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n             \"sparc\" => sparc::compute_abi_info(cx, self),\n             \"sparc64\" => sparc64::compute_abi_info(cx, self),\n             \"nvptx\" => nvptx::compute_abi_info(self),\n-            \"nvptx64\" => nvptx64::compute_abi_info(self),\n+            \"nvptx64\" => {\n+                if cx.target_spec().adjust_abi(abi) == spec::abi::Abi::PtxKernel {\n+                    nvptx64::compute_ptx_kernel_abi_info(cx, self)\n+                } else {\n+                    nvptx64::compute_abi_info(self)\n+                }\n+            }\n             \"hexagon\" => hexagon::compute_abi_info(self),\n             \"riscv32\" | \"riscv64\" => riscv::compute_abi_info(cx, self),\n             \"wasm32\" | \"wasm64\" => {"}, {"sha": "fc16f1c97a4522dc45d1e3680c66ac35728886bc", "filename": "compiler/rustc_target/src/abi/call/nvptx64.rs", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/352abbaadeab323c1b5a69d4669e052e9a34fb67/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fnvptx64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352abbaadeab323c1b5a69d4669e052e9a34fb67/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fnvptx64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fnvptx64.rs?ref=352abbaadeab323c1b5a69d4669e052e9a34fb67", "patch": "@@ -1,21 +1,35 @@\n-// Reference: PTX Writer's Guide to Interoperability\n-// https://docs.nvidia.com/cuda/ptx-writers-guide-to-interoperability\n-\n-use crate::abi::call::{ArgAbi, FnAbi};\n+use crate::abi::call::{ArgAbi, FnAbi, PassMode, Reg, Size, Uniform};\n+use crate::abi::{HasDataLayout, TyAbiInterface};\n \n fn classify_ret<Ty>(ret: &mut ArgAbi<'_, Ty>) {\n     if ret.layout.is_aggregate() && ret.layout.size.bits() > 64 {\n         ret.make_indirect();\n-    } else {\n-        ret.extend_integer_width_to(64);\n     }\n }\n \n fn classify_arg<Ty>(arg: &mut ArgAbi<'_, Ty>) {\n     if arg.layout.is_aggregate() && arg.layout.size.bits() > 64 {\n         arg.make_indirect();\n-    } else {\n-        arg.extend_integer_width_to(64);\n+    }\n+}\n+\n+fn classify_arg_kernel<'a, Ty, C>(_cx: &C, arg: &mut ArgAbi<'a, Ty>)\n+where\n+    Ty: TyAbiInterface<'a, C> + Copy,\n+    C: HasDataLayout,\n+{\n+    if matches!(arg.mode, PassMode::Pair(..)) && (arg.layout.is_adt() || arg.layout.is_tuple()) {\n+        let align_bytes = arg.layout.align.abi.bytes();\n+\n+        let unit = match align_bytes {\n+            1 => Reg::i8(),\n+            2 => Reg::i16(),\n+            4 => Reg::i32(),\n+            8 => Reg::i64(),\n+            16 => Reg::i128(),\n+            _ => unreachable!(\"Align is given as power of 2 no larger than 16 bytes\"),\n+        };\n+        arg.cast_to(Uniform { unit, total: Size::from_bytes(2 * align_bytes) });\n     }\n }\n \n@@ -31,3 +45,20 @@ pub fn compute_abi_info<Ty>(fn_abi: &mut FnAbi<'_, Ty>) {\n         classify_arg(arg);\n     }\n }\n+\n+pub fn compute_ptx_kernel_abi_info<'a, Ty, C>(cx: &C, fn_abi: &mut FnAbi<'a, Ty>)\n+where\n+    Ty: TyAbiInterface<'a, C> + Copy,\n+    C: HasDataLayout,\n+{\n+    if !fn_abi.ret.layout.is_unit() && !fn_abi.ret.layout.is_never() {\n+        panic!(\"Kernels should not return anything other than () or !\");\n+    }\n+\n+    for arg in &mut fn_abi.args {\n+        if arg.is_ignore() {\n+            continue;\n+        }\n+        classify_arg_kernel(cx, arg);\n+    }\n+}"}, {"sha": "9e6b740f6f91d73c256a668c51b8fd271e0c9358", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/352abbaadeab323c1b5a69d4669e052e9a34fb67/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352abbaadeab323c1b5a69d4669e052e9a34fb67/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=352abbaadeab323c1b5a69d4669e052e9a34fb67", "patch": "@@ -1250,6 +1250,10 @@ pub trait TyAbiInterface<'a, C>: Sized {\n         cx: &C,\n         offset: Size,\n     ) -> Option<PointeeInfo>;\n+    fn is_adt(this: TyAndLayout<'a, Self>) -> bool;\n+    fn is_never(this: TyAndLayout<'a, Self>) -> bool;\n+    fn is_tuple(this: TyAndLayout<'a, Self>) -> bool;\n+    fn is_unit(this: TyAndLayout<'a, Self>) -> bool;\n }\n \n impl<'a, Ty> TyAndLayout<'a, Ty> {\n@@ -1291,6 +1295,34 @@ impl<'a, Ty> TyAndLayout<'a, Ty> {\n             _ => false,\n         }\n     }\n+\n+    pub fn is_adt<C>(self) -> bool\n+    where\n+        Ty: TyAbiInterface<'a, C>,\n+    {\n+        Ty::is_adt(self)\n+    }\n+\n+    pub fn is_never<C>(self) -> bool\n+    where\n+        Ty: TyAbiInterface<'a, C>,\n+    {\n+        Ty::is_never(self)\n+    }\n+\n+    pub fn is_tuple<C>(self) -> bool\n+    where\n+        Ty: TyAbiInterface<'a, C>,\n+    {\n+        Ty::is_tuple(self)\n+    }\n+\n+    pub fn is_unit<C>(self) -> bool\n+    where\n+        Ty: TyAbiInterface<'a, C>,\n+    {\n+        Ty::is_unit(self)\n+    }\n }\n \n impl<'a, Ty> TyAndLayout<'a, Ty> {"}]}