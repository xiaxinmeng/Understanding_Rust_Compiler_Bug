{"sha": "fff5a06f282ae6927fca1fbf8e8ed437e6772b9e", "node_id": "C_kwDOAAsO6NoAKGZmZjVhMDZmMjgyYWU2OTI3ZmNhMWZiZjhlOGVkNDM3ZTY3NzJiOWU", "commit": {"author": {"name": "Pyry Kontio", "email": "pyry.kontio@drasa.eu", "date": "2022-03-30T17:28:52Z"}, "committer": {"name": "Pyry Kontio", "email": "pyry.kontio@drasa.eu", "date": "2022-03-30T17:28:52Z"}, "message": "Add references to explanation about portability to f{32,64}::{from,to}_{be,le,ne}_bytes", "tree": {"sha": "56afb2264e4b1605be546b36e3c54725c1c2b8b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56afb2264e4b1605be546b36e3c54725c1c2b8b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fff5a06f282ae6927fca1fbf8e8ed437e6772b9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fff5a06f282ae6927fca1fbf8e8ed437e6772b9e", "html_url": "https://github.com/rust-lang/rust/commit/fff5a06f282ae6927fca1fbf8e8ed437e6772b9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fff5a06f282ae6927fca1fbf8e8ed437e6772b9e/comments", "author": {"login": "golddranks", "id": 2675542, "node_id": "MDQ6VXNlcjI2NzU1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2675542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/golddranks", "html_url": "https://github.com/golddranks", "followers_url": "https://api.github.com/users/golddranks/followers", "following_url": "https://api.github.com/users/golddranks/following{/other_user}", "gists_url": "https://api.github.com/users/golddranks/gists{/gist_id}", "starred_url": "https://api.github.com/users/golddranks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/golddranks/subscriptions", "organizations_url": "https://api.github.com/users/golddranks/orgs", "repos_url": "https://api.github.com/users/golddranks/repos", "events_url": "https://api.github.com/users/golddranks/events{/privacy}", "received_events_url": "https://api.github.com/users/golddranks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "golddranks", "id": 2675542, "node_id": "MDQ6VXNlcjI2NzU1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2675542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/golddranks", "html_url": "https://github.com/golddranks", "followers_url": "https://api.github.com/users/golddranks/followers", "following_url": "https://api.github.com/users/golddranks/following{/other_user}", "gists_url": "https://api.github.com/users/golddranks/gists{/gist_id}", "starred_url": "https://api.github.com/users/golddranks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/golddranks/subscriptions", "organizations_url": "https://api.github.com/users/golddranks/orgs", "repos_url": "https://api.github.com/users/golddranks/repos", "events_url": "https://api.github.com/users/golddranks/events{/privacy}", "received_events_url": "https://api.github.com/users/golddranks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a96577892858571c2894bbc68d9ff60e02284360", "url": "https://api.github.com/repos/rust-lang/rust/commits/a96577892858571c2894bbc68d9ff60e02284360", "html_url": "https://github.com/rust-lang/rust/commit/a96577892858571c2894bbc68d9ff60e02284360"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "b408b5d3d5de594e376879123001dbb7cf53e613", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fff5a06f282ae6927fca1fbf8e8ed437e6772b9e/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff5a06f282ae6927fca1fbf8e8ed437e6772b9e/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=fff5a06f282ae6927fca1fbf8e8ed437e6772b9e", "patch": "@@ -902,6 +902,9 @@ impl f32 {\n     /// Return the memory representation of this floating point number as a byte array in\n     /// big-endian (network) byte order.\n     ///\n+    /// See [`from_bits`](Self::from_bits) for some discussion of the\n+    /// portability of this operation (there are almost no issues).\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -920,6 +923,9 @@ impl f32 {\n     /// Return the memory representation of this floating point number as a byte array in\n     /// little-endian byte order.\n     ///\n+    /// See [`from_bits`](Self::from_bits) for some discussion of the\n+    /// portability of this operation (there are almost no issues).\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -944,6 +950,9 @@ impl f32 {\n     /// [`to_be_bytes`]: f32::to_be_bytes\n     /// [`to_le_bytes`]: f32::to_le_bytes\n     ///\n+    /// See [`from_bits`](Self::from_bits) for some discussion of the\n+    /// portability of this operation (there are almost no issues).\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -968,6 +977,9 @@ impl f32 {\n \n     /// Create a floating point value from its representation as a byte array in big endian.\n     ///\n+    /// See [`from_bits`](Self::from_bits) for some discussion of the\n+    /// portability of this operation (there are almost no issues).\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -984,6 +996,9 @@ impl f32 {\n \n     /// Create a floating point value from its representation as a byte array in little endian.\n     ///\n+    /// See [`from_bits`](Self::from_bits) for some discussion of the\n+    /// portability of this operation (there are almost no issues).\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1007,6 +1022,9 @@ impl f32 {\n     /// [`from_be_bytes`]: f32::from_be_bytes\n     /// [`from_le_bytes`]: f32::from_le_bytes\n     ///\n+    /// See [`from_bits`](Self::from_bits) for some discussion of the\n+    /// portability of this operation (there are almost no issues).\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "db396122651862447d7862145e4407dd47a39e65", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fff5a06f282ae6927fca1fbf8e8ed437e6772b9e/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fff5a06f282ae6927fca1fbf8e8ed437e6772b9e/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=fff5a06f282ae6927fca1fbf8e8ed437e6772b9e", "patch": "@@ -918,6 +918,9 @@ impl f64 {\n     /// Return the memory representation of this floating point number as a byte array in\n     /// big-endian (network) byte order.\n     ///\n+    /// See [`from_bits`](Self::from_bits) for some discussion of the\n+    /// portability of this operation (there are almost no issues).\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -936,6 +939,9 @@ impl f64 {\n     /// Return the memory representation of this floating point number as a byte array in\n     /// little-endian byte order.\n     ///\n+    /// See [`from_bits`](Self::from_bits) for some discussion of the\n+    /// portability of this operation (there are almost no issues).\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -960,6 +966,9 @@ impl f64 {\n     /// [`to_be_bytes`]: f64::to_be_bytes\n     /// [`to_le_bytes`]: f64::to_le_bytes\n     ///\n+    /// See [`from_bits`](Self::from_bits) for some discussion of the\n+    /// portability of this operation (there are almost no issues).\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -984,6 +993,9 @@ impl f64 {\n \n     /// Create a floating point value from its representation as a byte array in big endian.\n     ///\n+    /// See [`from_bits`](Self::from_bits) for some discussion of the\n+    /// portability of this operation (there are almost no issues).\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1000,6 +1012,9 @@ impl f64 {\n \n     /// Create a floating point value from its representation as a byte array in little endian.\n     ///\n+    /// See [`from_bits`](Self::from_bits) for some discussion of the\n+    /// portability of this operation (there are almost no issues).\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1023,6 +1038,9 @@ impl f64 {\n     /// [`from_be_bytes`]: f64::from_be_bytes\n     /// [`from_le_bytes`]: f64::from_le_bytes\n     ///\n+    /// See [`from_bits`](Self::from_bits) for some discussion of the\n+    /// portability of this operation (there are almost no issues).\n+    ///\n     /// # Examples\n     ///\n     /// ```"}]}