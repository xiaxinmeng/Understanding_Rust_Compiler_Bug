{"sha": "2bb2341a4af75fb54b809a8e1d5aacbca4df56fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYjIzNDFhNGFmNzVmYjU0YjgwOWE4ZTFkNWFhY2JjYTRkZjU2ZmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-25T05:31:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-25T05:31:16Z"}, "message": "auto merge of #13697 : pongad/rust/consts, r=alexcrichton\n\nI decided to put architecture constants in another mod. They are not used, so a part of me is thinking of just getting rid of them altogether. The rest should be similar to what @brson wants.\r\nFixes #13536", "tree": {"sha": "377f10fe7f54a52fffd4110933608733c16df39c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/377f10fe7f54a52fffd4110933608733c16df39c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bb2341a4af75fb54b809a8e1d5aacbca4df56fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bb2341a4af75fb54b809a8e1d5aacbca4df56fc", "html_url": "https://github.com/rust-lang/rust/commit/2bb2341a4af75fb54b809a8e1d5aacbca4df56fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bb2341a4af75fb54b809a8e1d5aacbca4df56fc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66486518d5e1e4f0850024386b66a7aa790fc32f", "url": "https://api.github.com/repos/rust-lang/rust/commits/66486518d5e1e4f0850024386b66a7aa790fc32f", "html_url": "https://github.com/rust-lang/rust/commit/66486518d5e1e4f0850024386b66a7aa790fc32f"}, {"sha": "7c5d48a09e3648adc3d4f4118808a903758a9dda", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c5d48a09e3648adc3d4f4118808a903758a9dda", "html_url": "https://github.com/rust-lang/rust/commit/7c5d48a09e3648adc3d4f4118808a903758a9dda"}], "stats": {"total": 349, "additions": 160, "deletions": 189}, "files": [{"sha": "44fb8dbb4ce5cafd6b8605bf31b3af77c599ba90", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2bb2341a4af75fb54b809a8e1d5aacbca4df56fc/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb2341a4af75fb54b809a8e1d5aacbca4df56fc/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=2bb2341a4af75fb54b809a8e1d5aacbca4df56fc", "patch": "@@ -18,7 +18,7 @@ use lib::llvm::llvm;\n use lib::llvm::ModuleRef;\n use lib;\n use metadata::common::LinkMeta;\n-use metadata::{encoder, cstore, filesearch, csearch};\n+use metadata::{encoder, cstore, filesearch, csearch, loader};\n use middle::trans::context::CrateContext;\n use middle::trans::common::gensym_name;\n use middle::ty;\n@@ -30,7 +30,6 @@ use std::c_str::{ToCStr, CString};\n use std::char;\n use std::io::{fs, TempDir, Process};\n use std::io;\n-use std::os::consts::{macos, freebsd, linux, android, win32};\n use std::ptr;\n use std::str;\n use std::strbuf::StrBuf;\n@@ -825,11 +824,11 @@ pub fn filename_for_input(sess: &Session, crate_type: session::CrateType,\n         }\n         session::CrateTypeDylib => {\n             let (prefix, suffix) = match sess.targ_cfg.os {\n-                abi::OsWin32 => (win32::DLL_PREFIX, win32::DLL_SUFFIX),\n-                abi::OsMacos => (macos::DLL_PREFIX, macos::DLL_SUFFIX),\n-                abi::OsLinux => (linux::DLL_PREFIX, linux::DLL_SUFFIX),\n-                abi::OsAndroid => (android::DLL_PREFIX, android::DLL_SUFFIX),\n-                abi::OsFreebsd => (freebsd::DLL_PREFIX, freebsd::DLL_SUFFIX),\n+                abi::OsWin32 => (loader::WIN32_DLL_PREFIX, loader::WIN32_DLL_SUFFIX),\n+                abi::OsMacos => (loader::MACOS_DLL_PREFIX, loader::MACOS_DLL_SUFFIX),\n+                abi::OsLinux => (loader::LINUX_DLL_PREFIX, loader::LINUX_DLL_SUFFIX),\n+                abi::OsAndroid => (loader::ANDROID_DLL_PREFIX, loader::ANDROID_DLL_SUFFIX),\n+                abi::OsFreebsd => (loader::FREEBSD_DLL_PREFIX, loader::FREEBSD_DLL_SUFFIX),\n             };\n             out_filename.with_filename(format!(\"{}{}{}\", prefix, libname, suffix))\n         }"}, {"sha": "74a1c8c4678024653aa190d551d72bd48f71d861", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2bb2341a4af75fb54b809a8e1d5aacbca4df56fc/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb2341a4af75fb54b809a8e1d5aacbca4df56fc/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=2bb2341a4af75fb54b809a8e1d5aacbca4df56fc", "patch": "@@ -27,7 +27,6 @@ use std::c_str::ToCStr;\n use std::cast;\n use std::cmp;\n use std::io;\n-use std::os::consts::{macos, freebsd, linux, android, win32};\n use std::ptr;\n use std::slice;\n use std::str;\n@@ -36,6 +35,21 @@ use collections::{HashMap, HashSet};\n use flate;\n use time;\n \n+pub static MACOS_DLL_PREFIX: &'static str = \"lib\";\n+pub static MACOS_DLL_SUFFIX: &'static str = \".dylib\";\n+\n+pub static WIN32_DLL_PREFIX: &'static str = \"\";\n+pub static WIN32_DLL_SUFFIX: &'static str = \".dll\";\n+\n+pub static LINUX_DLL_PREFIX: &'static str = \"lib\";\n+pub static LINUX_DLL_SUFFIX: &'static str = \".so\";\n+\n+pub static FREEBSD_DLL_PREFIX: &'static str = \"lib\";\n+pub static FREEBSD_DLL_SUFFIX: &'static str = \".so\";\n+\n+pub static ANDROID_DLL_PREFIX: &'static str = \"lib\";\n+pub static ANDROID_DLL_SUFFIX: &'static str = \".so\";\n+\n pub enum Os {\n     OsMacos,\n     OsWin32,\n@@ -433,11 +447,11 @@ impl<'a> Context<'a> {\n     // dynamic libraries\n     fn dylibname(&self) -> (&'static str, &'static str) {\n         match self.os {\n-            OsWin32 => (win32::DLL_PREFIX, win32::DLL_SUFFIX),\n-            OsMacos => (macos::DLL_PREFIX, macos::DLL_SUFFIX),\n-            OsLinux => (linux::DLL_PREFIX, linux::DLL_SUFFIX),\n-            OsAndroid => (android::DLL_PREFIX, android::DLL_SUFFIX),\n-            OsFreebsd => (freebsd::DLL_PREFIX, freebsd::DLL_SUFFIX),\n+            OsWin32 => (WIN32_DLL_PREFIX, WIN32_DLL_SUFFIX),\n+            OsMacos => (MACOS_DLL_PREFIX, MACOS_DLL_SUFFIX),\n+            OsLinux => (LINUX_DLL_PREFIX, LINUX_DLL_SUFFIX),\n+            OsAndroid => (ANDROID_DLL_PREFIX, ANDROID_DLL_SUFFIX),\n+            OsFreebsd => (FREEBSD_DLL_PREFIX, FREEBSD_DLL_SUFFIX),\n         }\n     }\n "}, {"sha": "004652d786fd89051f8209a5e63429f42eaa4fcb", "filename": "src/libstd/os.rs", "status": "modified", "additions": 130, "deletions": 172, "changes": 302, "blob_url": "https://github.com/rust-lang/rust/blob/2bb2341a4af75fb54b809a8e1d5aacbca4df56fc/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb2341a4af75fb54b809a8e1d5aacbca4df56fc/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=2bb2341a4af75fb54b809a8e1d5aacbca4df56fc", "patch": "@@ -1282,224 +1282,182 @@ impl Drop for MemoryMap {\n     }\n }\n \n-/// Various useful system-specific constants.\n+#[cfg(target_os = \"linux\")]\n pub mod consts {\n-    #[cfg(unix)]\n-    pub use os::consts::unix::FAMILY;\n+    pub use std::os::arch_consts::ARCH;\n \n-    #[cfg(windows)]\n-    pub use os::consts::windows::FAMILY;\n+    pub static FAMILY: &'static str = \"unix\";\n \n-    #[cfg(target_os = \"macos\")]\n-    pub use os::consts::macos::{SYSNAME, DLL_PREFIX, DLL_SUFFIX, DLL_EXTENSION};\n-    #[cfg(target_os = \"macos\")]\n-    pub use os::consts::macos::{EXE_SUFFIX, EXE_EXTENSION};\n+    /// A string describing the specific operating system in use: in this\n+    /// case, `linux`.\n+    pub static SYSNAME: &'static str = \"linux\";\n \n-    #[cfg(target_os = \"freebsd\")]\n-    pub use os::consts::freebsd::{SYSNAME, DLL_PREFIX, DLL_SUFFIX, DLL_EXTENSION};\n-    #[cfg(target_os = \"freebsd\")]\n-    pub use os::consts::freebsd::{EXE_SUFFIX, EXE_EXTENSION};\n+    /// Specifies the filename prefix used for shared libraries on this\n+    /// platform: in this case, `lib`.\n+    pub static DLL_PREFIX: &'static str = \"lib\";\n \n-    #[cfg(target_os = \"linux\")]\n-    pub use os::consts::linux::{SYSNAME, DLL_PREFIX, DLL_SUFFIX, DLL_EXTENSION};\n-    #[cfg(target_os = \"linux\")]\n-    pub use os::consts::linux::{EXE_SUFFIX, EXE_EXTENSION};\n+    /// Specifies the filename suffix used for shared libraries on this\n+    /// platform: in this case, `.so`.\n+    pub static DLL_SUFFIX: &'static str = \".so\";\n \n-    #[cfg(target_os = \"android\")]\n-    pub use os::consts::android::{SYSNAME, DLL_PREFIX, DLL_SUFFIX, DLL_EXTENSION};\n-    #[cfg(target_os = \"android\")]\n-    pub use os::consts::android::{EXE_SUFFIX, EXE_EXTENSION};\n+    /// Specifies the file extension used for shared libraries on this\n+    /// platform that goes after the dot: in this case, `so`.\n+    pub static DLL_EXTENSION: &'static str = \"so\";\n \n-    #[cfg(target_os = \"win32\")]\n-    pub use os::consts::win32::{SYSNAME, DLL_PREFIX, DLL_SUFFIX, DLL_EXTENSION};\n-    #[cfg(target_os = \"win32\")]\n-    pub use os::consts::win32::{EXE_SUFFIX, EXE_EXTENSION};\n+    /// Specifies the filename suffix used for executable binaries on this\n+    /// platform: in this case, the empty string.\n+    pub static EXE_SUFFIX: &'static str = \"\";\n \n-    #[cfg(target_arch = \"x86\")]\n-    pub use os::consts::x86::{ARCH};\n+    /// Specifies the file extension, if any, used for executable binaries\n+    /// on this platform: in this case, the empty string.\n+    pub static EXE_EXTENSION: &'static str = \"\";\n+}\n \n-    #[cfg(target_arch = \"x86_64\")]\n-    pub use os::consts::x86_64::{ARCH};\n+#[cfg(target_os = \"macos\")]\n+pub mod consts {\n+    pub use std::os::arch_consts::ARCH;\n \n-    #[cfg(target_arch = \"arm\")]\n-    pub use os::consts::arm::{ARCH};\n+    pub static FAMILY: &'static str = \"unix\";\n \n-    #[cfg(target_arch = \"mips\")]\n-    pub use os::consts::mips::{ARCH};\n+    /// A string describing the specific operating system in use: in this\n+    /// case, `macos`.\n+    pub static SYSNAME: &'static str = \"macos\";\n \n-    /// Constants for Unix systems.\n-    pub mod unix {\n-        /// A string describing the family that this operating system belongs\n-        /// to: in this case, `unix`.\n-        pub static FAMILY: &'static str = \"unix\";\n-    }\n+    /// Specifies the filename prefix used for shared libraries on this\n+    /// platform: in this case, `lib`.\n+    pub static DLL_PREFIX: &'static str = \"lib\";\n \n-    /// Constants for Windows systems.\n-    pub mod windows {\n-        /// A string describing the family that this operating system belongs\n-        /// to: in this case, `windows`.\n-        pub static FAMILY: &'static str = \"windows\";\n-    }\n+    /// Specifies the filename suffix used for shared libraries on this\n+    /// platform: in this case, `.dylib`.\n+    pub static DLL_SUFFIX: &'static str = \".dylib\";\n \n-    /// Constants for Mac OS systems.\n-    pub mod macos {\n-        /// A string describing the specific operating system in use: in this\n-        /// case, `macos`.\n-        pub static SYSNAME: &'static str = \"macos\";\n+    /// Specifies the file extension used for shared libraries on this\n+    /// platform that goes after the dot: in this case, `dylib`.\n+    pub static DLL_EXTENSION: &'static str = \"dylib\";\n \n-        /// Specifies the filename prefix used for shared libraries on this\n-        /// platform: in this case, `lib`.\n-        pub static DLL_PREFIX: &'static str = \"lib\";\n+    /// Specifies the filename suffix used for executable binaries on this\n+    /// platform: in this case, the empty string.\n+    pub static EXE_SUFFIX: &'static str = \"\";\n \n-        /// Specifies the filename suffix used for shared libraries on this\n-        /// platform: in this case, `.dylib`.\n-        pub static DLL_SUFFIX: &'static str = \".dylib\";\n+    /// Specifies the file extension, if any, used for executable binaries\n+    /// on this platform: in this case, the empty string.\n+    pub static EXE_EXTENSION: &'static str = \"\";\n+}\n \n-        /// Specifies the file extension used for shared libraries on this\n-        /// platform that goes after the dot: in this case, `dylib`.\n-        pub static DLL_EXTENSION: &'static str = \"dylib\";\n+#[cfg(target_os = \"freebsd\")]\n+pub mod consts {\n+    pub use std::os::arch_consts::ARCH;\n \n-        /// Specifies the filename suffix used for executable binaries on this\n-        /// platform: in this case, the empty string.\n-        pub static EXE_SUFFIX: &'static str = \"\";\n+    pub static FAMILY: &'static str = \"unix\";\n \n-        /// Specifies the file extension, if any, used for executable binaries\n-        /// on this platform: in this case, the empty string.\n-        pub static EXE_EXTENSION: &'static str = \"\";\n-    }\n+    /// A string describing the specific operating system in use: in this\n+    /// case, `freebsd`.\n+    pub static SYSNAME: &'static str = \"freebsd\";\n \n-    /// Constants for FreeBSD systems.\n-    pub mod freebsd {\n-        /// A string describing the specific operating system in use: in this\n-        /// case, `freebsd`.\n-        pub static SYSNAME: &'static str = \"freebsd\";\n+    /// Specifies the filename prefix used for shared libraries on this\n+    /// platform: in this case, `lib`.\n+    pub static DLL_PREFIX: &'static str = \"lib\";\n \n-        /// Specifies the filename prefix used for shared libraries on this\n-        /// platform: in this case, `lib`.\n-        pub static DLL_PREFIX: &'static str = \"lib\";\n+    /// Specifies the filename suffix used for shared libraries on this\n+    /// platform: in this case, `.so`.\n+    pub static DLL_SUFFIX: &'static str = \".so\";\n \n-        /// Specifies the filename suffix used for shared libraries on this\n-        /// platform: in this case, `.so`.\n-        pub static DLL_SUFFIX: &'static str = \".so\";\n+    /// Specifies the file extension used for shared libraries on this\n+    /// platform that goes after the dot: in this case, `so`.\n+    pub static DLL_EXTENSION: &'static str = \"so\";\n \n-        /// Specifies the file extension used for shared libraries on this\n-        /// platform that goes after the dot: in this case, `so`.\n-        pub static DLL_EXTENSION: &'static str = \"so\";\n+    /// Specifies the filename suffix used for executable binaries on this\n+    /// platform: in this case, the empty string.\n+    pub static EXE_SUFFIX: &'static str = \"\";\n \n-        /// Specifies the filename suffix used for executable binaries on this\n-        /// platform: in this case, the empty string.\n-        pub static EXE_SUFFIX: &'static str = \"\";\n+    /// Specifies the file extension, if any, used for executable binaries\n+    /// on this platform: in this case, the empty string.\n+    pub static EXE_EXTENSION: &'static str = \"\";\n+}\n \n-        /// Specifies the file extension, if any, used for executable binaries\n-        /// on this platform: in this case, the empty string.\n-        pub static EXE_EXTENSION: &'static str = \"\";\n-    }\n+#[cfg(target_os = \"android\")]\n+pub mod consts {\n+    pub use std::os::arch_consts::ARCH;\n \n-    /// Constants for GNU/Linux systems.\n-    pub mod linux {\n-        /// A string describing the specific operating system in use: in this\n-        /// case, `linux`.\n-        pub static SYSNAME: &'static str = \"linux\";\n+    pub static FAMILY: &'static str = \"unix\";\n \n-        /// Specifies the filename prefix used for shared libraries on this\n-        /// platform: in this case, `lib`.\n-        pub static DLL_PREFIX: &'static str = \"lib\";\n+    /// A string describing the specific operating system in use: in this\n+    /// case, `android`.\n+    pub static SYSNAME: &'static str = \"android\";\n \n-        /// Specifies the filename suffix used for shared libraries on this\n-        /// platform: in this case, `.so`.\n-        pub static DLL_SUFFIX: &'static str = \".so\";\n+    /// Specifies the filename prefix used for shared libraries on this\n+    /// platform: in this case, `lib`.\n+    pub static DLL_PREFIX: &'static str = \"lib\";\n \n-        /// Specifies the file extension used for shared libraries on this\n-        /// platform that goes after the dot: in this case, `so`.\n-        pub static DLL_EXTENSION: &'static str = \"so\";\n+    /// Specifies the filename suffix used for shared libraries on this\n+    /// platform: in this case, `.so`.\n+    pub static DLL_SUFFIX: &'static str = \".so\";\n \n-        /// Specifies the filename suffix used for executable binaries on this\n-        /// platform: in this case, the empty string.\n-        pub static EXE_SUFFIX: &'static str = \"\";\n+    /// Specifies the file extension used for shared libraries on this\n+    /// platform that goes after the dot: in this case, `so`.\n+    pub static DLL_EXTENSION: &'static str = \"so\";\n \n-        /// Specifies the file extension, if any, used for executable binaries\n-        /// on this platform: in this case, the empty string.\n-        pub static EXE_EXTENSION: &'static str = \"\";\n-    }\n+    /// Specifies the filename suffix used for executable binaries on this\n+    /// platform: in this case, the empty string.\n+    pub static EXE_SUFFIX: &'static str = \"\";\n \n-    /// Constants for Android systems.\n-    pub mod android {\n-        /// A string describing the specific operating system in use: in this\n-        /// case, `android`.\n-        pub static SYSNAME: &'static str = \"android\";\n+    /// Specifies the file extension, if any, used for executable binaries\n+    /// on this platform: in this case, the empty string.\n+    pub static EXE_EXTENSION: &'static str = \"\";\n+}\n \n-        /// Specifies the filename prefix used for shared libraries on this\n-        /// platform: in this case, `lib`.\n-        pub static DLL_PREFIX: &'static str = \"lib\";\n+#[cfg(target_os = \"win32\")]\n+pub mod consts {\n+    pub use std::os::arch_consts::ARCH;\n \n-        /// Specifies the filename suffix used for shared libraries on this\n-        /// platform: in this case, `.so`.\n-        pub static DLL_SUFFIX: &'static str = \".so\";\n+    pub static FAMILY: &'static str = \"windows\";\n \n-        /// Specifies the file extension used for shared libraries on this\n-        /// platform that goes after the dot: in this case, `so`.\n-        pub static DLL_EXTENSION: &'static str = \"so\";\n+    /// A string describing the specific operating system in use: in this\n+    /// case, `win32`.\n+    pub static SYSNAME: &'static str = \"win32\";\n \n-        /// Specifies the filename suffix used for executable binaries on this\n-        /// platform: in this case, the empty string.\n-        pub static EXE_SUFFIX: &'static str = \"\";\n+    /// Specifies the filename prefix used for shared libraries on this\n+    /// platform: in this case, the empty string.\n+    pub static DLL_PREFIX: &'static str = \"\";\n \n-        /// Specifies the file extension, if any, used for executable binaries\n-        /// on this platform: in this case, the empty string.\n-        pub static EXE_EXTENSION: &'static str = \"\";\n-    }\n+    /// Specifies the filename suffix used for shared libraries on this\n+    /// platform: in this case, `.dll`.\n+    pub static DLL_SUFFIX: &'static str = \".dll\";\n \n-    /// Constants for 32-bit or 64-bit Windows systems.\n-    pub mod win32 {\n-        /// A string describing the specific operating system in use: in this\n-        /// case, `win32`.\n-        pub static SYSNAME: &'static str = \"win32\";\n+    /// Specifies the file extension used for shared libraries on this\n+    /// platform that goes after the dot: in this case, `dll`.\n+    pub static DLL_EXTENSION: &'static str = \"dll\";\n \n-        /// Specifies the filename prefix used for shared libraries on this\n-        /// platform: in this case, the empty string.\n-        pub static DLL_PREFIX: &'static str = \"\";\n+    /// Specifies the filename suffix used for executable binaries on this\n+    /// platform: in this case, `.exe`.\n+    pub static EXE_SUFFIX: &'static str = \".exe\";\n \n-        /// Specifies the filename suffix used for shared libraries on this\n-        /// platform: in this case, `.dll`.\n-        pub static DLL_SUFFIX: &'static str = \".dll\";\n+    /// Specifies the file extension, if any, used for executable binaries\n+    /// on this platform: in this case, `exe`.\n+    pub static EXE_EXTENSION: &'static str = \"exe\";\n+}\n \n-        /// Specifies the file extension used for shared libraries on this\n-        /// platform that goes after the dot: in this case, `dll`.\n-        pub static DLL_EXTENSION: &'static str = \"dll\";\n+#[cfg(target_arch = \"x86\")]\n+mod arch_consts {\n+    pub static ARCH: &'static str = \"x86\";\n+}\n \n-        /// Specifies the filename suffix used for executable binaries on this\n-        /// platform: in this case, `.exe`.\n-        pub static EXE_SUFFIX: &'static str = \".exe\";\n+#[cfg(target_arch = \"x86_64\")]\n+mod arch_consts {\n+    pub static ARCH: &'static str = \"x86_64\";\n+}\n \n-        /// Specifies the file extension, if any, used for executable binaries\n-        /// on this platform: in this case, `exe`.\n-        pub static EXE_EXTENSION: &'static str = \"exe\";\n-    }\n+#[cfg(target_arch = \"arm\")]\n+mod arch_consts {\n+    pub static ARCH: &'static str = \"arm\";\n+}\n \n-    /// Constants for Intel Architecture-32 (x86) architectures.\n-    pub mod x86 {\n-        /// A string describing the architecture in use: in this case, `x86`.\n-        pub static ARCH: &'static str = \"x86\";\n-    }\n-    /// Constants for Intel 64/AMD64 (x86-64) architectures.\n-    pub mod x86_64 {\n-        /// A string describing the architecture in use: in this case,\n-        /// `x86_64`.\n-        pub static ARCH: &'static str = \"x86_64\";\n-    }\n-    /// Constants for Advanced RISC Machine (ARM) architectures.\n-    pub mod arm {\n-        /// A string describing the architecture in use: in this case, `ARM`.\n-        pub static ARCH: &'static str = \"arm\";\n-    }\n-    /// Constants for Microprocessor without Interlocked Pipeline Stages\n-    /// (MIPS) architectures.\n-    pub mod mips {\n-        /// A string describing the architecture in use: in this case, `MIPS`.\n-        pub static ARCH: &'static str = \"mips\";\n-    }\n+#[cfg(target_arch = \"mips\")]\n+mod arch_consts {\n+    pub static ARCH: &'static str = \"mips\";\n }\n \n+\n #[cfg(test)]\n mod tests {\n     use prelude::*;"}, {"sha": "26b575c4b07ffe3b1ce8efc177ed896d8a4f1a3b", "filename": "src/test/run-pass/glob-std.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2bb2341a4af75fb54b809a8e1d5aacbca4df56fc/src%2Ftest%2Frun-pass%2Fglob-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb2341a4af75fb54b809a8e1d5aacbca4df56fc/src%2Ftest%2Frun-pass%2Fglob-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fglob-std.rs?ref=2bb2341a4af75fb54b809a8e1d5aacbca4df56fc", "patch": "@@ -57,7 +57,7 @@ pub fn main() {\n     mk_file(\"bbb/specials/!\", false);\n \n     // windows does not allow `*` or `?` characters to exist in filenames\n-    if os::consts::FAMILY != os::consts::windows::FAMILY {\n+    if os::consts::FAMILY != \"windows\" {\n         mk_file(\"bbb/specials/*\", false);\n         mk_file(\"bbb/specials/?\", false);\n     }\n@@ -84,7 +84,7 @@ pub fn main() {\n     assert_eq!(glob_vec(\"aaa/apple/nope\"), Vec::new());\n \n     // windows should support both / and \\ as directory separators\n-    if os::consts::FAMILY == os::consts::windows::FAMILY {\n+    if os::consts::FAMILY == \"windows\" {\n         assert_eq!(glob_vec(\"aaa\\\\apple\"), vec!(abs_path(\"aaa/apple\")));\n     }\n \n@@ -156,12 +156,12 @@ pub fn main() {\n     assert_eq!(glob_vec(\"bbb/specials/!\"), vec!(abs_path(\"bbb/specials/!\")));\n     assert_eq!(glob_vec(\"bbb/specials/[]]\"), vec!(abs_path(\"bbb/specials/]\")));\n \n-    if os::consts::FAMILY != os::consts::windows::FAMILY {\n+    if os::consts::FAMILY != \"windows\" {\n         assert_eq!(glob_vec(\"bbb/specials/[*]\"), vec!(abs_path(\"bbb/specials/*\")));\n         assert_eq!(glob_vec(\"bbb/specials/[?]\"), vec!(abs_path(\"bbb/specials/?\")));\n     }\n \n-    if os::consts::FAMILY == os::consts::windows::FAMILY {\n+    if os::consts::FAMILY == \"windows\" {\n \n         assert_eq!(glob_vec(\"bbb/specials/[![]\"), vec!(\n             abs_path(\"bbb/specials/!\"),"}]}