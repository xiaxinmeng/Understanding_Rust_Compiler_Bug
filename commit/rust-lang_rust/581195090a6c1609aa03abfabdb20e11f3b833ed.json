{"sha": "581195090a6c1609aa03abfabdb20e11f3b833ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MTE5NTA5MGE2YzE2MDlhYTAzYWJmYWJkYjIwZTExZjNiODMzZWQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-05-20T12:14:18Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-05-20T12:14:18Z"}, "message": "Review feedback.\n\nRemoved `BitDenotation: DataflowOperator` relationship.\n\nAlpha-renamed `fn initial_value` to `fn bottom_value`.", "tree": {"sha": "5b7cf643664a85fc8d4bd476ca8a36882078b187", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b7cf643664a85fc8d4bd476ca8a36882078b187"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/581195090a6c1609aa03abfabdb20e11f3b833ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/581195090a6c1609aa03abfabdb20e11f3b833ed", "html_url": "https://github.com/rust-lang/rust/commit/581195090a6c1609aa03abfabdb20e11f3b833ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/581195090a6c1609aa03abfabdb20e11f3b833ed/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7e3204ac8a1ed282f94fb688bdf53b851e5cbab", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7e3204ac8a1ed282f94fb688bdf53b851e5cbab", "html_url": "https://github.com/rust-lang/rust/commit/a7e3204ac8a1ed282f94fb688bdf53b851e5cbab"}], "stats": {"total": 44, "additions": 21, "deletions": 23}, "files": [{"sha": "00589e05ffd3dd06998346bb7be9535d53cc50b3", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/mod.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/581195090a6c1609aa03abfabdb20e11f3b833ed/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/581195090a6c1609aa03abfabdb20e11f3b833ed/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs?ref=581195090a6c1609aa03abfabdb20e11f3b833ed", "patch": "@@ -35,7 +35,7 @@ pub trait Dataflow {\n }\n \n impl<'a, 'tcx: 'a, BD> Dataflow for MirBorrowckCtxtPreDataflow<'a, 'tcx, BD>\n-    where BD: BitDenotation, BD::Bit: Debug, BD::Ctxt: HasMoveData<'tcx>\n+    where BD: BitDenotation + DataflowOperator, BD::Bit: Debug, BD::Ctxt: HasMoveData<'tcx>\n {\n     fn dataflow(&mut self) {\n         self.flow_state.build_sets();\n@@ -53,7 +53,7 @@ struct PropagationContext<'b, 'a: 'b, 'tcx: 'a, O>\n }\n \n impl<'a, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD>\n-    where BD: BitDenotation, BD::Ctxt: HasMoveData<'tcx>\n+    where BD: BitDenotation + DataflowOperator, BD::Ctxt: HasMoveData<'tcx>\n {\n     fn propagate(&mut self) {\n         let mut temp = vec![0; self.flow_state.sets.words_per_block];\n@@ -100,10 +100,10 @@ impl<'a, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD>\n }\n \n impl<'b, 'a: 'b, 'tcx: 'a, BD> PropagationContext<'b, 'a, 'tcx, BD>\n-    where BD: BitDenotation, BD::Ctxt: HasMoveData<'tcx>\n+    where BD: BitDenotation + DataflowOperator, BD::Ctxt: HasMoveData<'tcx>\n {\n     fn reset(&mut self, bits: &mut [usize]) {\n-        let e = if BD::initial_value() {usize::MAX} else {0};\n+        let e = if BD::bottom_value() {usize::MAX} else {0};\n         for b in bits {\n             *b = e;\n         }\n@@ -317,17 +317,17 @@ impl<O: BitDenotation> DataflowState<O> {\n }\n \n pub trait BitwiseOperator {\n-    /// Joins two predecessor bits together, typically either `|` or `&`\n+    /// Applies some bit-operation pointwise to each of the bits in the two inputs.\n     fn join(&self, pred1: usize, pred2: usize) -> usize;\n }\n \n /// Parameterization for the precise form of data flow that is used.\n-pub trait DataflowOperator : BitwiseOperator {\n+pub trait DataflowOperator: BitwiseOperator {\n     /// Specifies the initial value for each bit in the `on_entry` set\n-    fn initial_value() -> bool;\n+    fn bottom_value() -> bool;\n }\n \n-pub trait BitDenotation: DataflowOperator {\n+pub trait BitDenotation {\n     /// Specifies what is represented by each bit in the dataflow bitvector.\n     type Bit;\n \n@@ -425,7 +425,7 @@ pub trait BitDenotation: DataflowOperator {\n }\n \n impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D>\n-    where D: BitDenotation, D::Ctxt: HasMoveData<'tcx>\n+    where D: BitDenotation + DataflowOperator, D::Ctxt: HasMoveData<'tcx>\n {\n     pub fn new(_tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                mir: &'a Mir<'tcx>,\n@@ -437,7 +437,7 @@ impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D>\n         let num_blocks = mir.basic_blocks.len();\n         let num_words = num_blocks * words_per_block;\n \n-        let entry = if D::initial_value() { usize::MAX } else {0};\n+        let entry = if D::bottom_value() { usize::MAX } else {0};\n \n         let zeroes = Bits::new(0, num_words);\n         let on_entry = Bits::new(entry, num_words);\n@@ -460,7 +460,7 @@ impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D>\n }\n \n impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D>\n-    where D: BitDenotation, D::Ctxt: HasMoveData<'tcx>\n+    where D: BitDenotation + DataflowOperator, D::Ctxt: HasMoveData<'tcx>\n {\n     /// Propagates the bits of `in_out` into all the successors of `bb`,\n     /// using bitwise operator denoted by `self.operator`.\n@@ -851,7 +851,6 @@ impl<'a, 'tcx> BitDenotation for MaybeInitializedLvals<'a, 'tcx> {\n     fn interpret<'c>(&self, ctxt: &'c Self::Ctxt, idx: usize) -> &'c Self::Bit {\n         &ctxt.2.move_paths[MovePathIndex::new(idx)]\n     }\n-\n     fn start_block_effect(&self, ctxt: &Self::Ctxt, sets: &mut BlockSets)\n     {\n         super::drop_flag_effects_for_function_entry(\n@@ -1072,12 +1071,10 @@ impl<'a, 'tcx> BitwiseOperator for DefinitelyInitializedLvals<'a, 'tcx> {\n     }\n }\n \n-// FIXME: `DataflowOperator::initial_value` should be named\n-// `bottom_value`. The way that dataflow fixed point iteration works,\n-// you want to start at bottom and work your way to a fixed point.\n-// This needs to include the detail that the control-flow merges will\n-// apply the `join` operator above to current state (which starts at\n-// that bottom value).\n+// The way that dataflow fixed point iteration works, you want to\n+// start at bottom and work your way to a fixed point. Control-flow\n+// merges will apply the `join` operator to each block entry's current\n+// state (which starts at that bottom value).\n //\n // This means, for propagation across the graph, that you either want\n // to start at all-zeroes and then use Union as your merge when\n@@ -1086,28 +1083,28 @@ impl<'a, 'tcx> BitwiseOperator for DefinitelyInitializedLvals<'a, 'tcx> {\n \n impl<'a, 'tcx> DataflowOperator for MovingOutStatements<'a, 'tcx> {\n     #[inline]\n-    fn initial_value() -> bool {\n+    fn bottom_value() -> bool {\n         false // bottom = no loans in scope by default\n     }\n }\n \n impl<'a, 'tcx> DataflowOperator for MaybeInitializedLvals<'a, 'tcx> {\n     #[inline]\n-    fn initial_value() -> bool {\n+    fn bottom_value() -> bool {\n         false // bottom = uninitialized\n     }\n }\n \n impl<'a, 'tcx> DataflowOperator for MaybeUninitializedLvals<'a, 'tcx> {\n     #[inline]\n-    fn initial_value() -> bool {\n+    fn bottom_value() -> bool {\n         false // bottom = initialized (start_block_effect counters this at outset)\n     }\n }\n \n impl<'a, 'tcx> DataflowOperator for DefinitelyInitializedLvals<'a, 'tcx> {\n     #[inline]\n-    fn initial_value() -> bool {\n+    fn bottom_value() -> bool {\n         true // bottom = initialized\n     }\n }"}, {"sha": "37c042844e58b5f67ffb02836a330aa9e916a709", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/581195090a6c1609aa03abfabdb20e11f3b833ed/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/581195090a6c1609aa03abfabdb20e11f3b833ed/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=581195090a6c1609aa03abfabdb20e11f3b833ed", "patch": "@@ -29,6 +29,7 @@ mod gather_moves;\n // mod graphviz;\n \n use self::dataflow::{BitDenotation};\n+use self::dataflow::{DataflowOperator};\n use self::dataflow::{Dataflow, DataflowAnalysis, DataflowResults};\n use self::dataflow::{HasMoveData};\n use self::dataflow::{MaybeInitializedLvals, MaybeUninitializedLvals};\n@@ -119,7 +120,7 @@ fn do_dataflow<'a, 'tcx, BD>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              attributes: &[ast::Attribute],\n                              ctxt: BD::Ctxt,\n                              bd: BD) -> (BD::Ctxt, DataflowResults<BD>)\n-    where BD: BitDenotation, BD::Bit: Debug, BD::Ctxt: HasMoveData<'tcx>\n+    where BD: BitDenotation + DataflowOperator, BD::Bit: Debug, BD::Ctxt: HasMoveData<'tcx>\n {\n     use syntax::attr::AttrMetaMethods;\n "}]}