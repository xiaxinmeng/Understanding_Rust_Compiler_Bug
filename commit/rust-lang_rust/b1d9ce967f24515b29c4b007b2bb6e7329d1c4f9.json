{"sha": "b1d9ce967f24515b29c4b007b2bb6e7329d1c4f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZDljZTk2N2YyNDUxNWIyOWM0YjAwN2IyYmI2ZTczMjlkMWM0Zjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-06T07:00:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-06T07:00:25Z"}, "message": "Auto merge of #28823 - petrochenkov:identeq2, r=nrc\n\nCloses https://github.com/rust-lang/rust/issues/28658", "tree": {"sha": "3ca1c8acb82b094fdedff4e2501a09991138df55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ca1c8acb82b094fdedff4e2501a09991138df55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1d9ce967f24515b29c4b007b2bb6e7329d1c4f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1d9ce967f24515b29c4b007b2bb6e7329d1c4f9", "html_url": "https://github.com/rust-lang/rust/commit/b1d9ce967f24515b29c4b007b2bb6e7329d1c4f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1d9ce967f24515b29c4b007b2bb6e7329d1c4f9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3729b126e299c61b922f50fe14affdef51ba1e8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3729b126e299c61b922f50fe14affdef51ba1e8c", "html_url": "https://github.com/rust-lang/rust/commit/3729b126e299c61b922f50fe14affdef51ba1e8c"}, {"sha": "b82d76c8a14bcdb166d453604fde6903bb52d80e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b82d76c8a14bcdb166d453604fde6903bb52d80e", "html_url": "https://github.com/rust-lang/rust/commit/b82d76c8a14bcdb166d453604fde6903bb52d80e"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "ce00505b0b4378fba7afc821d8c1b746f487f3d2", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b1d9ce967f24515b29c4b007b2bb6e7329d1c4f9/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d9ce967f24515b29c4b007b2bb6e7329d1c4f9/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b1d9ce967f24515b29c4b007b2bb6e7329d1c4f9", "patch": "@@ -65,6 +65,7 @@ use ptr::P;\n use std::fmt;\n use std::rc::Rc;\n use std::borrow::Cow;\n+use std::hash::{Hash, Hasher};\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n /// A name is a part of an identifier, representing a string or gensym. It's\n@@ -84,7 +85,7 @@ pub struct SyntaxContext(pub u32);\n /// An identifier contains a Name (index into the interner\n /// table) and a SyntaxContext to track renaming and\n /// macro expansion per Flatt et al., \"Macros That Work Together\"\n-#[derive(Clone, Copy, Eq, Hash)]\n+#[derive(Clone, Copy, Eq)]\n pub struct Ident {\n     pub name: Name,\n     pub ctxt: SyntaxContext\n@@ -133,22 +134,35 @@ impl Ident {\n \n impl PartialEq for Ident {\n     fn eq(&self, other: &Ident) -> bool {\n-        if self.ctxt == other.ctxt {\n-            self.name == other.name\n-        } else {\n-            // IF YOU SEE ONE OF THESE FAILS: it means that you're comparing\n-            // idents that have different contexts. You can't fix this without\n-            // knowing whether the comparison should be hygienic or non-hygienic.\n-            // if it should be non-hygienic (most things are), just compare the\n-            // 'name' fields of the idents.\n+        if self.ctxt != other.ctxt {\n+            // There's no one true way to compare Idents. They can be compared\n+            // non-hygienically `id1.name == id2.name`, hygienically\n+            // `mtwt::resolve(id1) == mtwt::resolve(id2)`, or even member-wise\n+            // `(id1.name, id1.ctxt) == (id2.name, id2.ctxt)` depending on the situation.\n+            // Ideally, PartialEq should not be implemented for Ident at all, but that\n+            // would be too impractical, because many larger structures (Token, in particular)\n+            // including Idents as their parts derive PartialEq and use it for non-hygienic\n+            // comparisons. That's why PartialEq is implemented and defaults to non-hygienic\n+            // comparison. Hash is implemented too and is consistent with PartialEq, i.e. only\n+            // the name of Ident is hashed. Still try to avoid comparing idents in your code\n+            // (especially as keys in hash maps), use one of the three methods listed above\n+            // explicitly.\n             //\n-            // On the other hand, if the comparison does need to be hygienic,\n-            // one example and its non-hygienic counterpart would be:\n-            //      syntax::parse::token::Token::mtwt_eq\n-            //      syntax::ext::tt::macro_parser::token_name_eq\n+            // If you see this panic, then some idents from different contexts were compared\n+            // non-hygienically. It's likely a bug. Use one of the three comparison methods\n+            // listed above explicitly.\n+\n             panic!(\"idents with different contexts are compared with operator `==`: \\\n                 {:?}, {:?}.\", self, other);\n         }\n+\n+        self.name == other.name\n+    }\n+}\n+\n+impl Hash for Ident {\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n+        self.name.hash(state)\n     }\n }\n "}, {"sha": "7ac0e8c64c27554844a2809c8bfe8fc58f458692", "filename": "src/libsyntax/ext/mtwt.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1d9ce967f24515b29c4b007b2bb6e7329d1c4f9/src%2Flibsyntax%2Fext%2Fmtwt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d9ce967f24515b29c4b007b2bb6e7329d1c4f9/src%2Flibsyntax%2Fext%2Fmtwt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmtwt.rs?ref=b1d9ce967f24515b29c4b007b2bb6e7329d1c4f9", "patch": "@@ -35,7 +35,9 @@ use std::collections::HashMap;\n pub struct SCTable {\n     table: RefCell<Vec<SyntaxContext_>>,\n     mark_memo: RefCell<HashMap<(SyntaxContext,Mrk),SyntaxContext>>,\n-    rename_memo: RefCell<HashMap<(SyntaxContext,Name,SyntaxContext,Name),SyntaxContext>>,\n+    // The pair (Name,SyntaxContext) is actually one Ident, but it needs to be hashed and\n+    // compared as pair (name, ctxt) and not as an Ident\n+    rename_memo: RefCell<HashMap<(SyntaxContext,(Name,SyntaxContext),Name),SyntaxContext>>,\n }\n \n #[derive(PartialEq, RustcEncodable, RustcDecodable, Hash, Debug, Copy, Clone)]\n@@ -82,7 +84,7 @@ fn apply_rename_internal(id: Ident,\n                        to: Name,\n                        ctxt: SyntaxContext,\n                        table: &SCTable) -> SyntaxContext {\n-    let key = (ctxt, id.name, id.ctxt, to);\n+    let key = (ctxt, (id.name, id.ctxt), to);\n \n     *table.rename_memo.borrow_mut().entry(key).or_insert_with(|| {\n             SyntaxContext(idx_push(&mut *table.table.borrow_mut(), Rename(id, to, ctxt)))"}]}