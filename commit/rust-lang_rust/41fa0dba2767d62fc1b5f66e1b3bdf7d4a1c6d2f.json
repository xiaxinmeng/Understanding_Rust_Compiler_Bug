{"sha": "41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxZmEwZGJhMjc2N2Q2MmZjMWI1ZjY2ZTFiM2JkZjdkNGExYzZkMmY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-12-30T13:49:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-30T13:49:26Z"}, "message": "Rollup merge of #80509 - matthiaskrgr:ptr_arg, r=varkor\n\nwhere possible, pass slices instead of &Vec or &String (clippy::ptr_arg)", "tree": {"sha": "17587cb0c791e4db06ea92113f0b56846667b636", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17587cb0c791e4db06ea92113f0b56846667b636"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf7IVmCRBK7hj4Ov3rIwAAdHIIAK/Kex3gOS1D68aZIKibn+WT\nqQ3v5LG5G5mhgG4penFDvpUdGRGraVNsME4ydhzFhUAR4tZK8UjYadnAINEqwhF6\nKWTnvykFvYcuXFlEKaOqAzY6CbZCVQNO9H7ysje9CF6VqOOhzKttM85Qs+B+Ss+X\nQNppLUE+I57Ltr5w/RTnMCSN7AiskVwAOA36jpcfHEzhZuhl+GOW2AJHWYe7aNFB\naNF32Gq8itn4Fx0VEn0uOPHRetuPCF/3Ep4Ywy/2o/jr29xaz8yLGngwsoZzXDYP\nR3nc9vmPRAbsV1deMWpdBJ9JVzoMZK/tRu9xiRgO1ol2bFnT8ISSlsx5unbI8zs=\n=CkNU\n-----END PGP SIGNATURE-----\n", "payload": "tree 17587cb0c791e4db06ea92113f0b56846667b636\nparent 07083739fb2b971fa174d5443ab3e675d363fa1a\nparent bdc9291ed9dd0501a0d25a87463212ad5ec5d87a\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1609336166 +0900\ncommitter GitHub <noreply@github.com> 1609336166 +0900\n\nRollup merge of #80509 - matthiaskrgr:ptr_arg, r=varkor\n\nwhere possible, pass slices instead of &Vec or &String (clippy::ptr_arg)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f", "html_url": "https://github.com/rust-lang/rust/commit/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07083739fb2b971fa174d5443ab3e675d363fa1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/07083739fb2b971fa174d5443ab3e675d363fa1a", "html_url": "https://github.com/rust-lang/rust/commit/07083739fb2b971fa174d5443ab3e675d363fa1a"}, {"sha": "bdc9291ed9dd0501a0d25a87463212ad5ec5d87a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdc9291ed9dd0501a0d25a87463212ad5ec5d87a", "html_url": "https://github.com/rust-lang/rust/commit/bdc9291ed9dd0501a0d25a87463212ad5ec5d87a"}], "stats": {"total": 48, "additions": 21, "deletions": 27}, "files": [{"sha": "ecac05fd955720b35a1b291f46e5fbf963466d4a", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f", "patch": "@@ -522,7 +522,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         mut bx: Bx,\n         terminator: &mir::Terminator<'tcx>,\n         func: &mir::Operand<'tcx>,\n-        args: &Vec<mir::Operand<'tcx>>,\n+        args: &[mir::Operand<'tcx>],\n         destination: &Option<(mir::Place<'tcx>, mir::BasicBlock)>,\n         cleanup: Option<mir::BasicBlock>,\n         fn_span: Span,"}, {"sha": "d57ab2433ad1b291c0306046e3de028d9b253e72", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f", "patch": "@@ -603,7 +603,7 @@ fn handle_explain(registry: Registry, code: &str, output: ErrorOutputType) {\n     }\n }\n \n-fn show_content_with_pager(content: &String) {\n+fn show_content_with_pager(content: &str) {\n     let pager_name = env::var_os(\"PAGER\").unwrap_or_else(|| {\n         if cfg!(windows) { OsString::from(\"more.com\") } else { OsString::from(\"less\") }\n     });"}, {"sha": "6d6bf4bf5f7058d750a1cd8fd852e0e93a3a9d03", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f", "patch": "@@ -417,7 +417,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     // obviously it never weeds out ALL errors.\n     fn process_errors(\n         &self,\n-        errors: &Vec<RegionResolutionError<'tcx>>,\n+        errors: &[RegionResolutionError<'tcx>],\n     ) -> Vec<RegionResolutionError<'tcx>> {\n         debug!(\"process_errors()\");\n \n@@ -442,7 +442,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         };\n \n         let mut errors = if errors.iter().all(|e| is_bound_failure(e)) {\n-            errors.clone()\n+            errors.to_owned()\n         } else {\n             errors.iter().filter(|&e| !is_bound_failure(e)).cloned().collect()\n         };"}, {"sha": "5c061a9d3c7949a529c077090889d80a51265a8b", "filename": "compiler/rustc_macros/src/session_diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs?ref=41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f", "patch": "@@ -574,7 +574,7 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n     /// format!(\"Expected a point greater than ({x}, {y})\", x = self.x, y = self.y)\n     /// ```\n     /// This function builds the entire call to format!.\n-    fn build_format(&self, input: &String, span: proc_macro2::Span) -> proc_macro2::TokenStream {\n+    fn build_format(&self, input: &str, span: proc_macro2::Span) -> proc_macro2::TokenStream {\n         // This set is used later to generate the final format string. To keep builds reproducible,\n         // the iteration order needs to be deterministic, hence why we use a BTreeSet here instead\n         // of a HashSet."}, {"sha": "4ebc1cdca60597ec83d4c2c54a3639fc5197c505", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f", "patch": "@@ -954,7 +954,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         &self,\n         def_id: DefId,\n         target_place: PlaceRef<'tcx>,\n-        places: &Vec<Operand<'tcx>>,\n+        places: &[Operand<'tcx>],\n     ) -> Option<(Span, Option<GeneratorKind>, Span)> {\n         debug!(\n             \"closure_span: def_id={:?} target_place={:?} places={:?}\","}, {"sha": "7e8a33efe114ef6fb6a275c5a1b2a1fb70c170a2", "filename": "compiler/rustc_mir/src/borrow_check/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f", "patch": "@@ -58,11 +58,7 @@ impl vll::LinkElem for Appearance {\n }\n \n impl LocalUseMap {\n-    crate fn build(\n-        live_locals: &Vec<Local>,\n-        elements: &RegionValueElements,\n-        body: &Body<'_>,\n-    ) -> Self {\n+    crate fn build(live_locals: &[Local], elements: &RegionValueElements, body: &Body<'_>) -> Self {\n         let nones = IndexVec::from_elem_n(None, body.local_decls.len());\n         let mut local_use_map = LocalUseMap {\n             first_def_at: nones.clone(),"}, {"sha": "a6ea039f278a1e595c0dcb848a6c41c093419ec5", "filename": "compiler/rustc_mir/src/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs?ref=41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f", "patch": "@@ -153,7 +153,7 @@ impl<T: Copy + Eq + Hash + std::fmt::Debug, PATH: Default> RefTracking<T, PATH>\n }\n \n /// Format a path\n-fn write_path(out: &mut String, path: &Vec<PathElem>) {\n+fn write_path(out: &mut String, path: &[PathElem]) {\n     use self::PathElem::*;\n \n     for elem in path.iter() {"}, {"sha": "b5921aac561437326c851914cdb1baa68f0dd0a6", "filename": "compiler/rustc_mir/src/transform/coverage/counters.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fcounters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fcounters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fcounters.rs?ref=41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f", "patch": "@@ -140,7 +140,7 @@ impl<'a> BcbCounters<'a> {\n     /// message for subsequent debugging.\n     fn make_bcb_counters(\n         &mut self,\n-        coverage_spans: &Vec<CoverageSpan>,\n+        coverage_spans: &[CoverageSpan],\n     ) -> Result<Vec<CoverageKind>, Error> {\n         debug!(\"make_bcb_counters(): adding a counter or expression to each BasicCoverageBlock\");\n         let num_bcbs = self.basic_coverage_blocks.num_nodes();\n@@ -465,7 +465,7 @@ impl<'a> BcbCounters<'a> {\n     fn choose_preferred_expression_branch(\n         &self,\n         traversal: &TraverseCoverageGraphWithLoops,\n-        branches: &Vec<BcbBranch>,\n+        branches: &[BcbBranch],\n     ) -> BcbBranch {\n         let branch_needs_a_counter =\n             |branch: &BcbBranch| branch.counter(&self.basic_coverage_blocks).is_none();\n@@ -509,7 +509,7 @@ impl<'a> BcbCounters<'a> {\n     fn find_some_reloop_branch(\n         &self,\n         traversal: &TraverseCoverageGraphWithLoops,\n-        branches: &Vec<BcbBranch>,\n+        branches: &[BcbBranch],\n     ) -> Option<BcbBranch> {\n         let branch_needs_a_counter =\n             |branch: &BcbBranch| branch.counter(&self.basic_coverage_blocks).is_none();"}, {"sha": "7c8c349da1d6c55544d01e2b49d9e888394267cf", "filename": "compiler/rustc_mir/src/transform/function_item_references.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Ffunction_item_references.rs?ref=41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f", "patch": "@@ -99,7 +99,7 @@ impl<'a, 'tcx> FunctionItemRefChecker<'a, 'tcx> {\n         &self,\n         def_id: DefId,\n         substs_ref: SubstsRef<'tcx>,\n-        args: &Vec<Operand<'tcx>>,\n+        args: &[Operand<'tcx>],\n         source_info: SourceInfo,\n     ) {\n         let param_env = self.tcx.param_env(def_id);\n@@ -162,7 +162,7 @@ impl<'a, 'tcx> FunctionItemRefChecker<'a, 'tcx> {\n             .unwrap_or(None)\n     }\n \n-    fn nth_arg_span(&self, args: &Vec<Operand<'tcx>>, n: usize) -> Span {\n+    fn nth_arg_span(&self, args: &[Operand<'tcx>], n: usize) -> Span {\n         match &args[n] {\n             Operand::Copy(place) | Operand::Move(place) => {\n                 self.body.local_decls[place.local].source_info.span"}, {"sha": "cf2e4e8916d0a397c5f8b320f8acf39951417687", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f", "patch": "@@ -79,7 +79,7 @@ crate struct PlaceBuilder<'tcx> {\n /// part of a path that is captued by a closure. We stop applying projections once we see the first\n /// projection that isn't captured by a closure.\n fn convert_to_hir_projections_and_truncate_for_capture<'tcx>(\n-    mir_projections: &Vec<PlaceElem<'tcx>>,\n+    mir_projections: &[PlaceElem<'tcx>],\n ) -> Vec<HirProjectionKind> {\n \n     let mut hir_projections  = Vec::new();\n@@ -128,7 +128,7 @@ fn convert_to_hir_projections_and_truncate_for_capture<'tcx>(\n ///        list are being applied to the same root variable.\n fn is_ancestor_or_same_capture(\n     proj_possible_ancestor: &Vec<HirProjectionKind>,\n-    proj_capture: &Vec<HirProjectionKind>,\n+    proj_capture: &[HirProjectionKind],\n ) -> bool {\n     // We want to make sure `is_ancestor_or_same_capture(\"x.0.0\", \"x.0\")` to return false.\n     // Therefore we can't just check if all projections are same in the zipped iterator below.\n@@ -171,7 +171,7 @@ fn find_capture_matching_projections<'a, 'tcx>(\n     typeck_results: &'a ty::TypeckResults<'tcx>,\n     var_hir_id: HirId,\n     closure_def_id: DefId,\n-    projections: &Vec<PlaceElem<'tcx>>,\n+    projections: &[PlaceElem<'tcx>],\n ) -> Option<(usize, &'a ty::CapturedPlace<'tcx>)> {\n     let closure_min_captures = typeck_results.closure_min_captures.get(&closure_def_id)?;\n     let root_variable_min_captures = closure_min_captures.get(&var_hir_id)?;"}, {"sha": "21def3e142910cb77cd88dade0e1dafd0631cba2", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f", "patch": "@@ -1151,13 +1151,11 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     /// When evaluating a `trait` use its associated types' idents for suggestions in E0412.\n     fn with_trait_items<T>(\n         &mut self,\n-        trait_items: &'ast Vec<P<AssocItem>>,\n+        trait_items: &'ast [P<AssocItem>],\n         f: impl FnOnce(&mut Self) -> T,\n     ) -> T {\n-        let trait_assoc_items = replace(\n-            &mut self.diagnostic_metadata.current_trait_assoc_items,\n-            Some(&trait_items[..]),\n-        );\n+        let trait_assoc_items =\n+            replace(&mut self.diagnostic_metadata.current_trait_assoc_items, Some(&trait_items));\n         let result = f(self);\n         self.diagnostic_metadata.current_trait_assoc_items = trait_assoc_items;\n         result"}, {"sha": "3a757e5f0075d468b77e1f5d02873231d0e51a0c", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f", "patch": "@@ -76,7 +76,7 @@ impl<'a> FileSearch<'a> {\n     pub fn new(\n         sysroot: &'a Path,\n         triple: &'a str,\n-        search_paths: &'a Vec<SearchPath>,\n+        search_paths: &'a [SearchPath],\n         tlib_path: &'a SearchPath,\n         kind: PathKind,\n     ) -> FileSearch<'a> {"}, {"sha": "d8fadbf57e8db3c1b8264be20e4180cb3270b69b", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=41fa0dba2767d62fc1b5f66e1b3bdf7d4a1c6d2f", "patch": "@@ -3483,7 +3483,7 @@ enum AssocItemLink<'a> {\n }\n \n impl<'a> AssocItemLink<'a> {\n-    fn anchor(&self, id: &'a String) -> Self {\n+    fn anchor(&self, id: &'a str) -> Self {\n         match *self {\n             AssocItemLink::Anchor(_) => AssocItemLink::Anchor(Some(&id)),\n             ref other => *other,"}]}