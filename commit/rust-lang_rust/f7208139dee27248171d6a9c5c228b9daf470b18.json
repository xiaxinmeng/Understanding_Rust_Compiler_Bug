{"sha": "f7208139dee27248171d6a9c5c228b9daf470b18", "node_id": "C_kwDOAAsO6NoAKGY3MjA4MTM5ZGVlMjcyNDgxNzFkNmE5YzVjMjI4YjlkYWY0NzBiMTg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-29T23:14:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-29T23:14:59Z"}, "message": "Rollup merge of #110997 - scottmcm:slice-iter-comments, r=the8472\n\nImprove internal field comments on `slice::Iter(Mut)`\n\nI wrote these in a previous PR that I ended up withdrawing, so might as well submit them separately.\n\n`@bors` rollup=always", "tree": {"sha": "5c29b2ac839338744f22a1a4a497a9c9040b5a8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c29b2ac839338744f22a1a4a497a9c9040b5a8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7208139dee27248171d6a9c5c228b9daf470b18", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkTaTzCRBK7hj4Ov3rIwAAYrwIABwLm81JHrwrpp71Ey9Xw/VF\n5abQLd13dBCWwZVbO51kIdgmT7y4SnwZtw18xya120l62URfujy3YH/R3QyHUvpV\nAkCpRjZwRyM5jZ7fdFr0Ukaww5oBTXkhV69v/qYVQj+G5qyV1p4oju8mg8WFUhi3\nQH6FewxFZ+S0QlNOQF/a15PIdjss1waD1ngoBT92gHqRzNI+pBnYmQh1CxbPVVFe\n0qJ9kCkmCXBXxJ/f17V9U5MnmctfkEVXANniP6jK6qYYutaEqDsuJ3kjMHHhhYW9\noFLOf46WVubb4elxYYMXjnkaNN+b6yv9iKgz62omvICdnYgdw9R4ZpFbzEegURg=\n=Ve27\n-----END PGP SIGNATURE-----\n", "payload": "tree 5c29b2ac839338744f22a1a4a497a9c9040b5a8a\nparent a656a2019acf9dbcdf1a27c8d8c64cbc7198a937\nparent 57aac3f671d32b2e2541c8907664f10af8c9db39\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1682810099 +0200\ncommitter GitHub <noreply@github.com> 1682810099 +0200\n\nRollup merge of #110997 - scottmcm:slice-iter-comments, r=the8472\n\nImprove internal field comments on `slice::Iter(Mut)`\n\nI wrote these in a previous PR that I ended up withdrawing, so might as well submit them separately.\n\n`@bors` rollup=always\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7208139dee27248171d6a9c5c228b9daf470b18", "html_url": "https://github.com/rust-lang/rust/commit/f7208139dee27248171d6a9c5c228b9daf470b18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7208139dee27248171d6a9c5c228b9daf470b18/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a656a2019acf9dbcdf1a27c8d8c64cbc7198a937", "url": "https://api.github.com/repos/rust-lang/rust/commits/a656a2019acf9dbcdf1a27c8d8c64cbc7198a937", "html_url": "https://github.com/rust-lang/rust/commit/a656a2019acf9dbcdf1a27c8d8c64cbc7198a937"}, {"sha": "57aac3f671d32b2e2541c8907664f10af8c9db39", "url": "https://api.github.com/repos/rust-lang/rust/commits/57aac3f671d32b2e2541c8907664f10af8c9db39", "html_url": "https://github.com/rust-lang/rust/commit/57aac3f671d32b2e2541c8907664f10af8c9db39"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "8629aab00704645b6c75db73b8e3978096f378c9", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f7208139dee27248171d6a9c5c228b9daf470b18/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7208139dee27248171d6a9c5c228b9daf470b18/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=f7208139dee27248171d6a9c5c228b9daf470b18", "patch": "@@ -60,10 +60,17 @@ impl<'a, T> IntoIterator for &'a mut [T] {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct Iter<'a, T: 'a> {\n+    /// The pointer to the next element to return, or the past-the-end location\n+    /// if the iterator is empty.\n+    ///\n+    /// This address will be used for all ZST elements, never changed.\n     ptr: NonNull<T>,\n-    end: *const T, // If T is a ZST, this is actually ptr+len. This encoding is picked so that\n-    // ptr == end is a quick test for the Iterator being empty, that works\n-    // for both ZST and non-ZST.\n+    /// For non-ZSTs, the non-null pointer to the past-the-end element.\n+    ///\n+    /// For ZSTs, this is `ptr.wrapping_byte_add(len)`.\n+    ///\n+    /// For all types, `ptr == end` tests whether the iterator is empty.\n+    end: *const T,\n     _marker: PhantomData<&'a T>,\n }\n \n@@ -179,10 +186,17 @@ impl<T> AsRef<[T]> for Iter<'_, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n pub struct IterMut<'a, T: 'a> {\n+    /// The pointer to the next element to return, or the past-the-end location\n+    /// if the iterator is empty.\n+    ///\n+    /// This address will be used for all ZST elements, never changed.\n     ptr: NonNull<T>,\n-    end: *mut T, // If T is a ZST, this is actually ptr+len. This encoding is picked so that\n-    // ptr == end is a quick test for the Iterator being empty, that works\n-    // for both ZST and non-ZST.\n+    /// For non-ZSTs, the non-null pointer to the past-the-end element.\n+    ///\n+    /// For ZSTs, this is `ptr.wrapping_byte_add(len)`.\n+    ///\n+    /// For all types, `ptr == end` tests whether the iterator is empty.\n+    end: *mut T,\n     _marker: PhantomData<&'a mut T>,\n }\n "}]}