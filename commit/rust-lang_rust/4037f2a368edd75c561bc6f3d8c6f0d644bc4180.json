{"sha": "4037f2a368edd75c561bc6f3d8c6f0d644bc4180", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMzdmMmEzNjhlZGQ3NWM1NjFiYzZmM2Q4YzZmMGQ2NDRiYzQxODA=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2015-03-27T05:42:29Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2015-03-28T17:33:51Z"}, "message": "Update debug helpers and add list builder\n\nThe collections debug helpers no longer prefix output with the\ncollection name, in line with the current conventions for Debug\nimplementations. Implementations that want to preserve the current\nbehavior can simply add a `try!(write!(fmt, \"TypeName \"));` at the\nbeginning of the `fmt` method.\n\n[breaking-change]", "tree": {"sha": "25ef8c2faee1ff9f30bf1d82d557bc50d4d90f00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25ef8c2faee1ff9f30bf1d82d557bc50d4d90f00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4037f2a368edd75c561bc6f3d8c6f0d644bc4180", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4037f2a368edd75c561bc6f3d8c6f0d644bc4180", "html_url": "https://github.com/rust-lang/rust/commit/4037f2a368edd75c561bc6f3d8c6f0d644bc4180", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4037f2a368edd75c561bc6f3d8c6f0d644bc4180/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e7385aae9d58c8e12137d7c07aad48551048c13", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e7385aae9d58c8e12137d7c07aad48551048c13", "html_url": "https://github.com/rust-lang/rust/commit/3e7385aae9d58c8e12137d7c07aad48551048c13"}], "stats": {"total": 404, "additions": 275, "deletions": 129}, "files": [{"sha": "93978e31de57d984e29d6ce787da9bc81a124771", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4037f2a368edd75c561bc6f3d8c6f0d644bc4180/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4037f2a368edd75c561bc6f3d8c6f0d644bc4180/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=4037f2a368edd75c561bc6f3d8c6f0d644bc4180", "patch": "@@ -904,14 +904,11 @@ impl<K: Ord, V: Ord> Ord for BTreeMap<K, V> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Debug, V: Debug> Debug for BTreeMap<K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, \"{{\"));\n-\n-        for (i, (k, v)) in self.iter().enumerate() {\n-            if i != 0 { try!(write!(f, \", \")); }\n-            try!(write!(f, \"{:?}: {:?}\", *k, *v));\n+        let mut builder = f.debug_map();\n+        for (k, v) in self {\n+            builder = builder.entry(k, v);\n         }\n-\n-        write!(f, \"}}\")\n+        builder.finish()\n     }\n }\n "}, {"sha": "db0cdd30b1b1f03ed4d0fb7b201b1dc81f7db284", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4037f2a368edd75c561bc6f3d8c6f0d644bc4180/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4037f2a368edd75c561bc6f3d8c6f0d644bc4180/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=4037f2a368edd75c561bc6f3d8c6f0d644bc4180", "patch": "@@ -628,14 +628,11 @@ impl<'a, 'b, T: Ord + Clone> BitOr<&'b BTreeSet<T>> for &'a BTreeSet<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Debug> Debug for BTreeSet<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, \"{{\"));\n-\n-        for (i, x) in self.iter().enumerate() {\n-            if i != 0 { try!(write!(f, \", \")); }\n-            try!(write!(f, \"{:?}\", *x));\n+        let mut builder = f.debug_set();\n+        for x in self {\n+            builder = builder.entry(x);\n         }\n-\n-        write!(f, \"}}\")\n+        builder.finish()\n     }\n }\n "}, {"sha": "c769b3df37f627548150961962c00aa8500c6c39", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4037f2a368edd75c561bc6f3d8c6f0d644bc4180/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4037f2a368edd75c561bc6f3d8c6f0d644bc4180/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=4037f2a368edd75c561bc6f3d8c6f0d644bc4180", "patch": "@@ -40,6 +40,7 @@\n #![feature(str_char)]\n #![feature(convert)]\n #![feature(slice_patterns)]\n+#![feature(debug_builders)]\n #![cfg_attr(test, feature(rand, rustc_private, test, hash, collections))]\n #![cfg_attr(test, allow(deprecated))] // rand\n "}, {"sha": "56c880ca6e2657397629ae17a6ddf9f9d361b8a4", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4037f2a368edd75c561bc6f3d8c6f0d644bc4180/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4037f2a368edd75c561bc6f3d8c6f0d644bc4180/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=4037f2a368edd75c561bc6f3d8c6f0d644bc4180", "patch": "@@ -927,14 +927,11 @@ impl<A: Clone> Clone for LinkedList<A> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A: fmt::Debug> fmt::Debug for LinkedList<A> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, \"[\"));\n-\n-        for (i, e) in self.iter().enumerate() {\n-            if i != 0 { try!(write!(f, \", \")); }\n-            try!(write!(f, \"{:?}\", *e));\n+        let mut builder = f.debug_list();\n+        for e in self {\n+            builder = builder.entry(e);\n         }\n-\n-        write!(f, \"]\")\n+        builder.finish()\n     }\n }\n "}, {"sha": "f61a7f2d30c62cd418b949bd0b301b2ee13a06d3", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 85, "deletions": 53, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/4037f2a368edd75c561bc6f3d8c6f0d644bc4180/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4037f2a368edd75c561bc6f3d8c6f0d644bc4180/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=4037f2a368edd75c561bc6f3d8c6f0d644bc4180", "patch": "@@ -177,64 +177,107 @@ impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n     }\n }\n \n+struct DebugInner<'a, 'b: 'a> {\n+    fmt: &'a mut fmt::Formatter<'b>,\n+    result: fmt::Result,\n+    has_fields: bool,\n+}\n+\n+impl<'a, 'b: 'a> DebugInner<'a, 'b> {\n+    fn entry(&mut self, entry: &fmt::Debug) {\n+        self.result = self.result.and_then(|_| {\n+            if self.is_pretty() {\n+                let mut writer = PadAdapter::new(self.fmt);\n+                let prefix = if self.has_fields { \",\" } else { \"\" };\n+                fmt::write(&mut writer, format_args!(\"{}\\n{:#?}\", prefix, entry))\n+            } else {\n+                let prefix = if self.has_fields { \", \" } else { \"\" };\n+                write!(self.fmt, \"{}{:?}\", prefix, entry)\n+            }\n+        });\n+\n+        self.has_fields = true;\n+    }\n+\n+    pub fn finish(&mut self) {\n+        let prefix = if self.is_pretty() && self.has_fields { \"\\n\" } else { \"\" };\n+        self.result = self.result.and_then(|_| self.fmt.write_str(prefix));\n+    }\n+\n+    fn is_pretty(&self) -> bool {\n+        self.fmt.flags() & (1 << (FlagV1::Alternate as usize)) != 0\n+    }\n+}\n+\n /// A struct to help with `fmt::Debug` implementations.\n ///\n /// Constructed by the `Formatter::debug_set` method.\n #[must_use]\n pub struct DebugSet<'a, 'b: 'a> {\n-    fmt: &'a mut fmt::Formatter<'b>,\n-    result: fmt::Result,\n-    has_fields: bool,\n+    inner: DebugInner<'a, 'b>,\n }\n \n-pub fn debug_set_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>, name: &str) -> DebugSet<'a, 'b> {\n-    let result = write!(fmt, \"{} {{\", name);\n+pub fn debug_set_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugSet<'a, 'b> {\n+    let result = write!(fmt, \"{{\");\n     DebugSet {\n-        fmt: fmt,\n-        result: result,\n-        has_fields: false,\n+        inner: DebugInner {\n+            fmt: fmt,\n+            result: result,\n+            has_fields: false,\n+        }\n     }\n }\n \n impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n     /// Adds a new entry to the set output.\n     #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n     pub fn entry(mut self, entry: &fmt::Debug) -> DebugSet<'a, 'b> {\n-        self.result = self.result.and_then(|_| {\n-            let prefix = if self.has_fields {\n-                \",\"\n-            } else {\n-                \"\"\n-            };\n-\n-            if self.is_pretty() {\n-                let mut writer = PadAdapter::new(self.fmt);\n-                fmt::write(&mut writer, format_args!(\"{}\\n{:#?}\", prefix, entry))\n-            } else {\n-                write!(self.fmt, \"{} {:?}\", prefix, entry)\n-            }\n-        });\n-\n-        self.has_fields = true;\n+        self.inner.entry(entry);\n         self\n     }\n \n     /// Consumes the `DebugSet`, finishing output and returning any error\n     /// encountered.\n     #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n-    pub fn finish(self) -> fmt::Result {\n-        self.result.and_then(|_| {\n-            let end = match (self.has_fields, self.is_pretty()) {\n-                (false, _) => \"}\",\n-                (true, false) => \" }\",\n-                (true, true) => \"\\n}\",\n-            };\n-            self.fmt.write_str(end)\n-        })\n+    pub fn finish(mut self) -> fmt::Result {\n+        self.inner.finish();\n+        self.inner.result.and_then(|_| self.inner.fmt.write_str(\"}\"))\n     }\n+}\n \n-    fn is_pretty(&self) -> bool {\n-        self.fmt.flags() & (1 << (FlagV1::Alternate as usize)) != 0\n+/// A struct to help with `fmt::Debug` implementations.\n+///\n+/// Constructed by the `Formatter::debug_list` method.\n+#[must_use]\n+pub struct DebugList<'a, 'b: 'a> {\n+    inner: DebugInner<'a, 'b>,\n+}\n+\n+pub fn debug_list_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugList<'a, 'b> {\n+    let result = write!(fmt, \"[\");\n+    DebugList {\n+        inner: DebugInner {\n+            fmt: fmt,\n+            result: result,\n+            has_fields: false,\n+        }\n+    }\n+}\n+\n+impl<'a, 'b: 'a> DebugList<'a, 'b> {\n+    /// Adds a new entry to the set output.\n+    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    pub fn entry(mut self, entry: &fmt::Debug) -> DebugList<'a, 'b> {\n+        self.inner.entry(entry);\n+        self\n+    }\n+\n+    /// Consumes the `DebugSet`, finishing output and returning any error\n+    /// encountered.\n+    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    pub fn finish(mut self) -> fmt::Result {\n+        self.inner.finish();\n+        self.inner.result.and_then(|_| self.inner.fmt.write_str(\"]\"))\n     }\n }\n \n@@ -248,8 +291,8 @@ pub struct DebugMap<'a, 'b: 'a> {\n     has_fields: bool,\n }\n \n-pub fn debug_map_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>, name: &str) -> DebugMap<'a, 'b> {\n-    let result = write!(fmt, \"{} {{\", name);\n+pub fn debug_map_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugMap<'a, 'b> {\n+    let result = write!(fmt, \"{{\");\n     DebugMap {\n         fmt: fmt,\n         result: result,\n@@ -262,37 +305,26 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n     pub fn entry(mut self, key: &fmt::Debug, value: &fmt::Debug) -> DebugMap<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n-            let prefix = if self.has_fields {\n-                \",\"\n-            } else {\n-                \"\"\n-            };\n-\n             if self.is_pretty() {\n                 let mut writer = PadAdapter::new(self.fmt);\n+                let prefix = if self.has_fields { \",\" } else { \"\" };\n                 fmt::write(&mut writer, format_args!(\"{}\\n{:#?}: {:#?}\", prefix, key, value))\n             } else {\n-                write!(self.fmt, \"{} {:?}: {:?}\", prefix, key, value)\n+                let prefix = if self.has_fields { \", \" } else { \"\" };\n+                write!(self.fmt, \"{}{:?}: {:?}\", prefix, key, value)\n             }\n         });\n \n         self.has_fields = true;\n-\n         self\n     }\n \n     /// Consumes the `DebugMap`, finishing output and returning any error\n     /// encountered.\n     #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n     pub fn finish(self) -> fmt::Result {\n-        self.result.and_then(|_| {\n-            let end = match (self.has_fields, self.is_pretty()) {\n-                (false, _) => \"}\",\n-                (true, false) => \" }\",\n-                (true, true) => \"\\n}\",\n-            };\n-            self.fmt.write_str(end)\n-        })\n+        let prefix = if self.is_pretty() && self.has_fields { \"\\n\" } else { \"\" };\n+        self.result.and_then(|_| write!(self.fmt, \"{}}}\", prefix))\n     }\n \n     fn is_pretty(&self) -> bool {"}, {"sha": "856e7569f1c2779cbccf096b865983f5fccb7520", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 41, "deletions": 11, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4037f2a368edd75c561bc6f3d8c6f0d644bc4180/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4037f2a368edd75c561bc6f3d8c6f0d644bc4180/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=4037f2a368edd75c561bc6f3d8c6f0d644bc4180", "patch": "@@ -32,7 +32,7 @@ pub use self::num::radix;\n pub use self::num::Radix;\n pub use self::num::RadixFmt;\n \n-pub use self::builders::{DebugStruct, DebugTuple, DebugSet, DebugMap};\n+pub use self::builders::{DebugStruct, DebugTuple, DebugSet, DebugList, DebugMap};\n \n mod num;\n mod float;\n@@ -644,7 +644,7 @@ impl<'a> Formatter<'a> {\n     /// // prints \"Foo { bar: 10, baz: \"Hello World\" }\"\n     /// println!(\"{:?}\", Foo { bar: 10, baz: \"Hello World\".to_string() });\n     /// ```\n-    #[unstable(feature = \"core\", reason = \"method was just created\")]\n+    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n     #[inline]\n     pub fn debug_struct<'b>(&'b mut self, name: &str) -> DebugStruct<'b, 'a> {\n         builders::debug_struct_new(self, name)\n@@ -673,12 +673,42 @@ impl<'a> Formatter<'a> {\n     /// // prints \"Foo(10, \"Hello World\")\"\n     /// println!(\"{:?}\", Foo(10, \"Hello World\".to_string()));\n     /// ```\n-    #[unstable(feature = \"core\", reason = \"method was just created\")]\n+    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n     #[inline]\n     pub fn debug_tuple<'b>(&'b mut self, name: &str) -> DebugTuple<'b, 'a> {\n         builders::debug_tuple_new(self, name)\n     }\n \n+    /// Creates a `DebugList` builder designed to assist with creation of\n+    /// `fmt::Debug` implementations for list-like structures.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// # #![feature(debug_builders, core)]\n+    /// use std::fmt;\n+    ///\n+    /// struct Foo(Vec<i32>);\n+    ///\n+    /// impl fmt::Debug for Foo {\n+    ///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    ///         let mut builder = fmt.debug_list();\n+    ///         for i in &self.0 {\n+    ///             builder = builder.entry(i);\n+    ///         }\n+    ///         builder.finish()\n+    ///     }\n+    /// }\n+    ///\n+    /// // prints \"Foo { 10, 11 }\"\n+    /// println!(\"{:?}\", Foo(vec![10, 11]));\n+    /// ```\n+    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    #[inline]\n+    pub fn debug_list<'b>(&'b mut self) -> DebugList<'b, 'a> {\n+        builders::debug_list_new(self)\n+    }\n+\n     /// Creates a `DebugSet` builder designed to assist with creation of\n     /// `fmt::Debug` implementations for set-like structures.\n     ///\n@@ -692,7 +722,7 @@ impl<'a> Formatter<'a> {\n     ///\n     /// impl fmt::Debug for Foo {\n     ///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-    ///         let mut builder = fmt.debug_set(\"Foo\");\n+    ///         let mut builder = fmt.debug_set();\n     ///         for i in &self.0 {\n     ///             builder = builder.entry(i);\n     ///         }\n@@ -703,10 +733,10 @@ impl<'a> Formatter<'a> {\n     /// // prints \"Foo { 10, 11 }\"\n     /// println!(\"{:?}\", Foo(vec![10, 11]));\n     /// ```\n-    #[unstable(feature = \"core\", reason = \"method was just created\")]\n+    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n     #[inline]\n-    pub fn debug_set<'b>(&'b mut self, name: &str) -> DebugSet<'b, 'a> {\n-        builders::debug_set_new(self, name)\n+    pub fn debug_set<'b>(&'b mut self) -> DebugSet<'b, 'a> {\n+        builders::debug_set_new(self)\n     }\n \n     /// Creates a `DebugMap` builder designed to assist with creation of\n@@ -722,7 +752,7 @@ impl<'a> Formatter<'a> {\n     ///\n     /// impl fmt::Debug for Foo {\n     ///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-    ///         let mut builder = fmt.debug_map(\"Foo\");\n+    ///         let mut builder = fmt.debug_map();\n     ///         for &(ref key, ref value) in &self.0 {\n     ///             builder = builder.entry(key, value);\n     ///         }\n@@ -733,10 +763,10 @@ impl<'a> Formatter<'a> {\n     /// // prints \"Foo { \"A\": 10, \"B\": 11 }\"\n     /// println!(\"{:?}\", Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)]));\n     /// ```\n-    #[unstable(feature = \"core\", reason = \"method was just created\")]\n+    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n     #[inline]\n-    pub fn debug_map<'b>(&'b mut self, name: &str) -> DebugMap<'b, 'a> {\n-        builders::debug_map_new(self, name)\n+    pub fn debug_map<'b>(&'b mut self) -> DebugMap<'b, 'a> {\n+        builders::debug_map_new(self)\n     }\n }\n "}, {"sha": "885ee3f9c3be2e19ba39c658719e0a899b578f2b", "filename": "src/libcoretest/fmt/builders.rs", "status": "modified", "additions": 127, "deletions": 30, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/4037f2a368edd75c561bc6f3d8c6f0d644bc4180/src%2Flibcoretest%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4037f2a368edd75c561bc6f3d8c6f0d644bc4180/src%2Flibcoretest%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ffmt%2Fbuilders.rs?ref=4037f2a368edd75c561bc6f3d8c6f0d644bc4180", "patch": "@@ -211,12 +211,12 @@ mod debug_map {\n \n         impl fmt::Debug for Foo {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-                fmt.debug_map(\"Foo\").finish()\n+                fmt.debug_map().finish()\n             }\n         }\n \n-        assert_eq!(\"Foo {}\", format!(\"{:?}\", Foo));\n-        assert_eq!(\"Foo {}\", format!(\"{:#?}\", Foo));\n+        assert_eq!(\"{}\", format!(\"{:?}\", Foo));\n+        assert_eq!(\"{}\", format!(\"{:#?}\", Foo));\n     }\n \n     #[test]\n@@ -225,15 +225,15 @@ mod debug_map {\n \n         impl fmt::Debug for Foo {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-                fmt.debug_map(\"Foo\")\n+                fmt.debug_map()\n                     .entry(&\"bar\", &true)\n                     .finish()\n             }\n         }\n \n-        assert_eq!(\"Foo { \\\"bar\\\": true }\", format!(\"{:?}\", Foo));\n+        assert_eq!(\"{\\\"bar\\\": true}\", format!(\"{:?}\", Foo));\n         assert_eq!(\n-\"Foo {\n+\"{\n     \\\"bar\\\": true\n }\",\n                    format!(\"{:#?}\", Foo));\n@@ -245,16 +245,16 @@ mod debug_map {\n \n         impl fmt::Debug for Foo {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-                fmt.debug_map(\"Foo\")\n+                fmt.debug_map()\n                     .entry(&\"bar\", &true)\n                     .entry(&10i32, &format_args!(\"{}/{}\", 10i32, 20i32))\n                     .finish()\n             }\n         }\n \n-        assert_eq!(\"Foo { \\\"bar\\\": true, 10: 10/20 }\", format!(\"{:?}\", Foo));\n+        assert_eq!(\"{\\\"bar\\\": true, 10: 10/20}\", format!(\"{:?}\", Foo));\n         assert_eq!(\n-\"Foo {\n+\"{\n     \\\"bar\\\": true,\n     10: 10/20\n }\",\n@@ -267,7 +267,7 @@ mod debug_map {\n \n         impl fmt::Debug for Foo {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-                fmt.debug_map(\"Foo\")\n+                fmt.debug_map()\n                     .entry(&\"bar\", &true)\n                     .entry(&10i32, &format_args!(\"{}/{}\", 10i32, 20i32))\n                     .finish()\n@@ -278,23 +278,23 @@ mod debug_map {\n \n         impl fmt::Debug for Bar {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-                fmt.debug_map(\"Bar\")\n+                fmt.debug_map()\n                     .entry(&\"foo\", &Foo)\n                     .entry(&Foo, &\"world\")\n                     .finish()\n             }\n         }\n \n-        assert_eq!(\"Bar { \\\"foo\\\": Foo { \\\"bar\\\": true, 10: 10/20 }, \\\n-                    Foo { \\\"bar\\\": true, 10: 10/20 }: \\\"world\\\" }\",\n+        assert_eq!(\"{\\\"foo\\\": {\\\"bar\\\": true, 10: 10/20}, \\\n+                    {\\\"bar\\\": true, 10: 10/20}: \\\"world\\\"}\",\n                    format!(\"{:?}\", Bar));\n         assert_eq!(\n-\"Bar {\n-    \\\"foo\\\": Foo {\n+\"{\n+    \\\"foo\\\": {\n         \\\"bar\\\": true,\n         10: 10/20\n     },\n-    Foo {\n+    {\n         \\\"bar\\\": true,\n         10: 10/20\n     }: \\\"world\\\"\n@@ -312,12 +312,12 @@ mod debug_set {\n \n         impl fmt::Debug for Foo {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-                fmt.debug_set(\"Foo\").finish()\n+                fmt.debug_set().finish()\n             }\n         }\n \n-        assert_eq!(\"Foo {}\", format!(\"{:?}\", Foo));\n-        assert_eq!(\"Foo {}\", format!(\"{:#?}\", Foo));\n+        assert_eq!(\"{}\", format!(\"{:?}\", Foo));\n+        assert_eq!(\"{}\", format!(\"{:#?}\", Foo));\n     }\n \n     #[test]\n@@ -326,15 +326,15 @@ mod debug_set {\n \n         impl fmt::Debug for Foo {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-                fmt.debug_set(\"Foo\")\n+                fmt.debug_set()\n                     .entry(&true)\n                     .finish()\n             }\n         }\n \n-        assert_eq!(\"Foo { true }\", format!(\"{:?}\", Foo));\n+        assert_eq!(\"{true}\", format!(\"{:?}\", Foo));\n         assert_eq!(\n-\"Foo {\n+\"{\n     true\n }\",\n                    format!(\"{:#?}\", Foo));\n@@ -346,16 +346,16 @@ mod debug_set {\n \n         impl fmt::Debug for Foo {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-                fmt.debug_set(\"Foo\")\n+                fmt.debug_set()\n                     .entry(&true)\n                     .entry(&format_args!(\"{}/{}\", 10i32, 20i32))\n                     .finish()\n             }\n         }\n \n-        assert_eq!(\"Foo { true, 10/20 }\", format!(\"{:?}\", Foo));\n+        assert_eq!(\"{true, 10/20}\", format!(\"{:?}\", Foo));\n         assert_eq!(\n-\"Foo {\n+\"{\n     true,\n     10/20\n }\",\n@@ -368,7 +368,7 @@ mod debug_set {\n \n         impl fmt::Debug for Foo {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-                fmt.debug_set(\"Foo\")\n+                fmt.debug_set()\n                     .entry(&true)\n                     .entry(&format_args!(\"{}/{}\", 10i32, 20i32))\n                     .finish()\n@@ -379,18 +379,18 @@ mod debug_set {\n \n         impl fmt::Debug for Bar {\n             fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-                fmt.debug_set(\"Bar\")\n+                fmt.debug_set()\n                     .entry(&Foo)\n                     .entry(&\"world\")\n                     .finish()\n             }\n         }\n \n-        assert_eq!(\"Bar { Foo { true, 10/20 }, \\\"world\\\" }\",\n+        assert_eq!(\"{{true, 10/20}, \\\"world\\\"}\",\n                    format!(\"{:?}\", Bar));\n         assert_eq!(\n-\"Bar {\n-    Foo {\n+\"{\n+    {\n         true,\n         10/20\n     },\n@@ -399,3 +399,100 @@ mod debug_set {\n                    format!(\"{:#?}\", Bar));\n     }\n }\n+\n+mod debug_list {\n+    use std::fmt;\n+\n+    #[test]\n+    fn test_empty() {\n+        struct Foo;\n+\n+        impl fmt::Debug for Foo {\n+            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+                fmt.debug_list().finish()\n+            }\n+        }\n+\n+        assert_eq!(\"[]\", format!(\"{:?}\", Foo));\n+        assert_eq!(\"[]\", format!(\"{:#?}\", Foo));\n+    }\n+\n+    #[test]\n+    fn test_single() {\n+        struct Foo;\n+\n+        impl fmt::Debug for Foo {\n+            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+                fmt.debug_list()\n+                    .entry(&true)\n+                    .finish()\n+            }\n+        }\n+\n+        assert_eq!(\"[true]\", format!(\"{:?}\", Foo));\n+        assert_eq!(\n+\"[\n+    true\n+]\",\n+                   format!(\"{:#?}\", Foo));\n+    }\n+\n+    #[test]\n+    fn test_multiple() {\n+        struct Foo;\n+\n+        impl fmt::Debug for Foo {\n+            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+                fmt.debug_list()\n+                    .entry(&true)\n+                    .entry(&format_args!(\"{}/{}\", 10i32, 20i32))\n+                    .finish()\n+            }\n+        }\n+\n+        assert_eq!(\"[true, 10/20]\", format!(\"{:?}\", Foo));\n+        assert_eq!(\n+\"[\n+    true,\n+    10/20\n+]\",\n+                   format!(\"{:#?}\", Foo));\n+    }\n+\n+    #[test]\n+    fn test_nested() {\n+        struct Foo;\n+\n+        impl fmt::Debug for Foo {\n+            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+                fmt.debug_list()\n+                    .entry(&true)\n+                    .entry(&format_args!(\"{}/{}\", 10i32, 20i32))\n+                    .finish()\n+            }\n+        }\n+\n+        struct Bar;\n+\n+        impl fmt::Debug for Bar {\n+            fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+                fmt.debug_list()\n+                    .entry(&Foo)\n+                    .entry(&\"world\")\n+                    .finish()\n+            }\n+        }\n+\n+        assert_eq!(\"[[true, 10/20], \\\"world\\\"]\",\n+                   format!(\"{:?}\", Bar));\n+        assert_eq!(\n+\"[\n+    [\n+        true,\n+        10/20\n+    ],\n+    \\\"world\\\"\n+]\",\n+                   format!(\"{:#?}\", Bar));\n+    }\n+}"}, {"sha": "fd62729cd8f2be12c8b6dce90a4060a457e0e6c0", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4037f2a368edd75c561bc6f3d8c6f0d644bc4180/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4037f2a368edd75c561bc6f3d8c6f0d644bc4180/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=4037f2a368edd75c561bc6f3d8c6f0d644bc4180", "patch": "@@ -1226,14 +1226,11 @@ impl<K, V, S> Debug for HashMap<K, V, S>\n     where K: Eq + Hash + Debug, V: Debug, S: HashState\n {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, \"{{\"));\n-\n-        for (i, (k, v)) in self.iter().enumerate() {\n-            if i != 0 { try!(write!(f, \", \")); }\n-            try!(write!(f, \"{:?}: {:?}\", *k, *v));\n+        let mut builder = f.debug_map();\n+        for (k, v) in self.iter() {\n+            builder = builder.entry(k, v);\n         }\n-\n-        write!(f, \"}}\")\n+        builder.finish()\n     }\n }\n "}, {"sha": "44c3d8262a7b10ef62270fd170cef55d1bdc8168", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4037f2a368edd75c561bc6f3d8c6f0d644bc4180/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4037f2a368edd75c561bc6f3d8c6f0d644bc4180/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=4037f2a368edd75c561bc6f3d8c6f0d644bc4180", "patch": "@@ -614,14 +614,11 @@ impl<T, S> fmt::Debug for HashSet<T, S>\n           S: HashState\n {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, \"{{\"));\n-\n-        for (i, x) in self.iter().enumerate() {\n-            if i != 0 { try!(write!(f, \", \")); }\n-            try!(write!(f, \"{:?}\", *x));\n+        let mut builder = f.debug_set();\n+        for x in self {\n+            builder = builder.entry(x);\n         }\n-\n-        write!(f, \"}}\")\n+        builder.finish()\n     }\n }\n "}, {"sha": "b7cb8f9ed50fdcbec680f17db933b23fca299ae4", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4037f2a368edd75c561bc6f3d8c6f0d644bc4180/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4037f2a368edd75c561bc6f3d8c6f0d644bc4180/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=4037f2a368edd75c561bc6f3d8c6f0d644bc4180", "patch": "@@ -128,6 +128,7 @@\n #![feature(into_cow)]\n #![feature(slice_patterns)]\n #![feature(std_misc)]\n+#![feature(debug_builders)]\n #![cfg_attr(test, feature(test, rustc_private, std_misc))]\n \n // Don't link to std. We are std."}]}