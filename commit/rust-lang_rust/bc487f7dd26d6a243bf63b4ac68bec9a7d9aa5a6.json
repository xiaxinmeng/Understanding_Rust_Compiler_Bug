{"sha": "bc487f7dd26d6a243bf63b4ac68bec9a7d9aa5a6", "node_id": "C_kwDOAAsO6NoAKGJjNDg3ZjdkZDI2ZDZhMjQzYmY2M2I0YWM2OGJlYzlhN2Q5YWE1YTY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-02T22:48:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-02T22:48:47Z"}, "message": "Rollup merge of #90417 - lcnr:stabilize-relaxed-struct-unsizing, r=wesleywiser\n\nstabilize `relaxed_struct_unsize`\n\ncloses #81793\n\nthe fcp is already complete.", "tree": {"sha": "c6cbddd716bce142f065028dd862420fc955cfbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6cbddd716bce142f065028dd862420fc955cfbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc487f7dd26d6a243bf63b4ac68bec9a7d9aa5a6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhgcBPCRBK7hj4Ov3rIwAAdnYIAJJO+KVSn9s22t/x0AUcLqqo\ne61EmNp1xgywsYbF5wnbUyCGFMKmln1pErPLwEAK8JlyjDeGNReF2UDps6AL9ywM\naNxQbI3sOLYtHBAQ5nhmkenqqAh8vCrM8x91ftIB2qZhW5ExIrigS13uiTtmLQ4J\n6BQEuWoFyCuadHA2KvyS1zvgPxUttAN/LKYaOlpPDjNryW1ikPMZmqr2MKQDU+l3\nSzOS6mFufdjSXGTr0P4IEdtUR42CI2J26YY2glF5N9BAR5t9l3JgPJoIVZOgOqZf\nn4v51OoEmhdnP3xbrIBtItE+uCBjCrtZF98vxHiVXJN2ZtLTnw7aZtv46RFO3wI=\n=32Lv\n-----END PGP SIGNATURE-----\n", "payload": "tree c6cbddd716bce142f065028dd862420fc955cfbf\nparent 40f01aaa56a591fd228d894cb8d1e679ca1293b3\nparent b40aa64e48836a8582fd949033342e5c1a20dae4\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1635893327 +0100\ncommitter GitHub <noreply@github.com> 1635893327 +0100\n\nRollup merge of #90417 - lcnr:stabilize-relaxed-struct-unsizing, r=wesleywiser\n\nstabilize `relaxed_struct_unsize`\n\ncloses #81793\n\nthe fcp is already complete.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc487f7dd26d6a243bf63b4ac68bec9a7d9aa5a6", "html_url": "https://github.com/rust-lang/rust/commit/bc487f7dd26d6a243bf63b4ac68bec9a7d9aa5a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc487f7dd26d6a243bf63b4ac68bec9a7d9aa5a6/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40f01aaa56a591fd228d894cb8d1e679ca1293b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/40f01aaa56a591fd228d894cb8d1e679ca1293b3", "html_url": "https://github.com/rust-lang/rust/commit/40f01aaa56a591fd228d894cb8d1e679ca1293b3"}, {"sha": "b40aa64e48836a8582fd949033342e5c1a20dae4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b40aa64e48836a8582fd949033342e5c1a20dae4", "html_url": "https://github.com/rust-lang/rust/commit/b40aa64e48836a8582fd949033342e5c1a20dae4"}], "stats": {"total": 82, "additions": 14, "deletions": 68}, "files": [{"sha": "941d957103c0cef98dd5e474ee99fd13caa5ba72", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc487f7dd26d6a243bf63b4ac68bec9a7d9aa5a6/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc487f7dd26d6a243bf63b4ac68bec9a7d9aa5a6/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=bc487f7dd26d6a243bf63b4ac68bec9a7d9aa5a6", "patch": "@@ -297,6 +297,8 @@ declare_features! (\n     (accepted, macro_attributes_in_derive_output, \"1.57.0\", Some(81119), None),\n     /// Allows panicking during const eval (producing compile-time errors).\n     (accepted, const_panic, \"1.57.0\", Some(51999), None),\n+    /// Lessens the requirements for structs to implement `Unsize`.\n+    (accepted, relaxed_struct_unsize, \"1.58.0\", Some(81793), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "16d4b26d9d0b455d8acd69731a3ca0b779127901", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc487f7dd26d6a243bf63b4ac68bec9a7d9aa5a6/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc487f7dd26d6a243bf63b4ac68bec9a7d9aa5a6/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=bc487f7dd26d6a243bf63b4ac68bec9a7d9aa5a6", "patch": "@@ -589,9 +589,6 @@ declare_features! (\n     /// Allows `extern \"C-cmse-nonsecure-call\" fn()`.\n     (active, abi_c_cmse_nonsecure_call, \"1.51.0\", Some(81391), None),\n \n-    /// Lessens the requirements for structs to implement `Unsize`.\n-    (active, relaxed_struct_unsize, \"1.51.0\", Some(81793), None),\n-\n     /// Allows associated types in inherent impls.\n     (incomplete, inherent_associated_types, \"1.52.0\", Some(8995), None),\n "}, {"sha": "079828a60fce22c9bb8b79896ec5fb7769554cc2", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 12, "deletions": 40, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/bc487f7dd26d6a243bf63b4ac68bec9a7d9aa5a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc487f7dd26d6a243bf63b4ac68bec9a7d9aa5a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=bc487f7dd26d6a243bf63b4ac68bec9a7d9aa5a6", "patch": "@@ -948,52 +948,24 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 let tail_field_ty = tcx.type_of(tail_field.did);\n \n                 let mut unsizing_params = GrowableBitSet::new_empty();\n-                if tcx.features().relaxed_struct_unsize {\n-                    for arg in tail_field_ty.walk(tcx) {\n-                        if let Some(i) = maybe_unsizing_param_idx(arg) {\n-                            unsizing_params.insert(i);\n-                        }\n-                    }\n-\n-                    // Ensure none of the other fields mention the parameters used\n-                    // in unsizing.\n-                    for field in prefix_fields {\n-                        for arg in tcx.type_of(field.did).walk(tcx) {\n-                            if let Some(i) = maybe_unsizing_param_idx(arg) {\n-                                unsizing_params.remove(i);\n-                            }\n-                        }\n+                for arg in tail_field_ty.walk(tcx) {\n+                    if let Some(i) = maybe_unsizing_param_idx(arg) {\n+                        unsizing_params.insert(i);\n                     }\n+                }\n \n-                    if unsizing_params.is_empty() {\n-                        return Err(Unimplemented);\n-                    }\n-                } else {\n-                    let mut found = false;\n-                    for arg in tail_field_ty.walk(tcx) {\n+                // Ensure none of the other fields mention the parameters used\n+                // in unsizing.\n+                for field in prefix_fields {\n+                    for arg in tcx.type_of(field.did).walk(tcx) {\n                         if let Some(i) = maybe_unsizing_param_idx(arg) {\n-                            unsizing_params.insert(i);\n-                            found = true;\n+                            unsizing_params.remove(i);\n                         }\n                     }\n-                    if !found {\n-                        return Err(Unimplemented);\n-                    }\n+                }\n \n-                    // Ensure none of the other fields mention the parameters used\n-                    // in unsizing.\n-                    // FIXME(eddyb) cache this (including computing `unsizing_params`)\n-                    // by putting it in a query; it would only need the `DefId` as it\n-                    // looks at declared field types, not anything substituted.\n-                    for field in prefix_fields {\n-                        for arg in tcx.type_of(field.did).walk(tcx) {\n-                            if let Some(i) = maybe_unsizing_param_idx(arg) {\n-                                if unsizing_params.contains(i) {\n-                                    return Err(Unimplemented);\n-                                }\n-                            }\n-                        }\n-                    }\n+                if unsizing_params.is_empty() {\n+                    return Err(Unimplemented);\n                 }\n \n                 // Extract `TailField<T>` and `TailField<U>` from `Struct<T>` and `Struct<U>`."}, {"sha": "0cfd0a0b9784c9d2b7b736825c0a607aa4c23b07", "filename": "src/test/ui/feature-gates/feature-gate-relaxed_struct_unsize.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/40f01aaa56a591fd228d894cb8d1e679ca1293b3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-relaxed_struct_unsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40f01aaa56a591fd228d894cb8d1e679ca1293b3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-relaxed_struct_unsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-relaxed_struct_unsize.rs?ref=40f01aaa56a591fd228d894cb8d1e679ca1293b3", "patch": "@@ -1,10 +0,0 @@\n-// Test that we allow unsizing even if there is an unchanged param in the\n-// field getting unsized.\n-struct A<T, U: ?Sized + 'static>(T, B<T, U>);\n-struct B<T, U: ?Sized>(T, U);\n-\n-fn main() {\n-    let x: A<[u32; 1], [u32; 1]> = A([0; 1], B([0; 1], [0; 1]));\n-    let y: &A<[u32; 1], [u32]> = &x; //~ ERROR mismatched types\n-    assert_eq!(y.1.1.len(), 1);\n-}"}, {"sha": "f62def47726f92c4e1c5bdccbbd5efc0664428bc", "filename": "src/test/ui/feature-gates/feature-gate-relaxed_struct_unsize.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/40f01aaa56a591fd228d894cb8d1e679ca1293b3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-relaxed_struct_unsize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40f01aaa56a591fd228d894cb8d1e679ca1293b3/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-relaxed_struct_unsize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-relaxed_struct_unsize.stderr?ref=40f01aaa56a591fd228d894cb8d1e679ca1293b3", "patch": "@@ -1,14 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/feature-gate-relaxed_struct_unsize.rs:8:34\n-   |\n-LL |     let y: &A<[u32; 1], [u32]> = &x;\n-   |            -------------------   ^^ expected slice `[u32]`, found array `[u32; 1]`\n-   |            |\n-   |            expected due to this\n-   |\n-   = note: expected reference `&A<[u32; 1], [u32]>`\n-              found reference `&A<[u32; 1], [u32; 1]>`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "93c7af68ac388e145714fe11c473d29eb0b5b16b", "filename": "src/test/ui/unsized/unchanged-param.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bc487f7dd26d6a243bf63b4ac68bec9a7d9aa5a6/src%2Ftest%2Fui%2Funsized%2Funchanged-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc487f7dd26d6a243bf63b4ac68bec9a7d9aa5a6/src%2Ftest%2Fui%2Funsized%2Funchanged-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funchanged-param.rs?ref=bc487f7dd26d6a243bf63b4ac68bec9a7d9aa5a6", "patch": "@@ -1,4 +1,3 @@\n-#![feature(relaxed_struct_unsize)]\n // run-pass\n // Test that we allow unsizing even if there is an unchanged param in the\n // field getting unsized."}]}