{"sha": "c4e2e36e4c3cdaf5243a4d481221804e2d71bc8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ZTJlMzZlNGMzY2RhZjUyNDNhNGQ0ODEyMjE4MDRlMmQ3MWJjOGU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-07-14T07:24:29Z"}, "committer": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-07-14T07:24:29Z"}, "message": "Merge #1528\n\n1528: More resolution modules with attribute path r=matklad a=andreevlex\n\n#1211\n\nCo-authored-by: Alexander Andreev <andreevlex.as@gmail.com>", "tree": {"sha": "3f000814aa05a6d5c9adec1c7058f57691ff087f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f000814aa05a6d5c9adec1c7058f57691ff087f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4e2e36e4c3cdaf5243a4d481221804e2d71bc8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4e2e36e4c3cdaf5243a4d481221804e2d71bc8e", "html_url": "https://github.com/rust-lang/rust/commit/c4e2e36e4c3cdaf5243a4d481221804e2d71bc8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4e2e36e4c3cdaf5243a4d481221804e2d71bc8e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "f1bfa8fc727356e398ad519a58c63974e6ff04c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1bfa8fc727356e398ad519a58c63974e6ff04c5", "html_url": "https://github.com/rust-lang/rust/commit/f1bfa8fc727356e398ad519a58c63974e6ff04c5"}, {"sha": "9c75f30272d8c520089a9937544bb77423b52a5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c75f30272d8c520089a9937544bb77423b52a5c", "html_url": "https://github.com/rust-lang/rust/commit/9c75f30272d8c520089a9937544bb77423b52a5c"}], "stats": {"total": 545, "additions": 534, "deletions": 11}, "files": [{"sha": "7f765caf36ad4e2c4072cf1dd919879e716398a2", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c4e2e36e4c3cdaf5243a4d481221804e2d71bc8e/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e2e36e4c3cdaf5243a4d481221804e2d71bc8e/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=c4e2e36e4c3cdaf5243a4d481221804e2d71bc8e", "patch": "@@ -1,3 +1,5 @@\n+use std::borrow::Cow;\n+\n use arrayvec::ArrayVec;\n use ra_db::FileId;\n use ra_syntax::{ast, SmolStr};\n@@ -84,7 +86,7 @@ struct DefCollector<DB> {\n     global_macro_scope: FxHashMap<Name, MacroDefId>,\n \n     /// Some macro use `$tt:tt which mean we have to handle the macro perfectly\n-    /// To prevent stackoverflow, we add a deep counter here for prevent that.\n+    /// To prevent stack overflow, we add a deep counter here for prevent that.\n     macro_stack_monitor: MacroStackMonitor,\n }\n \n@@ -649,7 +651,8 @@ fn resolve_submodule(\n     let file_dir_mod = dir_path.join(format!(\"{}/{}.rs\", mod_name, name));\n     let mut candidates = ArrayVec::<[_; 3]>::new();\n     let file_attr_mod = attr_path.map(|file_path| {\n-        let file_attr_mod = dir_path.join(file_path.to_string());\n+        let file_path = normalize_attribute_path(file_path);\n+        let file_attr_mod = dir_path.join(file_path.as_ref()).normalize();\n         candidates.push(file_attr_mod.clone());\n \n         file_attr_mod\n@@ -675,6 +678,21 @@ fn resolve_submodule(\n     }\n }\n \n+fn normalize_attribute_path(file_path: &SmolStr) -> Cow<str> {\n+    let current_dir = \"./\";\n+    let windows_path_separator = r#\"\\\"#;\n+    let current_dir_normalize = if file_path.starts_with(current_dir) {\n+        &file_path[current_dir.len()..]\n+    } else {\n+        file_path.as_str()\n+    };\n+    if current_dir_normalize.contains(windows_path_separator) {\n+        Cow::Owned(current_dir_normalize.replace(windows_path_separator, \"/\"))\n+    } else {\n+        Cow::Borrowed(current_dir_normalize)\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use ra_db::SourceDatabase;"}, {"sha": "d714a3276acb0e6cf934b8f1bcbbaaae19bad231", "filename": "crates/ra_hir/src/nameres/tests/mods.rs", "status": "modified", "additions": 514, "deletions": 9, "changes": 523, "blob_url": "https://github.com/rust-lang/rust/blob/c4e2e36e4c3cdaf5243a4d481221804e2d71bc8e/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e2e36e4c3cdaf5243a4d481221804e2d71bc8e/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmods.rs?ref=c4e2e36e4c3cdaf5243a4d481221804e2d71bc8e", "patch": "@@ -80,15 +80,15 @@ fn module_resolution_works_for_raw_modules() {\n #[test]\n fn module_resolution_decl_path() {\n     let map = def_map_with_crate_graph(\n-        \"\n+        r###\"\n         //- /library.rs\n-        #[path = \\\"bar/baz/foo.rs\\\"]\n+        #[path = \"bar/baz/foo.rs\"]\n         mod foo;\n         use self::foo::Bar;\n \n         //- /bar/baz/foo.rs\n         pub struct Bar;\n-        \",\n+        \"###,\n         crate_graph! {\n             \"library\": (\"/library.rs\", []),\n         },\n@@ -107,19 +107,19 @@ fn module_resolution_decl_path() {\n #[test]\n fn module_resolution_module_with_path_in_mod_rs() {\n     let map = def_map_with_crate_graph(\n-        \"\n+        r###\"\n         //- /main.rs\n         mod foo;\n         \n         //- /foo/mod.rs\n-        #[path = \\\"baz.rs\\\"]\n+        #[path = \"baz.rs\"]\n         pub mod bar;\n \n         use self::bar::Baz;\n \n         //- /foo/baz.rs\n         pub struct Baz;\n-        \",\n+        \"###,\n         crate_graph! {\n             \"main\": (\"/main.rs\", []),\n         },\n@@ -141,19 +141,19 @@ fn module_resolution_module_with_path_in_mod_rs() {\n #[test]\n fn module_resolution_module_with_path_non_crate_root() {\n     let map = def_map_with_crate_graph(\n-        \"\n+        r###\"\n         //- /main.rs\n         mod foo;\n         \n         //- /foo.rs\n-        #[path = \\\"baz.rs\\\"]\n+        #[path = \"baz.rs\"]\n         pub mod bar;\n \n         use self::bar::Baz;\n \n         //- /baz.rs\n         pub struct Baz;\n-        \",\n+        \"###,\n         crate_graph! {\n             \"main\": (\"/main.rs\", []),\n         },\n@@ -172,6 +172,511 @@ fn module_resolution_module_with_path_non_crate_root() {\n     \"###);\n }\n \n+#[test]\n+fn module_resolution_module_decl_path_super() {\n+    let map = def_map_with_crate_graph(\n+        r###\"\n+        //- /main.rs\n+        #[path = \"bar/baz/module.rs\"]\n+        mod foo;\n+        pub struct Baz;\n+\n+        //- /bar/baz/module.rs\n+        use super::Baz;\n+        \"###,\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eeBaz: t v\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+#[test]\n+fn module_resolution_explicit_path_mod_rs() {\n+    let map = def_map_with_crate_graph(\n+        r###\"\n+        //- /main.rs\n+        #[path = \"module/mod.rs\"]\n+        mod foo;\n+\n+        //- /module/mod.rs\n+        pub struct Baz;\n+        \"###,\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+#[test]\n+fn module_resolution_relative_path() {\n+    let map = def_map_with_crate_graph(\n+        r###\"\n+        //- /main.rs\n+        mod foo;\n+\n+        //- /foo.rs\n+        #[path = \"./sub.rs\"]\n+        pub mod foo_bar;\n+\n+        //- /sub.rs\n+        pub struct Baz;\n+        \"###,\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eefoo_bar: t\n+        \u22ee\n+        \u22eecrate::foo::foo_bar\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+#[test]\n+fn module_resolution_relative_path_2() {\n+    let map = def_map_with_crate_graph(\n+        r###\"\n+        //- /main.rs\n+        mod foo;\n+\n+        //- /foo/mod.rs\n+        #[path=\"../sub.rs\"]\n+        pub mod foo_bar;\n+\n+        //- /sub.rs\n+        pub struct Baz;\n+        \"###,\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eefoo_bar: t\n+        \u22ee\n+        \u22eecrate::foo::foo_bar\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+#[test]\n+fn module_resolution_explicit_path_mod_rs_2() {\n+    let map = def_map_with_crate_graph(\n+        r###\"\n+        //- /main.rs\n+        #[path = \"module/bar/mod.rs\"]\n+        mod foo;\n+\n+        //- /module/bar/mod.rs\n+        pub struct Baz;\n+        \"###,\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+#[test]\n+fn module_resolution_explicit_path_mod_rs_with_win_separator() {\n+    let map = def_map_with_crate_graph(\n+        r###\"\n+        //- /main.rs\n+        #[path = \"module\\bar\\mod.rs\"]\n+        mod foo;\n+\n+        //- /module/bar/mod.rs\n+        pub struct Baz;\n+        \"###,\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+// FIXME: issue #1510. not support out-of-line modules inside inline.\n+#[test]\n+#[ignore]\n+fn module_resolution_decl_inside_inline_module() {\n+    let map = def_map_with_crate_graph(\n+        r###\"\n+        //- /main.rs\n+        #[path = \"models\"]\n+        mod foo {\n+            mod bar;\n+        }\n+\n+        //- /models/bar.rs\n+        pub struct Baz;\n+        \"###,\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eebar: t\n+        \u22ee\n+        \u22eecrate::foo::bar\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+// FIXME: issue #1510. not support out-of-line modules inside inline.\n+#[test]\n+#[ignore]\n+fn module_resolution_decl_inside_inline_module_2() {\n+    let map = def_map_with_crate_graph(\n+        r###\"\n+        //- /main.rs\n+        #[path = \"models/db\"]\n+        mod foo {\n+            mod bar;\n+        }\n+\n+        //- /models/db/bar.rs\n+        pub struct Baz;\n+        \"###,\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eebar: t\n+        \u22ee\n+        \u22eecrate::foo::bar\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+// FIXME: issue #1510. not support out-of-line modules inside inline.\n+#[test]\n+#[ignore]\n+fn module_resolution_decl_inside_inline_module_3() {\n+    let map = def_map_with_crate_graph(\n+        r###\"\n+        //- /main.rs\n+        #[path = \"models/db\"]\n+        mod foo {\n+            #[path = \"users.rs\"]\n+            mod bar;\n+        }\n+\n+        //- /models/db/users.rs\n+        pub struct Baz;\n+        \"###,\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eebar: t\n+        \u22ee\n+        \u22eecrate::foo::bar\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+// FIXME: issue #1510. not support out-of-line modules inside inline.\n+#[test]\n+#[ignore]\n+fn module_resolution_decl_inside_inline_module_empty_path() {\n+    let map = def_map_with_crate_graph(\n+        r###\"\n+        //- /main.rs\n+        #[path = \"\"]\n+        mod foo {\n+            #[path = \"users.rs\"]\n+            mod bar;\n+        }\n+\n+        //- /users.rs\n+        pub struct Baz;\n+        \"###,\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eebar: t\n+        \u22ee\n+        \u22eecrate::foo::bar\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+#[test]\n+fn module_resolution_decl_empty_path() {\n+    let map = def_map_with_crate_graph(\n+        r###\"\n+        //- /main.rs\n+        #[path = \"\"]\n+        mod foo;\n+\n+        //- /foo.rs\n+        pub struct Baz;\n+        \"###,\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+// FIXME: issue #1510. not support out-of-line modules inside inline.\n+#[test]\n+#[ignore]\n+fn module_resolution_decl_inside_inline_module_relative_path() {\n+    let map = def_map_with_crate_graph(\n+        r###\"\n+        //- /main.rs\n+        #[path = \"./models\"]\n+        mod foo {\n+            mod bar;\n+        }\n+\n+        //- /models/bar.rs\n+        pub struct Baz;\n+        \"###,\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eebar: t\n+        \u22ee\n+        \u22eecrate::foo::bar\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+// FIXME: issue #1510. not support out-of-line modules inside inline.\n+#[test]\n+#[ignore]\n+fn module_resolution_decl_inside_inline_module_in_crate_root() {\n+    let map = def_map_with_crate_graph(\n+        r###\"\n+        //- /main.rs\n+        mod foo {\n+            #[path = \"baz.rs\"]\n+            mod bar;\n+        }\n+        use self::foo::bar::Baz;\n+\n+        //- /foo/baz.rs\n+        pub struct Baz;\n+        \"###,\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eeBaz: t v\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eebar: t\n+        \u22ee\n+        \u22eecrate::foo::bar\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+// FIXME: issue #1510. not support out-of-line modules inside inline.\n+#[test]\n+#[ignore]\n+fn module_resolution_decl_inside_inline_module_in_mod_rs() {\n+    let map = def_map_with_crate_graph(\n+        r###\"\n+        //- /main.rs\n+        mod foo;\n+\n+        //- /foo/mod.rs\n+        mod bar {\n+            #[path = \"qwe.rs\"]\n+            pub mod baz;\n+        }\n+        use self::bar::baz::Baz;\n+\n+        //- /foo/bar/qwe.rs\n+        pub struct Baz;\n+        \"###,\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eeBaz: t v\n+        \u22eebar: t\n+        \u22ee\n+        \u22eecrate::foo::bar\n+        \u22eebaz: t\n+        \u22ee\n+        \u22eecrate::foo::bar::baz\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+// FIXME: issue #1510. not support out-of-line modules inside inline.\n+#[test]\n+#[ignore]\n+fn module_resolution_decl_inside_inline_module_in_non_crate_root() {\n+    let map = def_map_with_crate_graph(\n+        r###\"\n+        //- /main.rs\n+        mod foo;\n+\n+        //- /foo.rs\n+        mod bar {\n+            #[path = \"qwe.rs\"]\n+            pub mod baz;\n+        }\n+        use self::bar::baz::Baz;\n+\n+        //- /foo/bar/qwe.rs\n+        pub struct Baz;\n+        \"###,\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eeBaz: t v\n+        \u22eebar: t\n+        \u22ee\n+        \u22eecrate::foo::bar\n+        \u22eebaz: t\n+        \u22ee\n+        \u22eecrate::foo::bar::baz\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+// FIXME: issue #1510. not support out-of-line modules inside inline.\n+#[test]\n+#[ignore]\n+fn module_resolution_decl_inside_inline_module_in_non_crate_root_2() {\n+    let map = def_map_with_crate_graph(\n+        r###\"\n+        //- /main.rs\n+        mod foo;\n+\n+        //- /foo.rs\n+        #[path = \"bar\"]\n+        mod bar {\n+            pub mod baz;\n+        }\n+        use self::bar::baz::Baz;\n+\n+        //- /bar/baz.rs\n+        pub struct Baz;\n+        \"###,\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eeBaz: t v\n+        \u22eebar: t\n+        \u22ee\n+        \u22eecrate::foo::bar\n+        \u22eebaz: t\n+        \u22ee\n+        \u22eecrate::foo::bar::baz\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n #[test]\n fn unresolved_module_diagnostics() {\n     let diagnostics = MockDatabase::with_files("}]}