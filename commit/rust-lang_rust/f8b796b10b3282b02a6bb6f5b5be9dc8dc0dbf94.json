{"sha": "f8b796b10b3282b02a6bb6f5b5be9dc8dc0dbf94", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4Yjc5NmIxMGIzMjgyYjAyYTZiYjZmNWI1YmU5ZGM4ZGMwZGJmOTQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2020-04-20T13:01:59Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2020-04-20T13:01:59Z"}, "message": "Add error message for using type parameter as the type of a const parameter", "tree": {"sha": "d68b9c5c8ede05472801221634d81bc0dc2a1a74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d68b9c5c8ede05472801221634d81bc0dc2a1a74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8b796b10b3282b02a6bb6f5b5be9dc8dc0dbf94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8b796b10b3282b02a6bb6f5b5be9dc8dc0dbf94", "html_url": "https://github.com/rust-lang/rust/commit/f8b796b10b3282b02a6bb6f5b5be9dc8dc0dbf94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8b796b10b3282b02a6bb6f5b5be9dc8dc0dbf94/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3eea7b31ee0f1afdfcbb2ece8a5445655706cd9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eea7b31ee0f1afdfcbb2ece8a5445655706cd9b", "html_url": "https://github.com/rust-lang/rust/commit/3eea7b31ee0f1afdfcbb2ece8a5445655706cd9b"}], "stats": {"total": 68, "additions": 49, "deletions": 19}, "files": [{"sha": "5ebf86ef101261d49111bcfc3bc6f94918b0aace", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 39, "deletions": 13, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f8b796b10b3282b02a6bb6f5b5be9dc8dc0dbf94/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b796b10b3282b02a6bb6f5b5be9dc8dc0dbf94/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=f8b796b10b3282b02a6bb6f5b5be9dc8dc0dbf94", "patch": "@@ -342,19 +342,45 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 if traits::search_for_structural_match_violation(param.hir_id, param.span, tcx, ty)\n                     .is_some()\n                 {\n-                    struct_span_err!(\n-                        tcx.sess,\n-                        hir_ty.span,\n-                        E0741,\n-                        \"`{}` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the \\\n-                         type of a const parameter\",\n-                        ty,\n-                    )\n-                    .span_label(\n-                        hir_ty.span,\n-                        format!(\"`{}` doesn't derive both `PartialEq` and `Eq`\", ty),\n-                    )\n-                    .emit();\n+                    // We use the same error code in both branches, because this is really the same\n+                    // issue: we just special-case the message for type parameters to make it\n+                    // clearer.\n+                    if let ty::Param(_) = ty.peel_refs().kind {\n+                        // Const parameters may not have type parameters as their types,\n+                        // because we cannot be sure that the type parameter derives `PartialEq`\n+                        // and `Eq` (just implementing them is not enough for `structural_match`).\n+                        struct_span_err!(\n+                            tcx.sess,\n+                            hir_ty.span,\n+                            E0741,\n+                            \"`{}` is not guaranteed to `#[derive(PartialEq, Eq)]`, so may not be \\\n+                             used as the type of a const parameter\",\n+                            ty,\n+                        )\n+                        .span_label(\n+                            hir_ty.span,\n+                            format!(\"`{}` may not derive both `PartialEq` and `Eq`\", ty),\n+                        )\n+                        .note(\n+                            \"it is not currently possible to use a type parameter as the type of a \\\n+                             const parameter\",\n+                        )\n+                        .emit();\n+                    } else {\n+                        struct_span_err!(\n+                            tcx.sess,\n+                            hir_ty.span,\n+                            E0741,\n+                            \"`{}` must be annotated with `#[derive(PartialEq, Eq)]` to be used as \\\n+                             the type of a const parameter\",\n+                            ty,\n+                        )\n+                        .span_label(\n+                            hir_ty.span,\n+                            format!(\"`{}` doesn't derive both `PartialEq` and `Eq`\", ty),\n+                        )\n+                        .emit();\n+                    }\n                 }\n                 ty\n             }"}, {"sha": "86ab8075896aa6c51fc503bd809f6d989ed7ebfa", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param-ungated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8b796b10b3282b02a6bb6f5b5be9dc8dc0dbf94/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b796b10b3282b02a6bb6f5b5be9dc8dc0dbf94/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.rs?ref=f8b796b10b3282b02a6bb6f5b5be9dc8dc0dbf94", "patch": "@@ -1,6 +1,6 @@\n use std::marker::PhantomData;\n \n struct B<T, const N: T>(PhantomData<[T; N]>); //~ ERROR const generics are unstable\n-//~^ ERROR `T` must be annotated with `#[derive(PartialEq, Eq)]`\n+//~^ ERROR `T` is not guaranteed to `#[derive(PartialEq, Eq)]`\n \n fn main() {}"}, {"sha": "92a7edf96bccb504f52437e35a89fd5b9c0a24c1", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param-ungated.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8b796b10b3282b02a6bb6f5b5be9dc8dc0dbf94/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8b796b10b3282b02a6bb6f5b5be9dc8dc0dbf94/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr?ref=f8b796b10b3282b02a6bb6f5b5be9dc8dc0dbf94", "patch": "@@ -7,11 +7,13 @@ LL | struct B<T, const N: T>(PhantomData<[T; N]>);\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n-error[E0741]: `T` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n+error[E0741]: `T` is not guaranteed to `#[derive(PartialEq, Eq)]`, so may not be used as the type of a const parameter\n   --> $DIR/const-param-type-depends-on-type-param-ungated.rs:3:22\n    |\n LL | struct B<T, const N: T>(PhantomData<[T; N]>);\n-   |                      ^ `T` doesn't derive both `PartialEq` and `Eq`\n+   |                      ^ `T` may not derive both `PartialEq` and `Eq`\n+   |\n+   = note: it is not currently possible to use a type parameter as the type of a const parameter\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7468020366cecb6fb4493d808cc777483c00d565", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8b796b10b3282b02a6bb6f5b5be9dc8dc0dbf94/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b796b10b3282b02a6bb6f5b5be9dc8dc0dbf94/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs?ref=f8b796b10b3282b02a6bb6f5b5be9dc8dc0dbf94", "patch": "@@ -7,6 +7,6 @@\n // details.\n \n pub struct Dependent<T, const X: T>([(); X]);\n-//~^ ERROR `T` must be annotated with `#[derive(PartialEq, Eq)]`\n+//~^ ERROR `T` is not guaranteed to `#[derive(PartialEq, Eq)]`\n \n fn main() {}"}, {"sha": "9f20b06813e378361f7f6d79102ffbe8f5368b84", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8b796b10b3282b02a6bb6f5b5be9dc8dc0dbf94/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8b796b10b3282b02a6bb6f5b5be9dc8dc0dbf94/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr?ref=f8b796b10b3282b02a6bb6f5b5be9dc8dc0dbf94", "patch": "@@ -6,11 +6,13 @@ LL | #![feature(const_generics)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0741]: `T` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n+error[E0741]: `T` is not guaranteed to `#[derive(PartialEq, Eq)]`, so may not be used as the type of a const parameter\n   --> $DIR/const-param-type-depends-on-type-param.rs:9:34\n    |\n LL | pub struct Dependent<T, const X: T>([(); X]);\n-   |                                  ^ `T` doesn't derive both `PartialEq` and `Eq`\n+   |                                  ^ `T` may not derive both `PartialEq` and `Eq`\n+   |\n+   = note: it is not currently possible to use a type parameter as the type of a const parameter\n \n error: aborting due to previous error; 1 warning emitted\n "}]}