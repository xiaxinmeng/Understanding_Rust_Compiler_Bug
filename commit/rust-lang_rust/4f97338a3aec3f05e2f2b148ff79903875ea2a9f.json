{"sha": "4f97338a3aec3f05e2f2b148ff79903875ea2a9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmOTczMzhhM2FlYzNmMDVlMmYyYjE0OGZmNzk5MDM4NzVlYTJhOWY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-01-28T00:10:04Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-01-31T19:42:27Z"}, "message": "Some changes to save-analysis to cope with errors", "tree": {"sha": "48d2af974799e439b42c819fc58bd16a092fa39e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48d2af974799e439b42c819fc58bd16a092fa39e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f97338a3aec3f05e2f2b148ff79903875ea2a9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f97338a3aec3f05e2f2b148ff79903875ea2a9f", "html_url": "https://github.com/rust-lang/rust/commit/4f97338a3aec3f05e2f2b148ff79903875ea2a9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f97338a3aec3f05e2f2b148ff79903875ea2a9f/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bd782c4ca40482937bb5253a2d3e96548ab5021", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bd782c4ca40482937bb5253a2d3e96548ab5021", "html_url": "https://github.com/rust-lang/rust/commit/6bd782c4ca40482937bb5253a2d3e96548ab5021"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "3a57474c30322435157d69761469714f2a9ad316", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f97338a3aec3f05e2f2b148ff79903875ea2a9f/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f97338a3aec3f05e2f2b148ff79903875ea2a9f/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=4f97338a3aec3f05e2f2b148ff79903875ea2a9f", "patch": "@@ -1915,6 +1915,16 @@ impl<'tcx> ctxt<'tcx> {\n         })\n     }\n \n+    pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr) -> Option<Ty<'tcx>> {\n+        self.expr_ty_opt(expr).map(|t| t.adjust(self,\n+                                                expr.span,\n+                                                expr.id,\n+                                                self.tables.borrow().adjustments.get(&expr.id),\n+                                                |method_call| {\n+            self.tables.borrow().method_map.get(&method_call).map(|method| method.ty)\n+        }))\n+    }\n+\n     pub fn expr_span(&self, id: NodeId) -> Span {\n         match self.map.find(id) {\n             Some(ast_map::NodeExpr(e)) => {"}, {"sha": "21d536667e5a0425f10283e925ededf4eca3fecc", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f97338a3aec3f05e2f2b148ff79903875ea2a9f/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f97338a3aec3f05e2f2b148ff79903875ea2a9f/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=4f97338a3aec3f05e2f2b148ff79903875ea2a9f", "patch": "@@ -801,7 +801,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n                 \"<mutable>\".to_string()\n             };\n             let types = self.tcx.node_types();\n-            let typ = types.get(&id).unwrap().to_string();\n+            let typ = types.get(&id).map(|t| t.to_string()).unwrap_or(String::new());\n             // Get the span only for the name of the variable (I hope the path\n             // is only ever a variable name, but who knows?).\n             let sub_span = self.span.span_for_last_ident(p.span);"}, {"sha": "05b012d55a07e85586263e196264df454f46e42e", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4f97338a3aec3f05e2f2b148ff79903875ea2a9f/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f97338a3aec3f05e2f2b148ff79903875ea2a9f/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=4f97338a3aec3f05e2f2b148ff79903875ea2a9f", "patch": "@@ -463,11 +463,15 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n     }\n \n     pub fn get_expr_data(&self, expr: &ast::Expr) -> Option<Data> {\n+        let hir_node = lowering::lower_expr(self.lcx, expr);\n+        let ty = self.tcx.expr_ty_adjusted_opt(&hir_node);\n+        if ty.is_none() || ty.unwrap().sty == ty::TyError {\n+            return None;\n+        }\n         match expr.node {\n             ast::ExprField(ref sub_ex, ident) => {\n                 let hir_node = lowering::lower_expr(self.lcx, sub_ex);\n-                let ty = &self.tcx.expr_ty_adjusted(&hir_node).sty;\n-                match *ty {\n+                match self.tcx.expr_ty_adjusted(&hir_node).sty {\n                     ty::TyStruct(def, _) => {\n                         let f = def.struct_variant().field_named(ident.node.name);\n                         let sub_span = self.span_utils.span_for_last_ident(expr.span);\n@@ -487,8 +491,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             }\n             ast::ExprStruct(ref path, _, _) => {\n                 let hir_node = lowering::lower_expr(self.lcx, expr);\n-                let ty = &self.tcx.expr_ty_adjusted(&hir_node).sty;\n-                match *ty {\n+                match self.tcx.expr_ty_adjusted(&hir_node).sty {\n                     ty::TyStruct(def, _) => {\n                         let sub_span = self.span_utils.span_for_last_ident(path.span);\n                         filter!(self.span_utils, sub_span, path.span, None);"}]}