{"sha": "6e4b2b3ae79770c7ccfcdbfc90dc34fe47ec5f09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlNGIyYjNhZTc5NzcwYzdjY2ZjZGJmYzkwZGMzNGZlNDdlYzVmMDk=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2018-12-03T22:37:06Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2018-12-14T17:14:22Z"}, "message": "fix stupid bug", "tree": {"sha": "a74ba4d5eae62500eb3d754109c51e9f05de5c4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a74ba4d5eae62500eb3d754109c51e9f05de5c4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e4b2b3ae79770c7ccfcdbfc90dc34fe47ec5f09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e4b2b3ae79770c7ccfcdbfc90dc34fe47ec5f09", "html_url": "https://github.com/rust-lang/rust/commit/6e4b2b3ae79770c7ccfcdbfc90dc34fe47ec5f09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e4b2b3ae79770c7ccfcdbfc90dc34fe47ec5f09/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "760639635facb6c9a0926ac9278bcba71880b0b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/760639635facb6c9a0926ac9278bcba71880b0b3", "html_url": "https://github.com/rust-lang/rust/commit/760639635facb6c9a0926ac9278bcba71880b0b3"}], "stats": {"total": 86, "additions": 48, "deletions": 38}, "files": [{"sha": "c273c8f64567756a3e84c6410bde3752f95c653a", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 48, "deletions": 38, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/6e4b2b3ae79770c7ccfcdbfc90dc34fe47ec5f09/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e4b2b3ae79770c7ccfcdbfc90dc34fe47ec5f09/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=6e4b2b3ae79770c7ccfcdbfc90dc34fe47ec5f09", "patch": "@@ -94,7 +94,9 @@ impl<'a, 'tcx> InherentOverlapChecker<'a, 'tcx> {\n \n         for (i, &impl1_def_id) in impls.iter().enumerate() {\n             for &impl2_def_id in &impls[(i + 1)..] {\n-                let mut used_to_be_allowed = traits::overlapping_impls(\n+                // First, check if the impl was forbidden under the\n+                // old rules. In that case, just have an error.\n+                let used_to_be_allowed = traits::overlapping_impls(\n                     self.tcx,\n                     impl1_def_id,\n                     impl2_def_id,\n@@ -105,52 +107,60 @@ impl<'a, 'tcx> InherentOverlapChecker<'a, 'tcx> {\n                             impl1_def_id,\n                             impl2_def_id,\n                             overlap,\n-                            Some(FutureCompatOverlapErrorKind::Issue43355),\n+                            None,\n                         );\n                         false\n                     },\n                     || true,\n                 );\n \n-                if used_to_be_allowed {\n-                    used_to_be_allowed = traits::overlapping_impls(\n-                        self.tcx,\n-                        impl1_def_id,\n-                        impl2_def_id,\n-                        IntercrateMode::Fixed,\n-                        TraitObjectMode::NoSquash,\n-                        |overlap| {\n-                            self.check_for_common_items_in_impls(\n-                                impl1_def_id,\n-                                impl2_def_id,\n-                                overlap,\n-                                None,\n-                            );\n-                            false\n-                        },\n-                        || true,\n-                    );\n+                if !used_to_be_allowed {\n+                    continue;\n                 }\n \n-                if used_to_be_allowed {\n-                    traits::overlapping_impls(\n-                        self.tcx,\n-                        impl1_def_id,\n-                        impl2_def_id,\n-                        IntercrateMode::Fixed,\n-                        TraitObjectMode::SquashAutoTraitsIssue33140,\n-                        |overlap| {\n-                            self.check_for_common_items_in_impls(\n-                                impl1_def_id,\n-                                impl2_def_id,\n-                                overlap,\n-                                Some(FutureCompatOverlapErrorKind::Issue33140),\n-                            );\n-                            false\n-                        },\n-                        || true,\n-                    );\n+                // Then, check if the impl was forbidden under only\n+                // #43355. In that case, emit an #43355 error.\n+                let used_to_be_allowed = traits::overlapping_impls(\n+                    self.tcx,\n+                    impl1_def_id,\n+                    impl2_def_id,\n+                    IntercrateMode::Fixed,\n+                    TraitObjectMode::NoSquash,\n+                    |overlap| {\n+                        self.check_for_common_items_in_impls(\n+                            impl1_def_id,\n+                            impl2_def_id,\n+                            overlap,\n+                            Some(FutureCompatOverlapErrorKind::Issue43355),\n+                        );\n+                        false\n+                    },\n+                    || true,\n+                );\n+\n+                if !used_to_be_allowed {\n+                    continue;\n                 }\n+\n+                // Then, check if the impl was forbidden under\n+                // #33140. In that case, emit a #33140 error.\n+                traits::overlapping_impls(\n+                    self.tcx,\n+                    impl1_def_id,\n+                    impl2_def_id,\n+                    IntercrateMode::Fixed,\n+                    TraitObjectMode::SquashAutoTraitsIssue33140,\n+                    |overlap| {\n+                        self.check_for_common_items_in_impls(\n+                            impl1_def_id,\n+                            impl2_def_id,\n+                            overlap,\n+                            Some(FutureCompatOverlapErrorKind::Issue33140),\n+                        );\n+                        false\n+                    },\n+                    || true,\n+                );\n             }\n         }\n     }"}]}