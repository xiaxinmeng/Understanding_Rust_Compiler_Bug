{"sha": "9e96c1ef7fcac0ac85b3c9160f5486e91dd27dd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllOTZjMWVmN2ZjYWMwYWM4NWIzYzkxNjBmNTQ4NmU5MWRkMjdkZDI=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-01-23T16:24:19Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-01-23T16:24:19Z"}, "message": "Add an unstable PanicInfo::message(&self) -> Option<&fmt::Arguments> method", "tree": {"sha": "2f7b1e2868866deaf93f02a617dc92951121c329", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f7b1e2868866deaf93f02a617dc92951121c329"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e96c1ef7fcac0ac85b3c9160f5486e91dd27dd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e96c1ef7fcac0ac85b3c9160f5486e91dd27dd2", "html_url": "https://github.com/rust-lang/rust/commit/9e96c1ef7fcac0ac85b3c9160f5486e91dd27dd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e96c1ef7fcac0ac85b3c9160f5486e91dd27dd2/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f98f4b12b8fd5d93ffff3d7b98931b3f1f2b07a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f98f4b12b8fd5d93ffff3d7b98931b3f1f2b07a", "html_url": "https://github.com/rust-lang/rust/commit/2f98f4b12b8fd5d93ffff3d7b98931b3f1f2b07a"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "2dfd950225c36fd2e8b2a0902a41ad951392c419", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9e96c1ef7fcac0ac85b3c9160f5486e91dd27dd2/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e96c1ef7fcac0ac85b3c9160f5486e91dd27dd2/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=9e96c1ef7fcac0ac85b3c9160f5486e91dd27dd2", "patch": "@@ -15,6 +15,7 @@\n             issue = \"44489\")]\n \n use any::Any;\n+use fmt;\n \n /// A struct providing information about a panic.\n ///\n@@ -38,6 +39,7 @@ use any::Any;\n #[derive(Debug)]\n pub struct PanicInfo<'a> {\n     payload: &'a (Any + Send),\n+    message: Option<&'a fmt::Arguments<'a>>,\n     location: Location<'a>,\n }\n \n@@ -47,8 +49,11 @@ impl<'a> PanicInfo<'a> {\n                           and related macros\",\n                 issue = \"0\")]\n     #[doc(hidden)]\n-    pub fn internal_constructor(payload: &'a (Any + Send), location: Location<'a>,) -> Self {\n-        PanicInfo { payload, location }\n+    pub fn internal_constructor(payload: &'a (Any + Send),\n+                                message: Option<&'a fmt::Arguments<'a>>,\n+                                location: Location<'a>)\n+                                -> Self {\n+        PanicInfo { payload, location, message }\n     }\n \n     /// Returns the payload associated with the panic.\n@@ -73,6 +78,16 @@ impl<'a> PanicInfo<'a> {\n         self.payload\n     }\n \n+    /// If the `panic!` macro from the `core` crate (not from `std`)\n+    /// was used with a formatting string and some additional arguments,\n+    /// returns that message ready to be used for example with [`fmt::write`]\n+    ///\n+    /// [`fmt::write`]: ../fmt/fn.write.html\n+    #[unstable(feature = \"panic_info_message\", issue = \"44489\")]\n+    pub fn message(&self) -> Option<&fmt::Arguments> {\n+        self.message\n+    }\n+\n     /// Returns information about the location from which the panic originated,\n     /// if available.\n     ///"}, {"sha": "3f5523548ce5723ade95eadd171d3c9775144689", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e96c1ef7fcac0ac85b3c9160f5486e91dd27dd2/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e96c1ef7fcac0ac85b3c9160f5486e91dd27dd2/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=9e96c1ef7fcac0ac85b3c9160f5486e91dd27dd2", "patch": "@@ -391,6 +391,7 @@ fn rust_panic_with_hook(msg: Box<Any + Send>,\n     unsafe {\n         let info = PanicInfo::internal_constructor(\n             &*msg,\n+            None,\n             Location::internal_constructor(file, line, col),\n         );\n         HOOK_LOCK.read();"}]}