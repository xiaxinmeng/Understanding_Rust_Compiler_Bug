{"sha": "2ac5f7d249e29ee48737359e0e6dd9e59701a568", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhYzVmN2QyNDllMjllZTQ4NzM3MzU5ZTBlNmRkOWU1OTcwMWE1Njg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-10T06:32:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-10T06:32:19Z"}, "message": "Auto merge of #43737 - GuillaumeGomez:duplicate-method, r=eddyb\n\nImprove error message when duplicate names for type and trait method\n\nFixes #43626.", "tree": {"sha": "3aa373debf509b9ef3d0f6a7cf6ad8d55f1190b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3aa373debf509b9ef3d0f6a7cf6ad8d55f1190b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ac5f7d249e29ee48737359e0e6dd9e59701a568", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ac5f7d249e29ee48737359e0e6dd9e59701a568", "html_url": "https://github.com/rust-lang/rust/commit/2ac5f7d249e29ee48737359e0e6dd9e59701a568", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ac5f7d249e29ee48737359e0e6dd9e59701a568/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16268a88fc0cfe3657439139c63913ffb904b2fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/16268a88fc0cfe3657439139c63913ffb904b2fa", "html_url": "https://github.com/rust-lang/rust/commit/16268a88fc0cfe3657439139c63913ffb904b2fa"}, {"sha": "aaa14d1d20f3cc1104bb619f66c78a49762182ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaa14d1d20f3cc1104bb619f66c78a49762182ff", "html_url": "https://github.com/rust-lang/rust/commit/aaa14d1d20f3cc1104bb619f66c78a49762182ff"}], "stats": {"total": 83, "additions": 69, "deletions": 14}, "files": [{"sha": "1ccb1e64a98e088b1292155d6562b73f6d4e895e", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2ac5f7d249e29ee48737359e0e6dd9e59701a568/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac5f7d249e29ee48737359e0e6dd9e59701a568/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=2ac5f7d249e29ee48737359e0e6dd9e59701a568", "patch": "@@ -58,8 +58,9 @@ pub enum MethodError<'tcx> {\n     ClosureAmbiguity(// DefId of fn trait\n                      DefId),\n \n-    // Found an applicable method, but it is not visible.\n-    PrivateMatch(Def),\n+    // Found an applicable method, but it is not visible. The second argument contains a list of\n+    // not-in-scope traits which may work.\n+    PrivateMatch(Def, Vec<DefId>),\n \n     // Found a `Self: Sized` bound where `Self` is a trait object, also the caller may have\n     // forgotten to import a trait."}, {"sha": "0934e2cdb0c9c28362cbc1bdc7dca022d7613f6d", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ac5f7d249e29ee48737359e0e6dd9e59701a568/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac5f7d249e29ee48737359e0e6dd9e59701a568/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=2ac5f7d249e29ee48737359e0e6dd9e59701a568", "patch": "@@ -1013,7 +1013,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         };\n \n         if let Some(def) = private_candidate {\n-            return Err(MethodError::PrivateMatch(def));\n+            return Err(MethodError::PrivateMatch(def, out_of_scope_traits));\n         }\n \n         Err(MethodError::NoMatch(NoMatchData::new(static_candidates,"}, {"sha": "56eacc3194d1c8404c60d7c8e6dc073cc768af5c", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2ac5f7d249e29ee48737359e0e6dd9e59701a568/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac5f7d249e29ee48737359e0e6dd9e59701a568/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=2ac5f7d249e29ee48737359e0e6dd9e59701a568", "patch": "@@ -311,9 +311,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 self.sess().span_err(span, &msg);\n             }\n \n-            MethodError::PrivateMatch(def) => {\n-                struct_span_err!(self.tcx.sess, span, E0624,\n-                                 \"{} `{}` is private\", def.kind_name(), item_name).emit();\n+            MethodError::PrivateMatch(def, out_of_scope_traits) => {\n+                let mut err = struct_span_err!(self.tcx.sess, span, E0624,\n+                                               \"{} `{}` is private\", def.kind_name(), item_name);\n+                self.suggest_valid_traits(&mut err, out_of_scope_traits);\n+                err.emit();\n             }\n \n             MethodError::IllegalSizedBound(candidates) => {\n@@ -353,13 +355,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         err.note(&msg[..]);\n     }\n \n-    fn suggest_traits_to_import(&self,\n-                                err: &mut DiagnosticBuilder,\n-                                span: Span,\n-                                rcvr_ty: Ty<'tcx>,\n-                                item_name: ast::Name,\n-                                rcvr_expr: Option<&hir::Expr>,\n-                                valid_out_of_scope_traits: Vec<DefId>) {\n+    fn suggest_valid_traits(&self,\n+                            err: &mut DiagnosticBuilder,\n+                            valid_out_of_scope_traits: Vec<DefId>) -> bool {\n         if !valid_out_of_scope_traits.is_empty() {\n             let mut candidates = valid_out_of_scope_traits;\n             candidates.sort();\n@@ -379,6 +377,20 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             });\n \n             self.suggest_use_candidates(err, msg, candidates);\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+\n+    fn suggest_traits_to_import(&self,\n+                                err: &mut DiagnosticBuilder,\n+                                span: Span,\n+                                rcvr_ty: Ty<'tcx>,\n+                                item_name: ast::Name,\n+                                rcvr_expr: Option<&hir::Expr>,\n+                                valid_out_of_scope_traits: Vec<DefId>) {\n+        if self.suggest_valid_traits(err, valid_out_of_scope_traits) {\n             return;\n         }\n "}, {"sha": "b9a9a954006572b7ea2433582460ad3ffa0e8f0d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ac5f7d249e29ee48737359e0e6dd9e59701a568/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac5f7d249e29ee48737359e0e6dd9e59701a568/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2ac5f7d249e29ee48737359e0e6dd9e59701a568", "patch": "@@ -4016,7 +4016,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             Ok(def) => def,\n             Err(error) => {\n                 let def = match error {\n-                    method::MethodError::PrivateMatch(def) => def,\n+                    method::MethodError::PrivateMatch(def, _) => def,\n                     _ => Def::Err,\n                 };\n                 if item_name != keywords::Invalid.name() {"}, {"sha": "5c1bd668ac649a1227851a65ae36b960857be949", "filename": "src/test/ui/trait-method-private.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2ac5f7d249e29ee48737359e0e6dd9e59701a568/src%2Ftest%2Fui%2Ftrait-method-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ac5f7d249e29ee48737359e0e6dd9e59701a568/src%2Ftest%2Fui%2Ftrait-method-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-method-private.rs?ref=2ac5f7d249e29ee48737359e0e6dd9e59701a568", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod inner {\n+    pub trait Bar {\n+        fn method(&self);\n+    }\n+\n+    pub struct Foo;\n+\n+    impl Foo {\n+        fn method(&self) {}\n+    }\n+\n+    impl Bar for Foo {\n+        fn method(&self) {}\n+    }\n+}\n+\n+fn main() {\n+    let foo = inner::Foo;\n+    foo.method();\n+}"}, {"sha": "c7a7b689edc515dc40ffe124ee75075c0c624fcb", "filename": "src/test/ui/trait-method-private.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2ac5f7d249e29ee48737359e0e6dd9e59701a568/src%2Ftest%2Fui%2Ftrait-method-private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2ac5f7d249e29ee48737359e0e6dd9e59701a568/src%2Ftest%2Fui%2Ftrait-method-private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-method-private.stderr?ref=2ac5f7d249e29ee48737359e0e6dd9e59701a568", "patch": "@@ -0,0 +1,12 @@\n+error[E0624]: method `method` is private\n+  --> $DIR/trait-method-private.rs:29:9\n+   |\n+29 |     foo.method();\n+   |         ^^^^^^\n+   |\n+   = help: items from traits can only be used if the trait is in scope\n+   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+           candidate #1: `use inner::Bar;`\n+\n+error: aborting due to previous error\n+"}]}