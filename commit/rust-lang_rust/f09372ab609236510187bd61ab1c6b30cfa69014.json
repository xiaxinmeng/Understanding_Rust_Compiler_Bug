{"sha": "f09372ab609236510187bd61ab1c6b30cfa69014", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwOTM3MmFiNjA5MjM2NTEwMTg3YmQ2MWFiMWM2YjMwY2ZhNjkwMTQ=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-09-10T04:02:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-10T04:02:24Z"}, "message": "Rollup merge of #74787 - petrochenkov:rustllvm, r=cuviper\n\nMove `rustllvm` into `compiler/rustc_llvm`\n\nThe `rustllvm` directory is not self-contained, it contains C++ code built by a build script of the `rustc_llvm` crate which is then linked into that crate.\nSo it makes sense to make `rustllvm` a part of `rustc_llvm` and move it into its directory.\nI replaced `rustllvm` with more obvious `llvm-wrapper` as the subdirectory name, but something like `llvm-adapter` would work as well, other suggestions are welcome.\n\nTo make things more confusing, the Rust side of FFI functions defined in `rustllvm` can be found in `rustc_codegen_llvm` rather than in `rustc_llvm`. Perhaps they need to be moved as well, but this PR doesn't do that.\n\nThe presence of multiple LLVM-related directories in `src` (`llvm-project`, `rustllvm`, `librustc_llvm`, `librustc_codegen_llvm` and their predecessors) historically confused me and made me wonder about their purpose.\nWith this PR we will have LLVM itself (`llvm-project`), a FFI crate (`rustc_llvm`, kind of `llvm-sys`) and a codegen backend crate using LLVM through the FFI crate (`rustc_codegen_llvm`).", "tree": {"sha": "3f48d5fc5dd1e11c6cfb44b2781867a73c786e77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f48d5fc5dd1e11c6cfb44b2781867a73c786e77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f09372ab609236510187bd61ab1c6b30cfa69014", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfWaVRCRBK7hj4Ov3rIwAAdHIIAA0rxKSOXRLt0bpPyDimm82D\niKXUVNgAGStPFzo5eYrWvEbDLfMImAVt4C60GZJgfMnQlZ13TH1TmqH2tqAIDNet\nAbcB/uowCJR8Oo6CHghEgs70t1YehflHGCKrGenM1KJBsD7OnLoMoFGKKvac81iu\n2XXezXGW6JRDlfY7mwiblimGaKs4jPQA68F63qnOjYsUGymkPHZX6nIB8+Lc5j44\no3v8kON3PWMMdStD0rzH9liNt9KqF5QygtoEKHydZj8j+ogLRIrCPnIKvAKPfmjh\na2uObXqAH4X7DHw/kSgI8TP9u8EuSjtHKt/RpAj6L7NgLX6eH3WfIPJZZXf9z0c=\n=UAvD\n-----END PGP SIGNATURE-----\n", "payload": "tree 3f48d5fc5dd1e11c6cfb44b2781867a73c786e77\nparent 97eb606e4b2becd17d46a67d87169f52b210e67c\nparent 10d3f8a484a812db995198f17b17462718f477bc\nauthor Tyler Mandry <tmandry@gmail.com> 1599710544 -0700\ncommitter GitHub <noreply@github.com> 1599710544 -0700\n\nRollup merge of #74787 - petrochenkov:rustllvm, r=cuviper\n\nMove `rustllvm` into `compiler/rustc_llvm`\n\nThe `rustllvm` directory is not self-contained, it contains C++ code built by a build script of the `rustc_llvm` crate which is then linked into that crate.\nSo it makes sense to make `rustllvm` a part of `rustc_llvm` and move it into its directory.\nI replaced `rustllvm` with more obvious `llvm-wrapper` as the subdirectory name, but something like `llvm-adapter` would work as well, other suggestions are welcome.\n\nTo make things more confusing, the Rust side of FFI functions defined in `rustllvm` can be found in `rustc_codegen_llvm` rather than in `rustc_llvm`. Perhaps they need to be moved as well, but this PR doesn't do that.\n\nThe presence of multiple LLVM-related directories in `src` (`llvm-project`, `rustllvm`, `librustc_llvm`, `librustc_codegen_llvm` and their predecessors) historically confused me and made me wonder about their purpose.\nWith this PR we will have LLVM itself (`llvm-project`), a FFI crate (`rustc_llvm`, kind of `llvm-sys`) and a codegen backend crate using LLVM through the FFI crate (`rustc_codegen_llvm`).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f09372ab609236510187bd61ab1c6b30cfa69014", "html_url": "https://github.com/rust-lang/rust/commit/f09372ab609236510187bd61ab1c6b30cfa69014", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f09372ab609236510187bd61ab1c6b30cfa69014/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97eb606e4b2becd17d46a67d87169f52b210e67c", "url": "https://api.github.com/repos/rust-lang/rust/commits/97eb606e4b2becd17d46a67d87169f52b210e67c", "html_url": "https://github.com/rust-lang/rust/commit/97eb606e4b2becd17d46a67d87169f52b210e67c"}, {"sha": "10d3f8a484a812db995198f17b17462718f477bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/10d3f8a484a812db995198f17b17462718f477bc", "html_url": "https://github.com/rust-lang/rust/commit/10d3f8a484a812db995198f17b17462718f477bc"}], "stats": {"total": 50, "additions": 23, "deletions": 27}, "files": [{"sha": "1c50d9b054ddc8b1edd734fe1d404af8da742974", "filename": ".gitignore", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09372ab609236510187bd61ab1c6b30cfa69014/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/f09372ab609236510187bd61ab1c6b30cfa69014/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=f09372ab609236510187bd61ab1c6b30cfa69014", "patch": "@@ -33,7 +33,6 @@ __pycache__/\n /mingw-build/\n # Created by default with `src/ci/docker/run.sh`:\n /obj/\n-/rustllvm/\n /unicode-downloads\n /target\n # Generated by compiletest for incremental:"}, {"sha": "04792b334d553ff0ab70d7456208bebf8fe7bffb", "filename": "compiler/rustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09372ab609236510187bd61ab1c6b30cfa69014/compiler%2Frustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f09372ab609236510187bd61ab1c6b30cfa69014/compiler%2Frustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2FCargo.toml?ref=f09372ab609236510187bd61ab1c6b30cfa69014", "patch": "@@ -25,7 +25,7 @@ rustc_fs_util = { path = \"../rustc_fs_util\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_incremental = { path = \"../rustc_incremental\" }\n rustc_index = { path = \"../rustc_index\" }\n-rustc_llvm = { path = \"../../src/librustc_llvm\" }\n+rustc_llvm = { path = \"../rustc_llvm\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_target = { path = \"../rustc_target\" }"}, {"sha": "4942c997682d80b7fbae0a9e0669e01420726403", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09372ab609236510187bd61ab1c6b30cfa69014/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09372ab609236510187bd61ab1c6b30cfa69014/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=f09372ab609236510187bd61ab1c6b30cfa69014", "patch": "@@ -96,7 +96,7 @@ pub enum DLLStorageClass {\n     DllExport = 2, // Function to be accessible from DLL.\n }\n \n-/// Matches LLVMRustAttribute in rustllvm.h\n+/// Matches LLVMRustAttribute in LLVMWrapper.h\n /// Semantically a subset of the C++ enum llvm::Attribute::AttrKind,\n /// though it is not ABI compatible (since it's a C++ enum)\n #[repr(C)]\n@@ -1705,7 +1705,7 @@ extern \"C\" {\n         PM: &PassManager<'_>,\n     );\n \n-    // Stuff that's in rustllvm/ because it's not upstream yet.\n+    // Stuff that's in llvm-wrapper/ because it's not upstream yet.\n \n     /// Opens an object file.\n     pub fn LLVMCreateObjectFile("}, {"sha": "ee83689f0a4695d41de257fec03e8d60a66866cc", "filename": "compiler/rustc_llvm/Cargo.toml", "status": "renamed", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f09372ab609236510187bd61ab1c6b30cfa69014/compiler%2Frustc_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f09372ab609236510187bd61ab1c6b30cfa69014/compiler%2Frustc_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2FCargo.toml?ref=f09372ab609236510187bd61ab1c6b30cfa69014", "patch": "@@ -4,9 +4,6 @@ name = \"rustc_llvm\"\n version = \"0.0.0\"\n edition = \"2018\"\n \n-[lib]\n-path = \"lib.rs\"\n-\n [features]\n static-libstdcpp = []\n emscripten = []\n@@ -15,5 +12,5 @@ emscripten = []\n libc = \"0.2.73\"\n \n [build-dependencies]\n-build_helper = { path = \"../build_helper\" }\n+build_helper = { path = \"../../src/build_helper\" }\n cc = \"1.0.58\"", "previous_filename": "src/librustc_llvm/Cargo.toml"}, {"sha": "7f1e5cf336ac414046673967de62c72864876a05", "filename": "compiler/rustc_llvm/build.rs", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f09372ab609236510187bd61ab1c6b30cfa69014/compiler%2Frustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09372ab609236510187bd61ab1c6b30cfa69014/compiler%2Frustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fbuild.rs?ref=f09372ab609236510187bd61ab1c6b30cfa69014", "patch": "@@ -175,15 +175,15 @@ fn main() {\n         cfg.debug(false);\n     }\n \n-    build_helper::rerun_if_changed_anything_in_dir(Path::new(\"../rustllvm\"));\n-    cfg.file(\"../rustllvm/PassWrapper.cpp\")\n-        .file(\"../rustllvm/RustWrapper.cpp\")\n-        .file(\"../rustllvm/ArchiveWrapper.cpp\")\n-        .file(\"../rustllvm/CoverageMappingWrapper.cpp\")\n-        .file(\"../rustllvm/Linker.cpp\")\n+    build_helper::rerun_if_changed_anything_in_dir(Path::new(\"llvm-wrapper\"));\n+    cfg.file(\"llvm-wrapper/PassWrapper.cpp\")\n+        .file(\"llvm-wrapper/RustWrapper.cpp\")\n+        .file(\"llvm-wrapper/ArchiveWrapper.cpp\")\n+        .file(\"llvm-wrapper/CoverageMappingWrapper.cpp\")\n+        .file(\"llvm-wrapper/Linker.cpp\")\n         .cpp(true)\n         .cpp_link_stdlib(None) // we handle this below\n-        .compile(\"rustllvm\");\n+        .compile(\"llvm-wrapper\");\n \n     let (llvm_kind, llvm_link_arg) = detect_llvm_link();\n \n@@ -259,7 +259,7 @@ fn main() {\n     }\n \n     // Some LLVM linker flags (-L and -l) may be needed even when linking\n-    // librustc_llvm, for example when using static libc++, we may need to\n+    // rustc_llvm, for example when using static libc++, we may need to\n     // manually specify the library search path and -ldl -lpthread as link\n     // dependencies.\n     let llvm_linker_flags = tracked_env_var_os(\"LLVM_LINKER_FLAGS\");", "previous_filename": "src/librustc_llvm/build.rs"}, {"sha": "865cd45f708fb4034a6d2d59a305d5a93a0488ae", "filename": "compiler/rustc_llvm/llvm-wrapper/.editorconfig", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f09372ab609236510187bd61ab1c6b30cfa69014/compiler%2Frustc_llvm%2Fllvm-wrapper%2F.editorconfig", "raw_url": "https://github.com/rust-lang/rust/raw/f09372ab609236510187bd61ab1c6b30cfa69014/compiler%2Frustc_llvm%2Fllvm-wrapper%2F.editorconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2F.editorconfig?ref=f09372ab609236510187bd61ab1c6b30cfa69014", "previous_filename": "src/rustllvm/.editorconfig"}, {"sha": "2797fe8df4a8e0460f7899aa5ba2c342ed593b64", "filename": "compiler/rustc_llvm/llvm-wrapper/ArchiveWrapper.cpp", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09372ab609236510187bd61ab1c6b30cfa69014/compiler%2Frustc_llvm%2Fllvm-wrapper%2FArchiveWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f09372ab609236510187bd61ab1c6b30cfa69014/compiler%2Frustc_llvm%2Fllvm-wrapper%2FArchiveWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FArchiveWrapper.cpp?ref=f09372ab609236510187bd61ab1c6b30cfa69014", "patch": "@@ -1,4 +1,4 @@\n-#include \"rustllvm.h\"\n+#include \"LLVMWrapper.h\"\n \n #include \"llvm/Object/Archive.h\"\n #include \"llvm/Object/ArchiveWriter.h\"", "previous_filename": "src/rustllvm/ArchiveWrapper.cpp"}, {"sha": "2b1143a4ecff54ab6b79a737a2ddf54b269b75e2", "filename": "compiler/rustc_llvm/llvm-wrapper/CoverageMappingWrapper.cpp", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09372ab609236510187bd61ab1c6b30cfa69014/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f09372ab609236510187bd61ab1c6b30cfa69014/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp?ref=f09372ab609236510187bd61ab1c6b30cfa69014", "patch": "@@ -1,4 +1,4 @@\n-#include \"rustllvm.h\"\n+#include \"LLVMWrapper.h\"\n #include \"llvm/ProfileData/Coverage/CoverageMapping.h\"\n #include \"llvm/ProfileData/Coverage/CoverageMappingWriter.h\"\n #include \"llvm/ProfileData/InstrProf.h\"", "previous_filename": "src/rustllvm/CoverageMappingWrapper.cpp"}, {"sha": "57b8664d3b6058d1050790354cb0a5fc89cc16ca", "filename": "compiler/rustc_llvm/llvm-wrapper/LLVMWrapper.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f09372ab609236510187bd61ab1c6b30cfa69014/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "raw_url": "https://github.com/rust-lang/rust/raw/f09372ab609236510187bd61ab1c6b30cfa69014/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h?ref=f09372ab609236510187bd61ab1c6b30cfa69014", "previous_filename": "src/rustllvm/rustllvm.h"}, {"sha": "8766e96f086d2e845ae8b07a9afdb3bc40570598", "filename": "compiler/rustc_llvm/llvm-wrapper/Linker.cpp", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09372ab609236510187bd61ab1c6b30cfa69014/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLinker.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f09372ab609236510187bd61ab1c6b30cfa69014/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLinker.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLinker.cpp?ref=f09372ab609236510187bd61ab1c6b30cfa69014", "patch": "@@ -1,6 +1,6 @@\n #include \"llvm/Linker/Linker.h\"\n \n-#include \"rustllvm.h\"\n+#include \"LLVMWrapper.h\"\n \n using namespace llvm;\n ", "previous_filename": "src/rustllvm/Linker.cpp"}, {"sha": "7b1c3f9ba2c686c2600d6e8bee08b558280744cd", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09372ab609236510187bd61ab1c6b30cfa69014/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f09372ab609236510187bd61ab1c6b30cfa69014/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=f09372ab609236510187bd61ab1c6b30cfa69014", "patch": "@@ -3,7 +3,7 @@\n #include <vector>\n #include <set>\n \n-#include \"rustllvm.h\"\n+#include \"LLVMWrapper.h\"\n \n #include \"llvm/Analysis/TargetLibraryInfo.h\"\n #include \"llvm/Analysis/TargetTransformInfo.h\"", "previous_filename": "src/rustllvm/PassWrapper.cpp"}, {"sha": "e1c6dd07d2b3856a5a2050a8551474123f7a56c3", "filename": "compiler/rustc_llvm/llvm-wrapper/README", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f09372ab609236510187bd61ab1c6b30cfa69014/compiler%2Frustc_llvm%2Fllvm-wrapper%2FREADME", "raw_url": "https://github.com/rust-lang/rust/raw/f09372ab609236510187bd61ab1c6b30cfa69014/compiler%2Frustc_llvm%2Fllvm-wrapper%2FREADME", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FREADME?ref=f09372ab609236510187bd61ab1c6b30cfa69014", "previous_filename": "src/rustllvm/README"}, {"sha": "e85a9b763800465c44da19eac5e1463f8a3d57c8", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09372ab609236510187bd61ab1c6b30cfa69014/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f09372ab609236510187bd61ab1c6b30cfa69014/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=f09372ab609236510187bd61ab1c6b30cfa69014", "patch": "@@ -1,4 +1,4 @@\n-#include \"rustllvm.h\"\n+#include \"LLVMWrapper.h\"\n #include \"llvm/IR/DebugInfoMetadata.h\"\n #include \"llvm/IR/DiagnosticInfo.h\"\n #include \"llvm/IR/DiagnosticPrinter.h\"", "previous_filename": "src/rustllvm/RustWrapper.cpp"}, {"sha": "9d23397ade08e80e170bd9b41ebce4e72c5c7982", "filename": "compiler/rustc_llvm/src/lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f09372ab609236510187bd61ab1c6b30cfa69014/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09372ab609236510187bd61ab1c6b30cfa69014/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fsrc%2Flib.rs?ref=f09372ab609236510187bd61ab1c6b30cfa69014", "previous_filename": "src/librustc_llvm/lib.rs"}, {"sha": "52531f54c299e5340dcfc5a4eafbb6922f606335", "filename": "config.toml.example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09372ab609236510187bd61ab1c6b30cfa69014/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/f09372ab609236510187bd61ab1c6b30cfa69014/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=f09372ab609236510187bd61ab1c6b30cfa69014", "patch": "@@ -45,7 +45,7 @@\n # this flag will indicate that this version check should not be done.\n #version-check = true\n \n-# Link libstdc++ statically into the librustc_llvm instead of relying on a\n+# Link libstdc++ statically into the rustc_llvm instead of relying on a\n # dynamic version to be available.\n #static-libstdcpp = false\n "}, {"sha": "d2baf4a1d1e6aeebee68622ef3b732fdfb884418", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f09372ab609236510187bd61ab1c6b30cfa69014/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09372ab609236510187bd61ab1c6b30cfa69014/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=f09372ab609236510187bd61ab1c6b30cfa69014", "patch": "@@ -812,7 +812,7 @@ impl<'a> Builder<'a> {\n             format!(\"CARGO_PROFILE_{}_{}\", profile, name)\n         };\n \n-        // See comment in librustc_llvm/build.rs for why this is necessary, largely llvm-config\n+        // See comment in rustc_llvm/build.rs for why this is necessary, largely llvm-config\n         // needs to not accidentally link to libLLVM in stage0/lib.\n         cargo.env(\"REAL_LIBRARY_PATH_VAR\", &util::dylib_path_var());\n         if let Some(e) = env::var_os(util::dylib_path_var()) {\n@@ -829,9 +829,9 @@ impl<'a> Builder<'a> {\n         // scripts can do less work (i.e. not building/requiring LLVM).\n         if cmd == \"check\" || cmd == \"clippy\" || cmd == \"fix\" {\n             // If we've not yet built LLVM, or it's stale, then bust\n-            // the librustc_llvm cache. That will always work, even though it\n+            // the rustc_llvm cache. That will always work, even though it\n             // may mean that on the next non-check build we'll need to rebuild\n-            // librustc_llvm. But if LLVM is stale, that'll be a tiny amount\n+            // rustc_llvm. But if LLVM is stale, that'll be a tiny amount\n             // of work comparitively, and we'd likely need to rebuild it anyway,\n             // so that's okay.\n             if crate::native::prebuilt_llvm_config(self, target).is_err() {"}, {"sha": "9d314e8452b9c58385336f707b7625f83242c2b7", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f09372ab609236510187bd61ab1c6b30cfa69014/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09372ab609236510187bd61ab1c6b30cfa69014/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=f09372ab609236510187bd61ab1c6b30cfa69014", "patch": "@@ -560,7 +560,7 @@ pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetS\n     }\n \n     // Pass down configuration from the LLVM build into the build of\n-    // librustc_llvm and librustc_codegen_llvm.\n+    // rustc_llvm and rustc_codegen_llvm.\n     //\n     // Note that this is disabled if LLVM itself is disabled or we're in a check\n     // build. If we are in a check build we still go ahead here presuming we've\n@@ -579,7 +579,7 @@ pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetS\n         if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n             cargo.env(\"CFG_LLVM_ROOT\", s);\n         }\n-        // Some LLVM linker flags (-L and -l) may be needed to link librustc_llvm.\n+        // Some LLVM linker flags (-L and -l) may be needed to link rustc_llvm.\n         if let Some(ref s) = builder.config.llvm_ldflags {\n             cargo.env(\"LLVM_LINKER_FLAGS\", s);\n         }"}]}