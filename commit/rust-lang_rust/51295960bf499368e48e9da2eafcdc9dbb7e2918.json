{"sha": "51295960bf499368e48e9da2eafcdc9dbb7e2918", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxMjk1OTYwYmY0OTkzNjhlNDhlOWRhMmVhZmNkYzlkYmI3ZTI5MTg=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-02T09:41:20Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-02T09:41:20Z"}, "message": "Fix invalid_upcast_comparisons lint for same size sign casts", "tree": {"sha": "9973633c997bfbdd622bba84edeb4181b7635539", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9973633c997bfbdd622bba84edeb4181b7635539"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51295960bf499368e48e9da2eafcdc9dbb7e2918", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51295960bf499368e48e9da2eafcdc9dbb7e2918", "html_url": "https://github.com/rust-lang/rust/commit/51295960bf499368e48e9da2eafcdc9dbb7e2918", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51295960bf499368e48e9da2eafcdc9dbb7e2918/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bfa53f5045a8eb6ab89f6e753280d15c51f2332", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bfa53f5045a8eb6ab89f6e753280d15c51f2332", "html_url": "https://github.com/rust-lang/rust/commit/7bfa53f5045a8eb6ab89f6e753280d15c51f2332"}], "stats": {"total": 319, "additions": 239, "deletions": 80}, "files": [{"sha": "82db13b1025bbfe858fe648d9d52fc51bccbdec1", "filename": "clippy_lints/src/identity_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51295960bf499368e48e9da2eafcdc9dbb7e2918/clippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51295960bf499368e48e9da2eafcdc9dbb7e2918/clippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_op.rs?ref=51295960bf499368e48e9da2eafcdc9dbb7e2918", "patch": "@@ -64,7 +64,7 @@ fn check(cx: &LateContext, e: &Expr, m: i8, span: Span, arg: Span) {\n         if match m {\n             0 => v.to_u128_unchecked() == 0,\n             -1 => match v.int_type() {\n-                SignedInt(_) => (v.to_u128_unchecked() as i128  == -1),\n+                SignedInt(_) => #[allow(cast_possible_wrap)] (v.to_u128_unchecked() as i128  == -1),\n                 UnsignedInt(_) =>  false\n             },\n             1 => v.to_u128_unchecked() == 1,"}, {"sha": "bfd17d995c8dd8f2080b1531194da68e137b413b", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/51295960bf499368e48e9da2eafcdc9dbb7e2918/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51295960bf499368e48e9da2eafcdc9dbb7e2918/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=51295960bf499368e48e9da2eafcdc9dbb7e2918", "patch": "@@ -2,10 +2,8 @@\n \n use rustc::lint::*;\n use rustc::hir::*;\n-use utils::{span_lint_and_then, snippet_opt};\n-use rustc::ty::layout::TargetDataLayout;\n+use utils::{span_lint_and_then, snippet_opt, type_size};\n use rustc::ty::TypeFoldable;\n-use rustc::traits::Reveal;\n \n /// **What it does:** Checks for large size differences between variants on `enum`s.\n ///\n@@ -55,28 +53,22 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeEnumVariant {\n             let mut largest_variant: Option<(_, _)> = None;\n \n             for (i, variant) in adt.variants.iter().enumerate() {\n-                let data_layout = TargetDataLayout::parse(cx.sess());\n-                cx.tcx.infer_ctxt((), Reveal::All).enter(|infcx| {\n-                    let size: u64 = variant.fields\n-                        .iter()\n-                        .map(|f| {\n-                            let ty = cx.tcx.item_type(f.did);\n-                            if ty.needs_subst() {\n-                                0 // we can't reason about generics, so we treat them as zero sized\n-                            } else {\n-                                ty.layout(&infcx)\n-                                    .expect(\"layout should be computable for concrete type\")\n-                                    .size(&data_layout)\n-                                    .bytes()\n-                            }\n-                        })\n-                        .sum();\n+                let size: u64 = variant.fields\n+                    .iter()\n+                    .map(|f| {\n+                        let ty = cx.tcx.item_type(f.did);\n+                        if ty.needs_subst() {\n+                            0 // we can't reason about generics, so we treat them as zero sized\n+                        } else {\n+                            type_size(cx, ty).expect(\"size should be computable for concrete type\")\n+                        }\n+                    })\n+                    .sum();\n \n-                    let grouped = (size, (i, variant));\n+                let grouped = (size, (i, variant));\n \n-                    update_if(&mut smallest_variant, grouped, |a, b| b.0 <= a.0);\n-                    update_if(&mut largest_variant, grouped, |a, b| b.0 >= a.0);\n-                });\n+                update_if(&mut smallest_variant, grouped, |a, b| b.0 <= a.0);\n+                update_if(&mut largest_variant, grouped, |a, b| b.0 >= a.0);\n             }\n \n             if let (Some(smallest), Some(largest)) = (smallest_variant, largest_variant) {"}, {"sha": "c93ba00218ab6669d3ece540c9759315e93056e0", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/51295960bf499368e48e9da2eafcdc9dbb7e2918/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51295960bf499368e48e9da2eafcdc9dbb7e2918/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=51295960bf499368e48e9da2eafcdc9dbb7e2918", "patch": "@@ -8,7 +8,7 @@ use syntax::ast::{IntTy, UintTy, FloatTy};\n use syntax::attr::IntType;\n use syntax::codemap::Span;\n use utils::{comparisons, higher, in_external_macro, in_macro, match_def_path, snippet, span_help_and_lint, span_lint,\n-            opt_def_id, last_path_segment};\n+            opt_def_id, last_path_segment, type_size};\n use utils::paths;\n \n /// Handles all the linting of funky types\n@@ -1077,7 +1077,13 @@ fn numeric_cast_precast_bounds<'a>(cx: &LateContext, expr: &'a Expr) -> Option<(\n     use std::*;\n \n     if let ExprCast(ref cast_exp, _) = expr.node {\n-        match cx.tables.expr_ty(cast_exp).sty {\n+        let pre_cast_ty = cx.tables.expr_ty(cast_exp);\n+        let cast_ty = cx.tables.expr_ty(expr);\n+        // if it's a cast from i32 to u32 wrapping will invalidate all these checks\n+        if type_size(cx, pre_cast_ty) == type_size(cx, cast_ty) {\n+            return None;\n+        }\n+        match pre_cast_ty.sty {\n             TyInt(int_ty) => {\n                 Some(match int_ty {\n                     IntTy::I8 => (FullInt::S(i8::min_value() as i128), FullInt::S(i8::max_value() as i128)),\n@@ -1113,7 +1119,7 @@ fn node_as_const_fullint(cx: &LateContext, expr: &Expr) -> Option<FullInt> {\n         Ok(val) => {\n             if let Integral(const_int) = val {\n                 match const_int.int_type() {\n-                    IntType::SignedInt(_) => Some(FullInt::S(const_int.to_u128_unchecked() as i128)),\n+                    IntType::SignedInt(_) => #[allow(cast_possible_wrap)] Some(FullInt::S(const_int.to_u128_unchecked() as i128)),\n                     IntType::UnsignedInt(_) => Some(FullInt::U(const_int.to_u128_unchecked())),\n                 }\n             } else {"}, {"sha": "18864d42df2abc301bbe216fd9e151cc7b0ca3cb", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/51295960bf499368e48e9da2eafcdc9dbb7e2918/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51295960bf499368e48e9da2eafcdc9dbb7e2918/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=51295960bf499368e48e9da2eafcdc9dbb7e2918", "patch": "@@ -9,6 +9,7 @@ use rustc::traits::Reveal;\n use rustc::traits;\n use rustc::ty::subst::Subst;\n use rustc::ty;\n+use rustc::ty::layout::TargetDataLayout;\n use rustc_errors;\n use std::borrow::Cow;\n use std::env;\n@@ -972,3 +973,9 @@ pub fn is_try(expr: &Expr) -> Option<&Expr> {\n \n     None\n }\n+\n+pub fn type_size<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: ty::Ty<'tcx>) -> Option<u64> {\n+    cx.tcx.infer_ctxt((), Reveal::All).enter(|infcx|\n+        ty.layout(&infcx).ok().map(|lay| lay.size(&TargetDataLayout::parse(cx.sess())).bytes())\n+    )\n+}"}, {"sha": "c59f04d4f381ca9ef4efcddd855db67ea747de0f", "filename": "tests/ui/invalid_upcast_comparisons.rs", "status": "modified", "additions": 68, "deletions": 22, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/51295960bf499368e48e9da2eafcdc9dbb7e2918/tests%2Fui%2Finvalid_upcast_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51295960bf499368e48e9da2eafcdc9dbb7e2918/tests%2Fui%2Finvalid_upcast_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_upcast_comparisons.rs?ref=51295960bf499368e48e9da2eafcdc9dbb7e2918", "patch": "@@ -3,33 +3,79 @@\n \n #![deny(invalid_upcast_comparisons)]\n #![allow(unused, eq_op, no_effect, unnecessary_operation)]\n-fn main() {\n-    let zero: u32 = 0;\n-    let u8_max: u8 = 255;\n \n-    (u8_max as u32) > 300;\n-    (u8_max as u32) > 20;\n+fn mk_value<T>() -> T { unimplemented!() }\n+\n+fn main() {\n+    let u32: u32 = mk_value();\n+    let u8: u8 = mk_value();\n+    let i32: i32 = mk_value();\n+    let i8: i8 = mk_value();\n \n-    (zero as i32) < -5;\n-    (zero as i32) < 10;\n+    // always false, since no u8 can be > 300\n+    (u8 as u32) > 300;\n+    (u8 as i32) > 300;\n+    (u8 as u32) == 300;\n+    (u8 as i32) == 300;\n+    300 < (u8 as u32);\n+    300 < (u8 as i32);\n+    300 == (u8 as u32);\n+    300 == (u8 as i32);\n+    // inverted of the above\n+    (u8 as u32) <= 300;\n+    (u8 as i32) <= 300;\n+    (u8 as u32) != 300;\n+    (u8 as i32) != 300;\n+    300 >= (u8 as u32);\n+    300 >= (u8 as i32);\n+    300 != (u8 as u32);\n+    300 != (u8 as i32);\n \n-    -5 < (zero as i32);\n-    0 <= (zero as i32);\n-    0 < (zero as i32);\n+    // always false, since u8 -> i32 doesn't wrap\n+    (u8 as i32) < 0;\n+    -5 != (u8 as i32);\n+    // inverted of the above\n+    (u8 as i32) >= 0;\n+    -5 == (u8 as i32);\n \n-    -5 > (zero as i32);\n-    -5 >= (u8_max as i32);\n-    1337 == (u8_max as i32);\n+    // always false, since no u8 can be 1337\n+    1337 == (u8 as i32);\n+    1337 == (u8 as u32);\n+    // inverted of the above\n+    1337 != (u8 as i32);\n+    1337 != (u8 as u32);\n \n-    -5 == (zero as i32);\n-    -5 != (u8_max as i32);\n \n     // Those are Ok:\n-    42 == (u8_max as i32);\n-    42 != (u8_max as i32);\n-    42 > (u8_max as i32);\n-    (u8_max as i32) == 42;\n-    (u8_max as i32) != 42;\n-    (u8_max as i32) > 42;\n-    (u8_max as i32) < 42;\n+    (u8 as u32) > 20;\n+    42 == (u8 as i32);\n+    42 != (u8 as i32);\n+    42 > (u8 as i32);\n+    (u8 as i32) == 42;\n+    (u8 as i32) != 42;\n+    (u8 as i32) > 42;\n+    (u8 as i32) < 42;\n+\n+    (u8 as i8) == -1;\n+    (u8 as i8) != -1;\n+    (u8 as i32) > -1;\n+    (u8 as i32) < -1;\n+    (u32 as i32) < -5;\n+    (u32 as i32) < 10;\n+\n+    (i8 as u8) == 1;\n+    (i8 as u8) != 1;\n+    (i8 as u8) < 1;\n+    (i8 as u8) > 1;\n+    (i32 as u32) < 5;\n+    (i32 as u32) < 10;\n+\n+    -5 < (u32 as i32);\n+    0 <= (u32 as i32);\n+    0 < (u32 as i32);\n+\n+    -5 > (u32 as i32);\n+    -5 >= (u8 as i32);\n+\n+    -5 == (u32 as i32);\n }"}, {"sha": "874081c22abea2cebe2b72e7073f7e576755ddf4", "filename": "tests/ui/invalid_upcast_comparisons.stderr", "status": "modified", "additions": 139, "deletions": 31, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/51295960bf499368e48e9da2eafcdc9dbb7e2918/tests%2Fui%2Finvalid_upcast_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/51295960bf499368e48e9da2eafcdc9dbb7e2918/tests%2Fui%2Finvalid_upcast_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_upcast_comparisons.stderr?ref=51295960bf499368e48e9da2eafcdc9dbb7e2918", "patch": "@@ -1,62 +1,170 @@\n-error: because of the numeric bounds on `u8_max` prior to casting, this expression is always false\n-  --> $DIR/invalid_upcast_comparisons.rs:10:5\n+error: because of the numeric bounds on `u8` prior to casting, this expression is always false\n+  --> $DIR/invalid_upcast_comparisons.rs:16:5\n    |\n-10 |     (u8_max as u32) > 300;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+16 |     (u8 as u32) > 300;\n+   |     ^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/invalid_upcast_comparisons.rs:4:9\n    |\n 4  | #![deny(invalid_upcast_comparisons)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: because of the numeric bounds on `zero` prior to casting, this expression is always false\n-  --> $DIR/invalid_upcast_comparisons.rs:13:5\n+error: because of the numeric bounds on `u8` prior to casting, this expression is always false\n+  --> $DIR/invalid_upcast_comparisons.rs:17:5\n    |\n-13 |     (zero as i32) < -5;\n-   |     ^^^^^^^^^^^^^^^^^^\n+17 |     (u8 as i32) > 300;\n+   |     ^^^^^^^^^^^^^^^^^\n \n-error: because of the numeric bounds on `zero` prior to casting, this expression is always true\n-  --> $DIR/invalid_upcast_comparisons.rs:16:5\n+error: because of the numeric bounds on `u8` prior to casting, this expression is always false\n+  --> $DIR/invalid_upcast_comparisons.rs:18:5\n    |\n-16 |     -5 < (zero as i32);\n+18 |     (u8 as u32) == 300;\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: because of the numeric bounds on `zero` prior to casting, this expression is always true\n-  --> $DIR/invalid_upcast_comparisons.rs:17:5\n+error: because of the numeric bounds on `u8` prior to casting, this expression is always false\n+  --> $DIR/invalid_upcast_comparisons.rs:19:5\n    |\n-17 |     0 <= (zero as i32);\n+19 |     (u8 as i32) == 300;\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: because of the numeric bounds on `zero` prior to casting, this expression is always false\n+error: because of the numeric bounds on `u8` prior to casting, this expression is always false\n   --> $DIR/invalid_upcast_comparisons.rs:20:5\n    |\n-20 |     -5 > (zero as i32);\n-   |     ^^^^^^^^^^^^^^^^^^\n+20 |     300 < (u8 as u32);\n+   |     ^^^^^^^^^^^^^^^^^\n \n-error: because of the numeric bounds on `u8_max` prior to casting, this expression is always false\n+error: because of the numeric bounds on `u8` prior to casting, this expression is always false\n   --> $DIR/invalid_upcast_comparisons.rs:21:5\n    |\n-21 |     -5 >= (u8_max as i32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+21 |     300 < (u8 as i32);\n+   |     ^^^^^^^^^^^^^^^^^\n \n-error: because of the numeric bounds on `u8_max` prior to casting, this expression is always false\n+error: because of the numeric bounds on `u8` prior to casting, this expression is always false\n   --> $DIR/invalid_upcast_comparisons.rs:22:5\n    |\n-22 |     1337 == (u8_max as i32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+22 |     300 == (u8 as u32);\n+   |     ^^^^^^^^^^^^^^^^^^\n \n-error: because of the numeric bounds on `zero` prior to casting, this expression is always false\n-  --> $DIR/invalid_upcast_comparisons.rs:24:5\n+error: because of the numeric bounds on `u8` prior to casting, this expression is always false\n+  --> $DIR/invalid_upcast_comparisons.rs:23:5\n    |\n-24 |     -5 == (zero as i32);\n-   |     ^^^^^^^^^^^^^^^^^^^\n+23 |     300 == (u8 as i32);\n+   |     ^^^^^^^^^^^^^^^^^^\n \n-error: because of the numeric bounds on `u8_max` prior to casting, this expression is always true\n+error: because of the numeric bounds on `u8` prior to casting, this expression is always true\n   --> $DIR/invalid_upcast_comparisons.rs:25:5\n    |\n-25 |     -5 != (u8_max as i32);\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+25 |     (u8 as u32) <= 300;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `u8` prior to casting, this expression is always true\n+  --> $DIR/invalid_upcast_comparisons.rs:26:5\n+   |\n+26 |     (u8 as i32) <= 300;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `u8` prior to casting, this expression is always true\n+  --> $DIR/invalid_upcast_comparisons.rs:27:5\n+   |\n+27 |     (u8 as u32) != 300;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `u8` prior to casting, this expression is always true\n+  --> $DIR/invalid_upcast_comparisons.rs:28:5\n+   |\n+28 |     (u8 as i32) != 300;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `u8` prior to casting, this expression is always true\n+  --> $DIR/invalid_upcast_comparisons.rs:29:5\n+   |\n+29 |     300 >= (u8 as u32);\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `u8` prior to casting, this expression is always true\n+  --> $DIR/invalid_upcast_comparisons.rs:30:5\n+   |\n+30 |     300 >= (u8 as i32);\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `u8` prior to casting, this expression is always true\n+  --> $DIR/invalid_upcast_comparisons.rs:31:5\n+   |\n+31 |     300 != (u8 as u32);\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `u8` prior to casting, this expression is always true\n+  --> $DIR/invalid_upcast_comparisons.rs:32:5\n+   |\n+32 |     300 != (u8 as i32);\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `u8` prior to casting, this expression is always false\n+  --> $DIR/invalid_upcast_comparisons.rs:35:5\n+   |\n+35 |     (u8 as i32) < 0;\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `u8` prior to casting, this expression is always true\n+  --> $DIR/invalid_upcast_comparisons.rs:36:5\n+   |\n+36 |     -5 != (u8 as i32);\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `u8` prior to casting, this expression is always true\n+  --> $DIR/invalid_upcast_comparisons.rs:38:5\n+   |\n+38 |     (u8 as i32) >= 0;\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `u8` prior to casting, this expression is always false\n+  --> $DIR/invalid_upcast_comparisons.rs:39:5\n+   |\n+39 |     -5 == (u8 as i32);\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `u8` prior to casting, this expression is always false\n+  --> $DIR/invalid_upcast_comparisons.rs:42:5\n+   |\n+42 |     1337 == (u8 as i32);\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `u8` prior to casting, this expression is always false\n+  --> $DIR/invalid_upcast_comparisons.rs:43:5\n+   |\n+43 |     1337 == (u8 as u32);\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `u8` prior to casting, this expression is always true\n+  --> $DIR/invalid_upcast_comparisons.rs:45:5\n+   |\n+45 |     1337 != (u8 as i32);\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `u8` prior to casting, this expression is always true\n+  --> $DIR/invalid_upcast_comparisons.rs:46:5\n+   |\n+46 |     1337 != (u8 as u32);\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `u8` prior to casting, this expression is always true\n+  --> $DIR/invalid_upcast_comparisons.rs:61:5\n+   |\n+61 |     (u8 as i32) > -1;\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `u8` prior to casting, this expression is always false\n+  --> $DIR/invalid_upcast_comparisons.rs:62:5\n+   |\n+62 |     (u8 as i32) < -1;\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `u8` prior to casting, this expression is always false\n+  --> $DIR/invalid_upcast_comparisons.rs:78:5\n+   |\n+78 |     -5 >= (u8 as i32);\n+   |     ^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 27 previous errors\n "}]}