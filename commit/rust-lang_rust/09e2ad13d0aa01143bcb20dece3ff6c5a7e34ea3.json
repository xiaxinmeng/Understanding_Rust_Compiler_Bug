{"sha": "09e2ad13d0aa01143bcb20dece3ff6c5a7e34ea3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZTJhZDEzZDBhYTAxMTQzYmNiMjBkZWNlM2ZmNmM1YTdlMzRlYTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-18T17:21:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-18T17:21:43Z"}, "message": "auto merge of #19060 : Gankro/rust/super-cloned, r=aturon\n\nEdit: whoops, didn't mean to hit post.\r\n\r\nAnyway, this is something I tried to do when I first implemented cloned, but couldn't figure out. Somewhere between then and the PR actually landing, we got Deref of references, so now this works! :tada: \r\n\r\nAlso turns out the test for the functionality was never marked as a #[test]. Oops!\r\n\r\nAlso added a Cloned iterator adaptor. If this isn't desirable, it can be taken out of the PR (seperate commits).", "tree": {"sha": "2e0ccae2ab9d6cb5871429279a673c0e4a3f2069", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e0ccae2ab9d6cb5871429279a673c0e4a3f2069"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09e2ad13d0aa01143bcb20dece3ff6c5a7e34ea3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09e2ad13d0aa01143bcb20dece3ff6c5a7e34ea3", "html_url": "https://github.com/rust-lang/rust/commit/09e2ad13d0aa01143bcb20dece3ff6c5a7e34ea3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09e2ad13d0aa01143bcb20dece3ff6c5a7e34ea3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/618bd5d1c550cbdaac369b01716cc009b9e4d1e7", "html_url": "https://github.com/rust-lang/rust/commit/618bd5d1c550cbdaac369b01716cc009b9e4d1e7"}, {"sha": "4a656062eeca015739015a327192dc067bfb1428", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a656062eeca015739015a327192dc067bfb1428", "html_url": "https://github.com/rust-lang/rust/commit/4a656062eeca015739015a327192dc067bfb1428"}], "stats": {"total": 99, "additions": 86, "deletions": 13}, "files": [{"sha": "3b62c8da1ebe111cc0cac40c128737de08fe2804", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/09e2ad13d0aa01143bcb20dece3ff6c5a7e34ea3/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e2ad13d0aa01143bcb20dece3ff6c5a7e34ea3/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=09e2ad13d0aa01143bcb20dece3ff6c5a7e34ea3", "patch": "@@ -65,9 +65,10 @@ use cmp;\n use cmp::Ord;\n use mem;\n use num::{ToPrimitive, Int};\n-use ops::Add;\n+use ops::{Add, Deref};\n use option::{Option, Some, None};\n use uint;\n+\n #[deprecated = \"renamed to Extend\"] pub use self::Extend as Extendable;\n \n /// Conversion from an `Iterator`\n@@ -1021,6 +1022,44 @@ impl<T: Clone> MinMaxResult<T> {\n     }\n }\n \n+/// A trait for iterators that contain cloneable elements\n+pub trait CloneIteratorExt<A> {\n+    /// Creates an iterator that clones the elements it yields. Useful for converting an\n+    /// Iterator<&T> to an Iterator<T>.\n+    fn cloned(self) -> Cloned<Self>;\n+}\n+\n+\n+impl<A: Clone, D: Deref<A>, I: Iterator<D>> CloneIteratorExt<A> for I {\n+    fn cloned(self) -> Cloned<I> {\n+        Cloned { it: self }\n+    }\n+}\n+\n+/// An iterator that clones the elements of an underlying iterator\n+pub struct Cloned<I> {\n+    it: I,\n+}\n+\n+impl<A: Clone, D: Deref<A>, I: Iterator<D>> Iterator<A> for Cloned<I> {\n+    fn next(&mut self) -> Option<A> {\n+        self.it.next().cloned()\n+    }\n+\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        self.it.size_hint()\n+    }\n+}\n+\n+impl<A: Clone, D: Deref<A>, I: DoubleEndedIterator<D>>\n+        DoubleEndedIterator<A> for Cloned<I> {\n+    fn next_back(&mut self) -> Option<A> {\n+        self.it.next_back().cloned()\n+    }\n+}\n+\n+impl<A: Clone, D: Deref<A>, I: ExactSize<D>> ExactSize<A> for Cloned<I> {}\n+\n /// A trait for iterators that are cloneable.\n pub trait CloneableIterator {\n     /// Repeats an iterator endlessly"}, {"sha": "199389730373a541b2402c88cd86e76645b2d898", "filename": "src/libcore/option.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09e2ad13d0aa01143bcb20dece3ff6c5a7e34ea3/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e2ad13d0aa01143bcb20dece3ff6c5a7e34ea3/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=09e2ad13d0aa01143bcb20dece3ff6c5a7e34ea3", "patch": "@@ -153,6 +153,7 @@ use result::{Result, Ok, Err};\n use slice;\n use slice::AsSlice;\n use clone::Clone;\n+use ops::Deref;\n \n // Note that this is not a lang item per se, but it has a hidden dependency on\n // `Iterator`, which is one. The compiler assumes that the `next` method of\n@@ -694,11 +695,12 @@ impl<T> Option<T> {\n     }\n }\n \n-impl<'a, T: Clone> Option<&'a T> {\n-    /// Maps an Option<&T> to an Option<T> by cloning the contents of the Option<&T>.\n+impl<'a, T: Clone, D: Deref<T>> Option<D> {\n+    /// Maps an Option<D> to an Option<T> by dereffing and cloning the contents of the Option.\n+    /// Useful for converting an Option<&T> to an Option<T>.\n     #[unstable = \"recently added as part of collections reform\"]\n     pub fn cloned(self) -> Option<T> {\n-        self.map(|t| t.clone())\n+        self.map(|t| t.deref().clone())\n     }\n }\n "}, {"sha": "d046faa82d405d04c8c1a8c29fbbe4dd351d91fc", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/09e2ad13d0aa01143bcb20dece3ff6c5a7e34ea3/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e2ad13d0aa01143bcb20dece3ff6c5a7e34ea3/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=09e2ad13d0aa01143bcb20dece3ff6c5a7e34ea3", "patch": "@@ -440,6 +440,23 @@ fn test_rev() {\n             vec![16, 14, 12, 10, 8, 6]);\n }\n \n+#[test]\n+fn test_cloned() {\n+    let xs = [2u8, 4, 6, 8];\n+\n+    let mut it = xs.iter().cloned();\n+    assert_eq!(it.len(), 4);\n+    assert_eq!(it.next(), Some(2));\n+    assert_eq!(it.len(), 3);\n+    assert_eq!(it.next(), Some(4));\n+    assert_eq!(it.len(), 2);\n+    assert_eq!(it.next_back(), Some(8));\n+    assert_eq!(it.len(), 1);\n+    assert_eq!(it.next_back(), Some(6));\n+    assert_eq!(it.len(), 0);\n+    assert_eq!(it.next_back(), None);\n+}\n+\n #[test]\n fn test_double_ended_map() {\n     let xs = [1i, 2, 3, 4, 5, 6];"}, {"sha": "a5927d47eb0af70b1605fc85e7c6212ba5720d8f", "filename": "src/libcoretest/option.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/09e2ad13d0aa01143bcb20dece3ff6c5a7e34ea3/src%2Flibcoretest%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e2ad13d0aa01143bcb20dece3ff6c5a7e34ea3/src%2Flibcoretest%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Foption.rs?ref=09e2ad13d0aa01143bcb20dece3ff6c5a7e34ea3", "patch": "@@ -241,14 +241,29 @@ fn test_collect() {\n     assert!(v == None);\n }\n \n+#[test]\n fn test_cloned() {\n-    let s = 1u32;\n-    let n: Option<&'static u32> = None;\n-    let o = Some(&s);\n-\n-    assert_eq!(o.clone(), Some(&s));\n-    assert_eq!(o.cloned(), Some(1u32));\n-\n-    assert_eq!(n.clone(), None);\n-    assert_eq!(n.cloned(), None);\n+    let val1 = 1u32;\n+    let mut val2 = 2u32;\n+    let val1_ref = &val1;\n+    let opt_none: Option<&'static u32> = None;\n+    let opt_ref = Some(&val1);\n+    let opt_ref_ref = Some(&val1_ref);\n+    let opt_mut_ref = Some(&mut val2);\n+\n+    // None works\n+    assert_eq!(opt_none.clone(), None);\n+    assert_eq!(opt_none.cloned(), None);\n+\n+    // Mutable refs work\n+    assert_eq!(opt_mut_ref.cloned(), Some(2u32));\n+\n+    // Immutable ref works\n+    assert_eq!(opt_ref.clone(), Some(&val1));\n+    assert_eq!(opt_ref.cloned(), Some(1u32));\n+\n+    // Double Immutable ref works\n+    assert_eq!(opt_ref_ref.clone(), Some(&val1_ref));\n+    assert_eq!(opt_ref_ref.clone().cloned(), Some(&val1));\n+    assert_eq!(opt_ref_ref.cloned().cloned(), Some(1u32));\n }\n\\ No newline at end of file"}]}