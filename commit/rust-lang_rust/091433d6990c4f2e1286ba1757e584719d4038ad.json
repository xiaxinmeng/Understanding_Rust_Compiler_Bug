{"sha": "091433d6990c4f2e1286ba1757e584719d4038ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MTQzM2Q2OTkwYzRmMmUxMjg2YmExNzU3ZTU4NDcxOWQ0MDM4YWQ=", "commit": {"author": {"name": "Hameer Abbasi", "email": "einstein.edison@gmail.com", "date": "2021-03-31T08:09:16Z"}, "committer": {"name": "Hameer Abbasi", "email": "einstein.edison@gmail.com", "date": "2021-03-31T08:23:11Z"}, "message": "Rename stderr->64bit.stderr where needed.", "tree": {"sha": "c38391f0848da6d0737f2a2c0831a8a7c47b2168", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c38391f0848da6d0737f2a2c0831a8a7c47b2168"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/091433d6990c4f2e1286ba1757e584719d4038ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/091433d6990c4f2e1286ba1757e584719d4038ad", "html_url": "https://github.com/rust-lang/rust/commit/091433d6990c4f2e1286ba1757e584719d4038ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/091433d6990c4f2e1286ba1757e584719d4038ad/comments", "author": {"login": "hameerabbasi", "id": 2190658, "node_id": "MDQ6VXNlcjIxOTA2NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/2190658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hameerabbasi", "html_url": "https://github.com/hameerabbasi", "followers_url": "https://api.github.com/users/hameerabbasi/followers", "following_url": "https://api.github.com/users/hameerabbasi/following{/other_user}", "gists_url": "https://api.github.com/users/hameerabbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/hameerabbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hameerabbasi/subscriptions", "organizations_url": "https://api.github.com/users/hameerabbasi/orgs", "repos_url": "https://api.github.com/users/hameerabbasi/repos", "events_url": "https://api.github.com/users/hameerabbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/hameerabbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hameerabbasi", "id": 2190658, "node_id": "MDQ6VXNlcjIxOTA2NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/2190658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hameerabbasi", "html_url": "https://github.com/hameerabbasi", "followers_url": "https://api.github.com/users/hameerabbasi/followers", "following_url": "https://api.github.com/users/hameerabbasi/following{/other_user}", "gists_url": "https://api.github.com/users/hameerabbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/hameerabbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hameerabbasi/subscriptions", "organizations_url": "https://api.github.com/users/hameerabbasi/orgs", "repos_url": "https://api.github.com/users/hameerabbasi/repos", "events_url": "https://api.github.com/users/hameerabbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/hameerabbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3ec0add8b65e50b6c549353823c7652c354ea2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3ec0add8b65e50b6c549353823c7652c354ea2b", "html_url": "https://github.com/rust-lang/rust/commit/c3ec0add8b65e50b6c549353823c7652c354ea2b"}], "stats": {"total": 349, "additions": 192, "deletions": 157}, "files": [{"sha": "415a53a56274a5d3cb249cc5112ab8ff8df4f410", "filename": "src/test/ui/const-generics/min_const_generics/invalid-patterns.64bit.stderr", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Finvalid-patterns.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Finvalid-patterns.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Finvalid-patterns.64bit.stderr?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,29 +1,29 @@\n error[E0308]: mismatched types\n-  --> $DIR/invalid-patterns.rs:28:21\n+  --> $DIR/invalid-patterns.rs:29:21\n    |\n LL |   get_flag::<false, 0xFF>();\n    |                     ^^^^ expected `char`, found `u8`\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-patterns.rs:30:14\n+  --> $DIR/invalid-patterns.rs:31:14\n    |\n LL |   get_flag::<7, 'c'>();\n    |              ^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-patterns.rs:32:14\n+  --> $DIR/invalid-patterns.rs:33:14\n    |\n LL |   get_flag::<42, 0x5ad>();\n    |              ^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/invalid-patterns.rs:32:18\n+  --> $DIR/invalid-patterns.rs:33:18\n    |\n LL |   get_flag::<42, 0x5ad>();\n    |                  ^^^^^ expected `char`, found `u8`\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/invalid-patterns.rs:37:21\n+  --> $DIR/invalid-patterns.rs:38:21\n    |\n LL |   get_flag::<false, { unsafe { char_raw.character } }>();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected a valid unicode scalar value (in `0..=0x10FFFF` but not in `0xD800..=0xDFFF`)\n@@ -34,7 +34,7 @@ LL |   get_flag::<false, { unsafe { char_raw.character } }>();\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/invalid-patterns.rs:39:14\n+  --> $DIR/invalid-patterns.rs:40:14\n    |\n LL |   get_flag::<{ unsafe { bool_raw.boolean } }, 'z'>();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x42, but expected a boolean\n@@ -45,7 +45,7 @@ LL |   get_flag::<{ unsafe { bool_raw.boolean } }, 'z'>();\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/invalid-patterns.rs:41:14\n+  --> $DIR/invalid-patterns.rs:42:14\n    |\n LL |   get_flag::<{ unsafe { bool_raw.boolean } }, { unsafe { char_raw.character } }>();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x42, but expected a boolean\n@@ -56,7 +56,7 @@ LL |   get_flag::<{ unsafe { bool_raw.boolean } }, { unsafe { char_raw.character\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/invalid-patterns.rs:41:47\n+  --> $DIR/invalid-patterns.rs:42:47\n    |\n LL |   get_flag::<{ unsafe { bool_raw.boolean } }, { unsafe { char_raw.character } }>();\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected a valid unicode scalar value (in `0..=0x10FFFF` but not in `0xD800..=0xDFFF`)", "previous_filename": "src/test/ui/const-generics/min_const_generics/invalid-patterns.stderr"}, {"sha": "682e0eced9dff5b5ec09deb0a425a46f02dfea4a", "filename": "src/test/ui/const-generics/min_const_generics/invalid-patterns.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Finvalid-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Finvalid-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Finvalid-patterns.rs?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,3 +1,4 @@\n+// stderr-per-bitwidth\n use std::mem::transmute;\n \n fn get_flag<const FlagSet: bool, const ShortName: char>() -> Option<char> {"}, {"sha": "2eea3ea7096383e8754589b2b8d8df245417cfe8", "filename": "src/test/ui/consts/const-err4.64bit.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-err4.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-err4.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err4.64bit.stderr?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-err4.rs:8:11\n+  --> $DIR/const-err4.rs:9:11\n    |\n LL |     Boo = [unsafe { Foo { b: () }.a }; 4][3],\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes", "previous_filename": "src/test/ui/consts/const-err4.stderr"}, {"sha": "f0625faa80179dd783d4c2ac392446d7d1c56b0c", "filename": "src/test/ui/consts/const-err4.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-err4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-err4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err4.rs?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,3 +1,4 @@\n+// stderr-per-bitwidth\n #[derive(Copy, Clone)]\n union Foo {\n     a: isize,"}, {"sha": "187e2760ad2ca90e6ccd748237f58893a3f3c043", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.64bit.stderr", "status": "renamed", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.64bit.stderr?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:25:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:26:5\n    |\n LL |     const I32_REF_USIZE_UNION: usize = unsafe { Nonsense { int_32_ref: &3 }.u };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc2, but expected initialized plain (non-pointer) bytes\n@@ -10,7 +10,7 @@ LL |     const I32_REF_USIZE_UNION: usize = unsafe { Nonsense { int_32_ref: &3 }\n            }\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:28:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:29:43\n    |\n LL |     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_8 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -22,7 +22,7 @@ LL |     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:32:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:33:45\n    |\n LL |     const I32_REF_U16_UNION: u16 = unsafe { Nonsense { int_32_ref: &3 }.uint_16 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -33,7 +33,7 @@ LL |     const I32_REF_U16_UNION: u16 = unsafe { Nonsense { int_32_ref: &3 }.uin\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:36:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:37:45\n    |\n LL |     const I32_REF_U32_UNION: u32 = unsafe { Nonsense { int_32_ref: &3 }.uint_32 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -44,7 +44,7 @@ LL |     const I32_REF_U32_UNION: u32 = unsafe { Nonsense { int_32_ref: &3 }.uin\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:40:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:41:5\n    |\n LL |     const I32_REF_U64_UNION: u64 = unsafe { Nonsense { int_32_ref: &3 }.uint_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc18, but expected initialized plain (non-pointer) bytes\n@@ -55,7 +55,7 @@ LL |     const I32_REF_U64_UNION: u64 = unsafe { Nonsense { int_32_ref: &3 }.uin\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:43:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:44:5\n    |\n LL |     const I32_REF_U128_UNION: u128 = unsafe { Nonsense { int_32_ref: &3 }.uint_128 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes\n@@ -66,7 +66,7 @@ LL |     const I32_REF_U128_UNION: u128 = unsafe { Nonsense { int_32_ref: &3 }.u\n            }\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:46:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:47:43\n    |\n LL |     const I32_REF_I8_UNION: i8 = unsafe { Nonsense { int_32_ref: &3 }.int_8 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -77,7 +77,7 @@ LL |     const I32_REF_I8_UNION: i8 = unsafe { Nonsense { int_32_ref: &3 }.int_8\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:50:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:51:45\n    |\n LL |     const I32_REF_I16_UNION: i16 = unsafe { Nonsense { int_32_ref: &3 }.int_16 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -88,7 +88,7 @@ LL |     const I32_REF_I16_UNION: i16 = unsafe { Nonsense { int_32_ref: &3 }.int\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:54:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:55:45\n    |\n LL |     const I32_REF_I32_UNION: i32 = unsafe { Nonsense { int_32_ref: &3 }.int_32 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -99,7 +99,7 @@ LL |     const I32_REF_I32_UNION: i32 = unsafe { Nonsense { int_32_ref: &3 }.int\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:58:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:59:5\n    |\n LL |     const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc38, but expected initialized plain (non-pointer) bytes\n@@ -110,7 +110,7 @@ LL |     const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:61:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:62:5\n    |\n LL |     const I32_REF_I128_UNION: i128 = unsafe { Nonsense { int_32_ref: &3 }.int_128 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes\n@@ -121,7 +121,7 @@ LL |     const I32_REF_I128_UNION: i128 = unsafe { Nonsense { int_32_ref: &3 }.i\n            }\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:64:45\n+  --> $DIR/const-pointer-values-in-various-types.rs:65:45\n    |\n LL |     const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.float_32 };\n    |     ----------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -132,7 +132,7 @@ LL |     const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.flo\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:68:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:69:5\n    |\n LL |     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.float_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc50, but expected initialized plain (non-pointer) bytes\n@@ -143,7 +143,7 @@ LL |     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.flo\n            }\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:71:47\n+  --> $DIR/const-pointer-values-in-various-types.rs:72:47\n    |\n LL |     const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.truthy_falsey };\n    |     ------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -154,7 +154,7 @@ LL |     const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.t\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:75:47\n+  --> $DIR/const-pointer-values-in-various-types.rs:76:47\n    |\n LL |     const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.character };\n    |     ------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -165,7 +165,7 @@ LL |     const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.c\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:79:39\n+  --> $DIR/const-pointer-values-in-various-types.rs:80:39\n    |\n LL |     const STR_U8_UNION: u8 = unsafe { Nonsense { stringy: \"3\" }.uint_8 };\n    |     ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -176,7 +176,7 @@ LL |     const STR_U8_UNION: u8 = unsafe { Nonsense { stringy: \"3\" }.uint_8 };\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:83:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:84:41\n    |\n LL |     const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -187,7 +187,7 @@ LL |     const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 }\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:87:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:88:41\n    |\n LL |     const STR_U32_UNION: u32 = unsafe { Nonsense { stringy: \"3\" }.uint_32 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -198,7 +198,7 @@ LL |     const STR_U32_UNION: u32 = unsafe { Nonsense { stringy: \"3\" }.uint_32 }\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:91:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:92:5\n    |\n LL |     const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc71, but expected initialized plain (non-pointer) bytes\n@@ -209,7 +209,7 @@ LL |     const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 }\n            }\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:94:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:95:43\n    |\n LL |     const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -220,7 +220,7 @@ LL |     const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_12\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:98:39\n+  --> $DIR/const-pointer-values-in-various-types.rs:99:39\n    |\n LL |     const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };\n    |     ----------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -231,7 +231,7 @@ LL |     const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:102:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:103:41\n    |\n LL |     const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -242,7 +242,7 @@ LL |     const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:106:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:107:41\n    |\n LL |     const STR_I32_UNION: i32 = unsafe { Nonsense { stringy: \"3\" }.int_32 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -253,7 +253,7 @@ LL |     const STR_I32_UNION: i32 = unsafe { Nonsense { stringy: \"3\" }.int_32 };\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:110:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:111:5\n    |\n LL |     const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc86, but expected initialized plain (non-pointer) bytes\n@@ -264,7 +264,7 @@ LL |     const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n            }\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:113:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:114:43\n    |\n LL |     const STR_I128_UNION: i128 = unsafe { Nonsense { stringy: \"3\" }.int_128 };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -275,7 +275,7 @@ LL |     const STR_I128_UNION: i128 = unsafe { Nonsense { stringy: \"3\" }.int_128\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:117:41\n+  --> $DIR/const-pointer-values-in-various-types.rs:118:41\n    |\n LL |     const STR_F32_UNION: f32 = unsafe { Nonsense { stringy: \"3\" }.float_32 };\n    |     ------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -286,7 +286,7 @@ LL |     const STR_F32_UNION: f32 = unsafe { Nonsense { stringy: \"3\" }.float_32\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-pointer-values-in-various-types.rs:121:5\n+  --> $DIR/const-pointer-values-in-various-types.rs:122:5\n    |\n LL |     const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc95, but expected initialized plain (non-pointer) bytes\n@@ -297,7 +297,7 @@ LL |     const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64\n            }\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:124:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:125:43\n    |\n LL |     const STR_BOOL_UNION: bool = unsafe { Nonsense { stringy: \"3\" }.truthy_falsey };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -308,7 +308,7 @@ LL |     const STR_BOOL_UNION: bool = unsafe { Nonsense { stringy: \"3\" }.truthy_\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/const-pointer-values-in-various-types.rs:128:43\n+  --> $DIR/const-pointer-values-in-various-types.rs:129:43\n    |\n LL |     const STR_CHAR_UNION: char = unsafe { Nonsense { stringy: \"3\" }.character };\n    |     --------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---", "previous_filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.stderr"}, {"sha": "a1a932639db6e3b9cf960e4064694cc0c98cc426", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.rs?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,4 +1,5 @@\n // only-x86_64\n+// stderr-per-bitwidth\n \n #[repr(C)]\n union Nonsense {"}, {"sha": "6d63233997da468ce7ee2f653f014660b841c17d", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_uninit.64bit.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.64bit.stderr?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/alloc_intrinsic_uninit.rs:8:1\n+  --> $DIR/alloc_intrinsic_uninit.rs:9:1\n    |\n LL | const BAR: &i32 = unsafe { &*(intrinsics::const_allocate(4, 4) as *mut i32) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes at .<deref>, but expected initialized plain (non-pointer) bytes", "previous_filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_uninit.stderr"}, {"sha": "63a3fd4e090bae63293ccebb0a27658596546e57", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_uninit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_uninit.rs?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,3 +1,4 @@\n+// stderr-per-bitwidth\n // compile-test\n #![feature(core_intrinsics)]\n #![feature(const_heap)]"}, {"sha": "6ea1cf145a26c63c4bf9a132caf6d2ac37be2398", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.64bit.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.64bit.stderr?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ref_to_int_match.rs:25:1\n+  --> $DIR/ref_to_int_match.rs:26:1\n    |\n LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc2, but expected initialized plain (non-pointer) bytes\n@@ -10,13 +10,13 @@ LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n            }\n \n error: could not evaluate constant pattern\n-  --> $DIR/ref_to_int_match.rs:7:14\n+  --> $DIR/ref_to_int_match.rs:8:14\n    |\n LL |         10..=BAR => {},\n    |              ^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/ref_to_int_match.rs:7:14\n+  --> $DIR/ref_to_int_match.rs:8:14\n    |\n LL |         10..=BAR => {},\n    |              ^^^", "previous_filename": "src/test/ui/consts/const-eval/ref_to_int_match.stderr"}, {"sha": "0741e425d9b7a6819be6dc55087aeb39c3593784", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.rs?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,3 +1,4 @@\n+// stderr-per-bitwidth\n #![feature(const_fn_union)]\n \n fn main() {"}, {"sha": "89c7220788324e0d237d197cc3856bc7a634c00a", "filename": "src/test/ui/consts/const-eval/transmute-const.64bit.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.64bit.stderr?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/transmute-const.rs:3:1\n+  --> $DIR/transmute-const.rs:4:1\n    |\n LL | static FOO: bool = unsafe { mem::transmute(3u8) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x03, but expected a boolean", "previous_filename": "src/test/ui/consts/const-eval/transmute-const.stderr"}, {"sha": "d9d0a3aea07be073ecbbc5b63a53a2e96bfc3c61", "filename": "src/test/ui/consts/const-eval/transmute-const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ftransmute-const.rs?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,3 +1,4 @@\n+// stderr-per-bitwidth\n use std::mem;\n \n static FOO: bool = unsafe { mem::transmute(3u8) };"}, {"sha": "29d97962f32d7a6c07b909a449948e0191b0a61d", "filename": "src/test/ui/consts/const-eval/ub-enum.64bit.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:24:1\n    |\n LL | const BAD_ENUM: Enum = unsafe { mem::transmute(1usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x00000001 at .<enum-tag>, but expected a valid enum tag\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x0000000000000001 at .<enum-tag>, but expected a valid enum tag\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {\n@@ -35,7 +35,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:42:1\n    |\n LL | const BAD_ENUM2: Enum2 = unsafe { mem::transmute(0usize) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x00000000 at .<enum-tag>, but expected a valid enum tag\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x0000000000000000 at .<enum-tag>, but expected a valid enum tag\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n    = note: the raw bytes of the constant (size: 8, align: 8) {", "previous_filename": "src/test/ui/consts/const-eval/ub-enum.stderr"}, {"sha": "e408d8ec072e318c6faa652c31204789affec2e3", "filename": "src/test/ui/consts/const-eval/ub-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,4 +1,4 @@\n-// normalize-stderr-64bit \"0x0000000000\" -> \"0x00\"\n+// stderr-per-bitwidth\n #![feature(never_type)]\n #![allow(const_err)] // make sure we cannot allow away the errors tested here\n "}, {"sha": "c13271a1e5eca899f1923e3b66c5331d17226331", "filename": "src/test/ui/consts/const-eval/ub-int-array.64bit.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.64bit.stderr?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "previous_filename": "src/test/ui/consts/const-eval/ub-int-array.stderr"}, {"sha": "635cbb8cef66c61acd6470f4d9f5b962c78172a1", "filename": "src/test/ui/consts/const-eval/ub-int-array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.rs?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,5 +1,5 @@\n #![allow(const_err)] // make sure we cannot allow away the errors tested here\n-\n+// stderr-per-bitwidth\n //! Test the \"array of int\" fast path in validity checking, and in particular whether it\n //! points at the right array element.\n "}, {"sha": "63815c46efe142b664c5b87ddee72cd8545baada", "filename": "src/test/ui/consts/const-eval/ub-nonnull.64bit.stderr", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.64bit.stderr?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:11:1\n+  --> $DIR/ub-nonnull.rs:12:1\n    |\n LL | const NULL_PTR: NonNull<u8> = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected something greater or equal to 1\n@@ -10,7 +10,7 @@ LL | const NULL_PTR: NonNull<u8> = unsafe { mem::transmute(0usize) };\n            }\n \n error: any use of this value will cause an error\n-  --> $DIR/ub-nonnull.rs:18:30\n+  --> $DIR/ub-nonnull.rs:19:30\n    |\n LL | / const OUT_OF_BOUNDS_PTR: NonNull<u8> = { unsafe {\n LL | |     let ptr: &[u8; 256] = mem::transmute(&0u8); // &0 gets promoted so it does not dangle\n@@ -23,15 +23,15 @@ LL | | } };\n    | |____-\n    |\n note: the lint level is defined here\n-  --> $DIR/ub-nonnull.rs:14:8\n+  --> $DIR/ub-nonnull.rs:15:8\n    |\n LL | #[deny(const_err)] // this triggers a `const_err` so validation does not even happen\n    |        ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:23:1\n+  --> $DIR/ub-nonnull.rs:24:1\n    |\n LL | const NULL_U8: NonZeroU8 = unsafe { mem::transmute(0u8) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected something greater or equal to 1\n@@ -42,7 +42,7 @@ LL | const NULL_U8: NonZeroU8 = unsafe { mem::transmute(0u8) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:25:1\n+  --> $DIR/ub-nonnull.rs:26:1\n    |\n LL | const NULL_USIZE: NonZeroUsize = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected something greater or equal to 1\n@@ -53,7 +53,7 @@ LL | const NULL_USIZE: NonZeroUsize = unsafe { mem::transmute(0usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:33:1\n+  --> $DIR/ub-nonnull.rs:34:1\n    |\n LL | const UNINIT: NonZeroU8 = unsafe { MaybeUninit { uninit: () }.init };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes at .0, but expected initialized plain (non-pointer) bytes\n@@ -64,7 +64,7 @@ LL | const UNINIT: NonZeroU8 = unsafe { MaybeUninit { uninit: () }.init };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:41:1\n+  --> $DIR/ub-nonnull.rs:42:1\n    |\n LL | const BAD_RANGE1: RestrictedRange1 = unsafe { RestrictedRange1(42) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 42, but expected something in the range 10..=30\n@@ -75,7 +75,7 @@ LL | const BAD_RANGE1: RestrictedRange1 = unsafe { RestrictedRange1(42) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-nonnull.rs:47:1\n+  --> $DIR/ub-nonnull.rs:48:1\n    |\n LL | const BAD_RANGE2: RestrictedRange2 = unsafe { RestrictedRange2(20) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 20, but expected something less or equal to 10, or greater or equal to 30", "previous_filename": "src/test/ui/consts/const-eval/ub-nonnull.stderr"}, {"sha": "0bc406e01a0ce9d15c78b2ddfa0d576bfe9119b7", "filename": "src/test/ui/consts/const-eval/ub-nonnull.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-nonnull.rs?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,3 +1,4 @@\n+// stderr-per-bitwidth\n #![feature(rustc_attrs)]\n #![allow(const_err, invalid_value)] // make sure we cannot allow away the errors tested here\n "}, {"sha": "8bd4637a80be43665edd12100a36453c1b331ac4", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.64bit.stderr", "status": "renamed", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.64bit.stderr?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:12:1\n+  --> $DIR/ub-ref-ptr.rs:13:1\n    |\n LL | const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered an unaligned reference (required 2 byte alignment but found 1)\n@@ -10,7 +10,7 @@ LL | const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:16:1\n+  --> $DIR/ub-ref-ptr.rs:17:1\n    |\n LL | const UNALIGNED_BOX: Box<u16> = unsafe { mem::transmute(&[0u8; 4]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered an unaligned box (required 2 byte alignment but found 1)\n@@ -21,7 +21,7 @@ LL | const UNALIGNED_BOX: Box<u16> = unsafe { mem::transmute(&[0u8; 4]) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:20:1\n+  --> $DIR/ub-ref-ptr.rs:21:1\n    |\n LL | const NULL: &u16 = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a NULL reference\n@@ -32,7 +32,7 @@ LL | const NULL: &u16 = unsafe { mem::transmute(0usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:23:1\n+  --> $DIR/ub-ref-ptr.rs:24:1\n    |\n LL | const NULL_BOX: Box<u16> = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a NULL box\n@@ -43,7 +43,7 @@ LL | const NULL_BOX: Box<u16> = unsafe { mem::transmute(0usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:29:1\n+  --> $DIR/ub-ref-ptr.rs:30:1\n    |\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc14, but expected initialized plain (non-pointer) bytes\n@@ -54,7 +54,7 @@ LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:32:1\n+  --> $DIR/ub-ref-ptr.rs:33:1\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer at .<deref>, but expected plain (non-pointer) bytes\n@@ -65,7 +65,7 @@ LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:35:1\n+  --> $DIR/ub-ref-ptr.rs:36:1\n    |\n LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer at .<deref>, but expected plain (non-pointer) bytes\n@@ -76,7 +76,7 @@ LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[us\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:38:1\n+  --> $DIR/ub-ref-ptr.rs:39:1\n    |\n LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (created from integer)\n@@ -87,7 +87,7 @@ LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:41:1\n+  --> $DIR/ub-ref-ptr.rs:42:1\n    |\n LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling box (created from integer)\n@@ -98,7 +98,7 @@ LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:44:1\n+  --> $DIR/ub-ref-ptr.rs:45:1\n    |\n LL | const UNINIT_PTR: *const i32 = unsafe { MaybeUninit { uninit: () }.init };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized raw pointer\n@@ -109,7 +109,7 @@ LL | const UNINIT_PTR: *const i32 = unsafe { MaybeUninit { uninit: () }.init };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref-ptr.rs:46:1\n+  --> $DIR/ub-ref-ptr.rs:47:1\n    |\n LL | const UNINIT_FN_PTR: fn() = unsafe { MaybeUninit { uninit: () }.init };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected a function pointer", "previous_filename": "src/test/ui/consts/const-eval/ub-ref-ptr.stderr"}, {"sha": "8857ae4caac8328c4f6298910d7942f8fab32880", "filename": "src/test/ui/consts/const-eval/ub-ref-ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref-ptr.rs?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,4 +1,5 @@\n // ignore-tidy-linelength\n+// stderr-per-bitwidth\n #![allow(const_err, invalid_value)] // make sure we cannot allow away the errors tested here\n \n use std::mem;"}, {"sha": "def795c7f563c7399a5ff2cfca6e45543f439196", "filename": "src/test/ui/consts/const-eval/ub-uninhabit.64bit.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.64bit.stderr?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-uninhabit.rs:14:1\n+  --> $DIR/ub-uninhabit.rs:15:1\n    |\n LL | const BAD_BAD_BAD: Bar = unsafe { MaybeUninit { uninit: () }.init };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of uninhabited type Bar\n@@ -8,7 +8,7 @@ LL | const BAD_BAD_BAD: Bar = unsafe { MaybeUninit { uninit: () }.init };\n    = note: the raw bytes of the constant (size: 0, align: 1) {}\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-uninhabit.rs:17:1\n+  --> $DIR/ub-uninhabit.rs:18:1\n    |\n LL | const BAD_BAD_REF: &Bar = unsafe { mem::transmute(1usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of uninhabited type Bar at .<deref>\n@@ -19,7 +19,7 @@ LL | const BAD_BAD_REF: &Bar = unsafe { mem::transmute(1usize) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-uninhabit.rs:20:1\n+  --> $DIR/ub-uninhabit.rs:21:1\n    |\n LL | const BAD_BAD_ARRAY: [Bar; 1] = unsafe { MaybeUninit { uninit: () }.init };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of uninhabited type Bar at [0]", "previous_filename": "src/test/ui/consts/const-eval/ub-uninhabit.stderr"}, {"sha": "33fbd14c4726e0983407d186948d0ada62801acd", "filename": "src/test/ui/consts/const-eval/ub-uninhabit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-uninhabit.rs?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,3 +1,4 @@\n+// stderr-per-bitwidth\n #![allow(const_err)] // make sure we cannot allow away the errors tested here\n \n use std::mem;"}, {"sha": "e9fabd9a3bcc4dcf4058052deef1ab96f8b0c325", "filename": "src/test/ui/consts/const-eval/ub-upvars.64bit.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.64bit.stderr?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-upvars.rs:5:1\n+  --> $DIR/ub-upvars.rs:6:1\n    |\n LL | / const BAD_UPVAR: &dyn FnOnce() = &{\n LL | |     let bad_ref: &'static u16 = unsafe { mem::transmute(0usize) };", "previous_filename": "src/test/ui/consts/const-eval/ub-upvars.stderr"}, {"sha": "57dd7b9e58132a4b15b2e869a6272160014eb9a4", "filename": "src/test/ui/consts/const-eval/ub-upvars.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-upvars.rs?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,3 +1,4 @@\n+// stderr-per-bitwidth\n #![allow(const_err, invalid_value)] // make sure we cannot allow away the errors tested here\n \n use std::mem;"}, {"sha": "e42c65a1517d28b78d7778ea7bab45d9c5e9e301", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.64bit.stderr", "status": "renamed", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:37:1\n+  --> $DIR/ub-wide-ptr.rs:38:1\n    |\n LL | const STR_TOO_LONG: &str = unsafe { mem::transmute((&42u8, 999usize)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (going beyond the bounds of its allocation)\n@@ -10,7 +10,7 @@ LL | const STR_TOO_LONG: &str = unsafe { mem::transmute((&42u8, 999usize)) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:39:1\n+  --> $DIR/ub-wide-ptr.rs:40:1\n    |\n LL | const NESTED_STR_MUCH_TOO_LONG: (&str,) = (unsafe { mem::transmute((&42, usize::MAX)) },);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid reference metadata: slice is bigger than largest supported object at .0\n@@ -21,7 +21,7 @@ LL | const NESTED_STR_MUCH_TOO_LONG: (&str,) = (unsafe { mem::transmute((&42, us\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:42:1\n+  --> $DIR/ub-wide-ptr.rs:43:1\n    |\n LL | const STR_LENGTH_PTR: &str = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in wide pointer\n@@ -32,7 +32,7 @@ LL | const STR_LENGTH_PTR: &str = unsafe { mem::transmute((&42u8, &3)) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:45:1\n+  --> $DIR/ub-wide-ptr.rs:46:1\n    |\n LL | const MY_STR_LENGTH_PTR: &MyStr = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in wide pointer\n@@ -43,7 +43,7 @@ LL | const MY_STR_LENGTH_PTR: &MyStr = unsafe { mem::transmute((&42u8, &3)) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:47:1\n+  --> $DIR/ub-wide-ptr.rs:48:1\n    |\n LL | const MY_STR_MUCH_TOO_LONG: &MyStr = unsafe { mem::transmute((&42u8, usize::MAX)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid reference metadata: slice is bigger than largest supported object\n@@ -54,7 +54,7 @@ LL | const MY_STR_MUCH_TOO_LONG: &MyStr = unsafe { mem::transmute((&42u8, usize:\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:51:1\n+  --> $DIR/ub-wide-ptr.rs:52:1\n    |\n LL | const STR_NO_INIT: &str = unsafe { mem::transmute::<&[_], _>(&[MaybeUninit::<u8> { uninit: () }]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized data in `str` at .<deref>\n@@ -65,7 +65,7 @@ LL | const STR_NO_INIT: &str = unsafe { mem::transmute::<&[_], _>(&[MaybeUninit:\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:54:1\n+  --> $DIR/ub-wide-ptr.rs:55:1\n    |\n LL | const MYSTR_NO_INIT: &MyStr = unsafe { mem::transmute::<&[_], _>(&[MaybeUninit::<u8> { uninit: () }]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized data in `str` at .<deref>.0\n@@ -76,7 +76,7 @@ LL | const MYSTR_NO_INIT: &MyStr = unsafe { mem::transmute::<&[_], _>(&[MaybeUni\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:61:1\n+  --> $DIR/ub-wide-ptr.rs:62:1\n    |\n LL | / const SLICE_LENGTH_UNINIT: &[u8] = unsafe {\n LL | |\n@@ -91,7 +91,7 @@ LL | | };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:67:1\n+  --> $DIR/ub-wide-ptr.rs:68:1\n    |\n LL | const SLICE_TOO_LONG: &[u8] = unsafe { mem::transmute((&42u8, 999usize)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (going beyond the bounds of its allocation)\n@@ -102,7 +102,7 @@ LL | const SLICE_TOO_LONG: &[u8] = unsafe { mem::transmute((&42u8, 999usize)) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:70:1\n+  --> $DIR/ub-wide-ptr.rs:71:1\n    |\n LL | const SLICE_LENGTH_PTR: &[u8] = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in wide pointer\n@@ -113,7 +113,7 @@ LL | const SLICE_LENGTH_PTR: &[u8] = unsafe { mem::transmute((&42u8, &3)) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:73:1\n+  --> $DIR/ub-wide-ptr.rs:74:1\n    |\n LL | const SLICE_TOO_LONG_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, 999usize)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling box (going beyond the bounds of its allocation)\n@@ -124,7 +124,7 @@ LL | const SLICE_TOO_LONG_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, 999us\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:76:1\n+  --> $DIR/ub-wide-ptr.rs:77:1\n    |\n LL | const SLICE_LENGTH_PTR_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, &3)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in wide pointer\n@@ -135,7 +135,7 @@ LL | const SLICE_LENGTH_PTR_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, &3)\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:80:1\n+  --> $DIR/ub-wide-ptr.rs:81:1\n    |\n LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x03 at .<deref>[0], but expected a boolean\n@@ -146,7 +146,7 @@ LL | const SLICE_CONTENT_INVALID: &[bool] = &[unsafe { mem::transmute(3u8) }];\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:86:1\n+  --> $DIR/ub-wide-ptr.rs:87:1\n    |\n LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3u8) }, [false]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x03 at .<deref>.0, but expected a boolean\n@@ -157,7 +157,7 @@ LL | const MYSLICE_PREFIX_BAD: &MySliceBool = &MySlice(unsafe { mem::transmute(3\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:89:1\n+  --> $DIR/ub-wide-ptr.rs:90:1\n    |\n LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::transmute(3u8) }]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x03 at .<deref>.1[0], but expected a boolean\n@@ -168,7 +168,7 @@ LL | const MYSLICE_SUFFIX_BAD: &MySliceBool = &MySlice(true, [unsafe { mem::tran\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:96:1\n+  --> $DIR/ub-wide-ptr.rs:97:1\n    |\n LL | / const RAW_SLICE_LENGTH_UNINIT: *const [u8] = unsafe {\n LL | |\n@@ -183,7 +183,7 @@ LL | | };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:104:1\n+  --> $DIR/ub-wide-ptr.rs:105:1\n    |\n LL | const TRAIT_OBJ_SHORT_VTABLE_1: W<&dyn Trait> = unsafe { mem::transmute(W((&92u8, &3u8))) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered too small vtable at .0\n@@ -194,7 +194,7 @@ LL | const TRAIT_OBJ_SHORT_VTABLE_1: W<&dyn Trait> = unsafe { mem::transmute(W((\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:107:1\n+  --> $DIR/ub-wide-ptr.rs:108:1\n    |\n LL | const TRAIT_OBJ_SHORT_VTABLE_2: W<&dyn Trait> = unsafe { mem::transmute(W((&92u8, &3u64))) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered too small vtable at .0\n@@ -205,7 +205,7 @@ LL | const TRAIT_OBJ_SHORT_VTABLE_2: W<&dyn Trait> = unsafe { mem::transmute(W((\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:110:1\n+  --> $DIR/ub-wide-ptr.rs:111:1\n    |\n LL | const TRAIT_OBJ_INT_VTABLE: W<&dyn Trait> = unsafe { mem::transmute(W((&92u8, 4usize))) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling vtable pointer in wide pointer at .0\n@@ -216,7 +216,7 @@ LL | const TRAIT_OBJ_INT_VTABLE: W<&dyn Trait> = unsafe { mem::transmute(W((&92u\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:112:1\n+  --> $DIR/ub-wide-ptr.rs:113:1\n    |\n LL | const TRAIT_OBJ_UNALIGNED_VTABLE: &dyn Trait = unsafe { mem::transmute((&92u8, &[0u8; 128])) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered unaligned vtable pointer in wide pointer\n@@ -227,7 +227,7 @@ LL | const TRAIT_OBJ_UNALIGNED_VTABLE: &dyn Trait = unsafe { mem::transmute((&92\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:114:1\n+  --> $DIR/ub-wide-ptr.rs:115:1\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_NULL: &dyn Trait = unsafe { mem::transmute((&92u8, &[0usize; 8])) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop function pointer in vtable (not pointing to a function)\n@@ -238,7 +238,7 @@ LL | const TRAIT_OBJ_BAD_DROP_FN_NULL: &dyn Trait = unsafe { mem::transmute((&92\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:116:1\n+  --> $DIR/ub-wide-ptr.rs:117:1\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_INT: &dyn Trait = unsafe { mem::transmute((&92u8, &[1usize; 8])) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop function pointer in vtable (not pointing to a function)\n@@ -249,7 +249,7 @@ LL | const TRAIT_OBJ_BAD_DROP_FN_INT: &dyn Trait = unsafe { mem::transmute((&92u\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:118:1\n+  --> $DIR/ub-wide-ptr.rs:119:1\n    |\n LL | const TRAIT_OBJ_BAD_DROP_FN_NOT_FN_PTR: W<&dyn Trait> = unsafe { mem::transmute(W((&92u8, &[&42u8; 8]))) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop function pointer in vtable (not pointing to a function) at .0\n@@ -260,7 +260,7 @@ LL | const TRAIT_OBJ_BAD_DROP_FN_NOT_FN_PTR: W<&dyn Trait> = unsafe { mem::trans\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:122:1\n+  --> $DIR/ub-wide-ptr.rs:123:1\n    |\n LL | const TRAIT_OBJ_CONTENT_INVALID: &dyn Trait = unsafe { mem::transmute::<_, &bool>(&3u8) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x03 at .<deref>.<dyn-downcast>, but expected a boolean\n@@ -271,7 +271,7 @@ LL | const TRAIT_OBJ_CONTENT_INVALID: &dyn Trait = unsafe { mem::transmute::<_,\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:126:1\n+  --> $DIR/ub-wide-ptr.rs:127:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_NULL: *const dyn Trait = unsafe { mem::transmute((&92u8, 0usize)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling vtable pointer in wide pointer\n@@ -282,7 +282,7 @@ LL | const RAW_TRAIT_OBJ_VTABLE_NULL: *const dyn Trait = unsafe { mem::transmute\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-wide-ptr.rs:128:1\n+  --> $DIR/ub-wide-ptr.rs:129:1\n    |\n LL | const RAW_TRAIT_OBJ_VTABLE_INVALID: *const dyn Trait = unsafe { mem::transmute((&92u8, &3u64)) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered too small vtable\n@@ -293,13 +293,13 @@ LL | const RAW_TRAIT_OBJ_VTABLE_INVALID: *const dyn Trait = unsafe { mem::transm\n            }\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ub-wide-ptr.rs:134:5\n+  --> $DIR/ub-wide-ptr.rs:135:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, 0usize))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ inbounds test failed: 0x0 is not a valid pointer\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ub-wide-ptr.rs:138:5\n+  --> $DIR/ub-wide-ptr.rs:139:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, &3u64))\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds at offset N, but is outside bounds of allocN which has size N", "previous_filename": "src/test/ui/consts/const-eval/ub-wide-ptr.stderr"}, {"sha": "0fb9f7960ce1a4871f5b911d68c929203634e9f0", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,3 +1,4 @@\n+// stderr-per-bitwidth\n // ignore-tidy-linelength\n #![allow(unused)]\n #![allow(const_err)] // make sure we cannot allow away the errors tested here"}, {"sha": "c1c2dcb22695ded378bc0335671cd5143c58701f", "filename": "src/test/ui/consts/const-eval/union-const-eval-field.64bit.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.64bit.stderr?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-const-eval-field.rs:28:5\n+  --> $DIR/union-const-eval-field.rs:29:5\n    |\n LL |     const FIELD3: Field3 = unsafe { UNION.field3 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes", "previous_filename": "src/test/ui/consts/const-eval/union-const-eval-field.stderr"}, {"sha": "c91ed0acb2ee7b0027f59bb317df54e3d2c58a0d", "filename": "src/test/ui/consts/const-eval/union-const-eval-field.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.rs?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,3 +1,4 @@\n+// stderr-per-bitwidth\n #![feature(const_fn)]\n \n type Field1 = i32;"}, {"sha": "f8b9478ad1a60fbc37b5479519c6c8d4deea796d", "filename": "src/test/ui/consts/const-eval/union-ice.64bit.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.64bit.stderr?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ice.rs:14:1\n+  --> $DIR/union-ice.rs:15:1\n    |\n LL | const FIELD3: Field3 = unsafe { UNION.field3 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes\n@@ -10,7 +10,7 @@ LL | const FIELD3: Field3 = unsafe { UNION.field3 };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ice.rs:16:1\n+  --> $DIR/union-ice.rs:17:1\n    |\n LL | / const FIELD_PATH: Struct = Struct {\n LL | |     a: 42,\n@@ -24,7 +24,7 @@ LL | | };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ice.rs:26:1\n+  --> $DIR/union-ice.rs:27:1\n    |\n LL | / const FIELD_PATH2: Struct2 = Struct2 {\n LL | |     b: [", "previous_filename": "src/test/ui/consts/const-eval/union-ice.stderr"}, {"sha": "c1e780d9bb72e2059f0358773080b5353adf3926", "filename": "src/test/ui/consts/const-eval/union-ice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.rs?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,3 +1,4 @@\n+// stderr-per-bitwidth\n #![feature(const_fn)]\n \n type Field1 = i32;"}, {"sha": "d3e4bad968bd04683b72420f788e409a75b1ce2c", "filename": "src/test/ui/consts/const-eval/union-ub.64bit.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.64bit.stderr?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub.rs:32:1\n+  --> $DIR/union-ub.rs:33:1\n    |\n LL | const BAD_BOOL: bool = unsafe { DummyUnion { u8: 42 }.bool};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x2a, but expected a boolean\n@@ -10,7 +10,7 @@ LL | const BAD_BOOL: bool = unsafe { DummyUnion { u8: 42 }.bool};\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ub.rs:34:1\n+  --> $DIR/union-ub.rs:35:1\n    |\n LL | const UNINIT_BOOL: bool = unsafe { DummyUnion { unit: () }.bool};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected a boolean", "previous_filename": "src/test/ui/consts/const-eval/union-ub.stderr"}, {"sha": "c1bfe69a706e446736bcefa25e9b233c72e332dd", "filename": "src/test/ui/consts/const-eval/union-ub.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.rs?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,3 +1,4 @@\n+// stderr-per-bitwidth\n #![allow(const_err)] // make sure we cannot allow away the errors tested here\n \n #[repr(C)]"}, {"sha": "bb91b43e20b4b60b9b8873765a0b1b9e65caa587", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.64bit.stderr", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,26 +1,26 @@\n warning: any use of this value will cause an error\n-  --> $DIR/validate_uninhabited_zsts.rs:5:14\n+  --> $DIR/validate_uninhabited_zsts.rs:6:14\n    |\n LL |     unsafe { std::mem::transmute(()) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n    |              |\n    |              transmuting to uninhabited type\n-   |              inside `foo` at $DIR/validate_uninhabited_zsts.rs:5:14\n-   |              inside `FOO` at $DIR/validate_uninhabited_zsts.rs:15:26\n+   |              inside `foo` at $DIR/validate_uninhabited_zsts.rs:6:14\n+   |              inside `FOO` at $DIR/validate_uninhabited_zsts.rs:16:26\n ...\n LL | const FOO: [Empty; 3] = [foo(); 3];\n    | -----------------------------------\n    |\n note: the lint level is defined here\n-  --> $DIR/validate_uninhabited_zsts.rs:14:8\n+  --> $DIR/validate_uninhabited_zsts.rs:15:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/validate_uninhabited_zsts.rs:18:1\n+  --> $DIR/validate_uninhabited_zsts.rs:19:1\n    |\n LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of uninhabited type Empty at [0]\n@@ -29,7 +29,7 @@ LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    = note: the raw bytes of the constant (size: 0, align: 1) {}\n \n warning: the type `!` does not permit zero-initialization\n-  --> $DIR/validate_uninhabited_zsts.rs:5:14\n+  --> $DIR/validate_uninhabited_zsts.rs:6:14\n    |\n LL |     unsafe { std::mem::transmute(()) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -41,7 +41,7 @@ LL |     unsafe { std::mem::transmute(()) }\n    = note: the `!` type has no valid value\n \n warning: the type `Empty` does not permit zero-initialization\n-  --> $DIR/validate_uninhabited_zsts.rs:18:35\n+  --> $DIR/validate_uninhabited_zsts.rs:19:35\n    |\n LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.stderr"}, {"sha": "a32dfa2918ba7375a944c75eb30cb67c6eb5f14f", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,3 +1,4 @@\n+// stderr-per-bitwidth\n #![feature(const_fn)]\n #![feature(const_fn_transmute)]\n "}, {"sha": "1112499a3ee6435d879361247f2c6de49d49d7c4", "filename": "src/test/ui/consts/const-points-to-static.64bit.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.64bit.stderr?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const-points-to-static.rs:5:1\n+  --> $DIR/const-points-to-static.rs:6:1\n    |\n LL | const TEST: &u8 = &MY_STATIC;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a reference pointing to a static variable\n@@ -12,7 +12,7 @@ LL | const TEST: &u8 = &MY_STATIC;\n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const-points-to-static.rs:5:20\n+  --> $DIR/const-points-to-static.rs:6:20\n    |\n LL | const TEST: &u8 = &MY_STATIC;\n    |                    ^^^^^^^^^", "previous_filename": "src/test/ui/consts/const-points-to-static.stderr"}, {"sha": "8a97a9fec014537e3d26eae8ae9e1184ac67f353", "filename": "src/test/ui/consts/const-points-to-static.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.rs?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n+// stderr-per-bitwidth\n \n #![allow(dead_code)]\n "}, {"sha": "3335c5bf72ef58669671d9c2d574f987784a2a67", "filename": "src/test/ui/consts/issue-63952.64bit.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fissue-63952.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fissue-63952.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-63952.64bit.stderr?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/issue-63952.rs:16:1\n+  --> $DIR/issue-63952.rs:17:1\n    |\n LL | / const SLICE_WAY_TOO_LONG: &[u8] = unsafe {\n LL | |     SliceTransmute {", "previous_filename": "src/test/ui/consts/issue-63952.stderr"}, {"sha": "5c83e6f45c9ba256748f12133e0dc583272df790", "filename": "src/test/ui/consts/issue-63952.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fissue-63952.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fissue-63952.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-63952.rs?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,4 +1,5 @@\n // Regression test for #63952, shouldn't hang.\n+// stderr-per-bitwidth\n \n #[repr(C)]\n #[derive(Copy, Clone)]"}, {"sha": "2639bc4812cbb9255cbad187f8bccabd6cf5b581", "filename": "src/test/ui/consts/issue-79690.64bit.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fissue-79690.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fissue-79690.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-79690.64bit.stderr?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/issue-79690.rs:29:1\n+  --> $DIR/issue-79690.rs:30:1\n    |\n LL | const G: Fat = unsafe { Transmute { t: FOO }.u };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered (potentially part of) a pointer at .1.<deref>.size.foo, but expected plain (non-pointer) bytes", "previous_filename": "src/test/ui/consts/issue-79690.stderr"}, {"sha": "56747bf5a11072156bdd4c79d1619fe3ebf71f4a", "filename": "src/test/ui/consts/issue-79690.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fissue-79690.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fissue-79690.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-79690.rs?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,5 +1,6 @@\n // ignore-32bit\n // This test gives a different error on 32-bit architectures.\n+// stderr-per-bitwidth\n \n union Transmute<T: Copy, U: Copy> {\n     t: T,"}, {"sha": "5521cd34aadcc605780d344d340d19f26ee38a4c", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static2.64bit.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.64bit.stderr?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static2.rs:10:1\n+  --> $DIR/const_refers_to_static2.rs:11:1\n    |\n LL | / const REF_INTERIOR_MUT: &usize = {\n LL | |\n@@ -16,7 +16,7 @@ LL | | };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static2.rs:19:1\n+  --> $DIR/const_refers_to_static2.rs:20:1\n    |\n LL | / const READ_IMMUT: &usize = {\n LL | |\n@@ -35,17 +35,17 @@ LL | | };\n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static2.rs:15:18\n+  --> $DIR/const_refers_to_static2.rs:16:18\n    |\n LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n    |                  ^^^\n help: skipping check for `const_raw_ptr_deref` feature\n-  --> $DIR/const_refers_to_static2.rs:15:14\n+  --> $DIR/const_refers_to_static2.rs:16:14\n    |\n LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static2.rs:24:6\n+  --> $DIR/const_refers_to_static2.rs:25:6\n    |\n LL |     &FOO\n    |      ^^^", "previous_filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static2.stderr"}, {"sha": "2548474d4fd1c05f39264adfbeef2844727c09b4", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n+// stderr-per-bitwidth\n #![allow(const_err)]\n \n use std::sync::atomic::AtomicUsize;"}, {"sha": "7228f7178ff87c88b01e8ddfdb10b98a01dc5bdb", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.64bit.stderr", "status": "renamed", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static_cross_crate.rs:11:1\n+  --> $DIR/const_refers_to_static_cross_crate.rs:12:1\n    |\n LL | / const SLICE_MUT: &[u8; 1] = {\n LL | |\n@@ -15,13 +15,13 @@ LL | | };\n            }\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:46:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:47:9\n    |\n LL |         SLICE_MUT => true,\n    |         ^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static_cross_crate.rs:18:1\n+  --> $DIR/const_refers_to_static_cross_crate.rs:19:1\n    |\n LL | / const U8_MUT: &u8 = {\n LL | |\n@@ -37,13 +37,13 @@ LL | | };\n            }\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:55:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:56:9\n    |\n LL |         U8_MUT => true,\n    |         ^^^^^^\n \n warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:28:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:29:15\n    |\n LL | / const U8_MUT2: &u8 = {\n LL | |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n@@ -56,21 +56,21 @@ LL | | };\n    | |__-\n    |\n note: the lint level is defined here\n-  --> $DIR/const_refers_to_static_cross_crate.rs:26:8\n+  --> $DIR/const_refers_to_static_cross_crate.rs:27:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:66:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:67:9\n    |\n LL |         U8_MUT2 => true,\n    |         ^^^^^^^\n \n warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:36:51\n+  --> $DIR/const_refers_to_static_cross_crate.rs:37:51\n    |\n LL | / const U8_MUT3: &u8 = {\n LL | |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n@@ -83,97 +83,97 @@ LL | | };\n    | |__-\n    |\n note: the lint level is defined here\n-  --> $DIR/const_refers_to_static_cross_crate.rs:34:8\n+  --> $DIR/const_refers_to_static_cross_crate.rs:35:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:74:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:75:9\n    |\n LL |         U8_MUT3 => true,\n    |         ^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:46:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:47:9\n    |\n LL |         SLICE_MUT => true,\n    |         ^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:55:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:56:9\n    |\n LL |         U8_MUT => true,\n    |         ^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:66:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:67:9\n    |\n LL |         U8_MUT2 => true,\n    |         ^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:74:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:75:9\n    |\n LL |         U8_MUT3 => true,\n    |         ^^^^^^^\n \n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:15:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:16:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:15:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:16:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:22:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:23:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:22:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:23:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:22:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:23:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:28:17\n+  --> $DIR/const_refers_to_static_cross_crate.rs:29:17\n    |\n LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:36:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:37:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:36:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:37:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:36:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:37:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check for `const_panic` feature\n-  --> $DIR/const_refers_to_static_cross_crate.rs:36:77\n+  --> $DIR/const_refers_to_static_cross_crate.rs:37:77\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                                                                             ^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:36:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:37:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.stderr"}, {"sha": "53f70198f4ced1529e39445cc6df1cd0c046b539", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,5 +1,6 @@\n // compile-flags: -Zunleash-the-miri-inside-of-you\n // aux-build:static_cross_crate.rs\n+// stderr-per-bitwidth\n #![allow(const_err)]\n \n #![feature(exclusive_range_pattern, half_open_range_patterns)]"}, {"sha": "606184e5732557470647360f7bcbf9778c07bb1c", "filename": "src/test/ui/consts/miri_unleashed/mutable_references_err.64bit.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_err.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_err.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_err.64bit.stderr?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/mutable_references_err.rs:16:1\n+  --> $DIR/mutable_references_err.rs:17:1\n    |\n LL | / const MUH: Meh = Meh {\n LL | |     x: &UnsafeCell::new(42),\n@@ -12,7 +12,7 @@ LL | | };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/mutable_references_err.rs:26:1\n+  --> $DIR/mutable_references_err.rs:27:1\n    |\n LL | const SNEAKY: &dyn Sync = &Synced { x: UnsafeCell::new(42) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered `UnsafeCell` in a `const` at .<deref>.<dyn-downcast>.x\n@@ -23,7 +23,7 @@ LL | const SNEAKY: &dyn Sync = &Synced { x: UnsafeCell::new(42) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/mutable_references_err.rs:30:1\n+  --> $DIR/mutable_references_err.rs:31:1\n    |\n LL | const BLUNT: &mut i32 = &mut 42;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered mutable reference in a `const`\n@@ -36,17 +36,17 @@ LL | const BLUNT: &mut i32 = &mut 42;\n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/mutable_references_err.rs:17:8\n+  --> $DIR/mutable_references_err.rs:18:8\n    |\n LL |     x: &UnsafeCell::new(42),\n    |        ^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/mutable_references_err.rs:26:27\n+  --> $DIR/mutable_references_err.rs:27:27\n    |\n LL | const SNEAKY: &dyn Sync = &Synced { x: UnsafeCell::new(42) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/mutable_references_err.rs:30:25\n+  --> $DIR/mutable_references_err.rs:31:25\n    |\n LL | const BLUNT: &mut i32 = &mut 42;\n    |                         ^^^^^^^", "previous_filename": "src/test/ui/consts/miri_unleashed/mutable_references_err.stderr"}, {"sha": "722b9cf94e8599a7fb856e9977044e3939b2fd97", "filename": "src/test/ui/consts/miri_unleashed/mutable_references_err.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_err.rs?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,3 +1,4 @@\n+// stderr-per-bitwidth\n // compile-flags: -Zunleash-the-miri-inside-of-you\n \n #![allow(const_err)]"}, {"sha": "2c891b1d79c134678bc7a071519dfeefecf1ba32", "filename": "src/test/ui/consts/std/alloc.64bit.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fstd%2Falloc.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fstd%2Falloc.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstd%2Falloc.64bit.stderr?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/alloc.rs:7:1\n+  --> $DIR/alloc.rs:8:1\n    |\n LL | const LAYOUT_INVALID: Layout = unsafe { Layout::from_size_align_unchecked(0x1000, 0x00) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0 at .align_, but expected something greater or equal to 1", "previous_filename": "src/test/ui/consts/std/alloc.stderr"}, {"sha": "14eadc4487f9ea840f75b059d9a789e86c80393a", "filename": "src/test/ui/consts/std/alloc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fstd%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fstd%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstd%2Falloc.rs?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,3 +1,4 @@\n+// stderr-per-bitwidth\n use std::alloc::Layout;\n \n // ok"}, {"sha": "dd677f1b21edd55227c9292d1b67cf08c04faf97", "filename": "src/test/ui/consts/validate_never_arrays.64bit.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.64bit.stderr?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/validate_never_arrays.rs:3:1\n+  --> $DIR/validate_never_arrays.rs:4:1\n    |\n LL | const _: &[!; 1] = unsafe { &*(1_usize as *const [!; 1]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of the never type `!` at .<deref>[0]\n@@ -10,7 +10,7 @@ LL | const _: &[!; 1] = unsafe { &*(1_usize as *const [!; 1]) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/validate_never_arrays.rs:6:1\n+  --> $DIR/validate_never_arrays.rs:7:1\n    |\n LL | const _: &[!] = unsafe { &*(1_usize as *const [!; 1]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of the never type `!` at .<deref>[0]\n@@ -21,7 +21,7 @@ LL | const _: &[!] = unsafe { &*(1_usize as *const [!; 1]) };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/validate_never_arrays.rs:7:1\n+  --> $DIR/validate_never_arrays.rs:8:1\n    |\n LL | const _: &[!] = unsafe { &*(1_usize as *const [!; 42]) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of the never type `!` at .<deref>[0]", "previous_filename": "src/test/ui/consts/validate_never_arrays.stderr"}, {"sha": "1990fb073970ecc903b6d4160341f80fd4d7c0bb", "filename": "src/test/ui/consts/validate_never_arrays.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fvalidate_never_arrays.rs?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -1,3 +1,4 @@\n+// stderr-per-bitwidth\n #![feature(const_raw_ptr_deref, never_type)]\n \n const _: &[!; 1] = unsafe { &*(1_usize as *const [!; 1]) }; //~ ERROR undefined behavior"}, {"sha": "b7693a3cb1431b9275079e51c9d66e36800e84c4", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -376,12 +376,24 @@ pub fn expected_output_path(\n     testpaths.file.with_extension(extension)\n }\n \n-pub const UI_EXTENSIONS: &[&str] = &[UI_STDERR, UI_STDOUT, UI_FIXED, UI_RUN_STDERR, UI_RUN_STDOUT];\n+pub const UI_EXTENSIONS: &[&str] = &[\n+    UI_STDERR,\n+    UI_STDOUT,\n+    UI_FIXED,\n+    UI_RUN_STDERR,\n+    UI_RUN_STDOUT,\n+    UI_STDERR_64,\n+    UI_STDERR_32,\n+    UI_STDERR_16,\n+];\n pub const UI_STDERR: &str = \"stderr\";\n pub const UI_STDOUT: &str = \"stdout\";\n pub const UI_FIXED: &str = \"fixed\";\n pub const UI_RUN_STDERR: &str = \"run.stderr\";\n pub const UI_RUN_STDOUT: &str = \"run.stdout\";\n+pub const UI_STDERR_64: &str = \"64bit.stderr\";\n+pub const UI_STDERR_32: &str = \"32bit.stderr\";\n+pub const UI_STDERR_16: &str = \"16bit.stderr\";\n \n /// Absolute path to the directory where all output for all tests in the given\n /// `relative_dir` group should reside. Example:"}, {"sha": "1a49b1e7b17b8c011c2f7549991f5c36e2169894", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/091433d6990c4f2e1286ba1757e584719d4038ad/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=091433d6990c4f2e1286ba1757e584719d4038ad", "patch": "@@ -3185,7 +3185,7 @@ impl<'test> TestCx<'test> {\n                 }\n                 if !self.props.dont_check_compiler_stderr {\n                     let kind = if self.props.stderr_per_bitwidth {\n-                        format!(\"{}bit.stderr\", get_pointer_width(&self.config.target))\n+                        format!(\"{}.stderr\", get_pointer_width(&self.config.target))\n                     } else {\n                         String::from(\"stderr\")\n                     };"}]}