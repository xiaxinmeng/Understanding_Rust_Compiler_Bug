{"sha": "edd4c1d8a6c270fe39ae881c23c722c658c87c32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZDRjMWQ4YTZjMjcwZmUzOWFlODgxYzIzYzcyMmM2NThjODdjMzI=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-16T21:10:26Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-16T21:10:26Z"}, "message": "Merge #842\n\n842: Turn ImplBlock into a copy type just containing IDs r=matklad a=flodiebold\n\nThis makes it more like the other code model types.\r\n\r\nAlso make Module::definition_source/declaration_source return HirFileIds, to\r\nmake them more like the other source functions.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "0e6b42eaaa3228d7af8d54355d034e698db5c743", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e6b42eaaa3228d7af8d54355d034e698db5c743"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edd4c1d8a6c270fe39ae881c23c722c658c87c32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edd4c1d8a6c270fe39ae881c23c722c658c87c32", "html_url": "https://github.com/rust-lang/rust/commit/edd4c1d8a6c270fe39ae881c23c722c658c87c32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edd4c1d8a6c270fe39ae881c23c722c658c87c32/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "6932b77093fd444def066e80ed37defa2742f2a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6932b77093fd444def066e80ed37defa2742f2a9", "html_url": "https://github.com/rust-lang/rust/commit/6932b77093fd444def066e80ed37defa2742f2a9"}, {"sha": "0242acae5388188c06d826f4aed41eee3e91d018", "url": "https://api.github.com/repos/rust-lang/rust/commits/0242acae5388188c06d826f4aed41eee3e91d018", "html_url": "https://github.com/rust-lang/rust/commit/0242acae5388188c06d826f4aed41eee3e91d018"}], "stats": {"total": 142, "additions": 65, "deletions": 77}, "files": [{"sha": "ee410c548b10c200a9bdfb1c699bcfcee41ae573", "filename": "crates/ra_cli/src/analysis_stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edd4c1d8a6c270fe39ae881c23c722c658c87c32/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd4c1d8a6c270fe39ae881c23c722c658c87c32/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs?ref=edd4c1d8a6c270fe39ae881c23c722c658c87c32", "patch": "@@ -36,10 +36,10 @@ pub fn run(verbose: bool) -> Result<()> {\n             }\n \n             for impl_block in module.impl_blocks(&db) {\n-                for item in impl_block.items() {\n+                for item in impl_block.items(&db) {\n                     num_decls += 1;\n                     match item {\n-                        ImplItem::Method(f) => funcs.push(*f),\n+                        ImplItem::Method(f) => funcs.push(f),\n                         _ => {}\n                     }\n                 }"}, {"sha": "99f0049057d1b0b0eb0147ed9222f2b4b8a1607c", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/edd4c1d8a6c270fe39ae881c23c722c658c87c32/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd4c1d8a6c270fe39ae881c23c722c658c87c32/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=edd4c1d8a6c270fe39ae881c23c722c658c87c32", "patch": "@@ -1,7 +1,7 @@\n use std::sync::Arc;\n \n use relative_path::RelativePathBuf;\n-use ra_db::{CrateId, FileId, SourceRootId, Edition};\n+use ra_db::{CrateId, SourceRootId, Edition};\n use ra_syntax::{ast::self, TreeArc, SyntaxNode};\n \n use crate::{\n@@ -16,7 +16,7 @@ use crate::{\n     docs::{Documentation, Docs, docs_from_ast},\n     module_tree::ModuleId,\n     ids::{FunctionId, StructId, EnumId, AstItemDef, ConstId, StaticId, TraitId, TypeId},\n-    impl_block::{ImplId, ImplBlock},\n+    impl_block::ImplBlock,\n     resolve::Resolver,\n };\n \n@@ -107,7 +107,7 @@ impl Module {\n     }\n \n     /// Returns a node which defines this module. That is, a file or a `mod foo {}` with items.\n-    pub fn definition_source(&self, db: &impl PersistentHirDatabase) -> (FileId, ModuleSource) {\n+    pub fn definition_source(&self, db: &impl PersistentHirDatabase) -> (HirFileId, ModuleSource) {\n         self.definition_source_impl(db)\n     }\n \n@@ -116,7 +116,7 @@ impl Module {\n     pub fn declaration_source(\n         &self,\n         db: &impl HirDatabase,\n-    ) -> Option<(FileId, TreeArc<ast::Module>)> {\n+    ) -> Option<(HirFileId, TreeArc<ast::Module>)> {\n         self.declaration_source_impl(db)\n     }\n \n@@ -129,11 +129,6 @@ impl Module {\n         self.import_source_impl(db, import)\n     }\n \n-    /// Returns the syntax of the impl block in this module\n-    pub fn impl_source(&self, db: &impl HirDatabase, impl_id: ImplId) -> TreeArc<ast::ImplBlock> {\n-        self.impl_source_impl(db, impl_id)\n-    }\n-\n     /// Returns the crate this module is part of.\n     pub fn krate(&self, _db: &impl PersistentHirDatabase) -> Option<Crate> {\n         Some(self.krate)\n@@ -202,7 +197,7 @@ impl Module {\n         module_impl_blocks\n             .impls\n             .iter()\n-            .map(|(impl_id, _)| ImplBlock::from_id(module_impl_blocks.clone(), impl_id))\n+            .map(|(impl_id, _)| ImplBlock::from_id(self, impl_id))\n             .collect()\n     }\n }"}, {"sha": "2d3058afdd09aa609d02d88ace3a92c4e0d4d9c7", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/edd4c1d8a6c270fe39ae881c23c722c658c87c32/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd4c1d8a6c270fe39ae881c23c722c658c87c32/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=edd4c1d8a6c270fe39ae881c23c722c658c87c32", "patch": "@@ -1,13 +1,12 @@\n-use ra_db::FileId;\n use ra_syntax::{ast, SyntaxNode, TreeArc};\n \n use crate::{\n     Module, ModuleSource, Problem,\n     Name,\n     module_tree::ModuleId,\n-    impl_block::ImplId,\n-    nameres::{lower::ImportId},\n+    nameres::lower::ImportId,\n     HirDatabase, PersistentHirDatabase,\n+    HirFileId\n };\n \n impl Module {\n@@ -24,22 +23,21 @@ impl Module {\n     pub(crate) fn definition_source_impl(\n         &self,\n         db: &impl PersistentHirDatabase,\n-    ) -> (FileId, ModuleSource) {\n+    ) -> (HirFileId, ModuleSource) {\n         let module_tree = db.module_tree(self.krate);\n         let file_id = self.module_id.file_id(&module_tree);\n         let decl_id = self.module_id.decl_id(&module_tree);\n         let module_source = ModuleSource::new(db, file_id, decl_id);\n-        let file_id = file_id.as_original_file();\n         (file_id, module_source)\n     }\n \n     pub(crate) fn declaration_source_impl(\n         &self,\n         db: &impl HirDatabase,\n-    ) -> Option<(FileId, TreeArc<ast::Module>)> {\n+    ) -> Option<(HirFileId, TreeArc<ast::Module>)> {\n         let module_tree = db.module_tree(self.krate);\n         let link = self.module_id.parent_link(&module_tree)?;\n-        let file_id = link.owner(&module_tree).file_id(&module_tree).as_original_file();\n+        let file_id = link.owner(&module_tree).file_id(&module_tree);\n         let src = link.source(&module_tree, db);\n         Some((file_id, src))\n     }\n@@ -54,16 +52,6 @@ impl Module {\n         source_map.get(&source, import)\n     }\n \n-    pub(crate) fn impl_source_impl(\n-        &self,\n-        db: &impl HirDatabase,\n-        impl_id: ImplId,\n-    ) -> TreeArc<ast::ImplBlock> {\n-        let source_map = db.impls_in_module_source_map(*self);\n-        let (_, source) = self.definition_source(db);\n-        source_map.get(&source, impl_id)\n-    }\n-\n     pub(crate) fn crate_root_impl(&self, db: &impl PersistentHirDatabase) -> Module {\n         let module_tree = db.module_tree(self.krate);\n         let module_id = self.module_id.crate_root(&module_tree);"}, {"sha": "3e11dd6ad72667c85f93e2a77b1cf1b1d2e2b17f", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/edd4c1d8a6c270fe39ae881c23c722c658c87c32/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd4c1d8a6c270fe39ae881c23c722c658c87c32/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=edd4c1d8a6c270fe39ae881c23c722c658c87c32", "patch": "@@ -74,7 +74,10 @@ impl HirFileId {\n         }\n     }\n \n-    pub(crate) fn as_original_file(self) -> FileId {\n+    /// XXX: this is a temporary function, which should go away when we implement the\n+    /// nameresolution+macro expansion combo. Prefer using `original_file` if\n+    /// possible.\n+    pub fn as_original_file(self) -> FileId {\n         match self.0 {\n             HirFileIdRepr::File(file_id) => file_id,\n             HirFileIdRepr::Macro(_r) => panic!(\"macro generated file: {:?}\", self),"}, {"sha": "4d8bdf33a6c956133b3d3f9c1d2a75bdd5bc372a", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/edd4c1d8a6c270fe39ae881c23c722c658c87c32/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd4c1d8a6c270fe39ae881c23c722c658c87c32/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=edd4c1d8a6c270fe39ae881c23c722c658c87c32", "patch": "@@ -38,9 +38,9 @@ impl ImplSourceMap {\n     }\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq)]\n+#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n pub struct ImplBlock {\n-    module_impl_blocks: Arc<ModuleImplBlocks>,\n+    module: Module,\n     impl_id: ImplId,\n }\n \n@@ -50,51 +50,54 @@ impl ImplBlock {\n         item: ImplItem,\n     ) -> Option<ImplBlock> {\n         let impl_id = *module_impl_blocks.impls_by_def.get(&item)?;\n-        Some(ImplBlock { module_impl_blocks, impl_id })\n+        Some(ImplBlock { module: module_impl_blocks.module, impl_id })\n     }\n \n-    pub(crate) fn from_id(module_impl_blocks: Arc<ModuleImplBlocks>, impl_id: ImplId) -> ImplBlock {\n-        ImplBlock { module_impl_blocks, impl_id }\n+    pub(crate) fn from_id(module: Module, impl_id: ImplId) -> ImplBlock {\n+        ImplBlock { module, impl_id }\n     }\n \n-    pub fn id(&self) -> ImplId {\n-        self.impl_id\n+    /// Returns the syntax of the impl block\n+    pub fn source(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::ImplBlock>) {\n+        let source_map = db.impls_in_module_source_map(self.module);\n+        let (file_id, source) = self.module.definition_source(db);\n+        (file_id, source_map.get(&source, self.impl_id))\n     }\n \n-    fn impl_data(&self) -> &ImplData {\n-        &self.module_impl_blocks.impls[self.impl_id]\n+    pub fn id(&self) -> ImplId {\n+        self.impl_id\n     }\n \n     pub fn module(&self) -> Module {\n-        self.module_impl_blocks.module\n+        self.module\n     }\n \n-    pub fn target_trait_ref(&self) -> Option<&TypeRef> {\n-        self.impl_data().target_trait()\n+    pub fn target_trait_ref(&self, db: &impl HirDatabase) -> Option<TypeRef> {\n+        db.impls_in_module(self.module).impls[self.impl_id].target_trait().cloned()\n     }\n \n-    pub fn target_type(&self) -> &TypeRef {\n-        self.impl_data().target_type()\n+    pub fn target_type(&self, db: &impl HirDatabase) -> TypeRef {\n+        db.impls_in_module(self.module).impls[self.impl_id].target_type().clone()\n     }\n \n     pub fn target_ty(&self, db: &impl HirDatabase) -> Ty {\n-        Ty::from_hir(db, &self.resolver(db), self.target_type())\n+        Ty::from_hir(db, &self.resolver(db), &self.target_type(db))\n     }\n \n     pub fn target_trait(&self, db: &impl HirDatabase) -> Option<Trait> {\n-        if let Some(TypeRef::Path(path)) = self.target_trait_ref() {\n+        if let Some(TypeRef::Path(path)) = self.target_trait_ref(db) {\n             let resolver = self.resolver(db);\n             if let Some(Resolution::Def(ModuleDef::Trait(tr))) =\n-                resolver.resolve_path(db, path).take_types()\n+                resolver.resolve_path(db, &path).take_types()\n             {\n                 return Some(tr);\n             }\n         }\n         None\n     }\n \n-    pub fn items(&self) -> &[ImplItem] {\n-        self.impl_data().items()\n+    pub fn items(&self, db: &impl HirDatabase) -> Vec<ImplItem> {\n+        db.impls_in_module(self.module).impls[self.impl_id].items().to_vec()\n     }\n \n     pub fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n@@ -181,7 +184,7 @@ impl_arena_id!(ImplId);\n /// we don't need to do the second step again.\n #[derive(Debug, PartialEq, Eq)]\n pub struct ModuleImplBlocks {\n-    module: Module,\n+    pub(crate) module: Module,\n     pub(crate) impls: Arena<ImplId, ImplData>,\n     impls_by_def: FxHashMap<ImplItem, ImplId>,\n }"}, {"sha": "8d1076774dab86cdaa858517dfec9e48eea45569", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/edd4c1d8a6c270fe39ae881c23c722c658c87c32/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd4c1d8a6c270fe39ae881c23c722c658c87c32/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=edd4c1d8a6c270fe39ae881c23c722c658c87c32", "patch": "@@ -40,32 +40,25 @@ pub struct CrateImplBlocks {\n }\n \n impl CrateImplBlocks {\n-    pub fn lookup_impl_blocks<'a>(\n-        &'a self,\n-        db: &'a impl HirDatabase,\n-        ty: &Ty,\n-    ) -> impl Iterator<Item = (Module, ImplBlock)> + 'a {\n+    pub fn lookup_impl_blocks<'a>(&'a self, ty: &Ty) -> impl Iterator<Item = ImplBlock> + 'a {\n         let fingerprint = TyFingerprint::for_impl(ty);\n         fingerprint.and_then(|f| self.impls.get(&f)).into_iter().flat_map(|i| i.iter()).map(\n             move |(module_id, impl_id)| {\n                 let module = Module { krate: self.krate, module_id: *module_id };\n-                let module_impl_blocks = db.impls_in_module(module);\n-                (module, ImplBlock::from_id(module_impl_blocks, *impl_id))\n+                ImplBlock::from_id(module, *impl_id)\n             },\n         )\n     }\n \n     pub fn lookup_impl_blocks_for_trait<'a>(\n         &'a self,\n-        db: &'a impl HirDatabase,\n         tr: &Trait,\n-    ) -> impl Iterator<Item = (Module, ImplBlock)> + 'a {\n+    ) -> impl Iterator<Item = ImplBlock> + 'a {\n         let id = tr.id;\n         self.impls_by_trait.get(&id).into_iter().flat_map(|i| i.iter()).map(\n             move |(module_id, impl_id)| {\n                 let module = Module { krate: self.krate, module_id: *module_id };\n-                let module_impl_blocks = db.impls_in_module(module);\n-                (module, ImplBlock::from_id(module_impl_blocks, *impl_id))\n+                ImplBlock::from_id(module, *impl_id)\n             },\n         )\n     }\n@@ -74,7 +67,7 @@ impl CrateImplBlocks {\n         let module_impl_blocks = db.impls_in_module(module.clone());\n \n         for (impl_id, _) in module_impl_blocks.impls.iter() {\n-            let impl_block = ImplBlock::from_id(Arc::clone(&module_impl_blocks), impl_id);\n+            let impl_block = ImplBlock::from_id(module_impl_blocks.module, impl_id);\n \n             let target_ty = impl_block.target_ty(db);\n \n@@ -159,11 +152,11 @@ impl Ty {\n             };\n             let impls = db.impls_in_crate(krate);\n \n-            for (_, impl_block) in impls.lookup_impl_blocks(db, &derefed_ty) {\n-                for item in impl_block.items() {\n+            for impl_block in impls.lookup_impl_blocks(&derefed_ty) {\n+                for item in impl_block.items(db) {\n                     match item {\n                         ImplItem::Method(f) => {\n-                            if let Some(result) = callback(*f) {\n+                            if let Some(result) = callback(f) {\n                                 return Some(result);\n                             }\n                         }\n@@ -185,9 +178,9 @@ impl Ty {\n         let krate = def_crate(db, &self)?;\n         let impls = db.impls_in_crate(krate);\n \n-        for (_, impl_block) in impls.lookup_impl_blocks(db, &self) {\n-            for item in impl_block.items() {\n-                if let Some(result) = callback(*item) {\n+        for impl_block in impls.lookup_impl_blocks(&self) {\n+            for item in impl_block.items(db) {\n+                if let Some(result) = callback(item) {\n                     return Some(result);\n                 }\n             }"}, {"sha": "896b47f1052edbccfa71f84d536b7657e8cfe07c", "filename": "crates/ra_ide_api/src/impls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/edd4c1d8a6c270fe39ae881c23c722c658c87c32/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd4c1d8a6c270fe39ae881c23c722c658c87c32/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs?ref=edd4c1d8a6c270fe39ae881c23c722c658c87c32", "patch": "@@ -50,8 +50,8 @@ fn impls_for_def(\n \n     Some(\n         impls\n-            .lookup_impl_blocks(db, &ty)\n-            .map(|(module, imp)| NavigationTarget::from_impl_block(db, module, &imp))\n+            .lookup_impl_blocks(&ty)\n+            .map(|imp| NavigationTarget::from_impl_block(db, imp))\n             .collect(),\n     )\n }\n@@ -68,8 +68,8 @@ fn impls_for_trait(\n \n     Some(\n         impls\n-            .lookup_impl_blocks_for_trait(db, &tr)\n-            .map(|(module, imp)| NavigationTarget::from_impl_block(db, module, &imp))\n+            .lookup_impl_blocks_for_trait(&tr)\n+            .map(|imp| NavigationTarget::from_impl_block(db, imp))\n             .collect(),\n     )\n }"}, {"sha": "004921863e20809d99caf8687ffbb0a6ad5016a2", "filename": "crates/ra_ide_api/src/navigation_target.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/edd4c1d8a6c270fe39ae881c23c722c658c87c32/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd4c1d8a6c270fe39ae881c23c722c658c87c32/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs?ref=edd4c1d8a6c270fe39ae881c23c722c658c87c32", "patch": "@@ -79,6 +79,7 @@ impl NavigationTarget {\n \n     pub(crate) fn from_module(db: &RootDatabase, module: hir::Module) -> NavigationTarget {\n         let (file_id, source) = module.definition_source(db);\n+        let file_id = file_id.as_original_file();\n         let name = module.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n         match source {\n             ModuleSource::SourceFile(node) => {\n@@ -93,6 +94,7 @@ impl NavigationTarget {\n     pub(crate) fn from_module_to_decl(db: &RootDatabase, module: hir::Module) -> NavigationTarget {\n         let name = module.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n         if let Some((file_id, source)) = module.declaration_source(db) {\n+            let file_id = file_id.as_original_file();\n             return NavigationTarget::from_syntax(file_id, name, None, source.syntax());\n         }\n         NavigationTarget::from_module(db, module)\n@@ -151,12 +153,15 @@ impl NavigationTarget {\n \n     pub(crate) fn from_impl_block(\n         db: &RootDatabase,\n-        module: hir::Module,\n-        impl_block: &hir::ImplBlock,\n+        impl_block: hir::ImplBlock,\n     ) -> NavigationTarget {\n-        let (file_id, _) = module.definition_source(db);\n-        let node = module.impl_source(db, impl_block.id());\n-        NavigationTarget::from_syntax(file_id, \"impl\".into(), None, node.syntax())\n+        let (file_id, node) = impl_block.source(db);\n+        NavigationTarget::from_syntax(\n+            file_id.as_original_file(),\n+            \"impl\".into(),\n+            None,\n+            node.syntax(),\n+        )\n     }\n \n     #[cfg(test)]"}, {"sha": "e7ebf9f6e1ad062144101023c932d90fb13207a3", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/edd4c1d8a6c270fe39ae881c23c722c658c87c32/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd4c1d8a6c270fe39ae881c23c722c658c87c32/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=edd4c1d8a6c270fe39ae881c23c722c658c87c32", "patch": "@@ -100,6 +100,7 @@ fn rename_mod(\n     if let Some(module) = source_binder::module_from_declaration(db, position.file_id, &ast_module)\n     {\n         let (file_id, module_source) = module.definition_source(db);\n+        let file_id = file_id.as_original_file();\n         match module_source {\n             ModuleSource::SourceFile(..) => {\n                 let mod_path: RelativePathBuf = db.file_relative_path(file_id);"}]}