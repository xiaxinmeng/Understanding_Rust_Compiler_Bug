{"sha": "d2d8bcb50e997794c8d75fb154f692b45c36c462", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyZDhiY2I1MGU5OTc3OTRjOGQ3NWZiMTU0ZjY5MmI0NWMzNmM0NjI=", "commit": {"author": {"name": "Nathan West", "email": "Lucretiel@gmail.com", "date": "2020-08-28T02:49:16Z"}, "committer": {"name": "Nathan West", "email": "Lucretiel@gmail.com", "date": "2020-08-28T02:49:16Z"}, "message": "Typo fixes", "tree": {"sha": "2f7cd40b34910a9ba37fdcd1d31bc5abf0d59067", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f7cd40b34910a9ba37fdcd1d31bc5abf0d59067"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2d8bcb50e997794c8d75fb154f692b45c36c462", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2d8bcb50e997794c8d75fb154f692b45c36c462", "html_url": "https://github.com/rust-lang/rust/commit/d2d8bcb50e997794c8d75fb154f692b45c36c462", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2d8bcb50e997794c8d75fb154f692b45c36c462/comments", "author": {"login": "Lucretiel", "id": 1823405, "node_id": "MDQ6VXNlcjE4MjM0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1823405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lucretiel", "html_url": "https://github.com/Lucretiel", "followers_url": "https://api.github.com/users/Lucretiel/followers", "following_url": "https://api.github.com/users/Lucretiel/following{/other_user}", "gists_url": "https://api.github.com/users/Lucretiel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lucretiel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lucretiel/subscriptions", "organizations_url": "https://api.github.com/users/Lucretiel/orgs", "repos_url": "https://api.github.com/users/Lucretiel/repos", "events_url": "https://api.github.com/users/Lucretiel/events{/privacy}", "received_events_url": "https://api.github.com/users/Lucretiel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Lucretiel", "id": 1823405, "node_id": "MDQ6VXNlcjE4MjM0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1823405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lucretiel", "html_url": "https://github.com/Lucretiel", "followers_url": "https://api.github.com/users/Lucretiel/followers", "following_url": "https://api.github.com/users/Lucretiel/following{/other_user}", "gists_url": "https://api.github.com/users/Lucretiel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lucretiel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lucretiel/subscriptions", "organizations_url": "https://api.github.com/users/Lucretiel/orgs", "repos_url": "https://api.github.com/users/Lucretiel/repos", "events_url": "https://api.github.com/users/Lucretiel/events{/privacy}", "received_events_url": "https://api.github.com/users/Lucretiel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "017ed5a5792a85e290ac7ac87019e3507fe37ef9", "url": "https://api.github.com/repos/rust-lang/rust/commits/017ed5a5792a85e290ac7ac87019e3507fe37ef9", "html_url": "https://github.com/rust-lang/rust/commit/017ed5a5792a85e290ac7ac87019e3507fe37ef9"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "8c448cf1ecec33114ebfd5a0d4c790e368c9c765", "filename": "library/std/src/io/buffered.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d2d8bcb50e997794c8d75fb154f692b45c36c462/library%2Fstd%2Fsrc%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2d8bcb50e997794c8d75fb154f692b45c36c462/library%2Fstd%2Fsrc%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered.rs?ref=d2d8bcb50e997794c8d75fb154f692b45c36c462", "patch": "@@ -962,7 +962,7 @@ impl<'a, W: Write> Write for LineWriterShim<'a, W> {\n         // Flush existing content to prepare for our write. We have to do this\n         // before attempting to write `buf` in order to maintain consistency;\n         // if we add `buf` to the buffer then try to flush it all at once,\n-        // we're obligated to return Ok(), which would mean supressing any\n+        // we're obligated to return Ok(), which would mean suppressing any\n         // errors that occur during flush.\n         self.buffer.flush_buf()?;\n \n@@ -1142,7 +1142,7 @@ impl<'a, W: Write> Write for LineWriterShim<'a, W> {\n                     self.inner_mut().write_all(lines)?;\n                 } else {\n                     // If there is any buffered data, we add the incoming lines\n-                    // to that buffer before flushing, which saves us at lease\n+                    // to that buffer before flushing, which saves us at least\n                     // one write call. We can't really do this with `write`,\n                     // since we can't do this *and* not suppress errors *and*\n                     // report a consistent state to the caller in a return\n@@ -2024,7 +2024,7 @@ mod tests {\n     }\n \n     /// Test that, in cases where vectored writing is not enabled, the\n-    /// LineWriter uses the normal `write` call, which more-corectly handles\n+    /// LineWriter uses the normal `write` call, which more-correctly handles\n     /// partial lines\n     #[test]\n     fn line_vectored_ignored() {\n@@ -2160,7 +2160,7 @@ mod tests {\n     }\n \n     /// Test that, if a write returns Ok(0) after a successful pre-flush, this\n-    /// is propogated as Ok(0)\n+    /// is propagated as Ok(0)\n     #[test]\n     fn line_buffer_write0_normal() {\n         let writer = ProgrammableSink {\n@@ -2298,7 +2298,7 @@ mod tests {\n     }\n \n     /// Test that a normal, formatted writeln only results in a single write\n-    /// call to the underlying writer. A naive implementaton of\n+    /// call to the underlying writer. A naive implementation of\n     /// LineWriter::write_all results in two writes: one of the buffered data,\n     /// and another of the final substring in the formatted set\n     #[test]"}]}