{"sha": "becad9bb07423ed4d0d8b192cce83de99b535e86", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlY2FkOWJiMDc0MjNlZDRkMGQ4YjE5MmNjZTgzZGU5OWI1MzVlODY=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-03-13T21:07:23Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-03-13T23:33:10Z"}, "message": "add the mutate_values method to the Map trait", "tree": {"sha": "75feb8f05655deac9dcfb28f45c7cdb8f029c9c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75feb8f05655deac9dcfb28f45c7cdb8f029c9c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/becad9bb07423ed4d0d8b192cce83de99b535e86", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/becad9bb07423ed4d0d8b192cce83de99b535e86", "html_url": "https://github.com/rust-lang/rust/commit/becad9bb07423ed4d0d8b192cce83de99b535e86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/becad9bb07423ed4d0d8b192cce83de99b535e86/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d8ddff52a60d3785052f1e0a231cb95c98fdc24", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d8ddff52a60d3785052f1e0a231cb95c98fdc24", "html_url": "https://github.com/rust-lang/rust/commit/4d8ddff52a60d3785052f1e0a231cb95c98fdc24"}], "stats": {"total": 73, "additions": 61, "deletions": 12}, "files": [{"sha": "828678b65f7d4db82e76e03253b66ff9a6133e2d", "filename": "src/libcore/container.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/becad9bb07423ed4d0d8b192cce83de99b535e86/src%2Flibcore%2Fcontainer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/becad9bb07423ed4d0d8b192cce83de99b535e86/src%2Flibcore%2Fcontainer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcontainer.rs?ref=becad9bb07423ed4d0d8b192cce83de99b535e86", "patch": "@@ -35,6 +35,9 @@ pub trait Map<K, V>: Mutable {\n     /// Visit all values\n     pure fn each_value(&self, f: &fn(&V) -> bool);\n \n+    /// Iterate over the map and mutate the contained values\n+    fn mutate_values(&mut self, f: &fn(&K, &mut V) -> bool);\n+\n     /// Return the value corresponding to the key in the map\n     pure fn find(&self, key: &K) -> Option<&self/V>;\n "}, {"sha": "10d188a85550e836f80983f1f104d225b267eb59", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/becad9bb07423ed4d0d8b192cce83de99b535e86/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/becad9bb07423ed4d0d8b192cce83de99b535e86/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=becad9bb07423ed4d0d8b192cce83de99b535e86", "patch": "@@ -324,6 +324,19 @@ pub mod linear {\n             self.each(|&(_, v)| blk(v))\n         }\n \n+        /// Iterate over the map and mutate the contained values\n+        fn mutate_values(&mut self, blk: &fn(&'self K,\n+                              &'self mut V) -> bool) {\n+            for uint::range(0, self.buckets.len()) |i| {\n+                match self.buckets[i] {\n+                  Some(Bucket{key: ref key, value: ref mut value, _}) => {\n+                    if !blk(key, value) { return }\n+                  }\n+                  None => ()\n+                }\n+            }\n+        }\n+\n         /// Return the value corresponding to the key in the map\n         pure fn find(&self, k: &K) -> Option<&self/V> {\n             match self.bucket_for_key(k) {"}, {"sha": "966db4ec66207cfc1bf6b6e97427d0463b72489a", "filename": "src/libcore/trie.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/becad9bb07423ed4d0d8b192cce83de99b535e86/src%2Flibcore%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/becad9bb07423ed4d0d8b192cce83de99b535e86/src%2Flibcore%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftrie.rs?ref=becad9bb07423ed4d0d8b192cce83de99b535e86", "patch": "@@ -81,11 +81,16 @@ impl<T> Map<uint, T> for TrieMap<T> {\n \n     /// Visit all values in order\n     #[inline(always)]\n-    pure fn each_value(&self,\n-                       f: &fn(&T) -> bool) {\n+    pure fn each_value(&self, f: &fn(&T) -> bool) {\n         self.each(|&(_, v)| f(v))\n     }\n \n+    /// Iterate over the map and mutate the contained values\n+    #[inline(always)]\n+    fn mutate_values(&mut self, f: &fn(&uint, &mut T) -> bool) {\n+        self.root.mutate_values(f);\n+    }\n+\n     /// Return the value corresponding to the key in the map\n     #[inline(hint)]\n     pure fn find(&self, key: &uint) -> Option<&self/T> {\n@@ -150,11 +155,6 @@ impl<T> TrieMap<T> {\n     pure fn each_value_reverse(&self, f: &fn(&T) -> bool) {\n         self.each_reverse(|&(_, v)| f(v))\n     }\n-\n-    /// Iterate over the map and mutate the contained values\n-    fn mutate_values(&mut self, f: &fn(uint, &mut T) -> bool) {\n-        self.root.mutate_values(f);\n-    }\n }\n \n pub struct TrieSet {\n@@ -248,13 +248,13 @@ impl<T> TrieNode<T> {\n         true\n     }\n \n-    fn mutate_values(&mut self, f: &fn(uint, &mut T) -> bool) -> bool {\n+    fn mutate_values(&mut self, f: &fn(&uint, &mut T) -> bool) -> bool {\n         for vec::each_mut(self.children) |child| {\n             match *child {\n                 Internal(ref mut x) => if !x.mutate_values(f) {\n                     return false\n                 },\n-                External(k, ref mut v) => if !f(k, v) { return false },\n+                External(k, ref mut v) => if !f(&k, v) { return false },\n                 Nothing => ()\n             }\n         }\n@@ -269,8 +269,8 @@ pure fn chunk(n: uint, idx: uint) -> uint {\n     (n >> (SHIFT * real_idx)) & MASK\n }\n \n-fn insert<T>(count: &mut uint, child: &mut Child<T>, key: uint,\n-                   value: T, idx: uint) -> bool {\n+fn insert<T>(count: &mut uint, child: &mut Child<T>, key: uint, value: T,\n+             idx: uint) -> bool {\n     let mut tmp = Nothing;\n     tmp <-> *child;\n     let mut added = false;"}, {"sha": "bdce257e347d3dc44c0b72e792eb3a7828c6d555", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/becad9bb07423ed4d0d8b192cce83de99b535e86/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/becad9bb07423ed4d0d8b192cce83de99b535e86/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=becad9bb07423ed4d0d8b192cce83de99b535e86", "patch": "@@ -85,7 +85,17 @@ impl<V> Map<uint, V> for SmallIntMap<V> {\n         self.each(|&(_, v)| blk(v))\n     }\n \n-    /// Return the value corresponding to the key in the map\n+    /// Visit all key-value pairs in order\n+    fn mutate_values(&mut self, it: &fn(&uint, &'self mut V) -> bool) {\n+        for uint::range(0, self.v.len()) |i| {\n+            match self.v[i] {\n+              Some(ref mut elt) => if !it(&i, elt) { break },\n+              None => ()\n+            }\n+        }\n+    }\n+\n+    /// Iterate over the map and mutate the contained values\n     pure fn find(&self, key: &uint) -> Option<&self/V> {\n         if *key < self.v.len() {\n             match self.v[*key] {"}, {"sha": "0a4c980f76ad391d8fbc048b51943630ac1f4dc8", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/becad9bb07423ed4d0d8b192cce83de99b535e86/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/becad9bb07423ed4d0d8b192cce83de99b535e86/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=becad9bb07423ed4d0d8b192cce83de99b535e86", "patch": "@@ -134,6 +134,11 @@ impl<K: TotalOrd, V> Map<K, V> for TreeMap<K, V> {\n         self.each(|&(_, v)| f(v))\n     }\n \n+    /// Iterate over the map and mutate the contained values\n+    fn mutate_values(&mut self, f: &fn(&'self K, &'self mut V) -> bool) {\n+        mutate_values(&mut self.root, f);\n+    }\n+\n     /// Return the value corresponding to the key in the map\n     pure fn find(&self, key: &K) -> Option<&self/V> {\n         let mut current: &self/Option<~TreeNode<K, V>> = &self.root;\n@@ -558,6 +563,20 @@ pure fn each_reverse<K: TotalOrd, V>(node: &r/Option<~TreeNode<K, V>>,\n     }\n }\n \n+fn mutate_values<K: TotalOrd, V>(node: &'r mut Option<~TreeNode<K, V>>,\n+                                 f: &fn(&'r K, &'r mut V) -> bool) -> bool {\n+    match *node {\n+      Some(~TreeNode{key: ref key, value: ref mut value, left: ref mut left,\n+                     right: ref mut right, _}) => {\n+        if !mutate_values(left, f) { return false }\n+        if !f(key, value) { return false }\n+        if !mutate_values(right, f) { return false }\n+      }\n+      None => return false\n+    }\n+    true\n+}\n+\n // Remove left horizontal link by rotating right\n fn skew<K: TotalOrd, V>(node: &mut ~TreeNode<K, V>) {\n     if node.left.map_default(false, |x| x.level == node.level) {"}, {"sha": "0c285258f7522e78192fc6f5acccf76bb2abacbc", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/becad9bb07423ed4d0d8b192cce83de99b535e86/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/becad9bb07423ed4d0d8b192cce83de99b535e86/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=becad9bb07423ed4d0d8b192cce83de99b535e86", "patch": "@@ -81,6 +81,10 @@ impl<T> Map<int, T> for cat<T> {\n         for self.each |&(_, v)| { if !f(v) { break; } loop;};\n     }\n \n+    fn mutate_values(&mut self, f: &fn(&int, &mut T) -> bool) {\n+        fail!(~\"nope\")\n+    }\n+\n     fn insert(&mut self, k: int, _: T) -> bool {\n         self.meows += k;\n         true"}]}