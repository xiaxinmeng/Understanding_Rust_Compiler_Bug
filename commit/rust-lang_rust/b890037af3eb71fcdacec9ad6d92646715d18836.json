{"sha": "b890037af3eb71fcdacec9ad6d92646715d18836", "node_id": "C_kwDOAAsO6NoAKGI4OTAwMzdhZjNlYjcxZmNkYWNlYzlhZDZkOTI2NDY3MTVkMTg4MzY", "commit": {"author": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-05-09T09:13:30Z"}, "committer": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-05-09T09:13:30Z"}, "message": "use `Result<(),()>` instead of Validity enum", "tree": {"sha": "5abb03d8cfa7ef6e2001f21b9943d5c6f24e5d3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5abb03d8cfa7ef6e2001f21b9943d5c6f24e5d3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b890037af3eb71fcdacec9ad6d92646715d18836", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b890037af3eb71fcdacec9ad6d92646715d18836", "html_url": "https://github.com/rust-lang/rust/commit/b890037af3eb71fcdacec9ad6d92646715d18836", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b890037af3eb71fcdacec9ad6d92646715d18836/comments", "author": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb7f116c04d3355665f8d1e7aa51880010c2d8d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb7f116c04d3355665f8d1e7aa51880010c2d8d7", "html_url": "https://github.com/rust-lang/rust/commit/cb7f116c04d3355665f8d1e7aa51880010c2d8d7"}], "stats": {"total": 89, "additions": 35, "deletions": 54}, "files": [{"sha": "f88538f61ec6eb43d6aaf4cb1b7aea98af3d6650", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 35, "deletions": 54, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/b890037af3eb71fcdacec9ad6d92646715d18836/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b890037af3eb71fcdacec9ad6d92646715d18836/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=b890037af3eb71fcdacec9ad6d92646715d18836", "patch": "@@ -77,21 +77,14 @@ pub enum TempState {\n     /// One direct assignment and any number of direct uses.\n     /// A borrow of this temp is promotable if the assigned\n     /// value is qualified as constant.\n-    Defined { location: Location, uses: usize, valid: Valid },\n+    Defined { location: Location, uses: usize, valid: Result<(), ()> },\n     /// Any other combination of assignments/uses.\n     Unpromotable,\n     /// This temp was part of an rvalue which got extracted\n     /// during promotion and needs cleanup.\n     PromotedOut,\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n-pub enum Valid {\n-    Unknown,\n-    InValid,\n-    Validated,\n-}\n-\n impl TempState {\n     pub fn is_promotable(&self) -> bool {\n         debug!(\"is_promotable: self={:?}\", self);\n@@ -140,7 +133,7 @@ impl<'tcx> Visitor<'tcx> for Collector<'_, 'tcx> {\n             match context {\n                 PlaceContext::MutatingUse(MutatingUseContext::Store)\n                 | PlaceContext::MutatingUse(MutatingUseContext::Call) => {\n-                    *temp = TempState::Defined { location, uses: 0, valid: Valid::Unknown };\n+                    *temp = TempState::Defined { location, uses: 0, valid: Err(()) };\n                     return;\n                 }\n                 _ => { /* mark as unpromotable below */ }\n@@ -281,54 +274,42 @@ impl<'tcx> Validator<'_, 'tcx> {\n \n     fn validate_local(&mut self, local: Local) -> Result<(), Unpromotable> {\n         if let TempState::Defined { location: loc, uses, valid } = self.temps[local] {\n-            match valid {\n-                Valid::InValid => Err(Unpromotable),\n-                Valid::Validated => Ok(()),\n-                Valid::Unknown => {\n-                    let ok = {\n-                        let block = &self.body[loc.block];\n-                        let num_stmts = block.statements.len();\n-\n-                        if loc.statement_index < num_stmts {\n-                            let statement = &block.statements[loc.statement_index];\n-                            match &statement.kind {\n-                                StatementKind::Assign(box (_, rhs)) => self.validate_rvalue(rhs),\n-                                _ => {\n-                                    span_bug!(\n-                                        statement.source_info.span,\n-                                        \"{:?} is not an assignment\",\n-                                        statement\n-                                    );\n-                                }\n+            valid.or_else(|_| {\n+                let ok = {\n+                    let block = &self.body[loc.block];\n+                    let num_stmts = block.statements.len();\n+\n+                    if loc.statement_index < num_stmts {\n+                        let statement = &block.statements[loc.statement_index];\n+                        match &statement.kind {\n+                            StatementKind::Assign(box (_, rhs)) => self.validate_rvalue(rhs),\n+                            _ => {\n+                                span_bug!(\n+                                    statement.source_info.span,\n+                                    \"{:?} is not an assignment\",\n+                                    statement\n+                                );\n                             }\n-                        } else {\n-                            let terminator = block.terminator();\n-                            match &terminator.kind {\n-                                TerminatorKind::Call { func, args, .. } => {\n-                                    self.validate_call(func, args)\n-                                }\n-                                TerminatorKind::Yield { .. } => Err(Unpromotable),\n-                                kind => {\n-                                    span_bug!(\n-                                        terminator.source_info.span,\n-                                        \"{:?} not promotable\",\n-                                        kind\n-                                    );\n-                                }\n+                        }\n+                    } else {\n+                        let terminator = block.terminator();\n+                        match &terminator.kind {\n+                            TerminatorKind::Call { func, args, .. } => {\n+                                self.validate_call(func, args)\n+                            }\n+                            TerminatorKind::Yield { .. } => Err(Unpromotable),\n+                            kind => {\n+                                span_bug!(terminator.source_info.span, \"{:?} not promotable\", kind);\n                             }\n                         }\n-                    };\n-                    self.temps[local] = TempState::Defined {\n-                        location: loc,\n-                        uses,\n-                        valid: match ok {\n-                            Ok(()) => Valid::Validated,\n-                            Err(_) => Valid::InValid,\n-                        },\n-                    };\n-                    ok\n-                }\n-            }\n+                    }\n+                };\n+                self.temps[local] = match ok {\n+                    Ok(()) => TempState::Defined { location: loc, uses, valid: Ok(()) },\n+                    Err(_) => TempState::Unpromotable,\n+                };\n+                ok\n+            })\n         } else {\n             Err(Unpromotable)\n         }"}]}