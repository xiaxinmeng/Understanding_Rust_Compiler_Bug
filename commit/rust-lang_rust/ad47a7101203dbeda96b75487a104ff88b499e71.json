{"sha": "ad47a7101203dbeda96b75487a104ff88b499e71", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNDdhNzEwMTIwM2RiZWRhOTZiNzU0ODdhMTA0ZmY4OGI0OTllNzE=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-10-18T12:55:45Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-10-18T13:23:25Z"}, "message": "Do not distinguish between a single-child chain from others\n\n`last_shape` is used when rewriting the last child on its own line.", "tree": {"sha": "bf64b8717915f0e4a811dd6661f7c6c96ec770a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf64b8717915f0e4a811dd6661f7c6c96ec770a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad47a7101203dbeda96b75487a104ff88b499e71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad47a7101203dbeda96b75487a104ff88b499e71", "html_url": "https://github.com/rust-lang/rust/commit/ad47a7101203dbeda96b75487a104ff88b499e71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad47a7101203dbeda96b75487a104ff88b499e71/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51d230ead3a79c9c6732beaad94fdc372480c11d", "url": "https://api.github.com/repos/rust-lang/rust/commits/51d230ead3a79c9c6732beaad94fdc372480c11d", "html_url": "https://github.com/rust-lang/rust/commit/51d230ead3a79c9c6732beaad94fdc372480c11d"}], "stats": {"total": 57, "additions": 48, "deletions": 9}, "files": [{"sha": "6743f605cf64c5c40531210a52c189dd996cc5fe", "filename": "src/chains.rs", "status": "modified", "additions": 48, "deletions": 9, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/ad47a7101203dbeda96b75487a104ff88b499e71/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad47a7101203dbeda96b75487a104ff88b499e71/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=ad47a7101203dbeda96b75487a104ff88b499e71", "patch": "@@ -166,25 +166,64 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n     let all_in_one_line = !parent_rewrite_contains_newline\n         && rewrites.iter().all(|s| !s.contains('\\n'))\n         && almost_total < one_line_budget;\n-    let last_shape = if rewrites.is_empty() {\n-        // We only have a single child.\n-        first_child_shape\n-    } else {\n-        match context.config.chain_indent() {\n-            IndentStyle::Visual => other_child_shape.sub_width(shape.rhs_overhead(context.config))?,\n-            IndentStyle::Block => other_child_shape,\n-        }\n+    let last_shape = match context.config.chain_indent() {\n+        IndentStyle::Visual => other_child_shape.sub_width(shape.rhs_overhead(context.config))?,\n+        IndentStyle::Block => other_child_shape,\n     };\n     let last_shape = last_shape.sub_width(suffix_try_num)?;\n+\n+    // Rewrite the last child. The last child of a chain requires special treatment. We need to\n+    // know whether 'overflowing' the last child make a better formatting:\n+    //\n+    // A chain with overflowing the last child:\n+    // ```\n+    // parent.child1.child2.last_child(\n+    //     a,\n+    //     b,\n+    //     c,\n+    // )\n+    // ```\n+    //\n+    // A chain without overflowing the last child (in vertical layout):\n+    // ```\n+    // parent\n+    //     .child1\n+    //     .child2\n+    //     .last_child(a, b, c)\n+    // ```\n+    //\n+    // In particular, overflowing is effective when the last child is a method with a multi-lined\n+    // block-like argument (e.g. closure):\n+    // ```\n+    // parent.child1.chlid2.last_child(|a, b, c| {\n+    //     let x = foo(a, b, c);\n+    //     let y = bar(a, b, c);\n+    //\n+    //     // ...\n+    //\n+    //     result\n+    // })\n+    // ```\n+\n+    // `rewrite_last` rewrites the last child on its own line. We use a closure here instead of\n+    // directly calling `rewrite_chain_subexpr()` to avoid exponential blowup.\n     let rewrite_last = || rewrite_chain_subexpr(last_subexpr, total_span, context, last_shape);\n     let (last_subexpr_str, fits_single_line) = if all_in_one_line || extend_last_subexr {\n+        // First we try to 'overflow' the last child and see if it looks better than using\n+        // vertical layout.\n         parent_shape.offset_left(almost_total).map(|shape| {\n             if let Some(rw) = rewrite_chain_subexpr(last_subexpr, total_span, context, shape) {\n+                // We allow overflowing here only if both of the following conditions match:\n+                // 1. The entire chain fits in a single line expect the last child.\n+                // 2. `last_chlid_str.lines().count() >= 5`.\n                 let line_count = rw.lines().count();\n                 let fits_single_line = almost_total + first_line_width(&rw) <= one_line_budget;\n-                if fits_single_line && (line_count >= 5 || extend_last_subexr) {\n+                if fits_single_line && line_count >= 5 {\n                     (Some(rw), true)\n                 } else {\n+                    // We could not know whether overflowing is better than using vertical layout,\n+                    // just by looking at the overflowed rewrite. Now we rewrite the last child\n+                    // on its own line, and compare two rewrites to choose which is better.\n                     match rewrite_last() {\n                         Some(ref new_rw) if !fits_single_line => (Some(new_rw.clone()), false),\n                         Some(ref new_rw) if new_rw.lines().count() >= line_count => {"}]}