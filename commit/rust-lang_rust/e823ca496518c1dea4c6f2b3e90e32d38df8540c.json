{"sha": "e823ca496518c1dea4c6f2b3e90e32d38df8540c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MjNjYTQ5NjUxOGMxZGVhNGM2ZjJiM2U5MGUzMmQzOGRmODU0MGM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-10T03:14:20Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-10T03:14:47Z"}, "message": "stdlib: Implement casts. The horror.", "tree": {"sha": "c92c3ef24e8247c83abb80a939515f330155bc47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c92c3ef24e8247c83abb80a939515f330155bc47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e823ca496518c1dea4c6f2b3e90e32d38df8540c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e823ca496518c1dea4c6f2b3e90e32d38df8540c", "html_url": "https://github.com/rust-lang/rust/commit/e823ca496518c1dea4c6f2b3e90e32d38df8540c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e823ca496518c1dea4c6f2b3e90e32d38df8540c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75047ea87e2a26c0e9518af0dbc22dc6631e3ebd", "url": "https://api.github.com/repos/rust-lang/rust/commits/75047ea87e2a26c0e9518af0dbc22dc6631e3ebd", "html_url": "https://github.com/rust-lang/rust/commit/75047ea87e2a26c0e9518af0dbc22dc6631e3ebd"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "a390abae3704a9df42a4d7693129157bd930904f", "filename": "src/rt/intrinsics/intrinsics.cpp", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e823ca496518c1dea4c6f2b3e90e32d38df8540c/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e823ca496518c1dea4c6f2b3e90e32d38df8540c/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.cpp?ref=e823ca496518c1dea4c6f2b3e90e32d38df8540c", "patch": "@@ -2,6 +2,11 @@\n //      -I../arch/i386 -fno-stack-protector -o intrinsics.ll intrinsics.cpp`\n \n #include \"../rust_internal.h\"\n+#include <cstdlib>\n+#include <cstring>\n+\n+extern \"C\" CDECL void\n+upcall_fail(rust_task *task, char const *expr, char const *file, size_t line);\n \n extern \"C\" size_t\n rust_intrinsic_vec_len(rust_task *task, type_desc *ty, rust_vec *v)\n@@ -29,3 +34,16 @@ rust_intrinsic_ptr_offset(rust_task *task, type_desc *ty, void *ptr,\n     return &((uint8_t *)ptr)[ty->size * count];\n }\n \n+extern \"C\" void\n+rust_intrinsic_cast(rust_task *task, type_desc *t1, type_desc *t2, void *dest,\n+                    void *src)\n+{\n+    if (t1->size != t2->size) {\n+        upcall_fail(task, \"attempt to cast values of differing sizes\",\n+                    __FILE__, __LINE__);\n+        return;\n+    }\n+\n+    memmove(dest, src, t1->size);\n+}\n+"}, {"sha": "a20ef07c218e45ba443de502414cde48b50d70e2", "filename": "src/rt/intrinsics/intrinsics.ll.in", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e823ca496518c1dea4c6f2b3e90e32d38df8540c/src%2Frt%2Fintrinsics%2Fintrinsics.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/e823ca496518c1dea4c6f2b3e90e32d38df8540c/src%2Frt%2Fintrinsics%2Fintrinsics.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.ll.in?ref=e823ca496518c1dea4c6f2b3e90e32d38df8540c", "patch": "@@ -61,6 +61,9 @@ target triple = \"@CFG_LLVM_TRIPLE@\"\n %struct.type_desc = type { %struct.type_desc**, i32, i32, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*)*, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*)*, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*)*, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*)*, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*)*, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*)*, i32, void (i8*, %struct.rust_task*, i8*, %struct.type_desc**, i8*, i8*, i8)*, %struct.UT_hash_handle, i32, [0 x %struct.type_desc*] }\n %union.rust_ivec_payload = type { %struct.rust_ivec_heap* }\n \n+@.str = private unnamed_addr constant [42 x i8] c\"attempt to cast values of differing sizes\\00\", align 1\n+@.str1 = private unnamed_addr constant [15 x i8] c\"intrinsics.cpp\\00\", align 1\n+\n define linkonce_odr i32 @rust_intrinsic_vec_len(%struct.rust_task* nocapture %task, %struct.type_desc* nocapture %ty, %struct.rust_vec* nocapture %v) nounwind readonly {\n entry:\n   %fill = getelementptr inbounds %struct.rust_vec* %v, i32 0, i32 2\n@@ -106,6 +109,31 @@ entry:\n   ret i8* %arrayidx\n }\n \n+define linkonce_odr void @rust_intrinsic_cast(%struct.rust_task* %task, %struct.type_desc* nocapture %t1, %struct.type_desc* nocapture %t2, i8* nocapture %dest, i8* nocapture %src) {\n+entry:\n+  %size = getelementptr inbounds %struct.type_desc* %t1, i32 0, i32 1\n+  %tmp1 = load i32* %size, align 4, !tbaa !0\n+  %size3 = getelementptr inbounds %struct.type_desc* %t2, i32 0, i32 1\n+  %tmp4 = load i32* %size3, align 4, !tbaa !0\n+  %cmp = icmp eq i32 %tmp1, %tmp4\n+  br i1 %cmp, label %if.end, label %if.then\n+\n+if.then:                                          ; preds = %entry\n+  tail call void @upcall_fail(%struct.rust_task* %task, i8* getelementptr inbounds ([42 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8]* @.str1, i32 0, i32 0), i32 43)\n+  br label %return\n+\n+if.end:                                           ; preds = %entry\n+  tail call void @llvm.memmove.p0i8.p0i8.i32(i8* %dest, i8* %src, i32 %tmp1, i32 1, i1 false)\n+  br label %return\n+\n+return:                                           ; preds = %if.end, %if.then\n+  ret void\n+}\n+\n+declare void @upcall_fail(%struct.rust_task*, i8*, i8*, i32)\n+\n+declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture, i8* nocapture, i32, i32, i1) nounwind\n+\n !0 = metadata !{metadata !\"long\", metadata !1}\n !1 = metadata !{metadata !\"omnipotent char\", metadata !2}\n !2 = metadata !{metadata !\"Simple C/C++ TBAA\", null}"}]}