{"sha": "c576bedc4149a6911f863a94aea2bc0ec109d4e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NzZiZWRjNDE0OWE2OTExZjg2M2E5NGFlYTJiYzBlYzEwOWQ0ZTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-10T13:02:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-10T13:02:53Z"}, "message": "Auto merge of #5883 - flip1995:rollup-x9mftxe, r=flip1995\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #5825 (Add the new lint `same_item_push`)\n - #5869 (New lint against `Self` as an arbitrary self type)\n - #5870 (enable #[allow(clippy::unsafe_derive_deserialize)])\n - #5871 (Lint .min(x).max(y) with x < y)\n - #5874 (Make the docs clearer for new contributors)\n\nFailed merges:\n\nr? @ghost\n\nchangelog: rollup", "tree": {"sha": "133ad47ef9fba61d01c61e65cb7088d5f843f57b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/133ad47ef9fba61d01c61e65cb7088d5f843f57b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c576bedc4149a6911f863a94aea2bc0ec109d4e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c576bedc4149a6911f863a94aea2bc0ec109d4e3", "html_url": "https://github.com/rust-lang/rust/commit/c576bedc4149a6911f863a94aea2bc0ec109d4e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c576bedc4149a6911f863a94aea2bc0ec109d4e3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72283689534272fb64952a3d7161de72513de6cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/72283689534272fb64952a3d7161de72513de6cf", "html_url": "https://github.com/rust-lang/rust/commit/72283689534272fb64952a3d7161de72513de6cf"}, {"sha": "7f6897c7a33ada43834dff754aa6b7e7412f2566", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f6897c7a33ada43834dff754aa6b7e7412f2566", "html_url": "https://github.com/rust-lang/rust/commit/7f6897c7a33ada43834dff754aa6b7e7412f2566"}], "stats": {"total": 884, "additions": 795, "deletions": 89}, "files": [{"sha": "f09af0466c017648fb033c774fd42ba5b5c74a9c", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c576bedc4149a6911f863a94aea2bc0ec109d4e3/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/c576bedc4149a6911f863a94aea2bc0ec109d4e3/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=c576bedc4149a6911f863a94aea2bc0ec109d4e3", "patch": "@@ -1616,6 +1616,7 @@ Released 2018-09-13\n [`mutex_atomic`]: https://rust-lang.github.io/rust-clippy/master/index.html#mutex_atomic\n [`mutex_integer`]: https://rust-lang.github.io/rust-clippy/master/index.html#mutex_integer\n [`naive_bytecount`]: https://rust-lang.github.io/rust-clippy/master/index.html#naive_bytecount\n+[`needless_arbitrary_self_type`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_arbitrary_self_type\n [`needless_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_bool\n [`needless_borrow`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n [`needless_borrowed_reference`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference\n@@ -1687,6 +1688,7 @@ Released 2018-09-13\n [`result_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unit_fn\n [`reversed_empty_ranges`]: https://rust-lang.github.io/rust-clippy/master/index.html#reversed_empty_ranges\n [`same_functions_in_if_condition`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_functions_in_if_condition\n+[`same_item_push`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_item_push\n [`search_is_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#search_is_some\n [`serde_api_misuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#serde_api_misuse\n [`shadow_reuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse"}, {"sha": "5f7b1e85ee9a1769f6de383ca49bd5c433e47293", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c576bedc4149a6911f863a94aea2bc0ec109d4e3/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/c576bedc4149a6911f863a94aea2bc0ec109d4e3/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=c576bedc4149a6911f863a94aea2bc0ec109d4e3", "patch": "@@ -28,11 +28,14 @@ All contributors are expected to follow the [Rust Code of Conduct].\n \n ## Getting started\n \n-High level approach:\n+**Note: If this is your first time contributing to Clippy, you should\n+first read the [Basics docs](doc/basics.md).**\n+\n+### High level approach\n \n 1. Find something to fix/improve\n 2. Change code (likely some file in `clippy_lints/src/`)\n-3. Follow the instructions in the [Basics docs](doc/basics.md) such as running the `setup-toolchain.sh` script\n+3. Follow the instructions in the [Basics docs](doc/basics.md) to get set up\n 4. Run `cargo test` in the root directory and wiggle code until it passes\n 5. Open a PR (also can be done after 2. if you run into problems)\n "}, {"sha": "80a0675898240633e73830d6dc6a649df326c7ef", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c576bedc4149a6911f863a94aea2bc0ec109d4e3/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c576bedc4149a6911f863a94aea2bc0ec109d4e3/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=c576bedc4149a6911f863a94aea2bc0ec109d4e3", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::paths;\n use crate::utils::{\n-    get_trait_def_id, is_automatically_derived, is_copy, match_path, span_lint_and_help, span_lint_and_note,\n-    span_lint_and_then,\n+    get_trait_def_id, is_allowed, is_automatically_derived, is_copy, match_path, span_lint_and_help,\n+    span_lint_and_note, span_lint_and_then,\n };\n use if_chain::if_chain;\n use rustc_hir::def_id::DefId;\n@@ -354,7 +354,9 @@ fn check_unsafe_derive_deserialize<'tcx>(\n     if_chain! {\n         if match_path(&trait_ref.path, &paths::SERDE_DESERIALIZE);\n         if let ty::Adt(def, _) = ty.kind;\n-        if def.did.is_local();\n+        if let Some(local_def_id) = def.did.as_local();\n+        let adt_hir_id = cx.tcx.hir().as_local_hir_id(local_def_id);\n+        if !is_allowed(cx, UNSAFE_DERIVE_DESERIALIZE, adt_hir_id);\n         if cx.tcx.inherent_impls(def.did)\n             .iter()\n             .map(|imp_did| item_from_def_id(cx, *imp_did))"}, {"sha": "b26e10a464c51a6485178fbb877aee6f0454747b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c576bedc4149a6911f863a94aea2bc0ec109d4e3/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c576bedc4149a6911f863a94aea2bc0ec109d4e3/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c576bedc4149a6911f863a94aea2bc0ec109d4e3", "patch": "@@ -250,6 +250,7 @@ mod mut_mut;\n mod mut_reference;\n mod mutable_debug_assertion;\n mod mutex_atomic;\n+mod needless_arbitrary_self_type;\n mod needless_bool;\n mod needless_borrow;\n mod needless_borrowed_ref;\n@@ -608,6 +609,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &loops::NEEDLESS_COLLECT,\n         &loops::NEEDLESS_RANGE_LOOP,\n         &loops::NEVER_LOOP,\n+        &loops::SAME_ITEM_PUSH,\n         &loops::WHILE_IMMUTABLE_CONDITION,\n         &loops::WHILE_LET_LOOP,\n         &loops::WHILE_LET_ON_ITERATOR,\n@@ -717,6 +719,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL,\n         &mutex_atomic::MUTEX_ATOMIC,\n         &mutex_atomic::MUTEX_INTEGER,\n+        &needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE,\n         &needless_bool::BOOL_COMPARISON,\n         &needless_bool::NEEDLESS_BOOL,\n         &needless_borrow::NEEDLESS_BORROW,\n@@ -1027,6 +1030,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| box items_after_statements::ItemsAfterStatements);\n     store.register_early_pass(|| box precedence::Precedence);\n     store.register_early_pass(|| box needless_continue::NeedlessContinue);\n+    store.register_early_pass(|| box needless_arbitrary_self_type::NeedlessArbitrarySelfType);\n     store.register_early_pass(|| box redundant_static_lifetimes::RedundantStaticLifetimes);\n     store.register_late_pass(|| box cargo_common_metadata::CargoCommonMetadata);\n     store.register_late_pass(|| box multiple_crate_versions::MultipleCrateVersions);\n@@ -1295,6 +1299,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&loops::NEEDLESS_COLLECT),\n         LintId::of(&loops::NEEDLESS_RANGE_LOOP),\n         LintId::of(&loops::NEVER_LOOP),\n+        LintId::of(&loops::SAME_ITEM_PUSH),\n         LintId::of(&loops::WHILE_IMMUTABLE_CONDITION),\n         LintId::of(&loops::WHILE_LET_LOOP),\n         LintId::of(&loops::WHILE_LET_ON_ITERATOR),\n@@ -1371,6 +1376,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&mut_key::MUTABLE_KEY_TYPE),\n         LintId::of(&mut_reference::UNNECESSARY_MUT_PASSED),\n         LintId::of(&mutex_atomic::MUTEX_ATOMIC),\n+        LintId::of(&needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE),\n         LintId::of(&needless_bool::BOOL_COMPARISON),\n         LintId::of(&needless_bool::NEEDLESS_BOOL),\n         LintId::of(&needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE),\n@@ -1497,6 +1503,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&loops::EMPTY_LOOP),\n         LintId::of(&loops::FOR_KV_MAP),\n         LintId::of(&loops::NEEDLESS_RANGE_LOOP),\n+        LintId::of(&loops::SAME_ITEM_PUSH),\n         LintId::of(&loops::WHILE_LET_ON_ITERATOR),\n         LintId::of(&main_recursion::MAIN_RECURSION),\n         LintId::of(&manual_async_fn::MANUAL_ASYNC_FN),\n@@ -1602,6 +1609,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&misc::SHORT_CIRCUIT_STATEMENT),\n         LintId::of(&misc_early::UNNEEDED_WILDCARD_PATTERN),\n         LintId::of(&misc_early::ZERO_PREFIXED_LITERAL),\n+        LintId::of(&needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE),\n         LintId::of(&needless_bool::BOOL_COMPARISON),\n         LintId::of(&needless_bool::NEEDLESS_BOOL),\n         LintId::of(&needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE),"}, {"sha": "8352a8a3d2c69573c3956bbf7bbb93f77318a4f7", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 149, "deletions": 2, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/c576bedc4149a6911f863a94aea2bc0ec109d4e3/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c576bedc4149a6911f863a94aea2bc0ec109d4e3/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=c576bedc4149a6911f863a94aea2bc0ec109d4e3", "patch": "@@ -5,8 +5,9 @@ use crate::utils::usage::{is_unused, mutated_variables};\n use crate::utils::{\n     get_enclosing_block, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait,\n     is_integer_const, is_no_std_crate, is_refutable, is_type_diagnostic_item, last_path_segment, match_trait_method,\n-    match_type, match_var, multispan_sugg, qpath_res, snippet, snippet_opt, snippet_with_applicability, span_lint,\n-    span_lint_and_help, span_lint_and_sugg, span_lint_and_then, sugg, SpanlessEq,\n+    match_type, match_var, multispan_sugg, qpath_res, snippet, snippet_opt, snippet_with_applicability,\n+    snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, sugg,\n+    SpanlessEq,\n };\n use if_chain::if_chain;\n use rustc_ast::ast;\n@@ -419,6 +420,39 @@ declare_clippy_lint! {\n     \"variables used within while expression are not mutated in the body\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks whether a for loop is being used to push a constant\n+    /// value into a Vec.\n+    ///\n+    /// **Why is this bad?** This kind of operation can be expressed more succinctly with\n+    /// `vec![item;SIZE]` or `vec.resize(NEW_SIZE, item)` and using these alternatives may also\n+    /// have better performance.\n+    /// **Known problems:** None\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// let item1 = 2;\n+    /// let item2 = 3;\n+    /// let mut vec: Vec<u8> = Vec::new();\n+    /// for _ in 0..20 {\n+    ///    vec.push(item1);\n+    /// }\n+    /// for _ in 0..30 {\n+    ///     vec.push(item2);\n+    /// }\n+    /// ```\n+    /// could be written as\n+    /// ```rust\n+    /// let item1 = 2;\n+    /// let item2 = 3;\n+    /// let mut vec: Vec<u8> = vec![item1; 20];\n+    /// vec.resize(20 + 30, item2);\n+    /// ```\n+    pub SAME_ITEM_PUSH,\n+    style,\n+    \"the same item is pushed inside of a for loop\"\n+}\n+\n declare_lint_pass!(Loops => [\n     MANUAL_MEMCPY,\n     NEEDLESS_RANGE_LOOP,\n@@ -435,6 +469,7 @@ declare_lint_pass!(Loops => [\n     NEVER_LOOP,\n     MUT_RANGE_BOUND,\n     WHILE_IMMUTABLE_CONDITION,\n+    SAME_ITEM_PUSH,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Loops {\n@@ -740,6 +775,7 @@ fn check_for_loop<'tcx>(\n     check_for_loop_over_map_kv(cx, pat, arg, body, expr);\n     check_for_mut_range_bound(cx, arg, body);\n     detect_manual_memcpy(cx, pat, arg, body, expr);\n+    detect_same_item_push(cx, pat, arg, body, expr);\n }\n \n fn same_var<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, var: HirId) -> bool {\n@@ -1016,6 +1052,117 @@ fn detect_manual_memcpy<'tcx>(\n     }\n }\n \n+// Scans the body of the for loop and determines whether lint should be given\n+struct SameItemPushVisitor<'a, 'tcx> {\n+    should_lint: bool,\n+    // this field holds the last vec push operation visited, which should be the only push seen\n+    vec_push: Option<(&'tcx Expr<'tcx>, &'tcx Expr<'tcx>)>,\n+    cx: &'a LateContext<'tcx>,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for SameItemPushVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n+        match &expr.kind {\n+            // Non-determinism may occur ... don't give a lint\n+            ExprKind::Loop(_, _, _) | ExprKind::Match(_, _, _) => self.should_lint = false,\n+            ExprKind::Block(block, _) => self.visit_block(block),\n+            _ => {},\n+        }\n+    }\n+\n+    fn visit_block(&mut self, b: &'tcx Block<'_>) {\n+        for stmt in b.stmts.iter() {\n+            self.visit_stmt(stmt);\n+        }\n+    }\n+\n+    fn visit_stmt(&mut self, s: &'tcx Stmt<'_>) {\n+        let vec_push_option = get_vec_push(self.cx, s);\n+        if vec_push_option.is_none() {\n+            // Current statement is not a push so visit inside\n+            match &s.kind {\n+                StmtKind::Expr(expr) | StmtKind::Semi(expr) => self.visit_expr(&expr),\n+                _ => {},\n+            }\n+        } else {\n+            // Current statement is a push ...check whether another\n+            // push had been previously done\n+            if self.vec_push.is_none() {\n+                self.vec_push = vec_push_option;\n+            } else {\n+                // There are multiple pushes ... don't lint\n+                self.should_lint = false;\n+            }\n+        }\n+    }\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+}\n+\n+// Given some statement, determine if that statement is a push on a Vec. If it is, return\n+// the Vec being pushed into and the item being pushed\n+fn get_vec_push<'tcx>(cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) -> Option<(&'tcx Expr<'tcx>, &'tcx Expr<'tcx>)> {\n+    if_chain! {\n+            // Extract method being called\n+            if let StmtKind::Semi(semi_stmt) = &stmt.kind;\n+            if let ExprKind::MethodCall(path, _, args, _) = &semi_stmt.kind;\n+            // Figure out the parameters for the method call\n+            if let Some(self_expr) = args.get(0);\n+            if let Some(pushed_item) = args.get(1);\n+            // Check that the method being called is push() on a Vec\n+            if match_type(cx, cx.typeck_results().expr_ty(self_expr), &paths::VEC);\n+            if path.ident.name.as_str() == \"push\";\n+            then {\n+                return Some((self_expr, pushed_item))\n+            }\n+    }\n+    None\n+}\n+\n+/// Detects for loop pushing the same item into a Vec\n+fn detect_same_item_push<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    pat: &'tcx Pat<'_>,\n+    _: &'tcx Expr<'_>,\n+    body: &'tcx Expr<'_>,\n+    _: &'tcx Expr<'_>,\n+) {\n+    // Determine whether it is safe to lint the body\n+    let mut same_item_push_visitor = SameItemPushVisitor {\n+        should_lint: true,\n+        vec_push: None,\n+        cx,\n+    };\n+    walk_expr(&mut same_item_push_visitor, body);\n+    if same_item_push_visitor.should_lint {\n+        if let Some((vec, pushed_item)) = same_item_push_visitor.vec_push {\n+            // Make sure that the push does not involve possibly mutating values\n+            if mutated_variables(pushed_item, cx).map_or(false, |mutvars| mutvars.is_empty()) {\n+                if let PatKind::Wild = pat.kind {\n+                    let vec_str = snippet_with_macro_callsite(cx, vec.span, \"\");\n+                    let item_str = snippet_with_macro_callsite(cx, pushed_item.span, \"\");\n+\n+                    span_lint_and_help(\n+                        cx,\n+                        SAME_ITEM_PUSH,\n+                        vec.span,\n+                        \"it looks like the same item is being pushed into this Vec\",\n+                        None,\n+                        &format!(\n+                            \"try using vec![{};SIZE] or {}.resize(NEW_SIZE, {})\",\n+                            item_str, vec_str, item_str\n+                        ),\n+                    )\n+                }\n+            }\n+        }\n+    }\n+}\n+\n /// Checks for looping over a range and then indexing a sequence with it.\n /// The iteratee must be a range literal.\n #[allow(clippy::too_many_lines)]"}, {"sha": "004dd50a31be8716b7af5bc1727051261b2f2b84", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 39, "deletions": 16, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c576bedc4149a6911f863a94aea2bc0ec109d4e3/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c576bedc4149a6911f863a94aea2bc0ec109d4e3/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=c576bedc4149a6911f863a94aea2bc0ec109d4e3", "patch": "@@ -1,5 +1,6 @@\n use crate::consts::{constant_simple, Constant};\n-use crate::utils::{match_def_path, paths, span_lint};\n+use crate::utils::{match_def_path, match_trait_method, paths, span_lint};\n+use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -18,6 +19,10 @@ declare_clippy_lint! {\n     /// ```ignore\n     /// min(0, max(100, x))\n     /// ```\n+    /// or\n+    /// ```ignore\n+    /// x.max(100).min(0)\n+    /// ```\n     /// It will always be equal to `0`. Probably the author meant to clamp the value\n     /// between 0 and 100, but has erroneously swapped `min` and `max`.\n     pub MIN_MAX,\n@@ -60,25 +65,43 @@ enum MinMax {\n }\n \n fn min_max<'a>(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<(MinMax, Constant, &'a Expr<'a>)> {\n-    if let ExprKind::Call(ref path, ref args) = expr.kind {\n-        if let ExprKind::Path(ref qpath) = path.kind {\n-            cx.typeck_results()\n-                .qpath_res(qpath, path.hir_id)\n-                .opt_def_id()\n-                .and_then(|def_id| {\n-                    if match_def_path(cx, def_id, &paths::CMP_MIN) {\n-                        fetch_const(cx, args, MinMax::Min)\n-                    } else if match_def_path(cx, def_id, &paths::CMP_MAX) {\n+    match expr.kind {\n+        ExprKind::Call(ref path, ref args) => {\n+            if let ExprKind::Path(ref qpath) = path.kind {\n+                cx.typeck_results()\n+                    .qpath_res(qpath, path.hir_id)\n+                    .opt_def_id()\n+                    .and_then(|def_id| {\n+                        if match_def_path(cx, def_id, &paths::CMP_MIN) {\n+                            fetch_const(cx, args, MinMax::Min)\n+                        } else if match_def_path(cx, def_id, &paths::CMP_MAX) {\n+                            fetch_const(cx, args, MinMax::Max)\n+                        } else {\n+                            None\n+                        }\n+                    })\n+            } else {\n+                None\n+            }\n+        },\n+        ExprKind::MethodCall(ref path, _, ref args, _) => {\n+            if_chain! {\n+                if let [obj, _] = args;\n+                if cx.typeck_results().expr_ty(obj).is_floating_point() || match_trait_method(cx, expr, &paths::ORD);\n+                then {\n+                    if path.ident.as_str() == sym!(max).as_str() {\n                         fetch_const(cx, args, MinMax::Max)\n+                    } else if path.ident.as_str() == sym!(min).as_str() {\n+                        fetch_const(cx, args, MinMax::Min)\n                     } else {\n                         None\n                     }\n-                })\n-        } else {\n-            None\n-        }\n-    } else {\n-        None\n+                } else {\n+                    None\n+                }\n+            }\n+        },\n+        _ => None,\n     }\n }\n "}, {"sha": "38bdd0f7ed23bdd49dda3fd8443a91be55ea81c7", "filename": "clippy_lints/src/needless_arbitrary_self_type.rs", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/c576bedc4149a6911f863a94aea2bc0ec109d4e3/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c576bedc4149a6911f863a94aea2bc0ec109d4e3/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs?ref=c576bedc4149a6911f863a94aea2bc0ec109d4e3", "patch": "@@ -0,0 +1,118 @@\n+use crate::utils::span_lint_and_sugg;\n+use if_chain::if_chain;\n+use rustc_ast::ast::{BindingMode, Lifetime, Mutability, Param, PatKind, Path, TyKind};\n+use rustc_errors::Applicability;\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::kw;\n+use rustc_span::Span;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** The lint checks for `self` in fn parameters that\n+    /// specify the `Self`-type explicitly\n+    /// **Why is this bad?** Increases the amount and decreases the readability of code\n+    ///\n+    /// **Known problems:** None\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// enum ValType {\n+    ///     I32,\n+    ///     I64,\n+    ///     F32,\n+    ///     F64,\n+    /// }\n+    ///\n+    /// impl ValType {\n+    ///     pub fn bytes(self: Self) -> usize {\n+    ///         match self {\n+    ///             Self::I32 | Self::F32 => 4,\n+    ///             Self::I64 | Self::F64 => 8,\n+    ///         }\n+    ///     }\n+    /// }\n+    /// ```\n+    ///\n+    /// Could be rewritten as\n+    ///\n+    /// ```rust\n+    /// enum ValType {\n+    ///     I32,\n+    ///     I64,\n+    ///     F32,\n+    ///     F64,\n+    /// }\n+    ///\n+    /// impl ValType {\n+    ///     pub fn bytes(self) -> usize {\n+    ///         match self {\n+    ///             Self::I32 | Self::F32 => 4,\n+    ///             Self::I64 | Self::F64 => 8,\n+    ///         }\n+    ///     }\n+    /// }\n+    /// ```\n+    pub NEEDLESS_ARBITRARY_SELF_TYPE,\n+    complexity,\n+    \"type of `self` parameter is already by default `Self`\"\n+}\n+\n+declare_lint_pass!(NeedlessArbitrarySelfType => [NEEDLESS_ARBITRARY_SELF_TYPE]);\n+\n+enum Mode {\n+    Ref(Option<Lifetime>),\n+    Value,\n+}\n+\n+fn check_param_inner(cx: &EarlyContext<'_>, path: &Path, span: Span, binding_mode: &Mode, mutbl: Mutability) {\n+    if_chain! {\n+        if let [segment] = &path.segments[..];\n+        if segment.ident.name == kw::SelfUpper;\n+        then {\n+            let self_param = match (binding_mode, mutbl) {\n+                (Mode::Ref(None), Mutability::Mut) => \"&mut self\".to_string(),\n+                (Mode::Ref(Some(lifetime)), Mutability::Mut) => format!(\"&{} mut self\", &lifetime.ident.name),\n+                (Mode::Ref(None), Mutability::Not) => \"&self\".to_string(),\n+                (Mode::Ref(Some(lifetime)), Mutability::Not) => format!(\"&{} self\", &lifetime.ident.name),\n+                (Mode::Value, Mutability::Mut) => \"mut self\".to_string(),\n+                (Mode::Value, Mutability::Not) => \"self\".to_string(),\n+            };\n+\n+            span_lint_and_sugg(\n+                cx,\n+                NEEDLESS_ARBITRARY_SELF_TYPE,\n+                span,\n+                \"the type of the `self` parameter does not need to be arbitrary\",\n+                \"consider to change this parameter to\",\n+                self_param,\n+                Applicability::MachineApplicable,\n+            )\n+        }\n+    }\n+}\n+\n+impl EarlyLintPass for NeedlessArbitrarySelfType {\n+    fn check_param(&mut self, cx: &EarlyContext<'_>, p: &Param) {\n+        if !p.is_self() {\n+            return;\n+        }\n+\n+        match &p.ty.kind {\n+            TyKind::Path(None, path) => {\n+                if let PatKind::Ident(BindingMode::ByValue(mutbl), _, _) = p.pat.kind {\n+                    check_param_inner(cx, path, p.span.to(p.ty.span), &Mode::Value, mutbl)\n+                }\n+            },\n+            TyKind::Rptr(lifetime, mut_ty) => {\n+                if_chain! {\n+                if let TyKind::Path(None, path) = &mut_ty.ty.kind;\n+                if let PatKind::Ident(BindingMode::ByValue(Mutability::Not), _, _) = p.pat.kind;\n+                    then {\n+                        check_param_inner(cx, path, p.span.to(p.ty.span), &Mode::Ref(*lifetime), mut_ty.mutbl)\n+                    }\n+                }\n+            },\n+            _ => {},\n+        }\n+    }\n+}"}, {"sha": "d4acf8df46d8a5323d64613c38de7ef7abbb8dd1", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c576bedc4149a6911f863a94aea2bc0ec109d4e3/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c576bedc4149a6911f863a94aea2bc0ec109d4e3/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=c576bedc4149a6911f863a94aea2bc0ec109d4e3", "patch": "@@ -50,7 +50,7 @@ declare_clippy_lint! {\n     /// fn func<T: Clone + Default>(arg: T) {}\n     /// ```\n     /// or\n-    ///  ///\n+    ///\n     /// ```rust\n     /// fn func<T>(arg: T) where T: Clone + Default {}\n     /// ```"}, {"sha": "c81e7f6e0692bd6b2378ff20eb50523b59617925", "filename": "doc/basics.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c576bedc4149a6911f863a94aea2bc0ec109d4e3/doc%2Fbasics.md", "raw_url": "https://github.com/rust-lang/rust/raw/c576bedc4149a6911f863a94aea2bc0ec109d4e3/doc%2Fbasics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fbasics.md?ref=c576bedc4149a6911f863a94aea2bc0ec109d4e3", "patch": "@@ -53,6 +53,9 @@ rustup-toolchain-install-master -f -n master -c rustc-dev -c llvm-tools\n rustup override set master\n ```\n \n+_Note:_ Sometimes you may get compiler errors when building Clippy, even if you\n+didn't change anything. Normally those will be fixed by a maintainer in a few hours. \n+\n ## Building and Testing\n \n Once the `master` toolchain is installed, you can build and test Clippy like"}, {"sha": "6395b571504c56039ba904c15ffcf71c54a251c5", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c576bedc4149a6911f863a94aea2bc0ec109d4e3/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c576bedc4149a6911f863a94aea2bc0ec109d4e3/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=c576bedc4149a6911f863a94aea2bc0ec109d4e3", "patch": "@@ -1459,6 +1459,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"bytecount\",\n     },\n+    Lint {\n+        name: \"needless_arbitrary_self_type\",\n+        group: \"complexity\",\n+        desc: \"type of `self` parameter is already by default `Self`\",\n+        deprecation: None,\n+        module: \"needless_arbitrary_self_type\",\n+    },\n     Lint {\n         name: \"needless_bool\",\n         group: \"complexity\",\n@@ -1935,6 +1942,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"copies\",\n     },\n+    Lint {\n+        name: \"same_item_push\",\n+        group: \"style\",\n+        desc: \"the same item is pushed inside of a for loop\",\n+        deprecation: None,\n+        module: \"loops\",\n+    },\n     Lint {\n         name: \"search_is_some\",\n         group: \"complexity\","}, {"sha": "150acfbfee75996fd89b882784a26fcbc3a5e002", "filename": "tests/ui/extra_unused_lifetimes.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Fextra_unused_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Fextra_unused_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_lifetimes.rs?ref=c576bedc4149a6911f863a94aea2bc0ec109d4e3", "patch": "@@ -1,4 +1,10 @@\n-#![allow(unused, dead_code, clippy::needless_lifetimes, clippy::needless_pass_by_value)]\n+#![allow(\n+    unused,\n+    dead_code,\n+    clippy::needless_lifetimes,\n+    clippy::needless_pass_by_value,\n+    clippy::needless_arbitrary_self_type\n+)]\n #![warn(clippy::extra_unused_lifetimes)]\n \n fn empty() {}"}, {"sha": "ebdb8e749520fed2bd95045043b76e60f5829543", "filename": "tests/ui/extra_unused_lifetimes.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Fextra_unused_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Fextra_unused_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_lifetimes.stderr?ref=c576bedc4149a6911f863a94aea2bc0ec109d4e3", "patch": "@@ -1,25 +1,25 @@\n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:8:14\n+  --> $DIR/extra_unused_lifetimes.rs:14:14\n    |\n LL | fn unused_lt<'a>(x: u8) {}\n    |              ^^\n    |\n    = note: `-D clippy::extra-unused-lifetimes` implied by `-D warnings`\n \n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:10:25\n+  --> $DIR/extra_unused_lifetimes.rs:16:25\n    |\n LL | fn unused_lt_transitive<'a, 'b: 'a>(x: &'b u8) {\n    |                         ^^\n \n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:35:10\n+  --> $DIR/extra_unused_lifetimes.rs:41:10\n    |\n LL |     fn x<'a>(&self) {}\n    |          ^^\n \n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:61:22\n+  --> $DIR/extra_unused_lifetimes.rs:67:22\n    |\n LL |         fn unused_lt<'a>(x: u8) {}\n    |                      ^^"}, {"sha": "b5211318a15047e4e9c6f9f079cd2835d34fa01e", "filename": "tests/ui/len_without_is_empty.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Flen_without_is_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Flen_without_is_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_without_is_empty.rs?ref=c576bedc4149a6911f863a94aea2bc0ec109d4e3", "patch": "@@ -4,14 +4,14 @@\n pub struct PubOne;\n \n impl PubOne {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         1\n     }\n }\n \n impl PubOne {\n     // A second impl for this struct -- the error span shouldn't mention this.\n-    pub fn irrelevant(self: &Self) -> bool {\n+    pub fn irrelevant(&self) -> bool {\n         false\n     }\n }\n@@ -21,57 +21,57 @@ pub struct PubAllowed;\n \n #[allow(clippy::len_without_is_empty)]\n impl PubAllowed {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         1\n     }\n }\n \n // No `allow` attribute on this impl block, but that doesn't matter -- we only require one on the\n // impl containing `len`.\n impl PubAllowed {\n-    pub fn irrelevant(self: &Self) -> bool {\n+    pub fn irrelevant(&self) -> bool {\n         false\n     }\n }\n \n pub trait PubTraitsToo {\n-    fn len(self: &Self) -> isize;\n+    fn len(&self) -> isize;\n }\n \n impl PubTraitsToo for One {\n-    fn len(self: &Self) -> isize {\n+    fn len(&self) -> isize {\n         0\n     }\n }\n \n pub struct HasIsEmpty;\n \n impl HasIsEmpty {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         1\n     }\n \n-    fn is_empty(self: &Self) -> bool {\n+    fn is_empty(&self) -> bool {\n         false\n     }\n }\n \n pub struct HasWrongIsEmpty;\n \n impl HasWrongIsEmpty {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         1\n     }\n \n-    pub fn is_empty(self: &Self, x: u32) -> bool {\n+    pub fn is_empty(&self, x: u32) -> bool {\n         false\n     }\n }\n \n struct NotPubOne;\n \n impl NotPubOne {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         // No error; `len` is pub but `NotPubOne` is not exported anyway.\n         1\n     }\n@@ -80,48 +80,48 @@ impl NotPubOne {\n struct One;\n \n impl One {\n-    fn len(self: &Self) -> isize {\n+    fn len(&self) -> isize {\n         // No error; `len` is private; see issue #1085.\n         1\n     }\n }\n \n trait TraitsToo {\n-    fn len(self: &Self) -> isize;\n+    fn len(&self) -> isize;\n     // No error; `len` is private; see issue #1085.\n }\n \n impl TraitsToo for One {\n-    fn len(self: &Self) -> isize {\n+    fn len(&self) -> isize {\n         0\n     }\n }\n \n struct HasPrivateIsEmpty;\n \n impl HasPrivateIsEmpty {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         1\n     }\n \n-    fn is_empty(self: &Self) -> bool {\n+    fn is_empty(&self) -> bool {\n         false\n     }\n }\n \n struct Wither;\n \n pub trait WithIsEmpty {\n-    fn len(self: &Self) -> isize;\n-    fn is_empty(self: &Self) -> bool;\n+    fn len(&self) -> isize;\n+    fn is_empty(&self) -> bool;\n }\n \n impl WithIsEmpty for Wither {\n-    fn len(self: &Self) -> isize {\n+    fn len(&self) -> isize {\n         1\n     }\n \n-    fn is_empty(self: &Self) -> bool {\n+    fn is_empty(&self) -> bool {\n         false\n     }\n }"}, {"sha": "d79c300c07445054ec7ca5da083bb4aaf8202f1d", "filename": "tests/ui/len_without_is_empty.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Flen_without_is_empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Flen_without_is_empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_without_is_empty.stderr?ref=c576bedc4149a6911f863a94aea2bc0ec109d4e3", "patch": "@@ -2,7 +2,7 @@ error: item `PubOne` has a public `len` method but no corresponding `is_empty` m\n   --> $DIR/len_without_is_empty.rs:6:1\n    |\n LL | / impl PubOne {\n-LL | |     pub fn len(self: &Self) -> isize {\n+LL | |     pub fn len(&self) -> isize {\n LL | |         1\n LL | |     }\n LL | | }\n@@ -14,15 +14,15 @@ error: trait `PubTraitsToo` has a `len` method but no (possibly inherited) `is_e\n   --> $DIR/len_without_is_empty.rs:37:1\n    |\n LL | / pub trait PubTraitsToo {\n-LL | |     fn len(self: &Self) -> isize;\n+LL | |     fn len(&self) -> isize;\n LL | | }\n    | |_^\n \n error: item `HasIsEmpty` has a public `len` method but a private `is_empty` method\n   --> $DIR/len_without_is_empty.rs:49:1\n    |\n LL | / impl HasIsEmpty {\n-LL | |     pub fn len(self: &Self) -> isize {\n+LL | |     pub fn len(&self) -> isize {\n LL | |         1\n LL | |     }\n ...  |\n@@ -34,7 +34,7 @@ error: item `HasWrongIsEmpty` has a public `len` method but no corresponding `is\n   --> $DIR/len_without_is_empty.rs:61:1\n    |\n LL | / impl HasWrongIsEmpty {\n-LL | |     pub fn len(self: &Self) -> isize {\n+LL | |     pub fn len(&self) -> isize {\n LL | |         1\n LL | |     }\n ...  |"}, {"sha": "d81676a3d9f4801d06f1884e1473c8730bd7597f", "filename": "tests/ui/len_zero.fixed", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Flen_zero.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Flen_zero.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.fixed?ref=c576bedc4149a6911f863a94aea2bc0ec109d4e3", "patch": "@@ -7,51 +7,51 @@ pub struct One;\n struct Wither;\n \n trait TraitsToo {\n-    fn len(self: &Self) -> isize;\n+    fn len(&self) -> isize;\n     // No error; `len` is private; see issue #1085.\n }\n \n impl TraitsToo for One {\n-    fn len(self: &Self) -> isize {\n+    fn len(&self) -> isize {\n         0\n     }\n }\n \n pub struct HasIsEmpty;\n \n impl HasIsEmpty {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         1\n     }\n \n-    fn is_empty(self: &Self) -> bool {\n+    fn is_empty(&self) -> bool {\n         false\n     }\n }\n \n pub struct HasWrongIsEmpty;\n \n impl HasWrongIsEmpty {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         1\n     }\n \n-    pub fn is_empty(self: &Self, x: u32) -> bool {\n+    pub fn is_empty(&self, x: u32) -> bool {\n         false\n     }\n }\n \n pub trait WithIsEmpty {\n-    fn len(self: &Self) -> isize;\n-    fn is_empty(self: &Self) -> bool;\n+    fn len(&self) -> isize;\n+    fn is_empty(&self) -> bool;\n }\n \n impl WithIsEmpty for Wither {\n-    fn len(self: &Self) -> isize {\n+    fn len(&self) -> isize {\n         1\n     }\n \n-    fn is_empty(self: &Self) -> bool {\n+    fn is_empty(&self) -> bool {\n         false\n     }\n }"}, {"sha": "ecdba921a5d0fde97fa67b5a3a455d953d3cdd38", "filename": "tests/ui/len_zero.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.rs?ref=c576bedc4149a6911f863a94aea2bc0ec109d4e3", "patch": "@@ -7,51 +7,51 @@ pub struct One;\n struct Wither;\n \n trait TraitsToo {\n-    fn len(self: &Self) -> isize;\n+    fn len(&self) -> isize;\n     // No error; `len` is private; see issue #1085.\n }\n \n impl TraitsToo for One {\n-    fn len(self: &Self) -> isize {\n+    fn len(&self) -> isize {\n         0\n     }\n }\n \n pub struct HasIsEmpty;\n \n impl HasIsEmpty {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         1\n     }\n \n-    fn is_empty(self: &Self) -> bool {\n+    fn is_empty(&self) -> bool {\n         false\n     }\n }\n \n pub struct HasWrongIsEmpty;\n \n impl HasWrongIsEmpty {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         1\n     }\n \n-    pub fn is_empty(self: &Self, x: u32) -> bool {\n+    pub fn is_empty(&self, x: u32) -> bool {\n         false\n     }\n }\n \n pub trait WithIsEmpty {\n-    fn len(self: &Self) -> isize;\n-    fn is_empty(self: &Self) -> bool;\n+    fn len(&self) -> isize;\n+    fn is_empty(&self) -> bool;\n }\n \n impl WithIsEmpty for Wither {\n-    fn len(self: &Self) -> isize {\n+    fn len(&self) -> isize {\n         1\n     }\n \n-    fn is_empty(self: &Self) -> bool {\n+    fn is_empty(&self) -> bool {\n         false\n     }\n }"}, {"sha": "f7ed72a11cf684b64f8d584cbaa990ae4aa0fa39", "filename": "tests/ui/min_max.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Fmin_max.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Fmin_max.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_max.rs?ref=c576bedc4149a6911f863a94aea2bc0ec109d4e3", "patch": "@@ -6,6 +6,18 @@ use std::cmp::{max, min};\n \n const LARGE: usize = 3;\n \n+struct NotOrd(u64);\n+\n+impl NotOrd {\n+    fn min(self, x: u64) -> NotOrd {\n+        NotOrd(x)\n+    }\n+\n+    fn max(self, x: u64) -> NotOrd {\n+        NotOrd(x)\n+    }\n+}\n+\n fn main() {\n     let x;\n     x = 2usize;\n@@ -30,4 +42,24 @@ fn main() {\n     max(min(s, \"Apple\"), \"Zoo\");\n \n     max(\"Apple\", min(s, \"Zoo\")); // ok\n+\n+    let f = 3f32;\n+    x.min(1).max(3);\n+    x.max(3).min(1);\n+    f.max(3f32).min(1f32);\n+\n+    x.max(1).min(3); // ok\n+    x.min(3).max(1); // ok\n+    f.min(3f32).max(1f32); // ok\n+\n+    max(x.min(1), 3);\n+    min(x.max(1), 3); // ok\n+\n+    s.max(\"Zoo\").min(\"Apple\");\n+    s.min(\"Apple\").max(\"Zoo\");\n+\n+    s.min(\"Zoo\").max(\"Apple\"); // ok\n+\n+    let not_ord = NotOrd(1);\n+    not_ord.min(1).max(3); // ok\n }"}, {"sha": "9f8e26fa406f0e59c7458ec5b54ca234386abf6d", "filename": "tests/ui/min_max.stderr", "status": "modified", "additions": 44, "deletions": 8, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Fmin_max.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Fmin_max.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_max.stderr?ref=c576bedc4149a6911f863a94aea2bc0ec109d4e3", "patch": "@@ -1,46 +1,82 @@\n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:12:5\n+  --> $DIR/min_max.rs:24:5\n    |\n LL |     min(1, max(3, x));\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::min-max` implied by `-D warnings`\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:13:5\n+  --> $DIR/min_max.rs:25:5\n    |\n LL |     min(max(3, x), 1);\n    |     ^^^^^^^^^^^^^^^^^\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:14:5\n+  --> $DIR/min_max.rs:26:5\n    |\n LL |     max(min(x, 1), 3);\n    |     ^^^^^^^^^^^^^^^^^\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:15:5\n+  --> $DIR/min_max.rs:27:5\n    |\n LL |     max(3, min(x, 1));\n    |     ^^^^^^^^^^^^^^^^^\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:17:5\n+  --> $DIR/min_max.rs:29:5\n    |\n LL |     my_max(3, my_min(x, 1));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:29:5\n+  --> $DIR/min_max.rs:41:5\n    |\n LL |     min(\"Apple\", max(\"Zoo\", s));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:30:5\n+  --> $DIR/min_max.rs:42:5\n    |\n LL |     max(min(s, \"Apple\"), \"Zoo\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 7 previous errors\n+error: this `min`/`max` combination leads to constant result\n+  --> $DIR/min_max.rs:47:5\n+   |\n+LL |     x.min(1).max(3);\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: this `min`/`max` combination leads to constant result\n+  --> $DIR/min_max.rs:48:5\n+   |\n+LL |     x.max(3).min(1);\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: this `min`/`max` combination leads to constant result\n+  --> $DIR/min_max.rs:49:5\n+   |\n+LL |     f.max(3f32).min(1f32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this `min`/`max` combination leads to constant result\n+  --> $DIR/min_max.rs:55:5\n+   |\n+LL |     max(x.min(1), 3);\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: this `min`/`max` combination leads to constant result\n+  --> $DIR/min_max.rs:58:5\n+   |\n+LL |     s.max(\"Zoo\").min(\"Apple\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this `min`/`max` combination leads to constant result\n+  --> $DIR/min_max.rs:59:5\n+   |\n+LL |     s.min(\"Apple\").max(\"Zoo\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 13 previous errors\n "}, {"sha": "9da21eb6b29b82ff9ce6283373d2f1819c8f0ebb", "filename": "tests/ui/needless_arbitrary_self_type.fixed", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Fneedless_arbitrary_self_type.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Fneedless_arbitrary_self_type.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_arbitrary_self_type.fixed?ref=c576bedc4149a6911f863a94aea2bc0ec109d4e3", "patch": "@@ -0,0 +1,69 @@\n+// run-rustfix\n+\n+#![warn(clippy::needless_arbitrary_self_type)]\n+#![allow(unused_mut, clippy::needless_lifetimes)]\n+\n+pub enum ValType {\n+    A,\n+    B,\n+}\n+\n+impl ValType {\n+    pub fn bad(self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn good(self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_bad(mut self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_good(mut self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn ref_bad(&self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn ref_good(&self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn ref_bad_with_lifetime<'a>(&'a self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn ref_good_with_lifetime<'a>(&'a self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_bad(&mut self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_good(&mut self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_bad_with_lifetime<'a>(&'a mut self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_good_with_lifetime<'a>(&'a mut self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_mut_good(mut self: &mut Self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_mut_ref_good(self: &&mut &mut Self) {\n+        unimplemented!();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "17aeaaf97ac73ab792661dc03cf95f14035746f3", "filename": "tests/ui/needless_arbitrary_self_type.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Fneedless_arbitrary_self_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Fneedless_arbitrary_self_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_arbitrary_self_type.rs?ref=c576bedc4149a6911f863a94aea2bc0ec109d4e3", "patch": "@@ -0,0 +1,69 @@\n+// run-rustfix\n+\n+#![warn(clippy::needless_arbitrary_self_type)]\n+#![allow(unused_mut, clippy::needless_lifetimes)]\n+\n+pub enum ValType {\n+    A,\n+    B,\n+}\n+\n+impl ValType {\n+    pub fn bad(self: Self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn good(self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_bad(mut self: Self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_good(mut self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn ref_bad(self: &Self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn ref_good(&self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn ref_bad_with_lifetime<'a>(self: &'a Self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn ref_good_with_lifetime<'a>(&'a self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_bad(self: &mut Self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_good(&mut self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_bad_with_lifetime<'a>(self: &'a mut Self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_good_with_lifetime<'a>(&'a mut self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_mut_good(mut self: &mut Self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_mut_ref_good(self: &&mut &mut Self) {\n+        unimplemented!();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "f4c645d35c8f134a05fa4bd1d1665d65a42a4d5a", "filename": "tests/ui/needless_arbitrary_self_type.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Fneedless_arbitrary_self_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Fneedless_arbitrary_self_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_arbitrary_self_type.stderr?ref=c576bedc4149a6911f863a94aea2bc0ec109d4e3", "patch": "@@ -0,0 +1,40 @@\n+error: the type of the `self` parameter does not need to be arbitrary\n+  --> $DIR/needless_arbitrary_self_type.rs:12:16\n+   |\n+LL |     pub fn bad(self: Self) {\n+   |                ^^^^^^^^^^ help: consider to change this parameter to: `self`\n+   |\n+   = note: `-D clippy::needless-arbitrary-self-type` implied by `-D warnings`\n+\n+error: the type of the `self` parameter does not need to be arbitrary\n+  --> $DIR/needless_arbitrary_self_type.rs:20:20\n+   |\n+LL |     pub fn mut_bad(mut self: Self) {\n+   |                    ^^^^^^^^^^^^^^ help: consider to change this parameter to: `mut self`\n+\n+error: the type of the `self` parameter does not need to be arbitrary\n+  --> $DIR/needless_arbitrary_self_type.rs:28:20\n+   |\n+LL |     pub fn ref_bad(self: &Self) {\n+   |                    ^^^^^^^^^^^ help: consider to change this parameter to: `&self`\n+\n+error: the type of the `self` parameter does not need to be arbitrary\n+  --> $DIR/needless_arbitrary_self_type.rs:36:38\n+   |\n+LL |     pub fn ref_bad_with_lifetime<'a>(self: &'a Self) {\n+   |                                      ^^^^^^^^^^^^^^ help: consider to change this parameter to: `&'a self`\n+\n+error: the type of the `self` parameter does not need to be arbitrary\n+  --> $DIR/needless_arbitrary_self_type.rs:44:24\n+   |\n+LL |     pub fn mut_ref_bad(self: &mut Self) {\n+   |                        ^^^^^^^^^^^^^^^ help: consider to change this parameter to: `&mut self`\n+\n+error: the type of the `self` parameter does not need to be arbitrary\n+  --> $DIR/needless_arbitrary_self_type.rs:52:42\n+   |\n+LL |     pub fn mut_ref_bad_with_lifetime<'a>(self: &'a mut Self) {\n+   |                                          ^^^^^^^^^^^^^^^^^^ help: consider to change this parameter to: `&'a mut self`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "96d1c54946c0b40a7cee773d20f4bc6dfe0408ab", "filename": "tests/ui/option_map_unit_fn_fixable.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Foption_map_unit_fn_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Foption_map_unit_fn_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.fixed?ref=c576bedc4149a6911f863a94aea2bc0ec109d4e3", "patch": "@@ -22,9 +22,9 @@ struct HasOption {\n }\n \n impl HasOption {\n-    fn do_option_nothing(self: &Self, value: usize) {}\n+    fn do_option_nothing(&self, value: usize) {}\n \n-    fn do_option_plus_one(self: &Self, value: usize) -> usize {\n+    fn do_option_plus_one(&self, value: usize) -> usize {\n         value + 1\n     }\n }"}, {"sha": "931ffc18665938cd3af7a9b592ad71f67a4df96d", "filename": "tests/ui/option_map_unit_fn_fixable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Foption_map_unit_fn_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Foption_map_unit_fn_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.rs?ref=c576bedc4149a6911f863a94aea2bc0ec109d4e3", "patch": "@@ -22,9 +22,9 @@ struct HasOption {\n }\n \n impl HasOption {\n-    fn do_option_nothing(self: &Self, value: usize) {}\n+    fn do_option_nothing(&self, value: usize) {}\n \n-    fn do_option_plus_one(self: &Self, value: usize) -> usize {\n+    fn do_option_plus_one(&self, value: usize) -> usize {\n         value + 1\n     }\n }"}, {"sha": "631042c616bc0cd261579f32aa06c43e9526b151", "filename": "tests/ui/result_map_unit_fn_fixable.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Fresult_map_unit_fn_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Fresult_map_unit_fn_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_fixable.fixed?ref=c576bedc4149a6911f863a94aea2bc0ec109d4e3", "patch": "@@ -18,9 +18,9 @@ struct HasResult {\n }\n \n impl HasResult {\n-    fn do_result_nothing(self: &Self, value: usize) {}\n+    fn do_result_nothing(&self, value: usize) {}\n \n-    fn do_result_plus_one(self: &Self, value: usize) -> usize {\n+    fn do_result_plus_one(&self, value: usize) -> usize {\n         value + 1\n     }\n }"}, {"sha": "679eb2326268c7a62fba3a04b228d9bbf4a827ee", "filename": "tests/ui/result_map_unit_fn_fixable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Fresult_map_unit_fn_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Fresult_map_unit_fn_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_fixable.rs?ref=c576bedc4149a6911f863a94aea2bc0ec109d4e3", "patch": "@@ -18,9 +18,9 @@ struct HasResult {\n }\n \n impl HasResult {\n-    fn do_result_nothing(self: &Self, value: usize) {}\n+    fn do_result_nothing(&self, value: usize) {}\n \n-    fn do_result_plus_one(self: &Self, value: usize) -> usize {\n+    fn do_result_plus_one(&self, value: usize) -> usize {\n         value + 1\n     }\n }"}, {"sha": "ff1088f86f6470cc2c41256fdd8746d3161bb23b", "filename": "tests/ui/same_item_push.rs", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_item_push.rs?ref=c576bedc4149a6911f863a94aea2bc0ec109d4e3", "patch": "@@ -0,0 +1,89 @@\n+#![warn(clippy::same_item_push)]\n+\n+fn mutate_increment(x: &mut u8) -> u8 {\n+    *x += 1;\n+    *x\n+}\n+\n+fn increment(x: u8) -> u8 {\n+    x + 1\n+}\n+\n+fn main() {\n+    // Test for basic case\n+    let mut spaces = Vec::with_capacity(10);\n+    for _ in 0..10 {\n+        spaces.push(vec![b' ']);\n+    }\n+\n+    let mut vec2: Vec<u8> = Vec::new();\n+    let item = 2;\n+    for _ in 5..=20 {\n+        vec2.push(item);\n+    }\n+\n+    let mut vec3: Vec<u8> = Vec::new();\n+    for _ in 0..15 {\n+        let item = 2;\n+        vec3.push(item);\n+    }\n+\n+    let mut vec4: Vec<u8> = Vec::new();\n+    for _ in 0..15 {\n+        vec4.push(13);\n+    }\n+\n+    // Suggestion should not be given as pushed variable can mutate\n+    let mut vec5: Vec<u8> = Vec::new();\n+    let mut item: u8 = 2;\n+    for _ in 0..30 {\n+        vec5.push(mutate_increment(&mut item));\n+    }\n+\n+    let mut vec6: Vec<u8> = Vec::new();\n+    let mut item: u8 = 2;\n+    let mut item2 = &mut mutate_increment(&mut item);\n+    for _ in 0..30 {\n+        vec6.push(mutate_increment(item2));\n+    }\n+\n+    let mut vec7: Vec<usize> = Vec::new();\n+    for (a, b) in [0, 1, 4, 9, 16].iter().enumerate() {\n+        vec7.push(a);\n+    }\n+\n+    let mut vec8: Vec<u8> = Vec::new();\n+    for i in 0..30 {\n+        vec8.push(increment(i));\n+    }\n+\n+    let mut vec9: Vec<u8> = Vec::new();\n+    for i in 0..30 {\n+        vec9.push(i + i * i);\n+    }\n+\n+    // Suggestion should not be given as there are multiple pushes that are not the same\n+    let mut vec10: Vec<u8> = Vec::new();\n+    let item: u8 = 2;\n+    for _ in 0..30 {\n+        vec10.push(item);\n+        vec10.push(item * 2);\n+    }\n+\n+    // Suggestion should not be given as Vec is not involved\n+    for _ in 0..5 {\n+        println!(\"Same Item Push\");\n+    }\n+\n+    struct A {\n+        kind: u32,\n+    }\n+    let mut vec_a: Vec<A> = Vec::new();\n+    for i in 0..30 {\n+        vec_a.push(A { kind: i });\n+    }\n+    let mut vec12: Vec<u8> = Vec::new();\n+    for a in vec_a {\n+        vec12.push(2u8.pow(a.kind));\n+    }\n+}"}, {"sha": "ddc5d48cd41357471b770872e2e4d05b33af3ab6", "filename": "tests/ui/same_item_push.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Fsame_item_push.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Fsame_item_push.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_item_push.stderr?ref=c576bedc4149a6911f863a94aea2bc0ec109d4e3", "patch": "@@ -0,0 +1,35 @@\n+error: it looks like the same item is being pushed into this Vec\n+  --> $DIR/same_item_push.rs:16:9\n+   |\n+LL |         spaces.push(vec![b' ']);\n+   |         ^^^^^^\n+   |\n+   = note: `-D clippy::same-item-push` implied by `-D warnings`\n+   = help: try using vec![vec![b' '];SIZE] or spaces.resize(NEW_SIZE, vec![b' '])\n+\n+error: it looks like the same item is being pushed into this Vec\n+  --> $DIR/same_item_push.rs:22:9\n+   |\n+LL |         vec2.push(item);\n+   |         ^^^^\n+   |\n+   = help: try using vec![item;SIZE] or vec2.resize(NEW_SIZE, item)\n+\n+error: it looks like the same item is being pushed into this Vec\n+  --> $DIR/same_item_push.rs:28:9\n+   |\n+LL |         vec3.push(item);\n+   |         ^^^^\n+   |\n+   = help: try using vec![item;SIZE] or vec3.resize(NEW_SIZE, item)\n+\n+error: it looks like the same item is being pushed into this Vec\n+  --> $DIR/same_item_push.rs:33:9\n+   |\n+LL |         vec4.push(13);\n+   |         ^^^^\n+   |\n+   = help: try using vec![13;SIZE] or vec4.resize(NEW_SIZE, 13)\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "690d705573d3f73ae3bba84c7dfb4a97d35e87fb", "filename": "tests/ui/unsafe_derive_deserialize.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Funsafe_derive_deserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c576bedc4149a6911f863a94aea2bc0ec109d4e3/tests%2Fui%2Funsafe_derive_deserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe_derive_deserialize.rs?ref=c576bedc4149a6911f863a94aea2bc0ec109d4e3", "patch": "@@ -57,4 +57,14 @@ impl E {\n #[derive(Deserialize)]\n pub struct F {}\n \n+// Check that we honor the `allow` attribute on the ADT\n+#[allow(clippy::unsafe_derive_deserialize)]\n+#[derive(Deserialize)]\n+pub struct G {}\n+impl G {\n+    pub fn unsafe_block(&self) {\n+        unsafe {}\n+    }\n+}\n+\n fn main() {}"}]}