{"sha": "bd31ba045dca8165a4cb9dfb9a754ddc98e15009", "node_id": "C_kwDOAAsO6NoAKGJkMzFiYTA0NWRjYTgxNjVhNGNiOWRmYjlhNzU0ZGRjOThlMTUwMDk", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-30T16:30:11Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-06T08:57:03Z"}, "message": "make Size and Align debug-printing a bit more compact", "tree": {"sha": "c3fd3313df54bf6997280e7e57351c517699edc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3fd3313df54bf6997280e7e57351c517699edc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd31ba045dca8165a4cb9dfb9a754ddc98e15009", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd31ba045dca8165a4cb9dfb9a754ddc98e15009", "html_url": "https://github.com/rust-lang/rust/commit/bd31ba045dca8165a4cb9dfb9a754ddc98e15009", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd31ba045dca8165a4cb9dfb9a754ddc98e15009/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9714e139ffb25f3b96b28110ae81677c8c1a7cf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9714e139ffb25f3b96b28110ae81677c8c1a7cf2", "html_url": "https://github.com/rust-lang/rust/commit/9714e139ffb25f3b96b28110ae81677c8c1a7cf2"}], "stats": {"total": 729, "additions": 206, "deletions": 523}, "files": [{"sha": "a2cd3c4c46816e44ef715038e9f94994e678551e", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bd31ba045dca8165a4cb9dfb9a754ddc98e15009/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd31ba045dca8165a4cb9dfb9a754ddc98e15009/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=bd31ba045dca8165a4cb9dfb9a754ddc98e15009", "patch": "@@ -276,12 +276,19 @@ impl ToJson for Endian {\n }\n \n /// Size of a type in bytes.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Encodable, Decodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]\n #[derive(HashStable_Generic)]\n pub struct Size {\n     raw: u64,\n }\n \n+// This is debug-printed a lot in larger structs, don't waste too much space there\n+impl fmt::Debug for Size {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"Size({} bytes)\", self.bytes())\n+    }\n+}\n+\n impl Size {\n     pub const ZERO: Size = Size { raw: 0 };\n \n@@ -485,12 +492,19 @@ impl Step for Size {\n }\n \n /// Alignment of a type in bytes (always a power of two).\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Encodable, Decodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]\n #[derive(HashStable_Generic)]\n pub struct Align {\n     pow2: u8,\n }\n \n+// This is debug-printed a lot in larger structs, don't waste too much space there\n+impl fmt::Debug for Align {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"Align({} bytes)\", self.bytes())\n+    }\n+}\n+\n impl Align {\n     pub const ONE: Align = Align { pow2: 0 };\n "}, {"sha": "a282e71235c31f73cb0c1db7a21c02920ebe6069", "filename": "src/test/ui/layout/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd31ba045dca8165a4cb9dfb9a754ddc98e15009/src%2Ftest%2Fui%2Flayout%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd31ba045dca8165a4cb9dfb9a754ddc98e15009/src%2Ftest%2Fui%2Flayout%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fdebug.rs?ref=bd31ba045dca8165a4cb9dfb9a754ddc98e15009", "patch": "@@ -1,4 +1,4 @@\n-// normalize-stderr-test \"pref: Align \\{\\n *pow2: [1-3],\\n *\\}\" -> \"pref: $$PREF_ALIGN\"\n+// normalize-stderr-test \"pref: Align\\([1-8] bytes\\)\" -> \"pref: $$PREF_ALIGN\"\n #![feature(never_type, rustc_attrs, type_alias_impl_trait)]\n #![crate_type = \"lib\"]\n "}, {"sha": "56a1337e6a5ea55eb001159862fdedd99012ca30", "filename": "src/test/ui/layout/debug.stderr", "status": "modified", "additions": 30, "deletions": 90, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/bd31ba045dca8165a4cb9dfb9a754ddc98e15009/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd31ba045dca8165a4cb9dfb9a754ddc98e15009/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr?ref=bd31ba045dca8165a4cb9dfb9a754ddc98e15009", "patch": "@@ -1,9 +1,7 @@\n error: layout_of(E) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -33,27 +31,17 @@ error: layout_of(E) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 4,\n-                       },\n+                       size: Size(4 bytes),\n                    },\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 4,\n-                               },\n-                               Size {\n-                                   raw: 4,\n-                               },\n-                               Size {\n-                                   raw: 8,\n-                               },\n+                               Size(4 bytes),\n+                               Size(4 bytes),\n+                               Size(8 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -67,14 +55,10 @@ error: layout_of(E) = Layout {\n                        abi: Uninhabited,\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 2,\n-                           },\n+                           abi: Align(4 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 12,\n-                       },\n+                       size: Size(12 bytes),\n                    },\n                ],\n            },\n@@ -83,9 +67,7 @@ error: layout_of(E) = Layout {\n            },\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I32,\n                        false,\n@@ -94,14 +76,10 @@ error: layout_of(E) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 2,\n-               },\n+               abi: Align(4 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 12,\n-           },\n+           size: Size(12 bytes),\n        }\n   --> $DIR/debug.rs:6:1\n    |\n@@ -111,15 +89,9 @@ LL | enum E { Foo, Bar(!, i32, i32) }\n error: layout_of(S) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n-                   Size {\n-                       raw: 0,\n-                   },\n-                   Size {\n-                       raw: 4,\n-                   },\n+                   Size(0 bytes),\n+                   Size(0 bytes),\n+                   Size(4 bytes),\n                ],\n                memory_index: [\n                    1,\n@@ -148,14 +120,10 @@ error: layout_of(S) = Layout {\n            ),\n            largest_niche: None,\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 2,\n-               },\n+               abi: Align(4 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 8,\n-           },\n+           size: Size(8 bytes),\n        }\n   --> $DIR/debug.rs:9:1\n    |\n@@ -174,14 +142,10 @@ error: layout_of(U) = Layout {\n            },\n            largest_niche: None,\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 2,\n-               },\n+               abi: Align(4 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 8,\n-           },\n+           size: Size(8 bytes),\n        }\n   --> $DIR/debug.rs:12:1\n    |\n@@ -191,9 +155,7 @@ LL | union U { f1: (i32, i32), f3: i32 }\n error: layout_of(std::result::Result<i32, i32>) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -213,9 +175,7 @@ error: layout_of(std::result::Result<i32, i32>) = Layout {\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 4,\n-                               },\n+                               Size(4 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -229,21 +189,15 @@ error: layout_of(std::result::Result<i32, i32>) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 2,\n-                           },\n+                           abi: Align(4 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 8,\n-                       },\n+                       size: Size(8 bytes),\n                    },\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 4,\n-                               },\n+                               Size(4 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -257,14 +211,10 @@ error: layout_of(std::result::Result<i32, i32>) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 2,\n-                           },\n+                           abi: Align(4 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 8,\n-                       },\n+                       size: Size(8 bytes),\n                    },\n                ],\n            },\n@@ -286,9 +236,7 @@ error: layout_of(std::result::Result<i32, i32>) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I32,\n                        false,\n@@ -297,14 +245,10 @@ error: layout_of(std::result::Result<i32, i32>) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 2,\n-               },\n+               abi: Align(4 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 8,\n-           },\n+           size: Size(8 bytes),\n        }\n   --> $DIR/debug.rs:15:1\n    |\n@@ -327,14 +271,10 @@ error: layout_of(i32) = Layout {\n            ),\n            largest_niche: None,\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 2,\n-               },\n+               abi: Align(4 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 4,\n-           },\n+           size: Size(4 bytes),\n        }\n   --> $DIR/debug.rs:18:1\n    |"}, {"sha": "ba919df771fca096b73467a13a44f08b7f2fc5ca", "filename": "src/test/ui/layout/hexagon-enum.stderr", "status": "modified", "additions": 40, "deletions": 120, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/bd31ba045dca8165a4cb9dfb9a754ddc98e15009/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd31ba045dca8165a4cb9dfb9a754ddc98e15009/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr?ref=bd31ba045dca8165a4cb9dfb9a754ddc98e15009", "patch": "@@ -1,9 +1,7 @@\n error: layout_of(A) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -33,16 +31,10 @@ error: layout_of(A) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n-                           pref: Align {\n-                               pow2: 0,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 1,\n+                           abi: Align(1 bytes),\n+                           pref: Align(1 bytes),\n                        },\n+                       size: Size(1 bytes),\n                    },\n                ],\n            },\n@@ -57,9 +49,7 @@ error: layout_of(A) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -68,16 +58,10 @@ error: layout_of(A) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 0,\n-               },\n-               pref: Align {\n-                   pow2: 0,\n-               },\n-           },\n-           size: Size {\n-               raw: 1,\n+               abi: Align(1 bytes),\n+               pref: Align(1 bytes),\n            },\n+           size: Size(1 bytes),\n        }\n   --> $DIR/hexagon-enum.rs:16:1\n    |\n@@ -87,9 +71,7 @@ LL | enum A { Apple }\n error: layout_of(B) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -119,16 +101,10 @@ error: layout_of(B) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n-                           pref: Align {\n-                               pow2: 0,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 1,\n+                           abi: Align(1 bytes),\n+                           pref: Align(1 bytes),\n                        },\n+                       size: Size(1 bytes),\n                    },\n                ],\n            },\n@@ -143,9 +119,7 @@ error: layout_of(B) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -154,16 +128,10 @@ error: layout_of(B) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 0,\n-               },\n-               pref: Align {\n-                   pow2: 0,\n-               },\n-           },\n-           size: Size {\n-               raw: 1,\n+               abi: Align(1 bytes),\n+               pref: Align(1 bytes),\n            },\n+           size: Size(1 bytes),\n        }\n   --> $DIR/hexagon-enum.rs:20:1\n    |\n@@ -173,9 +141,7 @@ LL | enum B { Banana = 255, }\n error: layout_of(C) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -205,16 +171,10 @@ error: layout_of(C) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 1,\n-                           },\n-                           pref: Align {\n-                               pow2: 1,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 2,\n+                           abi: Align(2 bytes),\n+                           pref: Align(2 bytes),\n                        },\n+                       size: Size(2 bytes),\n                    },\n                ],\n            },\n@@ -229,9 +189,7 @@ error: layout_of(C) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I16,\n                        false,\n@@ -240,16 +198,10 @@ error: layout_of(C) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 1,\n-               },\n-               pref: Align {\n-                   pow2: 1,\n-               },\n-           },\n-           size: Size {\n-               raw: 2,\n+               abi: Align(2 bytes),\n+               pref: Align(2 bytes),\n            },\n+           size: Size(2 bytes),\n        }\n   --> $DIR/hexagon-enum.rs:24:1\n    |\n@@ -259,9 +211,7 @@ LL | enum C { Chaenomeles = 256, }\n error: layout_of(P) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -291,16 +241,10 @@ error: layout_of(P) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 2,\n-                           },\n-                           pref: Align {\n-                               pow2: 2,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 4,\n+                           abi: Align(4 bytes),\n+                           pref: Align(4 bytes),\n                        },\n+                       size: Size(4 bytes),\n                    },\n                ],\n            },\n@@ -315,9 +259,7 @@ error: layout_of(P) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I32,\n                        false,\n@@ -326,16 +268,10 @@ error: layout_of(P) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 2,\n-               },\n-               pref: Align {\n-                   pow2: 2,\n-               },\n-           },\n-           size: Size {\n-               raw: 4,\n+               abi: Align(4 bytes),\n+               pref: Align(4 bytes),\n            },\n+           size: Size(4 bytes),\n        }\n   --> $DIR/hexagon-enum.rs:28:1\n    |\n@@ -345,9 +281,7 @@ LL | enum P { Peach = 0x1000_0000isize, }\n error: layout_of(T) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -377,16 +311,10 @@ error: layout_of(T) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 2,\n-                           },\n-                           pref: Align {\n-                               pow2: 2,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 4,\n+                           abi: Align(4 bytes),\n+                           pref: Align(4 bytes),\n                        },\n+                       size: Size(4 bytes),\n                    },\n                ],\n            },\n@@ -401,9 +329,7 @@ error: layout_of(T) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I32,\n                        true,\n@@ -412,16 +338,10 @@ error: layout_of(T) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 2,\n-               },\n-               pref: Align {\n-                   pow2: 2,\n-               },\n-           },\n-           size: Size {\n-               raw: 4,\n+               abi: Align(4 bytes),\n+               pref: Align(4 bytes),\n            },\n+           size: Size(4 bytes),\n        }\n   --> $DIR/hexagon-enum.rs:34:1\n    |"}, {"sha": "6c97a09b0c666bf9f0a37b4cc5365d3c5c686182", "filename": "src/test/ui/layout/homogeneous-aggr-zero-sized-c-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd31ba045dca8165a4cb9dfb9a754ddc98e15009/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-c-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd31ba045dca8165a4cb9dfb9a754ddc98e15009/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-c-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-c-struct.stderr?ref=bd31ba045dca8165a4cb9dfb9a754ddc98e15009", "patch": "@@ -1,10 +1,10 @@\n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n   --> $DIR/homogeneous-aggr-zero-sized-c-struct.rs:22:1\n    |\n LL | pub type TestMiddle = Middle;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n   --> $DIR/homogeneous-aggr-zero-sized-c-struct.rs:33:1\n    |\n LL | pub type TestFinal = Final;"}, {"sha": "a473c5c97c0b26d4ba53355c96183f250a479d77", "filename": "src/test/ui/layout/homogeneous-aggr-zero-sized-repr-rust.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bd31ba045dca8165a4cb9dfb9a754ddc98e15009/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-repr-rust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd31ba045dca8165a4cb9dfb9a754ddc98e15009/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-repr-rust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-repr-rust.rs?ref=bd31ba045dca8165a4cb9dfb9a754ddc98e15009", "patch": "@@ -17,8 +17,7 @@ pub struct WithPhantomData {\n     pub _unit: std::marker::PhantomData<()>,\n }\n \n-pub struct EmptyRustStruct {\n-}\n+pub struct EmptyRustStruct {}\n \n #[repr(C)]\n pub struct WithEmptyRustStruct {\n@@ -52,22 +51,22 @@ pub struct WithEmptyRustEnum {\n \n #[rustc_layout(homogeneous_aggregate)]\n pub type Test1 = BaseCase;\n-//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n \n #[rustc_layout(homogeneous_aggregate)]\n pub type Test2 = WithPhantomData;\n-//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n \n #[rustc_layout(homogeneous_aggregate)]\n pub type Test3 = WithEmptyRustStruct;\n-//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n \n #[rustc_layout(homogeneous_aggregate)]\n pub type Test4 = WithTransitivelyEmptyRustStruct;\n-//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n \n #[rustc_layout(homogeneous_aggregate)]\n pub type Test5 = WithEmptyRustEnum;\n-//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n \n-fn main() { }\n+fn main() {}"}, {"sha": "322948ff7839978e7f59d5427e72cd36fed9d288", "filename": "src/test/ui/layout/homogeneous-aggr-zero-sized-repr-rust.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bd31ba045dca8165a4cb9dfb9a754ddc98e15009/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-repr-rust.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd31ba045dca8165a4cb9dfb9a754ddc98e15009/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-repr-rust.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-repr-rust.stderr?ref=bd31ba045dca8165a4cb9dfb9a754ddc98e15009", "patch": "@@ -1,29 +1,29 @@\n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n-  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:54:1\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n+  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:53:1\n    |\n LL | pub type Test1 = BaseCase;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n-  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:58:1\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n+  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:57:1\n    |\n LL | pub type Test2 = WithPhantomData;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n-  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:62:1\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n+  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:61:1\n    |\n LL | pub type Test3 = WithEmptyRustStruct;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n-  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:66:1\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n+  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:65:1\n    |\n LL | pub type Test4 = WithTransitivelyEmptyRustStruct;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n-  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:70:1\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n+  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:69:1\n    |\n LL | pub type Test5 = WithEmptyRustEnum;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "af5f5885d67c5d3d8ed134b3472f32e4f1b06d41", "filename": "src/test/ui/layout/issue-96158-scalarpair-payload-might-be-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd31ba045dca8165a4cb9dfb9a754ddc98e15009/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd31ba045dca8165a4cb9dfb9a754ddc98e15009/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.rs?ref=bd31ba045dca8165a4cb9dfb9a754ddc98e15009", "patch": "@@ -1,4 +1,4 @@\n-// normalize-stderr-test \"pref: Align \\{\\n *pow2: [1-3],\\n *\\}\" -> \"pref: $$PREF_ALIGN\"\n+// normalize-stderr-test \"pref: Align\\([1-8] bytes\\)\" -> \"pref: $$PREF_ALIGN\"\n #![crate_type = \"lib\"]\n #![feature(rustc_attrs)]\n "}, {"sha": "1a724e6f59be1ed2ec5690cc6dd3e7f5fdc9d0b7", "filename": "src/test/ui/layout/issue-96158-scalarpair-payload-might-be-uninit.stderr", "status": "modified", "additions": 55, "deletions": 165, "changes": 220, "blob_url": "https://github.com/rust-lang/rust/blob/bd31ba045dca8165a4cb9dfb9a754ddc98e15009/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd31ba045dca8165a4cb9dfb9a754ddc98e15009/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.stderr?ref=bd31ba045dca8165a4cb9dfb9a754ddc98e15009", "patch": "@@ -1,9 +1,7 @@\n error: layout_of(MissingPayloadField) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -23,9 +21,7 @@ error: layout_of(MissingPayloadField) = Layout {\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 1,\n-                               },\n+                               Size(1 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -39,14 +35,10 @@ error: layout_of(MissingPayloadField) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 2,\n-                       },\n+                       size: Size(2 bytes),\n                    },\n                    Layout {\n                        fields: Arbitrary {\n@@ -61,14 +53,10 @@ error: layout_of(MissingPayloadField) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 1,\n-                       },\n+                       size: Size(1 bytes),\n                    },\n                ],\n            },\n@@ -89,9 +77,7 @@ error: layout_of(MissingPayloadField) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -100,14 +86,10 @@ error: layout_of(MissingPayloadField) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 0,\n-               },\n+               abi: Align(1 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 2,\n-           },\n+           size: Size(2 bytes),\n        }\n   --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:16:1\n    |\n@@ -120,9 +102,7 @@ LL | | }\n error: layout_of(CommonPayloadField) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -142,9 +122,7 @@ error: layout_of(CommonPayloadField) = Layout {\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 1,\n-                               },\n+                               Size(1 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -158,21 +136,15 @@ error: layout_of(CommonPayloadField) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 2,\n-                       },\n+                       size: Size(2 bytes),\n                    },\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 1,\n-                               },\n+                               Size(1 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -186,14 +158,10 @@ error: layout_of(CommonPayloadField) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 2,\n-                       },\n+                       size: Size(2 bytes),\n                    },\n                ],\n            },\n@@ -215,9 +183,7 @@ error: layout_of(CommonPayloadField) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -226,14 +192,10 @@ error: layout_of(CommonPayloadField) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 0,\n-               },\n+               abi: Align(1 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 2,\n-           },\n+           size: Size(2 bytes),\n        }\n   --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:25:1\n    |\n@@ -246,9 +208,7 @@ LL | | }\n error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -268,9 +228,7 @@ error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 1,\n-                               },\n+                               Size(1 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -284,21 +242,15 @@ error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 2,\n-                       },\n+                       size: Size(2 bytes),\n                    },\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 1,\n-                               },\n+                               Size(1 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -312,14 +264,10 @@ error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 2,\n-                       },\n+                       size: Size(2 bytes),\n                    },\n                ],\n            },\n@@ -340,9 +288,7 @@ error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -351,14 +297,10 @@ error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 0,\n-               },\n+               abi: Align(1 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 2,\n-           },\n+           size: Size(2 bytes),\n        }\n   --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:33:1\n    |\n@@ -371,9 +313,7 @@ LL | | }\n error: layout_of(NicheFirst) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -397,12 +337,8 @@ error: layout_of(NicheFirst) = Layout {\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 0,\n-                               },\n-                               Size {\n-                                   raw: 1,\n-                               },\n+                               Size(0 bytes),\n+                               Size(1 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -430,9 +366,7 @@ error: layout_of(NicheFirst) = Layout {\n                        ),\n                        largest_niche: Some(\n                            Niche {\n-                               offset: Size {\n-                                   raw: 0,\n-                               },\n+                               offset: Size(0 bytes),\n                                value: Int(\n                                    I8,\n                                    false,\n@@ -441,14 +375,10 @@ error: layout_of(NicheFirst) = Layout {\n                            },\n                        ),\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 2,\n-                       },\n+                       size: Size(2 bytes),\n                    },\n                    Layout {\n                        fields: Arbitrary {\n@@ -463,14 +393,10 @@ error: layout_of(NicheFirst) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 0,\n-                       },\n+                       size: Size(0 bytes),\n                    },\n                    Layout {\n                        fields: Arbitrary {\n@@ -485,14 +411,10 @@ error: layout_of(NicheFirst) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 0,\n-                       },\n+                       size: Size(0 bytes),\n                    },\n                ],\n            },\n@@ -513,9 +435,7 @@ error: layout_of(NicheFirst) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -524,14 +444,10 @@ error: layout_of(NicheFirst) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 0,\n-               },\n+               abi: Align(1 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 2,\n-           },\n+           size: Size(2 bytes),\n        }\n   --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:41:1\n    |\n@@ -545,9 +461,7 @@ LL | | }\n error: layout_of(NicheSecond) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 1,\n-                   },\n+                   Size(1 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -571,12 +485,8 @@ error: layout_of(NicheSecond) = Layout {\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 0,\n-                               },\n-                               Size {\n-                                   raw: 1,\n-                               },\n+                               Size(0 bytes),\n+                               Size(1 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -604,9 +514,7 @@ error: layout_of(NicheSecond) = Layout {\n                        ),\n                        largest_niche: Some(\n                            Niche {\n-                               offset: Size {\n-                                   raw: 1,\n-                               },\n+                               offset: Size(1 bytes),\n                                value: Int(\n                                    I8,\n                                    false,\n@@ -615,14 +523,10 @@ error: layout_of(NicheSecond) = Layout {\n                            },\n                        ),\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 2,\n-                       },\n+                       size: Size(2 bytes),\n                    },\n                    Layout {\n                        fields: Arbitrary {\n@@ -637,14 +541,10 @@ error: layout_of(NicheSecond) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 0,\n-                       },\n+                       size: Size(0 bytes),\n                    },\n                    Layout {\n                        fields: Arbitrary {\n@@ -659,14 +559,10 @@ error: layout_of(NicheSecond) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 0,\n-                       },\n+                       size: Size(0 bytes),\n                    },\n                ],\n            },\n@@ -687,9 +583,7 @@ error: layout_of(NicheSecond) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 1,\n-                   },\n+                   offset: Size(1 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -698,14 +592,10 @@ error: layout_of(NicheSecond) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 0,\n-               },\n+               abi: Align(1 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 2,\n-           },\n+           size: Size(2 bytes),\n        }\n   --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:50:1\n    |"}, {"sha": "9db9ad5a784862023e646a018da233d100e18c7c", "filename": "src/test/ui/layout/thumb-enum.stderr", "status": "modified", "additions": 40, "deletions": 120, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/bd31ba045dca8165a4cb9dfb9a754ddc98e15009/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd31ba045dca8165a4cb9dfb9a754ddc98e15009/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr?ref=bd31ba045dca8165a4cb9dfb9a754ddc98e15009", "patch": "@@ -1,9 +1,7 @@\n error: layout_of(A) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -33,16 +31,10 @@ error: layout_of(A) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n-                           pref: Align {\n-                               pow2: 2,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 1,\n+                           abi: Align(1 bytes),\n+                           pref: Align(4 bytes),\n                        },\n+                       size: Size(1 bytes),\n                    },\n                ],\n            },\n@@ -57,9 +49,7 @@ error: layout_of(A) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -68,16 +58,10 @@ error: layout_of(A) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 0,\n-               },\n-               pref: Align {\n-                   pow2: 2,\n-               },\n-           },\n-           size: Size {\n-               raw: 1,\n+               abi: Align(1 bytes),\n+               pref: Align(4 bytes),\n            },\n+           size: Size(1 bytes),\n        }\n   --> $DIR/thumb-enum.rs:16:1\n    |\n@@ -87,9 +71,7 @@ LL | enum A { Apple }\n error: layout_of(B) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -119,16 +101,10 @@ error: layout_of(B) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n-                           pref: Align {\n-                               pow2: 2,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 1,\n+                           abi: Align(1 bytes),\n+                           pref: Align(4 bytes),\n                        },\n+                       size: Size(1 bytes),\n                    },\n                ],\n            },\n@@ -143,9 +119,7 @@ error: layout_of(B) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -154,16 +128,10 @@ error: layout_of(B) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 0,\n-               },\n-               pref: Align {\n-                   pow2: 2,\n-               },\n-           },\n-           size: Size {\n-               raw: 1,\n+               abi: Align(1 bytes),\n+               pref: Align(4 bytes),\n            },\n+           size: Size(1 bytes),\n        }\n   --> $DIR/thumb-enum.rs:20:1\n    |\n@@ -173,9 +141,7 @@ LL | enum B { Banana = 255, }\n error: layout_of(C) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -205,16 +171,10 @@ error: layout_of(C) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 1,\n-                           },\n-                           pref: Align {\n-                               pow2: 2,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 2,\n+                           abi: Align(2 bytes),\n+                           pref: Align(4 bytes),\n                        },\n+                       size: Size(2 bytes),\n                    },\n                ],\n            },\n@@ -229,9 +189,7 @@ error: layout_of(C) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I16,\n                        false,\n@@ -240,16 +198,10 @@ error: layout_of(C) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 1,\n-               },\n-               pref: Align {\n-                   pow2: 2,\n-               },\n-           },\n-           size: Size {\n-               raw: 2,\n+               abi: Align(2 bytes),\n+               pref: Align(4 bytes),\n            },\n+           size: Size(2 bytes),\n        }\n   --> $DIR/thumb-enum.rs:24:1\n    |\n@@ -259,9 +211,7 @@ LL | enum C { Chaenomeles = 256, }\n error: layout_of(P) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -291,16 +241,10 @@ error: layout_of(P) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 2,\n-                           },\n-                           pref: Align {\n-                               pow2: 2,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 4,\n+                           abi: Align(4 bytes),\n+                           pref: Align(4 bytes),\n                        },\n+                       size: Size(4 bytes),\n                    },\n                ],\n            },\n@@ -315,9 +259,7 @@ error: layout_of(P) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I32,\n                        false,\n@@ -326,16 +268,10 @@ error: layout_of(P) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 2,\n-               },\n-               pref: Align {\n-                   pow2: 2,\n-               },\n-           },\n-           size: Size {\n-               raw: 4,\n+               abi: Align(4 bytes),\n+               pref: Align(4 bytes),\n            },\n+           size: Size(4 bytes),\n        }\n   --> $DIR/thumb-enum.rs:28:1\n    |\n@@ -345,9 +281,7 @@ LL | enum P { Peach = 0x1000_0000isize, }\n error: layout_of(T) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -377,16 +311,10 @@ error: layout_of(T) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 2,\n-                           },\n-                           pref: Align {\n-                               pow2: 2,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 4,\n+                           abi: Align(4 bytes),\n+                           pref: Align(4 bytes),\n                        },\n+                       size: Size(4 bytes),\n                    },\n                ],\n            },\n@@ -401,9 +329,7 @@ error: layout_of(T) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I32,\n                        true,\n@@ -412,16 +338,10 @@ error: layout_of(T) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 2,\n-               },\n-               pref: Align {\n-                   pow2: 2,\n-               },\n-           },\n-           size: Size {\n-               raw: 4,\n+               abi: Align(4 bytes),\n+               pref: Align(4 bytes),\n            },\n+           size: Size(4 bytes),\n        }\n   --> $DIR/thumb-enum.rs:34:1\n    |"}, {"sha": "8faf8593294cc78724faccf3fc19493b2168a2db", "filename": "src/test/ui/layout/zero-sized-array-union.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd31ba045dca8165a4cb9dfb9a754ddc98e15009/src%2Ftest%2Fui%2Flayout%2Fzero-sized-array-union.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd31ba045dca8165a4cb9dfb9a754ddc98e15009/src%2Ftest%2Fui%2Flayout%2Fzero-sized-array-union.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fzero-sized-array-union.stderr?ref=bd31ba045dca8165a4cb9dfb9a754ddc98e15009", "patch": "@@ -1,22 +1,22 @@\n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n   --> $DIR/zero-sized-array-union.rs:59:1\n    |\n LL | type TestBaz1 = Baz1;\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n   --> $DIR/zero-sized-array-union.rs:70:1\n    |\n LL | type TestBaz2 = Baz2;\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n   --> $DIR/zero-sized-array-union.rs:81:1\n    |\n LL | type TestBaz3 = Baz3;\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n   --> $DIR/zero-sized-array-union.rs:92:1\n    |\n LL | type TestBaz4 = Baz4;"}]}