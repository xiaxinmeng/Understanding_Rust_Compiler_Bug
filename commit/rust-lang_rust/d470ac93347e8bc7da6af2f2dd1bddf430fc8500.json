{"sha": "d470ac93347e8bc7da6af2f2dd1bddf430fc8500", "node_id": "C_kwDOAAsO6NoAKGQ0NzBhYzkzMzQ3ZThiYzdkYTZhZjJmMmRkMWJkZGY0MzBmYzg1MDA", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-14T18:05:14Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-14T18:05:14Z"}, "message": "Drop `relate_opaque_item_substs`.", "tree": {"sha": "77cfade0a92746cfbbe8078f25b68d99fbb7ccff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77cfade0a92746cfbbe8078f25b68d99fbb7ccff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d470ac93347e8bc7da6af2f2dd1bddf430fc8500", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d470ac93347e8bc7da6af2f2dd1bddf430fc8500", "html_url": "https://github.com/rust-lang/rust/commit/d470ac93347e8bc7da6af2f2dd1bddf430fc8500", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d470ac93347e8bc7da6af2f2dd1bddf430fc8500/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5949c8beedc290b2638e1ad9bd7c665edc9496a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5949c8beedc290b2638e1ad9bd7c665edc9496a", "html_url": "https://github.com/rust-lang/rust/commit/c5949c8beedc290b2638e1ad9bd7c665edc9496a"}], "stats": {"total": 36, "additions": 13, "deletions": 23}, "files": [{"sha": "45972ada6ee5e0fca13bbdf0000c76133fd0caa3", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d470ac93347e8bc7da6af2f2dd1bddf430fc8500/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d470ac93347e8bc7da6af2f2dd1bddf430fc8500/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=d470ac93347e8bc7da6af2f2dd1bddf430fc8500", "patch": "@@ -563,6 +563,7 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                 &opt_variances,\n                 a_subst,\n                 b_subst,\n+                true,\n             )\n         }\n     }"}, {"sha": "6d02551716e35d86a63dc996df9992ec34a5668c", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d470ac93347e8bc7da6af2f2dd1bddf430fc8500/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d470ac93347e8bc7da6af2f2dd1bddf430fc8500/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=d470ac93347e8bc7da6af2f2dd1bddf430fc8500", "patch": "@@ -60,7 +60,7 @@ pub trait TypeRelation<'tcx>: Sized {\n \n         let tcx = self.tcx();\n         let opt_variances = tcx.variances_of(item_def_id);\n-        relate_substs_with_variances(self, item_def_id, opt_variances, a_subst, b_subst)\n+        relate_substs_with_variances(self, item_def_id, opt_variances, a_subst, b_subst, true)\n     }\n \n     /// Switch variance for the purpose of relating `a` and `b`.\n@@ -151,13 +151,14 @@ pub fn relate_substs_with_variances<'tcx, R: TypeRelation<'tcx>>(\n     variances: &[ty::Variance],\n     a_subst: SubstsRef<'tcx>,\n     b_subst: SubstsRef<'tcx>,\n+    fetch_ty_for_diag: bool,\n ) -> RelateResult<'tcx, SubstsRef<'tcx>> {\n     let tcx = relation.tcx();\n \n     let mut cached_ty = None;\n     let params = iter::zip(a_subst, b_subst).enumerate().map(|(i, (a, b))| {\n         let variance = variances[i];\n-        let variance_info = if variance == ty::Invariant {\n+        let variance_info = if variance == ty::Invariant && fetch_ty_for_diag {\n             let ty =\n                 *cached_ty.get_or_insert_with(|| tcx.bound_type_of(ty_def_id).subst(tcx, a_subst));\n             ty::VarianceDiagInfo::Invariant { ty, param_index: i.try_into().unwrap() }\n@@ -170,26 +171,6 @@ pub fn relate_substs_with_variances<'tcx, R: TypeRelation<'tcx>>(\n     tcx.mk_substs(params)\n }\n \n-#[instrument(level = \"trace\", skip(relation), ret)]\n-fn relate_opaque_item_substs<'tcx, R: TypeRelation<'tcx>>(\n-    relation: &mut R,\n-    def_id: DefId,\n-    a_subst: SubstsRef<'tcx>,\n-    b_subst: SubstsRef<'tcx>,\n-) -> RelateResult<'tcx, SubstsRef<'tcx>> {\n-    let tcx = relation.tcx();\n-    let variances = tcx.variances_of(def_id);\n-    debug!(?variances);\n-\n-    let params = iter::zip(a_subst, b_subst).enumerate().map(|(i, (a, b))| {\n-        let variance = variances[i];\n-        let variance_info = ty::VarianceDiagInfo::default();\n-        relation.relate_with_variance(variance, variance_info, a, b)\n-    });\n-\n-    tcx.mk_substs(params)\n-}\n-\n impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {\n     fn relate<R: TypeRelation<'tcx>>(\n         relation: &mut R,\n@@ -581,7 +562,15 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n         (&ty::Opaque(a_def_id, a_substs), &ty::Opaque(b_def_id, b_substs))\n             if a_def_id == b_def_id =>\n         {\n-            let substs = relate_opaque_item_substs(relation, a_def_id, a_substs, b_substs)?;\n+            let opt_variances = tcx.variances_of(a_def_id);\n+            let substs = relate_substs_with_variances(\n+                relation,\n+                a_def_id,\n+                opt_variances,\n+                a_substs,\n+                b_substs,\n+                false, // do not fetch `type_of(a_def_id)`, as it will cause a cycle\n+            )?;\n             Ok(tcx.mk_opaque(a_def_id, substs))\n         }\n "}]}