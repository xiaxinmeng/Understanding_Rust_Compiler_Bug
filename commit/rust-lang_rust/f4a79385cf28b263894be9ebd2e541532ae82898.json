{"sha": "f4a79385cf28b263894be9ebd2e541532ae82898", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YTc5Mzg1Y2YyOGIyNjM4OTRiZTllYmQyZTU0MTUzMmFlODI4OTg=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-06-22T21:11:55Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-06-22T21:11:55Z"}, "message": "implemented query for coverage data\n\nThis commit adds a query that allows the CoverageData to be pulled from\na call on tcx, avoiding the need to change the\n`codegen_intrinsic_call()` signature (no need to pass in the FunctionCx\nor any additional arguments.\n\nThe commit does not change where/when the CoverageData is computed. It's\nstill done in the `pass`, and saved in the MIR `Body`.\n\nSee discussion (in progress) here:\nhttps://github.com/rust-lang/rust/pull/73488#discussion_r443825646", "tree": {"sha": "e8449d4f4e3cbfab1c3efd9870d1cd0db43e6778", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8449d4f4e3cbfab1c3efd9870d1cd0db43e6778"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4a79385cf28b263894be9ebd2e541532ae82898", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4a79385cf28b263894be9ebd2e541532ae82898", "html_url": "https://github.com/rust-lang/rust/commit/f4a79385cf28b263894be9ebd2e541532ae82898", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4a79385cf28b263894be9ebd2e541532ae82898/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "933fe805777e46163c52371d81390ba721a37252", "url": "https://api.github.com/repos/rust-lang/rust/commits/933fe805777e46163c52371d81390ba721a37252", "html_url": "https://github.com/rust-lang/rust/commit/933fe805777e46163c52371d81390ba721a37252"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "f1104ca3a98b34ef25c1e2557db98d80a5b3404d", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f4a79385cf28b263894be9ebd2e541532ae82898/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a79385cf28b263894be9ebd2e541532ae82898/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=f4a79385cf28b263894be9ebd2e541532ae82898", "patch": "@@ -16,7 +16,6 @@ use rustc_codegen_ssa::common::TypeKind;\n use rustc_codegen_ssa::glue;\n use rustc_codegen_ssa::mir::operand::{OperandRef, OperandValue};\n use rustc_codegen_ssa::mir::place::PlaceRef;\n-use rustc_codegen_ssa::mir::FunctionCx;\n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::MemFlags;\n use rustc_hir as hir;\n@@ -82,14 +81,14 @@ fn get_simple_intrinsic(cx: &CodegenCx<'ll, '_>, name: &str) -> Option<&'ll Valu\n }\n \n impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n-    fn codegen_intrinsic_call<'b, Bx: BuilderMethods<'b, 'tcx>>(\n+    fn codegen_intrinsic_call(\n         &mut self,\n-        fx: &FunctionCx<'b, 'tcx, Bx>,\n         instance: ty::Instance<'tcx>,\n         fn_abi: &FnAbi<'tcx, Ty<'tcx>>,\n         args: &[OperandRef<'tcx, &'ll Value>],\n         llresult: &'ll Value,\n         span: Span,\n+        caller_instance: ty::Instance<'tcx>,\n     ) {\n         let tcx = self.tcx;\n         let callee_ty = instance.monomorphic_ty(tcx);\n@@ -141,8 +140,11 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 self.call(llfn, &[], None)\n             }\n             \"count_code_region\" => {\n-                let coverage_data = fx.mir.coverage_data.as_ref().unwrap();\n-                let mangled_fn = tcx.symbol_name(fx.instance);\n+                let coverage_data = tcx\n+                    .coverage_data(caller_instance.def_id())\n+                    .as_ref()\n+                    .expect(\"LLVM intrinsic count_code_region call has associated coverage_data\");\n+                let mangled_fn = tcx.symbol_name(caller_instance);\n                 let (mangled_fn_name, _len_val) = self.const_str(mangled_fn.name);\n                 let hash = self.const_u64(coverage_data.hash);\n                 let index = args[0].immediate();"}, {"sha": "d56c816811b3c46d68056e7b662ddba6c08724db", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a79385cf28b263894be9ebd2e541532ae82898/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a79385cf28b263894be9ebd2e541532ae82898/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=f4a79385cf28b263894be9ebd2e541532ae82898", "patch": "@@ -688,12 +688,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 .collect();\n \n             bx.codegen_intrinsic_call(\n-                self,\n                 *instance.as_ref().unwrap(),\n                 &fn_abi,\n                 &args,\n                 dest,\n                 terminator.source_info.span,\n+                self.instance,\n             );\n \n             if let ReturnDest::IndirectOperand(dst, _) = ret_dest {"}, {"sha": "00b4bf96afa594b75e55115647bb84b9410c6179", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4a79385cf28b263894be9ebd2e541532ae82898/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a79385cf28b263894be9ebd2e541532ae82898/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=f4a79385cf28b263894be9ebd2e541532ae82898", "patch": "@@ -21,9 +21,9 @@ use self::operand::{OperandRef, OperandValue};\n \n /// Master context for codegenning from MIR.\n pub struct FunctionCx<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n-    pub instance: Instance<'tcx>,\n+    instance: Instance<'tcx>,\n \n-    pub mir: &'tcx mir::Body<'tcx>,\n+    mir: &'tcx mir::Body<'tcx>,\n \n     debug_context: Option<FunctionDebugContext<Bx::DIScope>>,\n "}, {"sha": "f62019498511c48c166b9280c277948444965811", "filename": "src/librustc_codegen_ssa/traits/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4a79385cf28b263894be9ebd2e541532ae82898/src%2Flibrustc_codegen_ssa%2Ftraits%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a79385cf28b263894be9ebd2e541532ae82898/src%2Flibrustc_codegen_ssa%2Ftraits%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fintrinsic.rs?ref=f4a79385cf28b263894be9ebd2e541532ae82898", "patch": "@@ -1,7 +1,5 @@\n use super::BackendTypes;\n use crate::mir::operand::OperandRef;\n-use crate::mir::FunctionCx;\n-use crate::traits::BuilderMethods;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::Span;\n use rustc_target::abi::call::FnAbi;\n@@ -10,14 +8,14 @@ pub trait IntrinsicCallMethods<'tcx>: BackendTypes {\n     /// Remember to add all intrinsics here, in librustc_typeck/check/mod.rs,\n     /// and in libcore/intrinsics.rs; if you need access to any llvm intrinsics,\n     /// add them to librustc_codegen_llvm/context.rs\n-    fn codegen_intrinsic_call<'a, Bx: BuilderMethods<'a, 'tcx>>(\n+    fn codegen_intrinsic_call(\n         &mut self,\n-        fx: &FunctionCx<'a, 'tcx, Bx>,\n         instance: ty::Instance<'tcx>,\n         fn_abi: &FnAbi<'tcx, Ty<'tcx>>,\n         args: &[OperandRef<'tcx, Self::Value>],\n         llresult: Self::Value,\n         span: Span,\n+        caller_instance: ty::Instance<'tcx>,\n     );\n \n     fn abort(&mut self);"}, {"sha": "1092e6c306411c43ed9332f7a9f90d406c6a7ea4", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4a79385cf28b263894be9ebd2e541532ae82898/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a79385cf28b263894be9ebd2e541532ae82898/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=f4a79385cf28b263894be9ebd2e541532ae82898", "patch": "@@ -214,6 +214,12 @@ rustc_queries! {\n             cache_on_disk_if { key.is_local() }\n         }\n \n+        query coverage_data(key: DefId) -> Option<mir::CoverageData> {\n+            desc { |tcx| \"retrieving coverage data, if computed from MIR for `{}`\", tcx.def_path_str(key) }\n+            storage(ArenaCacheSelector<'tcx>)\n+            cache_on_disk_if { key.is_local() }\n+        }\n+\n         query promoted_mir(key: DefId) -> IndexVec<mir::Promoted, mir::Body<'tcx>> {\n             desc { |tcx| \"optimizing promoted MIR for `{}`\", tcx.def_path_str(key) }\n             storage(ArenaCacheSelector<'tcx>)"}, {"sha": "a2fdc7efd184da82dafc965a373fc5b84dca47b5", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f4a79385cf28b263894be9ebd2e541532ae82898/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a79385cf28b263894be9ebd2e541532ae82898/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=f4a79385cf28b263894be9ebd2e541532ae82898", "patch": "@@ -6,7 +6,7 @@ use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::visit::Visitor as _;\n-use rustc_middle::mir::{traversal, Body, ConstQualifs, MirPhase, Promoted};\n+use rustc_middle::mir::{traversal, Body, ConstQualifs, CoverageData, MirPhase, Promoted};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::steal::Steal;\n use rustc_middle::ty::{InstanceDef, TyCtxt, TypeFoldable};\n@@ -53,6 +53,7 @@ pub(crate) fn provide(providers: &mut Providers<'_>) {\n         mir_drops_elaborated_and_const_checked,\n         optimized_mir,\n         is_mir_available,\n+        coverage_data,\n         promoted_mir,\n         ..*providers\n     };\n@@ -422,6 +423,11 @@ fn run_optimization_passes<'tcx>(\n     );\n }\n \n+fn coverage_data(tcx: TyCtxt<'_>, def_id: DefId) -> Option<CoverageData> {\n+    let body = tcx.optimized_mir(def_id);\n+    body.coverage_data.clone()\n+}\n+\n fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> Body<'_> {\n     if tcx.is_constructor(def_id) {\n         // There's no reason to run all of the MIR passes on constructors when"}]}