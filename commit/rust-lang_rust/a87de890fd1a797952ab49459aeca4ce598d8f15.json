{"sha": "a87de890fd1a797952ab49459aeca4ce598d8f15", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4N2RlODkwZmQxYTc5Nzk1MmFiNDk0NTlhZWNhNGNlNTk4ZDhmMTU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-28T23:39:34Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-20T22:40:56Z"}, "message": "Move print_query_stack to rustc_query_system.", "tree": {"sha": "5be960f5c6ce24faeef7c70752222ea8746fc8fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5be960f5c6ce24faeef7c70752222ea8746fc8fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a87de890fd1a797952ab49459aeca4ce598d8f15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a87de890fd1a797952ab49459aeca4ce598d8f15", "html_url": "https://github.com/rust-lang/rust/commit/a87de890fd1a797952ab49459aeca4ce598d8f15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a87de890fd1a797952ab49459aeca4ce598d8f15/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c26d965714e38d62b1610780f67bec14dafe25c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c26d965714e38d62b1610780f67bec14dafe25c3", "html_url": "https://github.com/rust-lang/rust/commit/c26d965714e38d62b1610780f67bec14dafe25c3"}], "stats": {"total": 84, "additions": 46, "deletions": 38}, "files": [{"sha": "e9314797fbdc538a5cc8337a12242ff7328c981f", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a87de890fd1a797952ab49459aeca4ce598d8f15/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87de890fd1a797952ab49459aeca4ce598d8f15/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=a87de890fd1a797952ab49459aeca4ce598d8f15", "patch": "@@ -18,7 +18,7 @@ extern crate tracing;\n \n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_errors::{Diagnostic, DiagnosticBuilder, Handler, Level};\n+use rustc_errors::{DiagnosticBuilder, Handler};\n use rustc_hir::def_id::CrateNum;\n use rustc_index::vec::IndexVec;\n use rustc_middle::dep_graph;"}, {"sha": "4618671ddf0761043e53dba2e88a5382f080d3fa", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 2, "deletions": 32, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a87de890fd1a797952ab49459aeca4ce598d8f15/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87de890fd1a797952ab49459aeca4ce598d8f15/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=a87de890fd1a797952ab49459aeca4ce598d8f15", "patch": "@@ -584,38 +584,8 @@ macro_rules! define_queries_struct {\n                 handler: &Handler,\n                 num_frames: Option<usize>,\n             ) -> usize {\n-                let query_map = self.try_collect_active_jobs(tcx);\n-\n-                let mut current_query = query;\n-                let mut i = 0;\n-\n-                while let Some(query) = current_query {\n-                    if Some(i) == num_frames {\n-                        break;\n-                    }\n-                    let query_info = if let Some(info) = query_map.as_ref().and_then(|map| map.get(&query))\n-                    {\n-                        info\n-                    } else {\n-                        break;\n-                    };\n-                    let mut diag = Diagnostic::new(\n-                        Level::FailureNote,\n-                        &format!(\n-                            \"#{} [{}] {}\",\n-                            i,\n-                            query_info.info.query.name,\n-                            query_info.info.query.description,\n-                        ),\n-                    );\n-                    diag.span = tcx.sess.source_map().guess_head_span(query_info.info.span).into();\n-                    handler.force_print_diagnostic(diag);\n-\n-                    current_query = query_info.job.parent;\n-                    i += 1;\n-                }\n-\n-                i\n+                let qcx = QueryCtxt { tcx, queries: self };\n+                rustc_query_system::query::print_query_stack(qcx, query, handler, num_frames)\n             }\n \n             $($(#[$attr])*"}, {"sha": "30dce1e501893f0d6f53060979b47210a11c88ee", "filename": "compiler/rustc_query_system/src/query/job.rs", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a87de890fd1a797952ab49459aeca4ce598d8f15/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87de890fd1a797952ab49459aeca4ce598d8f15/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs?ref=a87de890fd1a797952ab49459aeca4ce598d8f15", "patch": "@@ -1,8 +1,9 @@\n+use crate::dep_graph::DepContext;\n use crate::query::plumbing::CycleError;\n-use crate::query::QueryStackFrame;\n+use crate::query::{QueryContext, QueryStackFrame};\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{struct_span_err, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, Diagnostic, DiagnosticBuilder, Handler, Level};\n use rustc_session::Session;\n use rustc_span::Span;\n \n@@ -13,8 +14,6 @@ use std::num::NonZeroU32;\n \n #[cfg(parallel_compiler)]\n use {\n-    crate::dep_graph::DepContext,\n-    crate::query::QueryContext,\n     parking_lot::{Condvar, Mutex},\n     rustc_data_structures::fx::FxHashSet,\n     rustc_data_structures::stable_hasher::{HashStable, StableHasher},\n@@ -626,3 +625,42 @@ pub(crate) fn report_cycle<'a>(\n \n     err\n }\n+\n+pub fn print_query_stack<CTX: QueryContext>(\n+    tcx: CTX,\n+    mut current_query: Option<QueryJobId<CTX::DepKind>>,\n+    handler: &Handler,\n+    num_frames: Option<usize>,\n+) -> usize {\n+    // Be careful relying on global state here: this code is called from\n+    // a panic hook, which means that the global `Handler` may be in a weird\n+    // state if it was responsible for triggering the panic.\n+    let mut i = 0;\n+    let query_map = tcx.try_collect_active_jobs();\n+\n+    while let Some(query) = current_query {\n+        if Some(i) == num_frames {\n+            break;\n+        }\n+        let query_info = if let Some(info) = query_map.as_ref().and_then(|map| map.get(&query)) {\n+            info\n+        } else {\n+            break;\n+        };\n+        let mut diag = Diagnostic::new(\n+            Level::FailureNote,\n+            &format!(\n+                \"#{} [{}] {}\",\n+                i, query_info.info.query.name, query_info.info.query.description\n+            ),\n+        );\n+        diag.span =\n+            tcx.dep_context().sess().source_map().guess_head_span(query_info.info.span).into();\n+        handler.force_print_diagnostic(diag);\n+\n+        current_query = query_info.job.parent;\n+        i += 1;\n+    }\n+\n+    i\n+}"}, {"sha": "81e2b4877fd60099cfe19eda5e6b36b64eefa022", "filename": "compiler/rustc_query_system/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a87de890fd1a797952ab49459aeca4ce598d8f15/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87de890fd1a797952ab49459aeca4ce598d8f15/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs?ref=a87de890fd1a797952ab49459aeca4ce598d8f15", "patch": "@@ -4,7 +4,7 @@ pub use self::plumbing::*;\n mod job;\n #[cfg(parallel_compiler)]\n pub use self::job::deadlock;\n-pub use self::job::{QueryInfo, QueryJob, QueryJobId, QueryJobInfo, QueryMap};\n+pub use self::job::{print_query_stack, QueryInfo, QueryJob, QueryJobId, QueryJobInfo, QueryMap};\n \n mod caches;\n pub use self::caches::{"}]}