{"sha": "b458a49f2664c6d8079a221f0710894d96704198", "node_id": "C_kwDOAAsO6NoAKGI0NThhNDlmMjY2NGM2ZDgwNzlhMjIxZjA3MTA4OTRkOTY3MDQxOTg", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-04-04T13:04:58Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-12-16T13:04:22Z"}, "message": "Replace `Split*::as_str` with `remainder`\n\nThis commit\n- Renames `Split*::{as_str -> remainder}` as it seems less confusing\n- Makes `remainder` return Option<&str> to distinguish between\n  \"iterator is exhausted\" and \"the tail is empty\"", "tree": {"sha": "9fcedb13a996874fe4eae3ab73db7eb8bda5b51f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fcedb13a996874fe4eae3ab73db7eb8bda5b51f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b458a49f2664c6d8079a221f0710894d96704198", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b458a49f2664c6d8079a221f0710894d96704198", "html_url": "https://github.com/rust-lang/rust/commit/b458a49f2664c6d8079a221f0710894d96704198", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b458a49f2664c6d8079a221f0710894d96704198/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca4989eac278922a64139feb6c23e5e59da4dee2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca4989eac278922a64139feb6c23e5e59da4dee2", "html_url": "https://github.com/rust-lang/rust/commit/ca4989eac278922a64139feb6c23e5e59da4dee2"}], "stats": {"total": 173, "additions": 96, "deletions": 77}, "files": [{"sha": "843c5050d6a659bfcfd135f8ca764c43fe7fb03a", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b458a49f2664c6d8079a221f0710894d96704198/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b458a49f2664c6d8079a221f0710894d96704198/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=b458a49f2664c6d8079a221f0710894d96704198", "patch": "@@ -158,6 +158,7 @@\n #![feature(const_unsafecell_get_mut)]\n #![feature(const_waker)]\n #![feature(core_panic)]\n+#![feature(char_indices_offset)]\n #![feature(duration_consts_float)]\n #![feature(maybe_uninit_uninit_array)]\n #![feature(ptr_alignment_type)]\n@@ -166,6 +167,8 @@\n #![feature(slice_ptr_get)]\n #![feature(slice_split_at_unchecked)]\n #![feature(str_internals)]\n+#![feature(str_split_remainder)]\n+#![feature(str_split_inclusive_remainder)]\n #![feature(strict_provenance)]\n #![feature(utf16_extra)]\n #![feature(utf16_extra_const)]"}, {"sha": "d969475aa484fd5a740a2f2c6895f0a24c2b7e3d", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 93, "deletions": 77, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/b458a49f2664c6d8079a221f0710894d96704198/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b458a49f2664c6d8079a221f0710894d96704198/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=b458a49f2664c6d8079a221f0710894d96704198", "patch": "@@ -717,14 +717,14 @@ impl<'a, P: Pattern<'a>> SplitInternal<'a, P> {\n     }\n \n     #[inline]\n-    fn as_str(&self) -> &'a str {\n+    fn remainder(&self) -> Option<&'a str> {\n         // `Self::get_end` doesn't change `self.start`\n         if self.finished {\n-            return \"\";\n+            return None;\n         }\n \n         // SAFETY: `self.start` and `self.end` always lie on unicode boundaries.\n-        unsafe { self.matcher.haystack().get_unchecked(self.start..self.end) }\n+        Some(unsafe { self.matcher.haystack().get_unchecked(self.start..self.end) })\n     }\n }\n \n@@ -747,44 +747,48 @@ generate_pattern_iterators! {\n }\n \n impl<'a, P: Pattern<'a>> Split<'a, P> {\n-    /// Returns remainder of the split string\n+    /// Returns remainder of the split string.\n+    ///\n+    /// If the iterator is empty, returns `None`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(str_split_as_str)]\n+    /// #![feature(str_split_remainder)]\n     /// let mut split = \"Mary had a little lamb\".split(' ');\n-    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    /// assert_eq!(split.remainder(), Some(\"Mary had a little lamb\"));\n     /// split.next();\n-    /// assert_eq!(split.as_str(), \"had a little lamb\");\n+    /// assert_eq!(split.remainder(), Some(\"had a little lamb\"));\n     /// split.by_ref().for_each(drop);\n-    /// assert_eq!(split.as_str(), \"\");\n+    /// assert_eq!(split.remainder(), None);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"str_split_as_str\", issue = \"77998\")]\n-    pub fn as_str(&self) -> &'a str {\n-        self.0.as_str()\n+    #[unstable(feature = \"str_split_remainder\", issue = \"77998\")]\n+    pub fn remainder(&self) -> Option<&'a str> {\n+        self.0.remainder()\n     }\n }\n \n impl<'a, P: Pattern<'a>> RSplit<'a, P> {\n-    /// Returns remainder of the split string\n+    /// Returns remainder of the split string.\n+    ///\n+    /// If the iterator is empty, returns `None`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(str_split_as_str)]\n+    /// #![feature(str_split_remainder)]\n     /// let mut split = \"Mary had a little lamb\".rsplit(' ');\n-    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    /// assert_eq!(split.remainder(), Some(\"Mary had a little lamb\"));\n     /// split.next();\n-    /// assert_eq!(split.as_str(), \"Mary had a little\");\n+    /// assert_eq!(split.remainder(), Some(\"Mary had a little\"));\n     /// split.by_ref().for_each(drop);\n-    /// assert_eq!(split.as_str(), \"\");\n+    /// assert_eq!(split.remainder(), None);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"str_split_as_str\", issue = \"77998\")]\n-    pub fn as_str(&self) -> &'a str {\n-        self.0.as_str()\n+    #[unstable(feature = \"str_split_remainder\", issue = \"77998\")]\n+    pub fn remainder(&self) -> Option<&'a str> {\n+        self.0.remainder()\n     }\n }\n \n@@ -807,44 +811,48 @@ generate_pattern_iterators! {\n }\n \n impl<'a, P: Pattern<'a>> SplitTerminator<'a, P> {\n-    /// Returns remainder of the split string\n+    /// Returns remainder of the split string.\n+    ///\n+    /// If the iterator is empty, returns `None`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(str_split_as_str)]\n+    /// #![feature(str_split_remainder)]\n     /// let mut split = \"A..B..\".split_terminator('.');\n-    /// assert_eq!(split.as_str(), \"A..B..\");\n+    /// assert_eq!(split.remainder(), Some(\"A..B..\"));\n     /// split.next();\n-    /// assert_eq!(split.as_str(), \".B..\");\n+    /// assert_eq!(split.remainder(), Some(\".B..\"));\n     /// split.by_ref().for_each(drop);\n-    /// assert_eq!(split.as_str(), \"\");\n+    /// assert_eq!(split.remainder(), None);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"str_split_as_str\", issue = \"77998\")]\n-    pub fn as_str(&self) -> &'a str {\n-        self.0.as_str()\n+    #[unstable(feature = \"str_split_remainder\", issue = \"77998\")]\n+    pub fn remainder(&self) -> Option<&'a str> {\n+        self.0.remainder()\n     }\n }\n \n impl<'a, P: Pattern<'a>> RSplitTerminator<'a, P> {\n-    /// Returns remainder of the split string\n+    /// Returns remainder of the split string.\n+    ///\n+    /// If the iterator is empty, returns `None`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(str_split_as_str)]\n+    /// #![feature(str_split_remainder)]\n     /// let mut split = \"A..B..\".rsplit_terminator('.');\n-    /// assert_eq!(split.as_str(), \"A..B..\");\n+    /// assert_eq!(split.remainder(), Some(\"A..B..\"));\n     /// split.next();\n-    /// assert_eq!(split.as_str(), \"A..B\");\n+    /// assert_eq!(split.remainder(), Some(\"A..B\"));\n     /// split.by_ref().for_each(drop);\n-    /// assert_eq!(split.as_str(), \"\");\n+    /// assert_eq!(split.remainder(), None);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"str_split_as_str\", issue = \"77998\")]\n-    pub fn as_str(&self) -> &'a str {\n-        self.0.as_str()\n+    #[unstable(feature = \"str_split_remainder\", issue = \"77998\")]\n+    pub fn remainder(&self) -> Option<&'a str> {\n+        self.0.remainder()\n     }\n }\n \n@@ -906,8 +914,8 @@ impl<'a, P: Pattern<'a>> SplitNInternal<'a, P> {\n     }\n \n     #[inline]\n-    fn as_str(&self) -> &'a str {\n-        self.iter.as_str()\n+    fn remainder(&self) -> Option<&'a str> {\n+        self.iter.remainder()\n     }\n }\n \n@@ -930,44 +938,48 @@ generate_pattern_iterators! {\n }\n \n impl<'a, P: Pattern<'a>> SplitN<'a, P> {\n-    /// Returns remainder of the split string\n+    /// Returns remainder of the split string.\n+    ///\n+    /// If the iterator is empty, returns `None`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(str_split_as_str)]\n+    /// #![feature(str_split_remainder)]\n     /// let mut split = \"Mary had a little lamb\".splitn(3, ' ');\n-    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    /// assert_eq!(split.remainder(), Some(\"Mary had a little lamb\"));\n     /// split.next();\n-    /// assert_eq!(split.as_str(), \"had a little lamb\");\n+    /// assert_eq!(split.remainder(), Some(\"had a little lamb\"));\n     /// split.by_ref().for_each(drop);\n-    /// assert_eq!(split.as_str(), \"\");\n+    /// assert_eq!(split.remainder(), None);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"str_split_as_str\", issue = \"77998\")]\n-    pub fn as_str(&self) -> &'a str {\n-        self.0.as_str()\n+    #[unstable(feature = \"str_split_remainder\", issue = \"77998\")]\n+    pub fn remainder(&self) -> Option<&'a str> {\n+        self.0.remainder()\n     }\n }\n \n impl<'a, P: Pattern<'a>> RSplitN<'a, P> {\n-    /// Returns remainder of the split string\n+    /// Returns remainder of the split string.\n+    ///\n+    /// If the iterator is empty, returns `None`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(str_split_as_str)]\n+    /// #![feature(str_split_remainder)]\n     /// let mut split = \"Mary had a little lamb\".rsplitn(3, ' ');\n-    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    /// assert_eq!(split.remainder(), Some(\"Mary had a little lamb\"));\n     /// split.next();\n-    /// assert_eq!(split.as_str(), \"Mary had a little\");\n+    /// assert_eq!(split.remainder(), Some(\"Mary had a little\"));\n     /// split.by_ref().for_each(drop);\n-    /// assert_eq!(split.as_str(), \"\");\n+    /// assert_eq!(split.remainder(), None);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"str_split_as_str\", issue = \"77998\")]\n-    pub fn as_str(&self) -> &'a str {\n-        self.0.as_str()\n+    #[unstable(feature = \"str_split_remainder\", issue = \"77998\")]\n+    pub fn remainder(&self) -> Option<&'a str> {\n+        self.0.remainder()\n     }\n }\n \n@@ -1240,22 +1252,22 @@ impl<'a> SplitWhitespace<'a> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(str_split_whitespace_as_str)]\n+    /// #![feature(str_split_whitespace_remainder)]\n     ///\n     /// let mut split = \"Mary had a little lamb\".split_whitespace();\n-    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    /// assert_eq!(split.remainder(), Some(\"Mary had a little lamb\"));\n     ///\n     /// split.next();\n-    /// assert_eq!(split.as_str(), \"had a little lamb\");\n+    /// assert_eq!(split.remainder(), Some(\"had a little lamb\"));\n     ///\n     /// split.by_ref().for_each(drop);\n-    /// assert_eq!(split.as_str(), \"\");\n+    /// assert_eq!(split.remainder(), None);\n     /// ```\n     #[inline]\n     #[must_use]\n-    #[unstable(feature = \"str_split_whitespace_as_str\", issue = \"77998\")]\n-    pub fn as_str(&self) -> &'a str {\n-        self.inner.iter.as_str()\n+    #[unstable(feature = \"str_split_whitespace_remainder\", issue = \"77998\")]\n+    pub fn remainder(&self) -> Option<&'a str> {\n+        self.inner.iter.remainder()\n     }\n }\n \n@@ -1291,32 +1303,34 @@ impl<'a> DoubleEndedIterator for SplitAsciiWhitespace<'a> {\n impl FusedIterator for SplitAsciiWhitespace<'_> {}\n \n impl<'a> SplitAsciiWhitespace<'a> {\n-    /// Returns remainder of the split string\n+    /// Returns remainder of the split string.\n+    ///\n+    /// If the iterator is empty, returns `None`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(str_split_whitespace_as_str)]\n+    /// #![feature(str_split_whitespace_remainder)]\n     ///\n     /// let mut split = \"Mary had a little lamb\".split_ascii_whitespace();\n-    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    /// assert_eq!(split.remainder(), Some(\"Mary had a little lamb\"));\n     ///\n     /// split.next();\n-    /// assert_eq!(split.as_str(), \"had a little lamb\");\n+    /// assert_eq!(split.remainder(), Some(\"had a little lamb\"));\n     ///\n     /// split.by_ref().for_each(drop);\n-    /// assert_eq!(split.as_str(), \"\");\n+    /// assert_eq!(split.remainder(), None);\n     /// ```\n     #[inline]\n     #[must_use]\n-    #[unstable(feature = \"str_split_whitespace_as_str\", issue = \"77998\")]\n-    pub fn as_str(&self) -> &'a str {\n+    #[unstable(feature = \"str_split_whitespace_remainder\", issue = \"77998\")]\n+    pub fn remainder(&self) -> Option<&'a str> {\n         if self.inner.iter.iter.finished {\n-            return \"\";\n+            return None;\n         }\n \n         // SAFETY: Slice is created from str.\n-        unsafe { crate::str::from_utf8_unchecked(&self.inner.iter.iter.v) }\n+        Some(unsafe { crate::str::from_utf8_unchecked(&self.inner.iter.iter.v) })\n     }\n }\n \n@@ -1359,23 +1373,25 @@ impl<'a, P: Pattern<'a, Searcher: ReverseSearcher<'a>>> DoubleEndedIterator\n impl<'a, P: Pattern<'a>> FusedIterator for SplitInclusive<'a, P> {}\n \n impl<'a, P: Pattern<'a>> SplitInclusive<'a, P> {\n-    /// Returns remainder of the split string\n+    /// Returns remainder of the split string.\n+    ///\n+    /// If the iterator is empty, returns `None`.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(str_split_inclusive_as_str)]\n+    /// #![feature(str_split_inclusive_remainder)]\n     /// let mut split = \"Mary had a little lamb\".split_inclusive(' ');\n-    /// assert_eq!(split.as_str(), \"Mary had a little lamb\");\n+    /// assert_eq!(split.remainder(), Some(\"Mary had a little lamb\"));\n     /// split.next();\n-    /// assert_eq!(split.as_str(), \"had a little lamb\");\n+    /// assert_eq!(split.remainder(), Some(\"had a little lamb\"));\n     /// split.by_ref().for_each(drop);\n-    /// assert_eq!(split.as_str(), \"\");\n+    /// assert_eq!(split.remainder(), None);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"str_split_inclusive_as_str\", issue = \"77998\")]\n-    pub fn as_str(&self) -> &'a str {\n-        self.0.as_str()\n+    #[unstable(feature = \"str_split_inclusive_remainder\", issue = \"77998\")]\n+    pub fn remainder(&self) -> Option<&'a str> {\n+        self.0.remainder()\n     }\n }\n "}]}