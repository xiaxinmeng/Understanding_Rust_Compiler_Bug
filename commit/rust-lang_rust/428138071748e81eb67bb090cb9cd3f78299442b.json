{"sha": "428138071748e81eb67bb090cb9cd3f78299442b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyODEzODA3MTc0OGU4MWViNjdiYjA5MGNiOWNkM2Y3ODI5OTQ0MmI=", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-09-20T15:24:47Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-09-20T15:24:47Z"}, "message": "Add some more tracing", "tree": {"sha": "c44060a8718fddd67f8577c2d41b90848206b555", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c44060a8718fddd67f8577c2d41b90848206b555"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/428138071748e81eb67bb090cb9cd3f78299442b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/428138071748e81eb67bb090cb9cd3f78299442b", "html_url": "https://github.com/rust-lang/rust/commit/428138071748e81eb67bb090cb9cd3f78299442b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/428138071748e81eb67bb090cb9cd3f78299442b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38e576423dc56a006ccf0b72e106f09bdea6efc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/38e576423dc56a006ccf0b72e106f09bdea6efc2", "html_url": "https://github.com/rust-lang/rust/commit/38e576423dc56a006ccf0b72e106f09bdea6efc2"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "ed805353c60f93307e809f3c1226808a05704794", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/428138071748e81eb67bb090cb9cd3f78299442b/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428138071748e81eb67bb090cb9cd3f78299442b/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=428138071748e81eb67bb090cb9cd3f78299442b", "patch": "@@ -13,9 +13,11 @@\n #[macro_use]\n extern crate rustc_macros;\n \n+#[macro_use]\n+extern crate tracing;\n+\n pub use emitter::ColorConfig;\n \n-use tracing::debug;\n use Level::*;\n \n use emitter::{is_case_difference, Emitter, EmitterWriter};"}, {"sha": "a40f47f895bbea170b52ab030ce1b0fbf333f075", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/428138071748e81eb67bb090cb9cd3f78299442b/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428138071748e81eb67bb090cb9cd3f78299442b/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=428138071748e81eb67bb090cb9cd3f78299442b", "patch": "@@ -6,6 +6,9 @@\n #![feature(box_patterns)]\n #![recursion_limit = \"256\"]\n \n+#[macro_use]\n+extern crate tracing;\n+\n use rustc_ast as ast;\n use rustc_ast::token::{self, Nonterminal, Token, TokenKind};\n use rustc_ast::tokenstream::{self, AttributesData, CanSynthesizeMissingTokens, LazyTokenStream};"}, {"sha": "efaf2180daa2dfe16ecdbcd14db3548dfee030dd", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/428138071748e81eb67bb090cb9cd3f78299442b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428138071748e81eb67bb090cb9cd3f78299442b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=428138071748e81eb67bb090cb9cd3f78299442b", "patch": "@@ -1084,6 +1084,7 @@ impl<'a> Parser<'a> {\n \n     /// If we encounter a parser state that looks like the user has written a `struct` literal with\n     /// parentheses instead of braces, recover the parser state and provide suggestions.\n+    #[instrument(skip(self, seq, snapshot), level = \"trace\")]\n     fn maybe_recover_struct_lit_bad_delims(\n         &mut self,\n         lo: Span,"}, {"sha": "ae685ffe974e40203f385817852bb29f8d3c5c2d", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/428138071748e81eb67bb090cb9cd3f78299442b/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428138071748e81eb67bb090cb9cd3f78299442b/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=428138071748e81eb67bb090cb9cd3f78299442b", "patch": "@@ -25,6 +25,9 @@\n #[macro_use]\n extern crate rustc_macros;\n \n+#[macro_use]\n+extern crate tracing;\n+\n use rustc_data_structures::AtomicRef;\n use rustc_macros::HashStable_Generic;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};"}, {"sha": "b79f00a8a36425f7dea49abd4ce50b97ee866847", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/428138071748e81eb67bb090cb9cd3f78299442b/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428138071748e81eb67bb090cb9cd3f78299442b/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=428138071748e81eb67bb090cb9cd3f78299442b", "patch": "@@ -474,11 +474,12 @@ impl SourceMap {\n         f.lookup_line(sp.lo()) != f.lookup_line(sp.hi())\n     }\n \n+    #[instrument(skip(self), level = \"trace\")]\n     pub fn is_valid_span(&self, sp: Span) -> Result<(Loc, Loc), SpanLinesError> {\n         let lo = self.lookup_char_pos(sp.lo());\n-        debug!(\"span_to_lines: lo={:?}\", lo);\n+        trace!(?lo);\n         let hi = self.lookup_char_pos(sp.hi());\n-        debug!(\"span_to_lines: hi={:?}\", hi);\n+        trace!(?hi);\n         if lo.file.start_pos != hi.file.start_pos {\n             return Err(SpanLinesError::DistinctSources(DistinctSources {\n                 begin: (lo.file.name.clone(), lo.file.start_pos),"}]}