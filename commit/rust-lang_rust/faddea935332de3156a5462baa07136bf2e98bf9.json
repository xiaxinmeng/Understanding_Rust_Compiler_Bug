{"sha": "faddea935332de3156a5462baa07136bf2e98bf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZGRlYTkzNTMzMmRlMzE1NmE1NDYyYmFhMDcxMzZiZjJlOThiZjk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-07T09:32:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-07T09:32:47Z"}, "message": "Merge #6158\n\n6158: Fix for negative literals in macros r=matklad a=cutsoy\n\n_This pull request fixes #6028._\r\n\r\nWhen writing `-42.0f32` in Rust, it is usually parsed as two different tokens (a minus operator and a float literal).\r\n\r\nBut a procedural macro can also generate new tokens, including negative [float literals](https://doc.rust-lang.org/stable/proc_macro/struct.Literal.html#method.f32_suffixed):\r\n\r\n```rust\r\n#[proc_macro]\r\nfn example_verbose(input: TokenStream) -> TokenStream {\r\n    let literal = Literal::f32_suffixed(-42.0);\r\n    quote! { #literal }\r\n}\r\n```\r\n\r\nor even shorter\r\n\r\n```rust\r\n#[proc_macro]\r\nfn example(input: TokenStream) -> TokenStream {\r\n    let literal = -42.0f32;\r\n    quote! { #literal }\r\n}\r\n```\r\n\r\nUnfortunately, these currently cause RA to crash:\r\n\r\n```\r\nthread '<unnamed>' panicked at 'Fail to convert given literal Literal {\r\n    text: \"-42.0f32\",\r\n    id: TokenId(\r\n        4294967295,\r\n    ),\r\n}', crates/mbe/src/subtree_source.rs:161:28\r\n```\r\n\r\nThis pull request contains both a fix 8cf9362 and a unit test 27798ee. In addition, I installed the patched server with `cargo xtask install --server` and verified in VSCode that it no longer crashes when a procedural macro returns a negative number literal.\n\nCo-authored-by: Tim <tim@glacyr.com>", "tree": {"sha": "2bf4b95ff97c0cd9ed8a69ed63808fffffd521f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bf4b95ff97c0cd9ed8a69ed63808fffffd521f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faddea935332de3156a5462baa07136bf2e98bf9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJffYs/CRBK7hj4Ov3rIwAAdHIIADQGusUT08kycCCIGewRyqgr\nK0spOP2r4lF8gWx0ZrcbVBERsFLXJkc2ehOGtrmd7Hb982Ul5/2/pqpa9FcZO8TR\nitHMfKTrBV2qod6TyQrAphsUG10qlua1xDuh9AHrTYACY+sPgn4zc7L5G2zjP/a3\nyau5ahc1HIVqz4OK5OR4KHe85mmmnFwCb/MkOFgSqrELFuYuSYG57Ycqzw5sRztb\nK4le0BM1VsZiBzV6a3uFhORr/DyYGPdrNdRHzTTPkDuTnRcxPr/C5SwF3DYShwKT\nIDuITKKKLbYbtspX1ktDIWNhbIp3FUCd6vH6FE5GvhZeR2Cj9Vo29IgUTja8WY4=\n=vj1e\n-----END PGP SIGNATURE-----\n", "payload": "tree 2bf4b95ff97c0cd9ed8a69ed63808fffffd521f2\nparent a184c83535230af39fad3e238b7422b4972d597e\nparent 27798ee575a975a1806ced86aca8aea407897851\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1602063167 +0000\ncommitter GitHub <noreply@github.com> 1602063167 +0000\n\nMerge #6158\n\n6158: Fix for negative literals in macros r=matklad a=cutsoy\n\n_This pull request fixes #6028._\r\n\r\nWhen writing `-42.0f32` in Rust, it is usually parsed as two different tokens (a minus operator and a float literal).\r\n\r\nBut a procedural macro can also generate new tokens, including negative [float literals](https://doc.rust-lang.org/stable/proc_macro/struct.Literal.html#method.f32_suffixed):\r\n\r\n```rust\r\n#[proc_macro]\r\nfn example_verbose(input: TokenStream) -> TokenStream {\r\n    let literal = Literal::f32_suffixed(-42.0);\r\n    quote! { #literal }\r\n}\r\n```\r\n\r\nor even shorter\r\n\r\n```rust\r\n#[proc_macro]\r\nfn example(input: TokenStream) -> TokenStream {\r\n    let literal = -42.0f32;\r\n    quote! { #literal }\r\n}\r\n```\r\n\r\nUnfortunately, these currently cause RA to crash:\r\n\r\n```\r\nthread '<unnamed>' panicked at 'Fail to convert given literal Literal {\r\n    text: \"-42.0f32\",\r\n    id: TokenId(\r\n        4294967295,\r\n    ),\r\n}', crates/mbe/src/subtree_source.rs:161:28\r\n```\r\n\r\nThis pull request contains both a fix 8cf9362 and a unit test 27798ee. In addition, I installed the patched server with `cargo xtask install --server` and verified in VSCode that it no longer crashes when a procedural macro returns a negative number literal.\n\nCo-authored-by: Tim <tim@glacyr.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faddea935332de3156a5462baa07136bf2e98bf9", "html_url": "https://github.com/rust-lang/rust/commit/faddea935332de3156a5462baa07136bf2e98bf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faddea935332de3156a5462baa07136bf2e98bf9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a184c83535230af39fad3e238b7422b4972d597e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a184c83535230af39fad3e238b7422b4972d597e", "html_url": "https://github.com/rust-lang/rust/commit/a184c83535230af39fad3e238b7422b4972d597e"}, {"sha": "27798ee575a975a1806ced86aca8aea407897851", "url": "https://api.github.com/repos/rust-lang/rust/commits/27798ee575a975a1806ced86aca8aea407897851", "html_url": "https://github.com/rust-lang/rust/commit/27798ee575a975a1806ced86aca8aea407897851"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "226dc3bec820c9d3bc92ec0b46658411b54b0995", "filename": "crates/mbe/src/subtree_source.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/faddea935332de3156a5462baa07136bf2e98bf9/crates%2Fmbe%2Fsrc%2Fsubtree_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faddea935332de3156a5462baa07136bf2e98bf9/crates%2Fmbe%2Fsrc%2Fsubtree_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsubtree_source.rs?ref=faddea935332de3156a5462baa07136bf2e98bf9", "patch": "@@ -2,7 +2,7 @@\n \n use parser::{Token, TokenSource};\n use std::cell::{Cell, Ref, RefCell};\n-use syntax::{lex_single_syntax_kind, SmolStr, SyntaxKind, SyntaxKind::*, T};\n+use syntax::{tokenize, SmolStr, SyntaxKind, SyntaxKind::*, T};\n use tt::buffer::{Cursor, TokenBuffer};\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n@@ -155,10 +155,17 @@ fn convert_delim(d: Option<tt::DelimiterKind>, closing: bool) -> TtToken {\n }\n \n fn convert_literal(l: &tt::Literal) -> TtToken {\n-    let kind = lex_single_syntax_kind(&l.text)\n-        .map(|(kind, _error)| kind)\n-        .filter(|kind| kind.is_literal())\n-        .unwrap_or_else(|| panic!(\"Fail to convert given literal {:#?}\", &l));\n+    let mut kinds = tokenize(&l.text).0.into_iter().map(|token| token.kind);\n+\n+    let kind = match kinds.next() {\n+        Some(kind) if kind.is_literal() => Some(kind),\n+        Some(SyntaxKind::MINUS) => match kinds.next() {\n+            Some(kind) if kind.is_literal() => Some(kind),\n+            _ => None,\n+        },\n+        _ => None,\n+    }\n+    .unwrap_or_else(|| panic!(\"Fail to convert given literal {:#?}\", &l));\n \n     TtToken { kind, is_joint_to_next: false, text: l.text.clone() }\n }\n@@ -195,3 +202,24 @@ fn convert_leaf(leaf: &tt::Leaf) -> TtToken {\n         tt::Leaf::Punct(punct) => convert_punct(*punct),\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::{convert_literal, TtToken};\n+    use syntax::{SmolStr, SyntaxKind};\n+\n+    #[test]\n+    fn test_negative_literal() {\n+        assert_eq!(\n+            convert_literal(&tt::Literal {\n+                id: tt::TokenId::unspecified(),\n+                text: SmolStr::new(\"-42.0\")\n+            }),\n+            TtToken {\n+                kind: SyntaxKind::FLOAT_NUMBER,\n+                is_joint_to_next: false,\n+                text: SmolStr::new(\"-42.0\")\n+            }\n+        );\n+    }\n+}"}]}