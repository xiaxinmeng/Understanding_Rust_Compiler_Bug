{"sha": "07b4c80c68afb015b26041c37b627e5b25c0824b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3YjRjODBjNjhhZmIwMTViMjYwNDFjMzdiNjI3ZTViMjVjMDgyNGI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-13T17:41:00Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-13T17:44:37Z"}, "message": "rustc: Record what `&` would resolve to for every AST type", "tree": {"sha": "b6ab59870f910f425058ac30fbeb7383e334ced4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6ab59870f910f425058ac30fbeb7383e334ced4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07b4c80c68afb015b26041c37b627e5b25c0824b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07b4c80c68afb015b26041c37b627e5b25c0824b", "html_url": "https://github.com/rust-lang/rust/commit/07b4c80c68afb015b26041c37b627e5b25c0824b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07b4c80c68afb015b26041c37b627e5b25c0824b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e54cde52151feabf4dbcd4905f580eeae9a7f28f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e54cde52151feabf4dbcd4905f580eeae9a7f28f", "html_url": "https://github.com/rust-lang/rust/commit/e54cde52151feabf4dbcd4905f580eeae9a7f28f"}], "stats": {"total": 47, "additions": 24, "deletions": 23}, "files": [{"sha": "356653b24844befc8f14e49fc91c159d2b8edab6", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/07b4c80c68afb015b26041c37b627e5b25c0824b/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07b4c80c68afb015b26041c37b627e5b25c0824b/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=07b4c80c68afb015b26041c37b627e5b25c0824b", "patch": "@@ -36,6 +36,8 @@ type region_map = {\n     local_blocks: hashmap<ast::node_id,ast::node_id>,\n     /* Mapping from a region name to its function. */\n     region_name_to_fn: hashmap<ast::def_id,ast::node_id>,\n+    /* Mapping from an AST type node to the region that `&` resolves to in it. */\n+    ast_type_to_inferred_region: hashmap<ast::node_id,ty::region>\n };\n \n type ctxt = {\n@@ -81,33 +83,30 @@ fn scope_contains(region_map: @region_map, superscope: ast::node_id,\n     ret true;\n }\n \n+fn get_inferred_region(cx: ctxt, sp: syntax::codemap::span) -> ty::region {\n+    // We infer to the caller region if we're at item scope\n+    // and to the block region if we're at block scope.\n+    //\n+    // TODO: What do we do if we're in an alt?\n+\n+    ret alt cx.parent {\n+        pa_item(item_id) | pa_nested_fn(item_id) {\n+            ty::re_caller({crate: ast::local_crate, node: item_id})\n+        }\n+        pa_block(block_id) { ty::re_block(block_id) }\n+        pa_crate { cx.sess.span_bug(sp, \"inferred region at crate level?!\"); }\n+    }\n+}\n+\n fn resolve_ty(ty: @ast::ty, cx: ctxt, visitor: visit::vt<ctxt>) {\n+    let inferred_region = get_inferred_region(cx, ty.span);\n+    cx.region_map.ast_type_to_inferred_region.insert(ty.id, inferred_region);\n+\n     alt ty.node {\n         ast::ty_rptr({id: region_id, node: node}, _) {\n             let region;\n             alt node {\n-                ast::re_inferred {\n-                    // We infer to the caller region if we're at item scope\n-                    // and to the block region if we're at block scope.\n-                    //\n-                    // TODO: What do we do if we're in an alt?\n-\n-                    alt cx.parent {\n-                        pa_item(item_id) | pa_nested_fn(item_id) {\n-                            let def_id = {crate: ast::local_crate,\n-                                          node: item_id};\n-                            region = ty::re_caller(def_id);\n-                        }\n-                        pa_block(block_id) {\n-                            region = ty::re_block(block_id);\n-                        }\n-                        pa_crate {\n-                            cx.sess.span_bug(ty.span, \"inferred region at \" +\n-                                             \"crate level?!\");\n-                        }\n-                    }\n-                }\n-\n+                ast::re_inferred { region = inferred_region; }\n                 ast::re_named(ident) {\n                     // If at item scope, introduce or reuse a binding. If at\n                     // block scope, require that the binding be introduced.\n@@ -269,7 +268,9 @@ fn resolve_crate(sess: session, def_map: resolve::def_map, crate: @ast::crate)\n                     region_map: @{parents: map::new_int_hash(),\n                                   ast_type_to_region: map::new_int_hash(),\n                                   local_blocks: map::new_int_hash(),\n-                                  region_name_to_fn: new_def_hash()},\n+                                  region_name_to_fn: new_def_hash(),\n+                                  ast_type_to_inferred_region:\n+                                    map::new_int_hash()},\n                     mut bindings: @list::nil,\n                     mut queued_locals: [],\n                     parent: pa_crate,"}]}