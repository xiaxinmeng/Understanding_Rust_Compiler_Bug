{"sha": "bc4931ed7e98084480b82ef236d6c5c713645ea5", "node_id": "C_kwDOAAsO6NoAKGJjNDkzMWVkN2U5ODA4NDQ4MGI4MmVmMjM2ZDZjNWM3MTM2NDVlYTU", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-10-30T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-11-03T15:43:12Z"}, "message": "`addr_of!` grants mutable access, maybe?\n\nThe exact set of permissions granted when forming a raw reference is\ncurrently undecided https://github.com/rust-lang/rust/issues/56604.\n\nTo avoid presupposing any particular outcome, adjust the const\nqualification to be compatible with decision where raw reference\nconstructed from `addr_of!` grants mutable access.", "tree": {"sha": "66af2f3daa9677a105c41c603252a655cd42056b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66af2f3daa9677a105c41c603252a655cd42056b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc4931ed7e98084480b82ef236d6c5c713645ea5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc4931ed7e98084480b82ef236d6c5c713645ea5", "html_url": "https://github.com/rust-lang/rust/commit/bc4931ed7e98084480b82ef236d6c5c713645ea5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc4931ed7e98084480b82ef236d6c5c713645ea5/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b285e0c5d828d958ac22efa1e82648b178d1cbd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b285e0c5d828d958ac22efa1e82648b178d1cbd5", "html_url": "https://github.com/rust-lang/rust/commit/b285e0c5d828d958ac22efa1e82648b178d1cbd5"}], "stats": {"total": 75, "additions": 63, "deletions": 12}, "files": [{"sha": "fcce829eba4121a23c0f0336cd0023ec2310b6dd", "filename": "compiler/rustc_const_eval/src/transform/check_consts/resolver.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bc4931ed7e98084480b82ef236d6c5c713645ea5/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4931ed7e98084480b82ef236d6c5c713645ea5/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs?ref=bc4931ed7e98084480b82ef236d6c5c713645ea5", "patch": "@@ -94,11 +94,10 @@ where\n         }\n     }\n \n-    fn address_of_allows_mutation(&self, mt: mir::Mutability, place: mir::Place<'tcx>) -> bool {\n-        match mt {\n-            mir::Mutability::Mut => true,\n-            mir::Mutability::Not => self.shared_borrow_allows_mutation(place),\n-        }\n+    fn address_of_allows_mutation(&self, _mt: mir::Mutability, _place: mir::Place<'tcx>) -> bool {\n+        // Exact set of permissions granted by AddressOf is undecided. Conservatively assume that\n+        // it might allow mutation until resolution of #56604.\n+        true\n     }\n \n     fn ref_allows_mutation(&self, kind: mir::BorrowKind, place: mir::Place<'tcx>) -> bool {\n@@ -110,7 +109,7 @@ where\n         }\n     }\n \n-    /// `&` and `&raw` only allow mutation if the borrowed place is `!Freeze`.\n+    /// `&` only allow mutation if the borrowed place is `!Freeze`.\n     ///\n     /// This assumes that it is UB to take the address of a struct field whose type is\n     /// `Freeze`, then use pointer arithmetic to derive a pointer to a *different* field of"}, {"sha": "f74a25a346fda1d3dbee947117bf3cd8390f951f", "filename": "src/test/ui/consts/qualif-indirect-mutation-fail.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bc4931ed7e98084480b82ef236d6c5c713645ea5/src%2Ftest%2Fui%2Fconsts%2Fqualif-indirect-mutation-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4931ed7e98084480b82ef236d6c5c713645ea5/src%2Ftest%2Fui%2Fconsts%2Fqualif-indirect-mutation-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif-indirect-mutation-fail.rs?ref=bc4931ed7e98084480b82ef236d6c5c713645ea5", "patch": "@@ -2,6 +2,7 @@\n #![feature(const_mut_refs)]\n #![feature(const_precise_live_drops)]\n #![feature(const_swap)]\n+#![feature(raw_ref_op)]\n \n // Mutable borrow of a field with drop impl.\n pub const fn f() {\n@@ -42,3 +43,22 @@ pub const fn g2<T>() {\n     let _ = x.is_some();\n     let _y = x; //~ ERROR destructors cannot be evaluated\n }\n+\n+// Mutable raw reference to a Drop type.\n+pub const fn address_of_mut() {\n+    let mut x: Option<String> = None; //~ ERROR destructors cannot be evaluated\n+    &raw mut x;\n+\n+    let mut y: Option<String> = None; //~ ERROR destructors cannot be evaluated\n+    std::ptr::addr_of_mut!(y);\n+}\n+\n+// Const raw reference to a Drop type. Conservatively assumed to allow mutation\n+// until resolution of https://github.com/rust-lang/rust/issues/56604.\n+pub const fn address_of_const() {\n+    let x: Option<String> = None; //~ ERROR destructors cannot be evaluated\n+    &raw const x;\n+\n+    let y: Option<String> = None; //~ ERROR destructors cannot be evaluated\n+    std::ptr::addr_of!(y);\n+}"}, {"sha": "713df12b7a55f5e4b12a4da0938f37d178e56371", "filename": "src/test/ui/consts/qualif-indirect-mutation-fail.stderr", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bc4931ed7e98084480b82ef236d6c5c713645ea5/src%2Ftest%2Fui%2Fconsts%2Fqualif-indirect-mutation-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc4931ed7e98084480b82ef236d6c5c713645ea5/src%2Ftest%2Fui%2Fconsts%2Fqualif-indirect-mutation-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif-indirect-mutation-fail.stderr?ref=bc4931ed7e98084480b82ef236d6c5c713645ea5", "patch": "@@ -1,33 +1,57 @@\n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/qualif-indirect-mutation-fail.rs:8:9\n+  --> $DIR/qualif-indirect-mutation-fail.rs:9:9\n    |\n LL |     let mut a: (u32, Option<String>) = (0, None);\n    |         ^^^^^ constant functions cannot evaluate destructors\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/qualif-indirect-mutation-fail.rs:14:9\n+  --> $DIR/qualif-indirect-mutation-fail.rs:15:9\n    |\n LL |     let mut x = None;\n    |         ^^^^^ constants cannot evaluate destructors\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/qualif-indirect-mutation-fail.rs:30:9\n+  --> $DIR/qualif-indirect-mutation-fail.rs:31:9\n    |\n LL |     let _z = x;\n    |         ^^ constants cannot evaluate destructors\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/qualif-indirect-mutation-fail.rs:35:9\n+  --> $DIR/qualif-indirect-mutation-fail.rs:36:9\n    |\n LL |     let x: Option<T> = None;\n    |         ^ constant functions cannot evaluate destructors\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/qualif-indirect-mutation-fail.rs:43:9\n+  --> $DIR/qualif-indirect-mutation-fail.rs:44:9\n    |\n LL |     let _y = x;\n    |         ^^ constant functions cannot evaluate destructors\n \n-error: aborting due to 5 previous errors\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/qualif-indirect-mutation-fail.rs:52:9\n+   |\n+LL |     let mut y: Option<String> = None;\n+   |         ^^^^^ constant functions cannot evaluate destructors\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/qualif-indirect-mutation-fail.rs:49:9\n+   |\n+LL |     let mut x: Option<String> = None;\n+   |         ^^^^^ constant functions cannot evaluate destructors\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/qualif-indirect-mutation-fail.rs:62:9\n+   |\n+LL |     let y: Option<String> = None;\n+   |         ^ constant functions cannot evaluate destructors\n+\n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/qualif-indirect-mutation-fail.rs:59:9\n+   |\n+LL |     let x: Option<String> = None;\n+   |         ^ constant functions cannot evaluate destructors\n+\n+error: aborting due to 9 previous errors\n \n For more information about this error, try `rustc --explain E0493`."}, {"sha": "06af6a03b8f60d86d66b042c4888315a7a466b57", "filename": "src/test/ui/consts/qualif-indirect-mutation-pass.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bc4931ed7e98084480b82ef236d6c5c713645ea5/src%2Ftest%2Fui%2Fconsts%2Fqualif-indirect-mutation-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4931ed7e98084480b82ef236d6c5c713645ea5/src%2Ftest%2Fui%2Fconsts%2Fqualif-indirect-mutation-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif-indirect-mutation-pass.rs?ref=bc4931ed7e98084480b82ef236d6c5c713645ea5", "patch": "@@ -3,14 +3,22 @@\n #![feature(const_mut_refs)]\n #![feature(const_precise_live_drops)]\n \n+// Mutable reference allows only mutation of !Drop place.\n pub const fn f() {\n     let mut x: (Option<String>, u32) = (None, 0);\n     let mut a = 10;\n     *(&mut a) = 11;\n     x.1 = a;\n }\n \n+// Mutable reference allows only mutation of !Drop place.\n pub const fn g() {\n     let mut a: (u32, Option<String>) = (0, None);\n     let _ = &mut a.0;\n }\n+\n+// Shared reference does not allow for mutation.\n+pub const fn h() {\n+    let x: Option<String> = None;\n+    let _ = &x;\n+}"}]}