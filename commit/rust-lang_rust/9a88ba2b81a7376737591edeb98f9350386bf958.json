{"sha": "9a88ba2b81a7376737591edeb98f9350386bf958", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhODhiYTJiODFhNzM3NjczNzU5MWVkZWI5OGY5MzUwMzg2YmY5NTg=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-05-25T00:26:46Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-05-25T00:26:46Z"}, "message": "rustc: Downcase typeck::demand and typeck::pushdown", "tree": {"sha": "ea7ce83da809e94471beb8e26427becae998ae5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea7ce83da809e94471beb8e26427becae998ae5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a88ba2b81a7376737591edeb98f9350386bf958", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a88ba2b81a7376737591edeb98f9350386bf958", "html_url": "https://github.com/rust-lang/rust/commit/9a88ba2b81a7376737591edeb98f9350386bf958", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a88ba2b81a7376737591edeb98f9350386bf958/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6473b73174afc54198c4105f7fa927f04a71e04e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6473b73174afc54198c4105f7fa927f04a71e04e", "html_url": "https://github.com/rust-lang/rust/commit/6473b73174afc54198c4105f7fa927f04a71e04e"}], "stats": {"total": 134, "additions": 67, "deletions": 67}, "files": [{"sha": "75d8bac77695e64805bf32956884d77938c0c216", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 67, "deletions": 67, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/9a88ba2b81a7376737591edeb98f9350386bf958/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a88ba2b81a7376737591edeb98f9350386bf958/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=9a88ba2b81a7376737591edeb98f9350386bf958", "patch": "@@ -994,7 +994,7 @@ fn count_boxes(&ty::ctxt tcx, &ty::t t) -> uint {\n \n type ty_param_substs_and_ty = tup(vec[ty::t], ty::t);\n \n-mod Demand {\n+mod demand {\n     fn simple(&@stmt_ctxt scx, &span sp, &ty::t expected, &ty::t actual)\n             -> ty::t {\n         let vec[ty::t] tps = [];\n@@ -1111,7 +1111,7 @@ fn variant_arg_types(&@crate_ctxt ccx, &span sp, &ast::def_id vid,\n // we're more eager than we need to be, calling pushdown_expr() and friends\n // directly inside check_expr(). This results in a quadratic algorithm.\n \n-mod Pushdown {\n+mod pushdown {\n     // Push-down over typed patterns. Note that the pattern that you pass to\n     // this function must have been passed to check_pat() first.\n     //\n@@ -1120,17 +1120,17 @@ mod Pushdown {\n     fn pushdown_pat(&@stmt_ctxt scx, &ty::t expected, &@ast::pat pat) {\n         alt (pat.node) {\n             case (ast::pat_wild(?ann)) {\n-                auto t = Demand::simple(scx, pat.span, expected,\n+                auto t = demand::simple(scx, pat.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann));\n                 write::ty_only_fixup(scx, ann.id, t);\n             }\n             case (ast::pat_lit(?lit, ?ann)) {\n-                auto t = Demand::simple(scx, pat.span, expected,\n+                auto t = demand::simple(scx, pat.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann));\n                 write::ty_only_fixup(scx, ann.id, t);\n             }\n             case (ast::pat_bind(?id, ?did, ?ann)) {\n-                auto t = Demand::simple(scx, pat.span, expected,\n+                auto t = demand::simple(scx, pat.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann));\n                 scx.fcx.locals.insert(did, t);\n                 write::ty_only_fixup(scx, ann.id, t);\n@@ -1158,7 +1158,7 @@ mod Pushdown {\n                     let ty::t t1 = some_ty;\n                     let ty::t t2 = actual_ty_params.(j);\n \n-                    let ty::t res = Demand::simple(scx, pat.span, t1, t2);\n+                    let ty::t res = demand::simple(scx, pat.span, t1, t2);\n \n                     vec::push(tparams, res);\n                     j += 1u;\n@@ -1182,7 +1182,7 @@ mod Pushdown {\n                     ty::ann_to_type_params(scx.fcx.ccx.tcx.node_types, ann);\n                 auto tt = ann_to_type(scx.fcx.ccx.tcx.node_types, ann);\n \n-                let ty_param_substs_and_ty res_t = Demand::full(scx, pat.span,\n+                let ty_param_substs_and_ty res_t = demand::full(scx, pat.span,\n                       expected, tt, tps, NO_AUTODEREF);\n \n                 auto a_1 = mk_ann_type(ann.id, res_t._1,\n@@ -1212,7 +1212,7 @@ mod Pushdown {\n             case (ast::expr_vec(?es_0, ?mut, ?ann)) {\n                 // TODO: enforce mutability\n \n-                auto t = Demand::simple(scx, e.span, expected,\n+                auto t = demand::simple(scx, e.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann));\n                 alt (struct(scx.fcx.ccx.tcx, t)) {\n                     case (ty::ty_vec(?mt)) {\n@@ -1228,7 +1228,7 @@ mod Pushdown {\n                 write::ty_only_fixup(scx, ann.id, t);\n             }\n             case (ast::expr_tup(?es_0, ?ann)) {\n-                auto t = Demand::simple(scx, e.span, expected,\n+                auto t = demand::simple(scx, e.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann));\n                 alt (struct(scx.fcx.ccx.tcx, t)) {\n                     case (ty::ty_tup(?mts)) {\n@@ -1247,7 +1247,7 @@ mod Pushdown {\n             }\n             case (ast::expr_rec(?fields_0, ?base_0, ?ann)) {\n \n-                auto t = Demand::simple(scx, e.span, expected,\n+                auto t = demand::simple(scx, e.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann));\n                 alt (struct(scx.fcx.ccx.tcx, t)) {\n                     case (ty::ty_rec(?field_mts)) {\n@@ -1288,33 +1288,33 @@ mod Pushdown {\n                 write::ty_only_fixup(scx, ann.id, t);\n             }\n             case (ast::expr_bind(?sube, ?es, ?ann)) {\n-                auto t = Demand::simple(scx, e.span, expected,\n+                auto t = demand::simple(scx, e.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann));\n                 write::ty_only_fixup(scx, ann.id, t);\n             }\n             case (ast::expr_call(?sube, ?es, ?ann)) {\n-                // NB: we call 'Demand::autoderef' and pass in adk only in\n+                // NB: we call 'demand::autoderef' and pass in adk only in\n                 // cases where e is an expression that could *possibly*\n                 // produce a box; things like expr_binary or expr_bind can't,\n                 // so there's no need.\n-                auto t = Demand::autoderef(scx, e.span, expected,\n+                auto t = demand::autoderef(scx, e.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann), adk);\n                 write::ty_only_fixup(scx, ann.id, t);\n             }\n             case (ast::expr_self_method(?id, ?ann)) {\n-                auto t = Demand::simple(scx, e.span, expected,\n+                auto t = demand::simple(scx, e.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann));\n                 write::ty_only_fixup(scx, ann.id, t);\n             }\n             case (ast::expr_binary(?bop, ?lhs, ?rhs, ?ann)) {\n-                auto t = Demand::simple(scx, e.span, expected,\n+                auto t = demand::simple(scx, e.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann));\n                 write::ty_only_fixup(scx, ann.id, t);\n             }\n             case (ast::expr_unary(?uop, ?sube, ?ann)) {\n                 // See note in expr_unary for why we're calling\n-                // Demand::autoderef.\n-                auto t = Demand::autoderef(scx, e.span, expected,\n+                // demand::autoderef.\n+                auto t = demand::autoderef(scx, e.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann), adk);\n                 write::ty_only_fixup(scx, ann.id, t);\n \n@@ -1344,17 +1344,17 @@ mod Pushdown {\n                 pushdown_expr(scx, inner_ty, sube);\n             }\n             case (ast::expr_lit(?lit, ?ann)) {\n-                auto t = Demand::simple(scx, e.span, expected,\n+                auto t = demand::simple(scx, e.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann));\n                 write::ty_only_fixup(scx, ann.id, t);\n             }\n             case (ast::expr_cast(?sube, ?ast_ty, ?ann)) {\n-                auto t = Demand::simple(scx, e.span, expected,\n+                auto t = demand::simple(scx, e.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann));\n                 write::ty_only_fixup(scx, ann.id, t);\n             }\n             case (ast::expr_if(?cond, ?then_0, ?else_0, ?ann)) {\n-                auto t = Demand::autoderef(scx, e.span, expected,\n+                auto t = demand::autoderef(scx, e.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann), adk);\n \n                 auto then_t = ty::block_ty(scx.fcx.ccx.tcx, then_0);\n@@ -1374,51 +1374,51 @@ mod Pushdown {\n                 write::ty_only_fixup(scx, ann.id, t);\n             }\n             case (ast::expr_for(?decl, ?seq, ?bloc, ?ann)) {\n-                auto t = Demand::simple(scx, e.span, expected,\n+                auto t = demand::simple(scx, e.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann));\n                 write::ty_only_fixup(scx, ann.id, t);\n             }\n             case (ast::expr_for_each(?decl, ?seq, ?bloc, ?ann)) {\n-                auto t = Demand::simple(scx, e.span, expected,\n+                auto t = demand::simple(scx, e.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann));\n                 write::ty_only_fixup(scx, ann.id, t);\n             }\n             case (ast::expr_while(?cond, ?bloc, ?ann)) {\n-                auto t = Demand::simple(scx, e.span, expected,\n+                auto t = demand::simple(scx, e.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann));\n                 write::ty_only_fixup(scx, ann.id, t);\n             }\n             case (ast::expr_do_while(?bloc, ?cond, ?ann)) {\n-                auto t = Demand::simple(scx, e.span, expected,\n+                auto t = demand::simple(scx, e.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann));\n                 write::ty_only_fixup(scx, ann.id, t);\n             }\n             case (ast::expr_block(?bloc, ?ann)) {\n-                auto t = Demand::autoderef(scx, e.span, expected,\n+                auto t = demand::autoderef(scx, e.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann), adk);\n                 write::ty_only_fixup(scx, ann.id, t);\n             }\n             case (ast::expr_assign(?lhs_0, ?rhs_0, ?ann)) {\n-                auto t = Demand::autoderef(scx, e.span, expected,\n+                auto t = demand::autoderef(scx, e.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann), adk);\n                 pushdown_expr(scx, expected, lhs_0);\n                 pushdown_expr(scx, expected, rhs_0);\n                 write::ty_only_fixup(scx, ann.id, t);\n             }\n             case (ast::expr_assign_op(?op, ?lhs_0, ?rhs_0, ?ann)) {\n-                auto t = Demand::autoderef(scx, e.span, expected,\n+                auto t = demand::autoderef(scx, e.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann), adk);\n                 pushdown_expr(scx, expected, lhs_0);\n                 pushdown_expr(scx, expected, rhs_0);\n                 write::ty_only_fixup(scx, ann.id, t);\n             }\n             case (ast::expr_field(?lhs, ?rhs, ?ann)) {\n-                auto t = Demand::autoderef(scx, e.span, expected,\n+                auto t = demand::autoderef(scx, e.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann), adk);\n                 write::ty_only_fixup(scx, ann.id, t);\n             }\n             case (ast::expr_index(?base, ?index, ?ann)) {\n-                auto t = Demand::autoderef(scx, e.span, expected,\n+                auto t = demand::autoderef(scx, e.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann), adk);\n                 write::ty_only_fixup(scx, ann.id, t);\n             }\n@@ -1427,7 +1427,7 @@ mod Pushdown {\n                     ty::ann_to_type_params(scx.fcx.ccx.tcx.node_types, ann);\n                 auto t_0 = ann_to_type(scx.fcx.ccx.tcx.node_types, ann);\n \n-                auto result_0 = Demand::full(scx, e.span, expected, t_0,\n+                auto result_0 = demand::full(scx, e.span, expected, t_0,\n                                              tp_substs_0, adk);\n                 auto t = result_0._1;\n \n@@ -1447,7 +1447,7 @@ mod Pushdown {\n                 write::ty_fixup(scx, ann.id, tup(ty_params_opt, t));\n             }\n             case (ast::expr_ext(?p, ?args, ?body, ?expanded, ?ann)) {\n-                auto t = Demand::autoderef(scx, e.span, expected,\n+                auto t = demand::autoderef(scx, e.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann), adk);\n                 write::ty_only_fixup(scx, ann.id, t);\n             }\n@@ -1463,13 +1463,13 @@ mod Pushdown {\n             case (ast::expr_assert(_,_)) { /* no-op */ }\n \n             case (ast::expr_port(?ann)) {\n-                auto t = Demand::simple(scx, e.span, expected,\n+                auto t = demand::simple(scx, e.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann));\n                 write::ty_only_fixup(scx, ann.id, t);\n             }\n \n             case (ast::expr_chan(?es, ?ann)) {\n-                auto t = Demand::simple(scx, e.span, expected,\n+                auto t = demand::simple(scx, e.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann));\n                 alt (struct(scx.fcx.ccx.tcx, t)) {\n                     case (ty::ty_chan(?subty)) {\n@@ -1491,7 +1491,7 @@ mod Pushdown {\n                     auto bty = block_ty(scx.fcx.ccx.tcx, arm_0.block);\n                     // Failing alt arms don't need to have a matching type\n                     if (!ty::type_is_bot(scx.fcx.ccx.tcx, bty)) {\n-                        t = Demand::simple(scx, e.span, t, bty);\n+                        t = demand::simple(scx, e.span, t, bty);\n                     }\n                 }\n                 write::ty_only_fixup(scx, ann.id, t);\n@@ -1510,19 +1510,19 @@ mod Pushdown {\n             }\n \n             case (ast::expr_spawn(?dom, ?name, ?func, ?args, ?ann)) {\n-                // NB: we call 'Demand::autoderef' and pass in adk only in\n+                // NB: we call 'demand::autoderef' and pass in adk only in\n                 // cases where e is an expression that could *possibly*\n                 // produce a box; things like expr_binary or expr_bind can't,\n                 // so there's no need.\n-                auto t = Demand::autoderef(scx, e.span, expected,\n+                auto t = demand::autoderef(scx, e.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann), adk);\n                 write::ty_only_fixup(scx, ann.id, t);\n             }\n \n             case (ast::expr_anon_obj(?anon_obj, ?tps, ?odid, ?ann)) {\n                 // NB: Not sure if this is correct, but not worrying too much\n                 // about it since pushdown is going away anyway.\n-                auto t = Demand::autoderef(scx, e.span, expected,\n+                auto t = demand::autoderef(scx, e.span, expected,\n                     ann_to_type(scx.fcx.ccx.tcx.node_types, ann), adk);\n                 write::ty_only_fixup(scx, ann.id, t);\n             }\n@@ -1544,7 +1544,7 @@ mod Pushdown {\n                 write::nil_ty(scx.fcx.ccx.tcx, bloc.node.a.id);\n             }\n             case (none[@ast::expr]) {\n-                Demand::simple(scx, bloc.span, expected,\n+                demand::simple(scx, bloc.span, expected,\n                                ty::mk_nil(scx.fcx.ccx.tcx));\n                 write::nil_ty(scx.fcx.ccx.tcx, bloc.node.a.id);\n             }\n@@ -1866,7 +1866,7 @@ fn check_expr(&@stmt_ctxt scx, &@ast::expr expr) {\n \n         // Unify the callee and arguments.\n         auto tpt_0 = ty::expr_ty_params_and_ty(scx.fcx.ccx.tcx, f);\n-        auto tpt_1 = Demand::full(scx, f.span, tpt_0._1, t_0, tpt_0._0,\n+        auto tpt_1 = demand::full(scx, f.span, tpt_0._1, t_0, tpt_0._0,\n                                   NO_AUTODEREF);\n         replace_expr_type(scx, f, tpt_1);\n     }\n@@ -1879,9 +1879,9 @@ fn check_expr(&@stmt_ctxt scx, &@ast::expr expr) {\n         auto lhs_t0 = expr_ty(scx.fcx.ccx.tcx, lhs);\n         auto rhs_t0 = expr_ty(scx.fcx.ccx.tcx, rhs);\n \n-        Pushdown::pushdown_expr(scx, rhs_t0, lhs);\n+        pushdown::pushdown_expr(scx, rhs_t0, lhs);\n         auto lhs_t1 = expr_ty(scx.fcx.ccx.tcx, lhs);\n-        Pushdown::pushdown_expr(scx, lhs_t1, rhs);\n+        pushdown::pushdown_expr(scx, lhs_t1, rhs);\n         auto rhs_t1 = expr_ty(scx.fcx.ccx.tcx, rhs);\n \n         auto ann = triv_ann(a.id, rhs_t1);\n@@ -1912,9 +1912,9 @@ fn check_expr(&@stmt_ctxt scx, &@ast::expr expr) {\n             auto rhs_t0 = expr_ty(scx.fcx.ccx.tcx, rhs);\n \n             // FIXME: Binops have a bit more subtlety than this.\n-            Pushdown::pushdown_expr_full(scx, rhs_t0, lhs, AUTODEREF_OK);\n+            pushdown::pushdown_expr_full(scx, rhs_t0, lhs, AUTODEREF_OK);\n             auto lhs_t1 = expr_ty(scx.fcx.ccx.tcx, lhs);\n-            Pushdown::pushdown_expr_full(scx, lhs_t1, rhs, AUTODEREF_OK);\n+            pushdown::pushdown_expr_full(scx, lhs_t1, rhs, AUTODEREF_OK);\n \n             auto t = strip_boxes(scx.fcx.ccx.tcx, lhs_t0);\n             alt (binop) {\n@@ -2013,7 +2013,7 @@ fn check_expr(&@stmt_ctxt scx, &@ast::expr expr) {\n \n                 case (some[@ast::expr](?e)) {\n                     check_expr(scx, e);\n-                    Pushdown::pushdown_expr(scx, scx.fcx.ret_ty, e);\n+                    pushdown::pushdown_expr(scx, scx.fcx.ret_ty, e);\n \n                     write::bot_ty(scx.fcx.ccx.tcx, a.id);\n                 }\n@@ -2037,7 +2037,7 @@ fn check_expr(&@stmt_ctxt scx, &@ast::expr expr) {\n \n                 case (some[@ast::expr](?e)) {\n                     check_expr(scx, e);\n-                    Pushdown::pushdown_expr(scx, scx.fcx.ret_ty, e);\n+                    pushdown::pushdown_expr(scx, scx.fcx.ret_ty, e);\n \n                     write::nil_ty(scx.fcx.ccx.tcx, a.id);\n                 }\n@@ -2049,7 +2049,7 @@ fn check_expr(&@stmt_ctxt scx, &@ast::expr expr) {\n             assert (ast::is_call_expr(e));\n \n             check_expr(scx, e);\n-            Pushdown::pushdown_expr(scx, scx.fcx.ret_ty, e);\n+            pushdown::pushdown_expr(scx, scx.fcx.ret_ty, e);\n \n             write::nil_ty(scx.fcx.ccx.tcx, a.id);\n         }\n@@ -2061,7 +2061,7 @@ fn check_expr(&@stmt_ctxt scx, &@ast::expr expr) {\n \n         case (ast::expr_check(?e, ?a)) {\n             check_expr(scx, e);\n-            Demand::simple(scx, expr.span, ty::mk_bool(scx.fcx.ccx.tcx),\n+            demand::simple(scx, expr.span, ty::mk_bool(scx.fcx.ccx.tcx),\n                 expr_ty(scx.fcx.ccx.tcx, e));\n             /* e must be a call expr where all arguments are either\n              literals or slots */\n@@ -2103,7 +2103,7 @@ fn check_expr(&@stmt_ctxt scx, &@ast::expr expr) {\n         case (ast::expr_assert(?e, ?a)) {\n             check_expr(scx, e);\n             auto ety = expr_ty(scx.fcx.ccx.tcx, e);\n-            Demand::simple(scx, expr.span, ty::mk_bool(scx.fcx.ccx.tcx), ety);\n+            demand::simple(scx, expr.span, ty::mk_bool(scx.fcx.ccx.tcx), ety);\n \n             write::nil_ty(scx.fcx.ccx.tcx, a.id);\n         }\n@@ -2126,14 +2126,14 @@ fn check_expr(&@stmt_ctxt scx, &@ast::expr expr) {\n             auto rhs_t = expr_ty(scx.fcx.ccx.tcx, rhs);\n \n             auto chan_t = ty::mk_chan(scx.fcx.ccx.tcx, rhs_t);\n-            Pushdown::pushdown_expr(scx, chan_t, lhs);\n+            pushdown::pushdown_expr(scx, chan_t, lhs);\n             auto item_t;\n             auto lhs_t = expr_ty(scx.fcx.ccx.tcx, lhs);\n             alt (struct(scx.fcx.ccx.tcx, lhs_t)) {\n                 case (ty::ty_chan(?it)) { item_t = it; }\n                 case (_) { fail; }\n             }\n-            Pushdown::pushdown_expr(scx, item_t, rhs);\n+            pushdown::pushdown_expr(scx, item_t, rhs);\n \n             write::ty_only_fixup(scx, a.id, chan_t);\n         }\n@@ -2146,21 +2146,21 @@ fn check_expr(&@stmt_ctxt scx, &@ast::expr expr) {\n             auto lhs_t1 = expr_ty(scx.fcx.ccx.tcx, lhs);\n \n             auto port_t = ty::mk_port(scx.fcx.ccx.tcx, lhs_t1);\n-            Pushdown::pushdown_expr(scx, port_t, rhs);\n+            pushdown::pushdown_expr(scx, port_t, rhs);\n             auto item_t;\n             auto rhs_t = expr_ty(scx.fcx.ccx.tcx, rhs);\n             alt (struct(scx.fcx.ccx.tcx, rhs_t)) {\n                 case (ty::ty_port(?it)) { item_t = it; }\n                 case (_) { fail; }\n             }\n-            Pushdown::pushdown_expr(scx, item_t, lhs);\n+            pushdown::pushdown_expr(scx, item_t, lhs);\n \n             write::ty_only_fixup(scx, a.id, item_t);\n         }\n \n         case (ast::expr_if(?cond, ?thn, ?elsopt, ?a)) {\n             check_expr(scx, cond);\n-            Pushdown::pushdown_expr(scx, ty::mk_bool(scx.fcx.ccx.tcx),\n+            pushdown::pushdown_expr(scx, ty::mk_bool(scx.fcx.ccx.tcx),\n                                     cond);\n \n             check_block(scx, thn);\n@@ -2208,7 +2208,7 @@ fn check_expr(&@stmt_ctxt scx, &@ast::expr expr) {\n \n         case (ast::expr_while(?cond, ?body, ?a)) {\n             check_expr(scx, cond);\n-            Pushdown::pushdown_expr(scx, ty::mk_bool(scx.fcx.ccx.tcx), cond);\n+            pushdown::pushdown_expr(scx, ty::mk_bool(scx.fcx.ccx.tcx), cond);\n             check_block(scx, body);\n \n             auto typ = ty::mk_nil(scx.fcx.ccx.tcx);\n@@ -2217,7 +2217,7 @@ fn check_expr(&@stmt_ctxt scx, &@ast::expr expr) {\n \n         case (ast::expr_do_while(?body, ?cond, ?a)) {\n             check_expr(scx, cond);\n-            Pushdown::pushdown_expr(scx, ty::mk_bool(scx.fcx.ccx.tcx), cond);\n+            pushdown::pushdown_expr(scx, ty::mk_bool(scx.fcx.ccx.tcx), cond);\n             check_block(scx, body);\n \n             auto typ = block_ty(scx.fcx.ccx.tcx, body);\n@@ -2234,13 +2234,13 @@ fn check_expr(&@stmt_ctxt scx, &@ast::expr expr) {\n             let vec[@ast::pat] pats = [];\n             for (ast::arm arm in arms) {\n                 check_pat(scx, arm.pat);\n-                pattern_ty = Demand::simple(scx, arm.pat.span, pattern_ty,\n+                pattern_ty = demand::simple(scx, arm.pat.span, pattern_ty,\n                     pat_ty(scx.fcx.ccx.tcx, arm.pat));\n                 pats += [arm.pat];\n             }\n \n             for (@ast::pat pat in pats) {\n-                Pushdown::pushdown_pat(scx, pattern_ty, pat);\n+                pushdown::pushdown_pat(scx, pattern_ty, pat);\n             }\n \n             // Now typecheck the blocks.\n@@ -2253,17 +2253,17 @@ fn check_expr(&@stmt_ctxt scx, &@ast::expr expr) {\n                 auto bty = block_ty(scx.fcx.ccx.tcx, arm.block);\n                 // Failing alt arms don't need to have a matching type\n                 if (!ty::type_is_bot(scx.fcx.ccx.tcx, bty)) {\n-                    result_ty = Demand::simple(scx, arm.block.span,\n+                    result_ty = demand::simple(scx, arm.block.span,\n                                                result_ty, bty);\n                 }\n             }\n \n             auto i = 0u;\n             for (ast::block bloc in blocks) {\n-                Pushdown::pushdown_block(scx, result_ty, bloc);\n+                pushdown::pushdown_block(scx, result_ty, bloc);\n             }\n \n-            Pushdown::pushdown_expr(scx, pattern_ty, expr);\n+            pushdown::pushdown_expr(scx, pattern_ty, expr);\n \n             // FIXME: If all the the arms were ty_bot then the result should\n             // also be ty_bot. At the moment this doesn't seem to matter\n@@ -2387,7 +2387,7 @@ fn check_expr(&@stmt_ctxt scx, &@ast::expr expr) {\n             check_call(scx, f, args);\n \n             auto fty = expr_ty(scx.fcx.ccx.tcx, f);\n-            Demand::simple(scx, f.span, ty::mk_nil(scx.fcx.ccx.tcx), fty);\n+            demand::simple(scx, f.span, ty::mk_nil(scx.fcx.ccx.tcx), fty);\n \n             // FIXME: Other typechecks needed\n \n@@ -2424,7 +2424,7 @@ fn check_expr(&@stmt_ctxt scx, &@ast::expr expr) {\n             for (@ast::expr e in args) {\n                 check_expr(scx, e);\n                 auto expr_t = expr_ty(scx.fcx.ccx.tcx, e);\n-                Demand::simple(scx, expr.span, t, expr_t);\n+                demand::simple(scx, expr.span, t, expr_t);\n             }\n \n             auto typ = ty::mk_vec(scx.fcx.ccx.tcx, rec(ty=t, mut=mut));\n@@ -2488,7 +2488,7 @@ fn check_expr(&@stmt_ctxt scx, &@ast::expr expr) {\n                         auto found = false;\n                         for (ty::field bf in base_fields) {\n                             if (str::eq(f.ident, bf.ident)) {\n-                                Demand::simple(scx, expr.span, f.mt.ty,\n+                                demand::simple(scx, expr.span, f.mt.ty,\n                                                bf.mt.ty);\n                                 found = true;\n                             }\n@@ -2701,11 +2701,11 @@ fn check_decl_initializer(&@stmt_ctxt scx, &ast::def_id lid,\n     auto lty = ty::mk_local(scx.fcx.ccx.tcx, lid);\n     alt (init.op) {\n         case (ast::init_assign) {\n-            Pushdown::pushdown_expr(scx, lty, init.expr);\n+            pushdown::pushdown_expr(scx, lty, init.expr);\n         }\n         case (ast::init_recv) {\n             auto port_ty = ty::mk_port(scx.fcx.ccx.tcx, lty);\n-            Pushdown::pushdown_expr(scx, port_ty, init.expr);\n+            pushdown::pushdown_expr(scx, port_ty, init.expr);\n         }\n     }\n }\n@@ -2747,7 +2747,7 @@ fn check_decl_local(&@fn_ctxt fcx, &@ast::decl decl) -> @ast::decl {\n fn check_and_pushdown_expr(&@stmt_ctxt scx, &@ast::expr expr) {\n     check_expr(scx, expr);\n     auto ety = expr_ty(scx.fcx.ccx.tcx, expr);\n-    Pushdown::pushdown_expr(scx, ety, expr);\n+    pushdown::pushdown_expr(scx, ety, expr);\n }\n \n fn check_stmt(&@fn_ctxt fcx, &@ast::stmt stmt) {\n@@ -2777,7 +2777,7 @@ fn check_block(&@stmt_ctxt scx, &ast::block block) {\n         case (some[@ast::expr](?e)) {\n             check_expr(scx, e);\n             auto ety = expr_ty(scx.fcx.ccx.tcx, e);\n-            Pushdown::pushdown_expr(scx, ety, e);\n+            pushdown::pushdown_expr(scx, ety, e);\n         }\n     }\n "}]}