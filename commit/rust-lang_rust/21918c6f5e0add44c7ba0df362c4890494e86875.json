{"sha": "21918c6f5e0add44c7ba0df362c4890494e86875", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxOTE4YzZmNWUwYWRkNDRjN2JhMGRmMzYyYzQ4OTA0OTRlODY4NzU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-17T09:37:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-17T09:37:22Z"}, "message": "minor: add missing tests", "tree": {"sha": "63d64dd375f86b094d820a774a303893c3aa8702", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63d64dd375f86b094d820a774a303893c3aa8702"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21918c6f5e0add44c7ba0df362c4890494e86875", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21918c6f5e0add44c7ba0df362c4890494e86875", "html_url": "https://github.com/rust-lang/rust/commit/21918c6f5e0add44c7ba0df362c4890494e86875", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21918c6f5e0add44c7ba0df362c4890494e86875/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72a694d5773b143086d5e3bb421d721614da0ffc", "url": "https://api.github.com/repos/rust-lang/rust/commits/72a694d5773b143086d5e3bb421d721614da0ffc", "html_url": "https://github.com/rust-lang/rust/commit/72a694d5773b143086d5e3bb421d721614da0ffc"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "45471da4105a6bb7218cfc02650a8b9cf3150be3", "filename": "crates/ide/src/diagnostics/fixes/remove_semicolon.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/21918c6f5e0add44c7ba0df362c4890494e86875/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Fremove_semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21918c6f5e0add44c7ba0df362c4890494e86875/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Fremove_semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Fremove_semicolon.rs?ref=21918c6f5e0add44c7ba0df362c4890494e86875", "patch": "@@ -29,3 +29,13 @@ impl DiagnosticWithFix for RemoveThisSemicolon {\n         Some(fix(\"remove_semicolon\", \"Remove this semicolon\", source_change, semicolon))\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::diagnostics::tests::check_fix;\n+\n+    #[test]\n+    fn remove_semicolon() {\n+        check_fix(r#\"fn f() -> i32 { 92$0; }\"#, r#\"fn f() -> i32 { 92 }\"#);\n+    }\n+}"}, {"sha": "b0ef7b44adc306a785bec0e28aeb9b24db8af9a1", "filename": "crates/ide/src/diagnostics/fixes/replace_with_find_map.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/21918c6f5e0add44c7ba0df362c4890494e86875/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Freplace_with_find_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21918c6f5e0add44c7ba0df362c4890494e86875/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Freplace_with_find_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes%2Freplace_with_find_map.rs?ref=21918c6f5e0add44c7ba0df362c4890494e86875", "patch": "@@ -40,3 +40,45 @@ impl DiagnosticWithFix for ReplaceFilterMapNextWithFindMap {\n         ))\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::diagnostics::tests::check_fix;\n+\n+    #[test]\n+    fn replace_with_wind_map() {\n+        check_fix(\n+            r#\"\n+//- /main.rs crate:main deps:core\n+use core::iter::Iterator;\n+use core::option::Option::{self, Some, None};\n+fn foo() {\n+    let m = [1, 2, 3].iter().$0filter_map(|x| if *x == 2 { Some (4) } else { None }).next();\n+}\n+//- /core/lib.rs crate:core\n+pub mod option {\n+    pub enum Option<T> { Some(T), None }\n+}\n+pub mod iter {\n+    pub trait Iterator {\n+        type Item;\n+        fn filter_map<B, F>(self, f: F) -> FilterMap where F: FnMut(Self::Item) -> Option<B> { FilterMap }\n+        fn next(&mut self) -> Option<Self::Item>;\n+    }\n+    pub struct FilterMap {}\n+    impl Iterator for FilterMap {\n+        type Item = i32;\n+        fn next(&mut self) -> i32 { 7 }\n+    }\n+}\n+\"#,\n+            r#\"\n+use core::iter::Iterator;\n+use core::option::Option::{self, Some, None};\n+fn foo() {\n+    let m = [1, 2, 3].iter().find_map(|x| if *x == 2 { Some (4) } else { None });\n+}\n+\"#,\n+        )\n+    }\n+}"}]}