{"sha": "b4420c8f5c9be977b72b9b0027800ae36aa0f302", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NDIwYzhmNWM5YmU5NzdiNzJiOWIwMDI3ODAwYWUzNmFhMGYzMDI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-14T03:28:32Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-21T21:16:00Z"}, "message": "rework run-fail and support check,build-fail", "tree": {"sha": "da8e809461f4ee056f6d1f8afe9fc1b10535c776", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da8e809461f4ee056f6d1f8afe9fc1b10535c776"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4420c8f5c9be977b72b9b0027800ae36aa0f302", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4420c8f5c9be977b72b9b0027800ae36aa0f302", "html_url": "https://github.com/rust-lang/rust/commit/b4420c8f5c9be977b72b9b0027800ae36aa0f302", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4420c8f5c9be977b72b9b0027800ae36aa0f302/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8b817810f5848916adcd2c2a2f573015a3a5f8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8b817810f5848916adcd2c2a2f573015a3a5f8c", "html_url": "https://github.com/rust-lang/rust/commit/d8b817810f5848916adcd2c2a2f573015a3a5f8c"}], "stats": {"total": 862, "additions": 512, "deletions": 350}, "files": [{"sha": "4cef42d17d6009d93c1452d975f9ff33325aed45", "filename": "src/test/ui/asm/issue-51431.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fasm%2Fissue-51431.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fasm%2Fissue-51431.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-51431.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // ignore-emscripten no asm! support\n \n #![feature(asm)]"}, {"sha": "a024f3311f1866e9240677ad9f2eedf4187e9769", "filename": "src/test/ui/asm/issue-51431.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fasm%2Fissue-51431.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fasm%2Fissue-51431.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-51431.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/issue-51431.rs:7:32\n+  --> $DIR/issue-51431.rs:8:32\n    |\n LL |         asm! {\"mov $0,$1\"::\"0\"(\"bx\"),\"1\"(0x00)}\n    |                                ^^^^"}, {"sha": "f36a5f1acc152a3e8108a1d5dceebe45cd0841aa", "filename": "src/test/ui/bad/bad-intrinsic-monomorphization.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fbad%2Fbad-intrinsic-monomorphization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fbad%2Fbad-intrinsic-monomorphization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-intrinsic-monomorphization.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n #![feature(repr_simd, platform_intrinsics, core_intrinsics)]\n #![allow(warnings)]\n #![crate_type = \"rlib\"]"}, {"sha": "c070f01818193c021f0dc563ebf852ca10b68488", "filename": "src/test/ui/bad/bad-intrinsic-monomorphization.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fbad%2Fbad-intrinsic-monomorphization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fbad%2Fbad-intrinsic-monomorphization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-intrinsic-monomorphization.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,17 +1,17 @@\n error[E0511]: invalid monomorphization of `cttz` intrinsic: expected basic integer type, found `Foo`\n-  --> $DIR/bad-intrinsic-monomorphization.rs:18:5\n+  --> $DIR/bad-intrinsic-monomorphization.rs:20:5\n    |\n LL |     intrinsics::cttz(v)\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `fadd_fast` intrinsic: expected basic float type, found `Foo`\n-  --> $DIR/bad-intrinsic-monomorphization.rs:23:5\n+  --> $DIR/bad-intrinsic-monomorphization.rs:25:5\n    |\n LL |     intrinsics::fadd_fast(a, b)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_add` intrinsic: expected SIMD input type, found non-SIMD `Foo`\n-  --> $DIR/bad-intrinsic-monomorphization.rs:28:5\n+  --> $DIR/bad-intrinsic-monomorphization.rs:30:5\n    |\n LL |     simd_add(a, b)\n    |     ^^^^^^^^^^^^^^"}, {"sha": "abf954d8fb2c4a34e15b9c2000600b4ef5bbed09", "filename": "src/test/ui/cdylib-deps-must-be-static.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fcdylib-deps-must-be-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fcdylib-deps-must-be-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcdylib-deps-must-be-static.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // error-pattern: crate `cdylib_dep` required to be available in rlib format, but was not found\n // aux-build:cdylib-dep.rs\n // ignore-musl"}, {"sha": "1de6bafd293cf6013aa06c9257193cd7263e26dc", "filename": "src/test/ui/consts/array-literal-index-oob.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n fn main() {\n     &{[1, 2, 3][4]};\n     //~^ ERROR index out of bounds"}, {"sha": "f3ef16659dd3eeba5ef7eb62de8c5cbb54d47ffd", "filename": "src/test/ui/consts/array-literal-index-oob.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,13 +1,13 @@\n error: index out of bounds: the len is 3 but the index is 4\n-  --> $DIR/array-literal-index-oob.rs:2:7\n+  --> $DIR/array-literal-index-oob.rs:4:7\n    |\n LL |     &{[1, 2, 3][4]};\n    |       ^^^^^^^^^^^^\n    |\n    = note: `#[deny(const_err)]` on by default\n \n error: reaching this expression at runtime will panic or abort\n-  --> $DIR/array-literal-index-oob.rs:2:7\n+  --> $DIR/array-literal-index-oob.rs:4:7\n    |\n LL |     &{[1, 2, 3][4]};\n    |     --^^^^^^^^^^^^-"}, {"sha": "83f334dca9e83672094e7450678effa8fef7ad03", "filename": "src/test/ui/consts/assoc_const_generic_impl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n #![warn(const_err)]\n \n trait ZeroSized: Sized {"}, {"sha": "4b13f52e76291ec65a5b0594cbe52dc548e43d60", "filename": "src/test/ui/consts/assoc_const_generic_impl.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fassoc_const_generic_impl.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,19 +1,19 @@\n warning: any use of this value will cause an error\n-  --> $DIR/assoc_const_generic_impl.rs:9:34\n+  --> $DIR/assoc_const_generic_impl.rs:11:34\n    |\n LL |     const I_AM_ZERO_SIZED: ()  = [()][std::mem::size_of::<Self>()];\n    |     -----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |                                  |\n    |                                  index out of bounds: the len is 1 but the index is 4\n    |\n note: lint level defined here\n-  --> $DIR/assoc_const_generic_impl.rs:1:9\n+  --> $DIR/assoc_const_generic_impl.rs:3:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n error: erroneous constant encountered\n-  --> $DIR/assoc_const_generic_impl.rs:11:18\n+  --> $DIR/assoc_const_generic_impl.rs:13:18\n    |\n LL |         let () = Self::I_AM_ZERO_SIZED;\n    |                  ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "b204f705a960e2c468d95951c820250e6e880d78", "filename": "src/test/ui/consts/const-err.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // compile-flags: -Zforce-overflow-checks=on\n \n #![allow(exceeding_bitshifts)]"}, {"sha": "495b221d7d724920a2ca2184099b520ed4ea0185", "filename": "src/test/ui/consts/const-err.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,25 +1,25 @@\n warning: any use of this value will cause an error\n-  --> $DIR/const-err.rs:10:17\n+  --> $DIR/const-err.rs:11:17\n    |\n LL | const FOO: u8 = [5u8][1];\n    | ----------------^^^^^^^^-\n    |                 |\n    |                 index out of bounds: the len is 1 but the index is 1\n    |\n note: lint level defined here\n-  --> $DIR/const-err.rs:4:9\n+  --> $DIR/const-err.rs:5:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-err.rs:14:16\n+  --> $DIR/const-err.rs:15:16\n    |\n LL |     black_box((FOO, FOO));\n    |                ^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const-err.rs:14:21\n+  --> $DIR/const-err.rs:15:21\n    |\n LL |     black_box((FOO, FOO));\n    |                     ^^^ referenced constant has errors"}, {"sha": "351dfd2e0f58c513f40edad4c47bb506c562aa53", "filename": "src/test/ui/consts/const-err2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,6 +1,8 @@\n // needed because negating int::MIN will behave differently between\n // optimized compilation and unoptimized compilation and thus would\n // lead to different lints being emitted\n+\n+// build-fail\n // compile-flags: -O\n \n #![feature(rustc_attrs)]"}, {"sha": "2ca1019d4947b3ef51c575442cba8fcdfad0e599", "filename": "src/test/ui/consts/const-err2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,35 +1,35 @@\n error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:16:13\n+  --> $DIR/const-err2.rs:18:13\n    |\n LL |     let a = -std::i8::MIN;\n    |             ^^^^^^^^^^^^^ attempt to negate with overflow\n    |\n note: lint level defined here\n-  --> $DIR/const-err2.rs:9:9\n+  --> $DIR/const-err2.rs:11:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:18:13\n+  --> $DIR/const-err2.rs:20:13\n    |\n LL |     let b = 200u8 + 200u8 + 200u8;\n    |             ^^^^^^^^^^^^^ attempt to add with overflow\n \n error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:20:13\n+  --> $DIR/const-err2.rs:22:13\n    |\n LL |     let c = 200u8 * 4;\n    |             ^^^^^^^^^ attempt to multiply with overflow\n \n error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:22:13\n+  --> $DIR/const-err2.rs:24:13\n    |\n LL |     let d = 42u8 - (42u8 + 1);\n    |             ^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n \n error: index out of bounds: the len is 1 but the index is 1\n-  --> $DIR/const-err2.rs:24:14\n+  --> $DIR/const-err2.rs:26:14\n    |\n LL |     let _e = [5u8][1];\n    |              ^^^^^^^^"}, {"sha": "ab3823efd301d1e6919b9490b98384ce038fd568", "filename": "src/test/ui/consts/const-err3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,6 +1,8 @@\n // needed because negating int::MIN will behave differently between\n // optimized compilation and unoptimized compilation and thus would\n // lead to different lints being emitted\n+\n+// build-fail\n // compile-flags: -C overflow-checks=on -O\n \n #![feature(rustc_attrs)]"}, {"sha": "c374637bec2671f2b46f31dbb15e1d4d3f9e1f82", "filename": "src/test/ui/consts/const-err3.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,35 +1,35 @@\n error: attempt to negate with overflow\n-  --> $DIR/const-err3.rs:16:13\n+  --> $DIR/const-err3.rs:18:13\n    |\n LL |     let a = -std::i8::MIN;\n    |             ^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/const-err3.rs:9:9\n+  --> $DIR/const-err3.rs:11:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: attempt to add with overflow\n-  --> $DIR/const-err3.rs:18:13\n+  --> $DIR/const-err3.rs:20:13\n    |\n LL |     let b = 200u8 + 200u8 + 200u8;\n    |             ^^^^^^^^^^^^^\n \n error: attempt to multiply with overflow\n-  --> $DIR/const-err3.rs:20:13\n+  --> $DIR/const-err3.rs:22:13\n    |\n LL |     let c = 200u8 * 4;\n    |             ^^^^^^^^^\n \n error: attempt to subtract with overflow\n-  --> $DIR/const-err3.rs:22:13\n+  --> $DIR/const-err3.rs:24:13\n    |\n LL |     let d = 42u8 - (42u8 + 1);\n    |             ^^^^^^^^^^^^^^^^^\n \n error: index out of bounds: the len is 1 but the index is 1\n-  --> $DIR/const-err3.rs:24:14\n+  --> $DIR/const-err3.rs:26:14\n    |\n LL |     let _e = [5u8][1];\n    |              ^^^^^^^^"}, {"sha": "96f67c92a5e93f02f977e7888405a951f2ef4312", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n #![warn(const_err)]\n \n const X: u32 = 5;"}, {"sha": "ec18f8f011d61efe2d1eb1972a421e4439ebc55e", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,19 +1,19 @@\n warning: any use of this value will cause an error\n-  --> $DIR/conditional_array_execution.rs:5:19\n+  --> $DIR/conditional_array_execution.rs:7:19\n    |\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n    | ------------------^^^^^---------------------------\n    |                   |\n    |                   attempt to subtract with overflow\n    |\n note: lint level defined here\n-  --> $DIR/conditional_array_execution.rs:1:9\n+  --> $DIR/conditional_array_execution.rs:3:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n error[E0080]: evaluation of constant expression failed\n-  --> $DIR/conditional_array_execution.rs:9:20\n+  --> $DIR/conditional_array_execution.rs:11:20\n    |\n LL |     println!(\"{}\", FOO);\n    |                    ^^^ referenced constant has errors"}, {"sha": "a5f04d088b61147ba0f7911445881a1396033cea", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,4 +1,6 @@\n+// build-fail\n // compile-flags: -Zunleash-the-miri-inside-of-you\n+\n #![feature(const_fn)]\n #![allow(const_err)]\n "}, {"sha": "19f37fa00795ce9a54066288dc165f881c51f180", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,11 +1,11 @@\n warning: skipping const checks\n-  --> $DIR/const_fn_ptr_fail2.rs:9:5\n+  --> $DIR/const_fn_ptr_fail2.rs:11:5\n    |\n LL |     x(y)\n    |     ^^^^\n \n error[E0080]: evaluation of constant expression failed\n-  --> $DIR/const_fn_ptr_fail2.rs:16:5\n+  --> $DIR/const_fn_ptr_fail2.rs:18:5\n    |\n LL |     assert_eq!(Y, 4);\n    |     ^^^^^^^^^^^-^^^^^\n@@ -15,7 +15,7 @@ LL |     assert_eq!(Y, 4);\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error[E0080]: evaluation of constant expression failed\n-  --> $DIR/const_fn_ptr_fail2.rs:18:5\n+  --> $DIR/const_fn_ptr_fail2.rs:20:5\n    |\n LL |     assert_eq!(Z, 4);\n    |     ^^^^^^^^^^^-^^^^^"}, {"sha": "2a983e426838c683a0b3d3fbabb8ae9ecf8e71e0", "filename": "src/test/ui/consts/const-eval/index-out-of-bounds-never-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n // Regression test for #66975\n #![warn(const_err)]\n #![feature(never_type)]"}, {"sha": "8431ebb95af31a06c70d55fcc7ff181249ce11fb", "filename": "src/test/ui/consts/const-eval/index-out-of-bounds-never-type.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex-out-of-bounds-never-type.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,22 +1,21 @@\n warning: any use of this value will cause an error\n-  --> $DIR/index-out-of-bounds-never-type.rs:8:61\n+  --> $DIR/index-out-of-bounds-never-type.rs:9:61\n    |\n LL |     const VOID: ! = { let x = 0 * std::mem::size_of::<T>(); [][x] };\n    |     --------------------------------------------------------^^^^^---\n    |                                                             |\n    |                                                             index out of bounds: the len is 0 but the index is 0\n    |\n note: lint level defined here\n-  --> $DIR/index-out-of-bounds-never-type.rs:2:9\n+  --> $DIR/index-out-of-bounds-never-type.rs:4:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n error: erroneous constant encountered\n-  --> $DIR/index-out-of-bounds-never-type.rs:13:13\n+  --> $DIR/index-out-of-bounds-never-type.rs:14:13\n    |\n LL |     let _ = PrintName::<T>::VOID;\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n-"}, {"sha": "6d6bb94d4dff7e270efd04e361ebdba3d4db2904", "filename": "src/test/ui/consts/const-eval/index_out_of_bounds_propagated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n fn main() {\n     let array = [std::env::args().len()];\n     array[1]; //~ ERROR index out of bounds"}, {"sha": "9519ccd3c248a4c3dce1e7509fb529433aca00b7", "filename": "src/test/ui/consts/const-eval/index_out_of_bounds_propagated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Findex_out_of_bounds_propagated.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error: index out of bounds: the len is 1 but the index is 1\n-  --> $DIR/index_out_of_bounds_propagated.rs:3:5\n+  --> $DIR/index_out_of_bounds_propagated.rs:5:5\n    |\n LL |     array[1];\n    |     ^^^^^^^^"}, {"sha": "849c81ad449b5ee6af85d7f159ad0728d2c1008a", "filename": "src/test/ui/consts/const-eval/issue-43197.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n #![warn(const_err)]\n \n const fn foo(x: u32) -> u32 {"}, {"sha": "a1b3a05ed41696801c53b3ab483b4b82eace0a85", "filename": "src/test/ui/consts/const-eval/issue-43197.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,33 +1,33 @@\n warning: any use of this value will cause an error\n-  --> $DIR/issue-43197.rs:8:20\n+  --> $DIR/issue-43197.rs:10:20\n    |\n LL |     const X: u32 = 0-1;\n    |     ---------------^^^-\n    |                    |\n    |                    attempt to subtract with overflow\n    |\n note: lint level defined here\n-  --> $DIR/issue-43197.rs:1:9\n+  --> $DIR/issue-43197.rs:3:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n warning: any use of this value will cause an error\n-  --> $DIR/issue-43197.rs:10:24\n+  --> $DIR/issue-43197.rs:12:24\n    |\n LL |     const Y: u32 = foo(0-1);\n    |     -------------------^^^--\n    |                        |\n    |                        attempt to subtract with overflow\n \n error[E0080]: evaluation of constant expression failed\n-  --> $DIR/issue-43197.rs:12:23\n+  --> $DIR/issue-43197.rs:14:23\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                       ^ referenced constant has errors\n \n error[E0080]: evaluation of constant expression failed\n-  --> $DIR/issue-43197.rs:12:26\n+  --> $DIR/issue-43197.rs:14:26\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                          ^ referenced constant has errors"}, {"sha": "7da9256bb398fae4415699a4fc6a734727edf450", "filename": "src/test/ui/consts/const-eval/issue-44578.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n #![allow(const_err)]\n \n trait Foo {"}, {"sha": "f4323713e682bce458600fc85b8dc4b8688b7331", "filename": "src/test/ui/consts/const-eval/issue-44578.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: evaluation of constant expression failed\n-  --> $DIR/issue-44578.rs:25:20\n+  --> $DIR/issue-44578.rs:27:20\n    |\n LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors"}, {"sha": "8f5c8f097a2ca9011cd3dbcd23e90b88f7931b60", "filename": "src/test/ui/consts/const-eval/issue-50814-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n trait C {\n     const BOO: usize;\n }"}, {"sha": "e04bf03a20cce4ecafd209b215a17ccd27bada3b", "filename": "src/test/ui/consts/const-eval/issue-50814-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error: any use of this value will cause an error\n-  --> $DIR/issue-50814-2.rs:12:24\n+  --> $DIR/issue-50814-2.rs:14:24\n    |\n LL |     const BAR: usize = [5, 6, 7][T::BOO];\n    |     -------------------^^^^^^^^^^^^^^^^^-\n@@ -9,7 +9,7 @@ LL |     const BAR: usize = [5, 6, 7][T::BOO];\n    = note: `#[deny(const_err)]` on by default\n \n error[E0080]: evaluation of constant expression failed\n-  --> $DIR/issue-50814-2.rs:16:5\n+  --> $DIR/issue-50814-2.rs:18:5\n    |\n LL |     &<A<T> as Foo<T>>::BAR\n    |     ^---------------------"}, {"sha": "e589126a9429c065a67906fe135e4e4a391d98cd", "filename": "src/test/ui/consts/const-eval/issue-50814.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n trait Unsigned {\n     const MAX: u8;\n }"}, {"sha": "f8b017e4b53a172c0c53d5b6442aeffc67b4076c", "filename": "src/test/ui/consts/const-eval/issue-50814.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error: any use of this value will cause an error\n-  --> $DIR/issue-50814.rs:13:21\n+  --> $DIR/issue-50814.rs:15:21\n    |\n LL |     const MAX: u8 = A::MAX + B::MAX;\n    |     ----------------^^^^^^^^^^^^^^^-\n@@ -9,7 +9,7 @@ LL |     const MAX: u8 = A::MAX + B::MAX;\n    = note: `#[deny(const_err)]` on by default\n \n error[E0080]: evaluation of constant expression failed\n-  --> $DIR/issue-50814.rs:17:5\n+  --> $DIR/issue-50814.rs:19:5\n    |\n LL |     &Sum::<U8,U8>::MAX\n    |     ^-----------------"}, {"sha": "21ee64fa6d937a83b74abe74913112ab1203c23a", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n // Regression test for #66975\n #![warn(const_err)]\n #![feature(const_panic)]"}, {"sha": "df3c80de2ec7e77170f32a2539e3fd6312d8b68e", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,20 +1,20 @@\n warning: any use of this value will cause an error\n-  --> $DIR/panic-assoc-never-type.rs:9:21\n+  --> $DIR/panic-assoc-never-type.rs:10:21\n    |\n LL |     const VOID: ! = panic!();\n    |     ----------------^^^^^^^^-\n    |                     |\n-   |                     the evaluated program panicked at 'explicit panic', $DIR/panic-assoc-never-type.rs:9:21\n+   |                     the evaluated program panicked at 'explicit panic', $DIR/panic-assoc-never-type.rs:10:21\n    |\n note: lint level defined here\n-  --> $DIR/panic-assoc-never-type.rs:2:9\n+  --> $DIR/panic-assoc-never-type.rs:4:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n    = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error[E0080]: erroneous constant used\n-  --> $DIR/panic-assoc-never-type.rs:14:13\n+  --> $DIR/panic-assoc-never-type.rs:15:13\n    |\n LL |     let _ = PrintName::VOID;\n    |             ^^^^^^^^^^^^^^^ referenced constant has errors"}, {"sha": "3b28b2fdd247efd625613f53974b73b76680321e", "filename": "src/test/ui/consts/const-eval/panic-never-type.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n // Regression test for #66975\n #![warn(const_err)]\n #![feature(const_panic)]"}, {"sha": "9670d7eb6526a0bddd0645ad909f7d08dc0d31a7", "filename": "src/test/ui/consts/const-eval/panic-never-type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,20 +1,20 @@\n warning: any use of this value will cause an error\n-  --> $DIR/panic-never-type.rs:6:17\n+  --> $DIR/panic-never-type.rs:7:17\n    |\n LL | const VOID: ! = panic!();\n    | ----------------^^^^^^^^-\n    |                 |\n-   |                 the evaluated program panicked at 'explicit panic', $DIR/panic-never-type.rs:6:17\n+   |                 the evaluated program panicked at 'explicit panic', $DIR/panic-never-type.rs:7:17\n    |\n note: lint level defined here\n-  --> $DIR/panic-never-type.rs:2:9\n+  --> $DIR/panic-never-type.rs:4:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n    = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error[E0080]: erroneous constant used\n-  --> $DIR/panic-never-type.rs:10:13\n+  --> $DIR/panic-never-type.rs:11:13\n    |\n LL |     let _ = VOID;\n    |             ^^^^ referenced constant has errors"}, {"sha": "2eed8ca7d322cb68dd17e9ea130375aca553ca5c", "filename": "src/test/ui/consts/const-eval/promoted_errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // compile-flags: -O\n \n #![deny(const_err)]"}, {"sha": "8f17ef05f2356760247a66c81e40ac81cca009ac", "filename": "src/test/ui/consts/const-eval/promoted_errors.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,47 +1,47 @@\n error: this expression will panic at runtime\n-  --> $DIR/promoted_errors.rs:7:14\n+  --> $DIR/promoted_errors.rs:8:14\n    |\n LL |     let _x = 0u32 - 1;\n    |              ^^^^^^^^ attempt to subtract with overflow\n    |\n note: lint level defined here\n-  --> $DIR/promoted_errors.rs:3:9\n+  --> $DIR/promoted_errors.rs:4:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:9:20\n+  --> $DIR/promoted_errors.rs:10:20\n    |\n LL |     println!(\"{}\", 1/(1-1));\n    |                    ^^^^^^^\n \n error: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:9:20\n+  --> $DIR/promoted_errors.rs:10:20\n    |\n LL |     println!(\"{}\", 1/(1-1));\n    |                    ^^^^^^^ dividing by zero\n \n error: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:12:14\n+  --> $DIR/promoted_errors.rs:13:14\n    |\n LL |     let _x = 1/(1-1);\n    |              ^^^^^^^\n \n error: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:14:20\n+  --> $DIR/promoted_errors.rs:15:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));\n    |                    ^^^^^^^^^^^^^^^^\n \n error: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:14:20\n+  --> $DIR/promoted_errors.rs:15:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));\n    |                    ^^^^^^^^^^^^^^^^ dividing by zero\n \n error: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:17:14\n+  --> $DIR/promoted_errors.rs:18:14\n    |\n LL |     let _x = 1/(false as u32);\n    |              ^^^^^^^^^^^^^^^^"}, {"sha": "ae680b4f1072ee4b6da3165d7adf026ba3515ac6", "filename": "src/test/ui/consts/const-eval/promoted_errors2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // compile-flags: -C overflow-checks=on -O\n \n #![deny(const_err)]"}, {"sha": "60a3cba6e1ff5e65b6f29228816438b01acece77", "filename": "src/test/ui/consts/const-eval/promoted_errors2.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,53 +1,53 @@\n error: attempt to subtract with overflow\n-  --> $DIR/promoted_errors2.rs:6:20\n+  --> $DIR/promoted_errors2.rs:7:20\n    |\n LL |     println!(\"{}\", 0u32 - 1);\n    |                    ^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/promoted_errors2.rs:3:9\n+  --> $DIR/promoted_errors2.rs:4:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: attempt to subtract with overflow\n-  --> $DIR/promoted_errors2.rs:8:14\n+  --> $DIR/promoted_errors2.rs:9:14\n    |\n LL |     let _x = 0u32 - 1;\n    |              ^^^^^^^^\n \n error: attempt to divide by zero\n-  --> $DIR/promoted_errors2.rs:10:20\n+  --> $DIR/promoted_errors2.rs:11:20\n    |\n LL |     println!(\"{}\", 1/(1-1));\n    |                    ^^^^^^^\n \n error: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors2.rs:10:20\n+  --> $DIR/promoted_errors2.rs:11:20\n    |\n LL |     println!(\"{}\", 1/(1-1));\n    |                    ^^^^^^^ dividing by zero\n \n error: attempt to divide by zero\n-  --> $DIR/promoted_errors2.rs:13:14\n+  --> $DIR/promoted_errors2.rs:14:14\n    |\n LL |     let _x = 1/(1-1);\n    |              ^^^^^^^\n \n error: attempt to divide by zero\n-  --> $DIR/promoted_errors2.rs:15:20\n+  --> $DIR/promoted_errors2.rs:16:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));\n    |                    ^^^^^^^^^^^^^^^^\n \n error: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors2.rs:15:20\n+  --> $DIR/promoted_errors2.rs:16:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));\n    |                    ^^^^^^^^^^^^^^^^ dividing by zero\n \n error: attempt to divide by zero\n-  --> $DIR/promoted_errors2.rs:18:14\n+  --> $DIR/promoted_errors2.rs:19:14\n    |\n LL |     let _x = 1/(false as u32);\n    |              ^^^^^^^^^^^^^^^^"}, {"sha": "8682d2ee901594a5ad717a9f576d52f7f2b37d02", "filename": "src/test/ui/consts/const-prop-ice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n fn main() {\n     [0; 3][3u64 as usize]; //~ ERROR the len is 3 but the index is 3\n }"}, {"sha": "65502a4ff71ea1876808ea135758883eb051e934", "filename": "src/test/ui/consts/const-prop-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error: index out of bounds: the len is 3 but the index is 3\n-  --> $DIR/const-prop-ice.rs:2:5\n+  --> $DIR/const-prop-ice.rs:4:5\n    |\n LL |     [0; 3][3u64 as usize];\n    |     ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "6a73483026f716227e860464b41bcf6ef9208c97", "filename": "src/test/ui/consts/const-prop-ice2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n fn main() {\n     enum Enum { One=1 }\n     let xs=[0;1 as usize];"}, {"sha": "cbb8fde80f95991ef65d06e91d5192ce608bc7ed", "filename": "src/test/ui/consts/const-prop-ice2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice2.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error: index out of bounds: the len is 1 but the index is 1\n-  --> $DIR/const-prop-ice2.rs:4:20\n+  --> $DIR/const-prop-ice2.rs:6:20\n    |\n LL |     println!(\"{}\", xs[Enum::One as usize]);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "cfbcc959d3b04808f4be8ca74dafaf7d54985e0c", "filename": "src/test/ui/consts/miri_unleashed/assoc_const.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,4 +1,6 @@\n+// build-fail\n // compile-flags: -Zunleash-the-miri-inside-of-you\n+\n #![allow(const_err)]\n \n // a test demonstrating why we do need to run static const qualification on associated constants"}, {"sha": "1ccf2b196fd4db4d18b4d36a024a76fc51e2d73c", "filename": "src/test/ui/consts/miri_unleashed/assoc_const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,11 +1,11 @@\n warning: skipping const checks\n-  --> $DIR/assoc_const.rs:12:20\n+  --> $DIR/assoc_const.rs:14:20\n    |\n LL |     const F: u32 = (U::X, 42).1;\n    |                    ^^^^^^^^^^\n \n error[E0080]: erroneous constant used\n-  --> $DIR/assoc_const.rs:29:13\n+  --> $DIR/assoc_const.rs:31:13\n    |\n LL |     let y = <String as Bar<Vec<u32>, String>>::F;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors"}, {"sha": "30dd2a51585c5d99f2e1041d2d8e5995e4845209", "filename": "src/test/ui/consts/miri_unleashed/assoc_const_2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n #![allow(const_err)]\n \n // a test demonstrating that const qualification cannot prevent monomorphization time errors"}, {"sha": "e15717979c5cb6419a03ae1f7563eb34750070b5", "filename": "src/test/ui/consts/miri_unleashed/assoc_const_2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const_2.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: erroneous constant used\n-  --> $DIR/assoc_const_2.rs:27:13\n+  --> $DIR/assoc_const_2.rs:29:13\n    |\n LL |     let y = <String as Bar<String>>::F;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors"}, {"sha": "32a713ebaa44ee8946eee755ceea976b0eda9b3d", "filename": "src/test/ui/consts/miri_unleashed/non_const_fn.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,4 +1,6 @@\n+// build-fail\n // compile-flags: -Zunleash-the-miri-inside-of-you\n+\n #![warn(const_err)]\n \n // A test demonstrating that we prevent calling non-const fn during CTFE."}, {"sha": "75f532a81bdc3f6ea0d0721fa38cc168a96804f7", "filename": "src/test/ui/consts/miri_unleashed/non_const_fn.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,25 +1,25 @@\n warning: skipping const checks\n-  --> $DIR/non_const_fn.rs:8:15\n+  --> $DIR/non_const_fn.rs:10:15\n    |\n LL | const C: () = foo();\n    |               ^^^^^\n \n warning: any use of this value will cause an error\n-  --> $DIR/non_const_fn.rs:8:15\n+  --> $DIR/non_const_fn.rs:10:15\n    |\n LL | const C: () = foo();\n    | --------------^^^^^-\n    |               |\n    |               calling non-const function `foo`\n    |\n note: lint level defined here\n-  --> $DIR/non_const_fn.rs:2:9\n+  --> $DIR/non_const_fn.rs:4:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n error[E0080]: evaluation of constant expression failed\n-  --> $DIR/non_const_fn.rs:12:22\n+  --> $DIR/non_const_fn.rs:14:22\n    |\n LL |     println!(\"{:?}\", C);\n    |                      ^ referenced constant has errors"}, {"sha": "945017b49373f47c73e2a2c95bd47a804a039701", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,4 +1,4 @@\n-// compile-fail\n+// build-fail\n \n pub const unsafe fn fake_type<T>() -> T {\n     hint_unreachable()"}, {"sha": "28e329b56caf71c0b48c276fb42a7a9d94b98c89", "filename": "src/test/ui/duplicate/dupe-symbols-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-1.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n //\n #![crate_type=\"rlib\"]\n #![allow(warnings)]"}, {"sha": "cca8b4d25dacc3111984f6594e5104de5d60a90c", "filename": "src/test/ui/duplicate/dupe-symbols-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-1.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error: symbol `fail` is already defined\n-  --> $DIR/dupe-symbols-1.rs:10:1\n+  --> $DIR/dupe-symbols-1.rs:12:1\n    |\n LL | / pub fn b() {\n LL | |"}, {"sha": "d9edd77a199134f47aaac2c66230ebed41a53641", "filename": "src/test/ui/duplicate/dupe-symbols-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-2.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n //\n #![crate_type=\"rlib\"]\n #![allow(warnings)]"}, {"sha": "017aade31291d9ab1aef841a783d2236cf9948de", "filename": "src/test/ui/duplicate/dupe-symbols-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-2.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error: symbol `fail` is already defined\n-  --> $DIR/dupe-symbols-2.rs:13:5\n+  --> $DIR/dupe-symbols-2.rs:15:5\n    |\n LL | /     pub extern fn fail() {\n LL | |"}, {"sha": "1af2fe98e50e1983a8d8f63ccd8b16cdc8aa4c3c", "filename": "src/test/ui/duplicate/dupe-symbols-3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-3.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n //\n #![crate_type=\"rlib\"]\n #![allow(warnings)]"}, {"sha": "2e2ac3a98b88024d63845de7440a1cdc63e429be", "filename": "src/test/ui/duplicate/dupe-symbols-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-3.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error: symbol `fail` is already defined\n-  --> $DIR/dupe-symbols-3.rs:10:1\n+  --> $DIR/dupe-symbols-3.rs:12:1\n    |\n LL | / pub fn fail() {\n LL | |"}, {"sha": "de6610c3e79023bbe0e1eebf802e6f9ec95602dc", "filename": "src/test/ui/duplicate/dupe-symbols-4.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-4.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n //\n // error-pattern: symbol `fail` is already defined\n #![crate_type=\"rlib\"]"}, {"sha": "10b93891b66a316f126ad75fc961d3d05a2c3e7c", "filename": "src/test/ui/duplicate/dupe-symbols-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-4.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error: symbol `fail` is already defined\n-  --> $DIR/dupe-symbols-4.rs:21:5\n+  --> $DIR/dupe-symbols-4.rs:23:5\n    |\n LL |     fn fail(self) {}\n    |     ^^^^^^^^^^^^^^^^"}, {"sha": "ea801cef64f151ee632de4af90afc23ae1dd8266", "filename": "src/test/ui/duplicate/dupe-symbols-5.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-5.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n //\n #![crate_type=\"rlib\"]\n #![allow(warnings)]"}, {"sha": "ebeb19f94f6c0b9e80e81b9fa770f4ad3acd6ed5", "filename": "src/test/ui/duplicate/dupe-symbols-5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-5.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error: symbol `fail` is already defined\n-  --> $DIR/dupe-symbols-5.rs:9:1\n+  --> $DIR/dupe-symbols-5.rs:11:1\n    |\n LL | / pub fn b() {\n LL | |"}, {"sha": "018f4bb7f07bf5bd109abde96e368b883f18485f", "filename": "src/test/ui/duplicate/dupe-symbols-6.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-6.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n #![crate_type=\"rlib\"]\n #![allow(warnings)]\n "}, {"sha": "8d5b7fb35bf0bfd4ce8fea43b14aa25f9d4a61eb", "filename": "src/test/ui/duplicate/dupe-symbols-6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-6.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error: symbol `fail` is already defined\n-  --> $DIR/dupe-symbols-6.rs:8:1\n+  --> $DIR/dupe-symbols-6.rs:10:1\n    |\n LL | static HELLO_TWICE: u16 = 0;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "89a32c61620fd8f889dfaeb06f8879768196a17d", "filename": "src/test/ui/duplicate/dupe-symbols-7.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-7.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n //\n // error-pattern: entry symbol `main` defined multiple times\n "}, {"sha": "608ae27110aa0e97dd1a8873eaef6fd1d96ce562", "filename": "src/test/ui/duplicate/dupe-symbols-7.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-7.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error: entry symbol `main` defined multiple times\n-  --> $DIR/dupe-symbols-7.rs:10:1\n+  --> $DIR/dupe-symbols-7.rs:12:1\n    |\n LL | fn main(){}\n    | ^^^^^^^^^^^"}, {"sha": "a52f81a6c5df4cd5cf3355f020eafa60f6d8b3c7", "filename": "src/test/ui/error-codes/E0511.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Ferror-codes%2FE0511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Ferror-codes%2FE0511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0511.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n #![feature(platform_intrinsics)]\n \n extern \"platform-intrinsic\" {"}, {"sha": "d797b10d5a65475a5f77fd6eb5791b6e3014a4f2", "filename": "src/test/ui/error-codes/E0511.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Ferror-codes%2FE0511.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Ferror-codes%2FE0511.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0511.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error[E0511]: invalid monomorphization of `simd_add` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/E0511.rs:8:14\n+  --> $DIR/E0511.rs:10:14\n    |\n LL |     unsafe { simd_add(0, 1); }\n    |              ^^^^^^^^^^^^^^"}, {"sha": "d4c933012833780d7d343fbaab977fe5142d5794", "filename": "src/test/ui/huge-array-simple-64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fhuge-array-simple-64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fhuge-array-simple-64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-array-simple-64.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // ignore-32bit\n \n // FIXME https://github.com/rust-lang/rust/issues/59774"}, {"sha": "791baa846874764050997b0412afdf351ef36760", "filename": "src/test/ui/huge-array-simple-64.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fhuge-array-simple-64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fhuge-array-simple-64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-array-simple-64.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error: the type `[u8; 2305843011361177600]` is too big for the current architecture\n-  --> $DIR/huge-array-simple-64.rs:9:9\n+  --> $DIR/huge-array-simple-64.rs:10:9\n    |\n LL |     let _fat: [u8; (1<<61)+(1<<31)] =\n    |         ^^^^"}, {"sha": "846380586a009090f3553493f04a2774fa429a0c", "filename": "src/test/ui/huge-array.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fhuge-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fhuge-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-array.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,4 +1,6 @@\n // FIXME https://github.com/rust-lang/rust/issues/59774\n+\n+// build-fail\n // normalize-stderr-test \"thread.*panicked.*Metadata module not compiled.*\\n\" -> \"\"\n // normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n "}, {"sha": "23d9e87ae0054e5f677ce9ad47b6a589d3cb6252", "filename": "src/test/ui/huge-array.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fhuge-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fhuge-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-array.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error: the type `[[u8; 1518599999]; 1518600000]` is too big for the current architecture\n-  --> $DIR/huge-array.rs:6:9\n+  --> $DIR/huge-array.rs:8:9\n    |\n LL |     let s: [T; 1518600000] = [t; 1518600000];\n    |         ^"}, {"sha": "8a713c3a26eda00ff3a9c4f8bfa6219fd42db89c", "filename": "src/test/ui/huge-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fhuge-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fhuge-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-enum.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // normalize-stderr-test \"std::option::Option<\\[u32; \\d+\\]>\" -> \"TYPE\"\n // normalize-stderr-test \"\\[u32; \\d+\\]\" -> \"TYPE\"\n "}, {"sha": "8398c511b9f484e5e148bb2ec3018f05ed86d328", "filename": "src/test/ui/huge-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fhuge-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fhuge-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-enum.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error: the type `TYPE` is too big for the current architecture\n-  --> $DIR/huge-enum.rs:15:9\n+  --> $DIR/huge-enum.rs:16:9\n    |\n LL |     let big: BIG = None;\n    |         ^^^"}, {"sha": "71169a11047983c923dcb591bc96fbd9dd6340cf", "filename": "src/test/ui/huge-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fhuge-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fhuge-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-struct.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // normalize-stderr-test \"S32\" -> \"SXX\"\n // normalize-stderr-test \"S1M\" -> \"SXX\"\n // error-pattern: too big for the current"}, {"sha": "72e32a8593b18c2d4574f2e0fed0e9a11ab135d5", "filename": "src/test/ui/huge-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fhuge-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fhuge-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhuge-struct.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error: the type `SXX<SXX<SXX<u32>>>` is too big for the current architecture\n-  --> $DIR/huge-struct.rs:49:9\n+  --> $DIR/huge-struct.rs:50:9\n    |\n LL |     let fat: Option<SXX<SXX<SXX<u32>>>> = None;\n    |         ^^^"}, {"sha": "6f53680f7c81dc4e1261c9e1c853b87d9f7f7b89", "filename": "src/test/ui/infinite/infinite-instantiation.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -4,6 +4,8 @@\n // so for now just live with it.\n // This test case was originally for issue #2258.\n \n+// build-fail\n+\n trait ToOpt: Sized {\n     fn to_option(&self) -> Option<Self>;\n }"}, {"sha": "ae81c680a7b65f3e2853690e9e67e9d0c601692f", "filename": "src/test/ui/infinite/infinite-instantiation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error: reached the recursion limit while instantiating `function::<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<usize>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n-  --> $DIR/infinite-instantiation.rs:23:1\n+  --> $DIR/infinite-instantiation.rs:25:1\n    |\n LL | / fn function<T:ToOpt + Clone>(counter: usize, t: T) {\n LL | |"}, {"sha": "04fd5760cf8cefc6ce16ee9bf705b1f90979b29b", "filename": "src/test/ui/inline-asm-bad-constraint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Finline-asm-bad-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Finline-asm-bad-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-asm-bad-constraint.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,6 @@\n // Test that the compiler will catch invalid inline assembly constraints.\n \n+// build-fail\n // ignore-emscripten\n \n #![feature(asm)]"}, {"sha": "f38bfb2af1d91f7d0fe597c93bfc62ac08392faf", "filename": "src/test/ui/inline-asm-bad-constraint.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Finline-asm-bad-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Finline-asm-bad-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-asm-bad-constraint.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,17 +1,17 @@\n error[E0668]: malformed inline assembly\n-  --> $DIR/inline-asm-bad-constraint.rs:21:9\n+  --> $DIR/inline-asm-bad-constraint.rs:22:9\n    |\n LL |         asm!(\"\" :\"={rax\"(rax))\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0668]: malformed inline assembly\n-  --> $DIR/inline-asm-bad-constraint.rs:29:9\n+  --> $DIR/inline-asm-bad-constraint.rs:30:9\n    |\n LL |         asm!(\"callq $0\" : : \"0\"(foo))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0668]: malformed inline assembly\n-  --> $DIR/inline-asm-bad-constraint.rs:36:9\n+  --> $DIR/inline-asm-bad-constraint.rs:37:9\n    |\n LL |         asm!(\"addb $1, $0\" : \"={rax}\"((0i32, rax)));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "f4e9922164f03df3e37220b5b65944806095797a", "filename": "src/test/ui/inline-asm-bad-operand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Finline-asm-bad-operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Finline-asm-bad-operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-asm-bad-operand.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,6 +1,7 @@\n // Test that the compiler will catch passing invalid values to inline assembly\n // operands.\n \n+// build-fail\n // ignore-emscripten\n \n #![feature(asm)]"}, {"sha": "fe6c6c9914199ab9c1e7ff4fe55bebbe07ebdbbe", "filename": "src/test/ui/inline-asm-bad-operand.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Finline-asm-bad-operand.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Finline-asm-bad-operand.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-asm-bad-operand.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,41 +1,41 @@\n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:21:24\n+  --> $DIR/inline-asm-bad-operand.rs:22:24\n    |\n LL |         asm!(\"\" :: \"r\"(\"\"));\n    |                        ^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:26:32\n+  --> $DIR/inline-asm-bad-operand.rs:27:32\n    |\n LL |         asm!(\"ret\" : : \"{rdi}\"(target));\n    |                                ^^^^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:33:29\n+  --> $DIR/inline-asm-bad-operand.rs:34:29\n    |\n LL |     unsafe { asm!(\"\" :: \"i\"(hello)) };\n    |                             ^^^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:41:38\n+  --> $DIR/inline-asm-bad-operand.rs:42:38\n    |\n LL |         asm!(\"movups $1, %xmm0\"::\"m\"(arr));\n    |                                      ^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:48:32\n+  --> $DIR/inline-asm-bad-operand.rs:49:32\n    |\n LL |         asm!(\"mov sp, $0\"::\"r\"(addr));\n    |                                ^^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:55:32\n+  --> $DIR/inline-asm-bad-operand.rs:56:32\n    |\n LL |         asm!(\"mov sp, $0\"::\"r\"(addr),\n    |                                ^^^^\n \n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/inline-asm-bad-operand.rs:56:32\n+  --> $DIR/inline-asm-bad-operand.rs:57:32\n    |\n LL | ...                   \"r\"(\"hello e0669\"));\n    |                           ^^^^^^^^^^^^^"}, {"sha": "e11cdc82f32c7cdd203dbce95e62b8038c9ec37a", "filename": "src/test/ui/issues/issue-11154.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-11154.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-11154.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11154.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // compile-flags: -C lto -C prefer-dynamic\n \n // error-pattern: cannot prefer dynamic linking"}, {"sha": "3ecbd34eaaab4fc423e57b45cd11486465ba1b16", "filename": "src/test/ui/issues/issue-15919-64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-15919-64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-15919-64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15919-64.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // ignore-32bit\n \n // FIXME https://github.com/rust-lang/rust/issues/59774"}, {"sha": "f624c96ce84da4fe3d67c70f14b0b1fbb492408c", "filename": "src/test/ui/issues/issue-15919-64.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-15919-64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-15919-64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15919-64.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error: the type `[usize; 18446744073709551615]` is too big for the current architecture\n-  --> $DIR/issue-15919-64.rs:8:9\n+  --> $DIR/issue-15919-64.rs:9:9\n    |\n LL |     let x = [0usize; 0xffff_ffff_ffff_ffff];\n    |         ^"}, {"sha": "ca13b9bd6ae7b54888448e893c807d605c843a1f", "filename": "src/test/ui/issues/issue-17913.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-17913.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-17913.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17913.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // normalize-stderr-test \"\\[&usize; \\d+\\]\" -> \"[&usize; N]\"\n // error-pattern: too big for the current architecture\n "}, {"sha": "72c16fddb4b12a6e052ab51922b62fa3f4da526b", "filename": "src/test/ui/issues/issue-22638.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-22638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-22638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22638.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // normalize-stderr-test: \"<\\[closure@.+`\" -> \"$$CLOSURE`\"\n \n #![allow(unused)]"}, {"sha": "83dd93b853dadea913979f51fb332b65f1a149f9", "filename": "src/test/ui/issues/issue-22638.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error: reached the type-length limit while instantiating `D::matches::$CLOSURE`\n-  --> $DIR/issue-22638.rs:52:5\n+  --> $DIR/issue-22638.rs:53:5\n    |\n LL | /     pub fn matches<F: Fn()>(&self, f: &F) {\n LL | |"}, {"sha": "521db37170ab5f01f75a876da716741535c62d8a", "filename": "src/test/ui/issues/issue-23458.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-23458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-23458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23458.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,6 @@\n #![feature(asm)]\n \n+// build-fail\n // only-x86_64\n \n fn main() {"}, {"sha": "76c3e6da82ea2e15492951d0c2005eecac5a17d1", "filename": "src/test/ui/issues/issue-23458.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-23458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-23458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23458.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error: invalid operand in inline asm: 'int $3'\n-  --> $DIR/issue-23458.rs:7:9\n+  --> $DIR/issue-23458.rs:8:9\n    |\n LL |         asm!(\"int $3\");\n    |         ^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ error: <inline asm>:1:2: error: too few operands for instruction\n         int \n         ^\n \n-  --> $DIR/issue-23458.rs:7:9\n+  --> $DIR/issue-23458.rs:8:9\n    |\n LL |         asm!(\"int $3\");\n    |         ^^^^^^^^^^^^^^^"}, {"sha": "6ee8c0fcfdaded5c76d34d4944a7ae0e9db39066", "filename": "src/test/ui/issues/issue-26548.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-26548.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-26548.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26548.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -2,6 +2,8 @@\n //~| NOTE ...which requires computing layout of\n //~| NOTE ...which again requires computing layout of\n \n+// build-fail\n+\n trait Mirror { type It: ?Sized; }\n impl<T: ?Sized> Mirror for T { type It = Self; }\n struct S(Option<<S as Mirror>::It>);"}, {"sha": "3c213674e4b70c56dcf1d043bfec80b4c2de7ffb", "filename": "src/test/ui/issues/issue-26548.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-26548.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-26548.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26548.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -3,7 +3,7 @@ error[E0391]: cycle detected when computing layout of `std::option::Option<S>`\n    = note: ...which requires computing layout of `S`...\n    = note: ...which again requires computing layout of `std::option::Option<S>`, completing the cycle\n note: cycle used when processing `main`\n-  --> $DIR/issue-26548.rs:9:1\n+  --> $DIR/issue-26548.rs:11:1\n    |\n LL | fn main() {\n    | ^^^^^^^^^"}, {"sha": "fec4b17153609a847be596236c73388b5ed108bf", "filename": "src/test/ui/issues/issue-37311-type-length-limit/issue-37311.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n trait Mirror {\n     type Image;\n }"}, {"sha": "7a4b59b56339317b48015db630a6bec18c9bf3b8", "filename": "src/test/ui/issues/issue-37311-type-length-limit/issue-37311.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error: reached the type-length limit while instantiating `<(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(...))))))))))))))) as Foo>::recurse`\n-  --> $DIR/issue-37311.rs:13:5\n+  --> $DIR/issue-37311.rs:15:5\n    |\n LL | /     fn recurse(&self) {\n LL | |         (self, self).recurse();"}, {"sha": "c4d427f3ad3af33fc994c7e5ddf9616ddb1676a0", "filename": "src/test/ui/issues/issue-37433.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-37433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-37433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37433.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // ignore-emscripten no asm! support\n \n #![feature(asm)]"}, {"sha": "d9e1c98e9ee412e080f75706f10972af38c9ad18", "filename": "src/test/ui/issues/issue-37433.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-37433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-37433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37433.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/issue-37433.rs:7:24\n+  --> $DIR/issue-37433.rs:8:24\n    |\n LL |         asm!(\"\" :: \"r\"(\"\"));\n    |                        ^^"}, {"sha": "d911ac5efbe032c77553d2cf6df18e233b50f3ab", "filename": "src/test/ui/issues/issue-53787-inline-assembler-macro.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-53787-inline-assembler-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-53787-inline-assembler-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53787-inline-assembler-macro.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,6 @@\n // Regression test for Issue #53787: Fix ICE when creating a label in inline assembler with macros.\n \n+// build-fail\n // ignore-emscripten\n \n #![feature(asm)]"}, {"sha": "b066474f924ab746a0ed70e8539d50d94d062717", "filename": "src/test/ui/issues/issue-53787-inline-assembler-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-53787-inline-assembler-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-53787-inline-assembler-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53787-inline-assembler-macro.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error[E0669]: invalid value for constraint in inline assembly\n-  --> $DIR/issue-53787-inline-assembler-macro.rs:23:16\n+  --> $DIR/issue-53787-inline-assembler-macro.rs:24:16\n    |\n LL |     fake_jump!(\"FirstFunc\");\n    |                ^^^^^^^^^^^"}, {"sha": "fd9a9e024aa1bb14e41b27ca53c921cfddd076bf", "filename": "src/test/ui/issues/issue-54348.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-54348.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-54348.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54348.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n fn main() {\n     [1][0u64 as usize];\n     [1][1.5 as usize]; //~ ERROR index out of bounds"}, {"sha": "7619cd7437e33a562084622e11a22145ec7112df", "filename": "src/test/ui/issues/issue-54348.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-54348.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-54348.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54348.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,13 +1,13 @@\n error: index out of bounds: the len is 1 but the index is 1\n-  --> $DIR/issue-54348.rs:3:5\n+  --> $DIR/issue-54348.rs:5:5\n    |\n LL |     [1][1.5 as usize];\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[deny(const_err)]` on by default\n \n error: index out of bounds: the len is 1 but the index is 1\n-  --> $DIR/issue-54348.rs:4:5\n+  --> $DIR/issue-54348.rs:6:5\n    |\n LL |     [1][1u64 as usize];\n    |     ^^^^^^^^^^^^^^^^^^"}, {"sha": "c18a0d4d6cbbe39dde4d62c091202c3972bb82dd", "filename": "src/test/ui/issues/issue-8460-const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // compile-flags: -O\n \n #![deny(const_err)]"}, {"sha": "170747f840268ee9ff4965432033c11f8275b5a0", "filename": "src/test/ui/issues/issue-8460-const.stderr", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,185 +1,185 @@\n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:9:36\n+  --> $DIR/issue-8460-const.rs:10:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/issue-8460-const.rs:3:9\n+  --> $DIR/issue-8460-const.rs:4:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:9:36\n+  --> $DIR/issue-8460-const.rs:10:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^ attempt to divide with overflow\n \n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:12:36\n+  --> $DIR/issue-8460-const.rs:13:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:12:36\n+  --> $DIR/issue-8460-const.rs:13:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^ attempt to divide with overflow\n \n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:15:36\n+  --> $DIR/issue-8460-const.rs:16:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:15:36\n+  --> $DIR/issue-8460-const.rs:16:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n \n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:18:36\n+  --> $DIR/issue-8460-const.rs:19:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:18:36\n+  --> $DIR/issue-8460-const.rs:19:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n \n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:21:36\n+  --> $DIR/issue-8460-const.rs:22:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:21:36\n+  --> $DIR/issue-8460-const.rs:22:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:24:36\n+  --> $DIR/issue-8460-const.rs:25:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n    |                                    ^^^^^^^^^^\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:26:36\n+  --> $DIR/issue-8460-const.rs:27:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n    |                                    ^^^^^^^\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:28:36\n+  --> $DIR/issue-8460-const.rs:29:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:30:36\n+  --> $DIR/issue-8460-const.rs:31:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:32:36\n+  --> $DIR/issue-8460-const.rs:33:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:34:36\n+  --> $DIR/issue-8460-const.rs:35:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:34:36\n+  --> $DIR/issue-8460-const.rs:35:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:37:36\n+  --> $DIR/issue-8460-const.rs:38:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:37:36\n+  --> $DIR/issue-8460-const.rs:38:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:40:36\n+  --> $DIR/issue-8460-const.rs:41:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:40:36\n+  --> $DIR/issue-8460-const.rs:41:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:43:36\n+  --> $DIR/issue-8460-const.rs:44:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:43:36\n+  --> $DIR/issue-8460-const.rs:44:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:46:36\n+  --> $DIR/issue-8460-const.rs:47:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:46:36\n+  --> $DIR/issue-8460-const.rs:47:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:49:36\n+  --> $DIR/issue-8460-const.rs:50:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n    |                                    ^^^^^^^^^^\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:51:36\n+  --> $DIR/issue-8460-const.rs:52:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n    |                                    ^^^^^^^\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:53:36\n+  --> $DIR/issue-8460-const.rs:54:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:55:36\n+  --> $DIR/issue-8460-const.rs:56:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:57:36\n+  --> $DIR/issue-8460-const.rs:58:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n    |                                    ^^^^^^^^"}, {"sha": "0ca850abc1b60692234cf8b9cc0bae85e3514348", "filename": "src/test/ui/issues/issue-8460-const2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // compile-flags: -C overflow-checks=on -O\n \n #![deny(const_err)]"}, {"sha": "6ad186fb21c66d43114223beba86d084d2944f39", "filename": "src/test/ui/issues/issue-8460-const2.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,125 +1,125 @@\n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const2.rs:9:36\n+  --> $DIR/issue-8460-const2.rs:10:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/issue-8460-const2.rs:3:9\n+  --> $DIR/issue-8460-const2.rs:4:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const2.rs:11:36\n+  --> $DIR/issue-8460-const2.rs:12:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^\n \n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const2.rs:13:36\n+  --> $DIR/issue-8460-const2.rs:14:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const2.rs:15:36\n+  --> $DIR/issue-8460-const2.rs:16:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const2.rs:17:36\n+  --> $DIR/issue-8460-const2.rs:18:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:19:36\n+  --> $DIR/issue-8460-const2.rs:20:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n    |                                    ^^^^^^^^^^\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:21:36\n+  --> $DIR/issue-8460-const2.rs:22:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n    |                                    ^^^^^^^\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:23:36\n+  --> $DIR/issue-8460-const2.rs:24:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:25:36\n+  --> $DIR/issue-8460-const2.rs:26:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:27:36\n+  --> $DIR/issue-8460-const2.rs:28:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:29:36\n+  --> $DIR/issue-8460-const2.rs:30:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:31:36\n+  --> $DIR/issue-8460-const2.rs:32:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:33:36\n+  --> $DIR/issue-8460-const2.rs:34:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:35:36\n+  --> $DIR/issue-8460-const2.rs:36:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:37:36\n+  --> $DIR/issue-8460-const2.rs:38:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:39:36\n+  --> $DIR/issue-8460-const2.rs:40:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n    |                                    ^^^^^^^^^^\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:41:36\n+  --> $DIR/issue-8460-const2.rs:42:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n    |                                    ^^^^^^^\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:43:36\n+  --> $DIR/issue-8460-const2.rs:44:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:45:36\n+  --> $DIR/issue-8460-const2.rs:46:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:47:36\n+  --> $DIR/issue-8460-const2.rs:48:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n    |                                    ^^^^^^^^"}, {"sha": "80f360155cb49f272b08c2d6f44c946a7f8fac71", "filename": "src/test/ui/issues/issue-8727.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-8727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-8727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8727.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,6 +1,8 @@\n // Verify the compiler fails with an error on infinite function\n // recursions.\n \n+// build-fail\n+\n fn generic<T>() {\n     generic::<Option<T>>();\n }"}, {"sha": "2fd6ea5dc82b87d32e2c0c0395c1e8786eeae955", "filename": "src/test/ui/issues/issue-8727.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n warning: function cannot return without recursing\n-  --> $DIR/issue-8727.rs:4:1\n+  --> $DIR/issue-8727.rs:6:1\n    |\n LL | fn generic<T>() {\n    | ^^^^^^^^^^^^^^^ cannot return without recursing\n@@ -10,7 +10,7 @@ LL |     generic::<Option<T>>();\n    = help: a `loop` may express intention better if this is on purpose\n \n error: reached the recursion limit while instantiating `generic::<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<std::option::Option<i32>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n-  --> $DIR/issue-8727.rs:4:1\n+  --> $DIR/issue-8727.rs:6:1\n    |\n LL | / fn generic<T>() {\n LL | |     generic::<Option<T>>();"}, {"sha": "7b2f5365acaa33e7fa5d1fbd92054c50044f522e", "filename": "src/test/ui/linkage-attr/linkage-detect-extern-generated-name-collision.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-extern-generated-name-collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-extern-generated-name-collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-extern-generated-name-collision.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -2,6 +2,7 @@\n // collision on the symbol generated for the external linkage item in\n // an extern crate.\n \n+// build-fail\n // aux-build:def_colliding_external.rs\n \n extern crate def_colliding_external as dep1;"}, {"sha": "1e5069612fb0d50f28ffdca41815a12f973a90da", "filename": "src/test/ui/linkage-attr/linkage-detect-local-generated-name-collision.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-local-generated-name-collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-local-generated-name-collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-local-generated-name-collision.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n #![feature(linkage)]\n \n mod dep1 {"}, {"sha": "d008acc6e7c82d08a8f108bda8ca86b8386943a8", "filename": "src/test/ui/linkage-attr/linkage-detect-local-generated-name-collision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-local-generated-name-collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-local-generated-name-collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-detect-local-generated-name-collision.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error: symbol `collision` is already defined\n-  --> $DIR/linkage-detect-local-generated-name-collision.rs:7:9\n+  --> $DIR/linkage-detect-local-generated-name-collision.rs:9:9\n    |\n LL |         pub static collision: *const i32;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "93afc537f7c6c1175970596bc2d66293d4ca7204", "filename": "src/test/ui/linkage-attr/linkage-requires-raw-ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-requires-raw-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-requires-raw-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-requires-raw-ptr.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,6 +1,7 @@\n // rust-lang/rust#59548: We used to ICE when trying to use a static\n // with a type that violated its own `#[linkage]`.\n \n+// build-fail\n // aux-build:def_illtyped_external.rs\n \n extern crate def_illtyped_external as dep;"}, {"sha": "41e7819e8cdf0e2a53551d2bc21f22fc0b978cec", "filename": "src/test/ui/linkage-attr/linkage2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,4 +1,6 @@\n // FIXME https://github.com/rust-lang/rust/issues/59774\n+\n+// build-fail\n // normalize-stderr-test \"thread.*panicked.*Metadata module not compiled.*\\n\" -> \"\"\n // normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n // ignore-sgx no weak linkages permitted"}, {"sha": "72ee3fb62ecb9f3f08712f8156cf6ae021c9c164", "filename": "src/test/ui/linkage-attr/linkage2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error: must have type `*const T` or `*mut T` due to `#[linkage]` attribute\n-  --> $DIR/linkage2.rs:9:32\n+  --> $DIR/linkage2.rs:11:32\n    |\n LL |     #[linkage = \"extern_weak\"] static foo: i32;\n    |                                ^^^^^^^^^^^^^^^^"}, {"sha": "bd4e5ba2d4a06230af35a174902c9561e7f7b730", "filename": "src/test/ui/linkage-attr/linkage3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage3.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,4 +1,6 @@\n // FIXME https://github.com/rust-lang/rust/issues/59774\n+\n+// build-fail\n // normalize-stderr-test \"thread.*panicked.*Metadata module not compiled.*\\n\" -> \"\"\n // normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n "}, {"sha": "5a0833f2f74348223f1773a70e579a970623514f", "filename": "src/test/ui/linkage-attr/linkage3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage3.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error: invalid linkage specified\n-  --> $DIR/linkage3.rs:8:24\n+  --> $DIR/linkage3.rs:10:24\n    |\n LL |     #[linkage = \"foo\"] static foo: *const i32;\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "121e5b796bbb714015cba9f426caac51b4602764", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // compile-flags: -O\n \n #![deny(exceeding_bitshifts, const_err)]"}, {"sha": "203cb741539d63be553c9020513e5c717767b6e4", "filename": "src/test/ui/lint/lint-exceeding-bitshifts.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,113 +1,113 @@\n error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:9:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:10:15\n    |\n LL |       let n = 1u8 << 8;\n    |               ^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/lint-exceeding-bitshifts.rs:3:9\n+  --> $DIR/lint-exceeding-bitshifts.rs:4:9\n    |\n LL | #![deny(exceeding_bitshifts, const_err)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:11:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:12:15\n    |\n LL |       let n = 1u16 << 16;\n    |               ^^^^^^^^^^\n \n error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:13:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:14:15\n    |\n LL |       let n = 1u32 << 32;\n    |               ^^^^^^^^^^\n \n error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:15:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:16:15\n    |\n LL |       let n = 1u64 << 64;\n    |               ^^^^^^^^^^\n \n error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:17:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:18:15\n    |\n LL |       let n = 1i8 << 8;\n    |               ^^^^^^^^\n \n error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:19:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:20:15\n    |\n LL |       let n = 1i16 << 16;\n    |               ^^^^^^^^^^\n \n error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:21:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:22:15\n    |\n LL |       let n = 1i32 << 32;\n    |               ^^^^^^^^^^\n \n error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:23:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:24:15\n    |\n LL |       let n = 1i64 << 64;\n    |               ^^^^^^^^^^\n \n error: attempt to shift right with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:26:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:27:15\n    |\n LL |       let n = 1u8 >> 8;\n    |               ^^^^^^^^\n \n error: attempt to shift right with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:28:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:29:15\n    |\n LL |       let n = 1u16 >> 16;\n    |               ^^^^^^^^^^\n \n error: attempt to shift right with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:30:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:31:15\n    |\n LL |       let n = 1u32 >> 32;\n    |               ^^^^^^^^^^\n \n error: attempt to shift right with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:32:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:33:15\n    |\n LL |       let n = 1u64 >> 64;\n    |               ^^^^^^^^^^\n \n error: attempt to shift right with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:34:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:35:15\n    |\n LL |       let n = 1i8 >> 8;\n    |               ^^^^^^^^\n \n error: attempt to shift right with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:36:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:37:15\n    |\n LL |       let n = 1i16 >> 16;\n    |               ^^^^^^^^^^\n \n error: attempt to shift right with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:38:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:39:15\n    |\n LL |       let n = 1i32 >> 32;\n    |               ^^^^^^^^^^\n \n error: attempt to shift right with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:40:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:41:15\n    |\n LL |       let n = 1i64 >> 64;\n    |               ^^^^^^^^^^\n \n error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:44:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:45:15\n    |\n LL |       let n = n << 8;\n    |               ^^^^^^\n \n error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts.rs:46:15\n+  --> $DIR/lint-exceeding-bitshifts.rs:47:15\n    |\n LL |       let n = 1u8 << -8;\n    |               ^^^^^^^^^"}, {"sha": "2a7cbc10f7746c6959e79c9728c51ec228cb4d7c", "filename": "src/test/ui/lint/lint-exceeding-bitshifts2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts2.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // compile-flags: -O\n \n #![deny(exceeding_bitshifts, const_err)]"}, {"sha": "49ac54ab8345bdadb08861547853fe8321899dc2", "filename": "src/test/ui/lint/lint-exceeding-bitshifts2.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts2.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,29 +1,29 @@\n error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts2.rs:9:15\n+  --> $DIR/lint-exceeding-bitshifts2.rs:10:15\n    |\n LL |       let n = 1u8 << (4+4);\n    |               ^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/lint-exceeding-bitshifts2.rs:3:9\n+  --> $DIR/lint-exceeding-bitshifts2.rs:4:9\n    |\n LL | #![deny(exceeding_bitshifts, const_err)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n error: attempt to shift right with overflow\n-  --> $DIR/lint-exceeding-bitshifts2.rs:11:15\n+  --> $DIR/lint-exceeding-bitshifts2.rs:12:15\n    |\n LL |       let n = 1i64 >> [64][0];\n    |               ^^^^^^^^^^^^^^^\n \n error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts2.rs:17:15\n+  --> $DIR/lint-exceeding-bitshifts2.rs:18:15\n    |\n LL |       let n = 1_isize << BITS;\n    |               ^^^^^^^^^^^^^^^\n \n error: attempt to shift left with overflow\n-  --> $DIR/lint-exceeding-bitshifts2.rs:18:15\n+  --> $DIR/lint-exceeding-bitshifts2.rs:19:15\n    |\n LL |       let n = 1_usize << BITS;\n    |               ^^^^^^^^^^^^^^^"}, {"sha": "268cf26121998766336e7a243a56386690d89d70", "filename": "src/test/ui/lto-duplicate-symbols.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Flto-duplicate-symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Flto-duplicate-symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flto-duplicate-symbols.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // aux-build:lto-duplicate-symbols1.rs\n // aux-build:lto-duplicate-symbols2.rs\n // error-pattern:Linking globals named 'foo': symbol multiply defined!"}, {"sha": "26d7e66ae3f2ef60e97c1ed1af05e9cbc1cefd68", "filename": "src/test/ui/non-integer-atomic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fnon-integer-atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fnon-integer-atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-integer-atomic.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n #![feature(core_intrinsics)]\n #![allow(warnings)]\n #![crate_type = \"rlib\"]"}, {"sha": "468e76da666d2954fb4a8135a304c5286373a393", "filename": "src/test/ui/non-integer-atomic.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fnon-integer-atomic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fnon-integer-atomic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-integer-atomic.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,95 +1,95 @@\n error[E0511]: invalid monomorphization of `atomic_load` intrinsic: expected basic integer type, found `bool`\n-  --> $DIR/non-integer-atomic.rs:13:5\n+  --> $DIR/non-integer-atomic.rs:15:5\n    |\n LL |     intrinsics::atomic_load(p);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_store` intrinsic: expected basic integer type, found `bool`\n-  --> $DIR/non-integer-atomic.rs:18:5\n+  --> $DIR/non-integer-atomic.rs:20:5\n    |\n LL |     intrinsics::atomic_store(p, v);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_xchg` intrinsic: expected basic integer type, found `bool`\n-  --> $DIR/non-integer-atomic.rs:23:5\n+  --> $DIR/non-integer-atomic.rs:25:5\n    |\n LL |     intrinsics::atomic_xchg(p, v);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_cxchg` intrinsic: expected basic integer type, found `bool`\n-  --> $DIR/non-integer-atomic.rs:28:5\n+  --> $DIR/non-integer-atomic.rs:30:5\n    |\n LL |     intrinsics::atomic_cxchg(p, v, v);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_load` intrinsic: expected basic integer type, found `Foo`\n-  --> $DIR/non-integer-atomic.rs:33:5\n+  --> $DIR/non-integer-atomic.rs:35:5\n    |\n LL |     intrinsics::atomic_load(p);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_store` intrinsic: expected basic integer type, found `Foo`\n-  --> $DIR/non-integer-atomic.rs:38:5\n+  --> $DIR/non-integer-atomic.rs:40:5\n    |\n LL |     intrinsics::atomic_store(p, v);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_xchg` intrinsic: expected basic integer type, found `Foo`\n-  --> $DIR/non-integer-atomic.rs:43:5\n+  --> $DIR/non-integer-atomic.rs:45:5\n    |\n LL |     intrinsics::atomic_xchg(p, v);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_cxchg` intrinsic: expected basic integer type, found `Foo`\n-  --> $DIR/non-integer-atomic.rs:48:5\n+  --> $DIR/non-integer-atomic.rs:50:5\n    |\n LL |     intrinsics::atomic_cxchg(p, v, v);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_load` intrinsic: expected basic integer type, found `&dyn std::ops::Fn()`\n-  --> $DIR/non-integer-atomic.rs:53:5\n+  --> $DIR/non-integer-atomic.rs:55:5\n    |\n LL |     intrinsics::atomic_load(p);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_store` intrinsic: expected basic integer type, found `&dyn std::ops::Fn()`\n-  --> $DIR/non-integer-atomic.rs:58:5\n+  --> $DIR/non-integer-atomic.rs:60:5\n    |\n LL |     intrinsics::atomic_store(p, v);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_xchg` intrinsic: expected basic integer type, found `&dyn std::ops::Fn()`\n-  --> $DIR/non-integer-atomic.rs:63:5\n+  --> $DIR/non-integer-atomic.rs:65:5\n    |\n LL |     intrinsics::atomic_xchg(p, v);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_cxchg` intrinsic: expected basic integer type, found `&dyn std::ops::Fn()`\n-  --> $DIR/non-integer-atomic.rs:68:5\n+  --> $DIR/non-integer-atomic.rs:70:5\n    |\n LL |     intrinsics::atomic_cxchg(p, v, v);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_load` intrinsic: expected basic integer type, found `[u8; 100]`\n-  --> $DIR/non-integer-atomic.rs:73:5\n+  --> $DIR/non-integer-atomic.rs:75:5\n    |\n LL |     intrinsics::atomic_load(p);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_store` intrinsic: expected basic integer type, found `[u8; 100]`\n-  --> $DIR/non-integer-atomic.rs:78:5\n+  --> $DIR/non-integer-atomic.rs:80:5\n    |\n LL |     intrinsics::atomic_store(p, v);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_xchg` intrinsic: expected basic integer type, found `[u8; 100]`\n-  --> $DIR/non-integer-atomic.rs:83:5\n+  --> $DIR/non-integer-atomic.rs:85:5\n    |\n LL |     intrinsics::atomic_xchg(p, v);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `atomic_cxchg` intrinsic: expected basic integer type, found `[u8; 100]`\n-  --> $DIR/non-integer-atomic.rs:88:5\n+  --> $DIR/non-integer-atomic.rs:90:5\n    |\n LL |     intrinsics::atomic_cxchg(p, v, v);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "4b0f92456e0d19156411f3f2d1188ad64fd26cfa", "filename": "src/test/ui/panic-runtime/abort-link-to-unwind-dylib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fpanic-runtime%2Fabort-link-to-unwind-dylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fpanic-runtime%2Fabort-link-to-unwind-dylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fabort-link-to-unwind-dylib.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // compile-flags:-C panic=abort -C prefer-dynamic\n // ignore-musl - no dylibs here\n // ignore-cloudabi"}, {"sha": "1848c986e3615e13b391b5ad89f2e284e3d3979d", "filename": "src/test/ui/panic-runtime/transitive-link-a-bunch.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // aux-build:panic-runtime-unwind.rs\n // aux-build:panic-runtime-abort.rs\n // aux-build:wants-panic-runtime-unwind.rs"}, {"sha": "894a5eb38b8e73adb20fe3a68ddda802e8b7e002", "filename": "src/test/ui/panic-runtime/want-unwind-got-abort.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // error-pattern:is incompatible with this crate's strategy of `unwind`\n // aux-build:panic-runtime-abort.rs\n // aux-build:panic-runtime-lang-items.rs"}, {"sha": "5955075bae581de1a2e340e2469bc53d46e3bb3b", "filename": "src/test/ui/panic-runtime/want-unwind-got-abort2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // error-pattern:is incompatible with this crate's strategy of `unwind`\n // aux-build:panic-runtime-abort.rs\n // aux-build:wants-panic-runtime-abort.rs"}, {"sha": "71d091677473a2de991e1eeb2685186f2c3674b7", "filename": "src/test/ui/print_type_sizes/zero-sized-fields.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fprint_type_sizes%2Fzero-sized-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fprint_type_sizes%2Fzero-sized-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fzero-sized-fields.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,6 @@\n // compile-flags: -Z print-type-sizes\n // build-pass (FIXME(62277): could be check-pass?)\n+// ignore-pass\n \n // At one point, zero-sized fields such as those in this file were causing\n // incorrect output from `-Z print-type-sizes`."}, {"sha": "9d939e131823c92fa2c4711e73438ec7c67aab2f", "filename": "src/test/ui/recursion/recursion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Frecursion%2Frecursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Frecursion%2Frecursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursion.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n enum Nil {NilValue}\n struct Cons<T> {head:isize, tail:T}\n trait Dot {fn dot(&self, other:Self) -> isize;}"}, {"sha": "17293720a43ea1e18ad9e1a5c7565892fbc684c8", "filename": "src/test/ui/recursion/recursion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Frecursion%2Frecursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Frecursion%2Frecursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursion.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error: reached the recursion limit while instantiating `test::<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Nil>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n-  --> $DIR/recursion.rs:12:1\n+  --> $DIR/recursion.rs:14:1\n    |\n LL | / fn test<T:Dot> (n:isize, i:isize, first:T, second:T) ->isize {\n LL | |   match n {    0 => {first.dot(second)}"}, {"sha": "3b17c5b72551d9cc6dd68c9a6203c6c638d2a209", "filename": "src/test/ui/required-lang-item.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Frequired-lang-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Frequired-lang-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frequired-lang-item.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n #![feature(lang_items, no_core)]\n #![no_core]\n "}, {"sha": "fa6826450c9647217f391330c25493097d18168a", "filename": "src/test/ui/rmeta_lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Frmeta_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Frmeta_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frmeta_lib.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // aux-build:rmeta-meta.rs\n // no-prefer-dynamic\n // error-pattern: crate `rmeta_meta` required to be available in rlib format, but was not found"}, {"sha": "4d23a1911a3cb548f3dda9d158d6f8724873ad16", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-arithmetic-saturating.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // ignore-emscripten\n // ignore-tidy-linelength\n #![feature(repr_simd, platform_intrinsics)]"}, {"sha": "1ed472a485d1395f23a6ae896be1977bdfa2ed61", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-arithmetic-saturating.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,11 +1,11 @@\n error[E0511]: invalid monomorphization of `simd_saturating_add` intrinsic: expected element type `f32` of vector type `f32x4` to be a signed or unsigned integer type\n-  --> $DIR/simd-intrinsic-generic-arithmetic-saturating.rs:33:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic-saturating.rs:34:9\n    |\n LL |         simd_saturating_add(z, z);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_saturating_sub` intrinsic: expected element type `f32` of vector type `f32x4` to be a signed or unsigned integer type\n-  --> $DIR/simd-intrinsic-generic-arithmetic-saturating.rs:35:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic-saturating.rs:36:9\n    |\n LL |         simd_saturating_sub(z, z);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "f95f548fee8cacf4a38b905fa66dc2dc60bdca01", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-arithmetic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n #![feature(repr_simd, platform_intrinsics)]\n #![allow(non_camel_case_types)]\n #[repr(simd)]"}, {"sha": "70cdc34684da7d8e82a208fd8c1547db21b1c571", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-arithmetic.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,83 +1,83 @@\n error[E0511]: invalid monomorphization of `simd_add` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:62:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:64:9\n    |\n LL |         simd_add(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_sub` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:64:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:66:9\n    |\n LL |         simd_sub(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_mul` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:66:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:68:9\n    |\n LL |         simd_mul(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_div` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:68:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:70:9\n    |\n LL |         simd_div(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shl` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:70:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:72:9\n    |\n LL |         simd_shl(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shr` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:72:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:74:9\n    |\n LL |         simd_shr(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_and` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:74:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:76:9\n    |\n LL |         simd_and(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_or` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:76:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:78:9\n    |\n LL |         simd_or(0, 0);\n    |         ^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_xor` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:78:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:80:9\n    |\n LL |         simd_xor(0, 0);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shl` intrinsic: unsupported operation on `f32x4` with element `f32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:82:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:84:9\n    |\n LL |         simd_shl(z, z);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shr` intrinsic: unsupported operation on `f32x4` with element `f32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:84:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:86:9\n    |\n LL |         simd_shr(z, z);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_and` intrinsic: unsupported operation on `f32x4` with element `f32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:86:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:88:9\n    |\n LL |         simd_and(z, z);\n    |         ^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_or` intrinsic: unsupported operation on `f32x4` with element `f32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:88:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:90:9\n    |\n LL |         simd_or(z, z);\n    |         ^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_xor` intrinsic: unsupported operation on `f32x4` with element `f32`\n-  --> $DIR/simd-intrinsic-generic-arithmetic.rs:90:9\n+  --> $DIR/simd-intrinsic-generic-arithmetic.rs:92:9\n    |\n LL |         simd_xor(z, z);\n    |         ^^^^^^^^^^^^^^"}, {"sha": "ed267d8411a22aa26bdaae19336b6b05c0d9fd7b", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-bitmask.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n // Test that the simd_bitmask intrinsic produces ok-ish error\n // messages when misused.\n "}, {"sha": "8cb235b778bf896f25eb5d67b4596893b6cc6449", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-bitmask.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,29 +1,29 @@\n error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u16`, expected `u8`\n-  --> $DIR/simd-intrinsic-generic-bitmask.rs:74:22\n+  --> $DIR/simd-intrinsic-generic-bitmask.rs:76:22\n    |\n LL |         let _: u16 = simd_bitmask(m2);\n    |                      ^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u16`, expected `u8`\n-  --> $DIR/simd-intrinsic-generic-bitmask.rs:77:22\n+  --> $DIR/simd-intrinsic-generic-bitmask.rs:79:22\n    |\n LL |         let _: u16 = simd_bitmask(m8);\n    |                      ^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u32`, expected `u16`\n-  --> $DIR/simd-intrinsic-generic-bitmask.rs:80:22\n+  --> $DIR/simd-intrinsic-generic-bitmask.rs:82:22\n    |\n LL |         let _: u32 = simd_bitmask(m16);\n    |                      ^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u64`, expected `u32`\n-  --> $DIR/simd-intrinsic-generic-bitmask.rs:83:22\n+  --> $DIR/simd-intrinsic-generic-bitmask.rs:85:22\n    |\n LL |         let _: u64 = simd_bitmask(m32);\n    |                      ^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_bitmask` intrinsic: bitmask `u128`, expected `u64`\n-  --> $DIR/simd-intrinsic-generic-bitmask.rs:86:23\n+  --> $DIR/simd-intrinsic-generic-bitmask.rs:88:23\n    |\n LL |         let _: u128 = simd_bitmask(m64);\n    |                       ^^^^^^^^^^^^^^^^^"}, {"sha": "4f4fa06b002300a89ae92cb2a894b19631286067", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-cast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-cast.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n #![feature(repr_simd, platform_intrinsics)]\n \n #[repr(simd)]"}, {"sha": "d794a742b4d618dce1add8fc2c67cf93e7d0a545", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-cast.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-cast.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,23 +1,23 @@\n error[E0511]: invalid monomorphization of `simd_cast` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-cast.rs:32:9\n+  --> $DIR/simd-intrinsic-generic-cast.rs:34:9\n    |\n LL |         simd_cast::<i32, i32>(0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_cast` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-cast.rs:34:9\n+  --> $DIR/simd-intrinsic-generic-cast.rs:36:9\n    |\n LL |         simd_cast::<i32, i32x4>(0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_cast` intrinsic: expected SIMD return type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-cast.rs:36:9\n+  --> $DIR/simd-intrinsic-generic-cast.rs:38:9\n    |\n LL |         simd_cast::<i32x4, i32>(x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_cast` intrinsic: expected return type with length 4 (same as input type `i32x4`), found `i32x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-cast.rs:38:9\n+  --> $DIR/simd-intrinsic-generic-cast.rs:40:9\n    |\n LL |         simd_cast::<_, i32x8>(x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "3cd38042f0f241d77ef13624e38bb025eb631e54", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-comparison.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-comparison.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n #![feature(repr_simd, platform_intrinsics)]\n \n #[repr(simd)]"}, {"sha": "36c6b934d5898b52e4da1e6b035bfca665ff5d8c", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-comparison.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-comparison.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,107 +1,107 @@\n error[E0511]: invalid monomorphization of `simd_eq` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:26:9\n+  --> $DIR/simd-intrinsic-generic-comparison.rs:28:9\n    |\n LL |         simd_eq::<i32, i32>(0, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_ne` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:28:9\n+  --> $DIR/simd-intrinsic-generic-comparison.rs:30:9\n    |\n LL |         simd_ne::<i32, i32>(0, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_lt` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:30:9\n+  --> $DIR/simd-intrinsic-generic-comparison.rs:32:9\n    |\n LL |         simd_lt::<i32, i32>(0, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_le` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:32:9\n+  --> $DIR/simd-intrinsic-generic-comparison.rs:34:9\n    |\n LL |         simd_le::<i32, i32>(0, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_gt` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:34:9\n+  --> $DIR/simd-intrinsic-generic-comparison.rs:36:9\n    |\n LL |         simd_gt::<i32, i32>(0, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_ge` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:36:9\n+  --> $DIR/simd-intrinsic-generic-comparison.rs:38:9\n    |\n LL |         simd_ge::<i32, i32>(0, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_eq` intrinsic: expected SIMD return type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:39:9\n+  --> $DIR/simd-intrinsic-generic-comparison.rs:41:9\n    |\n LL |         simd_eq::<_, i32>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_ne` intrinsic: expected SIMD return type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:41:9\n+  --> $DIR/simd-intrinsic-generic-comparison.rs:43:9\n    |\n LL |         simd_ne::<_, i32>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_lt` intrinsic: expected SIMD return type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:43:9\n+  --> $DIR/simd-intrinsic-generic-comparison.rs:45:9\n    |\n LL |         simd_lt::<_, i32>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_le` intrinsic: expected SIMD return type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:45:9\n+  --> $DIR/simd-intrinsic-generic-comparison.rs:47:9\n    |\n LL |         simd_le::<_, i32>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_gt` intrinsic: expected SIMD return type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:47:9\n+  --> $DIR/simd-intrinsic-generic-comparison.rs:49:9\n    |\n LL |         simd_gt::<_, i32>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_ge` intrinsic: expected SIMD return type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:49:9\n+  --> $DIR/simd-intrinsic-generic-comparison.rs:51:9\n    |\n LL |         simd_ge::<_, i32>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_eq` intrinsic: expected return type with length 4 (same as input type `i32x4`), found `i16x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:52:9\n+  --> $DIR/simd-intrinsic-generic-comparison.rs:54:9\n    |\n LL |         simd_eq::<_, i16x8>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_ne` intrinsic: expected return type with length 4 (same as input type `i32x4`), found `i16x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:54:9\n+  --> $DIR/simd-intrinsic-generic-comparison.rs:56:9\n    |\n LL |         simd_ne::<_, i16x8>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_lt` intrinsic: expected return type with length 4 (same as input type `i32x4`), found `i16x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:56:9\n+  --> $DIR/simd-intrinsic-generic-comparison.rs:58:9\n    |\n LL |         simd_lt::<_, i16x8>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_le` intrinsic: expected return type with length 4 (same as input type `i32x4`), found `i16x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:58:9\n+  --> $DIR/simd-intrinsic-generic-comparison.rs:60:9\n    |\n LL |         simd_le::<_, i16x8>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_gt` intrinsic: expected return type with length 4 (same as input type `i32x4`), found `i16x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:60:9\n+  --> $DIR/simd-intrinsic-generic-comparison.rs:62:9\n    |\n LL |         simd_gt::<_, i16x8>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_ge` intrinsic: expected return type with length 4 (same as input type `i32x4`), found `i16x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-comparison.rs:62:9\n+  --> $DIR/simd-intrinsic-generic-comparison.rs:64:9\n    |\n LL |         simd_ge::<_, i16x8>(x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "5929d05f4de3169d4255f9cfd5c949ba75b5e274", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-elements.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n #![feature(repr_simd, platform_intrinsics, rustc_attrs)]\n \n #[repr(simd)]"}, {"sha": "78022c0c8bd98c321f80043f9f6be99465d93fc5", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-elements.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,89 +1,89 @@\n error[E0511]: invalid monomorphization of `simd_insert` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:53:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:55:9\n    |\n LL |         simd_insert(0, 0, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_insert` intrinsic: expected inserted type `i32` (element of input `i32x4`), found `f64`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:55:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:57:9\n    |\n LL |         simd_insert(x, 0, 1.0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_extract` intrinsic: expected return type `i32` (element of input `i32x4`), found `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:57:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:59:9\n    |\n LL |         simd_extract::<_, f32>(x, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle2` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:60:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:62:9\n    |\n LL |         simd_shuffle2::<i32, i32>(0, 0, [0; 2]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle3` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:62:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:64:9\n    |\n LL |         simd_shuffle3::<i32, i32>(0, 0, [0; 3]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:64:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:66:9\n    |\n LL |         simd_shuffle4::<i32, i32>(0, 0, [0; 4]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:66:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:68:9\n    |\n LL |         simd_shuffle8::<i32, i32>(0, 0, [0; 8]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle2` intrinsic: expected return element type `i32` (element of input `i32x4`), found `f32x2` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:69:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:71:9\n    |\n LL |         simd_shuffle2::<_, f32x2>(x, x, [0; 2]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle3` intrinsic: expected return element type `i32` (element of input `i32x4`), found `f32x3` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:71:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:73:9\n    |\n LL |         simd_shuffle3::<_, f32x3>(x, x, [0; 3]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: expected return element type `i32` (element of input `i32x4`), found `f32x4` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:73:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:75:9\n    |\n LL |         simd_shuffle4::<_, f32x4>(x, x, [0; 4]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: expected return element type `i32` (element of input `i32x4`), found `f32x8` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:75:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:77:9\n    |\n LL |         simd_shuffle8::<_, f32x8>(x, x, [0; 8]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle2` intrinsic: expected return type of length 2, found `i32x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-elements.rs:78:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:80:9\n    |\n LL |         simd_shuffle2::<_, i32x8>(x, x, [0; 2]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle3` intrinsic: expected return type of length 3, found `i32x4` with length 4\n-  --> $DIR/simd-intrinsic-generic-elements.rs:80:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:82:9\n    |\n LL |         simd_shuffle3::<_, i32x4>(x, x, [0; 3]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: expected return type of length 4, found `i32x3` with length 3\n-  --> $DIR/simd-intrinsic-generic-elements.rs:82:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:84:9\n    |\n LL |         simd_shuffle4::<_, i32x3>(x, x, [0; 4]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: expected return type of length 8, found `i32x2` with length 2\n-  --> $DIR/simd-intrinsic-generic-elements.rs:84:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:86:9\n    |\n LL |         simd_shuffle8::<_, i32x2>(x, x, [0; 8]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "ede4b26d19c2a199505293968d95ebb406c979fa", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-reduction.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-reduction.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // ignore-emscripten\n \n // Test that the simd_reduce_{op} intrinsics produce ok-ish error"}, {"sha": "91a62f6a1c673f898dab85f095f2f172f8f25172", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-reduction.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-reduction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-reduction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-reduction.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,59 +1,59 @@\n error[E0511]: invalid monomorphization of `simd_reduce_add_ordered` intrinsic: expected return type `f32` (element of input `f32x4`), found `i32`\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:33:9\n+  --> $DIR/simd-intrinsic-generic-reduction.rs:34:9\n    |\n LL |         simd_reduce_add_ordered(z, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_reduce_mul_ordered` intrinsic: expected return type `f32` (element of input `f32x4`), found `i32`\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:35:9\n+  --> $DIR/simd-intrinsic-generic-reduction.rs:36:9\n    |\n LL |         simd_reduce_mul_ordered(z, 1);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_reduce_and` intrinsic: expected return type `u32` (element of input `u32x4`), found `f32`\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:38:22\n+  --> $DIR/simd-intrinsic-generic-reduction.rs:39:22\n    |\n LL |         let _: f32 = simd_reduce_and(x);\n    |                      ^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_reduce_or` intrinsic: expected return type `u32` (element of input `u32x4`), found `f32`\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:40:22\n+  --> $DIR/simd-intrinsic-generic-reduction.rs:41:22\n    |\n LL |         let _: f32 = simd_reduce_or(x);\n    |                      ^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_reduce_xor` intrinsic: expected return type `u32` (element of input `u32x4`), found `f32`\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:42:22\n+  --> $DIR/simd-intrinsic-generic-reduction.rs:43:22\n    |\n LL |         let _: f32 = simd_reduce_xor(x);\n    |                      ^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_reduce_and` intrinsic: unsupported simd_reduce_and from `f32x4` with element `f32` to `f32`\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:45:22\n+  --> $DIR/simd-intrinsic-generic-reduction.rs:46:22\n    |\n LL |         let _: f32 = simd_reduce_and(z);\n    |                      ^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_reduce_or` intrinsic: unsupported simd_reduce_or from `f32x4` with element `f32` to `f32`\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:47:22\n+  --> $DIR/simd-intrinsic-generic-reduction.rs:48:22\n    |\n LL |         let _: f32 = simd_reduce_or(z);\n    |                      ^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_reduce_xor` intrinsic: unsupported simd_reduce_xor from `f32x4` with element `f32` to `f32`\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:49:22\n+  --> $DIR/simd-intrinsic-generic-reduction.rs:50:22\n    |\n LL |         let _: f32 = simd_reduce_xor(z);\n    |                      ^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_reduce_all` intrinsic: unsupported simd_reduce_all from `f32x4` with element `f32` to `bool`\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:52:23\n+  --> $DIR/simd-intrinsic-generic-reduction.rs:53:23\n    |\n LL |         let _: bool = simd_reduce_all(z);\n    |                       ^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_reduce_any` intrinsic: unsupported simd_reduce_any from `f32x4` with element `f32` to `bool`\n-  --> $DIR/simd-intrinsic-generic-reduction.rs:54:23\n+  --> $DIR/simd-intrinsic-generic-reduction.rs:55:23\n    |\n LL |         let _: bool = simd_reduce_any(z);\n    |                       ^^^^^^^^^^^^^^^^^^"}, {"sha": "a719b3141505510fcfe51d26f4934016fd03fd1a", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-select.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-select.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n // Test that the simd_select intrinsic produces ok-ish error\n // messages when misused.\n "}, {"sha": "f68c969d13ee3793758730fb1c907ce90f44a194", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-select.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-select.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-select.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-select.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,47 +1,47 @@\n error[E0511]: invalid monomorphization of `simd_select` intrinsic: mismatched lengths: mask length `8` != other vector length `4`\n-  --> $DIR/simd-intrinsic-generic-select.rs:38:9\n+  --> $DIR/simd-intrinsic-generic-select.rs:40:9\n    |\n LL |         simd_select(m8, x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_select` intrinsic: mask element type is `u32`, expected `i_`\n-  --> $DIR/simd-intrinsic-generic-select.rs:41:9\n+  --> $DIR/simd-intrinsic-generic-select.rs:43:9\n    |\n LL |         simd_select(x, x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_select` intrinsic: mask element type is `f32`, expected `i_`\n-  --> $DIR/simd-intrinsic-generic-select.rs:44:9\n+  --> $DIR/simd-intrinsic-generic-select.rs:46:9\n    |\n LL |         simd_select(z, z, z);\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_select` intrinsic: expected SIMD argument type, found non-SIMD `u32`\n-  --> $DIR/simd-intrinsic-generic-select.rs:47:9\n+  --> $DIR/simd-intrinsic-generic-select.rs:49:9\n    |\n LL |         simd_select(m4, 0u32, 1u32);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_select_bitmask` intrinsic: mismatched lengths: mask length `8` != other vector length `4`\n-  --> $DIR/simd-intrinsic-generic-select.rs:50:9\n+  --> $DIR/simd-intrinsic-generic-select.rs:52:9\n    |\n LL |         simd_select_bitmask(0u8, x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_select_bitmask` intrinsic: expected SIMD argument type, found non-SIMD `u32`\n-  --> $DIR/simd-intrinsic-generic-select.rs:53:9\n+  --> $DIR/simd-intrinsic-generic-select.rs:55:9\n    |\n LL |         simd_select_bitmask(0u8, 1u32, 2u32);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_select_bitmask` intrinsic: `f32` is not an integral type\n-  --> $DIR/simd-intrinsic-generic-select.rs:56:9\n+  --> $DIR/simd-intrinsic-generic-select.rs:58:9\n    |\n LL |         simd_select_bitmask(0.0f32, x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_select_bitmask` intrinsic: `&str` is not an integral type\n-  --> $DIR/simd-intrinsic-generic-select.rs:59:9\n+  --> $DIR/simd-intrinsic-generic-select.rs:61:9\n    |\n LL |         simd_select_bitmask(\"x\", x, x);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "fc5e23f49869ac482b1388d94814194815cde904", "filename": "src/test/ui/simd-type-generic-monomorphisation.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-type-generic-monomorphisation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsimd-type-generic-monomorphisation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-type-generic-monomorphisation.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n #![feature(repr_simd, platform_intrinsics)]\n \n // error-pattern:monomorphising SIMD type `Simd2<X>` with a non-machine element type `X`"}, {"sha": "895ff5ae54fde758551d27eb4022ca11fc62b7d3", "filename": "src/test/ui/symbol-names/basic.legacy.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,23 +1,23 @@\n error: symbol-name(_ZN5basic4main17h81759b0695851718E)\n-  --> $DIR/basic.rs:7:1\n+  --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling(basic::main::h81759b0695851718)\n-  --> $DIR/basic.rs:7:1\n+  --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(basic::main)\n-  --> $DIR/basic.rs:7:1\n+  --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: def-path(main)\n-  --> $DIR/basic.rs:14:1\n+  --> $DIR/basic.rs:15:1\n    |\n LL | #[rustc_def_path]\n    | ^^^^^^^^^^^^^^^^^"}, {"sha": "ddc349d7f106d55580062e2d4eff1d56f6f953a4", "filename": "src/test/ui/symbol-names/basic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // revisions: legacy v0\n //[legacy]compile-flags: -Z symbol-mangling-version=legacy\n     //[v0]compile-flags: -Z symbol-mangling-version=v0"}, {"sha": "36dba0dfc975dc96687f35f3eac1567310fe8def", "filename": "src/test/ui/symbol-names/basic.v0.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.v0.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,23 +1,23 @@\n error: symbol-name(_RNvCs4fqI2P2rA04_5basic4main)\n-  --> $DIR/basic.rs:7:1\n+  --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling(basic[317d481089b8c8fe]::main)\n-  --> $DIR/basic.rs:7:1\n+  --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(basic::main)\n-  --> $DIR/basic.rs:7:1\n+  --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: def-path(main)\n-  --> $DIR/basic.rs:14:1\n+  --> $DIR/basic.rs:15:1\n    |\n LL | #[rustc_def_path]\n    | ^^^^^^^^^^^^^^^^^"}, {"sha": "53ab2f9878f3041cd51c0ee08584e29f5ee80495", "filename": "src/test/ui/symbol-names/impl1.legacy.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,71 +1,71 @@\n error: symbol-name(_ZN5impl13foo3Foo3bar17h92cf46db76791039E)\n-  --> $DIR/impl1.rs:13:9\n+  --> $DIR/impl1.rs:14:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling(impl1::foo::Foo::bar::h92cf46db76791039)\n-  --> $DIR/impl1.rs:13:9\n+  --> $DIR/impl1.rs:14:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(impl1::foo::Foo::bar)\n-  --> $DIR/impl1.rs:13:9\n+  --> $DIR/impl1.rs:14:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: def-path(foo::Foo::bar)\n-  --> $DIR/impl1.rs:20:9\n+  --> $DIR/impl1.rs:21:9\n    |\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n error: symbol-name(_ZN5impl13bar33_$LT$impl$u20$impl1..foo..Foo$GT$3baz17h90c4a800b1aa0df0E)\n-  --> $DIR/impl1.rs:31:9\n+  --> $DIR/impl1.rs:32:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling(impl1::bar::<impl impl1::foo::Foo>::baz::h90c4a800b1aa0df0)\n-  --> $DIR/impl1.rs:31:9\n+  --> $DIR/impl1.rs:32:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(impl1::bar::<impl impl1::foo::Foo>::baz)\n-  --> $DIR/impl1.rs:31:9\n+  --> $DIR/impl1.rs:32:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: def-path(bar::<impl foo::Foo>::baz)\n-  --> $DIR/impl1.rs:38:9\n+  --> $DIR/impl1.rs:39:9\n    |\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n error: symbol-name(_ZN209_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$C$$u20$...$RP$$u2b$impl1..AutoTrait$u3b$$u20$_$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method17h92c563325b7ff21aE)\n-  --> $DIR/impl1.rs:61:13\n+  --> $DIR/impl1.rs:62:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; _] as impl1::main::{{closure}}::Bar>::method::h92c563325b7ff21a)\n-  --> $DIR/impl1.rs:61:13\n+  --> $DIR/impl1.rs:62:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; _] as impl1::main::{{closure}}::Bar>::method)\n-  --> $DIR/impl1.rs:61:13\n+  --> $DIR/impl1.rs:62:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n error: def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; _] as main::{{closure}}#1::Bar>::method)\n-  --> $DIR/impl1.rs:68:13\n+  --> $DIR/impl1.rs:69:13\n    |\n LL |             #[rustc_def_path]\n    |             ^^^^^^^^^^^^^^^^^"}, {"sha": "c1aaec5169d8b1621263e79bbe55fa18a429345d", "filename": "src/test/ui/symbol-names/impl1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // ignore-tidy-linelength\n // revisions: legacy v0\n //[legacy]compile-flags: -Z symbol-mangling-version=legacy"}, {"sha": "a931937d1a8138953d236e8157ad173a2d5bcbd2", "filename": "src/test/ui/symbol-names/impl1.v0.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,71 +1,71 @@\n error: symbol-name(_RNvMNtCs4fqI2P2rA04_5impl13fooNtB2_3Foo3bar)\n-  --> $DIR/impl1.rs:13:9\n+  --> $DIR/impl1.rs:14:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling(<impl1[317d481089b8c8fe]::foo::Foo>::bar)\n-  --> $DIR/impl1.rs:13:9\n+  --> $DIR/impl1.rs:14:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<impl1::foo::Foo>::bar)\n-  --> $DIR/impl1.rs:13:9\n+  --> $DIR/impl1.rs:14:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: def-path(foo::Foo::bar)\n-  --> $DIR/impl1.rs:20:9\n+  --> $DIR/impl1.rs:21:9\n    |\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n error: symbol-name(_RNvMNtCs4fqI2P2rA04_5impl13barNtNtB4_3foo3Foo3baz)\n-  --> $DIR/impl1.rs:31:9\n+  --> $DIR/impl1.rs:32:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling(<impl1[317d481089b8c8fe]::foo::Foo>::baz)\n-  --> $DIR/impl1.rs:31:9\n+  --> $DIR/impl1.rs:32:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<impl1::foo::Foo>::baz)\n-  --> $DIR/impl1.rs:31:9\n+  --> $DIR/impl1.rs:32:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: def-path(bar::<impl foo::Foo>::baz)\n-  --> $DIR/impl1.rs:38:9\n+  --> $DIR/impl1.rs:39:9\n    |\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n error: symbol-name(_RNvXNCNvCs4fqI2P2rA04_5impl14mains_0ARDNtB6_3Foop5AssocFG_KCRL0_hvEuNtB6_9AutoTraitEL_j3_NtB2_3Bar6method)\n-  --> $DIR/impl1.rs:61:13\n+  --> $DIR/impl1.rs:62:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling(<[&dyn impl1[317d481089b8c8fe]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1[317d481089b8c8fe]::AutoTrait; 3: usize] as impl1[317d481089b8c8fe]::main::{closure#1}::Bar>::method)\n-  --> $DIR/impl1.rs:61:13\n+  --> $DIR/impl1.rs:62:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<[&dyn impl1::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1::AutoTrait; 3] as impl1::main::{closure#1}::Bar>::method)\n-  --> $DIR/impl1.rs:61:13\n+  --> $DIR/impl1.rs:62:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n error: def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; _] as main::{{closure}}#1::Bar>::method)\n-  --> $DIR/impl1.rs:68:13\n+  --> $DIR/impl1.rs:69:13\n    |\n LL |             #[rustc_def_path]\n    |             ^^^^^^^^^^^^^^^^^"}, {"sha": "08add29cb9cd521431521e535f764ff47fbd41d7", "filename": "src/test/ui/symbol-names/impl2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl2.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,5 @@\n+// build-fail\n+\n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n "}, {"sha": "98330031602233859d6d2fbe6980a17881c5f0ef", "filename": "src/test/ui/symbol-names/impl2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl2.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,5 +1,5 @@\n error: def-path(<[u8; _] as Foo>::baz)\n-  --> $DIR/impl2.rs:9:5\n+  --> $DIR/impl2.rs:11:5\n    |\n LL |     #[rustc_def_path]\n    |     ^^^^^^^^^^^^^^^^^"}, {"sha": "0e3a34adbc7cf65824ed2a90888925f7aa17408f", "filename": "src/test/ui/symbol-names/issue-60925.legacy.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,17 +1,17 @@\n error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17hc86312d25b60f6eeE)\n-  --> $DIR/issue-60925.rs:21:9\n+  --> $DIR/issue-60925.rs:22:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::hc86312d25b60f6ee)\n-  --> $DIR/issue-60925.rs:21:9\n+  --> $DIR/issue-60925.rs:22:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo)\n-  --> $DIR/issue-60925.rs:21:9\n+  --> $DIR/issue-60925.rs:22:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "55b7041935c23c388665d0fdc7366246cdc3634d", "filename": "src/test/ui/symbol-names/issue-60925.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // ignore-tidy-linelength\n // revisions: legacy v0\n //[legacy]compile-flags: -Z symbol-mangling-version=legacy"}, {"sha": "78594b88b455d8c705776c453a4e56b731d830c1", "filename": "src/test/ui/symbol-names/issue-60925.v0.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.v0.stderr?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,17 +1,17 @@\n error: symbol-name(_RNvMNtCs4fqI2P2rA04_11issue_609253fooINtB2_3FooNtNtB4_4llvm3FooE3foo)\n-  --> $DIR/issue-60925.rs:21:9\n+  --> $DIR/issue-60925.rs:22:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling(<issue_60925[317d481089b8c8fe]::foo::Foo<issue_60925[317d481089b8c8fe]::llvm::Foo>>::foo)\n-  --> $DIR/issue-60925.rs:21:9\n+  --> $DIR/issue-60925.rs:22:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<issue_60925::foo::Foo<issue_60925::llvm::Foo>>::foo)\n-  --> $DIR/issue-60925.rs:21:9\n+  --> $DIR/issue-60925.rs:22:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "2f12c041a6478c86b398c46b648928ddb2a560cc", "filename": "src/test/ui/type_length_limit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Ftype_length_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftest%2Fui%2Ftype_length_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype_length_limit.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,3 +1,4 @@\n+// build-fail\n // ignore-x86 FIXME: missing sysroot spans (#53081)\n // error-pattern: reached the type-length limit while instantiating\n "}, {"sha": "09733ffbe6a0f62d818fc71f93a4c0c8cfe5493d", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -100,7 +100,6 @@ pub enum PassMode {\n     Check,\n     Build,\n     Run,\n-    RunFail,\n }\n \n impl FromStr for PassMode {\n@@ -121,12 +120,18 @@ impl fmt::Display for PassMode {\n             PassMode::Check => \"check\",\n             PassMode::Build => \"build\",\n             PassMode::Run => \"run\",\n-            PassMode::RunFail => \"run-fail\",\n         };\n         fmt::Display::fmt(s, f)\n     }\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq, PartialOrd)]\n+pub enum FailMode {\n+    Check,\n+    Build,\n+    Run,\n+}\n+\n #[derive(Clone, Debug, PartialEq)]\n pub enum CompareMode {\n     Nll,"}, {"sha": "7c90871f5ab362d7902dc417240128e7f720ccda", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 38, "deletions": 13, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -6,7 +6,7 @@ use std::path::{Path, PathBuf};\n \n use log::*;\n \n-use crate::common::{self, CompareMode, Config, Mode, PassMode};\n+use crate::common::{self, CompareMode, Config, Mode, PassMode, FailMode};\n use crate::util;\n use crate::extract_gdb_version;\n \n@@ -366,6 +366,8 @@ pub struct TestProps {\n     pass_mode: Option<PassMode>,\n     // Ignore `--pass` overrides from the command line for this test.\n     ignore_pass: bool,\n+    // How far this test should proceed while still failing.\n+    pub fail_mode: Option<FailMode>,\n     // rustdoc will test the output of the `--test` option\n     pub check_test_line_numbers_match: bool,\n     // Do not pass `-Z ui-testing` to UI tests\n@@ -411,6 +413,7 @@ impl TestProps {\n             forbid_output: vec![],\n             incremental_dir: None,\n             pass_mode: None,\n+            fail_mode: None,\n             ignore_pass: false,\n             check_test_line_numbers_match: false,\n             disable_ui_testing_normalization: false,\n@@ -437,6 +440,13 @@ impl TestProps {\n     pub fn from_file(testfile: &Path, cfg: Option<&str>, config: &Config) -> Self {\n         let mut props = TestProps::new();\n         props.load_from(testfile, cfg, config);\n+\n+        match (props.pass_mode, props.fail_mode) {\n+            (None, None) => props.fail_mode = Some(FailMode::Check),\n+            (Some(_), None) | (None, Some(_)) => {}\n+            (Some(_), Some(_)) => panic!(\"cannot use a *-fail and *-pass mode together\"),\n+        }\n+\n         props\n     }\n \n@@ -548,6 +558,7 @@ impl TestProps {\n             }\n \n             self.update_pass_mode(ln, cfg, config);\n+            self.update_fail_mode(ln, config);\n \n             if !self.ignore_pass {\n                 self.ignore_pass = config.parse_ignore_pass(ln);\n@@ -602,6 +613,29 @@ impl TestProps {\n         }\n     }\n \n+    fn update_fail_mode(&mut self, ln: &str, config: &Config) {\n+        let check_ui = |mode: &str| if config.mode != Mode::Ui {\n+            panic!(\"`{}-fail` header is only supported in UI tests\", mode);\n+        };\n+        let fail_mode = if config.parse_name_directive(ln, \"check-fail\") {\n+            check_ui(\"check\");\n+            Some(FailMode::Check)\n+        } else if config.parse_name_directive(ln, \"build-fail\") {\n+            check_ui(\"build\");\n+            Some(FailMode::Build)\n+        } else if config.parse_name_directive(ln, \"run-fail\") {\n+            check_ui(\"run\");\n+            Some(FailMode::Run)\n+        } else {\n+            None\n+        };\n+        match (self.fail_mode, fail_mode) {\n+            (None, Some(_)) => self.fail_mode = fail_mode,\n+            (Some(_), Some(_)) => panic!(\"multiple `*-fail` headers in a single test\"),\n+            (_, None) => {}\n+        }\n+    }\n+\n     fn update_pass_mode(&mut self, ln: &str, revision: Option<&str>, config: &Config) {\n         let check_no_run = |s| {\n             if config.mode != Mode::Ui && config.mode != Mode::Incremental {\n@@ -624,11 +658,6 @@ impl TestProps {\n                 panic!(\"`run-pass` header is only supported in UI tests\")\n             }\n             Some(PassMode::Run)\n-        } else if config.parse_name_directive(ln, \"run-fail\") {\n-            if config.mode != Mode::Ui {\n-                panic!(\"`run-fail` header is only supported in UI tests\")\n-            }\n-            Some(PassMode::RunFail)\n         } else {\n             None\n         };\n@@ -640,13 +669,9 @@ impl TestProps {\n     }\n \n     pub fn pass_mode(&self, config: &Config) -> Option<PassMode> {\n-        if !self.ignore_pass {\n-            if let (mode @ Some(_), Some(pm_file)) = (config.force_pass_mode, self.pass_mode) {\n-                if pm_file != PassMode::RunFail {\n-                    // HACK(Centril): See #66929. Ensure that `--pass check`\n-                    // does not cause `// run-fail` tests to fail.\n-                    return mode;\n-                }\n+        if !self.ignore_pass && self.fail_mode.is_none() && config.mode == Mode::Ui {\n+            if let (mode @ Some(_), Some(_)) = (config.force_pass_mode, self.pass_mode) {\n+                return mode;\n             }\n         }\n         self.pass_mode"}, {"sha": "f9b4b942d48b87d184904fe363dce0e0bda62661", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4420c8f5c9be977b72b9b0027800ae36aa0f302/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=b4420c8f5c9be977b72b9b0027800ae36aa0f302", "patch": "@@ -1,6 +1,6 @@\n // ignore-tidy-filelength\n \n-use crate::common::{CompareMode, PassMode};\n+use crate::common::{CompareMode, PassMode, FailMode};\n use crate::common::{expected_output_path, UI_EXTENSIONS, UI_FIXED, UI_STDERR, UI_STDOUT};\n use crate::common::{UI_RUN_STDERR, UI_RUN_STDOUT};\n use crate::common::{output_base_dir, output_base_name, output_testname_unique};\n@@ -333,17 +333,16 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn should_run(&self) -> bool {\n-        let pass_mode = self.pass_mode();\n         match self.config.mode {\n-            Ui => pass_mode == Some(PassMode::Run) || pass_mode == Some(PassMode::RunFail),\n+            Ui => self.pass_mode() == Some(PassMode::Run)\n+                || self.props.fail_mode == Some(FailMode::Run),\n             mode => panic!(\"unimplemented for mode {:?}\", mode),\n         }\n     }\n \n     fn should_run_successfully(&self) -> bool {\n-        let pass_mode = self.pass_mode();\n         match self.config.mode {\n-            Ui => pass_mode == Some(PassMode::Run),\n+            Ui => self.pass_mode() == Some(PassMode::Run),\n             mode => panic!(\"unimplemented for mode {:?}\", mode),\n         }\n     }\n@@ -352,7 +351,7 @@ impl<'test> TestCx<'test> {\n         match self.config.mode {\n             CompileFail => false,\n             JsDocTest => true,\n-            Ui => self.pass_mode().is_some(),\n+            Ui => self.pass_mode().is_some() || self.props.fail_mode > Some(FailMode::Build),\n             Incremental => {\n                 let revision = self.revision\n                     .expect(\"incremental tests require a list of revisions\");\n@@ -1377,7 +1376,7 @@ impl<'test> TestCx<'test> {\n     fn check_error_patterns(&self, output_to_check: &str, proc_res: &ProcRes) {\n         debug!(\"check_error_patterns\");\n         if self.props.error_patterns.is_empty() {\n-            if self.pass_mode().is_some() {\n+            if self.props.fail_mode != Some(FailMode::Run) {\n                 return;\n             } else {\n                 self.fatal(&format!(\n@@ -2029,7 +2028,9 @@ impl<'test> TestCx<'test> {\n             }\n         }\n \n-        if let Some(PassMode::Check) = self.pass_mode() {\n+        if let (Some(PassMode::Check), ..) | (_, Some(FailMode::Check), Ui)\n+            = (self.pass_mode(), self.props.fail_mode, self.config.mode)\n+        {\n             rustc.args(&[\"--emit\", \"metadata\"]);\n         }\n "}]}