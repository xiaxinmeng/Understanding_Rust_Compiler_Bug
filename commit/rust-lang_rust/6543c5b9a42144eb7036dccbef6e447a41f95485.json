{"sha": "6543c5b9a42144eb7036dccbef6e447a41f95485", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NDNjNWI5YTQyMTQ0ZWI3MDM2ZGNjYmVmNmU0NDdhNDFmOTU0ODU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-09-17T15:17:09Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-09-18T11:36:35Z"}, "message": "rustc: remove BindingMode from DefLocal.", "tree": {"sha": "aff0dd3e8107726385a728eb50ffcc1c81177d73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aff0dd3e8107726385a728eb50ffcc1c81177d73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6543c5b9a42144eb7036dccbef6e447a41f95485", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6543c5b9a42144eb7036dccbef6e447a41f95485", "html_url": "https://github.com/rust-lang/rust/commit/6543c5b9a42144eb7036dccbef6e447a41f95485", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6543c5b9a42144eb7036dccbef6e447a41f95485/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1813b8cf550772d84c1737a048bccccc79730a5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1813b8cf550772d84c1737a048bccccc79730a5b", "html_url": "https://github.com/rust-lang/rust/commit/1813b8cf550772d84c1737a048bccccc79730a5b"}], "stats": {"total": 103, "additions": 46, "deletions": 57}, "files": [{"sha": "3456e449a49f4b7e9e911e9c769e0fcd3ba743a0", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6543c5b9a42144eb7036dccbef6e447a41f95485/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6543c5b9a42144eb7036dccbef6e447a41f95485/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=6543c5b9a42144eb7036dccbef6e447a41f95485", "patch": "@@ -954,7 +954,7 @@ impl LintPass for NonSnakeCase {\n         match &p.node {\n             &ast::PatIdent(_, ref path1, _) => {\n                 match cx.tcx.def_map.borrow().find(&p.id) {\n-                    Some(&def::DefLocal(_, _)) => {\n+                    Some(&def::DefLocal(_)) => {\n                         self.check_snake_case(cx, \"variable\", path1.node, p.span);\n                     }\n                     _ => {}"}, {"sha": "8947c52ff84e70adbc83b7d733eb16b0ea18a5b7", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6543c5b9a42144eb7036dccbef6e447a41f95485/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6543c5b9a42144eb7036dccbef6e447a41f95485/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=6543c5b9a42144eb7036dccbef6e447a41f95485", "patch": "@@ -462,7 +462,7 @@ impl tr for def::Def {\n           def::DefMod(did) => { def::DefMod(did.tr(dcx)) }\n           def::DefForeignMod(did) => { def::DefForeignMod(did.tr(dcx)) }\n           def::DefStatic(did, m) => { def::DefStatic(did.tr(dcx), m) }\n-          def::DefLocal(nid, b) => { def::DefLocal(dcx.tr_id(nid), b) }\n+          def::DefLocal(nid) => { def::DefLocal(dcx.tr_id(nid)) }\n           def::DefVariant(e_did, v_did, is_s) => {\n             def::DefVariant(e_did.tr(dcx), v_did.tr(dcx), is_s)\n           },"}, {"sha": "d09205c241badc571938f05e5ba49d086fe5f39a", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6543c5b9a42144eb7036dccbef6e447a41f95485/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6543c5b9a42144eb7036dccbef6e447a41f95485/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=6543c5b9a42144eb7036dccbef6e447a41f95485", "patch": "@@ -22,7 +22,7 @@ pub enum Def {\n     DefMod(ast::DefId),\n     DefForeignMod(ast::DefId),\n     DefStatic(ast::DefId, bool /* is_mutbl */),\n-    DefLocal(ast::NodeId, ast::BindingMode),\n+    DefLocal(ast::NodeId),\n     DefVariant(ast::DefId /* enum */, ast::DefId /* variant */, bool /* is_structure */),\n     DefTy(ast::DefId, bool /* is_enum */),\n     DefAssociatedTy(ast::DefId),\n@@ -66,7 +66,7 @@ impl Def {\n             DefMethod(id, _) => {\n                 id\n             }\n-            DefLocal(id, _) |\n+            DefLocal(id) |\n             DefSelfTy(id) |\n             DefUpvar(id, _, _, _) |\n             DefRegion(id) |"}, {"sha": "fcca5f6725fba9e97053fab092e488ba07997052", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6543c5b9a42144eb7036dccbef6e447a41f95485/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6543c5b9a42144eb7036dccbef6e447a41f95485/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=6543c5b9a42144eb7036dccbef6e447a41f95485", "patch": "@@ -462,7 +462,7 @@ fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n         freevars::with_freevars(ir.tcx, expr.id, |freevars| {\n             for fv in freevars.iter() {\n                 match fv.def {\n-                    DefLocal(rv, _) => {\n+                    DefLocal(rv) => {\n                         let fv_ln = ir.add_live_node(FreeVarNode(fv.span));\n                         call_caps.push(CaptureInfo {ln: fv_ln,\n                                                     var_nid: rv});\n@@ -1288,7 +1288,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn access_path(&mut self, expr: &Expr, succ: LiveNode, acc: uint)\n                    -> LiveNode {\n         match self.ir.tcx.def_map.borrow().get_copy(&expr.id) {\n-          DefLocal(nid, _) => {\n+          DefLocal(nid) => {\n             let ln = self.live_node(expr.id, expr.span);\n             if acc != 0u {\n                 self.init_from_succ(ln, succ);\n@@ -1527,7 +1527,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         match expr.node {\n           ExprPath(_) => {\n             match self.ir.tcx.def_map.borrow().get_copy(&expr.id) {\n-              DefLocal(nid, _) => {\n+              DefLocal(nid) => {\n                 // Assignment to an immutable variable or argument: only legal\n                 // if there is no later assignment. If this local is actually\n                 // mutable, then check for a reassignment to flag the mutability"}, {"sha": "84c47424c4f12d6f970c3b1f5805e6a8a6518263", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 18, "deletions": 25, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6543c5b9a42144eb7036dccbef6e447a41f95485/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6543c5b9a42144eb7036dccbef6e447a41f95485/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=6543c5b9a42144eb7036dccbef6e447a41f95485", "patch": "@@ -312,26 +312,19 @@ impl MutabilityCategory {\n         }\n     }\n \n-    fn from_def(def: &def::Def) -> MutabilityCategory {\n-        match *def {\n-            def::DefFn(..) | def::DefStaticMethod(..) | def::DefSelfTy(..) |\n-            def::DefMod(..) | def::DefForeignMod(..) | def::DefVariant(..) |\n-            def::DefTy(..) | def::DefTrait(..) | def::DefPrimTy(..) |\n-            def::DefTyParam(..) | def::DefUse(..) | def::DefStruct(..) |\n-            def::DefTyParamBinder(..) | def::DefRegion(..) | def::DefLabel(..) |\n-            def::DefMethod(..) | def::DefAssociatedTy(..) => {\n-                fail!(\"no MutabilityCategory for def: {}\", *def)\n-            }\n-\n-            def::DefStatic(_, false) => McImmutable,\n-            def::DefStatic(_, true) => McDeclared,\n-\n-            def::DefLocal(_, binding_mode)  => match binding_mode {\n-                ast::BindByValue(ast::MutMutable) => McDeclared,\n-                _ => McImmutable\n+    fn from_local(tcx: &ty::ctxt, id: ast::NodeId) -> MutabilityCategory {\n+        match tcx.map.get(id) {\n+            ast_map::NodeLocal(p) | ast_map::NodeArg(p) => match p.node {\n+                ast::PatIdent(bind_mode, _, _) => {\n+                    if bind_mode == ast::BindByValue(ast::MutMutable) {\n+                        McDeclared\n+                    } else {\n+                        McImmutable\n+                    }\n+                }\n+                _ => tcx.sess.span_bug(p.span, \"expected identifier pattern\")\n             },\n-\n-            def::DefUpvar(_, def, _, _) => MutabilityCategory::from_def(&*def)\n+            _ => tcx.sess.span_bug(tcx.map.span(id), \"expected identifier pattern\")\n         }\n     }\n \n@@ -544,12 +537,12 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n               }))\n           }\n \n-          def::DefStatic(_, _) => {\n+          def::DefStatic(_, mutbl) => {\n               Ok(Rc::new(cmt_ {\n                   id:id,\n                   span:span,\n                   cat:cat_static_item,\n-                  mutbl: MutabilityCategory::from_def(&def),\n+                  mutbl: if mutbl { McDeclared } else { McImmutable},\n                   ty:expr_ty\n               }))\n           }\n@@ -582,7 +575,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n                                   onceness: closure_ty.onceness,\n                                   capturing_proc: fn_node_id,\n                               }),\n-                              mutbl: MutabilityCategory::from_def(&def),\n+                              mutbl: MutabilityCategory::from_local(self.tcx(), var_id),\n                               ty:expr_ty\n                           }))\n                       }\n@@ -605,7 +598,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n                               onceness: onceness,\n                               capturing_proc: fn_node_id,\n                           }),\n-                          mutbl: MutabilityCategory::from_def(&def),\n+                          mutbl: MutabilityCategory::from_local(self.tcx(), var_id),\n                           ty: expr_ty\n                       }))\n                   }\n@@ -619,12 +612,12 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n               }\n           }\n \n-          def::DefLocal(vid, _) => {\n+          def::DefLocal(vid) => {\n             Ok(Rc::new(cmt_ {\n                 id: id,\n                 span: span,\n                 cat: cat_local(vid),\n-                mutbl: MutabilityCategory::from_def(&def),\n+                mutbl: MutabilityCategory::from_local(self.tcx(), vid),\n                 ty: expr_ty\n             }))\n           }"}, {"sha": "ad877556af10c3caa268dae1caec3979db5eff7e", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6543c5b9a42144eb7036dccbef6e447a41f95485/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6543c5b9a42144eb7036dccbef6e447a41f95485/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=6543c5b9a42144eb7036dccbef6e447a41f95485", "patch": "@@ -4940,7 +4940,7 @@ impl<'a> Resolver<'a> {\n                             debug!(\"(resolving pattern) binding `{}`\",\n                                    token::get_name(renamed));\n \n-                            let def = DefLocal(pattern.id, binding_mode);\n+                            let def = DefLocal(pattern.id);\n \n                             // Record the definition so that later passes\n                             // will be able to distinguish variants from"}, {"sha": "4073aeb3890da518ccc552e1bb8c50962be08851", "filename": "src/librustc/middle/save/mod.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6543c5b9a42144eb7036dccbef6e447a41f95485/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6543c5b9a42144eb7036dccbef6e447a41f95485/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs?ref=6543c5b9a42144eb7036dccbef6e447a41f95485", "patch": "@@ -230,7 +230,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n             def::DefAssociatedTy(..) |\n             def::DefTrait(_) => Some(recorder::TypeRef),\n             def::DefStatic(_, _) |\n-            def::DefLocal(_, _) |\n+            def::DefLocal(_) |\n             def::DefVariant(_, _, _) |\n             def::DefUpvar(_, _, _, _) => Some(recorder::VarRef),\n \n@@ -737,18 +737,14 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n         let def = def_map.get(&ex.id);\n         let sub_span = self.span.span_for_last_ident(ex.span);\n         match *def {\n-            def::DefUpvar(id, _, _, _) |\n-            def::DefLocal(id, _) => self.fmt.ref_str(recorder::VarRef,\n-                                                     ex.span,\n-                                                     sub_span,\n-                                                     ast_util::local_def(id),\n-                                                     self.cur_scope),\n-            def::DefStatic(def_id,_) |\n-            def::DefVariant(_, def_id, _) => self.fmt.ref_str(recorder::VarRef,\n-                                                              ex.span,\n-                                                              sub_span,\n-                                                              def_id,\n-                                                              self.cur_scope),\n+            def::DefUpvar(..) |\n+            def::DefLocal(..) |\n+            def::DefStatic(..) |\n+            def::DefVariant(..) => self.fmt.ref_str(recorder::VarRef,\n+                                                    ex.span,\n+                                                    sub_span,\n+                                                    def.def_id(),\n+                                                    self.cur_scope),\n             def::DefStruct(def_id) => self.fmt.ref_str(recorder::StructRef,\n                                                        ex.span,\n                                                        sub_span,\n@@ -809,7 +805,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n             def::DefStaticMethod(_, _, _) => {\n                 self.write_sub_path_trait_truncated(path);\n             },\n-            def::DefLocal(_, _) |\n+            def::DefLocal(_) |\n             def::DefStatic(_,_) |\n             def::DefStruct(_) |\n             def::DefFn(_, _) => self.write_sub_paths_truncated(path),\n@@ -1377,12 +1373,12 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n             }\n             let def = def_map.get(&id);\n             match *def {\n-                def::DefLocal(id, _)  => self.fmt.variable_str(p.span,\n-                                                               sub_span,\n-                                                               id,\n-                                                               path_to_string(p).as_slice(),\n-                                                               value.as_slice(),\n-                                                               \"\"),\n+                def::DefLocal(id)  => self.fmt.variable_str(p.span,\n+                                                            sub_span,\n+                                                            id,\n+                                                            path_to_string(p).as_slice(),\n+                                                            value.as_slice(),\n+                                                            \"\"),\n                 def::DefVariant(_,id,_) => self.fmt.ref_str(ref_kind,\n                                                             p.span,\n                                                             sub_span,"}, {"sha": "afd6e310a4bc4285767a6cce9584a6be3fc7c6ef", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6543c5b9a42144eb7036dccbef6e447a41f95485/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6543c5b9a42144eb7036dccbef6e447a41f95485/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=6543c5b9a42144eb7036dccbef6e447a41f95485", "patch": "@@ -1226,7 +1226,7 @@ pub fn trans_match<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n fn is_discr_reassigned(bcx: Block, discr: &ast::Expr, body: &ast::Expr) -> bool {\n     match discr.node {\n         ast::ExprPath(..) => match bcx.def(discr.id) {\n-            def::DefLocal(vid, _) | def::DefUpvar(vid, _, _, _) => {\n+            def::DefLocal(vid) | def::DefUpvar(vid, _, _, _) => {\n                 let mut rc = ReassignmentChecker {\n                     node: vid,\n                     reassigned: false"}, {"sha": "1cfc1812173e8eac23f5065f558a672277d6ffd2", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6543c5b9a42144eb7036dccbef6e447a41f95485/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6543c5b9a42144eb7036dccbef6e447a41f95485/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=6543c5b9a42144eb7036dccbef6e447a41f95485", "patch": "@@ -1188,7 +1188,7 @@ pub fn trans_local_var<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 }\n             }\n         }\n-        def::DefLocal(nid, _) => {\n+        def::DefLocal(nid) => {\n             let datum = match bcx.fcx.lllocals.borrow().find(&nid) {\n                 Some(&v) => v,\n                 None => {"}, {"sha": "5134bcf8cb1c59302e12ae748b994689fa2d9c07", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6543c5b9a42144eb7036dccbef6e447a41f95485/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6543c5b9a42144eb7036dccbef6e447a41f95485/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=6543c5b9a42144eb7036dccbef6e447a41f95485", "patch": "@@ -5027,7 +5027,7 @@ pub fn polytype_for_def(fcx: &FnCtxt,\n                         defn: def::Def)\n                         -> Polytype {\n     match defn {\n-      def::DefLocal(nid, _) => {\n+      def::DefLocal(nid) => {\n           let typ = fcx.local_ty(sp, nid);\n           return no_params(typ);\n       }"}, {"sha": "62e2ef6f2c77d27fdb20ac4b5e0e84e257ba7d92", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6543c5b9a42144eb7036dccbef6e447a41f95485/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6543c5b9a42144eb7036dccbef6e447a41f95485/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=6543c5b9a42144eb7036dccbef6e447a41f95485", "patch": "@@ -242,7 +242,7 @@ fn region_of_def(fcx: &FnCtxt, def: def::Def) -> ty::Region {\n \n     let tcx = fcx.tcx();\n     match def {\n-        def::DefLocal(node_id, _) => {\n+        def::DefLocal(node_id) => {\n             tcx.region_maps.var_region(node_id)\n         }\n         def::DefUpvar(_, subdef, closure_id, body_id) => {"}]}