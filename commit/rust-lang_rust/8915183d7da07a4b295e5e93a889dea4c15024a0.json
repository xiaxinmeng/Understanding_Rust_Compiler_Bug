{"sha": "8915183d7da07a4b295e5e93a889dea4c15024a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MTUxODNkN2RhMDdhNGIyOTVlNWU5M2E4ODlkZWE0YzE1MDI0YTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-31T07:59:38Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-31T07:59:38Z"}, "message": "Don't require module docs for Features and Assists", "tree": {"sha": "de6a3d149911cc56e4e962a8276edb135c6e188a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de6a3d149911cc56e4e962a8276edb135c6e188a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8915183d7da07a4b295e5e93a889dea4c15024a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8915183d7da07a4b295e5e93a889dea4c15024a0", "html_url": "https://github.com/rust-lang/rust/commit/8915183d7da07a4b295e5e93a889dea4c15024a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8915183d7da07a4b295e5e93a889dea4c15024a0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f593393ebb9bfa515caf168a9f037324eeb6edfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/f593393ebb9bfa515caf168a9f037324eeb6edfe", "html_url": "https://github.com/rust-lang/rust/commit/f593393ebb9bfa515caf168a9f037324eeb6edfe"}], "stats": {"total": 185, "additions": 140, "deletions": 45}, "files": [{"sha": "776bddf918a9188209eb4989046b8ecbd07c8261", "filename": "crates/ra_assists/src/handlers/add_from_impl_for_enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8915183d7da07a4b295e5e93a889dea4c15024a0/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8915183d7da07a4b295e5e93a889dea4c15024a0/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs?ref=8915183d7da07a4b295e5e93a889dea4c15024a0", "patch": "@@ -4,9 +4,9 @@ use test_utils::mark;\n \n use crate::{utils::FamousDefs, AssistContext, AssistId, Assists};\n \n-// Assist add_from_impl_for_enum\n+// Assist: add_from_impl_for_enum\n //\n-// Adds a From impl for an enum variant with one tuple field\n+// Adds a From impl for an enum variant with one tuple field.\n //\n // ```\n // enum A { <|>One(u32) }"}, {"sha": "4e0536828c2639de7b093889428048c0deaf0a91", "filename": "crates/ra_assists/src/tests/generated.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8915183d7da07a4b295e5e93a889dea4c15024a0/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8915183d7da07a4b295e5e93a889dea4c15024a0/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=8915183d7da07a4b295e5e93a889dea4c15024a0", "patch": "@@ -58,6 +58,25 @@ fn main() {\n     )\n }\n \n+#[test]\n+fn doctest_add_from_impl_for_enum() {\n+    check_doc_test(\n+        \"add_from_impl_for_enum\",\n+        r#####\"\n+enum A { <|>One(u32) }\n+\"#####,\n+        r#####\"\n+enum A { One(u32) }\n+\n+impl From<u32> for A {\n+    fn from(v: u32) -> Self {\n+        A::One(v)\n+    }\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_add_function() {\n     check_doc_test("}, {"sha": "aad5a8e4db69b5d4b57a7b4c0ca8567abaa6b9cb", "filename": "crates/ra_ide/src/display/structure.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8915183d7da07a4b295e5e93a889dea4c15024a0/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fstructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8915183d7da07a4b295e5e93a889dea4c15024a0/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fstructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fstructure.rs?ref=8915183d7da07a4b295e5e93a889dea4c15024a0", "patch": "@@ -1,10 +1,6 @@\n-//! FIXME: write short doc here\n-\n-use crate::TextRange;\n-\n use ra_syntax::{\n     ast::{self, AttrsOwner, NameOwner, TypeAscriptionOwner, TypeParamsOwner},\n-    match_ast, AstNode, SourceFile, SyntaxKind, SyntaxNode, WalkEvent,\n+    match_ast, AstNode, SourceFile, SyntaxKind, SyntaxNode, TextRange, WalkEvent,\n };\n \n #[derive(Debug, Clone)]"}, {"sha": "a4bc93cdbaa74722a70469fe1290fb557a20d1e2", "filename": "crates/ra_ide/src/extend_selection.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8915183d7da07a4b295e5e93a889dea4c15024a0/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8915183d7da07a4b295e5e93a889dea4c15024a0/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs?ref=8915183d7da07a4b295e5e93a889dea4c15024a0", "patch": "@@ -1,5 +1,3 @@\n-//! FIXME: write short doc here\n-\n use std::iter::successors;\n \n use hir::Semantics;"}, {"sha": "a6c86e99c95eb9fc60355c23cd11eeb5ed6acf8d", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8915183d7da07a4b295e5e93a889dea4c15024a0/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8915183d7da07a4b295e5e93a889dea4c15024a0/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=8915183d7da07a4b295e5e93a889dea4c15024a0", "patch": "@@ -1,5 +1,3 @@\n-//! FIXME: write short doc here\n-\n use hir::Semantics;\n use ra_ide_db::{\n     defs::{classify_name, classify_name_ref},"}, {"sha": "0cec0657e416073fccde1255caf6720d7de5f098", "filename": "crates/ra_ide/src/goto_implementation.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8915183d7da07a4b295e5e93a889dea4c15024a0/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8915183d7da07a4b295e5e93a889dea4c15024a0/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs?ref=8915183d7da07a4b295e5e93a889dea4c15024a0", "patch": "@@ -1,5 +1,3 @@\n-//! FIXME: write short doc here\n-\n use hir::{Crate, ImplDef, Semantics};\n use ra_ide_db::RootDatabase;\n use ra_syntax::{algo::find_node_at_offset, ast, AstNode};"}, {"sha": "91a3097fbb3697141eec5fa6d8b023560f618ffa", "filename": "crates/ra_ide/src/goto_type_definition.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8915183d7da07a4b295e5e93a889dea4c15024a0/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8915183d7da07a4b295e5e93a889dea4c15024a0/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs?ref=8915183d7da07a4b295e5e93a889dea4c15024a0", "patch": "@@ -1,5 +1,3 @@\n-//! FIXME: write short doc here\n-\n use ra_ide_db::RootDatabase;\n use ra_syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxToken, TokenAtOffset};\n "}, {"sha": "5036c1fb0c62ee4dea5847d416884d91e3d0a804", "filename": "crates/ra_ide/src/join_lines.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8915183d7da07a4b295e5e93a889dea4c15024a0/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8915183d7da07a4b295e5e93a889dea4c15024a0/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fjoin_lines.rs?ref=8915183d7da07a4b295e5e93a889dea4c15024a0", "patch": "@@ -1,5 +1,3 @@\n-//! FIXME: write short doc here\n-\n use itertools::Itertools;\n use ra_fmt::{compute_ws, extract_trivial_expression};\n use ra_syntax::{\n@@ -11,6 +9,15 @@ use ra_syntax::{\n };\n use ra_text_edit::{TextEdit, TextEditBuilder};\n \n+// Feature: Join Lines\n+//\n+// Join selected lines into one, smartly fixing up whitespace, trailing commas, and braces.\n+//\n+// |===\n+// | Editor  | Action Name\n+//\n+// | VS Code | **Rust Analyzer: Join lines**\n+// |===\n pub fn join_lines(file: &SourceFile, range: TextRange) -> TextEdit {\n     let range = if range.is_empty() {\n         let syntax = file.syntax();"}, {"sha": "407a9636d1d1f7de837ac0dfe053a9556a435f32", "filename": "crates/ra_ide/src/matching_brace.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8915183d7da07a4b295e5e93a889dea4c15024a0/crates%2Fra_ide%2Fsrc%2Fmatching_brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8915183d7da07a4b295e5e93a889dea4c15024a0/crates%2Fra_ide%2Fsrc%2Fmatching_brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fmatching_brace.rs?ref=8915183d7da07a4b295e5e93a889dea4c15024a0", "patch": "@@ -1,7 +1,16 @@\n-//! FIXME: write short doc here\n-\n use ra_syntax::{ast::AstNode, SourceFile, SyntaxKind, TextSize, T};\n \n+// Feature: Matching Brace\n+//\n+// If the cursor is on any brace (`<>(){}[]`) which is a part of a brace-pair,\n+// moves cursor to the matching brace. It uses the actual parser to determine\n+// braces, so it won't confuse generics with comparisons.\n+//\n+// |===\n+// | Editor  | Action Name\n+//\n+// | VS Code | **Rust Analyzer: Find matching brace**\n+// |===\n pub fn matching_brace(file: &SourceFile, offset: TextSize) -> Option<TextSize> {\n     const BRACES: &[SyntaxKind] =\n         &[T!['{'], T!['}'], T!['['], T![']'], T!['('], T![')'], T![<], T![>]];"}, {"sha": "fa1535da5b0a95147316277071b1c13b40cf8c5d", "filename": "crates/ra_ide/src/parent_module.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8915183d7da07a4b295e5e93a889dea4c15024a0/crates%2Fra_ide%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8915183d7da07a4b295e5e93a889dea4c15024a0/crates%2Fra_ide%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fparent_module.rs?ref=8915183d7da07a4b295e5e93a889dea4c15024a0", "patch": "@@ -1,5 +1,3 @@\n-//! FIXME: write short doc here\n-\n use hir::Semantics;\n use ra_db::{CrateId, FileId, FilePosition};\n use ra_ide_db::RootDatabase;\n@@ -11,6 +9,16 @@ use test_utils::mark;\n \n use crate::NavigationTarget;\n \n+// Feature: Parent Module\n+//\n+// Navigates to the parent module of the current module.\n+//\n+// |===\n+// | Editor  | Action Name\n+//\n+// | VS Code | **Rust Analyzer: Locate parent module**\n+// |===\n+\n /// This returns `Vec` because a module may be included from several places. We\n /// don't handle this case yet though, so the Vec has length at most one.\n pub(crate) fn parent_module(db: &RootDatabase, position: FilePosition) -> Vec<NavigationTarget> {"}, {"sha": "286d45eee952c55cbad03be06791cc942590af65", "filename": "crates/ra_ide/src/runnables.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8915183d7da07a4b295e5e93a889dea4c15024a0/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8915183d7da07a4b295e5e93a889dea4c15024a0/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Frunnables.rs?ref=8915183d7da07a4b295e5e93a889dea4c15024a0", "patch": "@@ -1,5 +1,3 @@\n-//! FIXME: write short doc here\n-\n use hir::{AsAssocItem, Attrs, HirFileId, InFile, Semantics};\n use itertools::Itertools;\n use ra_ide_db::RootDatabase;"}, {"sha": "2192f509041cd1183e35329094062d06d75c9229", "filename": "crates/ra_ide/src/syntax_tree.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8915183d7da07a4b295e5e93a889dea4c15024a0/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8915183d7da07a4b295e5e93a889dea4c15024a0/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs?ref=8915183d7da07a4b295e5e93a889dea4c15024a0", "patch": "@@ -1,5 +1,3 @@\n-//! FIXME: write short doc here\n-\n use ra_db::SourceDatabase;\n use ra_ide_db::RootDatabase;\n use ra_syntax::{\n@@ -8,8 +6,16 @@ use ra_syntax::{\n     SyntaxToken, TextRange, TextSize,\n };\n \n-pub use ra_db::FileId;\n-\n+// Feature: Show Syntax Tree\n+//\n+// Shows the parse tree of the current file. It exists mostly for debugging\n+// rust-analyzer itself.\n+//\n+// |===\n+// | Editor  | Action Name\n+//\n+// | VS Code | **Rust Analyzer: Show Syntax Tree**\n+// |===\n pub(crate) fn syntax_tree(\n     db: &RootDatabase,\n     file_id: FileId,"}, {"sha": "b5d813b546f8af4e02b5ac39348549dade79ebc3", "filename": "docs/user/assists.md", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8915183d7da07a4b295e5e93a889dea4c15024a0/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/8915183d7da07a4b295e5e93a889dea4c15024a0/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=8915183d7da07a4b295e5e93a889dea4c15024a0", "patch": "@@ -56,6 +56,24 @@ fn main() {\n }\n ```\n \n+## `add_from_impl_for_enum`\n+\n+Adds a From impl for an enum variant with one tuple field.\n+\n+```rust\n+// BEFORE\n+enum A { \u2503One(u32) }\n+\n+// AFTER\n+enum A { One(u32) }\n+\n+impl From<u32> for A {\n+    fn from(v: u32) -> Self {\n+        A::One(v)\n+    }\n+}\n+```\n+\n ## `add_function`\n \n Adds a stub function with a signature matching the function under the cursor."}, {"sha": "ba7ca15a6b4b53ac95761517f017ba0b8a8d3e75", "filename": "docs/user/features.md", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8915183d7da07a4b295e5e93a889dea4c15024a0/docs%2Fuser%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/8915183d7da07a4b295e5e93a889dea4c15024a0/docs%2Fuser%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Ffeatures.md?ref=8915183d7da07a4b295e5e93a889dea4c15024a0", "patch": "@@ -4,24 +4,8 @@ you can use <kbd>Ctrl+Shift+P</kbd> to search for the corresponding action.\n \n ### Commands <kbd>ctrl+shift+p</kbd>\n \n-#### Parent Module\n \n-Navigates to the parent module of the current module.\n \n-#### Matching Brace\n-\n-If the cursor is on any brace (`<>(){}[]`) which is a part of a brace-pair,\n-moves cursor to the matching brace. It uses the actual parser to determine\n-braces, so it won't confuse generics with comparisons.\n-\n-#### Join Lines\n-\n-Join selected lines into one, smartly fixing up whitespace and trailing commas.\n-\n-#### Show Syntax Tree\n-\n-Shows the parse tree of the current file. It exists mostly for debugging\n-rust-analyzer itself.\n \n #### Expand Macro Recursively\n "}, {"sha": "bf0a36d018385763b3b33628f4fa35758553287b", "filename": "docs/user/generated_features.adoc", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/8915183d7da07a4b295e5e93a889dea4c15024a0/docs%2Fuser%2Fgenerated_features.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/8915183d7da07a4b295e5e93a889dea4c15024a0/docs%2Fuser%2Fgenerated_features.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_features.adoc?ref=8915183d7da07a4b295e5e93a889dea4c15024a0", "patch": "@@ -68,6 +68,34 @@ Navigates to the type of an identifier.\n |===\n \n \n+=== Join Lines\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/join_lines.rs[join_lines.rs]\n+\n+\n+Join selected lines into one, smartly fixing up whitespace, trailing commas, and braces.\n+\n+|===\n+| Editor  | Action Name\n+\n+| VS Code | **Rust Analyzer: Join lines**\n+|===\n+\n+\n+=== Matching Brace\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/matching_brace.rs[matching_brace.rs]\n+\n+\n+If the cursor is on any brace (`<>(){}[]`) which is a part of a brace-pair,\n+moves cursor to the matching brace. It uses the actual parser to determine\n+braces, so it won't confuse generics with comparisons.\n+\n+|===\n+| Editor  | Action Name\n+\n+| VS Code | **Rust Analyzer: Find matching brace**\n+|===\n+\n+\n === On Typing Assists\n **Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/typing.rs[typing.rs]\n \n@@ -79,6 +107,19 @@ Some features trigger on typing certain characters:\n - typing `.` in a chain method call auto-indents\n \n \n+=== Parent Module\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/parent_module.rs[parent_module.rs]\n+\n+\n+Navigates to the parent module of the current module.\n+\n+|===\n+| Editor  | Action Name\n+\n+| VS Code | **Rust Analyzer: Locate parent module**\n+|===\n+\n+\n === Run\n **Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/runnables.rs[runnables.rs]\n \n@@ -94,6 +135,20 @@ to a shortcut!\n |===\n \n \n+=== Show Syntax Tree\n+**Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide/src/syntax_tree.rs[syntax_tree.rs]\n+\n+\n+Shows the parse tree of the current file. It exists mostly for debugging\n+rust-analyzer itself.\n+\n+|===\n+| Editor  | Action Name\n+\n+| VS Code | **Rust Analyzer: Show Syntax Tree**\n+|===\n+\n+\n === Workspace Symbol\n **Source:** https://github.com/rust-analyzer/rust-analyzer/blob/master/crates/ra_ide_db/src/symbol_index.rs[symbol_index.rs]\n "}, {"sha": "4ac5d929fc6b6f7b2c0285755379769adcccfde4", "filename": "xtask/tests/tidy.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8915183d7da07a4b295e5e93a889dea4c15024a0/xtask%2Ftests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8915183d7da07a4b295e5e93a889dea4c15024a0/xtask%2Ftests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy.rs?ref=8915183d7da07a4b295e5e93a889dea4c15024a0", "patch": "@@ -102,7 +102,7 @@ impl TidyDocs {\n     fn visit(&mut self, path: &Path, text: &str) {\n         // Test hopefully don't really need comments, and for assists we already\n         // have special comments which are source of doc tests and user docs.\n-        if is_exclude_dir(path, &[\"tests\", \"test_data\", \"handlers\"]) {\n+        if is_exclude_dir(path, &[\"tests\", \"test_data\"]) {\n             return;\n         }\n \n@@ -117,9 +117,12 @@ impl TidyDocs {\n \n         if first_line.starts_with(\"//!\") {\n             if first_line.contains(\"FIXME\") {\n-                self.contains_fixme.push(path.to_path_buf())\n+                self.contains_fixme.push(path.to_path_buf());\n             }\n         } else {\n+            if text.contains(\"// Feature:\") || text.contains(\"// Assist:\") {\n+                return;\n+            }\n             self.missing_docs.push(path.display().to_string());\n         }\n "}]}