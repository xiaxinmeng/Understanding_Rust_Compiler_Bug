{"sha": "0e493160c0cdbaa71f61af64fd7c439410e8c8b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNDkzMTYwYzBjZGJhYTcxZjYxYWY2NGZkN2M0Mzk0MTBlOGM4YjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-12T14:16:58Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-15T21:00:05Z"}, "message": "store params in the graph", "tree": {"sha": "91e07c84f547f91cd4ccdd60cf3c5605ee77834e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91e07c84f547f91cd4ccdd60cf3c5605ee77834e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e493160c0cdbaa71f61af64fd7c439410e8c8b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e493160c0cdbaa71f61af64fd7c439410e8c8b1", "html_url": "https://github.com/rust-lang/rust/commit/0e493160c0cdbaa71f61af64fd7c439410e8c8b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e493160c0cdbaa71f61af64fd7c439410e8c8b1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "907d44a75113d318102ff05a66b4dcdafa1b5e7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/907d44a75113d318102ff05a66b4dcdafa1b5e7f", "html_url": "https://github.com/rust-lang/rust/commit/907d44a75113d318102ff05a66b4dcdafa1b5e7f"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "d30e75fe2b6b95b4a677d21831629c9a3637f9ed", "filename": "crates/libanalysis/src/db.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0e493160c0cdbaa71f61af64fd7c439410e8c8b1/crates%2Flibanalysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e493160c0cdbaa71f61af64fd7c439410e8c8b1/crates%2Flibanalysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fdb.rs?ref=0e493160c0cdbaa71f61af64fd7c439410e8c8b1", "patch": "@@ -91,12 +91,13 @@ impl Clone for Db {\n     }\n }\n \n+type QueryDeps = Vec<(QueryInvocationId, Arc<Any>, OutputHash)>;\n \n #[derive(Default, Debug)]\n pub(crate) struct Cache {\n     gen: Gen,\n     green: im::HashMap<QueryInvocationId, (Gen, OutputHash)>,\n-    deps: im::HashMap<QueryInvocationId, Vec<(QueryInvocationId, OutputHash)>>,\n+    deps: im::HashMap<QueryInvocationId, QueryDeps>,\n     results: im::HashMap<QueryInvocationId, Arc<Any>>,\n }\n \n@@ -124,7 +125,7 @@ impl Cache {\n \n pub(crate) struct QueryCtx {\n     db: Arc<Db>,\n-    stack: RefCell<Vec<(QueryInvocationId, Vec<(QueryInvocationId, OutputHash)>)>>,\n+    stack: RefCell<Vec<(QueryInvocationId, QueryDeps)>>,\n     pub(crate) trace: RefCell<Vec<TraceEvent>>,\n }\n \n@@ -148,7 +149,8 @@ impl QueryCtx {\n         {\n             let mut stack = self.stack.borrow_mut();\n             if let Some((_, ref mut deps)) = stack.last_mut() {\n-                deps.push((me, output_hash::<Q>(&res)));\n+                let params = Arc::new(params.clone());\n+                deps.push((me, params, output_hash::<Q>(&res)));\n             }\n         }\n \n@@ -161,7 +163,7 @@ impl QueryCtx {\n \n pub(crate) trait Query {\n     const ID: u32;\n-    type Params: Hash + Eq + Debug + Any + 'static;\n+    type Params: Hash + Eq + Debug + Clone + Any + 'static;\n     type Output: Hash + Debug + Any + 'static;\n }\n \n@@ -212,7 +214,7 @@ where\n     };\n     let deps_are_fresh = cache.deps[&id]\n         .iter()\n-        .all(|&(dep_id, dep_hash)| {\n+        .all(|&(dep_id, _, dep_hash)| {\n             match cache.green.get(&dep_id) {\n                 //TODO: store the value of parameters, and re-execute the query\n                 Some((gen, hash)) if gen == &curr_gen && hash == &dep_hash => true,"}]}