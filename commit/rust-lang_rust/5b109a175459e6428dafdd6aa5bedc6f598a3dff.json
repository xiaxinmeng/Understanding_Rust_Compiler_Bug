{"sha": "5b109a175459e6428dafdd6aa5bedc6f598a3dff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMTA5YTE3NTQ1OWU2NDI4ZGFmZGQ2YWE1YmVkYzZmNTk4YTNkZmY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-04-11T10:18:19Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-04-11T13:10:22Z"}, "message": "Add more type signatures to the docs; tweak a few of them.\n\nSomeone reading the docs won't know what the types of various things\nare, so this adds them in a few meaningful places to help with\ncomprehension.\n\ncc #13423.", "tree": {"sha": "394de554cba4592a1ceb3bd8ed1b5f4091101625", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/394de554cba4592a1ceb3bd8ed1b5f4091101625"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b109a175459e6428dafdd6aa5bedc6f598a3dff", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b109a175459e6428dafdd6aa5bedc6f598a3dff", "html_url": "https://github.com/rust-lang/rust/commit/5b109a175459e6428dafdd6aa5bedc6f598a3dff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b109a175459e6428dafdd6aa5bedc6f598a3dff/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0156af156d70efd5a3c96d0c5b8fc9bec39a7ae5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0156af156d70efd5a3c96d0c5b8fc9bec39a7ae5", "html_url": "https://github.com/rust-lang/rust/commit/0156af156d70efd5a3c96d0c5b8fc9bec39a7ae5"}], "stats": {"total": 71, "additions": 44, "deletions": 27}, "files": [{"sha": "3289475b184bdd9ad6baf873b39aa5f8a38eaaba", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5b109a175459e6428dafdd6aa5bedc6f598a3dff/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b109a175459e6428dafdd6aa5bedc6f598a3dff/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=5b109a175459e6428dafdd6aa5bedc6f598a3dff", "patch": "@@ -276,16 +276,22 @@ references information on the stack. Under the hood, all of\n the related macros are implemented in terms of this. First\n off, some example usage is:\n \n-```ignore\n+```\n use std::fmt;\n+use std::io;\n \n-# fn lol<T>() -> T { fail!() }\n-# let my_writer: &mut ::std::io::Writer = lol();\n-# let my_fn: fn(&fmt::Arguments) = lol();\n-\n+# #[allow(unused_must_use)]\n+# fn main() {\n format_args!(fmt::format, \"this returns {}\", \"~str\");\n-format_args!(|args| { fmt::write(my_writer, args) }, \"some {}\", \"args\");\n-format_args!(my_fn, \"format {}\", \"string\");\n+\n+let some_writer: &mut io::Writer = &mut io::stdout();\n+format_args!(|args| { fmt::write(some_writer, args) }, \"print with a {}\", \"closure\");\n+\n+fn my_fmt_fn(args: &fmt::Arguments) {\n+    fmt::write(&mut io::stdout(), args);\n+}\n+format_args!(my_fmt_fn, \"or a {} too\", \"function\");\n+# }\n ```\n \n The first argument of the `format_args!` macro is a function (or closure) which"}, {"sha": "ccff857f6067b3050df260a022d41d243442ab32", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5b109a175459e6428dafdd6aa5bedc6f598a3dff/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b109a175459e6428dafdd6aa5bedc6f598a3dff/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=5b109a175459e6428dafdd6aa5bedc6f598a3dff", "patch": "@@ -97,8 +97,8 @@ Some examples of obvious things you might want to do\n     ```rust\n     # fn main() { }\n     # fn foo() {\n-    # #[allow(unused_must_use, dead_code)];\n-    use std::io::net::tcp::TcpListener;\n+    # #![allow(dead_code)]\n+    use std::io::{TcpListener, TcpStream};\n     use std::io::net::ip::{Ipv4Addr, SocketAddr};\n     use std::io::{Acceptor, Listener};\n \n@@ -108,12 +108,19 @@ Some examples of obvious things you might want to do\n     // bind the listener to the specified address\n     let mut acceptor = listener.listen();\n \n-    // accept connections and process them\n-    # fn handle_client<T>(_: T) {}\n+    fn handle_client(mut stream: TcpStream) {\n+        // ...\n+    # &mut stream; // silence unused mutability/variable warning\n+    }\n+    // accept connections and process them, spawning a new tasks for each one\n     for stream in acceptor.incoming() {\n-        spawn(proc() {\n-            handle_client(stream);\n-        });\n+        match stream {\n+            Err(e) => { /* connection failed */ }\n+            Ok(stream) => spawn(proc() {\n+                // connection succeeded\n+                handle_client(stream)\n+            })\n+        }\n     }\n \n     // close the socket server"}, {"sha": "2253b22796f07392ab3a2983e12358da5f3c29cd", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5b109a175459e6428dafdd6aa5bedc6f598a3dff/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b109a175459e6428dafdd6aa5bedc6f598a3dff/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=5b109a175459e6428dafdd6aa5bedc6f598a3dff", "patch": "@@ -100,10 +100,10 @@ impl Writer for TcpStream {\n /// # Example\n ///\n /// ```rust\n-/// # fn main() {}\n+/// # fn main() { }\n /// # fn foo() {\n-/// # #[allow(unused_must_use, dead_code)];\n-/// use std::io::net::tcp::TcpListener;\n+/// # #![allow(dead_code)]\n+/// use std::io::{TcpListener, TcpStream};\n /// use std::io::net::ip::{Ipv4Addr, SocketAddr};\n /// use std::io::{Acceptor, Listener};\n ///\n@@ -113,12 +113,19 @@ impl Writer for TcpStream {\n /// // bind the listener to the specified address\n /// let mut acceptor = listener.listen();\n ///\n-/// // accept connections and process them\n-/// # fn handle_client<T>(_: T) {}\n+/// fn handle_client(mut stream: TcpStream) {\n+///     // ...\n+/// # &mut stream; // silence unused mutability/variable warning\n+/// }\n+/// // accept connections and process them, spawning a new tasks for each one\n /// for stream in acceptor.incoming() {\n-///     spawn(proc() {\n-///         handle_client(stream);\n-///     });\n+///     match stream {\n+///         Err(e) => { /* connection failed */ }\n+///         Ok(stream) => spawn(proc() {\n+///             // connection succeeded\n+///             handle_client(stream)\n+///         })\n+///     }\n /// }\n ///\n /// // close the socket server\n@@ -728,4 +735,3 @@ mod test {\n         assert_eq!(s.read_to_end(), Ok(vec!(1)));\n     })\n }\n-"}, {"sha": "e6b71b502c21b7617aa2853a1ae1a9ff0974e24f", "filename": "src/libstd/sync/atomics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b109a175459e6428dafdd6aa5bedc6f598a3dff/src%2Flibstd%2Fsync%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b109a175459e6428dafdd6aa5bedc6f598a3dff/src%2Flibstd%2Fsync%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fatomics.rs?ref=5b109a175459e6428dafdd6aa5bedc6f598a3dff", "patch": "@@ -157,7 +157,7 @@ pub struct AtomicOption<T> {\n ///\n /// Rust's memory orderings are the same as in C++[1].\n ///\n-/// [1]: http://gcc.gnu.org/wiki/Atomic/GCCMM/AtomicSync\n+/// 1: http://gcc.gnu.org/wiki/Atomic/GCCMM/AtomicSync\n pub enum Ordering {\n     /// No ordering constraints, only atomic operations\n     Relaxed,"}, {"sha": "c98ef880c10d5299376e93bb8fb041d9999e89cb", "filename": "src/libstd/unstable/finally.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b109a175459e6428dafdd6aa5bedc6f598a3dff/src%2Flibstd%2Funstable%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b109a175459e6428dafdd6aa5bedc6f598a3dff/src%2Flibstd%2Funstable%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Ffinally.rs?ref=5b109a175459e6428dafdd6aa5bedc6f598a3dff", "patch": "@@ -21,12 +21,11 @@ also be used. See that function for more details.\n \n ```\n use std::unstable::finally::Finally;\n-# fn always_run_this() {}\n \n (|| {\n     // ...\n }).finally(|| {\n-    always_run_this();\n+    // this code is always run\n })\n ```\n */\n@@ -158,4 +157,3 @@ fn test_compact() {\n     do_some_fallible_work.finally(\n         but_always_run_this_function);\n }\n-"}]}