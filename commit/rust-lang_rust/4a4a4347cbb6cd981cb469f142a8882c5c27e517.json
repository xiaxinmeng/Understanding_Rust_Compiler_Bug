{"sha": "4a4a4347cbb6cd981cb469f142a8882c5c27e517", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNGE0MzQ3Y2JiNmNkOTgxY2I0NjlmMTQyYTg4ODJjNWMyN2U1MTc=", "commit": {"author": {"name": "Brian Koropoff", "email": "bkoropoff@gmail.com", "date": "2014-10-17T04:53:57Z"}, "committer": {"name": "Brian Koropoff", "email": "bkoropoff@gmail.com", "date": "2014-10-17T04:57:08Z"}, "message": "Fix translation of unboxing shim for rust-call ABI methods\n\nWhen translating the unboxing shim, account for the fact that the shim\ntranslation has already performed the necessary unboxing of input\ntypes and values when forwarding to the shimmed function.  This\nprevents ICEing or generating incorrect code.\n\nCloses #16739", "tree": {"sha": "7ee561919334d6716c45440830a1c6ef5962af23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ee561919334d6716c45440830a1c6ef5962af23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a4a4347cbb6cd981cb469f142a8882c5c27e517", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a4a4347cbb6cd981cb469f142a8882c5c27e517", "html_url": "https://github.com/rust-lang/rust/commit/4a4a4347cbb6cd981cb469f142a8882c5c27e517", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a4a4347cbb6cd981cb469f142a8882c5c27e517/comments", "author": {"login": "bkoropoff", "id": 2101303, "node_id": "MDQ6VXNlcjIxMDEzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/2101303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkoropoff", "html_url": "https://github.com/bkoropoff", "followers_url": "https://api.github.com/users/bkoropoff/followers", "following_url": "https://api.github.com/users/bkoropoff/following{/other_user}", "gists_url": "https://api.github.com/users/bkoropoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkoropoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkoropoff/subscriptions", "organizations_url": "https://api.github.com/users/bkoropoff/orgs", "repos_url": "https://api.github.com/users/bkoropoff/repos", "events_url": "https://api.github.com/users/bkoropoff/events{/privacy}", "received_events_url": "https://api.github.com/users/bkoropoff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bkoropoff", "id": 2101303, "node_id": "MDQ6VXNlcjIxMDEzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/2101303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkoropoff", "html_url": "https://github.com/bkoropoff", "followers_url": "https://api.github.com/users/bkoropoff/followers", "following_url": "https://api.github.com/users/bkoropoff/following{/other_user}", "gists_url": "https://api.github.com/users/bkoropoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkoropoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkoropoff/subscriptions", "organizations_url": "https://api.github.com/users/bkoropoff/orgs", "repos_url": "https://api.github.com/users/bkoropoff/repos", "events_url": "https://api.github.com/users/bkoropoff/events{/privacy}", "received_events_url": "https://api.github.com/users/bkoropoff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1600e0b93c4edf10bce71fbb68d383827c40a153", "url": "https://api.github.com/repos/rust-lang/rust/commits/1600e0b93c4edf10bce71fbb68d383827c40a153", "html_url": "https://github.com/rust-lang/rust/commit/1600e0b93c4edf10bce71fbb68d383827c40a153"}], "stats": {"total": 36, "additions": 30, "deletions": 6}, "files": [{"sha": "3bfd03da2834e4997facf085ffcb05965b6d70a8", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4a4a4347cbb6cd981cb469f142a8882c5c27e517/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4a4347cbb6cd981cb469f142a8882c5c27e517/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=4a4a4347cbb6cd981cb469f142a8882c5c27e517", "patch": "@@ -281,8 +281,32 @@ pub fn trans_unboxing_shim(bcx: Block,\n     };\n     let boxed_function_type =\n         ty::mk_bare_fn(tcx, boxed_function_type).subst(tcx, &substs);\n-    let function_type =\n-        ty::mk_bare_fn(tcx, (*fty).clone()).subst(tcx, &substs);\n+    let function_type = match fty.abi {\n+        synabi::RustCall => {\n+            // We're passing through to a RustCall ABI function, but\n+            // because the shim will already perform untupling, we\n+            // need to pretend the shimmed function does not use\n+            // RustCall so the untupled arguments can be passed\n+            // through verbatim.  This is kind of ugly.\n+            let fake_ty = ty::FnSig {\n+                binder_id: fty.sig.binder_id,\n+                inputs: type_of::untuple_arguments_if_necessary(ccx,\n+                                                                fty.sig.inputs.as_slice(),\n+                                                                fty.abi),\n+                output: fty.sig.output,\n+                variadic: false,\n+            };\n+            let fake_ty = ty::BareFnTy {\n+                fn_style: fty.fn_style,\n+                abi: synabi::Rust,\n+                sig: fake_ty,\n+            };\n+            ty::mk_bare_fn(tcx, fake_ty).subst(tcx, &substs)\n+        }\n+        _ => {\n+            ty::mk_bare_fn(tcx, (*fty).clone()).subst(tcx, &substs)\n+        }\n+    };\n \n     let function_name = ty::with_path(tcx, method_id, |path| {\n         link::mangle_internal_name_by_path_and_seq(path, \"unboxing_shim\")"}, {"sha": "9c8f051332ac5d19c40ad2508e78b8c2a03e82bf", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a4a4347cbb6cd981cb469f142a8882c5c27e517/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4a4347cbb6cd981cb469f142a8882c5c27e517/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=4a4a4347cbb6cd981cb469f142a8882c5c27e517", "patch": "@@ -44,10 +44,10 @@ pub fn type_of_explicit_arg(ccx: &CrateContext, arg_ty: ty::t) -> Type {\n /// Yields the types of the \"real\" arguments for this function. For most\n /// functions, these are simply the types of the arguments. For functions with\n /// the `RustCall` ABI, however, this untuples the arguments of the function.\n-fn untuple_arguments_if_necessary(ccx: &CrateContext,\n-                                  inputs: &[ty::t],\n-                                  abi: abi::Abi)\n-                                  -> Vec<ty::t> {\n+pub fn untuple_arguments_if_necessary(ccx: &CrateContext,\n+                                      inputs: &[ty::t],\n+                                      abi: abi::Abi)\n+                                      -> Vec<ty::t> {\n     if abi != abi::RustCall {\n         return inputs.iter().map(|x| (*x).clone()).collect()\n     }"}]}