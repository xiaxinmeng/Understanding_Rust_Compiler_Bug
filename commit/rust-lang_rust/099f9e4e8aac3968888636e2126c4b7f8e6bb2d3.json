{"sha": "099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5OWY5ZTRlOGFhYzM5Njg4ODg2MzZlMjEyNmM0YjdmOGU2YmIyZDM=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-06-24T15:46:09Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-06-25T13:46:23Z"}, "message": "Implement From<Local> for Place and PlaceBase", "tree": {"sha": "7ed580c24c0258d44340615df8f8552d658575ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ed580c24c0258d44340615df8f8552d658575ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "html_url": "https://github.com/rust-lang/rust/commit/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10deeae3263301f1d337721ed55c14637b70c3c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/10deeae3263301f1d337721ed55c14637b70c3c7", "html_url": "https://github.com/rust-lang/rust/commit/10deeae3263301f1d337721ed55c14637b70c3c7"}], "stats": {"total": 219, "additions": 114, "deletions": 105}, "files": [{"sha": "9b1808c585ce7f605b72bea27f06f77266555780", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -2096,6 +2096,18 @@ impl<'tcx> Place<'tcx> {\n     }\n }\n \n+impl From<Local> for Place<'_> {\n+    fn from(local: Local) -> Self {\n+        Place::Base(local.into())\n+    }\n+}\n+\n+impl From<Local> for PlaceBase<'_> {\n+    fn from(local: Local) -> Self {\n+        PlaceBase::Local(local)\n+    }\n+}\n+\n /// A linked list of projections running up the stack; begins with the\n /// innermost projection and extends to the outermost (e.g., `a.b.c`\n /// would have the place `b` with a \"next\" pointer to `b.c`)."}, {"sha": "be5d7b09965d439c5a7202ab97b44b5f9e9a6713", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -470,7 +470,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     }\n                     mir::ProjectionElem::Index(index) => {\n                         let index = &mir::Operand::Copy(\n-                            mir::Place::Base(mir::PlaceBase::Local(index))\n+                            mir::Place::from(index)\n                         );\n                         let index = self.codegen_operand(bx, index);\n                         let llindex = index.immediate();"}, {"sha": "10c9a439bf70f23e12edbb6452262e211f4a88d6", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -627,7 +627,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     def_id, is_generator, places\n                 );\n                 if let Some((args_span, var_span)) = self.closure_span(\n-                    *def_id, &Place::Base(PlaceBase::Local(target)), places\n+                    *def_id, &Place::from(target), places\n                 ) {\n                     return ClosureUse {\n                         is_generator,"}, {"sha": "4872440f5bd4ae371b7a7eb37ee87e0498557179", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -620,7 +620,7 @@ impl<'cx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx\n             StatementKind::StorageDead(local) => {\n                 self.access_place(\n                     location,\n-                    (&Place::Base(PlaceBase::Local(local)), span),\n+                    (&Place::from(local), span),\n                     (Shallow(None), Write(WriteKind::StorageDeadOrDrop)),\n                     LocalMutationIsAllowed::Yes,\n                     flow_state,"}, {"sha": "ed88b16253584634bb1db1426144ad06cc4f47a8", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -252,7 +252,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             Some(Cause::LiveVar(local, location)) => {\n                 let span = body.source_info(location).span;\n                 let spans = self\n-                    .move_spans(&Place::Base(PlaceBase::Local(local)), location)\n+                    .move_spans(&Place::from(local), location)\n                     .or_else(|| self.borrow_spans(span, location));\n \n                 let borrow_location = location;"}, {"sha": "c7b4a403052591d4bdd808731f4fe6194d404f88", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -11,7 +11,7 @@ use crate::borrow_check::path_utils::*;\n use crate::dataflow::indexes::BorrowIndex;\n use rustc::ty::TyCtxt;\n use rustc::mir::visit::Visitor;\n-use rustc::mir::{BasicBlock, Location, Body, Place, PlaceBase, Rvalue};\n+use rustc::mir::{BasicBlock, Location, Body, Place, Rvalue};\n use rustc::mir::{Statement, StatementKind};\n use rustc::mir::TerminatorKind;\n use rustc::mir::{Operand, BorrowKind};\n@@ -124,7 +124,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n             StatementKind::StorageDead(local) => {\n                 self.access_place(\n                     location,\n-                    &Place::Base(PlaceBase::Local(local)),\n+                    &Place::from(local),\n                     (Shallow(None), Write(WriteKind::StorageDeadOrDrop)),\n                     LocalMutationIsAllowed::Yes,\n                 );"}, {"sha": "9409fefb6bde7d5d2d519762b02fb4b7238de059", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -632,7 +632,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n                 )\n             }\n             ProjectionElem::Index(i) => {\n-                let index_ty = Place::Base(PlaceBase::Local(i)).ty(self.body, tcx).ty;\n+                let index_ty = Place::from(i).ty(self.body, tcx).ty;\n                 if index_ty != tcx.types.usize {\n                     PlaceTy::from_ty(\n                         span_mirbug_and_err!(self, i, \"index by non-usize {:?}\", i),"}, {"sha": "207399fbdcf0e6a3a928bdbe92a3c1658c78c708", "filename": "src/librustc_mir/build/expr/as_operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -74,7 +74,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             Category::Place | Category::Rvalue(..) => {\n                 let operand = unpack!(block = this.as_temp(block, scope, expr, Mutability::Mut));\n-                block.and(Operand::Move(Place::Base(PlaceBase::Local(operand))))\n+                block.and(Operand::Move(Place::from(operand)))\n             }\n         }\n     }"}, {"sha": "0640c01d255c2b3715e81796591606b49ef2e1d9", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -98,26 +98,26 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     &lt,\n                     Rvalue::BinaryOp(\n                         BinOp::Lt,\n-                        Operand::Copy(Place::Base(PlaceBase::Local(idx))),\n+                        Operand::Copy(Place::from(idx)),\n                         Operand::Copy(len.clone()),\n                     ),\n                 );\n \n                 let msg = BoundsCheck {\n                     len: Operand::Move(len),\n-                    index: Operand::Copy(Place::Base(PlaceBase::Local(idx))),\n+                    index: Operand::Copy(Place::from(idx)),\n                 };\n                 let success = this.assert(block, Operand::Move(lt), true, msg, expr_span);\n                 success.and(slice.index(idx))\n             }\n-            ExprKind::SelfRef => block.and(Place::Base(PlaceBase::Local(Local::new(1)))),\n+            ExprKind::SelfRef => block.and(Place::from(Local::new(1))),\n             ExprKind::VarRef { id } => {\n                 let place = if this.is_bound_var_in_guard(id) {\n                     let index = this.var_local_id(id, RefWithinGuard);\n-                    Place::Base(PlaceBase::Local(index)).deref()\n+                    Place::from(index).deref()\n                 } else {\n                     let index = this.var_local_id(id, OutsideGuard);\n-                    Place::Base(PlaceBase::Local(index))\n+                    Place::from(index)\n                 };\n                 block.and(place)\n             }\n@@ -168,14 +168,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         Statement {\n                             source_info,\n                             kind: StatementKind::AscribeUserType(\n-                                Place::Base(PlaceBase::Local(temp.clone())),\n+                                Place::from(temp.clone()),\n                                 Variance::Invariant,\n                                 box UserTypeProjection { base: annotation_index, projs: vec![], },\n                             ),\n                         },\n                     );\n                 }\n-                block.and(Place::Base(PlaceBase::Local(temp)))\n+                block.and(Place::from(temp))\n             }\n \n             ExprKind::Array { .. }\n@@ -211,7 +211,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 });\n                 let temp =\n                     unpack!(block = this.as_temp(block, expr.temp_lifetime, expr, mutability));\n-                block.and(Place::Base(PlaceBase::Local(temp)))\n+                block.and(Place::from(temp))\n             }\n         }\n     }"}, {"sha": "73ce2a5dc9b8cafd5926371add8a6a59dde26eed", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -127,24 +127,24 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     this.schedule_drop_storage_and_value(\n                         expr_span,\n                         scope,\n-                        &Place::Base(PlaceBase::Local(result)),\n+                        &Place::from(result),\n                         value.ty,\n                     );\n                 }\n \n                 // malloc some memory of suitable type (thus far, uninitialized):\n                 let box_ = Rvalue::NullaryOp(NullOp::Box, value.ty);\n                 this.cfg\n-                    .push_assign(block, source_info, &Place::Base(PlaceBase::Local(result)), box_);\n+                    .push_assign(block, source_info, &Place::from(result), box_);\n \n                 // initialize the box contents:\n                 unpack!(\n                     block = this.into(\n-                        &Place::Base(PlaceBase::Local(result)).deref(),\n+                        &Place::from(result).deref(),\n                         block, value\n                     )\n                 );\n-                block.and(Rvalue::Use(Operand::Move(Place::Base(PlaceBase::Local(result)))))\n+                block.and(Rvalue::Use(Operand::Move(Place::from(result))))\n             }\n             ExprKind::Cast { source } => {\n                 let source = unpack!(block = this.as_operand(block, scope, source));\n@@ -548,7 +548,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         this.cfg.push_assign(\n             block,\n             source_info,\n-            &Place::Base(PlaceBase::Local(temp)),\n+            &Place::from(temp),\n             Rvalue::Ref(this.hir.tcx().lifetimes.re_erased, borrow_kind, arg_place),\n         );\n \n@@ -559,12 +559,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             this.schedule_drop_storage_and_value(\n                 upvar_span,\n                 temp_lifetime,\n-                &Place::Base(PlaceBase::Local(temp)),\n+                &Place::from(temp),\n                 upvar_ty,\n             );\n         }\n \n-        block.and(Operand::Move(Place::Base(PlaceBase::Local(temp))))\n+        block.and(Operand::Move(Place::from(temp)))\n     }\n \n     // Helper to get a `-1` value of the appropriate type"}, {"sha": "1b3ebac4a3d4d7222d550245af8cdec887cf084b", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -64,7 +64,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             this.local_decls.push(local_decl)\n         };\n-        let temp_place = &Place::Base(PlaceBase::Local(temp));\n+        let temp_place = &Place::from(temp);\n \n         if !expr_ty.is_never() {\n             this.cfg.push("}, {"sha": "f70ecef0c254a0fd03b964aa1146626e572910ee", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -258,7 +258,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         is_user_variable: None,\n                         is_block_tail: None,\n                     });\n-                    let ptr_temp = Place::Base(PlaceBase::Local(ptr_temp));\n+                    let ptr_temp = Place::from(ptr_temp);\n                     let block = unpack!(this.into(&ptr_temp, block, ptr));\n                     this.into(&ptr_temp.deref(), block, val)\n                 } else {"}, {"sha": "4463e7fd4d4a62abcc9f661d364651edcb71202c", "filename": "src/librustc_mir/build/expr/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -235,7 +235,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         }\n                     }\n                     let temp = this.local_decls.push(local_decl);\n-                    let place = Place::Base(PlaceBase::Local(temp));\n+                    let place = Place::from(temp);\n                     debug!(\"created temp {:?} for expr {:?} in block_context: {:?}\",\n                            temp, expr, this.block_context);\n                     place"}, {"sha": "d2e56c4981faa92975454069c5e9648d28f3a94c", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -531,7 +531,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 kind: StatementKind::StorageLive(local_id),\n             },\n         );\n-        let place = Place::Base(PlaceBase::Local(local_id));\n+        let place = Place::from(local_id);\n         let var_ty = self.local_decls[local_id].ty;\n         let region_scope = self.hir.region_scope_tree.var_scope(var.local_id);\n         self.schedule_drop(span, region_scope, &place, var_ty, DropKind::Storage);\n@@ -545,7 +545,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.schedule_drop(\n             span,\n             region_scope,\n-            &Place::Base(PlaceBase::Local(local_id)),\n+            &Place::from(local_id),\n             var_ty,\n             DropKind::Value,\n         );\n@@ -1478,7 +1478,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 self.cfg.push_assign(\n                     block,\n                     scrutinee_source_info,\n-                    &Place::Base(PlaceBase::Local(temp)),\n+                    &Place::from(temp),\n                     borrow,\n                 );\n             }\n@@ -1502,7 +1502,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     source_info: guard_end,\n                     kind: StatementKind::FakeRead(\n                         FakeReadCause::ForMatchGuard,\n-                        Place::Base(PlaceBase::Local(temp)),\n+                        Place::from(temp),\n                     ),\n                 });\n             }\n@@ -1575,7 +1575,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             // place they refer to can't be modified by the guard.\n             for binding in by_value_bindings.clone() {\n                 let local_id = self.var_local_id(binding.var_id, RefWithinGuard);\n-                    let place = Place::Base(PlaceBase::Local(local_id));\n+                    let place = Place::from(local_id);\n                 self.cfg.push(\n                     block,\n                     Statement {"}, {"sha": "56025eeaaa92284765738fb6d7adfc7f2783ff2d", "filename": "src/librustc_mir/build/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -16,7 +16,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// call `schedule_drop` once the temporary is initialized.\n     pub fn temp(&mut self, ty: Ty<'tcx>, span: Span) -> Place<'tcx> {\n         let temp = self.local_decls.push(LocalDecl::new_temp(ty, span));\n-        let place = Place::Base(PlaceBase::Local(temp));\n+        let place = Place::from(temp);\n         debug!(\"temp: created temp {:?} with type {:?}\",\n                place, self.local_decls[temp].ty);\n         place"}, {"sha": "4c3a113123665fb796a6e4663c7572bb3153fad8", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -809,7 +809,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         for (index, arg_info) in arguments.iter().enumerate() {\n             // Function arguments always get the first Local indices after the return place\n             let local = Local::new(index + 1);\n-            let place = Place::Base(PlaceBase::Local(local));\n+            let place = Place::from(local);\n             let &ArgInfo(ty, opt_ty_info, pattern, ref self_binding) = arg_info;\n \n             // Make sure we drop (parts of) the argument even when not matched on."}, {"sha": "a73ec2ed8e06a102ae77350e7b2413e5febe7bb4", "filename": "src/librustc_mir/dataflow/drop_flag_effects.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -170,7 +170,7 @@ pub(crate) fn drop_flag_effects_for_function_entry<'tcx, F>(\n {\n     let move_data = &ctxt.move_data;\n     for arg in body.args_iter() {\n-        let place = mir::Place::Base(mir::PlaceBase::Local(arg));\n+        let place = mir::Place::from(arg);\n         let lookup_result = move_data.rev_lookup.find(&place);\n         on_lookup_result_bits(tcx, body, move_data,\n                               lookup_result,"}, {"sha": "dcc6ba5ca05cc402756884e8eec7e11eae381765", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -288,7 +288,7 @@ impl<'a, 'tcx> BitDenotation<'tcx> for Borrows<'a, 'tcx> {\n             mir::StatementKind::StorageDead(local) => {\n                 // Make sure there are no remaining borrows for locals that\n                 // are gone out of scope.\n-                self.kill_borrows_on_place(trans, &Place::Base(PlaceBase::Local(local)));\n+                self.kill_borrows_on_place(trans, &Place::from(local));\n             }\n \n             mir::StatementKind::InlineAsm(ref asm) => {"}, {"sha": "f282c276e092694fce45201ba4daaba606b7ebc6", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -33,13 +33,13 @@ impl<'a, 'tcx> MoveDataBuilder<'a, 'tcx> {\n                 moves: IndexVec::new(),\n                 loc_map: LocationMap::new(body),\n                 rev_lookup: MovePathLookup {\n-                    locals: body.local_decls.indices().map(PlaceBase::Local).map(|v| {\n+                    locals: body.local_decls.indices().map(|i| {\n                         Self::new_move_path(\n                             &mut move_paths,\n                             &mut path_map,\n                             &mut init_path_map,\n                             None,\n-                            Place::Base(v),\n+                            Place::from(i),\n                         )\n                     }).collect(),\n                     projections: Default::default(),\n@@ -289,7 +289,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             }\n             StatementKind::StorageLive(_) => {}\n             StatementKind::StorageDead(local) => {\n-                self.gather_move(&Place::Base(PlaceBase::Local(local)));\n+                self.gather_move(&Place::from(local));\n             }\n             StatementKind::SetDiscriminant{ .. } => {\n                 span_bug!(stmt.source_info.span,"}, {"sha": "e7601f887c32e38c572b8629fcac6c91de41b216", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -355,7 +355,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpretCx<'mir, 'tcx, M> {\n                     let mut locals_iter = body.args_iter();\n                     while let Some(local) = locals_iter.next() {\n                         let dest = self.eval_place(\n-                            &mir::Place::Base(mir::PlaceBase::Local(local))\n+                            &mir::Place::from(local)\n                         )?;\n                         if Some(local) == body.spread_arg {\n                             // Must be a tuple"}, {"sha": "7987095a33401ee437fb77a1e7db8297beebc7ac", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -213,7 +213,7 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n \n     if let Some(..) = ty {\n         // The first argument (index 0), but add 1 for the return value.\n-        let dropee_ptr = Place::Base(PlaceBase::Local(Local::new(1+0)));\n+        let dropee_ptr = Place::from(Local::new(1+0));\n         if tcx.sess.opts.debugging_opts.mir_emit_retag {\n             // Function arguments should be retagged, and we make this one raw.\n             body.basic_blocks_mut()[START_BLOCK].statements.insert(0, Statement {\n@@ -308,7 +308,7 @@ fn build_clone_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, self_ty: Ty<'tcx>) -\n     let is_copy = self_ty.is_copy_modulo_regions(tcx, tcx.param_env(def_id), builder.span);\n \n     let dest = Place::RETURN_PLACE;\n-    let src = Place::Base(PlaceBase::Local(Local::new(1+0))).deref();\n+    let src = Place::from(Local::new(1+0)).deref();\n \n     match self_ty.sty {\n         _ if is_copy => builder.copy_shim(),\n@@ -412,7 +412,7 @@ impl CloneShimBuilder<'tcx> {\n     }\n \n     fn copy_shim(&mut self) {\n-        let rcvr = Place::Base(PlaceBase::Local(Local::new(1+0))).deref();\n+        let rcvr = Place::from(Local::new(1+0)).deref();\n         let ret_statement = self.make_statement(\n             StatementKind::Assign(\n                 Place::RETURN_PLACE,\n@@ -424,9 +424,7 @@ impl CloneShimBuilder<'tcx> {\n \n     fn make_place(&mut self, mutability: Mutability, ty: Ty<'tcx>) -> Place<'tcx> {\n         let span = self.span;\n-        Place::Base(PlaceBase::Local(\n-            self.local_decls.push(temp_decl(mutability, ty, span))\n-        ))\n+        Place::from(self.local_decls.push(temp_decl(mutability, ty, span)))\n     }\n \n     fn make_clone_call(\n@@ -525,7 +523,7 @@ impl CloneShimBuilder<'tcx> {\n         let inits = vec![\n             self.make_statement(\n                 StatementKind::Assign(\n-                    Place::Base(PlaceBase::Local(beg)),\n+                    Place::from(beg),\n                     box Rvalue::Use(Operand::Constant(self.make_usize(0)))\n                 )\n             ),\n@@ -543,7 +541,7 @@ impl CloneShimBuilder<'tcx> {\n         //     BB #3;\n         // }\n         // BB #4;\n-        self.loop_header(Place::Base(PlaceBase::Local(beg)),\n+        self.loop_header(Place::from(beg),\n                          end,\n                          BasicBlock::new(2),\n                          BasicBlock::new(4),\n@@ -563,10 +561,10 @@ impl CloneShimBuilder<'tcx> {\n         let statements = vec![\n             self.make_statement(\n                 StatementKind::Assign(\n-                    Place::Base(PlaceBase::Local(beg)),\n+                    Place::from(beg),\n                     box Rvalue::BinaryOp(\n                         BinOp::Add,\n-                        Operand::Copy(Place::Base(PlaceBase::Local(beg))),\n+                        Operand::Copy(Place::from(beg)),\n                         Operand::Constant(self.make_usize(1))\n                     )\n                 )\n@@ -586,7 +584,7 @@ impl CloneShimBuilder<'tcx> {\n         let beg = self.local_decls.push(temp_decl(Mutability::Mut, tcx.types.usize, span));\n         let init = self.make_statement(\n             StatementKind::Assign(\n-                Place::Base(PlaceBase::Local(beg)),\n+                Place::from(beg),\n                 box Rvalue::Use(Operand::Constant(self.make_usize(0)))\n             )\n         );\n@@ -597,7 +595,7 @@ impl CloneShimBuilder<'tcx> {\n         //     BB #8;\n         // }\n         // BB #9;\n-        self.loop_header(Place::Base(PlaceBase::Local(beg)), Place::Base(PlaceBase::Local(end)),\n+        self.loop_header(Place::from(beg), Place::from(end),\n                          BasicBlock::new(7), BasicBlock::new(9), true);\n \n         // BB #7 (cleanup)\n@@ -613,10 +611,10 @@ impl CloneShimBuilder<'tcx> {\n         // `goto #6;`\n         let statement = self.make_statement(\n             StatementKind::Assign(\n-                Place::Base(PlaceBase::Local(beg)),\n+                Place::from(beg),\n                 box Rvalue::BinaryOp(\n                     BinOp::Add,\n-                    Operand::Copy(Place::Base(PlaceBase::Local(beg))),\n+                    Operand::Copy(Place::from(beg)),\n                     Operand::Constant(self.make_usize(1))\n                 )\n             )\n@@ -701,7 +699,7 @@ fn build_call_shim<'tcx>(\n     let source_info = SourceInfo { span, scope: OUTERMOST_SOURCE_SCOPE };\n \n     let rcvr_arg = Local::new(1+0);\n-    let rcvr_l = Place::Base(PlaceBase::Local(rcvr_arg));\n+    let rcvr_l = Place::from(rcvr_arg);\n     let mut statements = vec![];\n \n     let rcvr = match rcvr_adjustment {\n@@ -731,11 +729,11 @@ fn build_call_shim<'tcx>(\n             statements.push(Statement {\n                 source_info,\n                 kind: StatementKind::Assign(\n-                    Place::Base(PlaceBase::Local(ref_rcvr)),\n+                    Place::from(ref_rcvr),\n                     box Rvalue::Ref(tcx.lifetimes.re_erased, borrow_kind, rcvr_l)\n                 )\n             });\n-            Operand::Move(Place::Base(PlaceBase::Local(ref_rcvr)))\n+            Operand::Move(Place::from(ref_rcvr))\n         }\n     };\n \n@@ -755,12 +753,12 @@ fn build_call_shim<'tcx>(\n \n     if let Some(untuple_args) = untuple_args {\n         args.extend(untuple_args.iter().enumerate().map(|(i, ity)| {\n-            let arg_place = Place::Base(PlaceBase::Local(Local::new(1+1)));\n+            let arg_place = Place::from(Local::new(1+1));\n             Operand::Move(arg_place.field(Field::new(i), *ity))\n         }));\n     } else {\n         args.extend((1..sig.inputs().len()).map(|i| {\n-            Operand::Move(Place::Base(PlaceBase::Local(Local::new(1+i))))\n+            Operand::Move(Place::from(Local::new(1+i)))\n         }));\n     }\n \n@@ -791,7 +789,7 @@ fn build_call_shim<'tcx>(\n     if let Adjustment::RefMut = rcvr_adjustment {\n         // BB #1 - drop for Self\n         block(&mut blocks, vec![], TerminatorKind::Drop {\n-            location: Place::Base(PlaceBase::Local(rcvr_arg)),\n+            location: Place::from(rcvr_arg),\n             target: BasicBlock::new(2),\n             unwind: None\n         }, false);\n@@ -801,7 +799,7 @@ fn build_call_shim<'tcx>(\n     if let Adjustment::RefMut = rcvr_adjustment {\n         // BB #3 - drop if closure panics\n         block(&mut blocks, vec![], TerminatorKind::Drop {\n-            location: Place::Base(PlaceBase::Local(rcvr_arg)),\n+            location: Place::from(rcvr_arg),\n             target: BasicBlock::new(4),\n             unwind: None\n         }, true);\n@@ -881,7 +879,7 @@ pub fn build_adt_ctor<'tcx>(tcx: TyCtxt<'tcx>, ctor_id: DefId) -> &'tcx Body<'tc\n             .iter()\n             .enumerate()\n             .map(|(idx, field_def)| (\n-                Operand::Move(Place::Base(PlaceBase::Local(Local::new(idx + 1)))),\n+                Operand::Move(Place::from(Local::new(idx + 1))),\n                 field_def.ty(tcx, substs),\n             )),\n         AggregateKind::Adt(adt_def, variant_index, substs, None, None),"}, {"sha": "426e16698d74d70a2bd18671cb0b7e69e25d1bc8", "filename": "src/librustc_mir/transform/add_moves_for_packed_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -112,10 +112,10 @@ fn add_move_for_packed_drop<'tcx>(\n \n     patch.add_statement(\n         loc, StatementKind::StorageLive(temp));\n-    patch.add_assign(loc, Place::Base(PlaceBase::Local(temp)),\n+    patch.add_assign(loc, Place::from(temp),\n                      Rvalue::Use(Operand::Move(location.clone())));\n     patch.patch_terminator(loc.block, TerminatorKind::Drop {\n-        location: Place::Base(PlaceBase::Local(temp)),\n+        location: Place::from(temp),\n         target: storage_dead_block,\n         unwind\n     });"}, {"sha": "e01017d7c9bdbe513a8b849116cedace25de0f5f", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -96,7 +96,7 @@ impl MirPass for AddRetag {\n             };\n             // Gather all arguments, skip return value.\n             let places = local_decls.iter_enumerated().skip(1).take(arg_count)\n-                    .map(|(local, _)| Place::Base(PlaceBase::Local(local)))\n+                    .map(|(local, _)| Place::from(local))\n                     .filter(needs_retag)\n                     .collect::<Vec<_>>();\n             // Emit their retags."}, {"sha": "ad19b974d7d61caff5eac717b22c5394f75ffa6a", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -326,7 +326,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n     }\n \n     fn drop_flag(&mut self, index: MovePathIndex) -> Option<Place<'tcx>> {\n-        self.drop_flags.get(&index).map(|t| Place::Base(PlaceBase::Local(*t)))\n+        self.drop_flags.get(&index).map(|t| Place::from(*t))\n     }\n \n     /// create a patch that elaborates all drops in the input\n@@ -537,7 +537,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         if let Some(&flag) = self.drop_flags.get(&path) {\n             let span = self.patch.source_info_for_location(self.body, loc).span;\n             let val = self.constant_bool(span, val.value());\n-            self.patch.add_assign(loc, Place::Base(PlaceBase::Local(flag)), val);\n+            self.patch.add_assign(loc, Place::from(flag), val);\n         }\n     }\n \n@@ -546,7 +546,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         let span = self.patch.source_info_for_location(self.body, loc).span;\n         let false_ = self.constant_bool(span, false);\n         for flag in self.drop_flags.values() {\n-            self.patch.add_assign(loc, Place::Base(PlaceBase::Local(*flag)), false_.clone());\n+            self.patch.add_assign(loc, Place::from(*flag), false_.clone());\n         }\n     }\n "}, {"sha": "7b961e97a10de580f0f7a340055e2409a3f58991", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -200,7 +200,7 @@ impl TransformVisitor<'tcx> {\n \n     // Create a Place referencing a generator struct field\n     fn make_field(&self, variant_index: VariantIdx, idx: usize, ty: Ty<'tcx>) -> Place<'tcx> {\n-        let self_place = Place::Base(PlaceBase::Local(self_arg()));\n+        let self_place = Place::from(self_arg());\n         let base = self_place.downcast_unnamed(variant_index);\n         let field = Projection {\n             base: base,\n@@ -211,7 +211,7 @@ impl TransformVisitor<'tcx> {\n \n     // Create a statement which changes the discriminant\n     fn set_discr(&self, state_disc: VariantIdx, source_info: SourceInfo) -> Statement<'tcx> {\n-        let self_place = Place::Base(PlaceBase::Local(self_arg()));\n+        let self_place = Place::from(self_arg());\n         Statement {\n             source_info,\n             kind: StatementKind::SetDiscriminant { place: self_place, variant_index: state_disc },\n@@ -222,9 +222,9 @@ impl TransformVisitor<'tcx> {\n     fn get_discr(&self, body: &mut Body<'tcx>) -> (Statement<'tcx>, Place<'tcx>) {\n         let temp_decl = LocalDecl::new_internal(self.tcx.types.isize, body.span);\n         let local_decls_len = body.local_decls.push(temp_decl);\n-        let temp = Place::Base(PlaceBase::Local(local_decls_len));\n+        let temp = Place::from(local_decls_len);\n \n-        let self_place = Place::Base(PlaceBase::Local(self_arg()));\n+        let self_place = Place::from(self_arg());\n         let assign = Statement {\n             source_info: source_info(body),\n             kind: StatementKind::Assign(temp.clone(), box Rvalue::Discriminant(self_place)),\n@@ -271,7 +271,7 @@ impl MutVisitor<'tcx> for TransformVisitor<'tcx> {\n         let ret_val = match data.terminator().kind {\n             TerminatorKind::Return => Some((VariantIdx::new(1),\n                 None,\n-                Operand::Move(Place::Base(PlaceBase::Local(self.new_ret_local))),\n+                Operand::Move(Place::from(self.new_ret_local)),\n                 None)),\n             TerminatorKind::Yield { ref value, resume, drop } => Some((VariantIdx::new(0),\n                 Some(resume),\n@@ -840,7 +840,7 @@ fn elaborate_generator_drops<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, body: &mut\n         elaborate_drop(\n             &mut elaborator,\n             source_info,\n-            &Place::Base(PlaceBase::Local(gen)),\n+            &Place::from(gen),\n             (),\n             target,\n             unwind,\n@@ -913,7 +913,7 @@ fn create_generator_drop_shim<'tcx>(\n         // Alias tracking must know we changed the type\n         body.basic_blocks_mut()[START_BLOCK].statements.insert(0, Statement {\n             source_info,\n-            kind: StatementKind::Retag(RetagKind::Raw, Place::Base(PlaceBase::Local(self_arg()))),\n+            kind: StatementKind::Retag(RetagKind::Raw, Place::from(self_arg())),\n         })\n     }\n \n@@ -1031,7 +1031,7 @@ fn insert_clean_drop<'tcx>(body: &mut Body<'tcx>) -> BasicBlock {\n     // Create a block to destroy an unresumed generators. This can only destroy upvars.\n     let drop_clean = BasicBlock::new(body.basic_blocks().len());\n     let term = TerminatorKind::Drop {\n-        location: Place::Base(PlaceBase::Local(self_arg())),\n+        location: Place::from(self_arg()),\n         target: return_block,\n         unwind: None,\n     };"}, {"sha": "dc73e58d15c3d28c41e8e4ce73db6d86c03d7940", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -467,7 +467,7 @@ impl Inliner<'tcx> {\n                     let temp = LocalDecl::new_temp(ty, callsite.location.span);\n \n                     let tmp = caller_body.local_decls.push(temp);\n-                    let tmp = Place::Base(PlaceBase::Local(tmp));\n+                    let tmp = Place::from(tmp);\n \n                     let stmt = Statement {\n                         source_info: callsite.location,\n@@ -561,7 +561,7 @@ impl Inliner<'tcx> {\n             let tuple = self.create_temp_if_necessary(args.next().unwrap(), callsite, caller_body);\n             assert!(args.next().is_none());\n \n-            let tuple = Place::Base(PlaceBase::Local(tuple));\n+            let tuple = Place::from(tuple);\n             let tuple_tys = if let ty::Tuple(s) = tuple.ty(caller_body, tcx).ty.sty {\n                 s\n             } else {\n@@ -621,7 +621,7 @@ impl Inliner<'tcx> {\n \n         let stmt = Statement {\n             source_info: callsite.location,\n-            kind: StatementKind::Assign(Place::Base(PlaceBase::Local(arg_tmp)), box arg),\n+            kind: StatementKind::Assign(Place::from(arg_tmp), box arg),\n         };\n         caller_body[callsite.bb].statements.push(stmt);\n         arg_tmp"}, {"sha": "f09a77d486c7e3ceccf2634c3cc42693ea44f856", "filename": "src/librustc_mir/transform/lower_128bit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Flower_128bit.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -83,13 +83,13 @@ impl Lower128Bit {\n                     block.statements.push(Statement {\n                         source_info: source_info,\n                         kind: StatementKind::Assign(\n-                            Place::Base(PlaceBase::Local(local)),\n+                            Place::from(local),\n                             box Rvalue::Cast(\n                                 CastKind::Misc,\n                                 rhs,\n                                 rhs_override_ty.unwrap())),\n                     });\n-                    rhs = Operand::Move(Place::Base(PlaceBase::Local(local)));\n+                    rhs = Operand::Move(Place::from(local));\n                 }\n \n                 let call_did = check_lang_item_type("}, {"sha": "b1804fb0ab331e06b90c2b61b4c3e820214e7e43", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -182,7 +182,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                 span,\n                 scope: OUTERMOST_SOURCE_SCOPE\n             },\n-            kind: StatementKind::Assign(Place::Base(PlaceBase::Local(dest)), box rvalue)\n+            kind: StatementKind::Assign(Place::from(dest), box rvalue)\n         });\n     }\n \n@@ -273,7 +273,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                             args,\n                             cleanup: None,\n                             destination: Some(\n-                                (Place::Base(PlaceBase::Local(new_temp)), new_target)\n+                                (Place::from(new_temp), new_target)\n                             ),\n                             from_hir_call,\n                         },"}, {"sha": "6878eceb2a5dbd8a55bf2950dcfb25f325bfd103", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -97,7 +97,7 @@ impl<'a, 'tcx> UniformArrayMoveOutVisitor<'a, 'tcx> {\n                     let temp = self.patch.new_temp(item_ty, self.body.source_info(location).span);\n                     self.patch.add_statement(location, StatementKind::StorageLive(temp));\n                     self.patch.add_assign(location,\n-                                          Place::Base(PlaceBase::Local(temp)),\n+                                          Place::from(temp),\n                                           Rvalue::Use(\n                                               Operand::Move(\n                                                   Place::Projection(box Projection{\n@@ -115,7 +115,7 @@ impl<'a, 'tcx> UniformArrayMoveOutVisitor<'a, 'tcx> {\n                     Rvalue::Aggregate(\n                         box AggregateKind::Array(item_ty),\n                         temps.iter().map(\n-                            |x| Operand::Move(Place::Base(PlaceBase::Local(*x)))\n+                            |x| Operand::Move(Place::from(*x))\n                         ).collect()\n                     )\n                 );"}, {"sha": "dac90d37275b40a0cdb1437a71816c929c9cdb23", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -486,7 +486,7 @@ where\n         // discriminant after it is free-ed, because that\n         // way lies only trouble.\n         let discr_ty = adt.repr.discr_type().to_ty(self.tcx());\n-        let discr = Place::Base(PlaceBase::Local(self.new_temp(discr_ty)));\n+        let discr = Place::from(self.new_temp(discr_ty));\n         let discr_rv = Rvalue::Discriminant(self.place.clone());\n         let switch_block = BasicBlockData {\n             statements: vec![self.assign(&discr, discr_rv)],\n@@ -518,11 +518,11 @@ where\n             mutbl: hir::Mutability::MutMutable\n         });\n         let ref_place = self.new_temp(ref_ty);\n-        let unit_temp = Place::Base(PlaceBase::Local(self.new_temp(tcx.mk_unit())));\n+        let unit_temp = Place::from(self.new_temp(tcx.mk_unit()));\n \n         let result = BasicBlockData {\n             statements: vec![self.assign(\n-                &Place::Base(PlaceBase::Local(ref_place)),\n+                &Place::from(ref_place),\n                 Rvalue::Ref(tcx.lifetimes.re_erased,\n                             BorrowKind::Mut { allow_two_phase_borrow: false },\n                             self.place.clone())\n@@ -531,7 +531,7 @@ where\n                 kind: TerminatorKind::Call {\n                     func: Operand::function_handle(tcx, drop_fn.def_id, substs,\n                                                    self.source_info.span),\n-                    args: vec![Operand::Move(Place::Base(PlaceBase::Local(ref_place)))],\n+                    args: vec![Operand::Move(Place::from(ref_place))],\n                     destination: Some((unit_temp, succ)),\n                     cleanup: unwind.into_option(),\n                     from_hir_call: true,\n@@ -576,8 +576,8 @@ where\n             ty: ety,\n             mutbl: hir::Mutability::MutMutable\n         });\n-        let ptr = &Place::Base(PlaceBase::Local(self.new_temp(ref_ty)));\n-        let can_go = &Place::Base(PlaceBase::Local(self.new_temp(tcx.types.bool)));\n+        let ptr = &Place::from(self.new_temp(ref_ty));\n+        let can_go = &Place::from(self.new_temp(tcx.types.bool));\n \n         let one = self.constant_usize(1);\n         let (ptr_next, cur_next) = if ptr_based {\n@@ -589,19 +589,19 @@ where\n                     elem: ProjectionElem::Deref,\n                 }))\n              ),\n-             Rvalue::BinaryOp(BinOp::Offset, move_(&Place::Base(PlaceBase::Local(cur))), one))\n+             Rvalue::BinaryOp(BinOp::Offset, move_(&Place::from(cur)), one))\n         } else {\n             (Rvalue::Ref(\n                  tcx.lifetimes.re_erased,\n                  BorrowKind::Mut { allow_two_phase_borrow: false },\n                  self.place.clone().index(cur)),\n-             Rvalue::BinaryOp(BinOp::Add, move_(&Place::Base(PlaceBase::Local(cur))), one))\n+             Rvalue::BinaryOp(BinOp::Add, move_(&Place::from(cur)), one))\n         };\n \n         let drop_block = BasicBlockData {\n             statements: vec![\n                 self.assign(ptr, ptr_next),\n-                self.assign(&Place::Base(PlaceBase::Local(cur)), cur_next)\n+                self.assign(&Place::from(cur), cur_next)\n             ],\n             is_cleanup: unwind.is_cleanup(),\n             terminator: Some(Terminator {\n@@ -615,7 +615,7 @@ where\n         let loop_block = BasicBlockData {\n             statements: vec![\n                 self.assign(can_go, Rvalue::BinaryOp(BinOp::Eq,\n-                                                     copy(&Place::Base(PlaceBase::Local(cur))),\n+                                                     copy(&Place::from(cur)),\n                                                      copy(length_or_end)))\n             ],\n             is_cleanup: unwind.is_cleanup(),\n@@ -665,8 +665,8 @@ where\n \n         let move_ = |place: &Place<'tcx>| Operand::Move(place.clone());\n         let tcx = self.tcx();\n-        let elem_size = &Place::Base(PlaceBase::Local(self.new_temp(tcx.types.usize)));\n-        let len = &Place::Base(PlaceBase::Local(self.new_temp(tcx.types.usize)));\n+        let elem_size = &Place::from(self.new_temp(tcx.types.usize));\n+        let len = &Place::from(self.new_temp(tcx.types.usize));\n \n         static USIZE_SWITCH_ZERO: &[u128] = &[0];\n \n@@ -713,8 +713,7 @@ where\n         let length_or_end = if ptr_based {\n             // FIXME check if we want to make it return a `Place` directly\n             // if all use sites want a `Place::Base` anyway.\n-            let temp = self.new_temp(iter_ty);\n-            Place::Base(PlaceBase::Local(temp))\n+            Place::from(self.new_temp(iter_ty))\n         } else {\n             length.clone()\n         };\n@@ -736,10 +735,10 @@ where\n             unwind,\n             ptr_based);\n \n-        let cur = Place::Base(PlaceBase::Local(cur));\n+        let cur = Place::from(cur);\n         let drop_block_stmts = if ptr_based {\n             let tmp_ty = tcx.mk_mut_ptr(self.place_ty(self.place));\n-            let tmp = Place::Base(PlaceBase::Local(self.new_temp(tmp_ty)));\n+            let tmp = Place::from(self.new_temp(tmp_ty));\n             // tmp = &mut P;\n             // cur = tmp as *mut T;\n             // end = Offset(cur, len);\n@@ -894,7 +893,7 @@ where\n         unwind: Unwind,\n     ) -> BasicBlock {\n         let tcx = self.tcx();\n-        let unit_temp = Place::Base(PlaceBase::Local(self.new_temp(tcx.mk_unit())));\n+        let unit_temp = Place::from(self.new_temp(tcx.mk_unit()));\n         let free_func = tcx.require_lang_item(lang_items::BoxFreeFnLangItem);\n         let args = adt.variants[VariantIdx::new(0)].fields.iter().enumerate().map(|(i, f)| {\n             let field = Field::new(i);"}, {"sha": "1d876d7bddb5300b8488ecbf5ae82cff88aac028", "filename": "src/librustc_mir/util/graphviz.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -153,7 +153,7 @@ fn write_graph_label<'tcx, W: Write>(\n         }\n         write!(w,\n                \"{:?}: {}\",\n-               Place::Base(PlaceBase::Local(arg)),\n+               Place::from(arg),\n                escape(&body.local_decls[arg].ty)\n         )?;\n     }\n@@ -171,10 +171,10 @@ fn write_graph_label<'tcx, W: Write>(\n \n         if let Some(name) = decl.name {\n             write!(w, r#\"{:?}: {}; // {}<br align=\"left\"/>\"#,\n-                   Place::Base(PlaceBase::Local(local)), escape(&decl.ty), name)?;\n+                   Place::from(local), escape(&decl.ty), name)?;\n         } else {\n             write!(w, r#\"{:?}: {};<br align=\"left\"/>\"#,\n-                   Place::Base(PlaceBase::Local(local)), escape(&decl.ty))?;\n+                   Place::from(local), escape(&decl.ty))?;\n         }\n     }\n "}, {"sha": "d66f35f82c66231c0b46718f6987025e347019db", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099f9e4e8aac3968888636e2126c4b7f8e6bb2d3/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=099f9e4e8aac3968888636e2126c4b7f8e6bb2d3", "patch": "@@ -601,7 +601,7 @@ fn write_mir_sig(\n             if i != 0 {\n                 write!(w, \", \")?;\n             }\n-            write!(w, \"{:?}: {}\", Place::Base(PlaceBase::Local(arg)), body.local_decls[arg].ty)?;\n+            write!(w, \"{:?}: {}\", Place::from(arg), body.local_decls[arg].ty)?;\n         }\n \n         write!(w, \") -> {}\", body.return_ty())?;"}]}