{"sha": "a0da3e9f4fff6aae71f56ce3452b0e38f30de5c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwZGEzZTlmNGZmZjZhYWU3MWY1NmNlMzQ1MmIwZTM4ZjMwZGU1YzQ=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-09-17T03:52:35Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-09-17T21:08:18Z"}, "message": "Eliminate `BitwiseOperator`.\n\n`BitwiseOperator` is an unnecessarily low-level thing. This commit\nreplaces it with `BitSetOperator`, which works on `BitSet`s instead of\nwords. Within `bit_set.rs`, the commit eliminates `Intersect`, `Union`,\nand `Subtract` by instead passing a function to `bitwise()`.", "tree": {"sha": "d70fbfe3149de2a91c9fcc33c9d69e9f5a0557e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d70fbfe3149de2a91c9fcc33c9d69e9f5a0557e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0da3e9f4fff6aae71f56ce3452b0e38f30de5c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0da3e9f4fff6aae71f56ce3452b0e38f30de5c4", "html_url": "https://github.com/rust-lang/rust/commit/a0da3e9f4fff6aae71f56ce3452b0e38f30de5c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0da3e9f4fff6aae71f56ce3452b0e38f30de5c4/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "266e2d3d69f61692a4080ff345d05c49d9f3c855", "url": "https://api.github.com/repos/rust-lang/rust/commits/266e2d3d69f61692a4080ff345d05c49d9f3c855", "html_url": "https://github.com/rust-lang/rust/commit/266e2d3d69f61692a4080ff345d05c49d9f3c855"}], "stats": {"total": 93, "additions": 37, "deletions": 56}, "files": [{"sha": "74f08205958c6b0e6740eb514ef18c25b48909d2", "filename": "src/librustc_data_structures/bit_set.rs", "status": "modified", "additions": 9, "deletions": 26, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a0da3e9f4fff6aae71f56ce3452b0e38f30de5c4/src%2Flibrustc_data_structures%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0da3e9f4fff6aae71f56ce3452b0e38f30de5c4/src%2Flibrustc_data_structures%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fbit_set.rs?ref=a0da3e9f4fff6aae71f56ce3452b0e38f30de5c4", "patch": "@@ -162,7 +162,7 @@ impl<T: Idx> BitSet<T> {\n     /// Set `self = self & other` and return true if `self` changed.\n     /// (i.e., if any bits were removed).\n     pub fn intersect(&mut self, other: &BitSet<T>) -> bool {\n-        bitwise(self.words_mut(), other.words(), &Intersect)\n+        bitwise(self.words_mut(), other.words(), |a, b| { a & b })\n     }\n \n     /// Get a slice of the underlying words.\n@@ -243,13 +243,13 @@ pub trait SubtractFromBitSet<T: Idx> {\n \n impl<T: Idx> UnionIntoBitSet<T> for BitSet<T> {\n     fn union_into(&self, other: &mut BitSet<T>) -> bool {\n-        bitwise(other.words_mut(), self.words(), &Union)\n+        bitwise(other.words_mut(), self.words(), |a, b| { a | b })\n     }\n }\n \n impl<T: Idx> SubtractFromBitSet<T> for BitSet<T> {\n     fn subtract_from(&self, other: &mut BitSet<T>) -> bool {\n-        bitwise(other.words_mut(), self.words(), &Subtract)\n+        bitwise(other.words_mut(), self.words(), |a, b| { a & !b })\n     }\n }\n \n@@ -302,43 +302,26 @@ impl<'a, T: Idx> Iterator for BitIter<'a, T> {\n     }\n }\n \n-pub trait BitwiseOperator {\n-    /// Applies some bit-operation pointwise to each of the bits in the two inputs.\n-    fn join(&self, pred1: Word, pred2: Word) -> Word;\n+pub trait BitSetOperator {\n+    /// Combine one bitset into another.\n+    fn join<T: Idx>(&self, inout_set: &mut BitSet<T>, in_set: &BitSet<T>) -> bool;\n }\n \n #[inline]\n-pub fn bitwise<Op: BitwiseOperator>(out_vec: &mut [Word], in_vec: &[Word], op: &Op) -> bool\n+fn bitwise<Op>(out_vec: &mut [Word], in_vec: &[Word], op: Op) -> bool\n+    where Op: Fn(Word, Word) -> Word\n {\n     assert_eq!(out_vec.len(), in_vec.len());\n     let mut changed = false;\n     for (out_elem, in_elem) in out_vec.iter_mut().zip(in_vec.iter()) {\n         let old_val = *out_elem;\n-        let new_val = op.join(old_val, *in_elem);\n+        let new_val = op(old_val, *in_elem);\n         *out_elem = new_val;\n         changed |= old_val != new_val;\n     }\n     changed\n }\n \n-pub struct Intersect;\n-impl BitwiseOperator for Intersect {\n-    #[inline]\n-    fn join(&self, a: Word, b: Word) -> Word { a & b }\n-}\n-\n-pub struct Union;\n-impl BitwiseOperator for Union {\n-    #[inline]\n-    fn join(&self, a: Word, b: Word) -> Word { a | b }\n-}\n-\n-pub struct Subtract;\n-impl BitwiseOperator for Subtract {\n-    #[inline]\n-    fn join(&self, a: Word, b: Word) -> Word { a & !b }\n-}\n-\n const SPARSE_MAX: usize = 8;\n \n /// A fixed-size bitset type with a sparse representation and a maximum of"}, {"sha": "8d186597b142c32517a3ccd680549971c9595780", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a0da3e9f4fff6aae71f56ce3452b0e38f30de5c4/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0da3e9f4fff6aae71f56ce3452b0e38f30de5c4/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=a0da3e9f4fff6aae71f56ce3452b0e38f30de5c4", "patch": "@@ -80,10 +80,10 @@ impl<'a, 'tcx> BitDenotation for HaveBeenBorrowedLocals<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> BitwiseOperator for HaveBeenBorrowedLocals<'a, 'tcx> {\n+impl<'a, 'tcx> BitSetOperator for HaveBeenBorrowedLocals<'a, 'tcx> {\n     #[inline]\n-    fn join(&self, pred1: Word, pred2: Word) -> Word {\n-        pred1 | pred2 // \"maybe\" means we union effects of both preds\n+    fn join<T: Idx>(&self, inout_set: &mut BitSet<T>, in_set: &BitSet<T>) -> bool {\n+        inout_set.union(in_set) // \"maybe\" means we union effects of both preds\n     }\n }\n "}, {"sha": "22fb12152db0797c0e211b0b8b9c06308a5021f4", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a0da3e9f4fff6aae71f56ce3452b0e38f30de5c4/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0da3e9f4fff6aae71f56ce3452b0e38f30de5c4/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=a0da3e9f4fff6aae71f56ce3452b0e38f30de5c4", "patch": "@@ -20,9 +20,9 @@ use rustc::ty::TyCtxt;\n use rustc::ty::{RegionKind, RegionVid};\n use rustc::ty::RegionKind::ReScope;\n \n-use rustc_data_structures::bit_set::{BitSet, BitwiseOperator, Word};\n+use rustc_data_structures::bit_set::{BitSet, BitSetOperator};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::indexed_vec::IndexVec;\n+use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::sync::Lrc;\n \n use dataflow::{BitDenotation, BlockSets, InitialFlow};\n@@ -410,10 +410,10 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> BitwiseOperator for Borrows<'a, 'gcx, 'tcx> {\n+impl<'a, 'gcx, 'tcx> BitSetOperator for Borrows<'a, 'gcx, 'tcx> {\n     #[inline]\n-    fn join(&self, pred1: Word, pred2: Word) -> Word {\n-        pred1 | pred2 // union effects of preds when computing reservations\n+    fn join<T: Idx>(&self, inout_set: &mut BitSet<T>, in_set: &BitSet<T>) -> bool {\n+        inout_set.union(in_set) // \"maybe\" means we union effects of both preds\n     }\n }\n "}, {"sha": "984d1f686d987bfeb645d3ce1e15b8004fe5add2", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a0da3e9f4fff6aae71f56ce3452b0e38f30de5c4/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0da3e9f4fff6aae71f56ce3452b0e38f30de5c4/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=a0da3e9f4fff6aae71f56ce3452b0e38f30de5c4", "patch": "@@ -14,7 +14,7 @@\n \n use rustc::ty::TyCtxt;\n use rustc::mir::{self, Mir, Location};\n-use rustc_data_structures::bit_set::{BitSet, BitwiseOperator, Word};\n+use rustc_data_structures::bit_set::{BitSet, BitSetOperator};\n use rustc_data_structures::indexed_vec::Idx;\n \n use super::MoveDataParamEnv;\n@@ -549,31 +549,31 @@ impl<'a, 'gcx, 'tcx> BitDenotation for EverInitializedPlaces<'a, 'gcx, 'tcx> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> BitwiseOperator for MaybeInitializedPlaces<'a, 'gcx, 'tcx> {\n+impl<'a, 'gcx, 'tcx> BitSetOperator for MaybeInitializedPlaces<'a, 'gcx, 'tcx> {\n     #[inline]\n-    fn join(&self, pred1: Word, pred2: Word) -> Word {\n-        pred1 | pred2 // \"maybe\" means we union effects of both preds\n+    fn join<T: Idx>(&self, inout_set: &mut BitSet<T>, in_set: &BitSet<T>) -> bool {\n+        inout_set.union(in_set) // \"maybe\" means we union effects of both preds\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> BitwiseOperator for MaybeUninitializedPlaces<'a, 'gcx, 'tcx> {\n+impl<'a, 'gcx, 'tcx> BitSetOperator for MaybeUninitializedPlaces<'a, 'gcx, 'tcx> {\n     #[inline]\n-    fn join(&self, pred1: Word, pred2: Word) -> Word {\n-        pred1 | pred2 // \"maybe\" means we union effects of both preds\n+    fn join<T: Idx>(&self, inout_set: &mut BitSet<T>, in_set: &BitSet<T>) -> bool {\n+        inout_set.union(in_set) // \"maybe\" means we union effects of both preds\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> BitwiseOperator for DefinitelyInitializedPlaces<'a, 'gcx, 'tcx> {\n+impl<'a, 'gcx, 'tcx> BitSetOperator for DefinitelyInitializedPlaces<'a, 'gcx, 'tcx> {\n     #[inline]\n-    fn join(&self, pred1: Word, pred2: Word) -> Word {\n-        pred1 & pred2 // \"definitely\" means we intersect effects of both preds\n+    fn join<T: Idx>(&self, inout_set: &mut BitSet<T>, in_set: &BitSet<T>) -> bool {\n+        inout_set.intersect(in_set) // \"definitely\" means we intersect effects of both preds\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> BitwiseOperator for EverInitializedPlaces<'a, 'gcx, 'tcx> {\n+impl<'a, 'gcx, 'tcx> BitSetOperator for EverInitializedPlaces<'a, 'gcx, 'tcx> {\n     #[inline]\n-    fn join(&self, pred1: Word, pred2: Word) -> Word {\n-        pred1 | pred2 // inits from both preds are in scope\n+    fn join<T: Idx>(&self, inout_set: &mut BitSet<T>, in_set: &BitSet<T>) -> bool {\n+        inout_set.union(in_set) // inits from both preds are in scope\n     }\n }\n "}, {"sha": "ab03ace23d7b4ef635a9c39f6e82bee7da5dc15e", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a0da3e9f4fff6aae71f56ce3452b0e38f30de5c4/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0da3e9f4fff6aae71f56ce3452b0e38f30de5c4/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=a0da3e9f4fff6aae71f56ce3452b0e38f30de5c4", "patch": "@@ -67,10 +67,10 @@ impl<'a, 'tcx> BitDenotation for MaybeStorageLive<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> BitwiseOperator for MaybeStorageLive<'a, 'tcx> {\n+impl<'a, 'tcx> BitSetOperator for MaybeStorageLive<'a, 'tcx> {\n     #[inline]\n-    fn join(&self, pred1: Word, pred2: Word) -> Word {\n-        pred1 | pred2 // \"maybe\" means we union effects of both preds\n+    fn join<T: Idx>(&self, inout_set: &mut BitSet<T>, in_set: &BitSet<T>) -> bool {\n+        inout_set.union(in_set) // \"maybe\" means we union effects of both preds\n     }\n }\n "}, {"sha": "1e362e6f0dccfeb55b816d62192216370f1d1589", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a0da3e9f4fff6aae71f56ce3452b0e38f30de5c4/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0da3e9f4fff6aae71f56ce3452b0e38f30de5c4/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=a0da3e9f4fff6aae71f56ce3452b0e38f30de5c4", "patch": "@@ -10,7 +10,7 @@\n \n use syntax::ast::{self, MetaItem};\n \n-use rustc_data_structures::bit_set::{bitwise, BitwiseOperator, BitSet, HybridBitSet};\n+use rustc_data_structures::bit_set::{BitSet, BitSetOperator, HybridBitSet};\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::work_queue::WorkQueue;\n \n@@ -561,7 +561,7 @@ pub trait InitialFlow {\n     fn bottom_value() -> bool;\n }\n \n-pub trait BitDenotation: BitwiseOperator {\n+pub trait BitDenotation: BitSetOperator {\n     /// Specifies what index type is used to access the bitvector.\n     type Idx: Idx;\n \n@@ -830,10 +830,8 @@ impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D> where D: BitDenotation\n                                          in_out: &BitSet<D::Idx>,\n                                          bb: mir::BasicBlock,\n                                          dirty_queue: &mut WorkQueue<mir::BasicBlock>) {\n-        let entry_set = self.flow_state.sets.for_block(bb.index()).on_entry;\n-        let set_changed = bitwise(entry_set.words_mut(),\n-                                  in_out.words(),\n-                                  &self.flow_state.operator);\n+        let entry_set = &mut self.flow_state.sets.for_block(bb.index()).on_entry;\n+        let set_changed = self.flow_state.operator.join(entry_set, &in_out);\n         if set_changed {\n             dirty_queue.insert(bb);\n         }"}]}