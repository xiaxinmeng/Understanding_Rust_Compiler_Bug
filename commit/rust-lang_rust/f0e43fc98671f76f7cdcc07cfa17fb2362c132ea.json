{"sha": "f0e43fc98671f76f7cdcc07cfa17fb2362c132ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwZTQzZmM5ODY3MWY3NmY3Y2RjYzA3Y2ZhMTdmYjIzNjJjMTMyZWE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-05-02T02:06:08Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-05-07T01:49:54Z"}, "message": "compiletest: only use `make_exe_name` for tests that end up being executed.", "tree": {"sha": "137dace7a1508fa8db1b8bccbaafef6f77cbebf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/137dace7a1508fa8db1b8bccbaafef6f77cbebf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0e43fc98671f76f7cdcc07cfa17fb2362c132ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0e43fc98671f76f7cdcc07cfa17fb2362c132ea", "html_url": "https://github.com/rust-lang/rust/commit/f0e43fc98671f76f7cdcc07cfa17fb2362c132ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0e43fc98671f76f7cdcc07cfa17fb2362c132ea/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a2ee0aaef1dfe835c65359b2b07721953ea7040", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a2ee0aaef1dfe835c65359b2b07721953ea7040", "html_url": "https://github.com/rust-lang/rust/commit/9a2ee0aaef1dfe835c65359b2b07721953ea7040"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "e45ce65d8bb3522222212dd41a3587bb337de1a1", "filename": "src/test/ui/consts/const-eval/unused-broken-const.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0e43fc98671f76f7cdcc07cfa17fb2362c132ea/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0e43fc98671f76f7cdcc07cfa17fb2362c132ea/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funused-broken-const.stderr?ref=f0e43fc98671f76f7cdcc07cfa17fb2362c132ea", "patch": "@@ -1,5 +1,3 @@\n-warning: due to multiple output types requested, the explicitly specified output file name will be adapted for each output type\n-\n error: any use of this value will cause an error\n   --> $DIR/unused-broken-const.rs:5:18\n    |"}, {"sha": "924569d3e232d7ede99f1e2c27b043a70bbe6d07", "filename": "src/test/ui/emit-directives.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0e43fc98671f76f7cdcc07cfa17fb2362c132ea/src%2Ftest%2Fui%2Femit-directives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0e43fc98671f76f7cdcc07cfa17fb2362c132ea/src%2Ftest%2Fui%2Femit-directives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Femit-directives.rs?ref=f0e43fc98671f76f7cdcc07cfa17fb2362c132ea", "patch": "@@ -1,11 +1,5 @@\n-// ignore-tidy-linelength\n // compile-flags:--emit=metadata --error-format=json -Z emit-directives\n // compile-pass\n-//\n-// Normalization is required to eliminated minor path and filename differences\n-// across platforms.\n-// normalize-stderr-test: \"metadata file written: .*/emit-directives\" -> \"metadata file written: .../emit-directives\"\n-// normalize-stderr-test: \"emit-directives(\\.\\w*)?/a(\\.\\w*)?\" -> \"emit-directives/a\"\n \n // A very basic test for the emission of build directives in JSON output.\n "}, {"sha": "068745edb8dc0a8156b0e09451444698ac76a814", "filename": "src/test/ui/emit-directives.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0e43fc98671f76f7cdcc07cfa17fb2362c132ea/src%2Ftest%2Fui%2Femit-directives.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0e43fc98671f76f7cdcc07cfa17fb2362c132ea/src%2Ftest%2Fui%2Femit-directives.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Femit-directives.stderr?ref=f0e43fc98671f76f7cdcc07cfa17fb2362c132ea", "patch": "@@ -1 +1 @@\n-{\"directive\":\"metadata file written: .../emit-directives/a\"}\n+{\"directive\":\"metadata file written: $TEST_BUILD_DIR/emit-directives/libemit_directives.rmeta\"}"}, {"sha": "3e9f612a2afee3af146ae55bf3b239d65390b53f", "filename": "src/test/ui/traits/trait-object-with-self-in-projection-output-repeated-supertrait.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0e43fc98671f76f7cdcc07cfa17fb2362c132ea/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-repeated-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0e43fc98671f76f7cdcc07cfa17fb2362c132ea/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-repeated-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-with-self-in-projection-output-repeated-supertrait.rs?ref=f0e43fc98671f76f7cdcc07cfa17fb2362c132ea", "patch": "@@ -1,5 +1,8 @@\n // compile-pass\n \n+// FIXME(eddyb) shorten the name so windows doesn't choke on it.\n+#![crate_name = \"trait_test\"]\n+\n // Regression test related to #56288. Check that a supertrait projection (of\n // `Output`) that references `Self` is ok if there is another occurence of\n // the same supertrait that specifies the projection explicitly, even if"}, {"sha": "649679e9b3cc0d483e73ceacc10b2691e7239e85", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f0e43fc98671f76f7cdcc07cfa17fb2362c132ea/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0e43fc98671f76f7cdcc07cfa17fb2362c132ea/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=f0e43fc98671f76f7cdcc07cfa17fb2362c132ea", "patch": "@@ -1422,10 +1422,21 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn compile_test(&self) -> ProcRes {\n-        let mut rustc = self.make_compile_args(\n-            &self.testpaths.file,\n-            TargetLocation::ThisFile(self.make_exe_name()),\n-        );\n+        // Only use `make_exe_name` when the test ends up being executed.\n+        let will_execute = match self.config.mode {\n+            RunPass | Ui => self.should_run_successfully(),\n+            Incremental => self.revision.unwrap().starts_with(\"r\"),\n+            RunFail | RunPassValgrind | MirOpt |\n+            DebugInfoBoth | DebugInfoGdb | DebugInfoLldb => true,\n+            _ => false,\n+        };\n+        let output_file = if will_execute {\n+            TargetLocation::ThisFile(self.make_exe_name())\n+        } else {\n+            TargetLocation::ThisDirectory(self.output_base_dir())\n+        };\n+\n+        let mut rustc = self.make_compile_args(&self.testpaths.file, output_file);\n \n         rustc.arg(\"-L\").arg(&self.aux_output_dir_name());\n \n@@ -1882,7 +1893,12 @@ impl<'test> TestCx<'test> {\n                 rustc.arg(\"-o\").arg(path);\n             }\n             TargetLocation::ThisDirectory(path) => {\n-                rustc.arg(\"--out-dir\").arg(path);\n+                if is_rustdoc {\n+                    // `rustdoc` uses `-o` for the output directory.\n+                    rustc.arg(\"-o\").arg(path);\n+                } else {\n+                    rustc.arg(\"--out-dir\").arg(path);\n+                }\n             }\n         }\n "}]}