{"sha": "a649b1666c839b03ec21476f3f1a557590941f10", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NDliMTY2NmM4MzliMDNlYzIxNDc2ZjNmMWE1NTc1OTA5NDFmMTA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-23T20:19:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-23T20:19:19Z"}, "message": "Rollup merge of #65657 - nnethercote:rm-InternedString-properly, r=eddyb\n\nRemove `InternedString`\n\nThis PR removes `InternedString` by converting all occurrences to `Symbol`. There are a handful of places that need to use the symbol chars instead of the symbol index, e.g. for stable sorting; local conversions `LocalInternedString` is used in those places.\n\nr? @eddyb", "tree": {"sha": "415c5ba646ac289dce95793434b450942db8feca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/415c5ba646ac289dce95793434b450942db8feca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a649b1666c839b03ec21476f3f1a557590941f10", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdsLXHCRBK7hj4Ov3rIwAAdHIIAAB8PbE5DB+wkH+i2yLlGNAD\nA6rPKy3RzGVkKTBSQK33yicQ1543wptXdG4uu0cZ0tK287En7yf/bSA8ymbCnPbi\nq+ybOfwMMZEQcDWm7M+QtPExCjgrguxJBnfpgz2mHIT4nw9z2ITdkXrc0vgu3yqV\nsFFSCDdEp6/YwYMh0cSlWYxHESb/jFZ/SbxEMZ9vsU3pOl4rEOM9TZxRxoqyUxDa\nOIN0m5HZtAfDW7Qr/VUQ7icL9mYERL18/JLYlCPlTMpFzQSmLNhU6RNLGOl3dEME\nLLqHVunb5pNCZMxzYcxSzj+BQEouIHGuCm4OoUhu0xF/SQipSNfE91YvZZ5bCtE=\n=7Z9s\n-----END PGP SIGNATURE-----\n", "payload": "tree 415c5ba646ac289dce95793434b450942db8feca\nparent 951b8c84be4ba1446ad2b00b5a1700c7d4cac147\nparent 08e2f05549de74022f2e596251ed88e784514640\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1571861959 +0200\ncommitter GitHub <noreply@github.com> 1571861959 +0200\n\nRollup merge of #65657 - nnethercote:rm-InternedString-properly, r=eddyb\n\nRemove `InternedString`\n\nThis PR removes `InternedString` by converting all occurrences to `Symbol`. There are a handful of places that need to use the symbol chars instead of the symbol index, e.g. for stable sorting; local conversions `LocalInternedString` is used in those places.\n\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a649b1666c839b03ec21476f3f1a557590941f10", "html_url": "https://github.com/rust-lang/rust/commit/a649b1666c839b03ec21476f3f1a557590941f10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a649b1666c839b03ec21476f3f1a557590941f10/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "951b8c84be4ba1446ad2b00b5a1700c7d4cac147", "url": "https://api.github.com/repos/rust-lang/rust/commits/951b8c84be4ba1446ad2b00b5a1700c7d4cac147", "html_url": "https://github.com/rust-lang/rust/commit/951b8c84be4ba1446ad2b00b5a1700c7d4cac147"}, {"sha": "08e2f05549de74022f2e596251ed88e784514640", "url": "https://api.github.com/repos/rust-lang/rust/commits/08e2f05549de74022f2e596251ed88e784514640", "html_url": "https://github.com/rust-lang/rust/commit/08e2f05549de74022f2e596251ed88e784514640"}], "stats": {"total": 610, "additions": 246, "deletions": 364}, "files": [{"sha": "dea8d70aaf4e6a4a0c6ebd855bacf8e5bf294991", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -59,7 +59,7 @@ use crate::ich::{Fingerprint, StableHashingContext};\n use rustc_data_structures::stable_hasher::{StableHasher, HashStable};\n use std::fmt;\n use std::hash::Hash;\n-use syntax_pos::symbol::InternedString;\n+use syntax_pos::symbol::Symbol;\n use crate::traits;\n use crate::traits::query::{\n     CanonicalProjectionGoal, CanonicalTyGoal, CanonicalTypeOpAscribeUserTypeGoal,\n@@ -426,7 +426,7 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n \n     [anon] TraitSelect,\n \n-    [] CompileCodegenUnit(InternedString),\n+    [] CompileCodegenUnit(Symbol),\n \n     [eval_always] Analysis(CrateNum),\n ]);"}, {"sha": "7971c33426b2e8b5a0f444380d7fcf21f26d7999", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -792,15 +792,15 @@ impl<'a> LoweringContext<'a> {\n         // really show up for end-user.\n         let (str_name, kind) = match hir_name {\n             ParamName::Plain(ident) => (\n-                ident.as_interned_str(),\n+                ident.name,\n                 hir::LifetimeParamKind::InBand,\n             ),\n             ParamName::Fresh(_) => (\n-                kw::UnderscoreLifetime.as_interned_str(),\n+                kw::UnderscoreLifetime,\n                 hir::LifetimeParamKind::Elided,\n             ),\n             ParamName::Error => (\n-                kw::UnderscoreLifetime.as_interned_str(),\n+                kw::UnderscoreLifetime,\n                 hir::LifetimeParamKind::Error,\n             ),\n         };\n@@ -1590,7 +1590,7 @@ impl<'a> LoweringContext<'a> {\n                     self.context.resolver.definitions().create_def_with_parent(\n                         self.parent,\n                         def_node_id,\n-                        DefPathData::LifetimeNs(name.ident().as_interned_str()),\n+                        DefPathData::LifetimeNs(name.ident().name),\n                         ExpnId::root(),\n                         lifetime.span);\n "}, {"sha": "307dbe7dab080a4aa6348b0dcb75d9b059205d53", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -186,13 +186,13 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             });\n \n         let mut upstream_crates: Vec<_> = cstore.crates_untracked().iter().map(|&cnum| {\n-            let name = cstore.crate_name_untracked(cnum).as_interned_str();\n+            let name = cstore.crate_name_untracked(cnum);\n             let disambiguator = cstore.crate_disambiguator_untracked(cnum).to_fingerprint();\n             let hash = cstore.crate_hash_untracked(cnum);\n             (name, disambiguator, hash)\n         }).collect();\n \n-        upstream_crates.sort_unstable_by_key(|&(name, dis, _)| (name, dis));\n+        upstream_crates.sort_unstable_by_key(|&(name, dis, _)| (name.as_str(), dis));\n \n         // We hash the final, remapped names of all local source files so we\n         // don't have to include the path prefix remapping commandline args."}, {"sha": "7c8fdcc8b12e9795b9ab9bd642a073d88ec841c4", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -57,7 +57,7 @@ impl<'a> DefCollector<'a> {\n \n         // For async functions, we need to create their inner defs inside of a\n         // closure to match their desugared representation.\n-        let fn_def_data = DefPathData::ValueNs(name.as_interned_str());\n+        let fn_def_data = DefPathData::ValueNs(name);\n         let fn_def = self.create_def(id, fn_def_data, span);\n         return self.with_parent(fn_def, |this| {\n             this.create_def(return_impl_trait_id, DefPathData::ImplTrait, span);\n@@ -83,8 +83,7 @@ impl<'a> DefCollector<'a> {\n                 .unwrap_or_else(|| {\n                     let node_id = NodeId::placeholder_from_expn_id(self.expansion);\n                     sym::integer(self.definitions.placeholder_field_indices[&node_id])\n-                })\n-                .as_interned_str();\n+                });\n             let def = self.create_def(field.id, DefPathData::ValueNs(name), field.span);\n             self.with_parent(def, |this| visit::walk_struct_field(this, field));\n         }\n@@ -109,7 +108,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             ItemKind::Mod(..) | ItemKind::Trait(..) | ItemKind::TraitAlias(..) |\n             ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) |\n             ItemKind::OpaqueTy(..) | ItemKind::ExternCrate(..) | ItemKind::ForeignMod(..) |\n-            ItemKind::TyAlias(..) => DefPathData::TypeNs(i.ident.as_interned_str()),\n+            ItemKind::TyAlias(..) => DefPathData::TypeNs(i.ident.name),\n             ItemKind::Fn(\n                 ref decl,\n                 ref header,\n@@ -127,8 +126,8 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                 )\n             }\n             ItemKind::Static(..) | ItemKind::Const(..) | ItemKind::Fn(..) =>\n-                DefPathData::ValueNs(i.ident.as_interned_str()),\n-            ItemKind::MacroDef(..) => DefPathData::MacroNs(i.ident.as_interned_str()),\n+                DefPathData::ValueNs(i.ident.name),\n+            ItemKind::MacroDef(..) => DefPathData::MacroNs(i.ident.name),\n             ItemKind::Mac(..) => return self.visit_macro_invoc(i.id),\n             ItemKind::GlobalAsm(..) => DefPathData::Misc,\n             ItemKind::Use(..) => {\n@@ -162,7 +161,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         }\n \n         let def = self.create_def(foreign_item.id,\n-                                  DefPathData::ValueNs(foreign_item.ident.as_interned_str()),\n+                                  DefPathData::ValueNs(foreign_item.ident.name),\n                                   foreign_item.span);\n \n         self.with_parent(def, |this| {\n@@ -175,7 +174,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             return self.visit_macro_invoc(v.id);\n         }\n         let def = self.create_def(v.id,\n-                                  DefPathData::TypeNs(v.ident.as_interned_str()),\n+                                  DefPathData::TypeNs(v.ident.name),\n                                   v.span);\n         self.with_parent(def, |this| {\n             if let Some(ctor_hir_id) = v.data.ctor_id() {\n@@ -202,7 +201,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             self.visit_macro_invoc(param.id);\n             return;\n         }\n-        let name = param.ident.as_interned_str();\n+        let name = param.ident.name;\n         let def_path_data = match param.kind {\n             GenericParamKind::Lifetime { .. } => DefPathData::LifetimeNs(name),\n             GenericParamKind::Type { .. } => DefPathData::TypeNs(name),\n@@ -216,9 +215,9 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     fn visit_trait_item(&mut self, ti: &'a TraitItem) {\n         let def_data = match ti.kind {\n             TraitItemKind::Method(..) | TraitItemKind::Const(..) =>\n-                DefPathData::ValueNs(ti.ident.as_interned_str()),\n+                DefPathData::ValueNs(ti.ident.name),\n             TraitItemKind::Type(..) => {\n-                DefPathData::TypeNs(ti.ident.as_interned_str())\n+                DefPathData::TypeNs(ti.ident.name)\n             },\n             TraitItemKind::Macro(..) => return self.visit_macro_invoc(ti.id),\n         };\n@@ -243,12 +242,10 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                     body,\n                 )\n             }\n-            ImplItemKind::Method(..) | ImplItemKind::Const(..) =>\n-                DefPathData::ValueNs(ii.ident.as_interned_str()),\n+            ImplItemKind::Method(..) |\n+            ImplItemKind::Const(..) => DefPathData::ValueNs(ii.ident.name),\n             ImplItemKind::TyAlias(..) |\n-            ImplItemKind::OpaqueTy(..) => {\n-                DefPathData::TypeNs(ii.ident.as_interned_str())\n-            },\n+            ImplItemKind::OpaqueTy(..) => DefPathData::TypeNs(ii.ident.name),\n             ImplItemKind::Macro(..) => return self.visit_macro_invoc(ii.id),\n         };\n "}, {"sha": "5993a97c40d6a8b9f924a779ccefbf0329300771", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -18,7 +18,7 @@ use std::fmt::Write;\n use std::hash::Hash;\n use syntax::ast;\n use syntax_expand::hygiene::ExpnId;\n-use syntax::symbol::{Symbol, sym, InternedString};\n+use syntax::symbol::{Symbol, sym};\n use syntax_pos::{Span, DUMMY_SP};\n \n /// The `DefPathTable` maps `DefIndex`es to `DefKey`s and vice versa.\n@@ -136,7 +136,9 @@ impl DefKey {\n \n         ::std::mem::discriminant(data).hash(&mut hasher);\n         if let Some(name) = data.get_opt_name() {\n-            name.hash(&mut hasher);\n+            // Get a stable hash by considering the symbol chars rather than\n+            // the symbol index.\n+            name.as_str().hash(&mut hasher);\n         }\n \n         disambiguator.hash(&mut hasher);\n@@ -218,7 +220,7 @@ impl DefPath {\n         for component in &self.data {\n             write!(s,\n                    \"::{}[{}]\",\n-                   component.data.as_interned_str(),\n+                   component.data.as_symbol(),\n                    component.disambiguator)\n                 .unwrap();\n         }\n@@ -238,11 +240,11 @@ impl DefPath {\n \n         for component in &self.data {\n             if component.disambiguator == 0 {\n-                write!(s, \"::{}\", component.data.as_interned_str()).unwrap();\n+                write!(s, \"::{}\", component.data.as_symbol()).unwrap();\n             } else {\n                 write!(s,\n                        \"{}[{}]\",\n-                       component.data.as_interned_str(),\n+                       component.data.as_symbol(),\n                        component.disambiguator)\n                        .unwrap();\n             }\n@@ -262,11 +264,11 @@ impl DefPath {\n             opt_delimiter.map(|d| s.push(d));\n             opt_delimiter = Some('-');\n             if component.disambiguator == 0 {\n-                write!(s, \"{}\", component.data.as_interned_str()).unwrap();\n+                write!(s, \"{}\", component.data.as_symbol()).unwrap();\n             } else {\n                 write!(s,\n                        \"{}[{}]\",\n-                       component.data.as_interned_str(),\n+                       component.data.as_symbol(),\n                        component.disambiguator)\n                        .unwrap();\n             }\n@@ -290,13 +292,13 @@ pub enum DefPathData {\n     /// An impl.\n     Impl,\n     /// Something in the type namespace.\n-    TypeNs(InternedString),\n+    TypeNs(Symbol),\n     /// Something in the value namespace.\n-    ValueNs(InternedString),\n+    ValueNs(Symbol),\n     /// Something in the macro namespace.\n-    MacroNs(InternedString),\n+    MacroNs(Symbol),\n     /// Something in the lifetime namespace.\n-    LifetimeNs(InternedString),\n+    LifetimeNs(Symbol),\n     /// A closure expression.\n     ClosureExpr,\n \n@@ -311,7 +313,7 @@ pub enum DefPathData {\n     /// Identifies a piece of crate metadata that is global to a whole crate\n     /// (as opposed to just one item). `GlobalMetaData` components are only\n     /// supposed to show up right below the crate root.\n-    GlobalMetaData(InternedString),\n+    GlobalMetaData(Symbol),\n }\n \n #[derive(Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord, Debug,\n@@ -545,7 +547,7 @@ impl Definitions {\n }\n \n impl DefPathData {\n-    pub fn get_opt_name(&self) -> Option<InternedString> {\n+    pub fn get_opt_name(&self) -> Option<Symbol> {\n         use self::DefPathData::*;\n         match *self {\n             TypeNs(name) |\n@@ -564,15 +566,15 @@ impl DefPathData {\n         }\n     }\n \n-    pub fn as_interned_str(&self) -> InternedString {\n+    pub fn as_symbol(&self) -> Symbol {\n         use self::DefPathData::*;\n-        let s = match *self {\n+        match *self {\n             TypeNs(name) |\n             ValueNs(name) |\n             MacroNs(name) |\n             LifetimeNs(name) |\n             GlobalMetaData(name) => {\n-                return name\n+                name\n             }\n             // Note that this does not show up in user print-outs.\n             CrateRoot => sym::double_braced_crate,\n@@ -582,13 +584,11 @@ impl DefPathData {\n             Ctor => sym::double_braced_constructor,\n             AnonConst => sym::double_braced_constant,\n             ImplTrait => sym::double_braced_opaque,\n-        };\n-\n-        s.as_interned_str()\n+        }\n     }\n \n     pub fn to_string(&self) -> String {\n-        self.as_interned_str().to_string()\n+        self.as_symbol().to_string()\n     }\n }\n \n@@ -610,7 +610,7 @@ macro_rules! define_global_metadata_kind {\n                     definitions.create_def_with_parent(\n                         CRATE_DEF_INDEX,\n                         ast::DUMMY_NODE_ID,\n-                        DefPathData::GlobalMetaData(instance.name().as_interned_str()),\n+                        DefPathData::GlobalMetaData(instance.name()),\n                         ExpnId::root(),\n                         DUMMY_SP\n                     );\n@@ -624,7 +624,7 @@ macro_rules! define_global_metadata_kind {\n                 let def_key = DefKey {\n                     parent: Some(CRATE_DEF_INDEX),\n                     disambiguated_data: DisambiguatedDefPathData {\n-                        data: DefPathData::GlobalMetaData(self.name().as_interned_str()),\n+                        data: DefPathData::GlobalMetaData(self.name()),\n                         disambiguator: 0,\n                     }\n                 };"}, {"sha": "38c84ad33478bc3de8428cc0b768fd79109641f2", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -19,7 +19,7 @@ use crate::ty::query::Providers;\n use crate::util::nodemap::{NodeMap, FxHashSet};\n \n use errors::FatalError;\n-use syntax_pos::{Span, DUMMY_SP, symbol::InternedString, MultiSpan};\n+use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n use syntax::source_map::Spanned;\n use syntax::ast::{self, CrateSugar, Ident, Name, NodeId, AsmDialect};\n use syntax::ast::{Attribute, Label, LitKind, StrStyle, FloatTy, IntTy, UintTy};\n@@ -628,9 +628,9 @@ impl Generics {\n         own_counts\n     }\n \n-    pub fn get_named(&self, name: InternedString) -> Option<&GenericParam> {\n+    pub fn get_named(&self, name: Symbol) -> Option<&GenericParam> {\n         for param in &self.params {\n-            if name == param.name.ident().as_interned_str() {\n+            if name == param.name.ident().name {\n                 return Some(param);\n             }\n         }"}, {"sha": "dc1f6fd3131bd61dc2ec486baab6b1fdfca852bd", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -9,7 +9,7 @@ use std::mem;\n use syntax::ast;\n use syntax::feature_gate;\n use syntax::parse::token;\n-use syntax::symbol::InternedString;\n+use syntax::symbol::LocalInternedString;\n use syntax::tokenstream;\n use syntax_pos::SourceFile;\n \n@@ -18,20 +18,21 @@ use crate::hir::def_id::{DefId, CrateNum, CRATE_DEF_INDEX};\n use smallvec::SmallVec;\n use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey, StableHasher};\n \n-impl<'a> HashStable<StableHashingContext<'a>> for InternedString {\n+impl<'a> HashStable<StableHashingContext<'a>> for LocalInternedString {\n     #[inline]\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        self.with(|s| s.hash_stable(hcx, hasher))\n+        let str = self as &str;\n+        str.hash_stable(hcx, hasher)\n     }\n }\n \n-impl<'a> ToStableHashKey<StableHashingContext<'a>> for InternedString {\n-    type KeyType = InternedString;\n+impl<'a> ToStableHashKey<StableHashingContext<'a>> for LocalInternedString {\n+    type KeyType = LocalInternedString;\n \n     #[inline]\n     fn to_stable_hash_key(&self,\n                           _: &StableHashingContext<'a>)\n-                          -> InternedString {\n+                          -> LocalInternedString {\n         self.clone()\n     }\n }\n@@ -44,13 +45,13 @@ impl<'a> HashStable<StableHashingContext<'a>> for ast::Name {\n }\n \n impl<'a> ToStableHashKey<StableHashingContext<'a>> for ast::Name {\n-    type KeyType = InternedString;\n+    type KeyType = LocalInternedString;\n \n     #[inline]\n     fn to_stable_hash_key(&self,\n                           _: &StableHashingContext<'a>)\n-                          -> InternedString {\n-        self.as_interned_str()\n+                          -> LocalInternedString {\n+        self.as_str()\n     }\n }\n "}, {"sha": "a50cc86862e57903983608ab6aa4cb5db1958244", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -542,7 +542,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 disambiguated_data: &DisambiguatedDefPathData,\n             ) -> Result<Self::Path, Self::Error> {\n                 let mut path = print_prefix(self)?;\n-                path.push(disambiguated_data.data.as_interned_str().to_string());\n+                path.push(disambiguated_data.data.as_symbol().to_string());\n                 Ok(path)\n             }\n             fn path_generic_args("}, {"sha": "e385d576b8ceb025049ab85a86e1057d3bc28777", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -32,7 +32,7 @@ use std::cell::{Cell, Ref, RefCell, RefMut};\n use std::collections::BTreeMap;\n use std::fmt;\n use syntax::ast;\n-use syntax_pos::symbol::InternedString;\n+use syntax_pos::symbol::Symbol;\n use syntax_pos::Span;\n \n use self::combine::CombineFields;\n@@ -392,7 +392,7 @@ pub enum RegionVariableOrigin {\n     Coercion(Span),\n \n     /// Region variables created as the values for early-bound regions\n-    EarlyBoundRegion(Span, InternedString),\n+    EarlyBoundRegion(Span, Symbol),\n \n     /// Region variables created for bound regions\n     /// in a function or method that is called"}, {"sha": "f79a30c7ae8f3cdbbf04631b209c3818cfe2ebac", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -1,4 +1,4 @@\n-use syntax::symbol::InternedString;\n+use syntax::symbol::Symbol;\n use syntax_pos::Span;\n use crate::ty::{self, Ty, TyVid};\n \n@@ -49,7 +49,7 @@ pub enum TypeVariableOriginKind {\n     MiscVariable,\n     NormalizeProjectionType,\n     TypeInference,\n-    TypeParameterDefinition(InternedString),\n+    TypeParameterDefinition(Symbol),\n \n     /// One of the upvars or closure kind parameters in a `ClosureSubsts`\n     /// (before it has been determined)."}, {"sha": "b0b6d971c6087e572ece48f73b846fb4121c80b8", "filename": "src/librustc/infer/unify_key.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Funify_key.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -3,7 +3,7 @@ use crate::mir::interpret::ConstValue;\n use rustc_data_structures::unify::{NoError, EqUnifyValue, UnifyKey, UnifyValue, UnificationTable};\n use rustc_data_structures::unify::InPlace;\n use syntax_pos::{Span, DUMMY_SP};\n-use syntax::symbol::InternedString;\n+use syntax::symbol::Symbol;\n \n use std::cmp;\n use std::marker::PhantomData;\n@@ -90,7 +90,7 @@ pub struct ConstVariableOrigin {\n pub enum ConstVariableOriginKind {\n     MiscVariable,\n     ConstInference,\n-    ConstParameterDefinition(InternedString),\n+    ConstParameterDefinition(Symbol),\n     SubstitutionPlaceholder,\n }\n "}, {"sha": "1cb53d754dcd3891357e0b48e63dadc7ba3336f0", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -818,7 +818,7 @@ impl<'a, 'tcx> LateContext<'a, 'tcx> {\n                     _ => {}\n                 }\n \n-                path.push(disambiguated_data.data.as_interned_str().as_symbol());\n+                path.push(disambiguated_data.data.as_symbol());\n                 Ok(path)\n             }\n "}, {"sha": "08e7001681c290f89ca569b13f91880cdca4571a", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -37,7 +37,7 @@ use std::slice;\n use std::vec::IntoIter;\n use std::{iter, mem, option, u32};\n use syntax::ast::Name;\n-use syntax::symbol::{InternedString, Symbol};\n+use syntax::symbol::Symbol;\n use syntax_pos::{Span, DUMMY_SP};\n \n pub use crate::mir::interpret::AssertMessage;\n@@ -2736,8 +2736,8 @@ pub enum UnsafetyViolationKind {\n #[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, HashStable)]\n pub struct UnsafetyViolation {\n     pub source_info: SourceInfo,\n-    pub description: InternedString,\n-    pub details: InternedString,\n+    pub description: Symbol,\n+    pub details: Symbol,\n     pub kind: UnsafetyViolationKind,\n }\n "}, {"sha": "58f99667cb3a417d6dd7606d787600b83c371a81", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -1,6 +1,6 @@\n use crate::hir::def_id::{DefId, CrateNum, LOCAL_CRATE};\n use crate::hir::HirId;\n-use syntax::symbol::InternedString;\n+use syntax::symbol::Symbol;\n use syntax::attr::InlineAttr;\n use syntax::source_map::Span;\n use crate::ty::{Instance, InstanceDef, TyCtxt, SymbolName, subst::InternalSubsts};\n@@ -80,7 +80,7 @@ impl<'tcx> MonoItem<'tcx> {\n             MonoItem::GlobalAsm(hir_id) => {\n                 let def_id = tcx.hir().local_def_id(hir_id);\n                 SymbolName {\n-                    name: InternedString::intern(&format!(\"global_asm_{:?}\", def_id))\n+                    name: Symbol::intern(&format!(\"global_asm_{:?}\", def_id))\n                 }\n             }\n         }\n@@ -246,7 +246,7 @@ pub struct CodegenUnit<'tcx> {\n     /// name be unique amongst **all** crates. Therefore, it should\n     /// contain something unique to this crate (e.g., a module path)\n     /// as well as the crate name and disambiguator.\n-    name: InternedString,\n+    name: Symbol,\n     items: FxHashMap<MonoItem<'tcx>, (Linkage, Visibility)>,\n     size_estimate: Option<usize>,\n }\n@@ -294,19 +294,19 @@ impl_stable_hash_for!(enum self::Visibility {\n });\n \n impl<'tcx> CodegenUnit<'tcx> {\n-    pub fn new(name: InternedString) -> CodegenUnit<'tcx> {\n+    pub fn new(name: Symbol) -> CodegenUnit<'tcx> {\n         CodegenUnit {\n             name: name,\n             items: Default::default(),\n             size_estimate: None,\n         }\n     }\n \n-    pub fn name(&self) -> &InternedString {\n-        &self.name\n+    pub fn name(&self) -> Symbol {\n+        self.name\n     }\n \n-    pub fn set_name(&mut self, name: InternedString) {\n+    pub fn set_name(&mut self, name: Symbol) {\n         self.name = name;\n     }\n \n@@ -474,7 +474,7 @@ impl CodegenUnitNameBuilder<'tcx> {\n                                    cnum: CrateNum,\n                                    components: I,\n                                    special_suffix: Option<S>)\n-                                   -> InternedString\n+                                   -> Symbol\n         where I: IntoIterator<Item=C>,\n               C: fmt::Display,\n               S: fmt::Display,\n@@ -487,7 +487,7 @@ impl CodegenUnitNameBuilder<'tcx> {\n             cgu_name\n         } else {\n             let cgu_name = &cgu_name.as_str()[..];\n-            InternedString::intern(&CodegenUnit::mangle_name(cgu_name))\n+            Symbol::intern(&CodegenUnit::mangle_name(cgu_name))\n         }\n     }\n \n@@ -497,7 +497,7 @@ impl CodegenUnitNameBuilder<'tcx> {\n                                              cnum: CrateNum,\n                                              components: I,\n                                              special_suffix: Option<S>)\n-                                             -> InternedString\n+                                             -> Symbol\n         where I: IntoIterator<Item=C>,\n               C: fmt::Display,\n               S: fmt::Display,\n@@ -543,6 +543,6 @@ impl CodegenUnitNameBuilder<'tcx> {\n             write!(cgu_name, \".{}\", special_suffix).unwrap();\n         }\n \n-        InternedString::intern(&cgu_name[..])\n+        Symbol::intern(&cgu_name[..])\n     }\n }"}, {"sha": "fdca6d0e17a1d03a1d49793ce4bd0f3cae1849f9", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -15,7 +15,7 @@ use crate::traits::query::{\n };\n \n use std::borrow::Cow;\n-use syntax_pos::symbol::InternedString;\n+use syntax_pos::symbol::Symbol;\n \n // Each of these queries corresponds to a function pointer field in the\n // `Providers` struct for requesting a value of that type, and a method\n@@ -924,7 +924,7 @@ rustc_queries! {\n             desc { \"collect_and_partition_mono_items\" }\n         }\n         query is_codegened_item(_: DefId) -> bool {}\n-        query codegen_unit(_: InternedString) -> Arc<CodegenUnit<'tcx>> {\n+        query codegen_unit(_: Symbol) -> Arc<CodegenUnit<'tcx>> {\n             no_force\n             desc { \"codegen_unit\" }\n         }"}, {"sha": "e684cdc0a3872d530432ece240fa7ef694649165", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -406,7 +406,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 },\n                 GenericParamDefKind::Lifetime => continue,\n             };\n-            let name = param.name.as_symbol();\n+            let name = param.name;\n             flags.push((name, Some(value)));\n         }\n "}, {"sha": "e42c3a63541ccdea8ccdc4f16360329452e84d3c", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -19,7 +19,7 @@ use crate::ty::subst::{Subst, InternalSubsts};\n use std::borrow::Cow;\n use std::iter::{self};\n use syntax::ast::{self};\n-use syntax::symbol::InternedString;\n+use syntax::symbol::Symbol;\n use syntax_pos::{Span, DUMMY_SP};\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n@@ -560,7 +560,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         // are implemented\n         let unsized_self_ty: Ty<'tcx> = self.mk_ty_param(\n             ::std::u32::MAX,\n-            InternedString::intern(\"RustaceansAreAwesome\"),\n+            Symbol::intern(\"RustaceansAreAwesome\"),\n         );\n \n         // `Receiver[Self => U]`"}, {"sha": "c1c814f9b0371218a0415b78d2b8479cd394cd4e", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -250,7 +250,7 @@ impl<'tcx> OnUnimplementedFormatString {\n                     Position::ArgumentNamed(s) if s == sym::from_desugaring => (),\n                     // So is `{A}` if A is a type parameter\n                     Position::ArgumentNamed(s) => match generics.params.iter().find(|param| {\n-                        param.name.as_symbol() == s\n+                        param.name == s\n                     }) {\n                         Some(_) => (),\n                         None => {\n@@ -289,7 +289,7 @@ impl<'tcx> OnUnimplementedFormatString {\n                 },\n                 GenericParamDefKind::Lifetime => return None\n             };\n-            let name = param.name.as_symbol();\n+            let name = param.name;\n             Some((name, value))\n         }).collect::<FxHashMap<Symbol, String>>();\n         let empty_string = String::new();"}, {"sha": "18db3c8d10b7c3d6bda4289fb9433dc0ce06f502", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -4,7 +4,7 @@ use crate::traits;\n use crate::traits::project::Normalized;\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::{self, Lift, Ty, TyCtxt};\n-use syntax::symbol::InternedString;\n+use syntax::symbol::Symbol;\n \n use std::fmt;\n use std::rc::Rc;\n@@ -261,11 +261,11 @@ impl fmt::Display for traits::QuantifierKind {\n /// for debug output in tests anyway.\n struct BoundNamesCollector {\n     // Just sort by name because `BoundRegion::BrNamed` does not have a `BoundVar` index anyway.\n-    regions: BTreeSet<InternedString>,\n+    regions: BTreeSet<Symbol>,\n \n     // Sort by `BoundVar` index, so usually this should be equivalent to the order given\n     // by the list of type parameters.\n-    types: BTreeMap<u32, InternedString>,\n+    types: BTreeMap<u32, Symbol>,\n \n     binder_index: ty::DebruijnIndex,\n }\n@@ -319,7 +319,7 @@ impl<'tcx> TypeVisitor<'tcx> for BoundNamesCollector {\n                     match bound_ty.kind {\n                         ty::BoundTyKind::Param(name) => name,\n                         ty::BoundTyKind::Anon =>\n-                            InternedString::intern(&format!(\"^{}\", bound_ty.var.as_u32()),\n+                            Symbol::intern(&format!(\"^{}\", bound_ty.var.as_u32()),\n                         ),\n                     }\n                 );\n@@ -340,7 +340,7 @@ impl<'tcx> TypeVisitor<'tcx> for BoundNamesCollector {\n                     }\n \n                     ty::BoundRegion::BrAnon(var) => {\n-                        self.regions.insert(InternedString::intern(&format!(\"'^{}\", var)));\n+                        self.regions.insert(Symbol::intern(&format!(\"'^{}\", var)));\n                     }\n \n                     _ => (),"}, {"sha": "d5a93e02905507d66428c40e771bffcbe1735b36", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -72,7 +72,7 @@ use syntax::ast;\n use syntax::attr;\n use syntax::source_map::MultiSpan;\n use syntax::feature_gate;\n-use syntax::symbol::{Symbol, InternedString, kw, sym};\n+use syntax::symbol::{Symbol, kw, sym};\n use syntax_pos::Span;\n \n pub struct AllArenas {\n@@ -949,7 +949,7 @@ impl<'tcx> CommonTypes<'tcx> {\n             f64: mk(Float(ast::FloatTy::F64)),\n             self_param: mk(ty::Param(ty::ParamTy {\n                 index: 0,\n-                name: kw::SelfUpper.as_interned_str(),\n+                name: kw::SelfUpper,\n             })),\n \n             trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),\n@@ -2556,15 +2556,15 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline]\n-    pub fn mk_ty_param(self, index: u32, name: InternedString) -> Ty<'tcx> {\n+    pub fn mk_ty_param(self, index: u32, name: Symbol) -> Ty<'tcx> {\n         self.mk_ty(Param(ParamTy { index, name: name }))\n     }\n \n     #[inline]\n     pub fn mk_const_param(\n         self,\n         index: u32,\n-        name: InternedString,\n+        name: Symbol,\n         ty: Ty<'tcx>\n     ) -> &'tcx Const<'tcx> {\n         self.mk_const(ty::Const {"}, {"sha": "feede00fea1c354e7bb38150c3a370e9ecb107ac", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -46,7 +46,7 @@ use std::ops::Range;\n use syntax::ast::{self, Name, Ident, NodeId};\n use syntax::attr;\n use syntax_expand::hygiene::ExpnId;\n-use syntax::symbol::{kw, sym, Symbol, InternedString};\n+use syntax::symbol::{kw, sym, Symbol};\n use syntax_pos::Span;\n \n use smallvec;\n@@ -849,7 +849,7 @@ impl ty::EarlyBoundRegion {\n     /// Does this early bound region have a name? Early bound regions normally\n     /// always have names except when using anonymous lifetimes (`'_`).\n     pub fn has_name(&self) -> bool {\n-        self.name != kw::UnderscoreLifetime.as_interned_str()\n+        self.name != kw::UnderscoreLifetime\n     }\n }\n \n@@ -866,7 +866,7 @@ pub enum GenericParamDefKind {\n \n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub struct GenericParamDef {\n-    pub name: InternedString,\n+    pub name: Symbol,\n     pub def_id: DefId,\n     pub index: u32,\n \n@@ -3019,7 +3019,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     }),\n                 _ => def_key.disambiguated_data.data.get_opt_name().unwrap_or_else(|| {\n                     bug!(\"item_name: no name for {:?}\", self.def_path(id));\n-                }).as_symbol(),\n+                }),\n             }\n         }\n     }\n@@ -3429,11 +3429,11 @@ pub struct CrateInherentImpls {\n     pub inherent_impls: DefIdMap<Vec<DefId>>,\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n pub struct SymbolName {\n     // FIXME: we don't rely on interning or equality here - better have\n     // this be a `&'tcx str`.\n-    pub name: InternedString\n+    pub name: Symbol\n }\n \n impl_stable_hash_for!(struct self::SymbolName {\n@@ -3443,11 +3443,24 @@ impl_stable_hash_for!(struct self::SymbolName {\n impl SymbolName {\n     pub fn new(name: &str) -> SymbolName {\n         SymbolName {\n-            name: InternedString::intern(name)\n+            name: Symbol::intern(name)\n         }\n     }\n }\n \n+impl PartialOrd for SymbolName {\n+    fn partial_cmp(&self, other: &SymbolName) -> Option<Ordering> {\n+        self.name.as_str().partial_cmp(&other.name.as_str())\n+    }\n+}\n+\n+/// Ordering must use the chars to ensure reproducible builds.\n+impl Ord for SymbolName {\n+    fn cmp(&self, other: &SymbolName) -> Ordering {\n+        self.name.as_str().cmp(&other.name.as_str())\n+    }\n+}\n+\n impl fmt::Display for SymbolName {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(&self.name, fmt)"}, {"sha": "e72916de6a9c7a0311c6d3065084b79d27dfba36", "filename": "src/librustc/ty/print/obsolete.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -218,9 +218,9 @@ impl DefPathBasedNames<'tcx> {\n         // foo::bar::ItemName::\n         for part in self.tcx.def_path(def_id).data {\n             if self.omit_disambiguators {\n-                write!(output, \"{}::\", part.data.as_interned_str()).unwrap();\n+                write!(output, \"{}::\", part.data.as_symbol()).unwrap();\n             } else {\n-                write!(output, \"{}[{}]::\", part.data.as_interned_str(), part.disambiguator)\n+                write!(output, \"{}[{}]::\", part.data.as_symbol(), part.disambiguator)\n                     .unwrap();\n             }\n         }"}, {"sha": "8a98a5d83615fbf4e2d8985afd7f0ffbf6adc4c7", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -14,7 +14,7 @@ use rustc_apfloat::Float;\n use rustc_target::spec::abi::Abi;\n use syntax::ast;\n use syntax::attr::{SignedInt, UnsignedInt};\n-use syntax::symbol::{kw, InternedString};\n+use syntax::symbol::{kw, Symbol};\n \n use std::cell::Cell;\n use std::fmt::{self, Write as _};\n@@ -384,15 +384,15 @@ pub trait PrettyPrinter<'tcx>:\n                 let reexport = self.tcx().item_children(visible_parent)\n                     .iter()\n                     .find(|child| child.res.def_id() == def_id)\n-                    .map(|child| child.ident.as_interned_str());\n+                    .map(|child| child.ident.name);\n                 if let Some(reexport) = reexport {\n                     *name = reexport;\n                 }\n             }\n             // Re-exported `extern crate` (#43189).\n             DefPathData::CrateRoot => {\n                 data = DefPathData::TypeNs(\n-                    self.tcx().original_crate_name(def_id.krate).as_interned_str(),\n+                    self.tcx().original_crate_name(def_id.krate),\n                 );\n             }\n             _ => {}\n@@ -992,7 +992,7 @@ pub struct FmtPrinterData<'a, 'tcx, F> {\n     empty_path: bool,\n     in_value: bool,\n \n-    used_region_names: FxHashSet<InternedString>,\n+    used_region_names: FxHashSet<Symbol>,\n     region_index: usize,\n     binder_depth: usize,\n \n@@ -1222,7 +1222,7 @@ impl<F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n \n         // FIXME(eddyb) `name` should never be empty, but it\n         // currently is for `extern { ... }` \"foreign modules\".\n-        let name = disambiguated_data.data.as_interned_str().as_str();\n+        let name = disambiguated_data.data.as_symbol().as_str();\n         if !name.is_empty() {\n             if !self.empty_path {\n                 write!(self, \"::\")?;\n@@ -1332,16 +1332,16 @@ impl<F: fmt::Write> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx, F> {\n \n         match *region {\n             ty::ReEarlyBound(ref data) => {\n-                data.name.as_symbol() != kw::Invalid &&\n-                data.name.as_symbol() != kw::UnderscoreLifetime\n+                data.name != kw::Invalid &&\n+                data.name != kw::UnderscoreLifetime\n             }\n \n             ty::ReLateBound(_, br) |\n             ty::ReFree(ty::FreeRegion { bound_region: br, .. }) |\n             ty::RePlaceholder(ty::Placeholder { name: br, .. }) => {\n                 if let ty::BrNamed(_, name) = br {\n-                    if name.as_symbol() != kw::Invalid &&\n-                       name.as_symbol() != kw::UnderscoreLifetime {\n+                    if name != kw::Invalid &&\n+                       name != kw::UnderscoreLifetime {\n                         return true;\n                     }\n                 }\n@@ -1397,7 +1397,7 @@ impl<F: fmt::Write> FmtPrinter<'_, '_, F> {\n         // `explain_region()` or `note_and_explain_region()`.\n         match *region {\n             ty::ReEarlyBound(ref data) => {\n-                if data.name.as_symbol() != kw::Invalid {\n+                if data.name != kw::Invalid {\n                     p!(write(\"{}\", data.name));\n                     return Ok(self);\n                 }\n@@ -1406,8 +1406,8 @@ impl<F: fmt::Write> FmtPrinter<'_, '_, F> {\n             ty::ReFree(ty::FreeRegion { bound_region: br, .. }) |\n             ty::RePlaceholder(ty::Placeholder { name: br, .. }) => {\n                 if let ty::BrNamed(_, name) = br {\n-                    if name.as_symbol() != kw::Invalid &&\n-                       name.as_symbol() != kw::UnderscoreLifetime {\n+                    if name != kw::Invalid &&\n+                       name != kw::UnderscoreLifetime {\n                         p!(write(\"{}\", name));\n                         return Ok(self);\n                     }\n@@ -1474,11 +1474,11 @@ impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n     where\n         T: Print<'tcx, Self, Output = Self, Error = fmt::Error> + TypeFoldable<'tcx>,\n     {\n-        fn name_by_region_index(index: usize) -> InternedString {\n+        fn name_by_region_index(index: usize) -> Symbol {\n             match index {\n-                0 => InternedString::intern(\"'r\"),\n-                1 => InternedString::intern(\"'s\"),\n-                i => InternedString::intern(&format!(\"'t{}\", i-2)),\n+                0 => Symbol::intern(\"'r\"),\n+                1 => Symbol::intern(\"'s\"),\n+                i => Symbol::intern(&format!(\"'t{}\", i-2)),\n             }\n         }\n \n@@ -1541,7 +1541,7 @@ impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n         where T: TypeFoldable<'tcx>\n     {\n \n-        struct LateBoundRegionNameCollector<'a>(&'a mut FxHashSet<InternedString>);\n+        struct LateBoundRegionNameCollector<'a>(&'a mut FxHashSet<Symbol>);\n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for LateBoundRegionNameCollector<'_> {\n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n                 match *r {"}, {"sha": "0a217e9ae666dd42191a885ce6aabb7411e6bea3", "filename": "src/librustc/ty/query/keys.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -9,7 +9,7 @@ use crate::ty::fast_reject::SimplifiedType;\n use crate::mir;\n \n use syntax_pos::{Span, DUMMY_SP};\n-use syntax_pos::symbol::InternedString;\n+use syntax_pos::symbol::Symbol;\n \n /// The `Key` trait controls what types can legally be used as the key\n /// for a query.\n@@ -188,7 +188,7 @@ impl<'tcx> Key for traits::Environment<'tcx> {\n     }\n }\n \n-impl Key for InternedString {\n+impl Key for Symbol {\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }"}, {"sha": "9b15ad560b5d25f751eea19788be91b410aafbae", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -55,7 +55,6 @@ use std::ops::Deref;\n use std::sync::Arc;\n use std::any::type_name;\n use syntax_pos::{Span, DUMMY_SP};\n-use syntax_pos::symbol::InternedString;\n use syntax::attr;\n use syntax::ast;\n use syntax::feature_gate;"}, {"sha": "f0d1639f72f59cf3cafbb826c9419703e41dcd8a", "filename": "src/librustc/ty/query/values.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fty%2Fquery%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fty%2Fquery%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fvalues.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -1,7 +1,7 @@\n use crate::ty::{self, Ty, TyCtxt, AdtSizedConstraint};\n use crate::ty::util::NeedsDrop;\n \n-use syntax::symbol::InternedString;\n+use syntax::symbol::Symbol;\n \n pub(super) trait Value<'tcx>: Sized {\n     fn from_cycle_error(tcx: TyCtxt<'tcx>) -> Self;\n@@ -22,7 +22,7 @@ impl<'tcx> Value<'tcx> for Ty<'tcx> {\n \n impl<'tcx> Value<'tcx> for ty::SymbolName {\n     fn from_cycle_error(_: TyCtxt<'tcx>) -> Self {\n-        ty::SymbolName { name: InternedString::intern(\"<error>\") }\n+        ty::SymbolName { name: Symbol::intern(\"<error>\") }\n     }\n }\n "}, {"sha": "3a9994ac64c77e9d2c0bdcb16e11cf01a08c5824", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -24,7 +24,7 @@ use std::marker::PhantomData;\n use std::ops::Range;\n use rustc_target::spec::abi;\n use syntax::ast::{self, Ident};\n-use syntax::symbol::{kw, InternedString};\n+use syntax::symbol::{kw, Symbol};\n \n use self::InferTy::*;\n use self::TyKind::*;\n@@ -55,7 +55,7 @@ pub enum BoundRegion {\n     ///\n     /// The `DefId` is needed to distinguish free regions in\n     /// the event of shadowing.\n-    BrNamed(DefId, InternedString),\n+    BrNamed(DefId, Symbol),\n \n     /// Anonymous region for the implicit env pointer parameter\n     /// to a closure\n@@ -1121,16 +1121,16 @@ pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<FnSig<'tcx>>>;\n          Hash, RustcEncodable, RustcDecodable, HashStable)]\n pub struct ParamTy {\n     pub index: u32,\n-    pub name: InternedString,\n+    pub name: Symbol,\n }\n \n impl<'tcx> ParamTy {\n-    pub fn new(index: u32, name: InternedString) -> ParamTy {\n+    pub fn new(index: u32, name: Symbol) -> ParamTy {\n         ParamTy { index, name: name }\n     }\n \n     pub fn for_self() -> ParamTy {\n-        ParamTy::new(0, kw::SelfUpper.as_interned_str())\n+        ParamTy::new(0, kw::SelfUpper)\n     }\n \n     pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {\n@@ -1146,11 +1146,11 @@ impl<'tcx> ParamTy {\n          Eq, PartialEq, Ord, PartialOrd, HashStable)]\n pub struct ParamConst {\n     pub index: u32,\n-    pub name: InternedString,\n+    pub name: Symbol,\n }\n \n impl<'tcx> ParamConst {\n-    pub fn new(index: u32, name: InternedString) -> ParamConst {\n+    pub fn new(index: u32, name: Symbol) -> ParamConst {\n         ParamConst { index, name }\n     }\n \n@@ -1323,7 +1323,7 @@ impl<'tcx> rustc_serialize::UseSpecializedDecodable for Region<'tcx> {}\n pub struct EarlyBoundRegion {\n     pub def_id: DefId,\n     pub index: u32,\n-    pub name: InternedString,\n+    pub name: Symbol,\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n@@ -1387,7 +1387,7 @@ pub struct BoundTy {\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub enum BoundTyKind {\n     Anon,\n-    Param(InternedString),\n+    Param(Symbol),\n }\n \n impl_stable_hash_for!(struct BoundTy { var, kind });"}, {"sha": "edd34b52eade7703687020c9a5f97ad7e693dd71", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -36,7 +36,7 @@ use rustc_codegen_ssa::back::write::submit_codegened_module_to_llvm;\n \n use std::ffi::CString;\n use std::time::Instant;\n-use syntax_pos::symbol::InternedString;\n+use syntax_pos::symbol::Symbol;\n use rustc::hir::CodegenFnAttrs;\n \n use crate::value::Value;\n@@ -105,7 +105,7 @@ pub fn iter_globals(llmod: &'ll llvm::Module) -> ValueIter<'ll> {\n \n pub fn compile_codegen_unit(\n     tcx: TyCtxt<'tcx>,\n-    cgu_name: InternedString,\n+    cgu_name: Symbol,\n     tx_to_llvm_workers: &std::sync::mpsc::Sender<Box<dyn std::any::Any + Send>>,\n ) {\n     let prof_timer = tcx.prof.generic_activity(\"codegen_module\");\n@@ -131,7 +131,7 @@ pub fn compile_codegen_unit(\n \n     fn module_codegen(\n         tcx: TyCtxt<'_>,\n-        cgu_name: InternedString,\n+        cgu_name: Symbol,\n     ) -> ModuleCodegen<ModuleLlvm> {\n         let cgu = tcx.codegen_unit(cgu_name);\n         // Instantiate monomorphizations without filling out definitions yet..."}, {"sha": "fd7054a5a0ada777f9547420412aaf6e43c84154", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -221,7 +221,7 @@ impl CodegenCx<'ll, 'tcx> {\n                  def_id);\n \n         let ty = instance.ty(self.tcx);\n-        let sym = self.tcx.symbol_name(instance).name.as_symbol();\n+        let sym = self.tcx.symbol_name(instance).name;\n \n         debug!(\"get_static: sym={} instance={:?}\", sym, instance);\n "}, {"sha": "f0148a21ae67064e2ceba0e750f7dd1473f5ce39", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -46,7 +46,7 @@ use std::iter;\n use std::ptr;\n use std::path::{Path, PathBuf};\n use syntax::ast;\n-use syntax::symbol::{Interner, InternedString};\n+use syntax::symbol::{Interner, Symbol};\n use syntax_pos::{self, Span, FileName};\n \n impl PartialEq for llvm::Metadata {\n@@ -2125,7 +2125,7 @@ fn compute_type_parameters(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>) -> Option<&'\n \n     fn get_parameter_names(cx: &CodegenCx<'_, '_>,\n                            generics: &ty::Generics)\n-                           -> Vec<InternedString> {\n+                           -> Vec<Symbol> {\n         let mut names = generics.parent.map_or(vec![], |def_id| {\n             get_parameter_names(cx, cx.tcx.generics_of(def_id))\n         });"}, {"sha": "5b59f4c28de205248fe789f0e312daf5bd54ff74", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -36,7 +36,7 @@ use std::ffi::{CStr, CString};\n \n use syntax_pos::{self, Span, Pos};\n use syntax::ast;\n-use syntax::symbol::InternedString;\n+use syntax::symbol::Symbol;\n use rustc::ty::layout::{self, LayoutOf, HasTyCtxt};\n use rustc_codegen_ssa::traits::*;\n \n@@ -490,7 +490,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n \n         fn get_parameter_names(cx: &CodegenCx<'_, '_>,\n                                generics: &ty::Generics)\n-                               -> Vec<InternedString> {\n+                               -> Vec<Symbol> {\n             let mut names = generics.parent.map_or(vec![], |def_id| {\n                 get_parameter_names(cx, cx.tcx.generics_of(def_id))\n             });"}, {"sha": "628d1372b5702ecc0ab8e6e1973a3ef6afae7259", "filename": "src/librustc_codegen_llvm/debuginfo/namespace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -35,7 +35,7 @@ pub fn item_namespace(cx: &CodegenCx<'ll, '_>, def_id: DefId) -> &'ll DIScope {\n \n     let namespace_name = match def_key.disambiguated_data.data {\n         DefPathData::CrateRoot => cx.tcx.crate_name(def_id.krate).as_str(),\n-        data => data.as_interned_str().as_str()\n+        data => data.as_symbol().as_str()\n     };\n \n     let namespace_name = SmallCStr::new(&namespace_name);"}, {"sha": "8c1797cfb7de4630f8be7df428693d2ff84b9fa9", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -50,7 +50,6 @@ use rustc_codegen_ssa::CompiledModule;\n use errors::{FatalError, Handler};\n use rustc::dep_graph::WorkProduct;\n use syntax_expand::allocator::AllocatorKind;\n-use syntax_pos::symbol::InternedString;\n pub use llvm_util::target_features;\n use std::any::Any;\n use std::sync::Arc;\n@@ -123,7 +122,7 @@ impl ExtraBackendMethods for LlvmCodegenBackend {\n     }\n     fn compile_codegen_unit(\n         &self, tcx: TyCtxt<'_>,\n-        cgu_name: InternedString,\n+        cgu_name: Symbol,\n         tx: &std::sync::mpsc::Sender<Box<dyn Any + Send>>,\n     ) {\n         base::compile_codegen_unit(tcx, cgu_name, tx);"}, {"sha": "bf687f846357e7c8fe0814830fc33702a10955f0", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -526,7 +526,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     // unnecessarily.\n     if tcx.dep_graph.is_fully_enabled() {\n         for cgu in &codegen_units {\n-            tcx.codegen_unit(cgu.name().clone());\n+            tcx.codegen_unit(cgu.name());\n         }\n     }\n \n@@ -614,7 +614,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n         match cgu_reuse {\n             CguReuse::No => {\n                 let start_time = Instant::now();\n-                backend.compile_codegen_unit(tcx, *cgu.name(), &ongoing_codegen.coordinator_send);\n+                backend.compile_codegen_unit(tcx, cgu.name(), &ongoing_codegen.coordinator_send);\n                 total_codegen_time += start_time.elapsed();\n                 false\n             }"}, {"sha": "166a74fe48795adcfc7582fc060111570f228024", "filename": "src/librustc_codegen_ssa/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -221,7 +221,7 @@ pub fn push_debuginfo_type_name<'tcx>(\n             output.push_str(&tcx.crate_name(def_id.krate).as_str());\n             for path_element in tcx.def_path(def_id).data {\n                 output.push_str(\"::\");\n-                output.push_str(&path_element.data.as_interned_str().as_str());\n+                output.push_str(&path_element.data.as_symbol().as_str());\n             }\n         } else {\n             output.push_str(&tcx.item_name(def_id).as_str());"}, {"sha": "1fff740d7403fee1bf7e026cbb683b87dd0ad0e8", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -10,7 +10,7 @@ use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use std::sync::Arc;\n use std::sync::mpsc;\n use syntax_expand::allocator::AllocatorKind;\n-use syntax_pos::symbol::InternedString;\n+use syntax_pos::symbol::Symbol;\n \n pub trait BackendTypes {\n     type Value: CodegenObject;\n@@ -50,7 +50,7 @@ pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Se\n     fn compile_codegen_unit(\n         &self,\n         tcx: TyCtxt<'_>,\n-        cgu_name: InternedString,\n+        cgu_name: Symbol,\n         tx_to_llvm_workers: &mpsc::Sender<Box<dyn std::any::Any + Send>>,\n     );\n     // If find_features is true this won't access `sess.crate_types` by assuming"}, {"sha": "c52c6cfa83c917c64ce7d3b1902927805d6f4218", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -95,7 +95,7 @@ use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt, Instance};\n use rustc::mir::mono::{MonoItem, InstantiationMode};\n \n-use syntax_pos::symbol::InternedString;\n+use syntax_pos::symbol::Symbol;\n \n use log::debug;\n \n@@ -112,7 +112,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n }\n \n-fn symbol_name(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> InternedString {\n+fn symbol_name(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> Symbol {\n     let def_id = instance.def_id();\n     let substs = instance.substs;\n \n@@ -123,13 +123,11 @@ fn symbol_name(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> InternedString {\n     if def_id.is_local() {\n         if tcx.plugin_registrar_fn(LOCAL_CRATE) == Some(def_id) {\n             let disambiguator = tcx.sess.local_crate_disambiguator();\n-            return\n-                InternedString::intern(&tcx.sess.generate_plugin_registrar_symbol(disambiguator));\n+            return Symbol::intern(&tcx.sess.generate_plugin_registrar_symbol(disambiguator));\n         }\n         if tcx.proc_macro_decls_static(LOCAL_CRATE) == Some(def_id) {\n             let disambiguator = tcx.sess.local_crate_disambiguator();\n-            return\n-                InternedString::intern(&tcx.sess.generate_proc_macro_decls_symbol(disambiguator));\n+            return Symbol::intern(&tcx.sess.generate_proc_macro_decls_symbol(disambiguator));\n         }\n     }\n \n@@ -146,23 +144,22 @@ fn symbol_name(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> InternedString {\n     let attrs = tcx.codegen_fn_attrs(def_id);\n     if is_foreign {\n         if let Some(name) = attrs.link_name {\n-            return name.as_interned_str();\n+            return name;\n         }\n         // Don't mangle foreign items.\n-        return tcx.item_name(def_id).as_interned_str();\n+        return tcx.item_name(def_id);\n     }\n \n-    if let Some(name) = &attrs.export_name {\n+    if let Some(name) = attrs.export_name {\n         // Use provided name\n-        return name.as_interned_str();\n+        return name;\n     }\n \n     if attrs.flags.contains(CodegenFnAttrFlags::NO_MANGLE) {\n         // Don't mangle\n-        return tcx.item_name(def_id).as_interned_str();\n+        return tcx.item_name(def_id);\n     }\n \n-\n     let is_generic = substs.non_erasable_generics().next().is_some();\n     let avoid_cross_crate_conflicts =\n         // If this is an instance of a generic function, we also hash in\n@@ -222,5 +219,5 @@ fn symbol_name(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> InternedString {\n         SymbolManglingVersion::V0 => v0::mangle(tcx, instance, instantiating_crate),\n     };\n \n-    InternedString::intern(&mangled)\n+    Symbol::intern(&mangled)\n }"}, {"sha": "601a33a66bb32f383db6fcea8ef968422060817b", "filename": "src/librustc_codegen_utils/symbol_names/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -335,7 +335,7 @@ impl Printer<'tcx> for SymbolPrinter<'tcx> {\n             self.path.finalize_pending_component();\n         }\n \n-        self.write_str(&disambiguated_data.data.as_interned_str().as_str())?;\n+        self.write_str(&disambiguated_data.data.as_symbol().as_str())?;\n         Ok(self)\n     }\n     fn path_generic_args("}, {"sha": "ca035d0cdcb19d434700732e3b428b4d4a5e7d5f", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -27,7 +27,7 @@ use rustc::mir::mono::CodegenUnitNameBuilder;\n use rustc::ty::TyCtxt;\n use std::collections::BTreeSet;\n use syntax::ast;\n-use syntax::symbol::{InternedString, Symbol, sym};\n+use syntax::symbol::{Symbol, sym};\n use rustc::ich::{ATTR_PARTITION_REUSED, ATTR_PARTITION_CODEGENED,\n                  ATTR_EXPECTED_CGU_REUSE};\n \n@@ -45,8 +45,8 @@ pub fn assert_module_sources(tcx: TyCtxt<'_>) {\n             .collect_and_partition_mono_items(LOCAL_CRATE)\n             .1\n             .iter()\n-            .map(|cgu| *cgu.name())\n-            .collect::<BTreeSet<InternedString>>();\n+            .map(|cgu| cgu.name())\n+            .collect::<BTreeSet<Symbol>>();\n \n         let ams = AssertModuleSource {\n             tcx,\n@@ -61,7 +61,7 @@ pub fn assert_module_sources(tcx: TyCtxt<'_>) {\n \n struct AssertModuleSource<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    available_cgus: BTreeSet<InternedString>,\n+    available_cgus: BTreeSet<Symbol>,\n }\n \n impl AssertModuleSource<'tcx> {"}, {"sha": "6aba66a79ab3be5f77a9c79b410b891a75634b01", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -460,7 +460,7 @@ impl cstore::CStore {\n \n         LoadedMacro::MacroDef(ast::Item {\n             // FIXME: cross-crate hygiene\n-            ident: ast::Ident::with_dummy_span(name.as_symbol()),\n+            ident: ast::Ident::with_dummy_span(name),\n             id: ast::DUMMY_NODE_ID,\n             span: local_span,\n             attrs: attrs.iter().cloned().collect(),"}, {"sha": "8c52168b418fd40819fc938c79346d9bd917cfa6", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -35,7 +35,7 @@ use syntax::ast::{self, Ident};\n use syntax::source_map::{self, respan, Spanned};\n use syntax::symbol::{Symbol, sym};\n use syntax_expand::base::{MacroKind, SyntaxExtensionKind, SyntaxExtension};\n-use syntax_pos::{self, Span, BytePos, Pos, DUMMY_SP, symbol::{InternedString}};\n+use syntax_pos::{self, Span, BytePos, Pos, DUMMY_SP};\n use log::debug;\n use proc_macro::bridge::client::ProcMacro;\n use syntax_expand::proc_macro::{AttrProcMacro, ProcMacroDerive, BangProcMacro};\n@@ -514,7 +514,6 @@ impl<'a, 'tcx> CrateMetadata {\n                 .data\n                 .get_opt_name()\n                 .expect(\"no name in item_name\")\n-                .as_symbol()\n         } else {\n             Symbol::intern(self.raw_proc_macro(item_index).name())\n         }\n@@ -858,7 +857,7 @@ impl<'a, 'tcx> CrateMetadata {\n                 let span = self.get_span(child_index, sess);\n                 if let (Some(kind), Some(name)) =\n                     (self.def_kind(child_index), def_key.disambiguated_data.data.get_opt_name()) {\n-                    let ident = Ident::from_interned_str(name);\n+                    let ident = Ident::with_dummy_span(name);\n                     let vis = self.get_visibility(child_index);\n                     let def_id = self.local_def_id(child_index);\n                     let res = Res::Def(kind, def_id);\n@@ -981,7 +980,7 @@ impl<'a, 'tcx> CrateMetadata {\n         };\n \n         ty::AssocItem {\n-            ident: Ident::from_interned_str(name),\n+            ident: Ident::with_dummy_span(name),\n             kind,\n             vis: self.get_visibility(id),\n             defaultness: container.defaultness(),\n@@ -1247,7 +1246,7 @@ impl<'a, 'tcx> CrateMetadata {\n         let mut key = self.def_path_table.def_key(index);\n         if self.is_proc_macro(index) {\n             let name = self.raw_proc_macro(index).name();\n-            key.disambiguated_data.data = DefPathData::MacroNs(InternedString::intern(name));\n+            key.disambiguated_data.data = DefPathData::MacroNs(Symbol::intern(name));\n         }\n         key\n     }"}, {"sha": "d6e84940291a575627377d7e88106d43afcb55b3", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -18,14 +18,14 @@ use rustc::ty::print::RegionHighlightMode;\n use rustc_errors::DiagnosticBuilder;\n use syntax::symbol::kw;\n use rustc_data_structures::fx::FxHashMap;\n-use syntax_pos::{Span, symbol::InternedString};\n+use syntax_pos::{Span, symbol::Symbol};\n \n /// A name for a particular region used in emitting diagnostics. This name could be a generated\n /// name like `'1`, a name used by the user like `'a`, or a name like `'static`.\n #[derive(Debug, Clone)]\n crate struct RegionName {\n     /// The name of the region (interned).\n-    crate name: InternedString,\n+    crate name: Symbol,\n     /// Where the region comes from.\n     crate source: RegionNameSource,\n }\n@@ -109,7 +109,7 @@ impl RegionName {\n     }\n \n     #[allow(dead_code)]\n-    crate fn name(&self) -> InternedString {\n+    crate fn name(&self) -> Symbol {\n         self.name\n     }\n \n@@ -273,7 +273,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             }\n \n             ty::ReStatic => Some(RegionName {\n-                name: kw::StaticLifetime.as_interned_str(),\n+                name: kw::StaticLifetime,\n                 source: RegionNameSource::Static\n             }),\n \n@@ -360,7 +360,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         &self,\n         tcx: TyCtxt<'tcx>,\n         error_region: &RegionKind,\n-        name: InternedString,\n+        name: Symbol,\n     ) -> Span {\n         let scope = error_region.free_region_binding_scope(tcx);\n         let node = tcx.hir().as_local_hir_id(scope).unwrap_or(hir::DUMMY_HIR_ID);\n@@ -837,10 +837,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     }\n \n     /// Creates a synthetic region named `'1`, incrementing the counter.\n-    fn synthesize_region_name(&self, renctx: &mut RegionErrorNamingCtx) -> InternedString {\n+    fn synthesize_region_name(&self, renctx: &mut RegionErrorNamingCtx) -> Symbol {\n         let c = renctx.counter;\n         renctx.counter += 1;\n \n-        InternedString::intern(&format!(\"'{:?}\", c))\n+        Symbol::intern(&format!(\"'{:?}\", c))\n     }\n }"}, {"sha": "b876fd83ec983797ce04cbaa8c7759c7fe1149da", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -790,7 +790,7 @@ fn for_each_late_bound_region_defined_on<'tcx>(\n                 owner: fn_def_id.index,\n                 local_id: *late_bound,\n             };\n-            let name = tcx.hir().name(hir_id).as_interned_str();\n+            let name = tcx.hir().name(hir_id);\n             let region_def_id = tcx.hir().local_def_id(hir_id);\n             let liberated_region = tcx.mk_region(ty::ReFree(ty::FreeRegion {\n                 scope: fn_def_id,"}, {"sha": "7bb96661bb746a9c462a8faf414b28172d320fb4", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -908,7 +908,7 @@ fn convert_path_expr<'a, 'tcx>(\n             let generics = cx.tcx.generics_of(item_def_id);\n             let local_def_id = cx.tcx.hir().local_def_id(hir_id);\n             let index = generics.param_def_id_to_index[&local_def_id];\n-            let name = cx.tcx.hir().name(hir_id).as_interned_str();\n+            let name = cx.tcx.hir().name(hir_id);\n             let val = ConstValue::Param(ty::ParamConst::new(index, name));\n             ExprKind::Literal {\n                 literal: cx.tcx.mk_const("}, {"sha": "f1f9fac08ca3a83c8a106e335832b19be25f348e", "filename": "src/librustc_mir/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -148,7 +148,7 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n \n         self.path.push_str(\"::\");\n \n-        self.path.push_str(&disambiguated_data.data.as_interned_str().as_str());\n+        self.path.push_str(&disambiguated_data.data.as_symbol().as_str());\n         Ok(self)\n     }\n "}, {"sha": "42f08771f866d57b32b1f4242ec8b3ddc05017f1", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -96,7 +96,7 @@ use std::collections::hash_map::Entry;\n use std::cmp;\n use std::sync::Arc;\n \n-use syntax::symbol::InternedString;\n+use syntax::symbol::Symbol;\n use rustc::hir::CodegenFnAttrFlags;\n use rustc::hir::def::DefKind;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE, CRATE_DEF_INDEX};\n@@ -121,7 +121,7 @@ pub enum PartitioningStrategy {\n }\n \n // Anything we can't find a proper codegen unit for goes into this.\n-fn fallback_cgu_name(name_builder: &mut CodegenUnitNameBuilder<'_>) -> InternedString {\n+fn fallback_cgu_name(name_builder: &mut CodegenUnitNameBuilder<'_>) -> Symbol {\n     name_builder.build_cgu_name(LOCAL_CRATE, &[\"fallback\"], Some(\"cgu\"))\n }\n \n@@ -185,9 +185,7 @@ where\n         internalization_candidates: _,\n     } = post_inlining;\n \n-    result.sort_by(|cgu1, cgu2| {\n-        cgu1.name().cmp(cgu2.name())\n-    });\n+    result.sort_by_cached_key(|cgu| cgu.name().as_str());\n \n     result\n }\n@@ -203,7 +201,7 @@ struct PreInliningPartitioning<'tcx> {\n /// to keep track of that.\n #[derive(Clone, PartialEq, Eq, Debug)]\n enum MonoItemPlacement {\n-    SingleCgu { cgu_name: InternedString },\n+    SingleCgu { cgu_name: Symbol },\n     MultipleCgus,\n }\n \n@@ -251,8 +249,8 @@ where\n             None => fallback_cgu_name(cgu_name_builder),\n         };\n \n-        let codegen_unit = codegen_units.entry(codegen_unit_name.clone())\n-            .or_insert_with(|| CodegenUnit::new(codegen_unit_name.clone()));\n+        let codegen_unit = codegen_units.entry(codegen_unit_name)\n+            .or_insert_with(|| CodegenUnit::new(codegen_unit_name));\n \n         let mut can_be_internalized = true;\n         let (linkage, visibility) = mono_item_linkage_and_visibility(\n@@ -273,8 +271,7 @@ where\n     // crate with just types (for example), we could wind up with no CGU.\n     if codegen_units.is_empty() {\n         let codegen_unit_name = fallback_cgu_name(cgu_name_builder);\n-        codegen_units.insert(codegen_unit_name.clone(),\n-                             CodegenUnit::new(codegen_unit_name.clone()));\n+        codegen_units.insert(codegen_unit_name, CodegenUnit::new(codegen_unit_name));\n     }\n \n     PreInliningPartitioning {\n@@ -492,7 +489,7 @@ fn merge_codegen_units<'tcx>(\n     // smallest into each other) we're sure to start off with a deterministic\n     // order (sorted by name). This'll mean that if two cgus have the same size\n     // the stable sort below will keep everything nice and deterministic.\n-    codegen_units.sort_by_key(|cgu| *cgu.name());\n+    codegen_units.sort_by_cached_key(|cgu| cgu.name().as_str());\n \n     // Merge the two smallest codegen units until the target size is reached.\n     while codegen_units.len() > target_cgu_count {\n@@ -537,7 +534,7 @@ fn place_inlined_mono_items<'tcx>(initial_partitioning: PreInliningPartitioning<\n             follow_inlining(*root, inlining_map, &mut reachable);\n         }\n \n-        let mut new_codegen_unit = CodegenUnit::new(old_codegen_unit.name().clone());\n+        let mut new_codegen_unit = CodegenUnit::new(old_codegen_unit.name());\n \n         // Add all monomorphizations that are not already there.\n         for mono_item in reachable {\n@@ -564,16 +561,16 @@ fn place_inlined_mono_items<'tcx>(initial_partitioning: PreInliningPartitioning<\n                     Entry::Occupied(e) => {\n                         let placement = e.into_mut();\n                         debug_assert!(match *placement {\n-                            MonoItemPlacement::SingleCgu { ref cgu_name } => {\n-                                *cgu_name != *new_codegen_unit.name()\n+                            MonoItemPlacement::SingleCgu { cgu_name } => {\n+                                cgu_name != new_codegen_unit.name()\n                             }\n                             MonoItemPlacement::MultipleCgus => true,\n                         });\n                         *placement = MonoItemPlacement::MultipleCgus;\n                     }\n                     Entry::Vacant(e) => {\n                         e.insert(MonoItemPlacement::SingleCgu {\n-                            cgu_name: new_codegen_unit.name().clone()\n+                            cgu_name: new_codegen_unit.name()\n                         });\n                     }\n                 }\n@@ -638,7 +635,7 @@ fn internalize_symbols<'tcx>(\n     // accessed from outside its defining codegen unit.\n     for cgu in &mut partitioning.codegen_units {\n         let home_cgu = MonoItemPlacement::SingleCgu {\n-            cgu_name: cgu.name().clone()\n+            cgu_name: cgu.name()\n         };\n \n         for (accessee, linkage_and_visibility) in cgu.items_mut() {\n@@ -717,15 +714,15 @@ fn characteristic_def_id_of_mono_item<'tcx>(\n     }\n }\n \n-type CguNameCache = FxHashMap<(DefId, bool), InternedString>;\n+type CguNameCache = FxHashMap<(DefId, bool), Symbol>;\n \n fn compute_codegen_unit_name(\n     tcx: TyCtxt<'_>,\n     name_builder: &mut CodegenUnitNameBuilder<'_>,\n     def_id: DefId,\n     volatile: bool,\n     cache: &mut CguNameCache,\n-) -> InternedString {\n+) -> Symbol {\n     // Find the innermost module that is not nested within a function.\n     let mut current_def_id = def_id;\n     let mut cgu_def_id = None;\n@@ -762,7 +759,7 @@ fn compute_codegen_unit_name(\n         let components = def_path\n             .data\n             .iter()\n-            .map(|part| part.data.as_interned_str());\n+            .map(|part| part.data.as_symbol());\n \n         let volatile_suffix = if volatile {\n             Some(\"volatile\")\n@@ -777,7 +774,7 @@ fn compute_codegen_unit_name(\n fn numbered_codegen_unit_name(\n     name_builder: &mut CodegenUnitNameBuilder<'_>,\n     index: usize,\n-) -> InternedString {\n+) -> Symbol {\n     name_builder.build_cgu_name_no_mangle(LOCAL_CRATE, &[\"cgu\"], Some(index))\n }\n \n@@ -929,7 +926,7 @@ fn collect_and_partition_mono_items(\n             for (&mono_item, &linkage) in cgu.items() {\n                 item_to_cgus.entry(mono_item)\n                             .or_default()\n-                            .push((cgu.name().clone(), linkage));\n+                            .push((cgu.name(), linkage));\n             }\n         }\n \n@@ -991,7 +988,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     providers.codegen_unit = |tcx, name| {\n         let (_, all) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n         all.iter()\n-            .find(|cgu| *cgu.name() == name)\n+            .find(|cgu| cgu.name() == name)\n             .cloned()\n             .unwrap_or_else(|| panic!(\"failed to find cgu with name {:?}\", name))\n     };"}, {"sha": "3ff36e01275b9b461a3bf3d91664eeed2512e4ef", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -12,7 +12,7 @@ use rustc::lint::builtin::{SAFE_EXTERN_STATICS, SAFE_PACKED_BORROWS, UNUSED_UNSA\n use rustc::mir::*;\n use rustc::mir::visit::{PlaceContext, Visitor, MutatingUseContext};\n \n-use syntax::symbol::{InternedString, sym};\n+use syntax::symbol::{Symbol, sym};\n \n use std::ops::Bound;\n \n@@ -167,9 +167,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     (CastTy::FnPtr, CastTy::Int(_)) => {\n                         self.register_violations(&[UnsafetyViolation {\n                             source_info: self.source_info,\n-                            description: InternedString::intern(\"cast of pointer to int\"),\n-                            details: InternedString::intern(\n-                                \"casting pointers to integers in constants\"),\n+                            description: Symbol::intern(\"cast of pointer to int\"),\n+                            details: Symbol::intern(\"casting pointers to integers in constants\"),\n                             kind: UnsafetyViolationKind::General,\n                         }], &[]);\n                     },\n@@ -185,8 +184,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 if let ty::RawPtr(_) | ty::FnPtr(..) = lhs.ty(self.body, self.tcx).kind {\n                     self.register_violations(&[UnsafetyViolation {\n                         source_info: self.source_info,\n-                        description: InternedString::intern(\"pointer operation\"),\n-                        details: InternedString::intern(\"operations on pointers in constants\"),\n+                        description: Symbol::intern(\"pointer operation\"),\n+                        details: Symbol::intern(\"operations on pointers in constants\"),\n                         kind: UnsafetyViolationKind::General,\n                     }], &[]);\n                 }\n@@ -219,8 +218,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                         self.source_scope_local_data[source_info.scope].lint_root;\n                     self.register_violations(&[UnsafetyViolation {\n                         source_info,\n-                        description: InternedString::intern(\"use of extern static\"),\n-                        details: InternedString::intern(\n+                        description: Symbol::intern(\"use of extern static\"),\n+                        details: Symbol::intern(\n                             \"extern statics are not controlled by the Rust type system: \\\n                             invalid data, aliasing violations or data races will cause \\\n                             undefined behavior\"),\n@@ -240,8 +239,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                         self.source_scope_local_data[source_info.scope].lint_root;\n                     self.register_violations(&[UnsafetyViolation {\n                         source_info,\n-                        description: InternedString::intern(\"borrow of packed field\"),\n-                        details: InternedString::intern(\n+                        description: Symbol::intern(\"borrow of packed field\"),\n+                        details: Symbol::intern(\n                             \"fields of packed structs might be misaligned: dereferencing a \\\n                             misaligned pointer or even just creating a misaligned reference \\\n                             is undefined behavior\"),\n@@ -334,8 +333,8 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n         let source_info = self.source_info;\n         self.register_violations(&[UnsafetyViolation {\n             source_info,\n-            description: InternedString::intern(description),\n-            details: InternedString::intern(details),\n+            description: Symbol::intern(description),\n+            details: Symbol::intern(details),\n             kind,\n         }], &[]);\n     }\n@@ -438,8 +437,8 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                                 let source_info = self.source_info;\n                                 self.register_violations(&[UnsafetyViolation {\n                                     source_info,\n-                                    description: InternedString::intern(description),\n-                                    details: InternedString::intern(details),\n+                                    description: Symbol::intern(description),\n+                                    details: Symbol::intern(details),\n                                     kind: UnsafetyViolationKind::GeneralAndConstFn,\n                                 }], &[]);\n                             }"}, {"sha": "6444a82fd7379407c536cad33209d8af02613e05", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -110,14 +110,14 @@ impl<'a> Resolver<'a> {\n         }\n \n         let (name, parent) = if def_id.index == CRATE_DEF_INDEX {\n-            (self.cstore.crate_name_untracked(def_id.krate).as_interned_str(), None)\n+            (self.cstore.crate_name_untracked(def_id.krate), None)\n         } else {\n             let def_key = self.cstore.def_key(def_id);\n             (def_key.disambiguated_data.data.get_opt_name().unwrap(),\n              Some(self.get_module(DefId { index: def_key.parent.unwrap(), ..def_id })))\n         };\n \n-        let kind = ModuleKind::Def(DefKind::Mod, def_id, name.as_symbol());\n+        let kind = ModuleKind::Def(DefKind::Mod, def_id, name);\n         let module = self.arenas.alloc_module(ModuleData::new(\n             parent, kind, def_id, ExpnId::root(), DUMMY_SP\n         ));"}, {"sha": "79dc4f7e1361320f40460db460b3a495ac136054", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -131,7 +131,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     {\n         let tcx = self.tcx();\n         let lifetime_name = |def_id| {\n-            tcx.hir().name(tcx.hir().as_local_hir_id(def_id).unwrap()).as_interned_str()\n+            tcx.hir().name(tcx.hir().as_local_hir_id(def_id).unwrap())\n         };\n \n         let r = match tcx.named_region(lifetime.hir_id) {\n@@ -2022,7 +2022,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 let item_def_id = tcx.hir().local_def_id(item_id);\n                 let generics = tcx.generics_of(item_def_id);\n                 let index = generics.param_def_id_to_index[&def_id];\n-                tcx.mk_ty_param(index, tcx.hir().name(hir_id).as_interned_str())\n+                tcx.mk_ty_param(index, tcx.hir().name(hir_id))\n             }\n             Res::SelfTy(Some(_), None) => {\n                 // `Self` in trait or type alias.\n@@ -2203,7 +2203,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             let item_def_id = tcx.hir().local_def_id(item_id);\n             let generics = tcx.generics_of(item_def_id);\n             let index = generics.param_def_id_to_index[&tcx.hir().local_def_id(hir_id)];\n-            let name = tcx.hir().name(hir_id).as_interned_str();\n+            let name = tcx.hir().name(hir_id);\n             const_.val = ConstValue::Param(ty::ParamConst::new(index, name));\n         }\n "}, {"sha": "72a0fe887b9646fc8df95be922e43fbd55bc906e", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -7,7 +7,7 @@ use rustc::ty::subst::Subst;\n use crate::require_same_types;\n \n use rustc_target::spec::abi::Abi;\n-use syntax::symbol::InternedString;\n+use syntax::symbol::Symbol;\n \n use rustc::hir;\n \n@@ -80,7 +80,7 @@ pub fn intrinsic_operation_unsafety(intrinsic: &str) -> hir::Unsafety {\n /// Remember to add all intrinsics here, in librustc_codegen_llvm/intrinsic.rs,\n /// and in libcore/intrinsics.rs\n pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n-    let param = |n| tcx.mk_ty_param(n, InternedString::intern(&format!(\"P{}\", n)));\n+    let param = |n| tcx.mk_ty_param(n, Symbol::intern(&format!(\"P{}\", n)));\n     let name = it.ident.as_str();\n \n     let mk_va_list_ty = |mutbl| {\n@@ -387,7 +387,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n /// Type-check `extern \"platform-intrinsic\" { ... }` functions.\n pub fn check_platform_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem) {\n     let param = |n| {\n-        let name = InternedString::intern(&format!(\"P{}\", n));\n+        let name = Symbol::intern(&format!(\"P{}\", n));\n         tcx.mk_ty_param(n, name)\n     };\n "}, {"sha": "d4c64512f984b901ac892252e6b2b71bc7b034ab", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -36,7 +36,7 @@ use syntax::ast;\n use syntax::ast::{Ident, MetaItemKind};\n use syntax::attr::{InlineAttr, OptimizeAttr, list_contains_name, mark_used};\n use syntax::feature_gate;\n-use syntax::symbol::{InternedString, kw, Symbol, sym};\n+use syntax::symbol::{kw, Symbol, sym};\n use syntax_pos::{Span, DUMMY_SP};\n \n use rustc::hir::def::{CtorKind, Res, DefKind};\n@@ -265,7 +265,7 @@ fn type_param_predicates(\n     let param_owner_def_id = tcx.hir().local_def_id(param_owner);\n     let generics = tcx.generics_of(param_owner_def_id);\n     let index = generics.param_def_id_to_index[&def_id];\n-    let ty = tcx.mk_ty_param(index, tcx.hir().ty_param_name(param_id).as_interned_str());\n+    let ty = tcx.mk_ty_param(index, tcx.hir().ty_param_name(param_id));\n \n     // Don't look for bounds where the type parameter isn't in scope.\n     let parent = if item_def_id == param_owner_def_id {\n@@ -961,7 +961,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n \n                     opt_self = Some(ty::GenericParamDef {\n                         index: 0,\n-                        name: kw::SelfUpper.as_interned_str(),\n+                        name: kw::SelfUpper,\n                         def_id: tcx.hir().local_def_id(param_id),\n                         pure_wrt_drop: false,\n                         kind: ty::GenericParamDefKind::Type {\n@@ -1006,7 +1006,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n         early_lifetimes\n             .enumerate()\n             .map(|(i, param)| ty::GenericParamDef {\n-                name: param.name.ident().as_interned_str(),\n+                name: param.name.ident().name,\n                 index: own_start + i as u32,\n                 def_id: tcx.hir().local_def_id(param.hir_id),\n                 pure_wrt_drop: param.pure_wrt_drop,\n@@ -1060,7 +1060,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n \n                 let param_def = ty::GenericParamDef {\n                     index: type_start + i as u32,\n-                    name: param.name.ident().as_interned_str(),\n+                    name: param.name.ident().name,\n                     def_id: tcx.hir().local_def_id(param.hir_id),\n                     pure_wrt_drop: param.pure_wrt_drop,\n                     kind,\n@@ -1090,7 +1090,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n                 .enumerate()\n                 .map(|(i, &arg)| ty::GenericParamDef {\n                     index: type_start + i as u32,\n-                    name: InternedString::intern(arg),\n+                    name: Symbol::intern(arg),\n                     def_id,\n                     pure_wrt_drop: false,\n                     kind: ty::GenericParamDefKind::Type {\n@@ -1105,7 +1105,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n             params.extend(upvars.iter().zip((dummy_args.len() as u32)..).map(|(_, i)| {\n                 ty::GenericParamDef {\n                     index: type_start + i,\n-                    name: InternedString::intern(\"<upvar>\"),\n+                    name: Symbol::intern(\"<upvar>\"),\n                     def_id,\n                     pure_wrt_drop: false,\n                     kind: ty::GenericParamDefKind::Type {\n@@ -2198,7 +2198,7 @@ fn explicit_predicates_of(\n         let region = tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n             def_id: tcx.hir().local_def_id(param.hir_id),\n             index,\n-            name: param.name.ident().as_interned_str(),\n+            name: param.name.ident().name,\n         }));\n         index += 1;\n \n@@ -2221,7 +2221,7 @@ fn explicit_predicates_of(\n     // type parameter (e.g., `<T: Foo>`).\n     for param in &ast_generics.params {\n         if let GenericParamKind::Type { .. } = param.kind {\n-            let name = param.name.ident().as_interned_str();\n+            let name = param.name.ident().name;\n             let param_ty = ty::ParamTy::new(index, name).to_ty(tcx);\n             index += 1;\n "}, {"sha": "abc8b83144941d3309d1499451da25bbc6ba5314", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -31,7 +31,6 @@ use syntax::attr;\n use syntax_expand::base::MacroKind;\n use syntax::source_map::DUMMY_SP;\n use syntax::symbol::{Symbol, kw, sym};\n-use syntax::symbol::InternedString;\n use syntax_pos::{self, Pos, FileName};\n \n use std::collections::hash_map::Entry;\n@@ -1682,7 +1681,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n             .filter_map(|param| match param.kind {\n                 ty::GenericParamDefKind::Lifetime => None,\n                 ty::GenericParamDefKind::Type { synthetic, .. } => {\n-                    if param.name.as_symbol() == kw::SelfUpper {\n+                    if param.name == kw::SelfUpper {\n                         assert_eq!(param.index, 0);\n                         return None;\n                     }\n@@ -3701,13 +3700,6 @@ impl Clean<String> for ast::Name {\n     }\n }\n \n-impl Clean<String> for InternedString {\n-    #[inline]\n-    fn clean(&self, _: &DocContext<'_>) -> String {\n-        self.to_string()\n-    }\n-}\n-\n #[derive(Clone, Debug)]\n pub struct Typedef {\n     pub type_: Type,"}, {"sha": "377d2f877b3ad7cc2ec95adcaa22e598bd65e6c1", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 5, "deletions": 115, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -9,7 +9,7 @@ use rustc_macros::symbols;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_serialize::{UseSpecializedDecodable, UseSpecializedEncodable};\n \n-use std::cmp::{PartialEq, Ordering, PartialOrd, Ord};\n+use std::cmp::{PartialEq, PartialOrd, Ord};\n use std::fmt;\n use std::hash::{Hash, Hasher};\n use std::str;\n@@ -767,11 +767,6 @@ impl Ident {\n         Ident::with_dummy_span(kw::Invalid)\n     }\n \n-    /// Maps an interned string to an identifier with an empty syntax context.\n-    pub fn from_interned_str(string: InternedString) -> Ident {\n-        Ident::with_dummy_span(string.as_symbol())\n-    }\n-\n     /// Maps a string to an identifier with a dummy span.\n     pub fn from_str(string: &str) -> Ident {\n         Ident::with_dummy_span(Symbol::intern(string))\n@@ -814,11 +809,6 @@ impl Ident {\n     pub fn as_str(self) -> LocalInternedString {\n         self.name.as_str()\n     }\n-\n-    /// Convert the name to an `InternedString`.\n-    pub fn as_interned_str(self) -> InternedString {\n-        self.name.as_interned_str()\n-    }\n }\n \n impl PartialEq for Ident {\n@@ -904,15 +894,6 @@ impl Symbol {\n         })\n     }\n \n-    /// Access two symbols' chars. This is a slowish operation because it\n-    /// requires locking the symbol interner, but it is faster than calling\n-    /// `with()` twice.\n-    fn with2<F: FnOnce(&str, &str) -> R, R>(self, other: Symbol, f: F) -> R {\n-        with_interner(|interner| {\n-            f(interner.get(self), interner.get(other))\n-        })\n-    }\n-\n     /// Convert to a `LocalInternedString`. This is a slowish operation because\n     /// it requires locking the symbol interner.\n     pub fn as_str(self) -> LocalInternedString {\n@@ -923,11 +904,6 @@ impl Symbol {\n         })\n     }\n \n-    /// Convert to an `InternedString`.\n-    pub fn as_interned_str(self) -> InternedString {\n-        InternedString { symbol: self }\n-    }\n-\n     pub fn as_u32(self) -> u32 {\n         self.0.as_u32()\n     }\n@@ -1106,9 +1082,9 @@ fn with_interner<T, F: FnOnce(&mut Interner) -> T>(f: F) -> T {\n     GLOBALS.with(|globals| f(&mut *globals.symbol_interner.lock()))\n }\n \n-/// An alternative to `Symbol` and `InternedString`, useful when the chars\n-/// within the symbol need to be accessed. It deliberately has limited\n-/// functionality and should only be used for temporary values.\n+/// An alternative to `Symbol`, useful when the chars within the symbol need to\n+/// be accessed. It deliberately has limited functionality and should only be\n+/// used for temporary values.\n ///\n /// Because the interner outlives any thread which uses this type, we can\n /// safely treat `string` which points to interner data, as an immortal string,\n@@ -1117,7 +1093,7 @@ fn with_interner<T, F: FnOnce(&mut Interner) -> T>(f: F) -> T {\n // FIXME: ensure that the interner outlives any thread which uses\n // `LocalInternedString`, by creating a new thread right after constructing the\n // interner.\n-#[derive(Eq, PartialOrd, Ord)]\n+#[derive(Clone, Eq, PartialOrd, Ord)]\n pub struct LocalInternedString {\n     string: &'static str,\n }\n@@ -1158,89 +1134,3 @@ impl fmt::Display for LocalInternedString {\n         fmt::Display::fmt(self.string, f)\n     }\n }\n-\n-/// An alternative to `Symbol` that is focused on string contents.\n-///\n-/// Its implementations of `Hash`, `PartialOrd` and `Ord` work with the\n-/// string chars rather than the symbol integer. This is useful when hash\n-/// stability is required across compile sessions, or a guaranteed sort\n-/// ordering is required.\n-#[derive(Clone, Copy, PartialEq, Eq)]\n-pub struct InternedString {\n-    symbol: Symbol,\n-}\n-\n-impl InternedString {\n-    /// Maps a string to its interned representation.\n-    pub fn intern(string: &str) -> Self {\n-        InternedString {\n-            symbol: Symbol::intern(string)\n-        }\n-    }\n-\n-    pub fn with<F: FnOnce(&str) -> R, R>(self, f: F) -> R {\n-        self.symbol.with(f)\n-    }\n-\n-    fn with2<F: FnOnce(&str, &str) -> R, R>(self, other: &InternedString, f: F) -> R {\n-        self.symbol.with2(other.symbol, f)\n-    }\n-\n-    pub fn as_symbol(self) -> Symbol {\n-        self.symbol\n-    }\n-\n-    /// Convert to a `LocalInternedString`. This is a slowish operation because it\n-    /// requires locking the symbol interner.\n-    pub fn as_str(self) -> LocalInternedString {\n-        self.symbol.as_str()\n-    }\n-}\n-\n-impl Hash for InternedString {\n-    fn hash<H: Hasher>(&self, state: &mut H) {\n-        self.with(|str| str.hash(state))\n-    }\n-}\n-\n-impl PartialOrd<InternedString> for InternedString {\n-    fn partial_cmp(&self, other: &InternedString) -> Option<Ordering> {\n-        if self.symbol == other.symbol {\n-            return Some(Ordering::Equal);\n-        }\n-        self.with2(other, |self_str, other_str| self_str.partial_cmp(other_str))\n-    }\n-}\n-\n-impl Ord for InternedString {\n-    fn cmp(&self, other: &InternedString) -> Ordering {\n-        if self.symbol == other.symbol {\n-            return Ordering::Equal;\n-        }\n-        self.with2(other, |self_str, other_str| self_str.cmp(other_str))\n-    }\n-}\n-\n-impl fmt::Debug for InternedString {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        self.with(|str| fmt::Debug::fmt(&str, f))\n-    }\n-}\n-\n-impl fmt::Display for InternedString {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        self.with(|str| fmt::Display::fmt(&str, f))\n-    }\n-}\n-\n-impl Decodable for InternedString {\n-    fn decode<D: Decoder>(d: &mut D) -> Result<InternedString, D::Error> {\n-        Ok(InternedString::intern(&d.read_str()?))\n-    }\n-}\n-\n-impl Encodable for InternedString {\n-    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        self.with(|string| s.emit_str(string))\n-    }\n-}"}, {"sha": "79c98b780eb65ba1fb0904159379e5e71f7c9b63", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a649b1666c839b03ec21476f3f1a557590941f10/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a649b1666c839b03ec21476f3f1a557590941f10/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=a649b1666c839b03ec21476f3f1a557590941f10", "patch": "@@ -126,7 +126,6 @@ fn check(cache: &mut Cache,\n     // FIXME(#32129)\n     if file.ends_with(\"std/string/struct.String.html\") ||\n        file.ends_with(\"interpret/struct.ImmTy.html\") ||\n-       file.ends_with(\"symbol/struct.InternedString.html\") ||\n        file.ends_with(\"ast/struct.ThinVec.html\") ||\n        file.ends_with(\"util/struct.ThinVec.html\") ||\n        file.ends_with(\"layout/struct.TyLayout.html\") ||"}]}