{"sha": "db59c35b7eb6cebe7e392fad3f223eb458d80a5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNTljMzViN2ViNmNlYmU3ZTM5MmZhZDNmMjIzZWI0NThkODBhNWQ=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-02-25T16:06:15Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-08T15:52:25Z"}, "message": "Fix some lints in types that fail dogfood", "tree": {"sha": "dd52bb244d0222237ee7594c9bf63af4d8ee2f14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd52bb244d0222237ee7594c9bf63af4d8ee2f14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db59c35b7eb6cebe7e392fad3f223eb458d80a5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db59c35b7eb6cebe7e392fad3f223eb458d80a5d", "html_url": "https://github.com/rust-lang/rust/commit/db59c35b7eb6cebe7e392fad3f223eb458d80a5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db59c35b7eb6cebe7e392fad3f223eb458d80a5d/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb8208da2beba7782d741edfc2b1027ffa823ba5", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb8208da2beba7782d741edfc2b1027ffa823ba5", "html_url": "https://github.com/rust-lang/rust/commit/bb8208da2beba7782d741edfc2b1027ffa823ba5"}], "stats": {"total": 76, "additions": 39, "deletions": 37}, "files": [{"sha": "6aa98e435e1605df715f9389304be86a09d947a5", "filename": "clippy_lints/src/types/box_vec.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/db59c35b7eb6cebe7e392fad3f223eb458d80a5d/clippy_lints%2Fsrc%2Ftypes%2Fbox_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db59c35b7eb6cebe7e392fad3f223eb458d80a5d/clippy_lints%2Fsrc%2Ftypes%2Fbox_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fbox_vec.rs?ref=db59c35b7eb6cebe7e392fad3f223eb458d80a5d", "patch": "@@ -7,18 +7,19 @@ use crate::utils::{is_ty_param_diagnostic_item, span_lint_and_help};\n use super::BOX_VEC;\n \n pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_>, def_id: DefId) -> bool {\n-    if Some(def_id) == cx.tcx.lang_items().owned_box() {\n-        if is_ty_param_diagnostic_item(cx, qpath, sym::vec_type).is_some() {\n-            span_lint_and_help(\n-                cx,\n-                BOX_VEC,\n-                hir_ty.span,\n-                \"you seem to be trying to use `Box<Vec<T>>`. Consider using just `Vec<T>`\",\n-                None,\n-                \"`Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation\",\n-            );\n-            return true;\n-        }\n+    if Some(def_id) == cx.tcx.lang_items().owned_box()\n+        && is_ty_param_diagnostic_item(cx, qpath, sym::vec_type).is_some()\n+    {\n+        span_lint_and_help(\n+            cx,\n+            BOX_VEC,\n+            hir_ty.span,\n+            \"you seem to be trying to use `Box<Vec<T>>`. Consider using just `Vec<T>`\",\n+            None,\n+            \"`Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation\",\n+        );\n+        true\n+    } else {\n+        false\n     }\n-    false\n }"}, {"sha": "dc5db963b4e98a98a4a52294c4ad4dc0d46d5ff3", "filename": "clippy_lints/src/types/option_option.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/db59c35b7eb6cebe7e392fad3f223eb458d80a5d/clippy_lints%2Fsrc%2Ftypes%2Foption_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db59c35b7eb6cebe7e392fad3f223eb458d80a5d/clippy_lints%2Fsrc%2Ftypes%2Foption_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Foption_option.rs?ref=db59c35b7eb6cebe7e392fad3f223eb458d80a5d", "patch": "@@ -7,17 +7,18 @@ use crate::utils::{is_ty_param_diagnostic_item, span_lint};\n use super::OPTION_OPTION;\n \n pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_>, def_id: DefId) -> bool {\n-    if cx.tcx.is_diagnostic_item(sym::option_type, def_id) {\n-        if is_ty_param_diagnostic_item(cx, qpath, sym::option_type).is_some() {\n-            span_lint(\n-                cx,\n-                OPTION_OPTION,\n-                hir_ty.span,\n-                \"consider using `Option<T>` instead of `Option<Option<T>>` or a custom \\\n+    if cx.tcx.is_diagnostic_item(sym::option_type, def_id)\n+        && is_ty_param_diagnostic_item(cx, qpath, sym::option_type).is_some()\n+    {\n+        span_lint(\n+            cx,\n+            OPTION_OPTION,\n+            hir_ty.span,\n+            \"consider using `Option<T>` instead of `Option<Option<T>>` or a custom \\\n                                  enum if you need to distinguish all 3 cases\",\n-            );\n-            return true;\n-        }\n+        );\n+        true\n+    } else {\n+        false\n     }\n-    false\n }"}, {"sha": "5da6db179c46ee1a7e98a7ca614939865a4bbe96", "filename": "clippy_lints/src/types/redundant_allocation.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/db59c35b7eb6cebe7e392fad3f223eb458d80a5d/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db59c35b7eb6cebe7e392fad3f223eb458d80a5d/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs?ref=db59c35b7eb6cebe7e392fad3f223eb458d80a5d", "patch": "@@ -63,20 +63,20 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                 applicability,\n             );\n             true\n-        } else if let Some(span) = utils::match_borrows_parameter(cx, qpath) {\n-            let mut applicability = Applicability::MachineApplicable;\n-            span_lint_and_sugg(\n-                cx,\n-                REDUNDANT_ALLOCATION,\n-                hir_ty.span,\n-                \"usage of `Rc<&T>`\",\n-                \"try\",\n-                snippet_with_applicability(cx, span, \"..\", &mut applicability).to_string(),\n-                applicability,\n-            );\n-            true\n         } else {\n-            false\n+            utils::match_borrows_parameter(cx, qpath).map_or(false, |span| {\n+                let mut applicability = Applicability::MachineApplicable;\n+                span_lint_and_sugg(\n+                    cx,\n+                    REDUNDANT_ALLOCATION,\n+                    hir_ty.span,\n+                    \"usage of `Rc<&T>`\",\n+                    \"try\",\n+                    snippet_with_applicability(cx, span, \"..\", &mut applicability).to_string(),\n+                    applicability,\n+                );\n+                true\n+            })\n         }\n     } else {\n         false"}]}