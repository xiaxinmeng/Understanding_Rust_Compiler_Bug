{"sha": "2ba1b0bc0682235293c963d5638a8306acdfa097", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYTFiMGJjMDY4MjIzNTI5M2M5NjNkNTYzOGE4MzA2YWNkZmEwOTc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T02:20:20Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:34Z"}, "message": "librustc: De-`@mut` `populated_external_types` in the type context", "tree": {"sha": "be5583111b9042278ccdf2a1b73090a8548f63f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be5583111b9042278ccdf2a1b73090a8548f63f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ba1b0bc0682235293c963d5638a8306acdfa097", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ba1b0bc0682235293c963d5638a8306acdfa097", "html_url": "https://github.com/rust-lang/rust/commit/2ba1b0bc0682235293c963d5638a8306acdfa097", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ba1b0bc0682235293c963d5638a8306acdfa097/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "620be9235dbbb2f57462761bcfe0bebb8e2bbece", "url": "https://api.github.com/repos/rust-lang/rust/commits/620be9235dbbb2f57462761bcfe0bebb8e2bbece", "html_url": "https://github.com/rust-lang/rust/commit/620be9235dbbb2f57462761bcfe0bebb8e2bbece"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "c3c3af5519ace391c7e3f1da20dcd316531dddc5", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2ba1b0bc0682235293c963d5638a8306acdfa097/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ba1b0bc0682235293c963d5638a8306acdfa097/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=2ba1b0bc0682235293c963d5638a8306acdfa097", "patch": "@@ -360,7 +360,7 @@ struct ctxt_ {\n \n     // The set of external nominal types whose implementations have been read.\n     // This is used for lazy resolution of methods.\n-    populated_external_types: @mut HashSet<ast::DefId>,\n+    populated_external_types: RefCell<HashSet<ast::DefId>>,\n \n     // The set of external traits whose implementations have been read. This\n     // is used for lazy resolution of traits.\n@@ -1007,7 +1007,7 @@ pub fn mk_ctxt(s: session::Session,\n         used_unsafe: RefCell::new(HashSet::new()),\n         used_mut_nodes: RefCell::new(HashSet::new()),\n         impl_vtables: RefCell::new(HashMap::new()),\n-        populated_external_types: @mut HashSet::new(),\n+        populated_external_types: RefCell::new(HashSet::new()),\n         populated_external_traits: @mut HashSet::new(),\n \n         extern_const_statics: RefCell::new(HashMap::new()),\n@@ -4525,8 +4525,11 @@ pub fn populate_implementations_for_type_if_necessary(tcx: ctxt,\n     if type_id.crate == LOCAL_CRATE {\n         return\n     }\n-    if tcx.populated_external_types.contains(&type_id) {\n-        return\n+    {\n+        let populated_external_types = tcx.populated_external_types.borrow();\n+        if populated_external_types.get().contains(&type_id) {\n+            return\n+        }\n     }\n \n     csearch::each_implementation_for_type(tcx.sess.cstore, type_id,\n@@ -4573,7 +4576,9 @@ pub fn populate_implementations_for_type_if_necessary(tcx: ctxt,\n         impls.get().insert(implementation_def_id, implementation);\n     });\n \n-    tcx.populated_external_types.insert(type_id);\n+    let mut populated_external_types = tcx.populated_external_types\n+                                          .borrow_mut();\n+    populated_external_types.get().insert(type_id);\n }\n \n /// Populates the type context with all the implementations for the given"}]}