{"sha": "de9bb9738d8fcd95222fc0c9383953881e31d4d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlOWJiOTczOGQ4ZmNkOTUyMjJmYzBjOTM4Mzk1Mzg4MWUzMWQ0ZDU=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-09-29T21:00:34Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-10-29T16:09:20Z"}, "message": "Add tests for enum discriminant sizing.", "tree": {"sha": "9e96a9c30a2b64bc3279f4015cdc4f5ebe435b6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e96a9c30a2b64bc3279f4015cdc4f5ebe435b6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de9bb9738d8fcd95222fc0c9383953881e31d4d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de9bb9738d8fcd95222fc0c9383953881e31d4d5", "html_url": "https://github.com/rust-lang/rust/commit/de9bb9738d8fcd95222fc0c9383953881e31d4d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de9bb9738d8fcd95222fc0c9383953881e31d4d5/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afab3307a03c3227706b634b731363004c33a0ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/afab3307a03c3227706b634b731363004c33a0ac", "html_url": "https://github.com/rust-lang/rust/commit/afab3307a03c3227706b634b731363004c33a0ac"}], "stats": {"total": 278, "additions": 271, "deletions": 7}, "files": [{"sha": "2de50ad1d1d0d4f887bcc037b2b120cc737fabba", "filename": "src/test/compile-fail/enum-discrim-too-small.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/de9bb9738d8fcd95222fc0c9383953881e31d4d5/src%2Ftest%2Fcompile-fail%2Fenum-discrim-too-small.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de9bb9738d8fcd95222fc0c9383953881e31d4d5/src%2Ftest%2Fcompile-fail%2Fenum-discrim-too-small.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-discrim-too-small.rs?ref=de9bb9738d8fcd95222fc0c9383953881e31d4d5", "patch": "@@ -0,0 +1,58 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[repr(u8)] //~ NOTE discriminant type specified here\n+enum Eu8 {\n+    Au8 = 23,\n+    Bu8 = 223,\n+    Cu8 = -23, //~ ERROR discriminant value outside specified type\n+}\n+\n+#[repr(i8)] //~ NOTE discriminant type specified here\n+enum Ei8 {\n+    Ai8 = 23,\n+    Bi8 = -23,\n+    Ci8 = 223, //~ ERROR discriminant value outside specified type\n+}\n+\n+#[repr(u16)] //~ NOTE discriminant type specified here\n+enum Eu16 {\n+    Au16 = 23,\n+    Bu16 = 55555,\n+    Cu16 = -22333, //~ ERROR discriminant value outside specified type\n+}\n+\n+#[repr(i16)] //~ NOTE discriminant type specified here\n+enum Ei16 {\n+    Ai16 = 23,\n+    Bi16 = -22333,\n+    Ci16 = 55555, //~ ERROR discriminant value outside specified type\n+}\n+\n+#[repr(u32)] //~ NOTE discriminant type specified here\n+enum Eu32 {\n+    Au32 = 23,\n+    Bu32 = 3_000_000_000,\n+    Cu32 = -2_000_000_000, //~ ERROR discriminant value outside specified type\n+}\n+\n+#[repr(i32)] //~ NOTE discriminant type specified here\n+enum Ei32 {\n+    Ai32 = 23,\n+    Bi32 = -2_000_000_000,\n+    Ci32 = 3_000_000_000, //~ ERROR discriminant value outside specified type\n+}\n+\n+// u64 currently allows negative numbers, and i64 allows numbers greater than `1<<63`.  This is a\n+// little counterintuitive, but since the discriminant can store all the bits, and extracting it\n+// with a cast requires specifying the signedness, there is no loss of information in those cases.\n+// This also applies to int and uint on 64-bit targets.\n+\n+pub fn main() { }"}, {"sha": "857e3bb4b8d83658571792eb73cd8a6ede7f4aa8", "filename": "src/test/compile-fail/lint-ctypes-enum.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/de9bb9738d8fcd95222fc0c9383953881e31d4d5/src%2Ftest%2Fcompile-fail%2Flint-ctypes-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de9bb9738d8fcd95222fc0c9383953881e31d4d5/src%2Ftest%2Fcompile-fail%2Flint-ctypes-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-ctypes-enum.rs?ref=de9bb9738d8fcd95222fc0c9383953881e31d4d5", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[deny(ctypes)];\n+\n+enum Z { }\n+enum U { A }\n+enum B { C, D }\n+enum T { E, F, G }\n+\n+extern {\n+   fn zf(x: Z);\n+   fn uf(x: U);\n+   fn bf(x: B); //~ ERROR found enum type without foreign-function-safe\n+   fn tf(x: T); //~ ERROR found enum type without foreign-function-safe\n+}\n+\n+pub fn main() { }"}, {"sha": "ef34115739dd47c7a456ffd11ae86df73d64255c", "filename": "src/test/run-pass/enum-discrim-autosizing.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/de9bb9738d8fcd95222fc0c9383953881e31d4d5/src%2Ftest%2Frun-pass%2Fenum-discrim-autosizing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de9bb9738d8fcd95222fc0c9383953881e31d4d5/src%2Ftest%2Frun-pass%2Fenum-discrim-autosizing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-discrim-autosizing.rs?ref=de9bb9738d8fcd95222fc0c9383953881e31d4d5", "patch": "@@ -0,0 +1,62 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::mem::size_of;\n+\n+enum Ei8 {\n+    Ai8 = -1,\n+    Bi8 = 0\n+}\n+\n+enum Eu8 {\n+    Au8 = 0,\n+    Bu8 = 0x80\n+}\n+\n+enum Ei16 {\n+    Ai16 = -1,\n+    Bi16 = 0x80\n+}\n+\n+enum Eu16 {\n+    Au16 = 0,\n+    Bu16 = 0x8000\n+}\n+\n+enum Ei32 {\n+    Ai32 = -1,\n+    Bi32 = 0x8000\n+}\n+\n+enum Eu32 {\n+    Au32 = 0,\n+    Bu32 = 0x8000_0000\n+}\n+\n+enum Ei64 {\n+    Ai64 = -1,\n+    Bi64 = 0x8000_0000\n+}\n+\n+enum Eu64 {\n+    Au64 = 0,\n+    Bu64 = 0x8000_0000_0000_0000\n+}\n+\n+pub fn main() {\n+    assert_eq!(size_of::<Ei8>(), 1);\n+    assert_eq!(size_of::<Eu8>(), 1);\n+    assert_eq!(size_of::<Ei16>(), 2);\n+    assert_eq!(size_of::<Eu16>(), 2);\n+    assert_eq!(size_of::<Ei32>(), 4);\n+    assert_eq!(size_of::<Eu32>(), 4);\n+    assert_eq!(size_of::<Ei64>(), 8);\n+    assert_eq!(size_of::<Eu64>(), 8);\n+}"}, {"sha": "16eaac082abac25da57db21d0b938dda526ae8ff", "filename": "src/test/run-pass/enum-discrim-manual-sizing.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/de9bb9738d8fcd95222fc0c9383953881e31d4d5/src%2Ftest%2Frun-pass%2Fenum-discrim-manual-sizing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de9bb9738d8fcd95222fc0c9383953881e31d4d5/src%2Ftest%2Frun-pass%2Fenum-discrim-manual-sizing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-discrim-manual-sizing.rs?ref=de9bb9738d8fcd95222fc0c9383953881e31d4d5", "patch": "@@ -0,0 +1,84 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::mem::size_of;\n+\n+#[repr(i8)]\n+enum Ei8 {\n+    Ai8 = 0,\n+    Bi8 = 1\n+}\n+\n+#[repr(u8)]\n+enum Eu8 {\n+    Au8 = 0,\n+    Bu8 = 1\n+}\n+\n+#[repr(i16)]\n+enum Ei16 {\n+    Ai16 = 0,\n+    Bi16 = 1\n+}\n+\n+#[repr(u16)]\n+enum Eu16 {\n+    Au16 = 0,\n+    Bu16 = 1\n+}\n+\n+#[repr(i32)]\n+enum Ei32 {\n+    Ai32 = 0,\n+    Bi32 = 1\n+}\n+\n+#[repr(u32)]\n+enum Eu32 {\n+    Au32 = 0,\n+    Bu32 = 1\n+}\n+\n+#[repr(i64)]\n+enum Ei64 {\n+    Ai64 = 0,\n+    Bi64 = 1\n+}\n+\n+#[repr(u64)]\n+enum Eu64 {\n+    Au64 = 0,\n+    Bu64 = 1\n+}\n+\n+#[repr(int)]\n+enum Eint {\n+    Aint = 0,\n+    Bint = 1\n+}\n+\n+#[repr(uint)]\n+enum Euint {\n+    Auint = 0,\n+    Buint = 1\n+}\n+\n+pub fn main() {\n+    assert_eq!(size_of::<Ei8>(), 1);\n+    assert_eq!(size_of::<Eu8>(), 1);\n+    assert_eq!(size_of::<Ei16>(), 2);\n+    assert_eq!(size_of::<Eu16>(), 2);\n+    assert_eq!(size_of::<Ei32>(), 4);\n+    assert_eq!(size_of::<Eu32>(), 4);\n+    assert_eq!(size_of::<Ei64>(), 8);\n+    assert_eq!(size_of::<Eu64>(), 8);\n+    assert_eq!(size_of::<Eint>(), size_of::<int>());\n+    assert_eq!(size_of::<Euint>(), size_of::<uint>());\n+}"}, {"sha": "61efb2c8a4299734c806400f7838551cb0f082f0", "filename": "src/test/run-pass/enum-discrim-width-stuff.rs", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/de9bb9738d8fcd95222fc0c9383953881e31d4d5/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de9bb9738d8fcd95222fc0c9383953881e31d4d5/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs?ref=de9bb9738d8fcd95222fc0c9383953881e31d4d5", "patch": "@@ -8,13 +8,48 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::mem;\n+#[feature(macro_rules)];\n+\n+macro_rules! check {\n+    ($m:ident, $t:ty, $v:expr) => {{\n+        mod $m {\n+            use std::mem::size_of;\n+            enum E {\n+                V = $v,\n+                A = 0\n+            }\n+            static C: E = V;\n+            pub fn check() {\n+                assert_eq!(size_of::<E>(), size_of::<$t>());\n+                assert_eq!(V as $t, $v);\n+                assert_eq!(C as $t, $v);\n+                assert_eq!(format!(\"{:?}\", V), ~\"V\");\n+                assert_eq!(format!(\"{:?}\", C), ~\"V\");\n+            }\n+        }\n+        $m::check();\n+    }}\n+}\n \n pub fn main() {\n-    enum E { V = 0x1717171717171717 }\n-    static C: E = V;\n-    assert_eq!(V as u64, 0x1717171717171717u64);\n-    assert_eq!(C as u64, 0x1717171717171717u64);\n-    assert_eq!(format!(\"{:?}\", V), ~\"V\");\n-    assert_eq!(format!(\"{:?}\", C), ~\"V\");\n+    check!(a, u8, 0x17);\n+    check!(b, u8, 0xe8);\n+    check!(c, u16, 0x1727);\n+    check!(d, u16, 0xe8d8);\n+    check!(e, u32, 0x17273747);\n+    check!(f, u32, 0xe8d8c8b8);\n+    check!(g, u64, 0x1727374757677787u64);\n+    check!(h, u64, 0xe8d8c8b8a8988878u64);\n+\n+    check!(z, i8, 0x17);\n+    check!(y, i8, -0x17);\n+    check!(x, i16, 0x1727);\n+    check!(w, i16, -0x1727);\n+    check!(v, i32, 0x17273747);\n+    check!(u, i32, -0x17273747);\n+    check!(t, i64, 0x1727374757677787);\n+    check!(s, i64, -0x1727374757677787);\n+\n+    enum Simple { A, B }\n+    assert_eq!(std::mem::size_of::<Simple>(), 1);\n }"}]}