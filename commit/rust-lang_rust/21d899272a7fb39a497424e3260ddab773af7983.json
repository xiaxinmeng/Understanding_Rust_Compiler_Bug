{"sha": "21d899272a7fb39a497424e3260ddab773af7983", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZDg5OTI3MmE3ZmIzOWE0OTc0MjRlMzI2MGRkYWI3NzNhZjc5ODM=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-11-20T14:30:04Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-11-20T14:56:53Z"}, "message": "alloc_system: don\u2019t assume MIN_ALIGN for small sizes, fix #45955\n\nThe GNU C library (glibc) is documented to always allocate with an alignment\nof at least 8 or 16 bytes, on 32-bit or 64-bit platforms:\nhttps://www.gnu.org/software/libc/manual/html_node/Aligned-Memory-Blocks.html\n\nThis matches our use of `MIN_ALIGN` before this commit.\nHowever, even when libc is glibc, the program might be linked\nwith another allocator that redefines the `malloc` symbol and friends.\n(The `alloc_jemalloc` crate does, in some cases.)\n\nSo `alloc_system` doesn\u2019t know which allocator it calls,\nand needs to be conservative in assumptions it makes.\n\nThe C standard says:\n\nhttps://port70.net/%7Ensz/c/c11/n1570.html#7.22.3\n> The pointer returned if the allocation succeeds is suitably aligned\n> so that it may be assigned to a pointer to any type of object\n> with a fundamental alignment requirement\n\nhttps://port70.net/~nsz/c/c11/n1570.html#6.2.8p2\n> A fundamental alignment is represented by an alignment less than\n> or equal to the greatest alignment supported by the implementation\n> in all contexts, which is equal to `_Alignof (max_align_t)`.\n\n`_Alignof (max_align_t)` depends on the ABI and doesn\u2019t seem to have\na clear definition, but it seems to match our `MIN_ALIGN` in practice.\n\nHowever, the size of objects is rounded up to the next multiple\nof their alignment (since that size is also the stride used in arrays).\nConversely, the alignment of a non-zero-size object is at most its size.\nSo for example it seems ot be legal for `malloc(8)` to return a pointer\nthat\u2019s only 8-bytes-aligned, even if `_Alignof (max_align_t)` is 16.", "tree": {"sha": "ca082d56ca602fafd323932925df299a5dfe5803", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca082d56ca602fafd323932925df299a5dfe5803"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21d899272a7fb39a497424e3260ddab773af7983", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21d899272a7fb39a497424e3260ddab773af7983", "html_url": "https://github.com/rust-lang/rust/commit/21d899272a7fb39a497424e3260ddab773af7983", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21d899272a7fb39a497424e3260ddab773af7983/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41e03c3c469d1c89735fa518a9af4eb3df8b0728", "url": "https://api.github.com/repos/rust-lang/rust/commits/41e03c3c469d1c89735fa518a9af4eb3df8b0728", "html_url": "https://github.com/rust-lang/rust/commit/41e03c3c469d1c89735fa518a9af4eb3df8b0728"}], "stats": {"total": 50, "additions": 47, "deletions": 3}, "files": [{"sha": "9423aabc82b37778feaa00e7ec0522f600d4750b", "filename": "src/liballoc/tests/heap.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/21d899272a7fb39a497424e3260ddab773af7983/src%2Fliballoc%2Ftests%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d899272a7fb39a497424e3260ddab773af7983/src%2Fliballoc%2Ftests%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fheap.rs?ref=21d899272a7fb39a497424e3260ddab773af7983", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use alloc_system::System;\n+use std::heap::{Heap, Alloc, Layout};\n+\n+/// https://github.com/rust-lang/rust/issues/45955\n+///\n+/// Note that `#[global_allocator]` is not used,\n+/// so `liballoc_jemalloc` is linked (on some platforms).\n+#[test]\n+fn alloc_system_overaligned_request() {\n+    check_overalign_requests(System)\n+}\n+\n+fn check_overalign_requests<T: Alloc>(mut allocator: T) {\n+    let size = 8;\n+    let align = 16; // greater than size\n+    let iterations = 100;\n+    unsafe {\n+        let pointers: Vec<_> = (0..iterations).map(|_| {\n+            allocator.alloc(Layout::from_size_align(size, align).unwrap()).unwrap()\n+        }).collect();\n+        for &ptr in &pointers {\n+            assert_eq!((ptr as usize) % align, 0, \"Got a pointer less aligned than requested\")\n+        }\n+\n+        // Clean up\n+        for &ptr in &pointers {\n+            allocator.dealloc(ptr, Layout::from_size_align(size, align).unwrap())\n+        }\n+    }\n+}"}, {"sha": "f1e95883b38279bddd120fb82cf48974fe76c071", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21d899272a7fb39a497424e3260ddab773af7983/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d899272a7fb39a497424e3260ddab773af7983/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=21d899272a7fb39a497424e3260ddab773af7983", "patch": "@@ -10,6 +10,8 @@\n \n #![deny(warnings)]\n \n+#![feature(allocator_api)]\n+#![feature(alloc_system)]\n #![feature(attr_literals)]\n #![feature(box_syntax)]\n #![feature(inclusive_range_syntax)]\n@@ -29,6 +31,7 @@\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n \n+extern crate alloc_system;\n extern crate std_unicode;\n extern crate rand;\n \n@@ -39,6 +42,7 @@ mod binary_heap;\n mod btree;\n mod cow_str;\n mod fmt;\n+mod heap;\n mod linked_list;\n mod slice;\n mod str;"}, {"sha": "8077ab2063d2705f20a333c7d764c20be1669fcc", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21d899272a7fb39a497424e3260ddab773af7983/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d899272a7fb39a497424e3260ddab773af7983/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=21d899272a7fb39a497424e3260ddab773af7983", "patch": "@@ -132,7 +132,7 @@ mod platform {\n     unsafe impl<'a> Alloc for &'a System {\n         #[inline]\n         unsafe fn alloc(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> {\n-            let ptr = if layout.align() <= MIN_ALIGN {\n+            let ptr = if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {\n                 libc::malloc(layout.size()) as *mut u8\n             } else {\n                 aligned_malloc(&layout)\n@@ -148,7 +148,7 @@ mod platform {\n         unsafe fn alloc_zeroed(&mut self, layout: Layout)\n             -> Result<*mut u8, AllocErr>\n         {\n-            if layout.align() <= MIN_ALIGN {\n+            if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {\n                 let ptr = libc::calloc(layout.size(), 1) as *mut u8;\n                 if !ptr.is_null() {\n                     Ok(ptr)\n@@ -180,7 +180,7 @@ mod platform {\n                 })\n             }\n \n-            if new_layout.align() <= MIN_ALIGN {\n+            if new_layout.align() <= MIN_ALIGN  && new_layout.align() <= new_layout.size(){\n                 let ptr = libc::realloc(ptr as *mut libc::c_void, new_layout.size());\n                 if !ptr.is_null() {\n                     Ok(ptr as *mut u8)"}]}