{"sha": "7f8aef94cd260a0b131107671bd80ea9621c9832", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmOGFlZjk0Y2QyNjBhMGIxMzExMDc2NzFiZDgwZWE5NjIxYzk4MzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-23T10:56:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-23T10:56:14Z"}, "message": "Auto merge of #44747 - Zoxc:gen-switch-unreachable, r=eddyb\n\nMake the fallback of generator resumption be unreachable instead of using return", "tree": {"sha": "16d1d973e46c3f3c3754ccc2933b39883bde14d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16d1d973e46c3f3c3754ccc2933b39883bde14d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f8aef94cd260a0b131107671bd80ea9621c9832", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f8aef94cd260a0b131107671bd80ea9621c9832", "html_url": "https://github.com/rust-lang/rust/commit/7f8aef94cd260a0b131107671bd80ea9621c9832", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f8aef94cd260a0b131107671bd80ea9621c9832/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6a7dac5cf929b04deac235e511073b2e9640433", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6a7dac5cf929b04deac235e511073b2e9640433", "html_url": "https://github.com/rust-lang/rust/commit/a6a7dac5cf929b04deac235e511073b2e9640433"}, {"sha": "f5affb5951020deb5cde98fce50bf1945f74ed06", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5affb5951020deb5cde98fce50bf1945f74ed06", "html_url": "https://github.com/rust-lang/rust/commit/f5affb5951020deb5cde98fce50bf1945f74ed06"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "507a42970c10afb8346bd8593122b40e22399d08", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7f8aef94cd260a0b131107671bd80ea9621c9832/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8aef94cd260a0b131107671bd80ea9621c9832/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=7f8aef94cd260a0b131107671bd80ea9621c9832", "patch": "@@ -443,14 +443,15 @@ fn compute_layout<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n fn insert_switch<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                            mir: &mut Mir<'tcx>,\n                            cases: Vec<(u32, BasicBlock)>,\n-                           transform: &TransformVisitor<'a, 'tcx>) {\n-    let return_block = insert_return_block(mir);\n+                           transform: &TransformVisitor<'a, 'tcx>,\n+                           default: TerminatorKind<'tcx>) {\n+    let default_block = insert_term_block(mir, default);\n \n     let switch = TerminatorKind::SwitchInt {\n         discr: Operand::Consume(transform.make_field(transform.state_field, tcx.types.u32)),\n         switch_ty: tcx.types.u32,\n         values: Cow::from(cases.iter().map(|&(i, _)| ConstInt::U32(i)).collect::<Vec<_>>()),\n-        targets: cases.iter().map(|&(_, d)| d).chain(once(return_block)).collect(),\n+        targets: cases.iter().map(|&(_, d)| d).chain(once(default_block)).collect(),\n     };\n \n     let source_info = source_info(mir);\n@@ -542,7 +543,7 @@ fn create_generator_drop_shim<'a, 'tcx>(\n     // The returned state (1) and the poisoned state (2) falls through to\n     // the default case which is just to return\n \n-    insert_switch(tcx, &mut mir, cases, &transform);\n+    insert_switch(tcx, &mut mir, cases, &transform, TerminatorKind::Return);\n \n     for block in mir.basic_blocks_mut() {\n         let kind = &mut block.terminator_mut().kind;\n@@ -588,18 +589,18 @@ fn create_generator_drop_shim<'a, 'tcx>(\n     mir\n }\n \n-fn insert_return_block<'tcx>(mir: &mut Mir<'tcx>) -> BasicBlock {\n-    let return_block = BasicBlock::new(mir.basic_blocks().len());\n+fn insert_term_block<'tcx>(mir: &mut Mir<'tcx>, kind: TerminatorKind<'tcx>) -> BasicBlock {\n+    let term_block = BasicBlock::new(mir.basic_blocks().len());\n     let source_info = source_info(mir);\n     mir.basic_blocks_mut().push(BasicBlockData {\n         statements: Vec::new(),\n         terminator: Some(Terminator {\n             source_info,\n-            kind: TerminatorKind::Return,\n+            kind,\n         }),\n         is_cleanup: false,\n     });\n-    return_block\n+    term_block\n }\n \n fn insert_panic_block<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -659,7 +660,7 @@ fn create_generator_resume_function<'a, 'tcx>(\n     // Panic when resumed on the poisoned (2) state\n     cases.insert(2, (2, insert_panic_block(tcx, mir, AssertMessage::GeneratorResumedAfterPanic)));\n \n-    insert_switch(tcx, mir, cases, &transform);\n+    insert_switch(tcx, mir, cases, &transform, TerminatorKind::Unreachable);\n \n     make_generator_state_argument_indirect(tcx, def_id, mir);\n \n@@ -680,7 +681,7 @@ fn source_info<'a, 'tcx>(mir: &Mir<'tcx>) -> SourceInfo {\n }\n \n fn insert_clean_drop<'a, 'tcx>(mir: &mut Mir<'tcx>) -> BasicBlock {\n-    let return_block = insert_return_block(mir);\n+    let return_block = insert_term_block(mir, TerminatorKind::Return);\n \n     // Create a block to destroy an unresumed generators. This can only destroy upvars.\n     let drop_clean = BasicBlock::new(mir.basic_blocks().len());"}]}