{"sha": "cfad7ad947a9b6d6d5117c19618b1d230064dc73", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmYWQ3YWQ5NDdhOWI2ZDZkNTExN2MxOTYxOGIxZDIzMDA2NGRjNzM=", "commit": {"author": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2016-04-15T14:34:48Z"}, "committer": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2016-04-17T23:55:54Z"}, "message": "Perform doc-reachability check for inlined impls\n\nThis changes the current rule that impls within `doc(hidden)` modules\naren't inlined, to only inlining impls where the implemented\ntrait and type are reachable in documentation.", "tree": {"sha": "c4443a9dd7f481bd8a5a13ab251ec1a32fca95d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4443a9dd7f481bd8a5a13ab251ec1a32fca95d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfad7ad947a9b6d6d5117c19618b1d230064dc73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfad7ad947a9b6d6d5117c19618b1d230064dc73", "html_url": "https://github.com/rust-lang/rust/commit/cfad7ad947a9b6d6d5117c19618b1d230064dc73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfad7ad947a9b6d6d5117c19618b1d230064dc73/comments", "author": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea83349c9f06e13aae4a70e81d5dc470bf051bca", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea83349c9f06e13aae4a70e81d5dc470bf051bca", "html_url": "https://github.com/rust-lang/rust/commit/ea83349c9f06e13aae4a70e81d5dc470bf051bca"}], "stats": {"total": 363, "additions": 337, "deletions": 26}, "files": [{"sha": "c1a8f747de14d9823888a309505c960f8fab6ce0", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfad7ad947a9b6d6d5117c19618b1d230064dc73/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfad7ad947a9b6d6d5117c19618b1d230064dc73/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=cfad7ad947a9b6d6d5117c19618b1d230064dc73", "patch": "@@ -113,6 +113,7 @@ pub enum InlinedItemRef<'a> {\n /// LOCAL_CRATE in their DefId.\n pub const LOCAL_CRATE: ast::CrateNum = 0;\n \n+#[derive(Copy, Clone)]\n pub struct ChildItem {\n     pub def: DefLike,\n     pub name: ast::Name,"}, {"sha": "345eb5cdee4444cf4eafcc6b66e81977962a4943", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cfad7ad947a9b6d6d5117c19618b1d230064dc73/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfad7ad947a9b6d6d5117c19618b1d230064dc73/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=cfad7ad947a9b6d6d5117c19618b1d230064dc73", "patch": "@@ -28,7 +28,7 @@ use rustc_const_eval::lookup_const_by_id;\n \n use core::DocContext;\n use doctree;\n-use clean::{self, Attributes, GetDefId};\n+use clean::{self, GetDefId};\n \n use super::{Clean, ToSource};\n \n@@ -227,6 +227,15 @@ fn build_type(cx: &DocContext, tcx: &TyCtxt, did: DefId) -> clean::ItemEnum {\n     }, false)\n }\n \n+fn is_item_doc_reachable(cx: &DocContext, did: DefId) -> bool {\n+    use ::visit_lib::LibEmbargoVisitor;\n+\n+    if cx.analyzed_crates.borrow_mut().insert(did.krate) {\n+        LibEmbargoVisitor::new(cx).visit_lib(did.krate);\n+    }\n+    cx.access_levels.borrow().is_public(did)\n+}\n+\n pub fn build_impls(cx: &DocContext,\n                    tcx: &TyCtxt,\n                    did: DefId) -> Vec<clean::Item> {\n@@ -260,11 +269,6 @@ pub fn build_impls(cx: &DocContext,\n             match def {\n                 cstore::DlImpl(did) => build_impl(cx, tcx, did, impls),\n                 cstore::DlDef(Def::Mod(did)) => {\n-                    // Don't recurse if this is a #[doc(hidden)] module\n-                    if load_attrs(cx, tcx, did).list(\"doc\").has_word(\"hidden\") {\n-                        return;\n-                    }\n-\n                     for item in tcx.sess.cstore.item_children(did) {\n                         populate_impls(cx, tcx, item.def, impls)\n                     }\n@@ -301,10 +305,11 @@ pub fn build_impl(cx: &DocContext,\n \n     let attrs = load_attrs(cx, tcx, did);\n     let associated_trait = tcx.impl_trait_ref(did);\n-    if let Some(ref t) = associated_trait {\n-        // If this is an impl for a #[doc(hidden)] trait, be sure to not inline\n-        let trait_attrs = load_attrs(cx, tcx, t.def_id);\n-        if trait_attrs.list(\"doc\").has_word(\"hidden\") {\n+\n+    // Only inline impl if the implemented trait is\n+    // reachable in rustdoc generated documentation\n+    if let Some(traitref) = associated_trait {\n+        if !is_item_doc_reachable(cx, traitref.def_id) {\n             return\n         }\n     }\n@@ -330,6 +335,17 @@ pub fn build_impl(cx: &DocContext,\n         });\n     }\n \n+    let ty = tcx.lookup_item_type(did);\n+    let for_ = ty.ty.clean(cx);\n+\n+    // Only inline impl if the implementing type is\n+    // reachable in rustdoc generated documentation\n+    if let Some(did) = for_.def_id() {\n+        if !is_item_doc_reachable(cx, did) {\n+            return\n+        }\n+    }\n+\n     let predicates = tcx.lookup_predicates(did);\n     let trait_items = tcx.sess.cstore.impl_items(did)\n             .iter()\n@@ -412,7 +428,6 @@ pub fn build_impl(cx: &DocContext,\n         }\n     }).collect::<Vec<_>>();\n     let polarity = tcx.trait_impl_polarity(did);\n-    let ty = tcx.lookup_item_type(did);\n     let trait_ = associated_trait.clean(cx).map(|bound| {\n         match bound {\n             clean::TraitBound(polyt, _) => polyt.trait_,\n@@ -436,7 +451,7 @@ pub fn build_impl(cx: &DocContext,\n             derived: clean::detect_derived(&attrs),\n             provided_trait_methods: provided,\n             trait_: trait_,\n-            for_: ty.ty.clean(cx),\n+            for_: for_,\n             generics: (&ty.generics, &predicates, subst::TypeSpace).clean(cx),\n             items: trait_items,\n             polarity: polarity.map(|p| { p.clean(cx) }),"}, {"sha": "019f7401b5450094da0a97e945786e2c2f7870d4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfad7ad947a9b6d6d5117c19618b1d230064dc73/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfad7ad947a9b6d6d5117c19618b1d230064dc73/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=cfad7ad947a9b6d6d5117c19618b1d230064dc73", "patch": "@@ -57,7 +57,7 @@ use doctree;\n use visit_ast;\n use html::item_type::ItemType;\n \n-mod inline;\n+pub mod inline;\n mod simplify;\n \n // extract the stability index for a node from tcx, if possible"}, {"sha": "3cb76ca2339ef80f7c2404821ee09685eb20f142", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cfad7ad947a9b6d6d5117c19618b1d230064dc73/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfad7ad947a9b6d6d5117c19618b1d230064dc73/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=cfad7ad947a9b6d6d5117c19618b1d230064dc73", "patch": "@@ -14,6 +14,7 @@ use rustc_driver::{driver, target_features, abort_on_err};\n use rustc::dep_graph::DepGraph;\n use rustc::session::{self, config};\n use rustc::hir::def_id::DefId;\n+use rustc::middle::cstore::LOCAL_CRATE;\n use rustc::middle::privacy::AccessLevels;\n use rustc::ty::{self, TyCtxt};\n use rustc::hir::map as hir_map;\n@@ -29,7 +30,7 @@ use syntax::feature_gate::UnstableFeatures;\n use syntax::parse::token;\n \n use std::cell::{RefCell, Cell};\n-use std::collections::HashMap;\n+use std::collections::{HashMap, HashSet};\n use std::rc::Rc;\n \n use visit_ast::RustdocVisitor;\n@@ -53,12 +54,17 @@ pub struct DocContext<'a, 'tcx: 'a> {\n     pub maybe_typed: MaybeTyped<'a, 'tcx>,\n     pub input: Input,\n     pub all_crate_impls: RefCell<HashMap<ast::CrateNum, Vec<clean::Item>>>,\n-    // Later on moved into `clean::Crate`\n+    pub deref_trait_did: Cell<Option<DefId>>,\n+    /// Crates which have already been processed for `Self.access_levels`\n+    pub analyzed_crates: RefCell<HashSet<ast::CrateNum>>,\n+    // Note that external items for which `doc(hidden)` applies to are shown as\n+    // non-reachable while local items aren't. This is because we're reusing\n+    // the access levels from crateanalysis.\n+    /// Later on moved into `clean::Crate`\n     pub access_levels: RefCell<AccessLevels<DefId>>,\n-    // Later on moved into `html::render::CACHE_KEY`\n+    /// Later on moved into `html::render::CACHE_KEY`\n     pub renderinfo: RefCell<RenderInfo>,\n-    pub deref_trait_did: Cell<Option<DefId>>,\n-    // Later on moved through `clean::Crate` into `html::render::CACHE_KEY`\n+    /// Later on moved through `clean::Crate` into `html::render::CACHE_KEY`\n     pub external_traits: RefCell<HashMap<DefId, clean::Trait>>,\n }\n \n@@ -166,13 +172,16 @@ pub fn run_core(search_paths: SearchPaths,\n                                   .map(|(k, v)| (tcx.map.local_def_id(k), v))\n                                   .collect()\n         };\n+        let mut analyzed_crates = HashSet::new();\n+        analyzed_crates.insert(LOCAL_CRATE);\n \n         let ctxt = DocContext {\n             map: &tcx.map,\n             maybe_typed: Typed(tcx),\n             input: input,\n             all_crate_impls: RefCell::new(HashMap::new()),\n             deref_trait_did: Cell::new(None),\n+            analyzed_crates: RefCell::new(analyzed_crates),\n             access_levels: RefCell::new(access_levels),\n             external_traits: RefCell::new(HashMap::new()),\n             renderinfo: RefCell::new(Default::default()),"}, {"sha": "c83029107c30cafe376bc62689fa6a71f21fa75e", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cfad7ad947a9b6d6d5117c19618b1d230064dc73/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfad7ad947a9b6d6d5117c19618b1d230064dc73/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=cfad7ad947a9b6d6d5117c19618b1d230064dc73", "patch": "@@ -253,6 +253,9 @@ pub struct Cache {\n     parent_is_trait_impl: bool,\n     search_index: Vec<IndexItem>,\n     stripped_mod: bool,\n+    // Note that external items for which `doc(hidden)` applies to are shown as\n+    // non-reachable while local items aren't. This is because we're reusing\n+    // the access levels from crateanalysis.\n     access_levels: Arc<AccessLevels<DefId>>,\n     deref_trait_did: Option<DefId>,\n "}, {"sha": "86aad10e02fc7354c273d5cdf38a0b0e55a57623", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfad7ad947a9b6d6d5117c19618b1d230064dc73/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfad7ad947a9b6d6d5117c19618b1d230064dc73/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=cfad7ad947a9b6d6d5117c19618b1d230064dc73", "patch": "@@ -80,6 +80,7 @@ pub mod markdown;\n pub mod passes;\n pub mod plugins;\n pub mod visit_ast;\n+pub mod visit_lib;\n pub mod test;\n mod flock;\n "}, {"sha": "df3c81e7e3bd6463f279e399470aa5710255261e", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cfad7ad947a9b6d6d5117c19618b1d230064dc73/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfad7ad947a9b6d6d5117c19618b1d230064dc73/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=cfad7ad947a9b6d6d5117c19618b1d230064dc73", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::cell::{RefCell, Cell};\n-use std::collections::HashMap;\n+use std::collections::{HashMap, HashSet};\n use std::env;\n use std::ffi::OsString;\n use std::io::prelude::*;\n@@ -111,6 +111,7 @@ pub fn run(input: &str,\n         external_traits: RefCell::new(HashMap::new()),\n         all_crate_impls: RefCell::new(HashMap::new()),\n         deref_trait_did: Cell::new(None),\n+        analyzed_crates: RefCell::new(HashSet::new()),\n         access_levels: Default::default(),\n         renderinfo: Default::default(),\n     };"}, {"sha": "2bce8f4c2a1275a1c1e03a8fe0a9707c7502bbb3", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/cfad7ad947a9b6d6d5117c19618b1d230064dc73/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfad7ad947a9b6d6d5117c19618b1d230064dc73/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=cfad7ad947a9b6d6d5117c19618b1d230064dc73", "patch": "@@ -21,12 +21,14 @@ use syntax::attr::AttrMetaMethods;\n use syntax::codemap::Span;\n \n use rustc::hir::map as hir_map;\n+use rustc::hir::def::Def;\n use rustc::middle::stability;\n+use rustc::middle::privacy::AccessLevel;\n \n use rustc::hir;\n \n use core;\n-use clean::{Clean, Attributes};\n+use clean::{self, Clean, Attributes};\n use doctree::*;\n \n // looks to me like the first two of these are actually\n@@ -240,16 +242,40 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             Some(tcx) => tcx,\n             None => return false\n         };\n-        let def = tcx.def_map.borrow()[&id].def_id();\n-        let def_node_id = match tcx.map.as_local_node_id(def) {\n-            Some(n) => n, None => return false\n-        };\n+        let def = tcx.def_map.borrow()[&id];\n+        let def_did = def.def_id();\n \n         let use_attrs = tcx.map.attrs(id).clean(self.cx);\n+        let is_no_inline = use_attrs.list(\"doc\").has_word(\"no_inline\");\n \n-        let is_private = !self.cx.access_levels.borrow().is_public(def);\n+        // For cross-crate impl inlining we need to know whether items are\n+        // reachable in documentation - a previously nonreachable item can be\n+        // made reachable by cross-crate inlining which we're checking here.\n+        // (this is done here because we need to know this upfront)\n+        if !def.def_id().is_local() && !is_no_inline {\n+            let attrs = clean::inline::load_attrs(self.cx, tcx, def_did);\n+            let self_is_hidden = attrs.list(\"doc\").has_word(\"hidden\");\n+            match def.base_def {\n+                Def::Trait(did) |\n+                Def::Struct(did) |\n+                Def::Enum(did) |\n+                Def::TyAlias(did) if !self_is_hidden => {\n+                    self.cx.access_levels.borrow_mut().map.insert(did, AccessLevel::Public);\n+                },\n+                Def::Mod(did) => if !self_is_hidden {\n+                    ::visit_lib::LibEmbargoVisitor::new(self.cx).visit_mod(did);\n+                },\n+                _ => {},\n+            }\n+            return false\n+        }\n+\n+        let def_node_id = match tcx.map.as_local_node_id(def_did) {\n+            Some(n) => n, None => return false\n+        };\n+\n+        let is_private = !self.cx.access_levels.borrow().is_public(def_did);\n         let is_hidden = inherits_doc_hidden(self.cx, def_node_id);\n-        let is_no_inline = use_attrs.list(\"doc\").has_word(\"no_inline\");\n \n         // Only inline if requested or if the item would otherwise be stripped\n         if (!please_inline && !is_private && !is_hidden) || is_no_inline {"}, {"sha": "54eae6e237eae2a9912e3dcd5347bc5ef3f867bf", "filename": "src/librustdoc/visit_lib.rs", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/cfad7ad947a9b6d6d5117c19618b1d230064dc73/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfad7ad947a9b6d6d5117c19618b1d230064dc73/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=cfad7ad947a9b6d6d5117c19618b1d230064dc73", "patch": "@@ -0,0 +1,104 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::middle::cstore::{CrateStore, ChildItem, DefLike};\n+use rustc::middle::privacy::{AccessLevels, AccessLevel};\n+use rustc::hir::def::Def;\n+use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n+use rustc::ty::Visibility;\n+use syntax::ast;\n+\n+use std::cell::RefMut;\n+\n+use clean::{Attributes, Clean};\n+\n+// FIXME: since this is only used for cross-crate impl inlining this only\n+//        handles traits and items for which traits can be implemented\n+\n+/// Similar to `librustc_privacy::EmbargoVisitor`, but also takes\n+/// specific rustdoc annotations into account (i.e. `doc(hidden)`)\n+pub struct LibEmbargoVisitor<'a, 'b: 'a, 'tcx: 'b> {\n+    cx: &'a ::core::DocContext<'b, 'tcx>,\n+    cstore: &'a CrateStore<'tcx>,\n+    // Accessibility levels for reachable nodes\n+    access_levels: RefMut<'a, AccessLevels<DefId>>,\n+    // Previous accessibility level, None means unreachable\n+    prev_level: Option<AccessLevel>,\n+}\n+\n+impl<'a, 'b, 'tcx> LibEmbargoVisitor<'a, 'b, 'tcx> {\n+    pub fn new(cx: &'a ::core::DocContext<'b, 'tcx>) -> LibEmbargoVisitor<'a, 'b, 'tcx> {\n+        LibEmbargoVisitor {\n+            cx: cx,\n+            cstore: &*cx.sess().cstore,\n+            access_levels: cx.access_levels.borrow_mut(),\n+            prev_level: Some(AccessLevel::Public),\n+        }\n+    }\n+\n+    pub fn visit_lib(&mut self, cnum: ast::CrateNum) {\n+        let did = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n+        self.visit_mod(did);\n+    }\n+\n+    // Updates node level and returns the updated level\n+    fn update(&mut self, did: DefId, level: Option<AccessLevel>) -> Option<AccessLevel> {\n+        let attrs: Vec<_> = self.cx.tcx().get_attrs(did).iter()\n+                                                        .map(|a| a.clean(self.cx))\n+                                                        .collect();\n+        let is_hidden = attrs.list(\"doc\").has_word(\"hidden\");\n+\n+        let old_level = self.access_levels.map.get(&did).cloned();\n+        // Accessibility levels can only grow\n+        if level > old_level && !is_hidden {\n+            self.access_levels.map.insert(did, level.unwrap());\n+            level\n+        } else {\n+            old_level\n+        }\n+    }\n+\n+    pub fn visit_mod(&mut self, did: DefId) {\n+        for item in self.cstore.item_children(did) {\n+            if let DefLike::DlDef(def) = item.def {\n+                match def {\n+                    Def::Trait(did) |\n+                    Def::Struct(did) |\n+                    Def::Mod(did) |\n+                    Def::Enum(did) |\n+                    Def::TyAlias(did) => self.visit_item(did, item),\n+                    _ => {}\n+                }\n+            }\n+        }\n+    }\n+\n+    fn visit_item(&mut self, did: DefId, item: ChildItem) {\n+        let inherited_item_level = match item.def {\n+            DefLike::DlImpl(..) | DefLike::DlField => unreachable!(),\n+            DefLike::DlDef(def) => {\n+                match def {\n+                    Def::ForeignMod(..) => self.prev_level,\n+                    _ => if item.vis == Visibility::Public { self.prev_level } else { None }\n+                }\n+            }\n+        };\n+\n+        let item_level = self.update(did, inherited_item_level);\n+\n+        if let DefLike::DlDef(Def::Mod(did)) = item.def {\n+            let orig_level = self.prev_level;\n+\n+            self.prev_level = item_level;\n+            self.visit_mod(did);\n+            self.prev_level = orig_level;\n+        }\n+    }\n+}"}, {"sha": "22a311d579745df533b07ed7853d105255f70163", "filename": "src/test/auxiliary/rustdoc-nonreachable-impls.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/cfad7ad947a9b6d6d5117c19618b1d230064dc73/src%2Ftest%2Fauxiliary%2Frustdoc-nonreachable-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfad7ad947a9b6d6d5117c19618b1d230064dc73/src%2Ftest%2Fauxiliary%2Frustdoc-nonreachable-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Frustdoc-nonreachable-impls.rs?ref=cfad7ad947a9b6d6d5117c19618b1d230064dc73", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct Foo;\n+\n+pub trait Woof {}\n+pub trait Bark {}\n+\n+mod private {\n+    // should be shown\n+    impl ::Woof for ::Foo {}\n+\n+    pub trait Bar {}\n+    pub struct Wibble;\n+\n+    // these should not be shown\n+    impl Bar for ::Foo {}\n+    impl Bar for Wibble {}\n+    impl ::Bark for Wibble {}\n+    impl ::Woof for Wibble {}\n+}\n+\n+#[doc(hidden)]\n+pub mod hidden {\n+    // should be shown\n+    impl ::Bark for ::Foo {}\n+\n+    pub trait Qux {}\n+    pub struct Wobble;\n+\n+\n+    // these should only be shown if they're reexported correctly\n+    impl Qux for ::Foo {}\n+    impl Qux for Wobble {}\n+    impl ::Bark for Wobble {}\n+    impl ::Woof for Wobble {}\n+}"}, {"sha": "e953b66fce15dd351ea4dcf6fa4d984d463c2001", "filename": "src/test/rustdoc/inline_cross/issue-31948-1.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cfad7ad947a9b6d6d5117c19618b1d230064dc73/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfad7ad947a9b6d6d5117c19618b1d230064dc73/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-1.rs?ref=cfad7ad947a9b6d6d5117c19618b1d230064dc73", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:rustdoc-nonreachable-impls.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+extern crate rustdoc_nonreachable_impls;\n+\n+// @has issue_31948_1/struct.Wobble.html\n+// @has - '//*[@class=\"impl\"]//code' 'Bark for'\n+// @has - '//*[@class=\"impl\"]//code' 'Woof for'\n+// @!has - '//*[@class=\"impl\"]//code' 'Bar for'\n+// @!has - '//*[@class=\"impl\"]//code' 'Qux for'\n+pub use rustdoc_nonreachable_impls::hidden::Wobble;\n+\n+// @has issue_31948_1/trait.Bark.html\n+// FIXME(33025): has - '//code' 'for Foo'\n+// @has - '//code' 'for Wobble'\n+// @!has - '//code' 'for Wibble'\n+pub use rustdoc_nonreachable_impls::Bark;\n+\n+// @has issue_31948_1/trait.Woof.html\n+// FIXME(33025): has - '//code' 'for Foo'\n+// @has - '//code' 'for Wobble'\n+// @!has - '//code' 'for Wibble'\n+pub use rustdoc_nonreachable_impls::Woof;\n+\n+// @!has issue_31948_1/trait.Bar.html\n+// @!has issue_31948_1/trait.Qux.html"}, {"sha": "0423fa1de3b4c56fc55da4bf8b45c4ae4d5aa77c", "filename": "src/test/rustdoc/inline_cross/issue-31948-2.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cfad7ad947a9b6d6d5117c19618b1d230064dc73/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfad7ad947a9b6d6d5117c19618b1d230064dc73/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948-2.rs?ref=cfad7ad947a9b6d6d5117c19618b1d230064dc73", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:rustdoc-nonreachable-impls.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+extern crate rustdoc_nonreachable_impls;\n+\n+// @has issue_31948_2/struct.Wobble.html\n+// @has - '//*[@class=\"impl\"]//code' 'Qux for'\n+// @has - '//*[@class=\"impl\"]//code' 'Bark for'\n+// @has - '//*[@class=\"impl\"]//code' 'Woof for'\n+// @!has - '//*[@class=\"impl\"]//code' 'Bar for'\n+pub use rustdoc_nonreachable_impls::hidden::Wobble;\n+\n+// @has issue_31948_2/trait.Qux.html\n+// FIXME(33025): has - '//code' 'for Foo'\n+// @has - '//code' 'for Wobble'\n+pub use rustdoc_nonreachable_impls::hidden::Qux;\n+\n+// @!has issue_31948_2/trait.Bar.html\n+// @!has issue_31948_2/trait.Woof.html\n+// @!has issue_31948_2/trait.Bark.html"}, {"sha": "073e8eb50fb257def2cce87c8cfc04698e7fd981", "filename": "src/test/rustdoc/inline_cross/issue-31948.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cfad7ad947a9b6d6d5117c19618b1d230064dc73/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfad7ad947a9b6d6d5117c19618b1d230064dc73/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-31948.rs?ref=cfad7ad947a9b6d6d5117c19618b1d230064dc73", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:rustdoc-nonreachable-impls.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+extern crate rustdoc_nonreachable_impls;\n+\n+// @has issue_31948/struct.Foo.html\n+// @has - '//*[@class=\"impl\"]//code' 'Bark for'\n+// @has - '//*[@class=\"impl\"]//code' 'Woof for'\n+// @!has - '//*[@class=\"impl\"]//code' 'Bar for'\n+// @!has - '//*[@class=\"impl\"]//code' 'Qux for'\n+pub use rustdoc_nonreachable_impls::Foo;\n+\n+// @has issue_31948/trait.Bark.html\n+// @has - '//code' 'for Foo'\n+// @!has - '//code' 'for Wibble'\n+// @!has - '//code' 'for Wobble'\n+pub use rustdoc_nonreachable_impls::Bark;\n+\n+// @has issue_31948/trait.Woof.html\n+// @has - '//code' 'for Foo'\n+// @!has - '//code' 'for Wibble'\n+// @!has - '//code' 'for Wobble'\n+pub use rustdoc_nonreachable_impls::Woof;\n+\n+// @!has issue_31948/trait.Bar.html\n+// @!has issue_31948/trait.Qux.html\n+// @!has issue_31948/struct.Wibble.html\n+// @!has issue_31948/struct.Wobble.html"}]}