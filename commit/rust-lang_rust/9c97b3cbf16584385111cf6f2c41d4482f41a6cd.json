{"sha": "9c97b3cbf16584385111cf6f2c41d4482f41a6cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljOTdiM2NiZjE2NTg0Mzg1MTExY2Y2ZjJjNDFkNDQ4MmY0MWE2Y2Q=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-05-08T00:27:08Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-05-20T23:28:28Z"}, "message": "Move the target libLLVM to llvm-tools-preview\n\nFor running the compiler, we usually only need LLVM from `$sysroot/lib`,\nwhich rustup will make available with `LD_LIBRARY_PATH`. We've also been\nshipping LLVM in the `$target/lib` directory, which bloats the download\nand installed size. The only times we do need the latter are for the\nRPATH of `llvm-tools-preview` binaries, and for linking `rustc-dev`\nlibraries. We'll move it to the `llvm-tools-preview` component directly,\nand `rustc-dev` will have an implicit dependency on it.\n\nHere are the dist sizes that I got before and after this change:\n\n    llvm-tools-1.45.0-dev-x86_64-unknown-linux-gnu.tar.gz     1.3M   24M\n    llvm-tools-1.45.0-dev-x86_64-unknown-linux-gnu.tar.xz     748K   17M\n    rustc-1.45.0-dev-x86_64-unknown-linux-gnu.tar.gz          83M    61M\n    rustc-1.45.0-dev-x86_64-unknown-linux-gnu.tar.xz          56M    41M\n\nThe installed size should reduce by exactly one `libLLVM.so` (~70-80M),\nunless you also install `llvm-tools`, and then it should be identical.", "tree": {"sha": "f149ab7c5873687d296e3bfe07605ec656a077d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f149ab7c5873687d296e3bfe07605ec656a077d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c97b3cbf16584385111cf6f2c41d4482f41a6cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c97b3cbf16584385111cf6f2c41d4482f41a6cd", "html_url": "https://github.com/rust-lang/rust/commit/9c97b3cbf16584385111cf6f2c41d4482f41a6cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c97b3cbf16584385111cf6f2c41d4482f41a6cd/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "027149919e36ce5645ca5d02d55b97ef52eb55ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/027149919e36ce5645ca5d02d55b97ef52eb55ba", "html_url": "https://github.com/rust-lang/rust/commit/027149919e36ce5645ca5d02d55b97ef52eb55ba"}], "stats": {"total": 50, "additions": 30, "deletions": 20}, "files": [{"sha": "65ba81ad4597f1bc826f231a7c46e4ca50015187", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c97b3cbf16584385111cf6f2c41d4482f41a6cd/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c97b3cbf16584385111cf6f2c41d4482f41a6cd/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=9c97b3cbf16584385111cf6f2c41d4482f41a6cd", "patch": "@@ -772,7 +772,8 @@ impl Step for Assemble {\n \n         // Ensure that `libLLVM.so` ends up in the newly build compiler directory,\n         // so that it can be found when the newly built `rustc` is run.\n-        dist::maybe_install_llvm_dylib(builder, target_compiler.host, &sysroot);\n+        dist::maybe_install_llvm_runtime(builder, target_compiler.host, &sysroot);\n+        dist::maybe_install_llvm_target(builder, target_compiler.host, &sysroot);\n \n         // Link the compiler binary itself into place\n         let out_dir = builder.cargo_out(build_compiler, Mode::Rustc, host);"}, {"sha": "5e966d7055bf36d5a079d94d3583f8ed71b6a7ff", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9c97b3cbf16584385111cf6f2c41d4482f41a6cd/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c97b3cbf16584385111cf6f2c41d4482f41a6cd/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=9c97b3cbf16584385111cf6f2c41d4482f41a6cd", "patch": "@@ -514,7 +514,7 @@ impl Step for Rustc {\n             // components like the llvm tools and LLD. LLD is included below and\n             // tools/LLDB come later, so let's just throw it in the rustc\n             // component for now.\n-            maybe_install_llvm_dylib(builder, host, image);\n+            maybe_install_llvm_runtime(builder, host, image);\n \n             // Copy over lld if it's there\n             if builder.config.lld_enabled {\n@@ -2228,27 +2228,18 @@ impl Step for HashSign {\n     }\n }\n \n-// Maybe add libLLVM.so to the lib-dir. It will only have been built if\n-// LLVM tools are linked dynamically.\n-//\n-// We add this to both the libdir of the rustc binary itself (for it to load at\n-// runtime) and also to the target directory so it can find it at link-time.\n-//\n-// Note: This function does no yet support Windows but we also don't support\n-//       linking LLVM tools dynamically on Windows yet.\n-pub fn maybe_install_llvm_dylib(builder: &Builder<'_>, target: Interned<String>, sysroot: &Path) {\n+/// Maybe add libLLVM.so to the given destination lib-dir. It will only have\n+/// been built if LLVM tools are linked dynamically.\n+///\n+/// Note: This function does not yet support Windows, but we also don't support\n+///       linking LLVM tools dynamically on Windows yet.\n+fn maybe_install_llvm(builder: &Builder<'_>, target: Interned<String>, dst_libdir: &Path) {\n     let src_libdir = builder.llvm_out(target).join(\"lib\");\n-    let dst_libdir1 = sysroot.join(\"lib/rustlib\").join(&*target).join(\"lib\");\n-    let dst_libdir2 =\n-        sysroot.join(builder.sysroot_libdir_relative(Compiler { stage: 1, host: target }));\n-    t!(fs::create_dir_all(&dst_libdir1));\n-    t!(fs::create_dir_all(&dst_libdir2));\n \n     if target.contains(\"apple-darwin\") {\n         let llvm_dylib_path = src_libdir.join(\"libLLVM.dylib\");\n         if llvm_dylib_path.exists() {\n-            builder.install(&llvm_dylib_path, &dst_libdir1, 0o644);\n-            builder.install(&llvm_dylib_path, &dst_libdir2, 0o644);\n+            builder.install(&llvm_dylib_path, dst_libdir, 0o644);\n         }\n         return;\n     }\n@@ -2262,11 +2253,23 @@ pub fn maybe_install_llvm_dylib(builder: &Builder<'_>, target: Interned<String>,\n             panic!(\"dist: Error calling canonicalize path `{}`: {}\", llvm_dylib_path.display(), e);\n         });\n \n-        builder.install(&llvm_dylib_path, &dst_libdir1, 0o644);\n-        builder.install(&llvm_dylib_path, &dst_libdir2, 0o644);\n+        builder.install(&llvm_dylib_path, dst_libdir, 0o644);\n     }\n }\n \n+/// Maybe add libLLVM.so to the target lib-dir for linking.\n+pub fn maybe_install_llvm_target(builder: &Builder<'_>, target: Interned<String>, sysroot: &Path) {\n+    let dst_libdir = sysroot.join(\"lib/rustlib\").join(&*target).join(\"lib\");\n+    maybe_install_llvm(builder, target, &dst_libdir);\n+}\n+\n+/// Maybe add libLLVM.so to the runtime lib-dir for rustc itself.\n+pub fn maybe_install_llvm_runtime(builder: &Builder<'_>, target: Interned<String>, sysroot: &Path) {\n+    let dst_libdir =\n+        sysroot.join(builder.sysroot_libdir_relative(Compiler { stage: 1, host: target }));\n+    maybe_install_llvm(builder, target, &dst_libdir);\n+}\n+\n #[derive(Clone, Debug, Eq, Hash, PartialEq)]\n pub struct LlvmTools {\n     pub target: Interned<String>,\n@@ -2314,6 +2317,12 @@ impl Step for LlvmTools {\n             builder.install(&exe, &dst_bindir, 0o755);\n         }\n \n+        // Copy libLLVM.so to the target lib dir as well, so the RPATH like\n+        // `$ORIGIN/../lib` can find it. It may also be used as a dependency\n+        // of `rustc-dev` to support the inherited `-lLLVM` when using the\n+        // compiler libraries.\n+        maybe_install_llvm_target(builder, target, &image);\n+\n         // Prepare the overlay\n         let overlay = tmp.join(\"llvm-tools-overlay\");\n         drop(fs::remove_dir_all(&overlay));"}]}