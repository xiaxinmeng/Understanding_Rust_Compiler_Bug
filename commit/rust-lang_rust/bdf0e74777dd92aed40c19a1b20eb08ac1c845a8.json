{"sha": "bdf0e74777dd92aed40c19a1b20eb08ac1c845a8", "node_id": "C_kwDOAAsO6NoAKGJkZjBlNzQ3NzdkZDkyYWVkNDBjMTlhMWIyMGViMDhhYzFjODQ1YTg", "commit": {"author": {"name": "AndyJado", "email": "101876416+AndyJado@users.noreply.github.com", "date": "2023-02-24T05:26:27Z"}, "committer": {"name": "AndyJado", "email": "101876416+AndyJado@users.noreply.github.com", "date": "2023-04-13T01:43:46Z"}, "message": "migrate ftl msg accroding to #103042", "tree": {"sha": "3f8e3757952c29ff5ed6528c696ff8e67f137f7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f8e3757952c29ff5ed6528c696ff8e67f137f7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdf0e74777dd92aed40c19a1b20eb08ac1c845a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdf0e74777dd92aed40c19a1b20eb08ac1c845a8", "html_url": "https://github.com/rust-lang/rust/commit/bdf0e74777dd92aed40c19a1b20eb08ac1c845a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdf0e74777dd92aed40c19a1b20eb08ac1c845a8/comments", "author": {"login": "AndyJado", "id": 101876416, "node_id": "U_kgDOBhKCwA", "avatar_url": "https://avatars.githubusercontent.com/u/101876416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndyJado", "html_url": "https://github.com/AndyJado", "followers_url": "https://api.github.com/users/AndyJado/followers", "following_url": "https://api.github.com/users/AndyJado/following{/other_user}", "gists_url": "https://api.github.com/users/AndyJado/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndyJado/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndyJado/subscriptions", "organizations_url": "https://api.github.com/users/AndyJado/orgs", "repos_url": "https://api.github.com/users/AndyJado/repos", "events_url": "https://api.github.com/users/AndyJado/events{/privacy}", "received_events_url": "https://api.github.com/users/AndyJado/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndyJado", "id": 101876416, "node_id": "U_kgDOBhKCwA", "avatar_url": "https://avatars.githubusercontent.com/u/101876416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndyJado", "html_url": "https://github.com/AndyJado", "followers_url": "https://api.github.com/users/AndyJado/followers", "following_url": "https://api.github.com/users/AndyJado/following{/other_user}", "gists_url": "https://api.github.com/users/AndyJado/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndyJado/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndyJado/subscriptions", "organizations_url": "https://api.github.com/users/AndyJado/orgs", "repos_url": "https://api.github.com/users/AndyJado/repos", "events_url": "https://api.github.com/users/AndyJado/events{/privacy}", "received_events_url": "https://api.github.com/users/AndyJado/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0468a2283a7ee9a8c8a6f70f4c93f0fd6479229", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0468a2283a7ee9a8c8a6f70f4c93f0fd6479229", "html_url": "https://github.com/rust-lang/rust/commit/d0468a2283a7ee9a8c8a6f70f4c93f0fd6479229"}], "stats": {"total": 405, "additions": 138, "deletions": 267}, "files": [{"sha": "0b8123c970360abd9b10b51c6cec907d23e46f15", "filename": "compiler/rustc_borrowck/messages.ftl", "status": "modified", "additions": 138, "deletions": 12, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/bdf0e74777dd92aed40c19a1b20eb08ac1c845a8/compiler%2Frustc_borrowck%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/bdf0e74777dd92aed40c19a1b20eb08ac1c845a8/compiler%2Frustc_borrowck%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fmessages.ftl?ref=bdf0e74777dd92aed40c19a1b20eb08ac1c845a8", "patch": "@@ -56,18 +56,6 @@ borrowck_returned_lifetime_short =\n borrowck_used_impl_require_static =\n     the used `impl` has a `'static` requirement\n \n-borrowck_capture_kind_label =\n-    capture is {$kind_desc} because of use here\n-\n-borrowck_var_borrow_by_use_place_in_generator =\n-    borrow occurs due to use of {$place} in closure in generator\n-\n-borrowck_var_borrow_by_use_place_in_closure =\n-    borrow occurs due to use of {$place} in closure\n-\n-borrowck_var_borrow_by_use_place =\n-    borrow occurs due to use of {$place}\n-\n borrowck_borrow_due_to_use_generator =\n     borrow occurs due to use in generator\n \n@@ -101,12 +89,63 @@ borrowck_capture_mut =\n borrowck_capture_move =\n     capture is moved because of use here\n \n+borrowck_var_borrow_by_use_place_in_generator =\n+    {$is_single_var ->\n+        *[true] borrow occurs\n+        [false] borrows occur\n+    } due to use of {$place} in generator\n+\n+borrowck_var_borrow_by_use_place_in_closure =\n+    {$is_single_var ->\n+        *[true] borrow occurs\n+        [false] borrows occur\n+    } due to use of {$place} in closure\n+\n+borrowck_var_borrow_by_use_in_generator =\n+    borrow occurs due to use in generator\n+\n+borrowck_var_borrow_by_use_in_closure =\n+    borrow occurs due to use in closure\n+\n borrowck_var_move_by_use_place_in_generator =\n     move occurs due to use of {$place} in generator\n \n borrowck_var_move_by_use_place_in_closure =\n     move occurs due to use of {$place} in closure\n \n+borrowck_var_move_by_use_in_generator =\n+    move occurs due to use in generator\n+\n+borrowck_var_move_by_use_in_closure =\n+    move occurs due to use in closure\n+\n+borrowck_partial_var_move_by_use_in_generator =\n+    variable {$is_partial ->\n+        [true] partially moved\n+        *[false] moved\n+    } due to use in generator\n+\n+borrowck_partial_var_move_by_use_in_closure =\n+    variable {$is_partial ->\n+        [true] partially moved\n+        *[false] moved\n+    } due to use in closure\n+\n+borrowck_var_first_borrow_by_use_place_in_generator =\n+    first borrow occurs due to use of {$place} in generator\n+\n+borrowck_var_first_borrow_by_use_place_in_closure =\n+    first borrow occurs due to use of {$place} in closure\n+\n+borrowck_var_second_borrow_by_use_place_in_generator =\n+    second borrow occurs due to use of {$place} in generator\n+\n+borrowck_var_second_borrow_by_use_place_in_closure =\n+    second borrow occurs due to use of {$place} in closure\n+\n+borrowck_var_mutable_borrow_by_use_place_in_closure =\n+    mutable borrow occurs due to use of {$place} in closure\n+\n borrowck_cannot_move_when_borrowed =\n     cannot move out of {$place ->\n         [value] value\n@@ -127,3 +166,90 @@ borrowck_opaque_type_non_generic_param =\n         [true] cannot use static lifetime; use a bound lifetime instead or remove the lifetime parameter from the opaque type\n         *[other] this generic parameter must be used with a generic {$kind} parameter\n     }\n+\n+borrowck_moved_due_to_call =\n+    {$place_name} {$is_partial ->\n+        [true] partially moved\n+        *[false] moved\n+    } due to this {$is_loop_message ->\n+        [true] call, in previous iteration of loop\n+        *[false] call\n+    }\n+\n+borrowck_moved_due_to_usage_in_operator =\n+    {$place_name} {$is_partial ->\n+        [true] partially moved\n+        *[false] moved\n+    } due to usage in {$is_loop_message ->\n+        [true] operator, in previous iteration of loop\n+        *[false] operator\n+    }\n+\n+borrowck_moved_due_to_implicit_into_iter_call =\n+    {$place_name} {$is_partial ->\n+        [true] partially moved\n+        *[false] moved\n+    } due to this implicit call to {$is_loop_message ->\n+        [true] `.into_iter()`, in previous iteration of loop\n+        *[false] `.into_iter()`\n+    }\n+\n+borrowck_moved_due_to_method_call =\n+    {$place_name} {$is_partial ->\n+        [true] partially moved\n+        *[false] moved\n+    } due to this method {$is_loop_message ->\n+        [true] call, in previous iteration of loop\n+        *[false] call\n+    }\n+\n+borrowck_value_moved_here =\n+    value {$is_partial ->\n+        [true] partially moved\n+        *[false] moved\n+    } {$is_move_msg ->\n+        [true] into closure here\n+        *[false] here\n+    }{$is_loop_message ->\n+        [true] , in previous iteration of loop\n+        *[false] {\"\"}\n+    }\n+\n+borrowck_consider_borrow_type_contents =\n+    help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents\n+\n+borrowck_moved_a_fn_once_in_call =\n+    this value implements `FnOnce`, which causes it to be moved when called\n+\n+borrowck_calling_operator_moves_lhs =\n+    calling this operator moves the left-hand side\n+\n+borrowck_func_take_self_moved_place =\n+    `{$func}` takes ownership of the receiver `self`, which moves {$place_name}\n+\n+borrowck_suggest_iterate_over_slice =\n+    consider iterating over a slice of the `{$ty}`'s content to avoid moving into the `for` loop\n+\n+borrowck_suggest_create_freash_reborrow =\n+    consider reborrowing the `Pin` instead of moving it\n+\n+borrowck_value_capture_here =\n+    value captured {$is_within ->\n+        [true] here by generator\n+        *[false] here\n+    }\n+\n+borrowck_move_out_place_here =\n+    {$place} is moved here\n+\n+borrowck_closure_invoked_twice =\n+    closure cannot be invoked more than once because it moves the variable `{$place_name}` out of its environment\n+\n+borrowck_closure_moved_twice =\n+    closure cannot be moved more than once as it is not `Copy` due to moving the variable `{$place_name}` out of its environment\n+\n+borrowck_ty_no_impl_copy =\n+    {$is_partial_move ->\n+        [true] partial move\n+        *[false] move\n+    } occurs because {$place} has type `{$ty}`, which does not implement the `Copy` trait"}, {"sha": "5072841db57ef8a03be91870ef241f7df7f792d3", "filename": "compiler/rustc_error_messages/locales/en-US/borrowck.ftl", "status": "removed", "additions": 0, "deletions": 255, "changes": 255, "blob_url": "https://github.com/rust-lang/rust/blob/d0468a2283a7ee9a8c8a6f70f4c93f0fd6479229/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d0468a2283a7ee9a8c8a6f70f4c93f0fd6479229/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl?ref=d0468a2283a7ee9a8c8a6f70f4c93f0fd6479229", "patch": "@@ -1,255 +0,0 @@\n-borrowck_move_unsized =\n-    cannot move a value of type `{$ty}`\n-    .label = the size of `{$ty}` cannot be statically determined\n-\n-borrowck_higher_ranked_lifetime_error =\n-    higher-ranked lifetime error\n-\n-borrowck_could_not_prove =\n-    could not prove `{$predicate}`\n-\n-borrowck_could_not_normalize =\n-    could not normalize `{$value}`\n-\n-borrowck_higher_ranked_subtype_error =\n-    higher-ranked subtype error\n-\n-borrowck_generic_does_not_live_long_enough =\n-    `{$kind}` does not live long enough\n-\n-borrowck_move_borrowed =\n-    cannot move out of `{$desc}` beacause it is borrowed\n-\n-borrowck_var_does_not_need_mut =\n-    variable does not need to be mutable\n-    .suggestion = remove this `mut`\n-\n-borrowck_var_cannot_escape_closure =\n-    captured variable cannot escape `FnMut` closure body\n-    .note = `FnMut` closures only have access to their captured variables while they are executing...\n-    .cannot_escape = ...therefore, they cannot allow references to captured variables to escape\n-\n-borrowck_var_here_defined = variable defined here\n-\n-borrowck_var_here_captured = variable captured here\n-\n-borrowck_closure_inferred_mut = inferred to be a `FnMut` closure\n-\n-borrowck_returned_closure_escaped =\n-    returns a closure that contains a reference to a captured variable, which then escapes the closure body\n-\n-borrowck_returned_async_block_escaped =\n-    returns an `async` block that contains a reference to a captured variable, which then escapes the closure body\n-\n-borrowck_returned_ref_escaped =\n-    returns a reference to a captured variable which escapes the closure body\n-\n-borrowck_lifetime_constraints_error =\n-    lifetime may not live long enough\n-\n-borrowck_returned_lifetime_wrong =\n-    {$mir_def_name} was supposed to return data with lifetime `{$outlived_fr_name}` but it is returning data with lifetime `{$fr_name}`\n-\n-borrowck_returned_lifetime_short =\n-    {$category_desc}requires that `{$free_region_name}` must outlive `{$outlived_fr_name}`\n-\n-borrowck_used_impl_require_static =\n-    the used `impl` has a `'static` requirement\n-\n-borrowck_borrow_due_to_use_generator =\n-    borrow occurs due to use in generator\n-\n-borrowck_use_due_to_use_generator =\n-    use occurs due to use in generator\n-\n-borrowck_assign_due_to_use_generator =\n-    assign occurs due to use in generator\n-\n-borrowck_assign_part_due_to_use_generator =\n-    assign to part occurs due to use in generator\n-\n-borrowck_borrow_due_to_use_closure =\n-    borrow occurs due to use in closure\n-\n-borrowck_use_due_to_use_closure =\n-    use occurs due to use in closure\n-\n-borrowck_assign_due_to_use_closure =\n-    assign occurs due to use in closure\n-\n-borrowck_assign_part_due_to_use_closure =\n-    assign to part occurs due to use in closure\n-\n-borrowck_capture_immute =\n-    capture is immutable because of use here\n-\n-borrowck_capture_mut =\n-    capture is mutable because of use here\n-\n-borrowck_capture_move =\n-    capture is moved because of use here\n-\n-borrowck_var_borrow_by_use_place_in_generator =\n-    {$is_single_var ->\n-        *[true] borrow occurs\n-        [false] borrows occur\n-    } due to use of {$place} in generator\n-\n-borrowck_var_borrow_by_use_place_in_closure =\n-    {$is_single_var ->\n-        *[true] borrow occurs\n-        [false] borrows occur\n-    } due to use of {$place} in closure\n-\n-borrowck_var_borrow_by_use_in_generator =\n-    borrow occurs due to use in generator\n-\n-borrowck_var_borrow_by_use_in_closure =\n-    borrow occurs due to use in closure\n-\n-borrowck_var_move_by_use_place_in_generator =\n-    move occurs due to use of {$place} in generator\n-\n-borrowck_var_move_by_use_place_in_closure =\n-    move occurs due to use of {$place} in closure\n-\n-borrowck_var_move_by_use_in_generator =\n-    move occurs due to use in generator\n-\n-borrowck_var_move_by_use_in_closure =\n-    move occurs due to use in closure\n-\n-borrowck_partial_var_move_by_use_in_generator =\n-    variable {$is_partial ->\n-        [true] partially moved\n-        *[false] moved\n-    } due to use in generator\n-\n-borrowck_partial_var_move_by_use_in_closure =\n-    variable {$is_partial ->\n-        [true] partially moved\n-        *[false] moved\n-    } due to use in closure\n-\n-borrowck_var_first_borrow_by_use_place_in_generator =\n-    first borrow occurs due to use of {$place} in generator\n-\n-borrowck_var_first_borrow_by_use_place_in_closure =\n-    first borrow occurs due to use of {$place} in closure\n-\n-borrowck_var_second_borrow_by_use_place_in_generator =\n-    second borrow occurs due to use of {$place} in generator\n-\n-borrowck_var_second_borrow_by_use_place_in_closure =\n-    second borrow occurs due to use of {$place} in closure\n-\n-borrowck_var_mutable_borrow_by_use_place_in_closure =\n-    mutable borrow occurs due to use of {$place} in closure\n-\n-borrowck_cannot_move_when_borrowed =\n-    cannot move out of {$place ->\n-        [value] value\n-        *[other] {$place}\n-    } because it is borrowed\n-    .label = borrow of {$borrow_place ->\n-        [value] value\n-        *[other] {$borrow_place}\n-    } occurs here\n-    .move_label = move out of {$value_place ->\n-        [value] value\n-        *[other] {$value_place}\n-    } occurs here\n-\n-borrowck_opaque_type_non_generic_param =\n-    expected generic {$kind} parameter, found `{$ty}`\n-    .label = {STREQ($ty, \"'static\") ->\n-        [true] cannot use static lifetime; use a bound lifetime instead or remove the lifetime parameter from the opaque type\n-        *[other] this generic parameter must be used with a generic {$kind} parameter\n-    }\n-\n-borrowck_moved_due_to_call =\n-    {$place_name} {$is_partial ->\n-        [true] partially moved\n-        *[false] moved\n-    } due to this {$is_loop_message ->\n-        [true] call, in previous iteration of loop\n-        *[false] call\n-    }\n-\n-borrowck_moved_due_to_usage_in_operator =\n-    {$place_name} {$is_partial ->\n-        [true] partially moved\n-        *[false] moved\n-    } due to usage in {$is_loop_message ->\n-        [true] operator, in previous iteration of loop\n-        *[false] operator\n-    }\n-\n-borrowck_moved_due_to_implicit_into_iter_call =\n-    {$place_name} {$is_partial ->\n-        [true] partially moved\n-        *[false] moved\n-    } due to this implicit call to {$is_loop_message ->\n-        [true] `.into_iter()`, in previous iteration of loop\n-        *[false] `.into_iter()`\n-    }\n-\n-borrowck_moved_due_to_method_call =\n-    {$place_name} {$is_partial ->\n-        [true] partially moved\n-        *[false] moved\n-    } due to this method {$is_loop_message ->\n-        [true] call, in previous iteration of loop\n-        *[false] call\n-    }\n-\n-borrowck_value_moved_here =\n-    value {$is_partial ->\n-        [true] partially moved\n-        *[false] moved\n-    } {$is_move_msg ->\n-        [true] into closure here\n-        *[false] here\n-    }{$is_loop_message ->\n-        [true] , in previous iteration of loop\n-        *[false] {\"\"}\n-    }\n-\n-borrowck_consider_borrow_type_contents =\n-    help: consider calling `.as_ref()` or `.as_mut()` to borrow the type's contents\n-\n-borrowck_moved_a_fn_once_in_call =\n-    this value implements `FnOnce`, which causes it to be moved when called\n-\n-borrowck_calling_operator_moves_lhs =\n-    calling this operator moves the left-hand side\n-\n-borrowck_func_take_self_moved_place =\n-    `{$func}` takes ownership of the receiver `self`, which moves {$place_name}\n-\n-borrowck_suggest_iterate_over_slice =\n-    consider iterating over a slice of the `{$ty}`'s content to avoid moving into the `for` loop\n-\n-borrowck_suggest_create_freash_reborrow =\n-    consider reborrowing the `Pin` instead of moving it\n-\n-borrowck_value_capture_here =\n-    value captured {$is_within ->\n-        [true] here by generator\n-        *[false] here\n-    }\n-\n-borrowck_move_out_place_here =\n-    {$place} is moved here\n-\n-borrowck_closure_invoked_twice =\n-    closure cannot be invoked more than once because it moves the variable `{$place_name}` out of its environment\n-\n-borrowck_closure_moved_twice =\n-    closure cannot be moved more than once as it is not `Copy` due to moving the variable `{$place_name}` out of its environment\n-\n-borrowck_ty_no_impl_copy =\n-    {$is_partial_move ->\n-        [true] partial move\n-        *[false] move\n-    } occurs because {$place} has type `{$ty}`, which does not implement the `Copy` trait"}]}