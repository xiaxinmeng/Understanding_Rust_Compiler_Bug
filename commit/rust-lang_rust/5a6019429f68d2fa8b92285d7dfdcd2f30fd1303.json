{"sha": "5a6019429f68d2fa8b92285d7dfdcd2f30fd1303", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNjAxOTQyOWY2OGQyZmE4YjkyMjg1ZDdkZmRjZDJmMzBmZDEzMDM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-01-27T22:19:02Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-02-03T01:35:41Z"}, "message": "don't use a mutable field where parameter passing will do", "tree": {"sha": "d723ff77311be318b051763fb5aac92b66c3363b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d723ff77311be318b051763fb5aac92b66c3363b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a6019429f68d2fa8b92285d7dfdcd2f30fd1303", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a6019429f68d2fa8b92285d7dfdcd2f30fd1303", "html_url": "https://github.com/rust-lang/rust/commit/5a6019429f68d2fa8b92285d7dfdcd2f30fd1303", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a6019429f68d2fa8b92285d7dfdcd2f30fd1303/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eedaa94e330094a84f4df9aa52949515327f8e80", "url": "https://api.github.com/repos/rust-lang/rust/commits/eedaa94e330094a84f4df9aa52949515327f8e80", "html_url": "https://github.com/rust-lang/rust/commit/eedaa94e330094a84f4df9aa52949515327f8e80"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "201a223c15f157ccf6fbd1fe5d803605c948f17d", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5a6019429f68d2fa8b92285d7dfdcd2f30fd1303/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a6019429f68d2fa8b92285d7dfdcd2f30fd1303/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=5a6019429f68d2fa8b92285d7dfdcd2f30fd1303", "patch": "@@ -55,7 +55,6 @@ struct ProbeContext<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     inherent_candidates: Vec<Candidate<'tcx>>,\n     extension_candidates: Vec<Candidate<'tcx>>,\n     impl_dups: FxHashSet<DefId>,\n-    import_id: Option<ast::NodeId>,\n \n     /// Collects near misses when the candidate functions are missing a `self` keyword and is only\n     /// used for error reporting\n@@ -351,7 +350,6 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             inherent_candidates: Vec::new(),\n             extension_candidates: Vec::new(),\n             impl_dups: FxHashSet(),\n-            import_id: None,\n             steps: Rc::new(steps),\n             opt_simplified_steps: opt_simplified_steps,\n             static_candidates: Vec::new(),\n@@ -530,7 +528,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                 xform_self_ty: xform_self_ty,\n                 item: item,\n                 kind: InherentImplCandidate(impl_substs, obligations),\n-                import_id: self.import_id,\n+                import_id: None,\n             });\n         }\n     }\n@@ -559,7 +557,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                 xform_self_ty: xform_self_ty,\n                 item: item,\n                 kind: ObjectCandidate,\n-                import_id: this.import_id,\n+                import_id: None,\n             });\n         });\n     }\n@@ -609,7 +607,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                 xform_self_ty: xform_self_ty,\n                 item: item,\n                 kind: WhereClauseCandidate(poly_trait_ref),\n-                import_id: this.import_id,\n+                import_id: None,\n             });\n         });\n     }\n@@ -644,9 +642,8 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             for trait_candidate in applicable_traits {\n                 let trait_did = trait_candidate.def_id;\n                 if duplicates.insert(trait_did) {\n-                    self.import_id = trait_candidate.import_id;\n-                    let result = self.assemble_extension_candidates_for_trait(trait_did);\n-                    self.import_id = None;\n+                    let import_id = trait_candidate.import_id;\n+                    let result = self.assemble_extension_candidates_for_trait(import_id, trait_did);\n                     result?;\n                 }\n             }\n@@ -658,7 +655,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         let mut duplicates = FxHashSet();\n         for trait_info in suggest::all_traits(self.ccx) {\n             if duplicates.insert(trait_info.def_id) {\n-                self.assemble_extension_candidates_for_trait(trait_info.def_id)?;\n+                self.assemble_extension_candidates_for_trait(None, trait_info.def_id)?;\n             }\n         }\n         Ok(())\n@@ -682,6 +679,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n     }\n \n     fn assemble_extension_candidates_for_trait(&mut self,\n+                                               import_id: Option<ast::NodeId>,\n                                                trait_def_id: DefId)\n                                                -> Result<(), MethodError<'tcx>> {\n         debug!(\"assemble_extension_candidates_for_trait(trait_def_id={:?})\",\n@@ -695,19 +693,21 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                 continue;\n             }\n \n-            self.assemble_extension_candidates_for_trait_impls(trait_def_id, item.clone());\n+            self.assemble_extension_candidates_for_trait_impls(import_id, trait_def_id,\n+                                                               item.clone());\n \n-            self.assemble_closure_candidates(trait_def_id, item.clone())?;\n+            self.assemble_closure_candidates(import_id, trait_def_id, item.clone())?;\n \n-            self.assemble_projection_candidates(trait_def_id, item.clone());\n+            self.assemble_projection_candidates(import_id, trait_def_id, item.clone());\n \n-            self.assemble_where_clause_candidates(trait_def_id, item.clone());\n+            self.assemble_where_clause_candidates(import_id, trait_def_id, item.clone());\n         }\n \n         Ok(())\n     }\n \n     fn assemble_extension_candidates_for_trait_impls(&mut self,\n+                                                     import_id: Option<ast::NodeId>,\n                                                      trait_def_id: DefId,\n                                                      item: ty::AssociatedItem) {\n         let trait_def = self.tcx.lookup_trait_def(trait_def_id);\n@@ -751,7 +751,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                 xform_self_ty: xform_self_ty,\n                 item: item.clone(),\n                 kind: ExtensionImplCandidate(impl_def_id, impl_substs, obligations),\n-                import_id: self.import_id,\n+                import_id: import_id,\n             });\n         });\n     }\n@@ -777,6 +777,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n     }\n \n     fn assemble_closure_candidates(&mut self,\n+                                   import_id: Option<ast::NodeId>,\n                                    trait_def_id: DefId,\n                                    item: ty::AssociatedItem)\n                                    -> Result<(), MethodError<'tcx>> {\n@@ -840,14 +841,15 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                 xform_self_ty: xform_self_ty,\n                 item: item.clone(),\n                 kind: TraitCandidate,\n-                import_id: self.import_id,\n+                import_id: import_id,\n             });\n         }\n \n         Ok(())\n     }\n \n     fn assemble_projection_candidates(&mut self,\n+                                      import_id: Option<ast::NodeId>,\n                                       trait_def_id: DefId,\n                                       item: ty::AssociatedItem) {\n         debug!(\"assemble_projection_candidates(\\\n@@ -895,14 +897,15 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                         xform_self_ty: xform_self_ty,\n                         item: item.clone(),\n                         kind: TraitCandidate,\n-                        import_id: self.import_id,\n+                        import_id: import_id,\n                     });\n                 }\n             }\n         }\n     }\n \n     fn assemble_where_clause_candidates(&mut self,\n+                                        import_id: Option<ast::NodeId>,\n                                         trait_def_id: DefId,\n                                         item: ty::AssociatedItem) {\n         debug!(\"assemble_where_clause_candidates(trait_def_id={:?})\",\n@@ -923,7 +926,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                 xform_self_ty: xform_self_ty,\n                 item: item.clone(),\n                 kind: WhereClauseCandidate(poly_bound),\n-                import_id: self.import_id,\n+                import_id: import_id,\n             });\n         }\n     }"}]}