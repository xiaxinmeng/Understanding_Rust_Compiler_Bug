{"sha": "df3e7a28f77170bcdb9d8860d6c4a06a7cdfbe20", "node_id": "C_kwDOAAsO6NoAKGRmM2U3YTI4Zjc3MTcwYmNkYjlkODg2MGQ2YzRhMDZhN2NkZmJlMjA", "commit": {"author": {"name": "Lucas Kent", "email": "rubickent@gmail.com", "date": "2021-11-26T11:51:09Z"}, "committer": {"name": "Lucas Kent", "email": "rubickent@gmail.com", "date": "2021-11-26T14:13:37Z"}, "message": "Refactor EmitterWriter::emit_suggestion_default", "tree": {"sha": "4b065aa3dcdb6d5faf63d88b0f9a1644a17c0875", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b065aa3dcdb6d5faf63d88b0f9a1644a17c0875"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df3e7a28f77170bcdb9d8860d6c4a06a7cdfbe20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df3e7a28f77170bcdb9d8860d6c4a06a7cdfbe20", "html_url": "https://github.com/rust-lang/rust/commit/df3e7a28f77170bcdb9d8860d6c4a06a7cdfbe20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df3e7a28f77170bcdb9d8860d6c4a06a7cdfbe20/comments", "author": {"login": "rukai", "id": 5120858, "node_id": "MDQ6VXNlcjUxMjA4NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5120858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rukai", "html_url": "https://github.com/rukai", "followers_url": "https://api.github.com/users/rukai/followers", "following_url": "https://api.github.com/users/rukai/following{/other_user}", "gists_url": "https://api.github.com/users/rukai/gists{/gist_id}", "starred_url": "https://api.github.com/users/rukai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rukai/subscriptions", "organizations_url": "https://api.github.com/users/rukai/orgs", "repos_url": "https://api.github.com/users/rukai/repos", "events_url": "https://api.github.com/users/rukai/events{/privacy}", "received_events_url": "https://api.github.com/users/rukai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rukai", "id": 5120858, "node_id": "MDQ6VXNlcjUxMjA4NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5120858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rukai", "html_url": "https://github.com/rukai", "followers_url": "https://api.github.com/users/rukai/followers", "following_url": "https://api.github.com/users/rukai/following{/other_user}", "gists_url": "https://api.github.com/users/rukai/gists{/gist_id}", "starred_url": "https://api.github.com/users/rukai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rukai/subscriptions", "organizations_url": "https://api.github.com/users/rukai/orgs", "repos_url": "https://api.github.com/users/rukai/repos", "events_url": "https://api.github.com/users/rukai/events{/privacy}", "received_events_url": "https://api.github.com/users/rukai/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7836bf885e70aaf1a2e0d4669406b183a79acaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7836bf885e70aaf1a2e0d4669406b183a79acaa", "html_url": "https://github.com/rust-lang/rust/commit/a7836bf885e70aaf1a2e0d4669406b183a79acaa"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "c04246a5022e88fa0892129df55849cae9d2af8e", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/df3e7a28f77170bcdb9d8860d6c4a06a7cdfbe20/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df3e7a28f77170bcdb9d8860d6c4a06a7cdfbe20/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=df3e7a28f77170bcdb9d8860d6c4a06a7cdfbe20", "patch": "@@ -214,7 +214,7 @@ pub trait Emitter {\n \n     /// Formats the substitutions of the primary_span\n     ///\n-    /// The are a lot of conditions to this method, but in short:\n+    /// There are a lot of conditions to this method, but in short:\n     ///\n     /// * If the current `Diagnostic` has only one visible `CodeSuggestion`,\n     ///   we format the `help` suggestion depending on the content of the\n@@ -736,7 +736,9 @@ impl EmitterWriter {\n \n         let line_offset = buffer.num_lines();\n \n-        let left = margin.left(source_string.len()); // Left trim\n+        // Left trim\n+        let left = margin.left(source_string.len());\n+\n         // Account for unicode characters of width !=0 that were removed.\n         let left = source_string\n             .chars()\n@@ -1623,18 +1625,27 @@ impl EmitterWriter {\n             suggestions.iter().take(MAX_SUGGESTIONS)\n         {\n             notice_capitalization |= only_capitalization;\n-            // Only show underline if the suggestion spans a single line and doesn't cover the\n-            // entirety of the code output. If you have multiple replacements in the same line\n-            // of code, show the underline.\n-            let show_underline = !(parts.len() == 1 && parts[0].snippet.trim() == complete.trim())\n-                && complete.lines().count() == 1;\n \n             let has_deletion = parts.iter().any(|p| p.is_deletion());\n             let is_multiline = complete.lines().count() > 1;\n \n-            let show_diff = has_deletion && !is_multiline;\n+            enum DisplaySuggestion {\n+                Underline,\n+                Diff,\n+                None,\n+            }\n+\n+            let show_code_change = if has_deletion && !is_multiline {\n+                DisplaySuggestion::Diff\n+            } else if (parts.len() != 1 || parts[0].snippet.trim() != complete.trim())\n+                && !is_multiline\n+            {\n+                DisplaySuggestion::Underline\n+            } else {\n+                DisplaySuggestion::None\n+            };\n \n-            if show_diff {\n+            if let DisplaySuggestion::Diff = show_code_change {\n                 row_num += 1;\n             }\n \n@@ -1657,7 +1668,7 @@ impl EmitterWriter {\n                     &self.maybe_anonymized(line_start + line_pos),\n                     Style::LineNumber,\n                 );\n-                if show_diff {\n+                if let DisplaySuggestion::Diff = show_code_change {\n                     // Add the line number for both addition and removal to drive the point home.\n                     //\n                     // N - fn foo<A: T>(bar: A) {\n@@ -1727,7 +1738,7 @@ impl EmitterWriter {\n             let mut offsets: Vec<(usize, isize)> = Vec::new();\n             // Only show an underline in the suggestions if the suggestion is not the\n             // entirety of the code being shown and the displayed code is not multiline.\n-            if show_underline {\n+            if let DisplaySuggestion::Diff | DisplaySuggestion::Underline = show_code_change {\n                 draw_col_separator(&mut buffer, row_num, max_line_num_len + 1);\n                 for part in parts {\n                     let span_start_pos = sm.lookup_char_pos(part.span.lo()).col_display;\n@@ -1755,7 +1766,7 @@ impl EmitterWriter {\n                     assert!(underline_start >= 0 && underline_end >= 0);\n                     let padding: usize = max_line_num_len + 3;\n                     for p in underline_start..underline_end {\n-                        if !show_diff {\n+                        if let DisplaySuggestion::Underline = show_code_change {\n                             // If this is a replacement, underline with `^`, if this is an addition\n                             // underline with `+`.\n                             buffer.putc(\n@@ -1766,7 +1777,7 @@ impl EmitterWriter {\n                             );\n                         }\n                     }\n-                    if show_diff {\n+                    if let DisplaySuggestion::Diff = show_code_change {\n                         // Colorize removal with red in diff format.\n                         buffer.set_style_range(\n                             row_num - 2,\n@@ -1797,7 +1808,7 @@ impl EmitterWriter {\n             // if we elided some lines, add an ellipsis\n             if lines.next().is_some() {\n                 buffer.puts(row_num, max_line_num_len - 1, \"...\", Style::LineNumber);\n-            } else if !show_underline {\n+            } else if let DisplaySuggestion::None = show_code_change {\n                 draw_col_separator_no_space(&mut buffer, row_num, max_line_num_len + 1);\n                 row_num += 1;\n             }"}]}