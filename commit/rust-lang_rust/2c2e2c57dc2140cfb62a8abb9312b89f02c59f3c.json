{"sha": "2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMmUyYzU3ZGMyMTQwY2ZiNjJhOGFiYjkzMTJiODlmMDJjNTlmM2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-12T21:28:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-12T21:28:42Z"}, "message": "Auto merge of #54942 - matthewjasper:wf-type-annotations, r=nikomatsakis\n\n[NLL] Check user types are well-formed\n\nAlso contains a change of span for AscribeUserType.\nI'm not quite sure if this was what @nikomatsakis was thinking.\n\nCloses #54620\n\nr? @nikomatsakis", "tree": {"sha": "7c0ceebbf2041990fc9899f550ee7adcbd7fedae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c0ceebbf2041990fc9899f550ee7adcbd7fedae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "html_url": "https://github.com/rust-lang/rust/commit/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "945372d26818f93d6f5cded7b751749e280b67bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/945372d26818f93d6f5cded7b751749e280b67bf", "html_url": "https://github.com/rust-lang/rust/commit/945372d26818f93d6f5cded7b751749e280b67bf"}, {"sha": "c312e04d45fc6254cc25f7277b2d84ff3128c036", "url": "https://api.github.com/repos/rust-lang/rust/commits/c312e04d45fc6254cc25f7277b2d84ff3128c036", "html_url": "https://github.com/rust-lang/rust/commit/c312e04d45fc6254cc25f7277b2d84ff3128c036"}], "stats": {"total": 477, "additions": 343, "deletions": 134}, "files": [{"sha": "2587e19b1cb6255b5aff53965e0493167b505805", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -710,7 +710,7 @@ pub struct LocalDecl<'tcx> {\n     /// e.g. via `let x: T`, then we carry that type here. The MIR\n     /// borrow checker needs this information since it can affect\n     /// region inference.\n-    pub user_ty: Option<CanonicalTy<'tcx>>,\n+    pub user_ty: Option<(CanonicalTy<'tcx>, Span)>,\n \n     /// Name of the local, used in debuginfo and pretty-printing.\n     ///"}, {"sha": "920dc88d6a8fc5a01f26d3879faaa79d2ca808b8", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -735,7 +735,7 @@ macro_rules! make_mir_visitor {\n                     local,\n                     source_info: *source_info,\n                 });\n-                if let Some(user_ty) = user_ty {\n+                if let Some((user_ty, _)) = user_ty {\n                     self.visit_user_ty(user_ty);\n                 }\n                 self.visit_source_info(source_info);"}, {"sha": "e11f452e16be1e349010fe360cdc1126a5fabafe", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -310,12 +310,12 @@ impl<'a, 'b, 'gcx, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         self.super_local_decl(local, local_decl);\n         self.sanitize_type(local_decl, local_decl.ty);\n \n-        if let Some(user_ty) = local_decl.user_ty {\n+        if let Some((user_ty, span)) = local_decl.user_ty {\n             if let Err(terr) = self.cx.relate_type_and_user_type(\n                 local_decl.ty,\n                 ty::Variance::Invariant,\n                 user_ty,\n-                Locations::All(local_decl.source_info.span),\n+                Locations::All(span),\n                 ConstraintCategory::TypeAnnotation,\n             ) {\n                 span_mirbug!(\n@@ -970,15 +970,21 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         locations: Locations,\n         category: ConstraintCategory,\n     ) -> Fallible<()> {\n-        relate_tys::relate_type_and_user_type(\n+        let ty = relate_tys::relate_type_and_user_type(\n             self.infcx,\n             a,\n             v,\n             b,\n             locations,\n             category,\n             self.borrowck_context.as_mut().map(|x| &mut **x),\n-        )\n+        )?;\n+        self.prove_predicate(\n+            ty::Predicate::WellFormed(ty),\n+            locations,\n+            category,\n+        );\n+        Ok(())\n     }\n \n     fn eq_opaque_type_and_type("}, {"sha": "1e279aef07981001ec7713df81c7338ba9249d32", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -10,7 +10,7 @@\n \n use borrow_check::nll::constraints::OutlivesConstraint;\n use borrow_check::nll::type_check::{BorrowCheckContext, Locations};\n-use rustc::infer::canonical::{Canonical, CanonicalVarInfos};\n+use rustc::infer::canonical::{Canonical, CanonicalVarInfos, CanonicalVarValues};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n use rustc::mir::ConstraintCategory;\n use rustc::traits::query::Fallible;\n@@ -70,7 +70,7 @@ pub(super) fn relate_type_and_user_type<'tcx>(\n     locations: Locations,\n     category: ConstraintCategory,\n     borrowck_context: Option<&mut BorrowCheckContext<'_, 'tcx>>,\n-) -> Fallible<()> {\n+) -> Fallible<Ty<'tcx>> {\n     debug!(\n         \"sub_type_and_user_type(a={:?}, b={:?}, locations={:?})\",\n         a, b, locations\n@@ -85,13 +85,24 @@ pub(super) fn relate_type_and_user_type<'tcx>(\n     // variance to get the right relationship.\n     let v1 = ty::Contravariant.xform(v);\n \n-    TypeRelating::new(\n+    let mut type_relating = TypeRelating::new(\n         infcx.tcx,\n         NllTypeRelatingDelegate::new(infcx, borrowck_context, locations, category),\n         v1,\n         b_variables,\n-    ).relate(&b_value, &a)?;\n-    Ok(())\n+    );\n+    type_relating.relate(&b_value, &a)?;\n+\n+    Ok(b.substitute(\n+        infcx.tcx,\n+        &CanonicalVarValues {\n+            var_values: type_relating\n+                .canonical_var_values\n+                .into_iter()\n+                .map(|x| x.expect(\"unsubstituted canonical variable\"))\n+                .collect(),\n+        },\n+    ))\n }\n \n struct TypeRelating<'me, 'gcx: 'tcx, 'tcx: 'me, D>"}, {"sha": "394fa4e077c1b77af64e2b3c61cb31d7371dd4c8", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -292,30 +292,32 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     ..\n                 },\n                 user_ty: ascription_user_ty,\n+                user_ty_span,\n             } => {\n                 let place =\n                     self.storage_live_binding(block, var, irrefutable_pat.span, OutsideGuard);\n                 unpack!(block = self.into(&place, block, initializer));\n \n-                let source_info = self.source_info(irrefutable_pat.span);\n+                // Inject a fake read, see comments on `FakeReadCause::ForLet`.\n+                let pattern_source_info = self.source_info(irrefutable_pat.span);\n                 self.cfg.push(\n                     block,\n                     Statement {\n-                        source_info,\n-                        kind: StatementKind::AscribeUserType(\n-                            place.clone(),\n-                            ty::Variance::Invariant,\n-                            ascription_user_ty,\n-                        ),\n+                        source_info: pattern_source_info,\n+                        kind: StatementKind::FakeRead(FakeReadCause::ForLet, place.clone()),\n                     },\n                 );\n \n-                // Inject a fake read, see comments on `FakeReadCause::ForLet`.\n+                let ty_source_info = self.source_info(user_ty_span);\n                 self.cfg.push(\n                     block,\n                     Statement {\n-                        source_info,\n-                        kind: StatementKind::FakeRead(FakeReadCause::ForLet, place.clone()),\n+                        source_info: ty_source_info,\n+                        kind: StatementKind::AscribeUserType(\n+                            place.clone(),\n+                            ty::Variance::Invariant,\n+                            ascription_user_ty,\n+                        ),\n                     },\n                 );\n \n@@ -489,7 +491,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     pub fn visit_bindings(\n         &mut self,\n         pattern: &Pattern<'tcx>,\n-        mut pattern_user_ty: Option<CanonicalTy<'tcx>>,\n+        mut pattern_user_ty: Option<(CanonicalTy<'tcx>, Span)>,\n         f: &mut impl FnMut(\n             &mut Self,\n             Mutability,\n@@ -498,7 +500,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             NodeId,\n             Span,\n             Ty<'tcx>,\n-            Option<CanonicalTy<'tcx>>,\n+            Option<(CanonicalTy<'tcx>, Span)>,\n         ),\n     ) {\n         match *pattern.kind {\n@@ -549,16 +551,15 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 // FIXME(#47184): extract or handle `pattern_user_ty` somehow\n                 self.visit_bindings(subpattern, None, f);\n             }\n-            PatternKind::AscribeUserType { ref subpattern, user_ty } => {\n+            PatternKind::AscribeUserType { ref subpattern, user_ty, user_ty_span } => {\n                 // This corresponds to something like\n                 //\n                 // ```\n-                // let (p1: T1): T2 = ...;\n+                // let A::<'a>(_): A<'static> = ...;\n                 // ```\n                 //\n-                // Not presently possible, though maybe someday.\n-                assert!(pattern_user_ty.is_none());\n-                self.visit_bindings(subpattern, Some(user_ty), f)\n+                // FIXME(#47184): handle `pattern_user_ty` somehow\n+                self.visit_bindings(subpattern, Some((user_ty, user_ty_span)), f)\n             }\n             PatternKind::Leaf { ref subpatterns }\n             | PatternKind::Variant {\n@@ -1469,7 +1470,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         num_patterns: usize,\n         var_id: NodeId,\n         var_ty: Ty<'tcx>,\n-        user_var_ty: Option<CanonicalTy<'tcx>>,\n+        user_var_ty: Option<(CanonicalTy<'tcx>, Span)>,\n         has_guard: ArmHasGuard,\n         opt_match_place: Option<(Option<Place<'tcx>>, Span)>,\n         pat_span: Span,"}, {"sha": "494e7c03c3e68896a23d4cbe16198ca51aa72cf1", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -63,9 +63,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                  candidate: &mut Candidate<'pat, 'tcx>)\n                                  -> Result<(), MatchPair<'pat, 'tcx>> {\n         match *match_pair.pattern.kind {\n-            PatternKind::AscribeUserType { ref subpattern, user_ty } => {\n+            PatternKind::AscribeUserType { ref subpattern, user_ty, user_ty_span } => {\n                 candidate.ascriptions.push(Ascription {\n-                    span: match_pair.pattern.span,\n+                    span: user_ty_span,\n                     user_ty,\n                     source: match_pair.place.clone(),\n                 });"}, {"sha": "022c606a0f819784fcf13b2567dbb44401c79a61", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -92,6 +92,7 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                     span: pattern.span,\n                                     kind: Box::new(PatternKind::AscribeUserType {\n                                         user_ty: *user_ty,\n+                                        user_ty_span: ty.span,\n                                         subpattern: pattern\n                                     })\n                                 };"}, {"sha": "0238a23895e50f3fec7cfcc2c3eb89cfe1aca6bc", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -71,6 +71,7 @@ pub enum PatternKind<'tcx> {\n     AscribeUserType {\n         user_ty: CanonicalTy<'tcx>,\n         subpattern: Pattern<'tcx>,\n+        user_ty_span: Span,\n     },\n \n     /// x, ref x, x @ P, etc\n@@ -692,6 +693,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n             kind = PatternKind::AscribeUserType {\n                 subpattern,\n                 user_ty,\n+                user_ty_span: span,\n             };\n         }\n \n@@ -1015,9 +1017,11 @@ impl<'tcx> PatternFoldable<'tcx> for PatternKind<'tcx> {\n             PatternKind::AscribeUserType {\n                 ref subpattern,\n                 user_ty,\n+                user_ty_span,\n             } => PatternKind::AscribeUserType {\n                 subpattern: subpattern.fold_with(folder),\n                 user_ty: user_ty.fold_with(folder),\n+                user_ty_span,\n             },\n             PatternKind::Binding {\n                 mutability,"}, {"sha": "1abe63afa80144228d02b7300117f6901dbe78b0", "filename": "src/test/mir-opt/basic_assignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbasic_assignment.rs?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -55,8 +55,8 @@ fn main() {\n //        StorageDead(_3);\n //        StorageLive(_4);\n //        _4 = std::option::Option<std::boxed::Box<u32>>::None;\n-//        AscribeUserType(_4, o, Canonical { variables: [], value: std::option::Option<std::boxed::Box<u32>> });\n //        FakeRead(ForLet, _4);\n+//        AscribeUserType(_4, o, Canonical { variables: [], value: std::option::Option<std::boxed::Box<u32>> });\n //        StorageLive(_5);\n //        StorageLive(_6);\n //        _6 = move _4;"}, {"sha": "1156c773b8c5a35412ba2a8f1cedab74cf55cf5d", "filename": "src/test/ui/associated-types/associated-types-subtyping-1.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.nll.stderr?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -0,0 +1,24 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/associated-types-subtyping-1.rs:36:13\n+   |\n+LL | fn method2<'a,'b,T>(x: &'a T, y: &'b T)\n+   |            -- -- lifetime `'b` defined here\n+   |            |\n+   |            lifetime `'a` defined here\n+...\n+LL |     let _c: <T as Trait<'b>>::Type = a; //~ ERROR E0623\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/associated-types-subtyping-1.rs:44:12\n+   |\n+LL | fn method3<'a,'b,T>(x: &'a T, y: &'b T)\n+   |            -- -- lifetime `'b` defined here\n+   |            |\n+   |            lifetime `'a` defined here\n+...\n+LL |     let b: <T as Trait<'b>>::Type = make_any();\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "479cb359a781f2d3437f12031c2093cd2a99afc3", "filename": "src/test/ui/associated-types/associated-types-subtyping-1.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.rs?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n #![allow(unused_variables)]\n \n+fn make_any<T>() -> T {  loop {} }\n+\n trait Trait<'a> {\n     type Type;\n \n@@ -22,35 +22,35 @@ fn method1<'a,'b,T>(x: &'a T, y: &'b T)\n     where T : for<'z> Trait<'z>, 'a : 'b\n {\n     // Note that &'static T <: &'a T.\n-    let a: <T as Trait<'a>>::Type = loop { };\n-    let b: <T as Trait<'b>>::Type = loop { };\n+    let a: <T as Trait<'a>>::Type = make_any();\n+    let b: <T as Trait<'b>>::Type = make_any();\n     let _c: <T as Trait<'a>>::Type = a;\n }\n \n fn method2<'a,'b,T>(x: &'a T, y: &'b T)\n     where T : for<'z> Trait<'z>, 'a : 'b\n {\n     // Note that &'static T <: &'a T.\n-    let a: <T as Trait<'a>>::Type = loop { };\n-    let b: <T as Trait<'b>>::Type = loop { };\n+    let a: <T as Trait<'a>>::Type = make_any();\n+    let b: <T as Trait<'b>>::Type = make_any();\n     let _c: <T as Trait<'b>>::Type = a; //~ ERROR E0623\n }\n \n fn method3<'a,'b,T>(x: &'a T, y: &'b T)\n     where T : for<'z> Trait<'z>, 'a : 'b\n {\n     // Note that &'static T <: &'a T.\n-    let a: <T as Trait<'a>>::Type = loop { };\n-    let b: <T as Trait<'b>>::Type = loop { };\n+    let a: <T as Trait<'a>>::Type = make_any();\n+    let b: <T as Trait<'b>>::Type = make_any();\n     let _c: <T as Trait<'a>>::Type = b; //~ ERROR E0623\n }\n \n fn method4<'a,'b,T>(x: &'a T, y: &'b T)\n     where T : for<'z> Trait<'z>, 'a : 'b\n {\n     // Note that &'static T <: &'a T.\n-    let a: <T as Trait<'a>>::Type = loop { };\n-    let b: <T as Trait<'b>>::Type = loop { };\n+    let a: <T as Trait<'a>>::Type = make_any();\n+    let b: <T as Trait<'b>>::Type = make_any();\n     let _c: <T as Trait<'b>>::Type = b;\n }\n "}, {"sha": "a4d47eed6fb0a574d40fcbe7cee2e9a85db76683", "filename": "src/test/ui/nll/relate_tys/hr-fn-aaa-as-aba.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aaa-as-aba.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aaa-as-aba.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fhr-fn-aaa-as-aba.stderr?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -5,10 +5,10 @@ LL |     let a: for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32 = make_it();\n    |                                                          ^^^^^^^^^\n \n error: higher-ranked subtype error\n-  --> $DIR/hr-fn-aaa-as-aba.rs:32:9\n+  --> $DIR/hr-fn-aaa-as-aba.rs:32:12\n    |\n LL |     let _: for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32 = make_it();\n-   |         ^\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0b0848e99137eb3d619633bf201eaa6a85e174bc", "filename": "src/test/ui/nll/user-annotations/patterns.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -131,12 +131,12 @@ LL |     y //~ ERROR\n    |     ^ returning this value requires that `'a` must outlive `'static`\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/patterns.rs:117:9\n+  --> $DIR/patterns.rs:117:18\n    |\n LL | fn a_to_static_then_static<'a>(x: &'a u32) -> &'static u32 {\n    |                            -- lifetime `'a` defined here\n LL |     let (y, _z): (&'static u32, u32) = (x, 44); //~ ERROR\n-   |         ^^^^^^^ type annotation requires that `'a` must outlive `'static`\n+   |                  ^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n \n error: aborting due to 14 previous errors\n "}, {"sha": "8fd195639fec3b449b9a54995b0a23007202003e", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -1,10 +1,10 @@\n error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/region-object-lifetime-in-coercion.rs:18:9\n+  --> $DIR/region-object-lifetime-in-coercion.rs:18:12\n    |\n LL | fn a(v: &[u8]) -> Box<Foo + 'static> {\n    |         ----- help: add explicit lifetime `'static` to the type of `v`: `&'static [u8]`\n LL |     let x: Box<Foo + 'static> = Box::new(v);\n-   |         ^ lifetime `'static` required\n+   |            ^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n \n error[E0621]: explicit lifetime required in the type of `v`\n   --> $DIR/region-object-lifetime-in-coercion.rs:24:5"}, {"sha": "1454c856f978586bf0f6ed076d224da72cad2bc8", "filename": "src/test/ui/regions/regions-addr-of-self.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.nll.stderr?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -1,10 +1,10 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-addr-of-self.rs:17:13\n+  --> $DIR/regions-addr-of-self.rs:17:16\n    |\n LL |     pub fn chase_cat(&mut self) {\n    |                      - let's call the lifetime of this reference `'1`\n LL |         let p: &'static mut usize = &mut self.cats_chased; //~ ERROR cannot infer\n-   |             ^ type annotation requires that `'1` must outlive `'static`\n+   |                ^^^^^^^^^^^^^^^^^^ type annotation requires that `'1` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "0e48192eaffc82d315766dfa18cfb046c632f7b3", "filename": "src/test/ui/regions/regions-addr-of-upvar-self.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -1,33 +1,33 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-addr-of-upvar-self.rs:20:17\n+  --> $DIR/regions-addr-of-upvar-self.rs:20:20\n    |\n LL |         let _f = || {\n    |                  -- lifetime `'1` represents this closure's body\n LL |             let p: &'static mut usize = &mut self.food; //~ ERROR cannot infer\n-   |                 ^ type annotation requires that `'1` must outlive `'static`\n+   |                    ^^^^^^^^^^^^^^^^^^ type annotation requires that `'1` must outlive `'static`\n    |\n    = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-addr-of-upvar-self.rs:20:17\n+  --> $DIR/regions-addr-of-upvar-self.rs:20:20\n    |\n LL |     pub fn chase_cat(&mut self) {\n    |                      --------- lifetime `'2` appears in the type of `self`\n LL |         let _f = || {\n    |                  -- lifetime `'1` represents this closure's body\n LL |             let p: &'static mut usize = &mut self.food; //~ ERROR cannot infer\n-   |                 ^ type annotation requires that `'1` must outlive `'2`\n+   |                    ^^^^^^^^^^^^^^^^^^ type annotation requires that `'1` must outlive `'2`\n    |\n    = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-addr-of-upvar-self.rs:20:17\n+  --> $DIR/regions-addr-of-upvar-self.rs:20:20\n    |\n LL |     pub fn chase_cat(&mut self) {\n    |                      - let's call the lifetime of this reference `'1`\n LL |         let _f = || {\n LL |             let p: &'static mut usize = &mut self.food; //~ ERROR cannot infer\n-   |                 ^ type annotation requires that `'1` must outlive `'static`\n+   |                    ^^^^^^^^^^^^^^^^^^ type annotation requires that `'1` must outlive `'static`\n \n error[E0597]: `self` does not live long enough\n   --> $DIR/regions-addr-of-upvar-self.rs:20:46"}, {"sha": "f711541fbd5c2f6a466c229b3b5802229d0c010c", "filename": "src/test/ui/regions/regions-assoc-type-in-supertrait-outlives-container.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.nll.stderr?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -0,0 +1,13 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:52:13\n+   |\n+LL | fn with_assoc<'a,'b>() {\n+   |               -- -- lifetime `'b` defined here\n+   |               |\n+   |               lifetime `'a` defined here\n+...\n+LL |     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "741feb1f9eaf4184b1aa46989016011c86cf6e3d", "filename": "src/test/ui/regions/regions-assoc-type-in-supertrait-outlives-container.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.rs?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Test that we are imposing the requirement that every associated\n // type of a bound that appears in the where clause on a struct must\n // outlive the location in which the type appears, even when the\n@@ -49,7 +47,10 @@ fn with_assoc<'a,'b>() {\n     // outlive 'a. In this case, that means TheType<'b>::TheAssocType,\n     // which is &'b (), must outlive 'a.\n \n-    let _: &'a WithAssoc<TheType<'b>> = loop { }; //~ ERROR reference has a longer lifetime\n+    // FIXME (#54943) NLL doesn't enforce WF condition in unreachable code if\n+    // `_x` is changed to `_`\n+    let _x: &'a WithAssoc<TheType<'b>> = loop { };\n+    //~^ ERROR reference has a longer lifetime\n }\n \n fn main() {"}, {"sha": "7959d1b6c2300091f254bd20b722d982f6c51dbe", "filename": "src/test/ui/regions/regions-assoc-type-in-supertrait-outlives-container.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.stderr?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -1,16 +1,16 @@\n error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:52:12\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:52:13\n    |\n-LL |     let _: &'a WithAssoc<TheType<'b>> = loop { }; //~ ERROR reference has a longer lifetime\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 46:15\n-  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:46:15\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 44:15\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:44:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 46:18\n-  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:46:18\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 44:18\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:44:18\n    |\n LL | fn with_assoc<'a,'b>() {\n    |                  ^^"}, {"sha": "8d4f3d1e87fba8dd7a3a186363707c8346d03409", "filename": "src/test/ui/regions/regions-free-region-ordering-caller.nll.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.nll.stderr?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -0,0 +1,33 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-free-region-ordering-caller.rs:18:12\n+   |\n+LL | fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n+   |          --  -- lifetime `'b` defined here\n+   |          |\n+   |          lifetime `'a` defined here\n+LL |     let z: Option<&'b &'a usize> = None;//~ ERROR E0623\n+   |            ^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'b`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-free-region-ordering-caller.rs:23:12\n+   |\n+LL | fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n+   |          --  -- lifetime `'b` defined here\n+   |          |\n+   |          lifetime `'a` defined here\n+LL |     let y: Paramd<'a> = Paramd { x: a };\n+LL |     let z: Option<&'b Paramd<'a>> = None;//~ ERROR E0623\n+   |            ^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'b`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-free-region-ordering-caller.rs:27:12\n+   |\n+LL | fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n+   |          --  -- lifetime `'b` defined here\n+   |          |\n+   |          lifetime `'a` defined here\n+LL |     let z: Option<&'a &'b usize> = None;//~ ERROR E0623\n+   |            ^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "66b16744cc7df38586facf55c2c8f1c3250422ea", "filename": "src/test/ui/regions/regions-free-region-ordering-caller.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.rs?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Test various ways to construct a pointer with a longer lifetime\n // than the thing it points at and ensure that they result in\n // errors. See also regions-free-region-ordering-callee.rs"}, {"sha": "a3645995b5ea2284ab6c4d3aee1e179bd2fd919a", "filename": "src/test/ui/regions/regions-free-region-ordering-caller.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.stderr?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-free-region-ordering-caller.rs:20:12\n+  --> $DIR/regions-free-region-ordering-caller.rs:18:12\n    |\n LL | fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |                     ---------     ---------\n@@ -9,7 +9,7 @@ LL |     let z: Option<&'b &'a usize> = None;//~ ERROR E0623\n    |            ^^^^^^^^^^^^^^^^^^^^^ ...but data from `a` flows into `b` here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-free-region-ordering-caller.rs:25:12\n+  --> $DIR/regions-free-region-ordering-caller.rs:23:12\n    |\n LL | fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |                     ---------     ---------\n@@ -20,7 +20,7 @@ LL |     let z: Option<&'b Paramd<'a>> = None;//~ ERROR E0623\n    |            ^^^^^^^^^^^^^^^^^^^^^^ ...but data from `a` flows into `b` here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-free-region-ordering-caller.rs:29:12\n+  --> $DIR/regions-free-region-ordering-caller.rs:27:12\n    |\n LL | fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |                     ---------     --------- these two types are declared with different lifetimes..."}, {"sha": "9747602f1ba481343e3468f14faeac69cad1dc14", "filename": "src/test/ui/regions/regions-free-region-ordering-caller1.nll.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller1.nll.stderr?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -13,6 +13,22 @@ note: borrowed value must be valid for the lifetime 'a as defined on the functio\n LL | fn call1<'a>(x: &'a usize) {\n    |          ^^\n \n-error: aborting due to previous error\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/regions-free-region-ordering-caller1.rs:19:27\n+   |\n+LL |     let z: &'a & usize = &(&y);\n+   |                           ^^^^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - `y` dropped here while still borrowed\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 15:10...\n+  --> $DIR/regions-free-region-ordering-caller1.rs:15:10\n+   |\n+LL | fn call1<'a>(x: &'a usize) {\n+   |          ^^\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0716`.\n+Some errors occurred: E0597, E0716.\n+For more information about an error, try `rustc --explain E0597`."}, {"sha": "2eb4ccf1c35f356e5b33c2674831956052ddae8d", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-1.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.nll.stderr?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -0,0 +1,11 @@\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/regions-implied-bounds-projection-gap-1.rs:26:5\n+   |\n+LL |     wf::<&'x T>();\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `T: 'x`...\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0309`."}, {"sha": "65594ab8f2e29220ee603252622bf2e83b52fbe0", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.rs?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Illustrates the \"projection gap\": in this test, even though we know\n // that `T::Foo: 'x`, that does not tell us that `T: 'x`, because\n // there might be other ways for the caller of `func` to show that"}, {"sha": "41ae515bb9a1615a67801d74b84565c917e7e6f5", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.stderr?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -1,5 +1,5 @@\n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-implied-bounds-projection-gap-1.rs:28:10\n+  --> $DIR/regions-implied-bounds-projection-gap-1.rs:26:10\n    |\n LL | fn func<'x, T:Trait1<'x>>(t: &'x T::Foo)\n    |             -- help: consider adding an explicit lifetime bound `T: 'x`...\n@@ -8,7 +8,7 @@ LL |     wf::<&'x T>();\n    |          ^^^^^\n    |\n note: ...so that the reference type `&'x T` does not outlive the data it points at\n-  --> $DIR/regions-implied-bounds-projection-gap-1.rs:28:10\n+  --> $DIR/regions-implied-bounds-projection-gap-1.rs:26:10\n    |\n LL |     wf::<&'x T>();\n    |          ^^^^^"}, {"sha": "aba285d427b47a8f6f89623a938313a1bcd2c4bf", "filename": "src/test/ui/regions/regions-infer-contravariance-due-to-decl.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.nll.stderr?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -1,13 +1,13 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-infer-contravariance-due-to-decl.rs:35:9\n+  --> $DIR/regions-infer-contravariance-due-to-decl.rs:35:12\n    |\n LL | fn use_<'short,'long>(c: Contravariant<'short>,\n    |         ------ ----- lifetime `'long` defined here\n    |         |\n    |         lifetime `'short` defined here\n ...\n LL |     let _: Contravariant<'long> = c; //~ ERROR E0623\n-   |         ^ type annotation requires that `'short` must outlive `'long`\n+   |            ^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n \n error: aborting due to previous error\n "}, {"sha": "8bc6d565cf1b20c5ddb27a5d4e23eecc94bac000", "filename": "src/test/ui/regions/regions-infer-covariance-due-to-decl.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.nll.stderr?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -1,13 +1,13 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-infer-covariance-due-to-decl.rs:32:9\n+  --> $DIR/regions-infer-covariance-due-to-decl.rs:32:12\n    |\n LL | fn use_<'short,'long>(c: Covariant<'long>,\n    |         ------ ----- lifetime `'long` defined here\n    |         |\n    |         lifetime `'short` defined here\n ...\n LL |     let _: Covariant<'short> = c; //~ ERROR E0623\n-   |         ^ type annotation requires that `'short` must outlive `'long`\n+   |            ^^^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n \n error: aborting due to previous error\n "}, {"sha": "836f8c28a737a81d54d10c84bf56624dcde6363e", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.nll.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.nll.stderr?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -0,0 +1,13 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-outlives-projection-container-wc.rs:46:13\n+   |\n+LL | fn with_assoc<'a,'b>() {\n+   |               -- -- lifetime `'b` defined here\n+   |               |\n+   |               lifetime `'a` defined here\n+...\n+LL |     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: aborting due to previous error\n+"}, {"sha": "22ec58d1367bcef60137a534f60a88a950bd4831", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.rs?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Test that we are imposing the requirement that every associated\n // type of a bound that appears in the where clause on a struct must\n // outlive the location in which the type appears, even when the\n@@ -43,7 +41,9 @@ fn with_assoc<'a,'b>() {\n     // outlive 'a. In this case, that means TheType<'b>::TheAssocType,\n     // which is &'b (), must outlive 'a.\n \n-    let _: &'a WithAssoc<TheType<'b>> = loop { };\n+    // FIXME (#54943) NLL doesn't enforce WF condition in unreachable code if\n+    // `_x` is changed to `_`\n+    let _x: &'a WithAssoc<TheType<'b>> = loop { };\n     //~^ ERROR reference has a longer lifetime\n }\n "}, {"sha": "e5bc52d7b663f7e8c0110f9b4ce99e05d23484f3", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.stderr?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -1,16 +1,16 @@\n error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container-wc.rs:46:12\n+  --> $DIR/regions-outlives-projection-container-wc.rs:46:13\n    |\n-LL |     let _: &'a WithAssoc<TheType<'b>> = loop { };\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 40:15\n-  --> $DIR/regions-outlives-projection-container-wc.rs:40:15\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 38:15\n+  --> $DIR/regions-outlives-projection-container-wc.rs:38:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 40:18\n-  --> $DIR/regions-outlives-projection-container-wc.rs:40:18\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 38:18\n+  --> $DIR/regions-outlives-projection-container-wc.rs:38:18\n    |\n LL | fn with_assoc<'a,'b>() {\n    |                  ^^"}, {"sha": "126f50577c84f9fe955f0b45e9c6401b86daa6e2", "filename": "src/test/ui/regions/regions-outlives-projection-container.nll.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.nll.stderr?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -0,0 +1,46 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-outlives-projection-container.rs:50:13\n+   |\n+LL | fn with_assoc<'a,'b>() {\n+   |               -- -- lifetime `'b` defined here\n+   |               |\n+   |               lifetime `'a` defined here\n+...\n+LL |     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-outlives-projection-container.rs:68:13\n+   |\n+LL | fn without_assoc<'a,'b>() {\n+   |                  -- -- lifetime `'b` defined here\n+   |                  |\n+   |                  lifetime `'a` defined here\n+...\n+LL |     let _x: &'a WithoutAssoc<TheType<'b>> = loop { };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-outlives-projection-container.rs:77:5\n+   |\n+LL | fn call_with_assoc<'a,'b>() {\n+   |                    -- -- lifetime `'b` defined here\n+   |                    |\n+   |                    lifetime `'a` defined here\n+...\n+LL |     call::<&'a WithAssoc<TheType<'b>>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-outlives-projection-container.rs:84:5\n+   |\n+LL | fn call_without_assoc<'a,'b>() {\n+   |                       -- -- lifetime `'b` defined here\n+   |                       |\n+   |                       lifetime `'a` defined here\n+...\n+LL |     call::<&'a WithoutAssoc<TheType<'b>>>(); //~ ERROR reference has a longer lifetime\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "08fd7080e52c6153fa583138935d9635db68ea77", "filename": "src/test/ui/regions/regions-outlives-projection-container.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.rs?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-compare-mode-nll\n-\n // Test that we are imposing the requirement that every associated\n // type of a bound that appears in the where clause on a struct must\n // outlive the location in which the type appears. Issue #22246.\n@@ -47,7 +45,10 @@ fn with_assoc<'a,'b>() {\n     // outlive 'a. In this case, that means TheType<'b>::TheAssocType,\n     // which is &'b (), must outlive 'a.\n \n-    let _: &'a WithAssoc<TheType<'b>> = loop { }; //~ ERROR reference has a longer lifetime\n+    // FIXME (#54943) NLL doesn't enforce WF condition in unreachable code if\n+    // `_x` is changed to `_`\n+    let _x: &'a WithAssoc<TheType<'b>> = loop { };\n+    //~^ ERROR reference has a longer lifetime\n }\n \n fn with_assoc1<'a,'b>() where 'b : 'a {\n@@ -57,14 +58,15 @@ fn with_assoc1<'a,'b>() where 'b : 'a {\n     // which is &'b (), must outlive 'a, so 'b : 'a must hold, and\n     // that is in the where clauses, so we're fine.\n \n-    let _: &'a WithAssoc<TheType<'b>> = loop { };\n+    let _x: &'a WithAssoc<TheType<'b>> = loop { };\n }\n \n fn without_assoc<'a,'b>() {\n     // Here there are no associated types but there is a requirement\n     // that `'b:'a` holds because the `'b` appears in `TheType<'b>`.\n \n-    let _: &'a WithoutAssoc<TheType<'b>> = loop { }; //~ ERROR reference has a longer lifetime\n+    let _x: &'a WithoutAssoc<TheType<'b>> = loop { };\n+    //~^ ERROR reference has a longer lifetime\n }\n \n fn call_with_assoc<'a,'b>() {"}, {"sha": "2c37d94361603843d2eab9ac9f09db0e0edc870c", "filename": "src/test/ui/regions/regions-outlives-projection-container.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.stderr?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -1,67 +1,67 @@\n error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container.rs:50:12\n+  --> $DIR/regions-outlives-projection-container.rs:50:13\n    |\n-LL |     let _: &'a WithAssoc<TheType<'b>> = loop { }; //~ ERROR reference has a longer lifetime\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 44:15\n-  --> $DIR/regions-outlives-projection-container.rs:44:15\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 42:15\n+  --> $DIR/regions-outlives-projection-container.rs:42:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 44:18\n-  --> $DIR/regions-outlives-projection-container.rs:44:18\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 42:18\n+  --> $DIR/regions-outlives-projection-container.rs:42:18\n    |\n LL | fn with_assoc<'a,'b>() {\n    |                  ^^\n \n error[E0491]: in type `&'a WithoutAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container.rs:67:12\n+  --> $DIR/regions-outlives-projection-container.rs:68:13\n    |\n-LL |     let _: &'a WithoutAssoc<TheType<'b>> = loop { }; //~ ERROR reference has a longer lifetime\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _x: &'a WithoutAssoc<TheType<'b>> = loop { };\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 63:18\n-  --> $DIR/regions-outlives-projection-container.rs:63:18\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 64:18\n+  --> $DIR/regions-outlives-projection-container.rs:64:18\n    |\n LL | fn without_assoc<'a,'b>() {\n    |                  ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 63:21\n-  --> $DIR/regions-outlives-projection-container.rs:63:21\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 64:21\n+  --> $DIR/regions-outlives-projection-container.rs:64:21\n    |\n LL | fn without_assoc<'a,'b>() {\n    |                     ^^\n \n error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container.rs:75:12\n+  --> $DIR/regions-outlives-projection-container.rs:77:12\n    |\n LL |     call::<&'a WithAssoc<TheType<'b>>>();\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 70:20\n-  --> $DIR/regions-outlives-projection-container.rs:70:20\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 72:20\n+  --> $DIR/regions-outlives-projection-container.rs:72:20\n    |\n LL | fn call_with_assoc<'a,'b>() {\n    |                    ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 70:23\n-  --> $DIR/regions-outlives-projection-container.rs:70:23\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 72:23\n+  --> $DIR/regions-outlives-projection-container.rs:72:23\n    |\n LL | fn call_with_assoc<'a,'b>() {\n    |                       ^^\n \n error[E0491]: in type `&'a WithoutAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container.rs:82:12\n+  --> $DIR/regions-outlives-projection-container.rs:84:12\n    |\n LL |     call::<&'a WithoutAssoc<TheType<'b>>>(); //~ ERROR reference has a longer lifetime\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 79:23\n-  --> $DIR/regions-outlives-projection-container.rs:79:23\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 81:23\n+  --> $DIR/regions-outlives-projection-container.rs:81:23\n    |\n LL | fn call_without_assoc<'a,'b>() {\n    |                       ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 79:26\n-  --> $DIR/regions-outlives-projection-container.rs:79:26\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 81:26\n+  --> $DIR/regions-outlives-projection-container.rs:81:26\n    |\n LL | fn call_without_assoc<'a,'b>() {\n    |                          ^^"}, {"sha": "668b75f5733a21ab079d703d4933167337244149", "filename": "src/test/ui/regions/regions-variance-contravariant-use-covariant-in-second-position.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.nll.stderr?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -1,13 +1,13 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-variance-contravariant-use-covariant-in-second-position.rs:35:9\n+  --> $DIR/regions-variance-contravariant-use-covariant-in-second-position.rs:35:12\n    |\n LL | fn use_<'short,'long>(c: S<'long, 'short>,\n    |         ------ ----- lifetime `'long` defined here\n    |         |\n    |         lifetime `'short` defined here\n ...\n LL |     let _: S<'long, 'long> = c; //~ ERROR E0623\n-   |         ^ type annotation requires that `'short` must outlive `'long`\n+   |            ^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n \n error: aborting due to previous error\n "}, {"sha": "5d787e6dab6991b595cdaceaab35453fe433163a", "filename": "src/test/ui/regions/regions-variance-contravariant-use-covariant.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.nll.stderr?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -1,13 +1,13 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-variance-contravariant-use-covariant.rs:33:9\n+  --> $DIR/regions-variance-contravariant-use-covariant.rs:33:12\n    |\n LL | fn use_<'short,'long>(c: Contravariant<'short>,\n    |         ------ ----- lifetime `'long` defined here\n    |         |\n    |         lifetime `'short` defined here\n ...\n LL |     let _: Contravariant<'long> = c; //~ ERROR E0623\n-   |         ^ type annotation requires that `'short` must outlive `'long`\n+   |            ^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n \n error: aborting due to previous error\n "}, {"sha": "3fb290096686d50ffeef723488bf2e3b2899080c", "filename": "src/test/ui/regions/regions-variance-covariant-use-contravariant.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.nll.stderr?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -1,13 +1,13 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-variance-covariant-use-contravariant.rs:33:9\n+  --> $DIR/regions-variance-covariant-use-contravariant.rs:33:12\n    |\n LL | fn use_<'short,'long>(c: Covariant<'long>,\n    |         ------ ----- lifetime `'long` defined here\n    |         |\n    |         lifetime `'short` defined here\n ...\n LL |     let _: Covariant<'short> = c; //~ ERROR E0623\n-   |         ^ type annotation requires that `'short` must outlive `'long`\n+   |            ^^^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n \n error: aborting due to previous error\n "}, {"sha": "fb59ec1ca1008ff7cc4f86042a111c5758612ed9", "filename": "src/test/ui/regions/regions-variance-invariant-use-contravariant.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.nll.stderr?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -1,13 +1,13 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-variance-invariant-use-contravariant.rs:30:9\n+  --> $DIR/regions-variance-invariant-use-contravariant.rs:30:12\n    |\n LL | fn use_<'short,'long>(c: Invariant<'long>,\n    |         ------ ----- lifetime `'long` defined here\n    |         |\n    |         lifetime `'short` defined here\n ...\n LL |     let _: Invariant<'short> = c; //~ ERROR E0623\n-   |         ^ type annotation requires that `'short` must outlive `'long`\n+   |            ^^^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n \n error: aborting due to previous error\n "}, {"sha": "daf6a79136a543ce0841acec7b3fb9ec72be37c5", "filename": "src/test/ui/regions/regions-variance-invariant-use-covariant.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -1,11 +1,11 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-variance-invariant-use-covariant.rs:27:9\n+  --> $DIR/regions-variance-invariant-use-covariant.rs:27:12\n    |\n LL | fn use_<'b>(c: Invariant<'b>) {\n    |         -- lifetime `'b` defined here\n ...\n LL |     let _: Invariant<'static> = c; //~ ERROR mismatched types\n-   |         ^ type annotation requires that `'b` must outlive `'static`\n+   |            ^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "061bc19cec9974a1e5a5fa1e4288dfa8985dc7bc", "filename": "src/test/ui/try-block/try-block-bad-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.stderr?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -2,7 +2,7 @@ error[E0597]: `my_string` does not live long enough\n   --> $DIR/try-block-bad-lifetime.rs:25:33\n    |\n LL |         let result: Result<(), &str> = try {\n-   |             ------ borrow later used here\n+   |             ------ borrow later stored here\n LL |             let my_string = String::from(\"\");\n LL |             let my_str: & str = & my_string;\n    |                                 ^^^^^^^^^^^ borrowed value does not live long enough"}, {"sha": "eb01c2bbb05b1029e123ef02d161053232a1c498", "filename": "src/test/ui/variance/variance-cell-is-invariant.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -1,13 +1,13 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/variance-cell-is-invariant.rs:24:9\n+  --> $DIR/variance-cell-is-invariant.rs:24:12\n    |\n LL | fn use_<'short,'long>(c: Foo<'short>,\n    |         ------ ----- lifetime `'long` defined here\n    |         |\n    |         lifetime `'short` defined here\n ...\n LL |     let _: Foo<'long> = c; //~ ERROR E0623\n-   |         ^ type annotation requires that `'short` must outlive `'long`\n+   |            ^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n \n error: aborting due to previous error\n "}, {"sha": "bfcb16c654ff1d71dcf1c4a10056f44a44689002", "filename": "src/test/ui/wf/wf-static-method.nll.stderr", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr?ref=2c2e2c57dc2140cfb62a8abb9312b89f02c59f3c", "patch": "@@ -9,6 +9,17 @@ LL | impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n LL |         u //~ ERROR E0312\n    |         ^ returning this value requires that `'b` must outlive `'a`\n \n+error: unsatisfied lifetime constraints\n+  --> $DIR/wf-static-method.rs:36:18\n+   |\n+LL | impl<'a, 'b> Foo<'a, 'b, ()> for IndirectEvil<'a, 'b> {\n+   |      --  -- lifetime `'b` defined here\n+   |      |\n+   |      lifetime `'a` defined here\n+...\n+LL |         let me = Self::make_me(); //~ ERROR lifetime bound not satisfied\n+   |                  ^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n+\n error: unsatisfied lifetime constraints\n   --> $DIR/wf-static-method.rs:43:9\n    |\n@@ -20,5 +31,25 @@ LL |     fn inherent_evil(u: &'b u32) -> &'a u32 {\n LL |         u //~ ERROR E0312\n    |         ^ returning this value requires that `'b` must outlive `'a`\n \n-error: aborting due to 2 previous errors\n+error: unsatisfied lifetime constraints\n+  --> $DIR/wf-static-method.rs:51:5\n+   |\n+LL | fn evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n+   |         --  -- lifetime `'b` defined here\n+   |         |\n+   |         lifetime `'a` defined here\n+LL |     <()>::static_evil(b) //~ ERROR cannot infer an appropriate lifetime\n+   |     ^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/wf-static-method.rs:55:5\n+   |\n+LL | fn indirect_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n+   |                  --  -- lifetime `'b` defined here\n+   |                  |\n+   |                  lifetime `'a` defined here\n+LL |     <IndirectEvil>::static_evil(b)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n+\n+error: aborting due to 5 previous errors\n "}]}