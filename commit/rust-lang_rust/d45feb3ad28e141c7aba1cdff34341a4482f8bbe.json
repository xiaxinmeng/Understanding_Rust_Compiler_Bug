{"sha": "d45feb3ad28e141c7aba1cdff34341a4482f8bbe", "node_id": "C_kwDOAAsO6NoAKGQ0NWZlYjNhZDI4ZTE0MWM3YWJhMWNkZmYzNDM0MWE0NDgyZjhiYmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-30T01:32:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-30T01:32:15Z"}, "message": "Auto merge of #102304 - lcnr:coherence-cleanup, r=compiler-errors\n\nremove outdated coherence hack\n\nwe have a more precise detection for downstream conflicts in candidate assembly: the `is_knowable` check in `candidate_from_obligation_no_cache`.\n\nr? types cc `@nikomatsakis`", "tree": {"sha": "2c8dc718d730329d97cad3d0d8cda95317aaf6b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c8dc718d730329d97cad3d0d8cda95317aaf6b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d45feb3ad28e141c7aba1cdff34341a4482f8bbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d45feb3ad28e141c7aba1cdff34341a4482f8bbe", "html_url": "https://github.com/rust-lang/rust/commit/d45feb3ad28e141c7aba1cdff34341a4482f8bbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d45feb3ad28e141c7aba1cdff34341a4482f8bbe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bb8d276c94c77a5fada815c5fad3b8d324adac4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bb8d276c94c77a5fada815c5fad3b8d324adac4", "html_url": "https://github.com/rust-lang/rust/commit/1bb8d276c94c77a5fada815c5fad3b8d324adac4"}, {"sha": "932f930d279c1d974538bee1f8879b3007f97c99", "url": "https://api.github.com/repos/rust-lang/rust/commits/932f930d279c1d974538bee1f8879b3007f97c99", "html_url": "https://github.com/rust-lang/rust/commit/932f930d279c1d974538bee1f8879b3007f97c99"}], "stats": {"total": 33, "additions": 0, "deletions": 33}, "files": [{"sha": "bac3498523704523cfbd36a9250577f5bc511761", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d45feb3ad28e141c7aba1cdff34341a4482f8bbe/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d45feb3ad28e141c7aba1cdff34341a4482f8bbe/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=d45feb3ad28e141c7aba1cdff34341a4482f8bbe", "patch": "@@ -35,7 +35,6 @@ use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n use rustc_middle::ty::fold::BottomUpFolder;\n-use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::SubstsRef;\n use rustc_middle::ty::{self, EarlyBinder, PolyProjectionPredicate, ToPolyTraitRef, ToPredicate};\n@@ -914,38 +913,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let unbound_input_types =\n             stack.fresh_trait_pred.skip_binder().trait_ref.substs.types().any(|ty| ty.is_fresh());\n \n-        if stack.obligation.polarity() != ty::ImplPolarity::Negative {\n-            // This check was an imperfect workaround for a bug in the old\n-            // intercrate mode; it should be removed when that goes away.\n-            if unbound_input_types && self.intercrate {\n-                debug!(\"evaluate_stack --> unbound argument, intercrate -->  ambiguous\",);\n-                // Heuristics: show the diagnostics when there are no candidates in crate.\n-                if self.intercrate_ambiguity_causes.is_some() {\n-                    debug!(\"evaluate_stack: intercrate_ambiguity_causes is some\");\n-                    if let Ok(candidate_set) = self.assemble_candidates(stack) {\n-                        if !candidate_set.ambiguous && candidate_set.vec.is_empty() {\n-                            let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;\n-                            let self_ty = trait_ref.self_ty();\n-                            let cause = with_no_trimmed_paths!({\n-                                IntercrateAmbiguityCause::DownstreamCrate {\n-                                    trait_desc: trait_ref.print_only_trait_path().to_string(),\n-                                    self_desc: if self_ty.has_concrete_skeleton() {\n-                                        Some(self_ty.to_string())\n-                                    } else {\n-                                        None\n-                                    },\n-                                }\n-                            });\n-\n-                            debug!(?cause, \"evaluate_stack: pushing cause\");\n-                            self.intercrate_ambiguity_causes.as_mut().unwrap().insert(cause);\n-                        }\n-                    }\n-                }\n-                return Ok(EvaluatedToAmbig);\n-            }\n-        }\n-\n         if unbound_input_types\n             && stack.iter().skip(1).any(|prev| {\n                 stack.obligation.param_env == prev.obligation.param_env"}]}