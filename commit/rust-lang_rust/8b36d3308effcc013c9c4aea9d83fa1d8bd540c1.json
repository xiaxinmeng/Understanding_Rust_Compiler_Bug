{"sha": "8b36d3308effcc013c9c4aea9d83fa1d8bd540c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMzZkMzMwOGVmZmNjMDEzYzljNGFlYTlkODNmYTFkOGJkNTQwYzE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-06-07T08:45:20Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-06-07T10:11:40Z"}, "message": "Allocate DefIndices for global crate metadata.\n\nThis allows for treating global crate metadata the same as regular metadata with regard to incr. comp.", "tree": {"sha": "91b415d64cbbb720a39a66d8ab477e2e7d2e6bfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91b415d64cbbb720a39a66d8ab477e2e7d2e6bfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1", "html_url": "https://github.com/rust-lang/rust/commit/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12e5b699a493e3d67698a9a42c82f686684c32af", "url": "https://api.github.com/repos/rust-lang/rust/commits/12e5b699a493e3d67698a9a42c82f686684c32af", "html_url": "https://github.com/rust-lang/rust/commit/12e5b699a493e3d67698a9a42c82f686684c32af"}], "stats": {"total": 278, "additions": 159, "deletions": 119}, "files": [{"sha": "1571cf344ede12ed57c174ac2bc4e0382217ae3a", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=8b36d3308effcc013c9c4aea9d83fa1d8bd540c1", "patch": "@@ -53,9 +53,6 @@ pub enum DepNode<D: Clone + Debug> {\n     /// in an extern crate.\n     MetaData(D),\n \n-    /// Represents some piece of metadata global to its crate.\n-    GlobalMetaData(D, GlobalMetaDataKind),\n-\n     /// Represents some artifact that we save to disk. Note that these\n     /// do not have a def-id as part of their identifier.\n     WorkProduct(WorkProductId),\n@@ -309,7 +306,6 @@ impl<D: Clone + Debug> DepNode<D> {\n             ItemBodyNestedBodies(ref d) => op(d).map(ItemBodyNestedBodies),\n             ConstIsRvaluePromotableToStatic(ref d) => op(d).map(ConstIsRvaluePromotableToStatic),\n             IsMirAvailable(ref d) => op(d).map(IsMirAvailable),\n-            GlobalMetaData(ref d, kind) => op(d).map(|d| GlobalMetaData(d, kind)),\n         }\n     }\n }\n@@ -330,16 +326,3 @@ impl WorkProductId {\n         WorkProductId(hasher.finish())\n     }\n }\n-\n-#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n-pub enum GlobalMetaDataKind {\n-    Krate,\n-    CrateDeps,\n-    DylibDependencyFormats,\n-    LangItems,\n-    LangItemsMissing,\n-    NativeLibraries,\n-    CodeMap,\n-    Impls,\n-    ExportedSymbols,\n-}"}, {"sha": "809bed939f54ca4bcb78e102d33077f0ba4499f7", "filename": "src/librustc/dep_graph/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fmod.rs?ref=8b36d3308effcc013c9c4aea9d83fa1d8bd540c1", "patch": "@@ -22,7 +22,6 @@ mod thread;\n pub use self::dep_tracking_map::{DepTrackingMap, DepTrackingMapConfig};\n pub use self::dep_node::DepNode;\n pub use self::dep_node::WorkProductId;\n-pub use self::dep_node::GlobalMetaDataKind;\n pub use self::graph::DepGraph;\n pub use self::graph::WorkProduct;\n pub use self::query::DepGraphQuery;"}, {"sha": "ae43035f3b2e606eea036d783c43aa6d6f563861", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 106, "deletions": 12, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=8b36d3308effcc013c9c4aea9d83fa1d8bd540c1", "patch": "@@ -15,7 +15,8 @@\n //! expressions) that are mostly just leftovers.\n \n use hir;\n-use hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE, DefIndexAddressSpace};\n+use hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE, DefIndexAddressSpace,\n+                  CRATE_DEF_INDEX};\n use ich::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::IndexVec;\n@@ -396,6 +397,11 @@ pub enum DefPathData {\n     ImplTrait,\n     /// A `typeof` type node.\n     Typeof,\n+\n+    /// GlobalMetaData identifies a piece of crate metadata that is global to\n+    /// a whole crate (as opposed to just one item). GlobalMetaData components\n+    /// are only supposed to show up right below the crate root.\n+    GlobalMetaData(Ident)\n }\n \n #[derive(Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord, Debug,\n@@ -427,8 +433,8 @@ impl Definitions {\n \n     /// Get the number of definitions.\n     pub fn def_index_counts_lo_hi(&self) -> (usize, usize) {\n-        (self.def_index_to_node[DefIndexAddressSpace::Low.index()].len(),\n-         self.def_index_to_node[DefIndexAddressSpace::High.index()].len())\n+        (self.table.index_to_key[DefIndexAddressSpace::Low.index()].len(),\n+         self.table.index_to_key[DefIndexAddressSpace::High.index()].len())\n     }\n \n     pub fn def_key(&self, index: DefIndex) -> DefKey {\n@@ -469,7 +475,12 @@ impl Definitions {\n         if def_id.krate == LOCAL_CRATE {\n             let space_index = def_id.index.address_space().index();\n             let array_index = def_id.index.as_array_index();\n-            Some(self.def_index_to_node[space_index][array_index])\n+            let node_id = self.def_index_to_node[space_index][array_index];\n+            if node_id != ast::DUMMY_NODE_ID {\n+                Some(node_id)\n+            } else {\n+                None\n+            }\n         } else {\n             None\n         }\n@@ -498,12 +509,16 @@ impl Definitions {\n \n         // Create the definition.\n         let address_space = super::ITEM_LIKE_SPACE;\n-        let index = self.table.allocate(key, def_path_hash, address_space);\n+        let root_index = self.table.allocate(key, def_path_hash, address_space);\n+        assert_eq!(root_index, CRATE_DEF_INDEX);\n         assert!(self.def_index_to_node[address_space.index()].is_empty());\n         self.def_index_to_node[address_space.index()].push(ast::CRATE_NODE_ID);\n-        self.node_to_def_index.insert(ast::CRATE_NODE_ID, index);\n+        self.node_to_def_index.insert(ast::CRATE_NODE_ID, root_index);\n \n-        index\n+        // Allocate some other DefIndices that always must exist.\n+        GlobalMetaDataKind::allocate_def_indices(self);\n+\n+        root_index\n     }\n \n     /// Add a definition with a parent definition.\n@@ -550,13 +565,19 @@ impl Definitions {\n         assert_eq!(index.as_array_index(),\n                    self.def_index_to_node[address_space.index()].len());\n         self.def_index_to_node[address_space.index()].push(node_id);\n+\n+        // Some things for which we allocate DefIndices don't correspond to\n+        // anything in the AST, so they don't have a NodeId. For these cases\n+        // we don't need a mapping from NodeId to DefIndex.\n+        if node_id != ast::DUMMY_NODE_ID {\n+            debug!(\"create_def_with_parent: def_index_to_node[{:?} <-> {:?}\", index, node_id);\n+            self.node_to_def_index.insert(node_id, index);\n+        }\n+\n         if expansion.is_modern() {\n             self.expansions.insert(index, expansion);\n         }\n \n-        debug!(\"create_def_with_parent: def_index_to_node[{:?} <-> {:?}\", index, node_id);\n-        self.node_to_def_index.insert(node_id, index);\n-\n         index\n     }\n \n@@ -594,7 +615,8 @@ impl DefPathData {\n             LifetimeDef(ident) |\n             EnumVariant(ident) |\n             Binding(ident) |\n-            Field(ident) => Some(ident),\n+            Field(ident) |\n+            GlobalMetaData(ident) => Some(ident),\n \n             Impl |\n             CrateRoot |\n@@ -622,7 +644,8 @@ impl DefPathData {\n             LifetimeDef(ident) |\n             EnumVariant(ident) |\n             Binding(ident) |\n-            Field(ident) => {\n+            Field(ident) |\n+            GlobalMetaData(ident) => {\n                 return ident.name.as_str();\n             }\n \n@@ -667,3 +690,74 @@ impl ::std::hash::Hash for DefPathData {\n         }\n     }\n }\n+\n+\n+// We define the GlobalMetaDataKind enum with this macro because we want to\n+// make sure that we exhaustively iterate over all variants when registering\n+// the corresponding DefIndices in the DefTable.\n+macro_rules! define_global_metadata_kind {\n+    (pub enum GlobalMetaDataKind {\n+        $($variant:ident),*\n+    }) => (\n+        #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash,\n+                 RustcEncodable, RustcDecodable)]\n+        pub enum GlobalMetaDataKind {\n+            $($variant),*\n+        }\n+\n+        impl GlobalMetaDataKind {\n+            fn allocate_def_indices(definitions: &mut Definitions) {\n+                $({\n+                    let instance = GlobalMetaDataKind::$variant;\n+                    definitions.create_def_with_parent(\n+                        CRATE_DEF_INDEX,\n+                        ast::DUMMY_NODE_ID,\n+                        DefPathData::GlobalMetaData(instance.ident()),\n+                        DefIndexAddressSpace::High,\n+                        Mark::root()\n+                    );\n+\n+                    // Make sure calling def_index does not crash.\n+                    instance.def_index(&definitions.table);\n+                })*\n+            }\n+\n+            pub fn def_index(&self, def_path_table: &DefPathTable) -> DefIndex {\n+                let def_key = DefKey {\n+                    parent: Some(CRATE_DEF_INDEX),\n+                    disambiguated_data: DisambiguatedDefPathData {\n+                        data: DefPathData::GlobalMetaData(self.ident()),\n+                        disambiguator: 0,\n+                    }\n+                };\n+\n+                def_path_table.key_to_index[&def_key]\n+            }\n+\n+            fn ident(&self) -> Ident {\n+\n+                let string = match *self {\n+                    $(\n+                        GlobalMetaDataKind::$variant => {\n+                            concat!(\"{{GlobalMetaData::\", stringify!($variant), \"}}\")\n+                        }\n+                    )*\n+                };\n+\n+                Ident::from_str(string)\n+            }\n+        }\n+    )\n+}\n+\n+define_global_metadata_kind!(pub enum GlobalMetaDataKind {\n+    Krate,\n+    CrateDeps,\n+    DylibDependencyFormats,\n+    LangItems,\n+    LangItemsMissing,\n+    NativeLibraries,\n+    CodeMap,\n+    Impls,\n+    ExportedSymbols\n+});"}, {"sha": "57b8c7f8c16b1570e9d1479926e88a994434d957", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=8b36d3308effcc013c9c4aea9d83fa1d8bd540c1", "patch": "@@ -23,7 +23,6 @@\n // probably get a better home if someone can find one.\n \n use hir::def;\n-use dep_graph::DepNode;\n use hir::def_id::{CrateNum, DefId, DefIndex};\n use hir::map as hir_map;\n use hir::map::definitions::{Definitions, DefKey, DisambiguatedDefPathData,\n@@ -190,15 +189,14 @@ pub struct EncodedMetadataHash {\n /// upstream crate.\n #[derive(Debug, RustcEncodable, RustcDecodable, Clone)]\n pub struct EncodedMetadataHashes {\n-    pub entry_hashes: Vec<EncodedMetadataHash>,\n-    pub global_hashes: Vec<(DepNode<()>, ich::Fingerprint)>,\n+    // Stable content hashes for things in crate metadata, indexed by DefIndex.\n+    pub hashes: Vec<EncodedMetadataHash>,\n }\n \n impl EncodedMetadataHashes {\n     pub fn new() -> EncodedMetadataHashes {\n         EncodedMetadataHashes {\n-            entry_hashes: Vec::new(),\n-            global_hashes: Vec::new(),\n+            hashes: Vec::new(),\n         }\n     }\n }"}, {"sha": "503177e437bef8eede30be36197d74dbd479d636", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=8b36d3308effcc013c9c4aea9d83fa1d8bd540c1", "patch": "@@ -197,7 +197,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             data @ DefPathData::ClosureExpr |\n             data @ DefPathData::Binding(..) |\n             data @ DefPathData::ImplTrait |\n-            data @ DefPathData::Typeof => {\n+            data @ DefPathData::Typeof |\n+            data @ DefPathData::GlobalMetaData(..) => {\n                 let parent_def_id = self.parent_def_id(def_id).unwrap();\n                 self.push_item_path(buffer, parent_def_id);\n                 buffer.push(&data.as_interned_str());"}, {"sha": "96b7de94daf65ba80c23b143b4050fafa862b78b", "filename": "src/librustc_incremental/persist/data.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/src%2Flibrustc_incremental%2Fpersist%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/src%2Flibrustc_incremental%2Fpersist%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdata.rs?ref=8b36d3308effcc013c9c4aea9d83fa1d8bd540c1", "patch": "@@ -126,10 +126,6 @@ pub struct SerializedMetadataHashes {\n     /// (matching the one found in this structure).\n     pub entry_hashes: Vec<EncodedMetadataHash>,\n \n-    /// This map contains fingerprints that are not specific to some DefId but\n-    /// describe something global to the whole crate.\n-    pub global_hashes: Vec<(DepNode<()>, Fingerprint)>,\n-\n     /// For each DefIndex (as it occurs in SerializedMetadataHash), this\n     /// map stores the DefPathIndex (as it occurs in DefIdDirectory), so\n     /// that we can find the new DefId for a SerializedMetadataHash in a"}, {"sha": "4a2dd274aae52c00a87af425ae78529a0c0bb2fb", "filename": "src/librustc_incremental/persist/hash.rs", "status": "modified", "additions": 6, "deletions": 31, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs?ref=8b36d3308effcc013c9c4aea9d83fa1d8bd540c1", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use rustc::dep_graph::DepNode;\n-use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE, CRATE_DEF_INDEX};\n+use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::hir::svh::Svh;\n use rustc::ich::Fingerprint;\n use rustc::ty::TyCtxt;\n@@ -29,9 +29,8 @@ use std::fmt::Debug;\n pub struct HashContext<'a, 'tcx: 'a> {\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     incremental_hashes_map: &'a IncrementalHashesMap,\n-    item_metadata_hashes: FxHashMap<DefId, Fingerprint>,\n+    metadata_hashes: FxHashMap<DefId, Fingerprint>,\n     crate_hashes: FxHashMap<CrateNum, Svh>,\n-    global_metadata_hashes: FxHashMap<DepNode<DefId>, Fingerprint>,\n }\n \n impl<'a, 'tcx> HashContext<'a, 'tcx> {\n@@ -41,9 +40,8 @@ impl<'a, 'tcx> HashContext<'a, 'tcx> {\n         HashContext {\n             tcx: tcx,\n             incremental_hashes_map: incremental_hashes_map,\n-            item_metadata_hashes: FxHashMap(),\n+            metadata_hashes: FxHashMap(),\n             crate_hashes: FxHashMap(),\n-            global_metadata_hashes: FxHashMap(),\n         }\n     }\n \n@@ -53,8 +51,7 @@ impl<'a, 'tcx> HashContext<'a, 'tcx> {\n             DepNode::Hir(_) |\n             DepNode::HirBody(_) =>\n                 true,\n-            DepNode::MetaData(def_id) |\n-            DepNode::GlobalMetaData(def_id, _) => !def_id.is_local(),\n+            DepNode::MetaData(def_id) => !def_id.is_local(),\n             _ => false,\n         }\n     }\n@@ -83,13 +80,7 @@ impl<'a, 'tcx> HashContext<'a, 'tcx> {\n             DepNode::MetaData(def_id) if !def_id.is_local() => {\n                 Some(self.metadata_hash(def_id,\n                                         def_id.krate,\n-                                        |this| &mut this.item_metadata_hashes))\n-            }\n-\n-            DepNode::GlobalMetaData(def_id, kind) => {\n-                Some(self.metadata_hash(DepNode::GlobalMetaData(def_id, kind),\n-                                        def_id.krate,\n-                                        |this| &mut this.global_metadata_hashes))\n+                                        |this| &mut this.metadata_hashes))\n             }\n \n             _ => {\n@@ -217,27 +208,11 @@ impl<'a, 'tcx> HashContext<'a, 'tcx> {\n             let def_id = DefId { krate: cnum, index: serialized_hash.def_index };\n \n             // record the hash for this dep-node\n-            let old = self.item_metadata_hashes.insert(def_id, serialized_hash.hash);\n+            let old = self.metadata_hashes.insert(def_id, serialized_hash.hash);\n             debug!(\"load_from_data: def_id={:?} hash={}\", def_id, serialized_hash.hash);\n             assert!(old.is_none(), \"already have hash for {:?}\", def_id);\n         }\n \n-        for (dep_node, fingerprint) in serialized_hashes.global_hashes {\n-            // Here we need to remap the CrateNum in the DepNode.\n-            let def_id = DefId { krate: cnum, index: CRATE_DEF_INDEX };\n-            let dep_node = match dep_node {\n-                DepNode::GlobalMetaData(_, kind) => DepNode::GlobalMetaData(def_id, kind),\n-                other => {\n-                    bug!(\"unexpected DepNode variant: {:?}\", other)\n-                }\n-            };\n-\n-            // record the hash for this dep-node\n-            debug!(\"load_from_data: def_node={:?} hash={}\", dep_node, fingerprint);\n-            let old = self.global_metadata_hashes.insert(dep_node.clone(), fingerprint);\n-            assert!(old.is_none(), \"already have hash for {:?}\", dep_node);\n-        }\n-\n         Ok(())\n     }\n }"}, {"sha": "01db756f9de042557c6dee7ee8dbb8717f209646", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=8b36d3308effcc013c9c4aea9d83fa1d8bd540c1", "patch": "@@ -255,9 +255,11 @@ pub fn encode_metadata_hashes(tcx: TyCtxt,\n                               current_metadata_hashes: &mut FxHashMap<DefId, Fingerprint>,\n                               encoder: &mut Encoder)\n                               -> io::Result<()> {\n+    assert_eq!(metadata_hashes.hashes.len(),\n+        metadata_hashes.hashes.iter().map(|x| (x.def_index, ())).collect::<FxHashMap<_,_>>().len());\n+\n     let mut serialized_hashes = SerializedMetadataHashes {\n-        entry_hashes: metadata_hashes.entry_hashes.to_vec(),\n-        global_hashes: metadata_hashes.global_hashes.to_vec(),\n+        entry_hashes: metadata_hashes.hashes.to_vec(),\n         index_map: FxHashMap()\n     };\n "}, {"sha": "c1b57a543a40dc69174c9743d53f1d9e9730d9e2", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=8b36d3308effcc013c9c4aea9d83fa1d8bd540c1", "patch": "@@ -14,8 +14,7 @@ use cstore::{self, CStore, CrateSource, MetadataBlob};\n use locator::{self, CratePaths};\n use schema::{CrateRoot, Tracked};\n \n-use rustc::dep_graph::{DepNode, GlobalMetaDataKind};\n-use rustc::hir::def_id::{DefId, CrateNum, DefIndex, CRATE_DEF_INDEX};\n+use rustc::hir::def_id::{CrateNum, DefIndex};\n use rustc::hir::svh::Svh;\n use rustc::middle::cstore::DepKind;\n use rustc::session::Session;\n@@ -516,14 +515,11 @@ impl<'a> CrateLoader<'a> {\n             return cstore::CrateNumMap::new();\n         }\n \n-        let dep_node = DepNode::GlobalMetaData(DefId { krate, index: CRATE_DEF_INDEX },\n-                                               GlobalMetaDataKind::CrateDeps);\n-\n         // The map from crate numbers in the crate we're resolving to local crate numbers.\n         // We map 0 and all other holes in the map to our parent crate. The \"additional\"\n         // self-dependencies should be harmless.\n         ::std::iter::once(krate).chain(crate_root.crate_deps\n-                                                 .get(&self.sess.dep_graph, dep_node)\n+                                                 .get_untracked()\n                                                  .decode(metadata)\n                                                  .map(|dep| {\n             debug!(\"resolving dep crate {} hash: `{}`\", dep.name, dep.hash);"}, {"sha": "ed67616e58f64fb8253264e79191eacd6c196f3e", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=8b36d3308effcc013c9c4aea9d83fa1d8bd540c1", "patch": "@@ -13,9 +13,9 @@\n \n use schema::{self, Tracked};\n \n-use rustc::dep_graph::{DepGraph, DepNode, GlobalMetaDataKind};\n+use rustc::dep_graph::DepGraph;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, CrateNum, DefIndex, DefId};\n-use rustc::hir::map::definitions::DefPathTable;\n+use rustc::hir::map::definitions::{DefPathTable, GlobalMetaDataKind};\n use rustc::hir::svh::Svh;\n use rustc::middle::cstore::{DepKind, ExternCrate, MetadataLoader};\n use rustc_back::PanicStrategy;\n@@ -304,12 +304,7 @@ impl CrateMetadata {\n     }\n \n     pub fn panic_strategy(&self, dep_graph: &DepGraph) -> PanicStrategy {\n-        let def_id = DefId {\n-            krate: self.cnum,\n-            index: CRATE_DEF_INDEX,\n-        };\n-        let dep_node = DepNode::GlobalMetaData(def_id, GlobalMetaDataKind::Krate);\n-\n+        let dep_node = self.metadata_dep_node(GlobalMetaDataKind::Krate);\n         self.root\n             .panic_strategy\n             .get(dep_graph, dep_node)"}, {"sha": "60cc03f7b792956b6068596b53f416961fcd5bc3", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=8b36d3308effcc013c9c4aea9d83fa1d8bd540c1", "patch": "@@ -23,9 +23,9 @@ use rustc::ty::{self, TyCtxt};\n use rustc::ty::maps::Providers;\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n \n-use rustc::dep_graph::{DepNode, GlobalMetaDataKind};\n+use rustc::dep_graph::{DepNode};\n use rustc::hir::map::{DefKey, DefPath, DisambiguatedDefPathData, DefPathHash};\n-use rustc::hir::map::definitions::DefPathTable;\n+use rustc::hir::map::definitions::{DefPathTable, GlobalMetaDataKind};\n use rustc::util::nodemap::{NodeSet, DefIdMap};\n use rustc_back::PanicStrategy;\n "}, {"sha": "a095fdd508417423506cc43c117de5e09b2ce424", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=8b36d3308effcc013c9c4aea9d83fa1d8bd540c1", "patch": "@@ -13,8 +13,9 @@\n use cstore::{self, CrateMetadata, MetadataBlob, NativeLibrary};\n use schema::*;\n \n-use rustc::dep_graph::{DepGraph, DepNode, GlobalMetaDataKind};\n+use rustc::dep_graph::{DepGraph, DepNode};\n use rustc::hir::map::{DefKey, DefPath, DefPathData, DefPathHash};\n+use rustc::hir::map::definitions::GlobalMetaDataKind;\n use rustc::hir;\n \n use rustc::middle::cstore::LinkagePreference;\n@@ -993,12 +994,8 @@ impl<'a, 'tcx> CrateMetadata {\n     pub fn get_dylib_dependency_formats(&self,\n                                         dep_graph: &DepGraph)\n                                         -> Vec<(CrateNum, LinkagePreference)> {\n-        let def_id = DefId {\n-            krate: self.cnum,\n-            index: CRATE_DEF_INDEX,\n-        };\n-        let dep_node = DepNode::GlobalMetaData(def_id,\n-                                               GlobalMetaDataKind::DylibDependencyFormats);\n+        let dep_node =\n+            self.metadata_dep_node(GlobalMetaDataKind::DylibDependencyFormats);\n         self.root\n             .dylib_dependency_formats\n             .get(dep_graph, dep_node)\n@@ -1198,11 +1195,7 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     pub fn metadata_dep_node(&self, kind: GlobalMetaDataKind) -> DepNode<DefId> {\n-        let def_id = DefId {\n-            krate: self.cnum,\n-            index: CRATE_DEF_INDEX,\n-        };\n-\n-        DepNode::GlobalMetaData(def_id, kind)\n+        let def_index = kind.def_index(&self.def_path_table);\n+        DepNode::MetaData(self.local_def_id(def_index))\n     }\n }"}, {"sha": "2a504c4c07794ed25114833a5d67895a67befebc", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=8b36d3308effcc013c9c4aea9d83fa1d8bd540c1", "patch": "@@ -14,10 +14,10 @@ use isolated_encoder::IsolatedEncoder;\n use schema::*;\n \n use rustc::middle::cstore::{LinkMeta, LinkagePreference, NativeLibrary,\n-                            EncodedMetadata, EncodedMetadataHashes};\n+                            EncodedMetadata, EncodedMetadataHashes,\n+                            EncodedMetadataHash};\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefIndex, DefId, LOCAL_CRATE};\n-use rustc::hir::map::definitions::DefPathTable;\n-use rustc::dep_graph::{DepNode, GlobalMetaDataKind};\n+use rustc::hir::map::definitions::{DefPathTable, GlobalMetaDataKind};\n use rustc::ich::Fingerprint;\n use rustc::middle::dependency_format::Linkage;\n use rustc::middle::lang_items;\n@@ -244,7 +244,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     // Encodes something that corresponds to a single DepNode::GlobalMetaData\n     // and registers the Fingerprint in the `metadata_hashes` map.\n     pub fn tracked<'x, DATA, R>(&'x mut self,\n-                                dep_node: DepNode<()>,\n+                                def_index: DefIndex,\n                                 op: fn(&mut IsolatedEncoder<'x, 'a, 'tcx>, DATA) -> R,\n                                 data: DATA)\n                                 -> Tracked<R> {\n@@ -253,7 +253,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let (fingerprint, this) = entry_builder.finish();\n \n         if let Some(fingerprint) = fingerprint {\n-            this.metadata_hashes.global_hashes.push((dep_node, fingerprint));\n+            this.metadata_hashes.hashes.push(EncodedMetadataHash {\n+                def_index,\n+                hash: fingerprint,\n+            })\n         }\n \n         Tracked::new(ret)\n@@ -322,33 +325,38 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     fn encode_crate_root(&mut self) -> Lazy<CrateRoot> {\n         let mut i = self.position();\n \n+        let tcx = self.tcx;\n+        let global_metadata_def_index = move |kind: GlobalMetaDataKind| {\n+            kind.def_index(tcx.hir.definitions().def_path_table())\n+        };\n+\n         let crate_deps = self.tracked(\n-            DepNode::GlobalMetaData((), GlobalMetaDataKind::CrateDeps),\n+            global_metadata_def_index(GlobalMetaDataKind::CrateDeps),\n             IsolatedEncoder::encode_crate_deps,\n             ());\n         let dylib_dependency_formats = self.tracked(\n-            DepNode::GlobalMetaData((), GlobalMetaDataKind::DylibDependencyFormats),\n+            global_metadata_def_index(GlobalMetaDataKind::DylibDependencyFormats),\n             IsolatedEncoder::encode_dylib_dependency_formats,\n             ());\n         let dep_bytes = self.position() - i;\n \n         // Encode the language items.\n         i = self.position();\n         let lang_items = self.tracked(\n-            DepNode::GlobalMetaData((), GlobalMetaDataKind::LangItems),\n+            global_metadata_def_index(GlobalMetaDataKind::LangItems),\n             IsolatedEncoder::encode_lang_items,\n             ());\n \n         let lang_items_missing = self.tracked(\n-            DepNode::GlobalMetaData((), GlobalMetaDataKind::LangItemsMissing),\n+            global_metadata_def_index(GlobalMetaDataKind::LangItemsMissing),\n             IsolatedEncoder::encode_lang_items_missing,\n             ());\n         let lang_item_bytes = self.position() - i;\n \n         // Encode the native libraries used\n         i = self.position();\n         let native_libraries = self.tracked(\n-            DepNode::GlobalMetaData((), GlobalMetaDataKind::NativeLibraries),\n+            global_metadata_def_index(GlobalMetaDataKind::NativeLibraries),\n             IsolatedEncoder::encode_native_libraries,\n             ());\n         let native_lib_bytes = self.position() - i;\n@@ -366,15 +374,15 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         // Encode the def IDs of impls, for coherence checking.\n         i = self.position();\n         let impls = self.tracked(\n-            DepNode::GlobalMetaData((), GlobalMetaDataKind::Impls),\n+            global_metadata_def_index(GlobalMetaDataKind::Impls),\n             IsolatedEncoder::encode_impls,\n             ());\n         let impl_bytes = self.position() - i;\n \n         // Encode exported symbols info.\n         i = self.position();\n         let exported_symbols = self.tracked(\n-            DepNode::GlobalMetaData((), GlobalMetaDataKind::ExportedSymbols),\n+            global_metadata_def_index(GlobalMetaDataKind::ExportedSymbols),\n             IsolatedEncoder::encode_exported_symbols,\n             self.exported_symbols);\n         let exported_symbols_bytes = self.position() - i;\n@@ -422,10 +430,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         let total_bytes = self.position();\n \n-        self.metadata_hashes.global_hashes.push((\n-            DepNode::GlobalMetaData((), GlobalMetaDataKind::Krate),\n-            Fingerprint::from_smaller_hash(link_meta.crate_hash.as_u64())\n-        ));\n+        self.metadata_hashes.hashes.push(EncodedMetadataHash {\n+            def_index: global_metadata_def_index(GlobalMetaDataKind::Krate),\n+            hash: Fingerprint::from_smaller_hash(link_meta.crate_hash.as_u64())\n+        });\n \n         if self.tcx.sess.meta_stats() {\n             let mut zero_bytes = 0;"}, {"sha": "2db9c6a4ff811f76df11e4c6f23e71cbc8a8245b", "filename": "src/librustc_metadata/index_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/src%2Flibrustc_metadata%2Findex_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b36d3308effcc013c9c4aea9d83fa1d8bd540c1/src%2Flibrustc_metadata%2Findex_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex_builder.rs?ref=8b36d3308effcc013c9c4aea9d83fa1d8bd540c1", "patch": "@@ -135,7 +135,7 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n \n         let (fingerprint, ecx) = entry_builder.finish();\n         if let Some(hash) = fingerprint {\n-            ecx.metadata_hashes.entry_hashes.push(EncodedMetadataHash {\n+            ecx.metadata_hashes.hashes.push(EncodedMetadataHash {\n                 def_index: id.index,\n                 hash: hash,\n             });"}]}