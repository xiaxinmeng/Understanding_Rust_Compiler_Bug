{"sha": "55f06883b83bb652d7a8f036c15136abeb933048", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1ZjA2ODgzYjgzYmI2NTJkN2E4ZjAzNmMxNTEzNmFiZWI5MzMwNDg=", "commit": {"author": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-07-06T16:08:16Z"}, "committer": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-07-14T11:57:46Z"}, "message": "Remove emit from emitter, leaving emit_struct", "tree": {"sha": "910d93e4b74a1265957a19bb46134b0a56b3f501", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/910d93e4b74a1265957a19bb46134b0a56b3f501"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55f06883b83bb652d7a8f036c15136abeb933048", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55f06883b83bb652d7a8f036c15136abeb933048", "html_url": "https://github.com/rust-lang/rust/commit/55f06883b83bb652d7a8f036c15136abeb933048", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55f06883b83bb652d7a8f036c15136abeb933048/comments", "author": null, "committer": null, "parents": [{"sha": "8f044fae36b73ec4593c127ec2a7c28716208591", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f044fae36b73ec4593c127ec2a7c28716208591", "html_url": "https://github.com/rust-lang/rust/commit/8f044fae36b73ec4593c127ec2a7c28716208591"}], "stats": {"total": 142, "additions": 71, "deletions": 71}, "files": [{"sha": "fa9bc7c83680c45009f1bf09f72685b38d7e1f09", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/55f06883b83bb652d7a8f036c15136abeb933048/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f06883b83bb652d7a8f036c15136abeb933048/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=55f06883b83bb652d7a8f036c15136abeb933048", "patch": "@@ -576,7 +576,7 @@ unsafe fn configure_llvm(sess: &Session) {\n }\n \n pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n-    let mut emitter: Box<Emitter> = match output {\n+    let emitter: Box<Emitter> = match output {\n         config::ErrorOutputType::HumanReadable(color_config) => {\n             Box::new(EmitterWriter::stderr(color_config,\n                                            None,\n@@ -585,12 +585,13 @@ pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n         }\n         config::ErrorOutputType::Json => Box::new(JsonEmitter::basic()),\n     };\n-    emitter.emit(&MultiSpan::new(), msg, None, errors::Level::Fatal);\n+    let handler = errors::Handler::with_emitter(true, false, emitter);\n+    handler.emit(&MultiSpan::new(), msg, errors::Level::Fatal);\n     panic!(errors::FatalError);\n }\n \n pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n-    let mut emitter: Box<Emitter> = match output {\n+    let emitter: Box<Emitter> = match output {\n         config::ErrorOutputType::HumanReadable(color_config) => {\n             Box::new(EmitterWriter::stderr(color_config,\n                                            None,\n@@ -599,7 +600,8 @@ pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n         }\n         config::ErrorOutputType::Json => Box::new(JsonEmitter::basic()),\n     };\n-    emitter.emit(&MultiSpan::new(), msg, None, errors::Level::Warning);\n+    let handler = errors::Handler::with_emitter(true, false, emitter);\n+    handler.emit(&MultiSpan::new(), msg, errors::Level::Warning);\n }\n \n // Err(0) means compilation was stopped, but no errors were found."}, {"sha": "0a8df923b846b90f2b4783a822fa7471f2497ef4", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/55f06883b83bb652d7a8f036c15136abeb933048/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f06883b83bb652d7a8f036c15136abeb933048/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=55f06883b83bb652d7a8f036c15136abeb933048", "patch": "@@ -139,13 +139,15 @@ pub fn run(args: Vec<String>) -> isize {\n                 match session {\n                     Some(sess) => sess.fatal(&abort_msg(err_count)),\n                     None => {\n-                        let mut emitter =\n+                        let emitter =\n                             errors::emitter::EmitterWriter::stderr(errors::ColorConfig::Auto,\n                                                                    None,\n                                                                    None,\n                                                                    FormatMode::EnvironmentSelected);\n-                        emitter.emit(&MultiSpan::new(), &abort_msg(err_count), None,\n-                            errors::Level::Fatal);\n+                        let handler = errors::Handler::with_emitter(true, false, Box::new(emitter));\n+                        handler.emit(&MultiSpan::new(),\n+                                     &abort_msg(err_count),\n+                                     errors::Level::Fatal);\n                         exit_on_err();\n                     }\n                 }\n@@ -377,7 +379,7 @@ fn handle_explain(code: &str,\n \n fn check_cfg(sopts: &config::Options,\n              output: ErrorOutputType) {\n-    let mut emitter: Box<Emitter> = match output {\n+    let emitter: Box<Emitter> = match output {\n         config::ErrorOutputType::HumanReadable(color_config) => {\n             Box::new(errors::emitter::EmitterWriter::stderr(color_config,\n                                                             None,\n@@ -386,17 +388,17 @@ fn check_cfg(sopts: &config::Options,\n         }\n         config::ErrorOutputType::Json => Box::new(json::JsonEmitter::basic()),\n     };\n+    let handler = errors::Handler::with_emitter(true, false, emitter);\n \n     let mut saw_invalid_predicate = false;\n     for item in sopts.cfg.iter() {\n         match item.node {\n             ast::MetaItemKind::List(ref pred, _) => {\n                 saw_invalid_predicate = true;\n-                emitter.emit(&MultiSpan::new(),\n+                handler.emit(&MultiSpan::new(),\n                              &format!(\"invalid predicate in --cfg command line argument: `{}`\",\n                                       pred),\n-                             None,\n-                             errors::Level::Fatal);\n+                                errors::Level::Fatal);\n             }\n             _ => {},\n         }\n@@ -1053,30 +1055,34 @@ pub fn monitor<F: FnOnce() + Send + 'static>(f: F) {\n      if let Err(value) = thread.unwrap().join() {\n         // Thread panicked without emitting a fatal diagnostic\n         if !value.is::<errors::FatalError>() {\n-            let mut emitter =\n-                errors::emitter::EmitterWriter::stderr(errors::ColorConfig::Auto,\n+            let emitter =\n+                Box::new(errors::emitter::EmitterWriter::stderr(errors::ColorConfig::Auto,\n                                                        None,\n                                                        None,\n-                                                       FormatMode::EnvironmentSelected);\n+                                                       FormatMode::EnvironmentSelected));\n+            let handler = errors::Handler::with_emitter(true, false, emitter);\n \n             // a .span_bug or .bug call has already printed what\n             // it wants to print.\n             if !value.is::<errors::ExplicitBug>() {\n-                emitter.emit(&MultiSpan::new(), \"unexpected panic\", None, errors::Level::Bug);\n+                handler.emit(&MultiSpan::new(),\n+                             \"unexpected panic\",\n+                             errors::Level::Bug);\n             }\n \n             let xs = [\"the compiler unexpectedly panicked. this is a bug.\".to_string(),\n                       format!(\"we would appreciate a bug report: {}\", BUG_REPORT_URL)];\n             for note in &xs {\n-                emitter.emit(&MultiSpan::new(), &note[..], None, errors::Level::Note)\n+                handler.emit(&MultiSpan::new(),\n+                             &note[..],\n+                             errors::Level::Note);\n             }\n             if match env::var_os(\"RUST_BACKTRACE\") {\n                 Some(val) => &val != \"0\",\n                 None => false,\n             } {\n-                emitter.emit(&MultiSpan::new(),\n+                handler.emit(&MultiSpan::new(),\n                              \"run with `RUST_BACKTRACE=1` for a backtrace\",\n-                             None,\n                              errors::Level::Note);\n             }\n "}, {"sha": "ab331239cdbaf0f859710c15ddeaba8e2cc1e2f1", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/55f06883b83bb652d7a8f036c15136abeb933048/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f06883b83bb652d7a8f036c15136abeb933048/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=55f06883b83bb652d7a8f036c15136abeb933048", "patch": "@@ -28,9 +28,6 @@ use term;\n /// Emitter trait for emitting errors. Do not implement this directly:\n /// implement `CoreEmitter` instead.\n pub trait Emitter {\n-    /// Emit a standalone diagnostic message.\n-    fn emit(&mut self, span: &MultiSpan, msg: &str, code: Option<&str>, lvl: Level);\n-\n     /// Emit a structured diagnostic.\n     fn emit_struct(&mut self, db: &DiagnosticBuilder);\n }\n@@ -46,19 +43,6 @@ pub trait CoreEmitter {\n }\n \n impl<T: CoreEmitter> Emitter for T {\n-    fn emit(&mut self,\n-            msp: &MultiSpan,\n-            msg: &str,\n-            code: Option<&str>,\n-            lvl: Level) {\n-        self.emit_message(&FullSpan(msp.clone()),\n-                          msg,\n-                          code,\n-                          lvl,\n-                          true,\n-                          true);\n-    }\n-\n     fn emit_struct(&mut self, db: &DiagnosticBuilder) {\n         let old_school = check_old_skool();\n         let db_span = FullSpan(db.span.clone());"}, {"sha": "e3e63341ee9065a47fe5352f164f836974a75dde", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 44, "deletions": 13, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/55f06883b83bb652d7a8f036c15136abeb933048/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f06883b83bb652d7a8f036c15136abeb933048/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=55f06883b83bb652d7a8f036c15136abeb933048", "patch": "@@ -359,11 +359,20 @@ impl<'a> DiagnosticBuilder<'a> {\n     fn new(handler: &'a Handler,\n            level: Level,\n            message: &str) -> DiagnosticBuilder<'a> {\n+        DiagnosticBuilder::new_with_code(handler, level, None, message)\n+    }\n+\n+    /// Convenience function for internal use, clients should use one of the\n+    /// struct_* methods on Handler.\n+    fn new_with_code(handler: &'a Handler,\n+           level: Level,\n+           code: Option<String>,\n+           message: &str) -> DiagnosticBuilder<'a> {\n         DiagnosticBuilder {\n             handler: handler,\n             level: level,\n             message: message.to_owned(),\n-            code: None,\n+            code: code,\n             span: MultiSpan::new(),\n             children: vec![],\n         }\n@@ -397,10 +406,10 @@ impl<'a> fmt::Debug for DiagnosticBuilder<'a> {\n impl<'a> Drop for DiagnosticBuilder<'a> {\n     fn drop(&mut self) {\n         if !panicking() && !self.cancelled() {\n-            self.handler.emit.borrow_mut().emit(&MultiSpan::new(),\n-                                                \"Error constructed but not emitted\",\n-                                                None,\n-                                                Bug);\n+            let mut db = DiagnosticBuilder::new(self.handler,\n+                                                Bug,\n+                                                \"Error constructed but not emitted\");\n+            db.emit();\n             panic!();\n         }\n     }\n@@ -588,7 +597,7 @@ impl Handler {\n         self.bump_err_count();\n     }\n     pub fn span_note_without_error<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n-        self.emit.borrow_mut().emit(&sp.into(), msg, None, Note);\n+        self.emit(&sp.into(), msg, Note);\n     }\n     pub fn span_unimpl<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! {\n         self.span_bug(sp, &format!(\"unimplemented {}\", msg));\n@@ -597,25 +606,40 @@ impl Handler {\n         if self.treat_err_as_bug {\n             self.bug(msg);\n         }\n-        self.emit.borrow_mut().emit(&MultiSpan::new(), msg, None, Fatal);\n+        let mut db = DiagnosticBuilder::new(self,\n+                                            Fatal,\n+                                            msg);\n+        db.emit();\n         self.bump_err_count();\n         FatalError\n     }\n     pub fn err(&self, msg: &str) {\n         if self.treat_err_as_bug {\n             self.bug(msg);\n         }\n-        self.emit.borrow_mut().emit(&MultiSpan::new(), msg, None, Error);\n+        let mut db = DiagnosticBuilder::new(self,\n+                                            Error,\n+                                            msg);\n+        db.emit();\n         self.bump_err_count();\n     }\n     pub fn warn(&self, msg: &str) {\n-        self.emit.borrow_mut().emit(&MultiSpan::new(), msg, None, Warning);\n+        let mut db = DiagnosticBuilder::new(self,\n+                                            Warning,\n+                                            msg);\n+        db.emit();\n     }\n     pub fn note_without_error(&self, msg: &str) {\n-        self.emit.borrow_mut().emit(&MultiSpan::new(), msg, None, Note);\n+        let mut db = DiagnosticBuilder::new(self,\n+                                            Note,\n+                                            msg);\n+        db.emit();\n     }\n     pub fn bug(&self, msg: &str) -> ! {\n-        self.emit.borrow_mut().emit(&MultiSpan::new(), msg, None, Bug);\n+        let mut db = DiagnosticBuilder::new(self,\n+                                            Bug,\n+                                            msg);\n+        db.emit();\n         panic!(ExplicitBug);\n     }\n     pub fn unimpl(&self, msg: &str) -> ! {\n@@ -661,7 +685,9 @@ impl Handler {\n                 msg: &str,\n                 lvl: Level) {\n         if lvl == Warning && !self.can_emit_warnings { return }\n-        self.emit.borrow_mut().emit(&msp, msg, None, lvl);\n+        let mut db = DiagnosticBuilder::new(self, lvl, msg);\n+        db.set_span(msp.clone());\n+        db.emit();\n         if !self.continue_after_error.get() { self.abort_if_errors(); }\n     }\n     pub fn emit_with_code(&self,\n@@ -670,7 +696,12 @@ impl Handler {\n                           code: &str,\n                           lvl: Level) {\n         if lvl == Warning && !self.can_emit_warnings { return }\n-        self.emit.borrow_mut().emit(&msp, msg, Some(code), lvl);\n+        let mut db = DiagnosticBuilder::new_with_code(self,\n+                                                      lvl,\n+                                                      Some(code.to_owned()),\n+                                                      msg);\n+        db.set_span(msp.clone());\n+        db.emit();\n         if !self.continue_after_error.get() { self.abort_if_errors(); }\n     }\n }"}, {"sha": "20908453e73e0ff2e7bdeaf8138a8189d5d4087b", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/55f06883b83bb652d7a8f036c15136abeb933048/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55f06883b83bb652d7a8f036c15136abeb933048/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=55f06883b83bb652d7a8f036c15136abeb933048", "patch": "@@ -22,7 +22,7 @@\n use codemap::CodeMap;\n use syntax_pos::{self, MacroBacktrace, Span, SpanLabel, MultiSpan};\n use errors::registry::Registry;\n-use errors::{Level, DiagnosticBuilder, SubDiagnostic, RenderSpan, CodeSuggestion, CodeMapper};\n+use errors::{DiagnosticBuilder, SubDiagnostic, RenderSpan, CodeSuggestion, CodeMapper};\n use errors::emitter::Emitter;\n \n use std::rc::Rc;\n@@ -53,13 +53,6 @@ impl JsonEmitter {\n }\n \n impl Emitter for JsonEmitter {\n-    fn emit(&mut self, span: &MultiSpan, msg: &str, code: Option<&str>, level: Level) {\n-        let data = Diagnostic::new(span, msg, code, level, self);\n-        if let Err(e) = writeln!(&mut self.dst, \"{}\", as_json(&data)) {\n-            panic!(\"failed to print diagnostics: {:?}\", e);\n-        }\n-    }\n-\n     fn emit_struct(&mut self, db: &DiagnosticBuilder) {\n         let data = Diagnostic::from_diagnostic_builder(db, self);\n         if let Err(e) = writeln!(&mut self.dst, \"{}\", as_json(&data)) {\n@@ -146,22 +139,6 @@ struct DiagnosticCode {\n }\n \n impl<'a> Diagnostic<'a> {\n-    fn new(msp: &MultiSpan,\n-           msg: &'a str,\n-           code: Option<&str>,\n-           level: Level,\n-           je: &JsonEmitter)\n-           -> Diagnostic<'a> {\n-        Diagnostic {\n-            message: msg,\n-            code: DiagnosticCode::map_opt_string(code.map(|c| c.to_owned()), je),\n-            level: level.to_str(),\n-            spans: DiagnosticSpan::from_multispan(msp, je),\n-            children: vec![],\n-            rendered: None,\n-        }\n-    }\n-\n     fn from_diagnostic_builder<'c>(db: &'c DiagnosticBuilder,\n                                    je: &JsonEmitter)\n                                    -> Diagnostic<'c> {"}]}