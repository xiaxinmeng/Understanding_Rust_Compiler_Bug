{"sha": "c0f19d70056fada5f381019694d893e0ffe8360a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZjE5ZDcwMDU2ZmFkYTVmMzgxMDE5Njk0ZDg5M2UwZmZlODM2MGE=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-18T19:49:56Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-18T19:49:56Z"}, "message": "Add expr, pat, ty and macro_stmts", "tree": {"sha": "4837619368155d49c7540f035c6eb76d8d50ea6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4837619368155d49c7540f035c6eb76d8d50ea6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0f19d70056fada5f381019694d893e0ffe8360a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0f19d70056fada5f381019694d893e0ffe8360a", "html_url": "https://github.com/rust-lang/rust/commit/c0f19d70056fada5f381019694d893e0ffe8360a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0f19d70056fada5f381019694d893e0ffe8360a/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ff5440a503f090032136c37c3d44375d6107db1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ff5440a503f090032136c37c3d44375d6107db1", "html_url": "https://github.com/rust-lang/rust/commit/3ff5440a503f090032136c37c3d44375d6107db1"}], "stats": {"total": 171, "additions": 156, "deletions": 15}, "files": [{"sha": "a29b07aba276d7993db6c0d5b2a79e63fbc0ce38", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c0f19d70056fada5f381019694d893e0ffe8360a/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0f19d70056fada5f381019694d893e0ffe8360a/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=c0f19d70056fada5f381019694d893e0ffe8360a", "patch": "@@ -44,7 +44,11 @@ pub use crate::syntax_bridge::{\n     ast_to_token_tree,\n     token_tree_to_ast_item_list,\n     syntax_node_to_token_tree,\n+    token_tree_to_expr,\n+    token_tree_to_pat,\n+    token_tree_to_ty,\n     token_tree_to_macro_items,\n+    token_tree_to_macro_stmts,\n };\n \n /// This struct contains AST for a single `macro_rules` definition. What might\n@@ -450,6 +454,59 @@ MACRO_ITEMS@[0; 40)\n         assert_expansion(&rules, \"foo! { foo, bar }\", \"fn foo () {let a = foo ; let b = bar ;}\");\n     }\n \n+    #[test]\n+    fn test_tt_to_stmts() {\n+        let rules = create_rules(\n+            r#\"\n+        macro_rules! foo {\n+            () => {\n+                 let a = 0;\n+                 a = 10 + 1;\n+                 a\n+            }\n+        }\n+\"#,\n+        );\n+\n+        let expanded = expand(&rules, \"foo!{}\");\n+        let stmts = token_tree_to_macro_stmts(&expanded);\n+\n+        assert_eq!(\n+            stmts.syntax().debug_dump().trim(),\n+            r#\"MACRO_STMTS@[0; 15)\n+  LET_STMT@[0; 7)\n+    LET_KW@[0; 3) \"let\"\n+    BIND_PAT@[3; 4)\n+      NAME@[3; 4)\n+        IDENT@[3; 4) \"a\"\n+    EQ@[4; 5) \"=\"\n+    LITERAL@[5; 6)\n+      INT_NUMBER@[5; 6) \"0\"\n+    SEMI@[6; 7) \";\"\n+  EXPR_STMT@[7; 14)\n+    BIN_EXPR@[7; 13)\n+      PATH_EXPR@[7; 8)\n+        PATH@[7; 8)\n+          PATH_SEGMENT@[7; 8)\n+            NAME_REF@[7; 8)\n+              IDENT@[7; 8) \"a\"\n+      EQ@[8; 9) \"=\"\n+      BIN_EXPR@[9; 13)\n+        LITERAL@[9; 11)\n+          INT_NUMBER@[9; 11) \"10\"\n+        PLUS@[11; 12) \"+\"\n+        LITERAL@[12; 13)\n+          INT_NUMBER@[12; 13) \"1\"\n+    SEMI@[13; 14) \";\"\n+  EXPR_STMT@[14; 15)\n+    PATH_EXPR@[14; 15)\n+      PATH@[14; 15)\n+        PATH_SEGMENT@[14; 15)\n+          NAME_REF@[14; 15)\n+            IDENT@[14; 15) \"a\"\"#,\n+        );\n+    }\n+\n     // The following tests are port from intellij-rust directly\n     // https://github.com/intellij-rust/intellij-rust/blob/c4e9feee4ad46e7953b1948c112533360b6087bb/src/test/kotlin/org/rust/lang/core/macros/RsMacroExpansionTest.kt\n "}, {"sha": "6af3b199583641f7d73aa2089ad41d9824c62887", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 41, "deletions": 5, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c0f19d70056fada5f381019694d893e0ffe8360a/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0f19d70056fada5f381019694d893e0ffe8360a/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=c0f19d70056fada5f381019694d893e0ffe8360a", "patch": "@@ -32,18 +32,54 @@ pub fn syntax_node_to_token_tree(node: &SyntaxNode) -> Option<(tt::Subtree, Toke\n \n // The following items are what `rustc` macro can be parsed into :\n // link: https://github.com/rust-lang/rust/blob/9ebf47851a357faa4cd97f4b1dc7835f6376e639/src/libsyntax/ext/expand.rs#L141\n-// * Expr(P<ast::Expr>)\n-// * Pat(P<ast::Pat>)\n-// * Ty(P<ast::Ty>)\n-// * Stmts(SmallVec<[ast::Stmt; 1]>)\n-// * Items(SmallVec<[P<ast::Item>; 1]>)\n+// * Expr(P<ast::Expr>)                     -> token_tree_to_expr\n+// * Pat(P<ast::Pat>)                       -> token_tree_to_pat\n+// * Ty(P<ast::Ty>)                         -> token_tree_to_ty\n+// * Stmts(SmallVec<[ast::Stmt; 1]>)        -> token_tree_to_stmts\n+// * Items(SmallVec<[P<ast::Item>; 1]>)     -> token_tree_to_items\n //\n // * TraitItems(SmallVec<[ast::TraitItem; 1]>)\n // * ImplItems(SmallVec<[ast::ImplItem; 1]>)\n // * ForeignItems(SmallVec<[ast::ForeignItem; 1]>\n //\n //\n \n+/// Parses the token tree (result of macro expansion) to an expression\n+pub fn token_tree_to_expr(tt: &tt::Subtree) -> TreeArc<ast::Expr> {\n+    let token_source = SubtreeTokenSource::new(tt);\n+    let mut tree_sink = TtTreeSink::new(token_source.querier());\n+    ra_parser::parse_expr(&token_source, &mut tree_sink);\n+    let syntax = tree_sink.inner.finish();\n+    ast::Expr::cast(&syntax).unwrap().to_owned()\n+}\n+\n+/// Parses the token tree (result of macro expansion) to a Pattern\n+pub fn token_tree_to_pat(tt: &tt::Subtree) -> TreeArc<ast::Pat> {\n+    let token_source = SubtreeTokenSource::new(tt);\n+    let mut tree_sink = TtTreeSink::new(token_source.querier());\n+    ra_parser::parse_pat(&token_source, &mut tree_sink);\n+    let syntax = tree_sink.inner.finish();\n+    ast::Pat::cast(&syntax).unwrap().to_owned()\n+}\n+\n+/// Parses the token tree (result of macro expansion) to a Type\n+pub fn token_tree_to_ty(tt: &tt::Subtree) -> TreeArc<ast::TypeRef> {\n+    let token_source = SubtreeTokenSource::new(tt);\n+    let mut tree_sink = TtTreeSink::new(token_source.querier());\n+    ra_parser::parse_ty(&token_source, &mut tree_sink);\n+    let syntax = tree_sink.inner.finish();\n+    ast::TypeRef::cast(&syntax).unwrap().to_owned()\n+}\n+\n+/// Parses the token tree (result of macro expansion) as a sequence of stmts\n+pub fn token_tree_to_macro_stmts(tt: &tt::Subtree) -> TreeArc<ast::MacroStmts> {\n+    let token_source = SubtreeTokenSource::new(tt);\n+    let mut tree_sink = TtTreeSink::new(token_source.querier());\n+    ra_parser::parse_macro_stmts(&token_source, &mut tree_sink);\n+    let syntax = tree_sink.inner.finish();\n+    ast::MacroStmts::cast(&syntax).unwrap().to_owned()\n+}\n+\n /// Parses the token tree (result of macro expansion) as a sequence of items\n pub fn token_tree_to_macro_items(tt: &tt::Subtree) -> TreeArc<ast::MacroItems> {\n     let token_source = SubtreeTokenSource::new(tt);"}, {"sha": "e1762633e4955767826d1b9e50c6c01375ce5aab", "filename": "crates/ra_parser/src/grammar.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c0f19d70056fada5f381019694d893e0ffe8360a/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0f19d70056fada5f381019694d893e0ffe8360a/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar.rs?ref=c0f19d70056fada5f381019694d893e0ffe8360a", "patch": "@@ -55,6 +55,21 @@ pub(crate) fn macro_items(p: &mut Parser) {\n     m.complete(p, MACRO_ITEMS);\n }\n \n+pub(crate) fn macro_stmts(p: &mut Parser) {\n+    let m = p.start();\n+\n+    while !p.at(EOF) {\n+        if p.current() == SEMI {\n+            p.bump();\n+            continue;\n+        }\n+\n+        expressions::stmt(p, expressions::StmtWithSemi::Optional);\n+    }\n+\n+    m.complete(p, MACRO_STMTS);\n+}\n+\n pub(crate) fn path(p: &mut Parser) {\n     paths::type_path(p);\n }\n@@ -72,6 +87,11 @@ pub(crate) fn pattern(p: &mut Parser) {\n }\n \n pub(crate) fn stmt(p: &mut Parser, with_semi: bool) {\n+    let with_semi = match with_semi {\n+        true => expressions::StmtWithSemi::Yes,\n+        false => expressions::StmtWithSemi::No,\n+    };\n+\n     expressions::stmt(p, with_semi)\n }\n "}, {"sha": "8df9035e9eb0a8ecce0a6296841d7a748c15ff69", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c0f19d70056fada5f381019694d893e0ffe8360a/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0f19d70056fada5f381019694d893e0ffe8360a/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=c0f19d70056fada5f381019694d893e0ffe8360a", "patch": "@@ -4,6 +4,12 @@ pub(crate) use self::atom::match_arm_list;\n pub(super) use self::atom::{literal, LITERAL_FIRST};\n use super::*;\n \n+pub(super) enum StmtWithSemi {\n+    Yes,\n+    No,\n+    Optional,\n+}\n+\n const EXPR_FIRST: TokenSet = LHS_FIRST;\n \n pub(super) fn expr(p: &mut Parser) -> BlockLike {\n@@ -48,7 +54,7 @@ fn is_expr_stmt_attr_allowed(kind: SyntaxKind) -> bool {\n     }\n }\n \n-pub(super) fn stmt(p: &mut Parser, with_semi: bool) {\n+pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi) {\n     // test block_items\n     // fn a() { fn b() {} }\n     let m = p.start();\n@@ -111,13 +117,23 @@ pub(super) fn stmt(p: &mut Parser, with_semi: bool) {\n         //     }\n         //     test!{}\n         // }\n-        if with_semi {\n-            if blocklike.is_block() {\n-                p.eat(SEMI);\n-            } else {\n-                p.expect(SEMI);\n+\n+        match with_semi {\n+            StmtWithSemi::Yes => {\n+                if blocklike.is_block() {\n+                    p.eat(SEMI);\n+                } else {\n+                    p.expect(SEMI);\n+                }\n+            }\n+            StmtWithSemi::No => {}\n+            StmtWithSemi::Optional => {\n+                if p.at(SEMI) {\n+                    p.eat(SEMI);\n+                }\n             }\n         }\n+\n         m.complete(p, EXPR_STMT);\n     }\n \n@@ -128,7 +144,7 @@ pub(super) fn stmt(p: &mut Parser, with_semi: bool) {\n     //     let c = 92;\n     //     let d: i32 = 92;\n     // }\n-    fn let_stmt(p: &mut Parser, m: Marker, with_semi: bool) {\n+    fn let_stmt(p: &mut Parser, m: Marker, with_semi: StmtWithSemi) {\n         assert!(p.at(LET_KW));\n         p.bump();\n         patterns::pattern(p);\n@@ -139,8 +155,16 @@ pub(super) fn stmt(p: &mut Parser, with_semi: bool) {\n             expressions::expr(p);\n         }\n \n-        if with_semi {\n-            p.expect(SEMI);\n+        match with_semi {\n+            StmtWithSemi::Yes => {\n+                p.expect(SEMI);\n+            }\n+            StmtWithSemi::No => {}\n+            StmtWithSemi::Optional => {\n+                if p.at(SEMI) {\n+                    p.eat(SEMI);\n+                }\n+            }\n         }\n         m.complete(p, LET_STMT);\n     }\n@@ -160,7 +184,7 @@ pub(crate) fn expr_block_contents(p: &mut Parser) {\n             continue;\n         }\n \n-        stmt(p, true)\n+        stmt(p, StmtWithSemi::Yes)\n     }\n }\n "}, {"sha": "0ea942b6e022c10da3e18ba2d084576b10a01638", "filename": "crates/ra_parser/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0f19d70056fada5f381019694d893e0ffe8360a/crates%2Fra_parser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0f19d70056fada5f381019694d893e0ffe8360a/crates%2Fra_parser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Flib.rs?ref=c0f19d70056fada5f381019694d893e0ffe8360a", "patch": "@@ -102,6 +102,10 @@ pub fn parse_macro_items(token_source: &dyn TokenSource, tree_sink: &mut dyn Tre\n     parse_from_tokens(token_source, tree_sink, grammar::macro_items);\n }\n \n+pub fn parse_macro_stmts(token_source: &dyn TokenSource, tree_sink: &mut dyn TreeSink) {\n+    parse_from_tokens(token_source, tree_sink, grammar::macro_stmts);\n+}\n+\n /// A parsing function for a specific braced-block.\n pub struct Reparser(fn(&mut parser::Parser));\n "}]}