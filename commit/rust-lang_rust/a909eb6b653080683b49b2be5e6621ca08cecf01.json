{"sha": "a909eb6b653080683b49b2be5e6621ca08cecf01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MDllYjZiNjUzMDgwNjgzYjQ5YjJiZTVlNjYyMWNhMDhjZWNmMDE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-15T08:50:54Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-15T11:06:47Z"}, "message": "improve naming", "tree": {"sha": "2effc1f6c9bfc48bbd3c664742768306cce76803", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2effc1f6c9bfc48bbd3c664742768306cce76803"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a909eb6b653080683b49b2be5e6621ca08cecf01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a909eb6b653080683b49b2be5e6621ca08cecf01", "html_url": "https://github.com/rust-lang/rust/commit/a909eb6b653080683b49b2be5e6621ca08cecf01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a909eb6b653080683b49b2be5e6621ca08cecf01/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "805c44d5d32d23e18d962f14e34869ddcef588fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/805c44d5d32d23e18d962f14e34869ddcef588fd", "html_url": "https://github.com/rust-lang/rust/commit/805c44d5d32d23e18d962f14e34869ddcef588fd"}], "stats": {"total": 344, "additions": 184, "deletions": 160}, "files": [{"sha": "00503a6992875f36b5e57efb7b8c116c3aeabb46", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -1536,7 +1536,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn const_eval_resolve(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n-        def: ty::WithOptParam<DefId>,\n+        def: ty::WithOptConstParam<DefId>,\n         substs: SubstsRef<'tcx>,\n         promoted: Option<mir::Promoted>,\n         span: Option<Span>,"}, {"sha": "4357f11776c367468612292cf58a3469a3c08aa6", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -892,7 +892,7 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n \n             if tcx.hir().body_const_context(def_id).is_some() {\n                 tcx.ensure()\n-                    .mir_drops_elaborated_and_const_checked(ty::WithOptParam::dummy(def_id));\n+                    .mir_drops_elaborated_and_const_checked(ty::WithOptConstParam::dummy(def_id));\n             }\n         }\n     });"}, {"sha": "0a9c2ac947574057edf4fbbcd30aa7fadc2537ee", "filename": "src/librustc_middle/mir/interpret/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fqueries.rs?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -34,7 +34,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn const_eval_resolve(\n         self,\n         param_env: ty::ParamEnv<'tcx>,\n-        def: ty::WithOptParam<DefId>,\n+        def: ty::WithOptConstParam<DefId>,\n         substs: SubstsRef<'tcx>,\n         promoted: Option<mir::Promoted>,\n         span: Option<Span>,"}, {"sha": "560a8421c17972cc1520fcba5ce382ae768b47f9", "filename": "src/librustc_middle/mir/query.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fquery.rs?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -328,17 +328,20 @@ pub struct CoverageInfo {\n impl<'tcx> TyCtxt<'tcx> {\n     pub fn mir_borrowck_opt_const_arg(\n         self,\n-        def: ty::WithOptParam<LocalDefId>,\n+        def: ty::WithOptConstParam<LocalDefId>,\n     ) -> &'tcx BorrowCheckResult<'tcx> {\n-        if let Some(param_did) = def.param_did {\n+        if let Some(param_did) = def.const_param_did {\n             self.mir_borrowck_const_arg((def.did, param_did))\n         } else {\n             self.mir_borrowck(def.did)\n         }\n     }\n \n-    pub fn mir_const_qualif_opt_const_arg(self, def: ty::WithOptParam<LocalDefId>) -> ConstQualifs {\n-        if let Some(param_did) = def.param_did {\n+    pub fn mir_const_qualif_opt_const_arg(\n+        self,\n+        def: ty::WithOptConstParam<LocalDefId>,\n+    ) -> ConstQualifs {\n+        if let Some(param_did) = def.const_param_did {\n             self.mir_const_qualif_const_arg((def.did, param_did))\n         } else {\n             self.mir_const_qualif(def.did)\n@@ -347,7 +350,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     pub fn promoted_mir_of_opt_const_arg(\n         self,\n-        def: ty::WithOptParam<DefId>,\n+        def: ty::WithOptConstParam<DefId>,\n     ) -> &'tcx IndexVec<Promoted, Body<'tcx>> {\n         if let Some((did, param_did)) = def.as_const_arg() {\n             self.promoted_mir_of_const_arg((did, param_did))"}, {"sha": "edeefab43421e1d3dadba7c8ba23a29da916e565", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -105,7 +105,7 @@ rustc_queries! {\n         /// ```\n         query opt_const_param_of(key: LocalDefId) -> Option<DefId> {\n             desc { |tcx| \"computing the optional const parameter of `{}`\", tcx.def_path_str(key.to_def_id()) }\n-            // FIXME: consider storing this query on disk.\n+            // FIXME(#74113): consider storing this query on disk.\n         }\n \n         /// Records the type of every item.\n@@ -219,39 +219,39 @@ rustc_queries! {\n \n         /// Fetch the MIR for a given `DefId` right after it's built - this includes\n         /// unreachable code.\n-        query mir_built(key: ty::WithOptParam<LocalDefId>) -> &'tcx Steal<mir::Body<'tcx>> {\n+        query mir_built(key: ty::WithOptConstParam<LocalDefId>) -> &'tcx Steal<mir::Body<'tcx>> {\n             desc { |tcx| \"building MIR for `{}`\", tcx.def_path_str(key.did.to_def_id()) }\n         }\n \n         /// Fetch the MIR for a given `DefId` up till the point where it is\n         /// ready for const qualification.\n         ///\n         /// See the README for the `mir` module for details.\n-        query mir_const(key: ty::WithOptParam<LocalDefId>) -> &'tcx Steal<mir::Body<'tcx>> {\n+        query mir_const(key: ty::WithOptConstParam<LocalDefId>) -> &'tcx Steal<mir::Body<'tcx>> {\n             desc {\n                 |tcx| \"processing MIR for {}`{}`\",\n-                if key.param_did.is_some() { \"the const argument \" } else { \"\" },\n+                if key.const_param_did.is_some() { \"the const argument \" } else { \"\" },\n                 tcx.def_path_str(key.did.to_def_id()),\n             }\n             no_hash\n         }\n \n         query mir_drops_elaborated_and_const_checked(\n-            key: ty::WithOptParam<LocalDefId>\n+            key: ty::WithOptConstParam<LocalDefId>\n         ) -> &'tcx Steal<mir::Body<'tcx>> {\n             no_hash\n             desc { |tcx| \"elaborating drops for `{}`\", tcx.def_path_str(key.did.to_def_id()) }\n         }\n \n-        query mir_validated(key: ty::WithOptParam<LocalDefId>) ->\n+        query mir_validated(key: ty::WithOptConstParam<LocalDefId>) ->\n             (\n                 &'tcx Steal<mir::Body<'tcx>>,\n                 &'tcx Steal<IndexVec<mir::Promoted, mir::Body<'tcx>>>\n             ) {\n             no_hash\n             desc {\n                 |tcx| \"processing {}`{}`\",\n-                if key.param_did.is_some() { \"the const argument \" } else { \"\" },\n+                if key.const_param_did.is_some() { \"the const argument \" } else { \"\" },\n                 tcx.def_path_str(key.did.to_def_id()),\n             }\n         }"}, {"sha": "bb5dd53a7e669d3f2bef99b5a11974eee7a89adc", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -982,9 +982,9 @@ pub struct GlobalCtxt<'tcx> {\n impl<'tcx> TyCtxt<'tcx> {\n     pub fn typeck_tables_of_opt_const_arg(\n         self,\n-        def: ty::WithOptParam<LocalDefId>,\n+        def: ty::WithOptConstParam<LocalDefId>,\n     ) -> &'tcx TypeckTables<'tcx> {\n-        if let Some(param_did) = def.param_did {\n+        if let Some(param_did) = def.const_param_did {\n             self.typeck_tables_of_const_arg((def.did, param_did))\n         } else {\n             self.typeck_tables_of(def.did)"}, {"sha": "114ce491f2780546ccb8778f6bf648a64ed26748", "filename": "src/librustc_middle/ty/instance.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_middle%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_middle%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Finstance.rs?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -29,7 +29,7 @@ pub enum InstanceDef<'tcx> {\n     /// - `fn` items\n     /// - closures\n     /// - generators\n-    Item(ty::WithOptParam<DefId>),\n+    Item(ty::WithOptConstParam<DefId>),\n \n     /// An intrinsic `fn` item (with `\"rust-intrinsic\"` or `\"platform-intrinsic\"` ABI).\n     ///\n@@ -186,7 +186,7 @@ impl<'tcx> InstanceDef<'tcx> {\n     }\n \n     #[inline]\n-    pub fn with_opt_param(self) -> ty::WithOptParam<DefId> {\n+    pub fn with_opt_param(self) -> ty::WithOptConstParam<DefId> {\n         match self {\n             InstanceDef::Item(def) => def,\n             InstanceDef::VtableShim(def_id)\n@@ -196,7 +196,7 @@ impl<'tcx> InstanceDef<'tcx> {\n             | InstanceDef::Intrinsic(def_id)\n             | InstanceDef::ClosureOnceShim { call_once: def_id }\n             | InstanceDef::DropGlue(def_id, _)\n-            | InstanceDef::CloneShim(def_id, _) => ty::WithOptParam::dummy(def_id),\n+            | InstanceDef::CloneShim(def_id, _) => ty::WithOptConstParam::dummy(def_id),\n         }\n     }\n \n@@ -298,7 +298,7 @@ impl<'tcx> Instance<'tcx> {\n             def_id,\n             substs\n         );\n-        Instance { def: InstanceDef::Item(ty::WithOptParam::dummy(def_id)), substs }\n+        Instance { def: InstanceDef::Item(ty::WithOptConstParam::dummy(def_id)), substs }\n     }\n \n     pub fn mono(tcx: TyCtxt<'tcx>, def_id: DefId) -> Instance<'tcx> {\n@@ -355,7 +355,7 @@ impl<'tcx> Instance<'tcx> {\n     pub fn resolve_const_arg(\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        def: ty::WithOptParam<DefId>,\n+        def: ty::WithOptConstParam<DefId>,\n         substs: SubstsRef<'tcx>,\n     ) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n         let substs = tcx.erase_regions(&substs);"}, {"sha": "35b3ad66f01317f38a06eede1509424b34868db3", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -1099,7 +1099,7 @@ pub enum PredicateKind<'tcx> {\n     Subtype(PolySubtypePredicate<'tcx>),\n \n     /// Constant initializer must evaluate successfully.\n-    ConstEvaluatable(ty::WithOptParam<DefId>, SubstsRef<'tcx>),\n+    ConstEvaluatable(ty::WithOptConstParam<DefId>, SubstsRef<'tcx>),\n \n     /// Constants must be equal. The first component is the const that is expected.\n     ConstEquate(&'tcx Const<'tcx>, &'tcx Const<'tcx>),\n@@ -1601,40 +1601,42 @@ pub type PlaceholderConst = Placeholder<BoundVar>;\n #[derive(Copy, Clone, Debug, TypeFoldable, Lift, RustcEncodable, RustcDecodable)]\n #[derive(PartialEq, Eq, PartialOrd, Ord)]\n #[derive(Hash, HashStable)]\n-pub struct WithOptParam<T> {\n+pub struct WithOptConstParam<T> {\n     pub did: T,\n     /// The `DefId` of the corresponding generic paramter in case `did` is\n     /// a const argument.\n     ///\n     /// Note that even if `did` is a const argument, this may still be `None`.\n-    /// All queries taking `WithOptParam` start by calling `tcx.opt_const_param_of(def.did)`\n+    /// All queries taking `WithOptConstParam` start by calling `tcx.opt_const_param_of(def.did)`\n     /// to potentially update `param_did` in case it `None`.\n-    pub param_did: Option<DefId>,\n+    pub const_param_did: Option<DefId>,\n }\n \n-impl<T> WithOptParam<T> {\n-    pub fn dummy(did: T) -> WithOptParam<T> {\n-        WithOptParam { did, param_did: None }\n+impl<T> WithOptConstParam<T> {\n+    pub fn dummy(did: T) -> WithOptConstParam<T> {\n+        WithOptConstParam { did, const_param_did: None }\n     }\n }\n \n-impl WithOptParam<LocalDefId> {\n-    pub fn to_global(self) -> WithOptParam<DefId> {\n-        WithOptParam { did: self.did.to_def_id(), param_did: self.param_did }\n+impl WithOptConstParam<LocalDefId> {\n+    pub fn to_global(self) -> WithOptConstParam<DefId> {\n+        WithOptConstParam { did: self.did.to_def_id(), const_param_did: self.const_param_did }\n     }\n \n     pub fn ty_def_id(self) -> DefId {\n-        if let Some(did) = self.param_did { did } else { self.did.to_def_id() }\n+        if let Some(did) = self.const_param_did { did } else { self.did.to_def_id() }\n     }\n }\n \n-impl WithOptParam<DefId> {\n-    pub fn as_local(self) -> Option<WithOptParam<LocalDefId>> {\n-        self.did.as_local().map(|did| WithOptParam { did, param_did: self.param_did })\n+impl WithOptConstParam<DefId> {\n+    pub fn as_local(self) -> Option<WithOptConstParam<LocalDefId>> {\n+        self.did\n+            .as_local()\n+            .map(|did| WithOptConstParam { did, const_param_did: self.const_param_did })\n     }\n \n     pub fn as_const_arg(self) -> Option<(LocalDefId, DefId)> {\n-        if let Some(param_did) = self.param_did {\n+        if let Some(param_did) = self.const_param_did {\n             if let Some(did) = self.did.as_local() {\n                 return Some((did, param_did));\n             }\n@@ -1643,7 +1645,7 @@ impl WithOptParam<DefId> {\n         None\n     }\n \n-    pub fn expect_local(self) -> WithOptParam<LocalDefId> {\n+    pub fn expect_local(self) -> WithOptConstParam<LocalDefId> {\n         self.as_local().unwrap()\n     }\n \n@@ -1652,7 +1654,7 @@ impl WithOptParam<DefId> {\n     }\n \n     pub fn ty_def_id(self) -> DefId {\n-        self.param_did.unwrap_or(self.did)\n+        self.const_param_did.unwrap_or(self.did)\n     }\n }\n "}, {"sha": "cb2b7a662cb4c0756067d652dcbc472a57873503", "filename": "src/librustc_middle/ty/query/keys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -105,7 +105,7 @@ impl Key for DefId {\n     }\n }\n \n-impl Key for ty::WithOptParam<LocalDefId> {\n+impl Key for ty::WithOptConstParam<LocalDefId> {\n     type CacheSelector = DefaultCacheSelector;\n \n     fn query_crate(&self) -> CrateNum {"}, {"sha": "c968e2fbde8618f9e9172ee8b09cf9695f84d2bd", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -2210,12 +2210,12 @@ impl<'tcx> Const<'tcx> {\n     /// Literals and const generic parameters are eagerly converted to a constant, everything else\n     /// becomes `Unevaluated`.\n     pub fn from_anon_const(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> &'tcx Self {\n-        Self::const_arg_from_anon_const(tcx, ty::WithOptParam::dummy(def_id))\n+        Self::from_opt_const_arg_anon_const(tcx, ty::WithOptConstParam::dummy(def_id))\n     }\n \n-    pub fn const_arg_from_anon_const(\n+    pub fn from_opt_const_arg_anon_const(\n         tcx: TyCtxt<'tcx>,\n-        def: ty::WithOptParam<LocalDefId>,\n+        def: ty::WithOptConstParam<LocalDefId>,\n     ) -> &'tcx Self {\n         debug!(\"Const::from_anon_const(def={:?})\", def);\n \n@@ -2433,7 +2433,7 @@ pub enum ConstKind<'tcx> {\n \n     /// Used in the HIR by using `Unevaluated` everywhere and later normalizing to one of the other\n     /// variants when the code is monomorphic enough for that.\n-    Unevaluated(ty::WithOptParam<DefId>, SubstsRef<'tcx>, Option<Promoted>),\n+    Unevaluated(ty::WithOptConstParam<DefId>, SubstsRef<'tcx>, Option<Promoted>),\n \n     /// Used to hold computed value.\n     Value(ConstValue<'tcx>),"}, {"sha": "348c50720beb63acb6271f27319088d2186bca3c", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -88,19 +88,19 @@ const DEREF_PROJECTION: &[PlaceElem<'_>; 1] = &[ProjectionElem::Deref];\n \n pub fn provide(providers: &mut Providers) {\n     *providers = Providers {\n-        mir_borrowck: |tcx, did| mir_borrowck(tcx, ty::WithOptParam::dummy(did)),\n+        mir_borrowck: |tcx, did| mir_borrowck(tcx, ty::WithOptConstParam::dummy(did)),\n         mir_borrowck_const_arg: |tcx, (did, param_did)| {\n-            mir_borrowck(tcx, ty::WithOptParam { did, param_did: Some(param_did) })\n+            mir_borrowck(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })\n         },\n         ..*providers\n     };\n }\n \n fn mir_borrowck<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    def: ty::WithOptParam<LocalDefId>,\n+    def: ty::WithOptConstParam<LocalDefId>,\n ) -> &'tcx BorrowCheckResult<'tcx> {\n-    if def.param_did.is_none() {\n+    if def.const_param_did.is_none() {\n         if let Some(param_did) = tcx.opt_const_param_of(def.did) {\n             return tcx.mir_borrowck_const_arg((def.did, param_did));\n         }\n@@ -123,7 +123,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n     infcx: &InferCtxt<'a, 'tcx>,\n     input_body: &Body<'tcx>,\n     input_promoted: &IndexVec<Promoted, Body<'tcx>>,\n-    def: ty::WithOptParam<LocalDefId>,\n+    def: ty::WithOptConstParam<LocalDefId>,\n ) -> BorrowCheckResult<'tcx> {\n     debug!(\"do_mir_borrowck(def = {:?})\", def);\n "}, {"sha": "f6b3be59d9576acc36cb5eb5e3e7de764036fc96", "filename": "src/librustc_mir/borrow_check/nll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -59,7 +59,7 @@ crate struct NllOutput<'tcx> {\n /// `compute_regions`.\n pub(in crate::borrow_check) fn replace_regions_in_mir<'cx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'tcx>,\n-    def: ty::WithOptParam<LocalDefId>,\n+    def: ty::WithOptConstParam<LocalDefId>,\n     param_env: ty::ParamEnv<'tcx>,\n     body: &mut Body<'tcx>,\n     promoted: &mut IndexVec<Promoted, Body<'tcx>>,"}, {"sha": "2faf7fa9022a167c913bbce5c0907ec11fc6e164", "filename": "src/librustc_mir/borrow_check/universal_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -227,7 +227,7 @@ impl<'tcx> UniversalRegions<'tcx> {\n     /// known between those regions.\n     pub fn new(\n         infcx: &InferCtxt<'_, 'tcx>,\n-        mir_def: ty::WithOptParam<LocalDefId>,\n+        mir_def: ty::WithOptConstParam<LocalDefId>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Self {\n         let tcx = infcx.tcx;\n@@ -388,7 +388,7 @@ impl<'tcx> UniversalRegions<'tcx> {\n \n struct UniversalRegionsBuilder<'cx, 'tcx> {\n     infcx: &'cx InferCtxt<'cx, 'tcx>,\n-    mir_def: ty::WithOptParam<LocalDefId>,\n+    mir_def: ty::WithOptConstParam<LocalDefId>,\n     mir_hir_id: HirId,\n     param_env: ty::ParamEnv<'tcx>,\n }"}, {"sha": "42ac4d126a13818fca2bf22f4f712a2736bb4fca", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -491,10 +491,13 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers {\n         unsafety_check_result: |tcx, def_id| {\n-            unsafety_check_result(tcx, ty::WithOptParam::dummy(def_id))\n+            unsafety_check_result(tcx, ty::WithOptConstParam::dummy(def_id))\n         },\n         unsafety_check_result_const_arg: |tcx, (did, param_did)| {\n-            unsafety_check_result(tcx, ty::WithOptParam { did, param_did: Some(param_did) })\n+            unsafety_check_result(\n+                tcx,\n+                ty::WithOptConstParam { did, const_param_did: Some(param_did) },\n+            )\n         },\n         unsafe_derive_on_repr_packed,\n         ..*providers\n@@ -546,9 +549,9 @@ fn check_unused_unsafe(\n \n fn unsafety_check_result<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    def: ty::WithOptParam<LocalDefId>,\n+    def: ty::WithOptConstParam<LocalDefId>,\n ) -> &'tcx UnsafetyCheckResult {\n-    if def.param_did.is_none() {\n+    if def.const_param_did.is_none() {\n         if let Some(param_did) = tcx.opt_const_param_of(def.did) {\n             return tcx.unsafety_check_result_const_arg((def.did, param_did));\n         }"}, {"sha": "ce8e71d878b0081a70f56cfa7236add6431b4672", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 39, "deletions": 31, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -49,21 +49,21 @@ pub(crate) fn provide(providers: &mut Providers) {\n         mir_keys,\n         mir_const,\n         mir_const_qualif: |tcx, did| {\n-            mir_const_qualif(tcx, ty::WithOptParam::dummy(did.expect_local()))\n+            mir_const_qualif(tcx, ty::WithOptConstParam::dummy(did.expect_local()))\n         },\n         mir_const_qualif_const_arg: |tcx, (did, param_did)| {\n-            mir_const_qualif(tcx, ty::WithOptParam { did, param_did: Some(param_did) })\n+            mir_const_qualif(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })\n         },\n         mir_validated,\n         mir_drops_elaborated_and_const_checked,\n         optimized_mir,\n         optimized_mir_of_const_arg,\n         is_mir_available,\n         promoted_mir: |tcx, def_id| {\n-            promoted_mir(tcx, ty::WithOptParam::dummy(def_id.expect_local()))\n+            promoted_mir(tcx, ty::WithOptConstParam::dummy(def_id.expect_local()))\n         },\n         promoted_mir_of_const_arg: |tcx, (did, param_did)| {\n-            promoted_mir(tcx, ty::WithOptParam { did, param_did: Some(param_did) })\n+            promoted_mir(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })\n         },\n         ..*providers\n     };\n@@ -127,10 +127,13 @@ pub struct MirSource<'tcx> {\n \n impl<'tcx> MirSource<'tcx> {\n     pub fn item(def_id: DefId) -> Self {\n-        MirSource { instance: InstanceDef::Item(ty::WithOptParam::dummy(def_id)), promoted: None }\n+        MirSource {\n+            instance: InstanceDef::Item(ty::WithOptConstParam::dummy(def_id)),\n+            promoted: None,\n+        }\n     }\n \n-    pub fn with_opt_param(self) -> ty::WithOptParam<DefId> {\n+    pub fn with_opt_param(self) -> ty::WithOptConstParam<DefId> {\n         self.instance.with_opt_param()\n     }\n \n@@ -217,8 +220,8 @@ pub fn run_passes(\n     }\n }\n \n-fn mir_const_qualif(tcx: TyCtxt<'_>, def: ty::WithOptParam<LocalDefId>) -> ConstQualifs {\n-    if def.param_did.is_none() {\n+fn mir_const_qualif(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> ConstQualifs {\n+    if def.const_param_did.is_none() {\n         if let Some(param_did) = tcx.opt_const_param_of(def.did) {\n             return tcx.mir_const_qualif_const_arg((def.did, param_did));\n         }\n@@ -261,16 +264,16 @@ fn mir_const_qualif(tcx: TyCtxt<'_>, def: ty::WithOptParam<LocalDefId>) -> Const\n /// Make MIR ready for const evaluation. This is run on all MIR, not just on consts!\n fn mir_const<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    def: ty::WithOptParam<LocalDefId>,\n+    def: ty::WithOptConstParam<LocalDefId>,\n ) -> &'tcx Steal<Body<'tcx>> {\n-    if def.param_did.is_none() {\n-        if let param_did @ Some(_) = tcx.opt_const_param_of(def.did) {\n-            return tcx.mir_const(ty::WithOptParam { param_did, ..def });\n+    if def.const_param_did.is_none() {\n+        if let const_param_did @ Some(_) = tcx.opt_const_param_of(def.did) {\n+            return tcx.mir_const(ty::WithOptConstParam { const_param_did, ..def });\n         }\n     }\n \n     // Unsafety check uses the raw mir, so make sure it is run.\n-    if let Some(param_did) = def.param_did {\n+    if let Some(param_did) = def.const_param_did {\n         tcx.ensure().unsafety_check_result_const_arg((def.did, param_did));\n     } else {\n         tcx.ensure().unsafety_check_result(def.did);\n@@ -307,11 +310,11 @@ fn mir_const<'tcx>(\n \n fn mir_validated(\n     tcx: TyCtxt<'tcx>,\n-    def: ty::WithOptParam<LocalDefId>,\n+    def: ty::WithOptConstParam<LocalDefId>,\n ) -> (&'tcx Steal<Body<'tcx>>, &'tcx Steal<IndexVec<Promoted, Body<'tcx>>>) {\n-    if def.param_did.is_none() {\n-        if let param_did @ Some(_) = tcx.opt_const_param_of(def.did) {\n-            return tcx.mir_validated(ty::WithOptParam { param_did, ..def });\n+    if def.const_param_did.is_none() {\n+        if let const_param_did @ Some(_) = tcx.opt_const_param_of(def.did) {\n+            return tcx.mir_validated(ty::WithOptConstParam { const_param_did, ..def });\n         }\n     }\n \n@@ -352,18 +355,20 @@ fn mir_validated(\n \n fn mir_drops_elaborated_and_const_checked<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    def: ty::WithOptParam<LocalDefId>,\n+    def: ty::WithOptConstParam<LocalDefId>,\n ) -> &'tcx Steal<Body<'tcx>> {\n-    if def.param_did.is_none() {\n-        if let param_did @ Some(_) = tcx.opt_const_param_of(def.did) {\n-            return tcx\n-                .mir_drops_elaborated_and_const_checked(ty::WithOptParam { param_did, ..def });\n+    if def.const_param_did.is_none() {\n+        if let const_param_did @ Some(_) = tcx.opt_const_param_of(def.did) {\n+            return tcx.mir_drops_elaborated_and_const_checked(ty::WithOptConstParam {\n+                const_param_did,\n+                ..def\n+            });\n         }\n     }\n \n     // (Mir-)Borrowck uses `mir_validated`, so we have to force it to\n     // execute before we can steal.\n-    if let Some(param_did) = def.param_did {\n+    if let Some(param_did) = def.const_param_did {\n         tcx.ensure().mir_borrowck_const_arg((def.did, param_did));\n     } else {\n         tcx.ensure().mir_borrowck(def.did);\n@@ -409,7 +414,7 @@ fn run_post_borrowck_cleanup_passes<'tcx>(\n     run_passes(\n         tcx,\n         body,\n-        InstanceDef::Item(ty::WithOptParam::dummy(def_id.to_def_id())),\n+        InstanceDef::Item(ty::WithOptConstParam::dummy(def_id.to_def_id())),\n         promoted,\n         MirPhase::DropElab,\n         &[post_borrowck_cleanup],\n@@ -473,7 +478,7 @@ fn run_optimization_passes<'tcx>(\n     run_passes(\n         tcx,\n         body,\n-        InstanceDef::Item(ty::WithOptParam::dummy(def_id.to_def_id())),\n+        InstanceDef::Item(ty::WithOptConstParam::dummy(def_id.to_def_id())),\n         promoted,\n         MirPhase::Optimized,\n         &[\n@@ -488,18 +493,21 @@ fn optimized_mir<'tcx>(tcx: TyCtxt<'tcx>, did: DefId) -> &'tcx Body<'tcx> {\n     if let Some(param_did) = tcx.opt_const_param_of(did) {\n         tcx.optimized_mir_of_const_arg((did, param_did))\n     } else {\n-        tcx.arena.alloc(inner_optimized_mir(tcx, ty::WithOptParam::dummy(did)))\n+        tcx.arena.alloc(inner_optimized_mir(tcx, ty::WithOptConstParam::dummy(did)))\n     }\n }\n \n fn optimized_mir_of_const_arg<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     (did, param_did): (LocalDefId, DefId),\n ) -> &'tcx Body<'tcx> {\n-    tcx.arena.alloc(inner_optimized_mir(tcx, ty::WithOptParam { did, param_did: Some(param_did) }))\n+    tcx.arena.alloc(inner_optimized_mir(\n+        tcx,\n+        ty::WithOptConstParam { did, const_param_did: Some(param_did) },\n+    ))\n }\n \n-fn inner_optimized_mir(tcx: TyCtxt<'_>, def: ty::WithOptParam<LocalDefId>) -> Body<'_> {\n+fn inner_optimized_mir(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_> {\n     if tcx.is_constructor(def.did.to_def_id()) {\n         // There's no reason to run all of the MIR passes on constructors when\n         // we can just output the MIR we want directly. This also saves const\n@@ -518,9 +526,9 @@ fn inner_optimized_mir(tcx: TyCtxt<'_>, def: ty::WithOptParam<LocalDefId>) -> Bo\n \n fn promoted_mir<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    def: ty::WithOptParam<LocalDefId>,\n+    def: ty::WithOptConstParam<LocalDefId>,\n ) -> &'tcx IndexVec<Promoted, Body<'tcx>> {\n-    if def.param_did.is_none() {\n+    if def.const_param_did.is_none() {\n         if let Some(param_did) = tcx.opt_const_param_of(def.did) {\n             return tcx.promoted_mir_of_const_arg((def.did, param_did));\n         }\n@@ -530,7 +538,7 @@ fn promoted_mir<'tcx>(\n         return tcx.arena.alloc(IndexVec::new());\n     }\n \n-    if let Some(param_did) = def.param_did {\n+    if let Some(param_did) = def.const_param_did {\n         tcx.ensure().mir_borrowck_const_arg((def.did, param_did));\n     } else {\n         tcx.ensure().mir_borrowck(def.did);"}, {"sha": "59a8415ef96f04d14cbb34a1ff0cba5699c02c9f", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -936,7 +936,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n \n     fn promote_candidate(\n         mut self,\n-        def: ty::WithOptParam<DefId>,\n+        def: ty::WithOptConstParam<DefId>,\n         candidate: Candidate,\n         next_promoted_id: usize,\n     ) -> Option<Body<'tcx>> {\n@@ -1099,7 +1099,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Promoter<'a, 'tcx> {\n }\n \n pub fn promote_candidates<'tcx>(\n-    def: ty::WithOptParam<DefId>,\n+    def: ty::WithOptConstParam<DefId>,\n     body: &mut Body<'tcx>,\n     tcx: TyCtxt<'tcx>,\n     mut temps: IndexVec<Local, TempState>,"}, {"sha": "e01badde21794b588146707ed8bd532231b9cf91", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -249,7 +249,7 @@ pub fn write_mir_pretty<'tcx>(\n         for (i, body) in tcx.promoted_mir(def_id).iter_enumerated() {\n             writeln!(w)?;\n             let src = MirSource {\n-                instance: ty::InstanceDef::Item(ty::WithOptParam::dummy(def_id)),\n+                instance: ty::InstanceDef::Item(ty::WithOptConstParam::dummy(def_id)),\n                 promoted: Some(i),\n             };\n             write_mir_fn(tcx, src, body, &mut |_, _| Ok(()), w)?;"}, {"sha": "21a5ea0aae30576d6ba237470188d8a426355f77", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -21,18 +21,18 @@ use rustc_target::spec::PanicStrategy;\n \n use super::lints;\n \n-crate fn mir_built<'tcx>(tcx: TyCtxt<'tcx>, def: ty::WithOptParam<LocalDefId>) -> &'tcx ty::steal::Steal<Body<'tcx>> {\n-    if def.param_did.is_none() {\n-        if let param_did @ Some(_) = tcx.opt_const_param_of(def.did) {\n-            return tcx.mir_built(ty::WithOptParam { param_did, ..def });\n+crate fn mir_built<'tcx>(tcx: TyCtxt<'tcx>, def: ty::WithOptConstParam<LocalDefId>) -> &'tcx ty::steal::Steal<Body<'tcx>> {\n+    if def.const_param_did.is_none() {\n+        if let const_param_did @ Some(_) = tcx.opt_const_param_of(def.did) {\n+            return tcx.mir_built(ty::WithOptConstParam { const_param_did, ..def });\n         }\n     }\n \n     tcx.alloc_steal_mir(mir_build(tcx, def))\n }\n \n /// Construct the MIR for a given `DefId`.\n-fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptParam<LocalDefId>) -> Body<'_> {\n+fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_> {\n     let id = tcx.hir().as_local_hir_id(def.did);\n \n     // Figure out what primary body this item has."}, {"sha": "8692363d006356063e56041ff91ece16ab82df19", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -601,7 +601,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n                             let substs = InternalSubsts::identity_for_item(cx.tcx(), did);\n                             let lhs = mk_const(cx.tcx().mk_const(ty::Const {\n                                 val: ty::ConstKind::Unevaluated(\n-                                    ty::WithOptParam::dummy(did),\n+                                    ty::WithOptConstParam::dummy(did),\n                                     substs,\n                                     None,\n                                 ),\n@@ -800,7 +800,11 @@ fn convert_path_expr<'a, 'tcx>(\n             debug!(\"convert_path_expr: (const) user_ty={:?}\", user_ty);\n             ExprKind::Literal {\n                 literal: cx.tcx.mk_const(ty::Const {\n-                    val: ty::ConstKind::Unevaluated(ty::WithOptParam::dummy(def_id), substs, None),\n+                    val: ty::ConstKind::Unevaluated(\n+                        ty::WithOptConstParam::dummy(def_id),\n+                        substs,\n+                        None,\n+                    ),\n                     ty: cx.tables().node_type(expr.hir_id),\n                 }),\n                 user_ty,"}, {"sha": "12d1c637fb0069a697c575ad365f4d9e69d0eb63", "filename": "src/librustc_mir_build/hair/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -52,7 +52,7 @@ crate struct Cx<'a, 'tcx> {\n impl<'a, 'tcx> Cx<'a, 'tcx> {\n     crate fn new(\n         infcx: &'a InferCtxt<'a, 'tcx>,\n-        def: ty::WithOptParam<LocalDefId>,\n+        def: ty::WithOptConstParam<LocalDefId>,\n         src_id: hir::HirId,\n     ) -> Cx<'a, 'tcx> {\n         let tcx = infcx.tcx;"}, {"sha": "6de08bd04893d13e7891c850d1d1247dd909a657", "filename": "src/librustc_ty/instance.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_ty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_ty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Finstance.rs?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -21,24 +21,26 @@ fn resolve_instance<'tcx>(\n         }\n     }\n \n-    inner_resolve_instance(tcx, param_env.and((ty::WithOptParam::dummy(did), substs)))\n+    inner_resolve_instance(tcx, param_env.and((ty::WithOptConstParam::dummy(did), substs)))\n }\n \n fn resolve_instance_of_const_arg<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, (LocalDefId, DefId, SubstsRef<'tcx>)>,\n ) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n-    let (param_env, (did, param_did, substs)) = key.into_parts();\n+    let (param_env, (did, const_param_did, substs)) = key.into_parts();\n     inner_resolve_instance(\n         tcx,\n-        param_env\n-            .and((ty::WithOptParam { did: did.to_def_id(), param_did: Some(param_did) }, substs)),\n+        param_env.and((\n+            ty::WithOptConstParam { did: did.to_def_id(), const_param_did: Some(const_param_did) },\n+            substs,\n+        )),\n     )\n }\n \n fn inner_resolve_instance<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    key: ty::ParamEnvAnd<'tcx, (ty::WithOptParam<DefId>, SubstsRef<'tcx>)>,\n+    key: ty::ParamEnvAnd<'tcx, (ty::WithOptConstParam<DefId>, SubstsRef<'tcx>)>,\n ) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n     let (param_env, (def, substs)) = key.into_parts();\n \n@@ -208,7 +210,9 @@ fn resolve_associated_item<'tcx>(\n             Some(ty::Instance::new(leaf_def.item.def_id, substs))\n         }\n         traits::ImplSourceGenerator(generator_data) => Some(Instance {\n-            def: ty::InstanceDef::Item(ty::WithOptParam::dummy(generator_data.generator_def_id)),\n+            def: ty::InstanceDef::Item(ty::WithOptConstParam::dummy(\n+                generator_data.generator_def_id,\n+            )),\n             substs: generator_data.substs,\n         }),\n         traits::ImplSourceClosure(closure_data) => {"}, {"sha": "37f48f82ea6746176b0745a8f2691720caa34331", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -886,11 +886,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     }\n                 }\n                 (GenericParamDefKind::Const, GenericArg::Const(ct)) => {\n-                    ty::Const::const_arg_from_anon_const(\n+                    ty::Const::from_opt_const_arg_anon_const(\n                         tcx,\n-                        ty::WithOptParam {\n+                        ty::WithOptConstParam {\n                             did: tcx.hir().local_def_id(ct.value.hir_id),\n-                            param_did: Some(param.def_id),\n+                            const_param_did: Some(param.def_id),\n                         },\n                     )\n                     .into()"}, {"sha": "9a8d78940ba0d219f0c346f1ef8cc5b544343f3d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -3560,11 +3560,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ast_c: &hir::AnonConst,\n         param_def_id: DefId,\n     ) -> &'tcx ty::Const<'tcx> {\n-        let const_def = ty::WithOptParam {\n+        let const_def = ty::WithOptConstParam {\n             did: self.tcx.hir().local_def_id(ast_c.hir_id),\n-            param_did: Some(param_def_id),\n+            const_param_did: Some(param_def_id),\n         };\n-        let c = ty::Const::const_arg_from_anon_const(self.tcx, const_def);\n+        let c = ty::Const::from_opt_const_arg_anon_const(self.tcx, const_def);\n         self.register_wf_obligation(\n             c.into(),\n             self.tcx.hir().span(ast_c.hir_id),"}, {"sha": "30aa861e55de43579fe4c87db8ba79a9b4b95ad4", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -424,7 +424,7 @@ fn check_type_defn<'tcx, F>(\n                     cause,\n                     fcx.param_env,\n                     ty::PredicateKind::ConstEvaluatable(\n-                        ty::WithOptParam::dummy(discr_def_id.to_def_id()),\n+                        ty::WithOptConstParam::dummy(discr_def_id.to_def_id()),\n                         discr_substs,\n                     )\n                     .to_predicate(fcx.tcx),"}, {"sha": "0e0d8ea90631166117a29ddc116da4348d4afc3d", "filename": "src/test/mir-opt/const-promotion-extern-static/rustc.BAR.PromoteTemps.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR.PromoteTemps.diff?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -22,15 +22,15 @@\n -                                          // + ty: &i32\n -                                          // + val: Value(Scalar(alloc0))\n +                                          // + ty: &[&i32; 1]\n-+                                          // + val: Unevaluated(WithOptParam { did: DefId(0:6 ~ const_promotion_extern_static[317d]::BAR[0]), param_did: None }, [], Some(promoted[0]))\n++                                          // + val: Unevaluated(WithOptConstParam { did: DefId(0:6 ~ const_promotion_extern_static[317d]::BAR[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n -                                          // + span: $DIR/const-promotion-extern-static.rs:9:33: 9:34\n -                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc0)) }\n -         _4 = &(*_5);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n -         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n -         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n +                                          // + span: $DIR/const-promotion-extern-static.rs:9:31: 9:35\n-+                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(WithOptParam { did: DefId(0:6 ~ const_promotion_extern_static[317d]::BAR[0]), param_did: None }, [], Some(promoted[0])) }\n++                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(WithOptConstParam { did: DefId(0:6 ~ const_promotion_extern_static[317d]::BAR[0]), const_param_did: None }, [], Some(promoted[0])) }\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n           _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44"}, {"sha": "a885b4d3bae1b84e30918b4a8486fd9075bf6a26", "filename": "src/test/mir-opt/const-promotion-extern-static/rustc.FOO.PromoteTemps.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO.PromoteTemps.diff?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -24,15 +24,15 @@\n -                                          // + ty: &i32\n -                                          // + val: Value(Scalar(alloc2))\n +                                          // + ty: &[&i32; 1]\n-+                                          // + val: Unevaluated(WithOptParam { did: DefId(0:7 ~ const_promotion_extern_static[317d]::FOO[0]), param_did: None }, [], Some(promoted[0]))\n++                                          // + val: Unevaluated(WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[317d]::FOO[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n -                                          // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43\n -                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc2)) }\n -         _4 = &(*_5);                     // scope 1 at $DIR/const-promotion-extern-static.rs:13:41: 13:43\n -         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n -         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n +                                          // + span: $DIR/const-promotion-extern-static.rs:13:31: 13:46\n-+                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(WithOptParam { did: DefId(0:7 ~ const_promotion_extern_static[317d]::FOO[0]), param_did: None }, [], Some(promoted[0])) }\n++                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[317d]::FOO[0]), const_param_did: None }, [], Some(promoted[0])) }\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n           _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55"}, {"sha": "0f9c81943eda98677beb8e0aee98546620e906ea", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F32bit%2Frustc.main.ConstProp.diff?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -28,10 +28,10 @@\n           _9 = const main::promoted[0];    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n                                            // ty::Const\n                                            // + ty: &[i32; 3]\n-                                           // + val: Unevaluated(WithOptParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main[0]), param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(WithOptParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main[0]), param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n           _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35"}, {"sha": "da2c8dffb24110c4650f9ae0a84c00c4d39eb654", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F64bit%2Frustc.main.ConstProp.diff?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -28,10 +28,10 @@\n           _9 = const main::promoted[0];    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n                                            // ty::Const\n                                            // + ty: &[i32; 3]\n-                                           // + val: Unevaluated(WithOptParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main[0]), param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(WithOptParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main[0]), param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n           _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35"}, {"sha": "f3efef387a3b4bd1c30528fe48e31c533f4cfb3b", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully%2Frustc.main.ConstProp.diff?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -19,10 +19,10 @@\n           _3 = const main::FOO;            // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(WithOptParam { did: DefId(0:5 ~ const_prop_fails_gracefully[317d]::main[0]::FOO[0]), param_did: None }, [], None)\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:5 ~ const_prop_fails_gracefully[317d]::main[0]::FOO[0]), const_param_did: None }, [], None)\n                                            // mir::Constant\n                                            // + span: $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptParam { did: DefId(0:5 ~ const_prop_fails_gracefully[317d]::main[0]::FOO[0]), param_did: None }, [], None) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:5 ~ const_prop_fails_gracefully[317d]::main[0]::FOO[0]), const_param_did: None }, [], None) }\n           _2 = &raw const (*_3);           // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n           _1 = move _2 as usize (Misc);    // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:39\n           StorageDead(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:38: 7:39"}, {"sha": "68527a86aeb839847157e0af706c196225e465ad", "filename": "src/test/mir-opt/const_prop/control-flow-simplification/rustc.hello.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification%2Frustc.hello.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification%2Frustc.hello.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification%2Frustc.hello.ConstProp.diff?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -12,11 +12,11 @@\n +         _1 = const false;                // scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n                                            // ty::Const\n                                            // + ty: bool\n--                                          // + val: Unevaluated(WithOptParam { did: DefId(0:4 ~ control_flow_simplification[317d]::NeedsDrop[0]::NEEDS[0]), param_did: None }, [bool], None)\n+-                                          // + val: Unevaluated(WithOptConstParam { did: DefId(0:4 ~ control_flow_simplification[317d]::NeedsDrop[0]::NEEDS[0]), const_param_did: None }, [bool], None)\n +                                          // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n                                            // + span: $DIR/control-flow-simplification.rs:12:8: 12:21\n--                                          // + literal: Const { ty: bool, val: Unevaluated(WithOptParam { did: DefId(0:4 ~ control_flow_simplification[317d]::NeedsDrop[0]::NEEDS[0]), param_did: None }, [bool], None) }\n+-                                          // + literal: Const { ty: bool, val: Unevaluated(WithOptConstParam { did: DefId(0:4 ~ control_flow_simplification[317d]::NeedsDrop[0]::NEEDS[0]), const_param_did: None }, [bool], None) }\n -         switchInt(_1) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/control-flow-simplification.rs:12:5: 14:6\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n +         switchInt(const false) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/control-flow-simplification.rs:12:5: 14:6"}, {"sha": "ba5ac8d3ddf87b5bd5ca81ac69a25d226abd38ba", "filename": "src/test/mir-opt/const_prop/ref_deref/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.ConstProp.diff?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -14,10 +14,10 @@\n           _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(WithOptParam { did: DefId(0:3 ~ ref_deref[317d]::main[0]), param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref.rs:5:6: 5:10\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptParam { did: DefId(0:3 ~ ref_deref[317d]::main[0]), param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n           _2 = _4;                         // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n -         _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n +         _1 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:5:5: 5:10"}, {"sha": "fa68eb348185a87bb282bc2ba80fe7befd398ea2", "filename": "src/test/mir-opt/const_prop/ref_deref/rustc.main.PromoteTemps.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.PromoteTemps.diff?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -18,13 +18,13 @@\n -                                          // + ty: i32\n -                                          // + val: Value(Scalar(0x00000004))\n +                                          // + ty: &i32\n-+                                          // + val: Unevaluated(WithOptParam { did: DefId(0:3 ~ ref_deref[317d]::main[0]), param_did: None }, [], Some(promoted[0]))\n++                                          // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n -                                          // + span: $DIR/ref_deref.rs:5:8: 5:9\n -                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n -         _2 = &_3;                        // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n +                                          // + span: $DIR/ref_deref.rs:5:6: 5:10\n-+                                          // + literal: Const { ty: &i32, val: Unevaluated(WithOptParam { did: DefId(0:3 ~ ref_deref[317d]::main[0]), param_did: None }, [], Some(promoted[0])) }\n++                                          // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n +         _2 = &(*_4);                     // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n -         StorageDead(_3);                 // scope 0 at $DIR/ref_deref.rs:5:10: 5:11"}, {"sha": "483e5f1b9a4265bb6d07e83c8a8657c4f463af9f", "filename": "src/test/mir-opt/const_prop/ref_deref_project/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.ConstProp.diff?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -14,10 +14,10 @@\n           _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n                                            // ty::Const\n                                            // + ty: &(i32, i32)\n-                                           // + val: Unevaluated(WithOptParam { did: DefId(0:3 ~ ref_deref_project[317d]::main[0]), param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n-                                           // + literal: Const { ty: &(i32, i32), val: Unevaluated(WithOptParam { did: DefId(0:3 ~ ref_deref_project[317d]::main[0]), param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &(i32, i32), val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n           _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n           StorageDead(_2);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18"}, {"sha": "86e6aacab45a7b73ecc1a057ad2d84439a172e83", "filename": "src/test/mir-opt/const_prop/ref_deref_project/rustc.main.PromoteTemps.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.PromoteTemps.diff?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -18,7 +18,7 @@\n -                                          // + ty: i32\n -                                          // + val: Value(Scalar(0x00000004))\n +                                          // + ty: &(i32, i32)\n-+                                          // + val: Unevaluated(WithOptParam { did: DefId(0:3 ~ ref_deref_project[317d]::main[0]), param_did: None }, [], Some(promoted[0]))\n++                                          // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n -                                          // + span: $DIR/ref_deref_project.rs:5:9: 5:10\n -                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n@@ -30,7 +30,7 @@\n -                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n -         _2 = &(_3.1: i32);               // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n +                                          // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n-+                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(WithOptParam { did: DefId(0:3 ~ ref_deref_project[317d]::main[0]), param_did: None }, [], Some(promoted[0])) }\n++                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n +         _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n -         StorageDead(_3);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18"}, {"sha": "6eb64f75ef17e8acb79239af315246609515a65d", "filename": "src/test/mir-opt/const_prop/slice_len/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F32bit%2Frustc.main.ConstProp.diff?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -21,10 +21,10 @@\n           _9 = const main::promoted[0];    // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n                                            // ty::Const\n                                            // + ty: &[u32; 3]\n-                                           // + val: Unevaluated(WithOptParam { did: DefId(0:3 ~ slice_len[317d]::main[0]), param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:5:6: 5:19\n-                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(WithOptParam { did: DefId(0:3 ~ slice_len[317d]::main[0]), param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:5:6: 5:19"}, {"sha": "2b641bef1d8028a503f079f81f9f4ddef2f520f5", "filename": "src/test/mir-opt/const_prop/slice_len/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F64bit%2Frustc.main.ConstProp.diff?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -21,10 +21,10 @@\n           _9 = const main::promoted[0];    // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n                                            // ty::Const\n                                            // + ty: &[u32; 3]\n-                                           // + val: Unevaluated(WithOptParam { did: DefId(0:3 ~ slice_len[317d]::main[0]), param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:5:6: 5:19\n-                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(WithOptParam { did: DefId(0:3 ~ slice_len[317d]::main[0]), param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:5:6: 5:19"}, {"sha": "d6ac1c57a635917129baee40ae4c83d298e3a1de", "filename": "src/test/mir-opt/inline/inline-retag/rustc.bar.Inline.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Finline%2Finline-retag%2Frustc.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Finline%2Finline-retag%2Frustc.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-retag%2Frustc.bar.Inline.after.mir?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -38,10 +38,10 @@ fn bar() -> bool {\n         _10 = const bar::promoted[1];    // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n                                          // ty::Const\n                                          // + ty: &i32\n-                                         // + val: Unevaluated(WithOptParam { did: DefId(0:4 ~ inline_retag[317d]::bar[0]), param_did: None }, [], Some(promoted[1]))\n+                                         // + val: Unevaluated(WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar[0]), const_param_did: None }, [], Some(promoted[1]))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:12:7: 12:9\n-                                         // + literal: Const { ty: &i32, val: Unevaluated(WithOptParam { did: DefId(0:4 ~ inline_retag[317d]::bar[0]), param_did: None }, [], Some(promoted[1])) }\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar[0]), const_param_did: None }, [], Some(promoted[1])) }\n         Retag(_10);                      // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n         _4 = &(*_10);                    // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n         Retag(_4);                       // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n@@ -52,10 +52,10 @@ fn bar() -> bool {\n         _9 = const bar::promoted[0];     // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n                                          // ty::Const\n                                          // + ty: &i32\n-                                         // + val: Unevaluated(WithOptParam { did: DefId(0:4 ~ inline_retag[317d]::bar[0]), param_did: None }, [], Some(promoted[0]))\n+                                         // + val: Unevaluated(WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar[0]), const_param_did: None }, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:12:11: 12:14\n-                                         // + literal: Const { ty: &i32, val: Unevaluated(WithOptParam { did: DefId(0:4 ~ inline_retag[317d]::bar[0]), param_did: None }, [], Some(promoted[0])) }\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar[0]), const_param_did: None }, [], Some(promoted[0])) }\n         Retag(_9);                       // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n         _7 = &(*_9);                     // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n         Retag(_7);                       // scope 1 at $DIR/inline-retag.rs:12:11: 12:14"}, {"sha": "cf5d1f3f6c6a4fde1bf7f515745565df5b3c71c1", "filename": "src/test/mir-opt/issue-73223/32bit/rustc.main.PreCodegen.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.PreCodegen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.PreCodegen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.PreCodegen.diff?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -96,10 +96,10 @@\n           (_5.1: &i32) = const main::promoted[1]; // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(WithOptParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), param_did: None }, [], Some(promoted[1]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[1]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), param_did: None }, [], Some(promoted[1])) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[1])) }\n           StorageDead(_6);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           StorageLive(_7);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           _7 = (_5.0: &i32);               // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n@@ -140,10 +140,10 @@\n           _15 = const main::promoted[0] as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &[&str; 3]\n-                                           // + val: Unevaluated(WithOptParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n           StorageLive(_18);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n           StorageLive(_19);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n           StorageLive(_20);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL"}, {"sha": "91baac86112961e6f537b01bb9ddf823f18d801e", "filename": "src/test/mir-opt/issue-73223/32bit/rustc.main.SimplifyArmIdentity.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.SimplifyArmIdentity.diff?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -153,10 +153,10 @@\n           _51 = const main::promoted[1];   // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(WithOptParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), param_did: None }, [], Some(promoted[1]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[1]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), param_did: None }, [], Some(promoted[1])) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[1])) }\n           _11 = _51;                       // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n@@ -220,10 +220,10 @@\n           _50 = const main::promoted[0];   // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &[&str; 3]\n-                                           // + val: Unevaluated(WithOptParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n           _25 = _50;                       // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           _24 = _25;                       // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           _23 = move _24 as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL"}, {"sha": "cf5d1f3f6c6a4fde1bf7f515745565df5b3c71c1", "filename": "src/test/mir-opt/issue-73223/64bit/rustc.main.PreCodegen.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.PreCodegen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.PreCodegen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.PreCodegen.diff?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -96,10 +96,10 @@\n           (_5.1: &i32) = const main::promoted[1]; // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(WithOptParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), param_did: None }, [], Some(promoted[1]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[1]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), param_did: None }, [], Some(promoted[1])) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[1])) }\n           StorageDead(_6);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           StorageLive(_7);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           _7 = (_5.0: &i32);               // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n@@ -140,10 +140,10 @@\n           _15 = const main::promoted[0] as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &[&str; 3]\n-                                           // + val: Unevaluated(WithOptParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n           StorageLive(_18);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n           StorageLive(_19);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n           StorageLive(_20);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL"}, {"sha": "0da748d79ebddab7c9f5bcc25e135c3671a1e64e", "filename": "src/test/mir-opt/issue-73223/64bit/rustc.main.SimplifyArmIdentity.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.SimplifyArmIdentity.diff?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -153,10 +153,10 @@\n           _51 = const main::promoted[1];   // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(WithOptParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), param_did: None }, [], Some(promoted[1]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[1]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), param_did: None }, [], Some(promoted[1])) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[1])) }\n           _11 = _51;                       // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n@@ -220,10 +220,10 @@\n           _50 = const main::promoted[0];   // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &[&str; 3]\n-                                           // + val: Unevaluated(WithOptParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n           _25 = _50;                       // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           _24 = _25;                       // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           _23 = move _24 as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL"}, {"sha": "c53c9cf1db7cc8bdd04c670b0e464bc6a1a69041", "filename": "src/test/mir-opt/match_false_edges/rustc.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -76,10 +76,10 @@ fn full_tested_match() -> () {\n         _11 = const full_tested_match::promoted[0]; // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n                                          // ty::Const\n                                          // + ty: &std::option::Option<i32>\n-                                         // + val: Unevaluated(WithOptParam { did: DefId(0:5 ~ match_false_edges[317d]::full_tested_match[0]), param_did: None }, [], Some(promoted[0]))\n+                                         // + val: Unevaluated(WithOptConstParam { did: DefId(0:5 ~ match_false_edges[317d]::full_tested_match[0]), const_param_did: None }, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:16:14: 16:15\n-                                         // + literal: Const { ty: &std::option::Option<i32>, val: Unevaluated(WithOptParam { did: DefId(0:5 ~ match_false_edges[317d]::full_tested_match[0]), param_did: None }, [], Some(promoted[0])) }\n+                                         // + literal: Const { ty: &std::option::Option<i32>, val: Unevaluated(WithOptConstParam { did: DefId(0:5 ~ match_false_edges[317d]::full_tested_match[0]), const_param_did: None }, [], Some(promoted[0])) }\n         _6 = &(((*_11) as Some).0: i32); // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n         _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27"}, {"sha": "b61d936837512fd9be5cb80c312ea538df198abe", "filename": "src/test/mir-opt/retag/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -184,10 +184,10 @@ fn main() -> () {\n         _27 = const main::promoted[0];   // scope 7 at $DIR/retag.rs:47:21: 47:23\n                                          // ty::Const\n                                          // + ty: &i32\n-                                         // + val: Unevaluated(WithOptParam { did: DefId(0:13 ~ retag[317d]::main[0]), param_did: None }, [], Some(promoted[0]))\n+                                         // + val: Unevaluated(WithOptConstParam { did: DefId(0:13 ~ retag[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:47:21: 47:23\n-                                         // + literal: Const { ty: &i32, val: Unevaluated(WithOptParam { did: DefId(0:13 ~ retag[317d]::main[0]), param_did: None }, [], Some(promoted[0])) }\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:13 ~ retag[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n         Retag(_27);                      // scope 7 at $DIR/retag.rs:47:21: 47:23\n         _23 = &(*_27);                   // scope 7 at $DIR/retag.rs:47:21: 47:23\n         Retag(_23);                      // scope 7 at $DIR/retag.rs:47:21: 47:23"}, {"sha": "891cb69bb5624f5a26b12ab13ad6e0dca4af97e1", "filename": "src/tools/clippy/clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a909eb6b653080683b49b2be5e6621ca08cecf01/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs?ref=a909eb6b653080683b49b2be5e6621ca08cecf01", "patch": "@@ -332,7 +332,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                 let result = self\n                     .lcx\n                     .tcx\n-                    .const_eval_resolve(self.param_env, ty::WithOptParam::dummy(def_id), substs, None, None)\n+                    .const_eval_resolve(self.param_env, ty::WithOptConstParam::dummy(def_id), substs, None, None)\n                     .ok()\n                     .map(|val| rustc_middle::ty::Const::from_value(self.lcx.tcx, val, ty))?;\n                 let result = miri_to_const(&result);"}]}