{"sha": "ff1c82216cc05f2621a301e30ab7a1102dea9d2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMWM4MjIxNmNjMDVmMjYyMWEzMDFlMzBhYjdhMTEwMmRlYTlkMmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-07T22:16:07Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-07T22:16:07Z"}, "message": "Remove dyn dispatch", "tree": {"sha": "393fb79e9fb06afe26eddfa66a59113a10dba26c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/393fb79e9fb06afe26eddfa66a59113a10dba26c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff1c82216cc05f2621a301e30ab7a1102dea9d2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff1c82216cc05f2621a301e30ab7a1102dea9d2b", "html_url": "https://github.com/rust-lang/rust/commit/ff1c82216cc05f2621a301e30ab7a1102dea9d2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff1c82216cc05f2621a301e30ab7a1102dea9d2b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcfda94664b454f60be2dbc1b564ed63aa4c3ec5", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcfda94664b454f60be2dbc1b564ed63aa4c3ec5", "html_url": "https://github.com/rust-lang/rust/commit/fcfda94664b454f60be2dbc1b564ed63aa4c3ec5"}], "stats": {"total": 86, "additions": 65, "deletions": 21}, "files": [{"sha": "0b6868547e55f7ac8f2e7159f2d2ad2fad455bb6", "filename": "crates/libsyntax2/src/ast/mod.rs", "status": "modified", "additions": 38, "deletions": 9, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ff1c82216cc05f2621a301e30ab7a1102dea9d2b/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff1c82216cc05f2621a301e30ab7a1102dea9d2b/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs?ref=ff1c82216cc05f2621a301e30ab7a1102dea9d2b", "patch": "@@ -1,10 +1,13 @@\n mod generated;\n \n+use std::marker::PhantomData;\n+\n use itertools::Itertools;\n use smol_str::SmolStr;\n \n use {\n     SyntaxNodeRef, SyntaxKind::*,\n+    yellow::{RefRoot, SyntaxNodeChildren},\n };\n pub use self::generated::*;\n \n@@ -33,8 +36,8 @@ pub trait ArgListOwner<'a>: AstNode<'a> {\n }\n \n pub trait FnDefOwner<'a>: AstNode<'a> {\n-    fn functions(self) -> Box<Iterator<Item=FnDef<'a>> + 'a> {\n-        Box::new(children(self))\n+    fn functions(self) -> AstNodeChildren<'a, FnDef<'a>> {\n+        children(self)\n     }\n }\n \n@@ -49,8 +52,8 @@ pub trait TypeParamsOwner<'a>: AstNode<'a> {\n }\n \n pub trait AttrsOwner<'a>: AstNode<'a> {\n-    fn attrs(self) -> Box<Iterator<Item=Attr<'a>> + 'a> {\n-        Box::new(children(self))\n+    fn attrs(self) -> AstNodeChildren<'a, Attr<'a>> {\n+        children(self)\n     }\n }\n \n@@ -155,7 +158,7 @@ impl<'a> IfExpr<'a> {\n     pub fn else_branch(self) -> Option<Block<'a>> {\n         self.blocks().nth(1)\n     }\n-    fn blocks(self) -> impl Iterator<Item=Block<'a>> {\n+    fn blocks(self) -> AstNodeChildren<'a, Block<'a>> {\n         children(self)\n     }\n }\n@@ -164,8 +167,34 @@ fn child_opt<'a, P: AstNode<'a>, C: AstNode<'a>>(parent: P) -> Option<C> {\n     children(parent).next()\n }\n \n-fn children<'a, P: AstNode<'a>, C: AstNode<'a>>(parent: P) -> impl Iterator<Item=C> + 'a {\n-    parent.syntax()\n-        .children()\n-        .filter_map(C::cast)\n+fn children<'a, P: AstNode<'a>, C: AstNode<'a>>(parent: P) -> AstNodeChildren<'a, C> {\n+    AstNodeChildren::new(parent.syntax())\n+}\n+\n+\n+#[derive(Debug)]\n+pub struct AstNodeChildren<'a, N> {\n+    inner: SyntaxNodeChildren<RefRoot<'a>>,\n+    ph: PhantomData<N>,\n+}\n+\n+impl<'a, N> AstNodeChildren<'a, N> {\n+    fn new(parent: SyntaxNodeRef<'a>) -> Self {\n+        AstNodeChildren {\n+            inner: parent.children(),\n+            ph: PhantomData,\n+        }\n+    }\n+}\n+\n+impl<'a, N: AstNode<'a>> Iterator for AstNodeChildren<'a, N> {\n+    type Item = N;\n+    fn next(&mut self) -> Option<N> {\n+        loop {\n+            match N::cast(self.inner.next()?) {\n+                Some(n) => return Some(n),\n+                None => (),\n+            }\n+        }\n+    }\n }"}, {"sha": "0596e702f896a38cbf3bf680447d863cc9fce573", "filename": "crates/libsyntax2/src/yellow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff1c82216cc05f2621a301e30ab7a1102dea9d2b/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff1c82216cc05f2621a301e30ab7a1102dea9d2b/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fmod.rs?ref=ff1c82216cc05f2621a301e30ab7a1102dea9d2b", "patch": "@@ -8,7 +8,7 @@ use std::{\n     sync::Arc,\n     ptr,\n };\n-pub use self::syntax::{SyntaxNode, SyntaxNodeRef, SyntaxError};\n+pub use self::syntax::{SyntaxNode, SyntaxNodeRef, SyntaxError, SyntaxNodeChildren};\n pub(crate) use self::{\n     builder::GreenBuilder,\n     green::GreenNode,"}, {"sha": "1d99cab4a94520a034e15bfd40db8a9274ac932b", "filename": "crates/libsyntax2/src/yellow/syntax.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ff1c82216cc05f2621a301e30ab7a1102dea9d2b/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff1c82216cc05f2621a301e30ab7a1102dea9d2b/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fsyntax.rs?ref=ff1c82216cc05f2621a301e30ab7a1102dea9d2b", "patch": "@@ -1,6 +1,7 @@\n use std::{\n     fmt, sync::Arc,\n     hash::{Hasher, Hash},\n+    ops::Range,\n };\n \n use smol_str::SmolStr;\n@@ -93,17 +94,11 @@ impl<R: TreeRoot> SyntaxNode<R> {\n         SyntaxText::new(self.borrowed())\n     }\n \n-    pub fn children(&self) -> impl Iterator<Item = SyntaxNode<R>> {\n-        let red = self.red;\n-        let n_children = self.red().n_children();\n-        let root = self.root.clone();\n-        (0..n_children).map(move |i| {\n-            let red = unsafe { red.get(root.syntax_root()) };\n-            SyntaxNode {\n-                root: root.clone(),\n-                red: red.get_child(i).unwrap(),\n-            }\n-        })\n+    pub fn children(&self) -> SyntaxNodeChildren<R> {\n+        SyntaxNodeChildren {\n+            parent: self.clone(),\n+            iter: (0..self.red().n_children())\n+        }\n     }\n \n     pub fn parent(&self) -> Option<SyntaxNode<R>> {\n@@ -192,6 +187,26 @@ impl<R: TreeRoot> fmt::Debug for SyntaxNode<R> {\n     }\n }\n \n+#[derive(Debug)]\n+pub struct SyntaxNodeChildren<R: TreeRoot> {\n+    parent: SyntaxNode<R>,\n+    iter: Range<usize>,\n+}\n+\n+impl<R: TreeRoot> Iterator for SyntaxNodeChildren<R> {\n+    type Item = SyntaxNode<R>;\n+\n+    fn next(&mut self) -> Option<SyntaxNode<R>> {\n+        self.iter.next().map(|i| {\n+            let red = self.parent.red();\n+            SyntaxNode {\n+                root: self.parent.root.clone(),\n+                red: red.get_child(i).unwrap(),\n+            }\n+        })\n+    }\n+}\n+\n fn has_short_text(kind: SyntaxKind) -> bool {\n     match kind {\n         IDENT | LIFETIME | INT_NUMBER | FLOAT_NUMBER => true,"}]}