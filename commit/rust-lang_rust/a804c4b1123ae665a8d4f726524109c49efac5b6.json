{"sha": "a804c4b1123ae665a8d4f726524109c49efac5b6", "node_id": "C_kwDOAAsO6NoAKGE4MDRjNGIxMTIzYWU2NjVhOGQ0ZjcyNjUyNDEwOWM0OWVmYWM1YjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-05T04:13:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-05T04:13:35Z"}, "message": "Auto merge of #89545 - workingjubilee:rollup-ooxf3p2, r=workingjubilee\n\nRollup of 15 pull requests\n\nSuccessful merges:\n\n - #87993 (Stabilize try_reserve)\n - #88090 (Perform type inference in range pattern)\n - #88780 (Added abs_diff for integer types.)\n - #89270 (path.push() should work as expected on windows verbatim paths)\n - #89413 (Correctly handle supertraits for min_specialization)\n - #89456 (Update to the final LLVM 13.0.0 release)\n - #89466 (Fix bug with query modifier parsing)\n - #89473 (Fix extra `non_snake_case` warning for shorthand field bindings)\n - #89474 (rustdoc: Improve doctest pass's name and module's name)\n - #89478 (Fixed numerus of error message)\n - #89480 (Add test for issue 89118.)\n - #89487 (Try to recover from a `=>` -> `=` or `->` typo in a match arm)\n - #89494 (Deny `where` clauses on `auto` traits)\n - #89511 (:arrow_up: rust-analyzer)\n - #89536 (update Miri)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "da839dfc8b539262cc668687d423aee93cd2002a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da839dfc8b539262cc668687d423aee93cd2002a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a804c4b1123ae665a8d4f726524109c49efac5b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a804c4b1123ae665a8d4f726524109c49efac5b6", "html_url": "https://github.com/rust-lang/rust/commit/a804c4b1123ae665a8d4f726524109c49efac5b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a804c4b1123ae665a8d4f726524109c49efac5b6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "003d8d3f56848b6f3833340e859b089a09aea36a", "url": "https://api.github.com/repos/rust-lang/rust/commits/003d8d3f56848b6f3833340e859b089a09aea36a", "html_url": "https://github.com/rust-lang/rust/commit/003d8d3f56848b6f3833340e859b089a09aea36a"}, {"sha": "2ae8ced803a6852ef309b7f1c3af6977f87d5368", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ae8ced803a6852ef309b7f1c3af6977f87d5368", "html_url": "https://github.com/rust-lang/rust/commit/2ae8ced803a6852ef309b7f1c3af6977f87d5368"}], "stats": {"total": 1084, "additions": 787, "deletions": 297}, "files": [{"sha": "c60a0dd2c7c43a008e785973322e157a6b19ff19", "filename": ".gitmodules", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -34,7 +34,7 @@\n [submodule \"src/llvm-project\"]\n \tpath = src/llvm-project\n \turl = https://github.com/rust-lang/llvm-project.git\n-\tbranch = rustc/13.0-2021-08-08\n+\tbranch = rustc/13.0-2021-09-30\n [submodule \"src/doc/embedded-book\"]\n \tpath = src/doc/embedded-book\n \turl = https://github.com/rust-embedded/book.git"}, {"sha": "adf14bfddfd7f36172d795dd9576b2a7a02792ad", "filename": "Cargo.lock", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -360,7 +360,7 @@ version = \"0.1.0\"\n dependencies = [\n  \"directories\",\n  \"rustc-workspace-hack\",\n- \"rustc_version\",\n+ \"rustc_version 0.3.3\",\n  \"serde\",\n  \"serde_json\",\n  \"vergen\",\n@@ -1092,19 +1092,6 @@ dependencies = [\n  \"termcolor\",\n ]\n \n-[[package]]\n-name = \"env_logger\"\n-version = \"0.8.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"54532e3223c5af90a6a757c90b5c5521564b07e5e7a958681bcd2afad421cdcd\"\n-dependencies = [\n- \"atty\",\n- \"humantime 2.0.1\",\n- \"log\",\n- \"regex\",\n- \"termcolor\",\n-]\n-\n [[package]]\n name = \"env_logger\"\n version = \"0.9.0\"\n@@ -2250,15 +2237,15 @@ version = \"0.1.0\"\n dependencies = [\n  \"colored\",\n  \"compiletest_rs\",\n- \"env_logger 0.8.1\",\n+ \"env_logger 0.9.0\",\n  \"getrandom 0.2.0\",\n  \"hex 0.4.2\",\n  \"libc\",\n  \"log\",\n  \"measureme\",\n  \"rand 0.8.4\",\n  \"rustc-workspace-hack\",\n- \"rustc_version\",\n+ \"rustc_version 0.4.0\",\n  \"shell-escape\",\n  \"smallvec\",\n ]\n@@ -4548,6 +4535,15 @@ dependencies = [\n  \"semver 0.11.0\",\n ]\n \n+[[package]]\n+name = \"rustc_version\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366\"\n+dependencies = [\n+ \"semver 1.0.3\",\n+]\n+\n [[package]]\n name = \"rustdoc\"\n version = \"0.0.0\"\n@@ -4908,9 +4904,9 @@ checksum = \"c111b5bd5695e56cffe5129854aa230b39c93a305372fdbb2668ca2394eea9f8\"\n \n [[package]]\n name = \"smallvec\"\n-version = \"1.6.1\"\n+version = \"1.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fe0f37c9e8f3c5a4a66ad655a93c74daac4ad00c441533bf5c6e7990bb42604e\"\n+checksum = \"1ecab6c735a6bb4139c0caafd0cc3635748bbb3acf4550e8138122099251f309\"\n \n [[package]]\n name = \"snap\""}, {"sha": "db066d7c6a5195dd184a711317bd08568bd67c81", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -295,6 +295,7 @@ impl TokenKind {\n         match *self {\n             Comma => Some(vec![Dot, Lt, Semi]),\n             Semi => Some(vec![Colon, Comma]),\n+            FatArrow => Some(vec![Eq, RArrow]),\n             _ => None,\n         }\n     }"}, {"sha": "968e9fa3e24802705600c99b3e593cce04ab1b12", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 36, "deletions": 13, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -683,31 +683,53 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n+    fn emit_e0568(&self, span: Span, ident_span: Span) {\n+        struct_span_err!(\n+            self.session,\n+            span,\n+            E0568,\n+            \"auto traits cannot have super traits or lifetime bounds\"\n+        )\n+        .span_label(ident_span, \"auto trait cannot have super traits or lifetime bounds\")\n+        .span_suggestion(\n+            span,\n+            \"remove the super traits or lifetime bounds\",\n+            String::new(),\n+            Applicability::MachineApplicable,\n+        )\n+        .emit();\n+    }\n+\n     fn deny_super_traits(&self, bounds: &GenericBounds, ident_span: Span) {\n-        if let [first @ last] | [first, .., last] = &bounds[..] {\n-            let span = first.span().to(last.span());\n-            struct_span_err!(self.session, span, E0568, \"auto traits cannot have super traits\")\n-                .span_label(ident_span, \"auto trait cannot have super traits\")\n-                .span_suggestion(\n-                    span,\n-                    \"remove the super traits\",\n-                    String::new(),\n-                    Applicability::MachineApplicable,\n-                )\n-                .emit();\n+        if let [.., last] = &bounds[..] {\n+            let span = ident_span.shrink_to_hi().to(last.span());\n+            self.emit_e0568(span, ident_span);\n+        }\n+    }\n+\n+    fn deny_where_clause(&self, where_clause: &WhereClause, ident_span: Span) {\n+        if !where_clause.predicates.is_empty() {\n+            self.emit_e0568(where_clause.span, ident_span);\n         }\n     }\n \n     fn deny_items(&self, trait_items: &[P<AssocItem>], ident_span: Span) {\n         if !trait_items.is_empty() {\n             let spans: Vec<_> = trait_items.iter().map(|i| i.ident.span).collect();\n+            let total_span = trait_items.first().unwrap().span.to(trait_items.last().unwrap().span);\n             struct_span_err!(\n                 self.session,\n                 spans,\n                 E0380,\n-                \"auto traits cannot have methods or associated items\"\n+                \"auto traits cannot have associated items\"\n+            )\n+            .span_suggestion(\n+                total_span,\n+                \"remove these associated items\",\n+                String::new(),\n+                Applicability::MachineApplicable,\n             )\n-            .span_label(ident_span, \"auto trait cannot have items\")\n+            .span_label(ident_span, \"auto trait cannot have associated items\")\n             .emit();\n         }\n     }\n@@ -1184,6 +1206,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     // Auto traits cannot have generics, super traits nor contain items.\n                     self.deny_generic_params(generics, item.ident.span);\n                     self.deny_super_traits(bounds, item.ident.span);\n+                    self.deny_where_clause(&generics.where_clause, item.ident.span);\n                     self.deny_items(trait_items, item.ident.span);\n                 }\n                 self.no_questions_in_bounds(bounds, \"supertraits\", true);"}, {"sha": "2de05cd4e56794180ae27b5fb476bed3f07e101c", "filename": "compiler/rustc_data_structures/src/sso/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fmap.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -31,7 +31,7 @@ const SSO_ARRAY_SIZE: usize = 8;\n //\n // Missing HashMap API:\n //   all hasher-related\n-//   try_reserve (unstable)\n+//   try_reserve\n //   shrink_to (unstable)\n //   drain_filter (unstable)\n //   into_keys/into_values (unstable)"}, {"sha": "29baf4e1ddb661c4a4a421e9c58e3b0a81e50afc", "filename": "compiler/rustc_data_structures/src/sso/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -13,7 +13,7 @@ use super::map::SsoHashMap;\n //\n // Missing HashSet API:\n //   all hasher-related\n-//   try_reserve (unstable)\n+//   try_reserve\n //   shrink_to (unstable)\n //   drain_filter (unstable)\n //   replace"}, {"sha": "bcddc4f3d7643b539b23e67f92704537ba034b2e", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -437,12 +437,13 @@ impl<'tcx> LateLintPass<'tcx> for NonSnakeCase {\n             if let hir::Node::Pat(parent_pat) = cx.tcx.hir().get(cx.tcx.hir().get_parent_node(hid))\n             {\n                 if let PatKind::Struct(_, field_pats, _) = &parent_pat.kind {\n-                    for field in field_pats.iter() {\n-                        if field.ident != ident {\n-                            // Only check if a new name has been introduced, to avoid warning\n-                            // on both the struct definition and this pattern.\n-                            self.check_snake_case(cx, \"variable\", &ident);\n-                        }\n+                    if field_pats\n+                        .iter()\n+                        .any(|field| !field.is_shorthand && field.pat.hir_id == p.hir_id)\n+                    {\n+                        // Only check if a new name has been introduced, to avoid warning\n+                        // on both the struct definition and this pattern.\n+                        self.check_snake_case(cx, \"variable\", &ident);\n                     }\n                     return;\n                 }"}, {"sha": "005017185c148458dd62271b689b4083209f35ba", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -455,28 +455,28 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n \n         // Pass on the fatal_cycle modifier\n         if let Some(fatal_cycle) = &modifiers.fatal_cycle {\n-            attributes.push(quote! { #fatal_cycle });\n+            attributes.push(quote! { (#fatal_cycle) });\n         };\n         // Pass on the storage modifier\n         if let Some(ref ty) = modifiers.storage {\n             let span = ty.span();\n-            attributes.push(quote_spanned! {span=> storage(#ty) });\n+            attributes.push(quote_spanned! {span=> (storage #ty) });\n         };\n         // Pass on the cycle_delay_bug modifier\n         if let Some(cycle_delay_bug) = &modifiers.cycle_delay_bug {\n-            attributes.push(quote! { #cycle_delay_bug });\n+            attributes.push(quote! { (#cycle_delay_bug) });\n         };\n         // Pass on the no_hash modifier\n         if let Some(no_hash) = &modifiers.no_hash {\n-            attributes.push(quote! { #no_hash });\n+            attributes.push(quote! { (#no_hash) });\n         };\n         // Pass on the anon modifier\n         if let Some(anon) = &modifiers.anon {\n-            attributes.push(quote! { #anon });\n+            attributes.push(quote! { (#anon) });\n         };\n         // Pass on the eval_always modifier\n         if let Some(eval_always) = &modifiers.eval_always {\n-            attributes.push(quote! { #eval_always });\n+            attributes.push(quote! { (#eval_always) });\n         };\n \n         // This uses the span of the query definition for the commas,"}, {"sha": "07d42902be5dd379803e95a051528df461895371", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -140,11 +140,11 @@ macro_rules! is_eval_always_attr {\n }\n \n macro_rules! contains_anon_attr {\n-    ($($attr:ident $(($($attr_args:tt)*))* ),*) => ({$(is_anon_attr!($attr) | )* false});\n+    ($(($attr:ident $($attr_args:tt)* )),*) => ({$(is_anon_attr!($attr) | )* false});\n }\n \n macro_rules! contains_eval_always_attr {\n-    ($($attr:ident $(($($attr_args:tt)*))* ),*) => ({$(is_eval_always_attr!($attr) | )* false});\n+    ($(($attr:ident $($attr_args:tt)* )),*) => ({$(is_eval_always_attr!($attr) | )* false});\n }\n \n #[allow(non_upper_case_globals)]"}, {"sha": "594ac899f158f233ef35bc19e45395a7a4705d54", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -52,7 +52,6 @@\n #![feature(thread_local_const_init)]\n #![feature(trusted_step)]\n #![feature(try_blocks)]\n-#![feature(try_reserve)]\n #![feature(try_reserve_kind)]\n #![feature(nonzero_ops)]\n #![recursion_limit = \"512\"]"}, {"sha": "e5fd38252da53174b27516ae4d0931809e9626f4", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -111,11 +111,11 @@ macro_rules! query_storage {\n     ([][$K:ty, $V:ty]) => {\n         <DefaultCacheSelector as CacheSelector<$K, $V>>::Cache\n     };\n-    ([storage($ty:ty) $($rest:tt)*][$K:ty, $V:ty]) => {\n+    ([(storage $ty:ty) $($rest:tt)*][$K:ty, $V:ty]) => {\n         <$ty as CacheSelector<$K, $V>>::Cache\n     };\n-    ([$other:ident $(($($other_args:tt)*))* $(, $($modifiers:tt)*)*][$($args:tt)*]) => {\n-        query_storage!([$($($modifiers)*)*][$($args)*])\n+    ([$other:tt $($modifiers:tt)*][$($args:tt)*]) => {\n+        query_storage!([$($modifiers)*][$($args)*])\n     };\n }\n "}, {"sha": "79f46be73f6c27442dca3eec5085ae8461c41ced", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -2322,7 +2322,24 @@ impl<'a> Parser<'a> {\n                 None\n             };\n             let arrow_span = this.token.span;\n-            this.expect(&token::FatArrow)?;\n+            if let Err(mut err) = this.expect(&token::FatArrow) {\n+                // We might have a `=>` -> `=` or `->` typo (issue #89396).\n+                if TokenKind::FatArrow\n+                    .similar_tokens()\n+                    .map_or(false, |similar_tokens| similar_tokens.contains(&this.token.kind))\n+                {\n+                    err.span_suggestion(\n+                        this.token.span,\n+                        \"try using a fat arrow here\",\n+                        \"=>\".to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                    err.emit();\n+                    this.bump();\n+                } else {\n+                    return Err(err);\n+                }\n+            }\n             let arm_start_span = this.token.span;\n \n             let expr = this.parse_expr_res(Restrictions::STMT_EXPR, None).map_err(|mut err| {"}, {"sha": "818b798ab55e730f3dd7eadc00425d8d0939eedd", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -253,53 +253,53 @@ macro_rules! handle_cycle_error {\n         $error.emit();\n         Value::from_cycle_error($tcx)\n     }};\n-    ([fatal_cycle $($rest:tt)*][$tcx:expr, $error:expr]) => {{\n+    ([(fatal_cycle) $($rest:tt)*][$tcx:expr, $error:expr]) => {{\n         $error.emit();\n         $tcx.sess.abort_if_errors();\n         unreachable!()\n     }};\n-    ([cycle_delay_bug $($rest:tt)*][$tcx:expr, $error:expr]) => {{\n+    ([(cycle_delay_bug) $($rest:tt)*][$tcx:expr, $error:expr]) => {{\n         $error.delay_as_bug();\n         Value::from_cycle_error($tcx)\n     }};\n-    ([$other:ident $(($($other_args:tt)*))* $(, $($modifiers:tt)*)*][$($args:tt)*]) => {\n-        handle_cycle_error!([$($($modifiers)*)*][$($args)*])\n+    ([$other:tt $($modifiers:tt)*][$($args:tt)*]) => {\n+        handle_cycle_error!([$($modifiers)*][$($args)*])\n     };\n }\n \n macro_rules! is_anon {\n     ([]) => {{\n         false\n     }};\n-    ([anon $($rest:tt)*]) => {{\n+    ([(anon) $($rest:tt)*]) => {{\n         true\n     }};\n-    ([$other:ident $(($($other_args:tt)*))* $(, $($modifiers:tt)*)*]) => {\n-        is_anon!([$($($modifiers)*)*])\n+    ([$other:tt $($modifiers:tt)*]) => {\n+        is_anon!([$($modifiers)*])\n     };\n }\n \n macro_rules! is_eval_always {\n     ([]) => {{\n         false\n     }};\n-    ([eval_always $($rest:tt)*]) => {{\n+    ([(eval_always) $($rest:tt)*]) => {{\n         true\n     }};\n-    ([$other:ident $(($($other_args:tt)*))* $(, $($modifiers:tt)*)*]) => {\n-        is_eval_always!([$($($modifiers)*)*])\n+    ([$other:tt $($modifiers:tt)*]) => {\n+        is_eval_always!([$($modifiers)*])\n     };\n }\n \n macro_rules! hash_result {\n     ([][$hcx:expr, $result:expr]) => {{\n         dep_graph::hash_result($hcx, &$result)\n     }};\n-    ([no_hash $($rest:tt)*][$hcx:expr, $result:expr]) => {{\n+    ([(no_hash) $($rest:tt)*][$hcx:expr, $result:expr]) => {{\n         None\n     }};\n-    ([$other:ident $(($($other_args:tt)*))* $(, $($modifiers:tt)*)*][$($args:tt)*]) => {\n-        hash_result!([$($($modifiers)*)*][$($args)*])\n+    ([$other:tt $($modifiers:tt)*][$($args:tt)*]) => {\n+        hash_result!([$($modifiers)*][$($args)*])\n     };\n }\n "}, {"sha": "cd678b9644622385994d3a813dfcba01f1797217", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -10,7 +10,9 @@ use crate::traits::normalize_projection_type;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{error_code, struct_span_err, Applicability, DiagnosticBuilder, Style};\n+use rustc_errors::{\n+    error_code, pluralize, struct_span_err, Applicability, DiagnosticBuilder, Style,\n+};\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n@@ -2273,7 +2275,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     parent_trait_ref = child_trait_ref;\n                 }\n                 if count > 0 {\n-                    err.note(&format!(\"{} redundant requirements hidden\", count));\n+                    err.note(&format!(\n+                        \"{} redundant requirement{} hidden\",\n+                        count,\n+                        pluralize!(count)\n+                    ));\n                     err.note(&format!(\n                         \"required because of the requirements on the impl of `{}` for `{}`\",\n                         parent_trait_ref.print_only_trait_path(),"}, {"sha": "b31d6d68b0a245b4a8d2215ef88a533bb99973a5", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -64,7 +64,9 @@ pub use self::specialize::specialization_graph::FutureCompatOverlapErrorKind;\n pub use self::specialize::{specialization_graph, translate_substs, OverlapError};\n pub use self::structural_match::search_for_structural_match_violation;\n pub use self::structural_match::NonStructuralMatchTy;\n-pub use self::util::{elaborate_predicates, elaborate_trait_ref, elaborate_trait_refs};\n+pub use self::util::{\n+    elaborate_obligations, elaborate_predicates, elaborate_trait_ref, elaborate_trait_refs,\n+};\n pub use self::util::{expand_trait_aliases, TraitAliasExpander};\n pub use self::util::{\n     get_vtable_index_of_object_method, impl_item_is_final, predicate_for_trait_def, upcast_choices,"}, {"sha": "98bec3f6eac5108a4882834a9a3832f30b59f9f9", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 43, "deletions": 16, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -449,16 +449,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ti: TopInfo<'tcx>,\n     ) -> Ty<'tcx> {\n         let calc_side = |opt_expr: Option<&'tcx hir::Expr<'tcx>>| match opt_expr {\n-            None => (None, None),\n+            None => None,\n             Some(expr) => {\n                 let ty = self.check_expr(expr);\n-                // Check that the end-point is of numeric or char type.\n-                let fail = !(ty.is_numeric() || ty.is_char() || ty.references_error());\n-                (Some(ty), Some((fail, ty, expr.span)))\n+                // Check that the end-point is possibly of numeric or char type.\n+                // The early check here is not for correctness, but rather better\n+                // diagnostics (e.g. when `&str` is being matched, `expected` will\n+                // be peeled to `str` while ty here is still `&str`, if we don't\n+                // err ealy here, a rather confusing unification error will be\n+                // emitted instead).\n+                let fail =\n+                    !(ty.is_numeric() || ty.is_char() || ty.is_ty_var() || ty.references_error());\n+                Some((fail, ty, expr.span))\n             }\n         };\n-        let (lhs_ty, lhs) = calc_side(lhs);\n-        let (rhs_ty, rhs) = calc_side(rhs);\n+        let mut lhs = calc_side(lhs);\n+        let mut rhs = calc_side(rhs);\n \n         if let (Some((true, ..)), _) | (_, Some((true, ..))) = (lhs, rhs) {\n             // There exists a side that didn't meet our criteria that the end-point\n@@ -467,25 +473,42 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return self.tcx.ty_error();\n         }\n \n-        // Now that we know the types can be unified we find the unified type\n-        // and use it to type the entire expression.\n-        let common_type = self.resolve_vars_if_possible(lhs_ty.or(rhs_ty).unwrap_or(expected));\n-\n+        // Unify each side with `expected`.\n         // Subtyping doesn't matter here, as the value is some kind of scalar.\n-        let demand_eqtype = |x, y| {\n-            if let Some((_, x_ty, x_span)) = x {\n+        let demand_eqtype = |x: &mut _, y| {\n+            if let Some((ref mut fail, x_ty, x_span)) = *x {\n                 if let Some(mut err) = self.demand_eqtype_pat_diag(x_span, expected, x_ty, ti) {\n                     if let Some((_, y_ty, y_span)) = y {\n                         self.endpoint_has_type(&mut err, y_span, y_ty);\n                     }\n                     err.emit();\n+                    *fail = true;\n                 };\n             }\n         };\n-        demand_eqtype(lhs, rhs);\n-        demand_eqtype(rhs, lhs);\n+        demand_eqtype(&mut lhs, rhs);\n+        demand_eqtype(&mut rhs, lhs);\n+\n+        if let (Some((true, ..)), _) | (_, Some((true, ..))) = (lhs, rhs) {\n+            return self.tcx.ty_error();\n+        }\n \n-        common_type\n+        // Find the unified type and check if it's of numeric or char type again.\n+        // This check is needed if both sides are inference variables.\n+        // We require types to be resolved here so that we emit inference failure\n+        // rather than \"_ is not a char or numeric\".\n+        let ty = self.structurally_resolved_type(span, expected);\n+        if !(ty.is_numeric() || ty.is_char() || ty.references_error()) {\n+            if let Some((ref mut fail, _, _)) = lhs {\n+                *fail = true;\n+            }\n+            if let Some((ref mut fail, _, _)) = rhs {\n+                *fail = true;\n+            }\n+            self.emit_err_pat_range(span, lhs, rhs);\n+            return self.tcx.ty_error();\n+        }\n+        ty\n     }\n \n     fn endpoint_has_type(&self, err: &mut DiagnosticBuilder<'_>, span: Span, ty: Ty<'_>) {\n@@ -512,10 +535,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             E0029,\n             \"only `char` and numeric types are allowed in range patterns\"\n         );\n-        let msg = |ty| format!(\"this is of type `{}` but it should be `char` or numeric\", ty);\n+        let msg = |ty| {\n+            let ty = self.resolve_vars_if_possible(ty);\n+            format!(\"this is of type `{}` but it should be `char` or numeric\", ty)\n+        };\n         let mut one_side_err = |first_span, first_ty, second: Option<(bool, Ty<'tcx>, Span)>| {\n             err.span_label(first_span, &msg(first_ty));\n             if let Some((_, ty, sp)) = second {\n+                let ty = self.resolve_vars_if_possible(ty);\n                 self.endpoint_has_type(&mut err, sp, ty);\n             }\n         };"}, {"sha": "f4bb5761c19bdbb944a4e88602786178ce9c49a5", "filename": "compiler/rustc_typeck/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -74,7 +74,7 @@ use rustc_infer::infer::{InferCtxt, RegionckMode, TyCtxtInferExt};\n use rustc_infer::traits::specialization_graph::Node;\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts, SubstsRef};\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n-use rustc_middle::ty::{self, InstantiatedPredicates, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n use rustc_span::Span;\n use rustc_trait_selection::traits::{self, translate_substs, wf};\n \n@@ -294,13 +294,27 @@ fn check_predicates<'tcx>(\n     span: Span,\n ) {\n     let tcx = infcx.tcx;\n-    let impl1_predicates = tcx.predicates_of(impl1_def_id).instantiate(tcx, impl1_substs);\n+    let impl1_predicates: Vec<_> = traits::elaborate_predicates(\n+        tcx,\n+        tcx.predicates_of(impl1_def_id).instantiate(tcx, impl1_substs).predicates.into_iter(),\n+    )\n+    .map(|obligation| obligation.predicate)\n+    .collect();\n+\n     let mut impl2_predicates = if impl2_node.is_from_trait() {\n         // Always applicable traits have to be always applicable without any\n         // assumptions.\n-        InstantiatedPredicates::empty()\n+        Vec::new()\n     } else {\n-        tcx.predicates_of(impl2_node.def_id()).instantiate(tcx, impl2_substs)\n+        traits::elaborate_predicates(\n+            tcx,\n+            tcx.predicates_of(impl2_node.def_id())\n+                .instantiate(tcx, impl2_substs)\n+                .predicates\n+                .into_iter(),\n+        )\n+        .map(|obligation| obligation.predicate)\n+        .collect()\n     };\n     debug!(\n         \"check_always_applicable(\\nimpl1_predicates={:?},\\nimpl2_predicates={:?}\\n)\",\n@@ -322,13 +336,12 @@ fn check_predicates<'tcx>(\n     // which is sound because we forbid impls like the following\n     //\n     // impl<D: Debug> AlwaysApplicable for D { }\n-    let always_applicable_traits =\n-        impl1_predicates.predicates.iter().copied().filter(|&predicate| {\n-            matches!(\n-                trait_predicate_kind(tcx, predicate),\n-                Some(TraitSpecializationKind::AlwaysApplicable)\n-            )\n-        });\n+    let always_applicable_traits = impl1_predicates.iter().copied().filter(|&predicate| {\n+        matches!(\n+            trait_predicate_kind(tcx, predicate),\n+            Some(TraitSpecializationKind::AlwaysApplicable)\n+        )\n+    });\n \n     // Include the well-formed predicates of the type parameters of the impl.\n     for arg in tcx.impl_trait_ref(impl1_def_id).unwrap().substs {\n@@ -340,18 +353,19 @@ fn check_predicates<'tcx>(\n             arg,\n             span,\n         ) {\n-            impl2_predicates\n-                .predicates\n-                .extend(obligations.into_iter().map(|obligation| obligation.predicate))\n+            impl2_predicates.extend(\n+                traits::elaborate_obligations(tcx, obligations)\n+                    .map(|obligation| obligation.predicate),\n+            )\n         }\n     }\n-    impl2_predicates.predicates.extend(\n+    impl2_predicates.extend(\n         traits::elaborate_predicates(tcx, always_applicable_traits)\n             .map(|obligation| obligation.predicate),\n     );\n \n-    for predicate in impl1_predicates.predicates {\n-        if !impl2_predicates.predicates.contains(&predicate) {\n+    for predicate in impl1_predicates {\n+        if !impl2_predicates.contains(&predicate) {\n             check_specialization_on(tcx, predicate, span)\n         }\n     }"}, {"sha": "77d28bdfe647598892f9da5a3f44fb2df0504270", "filename": "library/alloc/src/collections/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -57,7 +57,7 @@ use core::fmt::Display;\n \n /// The error type for `try_reserve` methods.\n #[derive(Clone, PartialEq, Eq, Debug)]\n-#[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n+#[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n pub struct TryReserveError {\n     kind: TryReserveErrorKind,\n }\n@@ -126,7 +126,7 @@ impl From<LayoutError> for TryReserveErrorKind {\n     }\n }\n \n-#[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n+#[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n impl Display for TryReserveError {\n     fn fmt(\n         &self,"}, {"sha": "f4de2b2ebe5dc1afdef8378827fa5b440b5b97ab", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -711,7 +711,6 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(try_reserve)]\n     /// use std::collections::TryReserveError;\n     /// use std::collections::VecDeque;\n     ///\n@@ -730,7 +729,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// }\n     /// # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n     /// ```\n-    #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n+    #[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n     pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         self.try_reserve(additional)\n     }\n@@ -749,7 +748,6 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(try_reserve)]\n     /// use std::collections::TryReserveError;\n     /// use std::collections::VecDeque;\n     ///\n@@ -768,7 +766,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// }\n     /// # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n     /// ```\n-    #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n+    #[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n     pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         let old_cap = self.cap();\n         let used_cap = self.len() + 1;"}, {"sha": "d88b8e398985a94565a81bae1ec41cb4851212f2", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -1009,7 +1009,6 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(try_reserve)]\n     /// use std::collections::TryReserveError;\n     ///\n     /// fn process_data(data: &str) -> Result<String, TryReserveError> {\n@@ -1025,7 +1024,7 @@ impl String {\n     /// }\n     /// # process_data(\"rust\").expect(\"why is the test harness OOMing on 4 bytes?\");\n     /// ```\n-    #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n+    #[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n     pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         self.vec.try_reserve(additional)\n     }\n@@ -1049,7 +1048,6 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(try_reserve)]\n     /// use std::collections::TryReserveError;\n     ///\n     /// fn process_data(data: &str) -> Result<String, TryReserveError> {\n@@ -1065,7 +1063,7 @@ impl String {\n     /// }\n     /// # process_data(\"rust\").expect(\"why is the test harness OOMing on 4 bytes?\");\n     /// ```\n-    #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n+    #[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n     pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         self.vec.try_reserve_exact(additional)\n     }"}, {"sha": "18e191f2b59a28db44c2a045c1fae9da8d94bf85", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -266,14 +266,21 @@ unsafe impl<T, A: Allocator> TrustedLen for IntoIter<T, A> {}\n \n #[doc(hidden)]\n #[unstable(issue = \"none\", feature = \"std_internals\")]\n+#[rustc_unsafe_specialization_marker]\n+pub trait NonDrop {}\n+\n // T: Copy as approximation for !Drop since get_unchecked does not advance self.ptr\n // and thus we can't implement drop-handling\n-//\n+#[unstable(issue = \"none\", feature = \"std_internals\")]\n+impl<T: Copy> NonDrop for T {}\n+\n+#[doc(hidden)]\n+#[unstable(issue = \"none\", feature = \"std_internals\")]\n // TrustedRandomAccess (without NoCoerce) must not be implemented because\n-// subtypes/supertypes of `T` might not be `Copy`\n+// subtypes/supertypes of `T` might not be `NonDrop`\n unsafe impl<T, A: Allocator> TrustedRandomAccessNoCoerce for IntoIter<T, A>\n where\n-    T: Copy,\n+    T: NonDrop,\n {\n     const MAY_HAVE_SIDE_EFFECT: bool = false;\n }"}, {"sha": "4f18a054a0d9899313b610b9755b3566750620b9", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -849,7 +849,6 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(try_reserve)]\n     /// use std::collections::TryReserveError;\n     ///\n     /// fn process_data(data: &[u32]) -> Result<Vec<u32>, TryReserveError> {\n@@ -867,7 +866,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// }\n     /// # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n     /// ```\n-    #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n+    #[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n     pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         self.buf.try_reserve(self.len, additional)\n     }\n@@ -892,7 +891,6 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(try_reserve)]\n     /// use std::collections::TryReserveError;\n     ///\n     /// fn process_data(data: &[u32]) -> Result<Vec<u32>, TryReserveError> {\n@@ -910,7 +908,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// }\n     /// # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n     /// ```\n-    #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n+    #[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n     pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         self.buf.try_reserve_exact(self.len, additional)\n     }"}, {"sha": "6e78534cf5b10d3a515134d933bdc9508fddab12", "filename": "library/alloc/src/vec/source_iter_marker.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -6,24 +6,14 @@ use super::{AsIntoIter, InPlaceDrop, SpecFromIter, SpecFromIterNested, Vec};\n \n /// Specialization marker for collecting an iterator pipeline into a Vec while reusing the\n /// source allocation, i.e. executing the pipeline in place.\n-///\n-/// The SourceIter parent trait is necessary for the specializing function to access the allocation\n-/// which is to be reused. But it is not sufficient for the specialization to be valid. See\n-/// additional bounds on the impl.\n #[rustc_unsafe_specialization_marker]\n-pub(super) trait SourceIterMarker: SourceIter<Source: AsIntoIter> {}\n+pub(super) trait InPlaceIterableMarker {}\n \n-// The std-internal SourceIter/InPlaceIterable traits are only implemented by chains of\n-// Adapter<Adapter<Adapter<IntoIter>>> (all owned by core/std). Additional bounds\n-// on the adapter implementations (beyond `impl<I: Trait> Trait for Adapter<I>`) only depend on other\n-// traits already marked as specialization traits (Copy, TrustedRandomAccess, FusedIterator).\n-// I.e. the marker does not depend on lifetimes of user-supplied types. Modulo the Copy hole, which\n-// several other specializations already depend on.\n-impl<T> SourceIterMarker for T where T: SourceIter<Source: AsIntoIter> + InPlaceIterable {}\n+impl<T> InPlaceIterableMarker for T where T: InPlaceIterable {}\n \n impl<T, I> SpecFromIter<T, I> for Vec<T>\n where\n-    I: Iterator<Item = T> + SourceIterMarker,\n+    I: Iterator<Item = T> + SourceIter<Source: AsIntoIter> + InPlaceIterableMarker,\n {\n     default fn from_iter(mut iterator: I) -> Self {\n         // Additional requirements which cannot expressed via trait bounds. We rely on const eval"}, {"sha": "8c57c804ad2dc149e160344cb55d6f1f525ab5c0", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -8,7 +8,6 @@\n #![feature(new_uninit)]\n #![feature(pattern)]\n #![feature(trusted_len)]\n-#![feature(try_reserve)]\n #![feature(try_reserve_kind)]\n #![feature(unboxed_closures)]\n #![feature(associated_type_bounds)]"}, {"sha": "84e4618844a610ffd503691829a6db12c0c7cabf", "filename": "library/core/src/iter/adapters/enumerate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -249,14 +249,14 @@ impl<I> FusedIterator for Enumerate<I> where I: FusedIterator {}\n unsafe impl<I> TrustedLen for Enumerate<I> where I: TrustedLen {}\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, I: Iterator> SourceIter for Enumerate<I>\n+unsafe impl<I> SourceIter for Enumerate<I>\n where\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "a0afaa326ad633b9b9dbc01ebf7f35b65e94cd47", "filename": "library/core/src/iter/adapters/filter.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -135,15 +135,14 @@ where\n impl<I: FusedIterator, P> FusedIterator for Filter<I, P> where P: FnMut(&I::Item) -> bool {}\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, P, I: Iterator> SourceIter for Filter<I, P>\n+unsafe impl<P, I> SourceIter for Filter<I, P>\n where\n-    P: FnMut(&I::Item) -> bool,\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "e0d665c9e12ba0e2465197f0f642d01e1ea23710", "filename": "library/core/src/iter/adapters/filter_map.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffilter_map.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -129,15 +129,14 @@ where\n impl<B, I: FusedIterator, F> FusedIterator for FilterMap<I, F> where F: FnMut(I::Item) -> Option<B> {}\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, B, I: Iterator, F> SourceIter for FilterMap<I, F>\n+unsafe impl<I, F> SourceIter for FilterMap<I, F>\n where\n-    F: FnMut(I::Item) -> Option<B>,\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "19839fdfe5bc35dd549246f59ce2b650d15c0317", "filename": "library/core/src/iter/adapters/inspect.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Finspect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Finspect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Finspect.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -149,15 +149,14 @@ where\n impl<I: FusedIterator, F> FusedIterator for Inspect<I, F> where F: FnMut(&I::Item) {}\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, I: Iterator, F> SourceIter for Inspect<I, F>\n+unsafe impl<I, F> SourceIter for Inspect<I, F>\n where\n-    F: FnMut(&I::Item),\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "449650a22f4353b0981e1d82cc9f069db0ed36c4", "filename": "library/core/src/iter/adapters/map.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -201,15 +201,14 @@ where\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, B, I: Iterator, F> SourceIter for Map<I, F>\n+unsafe impl<I, F> SourceIter for Map<I, F>\n where\n-    F: FnMut(I::Item) -> B,\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "1e8d6bf3e00e17acca6fb2209eb56e3c794780ab", "filename": "library/core/src/iter/adapters/map_while.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap_while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap_while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmap_while.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -80,15 +80,14 @@ where\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, B, I: Iterator, P> SourceIter for MapWhile<I, P>\n+unsafe impl<I, P> SourceIter for MapWhile<I, P>\n where\n-    P: FnMut(I::Item) -> Option<B>,\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "1e1ce866ff3f29083eb7d15fab2e40c94d8ab2ed", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -92,9 +92,10 @@ pub use self::zip::zip;\n /// [`as_inner`]: SourceIter::as_inner\n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n #[doc(hidden)]\n+#[rustc_specialization_trait]\n pub unsafe trait SourceIter {\n     /// A source stage in an iterator pipeline.\n-    type Source: Iterator;\n+    type Source;\n \n     /// Retrieve the source of an iterator pipeline.\n     ///\n@@ -200,14 +201,14 @@ where\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, I, E> SourceIter for ResultShunt<'_, I, E>\n+unsafe impl<I, E> SourceIter for ResultShunt<'_, I, E>\n where\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut Self::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "20aca323bab79e9cb5761bd8795f891caaef3fe9", "filename": "library/core/src/iter/adapters/peekable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -321,14 +321,14 @@ impl<I: Iterator> Peekable<I> {\n unsafe impl<I> TrustedLen for Peekable<I> where I: TrustedLen {}\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, I: Iterator> SourceIter for Peekable<I>\n+unsafe impl<I: Iterator> SourceIter for Peekable<I>\n where\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "80bfd2231241b3da7d066d894f1cf67020188bd7", "filename": "library/core/src/iter/adapters/scan.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fscan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fscan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fscan.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -90,15 +90,14 @@ where\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<St, F, B, S: Iterator, I: Iterator> SourceIter for Scan<I, St, F>\n+unsafe impl<St, F, I> SourceIter for Scan<I, St, F>\n where\n-    I: SourceIter<Source = S>,\n-    F: FnMut(&mut St, I::Item) -> Option<B>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "565fc224f53ca06bafd5bf2f73790fd794dbc06f", "filename": "library/core/src/iter/adapters/skip.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -222,14 +222,14 @@ where\n impl<I> FusedIterator for Skip<I> where I: FusedIterator {}\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, I: Iterator> SourceIter for Skip<I>\n+unsafe impl<I> SourceIter for Skip<I>\n where\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "f29661779c05650e2ae26444d08bfe0b873577dd", "filename": "library/core/src/iter/adapters/skip_while.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip_while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip_while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip_while.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -105,15 +105,14 @@ where\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, P, I: Iterator> SourceIter for SkipWhile<I, P>\n+unsafe impl<P, I> SourceIter for SkipWhile<I, P>\n where\n-    P: FnMut(&I::Item) -> bool,\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "81f6c294fac13f8f70e8f1528ed32640a7e52ad3", "filename": "library/core/src/iter/adapters/take.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -130,14 +130,14 @@ where\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, I: Iterator> SourceIter for Take<I>\n+unsafe impl<I> SourceIter for Take<I>\n where\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "ded216da952a3f406c885a3c7660dbcbd8d61a81", "filename": "library/core/src/iter/adapters/take_while.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake_while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake_while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake_while.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -118,15 +118,14 @@ where\n }\n \n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, P, I: Iterator> SourceIter for TakeWhile<I, P>\n+unsafe impl<P, I> SourceIter for TakeWhile<I, P>\n where\n-    P: FnMut(&I::Item) -> bool,\n-    I: SourceIter<Source = S>,\n+    I: SourceIter,\n {\n-    type Source = S;\n+    type Source = I::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut I::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }"}, {"sha": "2b7287a413376bf53e2796cc8b25b0dcb1a8722a", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -414,16 +414,14 @@ where\n // Arbitrarily selects the left side of the zip iteration as extractable \"source\"\n // it would require negative trait bounds to be able to try both\n #[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n-unsafe impl<S, A, B> SourceIter for Zip<A, B>\n+unsafe impl<A, B> SourceIter for Zip<A, B>\n where\n-    A: SourceIter<Source = S>,\n-    B: Iterator,\n-    S: Iterator,\n+    A: SourceIter,\n {\n-    type Source = S;\n+    type Source = A::Source;\n \n     #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n+    unsafe fn as_inner(&mut self) -> &mut A::Source {\n         // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.a) }\n     }"}, {"sha": "f1dcdf2c1aa04d2c27b4e0445c73259a97217cc4", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -2235,6 +2235,46 @@ macro_rules! int_impl {\n             }\n         }\n \n+        /// Computes the absolute difference between `self` and `other`.\n+        ///\n+        /// This function always returns the correct answer without overflow or\n+        /// panics by returning an unsigned integer.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// #![feature(int_abs_diff)]\n+        #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".abs_diff(80), 20\", stringify!($UnsignedT), \");\")]\n+        #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".abs_diff(110), 10\", stringify!($UnsignedT), \");\")]\n+        #[doc = concat!(\"assert_eq!((-100\", stringify!($SelfT), \").abs_diff(80), 180\", stringify!($UnsignedT), \");\")]\n+        #[doc = concat!(\"assert_eq!((-100\", stringify!($SelfT), \").abs_diff(-120), 20\", stringify!($UnsignedT), \");\")]\n+        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.abs_diff(\", stringify!($SelfT), \"::MAX), \", stringify!($UnsignedT), \"::MAX);\")]\n+        /// ```\n+        #[unstable(feature = \"int_abs_diff\", issue = \"89492\")]\n+        #[inline]\n+        pub const fn abs_diff(self, other: Self) -> $UnsignedT {\n+            if self < other {\n+                // Converting a non-negative x from signed to unsigned by using\n+                // `x as U` is left unchanged, but a negative x is converted\n+                // to value x + 2^N. Thus if `s` and `o` are binary variables\n+                // respectively indicating whether `self` and `other` are\n+                // negative, we are computing the mathematical value:\n+                //\n+                //    (other + o*2^N) - (self + s*2^N)    mod  2^N\n+                //    other - self + (o-s)*2^N            mod  2^N\n+                //    other - self                        mod  2^N\n+                //\n+                // Finally, taking the mod 2^N of the mathematical value of\n+                // `other - self` does not change it as it already is\n+                // in the range [0, 2^N).\n+                (other as $UnsignedT).wrapping_sub(self as $UnsignedT)\n+            } else {\n+                (self as $UnsignedT).wrapping_sub(other as $UnsignedT)\n+            }\n+        }\n+\n         /// Returns a number representing sign of `self`.\n         ///\n         ///  - `0` if the number is zero"}, {"sha": "7ef8ea23b50281eba60f2ca568d4d2297df45fc3", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -1490,6 +1490,33 @@ macro_rules! uint_impl {\n             (c, b | d)\n         }\n \n+        /// Computes the absolute difference between `self` and `other`.\n+        ///\n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// #![feature(int_abs_diff)]\n+        #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".abs_diff(80), 20\", stringify!($SelfT), \");\")]\n+        #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".abs_diff(110), 10\", stringify!($SelfT), \");\")]\n+        /// ```\n+        #[unstable(feature = \"int_abs_diff\", issue = \"89492\")]\n+        #[inline]\n+        pub const fn abs_diff(self, other: Self) -> Self {\n+            if mem::size_of::<Self>() == 1 {\n+                // Trick LLVM into generating the psadbw instruction when SSE2\n+                // is available and this function is autovectorized for u8's.\n+                (self as i32).wrapping_sub(other as i32).abs() as Self\n+            } else {\n+                if self < other {\n+                    other - self\n+                } else {\n+                    self - other\n+                }\n+            }\n+        }\n+\n         /// Calculates the multiplication of `self` and `rhs`.\n         ///\n         /// Returns a tuple of the multiplication along with a boolean"}, {"sha": "528bb1bf6e9f9feb22f73a6af644ad12bd49bcd6", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -625,14 +625,13 @@ where\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(try_reserve)]\n     /// use std::collections::HashMap;\n     ///\n     /// let mut map: HashMap<&str, isize> = HashMap::new();\n     /// map.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n+    #[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n     pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         self.base.try_reserve(additional).map_err(map_try_reserve_error)\n     }"}, {"sha": "dcfe322095082a4aea5c663478c43b79a47f8a83", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -423,13 +423,12 @@ where\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(try_reserve)]\n     /// use std::collections::HashSet;\n     /// let mut set: HashSet<i32> = HashSet::new();\n     /// set.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n+    #[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n     pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         self.base.try_reserve(additional).map_err(map_try_reserve_error)\n     }"}, {"sha": "a19c3431989c0c262f7aa0115285650f1e87fadf", "filename": "library/std/src/collections/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -420,7 +420,7 @@ pub use self::hash_map::HashMap;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::hash_set::HashSet;\n \n-#[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n+#[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n pub use alloc_crate::collections::TryReserveError;\n #[unstable(\n     feature = \"try_reserve_kind\","}, {"sha": "6ae0bc47a9462ef3bf9812b9b7908b71c5ac850d", "filename": "library/std/src/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -595,7 +595,7 @@ impl Error for char::ParseCharError {\n     }\n }\n \n-#[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n+#[stable(feature = \"try_reserve\", since = \"1.57.0\")]\n impl Error for alloc::collections::TryReserveError {}\n \n #[unstable(feature = \"duration_checked_float\", issue = \"83400\")]"}, {"sha": "0ba4e85886caa3db5ab80770312685e37972ce25", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -331,7 +331,6 @@\n #![feature(total_cmp)]\n #![feature(trace_macros)]\n #![feature(try_blocks)]\n-#![feature(try_reserve)]\n #![feature(try_reserve_kind)]\n #![feature(unboxed_closures)]\n #![feature(unwrap_infallible)]"}, {"sha": "a45ecf6ea8c63ed05ee1ff29482d6546b5fc98dd", "filename": "library/std/src/path.rs", "status": "modified", "additions": 46, "deletions": 7, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -1231,20 +1231,59 @@ impl PathBuf {\n         let mut need_sep = self.as_mut_vec().last().map(|c| !is_sep_byte(*c)).unwrap_or(false);\n \n         // in the special case of `C:` on Windows, do *not* add a separator\n+        let comps = self.components();\n+\n+        if comps.prefix_len() > 0\n+            && comps.prefix_len() == comps.path.len()\n+            && comps.prefix.unwrap().is_drive()\n         {\n-            let comps = self.components();\n-            if comps.prefix_len() > 0\n-                && comps.prefix_len() == comps.path.len()\n-                && comps.prefix.unwrap().is_drive()\n-            {\n-                need_sep = false\n-            }\n+            need_sep = false\n         }\n \n         // absolute `path` replaces `self`\n         if path.is_absolute() || path.prefix().is_some() {\n             self.as_mut_vec().truncate(0);\n \n+        // verbatim paths need . and .. removed\n+        } else if comps.prefix_verbatim() {\n+            let mut buf: Vec<_> = comps.collect();\n+            for c in path.components() {\n+                match c {\n+                    Component::RootDir => {\n+                        buf.truncate(1);\n+                        buf.push(c);\n+                    }\n+                    Component::CurDir => (),\n+                    Component::ParentDir => {\n+                        if let Some(Component::Normal(_)) = buf.last() {\n+                            buf.pop();\n+                        }\n+                    }\n+                    _ => buf.push(c),\n+                }\n+            }\n+\n+            let mut res = OsString::new();\n+            let mut need_sep = false;\n+\n+            for c in buf {\n+                if need_sep && c != Component::RootDir {\n+                    res.push(MAIN_SEP_STR);\n+                }\n+                res.push(c.as_os_str());\n+\n+                need_sep = match c {\n+                    Component::RootDir => false,\n+                    Component::Prefix(prefix) => {\n+                        !prefix.parsed.is_drive() && prefix.parsed.len() > 0\n+                    }\n+                    _ => true,\n+                }\n+            }\n+\n+            self.inner = res;\n+            return;\n+\n         // `path` has a root but no prefix, e.g., `\\windows` (Windows only)\n         } else if path.has_root() {\n             let prefix_len = self.components().prefix_remaining();"}, {"sha": "3973a6829d3d3e42cd9b58f6c37fb7e695d3a168", "filename": "library/std/src/path/tests.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath%2Ftests.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -1262,6 +1262,15 @@ pub fn test_push() {\n         tp!(\"\\\\\\\\.\\\\foo\", \"..\\\\bar\", \"\\\\\\\\.\\\\foo\\\\..\\\\bar\");\n \n         tp!(\"\\\\\\\\?\\\\C:\", \"foo\", \"\\\\\\\\?\\\\C:\\\\foo\"); // this is a weird one\n+\n+        tp!(r\"\\\\?\\C:\\bar\", \"../foo\", r\"\\\\?\\C:\\foo\");\n+        tp!(r\"\\\\?\\C:\\bar\", \"../../foo\", r\"\\\\?\\C:\\foo\");\n+        tp!(r\"\\\\?\\C:\\\", \"../foo\", r\"\\\\?\\C:\\foo\");\n+        tp!(r\"\\\\?\\C:\", r\"D:\\foo/./\", r\"D:\\foo/./\");\n+        tp!(r\"\\\\?\\C:\", r\"\\\\?\\D:\\foo\\.\\\", r\"\\\\?\\D:\\foo\\.\\\");\n+        tp!(r\"\\\\?\\A:\\x\\y\", \"/foo\", r\"\\\\?\\A:\\foo\");\n+        tp!(r\"\\\\?\\A:\", r\"..\\foo\\.\", r\"\\\\?\\A:\\foo\");\n+        tp!(r\"\\\\?\\A:\\x\\y\", r\".\\foo\\.\", r\"\\\\?\\A:\\x\\y\\foo\");\n     }\n }\n "}, {"sha": "5e3bd41b85c7e060c89d94eb829a30f717f7b1c6", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -2,7 +2,7 @@ use crate::clean;\n use crate::core::DocContext;\n use crate::fold::{self, DocFolder};\n use crate::html::markdown::{find_testable_code, ErrorCodes};\n-use crate::passes::doc_test_lints::{should_have_doc_example, Tests};\n+use crate::passes::check_doc_test_visibility::{should_have_doc_example, Tests};\n use crate::passes::Pass;\n use rustc_hir as hir;\n use rustc_lint::builtin::MISSING_DOCS;"}, {"sha": "1f7d6054233dd987b5bb8e0f05b858d3b7791226", "filename": "src/librustdoc/passes/check_doc_test_visibility.rs", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_doc_test_visibility.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -1,6 +1,6 @@\n //! This pass is overloaded and runs two different lints.\n //!\n-//! - MISSING_DOC_CODE_EXAMPLES: this lint is **UNSTABLE** and looks for public items missing doctests\n+//! - MISSING_DOC_CODE_EXAMPLES: this lint is **UNSTABLE** and looks for public items missing doctests.\n //! - PRIVATE_DOC_TESTS: this lint is **STABLE** and looks for private items with doctests.\n \n use super::Pass;\n@@ -15,23 +15,23 @@ use rustc_middle::lint::LintLevelSource;\n use rustc_session::lint;\n use rustc_span::symbol::sym;\n \n-crate const CHECK_PRIVATE_ITEMS_DOC_TESTS: Pass = Pass {\n-    name: \"check-private-items-doc-tests\",\n-    run: check_private_items_doc_tests,\n-    description: \"check private items doc tests\",\n+crate const CHECK_DOC_TEST_VISIBILITY: Pass = Pass {\n+    name: \"check_doc_test_visibility\",\n+    run: check_doc_test_visibility,\n+    description: \"run various visibility-related lints on doctests\",\n };\n \n-struct PrivateItemDocTestLinter<'a, 'tcx> {\n+struct DocTestVisibilityLinter<'a, 'tcx> {\n     cx: &'a mut DocContext<'tcx>,\n }\n \n-crate fn check_private_items_doc_tests(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n-    let mut coll = PrivateItemDocTestLinter { cx };\n+crate fn check_doc_test_visibility(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n+    let mut coll = DocTestVisibilityLinter { cx };\n \n     coll.fold_crate(krate)\n }\n \n-impl<'a, 'tcx> DocFolder for PrivateItemDocTestLinter<'a, 'tcx> {\n+impl<'a, 'tcx> DocFolder for DocTestVisibilityLinter<'a, 'tcx> {\n     fn fold_item(&mut self, item: Item) -> Option<Item> {\n         let dox = item.attrs.collapsed_doc_value().unwrap_or_else(String::new);\n ", "previous_filename": "src/librustdoc/passes/doc_test_lints.rs"}, {"sha": "99ac87db4ff3f389243515e1f58e48fae29c9f74", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -33,8 +33,8 @@ crate use self::propagate_doc_cfg::PROPAGATE_DOC_CFG;\n crate mod collect_intra_doc_links;\n crate use self::collect_intra_doc_links::COLLECT_INTRA_DOC_LINKS;\n \n-mod doc_test_lints;\n-crate use self::doc_test_lints::CHECK_PRIVATE_ITEMS_DOC_TESTS;\n+mod check_doc_test_visibility;\n+crate use self::check_doc_test_visibility::CHECK_DOC_TEST_VISIBILITY;\n \n mod collect_trait_impls;\n crate use self::collect_trait_impls::COLLECT_TRAIT_IMPLS;\n@@ -79,7 +79,7 @@ crate enum Condition {\n \n /// The full list of passes.\n crate const PASSES: &[Pass] = &[\n-    CHECK_PRIVATE_ITEMS_DOC_TESTS,\n+    CHECK_DOC_TEST_VISIBILITY,\n     STRIP_HIDDEN,\n     UNINDENT_COMMENTS,\n     STRIP_PRIVATE,\n@@ -97,7 +97,7 @@ crate const PASSES: &[Pass] = &[\n crate const DEFAULT_PASSES: &[ConditionalPass] = &[\n     ConditionalPass::always(COLLECT_TRAIT_IMPLS),\n     ConditionalPass::always(UNINDENT_COMMENTS),\n-    ConditionalPass::always(CHECK_PRIVATE_ITEMS_DOC_TESTS),\n+    ConditionalPass::always(CHECK_DOC_TEST_VISIBILITY),\n     ConditionalPass::new(STRIP_HIDDEN, WhenNotDocumentHidden),\n     ConditionalPass::new(STRIP_PRIVATE, WhenNotDocumentPrivate),\n     ConditionalPass::new(STRIP_PRIV_IMPORTS, WhenDocumentPrivate),"}, {"sha": "a7348ae0df3c71581dbe3d355fc0fb6ce6332dd0", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -1 +1 @@\n-Subproject commit 522c3e3d9c097b53ede7682cc28544b461597b20\n+Subproject commit a7348ae0df3c71581dbe3d355fc0fb6ce6332dd0"}, {"sha": "73167d08311044cf22103dee283440071a194834", "filename": "src/test/ui/associated-types/impl-wf-cycle-1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-1.stderr?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -15,7 +15,7 @@ note: required because of the requirements on the impl of `Grault` for `(T,)`\n    |\n LL | impl<T: Grault> Grault for (T,)\n    |                 ^^^^^^     ^^^^\n-   = note: 1 redundant requirements hidden\n+   = note: 1 redundant requirement hidden\n    = note: required because of the requirements on the impl of `Grault` for `(T,)`\n \n error[E0275]: overflow evaluating the requirement `<(T,) as Grault>::A == _`\n@@ -29,7 +29,7 @@ note: required because of the requirements on the impl of `Grault` for `(T,)`\n    |\n LL | impl<T: Grault> Grault for (T,)\n    |                 ^^^^^^     ^^^^\n-   = note: 1 redundant requirements hidden\n+   = note: 1 redundant requirement hidden\n    = note: required because of the requirements on the impl of `Grault` for `(T,)`\n \n error[E0275]: overflow evaluating the requirement `<(T,) as Grault>::A == _`\n@@ -43,7 +43,7 @@ note: required because of the requirements on the impl of `Grault` for `(T,)`\n    |\n LL | impl<T: Grault> Grault for (T,)\n    |                 ^^^^^^     ^^^^\n-   = note: 1 redundant requirements hidden\n+   = note: 1 redundant requirement hidden\n    = note: required because of the requirements on the impl of `Grault` for `(T,)`\n \n error: aborting due to 3 previous errors"}, {"sha": "da878ac6222bb0ccd7d7d37c11b2577e33b8cc1d", "filename": "src/test/ui/auto-traits/auto-trait-validation.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-validation.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-validation.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-validation.fixed?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -0,0 +1,13 @@\n+#![feature(auto_traits)]\n+\n+// run-rustfix\n+\n+auto trait Generic {}\n+//~^ auto traits cannot have generic parameters [E0567]\n+auto trait Bound {}\n+//~^ auto traits cannot have super traits or lifetime bounds [E0568]\n+auto trait LifetimeBound {}\n+//~^ auto traits cannot have super traits or lifetime bounds [E0568]\n+auto trait MyTrait {  }\n+//~^ auto traits cannot have associated items [E0380]\n+fn main() {}"}, {"sha": "d43055e270bd50283d2d52a9dd757a730c11903c", "filename": "src/test/ui/auto-traits/auto-trait-validation.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-validation.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -1,9 +1,13 @@\n #![feature(auto_traits)]\n \n+// run-rustfix\n+\n auto trait Generic<T> {}\n //~^ auto traits cannot have generic parameters [E0567]\n auto trait Bound : Copy {}\n-//~^ auto traits cannot have super traits [E0568]\n+//~^ auto traits cannot have super traits or lifetime bounds [E0568]\n+auto trait LifetimeBound : 'static {}\n+//~^ auto traits cannot have super traits or lifetime bounds [E0568]\n auto trait MyTrait { fn foo() {} }\n-//~^ auto traits cannot have methods or associated items [E0380]\n+//~^ auto traits cannot have associated items [E0380]\n fn main() {}"}, {"sha": "2c380e5b09a6eadb2bc52e4b70cac082e5464e33", "filename": "src/test/ui/auto-traits/auto-trait-validation.stderr", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-validation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-validation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-validation.stderr?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -1,28 +1,37 @@\n error[E0567]: auto traits cannot have generic parameters\n-  --> $DIR/auto-trait-validation.rs:3:19\n+  --> $DIR/auto-trait-validation.rs:5:19\n    |\n LL | auto trait Generic<T> {}\n    |            -------^^^ help: remove the parameters\n    |            |\n    |            auto trait cannot have generic parameters\n \n-error[E0568]: auto traits cannot have super traits\n-  --> $DIR/auto-trait-validation.rs:5:20\n+error[E0568]: auto traits cannot have super traits or lifetime bounds\n+  --> $DIR/auto-trait-validation.rs:7:17\n    |\n LL | auto trait Bound : Copy {}\n-   |            -----   ^^^^ help: remove the super traits\n+   |            -----^^^^^^^ help: remove the super traits or lifetime bounds\n    |            |\n-   |            auto trait cannot have super traits\n+   |            auto trait cannot have super traits or lifetime bounds\n \n-error[E0380]: auto traits cannot have methods or associated items\n-  --> $DIR/auto-trait-validation.rs:7:25\n+error[E0568]: auto traits cannot have super traits or lifetime bounds\n+  --> $DIR/auto-trait-validation.rs:9:25\n    |\n-LL | auto trait MyTrait { fn foo() {} }\n-   |            -------      ^^^\n+LL | auto trait LifetimeBound : 'static {}\n+   |            -------------^^^^^^^^^^ help: remove the super traits or lifetime bounds\n    |            |\n-   |            auto trait cannot have items\n+   |            auto trait cannot have super traits or lifetime bounds\n+\n+error[E0380]: auto traits cannot have associated items\n+  --> $DIR/auto-trait-validation.rs:11:25\n+   |\n+LL | auto trait MyTrait { fn foo() {} }\n+   |            -------   ---^^^-----\n+   |            |         |\n+   |            |         help: remove these associated items\n+   |            auto trait cannot have associated items\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0380, E0567, E0568.\n For more information about an error, try `rustc --explain E0380`."}, {"sha": "267a712f62fa00866bb0136b64db5974633fb17c", "filename": "src/test/ui/auto-traits/issue-23080-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080-2.stderr?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -1,10 +1,10 @@\n-error[E0380]: auto traits cannot have methods or associated items\n+error[E0380]: auto traits cannot have associated items\n   --> $DIR/issue-23080-2.rs:5:10\n    |\n LL | unsafe auto trait Trait {\n-   |                   ----- auto trait cannot have items\n+   |                   ----- auto trait cannot have associated items\n LL |     type Output;\n-   |          ^^^^^^\n+   |     -----^^^^^^- help: remove these associated items\n \n error: aborting due to previous error\n "}, {"sha": "c1b16b2f403d7c0e48ce4ec436c68b97de706a8e", "filename": "src/test/ui/auto-traits/issue-23080.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080.stderr?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -1,10 +1,13 @@\n-error[E0380]: auto traits cannot have methods or associated items\n+error[E0380]: auto traits cannot have associated items\n   --> $DIR/issue-23080.rs:5:8\n    |\n-LL | unsafe auto trait Trait {\n-   |                   ----- auto trait cannot have items\n-LL |     fn method(&self) {\n-   |        ^^^^^^\n+LL |   unsafe auto trait Trait {\n+   |                     ----- auto trait cannot have associated items\n+LL |       fn method(&self) {\n+   |  _____-  ^^^^^^\n+LL | |         println!(\"Hello\");\n+LL | |     }\n+   | |_____- help: remove these associated items\n \n error: aborting due to previous error\n "}, {"sha": "a6afe24ea4c8be988c7530e9ae705ab298f22bac", "filename": "src/test/ui/auto-traits/issue-84075.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fauto-traits%2Fissue-84075.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fauto-traits%2Fissue-84075.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fissue-84075.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -0,0 +1,16 @@\n+// Regression test for issue #84075.\n+\n+#![feature(auto_traits)]\n+\n+auto trait Magic where Self: Copy {} //~ ERROR E0568\n+impl<T: Magic> Magic for T {}\n+\n+fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n+\n+#[derive(Debug)]\n+struct NoClone;\n+\n+fn main() {\n+    let (a, b) = copy(NoClone);\n+    println!(\"{:?} {:?}\", a, b);\n+}"}, {"sha": "02dca598ec25099442c278807797096bb281eaf9", "filename": "src/test/ui/auto-traits/issue-84075.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fauto-traits%2Fissue-84075.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fauto-traits%2Fissue-84075.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fissue-84075.stderr?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -0,0 +1,11 @@\n+error[E0568]: auto traits cannot have super traits or lifetime bounds\n+  --> $DIR/issue-84075.rs:5:18\n+   |\n+LL | auto trait Magic where Self: Copy {}\n+   |            ----- ^^^^^^^^^^^^^^^^ help: remove the super traits or lifetime bounds\n+   |            |\n+   |            auto trait cannot have super traits or lifetime bounds\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0568`."}, {"sha": "98359ef51b764c249f2056b486b031442689c458", "filename": "src/test/ui/auto-traits/typeck-auto-trait-no-supertraits-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits-2.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -2,6 +2,7 @@\n #![feature(negative_impls)]\n \n auto trait Magic : Sized where Option<Self> : Magic {} //~ ERROR E0568\n+//~^ ERROR E0568\n impl<T:Magic> Magic for T {}\n \n fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }"}, {"sha": "4827916fa5c5366d9db429355848706c3592e8ea", "filename": "src/test/ui/auto-traits/typeck-auto-trait-no-supertraits-2.stderr", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits-2.stderr?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -1,11 +1,19 @@\n-error[E0568]: auto traits cannot have super traits\n-  --> $DIR/typeck-auto-trait-no-supertraits-2.rs:4:20\n+error[E0568]: auto traits cannot have super traits or lifetime bounds\n+  --> $DIR/typeck-auto-trait-no-supertraits-2.rs:4:17\n    |\n LL | auto trait Magic : Sized where Option<Self> : Magic {}\n-   |            -----   ^^^^^ help: remove the super traits\n+   |            -----^^^^^^^^ help: remove the super traits or lifetime bounds\n    |            |\n-   |            auto trait cannot have super traits\n+   |            auto trait cannot have super traits or lifetime bounds\n \n-error: aborting due to previous error\n+error[E0568]: auto traits cannot have super traits or lifetime bounds\n+  --> $DIR/typeck-auto-trait-no-supertraits-2.rs:4:26\n+   |\n+LL | auto trait Magic : Sized where Option<Self> : Magic {}\n+   |            -----         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove the super traits or lifetime bounds\n+   |            |\n+   |            auto trait cannot have super traits or lifetime bounds\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0568`."}, {"sha": "d7716f4b61f04b93e2b5da6456318e14a106d765", "filename": "src/test/ui/auto-traits/typeck-auto-trait-no-supertraits.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits.stderr?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -1,10 +1,10 @@\n-error[E0568]: auto traits cannot have super traits\n-  --> $DIR/typeck-auto-trait-no-supertraits.rs:28:19\n+error[E0568]: auto traits cannot have super traits or lifetime bounds\n+  --> $DIR/typeck-auto-trait-no-supertraits.rs:28:17\n    |\n LL | auto trait Magic: Copy {}\n-   |            -----  ^^^^ help: remove the super traits\n+   |            -----^^^^^^ help: remove the super traits or lifetime bounds\n    |            |\n-   |            auto trait cannot have super traits\n+   |            auto trait cannot have super traits or lifetime bounds\n \n error: aborting due to previous error\n "}, {"sha": "efe77f90f0658b0b2b03752f5b4d931ca8c5617e", "filename": "src/test/ui/closures/issue-87814-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fclosures%2Fissue-87814-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fclosures%2Fissue-87814-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-87814-2.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -1,5 +1,4 @@\n // check-pass\n-#![feature(try_reserve)]\n \n fn main() {\n     let mut schema_all: (Vec<String>, Vec<String>) = (vec![], vec![]);"}, {"sha": "a19dd58da11b3920853f91e1957c1587bc2d3783", "filename": "src/test/ui/feature-gates/feature-gate-try_reserve.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_reserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_reserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_reserve.rs?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,4 +0,0 @@\n-fn main() {\n-    let v = Vec::new();\n-    v.try_reserve(10); //~ ERROR: use of unstable library feature 'try_reserve'\n-}"}, {"sha": "4da9a23a1bd5ff02ce139806be8b149d1abfb34e", "filename": "src/test/ui/feature-gates/feature-gate-try_reserve.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_reserve.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003d8d3f56848b6f3833340e859b089a09aea36a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_reserve.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_reserve.stderr?ref=003d8d3f56848b6f3833340e859b089a09aea36a", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: use of unstable library feature 'try_reserve': new API\n-  --> $DIR/feature-gate-try_reserve.rs:3:7\n-   |\n-LL |     v.try_reserve(10);\n-   |       ^^^^^^^^^^^\n-   |\n-   = note: see issue #48043 <https://github.com/rust-lang/rust/issues/48043> for more information\n-   = help: add `#![feature(try_reserve)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "fffb54f86ca0311b7806fc86be7b82915b09bba1", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-89118.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-89118.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-89118.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-89118.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -0,0 +1,32 @@\n+trait BufferMut {}\n+struct Ctx<D>(D);\n+\n+trait BufferUdpStateContext<B> {}\n+impl<B: BufferMut, C> BufferUdpStateContext<B> for C {}\n+\n+trait StackContext\n+where\n+    Ctx<()>: for<'a> BufferUdpStateContext<&'a ()>,\n+{\n+    type Dispatcher;\n+}\n+\n+trait TimerContext {\n+    type Handler;\n+}\n+impl<C> TimerContext for C\n+where\n+    C: StackContext,\n+    //~^ ERROR: is not satisfied [E0277]\n+{\n+    type Handler = Ctx<C::Dispatcher>;\n+    //~^ ERROR: is not satisfied [E0277]\n+}\n+\n+struct EthernetWorker<C>(C)\n+where\n+    Ctx<()>: for<'a> BufferUdpStateContext<&'a ()>;\n+impl<C> EthernetWorker<C> {}\n+//~^ ERROR: is not satisfied [E0277]\n+\n+fn main() {}"}, {"sha": "7f45fb83cef08cfe2d0669eb906ba884178f74ee", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-89118.stderr", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-89118.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-89118.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-89118.stderr?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -0,0 +1,63 @@\n+error[E0277]: the trait bound `for<'a> &'a (): BufferMut` is not satisfied\n+  --> $DIR/issue-89118.rs:19:8\n+   |\n+LL |     C: StackContext,\n+   |        ^^^^^^^^^^^^ the trait `for<'a> BufferMut` is not implemented for `&'a ()`\n+   |\n+note: required because of the requirements on the impl of `for<'a> BufferUdpStateContext<&'a ()>` for `Ctx<()>`\n+  --> $DIR/issue-89118.rs:5:23\n+   |\n+LL | impl<B: BufferMut, C> BufferUdpStateContext<B> for C {}\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^     ^\n+note: required by a bound in `StackContext`\n+  --> $DIR/issue-89118.rs:9:14\n+   |\n+LL | trait StackContext\n+   |       ------------ required by a bound in this\n+LL | where\n+LL |     Ctx<()>: for<'a> BufferUdpStateContext<&'a ()>,\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `StackContext`\n+\n+error[E0277]: the trait bound `for<'a> &'a (): BufferMut` is not satisfied\n+  --> $DIR/issue-89118.rs:22:20\n+   |\n+LL |     type Handler = Ctx<C::Dispatcher>;\n+   |                    ^^^^^^^^^^^^^^^^^^ the trait `for<'a> BufferMut` is not implemented for `&'a ()`\n+   |\n+note: required because of the requirements on the impl of `for<'a> BufferUdpStateContext<&'a ()>` for `Ctx<()>`\n+  --> $DIR/issue-89118.rs:5:23\n+   |\n+LL | impl<B: BufferMut, C> BufferUdpStateContext<B> for C {}\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^     ^\n+note: required by a bound in `StackContext`\n+  --> $DIR/issue-89118.rs:9:14\n+   |\n+LL | trait StackContext\n+   |       ------------ required by a bound in this\n+LL | where\n+LL |     Ctx<()>: for<'a> BufferUdpStateContext<&'a ()>,\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `StackContext`\n+\n+error[E0277]: the trait bound `for<'a> &'a (): BufferMut` is not satisfied\n+  --> $DIR/issue-89118.rs:29:9\n+   |\n+LL | impl<C> EthernetWorker<C> {}\n+   |         ^^^^^^^^^^^^^^^^^ the trait `for<'a> BufferMut` is not implemented for `&'a ()`\n+   |\n+note: required because of the requirements on the impl of `for<'a> BufferUdpStateContext<&'a ()>` for `Ctx<()>`\n+  --> $DIR/issue-89118.rs:5:23\n+   |\n+LL | impl<B: BufferMut, C> BufferUdpStateContext<B> for C {}\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^     ^\n+note: required by a bound in `EthernetWorker`\n+  --> $DIR/issue-89118.rs:28:14\n+   |\n+LL | struct EthernetWorker<C>(C)\n+   |        -------------- required by a bound in this\n+LL | where\n+LL |     Ctx<()>: for<'a> BufferUdpStateContext<&'a ()>;\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `EthernetWorker`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "3a6ab452840acbea313677cfb5d0bc3c4c8cdfba", "filename": "src/test/ui/lint/issue-89469.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Flint%2Fissue-89469.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Flint%2Fissue-89469.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-89469.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -0,0 +1,20 @@\n+// Regression test for #89469, where an extra non_snake_case warning was\n+// reported for a shorthand field binding.\n+\n+// check-pass\n+#![deny(non_snake_case)]\n+\n+#[allow(non_snake_case)]\n+struct Entry {\n+    A: u16,\n+    a: u16\n+}\n+\n+fn foo() -> Entry {todo!()}\n+\n+pub fn f() {\n+    let Entry { A, a } = foo();\n+    let _ = (A, a);\n+}\n+\n+fn main() {}"}, {"sha": "823ad8cd1f8df04e8004c0a20df637e805ed11d7", "filename": "src/test/ui/parser/issue-89396.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fparser%2Fissue-89396.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fparser%2Fissue-89396.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-89396.fixed?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -0,0 +1,16 @@\n+// Regression test for issue #89396: Try to recover from a\n+// `=>` -> `=` or `->` typo in a match arm.\n+\n+// run-rustfix\n+\n+fn main() {\n+    let opt = Some(42);\n+    let _ = match opt {\n+        Some(_) => true,\n+        //~^ ERROR: expected one of\n+        //~| HELP: try using a fat arrow here\n+        None => false,\n+        //~^ ERROR: expected one of\n+        //~| HELP: try using a fat arrow here\n+    };\n+}"}, {"sha": "f1d9efa524f463e7bda131f9eba5fc6a3c73d5cb", "filename": "src/test/ui/parser/issue-89396.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fparser%2Fissue-89396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fparser%2Fissue-89396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-89396.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -0,0 +1,16 @@\n+// Regression test for issue #89396: Try to recover from a\n+// `=>` -> `=` or `->` typo in a match arm.\n+\n+// run-rustfix\n+\n+fn main() {\n+    let opt = Some(42);\n+    let _ = match opt {\n+        Some(_) = true,\n+        //~^ ERROR: expected one of\n+        //~| HELP: try using a fat arrow here\n+        None -> false,\n+        //~^ ERROR: expected one of\n+        //~| HELP: try using a fat arrow here\n+    };\n+}"}, {"sha": "504420574e249a691f047793599a310d111f8c83", "filename": "src/test/ui/parser/issue-89396.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fparser%2Fissue-89396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fparser%2Fissue-89396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-89396.stderr?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -0,0 +1,20 @@\n+error: expected one of `=>`, `if`, or `|`, found `=`\n+  --> $DIR/issue-89396.rs:9:17\n+   |\n+LL |         Some(_) = true,\n+   |                 ^\n+   |                 |\n+   |                 expected one of `=>`, `if`, or `|`\n+   |                 help: try using a fat arrow here: `=>`\n+\n+error: expected one of `=>`, `@`, `if`, or `|`, found `->`\n+  --> $DIR/issue-89396.rs:12:14\n+   |\n+LL |         None -> false,\n+   |              ^^\n+   |              |\n+   |              expected one of `=>`, `@`, `if`, or `|`\n+   |              help: try using a fat arrow here: `=>`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "16df272df6bd9a909bda177582ad3b73835bbefb", "filename": "src/test/ui/pattern/issue-88074-pat-range-type-inference-err.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fpattern%2Fissue-88074-pat-range-type-inference-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fpattern%2Fissue-88074-pat-range-type-inference-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-88074-pat-range-type-inference-err.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -0,0 +1,28 @@\n+trait Zero {\n+    const ZERO: Self;\n+}\n+\n+impl Zero for String {\n+    const ZERO: Self = String::new();\n+}\n+\n+fn foo() {\n+     match String::new() {\n+        Zero::ZERO ..= Zero::ZERO => {},\n+        //~^ ERROR only `char` and numeric types are allowed in range patterns\n+        _ => {},\n+    }\n+}\n+\n+fn bar() {\n+    match Zero::ZERO {\n+        Zero::ZERO ..= Zero::ZERO => {},\n+        //~^ ERROR type annotations needed [E0282]\n+        _ => {},\n+    }\n+}\n+\n+fn main() {\n+    foo();\n+    bar();\n+}"}, {"sha": "06a279925edbc75d3831d9e67f96214f46e368b9", "filename": "src/test/ui/pattern/issue-88074-pat-range-type-inference-err.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fpattern%2Fissue-88074-pat-range-type-inference-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fpattern%2Fissue-88074-pat-range-type-inference-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-88074-pat-range-type-inference-err.stderr?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -0,0 +1,21 @@\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n+  --> $DIR/issue-88074-pat-range-type-inference-err.rs:11:9\n+   |\n+LL |         Zero::ZERO ..= Zero::ZERO => {},\n+   |         ----------^^^^^----------\n+   |         |              |\n+   |         |              this is of type `String` but it should be `char` or numeric\n+   |         this is of type `String` but it should be `char` or numeric\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-88074-pat-range-type-inference-err.rs:19:9\n+   |\n+LL |         Zero::ZERO ..= Zero::ZERO => {},\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type\n+   |\n+   = note: type must be known at this point\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0029, E0282.\n+For more information about an error, try `rustc --explain E0029`."}, {"sha": "27db7d8c7ab9dbfa0d66d50fd871ebe7969e39af", "filename": "src/test/ui/pattern/issue-88074-pat-range-type-inference.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fpattern%2Fissue-88074-pat-range-type-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fpattern%2Fissue-88074-pat-range-type-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-88074-pat-range-type-inference.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+trait Zero {\n+    const ZERO: Self;\n+}\n+\n+impl Zero for i32 {\n+    const ZERO: Self = 0;\n+}\n+\n+fn main() {\n+    match 1 {\n+        Zero::ZERO ..= 1 => {},\n+        _ => {},\n+    }\n+}"}, {"sha": "7ef541cb58528d39a5eae25eb1199632f1a9d5a4", "filename": "src/test/ui/pattern/patkind-litrange-no-expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -19,7 +19,6 @@ enum_number!(Change {\n     Neg = -1,\n     Arith = 1 + 1, //~ ERROR arbitrary expressions aren't allowed in patterns\n                    //~| ERROR arbitrary expressions aren't allowed in patterns\n-                   //~| ERROR only `char` and numeric types are allowed in range patterns\n });\n \n fn main() {}"}, {"sha": "eb1ee7e45673d6856d2ea08af2f40e82638fa7e7", "filename": "src/test/ui/pattern/patkind-litrange-no-expr.stderr", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.stderr?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -10,15 +10,5 @@ error: arbitrary expressions aren't allowed in patterns\n LL |     Arith = 1 + 1,\n    |             ^^^^^\n \n-error[E0029]: only `char` and numeric types are allowed in range patterns\n-  --> $DIR/patkind-litrange-no-expr.rs:20:13\n-   |\n-LL |                 $( $value ..= 42 => Some($name::$variant), )* // PatKind::Range\n-   |                               -- this is of type `{integer}`\n-...\n-LL |     Arith = 1 + 1,\n-   |             ^^^^^ this is of type `_` but it should be `char` or numeric\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0029`."}, {"sha": "3bb2480e9e2bef50a4deef89bd73161d1ac0b537", "filename": "src/test/ui/specialization/min_specialization/spec-marker-supertraits.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspec-marker-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspec-marker-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspec-marker-supertraits.rs?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -0,0 +1,29 @@\n+// Check that supertraits cannot be used to work around min_specialization\n+// limitations.\n+\n+#![feature(min_specialization)]\n+#![feature(rustc_attrs)]\n+\n+trait HasMethod {\n+    fn method(&self);\n+}\n+\n+#[rustc_unsafe_specialization_marker]\n+trait Marker: HasMethod {}\n+\n+trait Spec {\n+    fn spec_me(&self);\n+}\n+\n+impl<T> Spec for T {\n+    default fn spec_me(&self) {}\n+}\n+\n+impl<T: Marker> Spec for T {\n+    //~^ ERROR cannot specialize on trait `HasMethod`\n+    fn spec_me(&self) {\n+        self.method();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "964109dd10f4741e9b9043cc522f60143c506b06", "filename": "src/test/ui/specialization/min_specialization/spec-marker-supertraits.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspec-marker-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspec-marker-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fspec-marker-supertraits.stderr?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -0,0 +1,13 @@\n+error: cannot specialize on trait `HasMethod`\n+  --> $DIR/spec-marker-supertraits.rs:22:1\n+   |\n+LL | / impl<T: Marker> Spec for T {\n+LL | |\n+LL | |     fn spec_me(&self) {\n+LL | |         self.method();\n+LL | |     }\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "8405d7ddc7aa56bcf32b593770dcf08ef9aa10f2", "filename": "src/test/ui/traits/inductive-overflow/supertrait-auto-trait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a804c4b1123ae665a8d4f726524109c49efac5b6/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.stderr?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -1,10 +1,10 @@\n-error[E0568]: auto traits cannot have super traits\n-  --> $DIR/supertrait-auto-trait.rs:8:19\n+error[E0568]: auto traits cannot have super traits or lifetime bounds\n+  --> $DIR/supertrait-auto-trait.rs:8:17\n    |\n LL | auto trait Magic: Copy {}\n-   |            -----  ^^^^ help: remove the super traits\n+   |            -----^^^^^^ help: remove the super traits or lifetime bounds\n    |            |\n-   |            auto trait cannot have super traits\n+   |            auto trait cannot have super traits or lifetime bounds\n \n error[E0277]: the trait bound `NoClone: Copy` is not satisfied\n   --> $DIR/supertrait-auto-trait.rs:16:23"}, {"sha": "18667a856596713fc4479f99b96afc7f03aa995c", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -1 +1 @@\n-Subproject commit 035933186957cf81c488261fb48a98bf523e8006\n+Subproject commit 18667a856596713fc4479f99b96afc7f03aa995c"}, {"sha": "4b7675fcc30d3e2c05eafc68a5724db66b58142c", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=a804c4b1123ae665a8d4f726524109c49efac5b6", "patch": "@@ -1 +1 @@\n-Subproject commit 009e6ceb1ddcd27a9ced3bcb7d0ef823379185a1\n+Subproject commit 4b7675fcc30d3e2c05eafc68a5724db66b58142c"}]}