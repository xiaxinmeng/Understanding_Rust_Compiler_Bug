{"sha": "128a6a4ec060a73fbd4e1a8dc470cb629fcdbe45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyOGE2YTRlYzA2MGE3M2ZiZDRlMWE4ZGM0NzBjYjYyOWZjZGJlNDU=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-03-08T10:06:15Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-03-08T10:06:15Z"}, "message": "Do not process indexed values more than once", "tree": {"sha": "e224ca980df52f8aae6796fc9d7f316cdce6c421", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e224ca980df52f8aae6796fc9d7f316cdce6c421"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/128a6a4ec060a73fbd4e1a8dc470cb629fcdbe45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/128a6a4ec060a73fbd4e1a8dc470cb629fcdbe45", "html_url": "https://github.com/rust-lang/rust/commit/128a6a4ec060a73fbd4e1a8dc470cb629fcdbe45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/128a6a4ec060a73fbd4e1a8dc470cb629fcdbe45/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f17f3d594f599b5f1a9c9960d363513368e0958", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f17f3d594f599b5f1a9c9960d363513368e0958", "html_url": "https://github.com/rust-lang/rust/commit/8f17f3d594f599b5f1a9c9960d363513368e0958"}], "stats": {"total": 60, "additions": 31, "deletions": 29}, "files": [{"sha": "e1c28bc834afcb9c832af5f0f70354112fd0dd9b", "filename": "crates/hir_def/src/import_map.rs", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/128a6a4ec060a73fbd4e1a8dc470cb629fcdbe45/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128a6a4ec060a73fbd4e1a8dc470cb629fcdbe45/crates%2Fhir_def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fimport_map.rs?ref=128a6a4ec060a73fbd4e1a8dc470cb629fcdbe45", "patch": "@@ -403,40 +403,42 @@ pub fn search_dependencies<'a>(\n     }\n \n     let mut stream = op.union();\n-    let mut res = FxHashSet::default();\n+\n+    let mut all_indexed_values = FxHashSet::default();\n     while let Some((_, indexed_values)) = stream.next() {\n-        for indexed_value in indexed_values {\n-            let import_map = &import_maps[indexed_value.index];\n-            let importables = &import_map.importables[indexed_value.value as usize..];\n+        all_indexed_values.extend(indexed_values.iter().copied());\n+    }\n \n-            let common_importable_data = &import_map.map[&importables[0]];\n-            if !query.import_matches(common_importable_data, true) {\n-                continue;\n-            }\n+    let mut res = FxHashSet::default();\n+    for indexed_value in all_indexed_values {\n+        let import_map = &import_maps[indexed_value.index];\n+        let importables = &import_map.importables[indexed_value.value as usize..];\n \n-            // Path shared by the importable items in this group.\n-            let common_importables_path_fst = fst_path(&common_importable_data.path);\n-            // Add the items from this `ModPath` group. Those are all subsequent items in\n-            // `importables` whose paths match `path`.\n-            let iter = importables\n-                .iter()\n-                .copied()\n-                .take_while(|item| {\n-                    common_importables_path_fst == fst_path(&import_map.map[item].path)\n-                })\n-                .filter(|&item| match item_import_kind(item) {\n-                    Some(import_kind) => !query.exclude_import_kinds.contains(&import_kind),\n-                    None => true,\n-                })\n-                .filter(|item| {\n-                    !query.case_sensitive // we've already checked the common importables path case-insensitively\n+        let common_importable_data = &import_map.map[&importables[0]];\n+        if !query.import_matches(common_importable_data, true) {\n+            continue;\n+        }\n+\n+        // Path shared by the importable items in this group.\n+        let common_importables_path_fst = fst_path(&common_importable_data.path);\n+        // Add the items from this `ModPath` group. Those are all subsequent items in\n+        // `importables` whose paths match `path`.\n+        let iter = importables\n+            .iter()\n+            .copied()\n+            .take_while(|item| common_importables_path_fst == fst_path(&import_map.map[item].path))\n+            .filter(|&item| match item_import_kind(item) {\n+                Some(import_kind) => !query.exclude_import_kinds.contains(&import_kind),\n+                None => true,\n+            })\n+            .filter(|item| {\n+                !query.case_sensitive // we've already checked the common importables path case-insensitively\n                         || query.import_matches(&import_map.map[item], false)\n-                });\n-            res.extend(iter);\n+            });\n+        res.extend(iter);\n \n-            if res.len() >= query.limit {\n-                return res;\n-            }\n+        if res.len() >= query.limit {\n+            return res;\n         }\n     }\n "}]}