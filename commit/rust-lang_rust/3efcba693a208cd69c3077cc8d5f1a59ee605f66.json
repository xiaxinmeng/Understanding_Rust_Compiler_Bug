{"sha": "3efcba693a208cd69c3077cc8d5f1a59ee605f66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZmNiYTY5M2EyMDhjZDY5YzMwNzdjYzhkNWYxYTU5ZWU2MDVmNjY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-05T10:55:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-05T10:55:13Z"}, "message": "Rollup merge of #71897 - alexcrichton:embed-bitcode-docs, r=nnethercote\n\nImprove docs for embed-bitcode and linker-plugin-lto\n\nFollow-up from #71716 I wasn't able to add in time.", "tree": {"sha": "6f05bcf46a56c1894b902c1ea90d653b19defbf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f05bcf46a56c1894b902c1ea90d653b19defbf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3efcba693a208cd69c3077cc8d5f1a59ee605f66", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJesUYRCRBK7hj4Ov3rIwAAdHIIAIPvUASb4LpJWynTwlZCHR1f\nS+LVw4YfhqOAqXTSwXX+ErZFOPk9Lt1IzMio8rgrLWxjZJOpowXVD1iMmpiIf4k5\nFl3P0UQqfLuMJ/TPuasSRTeEC7W0DMHqKG6MwyPPCY43NIU6X1e4onjQLhZTg+mi\nWS8WDKxFmKuoCaJYBLOaK0swEfsRcDHBNx8uS63oFdiFaltzuVb1lLv9/HwYWftC\nkfEgUou4lHhm205QmKxbhX8eNpezcJjYp3ODzOgShWZZx7WPQ/oJzcBXtKQWW0Rk\nxeku/87fqNoUr61pvARs2ifv28cfKavogXUAu1qEhb2uqI110M5qxU3Lss9+b7M=\n=6SzJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 6f05bcf46a56c1894b902c1ea90d653b19defbf0\nparent 67a7b7a329ff6e3e242bc20edf00f0916f7bf78e\nparent 0b35692f5ede1734e7861a538c41240eafc3f925\nauthor Dylan DPC <dylan.dpc@gmail.com> 1588676113 +0200\ncommitter GitHub <noreply@github.com> 1588676113 +0200\n\nRollup merge of #71897 - alexcrichton:embed-bitcode-docs, r=nnethercote\n\nImprove docs for embed-bitcode and linker-plugin-lto\n\nFollow-up from #71716 I wasn't able to add in time.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3efcba693a208cd69c3077cc8d5f1a59ee605f66", "html_url": "https://github.com/rust-lang/rust/commit/3efcba693a208cd69c3077cc8d5f1a59ee605f66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3efcba693a208cd69c3077cc8d5f1a59ee605f66/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67a7b7a329ff6e3e242bc20edf00f0916f7bf78e", "url": "https://api.github.com/repos/rust-lang/rust/commits/67a7b7a329ff6e3e242bc20edf00f0916f7bf78e", "html_url": "https://github.com/rust-lang/rust/commit/67a7b7a329ff6e3e242bc20edf00f0916f7bf78e"}, {"sha": "0b35692f5ede1734e7861a538c41240eafc3f925", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b35692f5ede1734e7861a538c41240eafc3f925", "html_url": "https://github.com/rust-lang/rust/commit/0b35692f5ede1734e7861a538c41240eafc3f925"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "dbe281be7df74dbf0adec7532e02ef2373121893", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3efcba693a208cd69c3077cc8d5f1a59ee605f66/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/3efcba693a208cd69c3077cc8d5f1a59ee605f66/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=3efcba693a208cd69c3077cc8d5f1a59ee605f66", "patch": "@@ -62,24 +62,40 @@ the linker.\n \n ## embed-bitcode\n \n-This flag controls whether or not the compiler puts LLVM bitcode into generated\n-rlibs. It takes one of the following values:\n+This flag controls whether or not the compiler embeds LLVM bitcode into object\n+files. It takes one of the following values:\n \n * `y`, `yes`, `on`, or no value: put bitcode in rlibs (the default).\n * `n`, `no`, or `off`: omit bitcode from rlibs.\n \n-LLVM bitcode is only needed when link-time optimization (LTO) is being\n-performed, but it is enabled by default for backwards compatibility reasons.\n+LLVM bitcode is required when rustc is performing link-time optimization (LTO).\n+It is also required on some targets like iOS ones where vendors look for LLVM\n+bitcode. Embedded bitcode will appear in rustc-generated object files inside of\n+a section whose name is defined by the target platform. Most of the time this is\n+`.llvmbc`.\n \n The use of `-C embed-bitcode=no` can significantly improve compile times and\n-reduce generated file sizes. For these reasons, Cargo uses `-C\n-embed-bitcode=no` whenever possible. Likewise, if you are building directly\n-with `rustc` we recommend using `-C embed-bitcode=no` whenever you are not\n-using LTO.\n+reduce generated file sizes if your compilation does not actually need bitcode\n+(e.g. if you're not compiling for iOS or you're not performing LTO). For these\n+reasons, Cargo uses `-C embed-bitcode=no` whenever possible. Likewise, if you\n+are building directly with `rustc` we recommend using `-C embed-bitcode=no`\n+whenever you are not using LTO.\n \n If combined with `-C lto`, `-C embed-bitcode=no` will cause `rustc` to abort\n at start-up, because the combination is invalid.\n \n+> **Note**: if you're building Rust code with LTO then you probably don't even\n+> need the `embed-bitcode` option turned on. You'll likely want to use\n+> `-Clinker-plugin-lto` instead which skips generating object files entirely and\n+> simply replaces object files with LLVM bitcode. The only purpose for\n+> `-Cembed-bitcode` is when you're generating an rlib that is both being used\n+> with and without LTO. For example Rust's standard library ships with embedded\n+> bitcode since users link to it both with and without LTO.\n+>\n+> This also may make you wonder why the default is `yes` for this option. The\n+> reason for that is that it's how it was for rustc 1.44 and prior. In 1.45 this\n+> option was added to turn off what had always been the default.\n+\n ## extra-filename\n \n This option allows you to put extra data in each output filename. It takes a\n@@ -199,6 +215,18 @@ the following values:\n * `n`, `no`, or `off`: disable linker plugin LTO (the default).\n * A path to the linker plugin.\n \n+More specifically this flag will cause the compiler to replace its typical\n+object file output with LLVM bitcode files. For example an rlib produced with\n+`-Clinker-plugin-lto` will still have `*.o` files in it, but they'll all be LLVM\n+bitcode instead of actual machine code. It is expected that the native platform\n+linker is capable of loading these LLVM bitcode files and generating code at\n+link time (typically after performing optimizations).\n+\n+Note that rustc can also read its own object files produced with\n+`-Clinker-plugin-lto`. If an rlib is only ever going to get used later with a\n+`-Clto` compilation then you can pass `-Clinker-plugin-lto` to speed up\n+compilation and avoid generating object files that aren't used.\n+\n ## llvm-args\n \n This flag can be used to pass a list of arguments directly to LLVM."}]}