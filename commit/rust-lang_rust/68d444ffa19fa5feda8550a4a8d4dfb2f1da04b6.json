{"sha": "68d444ffa19fa5feda8550a4a8d4dfb2f1da04b6", "node_id": "C_kwDOAAsO6NoAKDY4ZDQ0NGZmYTE5ZmE1ZmVkYTg1NTBhNGE4ZDRkZmIyZjFkYTA0YjY", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-10-20T17:12:11Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-10-20T17:45:10Z"}, "message": "Add TraitObligation::polarity() for better encapsulation", "tree": {"sha": "041843dd4be173f0e9a484a805ebe01150810dce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/041843dd4be173f0e9a484a805ebe01150810dce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68d444ffa19fa5feda8550a4a8d4dfb2f1da04b6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmFwVbMACgkQgTGiTgx5\n76+fPRAAhMRAyf6P7odiW/BeeixjziB6Y0oaNd0BLBrbmiouuVZZenz1tpOqd51y\njg0niMgXETWYdqlQ94qG8Xv9WhyLS24Vd9Fk5aH79dP9pxkA+zLpKegeTALVhXXs\nK/Hk9YiftsVtcgtvv3W5KtxOkZqilwiwywI7jsMvx8/P0RuqZsVMYZdsKGOoVq0B\nlokbpIp81m7Q0bY/+vLDc0OAtafdUrDZUmYXn8FZoog1VS1k87Od0kF8hgUFEcMx\nNSrJBBsbpQq3tG/kqTtOjVpK+0DrMuNzqExmrMPJQdqdJ+hRI7NhZg0CqcM1PXtW\nz+MT9uA+/cWdVVYhj+NDGTiFuV8JKe8hfGdW0Aj8rFsvVTdHaojHTWgrA2N8aAhN\ng0hbTzD/Dnw/CCms/xZr8B1fYWNX9Zs4vM4nd4oci07rtS0vNw2xYVMePpLv2tZR\nHpLBi0eM+WfgPc86x/2/x4kMj5+htycbBuVGrAkcncP/NJ2kW8I8bF5E/uc9pLxQ\npvSv1aLh9xxYtrPdG2sMOHSTRCfGGRwAtYuGKpEDmfRAIG9b4w2aRtzh/Z1199OE\nGNrPoPDcyH7fxhcSnW9k9HwQLhzSjPxDHsAWY+5jaaUItnlIUEj3Wi5ZYNReebD/\nfCtVQmoYPzgx93nIgSbPMvzeD7Z84lzVZwCcAxv+8tpMQEC3pfw=\n=RNrN\n-----END PGP SIGNATURE-----", "payload": "tree 041843dd4be173f0e9a484a805ebe01150810dce\nparent 7568632513c4f9e4324e0d7cf97df791c0df4333\nauthor Santiago Pastorino <spastorino@gmail.com> 1634749931 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1634751910 -0300\n\nAdd TraitObligation::polarity() for better encapsulation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68d444ffa19fa5feda8550a4a8d4dfb2f1da04b6", "html_url": "https://github.com/rust-lang/rust/commit/68d444ffa19fa5feda8550a4a8d4dfb2f1da04b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68d444ffa19fa5feda8550a4a8d4dfb2f1da04b6/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7568632513c4f9e4324e0d7cf97df791c0df4333", "url": "https://api.github.com/repos/rust-lang/rust/commits/7568632513c4f9e4324e0d7cf97df791c0df4333", "html_url": "https://github.com/rust-lang/rust/commit/7568632513c4f9e4324e0d7cf97df791c0df4333"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "033d634cdb70f462b62c20daa986066f2cbb46f3", "filename": "compiler/rustc_infer/src/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68d444ffa19fa5feda8550a4a8d4dfb2f1da04b6/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d444ffa19fa5feda8550a4a8d4dfb2f1da04b6/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs?ref=68d444ffa19fa5feda8550a4a8d4dfb2f1da04b6", "patch": "@@ -140,6 +140,10 @@ impl<'tcx> FulfillmentError<'tcx> {\n }\n \n impl<'tcx> TraitObligation<'tcx> {\n+    pub fn polarity(&self) -> ty::ImplPolarity {\n+        self.predicate.skip_binder().polarity\n+    }\n+\n     pub fn self_ty(&self) -> ty::Binder<'tcx, Ty<'tcx>> {\n         self.predicate.map_bound(|p| p.self_ty())\n     }"}, {"sha": "8bb7ed8de230dc6aa738dffc1b6bbd2c078e1a5d", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/68d444ffa19fa5feda8550a4a8d4dfb2f1da04b6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d444ffa19fa5feda8550a4a8d4dfb2f1da04b6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=68d444ffa19fa5feda8550a4a8d4dfb2f1da04b6", "patch": "@@ -256,7 +256,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let mut candidates = SelectionCandidateSet { vec: Vec::new(), ambiguous: false };\n \n-        if obligation.predicate.skip_binder().polarity == ty::ImplPolarity::Negative {\n+        if obligation.polarity() == ty::ImplPolarity::Negative {\n             self.assemble_candidates_from_impls(obligation, &mut candidates);\n         } else {\n             self.assemble_candidates_for_trait_alias(obligation, &mut candidates);\n@@ -382,10 +382,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         for bound in matching_bounds {\n             let wc = self.evaluate_where_clause(stack, bound.value)?;\n             if wc.may_apply() {\n-                candidates.vec.push(ParamCandidate((\n-                    bound,\n-                    stack.obligation.predicate.skip_binder().polarity,\n-                )));\n+                candidates.vec.push(ParamCandidate((bound, stack.obligation.polarity())));\n             }\n         }\n "}, {"sha": "777631880547b0c70216ba1af5c117567d96f396", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/68d444ffa19fa5feda8550a4a8d4dfb2f1da04b6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d444ffa19fa5feda8550a4a8d4dfb2f1da04b6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=68d444ffa19fa5feda8550a4a8d4dfb2f1da04b6", "patch": "@@ -712,7 +712,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         if let Some(result) = self.check_evaluation_cache(\n             obligation.param_env,\n             fresh_trait_ref,\n-            obligation.predicate.skip_binder().polarity,\n+            obligation.polarity(),\n         ) {\n             debug!(?result, \"CACHE HIT\");\n             return Ok(result);\n@@ -746,7 +746,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             self.insert_evaluation_cache(\n                 obligation.param_env,\n                 fresh_trait_ref,\n-                obligation.predicate.skip_binder().polarity,\n+                obligation.polarity(),\n                 dep_node,\n                 result,\n             );\n@@ -755,7 +755,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 self.insert_evaluation_cache(\n                     obligation.param_env,\n                     fresh_trait_ref,\n-                    obligation.predicate.skip_binder().polarity,\n+                    obligation.polarity(),\n                     dep_node,\n                     provisional_result.max(result),\n                 );\n@@ -867,7 +867,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let unbound_input_types =\n             stack.fresh_trait_ref.value.skip_binder().substs.types().any(|ty| ty.is_fresh());\n \n-        if stack.obligation.predicate.skip_binder().polarity != ty::ImplPolarity::Negative {\n+        if stack.obligation.polarity() != ty::ImplPolarity::Negative {\n             // This check was an imperfect workaround for a bug in the old\n             // intercrate mode; it should be removed when that goes away.\n             if unbound_input_types && self.intercrate {\n@@ -1130,8 +1130,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             if let ImplCandidate(def_id) = candidate {\n                 ty::ImplPolarity::Reservation == tcx.impl_polarity(*def_id)\n                     || !self.allow_negative_impls\n-                        && stack.obligation.predicate.skip_binder().polarity\n-                            == tcx.impl_polarity(*def_id)\n+                        && stack.obligation.polarity() == tcx.impl_polarity(*def_id)\n             } else {\n                 true\n             }\n@@ -1199,9 +1198,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     fn is_knowable<'o>(&mut self, stack: &TraitObligationStack<'o, 'tcx>) -> Option<Conflict> {\n         debug!(\"is_knowable(intercrate={:?})\", self.intercrate);\n \n-        if !self.intercrate\n-            || stack.obligation.predicate.skip_binder().polarity == ty::ImplPolarity::Negative\n-        {\n+        if !self.intercrate || stack.obligation.polarity() == ty::ImplPolarity::Negative {\n             return None;\n         }\n "}]}