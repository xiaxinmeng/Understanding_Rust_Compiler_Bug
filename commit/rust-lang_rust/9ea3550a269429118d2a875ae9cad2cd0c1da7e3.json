{"sha": "9ea3550a269429118d2a875ae9cad2cd0c1da7e3", "node_id": "C_kwDOAAsO6NoAKDllYTM1NTBhMjY5NDI5MTE4ZDJhODc1YWU5Y2FkMmNkMGMxZGE3ZTM", "commit": {"author": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2022-12-15T21:27:03Z"}, "committer": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2022-12-15T22:44:07Z"}, "message": "remove relative links from `rustc-book` and `unstable-book`\n\nCo-authored-by: Joshua Nelson <github@jyn.dev>", "tree": {"sha": "45b4f800212e3d9aafe2da8b815390b588e94279", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45b4f800212e3d9aafe2da8b815390b588e94279"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ea3550a269429118d2a875ae9cad2cd0c1da7e3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEINUdoc4Vb1yVx04IZ6vxb7Ds2HAFAmObo1UACgkQZ6vxb7Ds\n2HCe/w//SPqQg6bP5Q3MRK8vssLbvMXLzbVClCEmii4ZO+2x1c3u7A8gT4G3WABh\n6jfk+RMvYlseT0PIBPRNJqL+sPkClc0D+Y34SXBsPe50EjiL69zFMhPHfdqfGz0B\n7k62UaQxt9WwvhnytwQOCZ6lzqYugsvZ0BOikWtlksePj0DY1ycP1EGMASgobGIO\nyfXlFCbNaeYNH/BRYyn/KzCL75t6I7nAYmNdFGaVC56ypi+UD3UR0cSROVqFtoQU\nuT56vDW27avQ5IpZ4DMJKXB3mHGcwV92A/4EBkOeVHVYbLcxXoERBrSC+2Di9uUz\nEH5iodgtiMruDjWkTcWk4oS6I6iwnZgbi6qo2Lw22uHbrfb/whpbqYpk2Gplp1y+\nCk7iZmGUS140GphKeaZDXMItQYL8ADhST2TElaTdlK8OCkqws3wZCk4LkHqHQT2+\n86hr77DpnGF9L4XG0NO7NHYVScz3RBcVvyB4apB5rxfSTUkN84hDkpqSAhypQJvX\nh9U7jyQCMKkHdewpWYPOwAi0NEQZCQVeh5y74PWesfktDmZ2mQYZFXICxRUrxA4I\nqAe53InRDIy8w8lBftFpG1RmU37msjEes6Dym5GYw8OuEpjn7c52bi6XdQ75kpn3\n/APOcYF+QFY3kS9pY8ueCKjnBqHP4gAokAYOJU+0pafdcTc5BMY=\n=R2Uc\n-----END PGP SIGNATURE-----", "payload": "tree 45b4f800212e3d9aafe2da8b815390b588e94279\nparent 4954a7ef5c5bb45f1c0d021491702ad05d470821\nauthor Ezra Shaw <ezrasure@outlook.com> 1671139623 +1300\ncommitter Ezra Shaw <ezrasure@outlook.com> 1671144247 +1300\n\nremove relative links from `rustc-book` and `unstable-book`\n\nCo-authored-by: Joshua Nelson <github@jyn.dev>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea3550a269429118d2a875ae9cad2cd0c1da7e3", "html_url": "https://github.com/rust-lang/rust/commit/9ea3550a269429118d2a875ae9cad2cd0c1da7e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/comments", "author": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4954a7ef5c5bb45f1c0d021491702ad05d470821", "url": "https://api.github.com/repos/rust-lang/rust/commits/4954a7ef5c5bb45f1c0d021491702ad05d470821", "html_url": "https://github.com/rust-lang/rust/commit/4954a7ef5c5bb45f1c0d021491702ad05d470821"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "98b49e07171c20c39fcfb11ff004576b34634b20", "filename": "src/doc/rustc/src/exploit-mitigations.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/src%2Fdoc%2Frustc%2Fsrc%2Fexploit-mitigations.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/src%2Fdoc%2Frustc%2Fsrc%2Fexploit-mitigations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fexploit-mitigations.md?ref=9ea3550a269429118d2a875ae9cad2cd0c1da7e3", "patch": "@@ -217,7 +217,7 @@ It is recommended that explicit wrapping methods such as `wrapping_add` be\n used when wrapping semantics are intended, and that explicit checking and\n wrapping methods always be used when using Unsafe Rust.\n \n-<small id=\"fn:2\">2\\. See <https://doc.rust-lang.org/std/primitive.u32.html>\n+<small id=\"fn:2\">2\\. See [the `u32` docs](../std/primitive.u32.html)\n for more information on the checked, overflowing, saturating, and wrapping\n methods (using u32 as an example). <a href=\"#fnref:2\"\n class=\"reversefootnote\" role=\"doc-backlink\">\u21a9</a></small>\n@@ -575,17 +575,17 @@ defaults (unrelated to `READ_IMPLIES_EXEC`).\n    <https://hacks.mozilla.org/2019/02/fearless-security-thread-safety/>.\n \n 3. S. Klabnik and C. Nichols. \u201cWhat Is Ownership?.\u201d The Rust Programming\n-   Language. <https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html>.\n+   Language. [https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html](../book/ch04-01-what-is-ownership.html).\n \n 4. S. Klabnik and C. Nichols. \u201cReferences and Borrowing.\u201d The Rust\n    Programming Language.\n-   <https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html>.\n+   [https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html](../book/ch04-02-references-and-borrowing.html).\n \n 5. S. Klabnik and C. Nichols. \u201cThe Slice Type.\u201d The Rust Programming\n-   Language. <https://doc.rust-lang.org/book/ch04-03-slices.html>.\n+   Language. [https://doc.rust-lang.org/book/ch04-03-slices.html](../book/ch04-03-slices.html).\n \n 6. S. Klabnik and C. Nichols. \u201cUnsafe Rust.\u201d The Rust Programming Language.\n-   <https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html>.\n+   [https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html](../book/ch19-01-unsafe-rust.html).\n \n 7. S. Davidoff. \u201cHow Rust\u2019s standard library was vulnerable for years and\n    nobody noticed.\u201d Medium.\n@@ -696,4 +696,4 @@ defaults (unrelated to `READ_IMPLIES_EXEC`).\n     for Rust #89653.\u201d GitHub. <https://github.com/rust-lang/rust/issues/89653>.\n \n 41. \u201cControlFlowIntegrity.\u201d The Rust Unstable Book.\n-    <https://doc.rust-lang.org/beta/unstable-book/compiler-flags/sanitizer.html#controlflowintegrity>.\n+    [https://doc.rust-lang.org/unstable-book/compiler-flags/sanitizer.html#controlflowintegrity](../unstable-book/compiler-flags/sanitizer.html#controlflowintegrity)."}, {"sha": "858b7bc79c4c86f12e9b82a0008b285319ab7bb8", "filename": "src/doc/rustc/src/linker-plugin-lto.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/src%2Fdoc%2Frustc%2Fsrc%2Flinker-plugin-lto.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/src%2Fdoc%2Frustc%2Fsrc%2Flinker-plugin-lto.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flinker-plugin-lto.md?ref=9ea3550a269429118d2a875ae9cad2cd0c1da7e3", "patch": "@@ -112,7 +112,7 @@ targeting Windows-like targets\n This is fixed if you explicitly set the target, for example\n `cargo build --target x86_64-pc-windows-msvc`\n Without an explicit --target the flags will be passed to all compiler invocations (including build\n-scripts and proc macros), see [cargo docs on rustflags](https://doc.rust-lang.org/cargo/reference/config.html#buildrustflags)\n+scripts and proc macros), see [cargo docs on rustflags](../cargo/reference/config.html#buildrustflags)\n \n If you have dependencies using the `cc` crate, you will need to set these\n environment variables:"}, {"sha": "e351cfaf89c2c985bb645c13d8394766a65419d8", "filename": "src/doc/rustc/src/platform-support/android.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fandroid.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fandroid.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fandroid.md?ref=9ea3550a269429118d2a875ae9cad2cd0c1da7e3", "patch": "@@ -42,4 +42,4 @@ edition of the [Android NDK].  Supported Android targets are:\n [Android NDK]: https://developer.android.com/ndk/downloads\n \n A list of all supported targets can be found\n-[here](https://doc.rust-lang.org/rustc/platform-support.html)\n+[here](../platform-support.html)"}, {"sha": "2ce0ccb78769c8a2acdcd3343de4deef94ee3f2a", "filename": "src/doc/rustc/src/platform-support/armv6k-nintendo-3ds.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv6k-nintendo-3ds.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv6k-nintendo-3ds.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv6k-nintendo-3ds.md?ref=9ea3550a269429118d2a875ae9cad2cd0c1da7e3", "patch": "@@ -111,7 +111,7 @@ to an SD card to be inserted in the device.\n The `cargo-3ds` tool mentioned in [Building Rust programs](#building-rust-programs)\n supports the use of `3dslink` with `cargo 3ds run`. The default Rust test runner\n is not supported, but\n-[custom test frameworks](https://doc.rust-lang.org/beta/unstable-book/language-features/custom-test-frameworks.html)\n+[custom test frameworks](../../unstable-book/language-features/custom-test-frameworks.html)\n can be used with `cargo 3ds test` to run unit tests on a device.\n \n The Rust test suite for `library/std` is not yet supported."}, {"sha": "cc4ee2e67b14eb7610c7bd9e6b4bbf140c334bb5", "filename": "src/doc/rustc/src/platform-support/fuchsia.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md?ref=9ea3550a269429118d2a875ae9cad2cd0c1da7e3", "patch": "@@ -90,7 +90,7 @@ rustup target add aarch64-fuchsia\n After installing our Fuchsia targets, we can now compile a Rust binary that targets\n Fuchsia.\n \n-To create our Rust project, we can issue a standard `cargo` command as follows:\n+To create our Rust project, we can use [`cargo`][cargo] as follows:\n \n **From base working directory**\n ```sh\n@@ -867,7 +867,7 @@ ${SDK_PATH}/tools/${ARCH}/ffx debug connect -- \\\n [Fuchsia]: https://fuchsia.dev/\n [source tree]: https://fuchsia.dev/fuchsia-src/get-started/learn/build\n [rustup]: https://rustup.rs/\n-[cargo]: https://doc.rust-lang.org/cargo/\n+[cargo]: ../../cargo/index.html\n [Fuchsia SDK]: https://chrome-infra-packages.appspot.com/p/fuchsia/sdk/core\n [overview of CML]: https://fuchsia.dev/fuchsia-src/concepts/components/v2/component_manifests\n [reference for the file format]: https://fuchsia.dev/reference/cml"}, {"sha": "a67cb10fc75a8b8b9d277ab50f7b4cb6acd52cd1", "filename": "src/doc/rustc/src/targets/custom.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fcustom.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fcustom.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Ftargets%2Fcustom.md?ref=9ea3550a269429118d2a875ae9cad2cd0c1da7e3", "patch": "@@ -14,4 +14,4 @@ To see it for a different target, add the `--target` flag:\n rustc +nightly -Z unstable-options --target=wasm32-unknown-unknown --print target-spec-json\n ```\n \n-To use a custom target, see the (unstable) [`build-std` feature](https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#build-std) of `cargo`.\n+To use a custom target, see the (unstable) [`build-std` feature](../../cargo/reference/unstable.html#build-std) of `cargo`."}, {"sha": "33b1e223c2276bb168cfa8529260efb02f2f2951", "filename": "src/doc/unstable-book/src/compiler-flags/branch-protection.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fbranch-protection.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fbranch-protection.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fbranch-protection.md?ref=9ea3550a269429118d2a875ae9cad2cd0c1da7e3", "patch": "@@ -15,4 +15,4 @@ For example, `-Z branch-protection=bti,pac-ret,leaf` is valid, but\n \n Rust's standard library does not ship with BTI or pointer authentication enabled by default.\n In Cargo projects the standard library can be recompiled with pointer authentication using the nightly\n-[build-std](https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#build-std) feature.\n+[build-std](../../cargo/reference/unstable.html#build-std) feature."}, {"sha": "dbb741422a87508534ddbb9507a4baba26326c15", "filename": "src/doc/unstable-book/src/compiler-flags/control-flow-guard.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcontrol-flow-guard.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcontrol-flow-guard.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcontrol-flow-guard.md?ref=9ea3550a269429118d2a875ae9cad2cd0c1da7e3", "patch": "@@ -39,7 +39,7 @@ It is strongly recommended to also enable CFG checks for all linked libraries, i\n \n To enable CFG in the standard library, use the [cargo `-Z build-std` functionality][build-std] to recompile the standard library with the same configuration options as the main program.\n \n-[build-std]: https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#build-std\n+[build-std]: ../../cargo/reference/unstable.html#build-std\n \n For example:\n ```cmd"}, {"sha": "a9616c34bffcb6be02e464c0b8f915c1b7cc1319", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=9ea3550a269429118d2a875ae9cad2cd0c1da7e3", "patch": "@@ -420,8 +420,8 @@ flow using an indirect branch/call to a function with different return and\n parameter types than the return type expected and arguments intended/passed in\n the call/branch site, the execution is also terminated (see Fig. 9).\n \n-[rust-book-ch19-05]: https://doc.rust-lang.org/book/ch19-05-advanced-functions-and-closures.html\n-[rust-book]: https://doc.rust-lang.org/book/title-page.html\n+[rust-book-ch19-05]: ../../book/ch19-05-advanced-functions-and-closures.html\n+[rust-book]: ../../book/title-page.html\n \n # HWAddressSanitizer\n \n@@ -691,7 +691,7 @@ It is strongly recommended to combine sanitizers with recompiled and\n instrumented standard library, for example using [cargo `-Zbuild-std`\n functionality][build-std].\n \n-[build-std]: https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#build-std\n+[build-std]: ../../cargo/reference/unstable.html#build-std\n \n # Build scripts and procedural macros\n "}, {"sha": "5cb9758409a778af004c5430c5f9f38b5003dbb9", "filename": "src/doc/unstable-book/src/compiler-flags/virtual-function-elimination.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fvirtual-function-elimination.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fvirtual-function-elimination.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fvirtual-function-elimination.md?ref=9ea3550a269429118d2a875ae9cad2cd0c1da7e3", "patch": "@@ -36,4 +36,4 @@ optimized out, if unused. However, with `make_foo` you can produce a wrapped\n to inlining of `f`, `Foo::foo` can then be called from a foreign crate. This can\n lead to miscompilations.\n \n-[Clto]: https://doc.rust-lang.org/rustc/codegen-options/index.html#lto\n+[Clto]: ../../rustc/codegen-options/index.html#lto"}, {"sha": "014e15d1ada6833d828961f1e5879cf333611a96", "filename": "src/doc/unstable-book/src/language-features/auto-traits.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fauto-traits.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fauto-traits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fauto-traits.md?ref=9ea3550a269429118d2a875ae9cad2cd0c1da7e3", "patch": "@@ -13,8 +13,8 @@ that are automatically implemented for every type, unless the type, or a type it\n has explicitly opted out via a negative impl. (Negative impls are separately controlled\n by the `negative_impls` feature.)\n \n-[`Send`]: https://doc.rust-lang.org/std/marker/trait.Send.html\n-[`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html\n+[`Send`]: ../../std/marker/trait.Send.html\n+[`Sync`]: ../../std/marker/trait.Sync.html\n \n ```rust,ignore (partial-example)\n impl !Trait for Type {}"}, {"sha": "3609e7f52f800ed63680af1095508341dc4266ce", "filename": "src/doc/unstable-book/src/language-features/unboxed-closures.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funboxed-closures.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funboxed-closures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funboxed-closures.md?ref=9ea3550a269429118d2a875ae9cad2cd0c1da7e3", "patch": "@@ -12,7 +12,7 @@ The `unboxed_closures` feature allows you to write functions using the `\"rust-ca\n required for implementing the [`Fn*`] family of traits. `\"rust-call\"` functions must have\n exactly one (non self) argument, a tuple representing the argument list.\n \n-[`Fn*`]: https://doc.rust-lang.org/std/ops/trait.Fn.html\n+[`Fn*`]: ../../std/ops/trait.Fn.html\n \n ```rust\n #![feature(unboxed_closures)]"}, {"sha": "bafc9ac4d0d966d0743389c1e7466a9624acf99b", "filename": "src/doc/unstable-book/src/library-features/default-free-fn.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fdefault-free-fn.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fdefault-free-fn.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fdefault-free-fn.md?ref=9ea3550a269429118d2a875ae9cad2cd0c1da7e3", "patch": "@@ -10,7 +10,7 @@ Adds a free `default()` function to the `std::default` module.  This function\n just forwards to [`Default::default()`], but may remove repetition of the word\n \"default\" from the call site.\n \n-[`Default::default()`]: https://doc.rust-lang.org/nightly/std/default/trait.Default.html#tymethod.default\n+[`Default::default()`]: ../../std/default/trait.Default.html#tymethod.default\n \n Here is an example:\n "}, {"sha": "180184146d1a0506053dab9425b361ee8133e84b", "filename": "src/doc/unstable-book/src/library-features/fn-traits.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffn-traits.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ea3550a269429118d2a875ae9cad2cd0c1da7e3/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffn-traits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ffn-traits.md?ref=9ea3550a269429118d2a875ae9cad2cd0c1da7e3", "patch": "@@ -11,7 +11,7 @@ See Also: [`unboxed_closures`](../language-features/unboxed-closures.md)\n The `fn_traits` feature allows for implementation of the [`Fn*`] traits\n for creating custom closure-like types.\n \n-[`Fn*`]: https://doc.rust-lang.org/std/ops/trait.Fn.html\n+[`Fn*`]: ../../std/ops/trait.Fn.html\n \n ```rust\n #![feature(unboxed_closures)]"}]}