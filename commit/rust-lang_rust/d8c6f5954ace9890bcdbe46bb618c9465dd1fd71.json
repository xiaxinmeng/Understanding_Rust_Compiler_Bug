{"sha": "d8c6f5954ace9890bcdbe46bb618c9465dd1fd71", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4YzZmNTk1NGFjZTk4OTBiY2RiZTQ2YmI2MThjOTQ2NWRkMWZkNzE=", "commit": {"author": {"name": "Mark Story", "email": "mark@mark-story.com", "date": "2016-01-19T05:02:21Z"}, "committer": {"name": "Mark Story", "email": "mark@mark-story.com", "date": "2016-01-19T05:23:38Z"}, "message": "Update checkstyle write mode to take Write arguments.\n\nBy accepting Write traits we can write tests using StringBuffer.", "tree": {"sha": "2b732f123e47fd554087fc932444a1f9030a7464", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b732f123e47fd554087fc932444a1f9030a7464"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8c6f5954ace9890bcdbe46bb618c9465dd1fd71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8c6f5954ace9890bcdbe46bb618c9465dd1fd71", "html_url": "https://github.com/rust-lang/rust/commit/d8c6f5954ace9890bcdbe46bb618c9465dd1fd71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8c6f5954ace9890bcdbe46bb618c9465dd1fd71/comments", "author": {"login": "markstory", "id": 24086, "node_id": "MDQ6VXNlcjI0MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/24086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markstory", "html_url": "https://github.com/markstory", "followers_url": "https://api.github.com/users/markstory/followers", "following_url": "https://api.github.com/users/markstory/following{/other_user}", "gists_url": "https://api.github.com/users/markstory/gists{/gist_id}", "starred_url": "https://api.github.com/users/markstory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markstory/subscriptions", "organizations_url": "https://api.github.com/users/markstory/orgs", "repos_url": "https://api.github.com/users/markstory/repos", "events_url": "https://api.github.com/users/markstory/events{/privacy}", "received_events_url": "https://api.github.com/users/markstory/received_events", "type": "User", "site_admin": false}, "committer": {"login": "markstory", "id": 24086, "node_id": "MDQ6VXNlcjI0MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/24086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markstory", "html_url": "https://github.com/markstory", "followers_url": "https://api.github.com/users/markstory/followers", "following_url": "https://api.github.com/users/markstory/following{/other_user}", "gists_url": "https://api.github.com/users/markstory/gists{/gist_id}", "starred_url": "https://api.github.com/users/markstory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markstory/subscriptions", "organizations_url": "https://api.github.com/users/markstory/orgs", "repos_url": "https://api.github.com/users/markstory/repos", "events_url": "https://api.github.com/users/markstory/events{/privacy}", "received_events_url": "https://api.github.com/users/markstory/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66d4faf53f59011a57991ed2b21bc198b414b588", "url": "https://api.github.com/repos/rust-lang/rust/commits/66d4faf53f59011a57991ed2b21bc198b414b588", "html_url": "https://github.com/rust-lang/rust/commit/66d4faf53f59011a57991ed2b21bc198b414b588"}], "stats": {"total": 61, "additions": 33, "deletions": 28}, "files": [{"sha": "02e214864fad31cb52efe1a4edf28ecfa2da8027", "filename": "src/checkstyle.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d8c6f5954ace9890bcdbe46bb618c9465dd1fd71/src%2Fcheckstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8c6f5954ace9890bcdbe46bb618c9465dd1fd71/src%2Fcheckstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcheckstyle.rs?ref=d8c6f5954ace9890bcdbe46bb618c9465dd1fd71", "patch": "@@ -8,30 +8,30 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n use rustfmt_diff::{Mismatch, DiffLine};\n-use std::io::{self, Write, Read, stdout};\n+use std::io::{self, Write, Read};\n use config::WriteMode;\n \n \n-pub fn output_header(mode: WriteMode) -> Result<(), io::Error> {\n-    let stdout = stdout();\n-    let mut stdout = stdout.lock();\n+pub fn output_header<T>(out: &mut T, mode: WriteMode) -> Result<(), io::Error>\n+    where T: Write\n+{\n     if mode == WriteMode::Checkstyle {\n         let mut xml_heading = String::new();\n         xml_heading.push_str(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\");\n         xml_heading.push_str(\"\\n\");\n         xml_heading.push_str(\"<checkstyle version=\\\"4.3\\\">\");\n-        try!(write!(stdout, \"{}\", xml_heading));\n+        try!(write!(out, \"{}\", xml_heading));\n     }\n     Ok(())\n }\n \n-pub fn output_footer(mode: WriteMode) -> Result<(), io::Error> {\n-    let stdout = stdout();\n-    let mut stdout = stdout.lock();\n+pub fn output_footer<T>(out: &mut T, mode: WriteMode) -> Result<(), io::Error>\n+    where T: Write\n+{\n     if mode == WriteMode::Checkstyle {\n         let mut xml_tail = String::new();\n         xml_tail.push_str(\"</checkstyle>\");\n-        try!(write!(stdout, \"{}\", xml_tail));\n+        try!(write!(out, \"{}\", xml_tail));\n     }\n     Ok(())\n }"}, {"sha": "61ad573f7027cc53f149f00ae9c868de6b4b922d", "filename": "src/filemap.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d8c6f5954ace9890bcdbe46bb618c9465dd1fd71/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8c6f5954ace9890bcdbe46bb618c9465dd1fd71/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=d8c6f5954ace9890bcdbe46bb618c9465dd1fd71", "patch": "@@ -31,15 +31,18 @@ pub fn append_newlines(file_map: &mut FileMap) {\n     }\n }\n \n-pub fn write_all_files(file_map: &FileMap,\n-                       mode: WriteMode,\n-                       config: &Config)\n-                       -> Result<(), io::Error> {\n-    output_header(mode).ok();\n+pub fn write_all_files<T>(file_map: &FileMap,\n+                          mut out: T,\n+                          mode: WriteMode,\n+                          config: &Config)\n+                          -> Result<(), io::Error>\n+    where T: Write\n+{\n+    output_header(&mut out, mode).ok();\n     for filename in file_map.keys() {\n-        try!(write_file(&file_map[filename], filename, mode, config));\n+        try!(write_file(&file_map[filename], filename, &mut out, mode, config));\n     }\n-    output_footer(mode).ok();\n+    output_footer(&mut out, mode).ok();\n \n     Ok(())\n }\n@@ -81,11 +84,14 @@ pub fn write_system_newlines<T>(writer: T,\n     }\n }\n \n-pub fn write_file(text: &StringBuffer,\n-                  filename: &str,\n-                  mode: WriteMode,\n-                  config: &Config)\n-                  -> Result<Option<String>, io::Error> {\n+pub fn write_file<T>(text: &StringBuffer,\n+                     filename: &str,\n+                     out: &mut T,\n+                     mode: WriteMode,\n+                     config: &Config)\n+                     -> Result<Option<String>, io::Error>\n+    where T: Write\n+{\n \n     fn source_and_formatted_text(text: &StringBuffer,\n                                  filename: &str,\n@@ -155,11 +161,8 @@ pub fn write_file(text: &StringBuffer,\n             unreachable!(\"The WriteMode should NEVER Be default at this point!\");\n         }\n         WriteMode::Checkstyle => {\n-            let stdout = stdout();\n-            let stdout = stdout.lock();\n             let diff = try!(create_diff(filename, text, config));\n-            // Output the XML tags for the lines that are different.\n-            try!(output_checkstyle_file(stdout, filename, diff));\n+            try!(output_checkstyle_file(out, filename, diff));\n         }\n     }\n "}, {"sha": "ad9322ab649b9e06637c45f5ec32a3ac56931c9b", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d8c6f5954ace9890bcdbe46bb618c9465dd1fd71/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8c6f5954ace9890bcdbe46bb618c9465dd1fd71/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d8c6f5954ace9890bcdbe46bb618c9465dd1fd71", "patch": "@@ -30,6 +30,7 @@ use syntax::codemap::{mk_sp, Span};\n use syntax::diagnostic::{EmitterWriter, Handler};\n use syntax::parse::{self, ParseSess};\n \n+use std::io::stdout;\n use std::ops::{Add, Sub};\n use std::path::Path;\n use std::collections::HashMap;\n@@ -428,8 +429,8 @@ pub fn run(file: &Path, write_mode: WriteMode, config: &Config) {\n     let mut result = format(file, config, mode);\n \n     print!(\"{}\", fmt_lines(&mut result, config));\n-\n-    let write_result = filemap::write_all_files(&result, mode, config);\n+    let out = stdout();\n+    let write_result = filemap::write_all_files(&result, out, mode, config);\n \n     if let Err(msg) = write_result {\n         println!(\"Error writing files: {}\", msg);\n@@ -442,7 +443,8 @@ pub fn run_from_stdin(input: String, write_mode: WriteMode, config: &Config) {\n     let mut result = format_string(input, config, mode);\n     fmt_lines(&mut result, config);\n \n-    let write_result = filemap::write_file(&result[\"stdin\"], \"stdin\", mode, config);\n+    let mut out = stdout();\n+    let write_result = filemap::write_file(&result[\"stdin\"], \"stdin\", &mut out, mode, config);\n \n     if let Err(msg) = write_result {\n         panic!(\"Error writing to stdout: {}\", msg);"}]}