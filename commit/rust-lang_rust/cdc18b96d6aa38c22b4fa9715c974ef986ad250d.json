{"sha": "cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYzE4Yjk2ZDZhYTM4YzIyYjRmYTk3MTVjOTc0ZWY5ODZhZDI1MGQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-02-27T22:02:27Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-03-13T12:21:45Z"}, "message": "Remove Rc's borrow method to avoid conflicts with RefCell's borrow in Rc<RefCell<T>>.", "tree": {"sha": "9a0fae0250cb35e67a2f966ed6e17eb0a7afaef1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a0fae0250cb35e67a2f966ed6e17eb0a7afaef1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "html_url": "https://github.com/rust-lang/rust/commit/cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12b2607572d6233a1d4b4f7592573e49b505771e", "url": "https://api.github.com/repos/rust-lang/rust/commits/12b2607572d6233a1d4b4f7592573e49b505771e", "html_url": "https://github.com/rust-lang/rust/commit/12b2607572d6233a1d4b4f7592573e49b505771e"}], "stats": {"total": 135, "additions": 59, "deletions": 76}, "files": [{"sha": "15fd21e9fbc079806ae067d495b6c0836185082e", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "patch": "@@ -1687,7 +1687,7 @@ let x = Rc::new([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n let y = x.clone(); // a new owner\n let z = x; // this moves `x` into `z`, rather than creating a new owner\n \n-assert!(*z.borrow() == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n+assert!(*z == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n \n // the variable is mutable, but not the contents of the box\n let mut a = Rc::new([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]);"}, {"sha": "2ccb8e9c4c25034ba764dd0af0228557063ded20", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "patch": "@@ -51,11 +51,11 @@ struct Chunk {\n }\n impl Chunk {\n     fn capacity(&self) -> uint {\n-        self.data.borrow().borrow().get().capacity()\n+        self.data.deref().borrow().get().capacity()\n     }\n \n     unsafe fn as_ptr(&self) -> *u8 {\n-        self.data.borrow().borrow().get().as_ptr()\n+        self.data.deref().borrow().get().as_ptr()\n     }\n }\n "}, {"sha": "06aec8c050e0d58a24fe653516991446eb868eb6", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "patch": "@@ -1081,7 +1081,7 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n             ebml_w.tag(c::tag_table_capture_map, |ebml_w| {\n                 ebml_w.id(id);\n                 ebml_w.tag(c::tag_table_val, |ebml_w| {\n-                    ebml_w.emit_from_vec(cap_vars.borrow().as_slice(),\n+                    ebml_w.emit_from_vec(cap_vars.deref().as_slice(),\n                                          |ebml_w, cap_var| {\n                         cap_var.encode(ebml_w);\n                     })"}, {"sha": "5972625caad0771fc2ee94122cdfca4ec82d6ca7", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "patch": "@@ -716,7 +716,7 @@ impl<'a> CheckLoanCtxt<'a> {\n                                 span: Span) {\n         let capture_map = self.bccx.capture_map.borrow();\n         let cap_vars = capture_map.get().get(&closure_id);\n-        for cap_var in cap_vars.borrow().iter() {\n+        for cap_var in cap_vars.deref().iter() {\n             let var_id = ast_util::def_id_of_def(cap_var.def).node;\n             let var_path = @LpVar(var_id);\n             self.check_if_path_is_moved(closure_id, span,"}, {"sha": "cfc4b3de38d8c9d1d04dc9650c6da0c5ee58016d", "filename": "src/librustc/middle/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "patch": "@@ -49,7 +49,7 @@ pub fn gather_captures(bccx: &BorrowckCtxt,\n                        closure_expr: &ast::Expr) {\n     let capture_map = bccx.capture_map.borrow();\n     let captured_vars = capture_map.get().get(&closure_expr.id);\n-    for captured_var in captured_vars.borrow().iter() {\n+    for captured_var in captured_vars.deref().iter() {\n         match captured_var.mode {\n             moves::CapMove => {\n                 let cmt = bccx.cat_captured_var(closure_expr.id,"}, {"sha": "135783f510ff0cbacecbfd91b816acf1edc26bdf", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "patch": "@@ -406,7 +406,7 @@ impl<'a> GatherLoanCtxt<'a> {\n                           closure_expr: &ast::Expr) {\n         let capture_map = self.bccx.capture_map.borrow();\n         let captured_vars = capture_map.get().get(&closure_expr.id);\n-        for captured_var in captured_vars.borrow().iter() {\n+        for captured_var in captured_vars.deref().iter() {\n             match captured_var.mode {\n                 moves::CapCopy | moves::CapMove => { continue; }\n                 moves::CapRef => { }"}, {"sha": "7c46f05f1c1a68c83e696b4d500e0c91e9a650df", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "patch": "@@ -512,7 +512,7 @@ pub fn lit_to_const(lit: &Lit) -> const_val {\n     match lit.node {\n         LitStr(ref s, _) => const_str((*s).clone()),\n         LitBinary(ref data) => {\n-            const_binary(Rc::new(data.borrow().iter().map(|x| *x).collect()))\n+            const_binary(Rc::new(data.deref().iter().map(|x| *x).collect()))\n         }\n         LitChar(n) => const_uint(n as u64),\n         LitInt(n, _) => const_int(n),"}, {"sha": "97aff130dfbfc369dc6d945ab1a25a970a64935a", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "patch": "@@ -298,7 +298,7 @@ pub fn check_expr(cx: &mut Context, e: &Expr) {\n                 }\n               }\n             };\n-            let type_param_defs = type_param_defs.borrow();\n+            let type_param_defs = type_param_defs.deref();\n             if ts.len() != type_param_defs.len() {\n                 // Fail earlier to make debugging easier\n                 fail!(\"internal error: in kind::check_expr, length \\"}, {"sha": "48a6b5c92d4e8ed1ddeeec78e54e3f447216d8d4", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "patch": "@@ -505,7 +505,7 @@ fn visit_expr(v: &mut LivenessVisitor, expr: &Expr, this: @IrMaps) {\n         let capture_map = this.capture_map.borrow();\n         let cvs = capture_map.get().get(&expr.id);\n         let mut call_caps = Vec::new();\n-        for cv in cvs.borrow().iter() {\n+        for cv in cvs.deref().iter() {\n             match moves::moved_variable_node_id_from_def(cv.def) {\n               Some(rv) => {\n                 let cv_ln = this.add_live_node(FreeVarNode(cv.span));"}, {"sha": "82458a69ee65aaabe277d6af152d45a2579ab7f3", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "patch": "@@ -142,7 +142,7 @@ impl<T:Subst> Subst for Rc<T> {\n     fn subst_spanned(&self, tcx: ty::ctxt,\n                      substs: &ty::substs,\n                      span: Option<Span>) -> Rc<T> {\n-        Rc::new(self.borrow().subst_spanned(tcx, substs, span))\n+        Rc::new(self.deref().subst_spanned(tcx, substs, span))\n     }\n }\n "}, {"sha": "bfc9d8d2d6d0d47c545007b0dcee80dcb9ed72c0", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "patch": "@@ -397,21 +397,13 @@ pub fn trans_expr_fn<'a>(\n     // set an inline hint for all closures\n     set_inline_hint(llfn);\n \n-    let cap_vars = {\n-        let capture_map = ccx.maps.capture_map.borrow();\n-        capture_map.get().get_copy(&id)\n-    };\n+    let cap_vars = ccx.maps.capture_map.borrow().get().get_copy(&id);\n     let ClosureResult {llbox, cdata_ty, bcx} =\n-        build_closure(bcx, cap_vars.borrow().as_slice(), sigil);\n+        build_closure(bcx, cap_vars.deref().as_slice(), sigil);\n     trans_closure(ccx, decl, body, llfn,\n                   bcx.fcx.param_substs, id,\n                   [], ty::ty_fn_ret(fty),\n-                  |bcx| {\n-                      load_environment(bcx,\n-                                       cdata_ty,\n-                                       cap_vars.borrow().as_slice(),\n-                                       sigil)\n-                  });\n+                  |bcx| load_environment(bcx, cdata_ty, cap_vars.deref().as_slice(), sigil));\n     fill_fn_pair(bcx, dest_addr, llfn, llbox);\n \n     bcx"}, {"sha": "c9317f18168f2f0aafd1d33198c8d96a0ce4b1bf", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "patch": "@@ -76,9 +76,7 @@ pub fn const_lit(cx: &CrateContext, e: &ast::Expr, lit: ast::Lit)\n         ast::LitBool(b) => C_bool(b),\n         ast::LitNil => C_nil(),\n         ast::LitStr(ref s, _) => C_str_slice(cx, (*s).clone()),\n-        ast::LitBinary(ref data) => {\n-            C_binary_slice(cx, data.borrow().as_slice())\n-        }\n+        ast::LitBinary(ref data) => C_binary_slice(cx, data.deref().as_slice()),\n     }\n }\n "}, {"sha": "7193f6576584b1b62a3f086adbcb8b5ded57fdc2", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "patch": "@@ -1014,13 +1014,13 @@ pub struct Generics {\n \n impl Generics {\n     pub fn has_type_params(&self) -> bool {\n-        !self.type_param_defs.borrow().is_empty()\n+        !self.type_param_defs.deref().is_empty()\n     }\n     pub fn type_param_defs<'a>(&'a self) -> &'a [TypeParameterDef] {\n-        self.type_param_defs.borrow().as_slice()\n+        self.type_param_defs.deref().as_slice()\n     }\n     pub fn region_param_defs<'a>(&'a self) -> &'a [RegionParameterDef] {\n-        self.region_param_defs.borrow().as_slice()\n+        self.region_param_defs.deref().as_slice()\n     }\n }\n "}, {"sha": "114c385b5a0c4db23e4d607f75427e01b61a1be5", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "patch": "@@ -1030,7 +1030,7 @@ impl<'a> LookupContext<'a> {\n         let m_regions =\n             self.fcx.infcx().region_vars_for_defs(\n                 self.expr.span,\n-                candidate.method_ty.generics.region_param_defs.borrow().as_slice());\n+                candidate.method_ty.generics.region_param_defs.deref().as_slice());\n         for &r in m_regions.iter() {\n             all_regions.push(r);\n         }"}, {"sha": "d032f0f841fc7f4f11c1273397a9cde550684021", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "patch": "@@ -569,7 +569,7 @@ pub fn check_item(ccx: @CrateCtxt, it: &ast::Item) {\n                 fn_tpt.generics.type_param_defs(),\n                 [],\n                 [],\n-                fn_tpt.generics.region_param_defs.borrow().as_slice(),\n+                fn_tpt.generics.region_param_defs.deref().as_slice(),\n                 body.id);\n \n         check_bare_fn(ccx, decl, body, it.id, fn_tpt.ty, param_env);\n@@ -3732,7 +3732,7 @@ pub fn instantiate_path(fcx: @FnCtxt,\n                         nsupplied = num_supplied_regions));\n         }\n \n-        fcx.infcx().region_vars_for_defs(span, tpt.generics.region_param_defs.borrow().as_slice())\n+        fcx.infcx().region_vars_for_defs(span, tpt.generics.region_param_defs.deref().as_slice())\n     };\n     let regions = ty::NonerasedRegions(regions);\n "}, {"sha": "70fe3cfde50b837ade8370df4d3464826491f174", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "patch": "@@ -709,15 +709,13 @@ pub fn early_resolve_expr(ex: &ast::Expr, fcx: &FnCtxt, is_early: bool) {\n             debug!(\"vtable resolution on parameter bounds for method call {}\",\n                    ex.repr(fcx.tcx()));\n             let type_param_defs = ty::method_call_type_param_defs(cx.tcx, method.origin);\n-            if has_trait_bounds(type_param_defs.borrow().as_slice()) {\n+            if has_trait_bounds(type_param_defs.deref().as_slice()) {\n                 let substs = fcx.method_ty_substs(ex.id);\n                 let vcx = fcx.vtable_context();\n-                let vtbls = lookup_vtables(&vcx,\n-                                           &location_info_for_expr(ex),\n-                                           type_param_defs.borrow()\n+                let vtbls = lookup_vtables(&vcx, &location_info_for_expr(ex),\n+                                           type_param_defs.deref()\n                                                           .as_slice(),\n-                                           &substs,\n-                                           is_early);\n+                                           &substs, is_early);\n                 if !is_early {\n                     insert_vtables(fcx, ex.id, vtbls);\n                 }\n@@ -829,7 +827,7 @@ pub fn resolve_impl(tcx: ty::ctxt,\n pub fn trans_resolve_method(tcx: ty::ctxt, id: ast::NodeId,\n                             substs: &ty::substs) -> Option<vtable_res> {\n     let generics = ty::lookup_item_type(tcx, ast_util::local_def(id)).generics;\n-    let type_param_defs = generics.type_param_defs.borrow();\n+    let type_param_defs = generics.type_param_defs.deref();\n     if has_trait_bounds(type_param_defs.as_slice()) {\n         let vcx = VtableContext {\n             infcx: &infer::new_infer_ctxt(tcx),"}, {"sha": "402f06f928ccef54637f7bd02b365c7714322de6", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "patch": "@@ -342,7 +342,7 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt, trait_id: ast::NodeId) {\n         let mut new_type_param_defs = Vec::new();\n         let substd_type_param_defs =\n             trait_ty_generics.type_param_defs.subst(tcx, &substs);\n-        new_type_param_defs.push_all(substd_type_param_defs.borrow()\n+        new_type_param_defs.push_all(substd_type_param_defs.deref()\n                                                            .as_slice());\n \n         // add in the \"self\" type parameter\n@@ -360,7 +360,7 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt, trait_id: ast::NodeId) {\n \n         // add in the type parameters from the method\n         let substd_type_param_defs = m.generics.type_param_defs.subst(tcx, &substs);\n-        new_type_param_defs.push_all(substd_type_param_defs.borrow()\n+        new_type_param_defs.push_all(substd_type_param_defs.deref()\n                                                            .as_slice());\n \n         debug!(\"static method {} type_param_defs={} ty={}, substs={}\","}, {"sha": "c27725fd5852aeccebbef9a2501565e276059489", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "patch": "@@ -1192,7 +1192,7 @@ impl ToSource for syntax::codemap::Span {\n fn lit_to_str(lit: &ast::Lit) -> ~str {\n     match lit.node {\n         ast::LitStr(ref st, _) => st.get().to_owned(),\n-        ast::LitBinary(ref data) => format!(\"{:?}\", data.borrow().as_slice()),\n+        ast::LitBinary(ref data) => format!(\"{:?}\", data.deref().as_slice()),\n         ast::LitChar(c) => ~\"'\" + std::char::from_u32(c).unwrap().to_str() + \"'\",\n         ast::LitInt(i, _t) => i.to_str(),\n         ast::LitUint(u, _t) => u.to_str(),"}, {"sha": "a6c0a7b829ae94cdb993eda966090d2fe227616e", "filename": "src/librustuv/idle.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustuv%2Fidle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibrustuv%2Fidle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fidle.rs?ref=cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "patch": "@@ -113,7 +113,7 @@ mod test {\n         fn call(&mut self) {\n             let task = match *self {\n                 MyCallback(ref rc, n) => {\n-                    let mut slot = rc.borrow().borrow_mut();\n+                    let mut slot = rc.deref().borrow_mut();\n                     match *slot.get() {\n                         (ref mut task, ref mut val) => {\n                             *val = n;\n@@ -140,7 +140,7 @@ mod test {\n     fn sleep(chan: &Chan) -> uint {\n         let task: ~Task = Local::take();\n         task.deschedule(1, |task| {\n-            let mut slot = chan.borrow().borrow_mut();\n+            let mut slot = chan.deref().borrow_mut();\n             match *slot.get() {\n                 (ref mut slot, _) => {\n                     assert!(slot.is_none());\n@@ -150,7 +150,7 @@ mod test {\n             Ok(())\n         });\n \n-        let slot = chan.borrow().borrow();\n+        let slot = chan.deref().borrow();\n         match *slot.get() { (_, n) => n }\n     }\n "}, {"sha": "fd57f47e8819d546cf02d78d049bd1e1db8c8684", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "patch": "@@ -388,7 +388,7 @@ impl<S:Encoder,T:Encodable<S>> Encodable<S> for @T {\n impl<S:Encoder,T:Encodable<S>> Encodable<S> for Rc<T> {\n     #[inline]\n     fn encode(&self, s: &mut S) {\n-        self.borrow().encode(s)\n+        self.deref().encode(s)\n     }\n }\n "}, {"sha": "dd40f6008735f0d228c7599eb14d8a0bbcde2f71", "filename": "src/libstd/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibstd%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibstd%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash%2Fmod.rs?ref=cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "patch": "@@ -66,6 +66,7 @@\n use container::Container;\n use io::Writer;\n use iter::Iterator;\n+use ops::Deref;\n use option::{Option, Some, None};\n use rc::Rc;\n use str::{Str, StrSlice};\n@@ -246,7 +247,7 @@ impl<S: Writer, T: Hash<S>> Hash<S> for @T {\n impl<S: Writer, T: Hash<S>> Hash<S> for Rc<T> {\n     #[inline]\n     fn hash(&self, state: &mut S) {\n-        self.borrow().hash(state);\n+        self.deref().hash(state);\n     }\n }\n "}, {"sha": "31605ca961e6ac1de5b761dc2642fa688dee84cb", "filename": "src/libstd/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "patch": "@@ -503,7 +503,7 @@ mod tests {\n         #[unsafe_destructor]\n         impl ::ops::Drop for R {\n            fn drop(&mut self) {\n-                let ii = self.i.borrow();\n+                let ii = self.i.deref();\n                 ii.set(ii.get() + 1);\n             }\n         }\n@@ -520,7 +520,7 @@ mod tests {\n             let opt = Some(x);\n             let _y = opt.unwrap();\n         }\n-        assert_eq!(i.borrow().get(), 1);\n+        assert_eq!(i.deref().get(), 1);\n     }\n \n     #[test]"}, {"sha": "5c4b19b4e4b8c8c347828edb1a7e30989bc0b9ac", "filename": "src/libstd/rc.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibstd%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibstd%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frc.rs?ref=cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "patch": "@@ -63,12 +63,6 @@ impl<T> Rc<T> {\n }\n \n impl<T> Rc<T> {\n-    /// Borrow the value contained in the reference-counted box\n-    #[inline(always)]\n-    pub fn borrow<'a>(&'a self) -> &'a T {\n-        unsafe { &(*self.ptr).value }\n-    }\n-\n     /// Downgrade the reference-counted pointer to a weak reference\n     pub fn downgrade(&self) -> Weak<T> {\n         unsafe {\n@@ -93,7 +87,7 @@ impl<T> Drop for Rc<T> {\n             if self.ptr != 0 as *mut RcBox<T> {\n                 (*self.ptr).strong -= 1;\n                 if (*self.ptr).strong == 0 {\n-                    ptr::read(self.borrow()); // destroy the contained object\n+                    ptr::read(self.deref()); // destroy the contained object\n \n                     // remove the implicit \"strong weak\" pointer now\n                     // that we've destroyed the contents.\n@@ -120,24 +114,24 @@ impl<T> Clone for Rc<T> {\n \n impl<T: Eq> Eq for Rc<T> {\n     #[inline(always)]\n-    fn eq(&self, other: &Rc<T>) -> bool { *self.borrow() == *other.borrow() }\n+    fn eq(&self, other: &Rc<T>) -> bool { *self.deref() == *other.deref() }\n \n     #[inline(always)]\n-    fn ne(&self, other: &Rc<T>) -> bool { *self.borrow() != *other.borrow() }\n+    fn ne(&self, other: &Rc<T>) -> bool { *self.deref() != *other.deref() }\n }\n \n impl<T: Ord> Ord for Rc<T> {\n     #[inline(always)]\n-    fn lt(&self, other: &Rc<T>) -> bool { *self.borrow() < *other.borrow() }\n+    fn lt(&self, other: &Rc<T>) -> bool { *self.deref() < *other.deref() }\n \n     #[inline(always)]\n-    fn le(&self, other: &Rc<T>) -> bool { *self.borrow() <= *other.borrow() }\n+    fn le(&self, other: &Rc<T>) -> bool { *self.deref() <= *other.deref() }\n \n     #[inline(always)]\n-    fn gt(&self, other: &Rc<T>) -> bool { *self.borrow() > *other.borrow() }\n+    fn gt(&self, other: &Rc<T>) -> bool { *self.deref() > *other.deref() }\n \n     #[inline(always)]\n-    fn ge(&self, other: &Rc<T>) -> bool { *self.borrow() >= *other.borrow() }\n+    fn ge(&self, other: &Rc<T>) -> bool { *self.deref() >= *other.deref() }\n }\n \n /// Weak reference to a reference-counted box\n@@ -197,30 +191,30 @@ mod tests {\n     fn test_clone() {\n         let x = Rc::new(RefCell::new(5));\n         let y = x.clone();\n-        x.borrow().with_mut(|inner| {\n+        x.deref().with_mut(|inner| {\n             *inner = 20;\n         });\n-        assert_eq!(y.borrow().with(|v| *v), 20);\n+        assert_eq!(y.deref().with(|v| *v), 20);\n     }\n \n     #[test]\n     fn test_simple() {\n         let x = Rc::new(5);\n-        assert_eq!(*x.borrow(), 5);\n+        assert_eq!(*x.deref(), 5);\n     }\n \n     #[test]\n     fn test_simple_clone() {\n         let x = Rc::new(5);\n         let y = x.clone();\n-        assert_eq!(*x.borrow(), 5);\n-        assert_eq!(*y.borrow(), 5);\n+        assert_eq!(*x.deref(), 5);\n+        assert_eq!(*y.deref(), 5);\n     }\n \n     #[test]\n     fn test_destructor() {\n         let x = Rc::new(~5);\n-        assert_eq!(**x.borrow(), 5);\n+        assert_eq!(**x.deref(), 5);\n     }\n \n     #[test]\n@@ -243,7 +237,7 @@ mod tests {\n         // see issue #11532\n         use gc::Gc;\n         let a = Rc::new(RefCell::new(Gc::new(1)));\n-        assert!(a.borrow().try_borrow_mut().is_some());\n+        assert!(a.deref().try_borrow_mut().is_some());\n     }\n \n     #[test]\n@@ -254,7 +248,7 @@ mod tests {\n \n         let a = Rc::new(Cycle { x: RefCell::new(None) });\n         let b = a.clone().downgrade();\n-        *a.borrow().x.borrow_mut().get() = Some(b);\n+        *a.deref().x.borrow_mut().get() = Some(b);\n \n         // hopefully we don't double-free (or leak)...\n     }"}, {"sha": "b7fad22a7ad94ed7a6bd2f04e4c19f7fff68c7db", "filename": "src/libsyntax/ext/mtwt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibsyntax%2Fext%2Fmtwt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibsyntax%2Fext%2Fmtwt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmtwt.rs?ref=cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "patch": "@@ -103,7 +103,7 @@ pub fn with_sctable<T>(op: |&SCTable| -> T) -> T {\n             }\n             Some(ts) => ts.clone()\n         };\n-        op(table.borrow())\n+        op(table.deref())\n     })\n }\n \n@@ -158,7 +158,7 @@ fn with_resolve_table_mut<T>(op: |&mut ResolveTable| -> T) -> T {\n             }\n             Some(ts) => ts.clone()\n         };\n-        op(table.borrow().borrow_mut().get())\n+        op(table.deref().borrow_mut().get())\n     })\n }\n "}, {"sha": "6894d6a2b053736a764a9ee2fe38df9db4d25eef", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "patch": "@@ -2291,7 +2291,7 @@ pub fn print_literal(s: &mut State, lit: &ast::Lit) -> io::IoResult<()> {\n       ast::LitBinary(ref arr) => {\n         try!(ibox(s, indent_unit));\n         try!(word(&mut s.s, \"[\"));\n-        try!(commasep_cmnt(s, Inconsistent, arr.borrow().as_slice(),\n+        try!(commasep_cmnt(s, Inconsistent, arr.deref().as_slice(),\n                              |s, u| word(&mut s.s, format!(\"{}\", *u)),\n                              |_| lit.span));\n         try!(word(&mut s.s, \"]\"));"}, {"sha": "969c7cec87ccea623ffe595a6b93eb5eade6427f", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "patch": "@@ -106,13 +106,13 @@ impl TotalOrd for RcStr {\n impl Str for RcStr {\n     #[inline]\n     fn as_slice<'a>(&'a self) -> &'a str {\n-        let s: &'a str = *self.string.borrow();\n+        let s: &'a str = *self.string.deref();\n         s\n     }\n \n     #[inline]\n     fn into_owned(self) -> ~str {\n-        self.string.borrow().to_owned()\n+        self.string.deref().to_owned()\n     }\n }\n "}, {"sha": "800549b7737c63c3f676e0b87b42837b5903a23c", "filename": "src/test/compile-fail/issue-7013.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs?ref=cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "patch": "@@ -40,7 +40,7 @@ fn main()\n     //~^ ERROR cannot pack type `~B`, which does not fulfill `Send`\n     let v = Rc::new(RefCell::new(a));\n     let w = v.clone();\n-    let b = v.borrow();\n+    let b = v.deref();\n     let mut b = b.borrow_mut();\n     b.get().v.set(w.clone());\n }"}, {"sha": "cba142680dfb93fe27083d156cef1488ec44d631", "filename": "src/test/run-pass/self-re-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Ftest%2Frun-pass%2Fself-re-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc18b96d6aa38c22b4fa9715c974ef986ad250d/src%2Ftest%2Frun-pass%2Fself-re-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-re-assign.rs?ref=cdc18b96d6aa38c22b4fa9715c974ef986ad250d", "patch": "@@ -20,5 +20,5 @@ pub fn main() {\n \n    let mut x = Rc::new(3);\n    x = x;\n-   assert!(*x.borrow() == 3);\n+   assert!(*x.deref() == 3);\n }"}]}