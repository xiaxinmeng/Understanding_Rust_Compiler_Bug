{"sha": "cc4e82fe7a9126a068e27dcdfc251a1b4be1aa77", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNGU4MmZlN2E5MTI2YTA2OGUyN2RjZGZjMjUxYTFiNGJlMWFhNzc=", "commit": {"author": {"name": "P.Y. Laligand", "email": "pylaligand@google.com", "date": "2017-09-15T21:11:04Z"}, "committer": {"name": "James Tucker", "email": "jftucker@gmail.com", "date": "2017-09-24T20:53:10Z"}, "message": "Fixed casing issues.", "tree": {"sha": "67db53935d9cc29557c2c46ab7aa5331bb43762a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67db53935d9cc29557c2c46ab7aa5331bb43762a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc4e82fe7a9126a068e27dcdfc251a1b4be1aa77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc4e82fe7a9126a068e27dcdfc251a1b4be1aa77", "html_url": "https://github.com/rust-lang/rust/commit/cc4e82fe7a9126a068e27dcdfc251a1b4be1aa77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc4e82fe7a9126a068e27dcdfc251a1b4be1aa77/comments", "author": {"login": "pylaligand", "id": 1115379, "node_id": "MDQ6VXNlcjExMTUzNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1115379?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pylaligand", "html_url": "https://github.com/pylaligand", "followers_url": "https://api.github.com/users/pylaligand/followers", "following_url": "https://api.github.com/users/pylaligand/following{/other_user}", "gists_url": "https://api.github.com/users/pylaligand/gists{/gist_id}", "starred_url": "https://api.github.com/users/pylaligand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pylaligand/subscriptions", "organizations_url": "https://api.github.com/users/pylaligand/orgs", "repos_url": "https://api.github.com/users/pylaligand/repos", "events_url": "https://api.github.com/users/pylaligand/events{/privacy}", "received_events_url": "https://api.github.com/users/pylaligand/received_events", "type": "User", "site_admin": false}, "committer": {"login": "raggi", "id": 348, "node_id": "MDQ6VXNlcjM0OA==", "avatar_url": "https://avatars.githubusercontent.com/u/348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/raggi", "html_url": "https://github.com/raggi", "followers_url": "https://api.github.com/users/raggi/followers", "following_url": "https://api.github.com/users/raggi/following{/other_user}", "gists_url": "https://api.github.com/users/raggi/gists{/gist_id}", "starred_url": "https://api.github.com/users/raggi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/raggi/subscriptions", "organizations_url": "https://api.github.com/users/raggi/orgs", "repos_url": "https://api.github.com/users/raggi/repos", "events_url": "https://api.github.com/users/raggi/events{/privacy}", "received_events_url": "https://api.github.com/users/raggi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de3bb916d852a7110cc97ac557fc7ed64f87848f", "url": "https://api.github.com/repos/rust-lang/rust/commits/de3bb916d852a7110cc97ac557fc7ed64f87848f", "html_url": "https://github.com/rust-lang/rust/commit/de3bb916d852a7110cc97ac557fc7ed64f87848f"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "6059acdd4852cdf1781cb8d8bfc1dc904707dacc", "filename": "src/libstd/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cc4e82fe7a9126a068e27dcdfc251a1b4be1aa77/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc4e82fe7a9126a068e27dcdfc251a1b4be1aa77/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=cc4e82fe7a9126a068e27dcdfc251a1b4be1aa77", "patch": "@@ -67,8 +67,8 @@ impl Command {\n         }\n \n         // Duplicate the job handle\n-        let mut job_copy: zx_handle_t = zx_HANDLE_INVALID;\n-        zx_cvt(zx_handle_duplicate(job_handle, zx_RIGHT_SAME_RIGHTS, &mut job_copy))?;\n+        let mut job_copy: zx_handle_t = ZX_HANDLE_INVALID;\n+        zx_cvt(zx_handle_duplicate(job_handle, ZX_RIGHT_SAME_RIGHTS, &mut job_copy))?;\n         // Create a launchpad\n         let mut launchpad: *mut launchpad_t = ptr::null_mut();\n         zx_cvt(launchpad_create(job_copy, self.get_argv()[0], &mut launchpad))?;\n@@ -82,7 +82,7 @@ impl Command {\n         zx_cvt(launchpad_add_vdso_vmo(launchpad))?;\n         // Load the executable\n         zx_cvt(launchpad_elf_load(launchpad, launchpad_vmo_from_file(self.get_argv()[0])))?;\n-        zx_cvt(launchpad_load_vdso(launchpad, zx_HANDLE_INVALID))?;\n+        zx_cvt(launchpad_load_vdso(launchpad, ZX_HANDLE_INVALID))?;\n         zx_cvt(launchpad_clone(launchpad, LP_CLONE_FDIO_ROOT | LP_CLONE_FDIO_CWD))?;\n \n         // Clone stdin, stdout, and stderr\n@@ -152,9 +152,9 @@ impl Process {\n         let mut avail: zx_size_t = 0;\n \n         unsafe {\n-            zx_cvt(zx_object_wait_one(self.handle.raw(), zx_TASK_TERMINATED,\n-                                      zx_TIME_INFINITE, ptr::null_mut()))?;\n-            zx_cvt(zx_object_get_info(self.handle.raw(), zx_INFO_PROCESS,\n+            zx_cvt(zx_object_wait_one(self.handle.raw(), ZX_TASK_TERMINATED,\n+                                      ZX_TIME_INFINITE, ptr::null_mut()))?;\n+            zx_cvt(zx_object_get_info(self.handle.raw(), ZX_INFO_PROCESS,\n                                       &mut proc_info as *mut _ as *mut libc::c_void,\n                                       mem::size_of::<zx_info_process_t>(), &mut actual,\n                                       &mut avail))?;\n@@ -175,7 +175,7 @@ impl Process {\n         let mut avail: zx_size_t = 0;\n \n         unsafe {\n-            let status = zx_object_wait_one(self.handle.raw(), zx_TASK_TERMINATED,\n+            let status = zx_object_wait_one(self.handle.raw(), ZX_TASK_TERMINATED,\n                                             0, ptr::null_mut());\n             match status {\n                 0 => { }, // Success\n@@ -184,7 +184,7 @@ impl Process {\n                 },\n                 _ => { panic!(\"Failed to wait on process handle: {}\", status); },\n             }\n-            zx_cvt(zx_object_get_info(self.handle.raw(), zx_INFO_PROCESS,\n+            zx_cvt(zx_object_get_info(self.handle.raw(), ZX_INFO_PROCESS,\n                                       &mut proc_info as *mut _ as *mut libc::c_void,\n                                       mem::size_of::<zx_info_process_t>(), &mut actual,\n                                       &mut avail))?;"}, {"sha": "2a0fcabcf7f4b863c89dcb5f70993672af5bbe1f", "filename": "src/libstd/sys/unix/process/zircon.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cc4e82fe7a9126a068e27dcdfc251a1b4be1aa77/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc4e82fe7a9126a068e27dcdfc251a1b4be1aa77/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fzircon.rs?ref=cc4e82fe7a9126a068e27dcdfc251a1b4be1aa77", "patch": "@@ -24,22 +24,22 @@ pub type zx_status_t = i32;\n \n pub type zx_size_t = usize;\n \n-pub const zx_HANDLE_INVALID: zx_handle_t = 0;\n+pub const ZX_HANDLE_INVALID: zx_handle_t = 0;\n \n pub type zx_time_t = u64;\n-pub const zx_TIME_INFINITE : zx_time_t = u64::MAX;\n+pub const ZX_TIME_INFINITE : zx_time_t = u64::MAX;\n \n pub type zx_signals_t = u32;\n \n-pub const zx_OBJECT_SIGNAL_3         : zx_signals_t = 1 << 3;\n+pub const ZX_OBJECT_SIGNAL_3         : zx_signals_t = 1 << 3;\n \n-pub const zx_TASK_TERMINATED        : zx_signals_t = zx_OBJECT_SIGNAL_3;\n+pub const ZX_TASK_TERMINATED        : zx_signals_t = ZX_OBJECT_SIGNAL_3;\n \n-pub const zx_RIGHT_SAME_RIGHTS  : zx_rights_t = 1 << 31;\n+pub const ZX_RIGHT_SAME_RIGHTS  : zx_rights_t = 1 << 31;\n \n pub type zx_object_info_topic_t = u32;\n \n-pub const zx_INFO_PROCESS         : zx_object_info_topic_t = 3;\n+pub const ZX_INFO_PROCESS         : zx_object_info_topic_t = 3;\n \n pub fn zx_cvt<T>(t: T) -> io::Result<T> where T: TryInto<zx_status_t>+Copy {\n     if let Ok(status) = TryInto::try_into(t) {\n@@ -76,7 +76,7 @@ impl Drop for Handle {\n     }\n }\n \n-// Common zx_INFO header\n+// Common ZX_INFO header\n #[derive(Default)]\n #[repr(C)]\n pub struct zx_info_header_t {\n@@ -93,7 +93,7 @@ pub struct zx_record_process_t {\n     pub return_code: c_int,\n }\n \n-// Returned for topic zx_INFO_PROCESS\n+// Returned for topic ZX_INFO_PROCESS\n #[derive(Default)]\n #[repr(C)]\n pub struct zx_info_process_t {"}]}