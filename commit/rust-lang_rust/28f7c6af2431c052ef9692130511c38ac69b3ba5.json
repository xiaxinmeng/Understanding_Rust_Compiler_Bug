{"sha": "28f7c6af2431c052ef9692130511c38ac69b3ba5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZjdjNmFmMjQzMWMwNTJlZjk2OTIxMzA1MTFjMzhhYzY5YjNiYTU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-07-31T06:57:59Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-07-31T07:06:25Z"}, "message": "Change bitvectors::relax_precond_block to use visit instead of walk", "tree": {"sha": "989be412aa8e59f5649078d43a8c269ec4ddf622", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/989be412aa8e59f5649078d43a8c269ec4ddf622"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28f7c6af2431c052ef9692130511c38ac69b3ba5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28f7c6af2431c052ef9692130511c38ac69b3ba5", "html_url": "https://github.com/rust-lang/rust/commit/28f7c6af2431c052ef9692130511c38ac69b3ba5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28f7c6af2431c052ef9692130511c38ac69b3ba5/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d552a0b95985f91278b2f3c05ee2c4b558a0a417", "url": "https://api.github.com/repos/rust-lang/rust/commits/d552a0b95985f91278b2f3c05ee2c4b558a0a417", "html_url": "https://github.com/rust-lang/rust/commit/d552a0b95985f91278b2f3c05ee2c4b558a0a417"}], "stats": {"total": 52, "additions": 28, "deletions": 24}, "files": [{"sha": "7efa499b205f9d91295ea2fcf293db657a233689", "filename": "src/comp/middle/tstate/bitvectors.rs", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/28f7c6af2431c052ef9692130511c38ac69b3ba5/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f7c6af2431c052ef9692130511c38ac69b3ba5/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs?ref=28f7c6af2431c052ef9692130511c38ac69b3ba5", "patch": "@@ -1,5 +1,5 @@\n import syntax::ast::*;\n-import syntax::walk;\n+import syntax::visit;\n import std::ivec;\n import std::option::*;\n import aux::*;\n@@ -25,6 +25,7 @@ import tstate::ann::clear_in_poststate;\n import tstate::ann::clear_in_prestate;\n import tstate::ann::clear_in_poststate_;\n import tritv::*;\n+import util::common::*;\n \n fn bit_num(fcx: &fn_ctxt, c: &tsconstr) -> uint {\n     let d = tsconstr_to_def_id(c);\n@@ -137,35 +138,38 @@ fn declare_var(fcx: &fn_ctxt, c: &tsconstr, pre: prestate) -> prestate {\n     ret rslt;\n }\n \n-fn relax_precond_block_non_recursive(fcx: &fn_ctxt, i: node_id, b: &blk) {\n-    relax_precond(i as uint, block_precond(fcx.ccx, b));\n+fn relax_precond_expr(e: &@expr, cx: &relax_ctxt,\n+                      vt: &visit::vt[relax_ctxt]) {\n+    relax_precond(cx.i as uint, expr_precond(cx.fcx.ccx, e));\n+    visit::visit_expr(e, cx, vt);\n }\n \n-fn relax_precond_expr(fcx: &fn_ctxt, i: node_id, e: &@expr) {\n-    relax_precond(i as uint, expr_precond(fcx.ccx, e));\n+fn relax_precond_stmt(s: &@stmt, cx: &relax_ctxt,\n+                      vt: &visit::vt[relax_ctxt]) {\n+    relax_precond(cx.i as uint, stmt_precond(cx.fcx.ccx, *s));\n+    visit::visit_stmt(s, cx, vt);\n }\n \n-fn relax_precond_stmt(fcx: &fn_ctxt, i: node_id, s: &@stmt) {\n-    relax_precond(i as uint, stmt_precond(fcx.ccx, *s));\n-}\n-\n-fn relax_precond_block(fcx: &fn_ctxt, i: node_id, b: &blk) {\n-    relax_precond_block_non_recursive(fcx, i, b);\n-    // FIXME: should use visit instead\n-    // could at least generalize this pattern\n-    // (also seen in ck::check_states_against_conditions)\n-    let keepgoing: @mutable bool = @mutable true;\n+type relax_ctxt = {fcx:fn_ctxt, i:node_id};\n \n-    fn quit(keepgoing: @mutable bool, i: &@item) { *keepgoing = false; }\n-    fn kg(keepgoing: @mutable bool) -> bool { ret *keepgoing; }\n+fn relax_precond_block_inner(b: &blk, cx: &relax_ctxt,\n+                             vt: &visit::vt[relax_ctxt]) {\n+    relax_precond(cx.i as uint, block_precond(cx.fcx.ccx, b));\n+    visit::visit_block(b, cx, vt);\n+}\n \n-    let v =\n-        {visit_block_pre: bind relax_precond_block_non_recursive(fcx, i, _),\n-         visit_expr_pre: bind relax_precond_expr(fcx, i, _),\n-         visit_stmt_pre: bind relax_precond_stmt(fcx, i, _),\n-         visit_item_pre: bind quit(keepgoing, _),\n-         keep_going: bind kg(keepgoing) with walk::default_visitor()};\n-    walk::walk_block(v, b);\n+fn relax_precond_block(fcx: &fn_ctxt, i: node_id, b:&blk) {\n+    let cx = {fcx: fcx, i: i};\n+    let visitor = visit::default_visitor[relax_ctxt]();\n+    visitor =\n+        @{visit_block: relax_precond_block_inner,\n+          visit_expr: relax_precond_expr,\n+          visit_stmt: relax_precond_stmt,\n+          visit_item: (fn (i: &@item, cx: &relax_ctxt,\n+                           vt: &visit::vt[relax_ctxt]) {})\n+          with *visitor};\n+    let v1 = visit::mk_vt(visitor);\n+    v1.visit_block(b, cx, v1);\n }\n \n fn gen_poststate(fcx: &fn_ctxt, id: node_id, c: &tsconstr) -> bool {"}]}