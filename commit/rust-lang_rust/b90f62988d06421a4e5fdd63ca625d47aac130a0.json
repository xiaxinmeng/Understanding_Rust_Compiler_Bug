{"sha": "b90f62988d06421a4e5fdd63ca625d47aac130a0", "node_id": "C_kwDOAAsO6NoAKGI5MGY2Mjk4OGQwNjQyMWE0ZTVmZGQ2M2NhNjI1ZDQ3YWFjMTMwYTA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-17T04:25:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-17T04:25:22Z"}, "message": "Rollup merge of #106869 - notriddle:notriddle/item-decl-pre-rust, r=GuillaumeGomez\n\nrustdoc: remove redundant item kind class from `.item-decl > pre`\n\nThis class originated in the very first commit of `rustdoc_ng`, and was used to add a color border around the item decl based on its kind.\n\nhttps://github.com/rust-lang/rust/blob/4fd061c426902b0904c65e64a3780b21f9ab3afb/src/rustdoc_ng/html/static/main.css#L102-L106\n\nThe item decl no longer has a border, and there aren't any kind-specific styles in modern rustdoc's rendering of this UI item.\n\nMost of this PR is updating test cases so that they use `item-decl` to find the `<pre>` tag instead of relying on the fact that the class name had `rust {kind}` in it while other `<pre>` tags only had class `rust`.", "tree": {"sha": "ffec19974b34160234d3cf4141c43c2b2635e439", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffec19974b34160234d3cf4141c43c2b2635e439"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b90f62988d06421a4e5fdd63ca625d47aac130a0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjxiMyCRBK7hj4Ov3rIwAACbEIAEmUX9L5C/QM9lM7XIptv4jd\nba3Hu7UAdqcRifWPI/7z5kjPnVYjUSXf0Yl9XkPB8na1AG6aeDs8Qzr8vvwUipU1\nmK8mRJkZSyG9D7PzXk5P2YmM6JvJ8HYcXq5SxL3OsQ2FKwceexHo2WAeQ+WC5cx+\nXSbaTsdhPctQR3pkrcbmFxu2/HfALUj5G6dAk+z7Bja1+fOpIy8WkzaDPRrNEPKl\nxmpCvLqDtN+dxASB+VNzap48rZL+JlpJIyFs+3bnJ8/Mg032Dm9MzHjyKKFiALxx\nESvwbcIAnwdNxId7ABHP75D34QXzQS0nWMxfI9nOe18Jqb6uBnu7OdxA24trqKA=\n=FH2H\n-----END PGP SIGNATURE-----\n", "payload": "tree ffec19974b34160234d3cf4141c43c2b2635e439\nparent 6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c\nparent 3a3f70c94e280cbd8354874438643d15ca6ef319\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1673929522 +0100\ncommitter GitHub <noreply@github.com> 1673929522 +0100\n\nRollup merge of #106869 - notriddle:notriddle/item-decl-pre-rust, r=GuillaumeGomez\n\nrustdoc: remove redundant item kind class from `.item-decl > pre`\n\nThis class originated in the very first commit of `rustdoc_ng`, and was used to add a color border around the item decl based on its kind.\n\nhttps://github.com/rust-lang/rust/blob/4fd061c426902b0904c65e64a3780b21f9ab3afb/src/rustdoc_ng/html/static/main.css#L102-L106\n\nThe item decl no longer has a border, and there aren't any kind-specific styles in modern rustdoc's rendering of this UI item.\n\nMost of this PR is updating test cases so that they use `item-decl` to find the `<pre>` tag instead of relying on the fact that the class name had `rust {kind}` in it while other `<pre>` tags only had class `rust`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b90f62988d06421a4e5fdd63ca625d47aac130a0", "html_url": "https://github.com/rust-lang/rust/commit/b90f62988d06421a4e5fdd63ca625d47aac130a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b90f62988d06421a4e5fdd63ca625d47aac130a0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c", "html_url": "https://github.com/rust-lang/rust/commit/6b49435480ea9a6d8bbd7fd2acf7b3aa6607577c"}, {"sha": "3a3f70c94e280cbd8354874438643d15ca6ef319", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a3f70c94e280cbd8354874438643d15ca6ef319", "html_url": "https://github.com/rust-lang/rust/commit/3a3f70c94e280cbd8354874438643d15ca6ef319"}], "stats": {"total": 436, "additions": 218, "deletions": 218}, "files": [{"sha": "f824c9e3ad2bd5eacbeec79587c137bb728067a9", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -531,7 +531,7 @@ fn item_function(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, f: &cle\n         f.decl.output.as_return().and_then(|output| notable_traits_button(output, cx));\n \n     wrap_into_item_decl(w, |w| {\n-        wrap_item(w, \"fn\", |w| {\n+        wrap_item(w, |w| {\n             render_attributes_in_pre(w, it, \"\");\n             w.reserve(header_len);\n             write!(\n@@ -570,7 +570,7 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n \n     // Output the trait definition\n     wrap_into_item_decl(w, |w| {\n-        wrap_item(w, \"trait\", |w| {\n+        wrap_item(w, |w| {\n             render_attributes_in_pre(w, it, \"\");\n             write!(\n                 w,\n@@ -1051,7 +1051,7 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n \n fn item_trait_alias(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean::TraitAlias) {\n     wrap_into_item_decl(w, |w| {\n-        wrap_item(w, \"trait-alias\", |w| {\n+        wrap_item(w, |w| {\n             render_attributes_in_pre(w, it, \"\");\n             write!(\n                 w,\n@@ -1075,7 +1075,7 @@ fn item_trait_alias(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &\n \n fn item_opaque_ty(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean::OpaqueTy) {\n     wrap_into_item_decl(w, |w| {\n-        wrap_item(w, \"opaque\", |w| {\n+        wrap_item(w, |w| {\n             render_attributes_in_pre(w, it, \"\");\n             write!(\n                 w,\n@@ -1099,7 +1099,7 @@ fn item_opaque_ty(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &cl\n \n fn item_typedef(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean::Typedef) {\n     fn write_content(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Typedef) {\n-        wrap_item(w, \"typedef\", |w| {\n+        wrap_item(w, |w| {\n             render_attributes_in_pre(w, it, \"\");\n             write!(w, \"{}\", visibility_print_with_space(it.visibility(cx.tcx()), it.item_id, cx));\n             write!(\n@@ -1128,7 +1128,7 @@ fn item_typedef(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clea\n \n fn item_union(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean::Union) {\n     wrap_into_item_decl(w, |w| {\n-        wrap_item(w, \"union\", |w| {\n+        wrap_item(w, |w| {\n             render_attributes_in_pre(w, it, \"\");\n             render_union(w, it, Some(&s.generics), &s.fields, \"\", cx);\n         });\n@@ -1193,7 +1193,7 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n     let tcx = cx.tcx();\n     let count_variants = e.variants().count();\n     wrap_into_item_decl(w, |w| {\n-        wrap_item(w, \"enum\", |w| {\n+        wrap_item(w, |w| {\n             render_attributes_in_pre(w, it, \"\");\n             write!(\n                 w,\n@@ -1357,17 +1357,17 @@ fn item_proc_macro(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, m: &c\n         let name = it.name.expect(\"proc-macros always have names\");\n         match m.kind {\n             MacroKind::Bang => {\n-                wrap_item(w, \"macro\", |w| {\n+                wrap_item(w, |w| {\n                     write!(w, \"{}!() {{ /* proc-macro */ }}\", name);\n                 });\n             }\n             MacroKind::Attr => {\n-                wrap_item(w, \"attr\", |w| {\n+                wrap_item(w, |w| {\n                     write!(w, \"#[{}]\", name);\n                 });\n             }\n             MacroKind::Derive => {\n-                wrap_item(w, \"derive\", |w| {\n+                wrap_item(w, |w| {\n                     write!(w, \"#[derive({})]\", name);\n                     if !m.helpers.is_empty() {\n                         w.push_str(\"\\n{\\n\");\n@@ -1401,7 +1401,7 @@ fn item_primitive(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item) {\n \n fn item_constant(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, c: &clean::Constant) {\n     wrap_into_item_decl(w, |w| {\n-        wrap_item(w, \"const\", |w| {\n+        wrap_item(w, |w| {\n             let tcx = cx.tcx();\n             render_attributes_in_code(w, it);\n \n@@ -1451,7 +1451,7 @@ fn item_constant(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, c: &cle\n \n fn item_struct(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean::Struct) {\n     wrap_into_item_decl(w, |w| {\n-        wrap_item(w, \"struct\", |w| {\n+        wrap_item(w, |w| {\n             render_attributes_in_code(w, it);\n             render_struct(w, it, Some(&s.generics), s.ctor_kind, &s.fields, \"\", true, cx);\n         });\n@@ -1504,7 +1504,7 @@ fn item_struct(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean\n \n fn item_static(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean::Static) {\n     wrap_into_item_decl(w, |w| {\n-        wrap_item(w, \"static\", |w| {\n+        wrap_item(w, |w| {\n             render_attributes_in_code(w, it);\n             write!(\n                 w,\n@@ -1521,7 +1521,7 @@ fn item_static(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean\n \n fn item_foreign_type(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item) {\n     wrap_into_item_decl(w, |w| {\n-        wrap_item(w, \"foreigntype\", |w| {\n+        wrap_item(w, |w| {\n             w.write_str(\"extern {\\n\");\n             render_attributes_in_code(w, it);\n             write!(\n@@ -1618,11 +1618,11 @@ where\n     w.write_str(\"</div>\")\n }\n \n-fn wrap_item<F>(w: &mut Buffer, item_name: &str, f: F)\n+fn wrap_item<F>(w: &mut Buffer, f: F)\n where\n     F: FnOnce(&mut Buffer),\n {\n-    w.write_fmt(format_args!(\"<pre class=\\\"rust {}\\\"><code>\", item_name));\n+    w.write_str(r#\"<pre class=\"rust\"><code>\"#);\n     f(w);\n     w.write_str(\"</code></pre>\");\n }"}, {"sha": "8561f537f3d32a8a18ce237832d04593fdf37be7", "filename": "tests/rustdoc-gui/code-tags.goml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc-gui%2Fcode-tags.goml", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc-gui%2Fcode-tags.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fcode-tags.goml?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -9,16 +9,16 @@ size: (1080, 600)\n // Check that their content is inside <pre><code>\n assert-count: (\".example-wrap pre > code\", 4)\n // Check that function signature is inside <pre><code>\n-assert: \"pre.rust.fn > code\"\n+assert: \".item-decl pre.rust > code\"\n \n goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n-assert: \"pre.rust.struct > code\"\n+assert: \".item-decl pre.rust > code\"\n \n goto: \"file://\" + |DOC_PATH| + \"/test_docs/enum.AnEnum.html\"\n-assert: \"pre.rust.enum > code\"\n+assert: \".item-decl pre.rust > code\"\n \n goto: \"file://\" + |DOC_PATH| + \"/test_docs/trait.AnotherOne.html\"\n-assert: \"pre.rust.trait > code\"\n+assert: \".item-decl pre.rust > code\"\n \n goto: \"file://\" + |DOC_PATH| + \"/test_docs/type.SomeType.html\"\n-assert: \"pre.rust.typedef > code\"\n+assert: \".item-decl pre.rust > code\""}, {"sha": "fafb156317866cc1970c78c0cc1395a0485afdf2", "filename": "tests/rustdoc-gui/font-weight.goml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc-gui%2Ffont-weight.goml", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc-gui%2Ffont-weight.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Ffont-weight.goml?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -20,7 +20,7 @@ goto: \"file://\" + |DOC_PATH| + \"/lib2/trait.Trait.html\"\n // This is a complex selector, so here's how it works:\n //\n // * //*[@class='item-decl'] \u2014 selects element of any tag with classes docblock and item-decl\n-// * /pre[@class='rust trait'] \u2014 selects immediate child with tag pre and classes rust and trait\n+// * /pre[@class='rust'] \u2014 selects immediate child with tag pre and class rust\n // * /code \u2014 selects immediate child with tag code\n // * /a[@class='constant'] \u2014 selects immediate child with tag a and class constant\n // * //text() \u2014 selects child that is text node\n@@ -29,11 +29,11 @@ goto: \"file://\" + |DOC_PATH| + \"/lib2/trait.Trait.html\"\n // This uses '/parent::*' as a proxy for the style of the text node.\n // We can't just select the '<a>' because intermediate tags could be added.\n assert-count: (\n-    \"//*[@class='item-decl']/pre[@class='rust trait']/code/a[@class='constant']//text()/parent::*\",\n+    \"//*[@class='item-decl']/pre[@class='rust']/code/a[@class='constant']//text()/parent::*\",\n     1,\n )\n assert-css: (\n-    \"//*[@class='item-decl']/pre[@class='rust trait']/code/a[@class='constant']//text()/parent::*\",\n+    \"//*[@class='item-decl']/pre[@class='rust']/code/a[@class='constant']//text()/parent::*\",\n     {\"font-weight\": \"400\"},\n )\n "}, {"sha": "c527cfbfcbc5630558ab81e40d3fd7c0d094d109", "filename": "tests/rustdoc-gui/list_code_block.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc-gui%2Flist_code_block.goml", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc-gui%2Flist_code_block.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Flist_code_block.goml?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -1,4 +1,4 @@\n // This test checks that code blocks in list are supported.\n goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n goto: \"./fn.check_list_code_block.html\"\n-assert: (\"pre.rust.fn\")\n+assert: (\".item-decl pre.rust\")"}, {"sha": "e7c0ee2de1a7a9036cc55a6ea9f6aecd588acfd5", "filename": "tests/rustdoc/array-links.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Farray-links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Farray-links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Farray-links.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -4,25 +4,25 @@\n pub struct MyBox<T: ?Sized>(*const T);\n \n // @has 'foo/fn.alpha.html'\n-// @snapshot link_slice_u32 - '//pre[@class=\"rust fn\"]/code'\n+// @snapshot link_slice_u32 - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n pub fn alpha() -> &'static [u32; 1] {\n     loop {}\n }\n \n // @has 'foo/fn.beta.html'\n-// @snapshot link_slice_generic - '//pre[@class=\"rust fn\"]/code'\n+// @snapshot link_slice_generic - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n pub fn beta<T>() -> &'static [T; 1] {\n     loop {}\n }\n \n // @has 'foo/fn.gamma.html'\n-// @snapshot link_box_u32 - '//pre[@class=\"rust fn\"]/code'\n+// @snapshot link_box_u32 - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n pub fn gamma() -> MyBox<[u32; 1]> {\n     loop {}\n }\n \n // @has 'foo/fn.delta.html'\n-// @snapshot link_box_generic - '//pre[@class=\"rust fn\"]/code'\n+// @snapshot link_box_generic - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n pub fn delta<T>() -> MyBox<[T; 1]> {\n     loop {}\n }"}, {"sha": "77b139b644f3a8dd97b0cff39336735535d6c22e", "filename": "tests/rustdoc/assoc-consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fassoc-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fassoc-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fassoc-consts.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -1,5 +1,5 @@\n pub trait Foo {\n-    // @has assoc_consts/trait.Foo.html '//*[@class=\"rust trait\"]' \\\n+    // @has assoc_consts/trait.Foo.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n     //      'const FOO: usize = 13usize;'\n     // @has - '//*[@id=\"associatedconstant.FOO\"]' 'const FOO: usize'\n     const FOO: usize = 12 + 1;"}, {"sha": "ab9702a24f469834a8fba8881cd660977831b744", "filename": "tests/rustdoc/assoc-item-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fassoc-item-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fassoc-item-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fassoc-item-cast.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -10,5 +10,5 @@ pub trait AsExpression<T> {\n }\n \n // @has foo/type.AsExprOf.html\n-// @has - '//pre[@class=\"rust typedef\"]' 'type AsExprOf<Item, Type> = <Item as AsExpression<Type>>::Expression;'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type AsExprOf<Item, Type> = <Item as AsExpression<Type>>::Expression;'\n pub type AsExprOf<Item, Type> = <Item as AsExpression<Type>>::Expression;"}, {"sha": "de36c8ffeff0f6121e63f6ef38a24efb28d4ed8b", "filename": "tests/rustdoc/assoc-types.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fassoc-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fassoc-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fassoc-types.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -12,8 +12,8 @@ pub trait Index<I: ?Sized> {\n }\n \n // @has assoc_types/fn.use_output.html\n-// @has - '//*[@class=\"rust fn\"]' '-> &T::Output'\n-// @has - '//*[@class=\"rust fn\"]//a[@href=\"trait.Index.html#associatedtype.Output\"]' 'Output'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' '-> &T::Output'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]//a[@href=\"trait.Index.html#associatedtype.Output\"]' 'Output'\n pub fn use_output<T: Index<usize>>(obj: &T, index: usize) -> &T::Output {\n     obj.index(index)\n }\n@@ -23,13 +23,13 @@ pub trait Feed {\n }\n \n // @has assoc_types/fn.use_input.html\n-// @has - '//*[@class=\"rust fn\"]' 'T::Input'\n-// @has - '//*[@class=\"rust fn\"]//a[@href=\"trait.Feed.html#associatedtype.Input\"]' 'Input'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'T::Input'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]//a[@href=\"trait.Feed.html#associatedtype.Input\"]' 'Input'\n pub fn use_input<T: Feed>(_feed: &T, _element: T::Input) { }\n \n // @has assoc_types/fn.cmp_input.html\n-// @has - '//*[@class=\"rust fn\"]' 'where T::Input: PartialEq<U::Input>'\n-// @has - '//*[@class=\"rust fn\"]//a[@href=\"trait.Feed.html#associatedtype.Input\"]' 'Input'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where T::Input: PartialEq<U::Input>'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]//a[@href=\"trait.Feed.html#associatedtype.Input\"]' 'Input'\n pub fn cmp_input<T: Feed, U: Feed>(a: &T::Input, b: &U::Input) -> bool\n     where T::Input: PartialEq<U::Input>\n {"}, {"sha": "fb7ebb5f82239791039b451f21815eb27a00f443", "filename": "tests/rustdoc/async-fn.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fasync-fn.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -1,35 +1,35 @@\n // edition:2018\n-// @has async_fn/fn.foo.html '//pre[@class=\"rust fn\"]' 'pub async fn foo() -> Option<Foo>'\n+// @has async_fn/fn.foo.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn foo() -> Option<Foo>'\n pub async fn foo() -> Option<Foo> {\n     None\n }\n \n-// @has async_fn/fn.bar.html '//pre[@class=\"rust fn\"]' 'pub async fn bar(a: i32, b: i32) -> i32'\n+// @has async_fn/fn.bar.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn bar(a: i32, b: i32) -> i32'\n pub async fn bar(a: i32, b: i32) -> i32 {\n     0\n }\n \n-// @has async_fn/fn.baz.html '//pre[@class=\"rust fn\"]' 'pub async fn baz<T>(a: T) -> T'\n+// @has async_fn/fn.baz.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn baz<T>(a: T) -> T'\n pub async fn baz<T>(a: T) -> T {\n     a\n }\n \n-// @has async_fn/fn.qux.html '//pre[@class=\"rust fn\"]' 'pub async unsafe fn qux() -> char'\n+// @has async_fn/fn.qux.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async unsafe fn qux() -> char'\n pub async unsafe fn qux() -> char {\n     '\u26a0'\n }\n \n-// @has async_fn/fn.mut_args.html '//pre[@class=\"rust fn\"]' 'pub async fn mut_args(a: usize)'\n+// @has async_fn/fn.mut_args.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn mut_args(a: usize)'\n pub async fn mut_args(mut a: usize) {}\n \n-// @has async_fn/fn.mut_ref.html '//pre[@class=\"rust fn\"]' 'pub async fn mut_ref(x: i32)'\n+// @has async_fn/fn.mut_ref.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn mut_ref(x: i32)'\n pub async fn mut_ref(ref mut x: i32) {}\n \n trait Bar {}\n \n impl Bar for () {}\n \n-// @has async_fn/fn.quux.html '//pre[@class=\"rust fn\"]' 'pub async fn quux() -> impl Bar'\n+// @has async_fn/fn.quux.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn quux() -> impl Bar'\n pub async fn quux() -> impl Bar {\n     ()\n }\n@@ -50,27 +50,27 @@ pub trait Pattern<'a> {}\n \n pub trait Trait<const N: usize> {}\n // @has async_fn/fn.const_generics.html\n-// @has - '//pre[@class=\"rust fn\"]' 'pub async fn const_generics<const N: usize>(_: impl Trait<N>)'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn const_generics<const N: usize>(_: impl Trait<N>)'\n pub async fn const_generics<const N: usize>(_: impl Trait<N>) {}\n \n // test that elided lifetimes are properly elided and not displayed as `'_`\n // regression test for #63037\n // @has async_fn/fn.elided.html\n-// @has - '//pre[@class=\"rust fn\"]' 'pub async fn elided(foo: &str) -> &str'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn elided(foo: &str) -> &str'\n pub async fn elided(foo: &str) -> &str {}\n // This should really be shown as written, but for implementation reasons it's difficult.\n // See `impl Clean for TyKind::Ref`.\n // @has async_fn/fn.user_elided.html\n-// @has - '//pre[@class=\"rust fn\"]' 'pub async fn user_elided(foo: &str) -> &str'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn user_elided(foo: &str) -> &str'\n pub async fn user_elided(foo: &'_ str) -> &str {}\n // @has async_fn/fn.static_trait.html\n-// @has - '//pre[@class=\"rust fn\"]' 'pub async fn static_trait(foo: &str) -> Box<dyn Bar>'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn static_trait(foo: &str) -> Box<dyn Bar>'\n pub async fn static_trait(foo: &str) -> Box<dyn Bar> {}\n // @has async_fn/fn.lifetime_for_trait.html\n-// @has - '//pre[@class=\"rust fn\"]' \"pub async fn lifetime_for_trait(foo: &str) -> Box<dyn Bar + '_>\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub async fn lifetime_for_trait(foo: &str) -> Box<dyn Bar + '_>\"\n pub async fn lifetime_for_trait(foo: &str) -> Box<dyn Bar + '_> {}\n // @has async_fn/fn.elided_in_input_trait.html\n-// @has - '//pre[@class=\"rust fn\"]' \"pub async fn elided_in_input_trait(t: impl Pattern<'_>)\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub async fn elided_in_input_trait(t: impl Pattern<'_>)\"\n pub async fn elided_in_input_trait(t: impl Pattern<'_>) {}\n \n struct AsyncFdReadyGuard<'a, T> { x: &'a T }\n@@ -88,8 +88,8 @@ impl Foo {\n \n // test named lifetimes, just in case\n // @has async_fn/fn.named.html\n-// @has - '//pre[@class=\"rust fn\"]' \"pub async fn named<'a, 'b>(foo: &'a str) -> &'b str\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub async fn named<'a, 'b>(foo: &'a str) -> &'b str\"\n pub async fn named<'a, 'b>(foo: &'a str) -> &'b str {}\n // @has async_fn/fn.named_trait.html\n-// @has - '//pre[@class=\"rust fn\"]' \"pub async fn named_trait<'a, 'b>(foo: impl Pattern<'a>) -> impl Pattern<'b>\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub async fn named_trait<'a, 'b>(foo: impl Pattern<'a>) -> impl Pattern<'b>\"\n pub async fn named_trait<'a, 'b>(foo: impl Pattern<'a>) -> impl Pattern<'b> {}"}, {"sha": "70e2e5c29508c211b28246df05e984b8fc2167b4", "filename": "tests/rustdoc/attributes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fattributes.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -1,13 +1,13 @@\n #![crate_name = \"foo\"]\n \n-// @has foo/fn.f.html '//*[@class=\"rust fn\"]' '#[no_mangle]'\n+// @has foo/fn.f.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' '#[no_mangle]'\n #[no_mangle]\n pub extern \"C\" fn f() {}\n \n-// @has foo/fn.g.html '//*[@class=\"rust fn\"]' '#[export_name = \"bar\"]'\n+// @has foo/fn.g.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' '#[export_name = \"bar\"]'\n #[export_name = \"bar\"]\n pub extern \"C\" fn g() {}\n \n-// @has foo/struct.Repr.html '//*[@class=\"item-decl\"]' '#[repr(C, align(8))]'\n+// @has foo/struct.Repr.html '//div[@class=\"item-decl\"]' '#[repr(C, align(8))]'\n #[repr(C, align(8))]\n pub struct Repr;"}, {"sha": "5143968bbd4390df0bab4c66cb4eb1f611eeb7c6", "filename": "tests/rustdoc/auxiliary/issue-85454.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fauxiliary%2Fissue-85454.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fauxiliary%2Fissue-85454.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fauxiliary%2Fissue-85454.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -1,5 +1,5 @@\n // @has issue_85454/trait.FromResidual.html\n-// @has - '//pre[@class=\"rust trait\"]' 'pub trait FromResidual<R = <Self as Try>::Residual> { fn from_residual(residual: R) -> Self; }'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub trait FromResidual<R = <Self as Try>::Residual> { fn from_residual(residual: R) -> Self; }'\n pub trait FromResidual<R = <Self as Try>::Residual> {\n     fn from_residual(residual: R) -> Self;\n }"}, {"sha": "4366ad4d0adaca435f5cf5ee8df2b307673e8a37", "filename": "tests/rustdoc/const-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fconst-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fconst-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-fn.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -1,7 +1,7 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.bar.html\n-// @has - '//*[@class=\"rust fn\"]' 'pub const fn bar() -> '\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub const fn bar() -> '\n /// foo\n pub const fn bar() -> usize {\n     2"}, {"sha": "b5226ad3f78bd6e0199ce2a4629b2207e406fbfa", "filename": "tests/rustdoc/const-generics/add-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fconst-generics%2Fadd-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fconst-generics%2Fadd-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Fadd-impl.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -2,7 +2,7 @@\n \n use std::ops::Add;\n \n-// @has foo/struct.Simd.html '//pre[@class=\"rust struct\"]' 'pub struct Simd<T, const WIDTH: usize>'\n+// @has foo/struct.Simd.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub struct Simd<T, const WIDTH: usize>'\n pub struct Simd<T, const WIDTH: usize> {\n     inner: T,\n }"}, {"sha": "acc3b853e5679c577696ffb87ff3578e00791293", "filename": "tests/rustdoc/const-generics/const-generic-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fconst-generics%2Fconst-generic-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fconst-generics%2Fconst-generic-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Fconst-generic-defaults.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n \n-// @has foo/struct.Foo.html '//pre[@class=\"rust struct\"]' \\\n+// @has foo/struct.Foo.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub struct Foo<const M: usize = 10, const N: usize = M, T = i32>(_);'\n pub struct Foo<const M: usize = 10, const N: usize = M, T = i32>(T);"}, {"sha": "543332d2c320b8922d18135ee7e27cfe01d25606", "filename": "tests/rustdoc/const-generics/const-generics-docs.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -3,21 +3,21 @@\n #![crate_name = \"foo\"]\n \n extern crate extern_crate;\n-// @has foo/fn.extern_fn.html '//pre[@class=\"rust fn\"]' \\\n+// @has foo/fn.extern_fn.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub fn extern_fn<const N: usize>() -> impl Iterator<Item = [u8; N]>'\n pub use extern_crate::extern_fn;\n-// @has foo/struct.ExternTy.html '//pre[@class=\"rust struct\"]' \\\n+// @has foo/struct.ExternTy.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub struct ExternTy<const N: usize> {'\n pub use extern_crate::ExternTy;\n-// @has foo/type.TyAlias.html '//pre[@class=\"rust typedef\"]' \\\n+// @has foo/type.TyAlias.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'type TyAlias<const N: usize> = ExternTy<N>;'\n pub use extern_crate::TyAlias;\n-// @has foo/trait.WTrait.html '//pre[@class=\"rust trait\"]' \\\n+// @has foo/trait.WTrait.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub trait WTrait<const N: usize, const M: usize>'\n-// @has - '//*[@class=\"rust trait\"]' 'fn hey<const P: usize>() -> usize'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn hey<const P: usize>() -> usize'\n pub use extern_crate::WTrait;\n \n-// @has foo/trait.Trait.html '//pre[@class=\"rust trait\"]' \\\n+// @has foo/trait.Trait.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub trait Trait<const N: usize>'\n // @has - '//*[@id=\"impl-Trait%3C1%3E-for-u8\"]//h3[@class=\"code-header\"]' 'impl Trait<1> for u8'\n // @has - '//*[@id=\"impl-Trait%3C2%3E-for-u8\"]//h3[@class=\"code-header\"]' 'impl Trait<2> for u8'\n@@ -30,10 +30,10 @@ impl Trait<2> for u8 {}\n impl Trait<{1 + 2}> for u8 {}\n impl<const N: usize> Trait<N> for [u8; N] {}\n \n-// @has foo/struct.Foo.html '//pre[@class=\"rust struct\"]' \\\n+// @has foo/struct.Foo.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub struct Foo<const N: usize>where u8: Trait<N>'\n pub struct Foo<const N: usize> where u8: Trait<N>;\n-// @has foo/struct.Bar.html '//pre[@class=\"rust struct\"]' 'pub struct Bar<T, const N: usize>(_)'\n+// @has foo/struct.Bar.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub struct Bar<T, const N: usize>(_)'\n pub struct Bar<T, const N: usize>([T; N]);\n \n // @has foo/struct.Foo.html '//*[@id=\"impl-Foo%3CM%3E\"]/h3[@class=\"code-header\"]' 'impl<const M: usize> Foo<M>where u8: Trait<M>'\n@@ -56,32 +56,32 @@ impl<const M: usize> Bar<u8, M> {\n     }\n }\n \n-// @has foo/fn.test.html '//pre[@class=\"rust fn\"]' \\\n+// @has foo/fn.test.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub fn test<const N: usize>() -> impl Trait<N>where u8: Trait<N>'\n pub fn test<const N: usize>() -> impl Trait<N> where u8: Trait<N> {\n     2u8\n }\n \n-// @has foo/fn.a_sink.html '//pre[@class=\"rust fn\"]' \\\n+// @has foo/fn.a_sink.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub async fn a_sink<const N: usize>(v: [u8; N]) -> impl Trait<N>'\n pub async fn a_sink<const N: usize>(v: [u8; N]) -> impl Trait<N> {\n     v\n }\n \n-// @has foo/fn.b_sink.html '//pre[@class=\"rust fn\"]' \\\n+// @has foo/fn.b_sink.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub async fn b_sink<const N: usize>(_: impl Trait<N>)'\n pub async fn b_sink<const N: usize>(_: impl Trait<N>) {}\n \n-// @has foo/fn.concrete.html '//pre[@class=\"rust fn\"]' \\\n+// @has foo/fn.concrete.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub fn concrete() -> [u8; 22]'\n pub fn concrete() -> [u8; 3 + std::mem::size_of::<u64>() << 1] {\n     Default::default()\n }\n \n-// @has foo/type.Faz.html '//pre[@class=\"rust typedef\"]' \\\n+// @has foo/type.Faz.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'type Faz<const N: usize> = [u8; N];'\n pub type Faz<const N: usize> = [u8; N];\n-// @has foo/type.Fiz.html '//pre[@class=\"rust typedef\"]' \\\n+// @has foo/type.Fiz.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'type Fiz<const N: usize> = [[u8; N]; 48];'\n pub type Fiz<const N: usize> = [[u8; N]; 3 << 4];\n \n@@ -91,7 +91,7 @@ macro_rules! define_me {\n     }\n }\n \n-// @has foo/struct.Foz.html '//pre[@class=\"rust struct\"]' \\\n+// @has foo/struct.Foz.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub struct Foz<const N: usize>(_);'\n define_me!(Foz<N>);\n \n@@ -103,13 +103,13 @@ impl<const N: usize> Q for [u8; N] {\n     const ASSOC: usize = N;\n }\n \n-// @has foo/fn.q_user.html '//pre[@class=\"rust fn\"]' \\\n+// @has foo/fn.q_user.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub fn q_user() -> [u8; 13]'\n pub fn q_user() -> [u8; <[u8; 13] as Q>::ASSOC] {\n     [0; <[u8; 13] as Q>::ASSOC]\n }\n \n-// @has foo/union.Union.html '//pre[@class=\"rust union\"]' \\\n+// @has foo/union.Union.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub union Union<const N: usize>'\n pub union Union<const N: usize> {\n     // @has - //pre \"pub arr: [u8; N]\"\n@@ -118,7 +118,7 @@ pub union Union<const N: usize> {\n     pub another_arr: [(); N],\n }\n \n-// @has foo/enum.Enum.html '//pre[@class=\"rust enum\"]' \\\n+// @has foo/enum.Enum.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub enum Enum<const N: usize>'\n pub enum Enum<const N: usize> {\n     // @has - //pre \"Variant([u8; N])\""}, {"sha": "726fb8f0c341681af2ca5df0b666ee9dc6643c3e", "filename": "tests/rustdoc/const-generics/const-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Fconst-impl.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -8,7 +8,7 @@ pub enum Order {\n     Unsorted,\n }\n \n-// @has foo/struct.VSet.html '//pre[@class=\"rust struct\"]' 'pub struct VSet<T, const ORDER: Order>'\n+// @has foo/struct.VSet.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub struct VSet<T, const ORDER: Order>'\n // @has foo/struct.VSet.html '//*[@id=\"impl-Send-for-VSet%3CT%2C%20ORDER%3E\"]/h3[@class=\"code-header\"]' 'impl<T, const ORDER: Order> Send for VSet<T, ORDER>'\n // @has foo/struct.VSet.html '//*[@id=\"impl-Sync-for-VSet%3CT%2C%20ORDER%3E\"]/h3[@class=\"code-header\"]' 'impl<T, const ORDER: Order> Sync for VSet<T, ORDER>'\n pub struct VSet<T, const ORDER: Order> {"}, {"sha": "c53cf6dcd0570b4f0717ca79062cb2f35333ee74", "filename": "tests/rustdoc/const-generics/generic_const_exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fconst-generics%2Fgeneric_const_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fconst-generics%2Fgeneric_const_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Fgeneric_const_exprs.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -2,6 +2,6 @@\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n // make sure that `ConstEvaluatable` predicates dont cause rustdoc to ICE #77647\n-// @has foo/struct.Ice.html '//pre[@class=\"rust struct\"]' \\\n+// @has foo/struct.Ice.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub struct Ice<const N: usize>;'\n pub struct Ice<const N: usize> where [(); N + 1]:;"}, {"sha": "72473a112440ce28414f01b479f18dc3e4a789db", "filename": "tests/rustdoc/const-generics/type-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fconst-generics%2Ftype-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fconst-generics%2Ftype-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Ftype-alias.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -1,4 +1,4 @@\n #![crate_name = \"foo\"]\n \n-// @has foo/type.CellIndex.html '//pre[@class=\"rust typedef\"]' 'type CellIndex<const D: usize> = [i64; D];'\n+// @has foo/type.CellIndex.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type CellIndex<const D: usize> = [i64; D];'\n pub type CellIndex<const D: usize> = [i64; D];"}, {"sha": "42f6ac7923bf2e12b6a95944a29a69c824ce881c", "filename": "tests/rustdoc/const-intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fconst-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fconst-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-intrinsic.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -6,20 +6,20 @@\n \n extern \"rust-intrinsic\" {\n     // @has 'foo/fn.transmute.html'\n-    // @has - '//pre[@class=\"rust fn\"]' 'pub const unsafe extern \"rust-intrinsic\" fn transmute<T, U>(_: T) -> U'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub const unsafe extern \"rust-intrinsic\" fn transmute<T, U>(_: T) -> U'\n     #[stable(since=\"1.0.0\", feature=\"rust1\")]\n     #[rustc_const_stable(feature = \"const_transmute\", since = \"1.56.0\")]\n     pub fn transmute<T, U>(_: T) -> U;\n \n     // @has 'foo/fn.unreachable.html'\n-    // @has - '//pre[@class=\"rust fn\"]' 'pub unsafe extern \"rust-intrinsic\" fn unreachable() -> !'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub unsafe extern \"rust-intrinsic\" fn unreachable() -> !'\n     #[stable(since=\"1.0.0\", feature=\"rust1\")]\n     pub fn unreachable() -> !;\n }\n \n extern \"C\" {\n     // @has 'foo/fn.needs_drop.html'\n-    // @has - '//pre[@class=\"rust fn\"]' 'pub unsafe extern \"C\" fn needs_drop() -> !'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub unsafe extern \"C\" fn needs_drop() -> !'\n     #[stable(since=\"1.0.0\", feature=\"rust1\")]\n     pub fn needs_drop() -> !;\n }"}, {"sha": "96c64ac4e0211b2c09873e337208f6913899e1b9", "filename": "tests/rustdoc/fn-pointer-arg-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Ffn-pointer-arg-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Ffn-pointer-arg-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Ffn-pointer-arg-name.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.f.html\n-// @has - '//*[@class=\"rust fn\"]' 'pub fn f(callback: fn(len: usize, foo: u32))'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn f(callback: fn(len: usize, foo: u32))'\n pub fn f(callback: fn(len: usize, foo: u32)) {}"}, {"sha": "406157ce26c8093e4de47be334f9d4bf02a03d05", "filename": "tests/rustdoc/hide-complex-unevaluated-const-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fhide-complex-unevaluated-const-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fhide-complex-unevaluated-const-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fhide-complex-unevaluated-const-arguments.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -63,7 +63,7 @@ impl<const S: Struct, St: Stage + ?Sized> Helper<S> for St {\n // this test as long as one can ensure that private fields are not leaked!\n //\n // @has hide_complex_unevaluated_const_arguments/trait.Sub.html \\\n-//      '//*[@class=\"rust trait\"]' \\\n+//      '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub trait Sub: Sup<{ _ }, { _ }> { }'\n pub trait Sub: Sup<{ 90 * 20 * 4 }, { Struct { private: () } }> {}\n "}, {"sha": "a4ca928f3331b94068dd7cd89d75dc1f8d8d9cc8", "filename": "tests/rustdoc/inline-default-methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Finline-default-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Finline-default-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Finline-default-methods.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -4,6 +4,6 @@\n extern crate inline_default_methods;\n \n // @has inline_default_methods/trait.Foo.html\n-// @has - '//*[@class=\"rust trait\"]' 'fn bar(&self);'\n-// @has - '//*[@class=\"rust trait\"]' 'fn foo(&mut self) { ... }'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn bar(&self);'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn foo(&mut self) { ... }'\n pub use inline_default_methods::Foo;"}, {"sha": "0da8bfc3a9ae368460d0c44fb3307b30c6515170", "filename": "tests/rustdoc/inline_cross/dyn_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Finline_cross%2Fdyn_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Finline_cross%2Fdyn_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Finline_cross%2Fdyn_trait.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -22,10 +22,10 @@ pub use dyn_trait::Ty2;\n pub use dyn_trait::Ty3;\n \n // @has user/fn.func0.html\n-// @has - '//pre[@class=\"rust fn\"]' \"func0(_: &dyn Fn())\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"func0(_: &dyn Fn())\"\n // FIXME(fmease): Show placeholder-lifetime bound, render \"func0(_: &(dyn Fn() + '_))\"\n pub use dyn_trait::func0;\n \n // @has user/fn.func1.html\n-// @has - '//pre[@class=\"rust fn\"]' \"func1<'func>(_: &(dyn Fn() + 'func))\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"func1<'func>(_: &(dyn Fn() + 'func))\"\n pub use dyn_trait::func1;"}, {"sha": "e8587209b61655ea358c161a77580a1c4a2e9d22", "filename": "tests/rustdoc/inline_cross/impl_trait.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Finline_cross%2Fimpl_trait.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -4,37 +4,37 @@\n extern crate impl_trait_aux;\n \n // @has impl_trait/fn.func.html\n-// @has - '//pre[@class=\"rust fn\"]' \"pub fn func<'a>(_x: impl Clone + Into<Vec<u8, Global>> + 'a)\"\n-// @!has - '//pre[@class=\"rust fn\"]' 'where'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub fn func<'a>(_x: impl Clone + Into<Vec<u8, Global>> + 'a)\"\n+// @!has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where'\n pub use impl_trait_aux::func;\n \n // @has impl_trait/fn.func2.html\n-// @has - '//pre[@class=\"rust fn\"]' \"func2<T>(\"\n-// @has - '//pre[@class=\"rust fn\"]' \"_x: impl Deref<Target = Option<T>> + Iterator<Item = T>,\"\n-// @has - '//pre[@class=\"rust fn\"]' \"_y: impl Iterator<Item = u8>)\"\n-// @!has - '//pre[@class=\"rust fn\"]' 'where'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"func2<T>(\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"_x: impl Deref<Target = Option<T>> + Iterator<Item = T>,\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"_y: impl Iterator<Item = u8>)\"\n+// @!has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where'\n pub use impl_trait_aux::func2;\n \n // @has impl_trait/fn.func3.html\n-// @has - '//pre[@class=\"rust fn\"]' \"func3(\"\n-// @has - '//pre[@class=\"rust fn\"]' \"_x: impl Iterator<Item = impl Iterator<Item = u8>> + Clone)\"\n-// @!has - '//pre[@class=\"rust fn\"]' 'where'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"func3(\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"_x: impl Iterator<Item = impl Iterator<Item = u8>> + Clone)\"\n+// @!has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where'\n pub use impl_trait_aux::func3;\n \n // @has impl_trait/fn.func4.html\n-// @has - '//pre[@class=\"rust fn\"]' \"func4<T>(\"\n-// @has - '//pre[@class=\"rust fn\"]' \"T: Iterator<Item = impl Clone>,\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"func4<T>(\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"T: Iterator<Item = impl Clone>,\"\n pub use impl_trait_aux::func4;\n \n // @has impl_trait/fn.func5.html\n-// @has - '//pre[@class=\"rust fn\"]' \"func5(\"\n-// @has - '//pre[@class=\"rust fn\"]' \"_f: impl for<'any> Fn(&'any str, &'any str) -> bool + for<'r> Other<T<'r> = ()>,\"\n-// @has - '//pre[@class=\"rust fn\"]' \"_a: impl for<'alpha, 'beta> Auxiliary<'alpha, Item<'beta> = fn(_: &'beta ())>\"\n-// @!has - '//pre[@class=\"rust fn\"]' 'where'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"func5(\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"_f: impl for<'any> Fn(&'any str, &'any str) -> bool + for<'r> Other<T<'r> = ()>,\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"_a: impl for<'alpha, 'beta> Auxiliary<'alpha, Item<'beta> = fn(_: &'beta ())>\"\n+// @!has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where'\n pub use impl_trait_aux::func5;\n \n // @has impl_trait/fn.async_fn.html\n-// @has - '//pre[@class=\"rust fn\"]' \"pub async fn async_fn()\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub async fn async_fn()\"\n pub use impl_trait_aux::async_fn;\n \n // @has impl_trait/struct.Foo.html"}, {"sha": "a774b0ca7cd7a4ca54324b86e49f17406b641a18", "filename": "tests/rustdoc/issue-20646.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fissue-20646.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fissue-20646.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-20646.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -13,14 +13,14 @@ pub trait Trait {\n }\n \n // @has issue_20646/fn.fun.html \\\n-//      '//*[@class=\"rust fn\"]' 'where T: Trait<Output = i32>'\n+//      '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where T: Trait<Output = i32>'\n pub fn fun<T>(_: T) where T: Trait<Output=i32> {}\n \n pub mod reexport {\n     // @has issue_20646/reexport/trait.Trait.html \\\n     //      '//*[@id=\"associatedtype.Output\"]' \\\n     //      'type Output'\n     // @has issue_20646/reexport/fn.fun.html \\\n-    //      '//*[@class=\"rust fn\"]' 'where T: Trait<Output = i32>'\n+    //      '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where T: Trait<Output = i32>'\n     pub use issue_20646::{Trait, fun};\n }"}, {"sha": "026b4f5acc912d7b2eb6889e81d2f20341e1814b", "filename": "tests/rustdoc/issue-20727-2.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fissue-20727-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fissue-20727-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-20727-2.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -5,18 +5,18 @@ extern crate issue_20727;\n \n // @has issue_20727_2/trait.Add.html\n pub trait Add<RHS = Self> {\n-    // @has - '//*[@class=\"rust trait\"]' 'trait Add<RHS = Self> {'\n-    // @has - '//*[@class=\"rust trait\"]' 'type Output;'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Add<RHS = Self> {'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Output;'\n     type Output;\n \n-    // @has - '//*[@class=\"rust trait\"]' 'fn add(self, rhs: RHS) -> Self::Output;'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn add(self, rhs: RHS) -> Self::Output;'\n     fn add(self, rhs: RHS) -> Self::Output;\n }\n \n // @has issue_20727_2/reexport/trait.Add.html\n pub mod reexport {\n-    // @has - '//*[@class=\"rust trait\"]' 'trait Add<RHS = Self> {'\n-    // @has - '//*[@class=\"rust trait\"]' 'type Output;'\n-    // @has - '//*[@class=\"rust trait\"]' 'fn add(self, rhs: RHS) -> Self::Output;'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Add<RHS = Self> {'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Output;'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn add(self, rhs: RHS) -> Self::Output;'\n     pub use issue_20727::Add;\n }"}, {"sha": "741ce8023d7e78bfb58fae0d34cd6e7b27baf512", "filename": "tests/rustdoc/issue-20727-3.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fissue-20727-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fissue-20727-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-20727-3.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -7,18 +7,18 @@ pub trait Bar {}\n \n // @has issue_20727_3/trait.Deref2.html\n pub trait Deref2 {\n-    // @has - '//*[@class=\"rust trait\"]' 'trait Deref2 {'\n-    // @has - '//*[@class=\"rust trait\"]' 'type Target: Bar;'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Deref2 {'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Target: Bar;'\n     type Target: Bar;\n \n-    // @has - '//*[@class=\"rust trait\"]' 'fn deref(&self) -> Self::Target;'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn deref(&self) -> Self::Target;'\n     fn deref(&self) -> Self::Target;\n }\n \n // @has issue_20727_3/reexport/trait.Deref2.html\n pub mod reexport {\n-    // @has - '//*[@class=\"rust trait\"]' 'trait Deref2 {'\n-    // @has - '//*[@class=\"rust trait\"]' 'type Target: Bar;'\n-    // @has - '//*[@class=\"rust trait\"]' 'fn deref(&self) -> Self::Target;'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Deref2 {'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Target: Bar;'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn deref(&self) -> Self::Target;'\n     pub use issue_20727::Deref2;\n }"}, {"sha": "b8fac4da6eadf8288b91c9370d730291873cbed7", "filename": "tests/rustdoc/issue-20727-4.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fissue-20727-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fissue-20727-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-20727-4.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -5,36 +5,36 @@ extern crate issue_20727;\n \n // @has issue_20727_4/trait.Index.html\n pub trait Index<Idx: ?Sized> {\n-    // @has - '//*[@class=\"rust trait\"]' 'trait Index<Idx: ?Sized> {'\n-    // @has - '//*[@class=\"rust trait\"]' 'type Output: ?Sized'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Index<Idx: ?Sized> {'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Output: ?Sized'\n     type Output: ?Sized;\n \n-    // @has - '//*[@class=\"rust trait\"]' \\\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n     //        'fn index(&self, index: Idx) -> &Self::Output'\n     fn index(&self, index: Idx) -> &Self::Output;\n }\n \n // @has issue_20727_4/trait.IndexMut.html\n pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n-    // @has - '//*[@class=\"rust trait\"]' \\\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n     //        'trait IndexMut<Idx: ?Sized>: Index<Idx> {'\n-    // @has - '//*[@class=\"rust trait\"]' \\\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n     //        'fn index_mut(&mut self, index: Idx) -> &mut Self::Output;'\n     fn index_mut(&mut self, index: Idx) -> &mut Self::Output;\n }\n \n pub mod reexport {\n     // @has issue_20727_4/reexport/trait.Index.html\n-    // @has - '//*[@class=\"rust trait\"]' 'trait Index<Idx>where Idx: ?Sized,{'\n-    // @has - '//*[@class=\"rust trait\"]' 'type Output: ?Sized'\n-    // @has - '//*[@class=\"rust trait\"]' \\\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Index<Idx>where Idx: ?Sized,{'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Output: ?Sized'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n     //        'fn index(&self, index: Idx) -> &Self::Output'\n     pub use issue_20727::Index;\n \n     // @has issue_20727_4/reexport/trait.IndexMut.html\n-    // @has - '//*[@class=\"rust trait\"]' \\\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n     //        'trait IndexMut<Idx>: Index<Idx>where Idx: ?Sized,{'\n-    // @has - '//*[@class=\"rust trait\"]' \\\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n     //        'fn index_mut(&mut self, index: Idx) -> &mut Self::Output;'\n     pub use issue_20727::IndexMut;\n }"}, {"sha": "df334821cccc97868e71746592ff6e100c7bb6e6", "filename": "tests/rustdoc/issue-20727.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fissue-20727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fissue-20727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-20727.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -5,20 +5,20 @@ extern crate issue_20727;\n \n // @has issue_20727/trait.Deref.html\n pub trait Deref {\n-    // @has - '//*[@class=\"rust trait\"]' 'trait Deref {'\n-    // @has - '//*[@class=\"rust trait\"]' 'type Target: ?Sized;'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Deref {'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Target: ?Sized;'\n     type Target: ?Sized;\n \n-    // @has - '//*[@class=\"rust trait\"]' \\\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n     //        \"fn deref<'a>(&'a self) -> &'a Self::Target;\"\n     fn deref<'a>(&'a self) -> &'a Self::Target;\n }\n \n // @has issue_20727/reexport/trait.Deref.html\n pub mod reexport {\n-    // @has - '//*[@class=\"rust trait\"]' 'trait Deref {'\n-    // @has - '//*[@class=\"rust trait\"]' 'type Target: ?Sized;'\n-    // @has - '//*[@class=\"rust trait\"]' \\\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Deref {'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Target: ?Sized;'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n     //      \"fn deref<'a>(&'a self) -> &'a Self::Target;\"\n     pub use issue_20727::Deref;\n }"}, {"sha": "19e626ba132356d69889be10f1fe80a42849824e", "filename": "tests/rustdoc/issue-22038.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fissue-22038.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fissue-22038.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-22038.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -1,19 +1,19 @@\n extern \"C\" {\n     // @has issue_22038/fn.foo1.html \\\n-    //      '//*[@class=\"rust fn\"]' 'pub unsafe extern \"C\" fn foo1()'\n+    //      '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub unsafe extern \"C\" fn foo1()'\n     pub fn foo1();\n }\n \n extern \"system\" {\n     // @has issue_22038/fn.foo2.html \\\n-    //      '//*[@class=\"rust fn\"]' 'pub unsafe extern \"system\" fn foo2()'\n+    //      '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub unsafe extern \"system\" fn foo2()'\n     pub fn foo2();\n }\n \n // @has issue_22038/fn.bar.html \\\n-//      '//*[@class=\"rust fn\"]' 'pub extern \"C\" fn bar()'\n+//      '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub extern \"C\" fn bar()'\n pub extern \"C\" fn bar() {}\n \n // @has issue_22038/fn.baz.html \\\n-//      '//*[@class=\"rust fn\"]' 'pub extern \"system\" fn baz()'\n+//      '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub extern \"system\" fn baz()'\n pub extern \"system\" fn baz() {}"}, {"sha": "b4c52e2f17a6d93fba6a71fba51fa2795939889f", "filename": "tests/rustdoc/issue-33302.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fissue-33302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fissue-33302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-33302.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -6,17 +6,17 @@ macro_rules! make {\n         pub struct S;\n \n         // @has issue_33302/constant.CST.html \\\n-        //        '//pre[@class=\"rust const\"]' 'pub const CST: i32'\n+        //        '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub const CST: i32'\n         pub const CST: i32 = ($n * $n);\n         // @has issue_33302/static.ST.html \\\n-        //        '//pre[@class=\"rust static\"]' 'pub static ST: i32'\n+        //        '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub static ST: i32'\n         pub static ST: i32 = ($n * $n);\n \n         pub trait T<X> {\n             fn ignore(_: &X) {}\n             const C: X;\n             // @has issue_33302/trait.T.html \\\n-            //        '//*[@class=\"rust trait\"]' 'const D: i32'\n+            //        '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'const D: i32'\n             // @has - '//*[@id=\"associatedconstant.D\"]' 'const D: i32'\n             const D: i32 = ($n * $n);\n         }"}, {"sha": "74fc22b31dc0c84cd6956e52bb6aff5173bfd85e", "filename": "tests/rustdoc/issue-85454.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fissue-85454.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fissue-85454.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-85454.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -5,7 +5,7 @@\n extern crate issue_85454;\n \n // @has foo/trait.FromResidual.html\n-// @has - '//pre[@class=\"rust trait\"]' 'pub trait FromResidual<R = <Self as Try>::Residual> { fn from_residual(residual: R) -> Self; }'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub trait FromResidual<R = <Self as Try>::Residual> { fn from_residual(residual: R) -> Self; }'\n pub trait FromResidual<R = <Self as Try>::Residual> {\n     fn from_residual(residual: R) -> Self;\n }\n@@ -24,6 +24,6 @@ pub enum ControlFlow<B, C = ()> {\n \n pub mod reexport {\n     // @has foo/reexport/trait.FromResidual.html\n-    // @has - '//pre[@class=\"rust trait\"]' 'pub trait FromResidual<R = <Self as Try>::Residual> { fn from_residual(residual: R) -> Self; }'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub trait FromResidual<R = <Self as Try>::Residual> { fn from_residual(residual: R) -> Self; }'\n     pub use issue_85454::*;\n }"}, {"sha": "884b63ac97ffceee0fc6f6033ed96b742372fcbf", "filename": "tests/rustdoc/issue-98697.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fissue-98697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fissue-98697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-98697.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -8,8 +8,8 @@\n \n extern crate issue_98697_reexport_with_anonymous_lifetime;\n \n-// @has issue_98697/fn.repro.html '//pre[@class=\"rust fn\"]/code' 'fn repro<F>()where F: Fn(&str)'\n-// @!has issue_98697/fn.repro.html '//pre[@class=\"rust fn\"]/code' 'for<'\n+// @has issue_98697/fn.repro.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code' 'fn repro<F>()where F: Fn(&str)'\n+// @!has issue_98697/fn.repro.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code' 'for<'\n pub use issue_98697_reexport_with_anonymous_lifetime::repro;\n \n // @has issue_98697/struct.Extra.html '//div[@id=\"trait-implementations-list\"]//h3[@class=\"code-header\"]' 'impl MyTrait<&Extra> for Extra'"}, {"sha": "14533624e448e6f059699be88c56dd554d7b34fc", "filename": "tests/rustdoc/legacy-const-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Flegacy-const-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Flegacy-const-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Flegacy-const-generic.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -2,14 +2,14 @@\n #![feature(rustc_attrs)]\n \n // @has 'foo/fn.foo.html'\n-// @has - '//*[@class=\"rust fn\"]' 'fn foo(x: usize, const Y: usize, z: usize) -> [usize; 3]'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn foo(x: usize, const Y: usize, z: usize) -> [usize; 3]'\n #[rustc_legacy_const_generics(1)]\n pub fn foo<const Y: usize>(x: usize, z: usize) -> [usize; 3] {\n     [x, Y, z]\n }\n \n // @has 'foo/fn.bar.html'\n-// @has - '//*[@class=\"rust fn\"]' 'fn bar(x: usize, const Y: usize, const Z: usize) -> [usize; 3]'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn bar(x: usize, const Y: usize, const Z: usize) -> [usize; 3]'\n #[rustc_legacy_const_generics(1, 2)]\n pub fn bar<const Y: usize, const Z: usize>(x: usize) -> [usize; 3] {\n     [x, Y, z]"}, {"sha": "0fb66059109071885e06a42ac2b60cc12db8f26e", "filename": "tests/rustdoc/lifetime-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Flifetime-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Flifetime-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Flifetime-name.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n \n // @has 'foo/type.Resolutions.html'\n-// @has - '//*[@class=\"rust typedef\"]' \"pub type Resolutions<'tcx> = &'tcx u8;\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub type Resolutions<'tcx> = &'tcx u8;\"\n pub type Resolutions<'tcx> = &'tcx u8;"}, {"sha": "3b862e651c9098e5989b7208159c8b0f9889fda3", "filename": "tests/rustdoc/mut-params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fmut-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fmut-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fmut-params.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -13,6 +13,6 @@ impl Foo {\n     pub fn bar(mut bar: ()) {}\n }\n \n-// @count foo/fn.baz.html '//*[@class=\"rust fn\"]' 1\n-// @!has - '//*[@class=\"rust fn\"]' 'mut'\n+// @count foo/fn.baz.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 1\n+// @!has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'mut'\n pub fn baz(mut foo: Foo) {}"}, {"sha": "659480479fd13e9dd747eb52294909696ac08891", "filename": "tests/rustdoc/normalize-assoc-item.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fnormalize-assoc-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fnormalize-assoc-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fnormalize-assoc-item.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -19,12 +19,12 @@ impl Trait for isize {\n     type X = <() as Trait>::X;\n }\n \n-// @has 'normalize_assoc_item/fn.f.html' '//pre[@class=\"rust fn\"]' 'pub fn f() -> isize'\n+// @has 'normalize_assoc_item/fn.f.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn f() -> isize'\n pub fn f() -> <usize as Trait>::X {\n     0\n }\n \n-// @has 'normalize_assoc_item/fn.f2.html' '//pre[@class=\"rust fn\"]' 'pub fn f2() -> fn() -> i32'\n+// @has 'normalize_assoc_item/fn.f2.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn f2() -> fn() -> i32'\n pub fn f2() -> <isize as Trait>::X {\n     todo!()\n }\n@@ -49,10 +49,10 @@ impl<Inner: Trait> Trait for Generic<Inner> {\n // These can't be normalized because they depend on a generic parameter.\n // However the user can choose whether the text should be displayed as `Inner::X` or `<Inner as Trait>::X`.\n \n-// @has 'normalize_assoc_item/struct.Unknown.html' '//pre[@class=\"rust struct\"]' 'pub struct Unknown<Inner: Trait>(pub <Inner as Trait>::X);'\n+// @has 'normalize_assoc_item/struct.Unknown.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub struct Unknown<Inner: Trait>(pub <Inner as Trait>::X);'\n pub struct Unknown<Inner: Trait>(pub <Inner as Trait>::X);\n \n-// @has 'normalize_assoc_item/struct.Unknown2.html' '//pre[@class=\"rust struct\"]' 'pub struct Unknown2<Inner: Trait>(pub Inner::X);'\n+// @has 'normalize_assoc_item/struct.Unknown2.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub struct Unknown2<Inner: Trait>(pub Inner::X);'\n pub struct Unknown2<Inner: Trait>(pub Inner::X);\n \n trait Lifetimes<'a> {\n@@ -63,20 +63,20 @@ impl<'a> Lifetimes<'a> for usize {\n     type Y = &'a isize;\n }\n \n-// @has 'normalize_assoc_item/fn.g.html' '//pre[@class=\"rust fn\"]' \"pub fn g() -> &isize\"\n+// @has 'normalize_assoc_item/fn.g.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub fn g() -> &isize\"\n pub fn g() -> <usize as Lifetimes<'static>>::Y {\n     &0\n }\n \n-// @has 'normalize_assoc_item/constant.A.html' '//pre[@class=\"rust const\"]' \"pub const A: &isize\"\n+// @has 'normalize_assoc_item/constant.A.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub const A: &isize\"\n pub const A: <usize as Lifetimes<'static>>::Y = &0;\n \n // test cross-crate re-exports\n extern crate inner;\n-// @has 'normalize_assoc_item/fn.foo.html' '//pre[@class=\"rust fn\"]' \"pub fn foo() -> i32\"\n+// @has 'normalize_assoc_item/fn.foo.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub fn foo() -> i32\"\n pub use inner::foo;\n \n-// @has 'normalize_assoc_item/fn.h.html' '//pre[@class=\"rust fn\"]' \"pub fn h<T>() -> IntoIter<T, Global>\"\n+// @has 'normalize_assoc_item/fn.h.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub fn h<T>() -> IntoIter<T, Global>\"\n pub fn h<T>() -> <Vec<T> as IntoIterator>::IntoIter {\n     vec![].into_iter()\n }"}, {"sha": "0dca3f672cd3c42ca703a80e9112a2298b82084c", "filename": "tests/rustdoc/pub-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fpub-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fpub-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fpub-method.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -3,7 +3,7 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.bar.html\n-// @has - '//*[@class=\"rust fn\"]' 'pub fn bar() -> '\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn bar() -> '\n /// foo\n pub fn bar() -> usize {\n     2"}, {"sha": "bdbcc47c9f28dd4328e3f28c2c9d006277de5efd", "filename": "tests/rustdoc/range-arg-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Frange-arg-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Frange-arg-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Frange-arg-pattern.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.f.html\n-// @has - '//*[@class=\"rust fn\"]' 'pub fn f(_: u8)'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn f(_: u8)'\n pub fn f(0u8..=255: u8) {}"}, {"sha": "35c90ba5d7b894fac9f3e5fa9bb81882031d98d4", "filename": "tests/rustdoc/reexports-priv.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Freexports-priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Freexports-priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Freexports-priv.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -32,7 +32,7 @@ pub(self) use reexports::BarSelf;\n // @!has 'foo/enum.BarLocal.html'\n use reexports::BarLocal;\n \n-// @has 'foo/fn.foo.html' '//*[@class=\"rust fn\"]' 'pub fn foo()'\n+// @has 'foo/fn.foo.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn foo()'\n pub use reexports::foo;\n // @!has 'foo/fn.foo_crate.html'\n pub(crate) use reexports::foo_crate;\n@@ -41,7 +41,7 @@ pub(self) use reexports::foo_self;\n // @!has 'foo/fn.foo_local.html'\n use reexports::foo_local;\n \n-// @has 'foo/type.Type.html' '//*[@class=\"rust typedef\"]' 'pub type Type ='\n+// @has 'foo/type.Type.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub type Type ='\n pub use reexports::Type;\n // @!has 'foo/type.TypeCrate.html'\n pub(crate) use reexports::TypeCrate;\n@@ -94,22 +94,22 @@ pub mod outer {\n         // @!has 'foo/outer/inner/enum.BarLocal.html'\n         use reexports::BarLocal;\n \n-        // @has 'foo/outer/inner/fn.foo.html' '//*[@class=\"rust fn\"]' 'pub fn foo()'\n+        // @has 'foo/outer/inner/fn.foo.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn foo()'\n         pub use reexports::foo;\n-        // @has 'foo/outer/inner/fn.foo_crate.html' '//*[@class=\"rust fn\"]' 'pub(crate) fn foo_crate()'\n+        // @has 'foo/outer/inner/fn.foo_crate.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub(crate) fn foo_crate()'\n         pub(crate) use reexports::foo_crate;\n-        // @has 'foo/outer/inner/fn.foo_super.html' '//*[@class=\"rust fn\"]' 'pub(in outer) fn foo_super()'\n+        // @has 'foo/outer/inner/fn.foo_super.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub(in outer) fn foo_super()'\n         pub(super) use::reexports::foo_super;\n         // @!has 'foo/outer/inner/fn.foo_self.html'\n         pub(self) use reexports::foo_self;\n         // @!has 'foo/outer/inner/fn.foo_local.html'\n         use reexports::foo_local;\n \n-        // @has 'foo/outer/inner/type.Type.html' '//*[@class=\"rust typedef\"]' 'pub type Type ='\n+        // @has 'foo/outer/inner/type.Type.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub type Type ='\n         pub use reexports::Type;\n-        // @has 'foo/outer/inner/type.TypeCrate.html' '//*[@class=\"rust typedef\"]' 'pub(crate) type TypeCrate ='\n+        // @has 'foo/outer/inner/type.TypeCrate.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub(crate) type TypeCrate ='\n         pub(crate) use reexports::TypeCrate;\n-        // @has 'foo/outer/inner/type.TypeSuper.html' '//*[@class=\"rust typedef\"]' 'pub(in outer) type TypeSuper ='\n+        // @has 'foo/outer/inner/type.TypeSuper.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub(in outer) type TypeSuper ='\n         pub(super) use reexports::TypeSuper;\n         // @!has 'foo/outer/inner/type.TypeSelf.html'\n         pub(self) use reexports::TypeSelf;"}, {"sha": "65d305c6d2c4202b7a2b6e6f61e59ed74eb68914", "filename": "tests/rustdoc/reexports.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Freexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Freexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Freexports.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -31,7 +31,7 @@ pub(self) use reexports::BarSelf;\n // @!has 'foo/enum.BarLocal.html'\n use reexports::BarLocal;\n \n-// @has 'foo/fn.foo.html' '//*[@class=\"rust fn\"]' 'pub fn foo()'\n+// @has 'foo/fn.foo.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn foo()'\n pub use reexports::foo;\n // @!has 'foo/fn.foo_crate.html'\n pub(crate) use reexports::foo_crate;\n@@ -40,7 +40,7 @@ pub(self) use reexports::foo_self;\n // @!has 'foo/fn.foo_local.html'\n use reexports::foo_local;\n \n-// @has 'foo/type.Type.html' '//*[@class=\"rust typedef\"]' 'pub type Type ='\n+// @has 'foo/type.Type.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub type Type ='\n pub use reexports::Type;\n // @!has 'foo/type.TypeCrate.html'\n pub(crate) use reexports::TypeCrate;\n@@ -93,7 +93,7 @@ pub mod outer {\n         // @!has 'foo/outer/inner/enum.BarLocal.html'\n         use reexports::BarLocal;\n \n-        // @has 'foo/outer/inner/fn.foo.html' '//*[@class=\"rust fn\"]' 'pub fn foo()'\n+        // @has 'foo/outer/inner/fn.foo.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn foo()'\n         pub use reexports::foo;\n         // @!has 'foo/outer/inner/fn.foo_crate.html'\n         pub(crate) use reexports::foo_crate;\n@@ -104,7 +104,7 @@ pub mod outer {\n         // @!has 'foo/outer/inner/fn.foo_local.html'\n         use reexports::foo_local;\n \n-        // @has 'foo/outer/inner/type.Type.html' '//*[@class=\"rust typedef\"]' 'pub type Type ='\n+        // @has 'foo/outer/inner/type.Type.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub type Type ='\n         pub use reexports::Type;\n         // @!has 'foo/outer/inner/type.TypeCrate.html'\n         pub(crate) use reexports::TypeCrate;"}, {"sha": "a229a4e29fefb43a2ec580474fa492e3444dfe99", "filename": "tests/rustdoc/rfc-2632-const-trait-impl.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Frfc-2632-const-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Frfc-2632-const-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Frfc-2632-const-trait-impl.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -12,10 +12,10 @@ use std::marker::Destruct;\n \n pub struct S<T>(T);\n \n-// @!has foo/trait.Tr.html '//pre[@class=\"rust trait\"]/code/a[@class=\"trait\"]' '~const'\n-// @has - '//pre[@class=\"rust trait\"]/code/a[@class=\"trait\"]' 'Clone'\n-// @!has - '//pre[@class=\"rust trait\"]/code/span[@class=\"where\"]' '~const'\n-// @has - '//pre[@class=\"rust trait\"]/code/span[@class=\"where\"]' ': Clone'\n+// @!has foo/trait.Tr.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/a[@class=\"trait\"]' '~const'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/a[@class=\"trait\"]' 'Clone'\n+// @!has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/span[@class=\"where\"]' '~const'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/span[@class=\"where\"]' ': Clone'\n #[const_trait]\n pub trait Tr<T> {\n     // @!has - '//section[@id=\"method.a\"]/h4[@class=\"code-header\"]' '~const'\n@@ -45,10 +45,10 @@ where\n     }\n }\n \n-// @!has foo/fn.foo.html '//pre[@class=\"rust fn\"]/code/a[@class=\"trait\"]' '~const'\n-// @has - '//pre[@class=\"rust fn\"]/code/a[@class=\"trait\"]' 'Clone'\n-// @!has - '//pre[@class=\"rust fn\"]/code/span[@class=\"where fmt-newline\"]' '~const'\n-// @has - '//pre[@class=\"rust fn\"]/code/span[@class=\"where fmt-newline\"]' ': Clone'\n+// @!has foo/fn.foo.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/a[@class=\"trait\"]' '~const'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/a[@class=\"trait\"]' 'Clone'\n+// @!has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/span[@class=\"where fmt-newline\"]' '~const'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/span[@class=\"where fmt-newline\"]' ': Clone'\n pub const fn foo<F: ~const Clone + ~const Destruct>()\n where\n     Option<F>: ~const Clone + ~const Destruct,"}, {"sha": "0b65bf1dfed0fa5f2d3b85bd3c7cefdaec169f6e", "filename": "tests/rustdoc/safe-intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fsafe-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fsafe-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fsafe-intrinsic.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -7,16 +7,16 @@\n \n extern \"rust-intrinsic\" {\n     // @has 'foo/fn.abort.html'\n-    // @has - '//pre[@class=\"rust fn\"]' 'pub extern \"rust-intrinsic\" fn abort() -> !'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub extern \"rust-intrinsic\" fn abort() -> !'\n     #[rustc_safe_intrinsic]\n     pub fn abort() -> !;\n     // @has 'foo/fn.unreachable.html'\n-    // @has - '//pre[@class=\"rust fn\"]' 'pub unsafe extern \"rust-intrinsic\" fn unreachable() -> !'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub unsafe extern \"rust-intrinsic\" fn unreachable() -> !'\n     pub fn unreachable() -> !;\n }\n \n extern \"C\" {\n     // @has 'foo/fn.needs_drop.html'\n-    // @has - '//pre[@class=\"rust fn\"]' 'pub unsafe extern \"C\" fn needs_drop() -> !'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub unsafe extern \"C\" fn needs_drop() -> !'\n     pub fn needs_drop() -> !;\n }"}, {"sha": "67137fdcab274a75332d87f977bd365ccaf727c7", "filename": "tests/rustdoc/slice-links.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fslice-links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fslice-links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fslice-links.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -4,25 +4,25 @@\n pub struct MyBox<T: ?Sized>(*const T);\n \n // @has 'foo/fn.alpha.html'\n-// @snapshot link_slice_u32 - '//pre[@class=\"rust fn\"]/code'\n+// @snapshot link_slice_u32 - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n pub fn alpha() -> &'static [u32] {\n     loop {}\n }\n \n // @has 'foo/fn.beta.html'\n-// @snapshot link_slice_generic - '//pre[@class=\"rust fn\"]/code'\n+// @snapshot link_slice_generic - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n pub fn beta<T>() -> &'static [T] {\n     loop {}\n }\n \n // @has 'foo/fn.gamma.html'\n-// @snapshot link_box_u32 - '//pre[@class=\"rust fn\"]/code'\n+// @snapshot link_box_u32 - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n pub fn gamma() -> MyBox<[u32]> {\n     loop {}\n }\n \n // @has 'foo/fn.delta.html'\n-// @snapshot link_box_generic - '//pre[@class=\"rust fn\"]/code'\n+// @snapshot link_box_generic - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n pub fn delta<T>() -> MyBox<[T]> {\n     loop {}\n }"}, {"sha": "3bfb43a0bef2c7fed5758002ec0bf30484a185ce", "filename": "tests/rustdoc/struct-arg-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fstruct-arg-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fstruct-arg-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fstruct-arg-pattern.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -4,7 +4,7 @@ struct BodyId {\n     hir_id: usize,\n }\n \n-// @has 'foo/fn.body_owner.html' '//*[@class=\"rust fn\"]' 'pub fn body_owner(_: BodyId)'\n+// @has 'foo/fn.body_owner.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn body_owner(_: BodyId)'\n pub fn body_owner(BodyId { hir_id }: BodyId) {\n     // ...\n }"}, {"sha": "f5fdb1f52bf8ece496e19348de475cee5d5821a1", "filename": "tests/rustdoc/test-parens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Ftest-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Ftest-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Ftest-parens.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.foo.html\n-// @has - '//*[@class=\"rust fn\"]' \"_: &(dyn ToString + 'static)\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"_: &(dyn ToString + 'static)\"\n pub fn foo(_: &(ToString + 'static)) {}"}, {"sha": "5d34ec09b66dc621a2d1bd3b0ddac44acac71f2d", "filename": "tests/rustdoc/toggle-item-contents.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Ftoggle-item-contents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Ftoggle-item-contents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Ftoggle-item-contents.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -81,8 +81,8 @@ pub enum EnumStructVariant {\n }\n \n // @has 'toggle_item_contents/enum.LargeEnum.html'\n-// @count - '//*[@class=\"rust enum\"]//details[@class=\"toggle type-contents-toggle\"]' 1\n-// @has - '//*[@class=\"rust enum\"]//details[@class=\"toggle type-contents-toggle\"]' 'Show 13 variants'\n+// @count - '//div[@class=\"item-decl\"]/pre//details[@class=\"toggle type-contents-toggle\"]' 1\n+// @has - '//div[@class=\"item-decl\"]/pre//details[@class=\"toggle type-contents-toggle\"]' 'Show 13 variants'\n pub enum LargeEnum {\n     A, B, C, D, E, F(u8), G, H, I, J, K, L, M\n }"}, {"sha": "d72c10f2b2542e9a04df62cb6ddd72da877ea208", "filename": "tests/rustdoc/tuple-struct-fields-doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Ftuple-struct-fields-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Ftuple-struct-fields-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Ftuple-struct-fields-doc.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -19,7 +19,7 @@ pub struct Foo(\n );\n \n // @has foo/enum.Bar.html\n-// @has - '//pre[@class=\"rust enum\"]' 'BarVariant(String),'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'BarVariant(String),'\n // @matches - '//*[@id=\"variant.BarVariant.fields\"]/h4' '^Tuple Fields$'\n // @has - '//*[@id=\"variant.BarVariant.field.0\"]' '0: String'\n // @has - '//*[@id=\"variant.BarVariant.fields\"]//*[@class=\"docblock\"]' 'Hello docs'"}, {"sha": "e716de8b55c8fdfe3a037eedee8c4d237c9919fb", "filename": "tests/rustdoc/tuples.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Ftuples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Ftuples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Ftuples.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -1,20 +1,20 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.tuple0.html //pre 'pub fn tuple0(x: ())'\n-// @snapshot link_unit - '//pre[@class=\"rust fn\"]/code'\n+// @snapshot link_unit - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n pub fn tuple0(x: ()) -> () { x }\n // @has foo/fn.tuple1.html //pre 'pub fn tuple1(x: (i32,)) -> (i32,)'\n-// @snapshot link1_i32 - '//pre[@class=\"rust fn\"]/code'\n+// @snapshot link1_i32 - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n pub fn tuple1(x: (i32,)) -> (i32,) { x }\n // @has foo/fn.tuple2.html //pre 'pub fn tuple2(x: (i32, i32)) -> (i32, i32)'\n-// @snapshot link2_i32 - '//pre[@class=\"rust fn\"]/code'\n+// @snapshot link2_i32 - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n pub fn tuple2(x: (i32, i32)) -> (i32, i32) { x }\n // @has foo/fn.tuple1_t.html //pre 'pub fn tuple1_t<T>(x: (T,)) -> (T,)'\n-// @snapshot link1_t - '//pre[@class=\"rust fn\"]/code'\n+// @snapshot link1_t - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n pub fn tuple1_t<T>(x: (T,)) -> (T,) { x }\n // @has foo/fn.tuple2_t.html //pre 'pub fn tuple2_t<T>(x: (T, T)) -> (T, T)'\n-// @snapshot link2_t - '//pre[@class=\"rust fn\"]/code'\n+// @snapshot link2_t - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n pub fn tuple2_t<T>(x: (T, T)) -> (T, T) { x }\n // @has foo/fn.tuple2_tu.html //pre 'pub fn tuple2_tu<T, U>(x: (T, U)) -> (T, U)'\n-// @snapshot link2_tu - '//pre[@class=\"rust fn\"]/code'\n+// @snapshot link2_tu - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n pub fn tuple2_tu<T, U>(x: (T, U)) -> (T, U) { x }"}, {"sha": "353cd1c477249dae11398e389762048d56f53b9a", "filename": "tests/rustdoc/unit-return.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Funit-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Funit-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Funit-return.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -4,14 +4,14 @@\n \n extern crate unit_return;\n \n-// @has 'foo/fn.f0.html' '//*[@class=\"rust fn\"]' 'F: FnMut(u8) + Clone'\n+// @has 'foo/fn.f0.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'F: FnMut(u8) + Clone'\n pub fn f0<F: FnMut(u8) + Clone>(f: F) {}\n \n-// @has 'foo/fn.f1.html' '//*[@class=\"rust fn\"]' 'F: FnMut(u16) + Clone'\n+// @has 'foo/fn.f1.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'F: FnMut(u16) + Clone'\n pub fn f1<F: FnMut(u16) -> () + Clone>(f: F) {}\n \n-// @has 'foo/fn.f2.html' '//*[@class=\"rust fn\"]' 'F: FnMut(u32) + Clone'\n+// @has 'foo/fn.f2.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'F: FnMut(u32) + Clone'\n pub use unit_return::f2;\n \n-// @has 'foo/fn.f3.html' '//*[@class=\"rust fn\"]' 'F: FnMut(u64) + Clone'\n+// @has 'foo/fn.f3.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'F: FnMut(u64) + Clone'\n pub use unit_return::f3;"}, {"sha": "c0c085e6ac72500d63deb2848063d4f54654b136", "filename": "tests/rustdoc/where-sized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fwhere-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fwhere-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhere-sized.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -1,6 +1,6 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.foo.html\n-// @has - '//*[@class=\"rust fn\"]' 'pub fn foo<X, Y: ?Sized>(_: &X)'\n-// @has - '//*[@class=\"rust fn\"]' 'where X: ?Sized,'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn foo<X, Y: ?Sized>(_: &X)'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where X: ?Sized,'\n pub fn foo<X, Y: ?Sized>(_: &X) where X: ?Sized {}"}, {"sha": "f84cb3753cb93a119ab72b7fc3a91eb5c76c0c99", "filename": "tests/rustdoc/where.SWhere_Simd_item-decl.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fwhere.SWhere_Simd_item-decl.html", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fwhere.SWhere_Simd_item-decl.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhere.SWhere_Simd_item-decl.html?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -1 +1 @@\n-<div class=\"item-decl\"><pre class=\"rust struct\"><code>pub struct Simd&lt;T&gt;(_)<br /><span class=\"where\">where<br />&#160;&#160;&#160;&#160;T: <a class=\"trait\" href=\"trait.MyTrait.html\" title=\"trait foo::MyTrait\">MyTrait</a></span>;</code></pre></div>\n\\ No newline at end of file\n+<div class=\"item-decl\"><pre class=\"rust\"><code>pub struct Simd&lt;T&gt;(_)<br /><span class=\"where\">where<br />&#160;&#160;&#160;&#160;T: <a class=\"trait\" href=\"trait.MyTrait.html\" title=\"trait foo::MyTrait\">MyTrait</a></span>;</code></pre></div>\n\\ No newline at end of file"}, {"sha": "85b626674274cff6f4f4fd53b3c2e7bdcc9f1251", "filename": "tests/rustdoc/where.SWhere_TraitWhere_item-decl.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fwhere.SWhere_TraitWhere_item-decl.html", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fwhere.SWhere_TraitWhere_item-decl.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhere.SWhere_TraitWhere_item-decl.html?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -1,4 +1,4 @@\n-<div class=\"item-decl\"><pre class=\"rust trait\"><code>pub trait TraitWhere {\n+<div class=\"item-decl\"><pre class=\"rust\"><code>pub trait TraitWhere {\n     type <a href=\"#associatedtype.Item\" class=\"associatedtype\">Item</a>&lt;'a&gt;<br />&#160;&#160;&#160;&#160;<span class=\"where\">where<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self: 'a</span>;\n \n     fn <a href=\"#method.func\" class=\"fn\">func</a>(self)<br />&#160;&#160;&#160;&#160;<span class=\"where\">where<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self: <a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a></span>,"}, {"sha": "3ac0c6872a82150c4a621c8919f96a81a7e431ff", "filename": "tests/rustdoc/where.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fwhere.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fwhere.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhere.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -57,6 +57,6 @@ pub enum Foxtrot<F> { Foxtrot1(F) }\n //          \"impl<F> MyTrait for Foxtrot<F>where F: MyTrait\"\n impl<F> MyTrait for Foxtrot<F>where F: MyTrait {}\n \n-// @has foo/type.Golf.html '//pre[@class=\"rust typedef\"]' \\\n+// @has foo/type.Golf.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //          \"type Golf<T>where T: Clone, = (T, T)\"\n pub type Golf<T> where T: Clone = (T, T);"}, {"sha": "20bde549a037807f3f0351828177b1e6006899d4", "filename": "tests/rustdoc/whitespace-after-where-clause.enum.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum.html", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum.html?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -1,4 +1,4 @@\n-<div class=\"item-decl\"><pre class=\"rust enum\"><code>pub enum Cow&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n+<div class=\"item-decl\"><pre class=\"rust\"><code>pub enum Cow&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n     Borrowed(<a class=\"primitive\" href=\"{{channel}}/std/primitive.reference.html\">&amp;'a </a>B),\n     Whatever(<a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a>),\n }</code></pre></div>\n\\ No newline at end of file"}, {"sha": "d9fc0c22309dbc97f4f8c3fdd469bf676063e65f", "filename": "tests/rustdoc/whitespace-after-where-clause.enum2.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum2.html", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum2.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum2.html?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -1,4 +1,4 @@\n-<div class=\"item-decl\"><pre class=\"rust enum\"><code>pub enum Cow2&lt;'a, B:&#160;?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n+<div class=\"item-decl\"><pre class=\"rust\"><code>pub enum Cow2&lt;'a, B:&#160;?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n     Borrowed(<a class=\"primitive\" href=\"{{channel}}/std/primitive.reference.html\">&amp;'a </a>B),\n     Whatever(<a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a>),\n }</code></pre></div>\n\\ No newline at end of file"}, {"sha": "f375265d7c183ff57963f75bee1a1f136f2bf82e", "filename": "tests/rustdoc/whitespace-after-where-clause.struct.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct.html", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct.html?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -1,4 +1,4 @@\n-<div class=\"item-decl\"><pre class=\"rust struct\"><code>pub struct Struct&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n+<div class=\"item-decl\"><pre class=\"rust\"><code>pub struct Struct&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n     pub a: <a class=\"primitive\" href=\"{{channel}}/std/primitive.reference.html\">&amp;'a </a>B,\n     pub b: <a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a>,\n }</code></pre></div>\n\\ No newline at end of file"}, {"sha": "1c59962eb1c58e1b75c0082fb48ec72b065422e6", "filename": "tests/rustdoc/whitespace-after-where-clause.struct2.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct2.html", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct2.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct2.html?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -1,4 +1,4 @@\n-<div class=\"item-decl\"><pre class=\"rust struct\"><code>pub struct Struct2&lt;'a, B:&#160;?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n+<div class=\"item-decl\"><pre class=\"rust\"><code>pub struct Struct2&lt;'a, B:&#160;?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n     pub a: <a class=\"primitive\" href=\"{{channel}}/std/primitive.reference.html\">&amp;'a </a>B,\n     pub b: <a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a>,\n }</code></pre></div>\n\\ No newline at end of file"}, {"sha": "a2df06e7736af684b7ed8e12eedded83148491b0", "filename": "tests/rustdoc/whitespace-after-where-clause.trait.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait.html", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait.html?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -1,4 +1,4 @@\n-<div class=\"item-decl\"><pre class=\"rust trait\"><code>pub trait ToOwned&lt;T&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;T: <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span>{\n+<div class=\"item-decl\"><pre class=\"rust\"><code>pub trait ToOwned&lt;T&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;T: <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span>{\n     type <a href=\"#associatedtype.Owned\" class=\"associatedtype\">Owned</a>;\n \n     fn <a href=\"#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.ToOwned.html#associatedtype.Owned\" title=\"type foo::ToOwned::Owned\">Owned</a>;"}, {"sha": "2bfd6f7685a6729dc8e1b2ffbe679978f04eaf58", "filename": "tests/rustdoc/whitespace-after-where-clause.trait2.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait2.html", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait2.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait2.html?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -1,4 +1,4 @@\n-<div class=\"item-decl\"><pre class=\"rust trait\"><code>pub trait ToOwned2&lt;T:&#160;<a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; {\n+<div class=\"item-decl\"><pre class=\"rust\"><code>pub trait ToOwned2&lt;T:&#160;<a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; {\n     type <a href=\"#associatedtype.Owned\" class=\"associatedtype\">Owned</a>;\n \n     fn <a href=\"#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.ToOwned2.html#associatedtype.Owned\" title=\"type foo::ToOwned2::Owned\">Owned</a>;"}, {"sha": "066f8f87b160b6af62cfce0a1955940fd26c7304", "filename": "tests/rustdoc/whitespace-after-where-clause.union.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fwhitespace-after-where-clause.union.html", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fwhitespace-after-where-clause.union.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.union.html?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -1,3 +1,3 @@\n-<div class=\"item-decl\"><pre class=\"rust union\"><code>pub union Union&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n+<div class=\"item-decl\"><pre class=\"rust\"><code>pub union Union&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n     /* private fields */\n }</code></pre></div>\n\\ No newline at end of file"}, {"sha": "6b48c5dbd3e2803a1027e8eeec408fd1c9f8472f", "filename": "tests/rustdoc/whitespace-after-where-clause.union2.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fwhitespace-after-where-clause.union2.html", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fwhitespace-after-where-clause.union2.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.union2.html?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -1,3 +1,3 @@\n-<div class=\"item-decl\"><pre class=\"rust union\"><code>pub union Union2&lt;'a, B:&#160;?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n+<div class=\"item-decl\"><pre class=\"rust\"><code>pub union Union2&lt;'a, B:&#160;?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n     /* private fields */\n }</code></pre></div>\n\\ No newline at end of file"}, {"sha": "178b8adc3f04af8f6de30df590a7de6e7499430e", "filename": "tests/rustdoc/wrapping.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90f62988d06421a4e5fdd63ca625d47aac130a0/tests%2Frustdoc%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwrapping.rs?ref=b90f62988d06421a4e5fdd63ca625d47aac130a0", "patch": "@@ -1,5 +1,5 @@\n use std::fmt::Debug;\n \n-// @has 'wrapping/fn.foo.html' '//pre[@class=\"rust fn\"]' 'pub fn foo() -> impl Debug'\n-// @count - '//pre[@class=\"rust fn\"]/br' 0\n+// @has 'wrapping/fn.foo.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn foo() -> impl Debug'\n+// @count - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/br' 0\n pub fn foo() -> impl Debug {}"}]}