{"sha": "e78e747f53c36e53ff99c94438d2efa26830fc4b", "node_id": "C_kwDOAAsO6NoAKGU3OGU3NDdmNTNjMzZlNTNmZjk5Yzk0NDM4ZDJlZmEyNjgzMGZjNGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-07T04:18:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-07T04:18:47Z"}, "message": "Auto merge of #98827 - aDotInTheVoid:suggest-extern-block, r=nagisa\n\nSuggest using block for `extern \"abi\" fn` with no body\n\n`@rustbot` modify labels: +A-diagnostics", "tree": {"sha": "8278ec9a3214579c91d45a5d5b15d388f3bd7990", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8278ec9a3214579c91d45a5d5b15d388f3bd7990"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e78e747f53c36e53ff99c94438d2efa26830fc4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e78e747f53c36e53ff99c94438d2efa26830fc4b", "html_url": "https://github.com/rust-lang/rust/commit/e78e747f53c36e53ff99c94438d2efa26830fc4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e78e747f53c36e53ff99c94438d2efa26830fc4b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fac8fa56726f7a5b2d4880a4719c5f99beec8328", "url": "https://api.github.com/repos/rust-lang/rust/commits/fac8fa56726f7a5b2d4880a4719c5f99beec8328", "html_url": "https://github.com/rust-lang/rust/commit/fac8fa56726f7a5b2d4880a4719c5f99beec8328"}, {"sha": "02fb345964cead725bca5e9dea745210ed6c9c37", "url": "https://api.github.com/repos/rust-lang/rust/commits/02fb345964cead725bca5e9dea745210ed6c9c37", "html_url": "https://github.com/rust-lang/rust/commit/02fb345964cead725bca5e9dea745210ed6c9c37"}], "stats": {"total": 154, "additions": 124, "deletions": 30}, "files": [{"sha": "2820d5e6e0c0523171d4882ced275d561b82d599", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e78e747f53c36e53ff99c94438d2efa26830fc4b/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78e747f53c36e53ff99c94438d2efa26830fc4b/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=e78e747f53c36e53ff99c94438d2efa26830fc4b", "patch": "@@ -2667,13 +2667,16 @@ impl Item {\n #[derive(Clone, Copy, Encodable, Decodable, Debug)]\n pub enum Extern {\n     None,\n-    Implicit,\n-    Explicit(StrLit),\n+    Implicit(Span),\n+    Explicit(StrLit, Span),\n }\n \n impl Extern {\n-    pub fn from_abi(abi: Option<StrLit>) -> Extern {\n-        abi.map_or(Extern::Implicit, Extern::Explicit)\n+    pub fn from_abi(abi: Option<StrLit>, span: Span) -> Extern {\n+        match abi {\n+            Some(name) => Extern::Explicit(name, span),\n+            None => Extern::Implicit(span),\n+        }\n     }\n }\n "}, {"sha": "112197c6e399313cbb09db14f2708416ce2298db", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e78e747f53c36e53ff99c94438d2efa26830fc4b/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78e747f53c36e53ff99c94438d2efa26830fc4b/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=e78e747f53c36e53ff99c94438d2efa26830fc4b", "patch": "@@ -1272,8 +1272,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     pub(super) fn lower_extern(&mut self, ext: Extern) -> abi::Abi {\n         match ext {\n             Extern::None => abi::Abi::Rust,\n-            Extern::Implicit => abi::Abi::FALLBACK,\n-            Extern::Explicit(abi) => self.lower_abi(abi),\n+            Extern::Implicit(_) => abi::Abi::FALLBACK,\n+            Extern::Explicit(abi, _) => self.lower_abi(abi),\n         }\n     }\n "}, {"sha": "3942062656fa963cd22d0bb7ae1d5e48cf3c9013", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 58, "deletions": 14, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/e78e747f53c36e53ff99c94438d2efa26830fc4b/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78e747f53c36e53ff99c94438d2efa26830fc4b/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=e78e747f53c36e53ff99c94438d2efa26830fc4b", "patch": "@@ -13,7 +13,9 @@ use rustc_ast::walk_list;\n use rustc_ast::*;\n use rustc_ast_pretty::pprust::{self, State};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{error_code, pluralize, struct_span_err, Applicability};\n+use rustc_errors::{\n+    error_code, pluralize, struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed,\n+};\n use rustc_parse::validate_attr;\n use rustc_session::lint::builtin::{\n     DEPRECATED_WHERE_CLAUSE_LOCATION, MISSING_ABI, PATTERNS_IN_FNS_WITHOUT_BODY,\n@@ -476,22 +478,33 @@ impl<'a> AstValidator<'a> {\n     }\n \n     fn error_item_without_body(&self, sp: Span, ctx: &str, msg: &str, sugg: &str) {\n+        self.error_item_without_body_with_help(sp, ctx, msg, sugg, |_| ());\n+    }\n+\n+    fn error_item_without_body_with_help(\n+        &self,\n+        sp: Span,\n+        ctx: &str,\n+        msg: &str,\n+        sugg: &str,\n+        help: impl FnOnce(&mut DiagnosticBuilder<'_, ErrorGuaranteed>),\n+    ) {\n         let source_map = self.session.source_map();\n         let end = source_map.end_point(sp);\n         let replace_span = if source_map.span_to_snippet(end).map(|s| s == \";\").unwrap_or(false) {\n             end\n         } else {\n             sp.shrink_to_hi()\n         };\n-        self.err_handler()\n-            .struct_span_err(sp, msg)\n-            .span_suggestion(\n-                replace_span,\n-                &format!(\"provide a definition for the {}\", ctx),\n-                sugg,\n-                Applicability::HasPlaceholders,\n-            )\n-            .emit();\n+        let mut err = self.err_handler().struct_span_err(sp, msg);\n+        err.span_suggestion(\n+            replace_span,\n+            &format!(\"provide a definition for the {}\", ctx),\n+            sugg,\n+            Applicability::HasPlaceholders,\n+        );\n+        help(&mut err);\n+        err.emit();\n     }\n \n     fn check_impl_item_provided<T>(&self, sp: Span, body: &Option<T>, ctx: &str, sugg: &str) {\n@@ -630,7 +643,8 @@ impl<'a> AstValidator<'a> {\n         match (fk.ctxt(), fk.header()) {\n             (Some(FnCtxt::Foreign), _) => return,\n             (Some(FnCtxt::Free), Some(header)) => match header.ext {\n-                Extern::Explicit(StrLit { symbol_unescaped: sym::C, .. }) | Extern::Implicit\n+                Extern::Explicit(StrLit { symbol_unescaped: sym::C, .. }, _)\n+                | Extern::Implicit(_)\n                     if matches!(header.unsafety, Unsafe::Yes(_)) =>\n                 {\n                     return;\n@@ -842,7 +856,7 @@ impl<'a> AstValidator<'a> {\n                     .emit();\n                 });\n                 self.check_late_bound_lifetime_defs(&bfty.generic_params);\n-                if let Extern::Implicit = bfty.ext {\n+                if let Extern::Implicit(_) = bfty.ext {\n                     let sig_span = self.session.source_map().next_point(ty.span.shrink_to_lo());\n                     self.maybe_lint_missing_abi(sig_span, ty.id);\n                 }\n@@ -1190,8 +1204,38 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n                 if body.is_none() {\n                     let msg = \"free function without a body\";\n-                    self.error_item_without_body(item.span, \"function\", msg, \" { <body> }\");\n+                    let ext = sig.header.ext;\n+\n+                    let f = |e: &mut DiagnosticBuilder<'_, _>| {\n+                        if let Extern::Implicit(start_span) | Extern::Explicit(_, start_span) = &ext\n+                        {\n+                            let start_suggestion = if let Extern::Explicit(abi, _) = ext {\n+                                format!(\"extern \\\"{}\\\" {{\", abi.symbol_unescaped)\n+                            } else {\n+                                \"extern {\".to_owned()\n+                            };\n+\n+                            let end_suggestion = \" }\".to_owned();\n+                            let end_span = item.span.shrink_to_hi();\n+\n+                            e\n+                            .multipart_suggestion(\n+                                \"if you meant to declare an externally defined function, use an `extern` block\",\n+                                vec![(*start_span, start_suggestion), (end_span, end_suggestion)],\n+                                Applicability::MaybeIncorrect,\n+                             );\n+                        }\n+                    };\n+\n+                    self.error_item_without_body_with_help(\n+                        item.span,\n+                        \"function\",\n+                        msg,\n+                        \" { <body> }\",\n+                        f,\n+                    );\n                 }\n+\n                 self.visit_vis(&item.vis);\n                 self.visit_ident(item.ident);\n                 let kind =\n@@ -1556,7 +1600,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         if let FnKind::Fn(\n             _,\n             _,\n-            FnSig { span: sig_span, header: FnHeader { ext: Extern::Implicit, .. }, .. },\n+            FnSig { span: sig_span, header: FnHeader { ext: Extern::Implicit(_), .. }, .. },\n             _,\n             _,\n             _,"}, {"sha": "fd2dd6cf6c7f112187b24b4ae98ac785ab1c782c", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e78e747f53c36e53ff99c94438d2efa26830fc4b/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78e747f53c36e53ff99c94438d2efa26830fc4b/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=e78e747f53c36e53ff99c94438d2efa26830fc4b", "patch": "@@ -283,7 +283,7 @@ impl<'a> PostExpansionVisitor<'a> {\n     }\n \n     fn check_extern(&self, ext: ast::Extern, constness: ast::Const) {\n-        if let ast::Extern::Explicit(abi) = ext {\n+        if let ast::Extern::Explicit(abi, _) = ext {\n             self.check_abi(abi, constness);\n         }\n     }"}, {"sha": "c9e3a7edfa67d33e6fe0da8d357ca40d903e6d1a", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e78e747f53c36e53ff99c94438d2efa26830fc4b/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78e747f53c36e53ff99c94438d2efa26830fc4b/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=e78e747f53c36e53ff99c94438d2efa26830fc4b", "patch": "@@ -1734,10 +1734,10 @@ impl<'a> State<'a> {\n \n         match header.ext {\n             ast::Extern::None => {}\n-            ast::Extern::Implicit => {\n+            ast::Extern::Implicit(_) => {\n                 self.word_nbsp(\"extern\");\n             }\n-            ast::Extern::Explicit(abi) => {\n+            ast::Extern::Explicit(abi, _) => {\n                 self.word_nbsp(\"extern\");\n                 self.print_literal(&abi.as_lit());\n                 self.nbsp();"}, {"sha": "67e6402c0ae787368da848588fdb29dcac6925a4", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e78e747f53c36e53ff99c94438d2efa26830fc4b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78e747f53c36e53ff99c94438d2efa26830fc4b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=e78e747f53c36e53ff99c94438d2efa26830fc4b", "patch": "@@ -1353,7 +1353,16 @@ impl<'a> Parser<'a> {\n \n     /// Parses `extern string_literal?`.\n     fn parse_extern(&mut self) -> Extern {\n-        if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }\n+        if self.eat_keyword(kw::Extern) {\n+            let mut extern_span = self.prev_token.span;\n+            let abi = self.parse_abi();\n+            if let Some(abi) = abi {\n+                extern_span = extern_span.to(abi.span);\n+            }\n+            Extern::from_abi(abi, extern_span)\n+        } else {\n+            Extern::None\n+        }\n     }\n \n     /// Parses a string literal as an ABI spec."}, {"sha": "d3bcafdef7b3cbf39945288ba8d28eeb5151ec9d", "filename": "src/test/ui/extern/not-in-block.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e78e747f53c36e53ff99c94438d2efa26830fc4b/src%2Ftest%2Fui%2Fextern%2Fnot-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78e747f53c36e53ff99c94438d2efa26830fc4b/src%2Ftest%2Fui%2Fextern%2Fnot-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fnot-in-block.rs?ref=e78e747f53c36e53ff99c94438d2efa26830fc4b", "patch": "@@ -0,0 +1,6 @@\n+#![crate_type = \"lib\"]\n+\n+extern fn none_fn(x: bool) -> i32;\n+//~^ ERROR free function without a body\n+extern \"C\" fn c_fn(x: bool) -> i32;\n+//~^ ERROR free function without a body"}, {"sha": "2544949ab17a8066c446fa81bf68c6e23a310353", "filename": "src/test/ui/extern/not-in-block.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e78e747f53c36e53ff99c94438d2efa26830fc4b/src%2Ftest%2Fui%2Fextern%2Fnot-in-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e78e747f53c36e53ff99c94438d2efa26830fc4b/src%2Ftest%2Fui%2Fextern%2Fnot-in-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fnot-in-block.stderr?ref=e78e747f53c36e53ff99c94438d2efa26830fc4b", "patch": "@@ -0,0 +1,32 @@\n+error: free function without a body\n+  --> $DIR/not-in-block.rs:3:1\n+   |\n+LL | extern fn none_fn(x: bool) -> i32;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: provide a definition for the function\n+   |\n+LL | extern fn none_fn(x: bool) -> i32 { <body> }\n+   |                                   ~~~~~~~~~~\n+help: if you meant to declare an externally defined function, use an `extern` block\n+   |\n+LL | extern { fn none_fn(x: bool) -> i32; }\n+   | ~~~~~~~~                             +\n+\n+error: free function without a body\n+  --> $DIR/not-in-block.rs:5:1\n+   |\n+LL | extern \"C\" fn c_fn(x: bool) -> i32;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: provide a definition for the function\n+   |\n+LL | extern \"C\" fn c_fn(x: bool) -> i32 { <body> }\n+   |                                    ~~~~~~~~~~\n+help: if you meant to declare an externally defined function, use an `extern` block\n+   |\n+LL | extern \"C\" { fn c_fn(x: bool) -> i32; }\n+   | ~~~~~~~~~~~~                          +\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "453471c8cdda6f4b6a09a706f2c17caf5bdb2814", "filename": "src/tools/clippy/clippy_lints/src/excessive_bools.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e78e747f53c36e53ff99c94438d2efa26830fc4b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexcessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78e747f53c36e53ff99c94438d2efa26830fc4b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexcessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexcessive_bools.rs?ref=e78e747f53c36e53ff99c94438d2efa26830fc4b", "patch": "@@ -94,7 +94,7 @@ impl ExcessiveBools {\n \n     fn check_fn_sig(&self, cx: &EarlyContext<'_>, fn_sig: &FnSig, span: Span) {\n         match fn_sig.header.ext {\n-            Extern::Implicit | Extern::Explicit(_) => return,\n+            Extern::Implicit(_) | Extern::Explicit(_, _) => return,\n             Extern::None => (),\n         }\n "}, {"sha": "177e754ee091e434efea5b5025b55da3a7214946", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e78e747f53c36e53ff99c94438d2efa26830fc4b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78e747f53c36e53ff99c94438d2efa26830fc4b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=e78e747f53c36e53ff99c94438d2efa26830fc4b", "patch": "@@ -600,8 +600,8 @@ pub fn eq_ty(l: &Ty, r: &Ty) -> bool {\n pub fn eq_ext(l: &Extern, r: &Extern) -> bool {\n     use Extern::*;\n     match (l, r) {\n-        (None, None) | (Implicit, Implicit) => true,\n-        (Explicit(l), Explicit(r)) => eq_str_lit(l, r),\n+        (None, None) | (Implicit(_), Implicit(_)) => true,\n+        (Explicit(l,_), Explicit(r,_)) => eq_str_lit(l, r),\n         _ => false,\n     }\n }"}, {"sha": "8f35068e35f046eef38d42da5ae952889cabf212", "filename": "src/tools/rustfmt/src/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e78e747f53c36e53ff99c94438d2efa26830fc4b/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78e747f53c36e53ff99c94438d2efa26830fc4b/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs?ref=e78e747f53c36e53ff99c94438d2efa26830fc4b", "patch": "@@ -148,7 +148,7 @@ impl<'a> Item<'a> {\n         Item {\n             unsafety: fm.unsafety,\n             abi: format_extern(\n-                ast::Extern::from_abi(fm.abi),\n+                ast::Extern::from_abi(fm.abi, DUMMY_SP),\n                 config.force_explicit_abi(),\n                 true,\n             ),"}, {"sha": "4b26f4e40df982be472cd2c6d84d33a9f366d4da", "filename": "src/tools/rustfmt/src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e78e747f53c36e53ff99c94438d2efa26830fc4b/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e78e747f53c36e53ff99c94438d2efa26830fc4b/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs?ref=e78e747f53c36e53ff99c94438d2efa26830fc4b", "patch": "@@ -138,8 +138,8 @@ pub(crate) fn format_extern(\n ) -> Cow<'static, str> {\n     let abi = match ext {\n         ast::Extern::None => \"Rust\".to_owned(),\n-        ast::Extern::Implicit => \"C\".to_owned(),\n-        ast::Extern::Explicit(abi) => abi.symbol_unescaped.to_string(),\n+        ast::Extern::Implicit(_) => \"C\".to_owned(),\n+        ast::Extern::Explicit(abi, _) => abi.symbol_unescaped.to_string(),\n     };\n \n     if abi == \"Rust\" && !is_mod {"}]}