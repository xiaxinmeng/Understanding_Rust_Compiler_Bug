{"sha": "38ae9233b55d72bc9a38202727b2846b663e770e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4YWU5MjMzYjU1ZDcyYmM5YTM4MjAyNzI3YjI4NDZiNjYzZTc3MGU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-02-02T21:22:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-02T21:22:21Z"}, "message": "Rollup merge of #39196 - apasel422:nomicon, r=petrochenkov\n\nUpdate nomicon to describe `#[may_dangle]`\n\nCC #34761\nr? @pnkfelix", "tree": {"sha": "ef5c58f178e0fd09c7496ea0c647c22591103e85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef5c58f178e0fd09c7496ea0c647c22591103e85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38ae9233b55d72bc9a38202727b2846b663e770e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38ae9233b55d72bc9a38202727b2846b663e770e", "html_url": "https://github.com/rust-lang/rust/commit/38ae9233b55d72bc9a38202727b2846b663e770e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38ae9233b55d72bc9a38202727b2846b663e770e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ada328d81a75a19163a038555669e36070edf5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ada328d81a75a19163a038555669e36070edf5d", "html_url": "https://github.com/rust-lang/rust/commit/5ada328d81a75a19163a038555669e36070edf5d"}, {"sha": "65147b673bcf8cc740d40209321f0716864a0ab3", "url": "https://api.github.com/repos/rust-lang/rust/commits/65147b673bcf8cc740d40209321f0716864a0ab3", "html_url": "https://github.com/rust-lang/rust/commit/65147b673bcf8cc740d40209321f0716864a0ab3"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "6114006cbb341c068fd9936244616cb71fadfffd", "filename": "src/doc/nomicon/dropck.md", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/38ae9233b55d72bc9a38202727b2846b663e770e/src%2Fdoc%2Fnomicon%2Fdropck.md", "raw_url": "https://github.com/rust-lang/rust/raw/38ae9233b55d72bc9a38202727b2846b663e770e/src%2Fdoc%2Fnomicon%2Fdropck.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fdropck.md?ref=38ae9233b55d72bc9a38202727b2846b663e770e", "patch": "@@ -199,24 +199,42 @@ assert (unsafely) that a generic type's destructor is *guaranteed* to\n not access any expired data, even if its type gives it the capability\n to do so.\n \n-That attribute is called `unsafe_destructor_blind_to_params`.\n+That attribute is called `may_dangle` and was introduced in [RFC 1327]\n+(https://github.com/rust-lang/rfcs/blob/master/text/1327-dropck-param-eyepatch.md).\n To deploy it on the Inspector example from above, we would write:\n \n ```rust,ignore\n struct Inspector<'a>(&'a u8, &'static str);\n \n-impl<'a> Drop for Inspector<'a> {\n-    #[unsafe_destructor_blind_to_params]\n+unsafe impl<#[may_dangle] 'a> Drop for Inspector<'a> {\n     fn drop(&mut self) {\n         println!(\"Inspector(_, {}) knows when *not* to inspect.\", self.1);\n     }\n }\n ```\n \n-This attribute has the word `unsafe` in it because the compiler is not\n-checking the implicit assertion that no potentially expired data\n+Use of this attribute requires the `Drop` impl to be marked `unsafe` because the\n+compiler is not checking the implicit assertion that no potentially expired data\n (e.g. `self.0` above) is accessed.\n \n+The attribute can be applied to any number of lifetime and type parameters. In\n+the following example, we assert that we access no data behind a reference of\n+lifetime `'b` and that the only uses of `T` will be moves or drops, but omit\n+the attribute from `'a` and `U`, because we do access data with that lifetime\n+and that type:\n+\n+```rust,ignore\n+use std::fmt::Display;\n+\n+struct Inspector<'a, 'b, T, U: Display>(&'a u8, &'b u8, T, U);\n+\n+unsafe impl<'a, #[may_dangle] 'b, #[may_dangle] T, U: Display> Drop for Inspector<'a, 'b, T, U> {\n+    fn drop(&mut self) {\n+        println!(\"Inspector({}, _, _, {})\", self.0, self.3);\n+    }\n+}\n+```\n+\n It is sometimes obvious that no such access can occur, like the case above.\n However, when dealing with a generic type parameter, such access can\n occur indirectly. Examples of such indirect access are:\n@@ -263,7 +281,7 @@ some other method invoked by the destructor, rather than being written\n directly within it.\n \n In all of the above cases where the `&'a u8` is accessed in the\n-destructor, adding the `#[unsafe_destructor_blind_to_params]`\n+destructor, adding the `#[may_dangle]`\n attribute makes the type vulnerable to misuse that the borrower\n checker will not catch, inviting havoc. It is better to avoid adding\n the attribute."}]}