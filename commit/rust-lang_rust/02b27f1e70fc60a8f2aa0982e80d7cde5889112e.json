{"sha": "02b27f1e70fc60a8f2aa0982e80d7cde5889112e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYjI3ZjFlNzBmYzYwYThmMmFhMDk4MmU4MGQ3Y2RlNTg4OTExMmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-18T01:00:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-18T01:00:17Z"}, "message": "Auto merge of #86860 - fee1-dead:stabilize, r=LeSeulArtichaut\n\nStabilize `arbitrary_enum_discriminant`\n\nCloses #60553.\n\n----\n\n## Stabilization Report\n\n_copied from https://github.com/rust-lang/rust/issues/60553#issuecomment-865922311_\n\n### Summary\n\nEnables a user to specify *explicit* discriminants on arbitrary enums.\n\nPreviously, this was hard to achieve:\n\n```rust\n#[repr(u8)]\nenum Foo {\n    A(u8) = 0,\n    B(i8) = 1,\n    C(bool) = 42,\n}\n```\n\nSomeone would need to add 41 hidden variants in between as a workaround with implicit discriminants.\n\nIn conjunction with [RFC 2195](https://github.com/rust-lang/rfcs/blob/master/text/2195-really-tagged-unions.md), this feature would provide more flexibility for FFI and unsafe code involving enums.\n\n### Test cases\n\nMost tests are in [`src/test/ui/enum-discriminant`](https://github.com/rust-lang/rust/tree/master/src/test/ui/enum-discriminant), there are two [historical](https://github.com/rust-lang/rust/blob/master/src/test/ui/parser/tag-variant-disr-non-nullary.rs) [tests](https://github.com/rust-lang/rust/blob/master/src/test/ui/parser/issue-17383.rs) that are now covered by the feature (removed by this pr due to them being obsolete).\n\n### Edge cases\n\nThe feature is well defined and does not have many edge cases.\nOne [edge case](https://github.com/rust-lang/rust/issues/70509) was related to another unstable feature named `repr128` and is resolved.\n\n### Previous PRs\n\nThe [implementation PR](https://github.com/rust-lang/rust/pull/60732) added documentation to the Unstable Book, https://github.com/rust-lang/reference/pull/1055 was opened as a continuation of https://github.com/rust-lang/reference/pull/639.\n\n### Resolution of unresolved questions\n\nThe questions are resolved in https://github.com/rust-lang/rust/issues/60553#issuecomment-511235271.\n\n----\n\n(someone please add `needs-fcp`)", "tree": {"sha": "065c73132ec35f5b5bd53d02f0734b81cbf444ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/065c73132ec35f5b5bd53d02f0734b81cbf444ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02b27f1e70fc60a8f2aa0982e80d7cde5889112e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02b27f1e70fc60a8f2aa0982e80d7cde5889112e", "html_url": "https://github.com/rust-lang/rust/commit/02b27f1e70fc60a8f2aa0982e80d7cde5889112e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adf168844791b213383b18d10515eaee88695f7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/adf168844791b213383b18d10515eaee88695f7d", "html_url": "https://github.com/rust-lang/rust/commit/adf168844791b213383b18d10515eaee88695f7d"}, {"sha": "7a62f29f3171767090949778ce0f161e930706b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a62f29f3171767090949778ce0f161e930706b9", "html_url": "https://github.com/rust-lang/rust/commit/7a62f29f3171767090949778ce0f161e930706b9"}], "stats": {"total": 234, "additions": 13, "deletions": 221}, "files": [{"sha": "feece517cebf4660cbd35151c8d83019b7af671d", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 62, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=02b27f1e70fc60a8f2aa0982e80d7cde5889112e", "patch": "@@ -1,11 +1,11 @@\n use rustc_ast as ast;\n use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n use rustc_ast::{AssocTyConstraint, AssocTyConstraintKind, NodeId};\n-use rustc_ast::{PatKind, RangeEnd, VariantData};\n+use rustc_ast::{PatKind, RangeEnd};\n use rustc_errors::struct_span_err;\n use rustc_feature::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n use rustc_feature::{Features, GateIssue};\n-use rustc_session::parse::{feature_err, feature_err_issue};\n+use rustc_session::parse::feature_err_issue;\n use rustc_session::Session;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::sym;\n@@ -218,46 +218,6 @@ impl<'a> PostExpansionVisitor<'a> {\n         }\n     }\n \n-    fn maybe_report_invalid_custom_discriminants(&self, variants: &[ast::Variant]) {\n-        let has_fields = variants.iter().any(|variant| match variant.data {\n-            VariantData::Tuple(..) | VariantData::Struct(..) => true,\n-            VariantData::Unit(..) => false,\n-        });\n-\n-        let discriminant_spans = variants\n-            .iter()\n-            .filter(|variant| match variant.data {\n-                VariantData::Tuple(..) | VariantData::Struct(..) => false,\n-                VariantData::Unit(..) => true,\n-            })\n-            .filter_map(|variant| variant.disr_expr.as_ref().map(|c| c.value.span))\n-            .collect::<Vec<_>>();\n-\n-        if !discriminant_spans.is_empty() && has_fields {\n-            let mut err = feature_err(\n-                &self.sess.parse_sess,\n-                sym::arbitrary_enum_discriminant,\n-                discriminant_spans.clone(),\n-                \"custom discriminant values are not allowed in enums with tuple or struct variants\",\n-            );\n-            for sp in discriminant_spans {\n-                err.span_label(sp, \"disallowed custom discriminant\");\n-            }\n-            for variant in variants.iter() {\n-                match &variant.data {\n-                    VariantData::Struct(..) => {\n-                        err.span_label(variant.span, \"struct variant defined here\");\n-                    }\n-                    VariantData::Tuple(..) => {\n-                        err.span_label(variant.span, \"tuple variant defined here\");\n-                    }\n-                    VariantData::Unit(..) => {}\n-                }\n-            }\n-            err.emit();\n-        }\n-    }\n-\n     fn check_gat(&self, generics: &ast::Generics, span: Span) {\n         if !generics.params.is_empty() {\n             gate_feature_post!(\n@@ -402,26 +362,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 }\n             }\n \n-            ast::ItemKind::Enum(ast::EnumDef { ref variants, .. }, ..) => {\n-                for variant in variants {\n-                    match (&variant.data, &variant.disr_expr) {\n-                        (ast::VariantData::Unit(..), _) => {}\n-                        (_, Some(disr_expr)) => gate_feature_post!(\n-                            &self,\n-                            arbitrary_enum_discriminant,\n-                            disr_expr.value.span,\n-                            \"discriminants on non-unit variants are experimental\"\n-                        ),\n-                        _ => {}\n-                    }\n-                }\n-\n-                let has_feature = self.features.arbitrary_enum_discriminant;\n-                if !has_feature && !i.span.allows_unstable(sym::arbitrary_enum_discriminant) {\n-                    self.maybe_report_invalid_custom_discriminants(&variants);\n-                }\n-            }\n-\n             ast::ItemKind::Impl(box ast::ImplKind {\n                 polarity, defaultness, ref of_trait, ..\n             }) => {"}, {"sha": "9536fdbf0df87362eac7e509c289361d8be95c73", "filename": "compiler/rustc_error_codes/src/error_codes/E0732.md", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0732.md", "raw_url": "https://github.com/rust-lang/rust/raw/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0732.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0732.md?ref=02b27f1e70fc60a8f2aa0982e80d7cde5889112e", "patch": "@@ -3,8 +3,6 @@ An `enum` with a discriminant must specify a `#[repr(inttype)]`.\n Erroneous code example:\n \n ```compile_fail,E0732\n-#![feature(arbitrary_enum_discriminant)]\n-\n enum Enum { // error!\n     Unit = 1,\n     Tuple() = 2,\n@@ -20,8 +18,6 @@ is a well-defined way to extract a variant's discriminant from a value;\n for instance:\n \n ```\n-#![feature(arbitrary_enum_discriminant)]\n-\n #[repr(u8)]\n enum Enum {\n     Unit = 3,"}, {"sha": "f3c710e0f6af3092160f6ca29a1ce8641645f692", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=02b27f1e70fc60a8f2aa0982e80d7cde5889112e", "patch": "@@ -294,6 +294,8 @@ declare_features! (\n     (accepted, const_fn_transmute, \"1.56.0\", Some(53605), None),\n     /// Allows accessing fields of unions inside `const` functions.\n     (accepted, const_fn_union, \"1.56.0\", Some(51909), None),\n+    /// Allows explicit discriminants on non-unit enum variants.\n+    (accepted, arbitrary_enum_discriminant, \"1.56.0\", Some(60553), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "2e4b122f80cbbb33ceb7a2f8a14236b192b4a5df", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=02b27f1e70fc60a8f2aa0982e80d7cde5889112e", "patch": "@@ -471,9 +471,6 @@ declare_features! (\n     /// Allows #[repr(transparent)] on unions (RFC 2645).\n     (active, transparent_unions, \"1.37.0\", Some(60405), None),\n \n-    /// Allows explicit discriminants on non-unit enum variants.\n-    (active, arbitrary_enum_discriminant, \"1.37.0\", Some(60553), None),\n-\n     /// Allows `async || body` closures.\n     (active, async_closure, \"1.37.0\", Some(62290), None),\n "}, {"sha": "8eb51b977ed8a349e77a1caedc63ba7598ad10e9", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=02b27f1e70fc60a8f2aa0982e80d7cde5889112e", "patch": "@@ -1383,7 +1383,7 @@ fn check_enum<'tcx>(\n         }\n     }\n \n-    if tcx.adt_def(def_id).repr.int.is_none() && tcx.features().arbitrary_enum_discriminant {\n+    if tcx.adt_def(def_id).repr.int.is_none() {\n         let is_unit = |var: &hir::Variant<'_>| matches!(var.data, hir::VariantData::Unit(..));\n \n         let has_disr = |var: &hir::Variant<'_>| var.disr_expr.is_some();"}, {"sha": "e0bb782270e22821f416ac44a45d91236e985ffd", "filename": "src/doc/unstable-book/src/language-features/arbitrary-enum-discriminant.md", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/adf168844791b213383b18d10515eaee88695f7d/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Farbitrary-enum-discriminant.md", "raw_url": "https://github.com/rust-lang/rust/raw/adf168844791b213383b18d10515eaee88695f7d/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Farbitrary-enum-discriminant.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Farbitrary-enum-discriminant.md?ref=adf168844791b213383b18d10515eaee88695f7d", "patch": "@@ -1,37 +0,0 @@\n-# `arbitrary_enum_discriminant`\n-\n-The tracking issue for this feature is: [#60553]\n-\n-[#60553]: https://github.com/rust-lang/rust/issues/60553\n-\n-------------------------\n-\n-The `arbitrary_enum_discriminant` feature permits tuple-like and\n-struct-like enum variants with `#[repr(<int-type>)]` to have explicit discriminants.\n-\n-## Examples\n-\n-```rust\n-#![feature(arbitrary_enum_discriminant)]\n-\n-#[allow(dead_code)]\n-#[repr(u8)]\n-enum Enum {\n-    Unit = 3,\n-    Tuple(u16) = 2,\n-    Struct {\n-        a: u8,\n-        b: u16,\n-    } = 1,\n-}\n-\n-impl Enum {\n-    fn tag(&self) -> u8 {\n-        unsafe { *(self as *const Self as *const u8) }\n-    }\n-}\n-\n-assert_eq!(3, Enum::Unit.tag());\n-assert_eq!(2, Enum::Tuple(5).tag());\n-assert_eq!(1, Enum::Struct{a: 7, b: 11}.tag());\n-```"}, {"sha": "a6e5f70fdefa63dc66b816a3316a41d0e7d77ca1", "filename": "src/test/ui/enum-discriminant/arbitrary_enum_discriminant-no-repr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.rs?ref=02b27f1e70fc60a8f2aa0982e80d7cde5889112e", "patch": "@@ -1,5 +1,4 @@\n #![crate_type=\"lib\"]\n-#![feature(arbitrary_enum_discriminant)]\n \n enum Enum {\n //~^ ERROR `#[repr(inttype)]` must be specified"}, {"sha": "7af063c591d560eb88f04bc47eaa836497b9485a", "filename": "src/test/ui/enum-discriminant/arbitrary_enum_discriminant-no-repr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant-no-repr.stderr?ref=02b27f1e70fc60a8f2aa0982e80d7cde5889112e", "patch": "@@ -1,5 +1,5 @@\n error[E0732]: `#[repr(inttype)]` must be specified\n-  --> $DIR/arbitrary_enum_discriminant-no-repr.rs:4:1\n+  --> $DIR/arbitrary_enum_discriminant-no-repr.rs:3:1\n    |\n LL | / enum Enum {\n LL | |"}, {"sha": "360bddb7bd1e46a0a04737d77cace19c8292e163", "filename": "src/test/ui/enum-discriminant/arbitrary_enum_discriminant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Farbitrary_enum_discriminant.rs?ref=02b27f1e70fc60a8f2aa0982e80d7cde5889112e", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(arbitrary_enum_discriminant, const_raw_ptr_deref, test)]\n+#![feature(const_raw_ptr_deref, test)]\n \n extern crate test;\n "}, {"sha": "7ed1d9660a69c76ee3b3f1e5f5840ab75e9cd28d", "filename": "src/test/ui/enum-discriminant/discriminant_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value.rs?ref=02b27f1e70fc60a8f2aa0982e80d7cde5889112e", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n #![allow(stable_features)]\n-#![feature(arbitrary_enum_discriminant, core, core_intrinsics)]\n+#![feature(core, core_intrinsics)]\n \n extern crate core;\n use core::intrinsics::discriminant_value;"}, {"sha": "3e90af4d36af3fddc8a6de00a048e8ff1eb9d4be", "filename": "src/test/ui/enum-discriminant/feature-gate-arbitrary_enum_discriminant.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adf168844791b213383b18d10515eaee88695f7d/src%2Ftest%2Fui%2Fenum-discriminant%2Ffeature-gate-arbitrary_enum_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf168844791b213383b18d10515eaee88695f7d/src%2Ftest%2Fui%2Fenum-discriminant%2Ffeature-gate-arbitrary_enum_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Ffeature-gate-arbitrary_enum_discriminant.rs?ref=adf168844791b213383b18d10515eaee88695f7d", "patch": "@@ -1,10 +0,0 @@\n-#![crate_type=\"lib\"]\n-\n-enum Enum {\n-  Unit = 1,\n-  //~^ ERROR custom discriminant values are not allowed in enums with tuple or struct variants\n-  Tuple() = 2,\n-  //~^ ERROR discriminants on non-unit variants are experimental\n-  Struct{} = 3,\n-  //~^ ERROR discriminants on non-unit variants are experimental\n-}"}, {"sha": "b5f61e6e991d842efbe57f34b6f89a008ab2c3a3", "filename": "src/test/ui/enum-discriminant/feature-gate-arbitrary_enum_discriminant.stderr", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/adf168844791b213383b18d10515eaee88695f7d/src%2Ftest%2Fui%2Fenum-discriminant%2Ffeature-gate-arbitrary_enum_discriminant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adf168844791b213383b18d10515eaee88695f7d/src%2Ftest%2Fui%2Fenum-discriminant%2Ffeature-gate-arbitrary_enum_discriminant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Ffeature-gate-arbitrary_enum_discriminant.stderr?ref=adf168844791b213383b18d10515eaee88695f7d", "patch": "@@ -1,36 +0,0 @@\n-error[E0658]: discriminants on non-unit variants are experimental\n-  --> $DIR/feature-gate-arbitrary_enum_discriminant.rs:6:13\n-   |\n-LL |   Tuple() = 2,\n-   |             ^\n-   |\n-   = note: see issue #60553 <https://github.com/rust-lang/rust/issues/60553> for more information\n-   = help: add `#![feature(arbitrary_enum_discriminant)]` to the crate attributes to enable\n-\n-error[E0658]: discriminants on non-unit variants are experimental\n-  --> $DIR/feature-gate-arbitrary_enum_discriminant.rs:8:14\n-   |\n-LL |   Struct{} = 3,\n-   |              ^\n-   |\n-   = note: see issue #60553 <https://github.com/rust-lang/rust/issues/60553> for more information\n-   = help: add `#![feature(arbitrary_enum_discriminant)]` to the crate attributes to enable\n-\n-error[E0658]: custom discriminant values are not allowed in enums with tuple or struct variants\n-  --> $DIR/feature-gate-arbitrary_enum_discriminant.rs:4:10\n-   |\n-LL |   Unit = 1,\n-   |          ^ disallowed custom discriminant\n-LL |\n-LL |   Tuple() = 2,\n-   |   ----------- tuple variant defined here\n-LL |\n-LL |   Struct{} = 3,\n-   |   ------------ struct variant defined here\n-   |\n-   = note: see issue #60553 <https://github.com/rust-lang/rust/issues/60553> for more information\n-   = help: add `#![feature(arbitrary_enum_discriminant)]` to the crate attributes to enable\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "ad9fcc25b4127da69aee30dd033a9aa853a61750", "filename": "src/test/ui/enum-discriminant/issue-70453-generics-in-discr-ice-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.rs?ref=02b27f1e70fc60a8f2aa0982e80d7cde5889112e", "patch": "@@ -1,4 +1,4 @@\n-#![feature(arbitrary_enum_discriminant, core_intrinsics)]\n+#![feature(core_intrinsics)]\n \n extern crate core;\n use core::intrinsics::discriminant_value;"}, {"sha": "42a062239d34addbc5f30a5ac616d268eaada333", "filename": "src/test/ui/enum-discriminant/issue-70453-polymorphic-ctfe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.rs?ref=02b27f1e70fc60a8f2aa0982e80d7cde5889112e", "patch": "@@ -1,4 +1,4 @@\n-#![feature(arbitrary_enum_discriminant, core_intrinsics)]\n+#![feature(core_intrinsics)]\n \n extern crate core;\n use core::intrinsics::discriminant_value;"}, {"sha": "3adac7b72621ccc0cc5709420bf025392e652db5", "filename": "src/test/ui/enum-discriminant/issue-70509-partial_eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70509-partial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70509-partial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70509-partial_eq.rs?ref=02b27f1e70fc60a8f2aa0982e80d7cde5889112e", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![feature(repr128, arbitrary_enum_discriminant)]\n+#![feature(repr128)]\n //~^ WARN the feature `repr128` is incomplete\n \n #[derive(PartialEq, Debug)]"}, {"sha": "04fb13f37a006b79914d54a48be364fbd54c06c8", "filename": "src/test/ui/enum-discriminant/issue-70509-partial_eq.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70509-partial_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70509-partial_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70509-partial_eq.stderr?ref=02b27f1e70fc60a8f2aa0982e80d7cde5889112e", "patch": "@@ -1,7 +1,7 @@\n warning: the feature `repr128` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-70509-partial_eq.rs:2:12\n    |\n-LL | #![feature(repr128, arbitrary_enum_discriminant)]\n+LL | #![feature(repr128)]\n    |            ^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default"}, {"sha": "88ef8182f023875f256ee3565fec838dbdb61b65", "filename": "src/test/ui/intrinsics/panic-uninitialized-zeroed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b27f1e70fc60a8f2aa0982e80d7cde5889112e/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs?ref=02b27f1e70fc60a8f2aa0982e80d7cde5889112e", "patch": "@@ -5,7 +5,7 @@\n \n // This test checks panic emitted from `mem::{uninitialized,zeroed}`.\n \n-#![feature(never_type, arbitrary_enum_discriminant)]\n+#![feature(never_type)]\n #![allow(deprecated, invalid_value)]\n \n use std::{"}, {"sha": "7bf0e64f2c0a30eecf3963b7bee955d7059ce399", "filename": "src/test/ui/parser/issue-17383.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/adf168844791b213383b18d10515eaee88695f7d/src%2Ftest%2Fui%2Fparser%2Fissue-17383.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf168844791b213383b18d10515eaee88695f7d/src%2Ftest%2Fui%2Fparser%2Fissue-17383.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-17383.rs?ref=adf168844791b213383b18d10515eaee88695f7d", "patch": "@@ -1,7 +0,0 @@\n-enum X {\n-    A = 3,\n-    //~^ ERROR custom discriminant values are not allowed in enums with tuple or struct variants\n-    B(usize)\n-}\n-\n-fn main() {}"}, {"sha": "265d6e14866149a674cc7a6cb9818b7628463709", "filename": "src/test/ui/parser/issue-17383.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/adf168844791b213383b18d10515eaee88695f7d/src%2Ftest%2Fui%2Fparser%2Fissue-17383.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adf168844791b213383b18d10515eaee88695f7d/src%2Ftest%2Fui%2Fparser%2Fissue-17383.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-17383.stderr?ref=adf168844791b213383b18d10515eaee88695f7d", "patch": "@@ -1,15 +0,0 @@\n-error[E0658]: custom discriminant values are not allowed in enums with tuple or struct variants\n-  --> $DIR/issue-17383.rs:2:9\n-   |\n-LL |     A = 3,\n-   |         ^ disallowed custom discriminant\n-LL |\n-LL |     B(usize)\n-   |     -------- tuple variant defined here\n-   |\n-   = note: see issue #60553 <https://github.com/rust-lang/rust/issues/60553> for more information\n-   = help: add `#![feature(arbitrary_enum_discriminant)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "a9cfdd549c752233f40a6608474f7a9d362ee375", "filename": "src/test/ui/parser/tag-variant-disr-non-nullary.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/adf168844791b213383b18d10515eaee88695f7d/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf168844791b213383b18d10515eaee88695f7d/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.rs?ref=adf168844791b213383b18d10515eaee88695f7d", "patch": "@@ -1,12 +0,0 @@\n-enum Color {\n-    Red = 0xff0000,\n-    //~^ ERROR custom discriminant values are not allowed in enums with tuple or struct variants\n-    Green = 0x00ff00,\n-    Blue = 0x0000ff,\n-    Black = 0x000000,\n-    White = 0xffffff,\n-    Other(usize),\n-    Other2(usize, usize),\n-}\n-\n-fn main() {}"}, {"sha": "79f044a0675b7b075f3756eaf7d51be8fbdce74f", "filename": "src/test/ui/parser/tag-variant-disr-non-nullary.stderr", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/adf168844791b213383b18d10515eaee88695f7d/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adf168844791b213383b18d10515eaee88695f7d/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftag-variant-disr-non-nullary.stderr?ref=adf168844791b213383b18d10515eaee88695f7d", "patch": "@@ -1,25 +0,0 @@\n-error[E0658]: custom discriminant values are not allowed in enums with tuple or struct variants\n-  --> $DIR/tag-variant-disr-non-nullary.rs:2:11\n-   |\n-LL |     Red = 0xff0000,\n-   |           ^^^^^^^^ disallowed custom discriminant\n-LL |\n-LL |     Green = 0x00ff00,\n-   |             ^^^^^^^^ disallowed custom discriminant\n-LL |     Blue = 0x0000ff,\n-   |            ^^^^^^^^ disallowed custom discriminant\n-LL |     Black = 0x000000,\n-   |             ^^^^^^^^ disallowed custom discriminant\n-LL |     White = 0xffffff,\n-   |             ^^^^^^^^ disallowed custom discriminant\n-LL |     Other(usize),\n-   |     ------------ tuple variant defined here\n-LL |     Other2(usize, usize),\n-   |     -------------------- tuple variant defined here\n-   |\n-   = note: see issue #60553 <https://github.com/rust-lang/rust/issues/60553> for more information\n-   = help: add `#![feature(arbitrary_enum_discriminant)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}]}