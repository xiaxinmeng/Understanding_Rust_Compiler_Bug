{"sha": "1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "node_id": "C_kwDOAAsO6NoAKDFjMWNlMmZiZGE5YzVkMzg1ZmNiMjIyZDk4ZDk0OGFhNDYxNmZlOTE", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-01-13T07:39:58Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-01-17T20:01:22Z"}, "message": "Add term to ExistentialProjection\n\nAlso prevent ICE when adding a const in associated const equality.", "tree": {"sha": "cd857aabfa5104ae08da5c00114dbe6cddb765c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd857aabfa5104ae08da5c00114dbe6cddb765c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "html_url": "https://github.com/rust-lang/rust/commit/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f396888c4d816f7d0980aba041014169dd71a2a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f396888c4d816f7d0980aba041014169dd71a2a7", "html_url": "https://github.com/rust-lang/rust/commit/f396888c4d816f7d0980aba041014169dd71a2a7"}], "stats": {"total": 284, "additions": 213, "deletions": 71}, "files": [{"sha": "89671788255a97f7d6488caf8845b1834c328ba5", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -724,6 +724,7 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(half_open_range_patterns, \"half-open range patterns are unstable\");\n     gate_all!(inline_const, \"inline-const is experimental\");\n     gate_all!(inline_const_pat, \"inline-const in pattern position is experimental\");\n+    gate_all!(associated_const_equality, \"associated const equality is incomplete\");\n \n     // All uses of `gate_all!` below this point were added in #65742,\n     // and subsequently disabled (with the non-early gating readded)."}, {"sha": "9687fd09a53bc091bf86ef6c6de488a7304f463d", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -203,8 +203,9 @@ fn push_debuginfo_type_name<'tcx>(\n                 let projection_bounds: SmallVec<[_; 4]> = trait_data\n                     .projection_bounds()\n                     .map(|bound| {\n-                        let ExistentialProjection { item_def_id, ty, .. } = bound.skip_binder();\n-                        (item_def_id, ty)\n+                        let ExistentialProjection { item_def_id, term, .. } = bound.skip_binder();\n+                        // FIXME(associated_const_equality): allow for consts here\n+                        (item_def_id, term.ty().unwrap())\n                     })\n                     .collect();\n "}, {"sha": "47010ea3ab61392acd961f35e2bdd4dbd8f97d7d", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -288,6 +288,8 @@ declare_features! (\n     (active, asm_sym, \"1.58.0\", Some(72016), None),\n     /// Allows the `may_unwind` option in inline assembly.\n     (active, asm_unwind, \"1.58.0\", Some(72016), None),\n+    /// Allows users to enforce equality of associated constants `TraitImpl<AssocConst=3>`.\n+    (active, associated_const_equality, \"1.58.0\", Some(92827), None),\n     /// Allows the user of associated type bounds.\n     (active, associated_type_bounds, \"1.34.0\", Some(52662), None),\n     /// Allows associated type defaults."}, {"sha": "e98b9c3b03c5acd3306dbe6f005f2003d1966d57", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -69,7 +69,7 @@ use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::{\n     self,\n     subst::{GenericArgKind, Subst, SubstsRef},\n-    Region, Term, Ty, TyCtxt, TypeFoldable,\n+    Region, Ty, TyCtxt, TypeFoldable,\n };\n use rustc_span::{sym, BytePos, DesugaringKind, MultiSpan, Pos, Span};\n use rustc_target::spec::abi;\n@@ -1780,11 +1780,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 {\n                     if projection_predicate.projection_ty.item_def_id == item_def_id {\n                         // We don't account for multiple `Future::Output = Ty` contraints.\n-                        match projection_predicate.term {\n-                            Term::Ty(ty) => return Some(ty),\n-                            // Can return None, but not sure if that makes sense?\n-                            Term::Const(_c) => todo!(),\n-                        }\n+                        return projection_predicate.term.ty();\n                     }\n                 }\n             }"}, {"sha": "b4c9cc7782c7bfe9ab0b7db87c6b5eca7f8a2dc8", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -4,7 +4,7 @@ use crate::ty::subst::{GenericArg, GenericArgKind};\n use crate::ty::TyKind::*;\n use crate::ty::{\n     ConstKind, ExistentialPredicate, ExistentialProjection, ExistentialTraitRef, InferTy,\n-    ProjectionTy, TyCtxt, TyS, TypeAndMut,\n+    ProjectionTy, Term, TyCtxt, TyS, TypeAndMut,\n };\n \n use rustc_errors::{Applicability, DiagnosticBuilder};\n@@ -105,8 +105,14 @@ impl<'tcx> TyS<'tcx> {\n                 ExistentialPredicate::Trait(ExistentialTraitRef { substs, .. }) => {\n                     substs.iter().all(generic_arg_is_suggestible)\n                 }\n-                ExistentialPredicate::Projection(ExistentialProjection { substs, ty, .. }) => {\n-                    ty.is_suggestable() && substs.iter().all(generic_arg_is_suggestible)\n+                ExistentialPredicate::Projection(ExistentialProjection {\n+                    substs, term, ..\n+                }) => {\n+                    let term_is_suggestable = match term {\n+                        Term::Ty(ty) => ty.is_suggestable(),\n+                        Term::Const(c) => const_is_suggestable(c.val),\n+                    };\n+                    term_is_suggestable && substs.iter().all(generic_arg_is_suggestible)\n                 }\n                 _ => true,\n             }),"}, {"sha": "f06a1b09cd82ab236553403b81ba572fd2d65dc6", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -320,7 +320,10 @@ impl FlagComputation {\n \n     fn add_existential_projection(&mut self, projection: &ty::ExistentialProjection<'_>) {\n         self.add_substs(projection.substs);\n-        self.add_ty(projection.ty);\n+        match projection.term {\n+            ty::Term::Ty(ty) => self.add_ty(ty),\n+            ty::Term::Const(ct) => self.add_const(ct),\n+        }\n     }\n \n     fn add_projection_ty(&mut self, projection_ty: ty::ProjectionTy<'_>) {"}, {"sha": "4bc3e23f4a588cb26b1e9218edfe29a2324a57e9", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -795,7 +795,7 @@ pub struct CoercePredicate<'tcx> {\n }\n pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;\n \n-#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]\n #[derive(HashStable, TypeFoldable)]\n pub enum Term<'tcx> {\n     Ty(Ty<'tcx>),"}, {"sha": "bbdaf248a9e7216a3c994c7debbab5cc1ee8b129", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -905,29 +905,27 @@ pub trait PrettyPrinter<'tcx>:\n                 }\n \n                 for (assoc_item_def_id, term) in assoc_items {\n-                    let ty = match term.skip_binder() {\n-                        Term::Ty(ty) => ty,\n-                        Term::Const(c) => {\n-                            p!(print(c));\n-                            continue;\n-                        }\n-                    };\n                     if !first {\n                         p!(\", \");\n                     }\n                     p!(write(\"{} = \", self.tcx().associated_item(assoc_item_def_id).ident));\n \n-                    // Skip printing `<[generator@] as Generator<_>>::Return` from async blocks\n-                    match ty.kind() {\n-                        ty::Projection(ty::ProjectionTy { item_def_id, .. })\n-                            if Some(*item_def_id) == self.tcx().lang_items().generator_return() =>\n-                        {\n-                            p!(\"[async output]\")\n+                    match term.skip_binder() {\n+                        Term::Ty(ty) => {\n+                            // Skip printing `<[generator@] as Generator<_>>::Return` from async blocks\n+                            if matches!(\n+                              ty.kind(), ty::Projection(ty::ProjectionTy { item_def_id, .. })\n+                              if Some(*item_def_id) == self.tcx().lang_items().generator_return()\n+                            ) {\n+                                p!(\"[async output]\")\n+                            } else {\n+                                p!(print(ty))\n+                            }\n                         }\n-                        _ => {\n-                            p!(print(ty))\n+                        Term::Const(c) => {\n+                            p!(print(c));\n                         }\n-                    }\n+                    };\n \n                     first = false;\n                 }\n@@ -1031,7 +1029,11 @@ pub trait PrettyPrinter<'tcx>:\n                         let mut projections = predicates.projection_bounds();\n                         if let (Some(proj), None) = (projections.next(), projections.next()) {\n                             let tys: Vec<_> = args.iter().map(|k| k.expect_ty()).collect();\n-                            p!(pretty_fn_sig(&tys, false, proj.skip_binder().ty));\n+                            p!(pretty_fn_sig(\n+                                &tys,\n+                                false,\n+                                proj.skip_binder().term.ty().expect(\"Return type was a const\")\n+                            ));\n                             resugared = true;\n                         }\n                     }\n@@ -2454,7 +2456,7 @@ define_print_and_forward_display! {\n \n     ty::ExistentialProjection<'tcx> {\n         let name = cx.tcx().associated_item(self.item_def_id).ident;\n-        p!(write(\"{} = \", name), print(self.ty))\n+        p!(write(\"{} = \", name), print(self.term))\n     }\n \n     ty::ExistentialPredicate<'tcx> {"}, {"sha": "bb040acd2703d6e91db73855a38224eaa14b6eef", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -291,19 +291,19 @@ impl<'tcx> Relate<'tcx> for ty::ExistentialProjection<'tcx> {\n                 b.item_def_id,\n             )))\n         } else {\n-            let ty = relation.relate_with_variance(\n+            let term = relation.relate_with_variance(\n                 ty::Invariant,\n                 ty::VarianceDiagInfo::default(),\n-                a.ty,\n-                b.ty,\n+                a.term,\n+                b.term,\n             )?;\n             let substs = relation.relate_with_variance(\n                 ty::Invariant,\n                 ty::VarianceDiagInfo::default(),\n                 a.substs,\n                 b.substs,\n             )?;\n-            Ok(ty::ExistentialProjection { item_def_id: a.item_def_id, substs, ty })\n+            Ok(ty::ExistentialProjection { item_def_id: a.item_def_id, substs, term })\n         }\n     }\n }"}, {"sha": "1c5bc7860db2de7280f0446399e3f3ec796fa051", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -423,7 +423,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ExistentialProjection<'a> {\n     fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(self.substs).map(|substs| ty::ExistentialProjection {\n             substs,\n-            ty: tcx.lift(self.ty).expect(\"type must lift when substs do\"),\n+            term: tcx.lift(self.term).expect(\"type must lift when substs do\"),\n             item_def_id: self.item_def_id,\n         })\n     }"}, {"sha": "20db25f7899ddc3082062efc1b1a6f145d8633cb", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -1540,7 +1540,7 @@ impl From<BoundVar> for BoundTy {\n pub struct ExistentialProjection<'tcx> {\n     pub item_def_id: DefId,\n     pub substs: SubstsRef<'tcx>,\n-    pub ty: Ty<'tcx>,\n+    pub term: Term<'tcx>,\n }\n \n pub type PolyExistentialProjection<'tcx> = Binder<'tcx, ExistentialProjection<'tcx>>;\n@@ -1570,7 +1570,7 @@ impl<'tcx> ExistentialProjection<'tcx> {\n                 item_def_id: self.item_def_id,\n                 substs: tcx.mk_substs_trait(self_ty, self.substs),\n             },\n-            term: self.ty.into(),\n+            term: self.term,\n         }\n     }\n \n@@ -1580,15 +1580,11 @@ impl<'tcx> ExistentialProjection<'tcx> {\n     ) -> Self {\n         // Assert there is a Self.\n         projection_predicate.projection_ty.substs.type_at(0);\n-        let ty = match projection_predicate.term {\n-            Term::Ty(ty) => ty,\n-            Term::Const(_c) => unimplemented!(),\n-        };\n \n         Self {\n             item_def_id: projection_predicate.projection_ty.item_def_id,\n             substs: tcx.intern_substs(&projection_predicate.projection_ty.substs[1..]),\n-            ty,\n+            term: projection_predicate.term,\n         }\n     }\n }"}, {"sha": "38aa76333851f76007966ce0738f9aa323942ca4", "filename": "compiler/rustc_middle/src/ty/walk.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -157,15 +157,18 @@ fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>)\n                 stack.extend(obj.iter().rev().flat_map(|predicate| {\n                     let (substs, opt_ty) = match predicate.skip_binder() {\n                         ty::ExistentialPredicate::Trait(tr) => (tr.substs, None),\n-                        ty::ExistentialPredicate::Projection(p) => (p.substs, Some(p.ty)),\n+                        ty::ExistentialPredicate::Projection(p) => (p.substs, Some(p.term)),\n                         ty::ExistentialPredicate::AutoTrait(_) =>\n                         // Empty iterator\n                         {\n                             (ty::InternalSubsts::empty(), None)\n                         }\n                     };\n \n-                    substs.iter().rev().chain(opt_ty.map(|ty| ty.into()))\n+                    substs.iter().rev().chain(opt_ty.map(|term| match term {\n+                        ty::Term::Ty(ty) => ty.into(),\n+                        ty::Term::Const(ct) => ct.into(),\n+                    }))\n                 }));\n             }\n             ty::Adt(_, substs)"}, {"sha": "4e60b7593c65167f95a4e9e5d050459c7b463014", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -505,7 +505,10 @@ impl<'a> Parser<'a> {\n         let span = ident.span.to(self.prev_token.span);\n         let term = match arg {\n             Some(GenericArg::Type(ty)) => ty.into(),\n-            Some(GenericArg::Const(c)) => c.into(),\n+            Some(GenericArg::Const(c)) => {\n+                self.sess.gated_spans.gate(sym::associated_const_equality, span);\n+                c.into()\n+            }\n             Some(GenericArg::Lifetime(lt)) => {\n                 self.struct_span_err(span, \"associated lifetimes are not supported\")\n                     .span_label(lt.ident.span, \"the lifetime is given here\")"}, {"sha": "2ff888bfb48a23fffb4e914835efd9561eff6d6d", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -343,6 +343,7 @@ symbols! {\n         assert_receiver_is_total_eq,\n         assert_uninit_valid,\n         assert_zero_valid,\n+        associated_const_equality,\n         associated_consts,\n         associated_type_bounds,\n         associated_type_defaults,"}, {"sha": "809b9732529742663d94b487fb33dd1a32099dc5", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -559,7 +559,10 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n                         let name = cx.tcx.associated_item(projection.item_def_id).ident;\n                         cx.push(\"p\");\n                         cx.push_ident(name.as_str());\n-                        cx = projection.ty.print(cx)?;\n+                        cx = match projection.term {\n+                            ty::Term::Ty(ty) => ty.print(cx),\n+                            ty::Term::Const(c) => c.print(cx),\n+                        }?;\n                     }\n                     ty::ExistentialPredicate::AutoTrait(def_id) => {\n                         cx = cx.print_def_path(*def_id, &[])?;"}, {"sha": "e2afea76b77f56c4a82909dddf694012430798d4", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -756,8 +756,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                             // when we started out trying to unify\n                             // some inference variables. See the comment above\n                             // for more infomration\n-                            if p.term().skip_binder().ty().map_or(false, |ty| ty.has_infer_types())\n-                            {\n+                            if p.term().skip_binder().ty().has_infer_types() {\n                                 if !self.evaluate_nested_obligations(\n                                     ty,\n                                     v.into_iter(),\n@@ -779,7 +778,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                             // However, we should always make progress (either by generating\n                             // subobligations or getting an error) when we started off with\n                             // inference variables\n-                            if p.term().skip_binder().ty().has_infer_types() {\n+                            if p.term().skip_binder().has_infer_types() {\n                                 panic!(\"Unexpected result when selecting {:?} {:?}\", ty, obligation)\n                             }\n                         }"}, {"sha": "65385851d054fbaf896aa3bbd5c0c30e933118fe", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -1314,7 +1314,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                         | ObligationCauseCode::ObjectCastObligation(_)\n                         | ObligationCauseCode::OpaqueType\n                 );\n-                // FIXME(...): Handle Consts here\n+                // FIXME(associated_const_equality): Handle Consts here\n                 let data_ty = data.term.ty().unwrap();\n                 if let Err(error) = self.at(&obligation.cause, obligation.param_env).eq_exp(\n                     is_normalized_ty_expected,"}, {"sha": "7bfedecbdc7c9b240c4d7a014c8093000f7b2118", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -571,7 +571,7 @@ fn object_ty_for_trait<'tcx>(\n         // `trait MyTrait: for<'s> OtherTrait<&'s T, Output=bool>`.\n         super_trait_ref.map_bound(|super_trait_ref| {\n             ty::ExistentialPredicate::Projection(ty::ExistentialProjection {\n-                ty: tcx.mk_projection(item.def_id, super_trait_ref.substs),\n+                term: tcx.mk_projection(item.def_id, super_trait_ref.substs).into(),\n                 item_def_id: item.def_id,\n                 substs: super_trait_ref.substs,\n             })"}, {"sha": "2bbdb72a4fb8a89333ebe36300e709ddd102c670", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -212,7 +212,7 @@ fn project_and_unify_type<'cx, 'tcx>(\n     debug!(?normalized_ty, ?obligations, \"project_and_unify_type result\");\n \n     let infcx = selcx.infcx();\n-    // FIXME(...): Handle consts here as well as types.\n+    // FIXME(associated_const_equality): Handle consts here as well as types.\n     let obligation_pred_ty = obligation.predicate.term.ty().unwrap();\n     match infcx.at(&obligation.cause, obligation.param_env).eq(normalized_ty, obligation_pred_ty) {\n         Ok(InferOk { obligations: inferred_obligations, value: () }) => {"}, {"sha": "67d0ba39667d31127bb910d1283bace99b87356c", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -226,6 +226,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::AliasEq<RustInterner<'tcx>>>\n     for rustc_middle::ty::ProjectionPredicate<'tcx>\n {\n     fn lower_into(self, interner: RustInterner<'tcx>) -> chalk_ir::AliasEq<RustInterner<'tcx>> {\n+        // FIXME(associated_const_equality): teach chalk about terms for alias eq.\n         chalk_ir::AliasEq {\n             ty: self.term.ty().unwrap().lower_into(interner),\n             alias: self.projection_ty.lower_into(interner),\n@@ -663,7 +664,8 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Binders<chalk_ir::QuantifiedWhereClauses<Ru\n                                 .mk_substs_trait(self_ty, predicate.substs)\n                                 .lower_into(interner),\n                         }),\n-                        ty: predicate.ty.lower_into(interner),\n+                        // FIXME(associated_const_equality): teach chalk about terms for alias eq.\n+                        ty: predicate.term.ty().unwrap().lower_into(interner),\n                     }),\n                 ),\n                 ty::ExistentialPredicate::AutoTrait(def_id) => chalk_ir::Binders::new("}, {"sha": "a1f1adb80581d73bf8ecff776213842dc8eaa1bc", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -1136,9 +1136,18 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             .associated_items(candidate.def_id())\n             .filter_by_name_unhygienic(assoc_ident.name)\n             .find(|i| {\n-                i.kind == ty::AssocKind::Type && i.ident.normalize_to_macros_2_0() == assoc_ident\n+                (i.kind == ty::AssocKind::Type || i.kind == ty::AssocKind::Const)\n+                    && i.ident.normalize_to_macros_2_0() == assoc_ident\n             })\n             .expect(\"missing associated type\");\n+        // FIXME(associated_const_equality): need to handle assoc_consts here as well.\n+        if assoc_ty.kind == ty::AssocKind::Const {\n+            tcx.sess\n+                .struct_span_err(path_span, &format!(\"associated const equality is incomplete\"))\n+                .span_label(path_span, \"cannot yet relate associated const\")\n+                .emit();\n+            return Err(ErrorReported);\n+        }\n \n         if !assoc_ty.vis.is_accessible_from(def_scope, tcx) {\n             tcx.sess"}, {"sha": "7c504a0d89c59aa98b6348a0d7aa55a48bd9390d", "filename": "compiler/rustc_typeck/src/variance/constraints.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -308,11 +308,14 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 }\n \n                 for projection in data.projection_bounds() {\n-                    self.add_constraints_from_ty(\n-                        current,\n-                        projection.skip_binder().ty,\n-                        self.invariant,\n-                    );\n+                    match projection.skip_binder().term {\n+                        ty::Term::Ty(ty) => {\n+                            self.add_constraints_from_ty(current, ty, self.invariant);\n+                        }\n+                        ty::Term::Const(c) => {\n+                            self.add_constraints_from_const(current, c, self.invariant)\n+                        }\n+                    }\n                 }\n             }\n "}, {"sha": "de1717b3f3f9a983ecc145ffb19f71c6f807c1b1", "filename": "src/etc/check_missing_items.py", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/src%2Fetc%2Fcheck_missing_items.py", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/src%2Fetc%2Fcheck_missing_items.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcheck_missing_items.py?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -83,7 +83,9 @@ def check_type(ty):\n                         check_type(arg[\"const\"][\"type\"])\n                 for binding in args[\"angle_bracketed\"][\"bindings\"]:\n                     if \"equality\" in binding[\"binding\"]:\n-                        check_type(binding[\"binding\"][\"equality\"])\n+                        term = binding[\"binding\"][\"equality\"]\n+                        if \"type\" in term: check_type(term[\"type\"])\n+                        elif \"const\" in term: check_type(term[\"const\"])\n                     elif \"constraint\" in binding[\"binding\"]:\n                         for bound in binding[\"binding\"][\"constraint\"]:\n                             check_generic_bound(bound)"}, {"sha": "e759baa045892d3bbe1a6e97f42bc6a5fe6e3b42", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -1523,7 +1523,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     bindings.push(TypeBinding {\n                         name: cx.tcx.associated_item(pb.item_def_id()).ident.name,\n                         kind: TypeBindingKind::Equality {\n-                            term: pb.skip_binder().ty.clean(cx).into(),\n+                            term: pb.skip_binder().term.clean(cx).into(),\n                         },\n                     });\n                 }"}, {"sha": "9e6bfa346ec0d6315f5d7145c1ac85a579ea3667", "filename": "src/test/ui/associated-consts/assoc-const.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -1,5 +1,3 @@\n-// run-pass\n-\n pub trait Foo {\n   const N: usize;\n }\n@@ -14,6 +12,10 @@ const TEST:usize = 3;\n \n \n fn foo<F: Foo<N=3>>() {}\n+//~^ ERROR associated const equality is incomplete\n+//~| ERROR associated const equality is incomplete\n fn bar<F: Foo<N={TEST}>>() {}\n+//~^ ERROR associated const equality is incomplete\n+//~| ERROR associated const equality is incomplete\n \n fn main() {}"}, {"sha": "07da190bc8f904bbe6f633b42a2bd00c39f6a652", "filename": "src/test/ui/associated-consts/assoc-const.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const.stderr?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -0,0 +1,33 @@\n+error[E0658]: associated const equality is incomplete\n+  --> $DIR/assoc-const.rs:14:15\n+   |\n+LL | fn foo<F: Foo<N=3>>() {}\n+   |               ^^^\n+   |\n+   = note: see issue #92827 <https://github.com/rust-lang/rust/issues/92827> for more information\n+   = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable\n+\n+error[E0658]: associated const equality is incomplete\n+  --> $DIR/assoc-const.rs:17:15\n+   |\n+LL | fn bar<F: Foo<N={TEST}>>() {}\n+   |               ^^^^^^^^\n+   |\n+   = note: see issue #92827 <https://github.com/rust-lang/rust/issues/92827> for more information\n+   = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable\n+\n+error: associated const equality is incomplete\n+  --> $DIR/assoc-const.rs:14:15\n+   |\n+LL | fn foo<F: Foo<N=3>>() {}\n+   |               ^^^ cannot yet relate associated const\n+\n+error: associated const equality is incomplete\n+  --> $DIR/assoc-const.rs:17:15\n+   |\n+LL | fn bar<F: Foo<N={TEST}>>() {}\n+   |               ^^^^^^^^ cannot yet relate associated const\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "b126b24853ff72a0213b9a26b8116accc9b8bb23", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-no-kw.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -9,6 +9,7 @@ const T: usize = 42;\n impl Foo<N = 3> for Bar {\n //~^ ERROR this trait takes 1 generic argument but 0 generic arguments were supplied\n //~| ERROR associated type bindings are not allowed here\n+//~| ERROR associated const equality is incomplete\n     fn do_x(&self) -> [u8; 3] {\n         [0u8; 3]\n     }"}, {"sha": "59ba054aa11277dc10b5ad0a4d3da9a2befced58", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-no-kw.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-kw.stderr?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -1,3 +1,12 @@\n+error[E0658]: associated const equality is incomplete\n+  --> $DIR/issue-89013-no-kw.rs:9:10\n+   |\n+LL | impl Foo<N = 3> for Bar {\n+   |          ^^^^^\n+   |\n+   = note: see issue #92827 <https://github.com/rust-lang/rust/issues/92827> for more information\n+   = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable\n+\n error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/issue-89013-no-kw.rs:9:6\n    |\n@@ -20,7 +29,7 @@ error[E0229]: associated type bindings are not allowed here\n LL | impl Foo<N = 3> for Bar {\n    |          ^^^^^ associated type not allowed here\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0107, E0229.\n+Some errors have detailed explanations: E0107, E0229, E0658.\n For more information about an error, try `rustc --explain E0107`."}, {"sha": "9431779faf8590771e3ed30287c1f60d3333136e", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -10,6 +10,7 @@ impl Foo<N = const 3> for Bar {\n //~^ ERROR expected lifetime, type, or constant, found keyword `const`\n //~| ERROR this trait takes 1 generic\n //~| ERROR associated type bindings are not allowed here\n+//~| ERROR associated const equality is incomplete\n     fn do_x(&self) -> [u8; 3] {\n         [0u8; 3]\n     }"}, {"sha": "9d4739926700bbb296e317fbb5a343ef0b04504b", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -10,6 +10,15 @@ LL - impl Foo<N = const 3> for Bar {\n LL + impl Foo<N = 3> for Bar {\n    | \n \n+error[E0658]: associated const equality is incomplete\n+  --> $DIR/issue-89013.rs:9:10\n+   |\n+LL | impl Foo<N = const 3> for Bar {\n+   |          ^^^^^^^^^^^\n+   |\n+   = note: see issue #92827 <https://github.com/rust-lang/rust/issues/92827> for more information\n+   = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable\n+\n error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/issue-89013.rs:9:6\n    |\n@@ -32,7 +41,7 @@ error[E0229]: associated type bindings are not allowed here\n LL | impl Foo<N = const 3> for Bar {\n    |          ^^^^^^^^^^^ associated type not allowed here\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0107, E0229.\n+Some errors have detailed explanations: E0107, E0229, E0658.\n For more information about an error, try `rustc --explain E0107`."}, {"sha": "b51ead2a188661ae2a55a7d407ab069286272e20", "filename": "src/test/ui/feature-gates/feature-gate-associated_const_equality.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_const_equality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_const_equality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_const_equality.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -0,0 +1,16 @@\n+pub trait TraitWAssocConst {\n+  const A: usize;\n+}\n+pub struct Demo {}\n+\n+impl TraitWAssocConst for Demo {\n+  const A: usize = 32;\n+}\n+\n+fn foo<A: TraitWAssocConst<A=32>>() {}\n+//~^ ERROR associated const equality\n+//~| ERROR associated const equality\n+\n+fn main() {\n+  foo::<Demo>();\n+}"}, {"sha": "f4db49c4af88436c77f9c23b21647435a844bec5", "filename": "src/test/ui/feature-gates/feature-gate-associated_const_equality.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_const_equality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_const_equality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_const_equality.stderr?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -0,0 +1,18 @@\n+error[E0658]: associated const equality is incomplete\n+  --> $DIR/feature-gate-associated_const_equality.rs:10:28\n+   |\n+LL | fn foo<A: TraitWAssocConst<A=32>>() {}\n+   |                            ^^^^\n+   |\n+   = note: see issue #92827 <https://github.com/rust-lang/rust/issues/92827> for more information\n+   = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable\n+\n+error: associated const equality is incomplete\n+  --> $DIR/feature-gate-associated_const_equality.rs:10:28\n+   |\n+LL | fn foo<A: TraitWAssocConst<A=32>>() {}\n+   |                            ^^^^ cannot yet relate associated const\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "1453e6cb5cd7c654a71af7d82449103c42901d32", "filename": "src/test/ui/parser/recover-assoc-const-constraint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-const-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-const-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-const-constraint.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -1,9 +1,9 @@\n-// run-pass\n-\n #[cfg(FALSE)]\n fn syntax() {\n     bar::<Item = 42>();\n+    //~^ ERROR associated const equality is incomplete\n     bar::<Item = { 42 }>();\n+    //~^ ERROR associated const equality is incomplete\n }\n \n fn main() {}"}, {"sha": "2d36ce4e98632d950f7e1793cc06fe40a2ba2156", "filename": "src/test/ui/parser/recover-assoc-const-constraint.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-const-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-const-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-const-constraint.stderr?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: associated const equality is incomplete\n+  --> $DIR/recover-assoc-const-constraint.rs:3:11\n+   |\n+LL |     bar::<Item = 42>();\n+   |           ^^^^^^^^^\n+   |\n+   = note: see issue #92827 <https://github.com/rust-lang/rust/issues/92827> for more information\n+   = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable\n+\n+error[E0658]: associated const equality is incomplete\n+  --> $DIR/recover-assoc-const-constraint.rs:5:11\n+   |\n+LL |     bar::<Item = { 42 }>();\n+   |           ^^^^^^^^^^^^^\n+   |\n+   = note: see issue #92827 <https://github.com/rust-lang/rust/issues/92827> for more information\n+   = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "5de30129266a385cdca831ee0b0c582d8980343c", "filename": "src/tools/rustfmt/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c1ce2fbda9c5d385fcb222d98d948aa4616fe91/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs?ref=1c1ce2fbda9c5d385fcb222d98d948aa4616fe91", "patch": "@@ -211,7 +211,7 @@ impl Rewrite for ast::AssocConstraintKind {\n         match self {\n             ast::AssocConstraintKind::Equality { term } => match term {\n                 Term::Ty(ty) => ty.rewrite(context, shape),\n-                Term::Const(c) => c.rewrite(context,shape),\n+                Term::Const(c) => c.rewrite(context, shape),\n             },\n             ast::AssocConstraintKind::Bound { bounds } => bounds.rewrite(context, shape),\n         }"}]}