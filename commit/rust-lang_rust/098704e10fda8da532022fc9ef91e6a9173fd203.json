{"sha": "098704e10fda8da532022fc9ef91e6a9173fd203", "node_id": "C_kwDOAAsO6NoAKDA5ODcwNGUxMGZkYThkYTUzMjAyMmZjOWVmOTFlNmE5MTczZmQyMDM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-27T15:09:28Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-28T01:22:46Z"}, "message": "make use of get_alloc_info", "tree": {"sha": "520e022aed81947c714b3b6b5e827c021d93baaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/520e022aed81947c714b3b6b5e827c021d93baaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/098704e10fda8da532022fc9ef91e6a9173fd203", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/098704e10fda8da532022fc9ef91e6a9173fd203", "html_url": "https://github.com/rust-lang/rust/commit/098704e10fda8da532022fc9ef91e6a9173fd203", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/098704e10fda8da532022fc9ef91e6a9173fd203/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fafbde038ed492ba0ecc6c57f2a7ba229042df7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fafbde038ed492ba0ecc6c57f2a7ba229042df7", "html_url": "https://github.com/rust-lang/rust/commit/7fafbde038ed492ba0ecc6c57f2a7ba229042df7"}], "stats": {"total": 54, "additions": 20, "deletions": 34}, "files": [{"sha": "0ef5b08f9e40fe6917efa1c236d61898fbbb2823", "filename": "src/intptrcast.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/098704e10fda8da532022fc9ef91e6a9173fd203/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/098704e10fda8da532022fc9ef91e6a9173fd203/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=098704e10fda8da532022fc9ef91e6a9173fd203", "patch": "@@ -76,27 +76,17 @@ impl<'mir, 'tcx> GlobalStateInner {\n                 // This never overflows because `addr >= glb`\n                 let offset = addr - glb;\n                 // If the offset exceeds the size of the allocation, don't use this `alloc_id`.\n-\n-                if offset\n-                    <= ecx\n-                        .get_alloc_size_and_align(alloc_id, AllocCheck::MaybeDead)\n-                        .unwrap()\n-                        .0\n-                        .bytes()\n-                {\n-                    Some(alloc_id)\n-                } else {\n-                    None\n-                }\n+                let size = ecx.get_alloc_info(alloc_id).0;\n+                if offset <= size.bytes() { Some(alloc_id) } else { None }\n             }\n         }?;\n \n         // We only use this provenance if it has been exposed, *and* is still live.\n         if global_state.exposed.contains(&alloc_id) {\n-            // FIXME: this catches `InterpError`, which we should not usually do.\n-            // We might need a proper fallible API from `memory.rs` to avoid this though.\n-            if ecx.get_alloc_size_and_align(alloc_id, AllocCheck::Live).is_ok() {\n-                return Some(alloc_id);\n+            let (_size, _align, kind) = ecx.get_alloc_info(alloc_id);\n+            match kind {\n+                AllocKind::LiveData | AllocKind::Function => return Some(alloc_id),\n+                AllocKind::Dead => {}\n             }\n         }\n \n@@ -174,9 +164,8 @@ impl<'mir, 'tcx> GlobalStateInner {\n             Entry::Occupied(entry) => *entry.get(),\n             Entry::Vacant(entry) => {\n                 // There is nothing wrong with a raw pointer being cast to an integer only after\n-                // it became dangling.  Hence `MaybeDead`.\n-                let (size, align) =\n-                    ecx.get_alloc_size_and_align(alloc_id, AllocCheck::MaybeDead).unwrap();\n+                // it became dangling.  Hence we allow dead allocations.\n+                let (size, align, _kind) = ecx.get_alloc_info(alloc_id);\n \n                 // This allocation does not have a base address yet, pick one.\n                 // Leave some space to the previous allocation, to give it some chance to be less aligned."}, {"sha": "2423ffaf5fe01f018a3cc76612608e47ae787a6a", "filename": "src/shims/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/098704e10fda8da532022fc9ef91e6a9173fd203/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/098704e10fda8da532022fc9ef91e6a9173fd203/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=098704e10fda8da532022fc9ef91e6a9173fd203", "patch": "@@ -87,7 +87,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let ptr = this.read_pointer(ptr_op)?;\n         if let Ok((alloc_id, _offset, _)) = this.ptr_try_get_alloc_id(ptr) {\n             // Only do anything if we can identify the allocation this goes to.\n-            let (_, cur_align) = this.get_alloc_size_and_align(alloc_id, AllocCheck::MaybeDead)?;\n+            let (_size, cur_align, _kind) = this.get_alloc_info(alloc_id);\n             if cur_align.bytes() >= req_align {\n                 // If the allocation alignment is at least the required alignment we use the\n                 // real implementation."}, {"sha": "66f756d7b08d425f6b6301df185d274ea01f7dfb", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/098704e10fda8da532022fc9ef91e6a9173fd203/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/098704e10fda8da532022fc9ef91e6a9173fd203/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=098704e10fda8da532022fc9ef91e6a9173fd203", "patch": "@@ -849,8 +849,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         log_creation(this, current_span, alloc_id, base_offset, orig_tag)?;\n \n         // Ensure we bail out if the pointer goes out-of-bounds (see miri#1050).\n-        let (alloc_size, _) =\n-            this.get_alloc_size_and_align(alloc_id, AllocCheck::Dereferenceable)?;\n+        let (alloc_size, _) = this.get_live_alloc_size_and_align(alloc_id)?;\n         if base_offset + size > alloc_size {\n             throw_ub!(PointerOutOfBounds {\n                 alloc_id,\n@@ -1088,18 +1087,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Function pointers and dead objects don't have an alloc_extra so we ignore them.\n         // This is okay because accessing them is UB anyway, no need for any Stacked Borrows checks.\n         // NOT using `get_alloc_extra_mut` since this might be a read-only allocation!\n-        // FIXME: this catches `InterpError`, which we should not usually do.\n-        // We might need a proper fallible API from `memory.rs` to avoid this though.\n-        match this.get_alloc_extra(alloc_id) {\n-            Ok(alloc_extra) => {\n+        let (_size, _align, kind) = this.get_alloc_info(alloc_id);\n+        match kind {\n+            AllocKind::LiveData => {\n+                // This should have alloc_extra data.\n+                let alloc_extra = this.get_alloc_extra(alloc_id).unwrap();\n                 trace!(\"Stacked Borrows tag {tag:?} exposed in {alloc_id}\");\n                 alloc_extra.stacked_borrows.as_ref().unwrap().borrow_mut().exposed_tags.insert(tag);\n             }\n-            Err(err) => {\n-                trace!(\n-                    \"Not exposing Stacked Borrows tag {tag:?} due to error \\\n-                    when accessing {alloc_id}: {err}\"\n-                );\n+            AllocKind::Function | AllocKind::Dead => {\n+                // No stacked borrows on these allocations.\n             }\n         }\n     }"}, {"sha": "f22f73487b48c4fc1ada14e246d9bf8fc5b2b546", "filename": "tests/fail/function_pointers/deref_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/098704e10fda8da532022fc9ef91e6a9173fd203/tests%2Ffail%2Ffunction_pointers%2Fderef_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/098704e10fda8da532022fc9ef91e6a9173fd203/tests%2Ffail%2Ffunction_pointers%2Fderef_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fderef_fn_ptr.rs?ref=098704e10fda8da532022fc9ef91e6a9173fd203", "patch": "@@ -2,7 +2,7 @@ fn f() {}\n \n fn main() {\n     let x: u8 = unsafe {\n-        *std::mem::transmute::<fn(), *const u8>(f) //~ ERROR contains a function\n+        *std::mem::transmute::<fn(), *const u8>(f) //~ ERROR out-of-bounds\n     };\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "619b58f699a3281ae7e7726f93b4ce9a01186f1b", "filename": "tests/fail/function_pointers/deref_fn_ptr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/098704e10fda8da532022fc9ef91e6a9173fd203/tests%2Ffail%2Ffunction_pointers%2Fderef_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/098704e10fda8da532022fc9ef91e6a9173fd203/tests%2Ffail%2Ffunction_pointers%2Fderef_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fderef_fn_ptr.stderr?ref=098704e10fda8da532022fc9ef91e6a9173fd203", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: accessing ALLOC which contains a function\n+error: Undefined Behavior: dereferencing pointer failed: ALLOC has size 0, so pointer to 1 byte starting at offset 0 is out-of-bounds\n   --> $DIR/deref_fn_ptr.rs:LL:CC\n    |\n LL |         *std::mem::transmute::<fn(), *const u8>(f)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ accessing ALLOC which contains a function\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: ALLOC has size 0, so pointer to 1 byte starting at offset 0 is out-of-bounds\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}]}