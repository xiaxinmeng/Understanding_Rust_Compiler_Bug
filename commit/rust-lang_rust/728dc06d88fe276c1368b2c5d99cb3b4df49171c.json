{"sha": "728dc06d88fe276c1368b2c5d99cb3b4df49171c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyOGRjMDZkODhmZTI3NmMxMzY4YjJjNWQ5OWNiM2I0ZGY0OTE3MWM=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-12-18T20:27:17Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-01-23T01:18:11Z"}, "message": "add the log file", "tree": {"sha": "f1536cb178dad295b15fc9dbb24094f1c322ad38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1536cb178dad295b15fc9dbb24094f1c322ad38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/728dc06d88fe276c1368b2c5d99cb3b4df49171c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/728dc06d88fe276c1368b2c5d99cb3b4df49171c", "html_url": "https://github.com/rust-lang/rust/commit/728dc06d88fe276c1368b2c5d99cb3b4df49171c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/728dc06d88fe276c1368b2c5d99cb3b4df49171c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbb8c0020e76e448f96b1b346dab5afd0d08ce40", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbb8c0020e76e448f96b1b346dab5afd0d08ce40", "html_url": "https://github.com/rust-lang/rust/commit/dbb8c0020e76e448f96b1b346dab5afd0d08ce40"}], "stats": {"total": 180, "additions": 180, "deletions": 0}, "files": [{"sha": "48296dbd479d40407c93b03f5e18b079837e63c3", "filename": "mini-crater/logs.txt", "status": "added", "additions": 180, "deletions": 0, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/728dc06d88fe276c1368b2c5d99cb3b4df49171c/mini-crater%2Flogs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/728dc06d88fe276c1368b2c5d99cb3b4df49171c/mini-crater%2Flogs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mini-crater%2Flogs.txt?ref=728dc06d88fe276c1368b2c5d99cb3b4df49171c", "patch": "@@ -0,0 +1,180 @@\n+regex-1.4.2/src/backtrack.rs:100:13: redundant field names in struct initialization\n+regex-1.4.2/src/backtrack.rs:133:17: it looks like the same item is being pushed into this Vec\n+regex-1.4.2/src/backtrack.rs:223:29: redundant field names in struct initialization\n+regex-1.4.2/src/backtrack.rs:230:66: redundant field names in struct initialization\n+regex-1.4.2/src/backtrack.rs:97:13: redundant field names in struct initialization\n+regex-1.4.2/src/backtrack.rs:98:13: redundant field names in struct initialization\n+regex-1.4.2/src/backtrack.rs:99:13: redundant field names in struct initialization\n+regex-1.4.2/src/compile.rs:1000:17: redundant field names in struct initialization\n+regex-1.4.2/src/compile.rs:1089:44: redundant field names in struct initialization\n+regex-1.4.2/src/compile.rs:1089:54: redundant field names in struct initialization\n+regex-1.4.2/src/compile.rs:136:46: use of `unwrap_or` followed by a function call\n+regex-1.4.2/src/compile.rs:172:42: use of `unwrap_or` followed by a function call\n+regex-1.4.2/src/compile.rs:180:43: use of `unwrap_or` followed by a function call\n+regex-1.4.2/src/compile.rs:188:5: this function's return value is unnecessarily wrapped by `Result`\n+regex-1.4.2/src/compile.rs:375:39: use of `unwrap_or` followed by a function call\n+regex-1.4.2/src/compile.rs:379:29: redundant field names in struct initialization\n+regex-1.4.2/src/compile.rs:379:41: redundant field names in struct initialization\n+regex-1.4.2/src/compile.rs:413:56: redundant field names in struct initialization\n+regex-1.4.2/src/compile.rs:421:45: redundant field names in struct initialization\n+regex-1.4.2/src/compile.rs:428:51: redundant field names in struct initialization\n+regex-1.4.2/src/compile.rs:430:29: redundant field names in struct initialization\n+regex-1.4.2/src/compile.rs:438:5: this function's return value is unnecessarily wrapped by `Result`\n+regex-1.4.2/src/compile.rs:43:5: you should consider adding a `Default` implementation for `compile::Compiler`\n+regex-1.4.2/src/compile.rs:468:5: this function's return value is unnecessarily wrapped by `Result`\n+regex-1.4.2/src/compile.rs:469:57: redundant field names in struct initialization\n+regex-1.4.2/src/compile.rs:470:25: redundant field names in struct initialization\n+regex-1.4.2/src/compile.rs:494:25: redundant field names in struct initialization\n+regex-1.4.2/src/compile.rs:494:37: redundant field names in struct initialization\n+regex-1.4.2/src/compile.rs:637:14: use of `unwrap_or` followed by a function call\n+regex-1.4.2/src/compile.rs:661:41: use of `unwrap_or` followed by a function call\n+regex-1.4.2/src/compile.rs:786:5: this function's return value is unnecessarily wrapped by `Result`\n+regex-1.4.2/src/compile.rs:838:21: redundant field names in struct initialization\n+regex-1.4.2/src/compile.rs:845:21: redundant field names in struct initialization\n+regex-1.4.2/src/compile.rs:860:41: redundant field names in struct initialization\n+regex-1.4.2/src/compile.rs:860:55: redundant field names in struct initialization\n+regex-1.4.2/src/compile.rs:920:39: redundant field names in struct initialization\n+regex-1.4.2/src/compile.rs:920:51: redundant field names in struct initialization\n+regex-1.4.2/src/compile.rs:923:49: redundant field names in struct initialization\n+regex-1.4.2/src/compile.rs:923:61: redundant field names in struct initialization\n+regex-1.4.2/src/compile.rs:925:59: redundant field names in struct initialization\n+regex-1.4.2/src/compile.rs:925:71: redundant field names in struct initialization\n+regex-1.4.2/src/compile.rs:927:43: redundant field names in struct initialization\n+regex-1.4.2/src/compile.rs:930:41: redundant field names in struct initialization\n+regex-1.4.2/src/compile.rs:930:53: redundant field names in struct initialization\n+regex-1.4.2/src/compile.rs:930:67: redundant field names in struct initialization\n+regex-1.4.2/src/compile.rs:991:5: this function's return value is unnecessarily wrapped by `Result`\n+regex-1.4.2/src/dfa.rs:1380:14: the operation is ineffective. Consider reducing it to `(empty_flags.start as u8)`\n+regex-1.4.2/src/dfa.rs:1614:13: redundant field names in struct initialization\n+regex-1.4.2/src/dfa.rs:1651:38: redundant field names in struct initialization\n+regex-1.4.2/src/dfa.rs:1701:18: digits of hex or binary literal not grouped by four\n+regex-1.4.2/src/dfa.rs:1705:19: digits of hex or binary literal not grouped by four\n+regex-1.4.2/src/dfa.rs:1709:18: digits of hex or binary literal not grouped by four\n+regex-1.4.2/src/dfa.rs:1713:19: digits of hex or binary literal not grouped by four\n+regex-1.4.2/src/dfa.rs:1717:18: digits of hex or binary literal not grouped by four\n+regex-1.4.2/src/dfa.rs:1721:19: digits of hex or binary literal not grouped by four\n+regex-1.4.2/src/dfa.rs:1741:9: match expression looks like `matches!` macro\n+regex-1.4.2/src/dfa.rs:457:13: redundant field names in struct initialization\n+regex-1.4.2/src/dfa.rs:459:13: redundant field names in struct initialization\n+regex-1.4.2/src/dfa.rs:460:13: redundant field names in struct initialization\n+regex-1.4.2/src/dfa.rs:487:13: redundant field names in struct initialization\n+regex-1.4.2/src/dfa.rs:489:13: redundant field names in struct initialization\n+regex-1.4.2/src/dfa.rs:490:13: redundant field names in struct initialization\n+regex-1.4.2/src/dfa.rs:518:13: redundant field names in struct initialization\n+regex-1.4.2/src/dfa.rs:520:13: redundant field names in struct initialization\n+regex-1.4.2/src/error.rs:6:1: this seems like a manual implementation of the non-exhaustive pattern\n+regex-1.4.2/src/exec.rs:1028:5: this function has too many arguments (9/7)\n+regex-1.4.2/src/exec.rs:137:9: field assignment outside of initializer for an instance created with Default::default()\n+regex-1.4.2/src/exec.rs:245:62: this `if` has identical blocks\n+regex-1.4.2/src/exec.rs:262:60: this `if` has identical blocks\n+regex-1.4.2/src/exec.rs:278:13: redundant field names in struct initialization\n+regex-1.4.2/src/exec.rs:281:13: redundant field names in struct initialization\n+regex-1.4.2/src/exec.rs:300:30: redundant field names in struct initialization\n+regex-1.4.2/src/exec.rs:329:13: redundant field names in struct initialization\n+regex-1.4.2/src/exec.rs:330:13: redundant field names in struct initialization\n+regex-1.4.2/src/exec.rs:331:13: redundant field names in struct initialization\n+regex-1.4.2/src/exec.rs:334:13: redundant field names in struct initialization\n+regex-1.4.2/src/exec.rs:340:19: redundant field names in struct initialization\n+regex-1.4.2/src/expand.rs:130:22: this call to `as_ref` does nothing\n+regex-1.4.2/src/expand.rs:186:5: match expression looks like `matches!` macro\n+regex-1.4.2/src/expand.rs:22:13: calling `push_str()` using a single-character string literal\n+regex-1.4.2/src/expand.rs:30:17: calling `push_str()` using a single-character string literal\n+regex-1.4.2/src/input.rs:165:31: redundant field names in struct initialization\n+regex-1.4.2/src/input.rs:236:21: redundant field names in struct initialization\n+regex-1.4.2/src/input.rs:236:33: redundant field names in struct initialization\n+regex-1.4.2/src/literal/imp.rs:435:13: redundant field names in struct initialization\n+regex-1.4.2/src/literal/imp.rs:436:13: redundant field names in struct initialization\n+regex-1.4.2/src/literal/imp.rs:437:13: redundant field names in struct initialization\n+regex-1.4.2/src/literal/imp.rs:438:13: redundant field names in struct initialization\n+regex-1.4.2/src/literal/imp.rs:439:13: redundant field names in struct initialization\n+regex-1.4.2/src/literal/imp.rs:440:13: redundant field names in struct initialization\n+regex-1.4.2/src/literal/imp.rs:579:13: redundant field names in struct initialization\n+regex-1.4.2/src/literal/imp.rs:580:13: redundant field names in struct initialization\n+regex-1.4.2/src/literal/imp.rs:583:13: redundant field names in struct initialization\n+regex-1.4.2/src/literal/imp.rs:648:9: unneeded `return` statement\n+regex-1.4.2/src/literal/imp.rs:65:13: redundant field names in struct initialization\n+regex-1.4.2/src/literal/imp.rs:68:13: redundant field names in struct initialization\n+regex-1.4.2/src/literal/imp.rs:786:42: manual saturating arithmetic\n+regex-1.4.2/src/pikevm.rs:103:15: redundant field names in struct initialization\n+regex-1.4.2/src/pikevm.rs:103:52: redundant field names in struct initialization\n+regex-1.4.2/src/pikevm.rs:114:5: this function has too many arguments (8/7)\n+regex-1.4.2/src/pikevm.rs:224:5: this function has too many arguments (8/7)\n+regex-1.4.2/src/pikevm.rs:88:5: this function has too many arguments (8/7)\n+regex-1.4.2/src/prog.rs:120:9: match expression looks like `matches!` macro\n+regex-1.4.2/src/prog.rs:236:13: using `write!()` with a format string that ends in a single newline\n+regex-1.4.2/src/prog.rs:301:9: match expression looks like `matches!` macro\n+regex-1.4.2/src/prog.rs:80:5: you should consider adding a `Default` implementation for `prog::Program`\n+regex-1.4.2/src/re_bytes.rs:1100:5: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+regex-1.4.2/src/re_bytes.rs:1125:5: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+regex-1.4.2/src/re_bytes.rs:1140:5: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+regex-1.4.2/src/re_bytes.rs:257:13: redundant field names in struct initialization\n+regex-1.4.2/src/re_bytes.rs:55:33: redundant field names in struct initialization\n+regex-1.4.2/src/re_bytes.rs:55:47: redundant field names in struct initialization\n+regex-1.4.2/src/re_bytes.rs:721:13: redundant field names in struct initialization\n+regex-1.4.2/src/re_bytes.rs:844:1: item `re_bytes::CaptureLocations` has a public `len` method but no corresponding `is_empty` method\n+regex-1.4.2/src/re_bytes.rs:892:1: item `re_bytes::Captures<'t>` has a public `len` method but no corresponding `is_empty` method\n+regex-1.4.2/src/re_set.rs:192:13: redundant field names in struct initialization\n+regex-1.4.2/src/re_set.rs:192:13: redundant field names in struct initialization\n+regex-1.4.2/src/re_trait.rs:137:29: redundant field names in struct initialization\n+regex-1.4.2/src/re_unicode.rs:1095:13: redundant field names in struct initialization\n+regex-1.4.2/src/re_unicode.rs:1142:5: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+regex-1.4.2/src/re_unicode.rs:1167:5: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+regex-1.4.2/src/re_unicode.rs:314:13: redundant field names in struct initialization\n+regex-1.4.2/src/re_unicode.rs:64:33: redundant field names in struct initialization\n+regex-1.4.2/src/re_unicode.rs:64:47: redundant field names in struct initialization\n+regex-1.4.2/src/re_unicode.rs:861:1: item `re_unicode::CaptureLocations` has a public `len` method but no corresponding `is_empty` method\n+regex-1.4.2/src/re_unicode.rs:909:1: item `re_unicode::Captures<'t>` has a public `len` method but no corresponding `is_empty` method\n+regex-1.4.2/src/utf8.rs:100:16: digits of hex or binary literal not grouped by four\n+regex-1.4.2/src/utf8.rs:103:16: digits of hex or binary literal not grouped by four\n+regex-1.4.2/src/utf8.rs:143:24: digits of hex or binary literal not grouped by four\n+regex-1.4.2/src/utf8.rs:143:9: digits of hex or binary literal not grouped by four\n+regex-1.4.2/src/utf8.rs:30:20: digits of hex or binary literal not grouped by four\n+regex-1.4.2/src/utf8.rs:58:23: digits of hex or binary literal not grouped by four\n+regex-1.4.2/src/utf8.rs:58:9: digits of hex or binary literal not grouped by four\n+regex-1.4.2/src/utf8.rs:63:16: digits of hex or binary literal not grouped by four\n+regex-1.4.2/src/utf8.rs:77:16: digits of hex or binary literal not grouped by four\n+regex-1.4.2/src/utf8.rs:80:16: digits of hex or binary literal not grouped by four\n+regex-1.4.2/src/utf8.rs:92:23: digits of hex or binary literal not grouped by four\n+regex-1.4.2/src/utf8.rs:92:9: digits of hex or binary literal not grouped by four\n+regex-1.4.2/src/utf8.rs:97:16: digits of hex or binary literal not grouped by four\n+cargo-0.49.0/src/bin/cargo/cli.rs:121:5: calling `push_str()` using a single-character string literal\n+cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:353:56: stripping a prefix manually\n+cargo-0.49.0/src/cargo/core/compiler/custom_build.rs:762:5: this function's return value is unnecessarily wrapped by `Result`\n+cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1664:5: field assignment outside of initializer for an instance created with Default::default()\n+cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1795:5: field assignment outside of initializer for an instance created with Default::default()\n+cargo-0.49.0/src/cargo/core/compiler/fingerprint.rs:1980:24: stripping a prefix manually\n+cargo-0.49.0/src/cargo/core/compiler/mod.rs:1131:1: this function's return value is unnecessarily wrapped by `Result`\n+cargo-0.49.0/src/cargo/core/compiler/mod.rs:364:5: this function's return value is unnecessarily wrapped by `Result`\n+cargo-0.49.0/src/cargo/core/compiler/mod.rs:693:1: this function's return value is unnecessarily wrapped by `Result`\n+cargo-0.49.0/src/cargo/core/package.rs:421:5: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+cargo-0.49.0/src/cargo/core/profiles.rs:143:5: this function's return value is unnecessarily wrapped by `Result`\n+cargo-0.49.0/src/cargo/core/profiles.rs:372:9: field assignment outside of initializer for an instance created with Default::default()\n+cargo-0.49.0/src/cargo/core/resolver/errors.rs:305:17: calling `push_str()` using a single-character string literal\n+cargo-0.49.0/src/cargo/core/resolver/resolve.rs:239:5: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+cargo-0.49.0/src/cargo/core/resolver/types.rs:187:5: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+cargo-0.49.0/src/cargo/core/resolver/types.rs:261:5: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+cargo-0.49.0/src/cargo/core/workspace.rs:1056:5: this function's return value is unnecessarily wrapped by `Result`\n+cargo-0.49.0/src/cargo/core/workspace.rs:440:9: this function's return value is unnecessarily wrapped by `Result`\n+cargo-0.49.0/src/cargo/ops/cargo_compile.rs:127:35: usage of `FromIterator::from_iter`\n+cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:233:21: calling `push_str()` using a single-character string literal\n+cargo-0.49.0/src/cargo/ops/common_for_install_and_uninstall.rs:370:5: this function's return value is unnecessarily wrapped by `Result`\n+cargo-0.49.0/src/cargo/ops/fix.rs:608:9: field assignment outside of initializer for an instance created with Default::default()\n+cargo-0.49.0/src/cargo/ops/fix.rs:619:48: stripping a prefix manually\n+cargo-0.49.0/src/cargo/ops/lockfile.rs:154:13: calling `push_str()` using a single-character string literal\n+cargo-0.49.0/src/cargo/ops/lockfile.rs:217:9: calling `push_str()` using a single-character string literal\n+cargo-0.49.0/src/cargo/ops/lockfile.rs:87:1: this function's return value is unnecessarily wrapped by `Result`\n+cargo-0.49.0/src/cargo/sources/git/source.rs:69:20: comparison to empty slice\n+cargo-0.49.0/src/cargo/sources/git/utils.rs:1158:9: stripping a suffix manually\n+cargo-0.49.0/src/cargo/sources/git/utils.rs:758:9: calling `push_str()` using a single-character string literal\n+cargo-0.49.0/src/cargo/sources/path.rs:339:9: this function's return value is unnecessarily wrapped by `Result`\n+cargo-0.49.0/src/cargo/sources/registry/index.rs:736:1: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+cargo-0.49.0/src/cargo/util/config/key.rs:69:9: calling `push_str()` using a single-character string literal\n+cargo-0.49.0/src/cargo/util/config/value.rs:81:9: match expression looks like `matches!` macro\n+cargo-0.49.0/src/cargo/util/errors.rs:473:5: manual `RangeInclusive::contains` implementation\n+cargo-0.49.0/src/cargo/util/paths.rs:93:31: comparison to empty slice\n+cargo-0.49.0/src/cargo/util/progress.rs:269:17: calling `push_str()` using a single-character string literal\n+cargo-0.49.0/src/cargo/util/progress.rs:272:17: calling `push_str()` using a single-character string literal\n+cargo-0.49.0/src/cargo/util/progress.rs:274:17: calling `push_str()` using a single-character string literal\n+cargo-0.49.0/src/cargo/util/progress.rs:280:13: calling `push_str()` using a single-character string literal\n+cargo-0.49.0/src/cargo/util/progress.rs:282:9: calling `push_str()` using a single-character string literal\n+cargo-0.49.0/src/cargo/util/toml/mod.rs:1687:33: unnecessary closure used to substitute value for `Option::None`"}]}