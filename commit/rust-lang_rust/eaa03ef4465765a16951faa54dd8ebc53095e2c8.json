{"sha": "eaa03ef4465765a16951faa54dd8ebc53095e2c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYTAzZWY0NDY1NzY1YTE2OTUxZmFhNTRkZDhlYmM1MzA5NWUyYzg=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-03T20:28:10Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-04T11:16:38Z"}, "message": "Some more TyBuilder use", "tree": {"sha": "1a528fdbd7d97cc7c507dac60e4cbb4fa5be669d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a528fdbd7d97cc7c507dac60e4cbb4fa5be669d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaa03ef4465765a16951faa54dd8ebc53095e2c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaa03ef4465765a16951faa54dd8ebc53095e2c8", "html_url": "https://github.com/rust-lang/rust/commit/eaa03ef4465765a16951faa54dd8ebc53095e2c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaa03ef4465765a16951faa54dd8ebc53095e2c8/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d2b488aeb17410aec3b89eac69038c51f332448", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d2b488aeb17410aec3b89eac69038c51f332448", "html_url": "https://github.com/rust-lang/rust/commit/5d2b488aeb17410aec3b89eac69038c51f332448"}], "stats": {"total": 58, "additions": 25, "deletions": 33}, "files": [{"sha": "9f5624eb0f10156a3f6088e408ab541e9eff0d25", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 25, "deletions": 29, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/eaa03ef4465765a16951faa54dd8ebc53095e2c8/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaa03ef4465765a16951faa54dd8ebc53095e2c8/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=eaa03ef4465765a16951faa54dd8ebc53095e2c8", "patch": "@@ -19,11 +19,11 @@ use crate::{\n     lower::lower_to_chalk_mutability,\n     method_resolution, op,\n     primitive::{self, UintTy},\n-    to_assoc_type_id, to_chalk_trait_id,\n+    to_chalk_trait_id,\n     traits::{chalk::from_chalk, FnTrait, InEnvironment},\n     utils::{generics, variant_data, Generics},\n-    AdtId, Binders, CallableDefId, DomainGoal, FnPointer, FnSig, Interner, Rawness, Scalar,\n-    Substitution, TraitRef, Ty, TyBuilder, TyKind,\n+    AdtId, Binders, CallableDefId, FnPointer, FnSig, Interner, Rawness, Scalar, Substitution,\n+    TraitRef, Ty, TyBuilder, TyKind,\n };\n \n use super::{\n@@ -73,38 +73,34 @@ impl<'a> InferenceContext<'a> {\n         let fn_once_trait = FnTrait::FnOnce.get_id(self.db, krate)?;\n         let output_assoc_type =\n             self.db.trait_data(fn_once_trait).associated_type_by_name(&name![Output])?;\n-        let generic_params = generics(self.db.upcast(), fn_once_trait.into());\n-        if generic_params.len() != 2 {\n-            return None;\n-        }\n \n-        let mut param_builder = Substitution::builder(num_args);\n         let mut arg_tys = vec![];\n-        for _ in 0..num_args {\n-            let arg = self.table.new_type_var();\n-            param_builder = param_builder.push(arg.clone());\n-            arg_tys.push(arg);\n-        }\n-        let parameters = param_builder.build();\n+        let parameters = Substitution::builder(num_args)\n+            .fill(repeat_with(|| {\n+                let arg = self.table.new_type_var();\n+                arg_tys.push(arg.clone());\n+                arg\n+            }))\n+            .build();\n         let arg_ty = TyKind::Tuple(num_args, parameters).intern(&Interner);\n-        let substs =\n-            Substitution::build_for_generics(&generic_params).push(ty.clone()).push(arg_ty).build();\n+\n+        let projection = {\n+            let b = TyBuilder::assoc_type_projection(self.db, output_assoc_type);\n+            if b.remaining() != 2 {\n+                return None;\n+            }\n+            b.push(ty.clone()).push(arg_ty).build()\n+        };\n \n         let trait_env = self.trait_env.env.clone();\n-        let implements_fn_trait: DomainGoal =\n-            TraitRef { trait_id: to_chalk_trait_id(fn_once_trait), substitution: substs.clone() }\n-                .cast(&Interner);\n-        let goal = self.canonicalizer().canonicalize_obligation(InEnvironment {\n-            goal: implements_fn_trait.clone(),\n+        let obligation = InEnvironment {\n+            goal: projection.trait_ref(self.db).cast(&Interner),\n             environment: trait_env,\n-        });\n-        if self.db.trait_solve(krate, goal.value).is_some() {\n-            self.push_obligation(implements_fn_trait);\n-            let output_proj_ty = crate::ProjectionTy {\n-                associated_ty_id: to_assoc_type_id(output_assoc_type),\n-                substitution: substs,\n-            };\n-            let return_ty = self.normalize_projection_ty(output_proj_ty);\n+        };\n+        let canonical = self.canonicalizer().canonicalize_obligation(obligation.clone());\n+        if self.db.trait_solve(krate, canonical.value).is_some() {\n+            self.push_obligation(obligation.goal);\n+            let return_ty = self.normalize_projection_ty(projection);\n             Some((arg_tys, return_ty))\n         } else {\n             None"}, {"sha": "b37566958a9270d2ce4e9100bfc8ccc9931f0acd", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaa03ef4465765a16951faa54dd8ebc53095e2c8/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaa03ef4465765a16951faa54dd8ebc53095e2c8/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=eaa03ef4465765a16951faa54dd8ebc53095e2c8", "patch": "@@ -493,10 +493,6 @@ impl Substitution {\n         )\n     }\n \n-    pub(crate) fn build_for_generics(generic_params: &Generics) -> SubstsBuilder {\n-        Substitution::builder(generic_params.len())\n-    }\n-\n     fn builder(param_count: usize) -> SubstsBuilder {\n         SubstsBuilder { vec: Vec::with_capacity(param_count), param_count }\n     }"}]}