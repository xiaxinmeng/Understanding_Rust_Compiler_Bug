{"sha": "7b1a0a94348bd429b863ac16dfa0cc9c79e73c90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMWEwYTk0MzQ4YmQ0MjliODYzYWMxNmRmYTBjYzljNzllNzNjOTA=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-24T19:53:15Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-24T19:53:15Z"}, "message": "Macro check `len_zero`", "tree": {"sha": "c1174b31974dee7d79ab67dc019b32312e79e33f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1174b31974dee7d79ab67dc019b32312e79e33f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b1a0a94348bd429b863ac16dfa0cc9c79e73c90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b1a0a94348bd429b863ac16dfa0cc9c79e73c90", "html_url": "https://github.com/rust-lang/rust/commit/7b1a0a94348bd429b863ac16dfa0cc9c79e73c90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b1a0a94348bd429b863ac16dfa0cc9c79e73c90/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1b2fe31b70e2b7293b3aea7cfb8b1ed084b9334", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1b2fe31b70e2b7293b3aea7cfb8b1ed084b9334", "html_url": "https://github.com/rust-lang/rust/commit/c1b2fe31b70e2b7293b3aea7cfb8b1ed084b9334"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "f63e733d65b922f4e3eb767ba4067f75c6eaf53a", "filename": "src/len_zero.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b1a0a94348bd429b863ac16dfa0cc9c79e73c90/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b1a0a94348bd429b863ac16dfa0cc9c79e73c90/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=7b1a0a94348bd429b863ac16dfa0cc9c79e73c90", "patch": "@@ -8,7 +8,7 @@ use rustc::middle::ty::{self, MethodTraitItemId, ImplOrTraitItemId};\n \n use syntax::ast::{Lit, LitKind};\n \n-use utils::{get_item_name, snippet, span_lint, span_lint_and_then, walk_ptrs_ty};\n+use utils::{get_item_name, in_macro, snippet, span_lint, span_lint_and_then, walk_ptrs_ty};\n \n /// **What it does:** This lint checks for getting the length of something via `.len()` just to compare to zero, and suggests using `.is_empty()` where applicable.\n ///\n@@ -51,6 +51,10 @@ impl LintPass for LenZero {\n \n impl LateLintPass for LenZero {\n     fn check_item(&mut self, cx: &LateContext, item: &Item) {\n+        if in_macro(cx, item.span) {\n+            return;\n+        }\n+\n         match item.node {\n             ItemTrait(_, _, _, ref trait_items) => check_trait_items(cx, item, trait_items),\n             ItemImpl(_, _, _, None, _, ref impl_items) => check_impl_items(cx, item, impl_items),\n@@ -59,6 +63,10 @@ impl LateLintPass for LenZero {\n     }\n \n     fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n+        if in_macro(cx, expr.span) {\n+            return;\n+        }\n+\n         if let ExprBinary(Spanned{node: cmp, ..}, ref left, ref right) = expr.node {\n             match cmp {\n                 BiEq => check_cmp(cx, expr.span, left, right, \"\"),"}]}