{"sha": "f0580ae91abc4e76c9d8d202460a49da874b9ac3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNTgwYWU5MWFiYzRlNzZjOWQ4ZDIwMjQ2MGE0OWRhODc0YjlhYzM=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-09-15T09:11:24Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-09-15T09:21:06Z"}, "message": "Use Cow to avoid unnecessary allocation", "tree": {"sha": "517928303f9d8b7f961a8f8cd01a4c0dac3d580d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/517928303f9d8b7f961a8f8cd01a4c0dac3d580d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0580ae91abc4e76c9d8d202460a49da874b9ac3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0580ae91abc4e76c9d8d202460a49da874b9ac3", "html_url": "https://github.com/rust-lang/rust/commit/f0580ae91abc4e76c9d8d202460a49da874b9ac3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0580ae91abc4e76c9d8d202460a49da874b9ac3/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b3b89d51f7626895a83a48b4cf5776d0da8917c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b3b89d51f7626895a83a48b4cf5776d0da8917c", "html_url": "https://github.com/rust-lang/rust/commit/0b3b89d51f7626895a83a48b4cf5776d0da8917c"}], "stats": {"total": 81, "additions": 51, "deletions": 30}, "files": [{"sha": "e365ef97ec5774e77731c4e0e1b94b8f1e3afadf", "filename": "src/expr.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f0580ae91abc4e76c9d8d202460a49da874b9ac3/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0580ae91abc4e76c9d8d202460a49da874b9ac3/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=f0580ae91abc4e76c9d8d202460a49da874b9ac3", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::cmp::{min, Ordering};\n+use std::borrow::Cow;\n use std::fmt::Write;\n use std::iter::{repeat, ExactSizeIterator};\n \n@@ -1364,10 +1365,10 @@ impl<'a> Rewrite for ControlFlow<'a> {\n     }\n }\n \n-fn rewrite_label(label: Option<ast::SpannedIdent>) -> String {\n+fn rewrite_label(label: Option<ast::SpannedIdent>) -> Cow<'static, str> {\n     match label {\n-        Some(ident) => format!(\"{}: \", ident.node),\n-        None => \"\".to_owned(),\n+        Some(ident) => Cow::from(format!(\"{}: \", ident.node)),\n+        None => Cow::from(\"\"),\n     }\n }\n \n@@ -1926,7 +1927,11 @@ fn rewrite_string_lit(context: &RewriteContext, span: Span, shape: Shape) -> Opt\n                 string_lit\n                     .lines()\n                     .map(|line| {\n-                        new_indent.to_string(context.config) + line.trim_left()\n+                        format!(\n+                            \"{}{}\",\n+                            new_indent.to_string(context.config),\n+                            line.trim_left()\n+                        )\n                     })\n                     .collect::<Vec<_>>()\n                     .join(\"\\n\")"}, {"sha": "68ad35434d8d338291bc154132d281f881784f27", "filename": "src/lib.rs", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f0580ae91abc4e76c9d8d202460a49da874b9ac3/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0580ae91abc4e76c9d8d202460a49da874b9ac3/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=f0580ae91abc4e76c9d8d202460a49da874b9ac3", "patch": "@@ -24,6 +24,7 @@ extern crate syntax;\n extern crate term;\n extern crate unicode_segmentation;\n \n+use std::borrow::Cow;\n use std::collections::HashMap;\n use std::fmt;\n use std::io::{self, stdout, Write};\n@@ -247,6 +248,10 @@ pub struct Indent {\n     pub alignment: usize,\n }\n \n+// INDENT_BUFFER.len() == 60\n+const INDENT_BUFFER: &str = \"                                                            \";\n+const INDENT_BUFFER_LEN: usize = 60;\n+\n impl Indent {\n     pub fn new(block_indent: usize, alignment: usize) -> Indent {\n         Indent {\n@@ -294,21 +299,25 @@ impl Indent {\n         self.block_indent + self.alignment\n     }\n \n-    pub fn to_string(&self, config: &Config) -> String {\n+    pub fn to_string(&self, config: &Config) -> Cow<'static, str> {\n         let (num_tabs, num_spaces) = if config.hard_tabs() {\n             (self.block_indent / config.tab_spaces(), self.alignment)\n         } else {\n             (0, self.width())\n         };\n         let num_chars = num_tabs + num_spaces;\n-        let mut indent = String::with_capacity(num_chars);\n-        for _ in 0..num_tabs {\n-            indent.push('\\t')\n-        }\n-        for _ in 0..num_spaces {\n-            indent.push(' ')\n+        if num_tabs == 0 && num_chars <= INDENT_BUFFER_LEN {\n+            Cow::from(&INDENT_BUFFER[..num_chars])\n+        } else {\n+            let mut indent = String::with_capacity(num_chars);\n+            for _ in 0..num_tabs {\n+                indent.push('\\t')\n+            }\n+            for _ in 0..num_spaces {\n+                indent.push(' ')\n+            }\n+            Cow::from(indent)\n         }\n-        indent\n     }\n }\n \n@@ -524,13 +533,13 @@ impl FormattingError {\n         }\n     }\n \n-    fn msg_suffix(&self) -> String {\n+    fn msg_suffix(&self) -> &str {\n         match self.kind {\n-            ErrorKind::LineOverflow(..) if self.is_comment => String::from(\n+            ErrorKind::LineOverflow(..) if self.is_comment => {\n                 \"use `error_on_line_overflow_comments = false` to suppress \\\n-                 the warning against line comments\\n\",\n-            ),\n-            _ => String::from(\"\"),\n+                 the warning against line comments\\n\"\n+            }\n+            _ => \"\",\n         }\n     }\n "}, {"sha": "c6b67e8e83b5f7c49c472fe5b645b4e861a035c2", "filename": "src/lists.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0580ae91abc4e76c9d8d202460a49da874b9ac3/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0580ae91abc4e76c9d8d202460a49da874b9ac3/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=f0580ae91abc4e76c9d8d202460a49da874b9ac3", "patch": "@@ -289,7 +289,7 @@ where\n             inner_item.as_ref()\n         };\n         let mut item_last_line_width = item_last_line.len() + item_sep_len;\n-        if item_last_line.starts_with(indent_str) {\n+        if item_last_line.starts_with(&**indent_str) {\n             item_last_line_width -= indent_str.len();\n         }\n "}, {"sha": "317b020911e77ad614c8f0c4cfc2c2c6ba756039", "filename": "src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0580ae91abc4e76c9d8d202460a49da874b9ac3/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0580ae91abc4e76c9d8d202460a49da874b9ac3/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=f0580ae91abc4e76c9d8d202460a49da874b9ac3", "patch": "@@ -383,7 +383,7 @@ fn indent_macro_snippet(\n                                 .checked_sub(min_prefix_space_width)\n                                 .unwrap_or(0);\n                         let new_indent = Indent::from_width(context.config, new_indent_width);\n-                        new_indent.to_string(context.config) + line.trim()\n+                        format!(\"{}{}\", new_indent.to_string(context.config), line.trim())\n                     }\n                     None => String::new(),\n                 })"}, {"sha": "058e7eb210a065e56c5470e9ee72b8463a7c1cae", "filename": "src/missed_spans.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f0580ae91abc4e76c9d8d202460a49da874b9ac3/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0580ae91abc4e76c9d8d202460a49da874b9ac3/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=f0580ae91abc4e76c9d8d202460a49da874b9ac3", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::borrow::Cow;\n+\n use {Indent, Shape};\n use comment::{rewrite_comment, CodeCharKind, CommentCodeSlices};\n use config::WriteMode;\n@@ -118,18 +120,23 @@ impl<'a> FmtVisitor<'a> {\n         let file_name = &char_pos.file.name;\n         let mut cur_line = char_pos.line;\n \n-        fn replace_chars(string: &str) -> String {\n-            string\n-                .chars()\n-                .map(|ch| if ch.is_whitespace() { ch } else { 'X' })\n-                .collect()\n+        fn replace_chars<'a>(string: &'a str) -> Cow<'a, str> {\n+            if string.contains(char::is_whitespace) {\n+                Cow::from(\n+                    string\n+                        .chars()\n+                        .map(|ch| if ch.is_whitespace() { ch } else { 'X' })\n+                        .collect::<String>(),\n+                )\n+            } else {\n+                Cow::from(string)\n+            }\n         }\n \n-        let replaced = match self.config.write_mode() {\n+        let snippet = &*match self.config.write_mode() {\n             WriteMode::Coverage => replace_chars(old_snippet),\n-            _ => old_snippet.to_owned(),\n+            _ => Cow::from(old_snippet),\n         };\n-        let snippet = &*replaced;\n \n         for (kind, offset, subslice) in CommentCodeSlices::new(snippet) {\n             debug!(\"{:?}: {:?}\", kind, subslice);"}, {"sha": "b6f37cce694749912e3a0779dae2d5a6ff5c6e70", "filename": "src/utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0580ae91abc4e76c9d8d202460a49da874b9ac3/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0580ae91abc4e76c9d8d202460a49da874b9ac3/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=f0580ae91abc4e76c9d8d202460a49da874b9ac3", "patch": "@@ -89,11 +89,11 @@ pub fn format_mutability(mutability: ast::Mutability) -> &'static str {\n }\n \n #[inline]\n-pub fn format_abi(abi: abi::Abi, explicit_abi: bool) -> String {\n+pub fn format_abi(abi: abi::Abi, explicit_abi: bool) -> Cow<'static, str> {\n     if abi == abi::Abi::C && !explicit_abi {\n-        \"extern \".into()\n+        Cow::from(\"extern \")\n     } else {\n-        format!(\"extern {} \", abi)\n+        Cow::from(format!(\"extern {} \", abi))\n     }\n }\n "}]}