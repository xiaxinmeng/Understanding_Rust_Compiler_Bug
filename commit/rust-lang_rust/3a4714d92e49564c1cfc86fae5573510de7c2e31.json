{"sha": "3a4714d92e49564c1cfc86fae5573510de7c2e31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNDcxNGQ5MmU0OTU2NGMxY2ZjODZmYWU1NTczNTEwZGU3YzJlMzE=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-02-24T20:42:39Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-03-07T04:41:57Z"}, "message": "Renovate field projection expressions", "tree": {"sha": "773fafea67702b7dca4c8c3fc786b2af160506c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/773fafea67702b7dca4c8c3fc786b2af160506c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a4714d92e49564c1cfc86fae5573510de7c2e31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a4714d92e49564c1cfc86fae5573510de7c2e31", "html_url": "https://github.com/rust-lang/rust/commit/3a4714d92e49564c1cfc86fae5573510de7c2e31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a4714d92e49564c1cfc86fae5573510de7c2e31/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40313fb6b0104f703c06b2dd46198ad1f15d267b", "url": "https://api.github.com/repos/rust-lang/rust/commits/40313fb6b0104f703c06b2dd46198ad1f15d267b", "html_url": "https://github.com/rust-lang/rust/commit/40313fb6b0104f703c06b2dd46198ad1f15d267b"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "6f27a190b170e952ea1a2a72c124a24ad7d5319b", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3a4714d92e49564c1cfc86fae5573510de7c2e31/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a4714d92e49564c1cfc86fae5573510de7c2e31/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=3a4714d92e49564c1cfc86fae5573510de7c2e31", "patch": "@@ -511,14 +511,13 @@ pub impl Datum {\n         }\n     }\n \n-    fn GEPi(&self, bcx: block,\n-            ixs: &[uint],\n-            ty: ty::t,\n-            source: DatumCleanup)\n-         -> Datum {\n+    fn get_element(&self, bcx: block,\n+                   ty: ty::t,\n+                   source: DatumCleanup,\n+                   gep: fn(ValueRef) -> ValueRef) -> Datum {\n         let base_val = self.to_ref_llval(bcx);\n         Datum {\n-            val: GEPi(bcx, base_val, ixs),\n+            val: gep(base_val),\n             mode: ByRef,\n             ty: ty,\n             source: source"}, {"sha": "cd6d1e42b8c54ca6f34a9b3416597de0ce94bf6e", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3a4714d92e49564c1cfc86fae5573510de7c2e31/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a4714d92e49564c1cfc86fae5573510de7c2e31/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=3a4714d92e49564c1cfc86fae5573510de7c2e31", "patch": "@@ -884,13 +884,15 @@ fn trans_lvalue_unadjusted(bcx: block, expr: @ast::expr) -> DatumBlock {\n         let _icx = bcx.insn_ctxt(\"trans_rec_field\");\n \n         let base_datum = unpack_datum!(bcx, trans_to_datum(bcx, base));\n-        do with_field_tys(bcx.tcx(), base_datum.ty, None) |_disr, field_tys| {\n+        let repr = adt::represent_type(bcx.ccx(), base_datum.ty);\n+        do with_field_tys(bcx.tcx(), base_datum.ty, None) |discr, field_tys| {\n             let ix = ty::field_idx_strict(bcx.tcx(), field, field_tys);\n             DatumBlock {\n-                datum: base_datum.GEPi(bcx,\n-                                       [0u, 0u, ix],\n-                                       field_tys[ix].mt.ty,\n-                                       ZeroMem),\n+                datum: do base_datum.get_element(bcx,\n+                                                 field_tys[ix].mt.ty,\n+                                                 ZeroMem) |srcval| {\n+                    adt::trans_GEP(bcx, &repr, srcval, discr, ix)\n+                },\n                 bcx: bcx\n             }\n         }\n@@ -1227,11 +1229,13 @@ fn trans_adt(bcx: block, repr: &adt::Repr, discr: int,\n         temp_cleanups.push(dest);\n     }\n     for optbase.each |base| {\n+        // XXX is it sound to use the destination's repr on the base?\n+        // XXX would it ever be reasonable to be here with discr != 0?\n         let base_datum = unpack_datum!(bcx, trans_to_datum(bcx, base.expr));\n         for base.fields.each |&(i, t)| {\n-            let datum =\n-                // XXX convert this to adt\n-                base_datum.GEPi(bcx, struct_field(i), t, ZeroMem);\n+            let datum = do base_datum.get_element(bcx, t, ZeroMem) |srcval| {\n+                adt::trans_GEP(bcx, repr, srcval, discr, i)\n+            };\n             let dest = adt::trans_GEP(bcx, repr, addr, discr, i);\n             bcx = datum.store_to(bcx, base.expr.id, INIT, dest);\n         }"}]}