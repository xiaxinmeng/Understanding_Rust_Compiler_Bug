{"sha": "3f4ad44082abe7256825f6fc692c1455a1eb28bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNGFkNDQwODJhYmU3MjU2ODI1ZjZmYzY5MmMxNDU1YTFlYjI4YmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-14T19:55:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-15T08:46:47Z"}, "message": "internal: document that we don't #[ignore] tests", "tree": {"sha": "2cd099af0420486014a40d730ac492a6686418b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cd099af0420486014a40d730ac492a6686418b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f4ad44082abe7256825f6fc692c1455a1eb28bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f4ad44082abe7256825f6fc692c1455a1eb28bb", "html_url": "https://github.com/rust-lang/rust/commit/3f4ad44082abe7256825f6fc692c1455a1eb28bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f4ad44082abe7256825f6fc692c1455a1eb28bb/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2015e7d182f3cb2cebe686127dd6a3e683df9e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2015e7d182f3cb2cebe686127dd6a3e683df9e6", "html_url": "https://github.com/rust-lang/rust/commit/c2015e7d182f3cb2cebe686127dd6a3e683df9e6"}], "stats": {"total": 157, "additions": 86, "deletions": 71}, "files": [{"sha": "4ae02e5769efd96b1102a85354f8aeaed7055b57", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3f4ad44082abe7256825f6fc692c1455a1eb28bb/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f4ad44082abe7256825f6fc692c1455a1eb28bb/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=3f4ad44082abe7256825f6fc692c1455a1eb28bb", "patch": "@@ -1992,8 +1992,8 @@ mod tests {\n         collector.def_map\n     }\n \n-    fn do_resolve(code: &str) -> DefMap {\n-        let (db, _file_id) = TestDB::with_single_file(code);\n+    fn do_resolve(not_ra_fixture: &str) -> DefMap {\n+        let (db, _file_id) = TestDB::with_single_file(not_ra_fixture);\n         let krate = db.test_crate();\n \n         let edition = db.crate_graph()[krate].edition;\n@@ -2013,16 +2013,21 @@ mod tests {\n         );\n     }\n \n-    #[ignore] // this test does succeed, but takes quite a while :/\n+    #[ignore]\n     #[test]\n     fn test_macro_expand_will_stop_2() {\n+        // FIXME: this test does succeed, but takes quite a while: 90 seconds in\n+        // the release mode. That's why the argument is not an ra_fixture --\n+        // otherwise injection highlighting gets stuck.\n+        //\n+        // We need to find a way to fail this faster.\n         do_resolve(\n             r#\"\n-        macro_rules! foo {\n-            ($($ty:ty)*) => { foo!($($ty)* $($ty)*); }\n-        }\n-        foo!(KABOOM);\n-        \"#,\n+macro_rules! foo {\n+    ($($ty:ty)*) => { foo!($($ty)* $($ty)*); }\n+}\n+foo!(KABOOM);\n+\"#,\n         );\n     }\n }"}, {"sha": "4f859fc85223719ca5d1ec8f255738424b3d6094", "filename": "crates/hir_ty/src/tests/coercion.rs", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3f4ad44082abe7256825f6fc692c1455a1eb28bb/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f4ad44082abe7256825f6fc692c1455a1eb28bb/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=3f4ad44082abe7256825f6fc692c1455a1eb28bb", "patch": "@@ -741,10 +741,24 @@ fn coerce_unsize_trait_object_simple() {\n }\n \n #[test]\n-// The rust reference says this should be possible, but rustc doesn't implement\n-// it. We used to support it, but Chalk doesn't.\n-#[ignore]\n fn coerce_unsize_trait_object_to_trait_object() {\n+    // FIXME: The rust reference says this should be possible, but rustc doesn't\n+    // implement it. We used to support it, but Chalk doesn't. Here's the\n+    // correct expect:\n+    //\n+    //     424..609 '{     ...bj2; }': ()\n+    //     434..437 'obj': &dyn Baz<i8, i16>\n+    //     459..461 '&S': &S<i8, i16>\n+    //     460..461 'S': S<i8, i16>\n+    //     471..474 'obj': &dyn Bar<usize, i8, i16>\n+    //     496..499 'obj': &dyn Baz<i8, i16>\n+    //     509..512 'obj': &dyn Foo<i8, usize>\n+    //     531..534 'obj': &dyn Bar<usize, i8, i16>\n+    //     544..548 'obj2': &dyn Baz<i8, i16>\n+    //     570..572 '&S': &S<i8, i16>\n+    //     571..572 'S': S<i8, i16>\n+    //     582..583 '_': &dyn Foo<i8, usize>\n+    //     602..606 'obj2': &dyn Baz<i8, i16>\n     check_infer_with_mismatches(\n         r#\"\n         #[lang = \"sized\"]\n@@ -773,21 +787,24 @@ fn coerce_unsize_trait_object_to_trait_object() {\n             let _: &dyn Foo<_, _> = obj2;\n         }\n         \"#,\n-        expect![[r\"\n+        expect![[r#\"\n             424..609 '{     ...bj2; }': ()\n             434..437 'obj': &dyn Baz<i8, i16>\n             459..461 '&S': &S<i8, i16>\n             460..461 'S': S<i8, i16>\n-            471..474 'obj': &dyn Bar<usize, i8, i16>\n+            471..474 'obj': &dyn Bar<{unknown}, {unknown}, {unknown}>\n             496..499 'obj': &dyn Baz<i8, i16>\n-            509..512 'obj': &dyn Foo<i8, usize>\n-            531..534 'obj': &dyn Bar<usize, i8, i16>\n+            509..512 'obj': &dyn Foo<{unknown}, {unknown}>\n+            531..534 'obj': &dyn Bar<{unknown}, {unknown}, {unknown}>\n             544..548 'obj2': &dyn Baz<i8, i16>\n             570..572 '&S': &S<i8, i16>\n             571..572 'S': S<i8, i16>\n-            582..583 '_': &dyn Foo<i8, usize>\n+            582..583 '_': &dyn Foo<{unknown}, {unknown}>\n             602..606 'obj2': &dyn Baz<i8, i16>\n-        \"]],\n+            496..499: expected &dyn Bar<{unknown}, {unknown}, {unknown}>, got &dyn Baz<i8, i16>\n+            531..534: expected &dyn Foo<{unknown}, {unknown}>, got &dyn Bar<{unknown}, {unknown}, {unknown}>\n+            602..606: expected &dyn Foo<{unknown}, {unknown}>, got &dyn Baz<i8, i16>\n+        \"#]],\n     );\n }\n "}, {"sha": "c830e576efeb8db1d86de51a4d166240427b9913", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f4ad44082abe7256825f6fc692c1455a1eb28bb/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f4ad44082abe7256825f6fc692c1455a1eb28bb/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=3f4ad44082abe7256825f6fc692c1455a1eb28bb", "patch": "@@ -1475,7 +1475,6 @@ fn test(\n }\n \n #[test]\n-#[ignore]\n fn error_bound_chalk() {\n     check_types(\n         r#\""}, {"sha": "7ac0118fe205c2999a7ca13981f97586cae61f8e", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3f4ad44082abe7256825f6fc692c1455a1eb28bb/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f4ad44082abe7256825f6fc692c1455a1eb28bb/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=3f4ad44082abe7256825f6fc692c1455a1eb28bb", "patch": "@@ -241,6 +241,10 @@ fn get_doc_link(db: &RootDatabase, definition: Definition) -> Option<String> {\n         Definition::ModuleDef(ModuleDef::Module(module)) => module.krate(),\n         _ => definition.module(db)?.krate(),\n     };\n+    // FIXME: using import map doesn't make sense here. What we want here is\n+    // canonical path. What import map returns is the shortest path suitable for\n+    // import. See this test:\n+    cov_mark::hit!(test_reexport_order);\n     let import_map = db.import_map(krate.into());\n \n     let mut base = krate.display_name(db)?.to_string();\n@@ -642,13 +646,15 @@ pub mod foo {\n         )\n     }\n \n-    // FIXME: ImportMap will return re-export paths instead of public module\n-    // paths. The correct path to documentation will never be a re-export.\n-    // This problem stops us from resolving stdlib items included in the prelude\n-    // such as `Option::Some` correctly.\n-    #[ignore = \"ImportMap may return re-exports\"]\n     #[test]\n     fn test_reexport_order() {\n+        cov_mark::check!(test_reexport_order);\n+        // FIXME: This should return\n+        //\n+        //    https://docs.rs/test/*/test/wrapper/modulestruct.Item.html\n+        //\n+        // That is, we should point inside the module, rather than at the\n+        // re-export.\n         check(\n             r#\"\n pub mod wrapper {\n@@ -663,7 +669,7 @@ fn foo() {\n     let bar: wrapper::It$0em;\n }\n         \"#,\n-            expect![[r#\"https://docs.rs/test/*/test/wrapper/module/struct.Item.html\"#]],\n+            expect![[r#\"https://docs.rs/test/*/test/wrapper/struct.Item.html\"#]],\n         )\n     }\n }"}, {"sha": "afeded315734e35444c38a6a09fce2329060498f", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3f4ad44082abe7256825f6fc692c1455a1eb28bb/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f4ad44082abe7256825f6fc692c1455a1eb28bb/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=3f4ad44082abe7256825f6fc692c1455a1eb28bb", "patch": "@@ -1821,9 +1821,10 @@ pub struct B$0ar\n         );\n     }\n \n-    #[ignore = \"path based links currently only support documentation on ModuleDef items\"]\n     #[test]\n     fn test_hover_path_link_field() {\n+        // FIXME: Should be\n+        //  [Foo](https://docs.rs/test/*/test/struct.Foo.html)\n         check(\n             r#\"\n pub struct Foo;\n@@ -1845,7 +1846,7 @@ pub struct Bar {\n \n                 ---\n \n-                [Foo](https://docs.rs/test/*/test/struct.Foo.html)\n+                [Foo](struct.Foo.html)\n             \"#]],\n         );\n     }"}, {"sha": "2f2b605fcbc44fad30c87d5de08792d7a01a4999", "filename": "crates/ide_assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3f4ad44082abe7256825f6fc692c1455a1eb28bb/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f4ad44082abe7256825f6fc692c1455a1eb28bb/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=3f4ad44082abe7256825f6fc692c1455a1eb28bb", "patch": "@@ -583,25 +583,25 @@ pub struct Foo { pub(crate) bar: () }\n     }\n \n     #[test]\n-    #[ignore]\n-    // FIXME handle reexports properly\n     fn fix_visibility_of_reexport() {\n+        // FIXME: broken test, this should fix visibility of the re-export\n+        // rather than the struct.\n         check_assist(\n             fix_visibility,\n-            r\"\n-            mod foo {\n-                use bar::Baz;\n-                mod bar { pub(super) struct Baz; }\n-            }\n-            foo::Baz$0\n-            \",\n-            r\"\n-            mod foo {\n-                $0pub(crate) use bar::Baz;\n-                mod bar { pub(super) struct Baz; }\n-            }\n-            foo::Baz\n-            \",\n+            r#\"\n+mod foo {\n+    use bar::Baz;\n+    mod bar { pub(super) struct Baz; }\n+}\n+foo::Baz$0\n+\"#,\n+            r#\"\n+mod foo {\n+    use bar::Baz;\n+    mod bar { $0pub(crate) struct Baz; }\n+}\n+foo::Baz\n+\"#,\n         )\n     }\n }"}, {"sha": "68f25f284251d46f8e77ba7dafa9d2ebed788618", "filename": "crates/ide_diagnostics/src/handlers/incorrect_case.rs", "status": "modified", "additions": 9, "deletions": 29, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3f4ad44082abe7256825f6fc692c1455a1eb28bb/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fincorrect_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f4ad44082abe7256825f6fc692c1455a1eb28bb/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fincorrect_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fincorrect_case.rs?ref=3f4ad44082abe7256825f6fc692c1455a1eb28bb", "patch": "@@ -341,43 +341,27 @@ mod F {\n     }\n \n     #[test]\n-    #[ignore]\n-    fn bug_trait_inside_fn() {\n-        // FIXME:\n-        // This is broken, and in fact, should not even be looked at by this\n-        // lint in the first place. There's weird stuff going on in the\n-        // collection phase.\n-        // It's currently being brought in by:\n-        // * validate_func on `a` recursing into modules\n-        // * then it finds the trait and then the function while iterating\n-        //   through modules\n-        // * then validate_func is called on Dirty\n-        // * ... which then proceeds to look at some unknown module taking no\n-        //   attrs from either the impl or the fn a, and then finally to the root\n-        //   module\n-        //\n-        // It should find the attribute on the trait, but it *doesn't even see\n-        // the trait* as far as I can tell.\n-\n+    fn complex_ignore() {\n+        // FIXME: this should trigger errors for the second case.\n         check_diagnostics(\n             r#\"\n trait T { fn a(); }\n struct U {}\n impl T for U {\n     fn a() {\n-        // this comes out of bitflags, mostly\n         #[allow(non_snake_case)]\n-        trait __BitFlags {\n+        trait __BitFlagsOk {\n             const HiImAlsoBad: u8 = 2;\n-            #[inline]\n-            fn Dirty(&self) -> bool {\n-                false\n-            }\n+            fn Dirty(&self) -> bool { false }\n         }\n \n+        trait __BitFlagsBad {\n+            const HiImAlsoBad: u8 = 2;\n+            fn Dirty(&self) -> bool { false }\n+        }\n     }\n }\n-    \"#,\n+\"#,\n         );\n     }\n \n@@ -414,18 +398,14 @@ extern {\n     }\n \n     #[test]\n-    #[ignore]\n     fn bug_traits_arent_checked() {\n         // FIXME: Traits and functions in traits aren't currently checked by\n         // r-a, even though rustc will complain about them.\n         check_diagnostics(\n             r#\"\n trait BAD_TRAIT {\n-    // ^^^^^^^^^ \ud83d\udca1 weak: Trait `BAD_TRAIT` should have CamelCase name, e.g. `BadTrait`\n     fn BAD_FUNCTION();\n-    // ^^^^^^^^^^^^ \ud83d\udca1 weak: Function `BAD_FUNCTION` should have snake_case name, e.g. `bad_function`\n     fn BadFunction();\n-    // ^^^^^^^^^^^^ \ud83d\udca1 weak: Function `BadFunction` should have snake_case name, e.g. `bad_function`\n }\n     \"#,\n         );"}, {"sha": "84485ea284503c3ba4771c5615f7f900db77ea8c", "filename": "docs/dev/style.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3f4ad44082abe7256825f6fc692c1455a1eb28bb/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/3f4ad44082abe7256825f6fc692c1455a1eb28bb/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=3f4ad44082abe7256825f6fc692c1455a1eb28bb", "patch": "@@ -174,6 +174,13 @@ Instead, explicitly check for `None`, `Err`, etc.\n `rust-analyzer` is not a library, we don't need to test for API misuse, and we have to handle any user input without panics.\n Panic messages in the logs from the `#[should_panic]` tests are confusing.\n \n+## `#[ignore]`\n+\n+Do not `#[ignore]` tests.\n+If the test currently does not work, assert the wrong behavior and add a fixme explaining why it is wrong.\n+\n+**Rationale:** noticing when the behavior is fixed, making sure that even the wrong behavior is acceptable (ie, not a panic).\n+\n ## Function Preconditions\n \n Express function preconditions in types and force the caller to provide them (rather than checking in callee):"}]}