{"sha": "4bd3f266b05900d9e66f3e1807b02c976fa4c175", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiZDNmMjY2YjA1OTAwZDllNjZmM2UxODA3YjAyYzk3NmZhNGMxNzU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-09-05T14:28:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-05T14:28:22Z"}, "message": "Rollup merge of #75994 - mental32:impl-rc-new-cyclic, r=KodrAus\n\n`impl Rc::new_cyclic`\n\nReferences #75861\n\nr? @Dylan-DPC", "tree": {"sha": "733ec4670a5a1bb3fd60d33ab6a2b4aeaae46869", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/733ec4670a5a1bb3fd60d33ab6a2b4aeaae46869"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bd3f266b05900d9e66f3e1807b02c976fa4c175", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfU6CGCRBK7hj4Ov3rIwAAdHIIAGIC2yjGjAJXB26W+UlPC9F1\nP8wHaoqpMZuhULVrAePT5Tg10wYhWkpLPVthwFh5a+B5Thp1fD4ScqTtNuHPN2EZ\nJBCujGHFqidX/uj9++miNS6kgpwNXbZHSFp0udpj/u9YJKRrdrd2rS4a7QU8ZfBT\nov8K+lJeuPsehPLmG5i+GNJ2MB/BvGkD4HniTcKJ9MLsy5buY3rj4hxn3X5hcKck\nr6nKVsafSR0wxIOTk6rXvs5CYKr8LeZ9wwNe39MD1VWJ6dEIxb/TaDUM2rD6lpob\ncENlEOKiYGX1j5q8sXOh7D69lH8vCcjoFQjAdm85WiAqQJKIwhblm1LDKy2BuVc=\n=6vAc\n-----END PGP SIGNATURE-----\n", "payload": "tree 733ec4670a5a1bb3fd60d33ab6a2b4aeaae46869\nparent c3a09fba84d74365710442a51450c8f287836e7c\nparent 0f301e8bb40aaf7cbfefb8c16ce3b0a112c6d5c1\nauthor Dylan DPC <dylan.dpc@gmail.com> 1599316102 +0200\ncommitter GitHub <noreply@github.com> 1599316102 +0200\n\nRollup merge of #75994 - mental32:impl-rc-new-cyclic, r=KodrAus\n\n`impl Rc::new_cyclic`\n\nReferences #75861\n\nr? @Dylan-DPC\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bd3f266b05900d9e66f3e1807b02c976fa4c175", "html_url": "https://github.com/rust-lang/rust/commit/4bd3f266b05900d9e66f3e1807b02c976fa4c175", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bd3f266b05900d9e66f3e1807b02c976fa4c175/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3a09fba84d74365710442a51450c8f287836e7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3a09fba84d74365710442a51450c8f287836e7c", "html_url": "https://github.com/rust-lang/rust/commit/c3a09fba84d74365710442a51450c8f287836e7c"}, {"sha": "0f301e8bb40aaf7cbfefb8c16ce3b0a112c6d5c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f301e8bb40aaf7cbfefb8c16ce3b0a112c6d5c1", "html_url": "https://github.com/rust-lang/rust/commit/0f301e8bb40aaf7cbfefb8c16ce3b0a112c6d5c1"}], "stats": {"total": 110, "additions": 110, "deletions": 0}, "files": [{"sha": "a9b293856e57bec38004457908acf0c1a2b5dff3", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4bd3f266b05900d9e66f3e1807b02c976fa4c175/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd3f266b05900d9e66f3e1807b02c976fa4c175/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=4bd3f266b05900d9e66f3e1807b02c976fa4c175", "patch": "@@ -325,6 +325,50 @@ impl<T> Rc<T> {\n         )\n     }\n \n+    /// Constructs a new `Rc<T>` using a weak reference to itself. Attempting\n+    /// to upgrade the weak reference before this function returns will result\n+    /// in a `None` value. However, the weak reference may be cloned freely and\n+    /// stored for use at a later time.\n+    #[unstable(feature = \"arc_new_cyclic\", issue = \"75861\")]\n+    pub fn new_cyclic(data_fn: impl FnOnce(&Weak<T>) -> T) -> Rc<T> {\n+        // Construct the inner in the \"uninitialized\" state with a single\n+        // weak reference.\n+        let uninit_ptr: NonNull<_> = Box::leak(box RcBox {\n+            strong: Cell::new(0),\n+            weak: Cell::new(1),\n+            value: mem::MaybeUninit::<T>::uninit(),\n+        })\n+        .into();\n+\n+        let init_ptr: NonNull<RcBox<T>> = uninit_ptr.cast();\n+\n+        let weak = Weak { ptr: init_ptr };\n+\n+        // It's important we don't give up ownership of the weak pointer, or\n+        // else the memory might be freed by the time `data_fn` returns. If\n+        // we really wanted to pass ownership, we could create an additional\n+        // weak pointer for ourselves, but this would result in additional\n+        // updates to the weak reference count which might not be necessary\n+        // otherwise.\n+        let data = data_fn(&weak);\n+\n+        unsafe {\n+            let inner = init_ptr.as_ptr();\n+            ptr::write(&raw mut (*inner).value, data);\n+\n+            let prev_value = (*inner).strong.get();\n+            debug_assert_eq!(prev_value, 0, \"No prior strong references should exist\");\n+            (*inner).strong.set(1);\n+        }\n+\n+        let strong = Rc::from_inner(init_ptr);\n+\n+        // Strong references should collectively own a shared weak reference,\n+        // so don't run the destructor for our old weak reference.\n+        mem::forget(weak);\n+        strong\n+    }\n+\n     /// Constructs a new `Rc` with uninitialized contents.\n     ///\n     /// # Examples"}, {"sha": "fed48a59f809e2b13ee4db1ea13d9da03758953a", "filename": "library/alloc/src/rc/tests.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/4bd3f266b05900d9e66f3e1807b02c976fa4c175/library%2Falloc%2Fsrc%2Frc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd3f266b05900d9e66f3e1807b02c976fa4c175/library%2Falloc%2Fsrc%2Frc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc%2Ftests.rs?ref=4bd3f266b05900d9e66f3e1807b02c976fa4c175", "patch": "@@ -434,3 +434,69 @@ fn test_array_from_slice() {\n     let a: Result<Rc<[u32; 2]>, _> = r.clone().try_into();\n     assert!(a.is_err());\n }\n+\n+#[test]\n+fn test_rc_cyclic_with_zero_refs() {\n+    struct ZeroRefs {\n+        inner: Weak<ZeroRefs>,\n+    }\n+\n+    let zero_refs = Rc::new_cyclic(|inner| {\n+        assert_eq!(inner.strong_count(), 0);\n+        assert!(inner.upgrade().is_none());\n+        ZeroRefs { inner: Weak::new() }\n+    });\n+\n+    assert_eq!(Rc::strong_count(&zero_refs), 1);\n+    assert_eq!(Rc::weak_count(&zero_refs), 0);\n+    assert_eq!(zero_refs.inner.strong_count(), 0);\n+    assert_eq!(zero_refs.inner.weak_count(), 0);\n+}\n+\n+#[test]\n+fn test_rc_cyclic_with_one_ref() {\n+    struct OneRef {\n+        inner: Weak<OneRef>,\n+    }\n+\n+    let one_ref = Rc::new_cyclic(|inner| {\n+        assert_eq!(inner.strong_count(), 0);\n+        assert!(inner.upgrade().is_none());\n+        OneRef { inner: inner.clone() }\n+    });\n+\n+    assert_eq!(Rc::strong_count(&one_ref), 1);\n+    assert_eq!(Rc::weak_count(&one_ref), 1);\n+\n+    let one_ref2 = Weak::upgrade(&one_ref.inner).unwrap();\n+    assert!(Rc::ptr_eq(&one_ref, &one_ref2));\n+\n+    assert_eq!(one_ref.inner.strong_count(), 2);\n+    assert_eq!(one_ref.inner.weak_count(), 1);\n+}\n+\n+#[test]\n+fn test_rc_cyclic_with_two_ref() {\n+    struct TwoRefs {\n+        inner: Weak<TwoRefs>,\n+        inner1: Weak<TwoRefs>,\n+    }\n+\n+    let two_refs = Rc::new_cyclic(|inner| {\n+        assert_eq!(inner.strong_count(), 0);\n+        assert!(inner.upgrade().is_none());\n+        TwoRefs { inner: inner.clone(), inner1: inner.clone() }\n+    });\n+\n+    assert_eq!(Rc::strong_count(&two_refs), 1);\n+    assert_eq!(Rc::weak_count(&two_refs), 2);\n+\n+    let two_ref3 = Weak::upgrade(&two_refs.inner).unwrap();\n+    assert!(Rc::ptr_eq(&two_refs, &two_ref3));\n+\n+    let two_ref2 = Weak::upgrade(&two_refs.inner1).unwrap();\n+    assert!(Rc::ptr_eq(&two_refs, &two_ref2));\n+\n+    assert_eq!(Rc::strong_count(&two_refs), 3);\n+    assert_eq!(Rc::weak_count(&two_refs), 2);\n+}"}]}