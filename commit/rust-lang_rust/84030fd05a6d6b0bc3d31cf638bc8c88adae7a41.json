{"sha": "84030fd05a6d6b0bc3d31cf638bc8c88adae7a41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0MDMwZmQwNWE2ZDZiMGJjM2QzMWNmNjM4YmM4Yzg4YWRhZTdhNDE=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-08-30T21:11:22Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-09-13T19:05:56Z"}, "message": "Move info into individual modules.", "tree": {"sha": "3fe13c7a4bffd03c5fcdfa0dbde53e71549cef98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fe13c7a4bffd03c5fcdfa0dbde53e71549cef98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84030fd05a6d6b0bc3d31cf638bc8c88adae7a41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84030fd05a6d6b0bc3d31cf638bc8c88adae7a41", "html_url": "https://github.com/rust-lang/rust/commit/84030fd05a6d6b0bc3d31cf638bc8c88adae7a41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84030fd05a6d6b0bc3d31cf638bc8c88adae7a41/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90304ed2669a9554a5aa5c58194e71fa373abe13", "url": "https://api.github.com/repos/rust-lang/rust/commits/90304ed2669a9554a5aa5c58194e71fa373abe13", "html_url": "https://github.com/rust-lang/rust/commit/90304ed2669a9554a5aa5c58194e71fa373abe13"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "68e2086d042a36e45789949d7c10c096bf79ab3c", "filename": "src/libcollections/priority_queue.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/84030fd05a6d6b0bc3d31cf638bc8c88adae7a41/src%2Flibcollections%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84030fd05a6d6b0bc3d31cf638bc8c88adae7a41/src%2Flibcollections%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fpriority_queue.rs?ref=84030fd05a6d6b0bc3d31cf638bc8c88adae7a41", "patch": "@@ -10,6 +10,11 @@\n \n //! A priority queue implemented with a binary heap.\n //!\n+//! Insertions have `O(log n)` time complexity and checking or popping the largest element is\n+//! `O(1)`. Converting a vector to a priority queue can be done in-place, and has `O(n)`\n+//! complexity. A priority queue can also be converted to a sorted vector in-place, allowing it to\n+//! be used for an `O(n log n)` in-place heapsort.\n+//!\n //! # Example\n //!\n //! This is a larger example which implements [Dijkstra's algorithm][dijkstra]"}, {"sha": "aa745ef39ee13a23d44da8b96573d30b2a0cb154", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/84030fd05a6d6b0bc3d31cf638bc8c88adae7a41/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84030fd05a6d6b0bc3d31cf638bc8c88adae7a41/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=84030fd05a6d6b0bc3d31cf638bc8c88adae7a41", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! A double-ended queue implemented as a circular buffer.\n-//!\n-//! `RingBuf` implements the trait `Deque`. It should be imported with\n-//! `use collections::Deque`.\n+//! This crate implements a double-ended queue with `O(1)` amortized inserts and removals from both\n+//! ends of the container. It also has `O(1)` indexing like a vector. The contained elements are\n+//! not required to be copyable, and the queue will be sendable if the contained type is sendable.\n+//! Its interface `Deque` is defined in `collections`.\n \n use core::prelude::*;\n "}, {"sha": "354edae473fd58450e86eed411b3f05ae5b65ba2", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/84030fd05a6d6b0bc3d31cf638bc8c88adae7a41/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84030fd05a6d6b0bc3d31cf638bc8c88adae7a41/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=84030fd05a6d6b0bc3d31cf638bc8c88adae7a41", "patch": "@@ -8,9 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! An ordered map and set implemented as self-balancing binary search\n-//! trees. The only requirement for the types is that the key implements\n-//! `Ord`.\n+//! Maps are collections of unique keys with corresponding values, and sets are\n+//! just unique keys without a corresponding value. The `Map` and `Set` traits in\n+//! `std::container` define the basic interface.\n+//!\n+//! This crate defines the `TreeMap` and `TreeSet` types. Their keys must implement `Ord`.\n+//!\n+//! `TreeMap`s are ordered.\n //!\n //! ## Example\n //!"}, {"sha": "7d60d3a85e1288483d7997f73ef7bcbbc26bac4b", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/84030fd05a6d6b0bc3d31cf638bc8c88adae7a41/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84030fd05a6d6b0bc3d31cf638bc8c88adae7a41/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=84030fd05a6d6b0bc3d31cf638bc8c88adae7a41", "patch": "@@ -8,8 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Ordered containers with unsigned integer keys,\n-//! implemented as radix tries (`TrieSet` and `TrieMap` types).\n+//! Maps are collections of unique keys with corresponding values, and sets are\n+//! just unique keys without a corresponding value. The `Map` and `Set` traits in\n+//! `std::container` define the basic interface.\n+//!\n+//! This crate defines `TrieMap` and `TrieSet`, which require `uint` keys.\n+//!\n+//! `TrieMap` is ordered.\n \n use core::prelude::*;\n "}, {"sha": "34b3b11df00b53b948a9ef96b32ce8b93e7c8261", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84030fd05a6d6b0bc3d31cf638bc8c88adae7a41/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84030fd05a6d6b0bc3d31cf638bc8c88adae7a41/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=84030fd05a6d6b0bc3d31cf638bc8c88adae7a41", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! An owned, growable vector.\n+//! A growable list type, written `Vec<T>` but pronounced 'vector.'\n+//!\n+//! Vectors have `O(1)` indexing, push (to the end) and pop (from the end).\n \n use core::prelude::*;\n "}]}