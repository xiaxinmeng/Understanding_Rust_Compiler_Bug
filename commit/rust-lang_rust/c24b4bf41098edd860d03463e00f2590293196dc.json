{"sha": "c24b4bf41098edd860d03463e00f2590293196dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNGI0YmY0MTA5OGVkZDg2MGQwMzQ2M2UwMGYyNTkwMjkzMTk2ZGM=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-08T17:56:25Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-03-15T12:44:25Z"}, "message": "Add attributes to allow specializing on traits", "tree": {"sha": "4b53bc73915e60e9daad70c02ed4dcbc0d66494e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b53bc73915e60e9daad70c02ed4dcbc0d66494e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c24b4bf41098edd860d03463e00f2590293196dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c24b4bf41098edd860d03463e00f2590293196dc", "html_url": "https://github.com/rust-lang/rust/commit/c24b4bf41098edd860d03463e00f2590293196dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c24b4bf41098edd860d03463e00f2590293196dc/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a62dd0e3bab098a4dd389a7942c2f4861f83443f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a62dd0e3bab098a4dd389a7942c2f4861f83443f", "html_url": "https://github.com/rust-lang/rust/commit/a62dd0e3bab098a4dd389a7942c2f4861f83443f"}], "stats": {"total": 119, "additions": 116, "deletions": 3}, "files": [{"sha": "2b908f07af8da585f6cdbe7f9ff2590709662d05", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c24b4bf41098edd860d03463e00f2590293196dc/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24b4bf41098edd860d03463e00f2590293196dc/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=c24b4bf41098edd860d03463e00f2590293196dc", "patch": "@@ -90,6 +90,7 @@ impl<T: ?Sized> !Send for *mut T {}\n           ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\"\n )]\n #[fundamental] // for Default, for example, which requires that `[T]: !Default` be evaluatable\n+#[cfg_attr(not(bootstrap), rustc_specialization_trait)]\n pub trait Sized {\n     // Empty.\n }"}, {"sha": "2b5d72de3586f0e2adea7be4a240bf0ff9d10ffd", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c24b4bf41098edd860d03463e00f2590293196dc/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24b4bf41098edd860d03463e00f2590293196dc/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=c24b4bf41098edd860d03463e00f2590293196dc", "patch": "@@ -33,11 +33,33 @@ pub struct TraitDef {\n     /// and thus `impl`s of it are allowed to overlap.\n     pub is_marker: bool,\n \n+    /// Used to determine whether the standard library is allowed to specialize\n+    /// on this trait.\n+    pub specialization_kind: TraitSpecializationKind,\n+\n     /// The ICH of this trait's DefPath, cached here so it doesn't have to be\n     /// recomputed all the time.\n     pub def_path_hash: DefPathHash,\n }\n \n+/// Whether this trait is treated specially by the standard library\n+/// specialization lint.\n+#[derive(HashStable, PartialEq, Clone, Copy, RustcEncodable, RustcDecodable)]\n+pub enum TraitSpecializationKind {\n+    /// The default. Specializing on this trait is not allowed.\n+    None,\n+    /// Specializing on this trait is allowed because it doesn't have any\n+    /// methods. For example `Sized` or `FusedIterator`.\n+    /// Applies to traits with the `rustc_unsafe_specialization_marker`\n+    /// attribute.\n+    Marker,\n+    /// Specializing on this trait is allowed because all of the impls of this\n+    /// trait are \"always applicable\". Always applicable means that if\n+    /// `X<'x>: T<'y>` for any lifetimes, then `for<'a, 'b> X<'a>: T<'b>`.\n+    /// Applies to traits with the `rustc_specialization_trait` attribute.\n+    AlwaysApplicable,\n+}\n+\n #[derive(Default)]\n pub struct TraitImpls {\n     blanket_impls: Vec<DefId>,\n@@ -52,9 +74,18 @@ impl<'tcx> TraitDef {\n         paren_sugar: bool,\n         has_auto_impl: bool,\n         is_marker: bool,\n+        specialization_kind: TraitSpecializationKind,\n         def_path_hash: DefPathHash,\n     ) -> TraitDef {\n-        TraitDef { def_id, unsafety, paren_sugar, has_auto_impl, is_marker, def_path_hash }\n+        TraitDef {\n+            def_id,\n+            unsafety,\n+            paren_sugar,\n+            has_auto_impl,\n+            is_marker,\n+            specialization_kind,\n+            def_path_hash,\n+        }\n     }\n \n     pub fn ancestors("}, {"sha": "83830b9d78ad4d9f66460c7959dbd74995a72b7f", "filename": "src/librustc_feature/builtin_attrs.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c24b4bf41098edd860d03463e00f2590293196dc/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24b4bf41098edd860d03463e00f2590293196dc/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fbuiltin_attrs.rs?ref=c24b4bf41098edd860d03463e00f2590293196dc", "patch": "@@ -530,6 +530,14 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         rustc_test_marker, Normal, template!(Word),\n         \"the `#[rustc_test_marker]` attribute is used internally to track tests\",\n     ),\n+    rustc_attr!(\n+        rustc_unsafe_specialization_marker, Normal, template!(Word),\n+        \"the `#[rustc_unsafe_specialization_marker]` attribute is used to check specializations\"\n+    ),\n+    rustc_attr!(\n+        rustc_specialization_trait, Normal, template!(Word),\n+        \"the `#[rustc_specialization_trait]` attribute is used to check specializations\"\n+    ),\n \n     // ==========================================================================\n     // Internal attributes, Testing:"}, {"sha": "0fab64978ee00272f520fa6ccc87b31ca11fb03a", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c24b4bf41098edd860d03463e00f2590293196dc/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24b4bf41098edd860d03463e00f2590293196dc/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=c24b4bf41098edd860d03463e00f2590293196dc", "patch": "@@ -651,6 +651,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                     data.paren_sugar,\n                     data.has_auto_impl,\n                     data.is_marker,\n+                    data.specialization_kind,\n                     self.def_path_table.def_path_hash(item_id),\n                 )\n             }\n@@ -660,6 +661,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 false,\n                 false,\n                 false,\n+                ty::trait_def::TraitSpecializationKind::None,\n                 self.def_path_table.def_path_hash(item_id),\n             ),\n             _ => bug!(\"def-index does not refer to trait or trait alias\"),"}, {"sha": "1d8b2c0f6f553708762b27d3e02573f0e0548382", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c24b4bf41098edd860d03463e00f2590293196dc/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24b4bf41098edd860d03463e00f2590293196dc/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=c24b4bf41098edd860d03463e00f2590293196dc", "patch": "@@ -1114,6 +1114,7 @@ impl EncodeContext<'tcx> {\n                     paren_sugar: trait_def.paren_sugar,\n                     has_auto_impl: self.tcx.trait_is_auto(def_id),\n                     is_marker: trait_def.is_marker,\n+                    specialization_kind: trait_def.specialization_kind,\n                 };\n \n                 EntryKind::Trait(self.lazy(data))"}, {"sha": "2672d772b1cf1af304ac173a7ced21f6ce73aa4e", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c24b4bf41098edd860d03463e00f2590293196dc/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24b4bf41098edd860d03463e00f2590293196dc/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=c24b4bf41098edd860d03463e00f2590293196dc", "patch": "@@ -350,6 +350,7 @@ struct TraitData {\n     paren_sugar: bool,\n     has_auto_impl: bool,\n     is_marker: bool,\n+    specialization_kind: ty::trait_def::TraitSpecializationKind,\n }\n \n #[derive(RustcEncodable, RustcDecodable)]"}, {"sha": "389a8bb99208228e2330692f4d4b9ec2cc33f52a", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c24b4bf41098edd860d03463e00f2590293196dc/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24b4bf41098edd860d03463e00f2590293196dc/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=c24b4bf41098edd860d03463e00f2590293196dc", "patch": "@@ -453,6 +453,7 @@ symbols! {\n         min_align_of,\n         min_const_fn,\n         min_const_unsafe_fn,\n+        min_specialization,\n         mips_target_feature,\n         mmx_target_feature,\n         module,\n@@ -654,6 +655,8 @@ symbols! {\n         rustc_proc_macro_decls,\n         rustc_promotable,\n         rustc_regions,\n+        rustc_unsafe_specialization_marker,\n+        rustc_specialization_trait,\n         rustc_stable,\n         rustc_std_internal_symbol,\n         rustc_symbol_name,"}, {"sha": "2f1654c18d91c5a021a5dc38b3907088fd42560e", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c24b4bf41098edd860d03463e00f2590293196dc/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24b4bf41098edd860d03463e00f2590293196dc/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=c24b4bf41098edd860d03463e00f2590293196dc", "patch": "@@ -4,6 +4,7 @@ use crate::constrained_generic_params::{identify_constrained_generic_params, Par\n use rustc::middle::lang_items;\n use rustc::session::parse::feature_err;\n use rustc::ty::subst::{InternalSubsts, Subst};\n+use rustc::ty::trait_def::TraitSpecializationKind;\n use rustc::ty::{\n     self, AdtKind, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n };\n@@ -412,7 +413,9 @@ fn check_trait(tcx: TyCtxt<'_>, item: &hir::Item<'_>) {\n     let trait_def_id = tcx.hir().local_def_id(item.hir_id);\n \n     let trait_def = tcx.trait_def(trait_def_id);\n-    if trait_def.is_marker {\n+    if trait_def.is_marker\n+        || matches!(trait_def.specialization_kind, TraitSpecializationKind::Marker)\n+    {\n         for associated_def_id in &*tcx.associated_item_def_ids(trait_def_id) {\n             struct_span_err!(\n                 tcx.sess,"}, {"sha": "27b2c19499ccd61f89ba71aca9627dccafcea8cc", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c24b4bf41098edd860d03463e00f2590293196dc/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24b4bf41098edd860d03463e00f2590293196dc/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=c24b4bf41098edd860d03463e00f2590293196dc", "patch": "@@ -76,6 +76,22 @@ fn enforce_trait_manually_implementable(tcx: TyCtxt<'_>, impl_def_id: DefId, tra\n         return;\n     }\n \n+    if let ty::trait_def::TraitSpecializationKind::AlwaysApplicable =\n+        tcx.trait_def(trait_def_id).specialization_kind\n+    {\n+        if !tcx.features().specialization && !tcx.features().min_specialization {\n+            let span = impl_header_span(tcx, impl_def_id);\n+            tcx.sess\n+                .struct_span_err(\n+                    span,\n+                    \"implementing `rustc_specialization_trait` traits is unstable\",\n+                )\n+                .help(\"add `#![feature(min_specialization)]` to the crate attributes to enable\")\n+                .emit();\n+            return;\n+        }\n+    }\n+\n     let trait_name = if did == li.fn_trait() {\n         \"Fn\"\n     } else if did == li.fn_mut_trait() {"}, {"sha": "6597cc476892cf69b23b708536224c152b0b3b62", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c24b4bf41098edd860d03463e00f2590293196dc/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24b4bf41098edd860d03463e00f2590293196dc/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=c24b4bf41098edd860d03463e00f2590293196dc", "patch": "@@ -1032,8 +1032,23 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TraitDef {\n     }\n \n     let is_marker = tcx.has_attr(def_id, sym::marker);\n+    let spec_kind = if tcx.has_attr(def_id, sym::rustc_unsafe_specialization_marker) {\n+        ty::trait_def::TraitSpecializationKind::Marker\n+    } else if tcx.has_attr(def_id, sym::rustc_specialization_trait) {\n+        ty::trait_def::TraitSpecializationKind::AlwaysApplicable\n+    } else {\n+        ty::trait_def::TraitSpecializationKind::None\n+    };\n     let def_path_hash = tcx.def_path_hash(def_id);\n-    let def = ty::TraitDef::new(def_id, unsafety, paren_sugar, is_auto, is_marker, def_path_hash);\n+    let def = ty::TraitDef::new(\n+        def_id,\n+        unsafety,\n+        paren_sugar,\n+        is_auto,\n+        is_marker,\n+        spec_kind,\n+        def_path_hash,\n+    );\n     tcx.arena.alloc(def)\n }\n "}, {"sha": "6ec0d261d518aa266dbb7612bb775dfe36a070a4", "filename": "src/test/ui/specialization/min_specialization/auxiliary/specialization-trait.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c24b4bf41098edd860d03463e00f2590293196dc/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fauxiliary%2Fspecialization-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24b4bf41098edd860d03463e00f2590293196dc/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fauxiliary%2Fspecialization-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fauxiliary%2Fspecialization-trait.rs?ref=c24b4bf41098edd860d03463e00f2590293196dc", "patch": "@@ -0,0 +1,6 @@\n+#![feature(rustc_attrs)]\n+\n+#[rustc_specialization_trait]\n+pub trait SpecTrait {\n+    fn method(&self);\n+}"}, {"sha": "723ed71c3e95dbd67e63f90316ff2c392f174e94", "filename": "src/test/ui/specialization/min_specialization/impl_specialization_trait.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c24b4bf41098edd860d03463e00f2590293196dc/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fimpl_specialization_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c24b4bf41098edd860d03463e00f2590293196dc/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fimpl_specialization_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fimpl_specialization_trait.rs?ref=c24b4bf41098edd860d03463e00f2590293196dc", "patch": "@@ -0,0 +1,16 @@\n+// Check that specialization traits can't be implemented without a feature.\n+\n+// gate-test-min_specialization\n+\n+// aux-build:specialization-trait.rs\n+\n+extern crate specialization_trait;\n+\n+struct A {}\n+\n+impl specialization_trait::SpecTrait for A {\n+    //~^ ERROR implementing `rustc_specialization_trait` traits is unstable\n+    fn method(&self) {}\n+}\n+\n+fn main() {}"}, {"sha": "934103d49dc0e21fe5595f741aaf4deb7bd4b8fc", "filename": "src/test/ui/specialization/min_specialization/impl_specialization_trait.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c24b4bf41098edd860d03463e00f2590293196dc/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fimpl_specialization_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c24b4bf41098edd860d03463e00f2590293196dc/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fimpl_specialization_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Fimpl_specialization_trait.stderr?ref=c24b4bf41098edd860d03463e00f2590293196dc", "patch": "@@ -0,0 +1,10 @@\n+error: implementing `rustc_specialization_trait` traits is unstable\n+  --> $DIR/impl_specialization_trait.rs:11:1\n+   |\n+LL | impl specialization_trait::SpecTrait for A {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(min_specialization)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+"}]}