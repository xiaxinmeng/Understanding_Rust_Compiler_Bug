{"sha": "f0fc0650c53b46b01f3746ca3de578520846fe36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwZmMwNjUwYzUzYjQ2YjAxZjM3NDZjYTNkZTU3ODUyMDg0NmZlMzY=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-08-26T05:24:05Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-10-16T03:10:10Z"}, "message": "path2: Update all the tests for the new [u8]-based approach", "tree": {"sha": "013feca0d440e091d0422f9d6b17a059df8f8163", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/013feca0d440e091d0422f9d6b17a059df8f8163"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0fc0650c53b46b01f3746ca3de578520846fe36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0fc0650c53b46b01f3746ca3de578520846fe36", "html_url": "https://github.com/rust-lang/rust/commit/f0fc0650c53b46b01f3746ca3de578520846fe36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0fc0650c53b46b01f3746ca3de578520846fe36/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "550bc9bd1c5aa90f6574b7d4ebd9922b986f9741", "url": "https://api.github.com/repos/rust-lang/rust/commits/550bc9bd1c5aa90f6574b7d4ebd9922b986f9741", "html_url": "https://github.com/rust-lang/rust/commit/550bc9bd1c5aa90f6574b7d4ebd9922b986f9741"}], "stats": {"total": 368, "additions": 189, "deletions": 179}, "files": [{"sha": "eac44db880d1713bfaaa74148fb4f419d6dc8ba2", "filename": "src/libstd/path2.rs", "status": "modified", "additions": 189, "deletions": 179, "changes": 368, "blob_url": "https://github.com/rust-lang/rust/blob/f0fc0650c53b46b01f3746ca3de578520846fe36/src%2Flibstd%2Fpath2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0fc0650c53b46b01f3746ca3de578520846fe36/src%2Flibstd%2Fpath2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath2.rs?ref=f0fc0650c53b46b01f3746ca3de578520846fe36", "patch": "@@ -894,51 +894,59 @@ mod tests {\n     use super::*;\n     use option::{Some, None};\n     use iterator::Iterator;\n+    use str;\n     use vec::Vector;\n \n     macro_rules! t(\n         ($path:expr, $exp:expr) => (\n             {\n                 let path = $path;\n-                assert_eq!(path.as_str(), $exp);\n+                assert_eq!(path.as_str(), Some($exp));\n             }\n         )\n     )\n \n     #[test]\n     fn test_posix_paths() {\n-        t!(PosixPath::new(\"\"), \".\");\n-        t!(PosixPath::new(\"/\"), \"/\");\n-        t!(PosixPath::new(\"hi\"), \"hi\");\n-        t!(PosixPath::new(\"/lib\"), \"/lib\");\n-        t!(PosixPath::new(\"hi/there\"), \"hi/there\");\n-        t!(PosixPath::new(\"hi/there.txt\"), \"hi/there.txt\");\n-\n-        t!(PosixPath::new(\"hi/there/\"), \"hi/there\");\n-        t!(PosixPath::new(\"hi/../there\"), \"there\");\n-        t!(PosixPath::new(\"../hi/there\"), \"../hi/there\");\n-        t!(PosixPath::new(\"/../hi/there\"), \"/hi/there\");\n-        t!(PosixPath::new(\"foo/..\"), \".\");\n-        t!(PosixPath::new(\"/foo/..\"), \"/\");\n-        t!(PosixPath::new(\"/foo/../..\"), \"/\");\n-        t!(PosixPath::new(\"/foo/../../bar\"), \"/bar\");\n-        t!(PosixPath::new(\"/./hi/./there/.\"), \"/hi/there\");\n-        t!(PosixPath::new(\"/./hi/./there/./..\"), \"/hi\");\n-        t!(PosixPath::new(\"foo/../..\"), \"..\");\n-        t!(PosixPath::new(\"foo/../../..\"), \"../..\");\n-        t!(PosixPath::new(\"foo/../../bar\"), \"../bar\");\n-\n-        assert_eq!(PosixPath::new(\"foo/bar\").into_str(), ~\"foo/bar\");\n-        assert_eq!(PosixPath::new(\"/foo/../../bar\").into_str(), ~\"/bar\");\n+        t!(PosixPath::from_str(\"\"), \".\");\n+        t!(PosixPath::from_str(\"/\"), \"/\");\n+        t!(PosixPath::from_str(\"hi\"), \"hi\");\n+        t!(PosixPath::from_str(\"/lib\"), \"/lib\");\n+        t!(PosixPath::from_str(\"hi/there\"), \"hi/there\");\n+        t!(PosixPath::from_str(\"hi/there.txt\"), \"hi/there.txt\");\n+\n+        t!(PosixPath::from_str(\"hi/there/\"), \"hi/there\");\n+        t!(PosixPath::from_str(\"hi/../there\"), \"there\");\n+        t!(PosixPath::from_str(\"../hi/there\"), \"../hi/there\");\n+        t!(PosixPath::from_str(\"/../hi/there\"), \"/hi/there\");\n+        t!(PosixPath::from_str(\"foo/..\"), \".\");\n+        t!(PosixPath::from_str(\"/foo/..\"), \"/\");\n+        t!(PosixPath::from_str(\"/foo/../..\"), \"/\");\n+        t!(PosixPath::from_str(\"/foo/../../bar\"), \"/bar\");\n+        t!(PosixPath::from_str(\"/./hi/./there/.\"), \"/hi/there\");\n+        t!(PosixPath::from_str(\"/./hi/./there/./..\"), \"/hi\");\n+        t!(PosixPath::from_str(\"foo/../..\"), \"..\");\n+        t!(PosixPath::from_str(\"foo/../../..\"), \"../..\");\n+        t!(PosixPath::from_str(\"foo/../../bar\"), \"../bar\");\n+\n+        assert_eq!(PosixPath::from_str(\"foo/bar\").into_str(), Some(~\"foo/bar\"));\n+        assert_eq!(PosixPath::from_str(\"/foo/../../bar\").into_str(), Some(~\"/bar\"));\n     }\n \n     #[test]\n     fn test_posix_components() {\n         macro_rules! t(\n             ($path:expr, $op:ident, $exp:expr) => (\n                 {\n-                    let path = PosixPath::new($path);\n-                    assert_eq!(path.$op(), $exp);\n+                    let path = PosixPath::from_str($path);\n+                    assert_eq!(path.$op(), ($exp).as_bytes());\n+                }\n+            );\n+            ($path:expr, $op:ident, $exp:expr, opt) => (\n+                {\n+                    let path = PosixPath::from_str($path);\n+                    let left = path.$op().map(|&x| str::from_bytes_slice(x));\n+                    assert_eq!(left, $exp);\n                 }\n             )\n         )\n@@ -974,18 +982,18 @@ mod tests {\n         t!(\"..\", filestem, \"\");\n         t!(\"../..\", filestem, \"\");\n \n-        t!(\"hi/there.txt\", extension, Some(\"txt\"));\n-        t!(\"hi/there\", extension, None);\n-        t!(\"there.txt\", extension, Some(\"txt\"));\n-        t!(\"there\", extension, None);\n-        t!(\".\", extension, None);\n-        t!(\"/\", extension, None);\n-        t!(\"foo/.bar\", extension, None);\n-        t!(\".bar\", extension, None);\n-        t!(\"..bar\", extension, Some(\"bar\"));\n-        t!(\"hi/there..txt\", extension, Some(\"txt\"));\n-        t!(\"..\", extension, None);\n-        t!(\"../..\", extension, None);\n+        t!(\"hi/there.txt\", extension, Some(\"txt\"), opt);\n+        t!(\"hi/there\", extension, None, opt);\n+        t!(\"there.txt\", extension, Some(\"txt\"), opt);\n+        t!(\"there\", extension, None, opt);\n+        t!(\".\", extension, None, opt);\n+        t!(\"/\", extension, None, opt);\n+        t!(\"foo/.bar\", extension, None, opt);\n+        t!(\".bar\", extension, None, opt);\n+        t!(\"..bar\", extension, Some(\"bar\"), opt);\n+        t!(\"hi/there..txt\", extension, Some(\"txt\"), opt);\n+        t!(\"..\", extension, None, opt);\n+        t!(\"../..\", extension, None, opt);\n     }\n \n     #[test]\n@@ -995,10 +1003,10 @@ mod tests {\n                 {\n                     let path = ($path);\n                     let join = ($join);\n-                    let mut p1 = PosixPath::new(path);\n-                    p1.push(join);\n-                    let p2 = PosixPath::new(path);\n-                    assert_eq!(p1, p2.join(join));\n+                    let mut p1 = PosixPath::from_str(path);\n+                    let p2 = p1.clone();\n+                    p1.push_str(join);\n+                    assert_eq!(p1, p2.join_str(join));\n                 }\n             )\n         )\n@@ -1014,10 +1022,10 @@ mod tests {\n         macro_rules! t(\n             ($path:expr, $push:expr, $exp:expr) => (\n                 {\n-                    let mut p = PosixPath::new($path);\n-                    let push = PosixPath::new($push);\n+                    let mut p = PosixPath::from_str($path);\n+                    let push = PosixPath::from_str($push);\n                     p.push_path(&push);\n-                    assert_eq!(p.as_str(), $exp);\n+                    assert_eq!(p.as_str(), Some($exp));\n                 }\n             )\n         )\n@@ -1035,9 +1043,9 @@ mod tests {\n         macro_rules! t(\n             ($path:expr, $left:expr, $right:expr) => (\n                 {\n-                    let mut p = PosixPath::new($path);\n-                    let file = p.pop_opt();\n-                    assert_eq!(p.as_str(), $left);\n+                    let mut p = PosixPath::from_str($path);\n+                    let file = p.pop_opt_str();\n+                    assert_eq!(p.as_str(), Some($left));\n                     assert_eq!(file.map(|s| s.as_slice()), $right);\n                 }\n             )\n@@ -1052,23 +1060,23 @@ mod tests {\n \n     #[test]\n     fn test_posix_join() {\n-        t!(PosixPath::new(\"a/b/c\").join(\"..\"), \"a/b\");\n-        t!(PosixPath::new(\"/a/b/c\").join(\"d\"), \"/a/b/c/d\");\n-        t!(PosixPath::new(\"a/b\").join(\"c/d\"), \"a/b/c/d\");\n-        t!(PosixPath::new(\"a/b\").join(\"/c/d\"), \"/c/d\");\n-        t!(PosixPath::new(\".\").join(\"a/b\"), \"a/b\");\n-        t!(PosixPath::new(\"/\").join(\"a/b\"), \"/a/b\");\n+        t!(PosixPath::from_str(\"a/b/c\").join_str(\"..\"), \"a/b\");\n+        t!(PosixPath::from_str(\"/a/b/c\").join_str(\"d\"), \"/a/b/c/d\");\n+        t!(PosixPath::from_str(\"a/b\").join_str(\"c/d\"), \"a/b/c/d\");\n+        t!(PosixPath::from_str(\"a/b\").join_str(\"/c/d\"), \"/c/d\");\n+        t!(PosixPath::from_str(\".\").join_str(\"a/b\"), \"a/b\");\n+        t!(PosixPath::from_str(\"/\").join_str(\"a/b\"), \"/a/b\");\n     }\n \n     #[test]\n     fn test_posix_join_path() {\n         macro_rules! t(\n             ($path:expr, $join:expr, $exp:expr) => (\n                 {\n-                    let path = PosixPath::new($path);\n-                    let join = PosixPath::new($join);\n+                    let path = PosixPath::from_str($path);\n+                    let join = PosixPath::from_str($join);\n                     let res = path.join_path(&join);\n-                    assert_eq!(res.as_str(), $exp);\n+                    assert_eq!(res.as_str(), Some($exp));\n                 }\n             )\n         )\n@@ -1083,72 +1091,72 @@ mod tests {\n \n     #[test]\n     fn test_posix_with_helpers() {\n-        t!(PosixPath::new(\"a/b/c\").with_dirname(\"d\"), \"d/c\");\n-        t!(PosixPath::new(\"a/b/c\").with_dirname(\"d/e\"), \"d/e/c\");\n-        t!(PosixPath::new(\"a/b/c\").with_dirname(\"\"), \"c\");\n-        t!(PosixPath::new(\"a/b/c\").with_dirname(\"/\"), \"/c\");\n-        t!(PosixPath::new(\"a/b/c\").with_dirname(\".\"), \"c\");\n-        t!(PosixPath::new(\"a/b/c\").with_dirname(\"..\"), \"../c\");\n-        t!(PosixPath::new(\"/\").with_dirname(\"foo\"), \"foo\");\n-        t!(PosixPath::new(\"/\").with_dirname(\"\"), \".\");\n-        t!(PosixPath::new(\"/foo\").with_dirname(\"bar\"), \"bar/foo\");\n-        t!(PosixPath::new(\"..\").with_dirname(\"foo\"), \"foo\");\n-        t!(PosixPath::new(\"../..\").with_dirname(\"foo\"), \"foo\");\n-        t!(PosixPath::new(\"foo\").with_dirname(\"..\"), \"../foo\");\n-        t!(PosixPath::new(\"foo\").with_dirname(\"../..\"), \"../../foo\");\n-\n-        t!(PosixPath::new(\"a/b/c\").with_filename(\"d\"), \"a/b/d\");\n-        t!(PosixPath::new(\".\").with_filename(\"foo\"), \"foo\");\n-        t!(PosixPath::new(\"/a/b/c\").with_filename(\"d\"), \"/a/b/d\");\n-        t!(PosixPath::new(\"/\").with_filename(\"foo\"), \"/foo\");\n-        t!(PosixPath::new(\"/a\").with_filename(\"foo\"), \"/foo\");\n-        t!(PosixPath::new(\"foo\").with_filename(\"bar\"), \"bar\");\n-        t!(PosixPath::new(\"a/b/c\").with_filename(\"\"), \"a/b\");\n-        t!(PosixPath::new(\"a/b/c\").with_filename(\".\"), \"a/b\");\n-        t!(PosixPath::new(\"a/b/c\").with_filename(\"..\"), \"a\");\n-        t!(PosixPath::new(\"/a\").with_filename(\"\"), \"/\");\n-        t!(PosixPath::new(\"foo\").with_filename(\"\"), \".\");\n-        t!(PosixPath::new(\"a/b/c\").with_filename(\"d/e\"), \"a/b/d/e\");\n-        t!(PosixPath::new(\"a/b/c\").with_filename(\"/d\"), \"a/b/d\");\n-        t!(PosixPath::new(\"..\").with_filename(\"foo\"), \"../foo\");\n-        t!(PosixPath::new(\"../..\").with_filename(\"foo\"), \"../../foo\");\n-\n-        t!(PosixPath::new(\"hi/there.txt\").with_filestem(\"here\"), \"hi/here.txt\");\n-        t!(PosixPath::new(\"hi/there.txt\").with_filestem(\"\"), \"hi/.txt\");\n-        t!(PosixPath::new(\"hi/there.txt\").with_filestem(\".\"), \"hi/..txt\");\n-        t!(PosixPath::new(\"hi/there.txt\").with_filestem(\"..\"), \"hi/...txt\");\n-        t!(PosixPath::new(\"hi/there.txt\").with_filestem(\"/\"), \"hi/.txt\");\n-        t!(PosixPath::new(\"hi/there.txt\").with_filestem(\"foo/bar\"), \"hi/foo/bar.txt\");\n-        t!(PosixPath::new(\"hi/there.foo.txt\").with_filestem(\"here\"), \"hi/here.txt\");\n-        t!(PosixPath::new(\"hi/there\").with_filestem(\"here\"), \"hi/here\");\n-        t!(PosixPath::new(\"hi/there\").with_filestem(\"\"), \"hi\");\n-        t!(PosixPath::new(\"hi\").with_filestem(\"\"), \".\");\n-        t!(PosixPath::new(\"/hi\").with_filestem(\"\"), \"/\");\n-        t!(PosixPath::new(\"hi/there\").with_filestem(\"..\"), \".\");\n-        t!(PosixPath::new(\"hi/there\").with_filestem(\".\"), \"hi\");\n-        t!(PosixPath::new(\"hi/there.\").with_filestem(\"foo\"), \"hi/foo.\");\n-        t!(PosixPath::new(\"hi/there.\").with_filestem(\"\"), \"hi\");\n-        t!(PosixPath::new(\"hi/there.\").with_filestem(\".\"), \".\");\n-        t!(PosixPath::new(\"hi/there.\").with_filestem(\"..\"), \"hi/...\");\n-        t!(PosixPath::new(\"/\").with_filestem(\"foo\"), \"/foo\");\n-        t!(PosixPath::new(\".\").with_filestem(\"foo\"), \"foo\");\n-        t!(PosixPath::new(\"hi/there..\").with_filestem(\"here\"), \"hi/here.\");\n-        t!(PosixPath::new(\"hi/there..\").with_filestem(\"\"), \"hi\");\n-\n-        t!(PosixPath::new(\"hi/there.txt\").with_extension(\"exe\"), \"hi/there.exe\");\n-        t!(PosixPath::new(\"hi/there.txt\").with_extension(\"\"), \"hi/there\");\n-        t!(PosixPath::new(\"hi/there.txt\").with_extension(\".\"), \"hi/there..\");\n-        t!(PosixPath::new(\"hi/there.txt\").with_extension(\"..\"), \"hi/there...\");\n-        t!(PosixPath::new(\"hi/there\").with_extension(\"txt\"), \"hi/there.txt\");\n-        t!(PosixPath::new(\"hi/there\").with_extension(\".\"), \"hi/there..\");\n-        t!(PosixPath::new(\"hi/there\").with_extension(\"..\"), \"hi/there...\");\n-        t!(PosixPath::new(\"hi/there.\").with_extension(\"txt\"), \"hi/there.txt\");\n-        t!(PosixPath::new(\"hi/.foo\").with_extension(\"txt\"), \"hi/.foo.txt\");\n-        t!(PosixPath::new(\"hi/there.txt\").with_extension(\".foo\"), \"hi/there..foo\");\n-        t!(PosixPath::new(\"/\").with_extension(\"txt\"), \"/\");\n-        t!(PosixPath::new(\"/\").with_extension(\".\"), \"/\");\n-        t!(PosixPath::new(\"/\").with_extension(\"..\"), \"/\");\n-        t!(PosixPath::new(\".\").with_extension(\"txt\"), \".\");\n+        t!(PosixPath::from_str(\"a/b/c\").with_dirname_str(\"d\"), \"d/c\");\n+        t!(PosixPath::from_str(\"a/b/c\").with_dirname_str(\"d/e\"), \"d/e/c\");\n+        t!(PosixPath::from_str(\"a/b/c\").with_dirname_str(\"\"), \"c\");\n+        t!(PosixPath::from_str(\"a/b/c\").with_dirname_str(\"/\"), \"/c\");\n+        t!(PosixPath::from_str(\"a/b/c\").with_dirname_str(\".\"), \"c\");\n+        t!(PosixPath::from_str(\"a/b/c\").with_dirname_str(\"..\"), \"../c\");\n+        t!(PosixPath::from_str(\"/\").with_dirname_str(\"foo\"), \"foo\");\n+        t!(PosixPath::from_str(\"/\").with_dirname_str(\"\"), \".\");\n+        t!(PosixPath::from_str(\"/foo\").with_dirname_str(\"bar\"), \"bar/foo\");\n+        t!(PosixPath::from_str(\"..\").with_dirname_str(\"foo\"), \"foo\");\n+        t!(PosixPath::from_str(\"../..\").with_dirname_str(\"foo\"), \"foo\");\n+        t!(PosixPath::from_str(\"foo\").with_dirname_str(\"..\"), \"../foo\");\n+        t!(PosixPath::from_str(\"foo\").with_dirname_str(\"../..\"), \"../../foo\");\n+\n+        t!(PosixPath::from_str(\"a/b/c\").with_filename_str(\"d\"), \"a/b/d\");\n+        t!(PosixPath::from_str(\".\").with_filename_str(\"foo\"), \"foo\");\n+        t!(PosixPath::from_str(\"/a/b/c\").with_filename_str(\"d\"), \"/a/b/d\");\n+        t!(PosixPath::from_str(\"/\").with_filename_str(\"foo\"), \"/foo\");\n+        t!(PosixPath::from_str(\"/a\").with_filename_str(\"foo\"), \"/foo\");\n+        t!(PosixPath::from_str(\"foo\").with_filename_str(\"bar\"), \"bar\");\n+        t!(PosixPath::from_str(\"a/b/c\").with_filename_str(\"\"), \"a/b\");\n+        t!(PosixPath::from_str(\"a/b/c\").with_filename_str(\".\"), \"a/b\");\n+        t!(PosixPath::from_str(\"a/b/c\").with_filename_str(\"..\"), \"a\");\n+        t!(PosixPath::from_str(\"/a\").with_filename_str(\"\"), \"/\");\n+        t!(PosixPath::from_str(\"foo\").with_filename_str(\"\"), \".\");\n+        t!(PosixPath::from_str(\"a/b/c\").with_filename_str(\"d/e\"), \"a/b/d/e\");\n+        t!(PosixPath::from_str(\"a/b/c\").with_filename_str(\"/d\"), \"a/b/d\");\n+        t!(PosixPath::from_str(\"..\").with_filename_str(\"foo\"), \"../foo\");\n+        t!(PosixPath::from_str(\"../..\").with_filename_str(\"foo\"), \"../../foo\");\n+\n+        t!(PosixPath::from_str(\"hi/there.txt\").with_filestem_str(\"here\"), \"hi/here.txt\");\n+        t!(PosixPath::from_str(\"hi/there.txt\").with_filestem_str(\"\"), \"hi/.txt\");\n+        t!(PosixPath::from_str(\"hi/there.txt\").with_filestem_str(\".\"), \"hi/..txt\");\n+        t!(PosixPath::from_str(\"hi/there.txt\").with_filestem_str(\"..\"), \"hi/...txt\");\n+        t!(PosixPath::from_str(\"hi/there.txt\").with_filestem_str(\"/\"), \"hi/.txt\");\n+        t!(PosixPath::from_str(\"hi/there.txt\").with_filestem_str(\"foo/bar\"), \"hi/foo/bar.txt\");\n+        t!(PosixPath::from_str(\"hi/there.foo.txt\").with_filestem_str(\"here\"), \"hi/here.txt\");\n+        t!(PosixPath::from_str(\"hi/there\").with_filestem_str(\"here\"), \"hi/here\");\n+        t!(PosixPath::from_str(\"hi/there\").with_filestem_str(\"\"), \"hi\");\n+        t!(PosixPath::from_str(\"hi\").with_filestem_str(\"\"), \".\");\n+        t!(PosixPath::from_str(\"/hi\").with_filestem_str(\"\"), \"/\");\n+        t!(PosixPath::from_str(\"hi/there\").with_filestem_str(\"..\"), \".\");\n+        t!(PosixPath::from_str(\"hi/there\").with_filestem_str(\".\"), \"hi\");\n+        t!(PosixPath::from_str(\"hi/there.\").with_filestem_str(\"foo\"), \"hi/foo.\");\n+        t!(PosixPath::from_str(\"hi/there.\").with_filestem_str(\"\"), \"hi\");\n+        t!(PosixPath::from_str(\"hi/there.\").with_filestem_str(\".\"), \".\");\n+        t!(PosixPath::from_str(\"hi/there.\").with_filestem_str(\"..\"), \"hi/...\");\n+        t!(PosixPath::from_str(\"/\").with_filestem_str(\"foo\"), \"/foo\");\n+        t!(PosixPath::from_str(\".\").with_filestem_str(\"foo\"), \"foo\");\n+        t!(PosixPath::from_str(\"hi/there..\").with_filestem_str(\"here\"), \"hi/here.\");\n+        t!(PosixPath::from_str(\"hi/there..\").with_filestem_str(\"\"), \"hi\");\n+\n+        t!(PosixPath::from_str(\"hi/there.txt\").with_extension_str(\"exe\"), \"hi/there.exe\");\n+        t!(PosixPath::from_str(\"hi/there.txt\").with_extension_str(\"\"), \"hi/there\");\n+        t!(PosixPath::from_str(\"hi/there.txt\").with_extension_str(\".\"), \"hi/there..\");\n+        t!(PosixPath::from_str(\"hi/there.txt\").with_extension_str(\"..\"), \"hi/there...\");\n+        t!(PosixPath::from_str(\"hi/there\").with_extension_str(\"txt\"), \"hi/there.txt\");\n+        t!(PosixPath::from_str(\"hi/there\").with_extension_str(\".\"), \"hi/there..\");\n+        t!(PosixPath::from_str(\"hi/there\").with_extension_str(\"..\"), \"hi/there...\");\n+        t!(PosixPath::from_str(\"hi/there.\").with_extension_str(\"txt\"), \"hi/there.txt\");\n+        t!(PosixPath::from_str(\"hi/.foo\").with_extension_str(\"txt\"), \"hi/.foo.txt\");\n+        t!(PosixPath::from_str(\"hi/there.txt\").with_extension_str(\".foo\"), \"hi/there..foo\");\n+        t!(PosixPath::from_str(\"/\").with_extension_str(\"txt\"), \"/\");\n+        t!(PosixPath::from_str(\"/\").with_extension_str(\".\"), \"/\");\n+        t!(PosixPath::from_str(\"/\").with_extension_str(\"..\"), \"/\");\n+        t!(PosixPath::from_str(\".\").with_extension_str(\"txt\"), \".\");\n     }\n \n     #[test]\n@@ -1158,88 +1166,88 @@ mod tests {\n                 {\n                     let path = ($path);\n                     let arg = ($arg);\n-                    let mut p1 = PosixPath::new(path);\n+                    let mut p1 = PosixPath::from_str(path);\n                     p1.$set(arg);\n-                    let p2 = PosixPath::new(path);\n+                    let p2 = PosixPath::from_str(path);\n                     assert_eq!(p1, p2.$with(arg));\n                 }\n             )\n         )\n \n-        t!(\"a/b/c\", set_dirname, with_dirname, \"d\");\n-        t!(\"a/b/c\", set_dirname, with_dirname, \"d/e\");\n-        t!(\"/\", set_dirname, with_dirname, \"foo\");\n-        t!(\"/foo\", set_dirname, with_dirname, \"bar\");\n-        t!(\"a/b/c\", set_dirname, with_dirname, \"\");\n-        t!(\"../..\", set_dirname, with_dirname, \"x\");\n-        t!(\"foo\", set_dirname, with_dirname, \"../..\");\n-\n-        t!(\"a/b/c\", set_filename, with_filename, \"d\");\n-        t!(\"/\", set_filename, with_filename, \"foo\");\n-        t!(\".\", set_filename, with_filename, \"foo\");\n-        t!(\"a/b\", set_filename, with_filename, \"\");\n-        t!(\"a\", set_filename, with_filename, \"\");\n-\n-        t!(\"hi/there.txt\", set_filestem, with_filestem, \"here\");\n-        t!(\"hi/there.\", set_filestem, with_filestem, \"here\");\n-        t!(\"hi/there\", set_filestem, with_filestem, \"here\");\n-        t!(\"hi/there.txt\", set_filestem, with_filestem, \"\");\n-        t!(\"hi/there\", set_filestem, with_filestem, \"\");\n-\n-        t!(\"hi/there.txt\", set_extension, with_extension, \"exe\");\n-        t!(\"hi/there.\", set_extension, with_extension, \"txt\");\n-        t!(\"hi/there\", set_extension, with_extension, \"txt\");\n-        t!(\"hi/there.txt\", set_extension, with_extension, \"\");\n-        t!(\"hi/there\", set_extension, with_extension, \"\");\n-        t!(\".\", set_extension, with_extension, \"txt\");\n+        t!(\"a/b/c\", set_dirname_str, with_dirname_str, \"d\");\n+        t!(\"a/b/c\", set_dirname_str, with_dirname_str, \"d/e\");\n+        t!(\"/\", set_dirname_str, with_dirname_str, \"foo\");\n+        t!(\"/foo\", set_dirname_str, with_dirname_str, \"bar\");\n+        t!(\"a/b/c\", set_dirname_str, with_dirname_str, \"\");\n+        t!(\"../..\", set_dirname_str, with_dirname_str, \"x\");\n+        t!(\"foo\", set_dirname_str, with_dirname_str, \"../..\");\n+\n+        t!(\"a/b/c\", set_filename_str, with_filename_str, \"d\");\n+        t!(\"/\", set_filename_str, with_filename_str, \"foo\");\n+        t!(\".\", set_filename_str, with_filename_str, \"foo\");\n+        t!(\"a/b\", set_filename_str, with_filename_str, \"\");\n+        t!(\"a\", set_filename_str, with_filename_str, \"\");\n+\n+        t!(\"hi/there.txt\", set_filestem_str, with_filestem_str, \"here\");\n+        t!(\"hi/there.\", set_filestem_str, with_filestem_str, \"here\");\n+        t!(\"hi/there\", set_filestem_str, with_filestem_str, \"here\");\n+        t!(\"hi/there.txt\", set_filestem_str, with_filestem_str, \"\");\n+        t!(\"hi/there\", set_filestem_str, with_filestem_str, \"\");\n+\n+        t!(\"hi/there.txt\", set_extension_str, with_extension_str, \"exe\");\n+        t!(\"hi/there.\", set_extension_str, with_extension_str, \"txt\");\n+        t!(\"hi/there\", set_extension_str, with_extension_str, \"txt\");\n+        t!(\"hi/there.txt\", set_extension_str, with_extension_str, \"\");\n+        t!(\"hi/there\", set_extension_str, with_extension_str, \"\");\n+        t!(\".\", set_extension_str, with_extension_str, \"txt\");\n     }\n \n     #[test]\n     fn test_posix_dir_file_path() {\n-        t!(PosixPath::new(\"hi/there\").dir_path(), \"hi\");\n-        t!(PosixPath::new(\"hi\").dir_path(), \".\");\n-        t!(PosixPath::new(\"/hi\").dir_path(), \"/\");\n-        t!(PosixPath::new(\"/\").dir_path(), \"/\");\n-        t!(PosixPath::new(\"..\").dir_path(), \"..\");\n-        t!(PosixPath::new(\"../..\").dir_path(), \"../..\");\n+        t!(PosixPath::from_str(\"hi/there\").dir_path(), \"hi\");\n+        t!(PosixPath::from_str(\"hi\").dir_path(), \".\");\n+        t!(PosixPath::from_str(\"/hi\").dir_path(), \"/\");\n+        t!(PosixPath::from_str(\"/\").dir_path(), \"/\");\n+        t!(PosixPath::from_str(\"..\").dir_path(), \"..\");\n+        t!(PosixPath::from_str(\"../..\").dir_path(), \"../..\");\n \n         macro_rules! t(\n             ($path:expr, $exp:expr) => (\n                 {\n                     let path = $path;\n-                    let left = path.map(|p| p.as_str());\n+                    let left = path.chain_ref(|p| p.as_str());\n                     assert_eq!(left, $exp);\n                 }\n             )\n         )\n \n-        t!(PosixPath::new(\"hi/there\").file_path(), Some(\"there\"));\n-        t!(PosixPath::new(\"hi\").file_path(), Some(\"hi\"));\n-        t!(PosixPath::new(\".\").file_path(), None);\n-        t!(PosixPath::new(\"/\").file_path(), None);\n-        t!(PosixPath::new(\"..\").file_path(), None);\n-        t!(PosixPath::new(\"../..\").file_path(), None);\n+        t!(PosixPath::from_str(\"hi/there\").file_path(), Some(\"there\"));\n+        t!(PosixPath::from_str(\"hi\").file_path(), Some(\"hi\"));\n+        t!(PosixPath::from_str(\".\").file_path(), None);\n+        t!(PosixPath::from_str(\"/\").file_path(), None);\n+        t!(PosixPath::from_str(\"..\").file_path(), None);\n+        t!(PosixPath::from_str(\"../..\").file_path(), None);\n     }\n \n     #[test]\n     fn test_posix_is_absolute() {\n-        assert_eq!(PosixPath::new(\"a/b/c\").is_absolute(), false);\n-        assert_eq!(PosixPath::new(\"/a/b/c\").is_absolute(), true);\n-        assert_eq!(PosixPath::new(\"a\").is_absolute(), false);\n-        assert_eq!(PosixPath::new(\"/a\").is_absolute(), true);\n-        assert_eq!(PosixPath::new(\".\").is_absolute(), false);\n-        assert_eq!(PosixPath::new(\"/\").is_absolute(), true);\n-        assert_eq!(PosixPath::new(\"..\").is_absolute(), false);\n-        assert_eq!(PosixPath::new(\"../..\").is_absolute(), false);\n+        assert_eq!(PosixPath::from_str(\"a/b/c\").is_absolute(), false);\n+        assert_eq!(PosixPath::from_str(\"/a/b/c\").is_absolute(), true);\n+        assert_eq!(PosixPath::from_str(\"a\").is_absolute(), false);\n+        assert_eq!(PosixPath::from_str(\"/a\").is_absolute(), true);\n+        assert_eq!(PosixPath::from_str(\".\").is_absolute(), false);\n+        assert_eq!(PosixPath::from_str(\"/\").is_absolute(), true);\n+        assert_eq!(PosixPath::from_str(\"..\").is_absolute(), false);\n+        assert_eq!(PosixPath::from_str(\"../..\").is_absolute(), false);\n     }\n \n     #[test]\n     fn test_posix_is_ancestor_of() {\n         macro_rules! t(\n             ($path:expr, $dest:expr, $exp:expr) => (\n                 {\n-                    let path = PosixPath::new($path);\n-                    let dest = PosixPath::new($dest);\n+                    let path = PosixPath::from_str($path);\n+                    let dest = PosixPath::from_str($dest);\n                     assert_eq!(path.is_ancestor_of(&dest), $exp);\n                 }\n             )\n@@ -1272,10 +1280,10 @@ mod tests {\n         macro_rules! t(\n             ($path:expr, $other:expr, $exp:expr) => (\n                 {\n-                    let path = PosixPath::new($path);\n-                    let other = PosixPath::new($other);\n+                    let path = PosixPath::from_str($path);\n+                    let other = PosixPath::from_str($other);\n                     let res = path.path_relative_from(&other);\n-                    assert_eq!(res.map(|x| x.as_str()), $exp);\n+                    assert_eq!(res.chain_ref(|x| x.as_str()), $exp);\n                 }\n             )\n         )\n@@ -1317,9 +1325,11 @@ mod tests {\n         macro_rules! t(\n             ($path:expr, $exp:expr) => (\n                 {\n-                    let path = PosixPath::new($path);\n+                    let path = PosixPath::from_str($path);\n                     let comps = path.component_iter().to_owned_vec();\n-                    assert_eq!(comps.as_slice(), $exp);\n+                    let exp: &[&str] = $exp;\n+                    let exps = exp.iter().map(|x| x.as_bytes()).to_owned_vec();\n+                    assert_eq!(comps, exps);\n                 }\n             )\n         )"}]}