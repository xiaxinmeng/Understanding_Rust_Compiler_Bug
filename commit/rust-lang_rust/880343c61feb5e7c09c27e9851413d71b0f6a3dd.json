{"sha": "880343c61feb5e7c09c27e9851413d71b0f6a3dd", "node_id": "C_kwDOAAsO6NoAKDg4MDM0M2M2MWZlYjVlN2MwOWMyN2U5ODUxNDEzZDcxYjBmNmEzZGQ", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-02-07T15:06:55Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-02-21T06:09:11Z"}, "message": "update clippy", "tree": {"sha": "079c37b7392ba347b6a6b1b2d54587e757e2af67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/079c37b7392ba347b6a6b1b2d54587e757e2af67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/880343c61feb5e7c09c27e9851413d71b0f6a3dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/880343c61feb5e7c09c27e9851413d71b0f6a3dd", "html_url": "https://github.com/rust-lang/rust/commit/880343c61feb5e7c09c27e9851413d71b0f6a3dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/880343c61feb5e7c09c27e9851413d71b0f6a3dd/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1245131a118ee08a38cfd3a90952a0168d65cae2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1245131a118ee08a38cfd3a90952a0168d65cae2", "html_url": "https://github.com/rust-lang/rust/commit/1245131a118ee08a38cfd3a90952a0168d65cae2"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "ea9b68d1a40e3982a01dfa16b56541b940691cd3", "filename": "src/tools/clippy/clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/880343c61feb5e7c09c27e9851413d71b0f6a3dd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880343c61feb5e7c09c27e9851413d71b0f6a3dd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=880343c61feb5e7c09c27e9851413d71b0f6a3dd", "patch": "@@ -193,7 +193,7 @@ fn is_mutable_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, span: Span, tys: &m\n                 || KNOWN_WRAPPER_TYS.iter().any(|path| match_def_path(cx, adt.did, path))\n                     && substs.types().any(|ty| is_mutable_ty(cx, ty, span, tys))\n         },\n-        ty::Tuple(substs) => substs.types().any(|ty| is_mutable_ty(cx, ty, span, tys)),\n+        ty::Tuple(substs) => substs.iter().any(|ty| is_mutable_ty(cx, ty, span, tys)),\n         ty::Array(ty, _) | ty::Slice(ty) => is_mutable_ty(cx, ty, span, tys),\n         ty::RawPtr(ty::TypeAndMut { ty, mutbl }) | ty::Ref(_, ty, mutbl) => {\n             mutbl == hir::Mutability::Mut || is_mutable_ty(cx, ty, span, tys)"}, {"sha": "677b8cdf2ba0c80bc64dc4618a074cd6f349ec5b", "filename": "src/tools/clippy/clippy_lints/src/matches/redundant_pattern_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/880343c61feb5e7c09c27e9851413d71b0f6a3dd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880343c61feb5e7c09c27e9851413d71b0f6a3dd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs?ref=880343c61feb5e7c09c27e9851413d71b0f6a3dd", "patch": "@@ -58,8 +58,8 @@ fn type_needs_ordered_drop_inner<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, see\n         // This type doesn't implement drop, so no side effects here.\n         // Check if any component type has any.\n         match ty.kind() {\n-            ty::Tuple(_) => ty.tuple_fields().any(|ty| type_needs_ordered_drop_inner(cx, ty, seen)),\n-            ty::Array(ty, _) => type_needs_ordered_drop_inner(cx, *ty, seen),\n+            ty::Tuple(fields) => fields.iter().any(|ty| type_needs_ordered_drop_inner(cx, ty, seen)),\n+            &ty::Array(ty, _) => type_needs_ordered_drop_inner(cx, ty, seen),\n             ty::Adt(adt, subs) => adt\n                 .all_fields()\n                 .map(|f| f.ty(cx.tcx, subs))"}, {"sha": "ce9ca15430e421cd16455c52b80508ebda522b59", "filename": "src/tools/clippy/clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/880343c61feb5e7c09c27e9851413d71b0f6a3dd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880343c61feb5e7c09c27e9851413d71b0f6a3dd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs?ref=880343c61feb5e7c09c27e9851413d71b0f6a3dd", "patch": "@@ -142,7 +142,7 @@ fn is_interior_mutable_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, span: Sp\n             size.try_eval_usize(cx.tcx, cx.param_env).map_or(true, |u| u != 0)\n                 && is_interior_mutable_type(cx, inner_ty, span)\n         },\n-        Tuple(..) => ty.tuple_fields().any(|ty| is_interior_mutable_type(cx, ty, span)),\n+        Tuple(fields) => fields.iter().any(|ty| is_interior_mutable_type(cx, ty, span)),\n         Adt(def, substs) => {\n             // Special case for collections in `std` who's impl of `Hash` or `Ord` delegates to\n             // that of their type parameters.  Note: we don't include `HashSet` and `HashMap`"}, {"sha": "5168ca67b6abb86c135264f6bb7b273474e2db20", "filename": "src/tools/clippy/clippy_lints/src/non_send_fields_in_send_ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/880343c61feb5e7c09c27e9851413d71b0f6a3dd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880343c61feb5e7c09c27e9851413d71b0f6a3dd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_send_fields_in_send_ty.rs?ref=880343c61feb5e7c09c27e9851413d71b0f6a3dd", "patch": "@@ -202,8 +202,8 @@ fn ty_allowed_with_raw_pointer_heuristic<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'t\n \n     // The type is known to be `!Send` and `!Copy`\n     match ty.kind() {\n-        ty::Tuple(_) => ty\n-            .tuple_fields()\n+        ty::Tuple(fields) => fields\n+            .iter()\n             .all(|ty| ty_allowed_with_raw_pointer_heuristic(cx, ty, send_trait)),\n         ty::Array(ty, _) | ty::Slice(ty) => ty_allowed_with_raw_pointer_heuristic(cx, *ty, send_trait),\n         ty::Adt(_, substs) => {"}, {"sha": "a57c819cb22567f78a2f3c5fed977b3026ee65b1", "filename": "src/tools/clippy/clippy_lints/src/transmute/transmute_undefined_repr.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/880343c61feb5e7c09c27e9851413d71b0f6a3dd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880343c61feb5e7c09c27e9851413d71b0f6a3dd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs?ref=880343c61feb5e7c09c27e9851413d71b0f6a3dd", "patch": "@@ -2,7 +2,7 @@ use super::TRANSMUTE_UNDEFINED_REPR;\n use clippy_utils::diagnostics::span_lint_and_then;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n-use rustc_middle::ty::subst::{GenericArg, Subst};\n+use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, Ty, TypeAndMut};\n use rustc_span::Span;\n \n@@ -246,11 +246,10 @@ fn reduce_ty<'tcx>(cx: &LateContext<'tcx>, mut ty: Ty<'tcx>) -> ReducedTy<'tcx>\n                 continue;\n             },\n             ty::Tuple(args) => {\n-                let mut iter = args.iter().map(GenericArg::expect_ty);\n-                let Some(sized_ty) = iter.find(|ty| !is_zero_sized_ty(cx, *ty)) else {\n+                let Some(sized_ty) =  args.iter().find(|&ty| !is_zero_sized_ty(cx, ty)) else {\n                     return ReducedTy::OrderedFields(ty);\n                 };\n-                if iter.all(|ty| is_zero_sized_ty(cx, ty)) {\n+                if args.iter().all(|ty| is_zero_sized_ty(cx, ty)) {\n                     ty = sized_ty;\n                     continue;\n                 }"}, {"sha": "0d39226d970350f8e9a8e8a133d317aa4082d2a9", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/880343c61feb5e7c09c27e9851413d71b0f6a3dd/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880343c61feb5e7c09c27e9851413d71b0f6a3dd/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=880343c61feb5e7c09c27e9851413d71b0f6a3dd", "patch": "@@ -169,7 +169,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n             // because we don't want to lint functions returning empty arrays\n             is_must_use_ty(cx, *ty)\n         },\n-        ty::Tuple(substs) => substs.types().any(|ty| is_must_use_ty(cx, ty)),\n+        ty::Tuple(substs) => substs.iter().any(|ty| is_must_use_ty(cx, ty)),\n         ty::Opaque(ref def_id, _) => {\n             for (predicate, _) in cx.tcx.explicit_item_bounds(*def_id) {\n                 if let ty::PredicateKind::Trait(trait_predicate) = predicate.kind().skip_binder() {\n@@ -249,11 +249,11 @@ pub fn is_non_aggregate_primitive_type(ty: Ty<'_>) -> bool {\n /// Returns `true` if the given type is a primitive (a `bool` or `char`, any integer or\n /// floating-point number type, a `str`, or an array, slice, or tuple of those types).\n pub fn is_recursively_primitive_type(ty: Ty<'_>) -> bool {\n-    match ty.kind() {\n+    match *ty.kind() {\n         ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Str => true,\n         ty::Ref(_, inner, _) if *inner.kind() == ty::Str => true,\n-        ty::Array(inner_type, _) | ty::Slice(inner_type) => is_recursively_primitive_type(*inner_type),\n-        ty::Tuple(inner_types) => inner_types.types().all(is_recursively_primitive_type),\n+        ty::Array(inner_type, _) | ty::Slice(inner_type) => is_recursively_primitive_type(inner_type),\n+        ty::Tuple(inner_types) => inner_types.iter().all(is_recursively_primitive_type),\n         _ => false,\n     }\n }\n@@ -393,9 +393,9 @@ pub fn same_type_and_consts<'tcx>(a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n \n /// Checks if a given type looks safe to be uninitialized.\n pub fn is_uninit_value_valid_for_ty(cx: &LateContext<'_>, ty: Ty<'_>) -> bool {\n-    match ty.kind() {\n-        ty::Array(component, _) => is_uninit_value_valid_for_ty(cx, *component),\n-        ty::Tuple(types) => types.types().all(|ty| is_uninit_value_valid_for_ty(cx, ty)),\n+    match *ty.kind() {\n+        ty::Array(component, _) => is_uninit_value_valid_for_ty(cx, component),\n+        ty::Tuple(types) => types.iter().all(|ty| is_uninit_value_valid_for_ty(cx, ty)),\n         ty::Adt(adt, _) => cx.tcx.lang_items().maybe_uninit() == Some(adt.did),\n         _ => false,\n     }\n@@ -426,8 +426,8 @@ impl<'tcx> ExprFnSig<'tcx> {\n     pub fn input(self, i: usize) -> Binder<'tcx, Ty<'tcx>> {\n         match self {\n             Self::Sig(sig) => sig.input(i),\n-            Self::Closure(sig) => sig.input(0).map_bound(|ty| ty.tuple_element_ty(i).unwrap()),\n-            Self::Trait(inputs, _) => inputs.map_bound(|ty| ty.tuple_element_ty(i).unwrap()),\n+            Self::Closure(sig) => sig.input(0).map_bound(|ty| ty.tuple_fields()[i]),\n+            Self::Trait(inputs, _) => inputs.map_bound(|ty| ty.tuple_fields()[i]),\n         }\n     }\n "}]}