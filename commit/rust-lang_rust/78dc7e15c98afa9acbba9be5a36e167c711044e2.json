{"sha": "78dc7e15c98afa9acbba9be5a36e167c711044e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZGM3ZTE1Yzk4YWZhOWFjYmJhOWJlNWEzNmUxNjdjNzExMDQ0ZTI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-02T16:27:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-02T16:27:35Z"}, "message": "Rollup merge of #71772 - cjgillot:ensure, r=petrochenkov\n\nMark query function as must_use.\n\nAnd use the `ensure()` version when the result is not needed.", "tree": {"sha": "892948b4853a3c5d0e05d3ea8bc5de7d322f3ebb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/892948b4853a3c5d0e05d3ea8bc5de7d322f3ebb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78dc7e15c98afa9acbba9be5a36e167c711044e2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJerZ95CRBK7hj4Ov3rIwAAdHIIAAPdC/CbV0QpueXiY7y0aM/O\nfTZm7FC7XoYtDobOF2WNm+rPpcw/JCP5X7O5yI9Vw53ZZsiJuNNtGhNhKVMBFHlE\nCEXpOSRrEAFn52cSNzgk8fBpl3/WjPSpNfGob/To7qzZuDhCWBswca8zBytPsNxA\nxNNiQk0FSebYgvlqwRBQlLuqRSNVOR9stCOKw2LFSw8JnY2b29F3LibO84NLLFOW\na6p6TvTPy2h+IO3fh0iLrIJe/87IhRMzOJ2wkK6svmpqlrdWFJ12RBrq+ToNUdKL\nWheW1U4XNGFF6GOLjEY+BPQFzkm+9M1drdvryM4wy+2i2r41wtal/7U15N4o6VI=\n=J8i0\n-----END PGP SIGNATURE-----\n", "payload": "tree 892948b4853a3c5d0e05d3ea8bc5de7d322f3ebb\nparent 5747d1e0006442c6a1b49d0c5d9d711d9c27526c\nparent 6cde87def1b9de2c7746523d7f19fe3a76d1893d\nauthor Dylan DPC <dylan.dpc@gmail.com> 1588436855 +0200\ncommitter GitHub <noreply@github.com> 1588436855 +0200\n\nRollup merge of #71772 - cjgillot:ensure, r=petrochenkov\n\nMark query function as must_use.\n\nAnd use the `ensure()` version when the result is not needed.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78dc7e15c98afa9acbba9be5a36e167c711044e2", "html_url": "https://github.com/rust-lang/rust/commit/78dc7e15c98afa9acbba9be5a36e167c711044e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78dc7e15c98afa9acbba9be5a36e167c711044e2/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5747d1e0006442c6a1b49d0c5d9d711d9c27526c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5747d1e0006442c6a1b49d0c5d9d711d9c27526c", "html_url": "https://github.com/rust-lang/rust/commit/5747d1e0006442c6a1b49d0c5d9d711d9c27526c"}, {"sha": "6cde87def1b9de2c7746523d7f19fe3a76d1893d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cde87def1b9de2c7746523d7f19fe3a76d1893d", "html_url": "https://github.com/rust-lang/rust/commit/6cde87def1b9de2c7746523d7f19fe3a76d1893d"}], "stats": {"total": 113, "additions": 57, "deletions": 56}, "files": [{"sha": "c5b95905ea01246616986b52582e442668ba1622", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78dc7e15c98afa9acbba9be5a36e167c711044e2/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78dc7e15c98afa9acbba9be5a36e167c711044e2/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=78dc7e15c98afa9acbba9be5a36e167c711044e2", "patch": "@@ -539,7 +539,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     // unnecessarily.\n     if tcx.dep_graph.is_fully_enabled() {\n         for cgu in codegen_units {\n-            tcx.codegen_unit(cgu.name());\n+            tcx.ensure().codegen_unit(cgu.name());\n         }\n     }\n "}, {"sha": "952d3a01e3057c27a8d077ff6efde382e8ffa3f9", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78dc7e15c98afa9acbba9be5a36e167c711044e2/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78dc7e15c98afa9acbba9be5a36e167c711044e2/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=78dc7e15c98afa9acbba9be5a36e167c711044e2", "patch": "@@ -1729,8 +1729,8 @@ struct PrefetchVisitor<'tcx> {\n impl<'tcx> PrefetchVisitor<'tcx> {\n     fn prefetch_mir(&self, def_id: LocalDefId) {\n         if self.mir_keys.contains(&def_id) {\n-            self.tcx.optimized_mir(def_id);\n-            self.tcx.promoted_mir(def_id);\n+            self.tcx.ensure().optimized_mir(def_id);\n+            self.tcx.ensure().promoted_mir(def_id);\n         }\n     }\n }"}, {"sha": "82ee8ca29fa026cceda4cd94a04318615da5287e", "filename": "src/librustc_middle/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78dc7e15c98afa9acbba9be5a36e167c711044e2/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78dc7e15c98afa9acbba9be5a36e167c711044e2/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fplumbing.rs?ref=78dc7e15c98afa9acbba9be5a36e167c711044e2", "patch": "@@ -424,6 +424,7 @@ macro_rules! define_queries_inner {\n \n             $($(#[$attr])*\n             #[inline(always)]\n+            #[must_use]\n             pub fn $name(self, key: query_helper_param_ty!($($K)*))\n                 -> <queries::$name<$tcx> as QueryConfig<TyCtxt<$tcx>>>::Stored\n             {"}, {"sha": "a8487be77def3ef6e4a478372cdbfbe431a4ab65", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78dc7e15c98afa9acbba9be5a36e167c711044e2/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78dc7e15c98afa9acbba9be5a36e167c711044e2/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=78dc7e15c98afa9acbba9be5a36e167c711044e2", "patch": "@@ -641,7 +641,7 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: DefId) {\n             }\n             UnsafetyViolationKind::BorrowPacked(lint_hir_id) => {\n                 if let Some(impl_def_id) = builtin_derive_def_id(tcx, def_id) {\n-                    tcx.unsafe_derive_on_repr_packed(impl_def_id);\n+                    tcx.ensure().unsafe_derive_on_repr_packed(impl_def_id);\n                 } else {\n                     tcx.struct_span_lint_hir(\n                         SAFE_PACKED_BORROWS,"}, {"sha": "b54731d8881d190cf2d39d0ec596e6231948223e", "filename": "src/librustc_passes/check_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78dc7e15c98afa9acbba9be5a36e167c711044e2/src%2Flibrustc_passes%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78dc7e15c98afa9acbba9be5a36e167c711044e2/src%2Flibrustc_passes%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_attr.rs?ref=78dc7e15c98afa9acbba9be5a36e167c711044e2", "patch": "@@ -77,7 +77,7 @@ impl CheckAttrVisitor<'tcx> {\n         }\n \n         if matches!(target, Target::Fn | Target::Method(_) | Target::ForeignFn) {\n-            self.tcx.codegen_fn_attrs(self.tcx.hir().local_def_id(hir_id));\n+            self.tcx.ensure().codegen_fn_attrs(self.tcx.hir().local_def_id(hir_id));\n         }\n \n         self.check_repr(attrs, span, target, item, hir_id);\n@@ -390,7 +390,7 @@ impl CheckAttrVisitor<'tcx> {\n             }\n         }\n         if target == Target::Closure {\n-            self.tcx.codegen_fn_attrs(self.tcx.hir().local_def_id(expr.hir_id));\n+            self.tcx.ensure().codegen_fn_attrs(self.tcx.hir().local_def_id(expr.hir_id));\n         }\n     }\n "}, {"sha": "c431745198822e260226322ae40002c9c92ee5da", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78dc7e15c98afa9acbba9be5a36e167c711044e2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78dc7e15c98afa9acbba9be5a36e167c711044e2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=78dc7e15c98afa9acbba9be5a36e167c711044e2", "patch": "@@ -1748,11 +1748,11 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item<'tcx>) {\n         // Consts can play a role in type-checking, so they are included here.\n         hir::ItemKind::Static(..) => {\n             let def_id = tcx.hir().local_def_id(it.hir_id);\n-            tcx.typeck_tables_of(def_id);\n+            tcx.ensure().typeck_tables_of(def_id);\n             maybe_check_static_with_link_section(tcx, def_id, it.span);\n         }\n         hir::ItemKind::Const(..) => {\n-            tcx.typeck_tables_of(tcx.hir().local_def_id(it.hir_id));\n+            tcx.ensure().typeck_tables_of(tcx.hir().local_def_id(it.hir_id));\n         }\n         hir::ItemKind::Enum(ref enum_definition, _) => {\n             check_enum(tcx, it.span, &enum_definition.variants, it.hir_id);\n@@ -2670,7 +2670,7 @@ pub fn check_enum<'tcx>(\n \n     for v in vs {\n         if let Some(ref e) = v.disr_expr {\n-            tcx.typeck_tables_of(tcx.hir().local_def_id(e.hir_id));\n+            tcx.ensure().typeck_tables_of(tcx.hir().local_def_id(e.hir_id));\n         }\n     }\n "}, {"sha": "05d5a81217ce12d9fd8f33351c7f5196cd9eb751", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78dc7e15c98afa9acbba9be5a36e167c711044e2/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78dc7e15c98afa9acbba9be5a36e167c711044e2/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=78dc7e15c98afa9acbba9be5a36e167c711044e2", "patch": "@@ -156,7 +156,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n fn coherent_trait(tcx: TyCtxt<'_>, def_id: DefId) {\n     // Trigger building the specialization graph for the trait. This will detect and report any\n     // overlap errors.\n-    tcx.specialization_graph_of(def_id);\n+    tcx.ensure().specialization_graph_of(def_id);\n \n     let impls = tcx.hir().trait_impls(def_id);\n     for &hir_id in impls {"}, {"sha": "f7318e3b9fe2f692da913b26b1f234d5e0212724", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/78dc7e15c98afa9acbba9be5a36e167c711044e2/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78dc7e15c98afa9acbba9be5a36e167c711044e2/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=78dc7e15c98afa9acbba9be5a36e167c711044e2", "patch": "@@ -207,12 +207,12 @@ impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n                 hir::GenericParamKind::Lifetime { .. } => {}\n                 hir::GenericParamKind::Type { default: Some(_), .. } => {\n                     let def_id = self.tcx.hir().local_def_id(param.hir_id);\n-                    self.tcx.type_of(def_id);\n+                    self.tcx.ensure().type_of(def_id);\n                 }\n                 hir::GenericParamKind::Type { .. } => {}\n                 hir::GenericParamKind::Const { .. } => {\n                     let def_id = self.tcx.hir().local_def_id(param.hir_id);\n-                    self.tcx.type_of(def_id);\n+                    self.tcx.ensure().type_of(def_id);\n                 }\n             }\n         }\n@@ -222,8 +222,8 @@ impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n         if let hir::ExprKind::Closure(..) = expr.kind {\n             let def_id = self.tcx.hir().local_def_id(expr.hir_id);\n-            self.tcx.generics_of(def_id);\n-            self.tcx.type_of(def_id);\n+            self.tcx.ensure().generics_of(def_id);\n+            self.tcx.ensure().type_of(def_id);\n         }\n         intravisit::walk_expr(self, expr);\n     }\n@@ -635,47 +635,47 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::HirId) {\n         hir::ItemKind::ForeignMod(ref foreign_mod) => {\n             for item in foreign_mod.items {\n                 let def_id = tcx.hir().local_def_id(item.hir_id);\n-                tcx.generics_of(def_id);\n-                tcx.type_of(def_id);\n-                tcx.predicates_of(def_id);\n+                tcx.ensure().generics_of(def_id);\n+                tcx.ensure().type_of(def_id);\n+                tcx.ensure().predicates_of(def_id);\n                 if let hir::ForeignItemKind::Fn(..) = item.kind {\n-                    tcx.fn_sig(def_id);\n+                    tcx.ensure().fn_sig(def_id);\n                 }\n             }\n         }\n         hir::ItemKind::Enum(ref enum_definition, _) => {\n-            tcx.generics_of(def_id);\n-            tcx.type_of(def_id);\n-            tcx.predicates_of(def_id);\n+            tcx.ensure().generics_of(def_id);\n+            tcx.ensure().type_of(def_id);\n+            tcx.ensure().predicates_of(def_id);\n             convert_enum_variant_types(tcx, def_id.to_def_id(), &enum_definition.variants);\n         }\n         hir::ItemKind::Impl { .. } => {\n-            tcx.generics_of(def_id);\n-            tcx.type_of(def_id);\n-            tcx.impl_trait_ref(def_id);\n-            tcx.predicates_of(def_id);\n+            tcx.ensure().generics_of(def_id);\n+            tcx.ensure().type_of(def_id);\n+            tcx.ensure().impl_trait_ref(def_id);\n+            tcx.ensure().predicates_of(def_id);\n         }\n         hir::ItemKind::Trait(..) => {\n-            tcx.generics_of(def_id);\n-            tcx.trait_def(def_id);\n+            tcx.ensure().generics_of(def_id);\n+            tcx.ensure().trait_def(def_id);\n             tcx.at(it.span).super_predicates_of(def_id);\n-            tcx.predicates_of(def_id);\n+            tcx.ensure().predicates_of(def_id);\n         }\n         hir::ItemKind::TraitAlias(..) => {\n-            tcx.generics_of(def_id);\n+            tcx.ensure().generics_of(def_id);\n             tcx.at(it.span).super_predicates_of(def_id);\n-            tcx.predicates_of(def_id);\n+            tcx.ensure().predicates_of(def_id);\n         }\n         hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {\n-            tcx.generics_of(def_id);\n-            tcx.type_of(def_id);\n-            tcx.predicates_of(def_id);\n+            tcx.ensure().generics_of(def_id);\n+            tcx.ensure().type_of(def_id);\n+            tcx.ensure().predicates_of(def_id);\n \n             for f in struct_def.fields() {\n                 let def_id = tcx.hir().local_def_id(f.hir_id);\n-                tcx.generics_of(def_id);\n-                tcx.type_of(def_id);\n-                tcx.predicates_of(def_id);\n+                tcx.ensure().generics_of(def_id);\n+                tcx.ensure().type_of(def_id);\n+                tcx.ensure().predicates_of(def_id);\n             }\n \n             if let Some(ctor_hir_id) = struct_def.ctor_hir_id() {\n@@ -691,11 +691,11 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::HirId) {\n         | hir::ItemKind::Static(..)\n         | hir::ItemKind::Const(..)\n         | hir::ItemKind::Fn(..) => {\n-            tcx.generics_of(def_id);\n-            tcx.type_of(def_id);\n-            tcx.predicates_of(def_id);\n+            tcx.ensure().generics_of(def_id);\n+            tcx.ensure().type_of(def_id);\n+            tcx.ensure().predicates_of(def_id);\n             if let hir::ItemKind::Fn(..) = it.kind {\n-                tcx.fn_sig(def_id);\n+                tcx.ensure().fn_sig(def_id);\n             }\n         }\n     }\n@@ -704,20 +704,20 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::HirId) {\n fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::HirId) {\n     let trait_item = tcx.hir().expect_trait_item(trait_item_id);\n     let def_id = tcx.hir().local_def_id(trait_item.hir_id);\n-    tcx.generics_of(def_id);\n+    tcx.ensure().generics_of(def_id);\n \n     match trait_item.kind {\n         hir::TraitItemKind::Fn(..) => {\n-            tcx.type_of(def_id);\n-            tcx.fn_sig(def_id);\n+            tcx.ensure().type_of(def_id);\n+            tcx.ensure().fn_sig(def_id);\n         }\n \n         hir::TraitItemKind::Const(.., Some(_)) => {\n-            tcx.type_of(def_id);\n+            tcx.ensure().type_of(def_id);\n         }\n \n         hir::TraitItemKind::Const(..) | hir::TraitItemKind::Type(_, Some(_)) => {\n-            tcx.type_of(def_id);\n+            tcx.ensure().type_of(def_id);\n             // Account for `const C: _;` and `type T = _;`.\n             let mut visitor = PlaceholderHirTyCollector::default();\n             visitor.visit_trait_item(trait_item);\n@@ -727,18 +727,18 @@ fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::HirId) {\n         hir::TraitItemKind::Type(_, None) => {}\n     };\n \n-    tcx.predicates_of(def_id);\n+    tcx.ensure().predicates_of(def_id);\n }\n \n fn convert_impl_item(tcx: TyCtxt<'_>, impl_item_id: hir::HirId) {\n     let def_id = tcx.hir().local_def_id(impl_item_id);\n-    tcx.generics_of(def_id);\n-    tcx.type_of(def_id);\n-    tcx.predicates_of(def_id);\n+    tcx.ensure().generics_of(def_id);\n+    tcx.ensure().type_of(def_id);\n+    tcx.ensure().predicates_of(def_id);\n     let impl_item = tcx.hir().expect_impl_item(impl_item_id);\n     match impl_item.kind {\n         hir::ImplItemKind::Fn(..) => {\n-            tcx.fn_sig(def_id);\n+            tcx.ensure().fn_sig(def_id);\n         }\n         hir::ImplItemKind::TyAlias(_) | hir::ImplItemKind::OpaqueTy(_) => {\n             // Account for `type T = _;`\n@@ -752,9 +752,9 @@ fn convert_impl_item(tcx: TyCtxt<'_>, impl_item_id: hir::HirId) {\n \n fn convert_variant_ctor(tcx: TyCtxt<'_>, ctor_id: hir::HirId) {\n     let def_id = tcx.hir().local_def_id(ctor_id);\n-    tcx.generics_of(def_id);\n-    tcx.type_of(def_id);\n-    tcx.predicates_of(def_id);\n+    tcx.ensure().generics_of(def_id);\n+    tcx.ensure().type_of(def_id);\n+    tcx.ensure().predicates_of(def_id);\n }\n \n fn convert_enum_variant_types(tcx: TyCtxt<'_>, def_id: DefId, variants: &[hir::Variant<'_>]) {\n@@ -790,9 +790,9 @@ fn convert_enum_variant_types(tcx: TyCtxt<'_>, def_id: DefId, variants: &[hir::V\n \n         for f in variant.data.fields() {\n             let def_id = tcx.hir().local_def_id(f.hir_id);\n-            tcx.generics_of(def_id);\n-            tcx.type_of(def_id);\n-            tcx.predicates_of(def_id);\n+            tcx.ensure().generics_of(def_id);\n+            tcx.ensure().type_of(def_id);\n+            tcx.ensure().predicates_of(def_id);\n         }\n \n         // Convert the ctor, if any. This also registers the variant as"}]}