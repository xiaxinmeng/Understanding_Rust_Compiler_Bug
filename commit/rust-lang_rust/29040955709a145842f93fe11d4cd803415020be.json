{"sha": "29040955709a145842f93fe11d4cd803415020be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MDQwOTU1NzA5YTE0NTg0MmY5M2ZlMTFkNGNkODAzNDE1MDIwYmU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-06T01:50:01Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-07T20:34:32Z"}, "message": "rustc: Implement the Drop trait. r=brson", "tree": {"sha": "cd27b595087e924d76c4ae1fcb7a91806cb95a44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd27b595087e924d76c4ae1fcb7a91806cb95a44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29040955709a145842f93fe11d4cd803415020be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29040955709a145842f93fe11d4cd803415020be", "html_url": "https://github.com/rust-lang/rust/commit/29040955709a145842f93fe11d4cd803415020be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29040955709a145842f93fe11d4cd803415020be/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70886d314d0e49fe652f022139b03c2ddaca7b14", "url": "https://api.github.com/repos/rust-lang/rust/commits/70886d314d0e49fe652f022139b03c2ddaca7b14", "html_url": "https://github.com/rust-lang/rust/commit/70886d314d0e49fe652f022139b03c2ddaca7b14"}], "stats": {"total": 223, "additions": 200, "deletions": 23}, "files": [{"sha": "0d542441103df28a07bd18631609c4baaa84f01c", "filename": "doc/tutorial.md", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/29040955709a145842f93fe11d4cd803415020be/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/29040955709a145842f93fe11d4cd803415020be/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=29040955709a145842f93fe11d4cd803415020be", "patch": "@@ -751,25 +751,6 @@ match mypoint {\n }\n ~~~\n \n-Structs are the only type in Rust that may have user-defined\n-destructors, defined with `drop` blocks. Inside a `drop`, the name\n-`self` refers to the struct's value.\n-\n-~~~\n-struct TimeBomb {\n-    explosivity: uint,\n-\n-    drop {\n-        for iter::repeat(self.explosivity) {\n-            io::println(fmt!(\"blam!\"));\n-        }\n-    }\n-}\n-~~~\n-\n-> ***Note***: This destructor syntax is temporary. Eventually destructors\n-> will be defined for any type using [traits](#traits).\n-\n ## Enums\n \n Enums are datatypes that have several alternate representations. For\n@@ -1909,8 +1890,8 @@ traits are automatically derived and implemented for all applicable\n types by the compiler, and may not be overridden:\n \n * `Copy` - Types that can be copied: either implicitly, or explicitly with the\n-  `copy` operator. All types are copyable unless they are classes\n-  with destructors or otherwise contain classes with destructors.\n+  `copy` operator. All types are copyable unless they have destructors or\n+  contain types with destructors.\n \n * `Send` - Sendable (owned) types. All types are sendable unless they\n   contain managed boxes, managed closures, or otherwise managed\n@@ -1922,6 +1903,28 @@ types by the compiler, and may not be overridden:\n > ***Note:*** These three traits were referred to as 'kinds' in earlier\n > iterations of the language, and often still are.\n \n+There is also a special trait known as `Drop`. This trait defines one method\n+called `finalize`, which is automatically called when value of the a type that\n+implements this trait is destroyed, either because the value went out of scope\n+or because the garbage collector reclaimed it.\n+\n+~~~\n+struct TimeBomb {\n+    explosivity: uint,\n+}\n+\n+impl TimeBomb : Drop {\n+    fn finalize() {\n+        for iter::repeat(self.explosivity) {\n+            io::println(\"blam!\");\n+        }\n+    }\n+}\n+~~~\n+\n+It is illegal to call `finalize` directly. Only code inserted by the compiler\n+may call it.\n+\n ## Declaring and implementing traits\n \n A trait consists of a set of methods, without bodies, or may be empty,"}, {"sha": "1be217dac9f9f7f396d5dca341ea4947d9ad9994", "filename": "src/libcore/core.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29040955709a145842f93fe11d4cd803415020be/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29040955709a145842f93fe11d4cd803415020be/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=29040955709a145842f93fe11d4cd803415020be", "patch": "@@ -28,6 +28,8 @@ pub use to_str::ToStr;\n #[cfg(notest)]\n pub use ops::{Const, Copy, Send, Owned};\n #[cfg(notest)]\n+pub use ops::{Drop};\n+#[cfg(notest)]\n pub use ops::{Add, Sub, Mul, Div, Modulo, Neg, BitAnd, BitOr, BitXor};\n #[cfg(notest)]\n pub use ops::{Shl, Shr, Index};\n@@ -38,6 +40,8 @@ extern mod coreops(name = \"core\", vers = \"0.5\");\n #[cfg(test)]\n pub use coreops::ops::{Const, Copy, Send, Owned};\n #[cfg(test)]\n+pub use coreops::ops::{Drop};\n+#[cfg(test)]\n pub use coreops::ops::{Add, Sub, Mul, Div, Modulo, Neg, BitAnd, BitOr};\n #[cfg(test)]\n pub use coreops::ops::{BitXor};"}, {"sha": "96b96d0f27ad1fe0ebe22fa8f3be92da6231b845", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29040955709a145842f93fe11d4cd803415020be/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29040955709a145842f93fe11d4cd803415020be/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=29040955709a145842f93fe11d4cd803415020be", "patch": "@@ -23,6 +23,11 @@ pub trait Owned {\n     // Empty.\n }\n \n+#[lang=\"drop\"]\n+pub trait Drop {\n+    fn finalize();  // XXX: Rename to \"drop\"? --pcwalton\n+}\n+\n #[lang=\"add\"]\n pub trait Add<RHS,Result> {\n     pure fn add(rhs: &RHS) -> Result;"}, {"sha": "b1d68bee2598f46f83718453f26a0939096afd8c", "filename": "src/rustc/middle/lang_items.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29040955709a145842f93fe11d4cd803415020be/src%2Frustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29040955709a145842f93fe11d4cd803415020be/src%2Frustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flang_items.rs?ref=29040955709a145842f93fe11d4cd803415020be", "patch": "@@ -28,6 +28,8 @@ struct LanguageItems {\n     mut send_trait: Option<def_id>,\n     mut owned_trait: Option<def_id>,\n \n+    mut drop_trait: Option<def_id>,\n+\n     mut add_trait: Option<def_id>,\n     mut sub_trait: Option<def_id>,\n     mut mul_trait: Option<def_id>,\n@@ -59,6 +61,8 @@ mod language_items {\n             send_trait: None,\n             owned_trait: None,\n \n+            drop_trait: None,\n+\n             add_trait: None,\n             sub_trait: None,\n             mul_trait: None,\n@@ -94,6 +98,8 @@ fn LanguageItemCollector(crate: @crate, session: Session,\n     item_refs.insert(~\"send\", &mut items.send_trait);\n     item_refs.insert(~\"owned\", &mut items.owned_trait);\n \n+    item_refs.insert(~\"drop\", &mut items.drop_trait);\n+\n     item_refs.insert(~\"add\", &mut items.add_trait);\n     item_refs.insert(~\"sub\", &mut items.sub_trait);\n     item_refs.insert(~\"mul\", &mut items.mul_trait);"}, {"sha": "5e1bccb6c9d5add934f441cde0a189c83490be58", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/29040955709a145842f93fe11d4cd803415020be/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29040955709a145842f93fe11d4cd803415020be/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=29040955709a145842f93fe11d4cd803415020be", "patch": "@@ -404,7 +404,16 @@ type ctxt =\n       // A mapping from the def ID of an impl to the IDs of the derived\n       // methods within it.\n       automatically_derived_methods_for_impl:\n-            HashMap<ast::def_id, @~[ast::def_id]>\n+            HashMap<ast::def_id, @~[ast::def_id]>,\n+\n+      // A mapping from the def ID of an enum or struct type to the def ID\n+      // of the method that implements its destructor. If the type is not\n+      // present in this map, it does not have a destructor. This map is\n+      // populated during the coherence phase of typechecking.\n+      destructor_for_type: HashMap<ast::def_id, ast::def_id>,\n+\n+      // A method will be in this list if and only if it is a destructor.\n+      destructors: HashMap<ast::def_id, ()>\n       };\n \n enum tbox_flag {\n@@ -921,7 +930,9 @@ fn mk_ctxt(s: session::Session,\n       deriving_struct_methods: HashMap(),\n       deriving_enum_methods: HashMap(),\n       automatically_derived_methods: HashMap(),\n-      automatically_derived_methods_for_impl: HashMap()}\n+      automatically_derived_methods_for_impl: HashMap(),\n+      destructor_for_type: HashMap(),\n+      destructors: HashMap()}\n }\n \n \n@@ -3580,6 +3591,11 @@ fn item_path_str(cx: ctxt, id: ast::def_id) -> ~str {\n /* If class_id names a class with a dtor, return Some(the dtor's id).\n    Otherwise return none. */\n fn ty_dtor(cx: ctxt, class_id: def_id) -> Option<def_id> {\n+    match cx.destructor_for_type.find(class_id) {\n+        Some(method_def_id) => return Some(method_def_id),\n+        None => {}  // Continue.\n+    }\n+\n     if is_local(class_id) {\n        match cx.items.find(class_id.node) {\n            Some(ast_map::node_item(@{"}, {"sha": "8afd28a5914683ab7f6db9c303235d9e5d6138b0", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/29040955709a145842f93fe11d4cd803415020be/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29040955709a145842f93fe11d4cd803415020be/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=29040955709a145842f93fe11d4cd803415020be", "patch": "@@ -774,6 +774,7 @@ impl LookupContext {\n         let fty = self.fn_ty_from_origin(&candidate.origin);\n \n         self.enforce_trait_instance_limitations(fty, candidate);\n+        self.enforce_drop_trait_limitations(candidate);\n \n         // before we only checked whether self_ty could be a subtype\n         // of rcvr_ty; now we actually make it so (this may cause\n@@ -858,6 +859,25 @@ impl LookupContext {\n         }\n     }\n \n+    fn enforce_drop_trait_limitations(&self, candidate: &Candidate) {\n+        // No code can call the finalize method explicitly.\n+        let bad;\n+        match candidate.origin {\n+            method_static(method_id) | method_self(method_id, _) => {\n+                bad = self.tcx().destructors.contains_key(method_id);\n+            }\n+            method_param({trait_id: trait_id, _}) |\n+            method_trait(trait_id, _, _) => {\n+                bad = self.tcx().destructor_for_type.contains_key(trait_id);\n+            }\n+        }\n+\n+        if bad {\n+            self.tcx().sess.span_err(self.expr.span,\n+                                     ~\"explicit call to destructor\");\n+        }\n+    }\n+\n     fn is_relevant(&self, self_ty: ty::t, candidate: &Candidate) -> bool {\n         debug!(\"is_relevant(self_ty=%s, candidate=%s)\",\n                self.ty_to_str(self_ty), self.cand_to_str(candidate));"}, {"sha": "26c559fd135c25519d4c9a2d8c9f08a30f420f0d", "filename": "src/rustc/middle/typeck/coherence.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/29040955709a145842f93fe11d4cd803415020be/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29040955709a145842f93fe11d4cd803415020be/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=29040955709a145842f93fe11d4cd803415020be", "patch": "@@ -228,6 +228,11 @@ impl CoherenceChecker {\n         // coherence checks, because we ensure by construction that no errors\n         // can happen at link time.\n         self.add_external_crates();\n+\n+        // Populate the table of destructors. It might seem a bit strange to\n+        // do this here, but it's actually the most convenient place, since\n+        // the coherence tables contain the trait -> type mappings.\n+        self.populate_destructor_table();\n     }\n \n     fn check_implementation(item: @item, associated_traits: ~[@trait_ref]) {\n@@ -913,6 +918,58 @@ impl CoherenceChecker {\n             }\n         }\n     }\n+\n+    //\n+    // Destructors\n+    //\n+\n+    fn populate_destructor_table() {\n+        let coherence_info = &self.crate_context.coherence_info;\n+        let tcx = self.crate_context.tcx;\n+        let drop_trait = tcx.lang_items.drop_trait.get();\n+        let impls_opt = coherence_info.extension_methods.find(drop_trait);\n+\n+        let impls;\n+        match impls_opt {\n+            None => return, // No types with (new-style) destructors present.\n+            Some(found_impls) => impls = found_impls\n+        }\n+\n+        for impls.each |impl_info| {\n+            if impl_info.methods.len() < 1 {\n+                // We'll error out later. For now, just don't ICE.\n+                loop;\n+            }\n+            let method_def_id = impl_info.methods[0].did;\n+\n+            let self_type = self.get_self_type_for_implementation(*impl_info);\n+            match ty::get(self_type.ty).sty {\n+                ty::ty_class(type_def_id, _) => {\n+                    tcx.destructor_for_type.insert(type_def_id, method_def_id);\n+                    tcx.destructors.insert(method_def_id, ());\n+                }\n+                _ => {\n+                    // Destructors only work on nominal types.\n+                    if impl_info.did.crate == ast::local_crate {\n+                        match tcx.items.find(impl_info.did.node) {\n+                            Some(ast_map::node_item(@item, _)) => {\n+                                tcx.sess.span_err(item.span,\n+                                                  ~\"the Drop trait may only \\\n+                                                    be implemented on \\\n+                                                    structures\");\n+                            }\n+                            _ => {\n+                                tcx.sess.bug(~\"didn't find impl in ast map\");\n+                            }\n+                        }\n+                    } else {\n+                        tcx.sess.bug(~\"found external impl of Drop trait on \\\n+                                       something other than a struct\");\n+                    }\n+                }\n+            }\n+        }\n+    }\n }\n \n fn check_coherence(crate_context: @crate_ctxt, crate: @crate) {"}, {"sha": "8ee72d9d2fdccc503891412787ba2eb800a442f9", "filename": "src/test/compile-fail/drop-on-non-struct.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29040955709a145842f93fe11d4cd803415020be/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29040955709a145842f93fe11d4cd803415020be/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs?ref=29040955709a145842f93fe11d4cd803415020be", "patch": "@@ -0,0 +1,12 @@\n+type Foo = @[u8];\n+\n+impl Foo : Drop {   //~ ERROR the Drop trait may only be implemented\n+    fn finalize() {\n+        io::println(\"kaboom\");\n+    }\n+}\n+\n+fn main() {\n+}\n+\n+"}, {"sha": "56af671852b580f951a34a2d2769bd1a9c7b1a9f", "filename": "src/test/compile-fail/explicit-call-to-dtor.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/29040955709a145842f93fe11d4cd803415020be/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29040955709a145842f93fe11d4cd803415020be/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-dtor.rs?ref=29040955709a145842f93fe11d4cd803415020be", "patch": "@@ -0,0 +1,15 @@\n+struct Foo {\n+    x: int\n+}\n+\n+impl Foo : Drop {\n+    fn finalize() {\n+        io::println(\"kaboom\");\n+    }\n+}\n+\n+fn main() {\n+    let x = Foo { x: 3 };\n+    x.finalize();   //~ ERROR explicit call to destructor\n+}\n+"}, {"sha": "c7c2748235acc91be84005588fd340b96c761960", "filename": "src/test/compile-fail/explicit-call-to-supertrait-dtor.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/29040955709a145842f93fe11d4cd803415020be/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29040955709a145842f93fe11d4cd803415020be/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexplicit-call-to-supertrait-dtor.rs?ref=29040955709a145842f93fe11d4cd803415020be", "patch": "@@ -0,0 +1,25 @@\n+struct Foo {\n+    x: int\n+}\n+\n+trait Bar : Drop {\n+    fn blah();\n+}\n+\n+impl Foo : Drop {\n+    fn finalize() {\n+        io::println(\"kaboom\");\n+    }\n+}\n+\n+impl Foo : Bar {\n+    fn blah() {\n+        self.finalize();    //~ ERROR explicit call to destructor\n+    }\n+}\n+\n+fn main() {\n+    let x = Foo { x: 3 };\n+}\n+\n+"}, {"sha": "3a379a4c9dc4f96c8edc76daed2f46a85d4cb65e", "filename": "src/test/run-pass/drop-trait.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/29040955709a145842f93fe11d4cd803415020be/src%2Ftest%2Frun-pass%2Fdrop-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29040955709a145842f93fe11d4cd803415020be/src%2Ftest%2Frun-pass%2Fdrop-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait.rs?ref=29040955709a145842f93fe11d4cd803415020be", "patch": "@@ -0,0 +1,14 @@\n+struct Foo {\n+    x: int\n+}\n+\n+impl Foo : Drop {\n+    fn finalize() {\n+        io::println(\"bye\");\n+    }\n+}\n+\n+fn main() {\n+    let x: Foo = Foo { x: 3 };\n+}\n+"}]}