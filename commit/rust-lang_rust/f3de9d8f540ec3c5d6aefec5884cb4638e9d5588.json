{"sha": "f3de9d8f540ec3c5d6aefec5884cb4638e9d5588", "node_id": "C_kwDOAAsO6NoAKGYzZGU5ZDhmNTQwZWMzYzVkNmFlZmVjNTg4NGNiNDYzOGU5ZDU1ODg", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2023-04-29T15:45:38Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2023-04-29T16:31:53Z"}, "message": "fix: don't wavy-underline iterator chains", "tree": {"sha": "b30c21fa58a549e13b6cfd2c2614170ee5ca2625", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b30c21fa58a549e13b6cfd2c2614170ee5ca2625"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3de9d8f540ec3c5d6aefec5884cb4638e9d5588", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3de9d8f540ec3c5d6aefec5884cb4638e9d5588", "html_url": "https://github.com/rust-lang/rust/commit/f3de9d8f540ec3c5d6aefec5884cb4638e9d5588", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3de9d8f540ec3c5d6aefec5884cb4638e9d5588/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07e535b6df9877bf2493bcf9411df479f03bd84e", "url": "https://api.github.com/repos/rust-lang/rust/commits/07e535b6df9877bf2493bcf9411df479f03bd84e", "html_url": "https://github.com/rust-lang/rust/commit/07e535b6df9877bf2493bcf9411df479f03bd84e"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "b49141b55b735c5bde460e3cd4c709ecbd7d7df7", "filename": "crates/ide-diagnostics/src/handlers/type_mismatch.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f3de9d8f540ec3c5d6aefec5884cb4638e9d5588/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3de9d8f540ec3c5d6aefec5884cb4638e9d5588/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs?ref=f3de9d8f540ec3c5d6aefec5884cb4638e9d5588", "patch": "@@ -1,7 +1,6 @@\n use either::Either;\n use hir::{db::ExpandDatabase, ClosureStyle, HirDisplay, InFile, Type};\n use ide_db::{famous_defs::FamousDefs, source_change::SourceChange};\n-use stdx::never;\n use syntax::{\n     ast::{self, BlockExpr, ExprStmt},\n     AstNode, AstPtr,\n@@ -18,24 +17,20 @@ pub(crate) fn type_mismatch(ctx: &DiagnosticsContext<'_>, d: &hir::TypeMismatch)\n     let display_range = match &d.expr_or_pat {\n         Either::Left(expr) => {\n             adjusted_display_range::<ast::Expr>(ctx, expr.clone().map(|it| it.into()), &|expr| {\n-                if !expr.is_block_like() {\n-                    return None;\n-                }\n-\n                 let salient_token_range = match expr {\n                     ast::Expr::IfExpr(it) => it.if_token()?.text_range(),\n                     ast::Expr::LoopExpr(it) => it.loop_token()?.text_range(),\n                     ast::Expr::ForExpr(it) => it.for_token()?.text_range(),\n                     ast::Expr::WhileExpr(it) => it.while_token()?.text_range(),\n                     ast::Expr::BlockExpr(it) => it.stmt_list()?.r_curly_token()?.text_range(),\n                     ast::Expr::MatchExpr(it) => it.match_token()?.text_range(),\n-                    _ => {\n-                        never!();\n-                        return None;\n-                    }\n+                    ast::Expr::MethodCallExpr(it) => it.name_ref()?.ident_token()?.text_range(),\n+                    ast::Expr::FieldExpr(it) => it.name_ref()?.ident_token()?.text_range(),\n+                    ast::Expr::AwaitExpr(it) => it.await_token()?.text_range(),\n+                    _ => return None,\n                 };\n \n-                cov_mark::hit!(type_mismatch_on_block);\n+                cov_mark::hit!(type_mismatch_range_adjustment);\n                 Some(salient_token_range)\n             })\n         }\n@@ -625,8 +620,8 @@ fn f() {\n     }\n \n     #[test]\n-    fn type_mismatch_on_block() {\n-        cov_mark::check!(type_mismatch_on_block);\n+    fn type_mismatch_range_adjustment() {\n+        cov_mark::check!(type_mismatch_range_adjustment);\n         check_diagnostics(\n             r#\"\n fn f() -> i32 {\n@@ -636,9 +631,15 @@ fn f() -> i32 {\n   }\n //^ error: expected i32, found ()\n \n-fn h() -> i32 {\n+fn g() -> i32 {\n     while true {}\n } //^^^^^ error: expected i32, found ()\n+\n+struct S;\n+impl S { fn foo(&self) -> &S { self } }\n+fn h() {\n+    let _: i32 = S.foo().foo().foo();\n+}                            //^^^ error: expected i32, found &S\n \"#,\n         );\n     }"}]}