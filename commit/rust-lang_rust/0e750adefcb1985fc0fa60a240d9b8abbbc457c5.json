{"sha": "0e750adefcb1985fc0fa60a240d9b8abbbc457c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNzUwYWRlZmNiMTk4NWZjMGZhNjBhMjQwZDliOGFiYmJjNDU3YzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-24T03:31:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-24T03:31:36Z"}, "message": "auto merge of #13675 : sfackler/rust/taskbuilder-new, r=alexcrichton\n\nThe constructor for `TaskBuilder` is being changed to an associated\r\nfunction called `new` for consistency with the rest of the standard\r\nlibrary.\r\n\r\nCloses #13666\r\n\r\n[breaking-change]", "tree": {"sha": "da3413000671780b7ee0391e91ae8edc60a42b36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da3413000671780b7ee0391e91ae8edc60a42b36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e750adefcb1985fc0fa60a240d9b8abbbc457c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e750adefcb1985fc0fa60a240d9b8abbbc457c5", "html_url": "https://github.com/rust-lang/rust/commit/0e750adefcb1985fc0fa60a240d9b8abbbc457c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d05e7f9cdd76887de75f46b5e47d2685bec6520", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d05e7f9cdd76887de75f46b5e47d2685bec6520", "html_url": "https://github.com/rust-lang/rust/commit/3d05e7f9cdd76887de75f46b5e47d2685bec6520"}, {"sha": "adeeadf49f04faf41eefaf90e16e2df90e6b8f10", "url": "https://api.github.com/repos/rust-lang/rust/commits/adeeadf49f04faf41eefaf90e16e2df90e6b8f10", "html_url": "https://github.com/rust-lang/rust/commit/adeeadf49f04faf41eefaf90e16e2df90e6b8f10"}], "stats": {"total": 120, "additions": 60, "deletions": 60}, "files": [{"sha": "8ffba905773bb163bc5858ed9bdd8f981ce9f4a3", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=0e750adefcb1985fc0fa60a240d9b8abbbc457c5", "patch": "@@ -55,7 +55,7 @@ use std::cmp;\n use std::io;\n use std::os;\n use std::str;\n-use std::task;\n+use std::task::TaskBuilder;\n use syntax::ast;\n use syntax::diagnostic::Emitter;\n use syntax::diagnostic;\n@@ -374,7 +374,7 @@ pub fn monitor(f: proc():Send) {\n     #[cfg(not(rtopt))]\n     static STACK_SIZE: uint = 20000000; // 20MB\n \n-    let mut task_builder = task::task().named(\"rustc\");\n+    let mut task_builder = TaskBuilder::new().named(\"rustc\");\n \n     // FIXME: Hacks on hacks. If the env is trying to override the stack size\n     // then *don't* set it explicitly."}, {"sha": "f8b3d25033c81839a49b33ebae4a59156b493304", "filename": "src/libstd/task.rs", "status": "modified", "additions": 27, "deletions": 34, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=0e750adefcb1985fc0fa60a240d9b8abbbc457c5", "patch": "@@ -91,19 +91,17 @@ pub struct TaskBuilder {\n     nocopy: Option<marker::NoCopy>,\n }\n \n-/**\n- * Generate the base configuration for spawning a task, off of which more\n- * configuration methods can be chained.\n- */\n-pub fn task() -> TaskBuilder {\n-    TaskBuilder {\n-        opts: TaskOpts::new(),\n-        gen_body: None,\n-        nocopy: None,\n+impl TaskBuilder {\n+     /// Generate the base configuration for spawning a task, off of which more\n+     /// configuration methods can be chained.\n+    pub fn new() -> TaskBuilder {\n+        TaskBuilder {\n+            opts: TaskOpts::new(),\n+            gen_body: None,\n+            nocopy: None,\n+        }\n     }\n-}\n \n-impl TaskBuilder {\n     /// Get a future representing the exit status of the task.\n     ///\n     /// Taking the value of the future will block until the child task\n@@ -233,22 +231,17 @@ impl TaskOpts {\n /// Sets up a new task with its own call stack and schedules it to run\n /// the provided unique closure.\n ///\n-/// This function is equivalent to `task().spawn(f)`.\n+/// This function is equivalent to `TaskBuilder::new().spawn(f)`.\n pub fn spawn(f: proc():Send) {\n-    let task = task();\n-    task.spawn(f)\n+    TaskBuilder::new().spawn(f)\n }\n \n+/// Execute a function in another task and return either the return value of\n+/// the function or an error if the task failed\n+///\n+/// This is equivalent to TaskBuilder::new().try\n pub fn try<T:Send>(f: proc():Send -> T) -> Result<T, ~Any:Send> {\n-    /*!\n-     * Execute a function in another task and return either the return value\n-     * of the function or result::err.\n-     *\n-     * This is equivalent to task().try.\n-     */\n-\n-    let task = task();\n-    task.try(f)\n+    TaskBuilder::new().try(f)\n }\n \n \n@@ -298,7 +291,7 @@ fn test_unnamed_task() {\n \n #[test]\n fn test_owned_named_task() {\n-    task().named(\"ada lovelace\".to_owned()).spawn(proc() {\n+    TaskBuilder::new().named(\"ada lovelace\".to_owned()).spawn(proc() {\n         with_task_name(|name| {\n             assert!(name.unwrap() == \"ada lovelace\");\n         })\n@@ -307,7 +300,7 @@ fn test_owned_named_task() {\n \n #[test]\n fn test_static_named_task() {\n-    task().named(\"ada lovelace\").spawn(proc() {\n+    TaskBuilder::new().named(\"ada lovelace\").spawn(proc() {\n         with_task_name(|name| {\n             assert!(name.unwrap() == \"ada lovelace\");\n         })\n@@ -316,7 +309,7 @@ fn test_static_named_task() {\n \n #[test]\n fn test_send_named_task() {\n-    task().named(\"ada lovelace\".into_maybe_owned()).spawn(proc() {\n+    TaskBuilder::new().named(\"ada lovelace\".into_maybe_owned()).spawn(proc() {\n         with_task_name(|name| {\n             assert!(name.unwrap() == \"ada lovelace\");\n         })\n@@ -326,7 +319,7 @@ fn test_send_named_task() {\n #[test]\n fn test_run_basic() {\n     let (tx, rx) = channel();\n-    task().spawn(proc() {\n+    TaskBuilder::new().spawn(proc() {\n         tx.send(());\n     });\n     rx.recv();\n@@ -335,7 +328,7 @@ fn test_run_basic() {\n #[test]\n fn test_with_wrapper() {\n     let (tx, rx) = channel();\n-    task().with_wrapper(proc(body) {\n+    TaskBuilder::new().with_wrapper(proc(body) {\n         let result: proc():Send = proc() {\n             body();\n             tx.send(());\n@@ -347,12 +340,12 @@ fn test_with_wrapper() {\n \n #[test]\n fn test_future_result() {\n-    let mut builder = task();\n+    let mut builder = TaskBuilder::new();\n     let result = builder.future_result();\n     builder.spawn(proc() {});\n     assert!(result.recv().is_ok());\n \n-    let mut builder = task();\n+    let mut builder = TaskBuilder::new();\n     let result = builder.future_result();\n     builder.spawn(proc() {\n         fail!();\n@@ -362,7 +355,7 @@ fn test_future_result() {\n \n #[test] #[should_fail]\n fn test_back_to_the_future_result() {\n-    let mut builder = task();\n+    let mut builder = TaskBuilder::new();\n     builder.future_result();\n     builder.future_result();\n }\n@@ -445,7 +438,7 @@ fn test_avoid_copying_the_body_spawn() {\n #[test]\n fn test_avoid_copying_the_body_task_spawn() {\n     avoid_copying_the_body(|f| {\n-        let builder = task();\n+        let builder = TaskBuilder::new();\n         builder.spawn(proc() {\n             f();\n         });\n@@ -471,11 +464,11 @@ fn test_child_doesnt_ref_parent() {\n     fn child_no(x: uint) -> proc():Send {\n         return proc() {\n             if x < generations {\n-                task().spawn(child_no(x+1));\n+                TaskBuilder::new().spawn(child_no(x+1));\n             }\n         }\n     }\n-    task().spawn(child_no(0));\n+    TaskBuilder::new().spawn(child_no(0));\n }\n \n #[test]"}, {"sha": "930b3009042422387d79e38e8f77745e91aa8cf6", "filename": "src/libsync/lock.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Flibsync%2Flock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Flibsync%2Flock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Flock.rs?ref=0e750adefcb1985fc0fa60a240d9b8abbbc457c5", "patch": "@@ -445,6 +445,7 @@ impl Barrier {\n mod tests {\n     use std::comm::Empty;\n     use std::task;\n+    use std::task::TaskBuilder;\n \n     use arc::Arc;\n     use super::{Mutex, Barrier, RWLock};\n@@ -614,7 +615,7 @@ mod tests {\n         let mut children = Vec::new();\n         for _ in range(0, 5) {\n             let arc3 = arc.clone();\n-            let mut builder = task::task();\n+            let mut builder = TaskBuilder::new();\n             children.push(builder.future_result());\n             builder.spawn(proc() {\n                 let lock = arc3.read();"}, {"sha": "145fea18cb238d652c333cb97db19ea292ec7761", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=0e750adefcb1985fc0fa60a240d9b8abbbc457c5", "patch": "@@ -60,7 +60,7 @@ use std::io;\n use std::os;\n use std::str;\n use std::strbuf::StrBuf;\n-use std::task;\n+use std::task::TaskBuilder;\n \n // to be used by rustc to compile tests in libtest\n pub mod test {\n@@ -961,7 +961,7 @@ pub fn run_test(force_ignore: bool,\n             let mut reader = ChanReader::new(rx);\n             let stdout = ChanWriter::new(tx.clone());\n             let stderr = ChanWriter::new(tx);\n-            let mut task = task::task().named(match desc.name {\n+            let mut task = TaskBuilder::new().named(match desc.name {\n                 DynTestName(ref name) => name.clone().into_maybe_owned(),\n                 StaticTestName(name) => name.into_maybe_owned(),\n             });"}, {"sha": "5a42d2e3c59fa5ebc35243da8a278f5c06d941a0", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=0e750adefcb1985fc0fa60a240d9b8abbbc457c5", "patch": "@@ -23,6 +23,7 @@ extern crate time;\n use std::comm;\n use std::os;\n use std::task;\n+use std::task::TaskBuilder;\n use std::uint;\n \n fn move_out<T>(_x: T) {}\n@@ -62,7 +63,7 @@ fn run(args: &[~str]) {\n     let mut worker_results = Vec::new();\n     for _ in range(0u, workers) {\n         let to_child = to_child.clone();\n-        let mut builder = task::task();\n+        let mut builder = TaskBuilder::new();\n         worker_results.push(builder.future_result());\n         builder.spawn(proc() {\n             for _ in range(0u, size / workers) {"}, {"sha": "741cc4be4faed499cfbdd782e3ff1ffc23e28946", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=0e750adefcb1985fc0fa60a240d9b8abbbc457c5", "patch": "@@ -18,6 +18,7 @@ extern crate time;\n \n use std::os;\n use std::task;\n+use std::task::TaskBuilder;\n use std::uint;\n \n fn move_out<T>(_x: T) {}\n@@ -56,7 +57,7 @@ fn run(args: &[~str]) {\n     let mut worker_results = Vec::new();\n     let from_parent = if workers == 1 {\n         let (to_child, from_parent) = channel();\n-        let mut builder = task::task();\n+        let mut builder = TaskBuilder::new();\n         worker_results.push(builder.future_result());\n         builder.spawn(proc() {\n             for _ in range(0u, size / workers) {\n@@ -70,7 +71,7 @@ fn run(args: &[~str]) {\n         let (to_child, from_parent) = channel();\n         for _ in range(0u, workers) {\n             let to_child = to_child.clone();\n-            let mut builder = task::task();\n+            let mut builder = TaskBuilder::new();\n             worker_results.push(builder.future_result());\n             builder.spawn(proc() {\n                 for _ in range(0u, size / workers) {"}, {"sha": "0819b71853a49d6c4bb5b5ffac61d3fe6cc02697", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=0e750adefcb1985fc0fa60a240d9b8abbbc457c5", "patch": "@@ -24,6 +24,7 @@ extern crate time;\n use std::os;\n use std::result::{Ok, Err};\n use std::task;\n+use std::task::TaskBuilder;\n use std::uint;\n \n fn fib(n: int) -> int {\n@@ -77,7 +78,7 @@ fn stress_task(id: int) {\n fn stress(num_tasks: int) {\n     let mut results = Vec::new();\n     for i in range(0, num_tasks) {\n-        let mut builder = task::task();\n+        let mut builder = TaskBuilder::new();\n         results.push(builder.future_result());\n         builder.spawn(proc() {\n             stress_task(i);"}, {"sha": "f30af563aa6d33a66083a4927be718c94fb576e4", "filename": "src/test/run-fail/fail-task-name-owned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Ftest%2Frun-fail%2Ffail-task-name-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Ftest%2Frun-fail%2Ffail-task-name-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-task-name-owned.rs?ref=0e750adefcb1985fc0fa60a240d9b8abbbc457c5", "patch": "@@ -10,10 +10,10 @@\n \n // error-pattern:task 'owned name' failed at 'test'\n \n-use std::task;\n+use std::task::TaskBuilder;\n \n fn main() {\n-    task::task().named(\"owned name\".to_owned()).try(proc() {\n+    TaskBuilder::new().named(\"owned name\".to_owned()).try(proc() {\n         fail!(\"test\");\n         1\n     }).unwrap()"}, {"sha": "d99c805323f3eddf6e4564b28642c24911b3d115", "filename": "src/test/run-fail/fail-task-name-send-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Ftest%2Frun-fail%2Ffail-task-name-send-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Ftest%2Frun-fail%2Ffail-task-name-send-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-task-name-send-str.rs?ref=0e750adefcb1985fc0fa60a240d9b8abbbc457c5", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:task 'send name' failed at 'test'\n \n fn main() {\n-    ::std::task::task().named(\"send name\".into_maybe_owned()).try(proc() {\n+    ::std::task::TaskBuilder::new().named(\"send name\".into_maybe_owned()).try(proc() {\n         fail!(\"test\");\n         3\n     }).unwrap()"}, {"sha": "e0c98c5744e6ac98f6d3dae652abc3010af30984", "filename": "src/test/run-fail/fail-task-name-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Ftest%2Frun-fail%2Ffail-task-name-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Ftest%2Frun-fail%2Ffail-task-name-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-task-name-static.rs?ref=0e750adefcb1985fc0fa60a240d9b8abbbc457c5", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:task 'static name' failed at 'test'\n \n fn main() {\n-    ::std::task::task().named(\"static name\").try(proc() {\n+    ::std::task::TaskBuilder::new().named(\"static name\").try(proc() {\n         fail!(\"test\");\n     }).unwrap()\n }"}, {"sha": "f1217be3484fe99014c9f3f121ddc77e8e2693b1", "filename": "src/test/run-pass/issue-2190-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs?ref=0e750adefcb1985fc0fa60a240d9b8abbbc457c5", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::task;\n+use std::task::TaskBuilder;\n \n static generations: uint = 1024+256+128+49;\n \n fn spawn(f: proc():Send) {\n-    let mut t = task::task();\n+    let mut t = TaskBuilder::new();\n     t.opts.stack_size = Some(32 * 1024);\n     t.spawn(f);\n }"}, {"sha": "c8918fda9e79ebc493e1c91e8dc9811fca746e3b", "filename": "src/test/run-pass/spawning-with-debug.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Ftest%2Frun-pass%2Fspawning-with-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Ftest%2Frun-pass%2Fspawning-with-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawning-with-debug.rs?ref=0e750adefcb1985fc0fa60a240d9b8abbbc457c5", "patch": "@@ -13,9 +13,9 @@\n \n // regression test for issue #10405, make sure we don't call println! too soon.\n \n-use std::task;\n+use std::task::TaskBuilder;\n \n pub fn main() {\n-    let mut t = task::task();\n+    let mut t = TaskBuilder::new();\n     t.spawn(proc() ());\n }"}, {"sha": "a78bbefed44db64eeed99d811e7c70fd9e7dbf9f", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=0e750adefcb1985fc0fa60a240d9b8abbbc457c5", "patch": "@@ -9,14 +9,15 @@\n // except according to those terms.\n \n use std::task;\n+use std::task::TaskBuilder;\n \n pub fn main() { test00(); }\n \n fn start(_task_number: int) { println!(\"Started / Finished task.\"); }\n \n fn test00() {\n     let i: int = 0;\n-    let mut builder = task::task();\n+    let mut builder = TaskBuilder::new();\n     let mut result = builder.future_result();\n     builder.spawn(proc() {\n         start(i)"}, {"sha": "3fb91b67c9d27cf698adfa78ffb6e1ba426978ce", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=0e750adefcb1985fc0fa60a240d9b8abbbc457c5", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-use std::task;\n+use std::task::TaskBuilder;\n \n pub fn main() { println!(\"===== WITHOUT THREADS =====\"); test00(); }\n \n@@ -38,7 +38,7 @@ fn test00() {\n     let mut results = Vec::new();\n     while i < number_of_tasks {\n         let tx = tx.clone();\n-        let mut builder = task::task();\n+        let mut builder = TaskBuilder::new();\n         results.push(builder.future_result());\n         builder.spawn({\n             let i = i;"}, {"sha": "188d8288b095ea2aeb98dc4ea4554378642038bf", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=0e750adefcb1985fc0fa60a240d9b8abbbc457c5", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-use std::task;\n+use std::task::TaskBuilder;\n \n pub fn main() { test00(); }\n \n@@ -24,7 +24,7 @@ fn test00() {\n     let (tx, rx) = channel();\n     let number_of_messages: int = 10;\n \n-    let mut builder = task::task();\n+    let mut builder = TaskBuilder::new();\n     let result = builder.future_result();\n     builder.spawn(proc() {\n         test00_start(&tx, number_of_messages);"}, {"sha": "0c38abb20fc48564019840ee9baac71877d697e6", "filename": "src/test/run-pass/tcp-stress.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-stress.rs?ref=0e750adefcb1985fc0fa60a240d9b8abbbc457c5", "patch": "@@ -22,7 +22,7 @@ extern crate rustuv;\n use std::io::net::ip::{Ipv4Addr, SocketAddr};\n use std::io::net::tcp::{TcpListener, TcpStream};\n use std::io::{Acceptor, Listener};\n-use std::task;\n+use std::task::TaskBuilder;\n \n #[start]\n fn start(argc: int, argv: **u8) -> int {\n@@ -61,7 +61,7 @@ fn main() {\n     let (tx, rx) = channel();\n     for _ in range(0, 1000) {\n         let tx = tx.clone();\n-        let mut builder = task::task();\n+        let mut builder = TaskBuilder::new();\n         builder.opts.stack_size = Some(32 * 1024);\n         builder.spawn(proc() {\n             match TcpStream::connect(addr) {"}, {"sha": "2662a6c6568b9834b25e333f201b629427c03632", "filename": "src/test/run-pass/yield.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Ftest%2Frun-pass%2Fyield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Ftest%2Frun-pass%2Fyield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield.rs?ref=0e750adefcb1985fc0fa60a240d9b8abbbc457c5", "patch": "@@ -9,9 +9,10 @@\n // except according to those terms.\n \n use std::task;\n+use std::task::TaskBuilder;\n \n pub fn main() {\n-    let mut builder = task::task();\n+    let mut builder = TaskBuilder::new();\n     let mut result = builder.future_result();\n     builder.spawn(child);\n     println!(\"1\");"}, {"sha": "8c5504725bb483e9e13a8f2ee40d1f118f7e75a4", "filename": "src/test/run-pass/yield1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Ftest%2Frun-pass%2Fyield1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e750adefcb1985fc0fa60a240d9b8abbbc457c5/src%2Ftest%2Frun-pass%2Fyield1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield1.rs?ref=0e750adefcb1985fc0fa60a240d9b8abbbc457c5", "patch": "@@ -9,9 +9,10 @@\n // except according to those terms.\n \n use std::task;\n+use std::task::TaskBuilder;\n \n pub fn main() {\n-    let mut builder = task::task();\n+    let mut builder = TaskBuilder::new();\n     let mut result = builder.future_result();\n     builder.spawn(child);\n     println!(\"1\");"}]}