{"sha": "76aa29ff5e5a6bb355b017da4f6e476049b8dd76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2YWEyOWZmNWU1YTZiYjM1NWIwMTdkYTRmNmU0NzYwNDliOGRkNzY=", "commit": {"author": {"name": "Tim Diekmann", "email": "tim.diekmann@3dvision.de", "date": "2020-02-11T12:02:51Z"}, "committer": {"name": "Tim Diekmann", "email": "tim.diekmann@3dvision.de", "date": "2020-02-11T12:16:20Z"}, "message": "Preparation for allocator aware `Box`", "tree": {"sha": "73278b6b823c0fd30565d14076a1fe11e1d4923c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73278b6b823c0fd30565d14076a1fe11e1d4923c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76aa29ff5e5a6bb355b017da4f6e476049b8dd76", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEExIGJAkDw9mbJbetUxvIwteNBvvsFAl5CmxQACgkQxvIwteNB\nvvtc9A//ShNJxLxwRRCt5tP95vT5iiPtyNLCfD5pMI2LxywywOBy0tqp80oIcEib\nH2kAKDMqMAlpuMNW8KSNQeWAo2Kdh/vaOgIJg0qQR5AO1bs8Iqrot03b30Vw6v98\nvHayNSjm9+QwuO52aAjFvVKSDwZT3zVkZ57vyMbK8Srjf1oA3XGB1aS3yh/24rKP\nthnPceXLNG5wt/GCf8EU4tA8U0FKB+HBvIiNgFISFGCEcMntRPK82BsH8Tftj/9/\nLM/zul8i+Fson6ps/Z28xV1MqXaigINg4aS06zLgcQ7W6jlgsth2wlmL22cf+RdC\n1tQWPCsZIElOTMhprRKcZ/B0FQEDler38aG/KdM7BWRlGDbR33ivtrekosYsAUEr\nCNJebvVp80Nb5EAcbw+uw6FgWdtjUL5L7Sn2AbGbodFFlTq1c5SGzTy1meRLUrj8\nJzYTSVxlr00CQuJlF1YxONmhh/IYTME3OfbzixyoMSdOxv7BiDdHm82Dt1rDPfQ9\nsV9sumH7Txh15+7bdLe9tWWZXE1XEVKbYTgwrsUXw3RzrnDEj5btHOBRRLe4EPZH\n2q+94R59p6f2TXDa9pL2P2R11nUn6am8qqJ6XSC/z1gvcynssfkWfCdAyRqSayMo\njMPBchwFrebX5vRwJ84fXRfFH9RzypLGUdAjgHcU9AuQ7SEuKaM=\n=l0rC\n-----END PGP SIGNATURE-----", "payload": "tree 73278b6b823c0fd30565d14076a1fe11e1d4923c\nparent b6690a8c35e9afa3e0f65140cc69d4ba1b9e78c4\nauthor Tim Diekmann <tim.diekmann@3dvision.de> 1581422571 +0100\ncommitter Tim Diekmann <tim.diekmann@3dvision.de> 1581423380 +0100\n\nPreparation for allocator aware `Box`\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76aa29ff5e5a6bb355b017da4f6e476049b8dd76", "html_url": "https://github.com/rust-lang/rust/commit/76aa29ff5e5a6bb355b017da4f6e476049b8dd76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76aa29ff5e5a6bb355b017da4f6e476049b8dd76/comments", "author": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6690a8c35e9afa3e0f65140cc69d4ba1b9e78c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6690a8c35e9afa3e0f65140cc69d4ba1b9e78c4", "html_url": "https://github.com/rust-lang/rust/commit/b6690a8c35e9afa3e0f65140cc69d4ba1b9e78c4"}], "stats": {"total": 49, "additions": 28, "deletions": 21}, "files": [{"sha": "f41404bf8cab97ff5eb94a1084393e9297e90fad", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/76aa29ff5e5a6bb355b017da4f6e476049b8dd76/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76aa29ff5e5a6bb355b017da4f6e476049b8dd76/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=76aa29ff5e5a6bb355b017da4f6e476049b8dd76", "patch": "@@ -200,21 +200,27 @@ unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {\n         align as *mut u8\n     } else {\n         let layout = Layout::from_size_align_unchecked(size, align);\n-        let ptr = alloc(layout);\n-        if !ptr.is_null() { ptr } else { handle_alloc_error(layout) }\n+        match Global.alloc(layout) {\n+            Ok(ptr) => ptr.as_ptr(),\n+            Err(_) => handle_alloc_error(layout),\n+        }\n     }\n }\n \n #[cfg_attr(not(test), lang = \"box_free\")]\n #[inline]\n+// This signature has to be the same as `Box`, otherwise an ICE will happen.\n+// When an additional parameter to `Box` is added (like `A: AllocRef`), this has to be added here as\n+// well.\n+// For example if `Box` is changed to  `struct Box<T: ?Sized, A: AllocRef>(Unique<T>, A)`,\n+// this function has to be changed to `fn box_free<T: ?Sized, A: AllocRef>(Unique<T>, A)` as well.\n pub(crate) unsafe fn box_free<T: ?Sized>(ptr: Unique<T>) {\n-    let ptr = ptr.as_ptr();\n-    let size = size_of_val(&*ptr);\n-    let align = min_align_of_val(&*ptr);\n+    let size = size_of_val(ptr.as_ref());\n+    let align = min_align_of_val(ptr.as_ref());\n     // We do not allocate for Box<T> when T is ZST, so deallocation is also not necessary.\n     if size != 0 {\n         let layout = Layout::from_size_align_unchecked(size, align);\n-        dealloc(ptr as *mut u8, layout);\n+        Global.dealloc(ptr.cast().into(), layout);\n     }\n }\n "}, {"sha": "3ac4bd82a3a10fa4919d078b9dcefc53d88bd1b9", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/76aa29ff5e5a6bb355b017da4f6e476049b8dd76/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76aa29ff5e5a6bb355b017da4f6e476049b8dd76/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=76aa29ff5e5a6bb355b017da4f6e476049b8dd76", "patch": "@@ -196,12 +196,14 @@ impl<T> Box<T> {\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_uninit() -> Box<mem::MaybeUninit<T>> {\n         let layout = alloc::Layout::new::<mem::MaybeUninit<T>>();\n-        if layout.size() == 0 {\n-            return Box(NonNull::dangling().into());\n+        unsafe {\n+            let ptr = if layout.size() == 0 {\n+                NonNull::dangling()\n+            } else {\n+                Global.alloc(layout).unwrap_or_else(|_| alloc::handle_alloc_error(layout)).cast()\n+            };\n+            Box::from_raw(ptr.as_ptr())\n         }\n-        let ptr =\n-            unsafe { Global.alloc(layout).unwrap_or_else(|_| alloc::handle_alloc_error(layout)) };\n-        Box(ptr.cast().into())\n     }\n \n     /// Constructs a new `Box` with uninitialized contents, with the memory\n@@ -264,15 +266,14 @@ impl<T> Box<[T]> {\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_uninit_slice(len: usize) -> Box<[mem::MaybeUninit<T>]> {\n         let layout = alloc::Layout::array::<mem::MaybeUninit<T>>(len).unwrap();\n-        let ptr = if layout.size() == 0 {\n-            NonNull::dangling()\n-        } else {\n-            unsafe {\n+        unsafe {\n+            let ptr = if layout.size() == 0 {\n+                NonNull::dangling()\n+            } else {\n                 Global.alloc(layout).unwrap_or_else(|_| alloc::handle_alloc_error(layout)).cast()\n-            }\n-        };\n-        let slice = unsafe { slice::from_raw_parts_mut(ptr.as_ptr(), len) };\n-        Box(Unique::from(slice))\n+            };\n+            Box::from_raw(slice::from_raw_parts_mut(ptr.as_ptr(), len))\n+        }\n     }\n }\n \n@@ -308,7 +309,7 @@ impl<T> Box<mem::MaybeUninit<T>> {\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     #[inline]\n     pub unsafe fn assume_init(self) -> Box<T> {\n-        Box(Box::into_unique(self).cast())\n+        Box::from_raw(Box::into_raw(self) as *mut T)\n     }\n }\n \n@@ -346,7 +347,7 @@ impl<T> Box<[mem::MaybeUninit<T>]> {\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     #[inline]\n     pub unsafe fn assume_init(self) -> Box<[T]> {\n-        Box(Unique::new_unchecked(Box::into_raw(self) as _))\n+        Box::from_raw(Box::into_raw(self) as *mut [T])\n     }\n }\n "}]}