{"sha": "ffa9bbf7cd3283f8d721bde6bed552a9c7a042dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmYTliYmY3Y2QzMjgzZjhkNzIxYmRlNmJlZDU1MmE5YzdhMDQyZGQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-10-11T15:51:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-11T15:51:26Z"}, "message": "Rollup merge of #37065 - nnethercote:opt-mk_printer, r=nikomatsakis\n\nMerge `Printer::token` and `Printer::size`.\n\nLogically, it's a vector of pairs, so might as well represent it that\nway.\n\nThe commit also changes `scan_stack` so that it is initialized with the\ndefault size, instead of the excessive `55 * linewidth` size, which it\nusually doesn't get even close to reaching.", "tree": {"sha": "c688e35fe3ecb471dd998c335910810e5f1c7352", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c688e35fe3ecb471dd998c335910810e5f1c7352"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffa9bbf7cd3283f8d721bde6bed552a9c7a042dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffa9bbf7cd3283f8d721bde6bed552a9c7a042dd", "html_url": "https://github.com/rust-lang/rust/commit/ffa9bbf7cd3283f8d721bde6bed552a9c7a042dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffa9bbf7cd3283f8d721bde6bed552a9c7a042dd/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac94bde8032df16023e3cfe30205a9cc3e15b602", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac94bde8032df16023e3cfe30205a9cc3e15b602", "html_url": "https://github.com/rust-lang/rust/commit/ac94bde8032df16023e3cfe30205a9cc3e15b602"}, {"sha": "67a54441832e335dd14d6987280a1bee4e9a4d76", "url": "https://api.github.com/repos/rust-lang/rust/commits/67a54441832e335dd14d6987280a1bee4e9a4d76", "html_url": "https://github.com/rust-lang/rust/commit/67a54441832e335dd14d6987280a1bee4e9a4d76"}], "stats": {"total": 69, "additions": 31, "deletions": 38}, "files": [{"sha": "792239e7219326d6b233efae7e08dea801491b38", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 31, "deletions": 38, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/ffa9bbf7cd3283f8d721bde6bed552a9c7a042dd/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffa9bbf7cd3283f8d721bde6bed552a9c7a042dd/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=ffa9bbf7cd3283f8d721bde6bed552a9c7a042dd", "patch": "@@ -125,9 +125,8 @@ impl fmt::Display for Token {\n     }\n }\n \n-fn buf_str(toks: &[Token], szs: &[isize], left: usize, right: usize, lim: usize) -> String {\n-    let n = toks.len();\n-    assert_eq!(n, szs.len());\n+fn buf_str(buf: &[BufEntry], left: usize, right: usize, lim: usize) -> String {\n+    let n = buf.len();\n     let mut i = left;\n     let mut l = lim;\n     let mut s = String::from(\"[\");\n@@ -136,7 +135,7 @@ fn buf_str(toks: &[Token], szs: &[isize], left: usize, right: usize, lim: usize)\n         if i != left {\n             s.push_str(\", \");\n         }\n-        s.push_str(&format!(\"{}={}\", szs[i], &toks[i]));\n+        s.push_str(&format!(\"{}={}\", buf[i].size, &buf[i].token));\n         i += 1;\n         i %= n;\n     }\n@@ -159,25 +158,20 @@ pub struct PrintStackElem {\n const SIZE_INFINITY: isize = 0xffff;\n \n pub fn mk_printer<'a>(out: Box<io::Write+'a>, linewidth: usize) -> Printer<'a> {\n-    // Yes 55, it makes the ring buffers big enough to never\n-    // fall behind.\n+    // Yes 55, it makes the ring buffers big enough to never fall behind.\n     let n: usize = 55 * linewidth;\n     debug!(\"mk_printer {}\", linewidth);\n-    let token = vec![Token::Eof; n];\n-    let size = vec![0; n];\n-    let scan_stack = VecDeque::with_capacity(n);\n     Printer {\n         out: out,\n         buf_len: n,\n         margin: linewidth as isize,\n         space: linewidth as isize,\n         left: 0,\n         right: 0,\n-        token: token,\n-        size: size,\n+        buf: vec![BufEntry { token: Token::Eof, size: 0 }; n],\n         left_total: 0,\n         right_total: 0,\n-        scan_stack: scan_stack,\n+        scan_stack: VecDeque::new(),\n         print_stack: Vec::new(),\n         pending_indentation: 0\n     }\n@@ -269,10 +263,8 @@ pub struct Printer<'a> {\n     left: usize,\n     /// Index of right side of input stream\n     right: usize,\n-    /// Ring-buffer stream goes through\n-    token: Vec<Token> ,\n-    /// Ring-buffer of calculated sizes\n-    size: Vec<isize> ,\n+    /// Ring-buffer of tokens and calculated sizes\n+    buf: Vec<BufEntry>,\n     /// Running size of stream \"...left\"\n     left_total: isize,\n     /// Running size of stream \"...right\"\n@@ -283,20 +275,26 @@ pub struct Printer<'a> {\n     /// Begin (if there is any) on top of it. Stuff is flushed off the\n     /// bottom as it becomes irrelevant due to the primary ring-buffer\n     /// advancing.\n-    scan_stack: VecDeque<usize> ,\n+    scan_stack: VecDeque<usize>,\n     /// Stack of blocks-in-progress being flushed by print\n     print_stack: Vec<PrintStackElem> ,\n     /// Buffered indentation to avoid writing trailing whitespace\n     pending_indentation: isize,\n }\n \n+#[derive(Clone)]\n+struct BufEntry {\n+    token: Token,\n+    size: isize,\n+}\n+\n impl<'a> Printer<'a> {\n     pub fn last_token(&mut self) -> Token {\n-        self.token[self.right].clone()\n+        self.buf[self.right].token.clone()\n     }\n     // be very careful with this!\n     pub fn replace_last_token(&mut self, t: Token) {\n-        self.token[self.right] = t;\n+        self.buf[self.right].token = t;\n     }\n     pub fn pretty_print(&mut self, token: Token) -> io::Result<()> {\n         debug!(\"pp Vec<{},{}>\", self.left, self.right);\n@@ -318,8 +316,7 @@ impl<'a> Printer<'a> {\n             } else { self.advance_right(); }\n             debug!(\"pp Begin({})/buffer Vec<{},{}>\",\n                    b.offset, self.left, self.right);\n-            self.token[self.right] = token;\n-            self.size[self.right] = -self.right_total;\n+            self.buf[self.right] = BufEntry { token: token, size: -self.right_total };\n             let right = self.right;\n             self.scan_push(right);\n             Ok(())\n@@ -331,8 +328,7 @@ impl<'a> Printer<'a> {\n             } else {\n                 debug!(\"pp End/buffer Vec<{},{}>\", self.left, self.right);\n                 self.advance_right();\n-                self.token[self.right] = token;\n-                self.size[self.right] = -1;\n+                self.buf[self.right] = BufEntry { token: token, size: -1 };\n                 let right = self.right;\n                 self.scan_push(right);\n                 Ok(())\n@@ -350,8 +346,7 @@ impl<'a> Printer<'a> {\n             self.check_stack(0);\n             let right = self.right;\n             self.scan_push(right);\n-            self.token[self.right] = token;\n-            self.size[self.right] = -self.right_total;\n+            self.buf[self.right] = BufEntry { token: token, size: -self.right_total };\n             self.right_total += b.blank_space;\n             Ok(())\n           }\n@@ -364,8 +359,7 @@ impl<'a> Printer<'a> {\n                 debug!(\"pp String('{}')/buffer Vec<{},{}>\",\n                        s, self.left, self.right);\n                 self.advance_right();\n-                self.token[self.right] = Token::String(s, len);\n-                self.size[self.right] = len;\n+                self.buf[self.right] = BufEntry { token: Token::String(s, len), size: len };\n                 self.right_total += len;\n                 self.check_stream()\n             }\n@@ -381,7 +375,7 @@ impl<'a> Printer<'a> {\n             if Some(&self.left) == self.scan_stack.back() {\n                 debug!(\"setting {} to infinity and popping\", self.left);\n                 let scanned = self.scan_pop_bottom();\n-                self.size[scanned] = SIZE_INFINITY;\n+                self.buf[scanned].size = SIZE_INFINITY;\n             }\n             self.advance_left()?;\n             if self.left != self.right {\n@@ -410,12 +404,12 @@ impl<'a> Printer<'a> {\n     }\n     pub fn advance_left(&mut self) -> io::Result<()> {\n         debug!(\"advance_left Vec<{},{}>, sizeof({})={}\", self.left, self.right,\n-               self.left, self.size[self.left]);\n+               self.left, self.buf[self.left].size);\n \n-        let mut left_size = self.size[self.left];\n+        let mut left_size = self.buf[self.left].size;\n \n         while left_size >= 0 {\n-            let left = self.token[self.left].clone();\n+            let left = self.buf[self.left].token.clone();\n \n             let len = match left {\n                 Token::Break(b) => b.blank_space,\n@@ -437,31 +431,31 @@ impl<'a> Printer<'a> {\n             self.left += 1;\n             self.left %= self.buf_len;\n \n-            left_size = self.size[self.left];\n+            left_size = self.buf[self.left].size;\n         }\n \n         Ok(())\n     }\n     pub fn check_stack(&mut self, k: isize) {\n         if !self.scan_stack.is_empty() {\n             let x = self.scan_top();\n-            match self.token[x] {\n+            match self.buf[x].token {\n                 Token::Begin(_) => {\n                     if k > 0 {\n                         let popped = self.scan_pop();\n-                        self.size[popped] = self.size[x] + self.right_total;\n+                        self.buf[popped].size = self.buf[x].size + self.right_total;\n                         self.check_stack(k - 1);\n                     }\n                 }\n                 Token::End => {\n                     // paper says + not =, but that makes no sense.\n                     let popped = self.scan_pop();\n-                    self.size[popped] = 1;\n+                    self.buf[popped].size = 1;\n                     self.check_stack(k + 1);\n                 }\n                 _ => {\n                     let popped = self.scan_pop();\n-                    self.size[popped] = self.size[x] + self.right_total;\n+                    self.buf[popped].size = self.buf[x].size + self.right_total;\n                     if k > 0 {\n                         self.check_stack(k);\n                     }\n@@ -499,8 +493,7 @@ impl<'a> Printer<'a> {\n     pub fn print(&mut self, token: Token, l: isize) -> io::Result<()> {\n         debug!(\"print {} {} (remaining line space={})\", token, l,\n                self.space);\n-        debug!(\"{}\", buf_str(&self.token,\n-                             &self.size,\n+        debug!(\"{}\", buf_str(&self.buf,\n                              self.left,\n                              self.right,\n                              6));"}]}