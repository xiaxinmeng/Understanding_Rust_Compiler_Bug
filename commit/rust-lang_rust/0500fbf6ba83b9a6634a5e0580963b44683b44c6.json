{"sha": "0500fbf6ba83b9a6634a5e0580963b44683b44c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MDBmYmY2YmE4M2I5YTY2MzRhNWUwNTgwOTYzYjQ0NjgzYjQ0YzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-10T23:25:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-10T23:25:31Z"}, "message": "Auto merge of #38580 - shepmaster:result-sum, r=alexcrichton\n\nImplement `iter::Sum` and `iter::Product` for `Result`\n\nThis introduces a private iterator adapter `ResultShunt`, which allows\ntreating an iterator of `Result<T, E>` as an iterator of `T`.", "tree": {"sha": "4a710492a371d35aa8e926f87386f9ea861a06f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a710492a371d35aa8e926f87386f9ea861a06f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0500fbf6ba83b9a6634a5e0580963b44683b44c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0500fbf6ba83b9a6634a5e0580963b44683b44c6", "html_url": "https://github.com/rust-lang/rust/commit/0500fbf6ba83b9a6634a5e0580963b44683b44c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0500fbf6ba83b9a6634a5e0580963b44683b44c6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6b927dd91a7f9d32a537f1b4493dfdb3e628823", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6b927dd91a7f9d32a537f1b4493dfdb3e628823", "html_url": "https://github.com/rust-lang/rust/commit/d6b927dd91a7f9d32a537f1b4493dfdb3e628823"}, {"sha": "23715d344de0377624be95b48830582594aed7ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/23715d344de0377624be95b48830582594aed7ff", "html_url": "https://github.com/rust-lang/rust/commit/23715d344de0377624be95b48830582594aed7ff"}], "stats": {"total": 97, "additions": 97, "deletions": 0}, "files": [{"sha": "25406696620c9a9cba9cedc40117a31d2eebe24b", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/0500fbf6ba83b9a6634a5e0580963b44683b44c6/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0500fbf6ba83b9a6634a5e0580963b44683b44c6/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=0500fbf6ba83b9a6634a5e0580963b44683b44c6", "patch": "@@ -670,6 +670,87 @@ macro_rules! float_sum_product {\n integer_sum_product! { i8 i16 i32 i64 isize u8 u16 u32 u64 usize }\n float_sum_product! { f32 f64 }\n \n+/// An iterator adapter that produces output as long as the underlying\n+/// iterator produces `Result::Ok` values.\n+///\n+/// If an error is encountered, the iterator stops and the error is\n+/// stored. The error may be recovered later via `reconstruct`.\n+struct ResultShunt<I, E> {\n+    iter: I,\n+    error: Option<E>,\n+}\n+\n+impl<I, T, E> ResultShunt<I, E>\n+    where I: Iterator<Item = Result<T, E>>\n+{\n+    /// Process the given iterator as if it yielded a `T` instead of a\n+    /// `Result<T, _>`. Any errors will stop the inner iterator and\n+    /// the overall result will be an error.\n+    pub fn process<F, U>(iter: I, mut f: F) -> Result<U, E>\n+        where F: FnMut(&mut Self) -> U\n+    {\n+        let mut shunt = ResultShunt::new(iter);\n+        let value = f(shunt.by_ref());\n+        shunt.reconstruct(value)\n+    }\n+\n+    fn new(iter: I) -> Self {\n+        ResultShunt {\n+            iter: iter,\n+            error: None,\n+        }\n+    }\n+\n+    /// Consume the adapter and rebuild a `Result` value. This should\n+    /// *always* be called, otherwise any potential error would be\n+    /// lost.\n+    fn reconstruct<U>(self, val: U) -> Result<U, E> {\n+        match self.error {\n+            None => Ok(val),\n+            Some(e) => Err(e),\n+        }\n+    }\n+}\n+\n+impl<I, T, E> Iterator for ResultShunt<I, E>\n+    where I: Iterator<Item = Result<T, E>>\n+{\n+    type Item = T;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        match self.iter.next() {\n+            Some(Ok(v)) => Some(v),\n+            Some(Err(e)) => {\n+                self.error = Some(e);\n+                None\n+            }\n+            None => None,\n+        }\n+    }\n+}\n+\n+#[stable(feature = \"iter_arith_traits_result\", since=\"1.16.0\")]\n+impl<T, U, E> Sum<Result<U, E>> for Result<T, E>\n+    where T: Sum<U>,\n+{\n+    fn sum<I>(iter: I) -> Result<T, E>\n+        where I: Iterator<Item = Result<U, E>>,\n+    {\n+        ResultShunt::process(iter, |i| i.sum())\n+    }\n+}\n+\n+#[stable(feature = \"iter_arith_traits_result\", since=\"1.16.0\")]\n+impl<T, U, E> Product<Result<U, E>> for Result<T, E>\n+    where T: Product<U>,\n+{\n+    fn product<I>(iter: I) -> Result<T, E>\n+        where I: Iterator<Item = Result<U, E>>,\n+    {\n+        ResultShunt::process(iter, |i| i.product())\n+    }\n+}\n+\n /// An iterator that always continues to yield `None` when exhausted.\n ///\n /// Calling next on a fused iterator that has returned `None` once is guaranteed"}, {"sha": "99d312930533f31ec482d683f6c2e4010014c5f3", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0500fbf6ba83b9a6634a5e0580963b44683b44c6/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0500fbf6ba83b9a6634a5e0580963b44683b44c6/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=0500fbf6ba83b9a6634a5e0580963b44683b44c6", "patch": "@@ -614,6 +614,14 @@ fn test_iterator_sum() {\n     assert_eq!(v[..0].iter().cloned().sum::<i32>(), 0);\n }\n \n+#[test]\n+fn test_iterator_sum_result() {\n+    let v: &[Result<i32, ()>] = &[Ok(1), Ok(2), Ok(3), Ok(4)];\n+    assert_eq!(v.iter().cloned().sum::<Result<i32, _>>(), Ok(10));\n+    let v: &[Result<i32, ()>] = &[Ok(1), Err(()), Ok(3), Ok(4)];\n+    assert_eq!(v.iter().cloned().sum::<Result<i32, _>>(), Err(()));\n+}\n+\n #[test]\n fn test_iterator_product() {\n     let v: &[i32] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n@@ -622,6 +630,14 @@ fn test_iterator_product() {\n     assert_eq!(v[..0].iter().cloned().product::<i32>(), 1);\n }\n \n+#[test]\n+fn test_iterator_product_result() {\n+    let v: &[Result<i32, ()>] = &[Ok(1), Ok(2), Ok(3), Ok(4)];\n+    assert_eq!(v.iter().cloned().product::<Result<i32, _>>(), Ok(24));\n+    let v: &[Result<i32, ()>] = &[Ok(1), Err(()), Ok(3), Ok(4)];\n+    assert_eq!(v.iter().cloned().product::<Result<i32, _>>(), Err(()));\n+}\n+\n #[test]\n fn test_iterator_max() {\n     let v: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];"}]}