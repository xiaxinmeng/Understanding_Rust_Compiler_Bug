{"sha": "ed45354a953f43076634d739847c141df69bc81f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNDUzNTRhOTUzZjQzMDc2NjM0ZDczOTg0N2MxNDFkZjY5YmM4MWY=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-01T07:03:48Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-03T20:55:09Z"}, "message": "remove old StdMap trait\n\nthis has been replaced by core::container::Map", "tree": {"sha": "cc8d87f230d0014796f9b46536e78f0ce2b201d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc8d87f230d0014796f9b46536e78f0ce2b201d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed45354a953f43076634d739847c141df69bc81f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed45354a953f43076634d739847c141df69bc81f", "html_url": "https://github.com/rust-lang/rust/commit/ed45354a953f43076634d739847c141df69bc81f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed45354a953f43076634d739847c141df69bc81f/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a06ef7424c1ce55b59351df88888f3b019c99796", "url": "https://api.github.com/repos/rust-lang/rust/commits/a06ef7424c1ce55b59351df88888f3b019c99796", "html_url": "https://github.com/rust-lang/rust/commit/a06ef7424c1ce55b59351df88888f3b019c99796"}], "stats": {"total": 82, "additions": 2, "deletions": 80}, "files": [{"sha": "8076371d8dbbed478524bbda0a79b30e5cc05036", "filename": "src/libstd/map.rs", "status": "modified", "additions": 2, "deletions": 80, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/ed45354a953f43076634d739847c141df69bc81f/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed45354a953f43076634d739847c141df69bc81f/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=ed45354a953f43076634d739847c141df69bc81f", "patch": "@@ -28,84 +28,6 @@ pub type Set<K> = HashMap<K, ()>;\n \n pub type HashMap<K, V> = chained::T<K, V>;\n \n-pub trait StdMap<K:Eq IterBytes Hash Copy, V: Copy> {\n-    /// Return the number of elements in the map\n-    pure fn size() -> uint;\n-\n-    /**\n-     * Add a value to the map.\n-     *\n-     * If the map already contains a value for the specified key then the\n-     * original value is replaced.\n-     *\n-     * Returns true if the key did not already exist in the map\n-     */\n-    fn insert(key: K, value: V) -> bool;\n-\n-    /**\n-     * Add a value to the map.\n-     *\n-     * If the map contains a value for the key, use the function\n-     * to set a new value.\n-     */\n-    fn update_with_key(key: K, newval: V, ff: fn(K, V, V) -> V) -> bool;\n-\n-    /**\n-     * Add a value to the map.\n-     *\n-     * If the map contains a value for the key, use the function to\n-     * set a new value.  (Like `update_with_key`, but with a\n-     * function of only values.)\n-     */\n-    fn update(key: K, newval: V, ff: fn(V, V) -> V) -> bool;\n-\n-    /// Returns true if the map contains a value for the specified key\n-    pure fn contains_key(key: K) -> bool;\n-\n-    /// Returns true if the map contains a value for the specified\n-    /// key, taking the key by reference.\n-    pure fn contains_key_ref(key: &K) -> bool;\n-\n-    /**\n-     * Get the value for the specified key. Fails if the key does not exist in\n-     * the map.\n-     */\n-    pure fn get(key: K) -> V;\n-\n-    /**\n-     * Get the value for the specified key. If the key does not exist in\n-     * the map then returns none.\n-     */\n-    pure fn find(key: K) -> Option<V>;\n-\n-    /**\n-     * Remove and return a value from the map. Returns true if the\n-     * key was present in the map, otherwise false.\n-     */\n-    fn remove(key: K) -> bool;\n-\n-    /// Clear the map, removing all key/value pairs.\n-    fn clear();\n-\n-    /// Iterate over all the key/value pairs in the map by value\n-    pure fn each(fn(key: K, value: V) -> bool);\n-\n-    /// Iterate over all the keys in the map by value\n-    pure fn each_key(fn(key: K) -> bool);\n-\n-    /// Iterate over all the values in the map by value\n-    pure fn each_value(fn(value: V) -> bool);\n-\n-    /// Iterate over all the key/value pairs in the map by reference\n-    pure fn each_ref(fn(key: &K, value: &V) -> bool);\n-\n-    /// Iterate over all the keys in the map by reference\n-    pure fn each_key_ref(fn(key: &K) -> bool);\n-\n-    /// Iterate over all the values in the map by reference\n-    pure fn each_value_ref(fn(value: &V) -> bool);\n-}\n-\n pub mod util {\n     pub struct Rational {\n         // : int::positive(*.den);\n@@ -124,7 +46,7 @@ pub mod util {\n // FIXME (#2344): package this up and export it as a datatype usable for\n // external code that doesn't want to pay the cost of a box.\n pub mod chained {\n-    use map::{StdMap, util};\n+    use map::util;\n \n     use core::io;\n     use core::ops;\n@@ -239,7 +161,7 @@ pub mod chained {\n         }\n     }\n \n-    impl<K:Eq IterBytes Hash Copy, V: Copy> T<K, V>: StdMap<K, V> {\n+    impl<K:Eq IterBytes Hash Copy, V: Copy> T<K, V> {\n         pure fn size() -> uint { self.count }\n \n         pure fn contains_key(k: K) -> bool {"}]}