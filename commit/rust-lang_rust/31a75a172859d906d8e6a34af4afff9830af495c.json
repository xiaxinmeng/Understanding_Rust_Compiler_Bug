{"sha": "31a75a172859d906d8e6a34af4afff9830af495c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxYTc1YTE3Mjg1OWQ5MDZkOGU2YTM0YWY0YWZmZjk4MzBhZjQ5NWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-21T13:40:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-21T13:40:22Z"}, "message": "Auto merge of #60124 - petrochenkov:stanomut, r=eddyb\n\nRemove mutability from `Def::Static`\n\nQuerify `TyCtxt::is_static`.\nUse `Mutability` instead of bool in foreign statics in AST/HIR.\n\ncc https://github.com/rust-lang/rust/pull/60110\nr? @eddyb", "tree": {"sha": "ebc94a1a8d740f638ea3839716314c7adf41c40c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebc94a1a8d740f638ea3839716314c7adf41c40c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31a75a172859d906d8e6a34af4afff9830af495c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31a75a172859d906d8e6a34af4afff9830af495c", "html_url": "https://github.com/rust-lang/rust/commit/31a75a172859d906d8e6a34af4afff9830af495c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31a75a172859d906d8e6a34af4afff9830af495c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06a271a6eb5521d50cbe20a782a20e7c993e7725", "url": "https://api.github.com/repos/rust-lang/rust/commits/06a271a6eb5521d50cbe20a782a20e7c993e7725", "html_url": "https://github.com/rust-lang/rust/commit/06a271a6eb5521d50cbe20a782a20e7c993e7725"}, {"sha": "4eb94b44072697be70fc2a74ed9989e88f9cd70c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eb94b44072697be70fc2a74ed9989e88f9cd70c", "html_url": "https://github.com/rust-lang/rust/commit/4eb94b44072697be70fc2a74ed9989e88f9cd70c"}], "stats": {"total": 189, "additions": 93, "deletions": 96}, "files": [{"sha": "4af79764a601ab404b899af2b48fbe720cd5df42", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -73,7 +73,7 @@ pub enum Def<Id = hir::HirId> {\n     Fn(DefId),\n     Const(DefId),\n     ConstParam(DefId),\n-    Static(DefId, bool /* is_mutbl */),\n+    Static(DefId),\n     /// `DefId` refers to the struct or enum variant's constructor.\n     Ctor(DefId, CtorOf, CtorKind),\n     SelfCtor(DefId /* impl */),  // `DefId` refers to the impl\n@@ -291,7 +291,7 @@ impl<Id> Def<Id> {\n     /// Return `Some(..)` with the `DefId` of this `Def` if it has a id, else `None`.\n     pub fn opt_def_id(&self) -> Option<DefId> {\n         match *self {\n-            Def::Fn(id) | Def::Mod(id) | Def::Static(id, _) |\n+            Def::Fn(id) | Def::Mod(id) | Def::Static(id) |\n             Def::Variant(id) | Def::Ctor(id, ..) | Def::Enum(id) |\n             Def::TyAlias(id) | Def::TraitAlias(id) |\n             Def::AssociatedTy(id) | Def::TyParam(id) | Def::ConstParam(id) | Def::Struct(id) |\n@@ -379,7 +379,7 @@ impl<Id> Def<Id> {\n         match self {\n             Def::Fn(id) => Def::Fn(id),\n             Def::Mod(id) => Def::Mod(id),\n-            Def::Static(id, is_mutbl) => Def::Static(id, is_mutbl),\n+            Def::Static(id) => Def::Static(id),\n             Def::Enum(id) => Def::Enum(id),\n             Def::Variant(id) => Def::Variant(id),\n             Def::Ctor(a, b, c) => Def::Ctor(a, b, c),"}, {"sha": "99cae00fafc230ecc6c521b2600f660dfa3e8260", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -3742,7 +3742,7 @@ impl<'a> LoweringContext<'a> {\n                 }\n                 ForeignItemKind::Static(ref t, m) => {\n                     hir::ForeignItemKind::Static(\n-                        self.lower_ty(t, ImplTraitContext::disallowed()), m)\n+                        self.lower_ty(t, ImplTraitContext::disallowed()), self.lower_mutability(m))\n                 }\n                 ForeignItemKind::Ty => hir::ForeignItemKind::Type,\n                 ForeignItemKind::Macro(_) => panic!(\"shouldn't exist here\"),"}, {"sha": "10a5bd11b2fe22f5193e6d2147a8203e18f9e6da", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -322,7 +322,7 @@ impl<'hir> Map<'hir> {\n                 let def_id = || self.local_def_id_from_hir_id(item.hir_id);\n \n                 match item.node {\n-                    ItemKind::Static(_, m, _) => Some(Def::Static(def_id(), m == MutMutable)),\n+                    ItemKind::Static(..) => Some(Def::Static(def_id())),\n                     ItemKind::Const(..) => Some(Def::Const(def_id())),\n                     ItemKind::Fn(..) => Some(Def::Fn(def_id())),\n                     ItemKind::Mod(..) => Some(Def::Mod(def_id())),\n@@ -344,7 +344,7 @@ impl<'hir> Map<'hir> {\n                 let def_id = self.local_def_id_from_hir_id(item.hir_id);\n                 match item.node {\n                     ForeignItemKind::Fn(..) => Some(Def::Fn(def_id)),\n-                    ForeignItemKind::Static(_, m) => Some(Def::Static(def_id, m)),\n+                    ForeignItemKind::Static(..) => Some(Def::Static(def_id)),\n                     ForeignItemKind::Type => Some(Def::ForeignTy(def_id)),\n                 }\n             }"}, {"sha": "630c163bcaf5415e667522de8fc2b0e86d5c75fc", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -2405,9 +2405,8 @@ pub struct ForeignItem {\n pub enum ForeignItemKind {\n     /// A foreign function.\n     Fn(P<FnDecl>, HirVec<Ident>, Generics),\n-    /// A foreign static item (`static ext: u8`), with optional mutability\n-    /// (the boolean is true when mutable).\n-    Static(P<Ty>, bool),\n+    /// A foreign static item (`static ext: u8`).\n+    Static(P<Ty>, Mutability),\n     /// A foreign type.\n     Type,\n }"}, {"sha": "dc87e13b739d6042288c2218b18e02c8c7f1554d", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -466,7 +466,7 @@ impl<'a> State<'a> {\n             }\n             hir::ForeignItemKind::Static(ref t, m) => {\n                 self.head(visibility_qualified(&item.vis, \"static\"))?;\n-                if m {\n+                if m == hir::MutMutable {\n                     self.word_space(\"mut\")?;\n                 }\n                 self.print_ident(item.ident)?;"}, {"sha": "a4a54ba18371a843bbcaaba5543a4795b1360041", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -705,7 +705,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                 Ok(self.cat_rvalue_node(hir_id, span, expr_ty))\n             }\n \n-            Def::Static(def_id, mutbl) => {\n+            Def::Static(def_id) => {\n                 // `#[thread_local]` statics may not outlive the current function, but\n                 // they also cannot be moved out of.\n                 let is_thread_local = self.tcx.get_attrs(def_id)[..]\n@@ -723,7 +723,10 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                     hir_id,\n                     span,\n                     cat,\n-                    mutbl: if mutbl { McDeclared } else { McImmutable},\n+                    mutbl: match self.tcx.static_mutability(def_id).unwrap() {\n+                        hir::MutImmutable => McImmutable,\n+                        hir::MutMutable => McDeclared,\n+                    },\n                     ty:expr_ty,\n                     note: NoteNone\n                 })"}, {"sha": "8c1e345cdaec5c94e6b64f91a39b430c660eef5c", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -238,6 +238,9 @@ rustc_queries! {\n         /// True if this is a foreign item (i.e., linked via `extern { ... }`).\n         query is_foreign_item(_: DefId) -> bool {}\n \n+        /// Returns `Some(mutability)` if the node pointed to by `def_id` is a static item.\n+        query static_mutability(_: DefId) -> Option<hir::Mutability> {}\n+\n         /// Get a map with the variance of every item; use `item_variance`\n         /// instead.\n         query crate_variances(_: CrateNum) -> Lrc<ty::CrateVariancesMap> {"}, {"sha": "67507f7b5d11647b4b6614f79605c3cabf7d8193", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 9, "deletions": 30, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -1,9 +1,8 @@\n //! Miscellaneous type-system utilities that are too small to deserve their own modules.\n \n-use crate::hir::def::Def;\n+use crate::hir;\n use crate::hir::def_id::DefId;\n use crate::hir::map::DefPathData;\n-use crate::hir::{self, Node};\n use crate::mir::interpret::{sign_extend, truncate};\n use crate::ich::NodeIdHashingMode;\n use crate::traits::{self, ObligationCause};\n@@ -613,34 +612,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         })\n     }\n \n-    /// Returns `true` if the node pointed to by `def_id` is a static item, and its mutability.\n-    pub fn is_static(&self, def_id: DefId) -> Option<hir::Mutability> {\n-        if let Some(node) = self.hir().get_if_local(def_id) {\n-            match node {\n-                Node::Item(&hir::Item {\n-                    node: hir::ItemKind::Static(_, mutbl, _), ..\n-                }) => Some(mutbl),\n-                Node::ForeignItem(&hir::ForeignItem {\n-                    node: hir::ForeignItemKind::Static(_, is_mutbl), ..\n-                }) =>\n-                    Some(if is_mutbl {\n-                        hir::Mutability::MutMutable\n-                    } else {\n-                        hir::Mutability::MutImmutable\n-                    }),\n-                _ => None\n-            }\n-        } else {\n-            match self.describe_def(def_id) {\n-                Some(Def::Static(_, is_mutbl)) =>\n-                    Some(if is_mutbl {\n-                        hir::Mutability::MutMutable\n-                    } else {\n-                        hir::Mutability::MutImmutable\n-                    }),\n-                _ => None\n-            }\n-        }\n+    /// Returns `true` if the node pointed to by `def_id` is a `static` item.\n+    pub fn is_static(&self, def_id: DefId) -> bool {\n+        self.static_mutability(def_id).is_some()\n+    }\n+\n+    /// Returns `true` if the node pointed to by `def_id` is a mutable `static` item.\n+    pub fn is_mutable_static(&self, def_id: DefId) -> bool {\n+        self.static_mutability(def_id) == Some(hir::MutMutable)\n     }\n \n     /// Expands the given impl trait type, stopping if the type is recursive."}, {"sha": "b9fd9629e6ff193ba17f007c7a12c290b92ce17e", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -322,7 +322,7 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                         self.get_fn(fn_instance)\n                     }\n                     Some(AllocKind::Static(def_id)) => {\n-                        assert!(self.tcx.is_static(def_id).is_some());\n+                        assert!(self.tcx.is_static(def_id));\n                         self.get_static(def_id)\n                     }\n                     None => bug!(\"missing allocation {:?}\", ptr.alloc_id),"}, {"sha": "60d75480e61a65365dc5129f5e6f58b4534406fd", "filename": "src/librustc_codegen_ssa/mono_item.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_codegen_ssa%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_codegen_ssa%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmono_item.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -1,5 +1,4 @@\n use rustc::hir;\n-use rustc::hir::def::Def;\n use rustc::mir::mono::{Linkage, Visibility};\n use rustc::ty::layout::HasTyCtxt;\n use std::fmt;\n@@ -19,17 +18,7 @@ pub trait MonoItemExt<'a, 'tcx: 'a>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n \n         match *self.as_mono_item() {\n             MonoItem::Static(def_id) => {\n-                let tcx = cx.tcx();\n-                let is_mutable = match tcx.describe_def(def_id) {\n-                    Some(Def::Static(_, is_mutable)) => is_mutable,\n-                    Some(other) => {\n-                        bug!(\"Expected Def::Static, found {:?}\", other)\n-                    }\n-                    None => {\n-                        bug!(\"Expected Def::Static for {:?}, found nothing\", def_id)\n-                    }\n-                };\n-                cx.codegen_static(def_id, is_mutable);\n+                cx.codegen_static(def_id, cx.tcx().is_mutable_static(def_id));\n             }\n             MonoItem::GlobalAsm(hir_id) => {\n                 let item = cx.tcx().hir().expect_item_by_hir_id(hir_id);"}, {"sha": "5fde4331d4702778a8754be0c437f8698c0fb5f2", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -1171,8 +1171,7 @@ declare_lint_pass!(\n \n fn check_const(cx: &LateContext<'_, '_>, body_id: hir::BodyId) {\n     let def_id = cx.tcx.hir().body_owner_def_id(body_id);\n-    let is_static = cx.tcx.is_static(def_id).is_some();\n-    let param_env = if is_static {\n+    let param_env = if cx.tcx.is_static(def_id) {\n         // Use the same param_env as `codegen_static_initializer`, to reuse the cache.\n         ty::ParamEnv::reveal_all()\n     } else {"}, {"sha": "1a1b933ccf311683a958838cc42500b7c3ecf6b1", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -137,6 +137,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     inherent_impls => { Lrc::new(cdata.get_inherent_implementations_for_type(def_id.index)) }\n     is_const_fn_raw => { cdata.is_const_fn_raw(def_id.index) }\n     is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n+    static_mutability => { cdata.static_mutability(def_id.index) }\n     describe_def => { cdata.get_def(def_id.index) }\n     def_span => { cdata.get_span(def_id.index, &tcx.sess) }\n     lookup_stability => {"}, {"sha": "0e3d05d29a3da9a5e65678cd74c02deca3479bbf", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -404,9 +404,9 @@ impl<'tcx> EntryKind<'tcx> {\n             EntryKind::Const(..) => Def::Const(did),\n             EntryKind::AssociatedConst(..) => Def::AssociatedConst(did),\n             EntryKind::ImmStatic |\n-            EntryKind::ForeignImmStatic => Def::Static(did, false),\n             EntryKind::MutStatic |\n-            EntryKind::ForeignMutStatic => Def::Static(did, true),\n+            EntryKind::ForeignImmStatic |\n+            EntryKind::ForeignMutStatic => Def::Static(did),\n             EntryKind::Struct(_, _) => Def::Struct(did),\n             EntryKind::Union(_, _) => Def::Union(did),\n             EntryKind::Fn(_) |\n@@ -1163,6 +1163,16 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n+    crate fn static_mutability(&self, id: DefIndex) -> Option<hir::Mutability> {\n+        match self.entry(id).kind {\n+            EntryKind::ImmStatic |\n+            EntryKind::ForeignImmStatic => Some(hir::MutImmutable),\n+            EntryKind::MutStatic |\n+            EntryKind::ForeignMutStatic => Some(hir::MutMutable),\n+            _ => None,\n+        }\n+    }\n+\n     pub fn fn_sig(&self,\n                   id: DefIndex,\n                   tcx: TyCtxt<'a, 'tcx, 'tcx>)"}, {"sha": "a0f17a55a8756965f72d5448b80dd8020d760f9a", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -1647,8 +1647,8 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                 };\n                 EntryKind::ForeignFn(self.lazy(&data))\n             }\n-            hir::ForeignItemKind::Static(_, true) => EntryKind::ForeignMutStatic,\n-            hir::ForeignItemKind::Static(_, false) => EntryKind::ForeignImmStatic,\n+            hir::ForeignItemKind::Static(_, hir::MutMutable) => EntryKind::ForeignMutStatic,\n+            hir::ForeignItemKind::Static(_, hir::MutImmutable) => EntryKind::ForeignImmStatic,\n             hir::ForeignItemKind::Type => EntryKind::ForeignType,\n         };\n "}, {"sha": "43ed85d4ac5412de47fd0bea0481b0a616057364", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -2117,7 +2117,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     is_local_mutation_allowed,\n                 }),\n             Place::Base(PlaceBase::Static(box Static{ kind: StaticKind::Static(def_id), .. })) => {\n-                if self.infcx.tcx.is_static(def_id) != Some(hir::Mutability::MutMutable) {\n+                if !self.infcx.tcx.is_mutable_static(def_id) {\n                     Err(place)\n                 } else {\n                     Ok(RootPlace {"}, {"sha": "ce8f1852551f2c875523ef4e5dffa0163f19d480", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -1321,7 +1321,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                         ..\n                     }) = self.borrowck_context\n                     {\n-                        if tcx.is_static(*def_id).is_some() {\n+                        if tcx.is_static(*def_id) {\n                             ConstraintCategory::UseAsStatic\n                         } else {\n                             ConstraintCategory::UseAsConst\n@@ -1626,7 +1626,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                             ..\n                         }) = self.borrowck_context\n                         {\n-                            if tcx.is_static(*def_id).is_some() {\n+                            if tcx.is_static(*def_id) {\n                                 ConstraintCategory::UseAsStatic\n                             } else {\n                                 ConstraintCategory::UseAsConst"}, {"sha": "913884a8218372567251a9cbd759cbcda881c931", "filename": "src/librustc_mir/borrow_check/place_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -52,7 +52,7 @@ impl<'tcx> PlaceExt<'tcx> for Place<'tcx> {\n             Place::Base(PlaceBase::Static(box Static{ kind: StaticKind::Promoted(_), .. })) =>\n                 false,\n             Place::Base(PlaceBase::Static(box Static{ kind: StaticKind::Static(def_id), .. })) => {\n-                tcx.is_static(*def_id) == Some(hir::Mutability::MutMutable)\n+                tcx.is_mutable_static(*def_id)\n             }\n             Place::Projection(proj) => match proj.elem {\n                 ProjectionElem::Field(..)"}, {"sha": "1bf606109dc76b295b1d141aa18691f7961e5816", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -321,7 +321,7 @@ fn place_base_conflict<'a, 'gcx: 'tcx, 'tcx>(\n                     if def_id_1 != def_id_2 {\n                         debug!(\"place_element_conflict: DISJOINT-STATIC\");\n                         Overlap::Disjoint\n-                    } else if tcx.is_static(*def_id_1) == Some(hir::Mutability::MutMutable) {\n+                    } else if tcx.is_mutable_static(*def_id_1) {\n                         // We ignore mutable statics - they can only be unsafe code.\n                         debug!(\"place_element_conflict: IGNORE-STATIC-MUT\");\n                         Overlap::Disjoint"}, {"sha": "b65f2ba2601e44927c2a4cfc17dd006eacaf3da3", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -6,8 +6,8 @@ use std::borrow::{Borrow, Cow};\n use std::hash::Hash;\n use std::collections::hash_map::Entry;\n \n-use rustc::hir::{self, def_id::DefId};\n use rustc::hir::def::Def;\n+use rustc::hir::def_id::DefId;\n use rustc::mir::interpret::{ConstEvalErr, ErrorHandled};\n use rustc::mir;\n use rustc::ty::{self, TyCtxt, query::TyCtxtAt};\n@@ -158,9 +158,8 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n     ecx.run()?;\n \n     // Intern the result\n-    let internally_mutable = !layout.ty.is_freeze(tcx, param_env, mir.span);\n-    let is_static = tcx.is_static(cid.instance.def_id());\n-    let mutability = if is_static == Some(hir::Mutability::MutMutable) || internally_mutable {\n+    let mutability = if tcx.is_mutable_static(cid.instance.def_id()) ||\n+                     !layout.ty.is_freeze(tcx, param_env, mir.span) {\n         Mutability::Mutable\n     } else {\n         Mutability::Immutable\n@@ -533,7 +532,7 @@ fn validate_and_turn_into_const<'a, 'tcx>(\n         }\n         // Now that we validated, turn this into a proper constant.\n         let def_id = cid.instance.def.def_id();\n-        if tcx.is_static(def_id).is_some() || cid.promoted.is_some() {\n+        if tcx.is_static(def_id) || cid.promoted.is_some() {\n             Ok(mplace_to_const(&ecx, mplace))\n         } else {\n             Ok(op_to_const(&ecx, mplace.into()))\n@@ -628,7 +627,7 @@ pub fn const_eval_raw_provider<'a, 'tcx>(\n     }).map_err(|error| {\n         let err = error_to_const_error(&ecx, error);\n         // errors in statics are always emitted as fatal errors\n-        if tcx.is_static(def_id).is_some() {\n+        if tcx.is_static(def_id) {\n             // Ensure that if the above error was either `TooGeneric` or `Reported`\n             // an error must be reported.\n             let reported_err = tcx.sess.track_errors(|| {"}, {"sha": "7ab3341127546d59dd5bf8d93d78352d5829523d", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -960,7 +960,7 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             }\n         }\n \n-        Def::Static(node_id, _) => ExprKind::StaticRef { id: node_id },\n+        Def::Static(id) => ExprKind::StaticRef { id },\n \n         Def::Local(..) | Def::Upvar(..) => convert_var(cx, expr, def),\n "}, {"sha": "4ae8bfe854d786d5c65d69eede3bb375b81acba9", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -634,7 +634,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tc\n         &self,\n         gid: GlobalId<'tcx>,\n     ) -> EvalResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n-        let param_env = if self.tcx.is_static(gid.instance.def_id()).is_some() {\n+        let param_env = if self.tcx.is_static(gid.instance.def_id()) {\n             ty::ParamEnv::reveal_all()\n         } else {\n             self.param_env"}, {"sha": "9674822b47a3ddb7302997e509b7ac9a9d798d05", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -342,7 +342,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         // full query anyway\n         tcx.const_eval_raw(ty::ParamEnv::reveal_all().and(gid)).map_err(|err| {\n             // no need to report anything, the const_eval call takes care of that for statics\n-            assert!(tcx.is_static(def_id).is_some());\n+            assert!(tcx.is_static(def_id));\n             match err {\n                 ErrorHandled::Reported => InterpError::ReferencedConstant.into(),\n                 ErrorHandled::TooGeneric => InterpError::TooGeneric.into(),"}, {"sha": "87c02b7f01da32ba322250aac8d71eb0e34897e8", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -306,7 +306,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             &Place::Base(\n                 PlaceBase::Static(box Static { kind: StaticKind::Static(def_id), .. })\n             ) => {\n-                if self.tcx.is_static(def_id) == Some(hir::Mutability::MutMutable) {\n+                if self.tcx.is_mutable_static(def_id) {\n                     self.require_unsafe(\"use of mutable static\",\n                         \"mutable statics can be mutated by multiple threads: aliasing violations \\\n                          or data races will cause undefined behavior\","}, {"sha": "efae1e56f4dc68c9b1bc4d52313c2d15bb18c7f2", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -592,8 +592,8 @@ fn write_mir_sig(\n     match (descr, src.promoted) {\n         (_, Some(i)) => write!(w, \"{:?} in \", i)?,\n         (Some(Def::Const(_)), _) | (Some(Def::AssociatedConst(_)), _) => write!(w, \"const \")?,\n-        (Some(Def::Static(_, /*is_mutbl*/false)), _) => write!(w, \"static \")?,\n-        (Some(Def::Static(_, /*is_mutbl*/true)), _) => write!(w, \"static mut \")?,\n+        (Some(Def::Static(def_id)), _) =>\n+            write!(w, \"static {}\", if tcx.is_mutable_static(def_id) { \"mut \" } else { \"\" })?,\n         (_, _) if is_function => write!(w, \"fn \")?,\n         (None, _) => {}, // things like anon const, not an item\n         _ => bug!(\"Unexpected def description {:?}\", descr),"}, {"sha": "e2c5c4ee3746d71534a671c81c147716c71cc167", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -329,7 +329,7 @@ fn check_expr_kind<'a, 'tcx>(\n                 // are inherently promotable with the exception\n                 //  of \"#[thread_local]\" statics, which may not\n                 // outlive the current function\n-                Def::Static(did, _) => {\n+                Def::Static(did) => {\n \n                     if v.in_static {\n                         for attr in &v.tcx.get_attrs(did)[..] {"}, {"sha": "6870e97b53b293be99c957a1591000213b5e8f7b", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -28,7 +28,7 @@ use syntax::ast::{Name, Ident};\n use syntax::attr;\n \n use syntax::ast::{self, Block, ForeignItem, ForeignItemKind, Item, ItemKind, NodeId};\n-use syntax::ast::{MetaItemKind, Mutability, StmtKind, TraitItem, TraitItemKind, Variant};\n+use syntax::ast::{MetaItemKind, StmtKind, TraitItem, TraitItemKind, Variant};\n use syntax::ext::base::{MacroKind, SyntaxExtension};\n use syntax::ext::base::Determinacy::Undetermined;\n use syntax::ext::hygiene::Mark;\n@@ -442,9 +442,8 @@ impl<'a> Resolver<'a> {\n             ItemKind::ForeignMod(..) => {}\n \n             // These items live in the value namespace.\n-            ItemKind::Static(_, m, _) => {\n-                let mutbl = m == Mutability::Mutable;\n-                let def = Def::Static(self.definitions.local_def_id(item.id), mutbl);\n+            ItemKind::Static(..) => {\n+                let def = Def::Static(self.definitions.local_def_id(item.id));\n                 self.define(parent, ident, ValueNS, (def, vis, sp, expansion));\n             }\n             ItemKind::Const(..) => {\n@@ -616,8 +615,8 @@ impl<'a> Resolver<'a> {\n             ForeignItemKind::Fn(..) => {\n                 (Def::Fn(self.definitions.local_def_id(item.id)), ValueNS)\n             }\n-            ForeignItemKind::Static(_, m) => {\n-                (Def::Static(self.definitions.local_def_id(item.id), m), ValueNS)\n+            ForeignItemKind::Static(..) => {\n+                (Def::Static(self.definitions.local_def_id(item.id)), ValueNS)\n             }\n             ForeignItemKind::Ty => {\n                 (Def::ForeignTy(self.definitions.local_def_id(item.id)), TypeNS)"}, {"sha": "90fe6a60dd77aba98c32ae4dfdab94593c6afa9d", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -798,7 +798,7 @@ impl Sig for ast::ForeignItem {\n             }\n             ast::ForeignItemKind::Static(ref ty, m) => {\n                 let mut text = \"static \".to_owned();\n-                if m {\n+                if m == ast::Mutability::Mutable {\n                     text.push_str(\"mut \");\n                 }\n                 let name = self.ident.to_string();"}, {"sha": "f5111954f8dfa5897e2ea5218e5d13a2d369c529", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -1665,7 +1665,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             Def::Fn(def_id) |\n             Def::Const(def_id) |\n             Def::ConstParam(def_id) |\n-            Def::Static(def_id, _) => {\n+            Def::Static(def_id) => {\n                 path_segs.push(PathSeg(def_id, last));\n             }\n "}, {"sha": "afb30af054f3f81e6143d0fcd03318b76da10d45", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -78,6 +78,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n         impl_trait_ref,\n         impl_polarity,\n         is_foreign_item,\n+        static_mutability,\n         codegen_fn_attrs,\n         collect_mod_item_types,\n         ..*providers\n@@ -2361,6 +2362,22 @@ fn is_foreign_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool\n     }\n }\n \n+fn static_mutability<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    def_id: DefId,\n+) -> Option<hir::Mutability> {\n+    match tcx.hir().get_if_local(def_id) {\n+        Some(Node::Item(&hir::Item {\n+            node: hir::ItemKind::Static(_, mutbl, _), ..\n+        })) |\n+        Some(Node::ForeignItem( &hir::ForeignItem {\n+            node: hir::ForeignItemKind::Static(_, mutbl), ..\n+        })) => Some(mutbl),\n+        Some(_) => None,\n+        _ => bug!(\"static_mutability applied to non-local def-id {:?}\", def_id),\n+    }\n+}\n+\n fn from_target_feature(\n     tcx: TyCtxt<'_, '_, '_>,\n     id: DefId,"}, {"sha": "5da74a588c96eb665112c56f2d40c07d28426d12", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -93,9 +93,9 @@ pub fn try_inline(\n             record_extern_fqn(cx, did, clean::TypeKind::Module);\n             clean::ModuleItem(build_module(cx, did, visited))\n         }\n-        Def::Static(did, mtbl) => {\n+        Def::Static(did) => {\n             record_extern_fqn(cx, did, clean::TypeKind::Static);\n-            clean::StaticItem(build_static(cx, did, mtbl))\n+            clean::StaticItem(build_static(cx, did, cx.tcx.is_mutable_static(did)))\n         }\n         Def::Const(did) => {\n             record_extern_fqn(cx, did, clean::TypeKind::Const);"}, {"sha": "586ae6659bb075e35c9e894c4655490fc0a20c1d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -4055,7 +4055,7 @@ impl Clean<Item> for hir::ForeignItem {\n             hir::ForeignItemKind::Static(ref ty, mutbl) => {\n                 ForeignStaticItem(Static {\n                     type_: ty.clean(cx),\n-                    mutability: if mutbl {Mutable} else {Immutable},\n+                    mutability: mutbl.clean(cx),\n                     expr: String::new(),\n                 })\n             }\n@@ -4204,7 +4204,7 @@ pub fn register_def(cx: &DocContext<'_>, def: Def) -> DefId {\n         Def::Mod(i) => (i, TypeKind::Module),\n         Def::ForeignTy(i) => (i, TypeKind::Foreign),\n         Def::Const(i) => (i, TypeKind::Const),\n-        Def::Static(i, _) => (i, TypeKind::Static),\n+        Def::Static(i) => (i, TypeKind::Static),\n         Def::Variant(i) => (cx.tcx.parent(i).expect(\"cannot get parent def id\"),\n                             TypeKind::Enum),\n         Def::Macro(i, mac_kind) => match mac_kind {"}, {"sha": "a5472c622e645afabe80050611ac666c066f57a0", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -2340,9 +2340,8 @@ pub struct ForeignItem {\n pub enum ForeignItemKind {\n     /// A foreign function.\n     Fn(P<FnDecl>, Generics),\n-    /// A foreign static item (`static ext: u8`), with optional mutability.\n-    /// (The boolean is `true` for mutable items).\n-    Static(P<Ty>, bool),\n+    /// A foreign static item (`static ext: u8`).\n+    Static(P<Ty>, Mutability),\n     /// A foreign type.\n     Ty,\n     /// A macro invocation."}, {"sha": "824192f073924c64432d228bbe38fb329d445be7", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -7683,7 +7683,7 @@ impl<'a> Parser<'a> {\n     /// Assumes that the `static` keyword is already parsed.\n     fn parse_item_foreign_static(&mut self, vis: ast::Visibility, lo: Span, attrs: Vec<Attribute>)\n                                  -> PResult<'a, ForeignItem> {\n-        let mutbl = self.eat_keyword(keywords::Mut);\n+        let mutbl = self.parse_mutability();\n         let ident = self.parse_ident()?;\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;"}, {"sha": "d94e4762e6718e4008f133df25ab1b53595ad53f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a75a172859d906d8e6a34af4afff9830af495c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=31a75a172859d906d8e6a34af4afff9830af495c", "patch": "@@ -1142,7 +1142,7 @@ impl<'a> State<'a> {\n             }\n             ast::ForeignItemKind::Static(ref t, m) => {\n                 self.head(visibility_qualified(&item.vis, \"static\"))?;\n-                if m {\n+                if m == ast::Mutability::Mutable {\n                     self.word_space(\"mut\")?;\n                 }\n                 self.print_ident(item.ident)?;"}]}