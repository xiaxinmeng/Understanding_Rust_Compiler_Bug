{"sha": "dbaf2de0bb9fd1e89b2abf33f4e4194cc90b273a", "node_id": "C_kwDOAAsO6NoAKGRiYWYyZGUwYmI5ZmQxZTg5YjJhYmYzM2Y0ZTQxOTRjYzkwYjI3M2E", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-11-05T01:32:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-05T01:32:41Z"}, "message": "Rollup merge of #90533 - Smittyvb:patch-1, r=joshtriplett\n\nAdd note about x86 instruction prefixes in asm! to unstable book\n\nSince rustc doesn't do the assembly parsing itself, it is unable to detect when inline assembly ends with an instruction prefix, which doesn't make sense since it would apply to instructions from the compiler. This fixes #82314 by mentioning that x86 instruction prefixes must not be used in inline assembly. AFAICT x86 is the only instruction set with instruction prefixes.", "tree": {"sha": "cf38ad9e513da80eb36bfd816890d3e27454dcbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf38ad9e513da80eb36bfd816890d3e27454dcbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbaf2de0bb9fd1e89b2abf33f4e4194cc90b273a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhhIm6CRBK7hj4Ov3rIwAASsYIAHJ1TUkti0z4E0vznSEu8f+D\nLe1ZNY6E2krw7GV7p8nYTpG9LA/yxsYEODnuxIi0oR5fYrtk/cT1ZTgbGQlxmzF6\nPXeyW4Rl90u8VIiKMDlYCTgyyK6c+q3hOammW6/ctgKSOn+li9K+EdWapUxTproe\nuSMPioyk526WZ9ism06ztpMcW899GQO/G1Cdoaul7fjdo+T16Mi/5s7WW0dZwLs/\nCt7uH7vdFKYnltD4anfp4amLSR36ZyuWCCahnwei5wbsK3cZf5Zzs31gZb4XQtcn\nOEIbdA7p6NbJeWE8ga03HS+0IwV5HXLnR43OBsnZ4Z0s439HLnCk7Spb+T7Npso=\n=upWu\n-----END PGP SIGNATURE-----\n", "payload": "tree cf38ad9e513da80eb36bfd816890d3e27454dcbc\nparent 282d696009c74f8fc1487cff3b8dc28e6eb7041b\nparent 773cc4f52b7f6bfa5b9ad0878583fb0ac9e9f2ea\nauthor Yuki Okushi <jtitor@2k36.org> 1636075961 +0900\ncommitter GitHub <noreply@github.com> 1636075961 +0900\n\nRollup merge of #90533 - Smittyvb:patch-1, r=joshtriplett\n\nAdd note about x86 instruction prefixes in asm! to unstable book\n\nSince rustc doesn't do the assembly parsing itself, it is unable to detect when inline assembly ends with an instruction prefix, which doesn't make sense since it would apply to instructions from the compiler. This fixes #82314 by mentioning that x86 instruction prefixes must not be used in inline assembly. AFAICT x86 is the only instruction set with instruction prefixes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbaf2de0bb9fd1e89b2abf33f4e4194cc90b273a", "html_url": "https://github.com/rust-lang/rust/commit/dbaf2de0bb9fd1e89b2abf33f4e4194cc90b273a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbaf2de0bb9fd1e89b2abf33f4e4194cc90b273a/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "282d696009c74f8fc1487cff3b8dc28e6eb7041b", "url": "https://api.github.com/repos/rust-lang/rust/commits/282d696009c74f8fc1487cff3b8dc28e6eb7041b", "html_url": "https://github.com/rust-lang/rust/commit/282d696009c74f8fc1487cff3b8dc28e6eb7041b"}, {"sha": "773cc4f52b7f6bfa5b9ad0878583fb0ac9e9f2ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/773cc4f52b7f6bfa5b9ad0878583fb0ac9e9f2ea", "html_url": "https://github.com/rust-lang/rust/commit/773cc4f52b7f6bfa5b9ad0878583fb0ac9e9f2ea"}], "stats": {"total": 2, "additions": 2, "deletions": 0}, "files": [{"sha": "84fc6dcc33979d1605ab373e13cb00aa9bd622eb", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbaf2de0bb9fd1e89b2abf33f4e4194cc90b273a/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/dbaf2de0bb9fd1e89b2abf33f4e4194cc90b273a/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=dbaf2de0bb9fd1e89b2abf33f4e4194cc90b273a", "patch": "@@ -885,5 +885,7 @@ The compiler performs some additional checks on options:\n     - You are responsible for switching any target-specific state (e.g. thread-local storage, stack bounds).\n     - The set of memory locations that you may access is the intersection of those allowed by the `asm!` blocks you entered and exited.\n - You cannot assume that an `asm!` block will appear exactly once in the output binary. The compiler is allowed to instantiate multiple copies of the `asm!` block, for example when the function containing it is inlined in multiple places.\n+- On x86, inline assembly must not end with an instruction prefix (such as `LOCK`) that would apply to instructions generated by the compiler.\n+  - The compiler is currently unable to detect this due to the way inline assembly is compiled, but may catch and reject this in the future.\n \n > **Note**: As a general rule, the flags covered by `preserves_flags` are those which are *not* preserved when performing a function call."}]}