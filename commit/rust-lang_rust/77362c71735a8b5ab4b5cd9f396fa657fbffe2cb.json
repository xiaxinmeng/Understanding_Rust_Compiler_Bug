{"sha": "77362c71735a8b5ab4b5cd9f396fa657fbffe2cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MzYyYzcxNzM1YThiNWFiNGI1Y2Q5ZjM5NmZhNjU3ZmJmZmUyY2I=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-10T12:45:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-10T12:45:07Z"}, "message": "Merge #6238\n\n6238: Split punctuation semantic highlighting up into more tags r=matklad a=Veykril\n\nOpen question would be the name of the delimiter modifiers. I chose them this was as I see them this way but from what I remember people tend to mix the names however they like. So maybe using `delimSquare`, `delimCurly`, `delimRound` would be better. That would also go well with `angle` becoming `delimAngle`?\r\n\r\nCloses #6152\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "8c47a7929d15e6e4b36a854a662c3ea5ee7d972c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c47a7929d15e6e4b36a854a662c3ea5ee7d972c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf+vbTCRBK7hj4Ov3rIwAAdHIIAKQWas6R+c5XIrFPQcVPHdB3\nYqPKg8H5UL2o97pscB4USNkTYkUqiNk71mVI9jpmOU6CV93I5kWWPoer+lewixIF\nfU4IuNgxb04mjf5iezaMvHnAHDPFZ/Kt6qWrhyhVtRKqIVUnu0huEkaCJAjvbtJK\nvu3EcpO3hXE9DAp4aWQcfC3QkBPvU4z2kw1M19EuHhZMrLYMUuBOO/JM1Yg4N77D\n0djVt38Ssl5nITrILJWFwaP/iMDyU/hWv+FLhGaFVXYtatQ4/SS5pvzVoXBRctp7\nPvpkEdrRo1mjR8sZxz3XJaqj9EdE/CkxUvzElTEyd0m9EB09Yak20f1Wy/Ck0l4=\n=mK0x\n-----END PGP SIGNATURE-----\n", "payload": "tree 8c47a7929d15e6e4b36a854a662c3ea5ee7d972c\nparent dcbb77cb6c75db9b300abe0fe6ed4668e2ef1193\nparent 78fe6133c4908aefcf5c690e665abba9ef2389eb\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1610282707 +0000\ncommitter GitHub <noreply@github.com> 1610282707 +0000\n\nMerge #6238\n\n6238: Split punctuation semantic highlighting up into more tags r=matklad a=Veykril\n\nOpen question would be the name of the delimiter modifiers. I chose them this was as I see them this way but from what I remember people tend to mix the names however they like. So maybe using `delimSquare`, `delimCurly`, `delimRound` would be better. That would also go well with `angle` becoming `delimAngle`?\r\n\r\nCloses #6152\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb", "html_url": "https://github.com/rust-lang/rust/commit/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcbb77cb6c75db9b300abe0fe6ed4668e2ef1193", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcbb77cb6c75db9b300abe0fe6ed4668e2ef1193", "html_url": "https://github.com/rust-lang/rust/commit/dcbb77cb6c75db9b300abe0fe6ed4668e2ef1193"}, {"sha": "78fe6133c4908aefcf5c690e665abba9ef2389eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/78fe6133c4908aefcf5c690e665abba9ef2389eb", "html_url": "https://github.com/rust-lang/rust/commit/78fe6133c4908aefcf5c690e665abba9ef2389eb"}], "stats": {"total": 675, "additions": 368, "deletions": 307}, "files": [{"sha": "1f368cbd000a6016b3d7130e8443f397deff7c15", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=77362c71735a8b5ab4b5cd9f396fa657fbffe2cb", "patch": "@@ -76,7 +76,7 @@ pub use crate::{\n     references::{rename::RenameError, Declaration, ReferenceSearchResult},\n     runnables::{Runnable, RunnableKind, TestId},\n     syntax_highlighting::{\n-        tags::{Highlight, HlMod, HlMods, HlTag},\n+        tags::{Highlight, HlMod, HlMods, HlPunct, HlTag},\n         HlRange,\n     },\n };"}, {"sha": "34bae49a85a2adebe297da752a9c2ee6ee21f058", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=77362c71735a8b5ab4b5cd9f396fa657fbffe2cb", "patch": "@@ -12,7 +12,7 @@ use syntax::{\n     SyntaxNode, SyntaxToken, T,\n };\n \n-use crate::{Highlight, HlMod, HlTag, SymbolKind};\n+use crate::{syntax_highlighting::tags::HlPunct, Highlight, HlMod, HlTag, SymbolKind};\n \n pub(super) fn element(\n     sema: &Semantics<RootDatabase>,\n@@ -173,7 +173,7 @@ pub(super) fn element(\n                 } else if let Some(ast::PrefixOp::Deref) = prefix_expr.op_kind() {\n                     HlTag::Operator.into()\n                 } else {\n-                    HlTag::Punctuation.into()\n+                    HlTag::Punctuation(HlPunct::Other).into()\n                 }\n             }\n             T![-] if element.parent().and_then(ast::PrefixExpr::cast).is_some() => {\n@@ -196,7 +196,18 @@ pub(super) fn element(\n             _ if element.parent().and_then(ast::RangePat::cast).is_some() => HlTag::Operator.into(),\n             _ if element.parent().and_then(ast::RestPat::cast).is_some() => HlTag::Operator.into(),\n             _ if element.parent().and_then(ast::Attr::cast).is_some() => HlTag::Attribute.into(),\n-            _ => HlTag::Punctuation.into(),\n+            kind => HlTag::Punctuation(match kind {\n+                T!['['] | T![']'] => HlPunct::Bracket,\n+                T!['{'] | T!['}'] => HlPunct::Brace,\n+                T!['('] | T![')'] => HlPunct::Parenthesis,\n+                T![<] | T![>] => HlPunct::Angle,\n+                T![,] => HlPunct::Comma,\n+                T![:] => HlPunct::Colon,\n+                T![;] => HlPunct::Semi,\n+                T![.] => HlPunct::Dot,\n+                _ => HlPunct::Other,\n+            })\n+            .into(),\n         },\n \n         k if k.is_keyword() => {"}, {"sha": "a4396e790367b309c50fd125dbd9c230f62cf0ef", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=77362c71735a8b5ab4b5cd9f396fa657fbffe2cb", "patch": "@@ -29,7 +29,7 @@ pub enum HlTag {\n     EscapeSequence,\n     FormatSpecifier,\n     Keyword,\n-    Punctuation,\n+    Punctuation(HlPunct),\n     Operator,\n     UnresolvedReference,\n \n@@ -61,6 +61,28 @@ pub enum HlMod {\n     Unsafe,\n }\n \n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n+pub enum HlPunct {\n+    /// []\n+    Bracket,\n+    /// {}\n+    Brace,\n+    /// ()\n+    Parenthesis,\n+    /// <>\n+    Angle,\n+    /// ,\n+    Comma,\n+    /// .\n+    Dot,\n+    /// :\n+    Colon,\n+    /// ;\n+    Semi,\n+    ///\n+    Other,\n+}\n+\n impl HlTag {\n     fn as_str(self) -> &'static str {\n         match self {\n@@ -95,7 +117,17 @@ impl HlTag {\n             HlTag::EscapeSequence => \"escape_sequence\",\n             HlTag::FormatSpecifier => \"format_specifier\",\n             HlTag::Keyword => \"keyword\",\n-            HlTag::Punctuation => \"punctuation\",\n+            HlTag::Punctuation(punct) => match punct {\n+                HlPunct::Bracket => \"bracket\",\n+                HlPunct::Brace => \"brace\",\n+                HlPunct::Parenthesis => \"parentheses\",\n+                HlPunct::Angle => \"angle\",\n+                HlPunct::Comma => \"comma\",\n+                HlPunct::Dot => \"dot\",\n+                HlPunct::Colon => \"colon\",\n+                HlPunct::Semi => \"semicolon\",\n+                HlPunct::Other => \"punctuation\",\n+            },\n             HlTag::NumericLiteral => \"numeric_literal\",\n             HlTag::Operator => \"operator\",\n             HlTag::StringLiteral => \"string_literal\","}, {"sha": "d4e7b45befd2a09eab6c735336bb5c07606ec49d", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_assoc_functions.html", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "raw_url": "https://github.com/rust-lang/rust/raw/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html?ref=77362c71735a8b5ab4b5cd9f396fa657fbffe2cb", "patch": "@@ -36,22 +36,22 @@\n \n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n-<pre><code><span class=\"keyword\">fn</span> <span class=\"function declaration\">not_static</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+<pre><code><span class=\"keyword\">fn</span> <span class=\"function declaration\">not_static</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n-<span class=\"keyword\">struct</span> <span class=\"struct declaration\">foo</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+<span class=\"keyword\">struct</span> <span class=\"struct declaration\">foo</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n-<span class=\"keyword\">impl</span> <span class=\"struct\">foo</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration static associated\">is_static</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">is_not_static</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n-<span class=\"punctuation\">}</span>\n+<span class=\"keyword\">impl</span> <span class=\"struct\">foo</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration static associated\">is_static</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">is_not_static</span><span class=\"parentheses\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"parentheses\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n \n-<span class=\"keyword\">trait</span> <span class=\"trait declaration\">t</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration static associated\">t_is_static</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">t_is_not_static</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n-<span class=\"punctuation\">}</span>\n+<span class=\"keyword\">trait</span> <span class=\"trait declaration\">t</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration static associated\">t_is_static</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">t_is_not_static</span><span class=\"parentheses\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"parentheses\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n \n-<span class=\"keyword\">impl</span> <span class=\"trait\">t</span> <span class=\"keyword\">for</span> <span class=\"struct\">foo</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration static associated\">is_static</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">is_not_static</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n-<span class=\"punctuation\">}</span>\n+<span class=\"keyword\">impl</span> <span class=\"trait\">t</span> <span class=\"keyword\">for</span> <span class=\"struct\">foo</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration static associated\">is_static</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">is_not_static</span><span class=\"parentheses\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"parentheses\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n         </code></pre>\n\\ No newline at end of file"}, {"sha": "df0cf3704a67782c65706af3c3dfe469c1ac6127", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=77362c71735a8b5ab4b5cd9f396fa657fbffe2cb", "patch": "@@ -37,72 +37,72 @@\n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n <pre><code><span class=\"comment documentation\">/// ```</span>\n-<span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"punctuation injected\">_</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"string_literal injected\">\"early doctests should not go boom\"</span><span class=\"punctuation injected\">;</span>\n+<span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"punctuation injected\">_</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"string_literal injected\">\"early doctests should not go boom\"</span><span class=\"semicolon injected\">;</span>\n <span class=\"comment documentation\">/// ```</span>\n-<span class=\"keyword\">struct</span> <span class=\"struct declaration\">Foo</span> <span class=\"punctuation\">{</span>\n-    <span class=\"field declaration\">bar</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">bool</span><span class=\"punctuation\">,</span>\n-<span class=\"punctuation\">}</span>\n+<span class=\"keyword\">struct</span> <span class=\"struct declaration\">Foo</span> <span class=\"brace\">{</span>\n+    <span class=\"field declaration\">bar</span><span class=\"colon\">:</span> <span class=\"builtin_type\">bool</span><span class=\"comma\">,</span>\n+<span class=\"brace\">}</span>\n \n-<span class=\"keyword\">impl</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span>\n+<span class=\"keyword\">impl</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span>\n     <span class=\"comment documentation\">/// ```</span>\n     <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"punctuation injected\">_</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"string_literal injected\">\"Call me</span>\n     <span class=\"comment\">//    KILLER WHALE</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"string_literal injected\">    Ishmael.\"</span><span class=\"punctuation injected\">;</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"string_literal injected\">    Ishmael.\"</span><span class=\"semicolon injected\">;</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"constant declaration associated\">bar</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">bool</span> <span class=\"operator\">=</span> <span class=\"bool_literal\">true</span><span class=\"punctuation\">;</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"constant declaration associated\">bar</span><span class=\"colon\">:</span> <span class=\"builtin_type\">bool</span> <span class=\"operator\">=</span> <span class=\"bool_literal\">true</span><span class=\"semicolon\">;</span>\n \n     <span class=\"comment documentation\">/// Constructs a new `Foo`.</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// # Examples</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"comment documentation\">/// #</span><span class=\"none injected\"> </span><span class=\"attribute attribute injected\">#</span><span class=\"attribute attribute injected\">!</span><span class=\"attribute attribute injected\">[</span><span class=\"function attribute injected\">allow</span><span class=\"punctuation attribute injected\">(</span><span class=\"attribute attribute injected\">unused_mut</span><span class=\"punctuation attribute injected\">)</span><span class=\"attribute attribute injected\">]</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"keyword injected\">mut</span><span class=\"none injected\"> </span><span class=\"variable declaration injected mutable\">foo</span><span class=\"punctuation injected\">:</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span>\n+    <span class=\"comment documentation\">/// #</span><span class=\"none injected\"> </span><span class=\"attribute attribute injected\">#</span><span class=\"attribute attribute injected\">!</span><span class=\"attribute attribute injected\">[</span><span class=\"function attribute injected\">allow</span><span class=\"parentheses attribute injected\">(</span><span class=\"attribute attribute injected\">unused_mut</span><span class=\"parentheses attribute injected\">)</span><span class=\"attribute attribute injected\">]</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"keyword injected\">mut</span><span class=\"none injected\"> </span><span class=\"variable declaration injected mutable\">foo</span><span class=\"colon injected\">:</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"parentheses injected\">(</span><span class=\"parentheses injected\">)</span><span class=\"semicolon injected\">;</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"function declaration static associated\">new</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span>\n-        <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span> <span class=\"field\">bar</span><span class=\"punctuation\">:</span> <span class=\"bool_literal\">true</span> <span class=\"punctuation\">}</span>\n-    <span class=\"punctuation\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"function declaration static associated\">new</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span>\n+        <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">bar</span><span class=\"colon\">:</span> <span class=\"bool_literal\">true</span> <span class=\"brace\">}</span>\n+    <span class=\"brace\">}</span>\n \n     <span class=\"comment documentation\">/// `bar` method on `Foo`.</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// # Examples</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">use</span><span class=\"none injected\"> </span><span class=\"module injected\">x</span><span class=\"operator injected\">::</span><span class=\"module injected\">y</span><span class=\"punctuation injected\">;</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">use</span><span class=\"none injected\"> </span><span class=\"module injected\">x</span><span class=\"operator injected\">::</span><span class=\"module injected\">y</span><span class=\"semicolon injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"variable declaration injected\">foo</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"variable declaration injected\">foo</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"parentheses injected\">(</span><span class=\"parentheses injected\">)</span><span class=\"semicolon injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// </span><span class=\"comment injected\">// calls bar on foo</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"macro injected\">assert!</span><span class=\"punctuation injected\">(</span><span class=\"none injected\">foo</span><span class=\"operator injected\">.</span><span class=\"none injected\">bar</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"macro injected\">assert!</span><span class=\"parentheses injected\">(</span><span class=\"none injected\">foo</span><span class=\"operator injected\">.</span><span class=\"none injected\">bar</span><span class=\"parentheses injected\">(</span><span class=\"parentheses injected\">)</span><span class=\"parentheses injected\">)</span><span class=\"semicolon injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"variable declaration injected\">bar</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"variable injected\">foo</span><span class=\"operator injected\">.</span><span class=\"field injected\">bar</span><span class=\"none injected\"> </span><span class=\"operator injected\">||</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"constant injected\">bar</span><span class=\"punctuation injected\">;</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"variable declaration injected\">bar</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"variable injected\">foo</span><span class=\"operator injected\">.</span><span class=\"field injected\">bar</span><span class=\"none injected\"> </span><span class=\"operator injected\">||</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"constant injected\">bar</span><span class=\"semicolon injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// </span><span class=\"comment injected\">/* multi-line</span>\n     <span class=\"comment documentation\">/// </span><span class=\"comment injected\">       comment */</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"variable declaration injected\">multi_line_string</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"string_literal injected\">\"Foo</span>\n     <span class=\"comment documentation\">/// </span><span class=\"string_literal injected\">  bar</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"string_literal injected\">         \"</span><span class=\"punctuation injected\">;</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"string_literal injected\">         \"</span><span class=\"semicolon injected\">;</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```rust,no_run</span>\n-    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"variable declaration injected\">foobar</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"operator injected\">.</span><span class=\"function injected\">bar</span><span class=\"punctuation injected\">(</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span>\n+    <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"variable declaration injected\">foobar</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"parentheses injected\">(</span><span class=\"parentheses injected\">)</span><span class=\"operator injected\">.</span><span class=\"function injected\">bar</span><span class=\"parentheses injected\">(</span><span class=\"parentheses injected\">)</span><span class=\"semicolon injected\">;</span>\n     <span class=\"comment documentation\">/// ```</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```sh</span>\n     <span class=\"comment documentation\">/// echo 1</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">foo</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">bool</span> <span class=\"punctuation\">{</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">foo</span><span class=\"parentheses\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"parentheses\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">bool</span> <span class=\"brace\">{</span>\n         <span class=\"bool_literal\">true</span>\n-    <span class=\"punctuation\">}</span>\n-<span class=\"punctuation\">}</span>\n+    <span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n \n <span class=\"comment documentation\">/// ```</span>\n-<span class=\"comment documentation\">/// </span><span class=\"macro injected\">noop!</span><span class=\"punctuation injected\">(</span><span class=\"numeric_literal injected\">1</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span>\n+<span class=\"comment documentation\">/// </span><span class=\"macro injected\">noop!</span><span class=\"parentheses injected\">(</span><span class=\"numeric_literal injected\">1</span><span class=\"parentheses injected\">)</span><span class=\"semicolon injected\">;</span>\n <span class=\"comment documentation\">/// ```</span>\n-<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">noop</span> <span class=\"punctuation\">{</span>\n-    <span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>expr<span class=\"punctuation\">:</span>expr<span class=\"punctuation\">)</span> <span class=\"operator\">=</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span>\n+<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">noop</span> <span class=\"brace\">{</span>\n+    <span class=\"parentheses\">(</span><span class=\"punctuation\">$</span>expr<span class=\"colon\">:</span>expr<span class=\"parentheses\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n         <span class=\"punctuation\">$</span>expr\n-    <span class=\"punctuation\">}</span>\n-<span class=\"punctuation\">}</span></code></pre>\n\\ No newline at end of file\n+    <span class=\"brace\">}</span>\n+<span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "6f7a7ffff3aa8a1f752012b870696ade87c4b688", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_extern_crate.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html", "raw_url": "https://github.com/rust-lang/rust/raw/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html?ref=77362c71735a8b5ab4b5cd9f396fa657fbffe2cb", "patch": "@@ -36,6 +36,6 @@\n \n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n-<pre><code><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module\">std</span><span class=\"punctuation\">;</span>\n-<span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module\">alloc</span> <span class=\"keyword\">as</span> <span class=\"module\">abc</span><span class=\"punctuation\">;</span>\n+<pre><code><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module\">std</span><span class=\"semicolon\">;</span>\n+<span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module\">alloc</span> <span class=\"keyword\">as</span> <span class=\"module\">abc</span><span class=\"semicolon\">;</span>\n </code></pre>\n\\ No newline at end of file"}, {"sha": "169c268f59348a75a4650599f7ea851b443456dc", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_injection.html", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html", "raw_url": "https://github.com/rust-lang/rust/raw/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_injection.html?ref=77362c71735a8b5ab4b5cd9f396fa657fbffe2cb", "patch": "@@ -36,14 +36,14 @@\n \n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n-<pre><code><span class=\"keyword\">fn</span> <span class=\"function declaration\">fixture</span><span class=\"punctuation\">(</span><span class=\"value_param declaration\">ra_fixture</span><span class=\"punctuation\">:</span> <span class=\"operator\">&</span><span class=\"builtin_type\">str</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+<pre><code><span class=\"keyword\">fn</span> <span class=\"function declaration\">fixture</span><span class=\"parentheses\">(</span><span class=\"value_param declaration\">ra_fixture</span><span class=\"colon\">:</span> <span class=\"operator\">&</span><span class=\"builtin_type\">str</span><span class=\"parentheses\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n-    <span class=\"function\">fixture</span><span class=\"punctuation\">(</span><span class=\"string_literal\">r#\"</span>\n-        <span class=\"keyword\">trait</span> <span class=\"trait declaration\">Foo</span> <span class=\"punctuation\">{</span>\n-            <span class=\"keyword\">fn</span> <span class=\"function declaration static associated\">foo</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n-                <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"2 + 2 = {}\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">4</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-            <span class=\"punctuation\">}</span>\n-        <span class=\"punctuation\">}</span><span class=\"string_literal\">\"#</span>\n-    <span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-<span class=\"punctuation\">}</span></code></pre>\n\\ No newline at end of file\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"function\">fixture</span><span class=\"parentheses\">(</span><span class=\"string_literal\">r#\"</span>\n+        <span class=\"keyword\">trait</span> <span class=\"trait declaration\">Foo</span> <span class=\"brace\">{</span>\n+            <span class=\"keyword\">fn</span> <span class=\"function declaration static associated\">foo</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span> <span class=\"brace\">{</span>\n+                <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"2 + 2 = {}\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">4</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+            <span class=\"brace\">}</span>\n+        <span class=\"brace\">}</span><span class=\"string_literal\">\"#</span>\n+    <span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+<span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "d8626c8bc28e907d4987a6c02e3ac43b113a0fe3", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_strings.html", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html?ref=77362c71735a8b5ab4b5cd9f396fa657fbffe2cb", "patch": "@@ -36,64 +36,64 @@\n \n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n-<pre><code><span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">println</span> <span class=\"punctuation\">{</span>\n-    <span class=\"punctuation\">(</span><span class=\"punctuation\">$</span><span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>arg<span class=\"punctuation\">:</span>tt<span class=\"punctuation\">)</span><span class=\"punctuation\">*</span><span class=\"punctuation\">)</span> <span class=\"operator\">=</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">{</span>\n-        <span class=\"punctuation\">$</span>crate<span class=\"punctuation\">:</span><span class=\"punctuation\">:</span>io<span class=\"punctuation\">:</span><span class=\"punctuation\">:</span>_print<span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>crate<span class=\"punctuation\">:</span><span class=\"punctuation\">:</span>format_args_nl<span class=\"punctuation\">!</span><span class=\"punctuation\">(</span><span class=\"punctuation\">$</span><span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>arg<span class=\"punctuation\">)</span><span class=\"punctuation\">*</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"punctuation\">}</span><span class=\"punctuation\">)</span>\n-<span class=\"punctuation\">}</span>\n+<pre><code><span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">println</span> <span class=\"brace\">{</span>\n+    <span class=\"parentheses\">(</span><span class=\"punctuation\">$</span><span class=\"parentheses\">(</span><span class=\"punctuation\">$</span>arg<span class=\"colon\">:</span>tt<span class=\"parentheses\">)</span><span class=\"punctuation\">*</span><span class=\"parentheses\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"parentheses\">(</span><span class=\"brace\">{</span>\n+        <span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>io<span class=\"colon\">:</span><span class=\"colon\">:</span>_print<span class=\"parentheses\">(</span><span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>format_args_nl<span class=\"punctuation\">!</span><span class=\"parentheses\">(</span><span class=\"punctuation\">$</span><span class=\"parentheses\">(</span><span class=\"punctuation\">$</span>arg<span class=\"parentheses\">)</span><span class=\"punctuation\">*</span><span class=\"parentheses\">)</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"brace\">}</span><span class=\"parentheses\">)</span>\n+<span class=\"brace\">}</span>\n <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n-<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">format_args_nl</span> <span class=\"punctuation\">{</span>\n-    <span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>fmt<span class=\"punctuation\">:</span>expr<span class=\"punctuation\">)</span> <span class=\"operator\">=</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">{</span> <span class=\"comment\">/* compiler built-in */</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n-    <span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>fmt<span class=\"punctuation\">:</span>expr<span class=\"punctuation\">,</span> <span class=\"punctuation\">$</span><span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>args<span class=\"punctuation\">:</span>tt<span class=\"punctuation\">)</span><span class=\"punctuation\">*</span><span class=\"punctuation\">)</span> <span class=\"operator\">=</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">{</span> <span class=\"comment\">/* compiler built-in */</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n-<span class=\"punctuation\">}</span>\n+<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">format_args_nl</span> <span class=\"brace\">{</span>\n+    <span class=\"parentheses\">(</span><span class=\"punctuation\">$</span>fmt<span class=\"colon\">:</span>expr<span class=\"parentheses\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">{</span> <span class=\"comment\">/* compiler built-in */</span> <span class=\"brace\">}</span><span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+    <span class=\"parentheses\">(</span><span class=\"punctuation\">$</span>fmt<span class=\"colon\">:</span>expr<span class=\"comma\">,</span> <span class=\"punctuation\">$</span><span class=\"parentheses\">(</span><span class=\"punctuation\">$</span>args<span class=\"colon\">:</span>tt<span class=\"parentheses\">)</span><span class=\"punctuation\">*</span><span class=\"parentheses\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">{</span> <span class=\"comment\">/* compiler built-in */</span> <span class=\"brace\">}</span><span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+<span class=\"brace\">}</span>\n \n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span> <span class=\"brace\">{</span>\n     <span class=\"comment\">// from https://doc.rust-lang.org/std/fmt/index.html</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>                 <span class=\"comment\">// =&gt; \"Hello\"</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello, </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"world\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>   <span class=\"comment\">// =&gt; \"Hello, world!\"</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"The number is </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>   <span class=\"comment\">// =&gt; \"The number is 1\"</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">?</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">(</span><span class=\"numeric_literal\">3</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">4</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>          <span class=\"comment\">// =&gt; \"(3, 4)\"</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">value</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> value<span class=\"operator\">=</span><span class=\"numeric_literal\">4</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>      <span class=\"comment\">// =&gt; \"4\"</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">1</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>           <span class=\"comment\">// =&gt; \"1 2\"</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">4</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">42</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>             <span class=\"comment\">// =&gt; \"0042\" with leading zerosV</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">1</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>   <span class=\"comment\">// =&gt; \"2 1 1 2\"</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">argument</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> argument <span class=\"operator\">=</span> <span class=\"string_literal\">\"test\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>   <span class=\"comment\">// =&gt; \"test\"</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">1</span><span class=\"punctuation\">,</span> name <span class=\"operator\">=</span> <span class=\"numeric_literal\">2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>          <span class=\"comment\">// =&gt; \"2 1\"</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">a</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"variable\">c</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"variable\">b</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> a<span class=\"operator\">=</span><span class=\"string_literal\">\"a\"</span><span class=\"punctuation\">,</span> b<span class=\"operator\">=</span><span class=\"char_literal\">'b'</span><span class=\"punctuation\">,</span> c<span class=\"operator\">=</span><span class=\"numeric_literal\">3</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>  <span class=\"comment\">// =&gt; \"a 3 b\"</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"{{</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">}}\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>                       <span class=\"comment\">// =&gt; \"{2}\"</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">5</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">5</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"variable\">width</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"punctuation\">,</span> width <span class=\"operator\">=</span> <span class=\"numeric_literal\">5</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&lt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">-</span><span class=\"format_specifier\">&lt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">^</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&gt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">+</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">5</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">27</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">5</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">-</span><span class=\"numeric_literal\">5</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">10</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">27</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">5</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">5</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span>    <span class=\"string_literal\">\"x\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">5</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span>   <span class=\"string_literal\">\"x\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">5</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"variable\">number</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"variable\">prec</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"punctuation\">,</span> prec <span class=\"operator\">=</span> <span class=\"numeric_literal\">5</span><span class=\"punctuation\">,</span> number <span class=\"operator\">=</span> <span class=\"numeric_literal\">0.01</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 fractional digits\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">3</span><span class=\"punctuation\">,</span> name<span class=\"operator\">=</span><span class=\"numeric_literal\">1234.56</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 characters\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">3</span><span class=\"punctuation\">,</span> name<span class=\"operator\">=</span><span class=\"string_literal\">\"1234.56\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&gt;</span><span class=\"numeric_literal\">8</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 right-aligned characters\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">3</span><span class=\"punctuation\">,</span> name<span class=\"operator\">=</span><span class=\"string_literal\">\"1234.56\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello {{}}\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"{{ Hello\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"Hello\"</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>                 <span class=\"comment\">// =&gt; \"Hello\"</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"Hello, </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"world\"</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>   <span class=\"comment\">// =&gt; \"Hello, world!\"</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"The number is </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>   <span class=\"comment\">// =&gt; \"The number is 1\"</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">?</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"parentheses\">(</span><span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">4</span><span class=\"parentheses\">)</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>          <span class=\"comment\">// =&gt; \"(3, 4)\"</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">value</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> value<span class=\"operator\">=</span><span class=\"numeric_literal\">4</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>      <span class=\"comment\">// =&gt; \"4\"</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">2</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>           <span class=\"comment\">// =&gt; \"1 2\"</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">4</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">42</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>             <span class=\"comment\">// =&gt; \"0042\" with leading zerosV</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">2</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>   <span class=\"comment\">// =&gt; \"2 1 1 2\"</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">argument</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> argument <span class=\"operator\">=</span> <span class=\"string_literal\">\"test\"</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>   <span class=\"comment\">// =&gt; \"test\"</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"comma\">,</span> name <span class=\"operator\">=</span> <span class=\"numeric_literal\">2</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>          <span class=\"comment\">// =&gt; \"2 1\"</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">a</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"variable\">c</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"variable\">b</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> a<span class=\"operator\">=</span><span class=\"string_literal\">\"a\"</span><span class=\"comma\">,</span> b<span class=\"operator\">=</span><span class=\"char_literal\">'b'</span><span class=\"comma\">,</span> c<span class=\"operator\">=</span><span class=\"numeric_literal\">3</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>  <span class=\"comment\">// =&gt; \"a 3 b\"</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"{{</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">}}\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">2</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>                       <span class=\"comment\">// =&gt; \"{2}\"</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"variable\">width</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> width <span class=\"operator\">=</span> <span class=\"numeric_literal\">5</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&lt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">-</span><span class=\"format_specifier\">&lt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">^</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&gt;</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">+</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">27</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"punctuation\">-</span><span class=\"numeric_literal\">5</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">10</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">27</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span>    <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span>   <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"variable\">number</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"variable\">prec</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> prec <span class=\"operator\">=</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> number <span class=\"operator\">=</span> <span class=\"numeric_literal\">0.01</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 fractional digits\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> name<span class=\"operator\">=</span><span class=\"numeric_literal\">1234.56</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 characters\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> name<span class=\"operator\">=</span><span class=\"string_literal\">\"1234.56\"</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">, `</span><span class=\"format_specifier\">{</span><span class=\"variable\">name</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">&gt;</span><span class=\"numeric_literal\">8</span><span class=\"format_specifier\">.</span><span class=\"format_specifier\">*</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">` has 3 right-aligned characters\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"Hello\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">3</span><span class=\"comma\">,</span> name<span class=\"operator\">=</span><span class=\"string_literal\">\"1234.56\"</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"Hello {{}}\"</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"{{ Hello\"</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">r\"Hello, </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"punctuation\">,</span> <span class=\"string_literal\">\"world\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">r\"Hello, </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"world\"</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n \n     <span class=\"comment\">// escape sequences</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello</span><span class=\"escape_sequence\">\\n</span><span class=\"string_literal\">World\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"escape_sequence\">\\u{48}</span><span class=\"escape_sequence\">\\x65</span><span class=\"escape_sequence\">\\x6C</span><span class=\"escape_sequence\">\\x6C</span><span class=\"escape_sequence\">\\x6F</span><span class=\"string_literal\"> World\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"Hello</span><span class=\"escape_sequence\">\\n</span><span class=\"string_literal\">World\"</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"</span><span class=\"escape_sequence\">\\u{48}</span><span class=\"escape_sequence\">\\x65</span><span class=\"escape_sequence\">\\x6C</span><span class=\"escape_sequence\">\\x6C</span><span class=\"escape_sequence\">\\x6F</span><span class=\"string_literal\"> World\"</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"escape_sequence\">\\x41</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> A <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">\u043d\u0438\u0447\u043e\u0441\u0438</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">,</span> \u043d\u0438\u0447\u043e\u0441\u0438 <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"escape_sequence\">\\x41</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> A <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">\u043d\u0438\u0447\u043e\u0441\u0438</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> \u043d\u0438\u0447\u043e\u0441\u0438 <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"variable\">x</span><span class=\"format_specifier\">?</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> \"</span><span class=\"punctuation\">,</span> thingy<span class=\"punctuation\">,</span> n2<span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-<span class=\"punctuation\">}</span></code></pre>\n\\ No newline at end of file\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"variable\">x</span><span class=\"format_specifier\">?</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> \"</span><span class=\"comma\">,</span> thingy<span class=\"comma\">,</span> n2<span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+<span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "56a4380fbf95a72e6c7f3fb37107ecf9fae52362", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_unsafe.html", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html?ref=77362c71735a8b5ab4b5cd9f396fa657fbffe2cb", "patch": "@@ -36,65 +36,65 @@\n \n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n-<pre><code><span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function declaration unsafe\">unsafe_fn</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+<pre><code><span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function declaration unsafe\">unsafe_fn</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n-<span class=\"keyword\">union</span> <span class=\"union declaration\">Union</span> <span class=\"punctuation\">{</span>\n-    <span class=\"field declaration\">a</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">u32</span><span class=\"punctuation\">,</span>\n-    <span class=\"field declaration\">b</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">f32</span><span class=\"punctuation\">,</span>\n-<span class=\"punctuation\">}</span>\n+<span class=\"keyword\">union</span> <span class=\"union declaration\">Union</span> <span class=\"brace\">{</span>\n+    <span class=\"field declaration\">a</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u32</span><span class=\"comma\">,</span>\n+    <span class=\"field declaration\">b</span><span class=\"colon\">:</span> <span class=\"builtin_type\">f32</span><span class=\"comma\">,</span>\n+<span class=\"brace\">}</span>\n \n-<span class=\"keyword\">struct</span> <span class=\"struct declaration\">HasUnsafeFn</span><span class=\"punctuation\">;</span>\n+<span class=\"keyword\">struct</span> <span class=\"struct declaration\">HasUnsafeFn</span><span class=\"semicolon\">;</span>\n \n-<span class=\"keyword\">impl</span> <span class=\"struct\">HasUnsafeFn</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function declaration associated unsafe\">unsafe_method</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n-<span class=\"punctuation\">}</span>\n+<span class=\"keyword\">impl</span> <span class=\"struct\">HasUnsafeFn</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword unsafe\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"function declaration associated unsafe\">unsafe_method</span><span class=\"parentheses\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"parentheses\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n \n-<span class=\"keyword\">struct</span> <span class=\"struct declaration\">TypeForStaticMut</span> <span class=\"punctuation\">{</span>\n-    <span class=\"field declaration\">a</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">u8</span>\n-<span class=\"punctuation\">}</span>\n+<span class=\"keyword\">struct</span> <span class=\"struct declaration\">TypeForStaticMut</span> <span class=\"brace\">{</span>\n+    <span class=\"field declaration\">a</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u8</span>\n+<span class=\"brace\">}</span>\n \n-<span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> <span class=\"static declaration mutable unsafe\">global_mut</span><span class=\"punctuation\">:</span> <span class=\"struct\">TypeForStaticMut</span> <span class=\"operator\">=</span> <span class=\"struct\">TypeForStaticMut</span> <span class=\"punctuation\">{</span> <span class=\"field\">a</span><span class=\"punctuation\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n+<span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> <span class=\"static declaration mutable unsafe\">global_mut</span><span class=\"colon\">:</span> <span class=\"struct\">TypeForStaticMut</span> <span class=\"operator\">=</span> <span class=\"struct\">TypeForStaticMut</span> <span class=\"brace\">{</span> <span class=\"field\">a</span><span class=\"colon\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n \n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">repr</span><span class=\"punctuation attribute\">(</span><span class=\"attribute attribute\">packed</span><span class=\"punctuation attribute\">)</span><span class=\"attribute attribute\">]</span>\n-<span class=\"keyword\">struct</span> <span class=\"struct declaration\">Packed</span> <span class=\"punctuation\">{</span>\n-    <span class=\"field declaration\">a</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">u16</span><span class=\"punctuation\">,</span>\n-<span class=\"punctuation\">}</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">repr</span><span class=\"parentheses attribute\">(</span><span class=\"attribute attribute\">packed</span><span class=\"parentheses attribute\">)</span><span class=\"attribute attribute\">]</span>\n+<span class=\"keyword\">struct</span> <span class=\"struct declaration\">Packed</span> <span class=\"brace\">{</span>\n+    <span class=\"field declaration\">a</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u16</span><span class=\"comma\">,</span>\n+<span class=\"brace\">}</span>\n \n-<span class=\"keyword\">trait</span> <span class=\"trait declaration\">DoTheAutoref</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">calls_autoref</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-<span class=\"punctuation\">}</span>\n+<span class=\"keyword\">trait</span> <span class=\"trait declaration\">DoTheAutoref</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">calls_autoref</span><span class=\"parentheses\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+<span class=\"brace\">}</span>\n \n-<span class=\"keyword\">impl</span> <span class=\"trait\">DoTheAutoref</span> <span class=\"keyword\">for</span> <span class=\"builtin_type\">u16</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">calls_autoref</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n-<span class=\"punctuation\">}</span>\n+<span class=\"keyword\">impl</span> <span class=\"trait\">DoTheAutoref</span> <span class=\"keyword\">for</span> <span class=\"builtin_type\">u16</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">calls_autoref</span><span class=\"parentheses\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"parentheses\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n \n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> <span class=\"operator\">=</span> <span class=\"operator\">&</span><span class=\"numeric_literal\">5</span> <span class=\"keyword\">as</span> <span class=\"keyword\">*</span><span class=\"keyword\">const</span> <span class=\"punctuation\">_</span> <span class=\"keyword\">as</span> <span class=\"keyword\">*</span><span class=\"keyword\">const</span> <span class=\"builtin_type\">usize</span><span class=\"punctuation\">;</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\">u</span> <span class=\"operator\">=</span> <span class=\"union\">Union</span> <span class=\"punctuation\">{</span> <span class=\"field\">b</span><span class=\"punctuation\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n-    <span class=\"keyword unsafe\">unsafe</span> <span class=\"punctuation\">{</span>\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> <span class=\"operator\">=</span> <span class=\"operator\">&</span><span class=\"numeric_literal\">5</span> <span class=\"keyword\">as</span> <span class=\"keyword\">*</span><span class=\"keyword\">const</span> <span class=\"punctuation\">_</span> <span class=\"keyword\">as</span> <span class=\"keyword\">*</span><span class=\"keyword\">const</span> <span class=\"builtin_type\">usize</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">u</span> <span class=\"operator\">=</span> <span class=\"union\">Union</span> <span class=\"brace\">{</span> <span class=\"field\">b</span><span class=\"colon\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword unsafe\">unsafe</span> <span class=\"brace\">{</span>\n         <span class=\"comment\">// unsafe fn and method calls</span>\n-        <span class=\"function unsafe\">unsafe_fn</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-        <span class=\"keyword\">let</span> <span class=\"variable declaration\">b</span> <span class=\"operator\">=</span> <span class=\"variable\">u</span><span class=\"operator\">.</span><span class=\"field unsafe\">b</span><span class=\"punctuation\">;</span>\n-        <span class=\"keyword control\">match</span> <span class=\"variable\">u</span> <span class=\"punctuation\">{</span>\n-            <span class=\"union\">Union</span> <span class=\"punctuation\">{</span> <span class=\"field unsafe\">b</span><span class=\"punctuation\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"punctuation\">}</span> <span class=\"operator\">=&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span>\n-            <span class=\"union\">Union</span> <span class=\"punctuation\">{</span> <span class=\"field unsafe\">a</span> <span class=\"punctuation\">}</span> <span class=\"operator\">=&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span>\n-        <span class=\"punctuation\">}</span>\n-        <span class=\"struct\">HasUnsafeFn</span><span class=\"operator\">.</span><span class=\"function associated unsafe\">unsafe_method</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+        <span class=\"function unsafe\">unsafe_fn</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">b</span> <span class=\"operator\">=</span> <span class=\"variable\">u</span><span class=\"operator\">.</span><span class=\"field unsafe\">b</span><span class=\"semicolon\">;</span>\n+        <span class=\"keyword control\">match</span> <span class=\"variable\">u</span> <span class=\"brace\">{</span>\n+            <span class=\"union\">Union</span> <span class=\"brace\">{</span> <span class=\"field unsafe\">b</span><span class=\"colon\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"brace\">}</span> <span class=\"operator\">=&gt;</span> <span class=\"parentheses\">(</span><span class=\"parentheses\">)</span><span class=\"comma\">,</span>\n+            <span class=\"union\">Union</span> <span class=\"brace\">{</span> <span class=\"field unsafe\">a</span> <span class=\"brace\">}</span> <span class=\"operator\">=&gt;</span> <span class=\"parentheses\">(</span><span class=\"parentheses\">)</span><span class=\"comma\">,</span>\n+        <span class=\"brace\">}</span>\n+        <span class=\"struct\">HasUnsafeFn</span><span class=\"operator\">.</span><span class=\"function associated unsafe\">unsafe_method</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n \n         <span class=\"comment\">// unsafe deref</span>\n-        <span class=\"keyword\">let</span> <span class=\"variable declaration\">y</span> <span class=\"operator\">=</span> <span class=\"operator unsafe\">*</span><span class=\"variable\">x</span><span class=\"punctuation\">;</span>\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">y</span> <span class=\"operator\">=</span> <span class=\"operator unsafe\">*</span><span class=\"variable\">x</span><span class=\"semicolon\">;</span>\n \n         <span class=\"comment\">// unsafe access to a static mut</span>\n-        <span class=\"keyword\">let</span> <span class=\"variable declaration\">a</span> <span class=\"operator\">=</span> <span class=\"static mutable unsafe\">global_mut</span><span class=\"operator\">.</span><span class=\"field\">a</span><span class=\"punctuation\">;</span>\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">a</span> <span class=\"operator\">=</span> <span class=\"static mutable unsafe\">global_mut</span><span class=\"operator\">.</span><span class=\"field\">a</span><span class=\"semicolon\">;</span>\n \n         <span class=\"comment\">// unsafe ref of packed fields</span>\n-        <span class=\"keyword\">let</span> <span class=\"variable declaration\">packed</span> <span class=\"operator\">=</span> <span class=\"struct\">Packed</span> <span class=\"punctuation\">{</span> <span class=\"field\">a</span><span class=\"punctuation\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n-        <span class=\"keyword\">let</span> <span class=\"variable declaration\">a</span> <span class=\"operator\">=</span> <span class=\"operator unsafe\">&</span><span class=\"variable\">packed</span><span class=\"operator\">.</span><span class=\"field\">a</span><span class=\"punctuation\">;</span>\n-        <span class=\"keyword\">let</span> <span class=\"keyword unsafe\">ref</span> <span class=\"variable declaration\">a</span> <span class=\"operator\">=</span> <span class=\"variable\">packed</span><span class=\"operator\">.</span><span class=\"field\">a</span><span class=\"punctuation\">;</span>\n-        <span class=\"keyword\">let</span> <span class=\"struct\">Packed</span> <span class=\"punctuation\">{</span> <span class=\"keyword unsafe\">ref</span> <span class=\"field\">a</span> <span class=\"punctuation\">}</span> <span class=\"operator\">=</span> <span class=\"variable\">packed</span><span class=\"punctuation\">;</span>\n-        <span class=\"keyword\">let</span> <span class=\"struct\">Packed</span> <span class=\"punctuation\">{</span> <span class=\"field\">a</span><span class=\"punctuation\">:</span> <span class=\"keyword unsafe\">ref</span> <span class=\"variable declaration\">_a</span> <span class=\"punctuation\">}</span> <span class=\"operator\">=</span> <span class=\"variable\">packed</span><span class=\"punctuation\">;</span>\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">packed</span> <span class=\"operator\">=</span> <span class=\"struct\">Packed</span> <span class=\"brace\">{</span> <span class=\"field\">a</span><span class=\"colon\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">a</span> <span class=\"operator\">=</span> <span class=\"operator unsafe\">&</span><span class=\"variable\">packed</span><span class=\"operator\">.</span><span class=\"field\">a</span><span class=\"semicolon\">;</span>\n+        <span class=\"keyword\">let</span> <span class=\"keyword unsafe\">ref</span> <span class=\"variable declaration\">a</span> <span class=\"operator\">=</span> <span class=\"variable\">packed</span><span class=\"operator\">.</span><span class=\"field\">a</span><span class=\"semicolon\">;</span>\n+        <span class=\"keyword\">let</span> <span class=\"struct\">Packed</span> <span class=\"brace\">{</span> <span class=\"keyword unsafe\">ref</span> <span class=\"field\">a</span> <span class=\"brace\">}</span> <span class=\"operator\">=</span> <span class=\"variable\">packed</span><span class=\"semicolon\">;</span>\n+        <span class=\"keyword\">let</span> <span class=\"struct\">Packed</span> <span class=\"brace\">{</span> <span class=\"field\">a</span><span class=\"colon\">:</span> <span class=\"keyword unsafe\">ref</span> <span class=\"variable declaration\">_a</span> <span class=\"brace\">}</span> <span class=\"operator\">=</span> <span class=\"variable\">packed</span><span class=\"semicolon\">;</span>\n \n         <span class=\"comment\">// unsafe auto ref of packed field</span>\n-        <span class=\"variable\">packed</span><span class=\"operator\">.</span><span class=\"field\">a</span><span class=\"operator\">.</span><span class=\"function associated unsafe\">calls_autoref</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"punctuation\">}</span>\n-<span class=\"punctuation\">}</span></code></pre>\n\\ No newline at end of file\n+        <span class=\"variable\">packed</span><span class=\"operator\">.</span><span class=\"field\">a</span><span class=\"operator\">.</span><span class=\"function associated unsafe\">calls_autoref</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"brace\">}</span>\n+<span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "b7bec083b7415b610fa239e71d1c836665164ea7", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 130, "deletions": 130, "changes": 260, "blob_url": "https://github.com/rust-lang/rust/blob/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=77362c71735a8b5ab4b5cd9f396fa657fbffe2cb", "patch": "@@ -36,187 +36,187 @@\n \n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n-<pre><code><span class=\"keyword\">use</span> <span class=\"module\">inner</span><span class=\"operator\">::</span><span class=\"punctuation\">{</span><span class=\"self_keyword\">self</span> <span class=\"keyword\">as</span> <span class=\"module declaration\">inner_mod</span><span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n-<span class=\"keyword\">mod</span> <span class=\"module declaration\">inner</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+<pre><code><span class=\"keyword\">use</span> <span class=\"module\">inner</span><span class=\"operator\">::</span><span class=\"brace\">{</span><span class=\"self_keyword\">self</span> <span class=\"keyword\">as</span> <span class=\"module declaration\">inner_mod</span><span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+<span class=\"keyword\">mod</span> <span class=\"module declaration\">inner</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n-<span class=\"keyword\">macro</span> <span class=\"unresolved_reference declaration\">Copy</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+<span class=\"keyword\">macro</span> <span class=\"unresolved_reference declaration\">Copy</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n <span class=\"comment\">// Needed for function consuming vs normal</span>\n-<span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration\">marker</span> <span class=\"punctuation\">{</span>\n+<span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration\">marker</span> <span class=\"brace\">{</span>\n     <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">lang</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"copy\"</span><span class=\"attribute attribute\">]</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration\">Copy</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n-<span class=\"punctuation\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration\">Copy</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n \n-<span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration\">ops</span> <span class=\"punctuation\">{</span>\n+<span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration\">ops</span> <span class=\"brace\">{</span>\n     <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">lang</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"fn_once\"</span><span class=\"attribute attribute\">]</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration\">FnOnce</span><span class=\"punctuation\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration\">FnOnce</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n     <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">lang</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"fn_mut\"</span><span class=\"attribute attribute\">]</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration\">FnMut</span><span class=\"punctuation\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"punctuation\">&gt;</span><span class=\"punctuation\">:</span> <span class=\"trait\">FnOnce</span><span class=\"punctuation\">&lt;</span><span class=\"type_param\">Args</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration\">FnMut</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span><span class=\"colon\">:</span> <span class=\"trait\">FnOnce</span><span class=\"angle\">&lt;</span><span class=\"type_param\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n     <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">lang</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"fn\"</span><span class=\"attribute attribute\">]</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration\">Fn</span><span class=\"punctuation\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"punctuation\">&gt;</span><span class=\"punctuation\">:</span> <span class=\"trait\">FnMut</span><span class=\"punctuation\">&lt;</span><span class=\"type_param\">Args</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n-<span class=\"punctuation\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration\">Fn</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span><span class=\"colon\">:</span> <span class=\"trait\">FnMut</span><span class=\"angle\">&lt;</span><span class=\"type_param\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n \n \n-<span class=\"keyword\">struct</span> <span class=\"struct declaration\">Foo</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">pub</span> <span class=\"field declaration\">x</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">i32</span><span class=\"punctuation\">,</span>\n-    <span class=\"keyword\">pub</span> <span class=\"field declaration\">y</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">i32</span><span class=\"punctuation\">,</span>\n-<span class=\"punctuation\">}</span>\n+<span class=\"keyword\">struct</span> <span class=\"struct declaration\">Foo</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">pub</span> <span class=\"field declaration\">x</span><span class=\"colon\">:</span> <span class=\"builtin_type\">i32</span><span class=\"comma\">,</span>\n+    <span class=\"keyword\">pub</span> <span class=\"field declaration\">y</span><span class=\"colon\">:</span> <span class=\"builtin_type\">i32</span><span class=\"comma\">,</span>\n+<span class=\"brace\">}</span>\n \n-<span class=\"keyword\">trait</span> <span class=\"trait declaration\">Bar</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">bar</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span><span class=\"punctuation\">;</span>\n-<span class=\"punctuation\">}</span>\n+<span class=\"keyword\">trait</span> <span class=\"trait declaration\">Bar</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">bar</span><span class=\"parentheses\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"parentheses\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span><span class=\"semicolon\">;</span>\n+<span class=\"brace\">}</span>\n \n-<span class=\"keyword\">impl</span> <span class=\"trait\">Bar</span> <span class=\"keyword\">for</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">bar</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"punctuation\">{</span>\n+<span class=\"keyword\">impl</span> <span class=\"trait\">Bar</span> <span class=\"keyword\">for</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">bar</span><span class=\"parentheses\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"parentheses\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">{</span>\n         <span class=\"self_keyword\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span>\n-    <span class=\"punctuation\">}</span>\n-<span class=\"punctuation\">}</span>\n+    <span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n \n-<span class=\"keyword\">impl</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">baz</span><span class=\"punctuation\">(</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"punctuation\">,</span> <span class=\"value_param declaration\">f</span><span class=\"punctuation\">:</span> <span class=\"struct\">Foo</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"punctuation\">{</span>\n-        <span class=\"value_param\">f</span><span class=\"operator\">.</span><span class=\"function consuming associated\">baz</span><span class=\"punctuation\">(</span><span class=\"self_keyword mutable consuming\">self</span><span class=\"punctuation\">)</span>\n-    <span class=\"punctuation\">}</span>\n+<span class=\"keyword\">impl</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">baz</span><span class=\"parentheses\">(</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"comma\">,</span> <span class=\"value_param declaration\">f</span><span class=\"colon\">:</span> <span class=\"struct\">Foo</span><span class=\"parentheses\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">{</span>\n+        <span class=\"value_param\">f</span><span class=\"operator\">.</span><span class=\"function consuming associated\">baz</span><span class=\"parentheses\">(</span><span class=\"self_keyword mutable consuming\">self</span><span class=\"parentheses\">)</span>\n+    <span class=\"brace\">}</span>\n \n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">qux</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n-        <span class=\"self_keyword mutable\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"punctuation\">;</span>\n-    <span class=\"punctuation\">}</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">qux</span><span class=\"parentheses\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"parentheses\">)</span> <span class=\"brace\">{</span>\n+        <span class=\"self_keyword mutable\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"semicolon\">;</span>\n+    <span class=\"brace\">}</span>\n \n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">quop</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"punctuation\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">quop</span><span class=\"parentheses\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"parentheses\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">i32</span> <span class=\"brace\">{</span>\n         <span class=\"self_keyword\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span>\n-    <span class=\"punctuation\">}</span>\n-<span class=\"punctuation\">}</span>\n+    <span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n \n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">derive</span><span class=\"punctuation attribute\">(</span><span class=\"attribute attribute\">Copy</span><span class=\"punctuation attribute\">)</span><span class=\"attribute attribute\">]</span>\n-<span class=\"keyword\">struct</span> <span class=\"struct declaration\">FooCopy</span> <span class=\"punctuation\">{</span>\n-    <span class=\"field declaration\">x</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">u32</span><span class=\"punctuation\">,</span>\n-<span class=\"punctuation\">}</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">derive</span><span class=\"parentheses attribute\">(</span><span class=\"attribute attribute\">Copy</span><span class=\"parentheses attribute\">)</span><span class=\"attribute attribute\">]</span>\n+<span class=\"keyword\">struct</span> <span class=\"struct declaration\">FooCopy</span> <span class=\"brace\">{</span>\n+    <span class=\"field declaration\">x</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u32</span><span class=\"comma\">,</span>\n+<span class=\"brace\">}</span>\n \n-<span class=\"keyword\">impl</span> <span class=\"struct\">FooCopy</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">baz</span><span class=\"punctuation\">(</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">,</span> <span class=\"value_param declaration\">f</span><span class=\"punctuation\">:</span> <span class=\"struct\">FooCopy</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"punctuation\">{</span>\n-        <span class=\"value_param\">f</span><span class=\"operator\">.</span><span class=\"function associated\">baz</span><span class=\"punctuation\">(</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span>\n-    <span class=\"punctuation\">}</span>\n+<span class=\"keyword\">impl</span> <span class=\"struct\">FooCopy</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">baz</span><span class=\"parentheses\">(</span><span class=\"self_keyword\">self</span><span class=\"comma\">,</span> <span class=\"value_param declaration\">f</span><span class=\"colon\">:</span> <span class=\"struct\">FooCopy</span><span class=\"parentheses\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"brace\">{</span>\n+        <span class=\"value_param\">f</span><span class=\"operator\">.</span><span class=\"function associated\">baz</span><span class=\"parentheses\">(</span><span class=\"self_keyword\">self</span><span class=\"parentheses\">)</span>\n+    <span class=\"brace\">}</span>\n \n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">qux</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n-        <span class=\"self_keyword mutable\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"punctuation\">;</span>\n-    <span class=\"punctuation\">}</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">qux</span><span class=\"parentheses\">(</span><span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"self_keyword mutable\">self</span><span class=\"parentheses\">)</span> <span class=\"brace\">{</span>\n+        <span class=\"self_keyword mutable\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"semicolon\">;</span>\n+    <span class=\"brace\">}</span>\n \n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">quop</span><span class=\"punctuation\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"punctuation\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">quop</span><span class=\"parentheses\">(</span><span class=\"operator\">&</span><span class=\"self_keyword\">self</span><span class=\"parentheses\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"brace\">{</span>\n         <span class=\"self_keyword\">self</span><span class=\"operator\">.</span><span class=\"field\">x</span>\n-    <span class=\"punctuation\">}</span>\n-<span class=\"punctuation\">}</span>\n+    <span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n \n-<span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> <span class=\"static declaration mutable unsafe\">STATIC_MUT</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">i32</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"punctuation\">;</span>\n+<span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> <span class=\"static declaration mutable unsafe\">STATIC_MUT</span><span class=\"colon\">:</span> <span class=\"builtin_type\">i32</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">0</span><span class=\"semicolon\">;</span>\n \n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span><span class=\"punctuation\">&lt;</span><span class=\"lifetime declaration\">'a</span><span class=\"punctuation\">,</span> <span class=\"type_param declaration\">T</span><span class=\"punctuation\">&gt;</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"type_param\">T</span> <span class=\"punctuation\">{</span>\n-    <span class=\"function\">foo</span><span class=\"operator\">::</span><span class=\"punctuation\">&lt;</span><span class=\"lifetime\">'a</span><span class=\"punctuation\">,</span> <span class=\"builtin_type\">i32</span><span class=\"punctuation\">&gt;</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span>\n-<span class=\"punctuation\">}</span>\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span><span class=\"angle\">&lt;</span><span class=\"lifetime declaration\">'a</span><span class=\"comma\">,</span> <span class=\"type_param declaration\">T</span><span class=\"angle\">&gt;</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"type_param\">T</span> <span class=\"brace\">{</span>\n+    <span class=\"function\">foo</span><span class=\"operator\">::</span><span class=\"angle\">&lt;</span><span class=\"lifetime\">'a</span><span class=\"comma\">,</span> <span class=\"builtin_type\">i32</span><span class=\"angle\">&gt;</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span>\n+<span class=\"brace\">}</span>\n \n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">never</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">!</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword control\">loop</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n-<span class=\"punctuation\">}</span>\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">never</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">!</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword control\">loop</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n \n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">const_param</span><span class=\"punctuation\">&lt;</span><span class=\"keyword\">const</span> <span class=\"const_param declaration\">FOO</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">usize</span><span class=\"punctuation\">&gt;</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">usize</span> <span class=\"punctuation\">{</span>\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">const_param</span><span class=\"angle\">&lt;</span><span class=\"keyword\">const</span> <span class=\"const_param declaration\">FOO</span><span class=\"colon\">:</span> <span class=\"builtin_type\">usize</span><span class=\"angle\">&gt;</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">usize</span> <span class=\"brace\">{</span>\n     <span class=\"const_param\">FOO</span>\n-<span class=\"punctuation\">}</span>\n+<span class=\"brace\">}</span>\n \n-<span class=\"keyword\">use</span> <span class=\"module\">ops</span><span class=\"operator\">::</span><span class=\"trait\">Fn</span><span class=\"punctuation\">;</span>\n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">baz</span><span class=\"punctuation\">&lt;</span><span class=\"type_param declaration\">F</span><span class=\"punctuation\">:</span> <span class=\"trait\">Fn</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">&gt;</span><span class=\"punctuation\">(</span><span class=\"value_param declaration callable\">f</span><span class=\"punctuation\">:</span> <span class=\"type_param\">F</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n-    <span class=\"value_param callable\">f</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span>\n-<span class=\"punctuation\">}</span>\n+<span class=\"keyword\">use</span> <span class=\"module\">ops</span><span class=\"operator\">::</span><span class=\"trait\">Fn</span><span class=\"semicolon\">;</span>\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">baz</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">F</span><span class=\"colon\">:</span> <span class=\"trait\">Fn</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"parentheses\">(</span><span class=\"parentheses\">)</span><span class=\"angle\">&gt;</span><span class=\"parentheses\">(</span><span class=\"value_param declaration callable\">f</span><span class=\"colon\">:</span> <span class=\"type_param\">F</span><span class=\"parentheses\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"value_param callable\">f</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span>\n+<span class=\"brace\">}</span>\n \n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">foobar</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"keyword\">impl</span> <span class=\"macro\">Copy</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">foobar</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"keyword\">impl</span> <span class=\"macro\">Copy</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\">bar</span> <span class=\"operator\">=</span> <span class=\"function\">foobar</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-<span class=\"punctuation\">}</span>\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">bar</span> <span class=\"operator\">=</span> <span class=\"function\">foobar</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+<span class=\"brace\">}</span>\n \n-<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">def_fn</span> <span class=\"punctuation\">{</span>\n-    <span class=\"punctuation\">(</span><span class=\"punctuation\">$</span><span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>tt<span class=\"punctuation\">:</span>tt<span class=\"punctuation\">)</span><span class=\"punctuation\">*</span><span class=\"punctuation\">)</span> <span class=\"operator\">=</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">$</span><span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>tt<span class=\"punctuation\">)</span><span class=\"punctuation\">*</span><span class=\"punctuation\">}</span>\n-<span class=\"punctuation\">}</span>\n+<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">def_fn</span> <span class=\"brace\">{</span>\n+    <span class=\"parentheses\">(</span><span class=\"punctuation\">$</span><span class=\"parentheses\">(</span><span class=\"punctuation\">$</span>tt<span class=\"colon\">:</span>tt<span class=\"parentheses\">)</span><span class=\"punctuation\">*</span><span class=\"parentheses\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"punctuation\">$</span><span class=\"parentheses\">(</span><span class=\"punctuation\">$</span>tt<span class=\"parentheses\">)</span><span class=\"punctuation\">*</span><span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n \n-<span class=\"macro\">def_fn!</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">-</span><span class=\"operator\">&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"punctuation\">{</span>\n+<span class=\"macro\">def_fn!</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span> <span class=\"operator\">-</span><span class=\"operator\">&gt;</span> <span class=\"builtin_type\">u32</span> <span class=\"brace\">{</span>\n         <span class=\"numeric_literal\">100</span>\n-    <span class=\"punctuation\">}</span>\n-<span class=\"punctuation\">}</span>\n+    <span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n \n-<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">noop</span> <span class=\"punctuation\">{</span>\n-    <span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>expr<span class=\"punctuation\">:</span>expr<span class=\"punctuation\">)</span> <span class=\"operator\">=</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span>\n+<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">noop</span> <span class=\"brace\">{</span>\n+    <span class=\"parentheses\">(</span><span class=\"punctuation\">$</span>expr<span class=\"colon\">:</span>expr<span class=\"parentheses\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n         <span class=\"punctuation\">$</span>expr\n-    <span class=\"punctuation\">}</span>\n-<span class=\"punctuation\">}</span>\n+    <span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n \n-<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">keyword_frag</span> <span class=\"punctuation\">{</span>\n-    <span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>type<span class=\"punctuation\">:</span>ty<span class=\"punctuation\">)</span> <span class=\"operator\">=</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>type<span class=\"punctuation\">)</span>\n-<span class=\"punctuation\">}</span>\n+<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">keyword_frag</span> <span class=\"brace\">{</span>\n+    <span class=\"parentheses\">(</span><span class=\"punctuation\">$</span>type<span class=\"colon\">:</span>ty<span class=\"parentheses\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"parentheses\">(</span><span class=\"punctuation\">$</span>type<span class=\"parentheses\">)</span>\n+<span class=\"brace\">}</span>\n \n <span class=\"comment\">// comment</span>\n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n-    <span class=\"macro\">println!</span><span class=\"punctuation\">(</span><span class=\"string_literal\">\"Hello, {}!\"</span><span class=\"punctuation\">,</span> <span class=\"numeric_literal\">92</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-\n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">vec</span> <span class=\"operator\">=</span> <span class=\"unresolved_reference\">Vec</span><span class=\"operator\">::</span><span class=\"unresolved_reference\">new</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"keyword control\">if</span> <span class=\"bool_literal\">true</span> <span class=\"punctuation\">{</span>\n-        <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"punctuation\">;</span>\n-        <span class=\"variable mutable\">vec</span><span class=\"operator\">.</span><span class=\"unresolved_reference\">push</span><span class=\"punctuation\">(</span><span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span> <span class=\"field\">x</span><span class=\"punctuation\">,</span> <span class=\"field\">y</span><span class=\"punctuation\">:</span> <span class=\"numeric_literal\">1</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"punctuation\">}</span>\n-    <span class=\"keyword unsafe\">unsafe</span> <span class=\"punctuation\">{</span>\n-        <span class=\"variable mutable\">vec</span><span class=\"operator\">.</span><span class=\"unresolved_reference\">set_len</span><span class=\"punctuation\">(</span><span class=\"numeric_literal\">0</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-        <span class=\"static mutable unsafe\">STATIC_MUT</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">1</span><span class=\"punctuation\">;</span>\n-    <span class=\"punctuation\">}</span>\n-\n-    <span class=\"keyword control\">for</span> <span class=\"variable declaration\">e</span> <span class=\"keyword control\">in</span> <span class=\"variable mutable\">vec</span> <span class=\"punctuation\">{</span>\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"macro\">println!</span><span class=\"parentheses\">(</span><span class=\"string_literal\">\"Hello, {}!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">92</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">vec</span> <span class=\"operator\">=</span> <span class=\"unresolved_reference\">Vec</span><span class=\"operator\">::</span><span class=\"unresolved_reference\">new</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword control\">if</span> <span class=\"bool_literal\">true</span> <span class=\"brace\">{</span>\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"semicolon\">;</span>\n+        <span class=\"variable mutable\">vec</span><span class=\"operator\">.</span><span class=\"unresolved_reference\">push</span><span class=\"parentheses\">(</span><span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"comma\">,</span> <span class=\"field\">y</span><span class=\"colon\">:</span> <span class=\"numeric_literal\">1</span> <span class=\"brace\">}</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"brace\">}</span>\n+    <span class=\"keyword unsafe\">unsafe</span> <span class=\"brace\">{</span>\n+        <span class=\"variable mutable\">vec</span><span class=\"operator\">.</span><span class=\"unresolved_reference\">set_len</span><span class=\"parentheses\">(</span><span class=\"numeric_literal\">0</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+        <span class=\"static mutable unsafe\">STATIC_MUT</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">1</span><span class=\"semicolon\">;</span>\n+    <span class=\"brace\">}</span>\n+\n+    <span class=\"keyword control\">for</span> <span class=\"variable declaration\">e</span> <span class=\"keyword control\">in</span> <span class=\"variable mutable\">vec</span> <span class=\"brace\">{</span>\n         <span class=\"comment\">// Do nothing</span>\n-    <span class=\"punctuation\">}</span>\n+    <span class=\"brace\">}</span>\n \n-    <span class=\"macro\">noop!</span><span class=\"punctuation\">(</span><span class=\"macro\">noop</span><span class=\"macro\">!</span><span class=\"punctuation\">(</span><span class=\"numeric_literal\">1</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+    <span class=\"macro\">noop!</span><span class=\"parentheses\">(</span><span class=\"macro\">noop</span><span class=\"macro\">!</span><span class=\"parentheses\">(</span><span class=\"numeric_literal\">1</span><span class=\"parentheses\">)</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">42</span><span class=\"punctuation\">;</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration mutable\">y</span> <span class=\"operator\">=</span> <span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"variable mutable\">x</span><span class=\"punctuation\">;</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\">z</span> <span class=\"operator\">=</span> <span class=\"operator\">&</span><span class=\"variable mutable\">y</span><span class=\"punctuation\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">x</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">42</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration mutable\">y</span> <span class=\"operator\">=</span> <span class=\"operator\">&</span><span class=\"keyword\">mut</span> <span class=\"variable mutable\">x</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">z</span> <span class=\"operator\">=</span> <span class=\"operator\">&</span><span class=\"variable mutable\">y</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"keyword\">let</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span> <span class=\"field\">x</span><span class=\"punctuation\">:</span> <span class=\"variable declaration\">z</span><span class=\"punctuation\">,</span> <span class=\"field\">y</span> <span class=\"punctuation\">}</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span> <span class=\"field\">x</span><span class=\"punctuation\">:</span> <span class=\"variable\">z</span><span class=\"punctuation\">,</span> <span class=\"field\">y</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"colon\">:</span> <span class=\"variable declaration\">z</span><span class=\"comma\">,</span> <span class=\"field\">y</span> <span class=\"brace\">}</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"colon\">:</span> <span class=\"variable\">z</span><span class=\"comma\">,</span> <span class=\"field\">y</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"variable\">y</span><span class=\"punctuation\">;</span>\n+    <span class=\"variable\">y</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">foo</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span> <span class=\"field\">x</span><span class=\"punctuation\">,</span> <span class=\"field\">y</span><span class=\"punctuation\">:</span> <span class=\"variable mutable\">x</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\">foo2</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"punctuation\">{</span> <span class=\"field\">x</span><span class=\"punctuation\">,</span> <span class=\"field\">y</span><span class=\"punctuation\">:</span> <span class=\"variable mutable\">x</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n-    <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"function associated\">quop</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"function mutable associated\">qux</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"function consuming associated\">baz</span><span class=\"punctuation\">(</span><span class=\"variable consuming\">foo2</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">foo</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"comma\">,</span> <span class=\"field\">y</span><span class=\"colon\">:</span> <span class=\"variable mutable\">x</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">foo2</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">x</span><span class=\"comma\">,</span> <span class=\"field\">y</span><span class=\"colon\">:</span> <span class=\"variable mutable\">x</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+    <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"function associated\">quop</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"function mutable associated\">qux</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"variable mutable\">foo</span><span class=\"operator\">.</span><span class=\"function consuming associated\">baz</span><span class=\"parentheses\">(</span><span class=\"variable consuming\">foo2</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">copy</span> <span class=\"operator\">=</span> <span class=\"struct\">FooCopy</span> <span class=\"punctuation\">{</span> <span class=\"field\">x</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n-    <span class=\"variable mutable\">copy</span><span class=\"operator\">.</span><span class=\"function associated\">quop</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"variable mutable\">copy</span><span class=\"operator\">.</span><span class=\"function mutable associated\">qux</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"variable mutable\">copy</span><span class=\"operator\">.</span><span class=\"function associated\">baz</span><span class=\"punctuation\">(</span><span class=\"variable mutable\">copy</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">copy</span> <span class=\"operator\">=</span> <span class=\"struct\">FooCopy</span> <span class=\"brace\">{</span> <span class=\"field\">x</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n+    <span class=\"variable mutable\">copy</span><span class=\"operator\">.</span><span class=\"function associated\">quop</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"variable mutable\">copy</span><span class=\"operator\">.</span><span class=\"function mutable associated\">qux</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"variable mutable\">copy</span><span class=\"operator\">.</span><span class=\"function associated\">baz</span><span class=\"parentheses\">(</span><span class=\"variable mutable\">copy</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"keyword\">let</span> <span class=\"variable declaration callable\">a</span> <span class=\"operator\">=</span> <span class=\"punctuation\">|</span><span class=\"value_param declaration\">x</span><span class=\"punctuation\">|</span> <span class=\"value_param\">x</span><span class=\"punctuation\">;</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration callable\">bar</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span><span class=\"operator\">::</span><span class=\"function associated\">baz</span><span class=\"punctuation\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration callable\">a</span> <span class=\"operator\">=</span> <span class=\"punctuation\">|</span><span class=\"value_param declaration\">x</span><span class=\"punctuation\">|</span> <span class=\"value_param\">x</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration callable\">bar</span> <span class=\"operator\">=</span> <span class=\"struct\">Foo</span><span class=\"operator\">::</span><span class=\"function associated\">baz</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\">baz</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">-</span><span class=\"numeric_literal\">42</span><span class=\"punctuation\">;</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\">baz</span> <span class=\"operator\">=</span> <span class=\"operator\">-</span><span class=\"variable\">baz</span><span class=\"punctuation\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">baz</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">-</span><span class=\"numeric_literal\">42</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">baz</span> <span class=\"operator\">=</span> <span class=\"operator\">-</span><span class=\"variable\">baz</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"keyword\">let</span> <span class=\"punctuation\">_</span> <span class=\"operator\">=</span> <span class=\"operator\">!</span><span class=\"bool_literal\">true</span><span class=\"punctuation\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"punctuation\">_</span> <span class=\"operator\">=</span> <span class=\"operator\">!</span><span class=\"bool_literal\">true</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"label declaration\">'foo</span><span class=\"punctuation\">:</span> <span class=\"keyword control\">loop</span> <span class=\"punctuation\">{</span>\n-        <span class=\"keyword control\">break</span> <span class=\"label\">'foo</span><span class=\"punctuation\">;</span>\n-        <span class=\"keyword control\">continue</span> <span class=\"label\">'foo</span><span class=\"punctuation\">;</span>\n-    <span class=\"punctuation\">}</span>\n-<span class=\"punctuation\">}</span>\n+    <span class=\"label declaration\">'foo</span><span class=\"colon\">:</span> <span class=\"keyword control\">loop</span> <span class=\"brace\">{</span>\n+        <span class=\"keyword control\">break</span> <span class=\"label\">'foo</span><span class=\"semicolon\">;</span>\n+        <span class=\"keyword control\">continue</span> <span class=\"label\">'foo</span><span class=\"semicolon\">;</span>\n+    <span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n \n-<span class=\"keyword\">enum</span> <span class=\"enum declaration\">Option</span><span class=\"punctuation\">&lt;</span><span class=\"type_param declaration\">T</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span>\n-    <span class=\"enum_variant declaration\">Some</span><span class=\"punctuation\">(</span><span class=\"type_param\">T</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span>\n-    <span class=\"enum_variant declaration\">None</span><span class=\"punctuation\">,</span>\n-<span class=\"punctuation\">}</span>\n-<span class=\"keyword\">use</span> <span class=\"enum\">Option</span><span class=\"operator\">::</span><span class=\"punctuation\">*</span><span class=\"punctuation\">;</span>\n+<span class=\"keyword\">enum</span> <span class=\"enum declaration\">Option</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">T</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n+    <span class=\"enum_variant declaration\">Some</span><span class=\"parentheses\">(</span><span class=\"type_param\">T</span><span class=\"parentheses\">)</span><span class=\"comma\">,</span>\n+    <span class=\"enum_variant declaration\">None</span><span class=\"comma\">,</span>\n+<span class=\"brace\">}</span>\n+<span class=\"keyword\">use</span> <span class=\"enum\">Option</span><span class=\"operator\">::</span><span class=\"punctuation\">*</span><span class=\"semicolon\">;</span>\n \n-<span class=\"keyword\">impl</span><span class=\"punctuation\">&lt;</span><span class=\"type_param declaration\">T</span><span class=\"punctuation\">&gt;</span> <span class=\"enum\">Option</span><span class=\"punctuation\">&lt;</span><span class=\"type_param\">T</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">and</span><span class=\"punctuation\">&lt;</span><span class=\"type_param declaration\">U</span><span class=\"punctuation\">&gt;</span><span class=\"punctuation\">(</span><span class=\"self_keyword\">self</span><span class=\"punctuation\">,</span> <span class=\"value_param declaration\">other</span><span class=\"punctuation\">:</span> <span class=\"enum\">Option</span><span class=\"punctuation\">&lt;</span><span class=\"type_param\">U</span><span class=\"punctuation\">&gt;</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"enum\">Option</span><span class=\"punctuation\">&lt;</span><span class=\"punctuation\">(</span><span class=\"type_param\">T</span><span class=\"punctuation\">,</span> <span class=\"type_param\">U</span><span class=\"punctuation\">)</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span>\n-        <span class=\"keyword control\">match</span> <span class=\"value_param\">other</span> <span class=\"punctuation\">{</span>\n-            <span class=\"enum_variant\">None</span> <span class=\"operator\">=&gt;</span> <span class=\"macro\">unimplemented!</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span>\n-            <span class=\"variable declaration\">Nope</span> <span class=\"operator\">=&gt;</span> <span class=\"variable\">Nope</span><span class=\"punctuation\">,</span>\n-        <span class=\"punctuation\">}</span>\n-    <span class=\"punctuation\">}</span>\n-<span class=\"punctuation\">}</span></code></pre>\n\\ No newline at end of file\n+<span class=\"keyword\">impl</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">T</span><span class=\"angle\">&gt;</span> <span class=\"enum\">Option</span><span class=\"angle\">&lt;</span><span class=\"type_param\">T</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration associated\">and</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">U</span><span class=\"angle\">&gt;</span><span class=\"parentheses\">(</span><span class=\"self_keyword\">self</span><span class=\"comma\">,</span> <span class=\"value_param declaration\">other</span><span class=\"colon\">:</span> <span class=\"enum\">Option</span><span class=\"angle\">&lt;</span><span class=\"type_param\">U</span><span class=\"angle\">&gt;</span><span class=\"parentheses\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"enum\">Option</span><span class=\"angle\">&lt;</span><span class=\"parentheses\">(</span><span class=\"type_param\">T</span><span class=\"comma\">,</span> <span class=\"type_param\">U</span><span class=\"parentheses\">)</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n+        <span class=\"keyword control\">match</span> <span class=\"value_param\">other</span> <span class=\"brace\">{</span>\n+            <span class=\"enum_variant\">None</span> <span class=\"operator\">=&gt;</span> <span class=\"macro\">unimplemented!</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span><span class=\"comma\">,</span>\n+            <span class=\"variable declaration\">Nope</span> <span class=\"operator\">=&gt;</span> <span class=\"variable\">Nope</span><span class=\"comma\">,</span>\n+        <span class=\"brace\">}</span>\n+    <span class=\"brace\">}</span>\n+<span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "52fabd18002f8cd8ad34a10dd86f1e082dfaffab", "filename": "crates/ide/src/syntax_highlighting/test_data/injection.html", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Finjection.html", "raw_url": "https://github.com/rust-lang/rust/raw/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Finjection.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Finjection.html?ref=77362c71735a8b5ab4b5cd9f396fa657fbffe2cb", "patch": "@@ -36,13 +36,13 @@\n \n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n-<pre><code><span class=\"keyword\">fn</span> <span class=\"function declaration\">f</span><span class=\"punctuation\">(</span><span class=\"value_param declaration\">ra_fixture</span><span class=\"punctuation\">:</span> <span class=\"operator\">&</span><span class=\"builtin_type\">str</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n-    <span class=\"function\">f</span><span class=\"punctuation\">(</span><span class=\"string_literal\">r\"</span>\n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n-    <span class=\"function\">foo</span><span class=\"punctuation\">(</span><span class=\"keyword\">$0</span><span class=\"punctuation\">{</span>\n+<pre><code><span class=\"keyword\">fn</span> <span class=\"function declaration\">f</span><span class=\"parentheses\">(</span><span class=\"value_param declaration\">ra_fixture</span><span class=\"colon\">:</span> <span class=\"operator\">&</span><span class=\"builtin_type\">str</span><span class=\"parentheses\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"function\">f</span><span class=\"parentheses\">(</span><span class=\"string_literal\">r\"</span>\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"function\">foo</span><span class=\"parentheses\">(</span><span class=\"keyword\">$0</span><span class=\"brace\">{</span>\n         <span class=\"numeric_literal\">92</span>\n-    <span class=\"punctuation\">}</span><span class=\"keyword\">$0</span><span class=\"punctuation\">)</span>\n-<span class=\"punctuation\">}</span><span class=\"string_literal\">\"</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-<span class=\"punctuation\">}</span>\n+    <span class=\"brace\">}</span><span class=\"keyword\">$0</span><span class=\"parentheses\">)</span>\n+<span class=\"brace\">}</span><span class=\"string_literal\">\"</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+<span class=\"brace\">}</span>\n     </code></pre>\n\\ No newline at end of file"}, {"sha": "196c898f78362dc7caa67071e8cf7a3f33d66e14", "filename": "crates/ide/src/syntax_highlighting/test_data/rainbow_highlighting.html", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Frainbow_highlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Frainbow_highlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Frainbow_highlighting.html?ref=77362c71735a8b5ab4b5cd9f396fa657fbffe2cb", "patch": "@@ -36,15 +36,15 @@\n \n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n-<pre><code><span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(273,88%,88%);\">hello</span> <span class=\"operator\">=</span> <span class=\"string_literal\">\"hello\"</span><span class=\"punctuation\">;</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"2705725358298919760\" style=\"color: hsl(76,47%,83%);\">x</span> <span class=\"operator\">=</span> <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(273,88%,88%);\">hello</span><span class=\"operator\">.</span><span class=\"unresolved_reference\">to_string</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"3365759661443752373\" style=\"color: hsl(15,86%,51%);\">y</span> <span class=\"operator\">=</span> <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(273,88%,88%);\">hello</span><span class=\"operator\">.</span><span class=\"unresolved_reference\">to_string</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n+<pre><code><span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(273,88%,88%);\">hello</span> <span class=\"operator\">=</span> <span class=\"string_literal\">\"hello\"</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"2705725358298919760\" style=\"color: hsl(76,47%,83%);\">x</span> <span class=\"operator\">=</span> <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(273,88%,88%);\">hello</span><span class=\"operator\">.</span><span class=\"unresolved_reference\">to_string</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"3365759661443752373\" style=\"color: hsl(15,86%,51%);\">y</span> <span class=\"operator\">=</span> <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(273,88%,88%);\">hello</span><span class=\"operator\">.</span><span class=\"unresolved_reference\">to_string</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(127,71%,87%);\">x</span> <span class=\"operator\">=</span> <span class=\"string_literal\">\"other color please!\"</span><span class=\"punctuation\">;</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"6717528807933952652\" style=\"color: hsl(90,74%,79%);\">y</span> <span class=\"operator\">=</span> <span class=\"variable\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(127,71%,87%);\">x</span><span class=\"operator\">.</span><span class=\"unresolved_reference\">to_string</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-<span class=\"punctuation\">}</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(127,71%,87%);\">x</span> <span class=\"operator\">=</span> <span class=\"string_literal\">\"other color please!\"</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"6717528807933952652\" style=\"color: hsl(90,74%,79%);\">y</span> <span class=\"operator\">=</span> <span class=\"variable\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(127,71%,87%);\">x</span><span class=\"operator\">.</span><span class=\"unresolved_reference\">to_string</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span><span class=\"semicolon\">;</span>\n+<span class=\"brace\">}</span>\n \n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(273,88%,88%);\">hello</span> <span class=\"operator\">=</span> <span class=\"string_literal\">\"hello\"</span><span class=\"punctuation\">;</span>\n-<span class=\"punctuation\">}</span></code></pre>\n\\ No newline at end of file\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span><span class=\"parentheses\">(</span><span class=\"parentheses\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(273,88%,88%);\">hello</span> <span class=\"operator\">=</span> <span class=\"string_literal\">\"hello\"</span><span class=\"semicolon\">;</span>\n+<span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "7ce9a4ab6ddce394db5944909abdd804b5c27005", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=77362c71735a8b5ab4b5cd9f396fa657fbffe2cb", "patch": "@@ -38,17 +38,25 @@ macro_rules! define_semantic_token_types {\n }\n \n define_semantic_token_types![\n+    (ANGLE, \"angle\"),\n     (ATTRIBUTE, \"attribute\"),\n     (BOOLEAN, \"boolean\"),\n+    (BRACE, \"brace\"),\n+    (BRACKET, \"bracket\"),\n     (BUILTIN_TYPE, \"builtinType\"),\n+    (COMMA, \"comma\"),\n+    (COLON, \"colon\"),\n+    (DOT, \"dot\"),\n     (ESCAPE_SEQUENCE, \"escapeSequence\"),\n     (FORMAT_SPECIFIER, \"formatSpecifier\"),\n     (GENERIC, \"generic\"),\n     (CONST_PARAMETER, \"constParameter\"),\n     (LIFETIME, \"lifetime\"),\n     (LABEL, \"label\"),\n+    (PARENTHESIS, \"parenthesis\"),\n     (PUNCTUATION, \"punctuation\"),\n     (SELF_KEYWORD, \"selfKeyword\"),\n+    (SEMICOLON, \"semicolon\"),\n     (TYPE_ALIAS, \"typeAlias\"),\n     (UNION, \"union\"),\n     (UNRESOLVED_REFERENCE, \"unresolvedReference\"),"}, {"sha": "bdddca9daa2b41880d79a5bf429947f7b672ff2a", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=77362c71735a8b5ab4b5cd9f396fa657fbffe2cb", "patch": "@@ -6,9 +6,9 @@ use std::{\n \n use ide::{\n     Assist, AssistKind, CallInfo, CompletionItem, CompletionItemKind, Documentation, FileId,\n-    FileRange, FileSystemEdit, Fold, FoldKind, Highlight, HlMod, HlRange, HlTag, Indel, InlayHint,\n-    InlayKind, InsertTextFormat, LineIndex, Markup, NavigationTarget, ReferenceAccess, Runnable,\n-    Severity, SourceChange, SourceFileEdit, SymbolKind, TextEdit, TextRange, TextSize,\n+    FileRange, FileSystemEdit, Fold, FoldKind, Highlight, HlMod, HlPunct, HlRange, HlTag, Indel,\n+    InlayHint, InlayKind, InsertTextFormat, LineIndex, Markup, NavigationTarget, ReferenceAccess,\n+    Runnable, Severity, SourceChange, SourceFileEdit, SymbolKind, TextEdit, TextRange, TextSize,\n };\n use itertools::Itertools;\n \n@@ -423,7 +423,17 @@ fn semantic_token_type_and_modifiers(\n         HlTag::FormatSpecifier => semantic_tokens::FORMAT_SPECIFIER,\n         HlTag::Operator => lsp_types::SemanticTokenType::OPERATOR,\n         HlTag::EscapeSequence => semantic_tokens::ESCAPE_SEQUENCE,\n-        HlTag::Punctuation => semantic_tokens::PUNCTUATION,\n+        HlTag::Punctuation(punct) => match punct {\n+            HlPunct::Bracket => semantic_tokens::BRACKET,\n+            HlPunct::Brace => semantic_tokens::BRACE,\n+            HlPunct::Parenthesis => semantic_tokens::PARENTHESIS,\n+            HlPunct::Angle => semantic_tokens::ANGLE,\n+            HlPunct::Comma => semantic_tokens::COMMA,\n+            HlPunct::Dot => semantic_tokens::DOT,\n+            HlPunct::Colon => semantic_tokens::COLON,\n+            HlPunct::Semi => semantic_tokens::SEMICOLON,\n+            HlPunct::Other => semantic_tokens::PUNCTUATION,\n+        },\n     };\n \n     for modifier in highlight.mods.iter() {"}]}