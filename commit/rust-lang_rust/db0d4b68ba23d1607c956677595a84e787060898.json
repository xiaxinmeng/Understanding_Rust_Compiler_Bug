{"sha": "db0d4b68ba23d1607c956677595a84e787060898", "node_id": "C_kwDOAAsO6NoAKGRiMGQ0YjY4YmEyM2QxNjA3Yzk1NjY3NzU5NWE4NGU3ODcwNjA4OTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-22T04:04:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-22T04:04:37Z"}, "message": "Auto merge of #2241 - RalfJung:extern_static_in_const, r=RalfJung\n\nfix ICE when const refers to extern static\n\nFixes https://github.com/rust-lang/miri/issues/2234\nNeeds https://github.com/rust-lang/rust/pull/98099", "tree": {"sha": "d89ee191f22045fcc8e6d05f50e0a493e9fe4527", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d89ee191f22045fcc8e6d05f50e0a493e9fe4527"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db0d4b68ba23d1607c956677595a84e787060898", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db0d4b68ba23d1607c956677595a84e787060898", "html_url": "https://github.com/rust-lang/rust/commit/db0d4b68ba23d1607c956677595a84e787060898", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db0d4b68ba23d1607c956677595a84e787060898/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbb649adfe172a9ef4b1b91688c14b57c6c3b839", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbb649adfe172a9ef4b1b91688c14b57c6c3b839", "html_url": "https://github.com/rust-lang/rust/commit/cbb649adfe172a9ef4b1b91688c14b57c6c3b839"}, {"sha": "b29a706edd5e9b7d9f8bf0ba1beb2374326f8acf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b29a706edd5e9b7d9f8bf0ba1beb2374326f8acf", "html_url": "https://github.com/rust-lang/rust/commit/b29a706edd5e9b7d9f8bf0ba1beb2374326f8acf"}], "stats": {"total": 50, "additions": 44, "deletions": 6}, "files": [{"sha": "45773390616b91e5a39cee642a8e3f1db2b9f713", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db0d4b68ba23d1607c956677595a84e787060898/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/db0d4b68ba23d1607c956677595a84e787060898/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=db0d4b68ba23d1607c956677595a84e787060898", "patch": "@@ -1 +1 @@\n-cdcc53b7dc002ea4a7a28105010c5a1126ee31b7\n+a09c668c965f735f4cd59e7158662b9daa0b71ba"}, {"sha": "d14ddaa1a6bbfb0dc82dfa54b4c3a2fc1b86da54", "filename": "src/machine.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/db0d4b68ba23d1607c956677595a84e787060898/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db0d4b68ba23d1607c956677595a84e787060898/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=db0d4b68ba23d1607c956677595a84e787060898", "patch": "@@ -618,7 +618,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         id: AllocId,\n         alloc: Cow<'b, Allocation>,\n         kind: Option<MemoryKind<Self::MemoryKind>>,\n-    ) -> Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>> {\n+    ) -> InterpResult<'tcx, Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>>> {\n         if ecx.machine.tracked_alloc_ids.contains(&id) {\n             register_diagnostic(NonHaltingDiagnostic::CreatedAlloc(id));\n         }\n@@ -653,15 +653,28 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n                 data_race: race_alloc,\n                 weak_memory: buffer_alloc,\n             },\n-            |ptr| Evaluator::tag_alloc_base_pointer(ecx, ptr),\n-        );\n-        Cow::Owned(alloc)\n+            |ptr| ecx.global_base_pointer(ptr),\n+        )?;\n+        Ok(Cow::Owned(alloc))\n     }\n \n     fn tag_alloc_base_pointer(\n         ecx: &MiriEvalContext<'mir, 'tcx>,\n         ptr: Pointer<AllocId>,\n     ) -> Pointer<Tag> {\n+        if cfg!(debug_assertions) {\n+            // The machine promises to never call us on thread-local or extern statics.\n+            let alloc_id = ptr.provenance;\n+            match ecx.tcx.get_global_alloc(alloc_id) {\n+                Some(GlobalAlloc::Static(def_id)) if ecx.tcx.is_thread_local_static(def_id) => {\n+                    panic!(\"tag_alloc_base_pointer called on thread-local static\")\n+                }\n+                Some(GlobalAlloc::Static(def_id)) if ecx.tcx.is_foreign_item(def_id) => {\n+                    panic!(\"tag_alloc_base_pointer called on extern static\")\n+                }\n+                _ => {}\n+            }\n+        }\n         let absolute_addr = intptrcast::GlobalStateInner::rel_ptr_to_addr(ecx, ptr);\n         let sb_tag = if let Some(stacked_borrows) = &ecx.machine.stacked_borrows {\n             stacked_borrows.borrow_mut().base_tag(ptr.provenance)"}, {"sha": "2135806de3ed56853f233519f3ebcf28c00b3ffb", "filename": "src/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db0d4b68ba23d1607c956677595a84e787060898/src%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db0d4b68ba23d1607c956677595a84e787060898/src%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthread.rs?ref=db0d4b68ba23d1607c956677595a84e787060898", "patch": "@@ -587,7 +587,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // This allocation will be deallocated when the thread dies, so it is not in read-only memory.\n             allocation.mutability = Mutability::Mut;\n             // Create a fresh allocation with this content.\n-            let new_alloc = this.allocate_raw_ptr(allocation, MiriMemoryKind::Tls.into());\n+            let new_alloc = this.allocate_raw_ptr(allocation, MiriMemoryKind::Tls.into())?;\n             this.machine.threads.set_thread_local_alloc(def_id, new_alloc);\n             Ok(new_alloc)\n         }"}, {"sha": "4c1de6ace51d38e554b4dd161d42a8b85c0c7181", "filename": "tests/fail/extern_static_in_const.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/db0d4b68ba23d1607c956677595a84e787060898/tests%2Ffail%2Fextern_static_in_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db0d4b68ba23d1607c956677595a84e787060898/tests%2Ffail%2Fextern_static_in_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fextern_static_in_const.rs?ref=db0d4b68ba23d1607c956677595a84e787060898", "patch": "@@ -0,0 +1,11 @@\n+//! Even referencing an unknown `extern static` already triggers an error.\n+\n+extern \"C\" {\n+    static E: [u8; 0];\n+}\n+\n+static X: &'static [u8; 0] = unsafe { &E };\n+\n+fn main() {\n+    let _val = X; //~ ERROR is not supported by Miri\n+}"}, {"sha": "8524bb02c054f91e029e3b3faf381b49405b4e28", "filename": "tests/fail/extern_static_in_const.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/db0d4b68ba23d1607c956677595a84e787060898/tests%2Ffail%2Fextern_static_in_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db0d4b68ba23d1607c956677595a84e787060898/tests%2Ffail%2Fextern_static_in_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fextern_static_in_const.stderr?ref=db0d4b68ba23d1607c956677595a84e787060898", "patch": "@@ -0,0 +1,14 @@\n+error: unsupported operation: `extern` static `E` from crate `extern_static_in_const` is not supported by Miri\n+  --> $DIR/extern_static_in_const.rs:LL:CC\n+   |\n+LL |     let _val = X;\n+   |                ^ `extern` static `E` from crate `extern_static_in_const` is not supported by Miri\n+   |\n+   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n+           \n+   = note: inside `main` at $DIR/extern_static_in_const.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}]}