{"sha": "aaaf0ba072815d275820d8ac85ece6eeb9182321", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhYWYwYmEwNzI4MTVkMjc1ODIwZDhhYzg1ZWNlNmVlYjkxODIzMjE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-01T05:18:10Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-13T15:29:10Z"}, "message": "parser: misc small item related improvements & cleanups.", "tree": {"sha": "879d3b768e9114e4b1cdd5105e8a382aacfae3f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/879d3b768e9114e4b1cdd5105e8a382aacfae3f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaaf0ba072815d275820d8ac85ece6eeb9182321", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaaf0ba072815d275820d8ac85ece6eeb9182321", "html_url": "https://github.com/rust-lang/rust/commit/aaaf0ba072815d275820d8ac85ece6eeb9182321", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaaf0ba072815d275820d8ac85ece6eeb9182321/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46d3ef58a8a184b5a76098b2ac0e66792a6def25", "url": "https://api.github.com/repos/rust-lang/rust/commits/46d3ef58a8a184b5a76098b2ac0e66792a6def25", "html_url": "https://github.com/rust-lang/rust/commit/46d3ef58a8a184b5a76098b2ac0e66792a6def25"}], "stats": {"total": 482, "additions": 233, "deletions": 249}, "files": [{"sha": "af9700ee81e55b509bf1e71c7a774dadb64bcadd", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 120, "deletions": 138, "changes": 258, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -8,8 +8,7 @@ use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, PResult, StashKey};\n use rustc_span::source_map::{self, Span};\n use rustc_span::symbol::{kw, sym, Symbol};\n-use rustc_span::BytePos;\n-use syntax::ast::{self, AttrKind, AttrStyle, AttrVec, Attribute, Ident, DUMMY_NODE_ID};\n+use syntax::ast::{self, AttrStyle, AttrVec, Attribute, Ident, DUMMY_NODE_ID};\n use syntax::ast::{AssocItem, AssocItemKind, Item, ItemKind, UseTree, UseTreeKind};\n use syntax::ast::{Async, Const, Defaultness, IsAuto, PathSegment, Unsafe};\n use syntax::ast::{BindingMode, Block, FnDecl, FnSig, Mac, MacArgs, MacDelimiter, Param, SelfKind};\n@@ -90,18 +89,18 @@ impl<'a> Parser<'a> {\n         }\n \n         // FAILURE TO PARSE ITEM\n-        match vis.node {\n-            VisibilityKind::Inherited => {}\n-            _ => {\n-                self.struct_span_err(vis.span, \"unmatched visibility `pub`\")\n-                    .span_label(vis.span, \"the unmatched visibility\")\n-                    .help(\"you likely meant to define an item, e.g., `pub fn foo() {}`\")\n-                    .emit();\n-            }\n+        if let VisibilityKind::Inherited = vis.node {\n+        } else {\n+            let vs = pprust::vis_to_string(&vis);\n+            let vs = vs.trim_end();\n+            self.struct_span_err(vis.span, &format!(\"unmatched visibility `{}`\", vs))\n+                .span_label(vis.span, \"the unmatched visibility\")\n+                .help(&format!(\"you likely meant to define an item, e.g., `{} fn foo() {{}}`\", vs))\n+                .emit();\n         }\n \n-        if !attributes_allowed && !attrs.is_empty() {\n-            self.expected_item_err(&attrs)?;\n+        if !attributes_allowed {\n+            self.recover_attrs_no_item(&attrs)?;\n         }\n         Ok(None)\n     }\n@@ -165,7 +164,7 @@ impl<'a> Parser<'a> {\n         } else if self.eat_keyword(kw::Struct) {\n             // STRUCT ITEM\n             self.parse_item_struct()?\n-        } else if self.is_union_item() {\n+        } else if self.is_kw_followed_by_ident(kw::Union) {\n             // UNION ITEM\n             self.bump(); // `union`\n             self.parse_item_union()?\n@@ -175,15 +174,12 @@ impl<'a> Parser<'a> {\n         } else if self.is_macro_rules_item() {\n             // MACRO_RULES ITEM\n             self.parse_item_macro_rules(vis)?\n-        } else if vis.node.is_pub()\n-            && self.check_ident()\n-            && self.look_ahead(1, |t| *t != token::Not)\n-        {\n+        } else if vis.node.is_pub() && self.isnt_macro_invocation() {\n             self.recover_missing_kw_before_item()?;\n             return Ok(None);\n         } else if macros_allowed && self.token.is_path_start() {\n             // MACRO INVOCATION ITEM\n-            self.parse_item_macro(vis)?\n+            (Ident::invalid(), ItemKind::Mac(self.parse_item_macro(vis)?))\n         } else {\n             return Ok(None);\n         };\n@@ -193,12 +189,17 @@ impl<'a> Parser<'a> {\n     /// When parsing a statement, would the start of a path be an item?\n     pub(super) fn is_path_start_item(&mut self) -> bool {\n         self.is_crate_vis() // no: `crate::b`, yes: `crate $item`\n-        || self.is_union_item() // no: `union::b`, yes: `union U { .. }`\n+        || self.is_kw_followed_by_ident(kw::Union) // no: `union::b`, yes: `union U { .. }`\n         || self.check_auto_or_unsafe_trait_item() // no: `auto::b`, yes: `auto trait X { .. }`\n         || self.is_async_fn() // no(2015): `async::b`, yes: `async fn`\n         || self.is_macro_rules_item() // no: `macro_rules::b`, yes: `macro_rules! mac`\n     }\n \n+    /// Are we sure this could not possibly be a macro invocation?\n+    fn isnt_macro_invocation(&mut self) -> bool {\n+        self.check_ident() && self.look_ahead(1, |t| *t != token::Not && *t != token::ModSep)\n+    }\n+\n     /// Recover on encountering a struct or method definition where the user\n     /// forgot to add the `struct` or `fn` keyword after writing `pub`: `pub S {}`.\n     fn recover_missing_kw_before_item(&mut self) -> PResult<'a, ()> {\n@@ -297,33 +298,33 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses an item macro, e.g., `item!();`.\n-    fn parse_item_macro(&mut self, vis: &Visibility) -> PResult<'a, ItemInfo> {\n-        self.complain_if_pub_macro(&vis.node, vis.span);\n-\n-        // Item macro\n-        let path = self.parse_path(PathStyle::Mod)?;\n-        self.expect(&token::Not)?;\n-        let args = self.parse_mac_args()?;\n-        if args.need_semicolon() && !self.eat(&token::Semi) {\n-            self.report_invalid_macro_expansion_item();\n-        }\n-\n-        let mac = Mac { path, args, prior_type_ascription: self.last_type_ascription };\n-        Ok((Ident::invalid(), ItemKind::Mac(mac)))\n-    }\n-\n-    /// Emits an expected-item-after-attributes error.\n-    fn expected_item_err(&mut self, attrs: &[Attribute]) -> PResult<'a, ()> {\n-        let message = match attrs.last() {\n-            Some(&Attribute { kind: AttrKind::DocComment(_), .. }) => {\n-                \"expected item after doc comment\"\n-            }\n-            _ => \"expected item after attributes\",\n+    fn parse_item_macro(&mut self, vis: &Visibility) -> PResult<'a, Mac> {\n+        let path = self.parse_path(PathStyle::Mod)?; // `foo::bar`\n+        self.expect(&token::Not)?; // `!`\n+        let args = self.parse_mac_args()?; // `( .. )` or `[ .. ]` (followed by `;`), or `{ .. }`.\n+        self.eat_semi_for_macro_if_needed(&args);\n+        self.complain_if_pub_macro(vis, false);\n+        Ok(Mac { path, args, prior_type_ascription: self.last_type_ascription })\n+    }\n+\n+    /// Recover if we parsed attributes and expected an item but there was none.\n+    fn recover_attrs_no_item(&mut self, attrs: &[Attribute]) -> PResult<'a, ()> {\n+        let (start, end) = match attrs {\n+            [] => return Ok(()),\n+            [x0] => (x0, x0),\n+            [x0, .., xn] => (x0, xn),\n         };\n-\n-        let mut err = self.struct_span_err(self.prev_span, message);\n-        if attrs.last().unwrap().is_doc_comment() {\n-            err.span_label(self.prev_span, \"this doc comment doesn't document anything\");\n+        let msg = if end.is_doc_comment() {\n+            \"expected item after doc comment\"\n+        } else {\n+            \"expected item after attributes\"\n+        };\n+        let mut err = self.struct_span_err(end.span, msg);\n+        if end.is_doc_comment() {\n+            err.span_label(end.span, \"this doc comment doesn't document anything\");\n+        }\n+        if let [.., penultimate, _] = attrs {\n+            err.span_label(start.span.to(penultimate.span), \"other attributes here\");\n         }\n         Err(err)\n     }\n@@ -332,38 +333,19 @@ impl<'a> Parser<'a> {\n         self.token.is_keyword(kw::Async) && self.is_keyword_ahead(1, &[kw::Fn])\n     }\n \n-    /// Parses a macro invocation inside a `trait`, `impl` or `extern` block.\n+    /// Parses a macro invocation inside a `trait`, `impl`, or `extern` block.\n     fn parse_assoc_macro_invoc(\n         &mut self,\n         item_kind: &str,\n-        vis: Option<&Visibility>,\n+        vis: &Visibility,\n         at_end: &mut bool,\n     ) -> PResult<'a, Option<Mac>> {\n-        if self.token.is_path_start() && !(self.is_async_fn() && self.token.span.rust_2015()) {\n-            let prev_span = self.prev_span;\n-            let path = self.parse_path(PathStyle::Mod)?;\n-\n-            if path.segments.len() == 1 {\n-                if !self.eat(&token::Not) {\n-                    return Err(self.missing_assoc_item_kind_err(item_kind, prev_span));\n-                }\n-            } else {\n-                self.expect(&token::Not)?;\n-            }\n-\n-            if let Some(vis) = vis {\n-                self.complain_if_pub_macro(&vis.node, prev_span);\n-            }\n-\n+        if self.isnt_macro_invocation() {\n+            Err(self.missing_assoc_item_kind_err(item_kind, self.prev_span))\n+        } else if self.token.is_path_start() {\n+            let mac = self.parse_item_macro(vis)?;\n             *at_end = true;\n-\n-            // eat a matched-delimiter token tree:\n-            let args = self.parse_mac_args()?;\n-            if args.need_semicolon() {\n-                self.expect_semi()?;\n-            }\n-\n-            Ok(Some(Mac { path, args, prior_type_ascription: self.last_type_ascription }))\n+            Ok(Some(mac))\n         } else {\n             Ok(None)\n         }\n@@ -389,7 +371,7 @@ impl<'a> Parser<'a> {\n         //   |        ^ missing `fn`, `type`, or `const`\n         //     pub  path(\n         //        ^^ `sp` below will point to this\n-        let sp = prev_span.between(self.prev_span);\n+        let sp = prev_span.between(self.token.span);\n         let mut err = self\n             .struct_span_err(sp, &format!(\"{} for {}-item declaration\", expected_kinds, item_type));\n         err.span_label(sp, expected_kinds);\n@@ -706,10 +688,13 @@ impl<'a> Parser<'a> {\n         } else if self.check_fn_front_matter() {\n             let (ident, sig, generics, body) = self.parse_fn(at_end, &mut attrs, req_name)?;\n             (ident, AssocItemKind::Fn(sig, body), generics)\n-        } else if let Some(mac) = self.parse_assoc_macro_invoc(\"associated\", Some(&vis), at_end)? {\n+        } else if self.check_keyword(kw::Const) {\n+            self.parse_assoc_const()?\n+        } else if let Some(mac) = self.parse_assoc_macro_invoc(\"associated\", &vis, at_end)? {\n             (Ident::invalid(), AssocItemKind::Macro(mac), Generics::default())\n         } else {\n-            self.parse_assoc_const()?\n+            self.recover_attrs_no_item(&attrs)?;\n+            self.unexpected()?\n         };\n \n         let span = lo.to(self.prev_span);\n@@ -813,7 +798,7 @@ impl<'a> Parser<'a> {\n \n     fn parse_ident_or_underscore(&mut self) -> PResult<'a, ast::Ident> {\n         match self.token.kind {\n-            token::Ident(name, false) if name == kw::Underscore => {\n+            token::Ident(name @ kw::Underscore, false) => {\n                 let span = self.token.span;\n                 self.bump();\n                 Ok(Ident::new(name, span))\n@@ -928,12 +913,10 @@ impl<'a> Parser<'a> {\n                 )\n                 .emit();\n             self.parse_item_foreign_static()?\n-        } else if let Some(mac) = self.parse_assoc_macro_invoc(\"extern\", Some(&vis), at_end)? {\n+        } else if let Some(mac) = self.parse_assoc_macro_invoc(\"extern\", &vis, at_end)? {\n             (Ident::invalid(), ForeignItemKind::Macro(mac))\n         } else {\n-            if !attrs.is_empty() {\n-                self.expected_item_err(&attrs)?;\n-            }\n+            self.recover_attrs_no_item(&attrs)?;\n             self.unexpected()?\n         };\n         Ok(P(self.mk_item(lo, ident, kind, vis, attrs)))\n@@ -1189,11 +1172,6 @@ impl<'a> Parser<'a> {\n         Ok((class_name, ItemKind::Union(vdata, generics)))\n     }\n \n-    fn is_union_item(&self) -> bool {\n-        self.token.is_keyword(kw::Union)\n-            && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())\n-    }\n-\n     fn parse_record_struct_body(\n         &mut self,\n     ) -> PResult<'a, (Vec<StructField>, /* recovered */ bool)> {\n@@ -1343,24 +1321,26 @@ impl<'a> Parser<'a> {\n \n     /// Parses a declarative macro 2.0 definition.\n     /// The `macro` keyword has already been parsed.\n+    /// ```\n+    /// MacBody = \"{\" TOKEN_STREAM \"}\" ;\n+    /// MacParams = \"(\" TOKEN_STREAM \")\" ;\n+    /// DeclMac = \"macro\" Ident MacParams? MacBody ;\n+    /// ```\n     fn parse_item_decl_macro(&mut self, lo: Span) -> PResult<'a, ItemInfo> {\n         let ident = self.parse_ident()?;\n         let body = if self.check(&token::OpenDelim(token::Brace)) {\n-            self.parse_mac_args()?\n+            self.parse_mac_args()? // `MacBody`\n         } else if self.check(&token::OpenDelim(token::Paren)) {\n-            let params = self.parse_token_tree();\n+            let params = self.parse_token_tree(); // `MacParams`\n             let pspan = params.span();\n-            let body = if self.check(&token::OpenDelim(token::Brace)) {\n-                self.parse_token_tree()\n-            } else {\n+            if !self.check(&token::OpenDelim(token::Brace)) {\n                 return self.unexpected();\n-            };\n+            }\n+            let body = self.parse_token_tree(); // `MacBody`\n+            // Convert `MacParams MacBody` into `{ MacParams => MacBody }`.\n             let bspan = body.span();\n-            let tokens = TokenStream::new(vec![\n-                params.into(),\n-                TokenTree::token(token::FatArrow, pspan.between(bspan)).into(),\n-                body.into(),\n-            ]);\n+            let arrow = TokenTree::token(token::FatArrow, pspan.between(bspan)); // `=>`\n+            let tokens = TokenStream::new(vec![params.into(), arrow.into(), body.into()]);\n             let dspan = DelimSpan::from_pair(pspan.shrink_to_lo(), bspan.shrink_to_hi());\n             P(MacArgs::Delimited(dspan, MacDelimiter::Brace, tokens))\n         } else {\n@@ -1380,65 +1360,68 @@ impl<'a> Parser<'a> {\n \n     /// Parses a legacy `macro_rules! foo { ... }` declarative macro.\n     fn parse_item_macro_rules(&mut self, vis: &Visibility) -> PResult<'a, ItemInfo> {\n-        self.complain_if_pub_macro(&vis.node, vis.span);\n         self.expect_keyword(sym::macro_rules)?; // `macro_rules`\n         self.expect(&token::Not)?; // `!`\n \n         let ident = self.parse_ident()?;\n         let body = self.parse_mac_args()?;\n-        if body.need_semicolon() && !self.eat(&token::Semi) {\n-            self.report_invalid_macro_expansion_item();\n-        }\n+        self.eat_semi_for_macro_if_needed(&body);\n+        self.complain_if_pub_macro(vis, true);\n \n         Ok((ident, ItemKind::MacroDef(ast::MacroDef { body, legacy: true })))\n     }\n \n-    fn complain_if_pub_macro(&self, vis: &VisibilityKind, sp: Span) {\n-        match *vis {\n-            VisibilityKind::Inherited => {}\n-            _ => {\n-                let mut err = if self.token.is_keyword(sym::macro_rules) {\n-                    let mut err =\n-                        self.struct_span_err(sp, \"can't qualify macro_rules invocation with `pub`\");\n-                    err.span_suggestion(\n-                        sp,\n-                        \"try exporting the macro\",\n-                        \"#[macro_export]\".to_owned(),\n-                        Applicability::MaybeIncorrect, // speculative\n-                    );\n-                    err\n-                } else {\n-                    let mut err =\n-                        self.struct_span_err(sp, \"can't qualify macro invocation with `pub`\");\n-                    err.help(\"try adjusting the macro to put `pub` inside the invocation\");\n-                    err\n-                };\n-                err.emit();\n-            }\n+    /// Item macro invocations or `macro_rules!` definitions need inherited visibility.\n+    /// If that's not the case, emit an error.\n+    fn complain_if_pub_macro(&self, vis: &Visibility, macro_rules: bool) {\n+        if let VisibilityKind::Inherited = vis.node {\n+            return;\n+        }\n+\n+        let vstr = pprust::vis_to_string(vis);\n+        let vstr = vstr.trim_end();\n+        if macro_rules {\n+            let msg = format!(\"can't qualify macro_rules invocation with `{}`\", vstr);\n+            self.struct_span_err(vis.span, &msg)\n+                .span_suggestion(\n+                    vis.span,\n+                    \"try exporting the macro\",\n+                    \"#[macro_export]\".to_owned(),\n+                    Applicability::MaybeIncorrect, // speculative\n+                )\n+                .emit();\n+        } else {\n+            self.struct_span_err(vis.span, \"can't qualify macro invocation with `pub`\")\n+                .span_suggestion(\n+                    vis.span,\n+                    \"remove the visibility\",\n+                    String::new(),\n+                    Applicability::MachineApplicable,\n+                )\n+                .help(&format!(\"try adjusting the macro to put `{}` inside the invocation\", vstr))\n+                .emit();\n         }\n     }\n \n-    fn report_invalid_macro_expansion_item(&self) {\n-        let has_close_delim = self\n-            .sess\n-            .source_map()\n-            .span_to_snippet(self.prev_span)\n-            .map(|s| s.ends_with(\")\") || s.ends_with(\"]\"))\n-            .unwrap_or(false);\n+    fn eat_semi_for_macro_if_needed(&mut self, args: &MacArgs) {\n+        if args.need_semicolon() && !self.eat(&token::Semi) {\n+            self.report_invalid_macro_expansion_item(args);\n+        }\n+    }\n \n+    fn report_invalid_macro_expansion_item(&self, args: &MacArgs) {\n         let mut err = self.struct_span_err(\n             self.prev_span,\n             \"macros that expand to items must be delimited with braces or followed by a semicolon\",\n         );\n-\n-        // To avoid ICE, we shouldn't emit actual suggestions when it hasn't closing delims\n-        if has_close_delim {\n+        if self.unclosed_delims.is_empty() {\n+            let DelimSpan { open, close } = match args {\n+                MacArgs::Empty | MacArgs::Eq(..) => unreachable!(),\n+                MacArgs::Delimited(dspan, ..) => *dspan,\n+            };\n             err.multipart_suggestion(\n                 \"change the delimiters to curly braces\",\n-                vec![\n-                    (self.prev_span.with_hi(self.prev_span.lo() + BytePos(1)), '{'.to_string()),\n-                    (self.prev_span.with_lo(self.prev_span.hi() - BytePos(1)), '}'.to_string()),\n-                ],\n+                vec![(open, \"{\".to_string()), (close, '}'.to_string())],\n                 Applicability::MaybeIncorrect,\n             );\n         } else {\n@@ -1449,14 +1432,13 @@ impl<'a> Parser<'a> {\n                 Applicability::HasPlaceholders,\n             );\n         }\n-\n         err.span_suggestion(\n             self.prev_span.shrink_to_hi(),\n             \"add a semicolon\",\n             ';'.to_string(),\n             Applicability::MaybeIncorrect,\n-        )\n-        .emit();\n+        );\n+        err.emit();\n     }\n \n     /// Checks if current token is one of tokens which cannot be nested like `kw::Enum`. In case"}, {"sha": "79944dc35e523f358ce672b6125d84bdedafdbfd", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -572,6 +572,11 @@ impl<'a> Parser<'a> {\n         if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }\n     }\n \n+    /// Is the given keyword `kw` followed by a non-reserved identifier?\n+    fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {\n+        self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())\n+    }\n+\n     fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {\n         if ok {\n             true"}, {"sha": "742fc4802fd9d6db0cb0f7fdfc982f0efd3bd8fa", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -8,7 +8,7 @@ use crate::DirectoryOwnership;\n \n use rustc_errors::{Applicability, PResult};\n use rustc_span::source_map::{BytePos, Span};\n-use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::symbol::{kw, sym};\n use syntax::ast;\n use syntax::ast::{AttrStyle, AttrVec, Attribute, Mac, MacStmtStyle};\n use syntax::ast::{Block, BlockCheckMode, Expr, ExprKind, Local, Stmt, StmtKind, DUMMY_NODE_ID};\n@@ -55,13 +55,11 @@ impl<'a> Parser<'a> {\n             return self.recover_stmt_local(lo, attrs.into(), msg, \"let\");\n         }\n \n-        // Starts like a simple path, being careful to avoid contextual keywords\n-        // such as a union items, item with `crate` visibility or auto trait items.\n-        // Our goal here is to parse an arbitrary path `a::b::c` but not something that starts\n-        // like a path (1 token), but it fact not a path.\n-        if self.token.is_path_start()\n-            && !self.token.is_qpath_start()\n-            && !self.is_path_start_item() // Confirm we don't steal syntax from `parse_item_`.\n+        // Starts like a simple path, being careful to avoid contextual keywords,\n+        // e.g., `union`, items with `crate` visibility, or `auto trait` items.\n+        // We aim to parse an arbitrary path `a::b` but not something that starts like a path\n+        // (1 token), but it fact not a path. Also, we avoid stealing syntax from `parse_item_`.\n+        if self.token.is_path_start() && !self.token.is_qpath_start() && !self.is_path_start_item()\n         {\n             let path = self.parse_path(PathStyle::Expr)?;\n \n@@ -191,10 +189,6 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {\n-        self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())\n-    }\n-\n     fn recover_stmt_local(\n         &mut self,\n         lo: Span,"}, {"sha": "6221b90b31dd7f7d2313674f180d1bc5fff08afd", "filename": "src/test/ui/issues/issue-58856-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.stderr?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -7,11 +7,11 @@ LL |     fn how_are_you(&self -> Empty {\n    |                   |     help: `)` may belong here\n    |                   unclosed delimiter\n \n-error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found `)`\n+error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, `}`, or identifier, found `)`\n   --> $DIR/issue-58856-2.rs:11:1\n    |\n LL |     }\n-   |      - expected one of 10 possible tokens\n+   |      - expected one of 11 possible tokens\n LL | }\n    | ^ unexpected token\n "}, {"sha": "b2beb73503bb074c6fdd56ade5db145d2f272019", "filename": "src/test/ui/issues/issue-60075.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60075.stderr?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -4,7 +4,7 @@ error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n LL |         });\n    |          ^ expected one of `.`, `;`, `?`, `else`, or an operator\n \n-error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found `;`\n+error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, `}`, or identifier, found `;`\n   --> $DIR/issue-60075.rs:6:11\n    |\n LL |     fn qux() -> Option<usize> {"}, {"sha": "a70163df1cb93209788d3400b1a8e325d203e959", "filename": "src/test/ui/macros/issue-54441.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.rs?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -1,6 +1,7 @@\n macro_rules! m {\n+    //~^ ERROR missing `fn`, `type`, or `static` for extern-item declaration\n     () => {\n-        let //~ ERROR expected\n+        let\n     };\n }\n "}, {"sha": "761e7aec7235a2a14a878695ceb4807e3684122b", "filename": "src/test/ui/macros/issue-54441.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -1,13 +1,11 @@\n-error: expected one of `async`, `const`, `crate`, `extern`, `fn`, `pub`, `static`, `type`, or `unsafe`, found keyword `let`\n-  --> $DIR/issue-54441.rs:3:9\n+error: missing `fn`, `type`, or `static` for extern-item declaration\n+  --> $DIR/issue-54441.rs:1:1\n    |\n-LL |         let\n-   |         ^^^ expected one of 9 possible tokens\n-...\n-LL |     m!();\n-   |     ----- in this macro invocation\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+LL | / macro_rules! m {\n+LL | |\n+LL | |     () => {\n+LL | |         let\n+   | |________^ missing `fn`, `type`, or `static`\n \n error: aborting due to previous error\n "}, {"sha": "a2acb94372b8cec895dfdd46bad4516971a48383", "filename": "src/test/ui/parser/attr-before-eof.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fattr-before-eof.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fattr-before-eof.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-before-eof.stderr?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -1,8 +1,8 @@\n error: expected item after attributes\n-  --> $DIR/attr-before-eof.rs:3:16\n+  --> $DIR/attr-before-eof.rs:3:1\n    |\n LL | #[derive(Debug)]\n-   |                ^\n+   | ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1c892eac08f3bd13ea9844c430c3b0f4c883a20a", "filename": "src/test/ui/parser/attr-dangling-in-mod.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fattr-dangling-in-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fattr-dangling-in-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-dangling-in-mod.stderr?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -1,8 +1,8 @@\n error: expected item after attributes\n-  --> $DIR/attr-dangling-in-mod.rs:6:14\n+  --> $DIR/attr-dangling-in-mod.rs:6:1\n    |\n LL | #[foo = \"bar\"]\n-   |              ^\n+   | ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "6060f3afe1e95c4b78cdea35f6a6190cee207240", "filename": "src/test/ui/parser/attrs-after-extern-mod.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fattrs-after-extern-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fattrs-after-extern-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattrs-after-extern-mod.stderr?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -1,8 +1,8 @@\n error: expected item after attributes\n-  --> $DIR/attrs-after-extern-mod.rs:6:19\n+  --> $DIR/attrs-after-extern-mod.rs:6:5\n    |\n LL |     #[cfg(stage37)]\n-   |                   ^\n+   |     ^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "65ecb1ebbe919fbe0ef59ac42a85e8e5c5de5b18", "filename": "src/test/ui/parser/default.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault.rs?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -19,7 +19,8 @@ impl Foo for u16 {\n }\n \n impl Foo for u32 { //~ ERROR not all trait items implemented, missing: `foo`\n-    default pub fn foo<T: Default>() -> T { T::default() } //~ ERROR expected one of\n+    default pub fn foo<T: Default>() -> T { T::default() }\n+    //~^ ERROR missing `fn`, `type`, or `const` for associated-item declaration\n }\n \n fn main() {}"}, {"sha": "ede9e4715186311e9e4d28aa261562059956ae37", "filename": "src/test/ui/parser/default.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `async`, `const`, `extern`, `fn`, `type`, or `unsafe`, found keyword `pub`\n-  --> $DIR/default.rs:22:13\n+error: missing `fn`, `type`, or `const` for associated-item declaration\n+  --> $DIR/default.rs:22:12\n    |\n LL |     default pub fn foo<T: Default>() -> T { T::default() }\n-   |             ^^^ expected one of `async`, `const`, `extern`, `fn`, `type`, or `unsafe`\n+   |            ^ missing `fn`, `type`, or `const`\n \n error[E0449]: unnecessary visibility qualifier\n   --> $DIR/default.rs:16:5"}, {"sha": "14fd01af2f98af15345c4a6995b4634bf32390e7", "filename": "src/test/ui/parser/doc-before-attr.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fdoc-before-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fdoc-before-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-attr.stderr?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -1,8 +1,10 @@\n error: expected item after attributes\n-  --> $DIR/doc-before-attr.rs:4:16\n+  --> $DIR/doc-before-attr.rs:4:1\n    |\n+LL | /// hi\n+   | ------ other attributes here\n LL | #[derive(Debug)]\n-   |                ^\n+   | ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1d271fa64b0ec31c02c3c7bbd999ec521198cca6", "filename": "src/test/ui/parser/duplicate-visibility.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -1,7 +1,6 @@\n-// error-pattern: expected one of `(`, `async`, `const`, `extern`, `fn`\n-\n fn main() {}\n \n extern {\n     pub pub fn foo();\n+    //~^ ERROR missing `fn`, `type`, or `static` for extern-item declaration\n }"}, {"sha": "36a3a1ed5a0ccbd972ab381b784ff0f4fab5d0df", "filename": "src/test/ui/parser/duplicate-visibility.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `(`, `async`, `const`, `extern`, `fn`, `static`, `type`, or `unsafe`, found keyword `pub`\n-  --> $DIR/duplicate-visibility.rs:6:9\n+error: missing `fn`, `type`, or `static` for extern-item declaration\n+  --> $DIR/duplicate-visibility.rs:4:8\n    |\n LL |     pub pub fn foo();\n-   |         ^^^ expected one of 8 possible tokens\n+   |        ^ missing `fn`, `type`, or `static`\n \n error: aborting due to previous error\n "}, {"sha": "982a6be23ac5fb1814e14e99b9ba14fbcade81a6", "filename": "src/test/ui/parser/issue-19398.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fissue-19398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fissue-19398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-19398.rs?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -1,5 +1,6 @@\n trait T {\n-    extern \"Rust\" unsafe fn foo(); //~ ERROR expected one of `async`, `const`\n+    //~^ ERROR missing `fn`, `type`, or `const` for associated-item declaration\n+    extern \"Rust\" unsafe fn foo();\n }\n \n fn main() {}"}, {"sha": "2bd6ac3a4b3a49998821322f793ec265e2d5330b", "filename": "src/test/ui/parser/issue-19398.stderr", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fissue-19398.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fissue-19398.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-19398.stderr?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -1,10 +1,11 @@\n-error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found keyword `extern`\n-  --> $DIR/issue-19398.rs:2:5\n+error: missing `fn`, `type`, or `const` for associated-item declaration\n+  --> $DIR/issue-19398.rs:1:10\n    |\n-LL | trait T {\n-   |          - expected one of 10 possible tokens\n-LL |     extern \"Rust\" unsafe fn foo();\n-   |     ^^^^^^ unexpected token\n+LL |   trait T {\n+   |  __________^\n+LL | |\n+LL | |     extern \"Rust\" unsafe fn foo();\n+   | |____^ missing `fn`, `type`, or `const`\n \n error: aborting due to previous error\n "}, {"sha": "168c7e76162bcffc6d42e3920b727a41a2cfde09", "filename": "src/test/ui/parser/issue-20711-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fissue-20711-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fissue-20711-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-20711-2.rs?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -4,6 +4,7 @@ impl Foo {\n     fn foo() {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-} //~ ERROR expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, or\n+    //~^ ERROR expected item after attributes\n+}\n \n fn main() {}"}, {"sha": "10ef31584dec10a516f3431b086a88a359f224e3", "filename": "src/test/ui/parser/issue-20711-2.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fissue-20711-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fissue-20711-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-20711-2.stderr?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -1,10 +1,8 @@\n-error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, or `unsafe`, found `}`\n-  --> $DIR/issue-20711-2.rs:7:1\n+error: expected item after attributes\n+  --> $DIR/issue-20711-2.rs:6:5\n    |\n LL |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-   |                                                  - expected one of 9 possible tokens\n-LL | }\n-   | ^ unexpected token\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "020bb79d6e74e075effabfe12367e482a4a63e04", "filename": "src/test/ui/parser/issue-20711.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fissue-20711.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fissue-20711.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-20711.rs?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -2,6 +2,7 @@ struct Foo;\n \n impl Foo {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-} //~ ERROR expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, or\n+    //~^ ERROR expected item after attributes\n+}\n \n fn main() {}"}, {"sha": "66768de569418dca62594660747e107ee2449770", "filename": "src/test/ui/parser/issue-20711.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fissue-20711.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fissue-20711.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-20711.stderr?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -1,10 +1,8 @@\n-error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, or `unsafe`, found `}`\n-  --> $DIR/issue-20711.rs:5:1\n+error: expected item after attributes\n+  --> $DIR/issue-20711.rs:4:5\n    |\n LL |     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-   |                                                  - expected one of 9 possible tokens\n-LL | }\n-   | ^ unexpected token\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "25c1efe35ae11cb7f31b806e48f5f439d7e262dd", "filename": "src/test/ui/parser/issue-32446.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fissue-32446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fissue-32446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-32446.stderr?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found `...`\n+error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, `}`, or identifier, found `...`\n   --> $DIR/issue-32446.rs:4:11\n    |\n LL | trait T { ... }\n-   |           ^^^ expected one of 10 possible tokens\n+   |           ^^^ expected one of 11 possible tokens\n \n error: aborting due to previous error\n "}, {"sha": "327bc65818fa9ada1fc968b2677a5f4005f8df84", "filename": "src/test/ui/parser/issue-41155.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fissue-41155.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fissue-41155.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-41155.stderr?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `(`, `async`, `const`, `default`, `extern`, `fn`, `type`, or `unsafe`, found `}`\n+error: expected one of `(`, `async`, `const`, `default`, `extern`, `fn`, `type`, `unsafe`, or identifier, found `}`\n   --> $DIR/issue-41155.rs:5:1\n    |\n LL |     pub\n-   |        - expected one of 8 possible tokens\n+   |        - expected one of 9 possible tokens\n LL | }\n    | ^ unexpected token\n "}, {"sha": "8a44ee761ed677e7a65b5b90c01af6bd11eaf7a3", "filename": "src/test/ui/parser/issue-58094-missing-right-square-bracket.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fissue-58094-missing-right-square-bracket.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fissue-58094-missing-right-square-bracket.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-58094-missing-right-square-bracket.stderr?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -7,10 +7,10 @@ LL | #[\u0405\n    |  unclosed delimiter\n \n error: expected item after attributes\n-  --> $DIR/issue-58094-missing-right-square-bracket.rs:4:4\n+  --> $DIR/issue-58094-missing-right-square-bracket.rs:4:1\n    |\n LL | #[\u0405\n-   |    ^\n+   | ^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f5f8a01e6a440eeea4fe03007d1579275d5e46cc", "filename": "src/test/ui/parser/macro/pub-item-macro.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.rs?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -1,12 +1,15 @@\n // Issue #14660\n \n-macro_rules! priv_x { () => {\n-    static x: u32 = 0;\n-}}\n+macro_rules! priv_x {\n+    () => {\n+        static x: u32 = 0;\n+    };\n+}\n \n macro_rules! pub_x { () => {\n     pub priv_x!(); //~ ERROR can't qualify macro invocation with `pub`\n-    //~^ HELP try adjusting the macro to put `pub` inside the invocation\n+    //~^ HELP remove the visibility\n+    //~| HELP try adjusting the macro to put `pub` inside the invocation\n }}\n \n mod foo {"}, {"sha": "4ff96532e03a82d1fc9330f8fd2de093c5c95e7f", "filename": "src/test/ui/parser/macro/pub-item-macro.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.stderr?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -1,8 +1,8 @@\n error: can't qualify macro invocation with `pub`\n-  --> $DIR/pub-item-macro.rs:8:5\n+  --> $DIR/pub-item-macro.rs:10:5\n    |\n LL |     pub priv_x!();\n-   |     ^^^\n+   |     ^^^ help: remove the visibility\n ...\n LL |     pub_x!();\n    |     --------- in this macro invocation\n@@ -11,16 +11,16 @@ LL |     pub_x!();\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0603]: static `x` is private\n-  --> $DIR/pub-item-macro.rs:17:23\n+  --> $DIR/pub-item-macro.rs:20:23\n    |\n LL |     let y: u32 = foo::x;\n    |                       ^ this static is private\n    |\n note: the static `x` is defined here\n-  --> $DIR/pub-item-macro.rs:4:5\n+  --> $DIR/pub-item-macro.rs:5:9\n    |\n-LL |     static x: u32 = 0;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |         static x: u32 = 0;\n+   |         ^^^^^^^^^^^^^^^^^^\n ...\n LL |     pub_x!();\n    |     --------- in this macro invocation"}, {"sha": "9d05e85bcc00e06e26881230e4678d256d9c0fc9", "filename": "src/test/ui/parser/macro/trait-non-item-macros.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-non-item-macros.stderr?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, or `unsafe`, found `2`\n+error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, or identifier, found `2`\n   --> $DIR/trait-non-item-macros.rs:2:19\n    |\n LL |     ($a:expr) => ($a)\n-   |                   ^^ expected one of 9 possible tokens\n+   |                   ^^ expected one of 10 possible tokens\n ...\n LL |     bah!(2);\n    |     -------- in this macro invocation"}, {"sha": "592215030f552f2030ee4ee45abccae64ec5c7b4", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-impl-trait.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.rs?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -1,12 +1,14 @@\n+fn main() {}\n+\n impl T for () { //~ ERROR cannot find trait `T` in this scope\n \n fn foo(&self) {}\n+//~^ ERROR missing `fn`, `type`, or `const`\n \n-trait T { //~ ERROR expected one of\n+trait T {\n     fn foo(&self);\n }\n \n pub(crate) struct Bar<T>();\n \n-fn main() {}\n //~ ERROR this file contains an unclosed delimiter"}, {"sha": "1ec54525105f66598efdaefd1ad2c7418cd129a8", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-impl-trait.stderr", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.stderr?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -1,29 +1,24 @@\n error: this file contains an unclosed delimiter\n-  --> $DIR/missing-close-brace-in-impl-trait.rs:12:52\n+  --> $DIR/missing-close-brace-in-impl-trait.rs:14:52\n    |\n LL | impl T for () {\n    |               - unclosed delimiter\n ...\n LL |\n    |                                                    ^\n \n-error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found keyword `trait`\n-  --> $DIR/missing-close-brace-in-impl-trait.rs:5:1\n+error: missing `fn`, `type`, or `const` for associated-item declaration\n+  --> $DIR/missing-close-brace-in-impl-trait.rs:5:17\n    |\n-LL | impl T for () {\n-   |               - unclosed delimiter\n-LL | \n-LL | fn foo(&self) {}\n-   |                 -\n-   |                 |\n-   |                 expected one of 10 possible tokens\n-   |                 help: `}` may belong here\n-LL | \n-LL | trait T {\n-   | ^^^^^ unexpected token\n+LL |   fn foo(&self) {}\n+   |  _________________^\n+LL | |\n+LL | |\n+LL | | trait T {\n+   | |_ missing `fn`, `type`, or `const`\n \n error[E0405]: cannot find trait `T` in this scope\n-  --> $DIR/missing-close-brace-in-impl-trait.rs:1:6\n+  --> $DIR/missing-close-brace-in-impl-trait.rs:3:6\n    |\n LL | impl T for () {\n    |      ^ not found in this scope"}, {"sha": "077e33471942741c42f993dde3e85ca95945f6cc", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.rs?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -3,7 +3,7 @@ trait T {\n     fn foo(&self);\n \n pub(crate) struct Bar<T>();\n-//~^ ERROR expected one of\n+//~^ ERROR missing `fn`, `type`, or `const`\n \n impl T for Bar<usize> {\n fn foo(&self) {}"}, {"sha": "1bb153c461d90b20dd1feab86f6bfecf1b3cc4d6", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -7,11 +7,11 @@ LL | trait T {\n LL | fn main() {}\n    |                                                                 ^\n \n-error: expected one of `async`, `const`, `default`, `extern`, `fn`, `type`, or `unsafe`, found keyword `struct`\n-  --> $DIR/missing-close-brace-in-trait.rs:5:12\n+error: missing `fn`, `type`, or `const` for associated-item declaration\n+  --> $DIR/missing-close-brace-in-trait.rs:5:11\n    |\n LL | pub(crate) struct Bar<T>();\n-   |            ^^^^^^ expected one of 7 possible tokens\n+   |           ^ missing `fn`, `type`, or `const`\n \n error[E0601]: `main` function not found in crate `missing_close_brace_in_trait`\n   --> $DIR/missing-close-brace-in-trait.rs:1:1"}, {"sha": "0183bdcf6220bcf41a660803e46613ff2b8dd58d", "filename": "src/test/ui/parser/pub-method-macro.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fpub-method-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fpub-method-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpub-method-macro.rs?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -15,7 +15,8 @@ mod bleh {\n \n     impl S {\n         pub defn!(f); //~ ERROR can't qualify macro invocation with `pub`\n-        //~^ HELP try adjusting the macro to put `pub` inside the invocation\n+        //~^ HELP remove the visibility\n+        //~| HELP try adjusting the macro to put `pub` inside the invocation\n     }\n }\n "}, {"sha": "7c7a909267a1cfecd4c53e209444643430ca723a", "filename": "src/test/ui/parser/pub-method-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fpub-method-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fpub-method-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpub-method-macro.stderr?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -2,7 +2,7 @@ error: can't qualify macro invocation with `pub`\n   --> $DIR/pub-method-macro.rs:17:9\n    |\n LL |         pub defn!(f);\n-   |         ^^^\n+   |         ^^^ help: remove the visibility\n    |\n    = help: try adjusting the macro to put `pub` inside the invocation\n "}, {"sha": "9e12222f3fd8b54d6b74c63cfd47c6685b050158", "filename": "src/test/ui/parser/removed-syntax-static-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.rs?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -1,8 +1,8 @@\n struct S;\n \n impl S {\n+    //~^ ERROR missing `fn`, `type`, or `const` for associated-item declaration\n     static fn f() {}\n-    //~^ ERROR expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`,\n }\n \n fn main() {}"}, {"sha": "5edf88026fbece1eb122ccaf4ab803568b12eb59", "filename": "src/test/ui/parser/removed-syntax-static-fn.stderr", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-static-fn.stderr?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -1,10 +1,11 @@\n-error: expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found keyword `static`\n-  --> $DIR/removed-syntax-static-fn.rs:4:5\n+error: missing `fn`, `type`, or `const` for associated-item declaration\n+  --> $DIR/removed-syntax-static-fn.rs:3:9\n    |\n-LL | impl S {\n-   |         - expected one of 10 possible tokens\n-LL |     static fn f() {}\n-   |     ^^^^^^ unexpected token\n+LL |   impl S {\n+   |  _________^\n+LL | |\n+LL | |     static fn f() {}\n+   | |____^ missing `fn`, `type`, or `const`\n \n error: aborting due to previous error\n "}, {"sha": "c0168b02da607550a36e1d4610d74eed46281530", "filename": "src/test/ui/pub/pub-restricted-error-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaaf0ba072815d275820d8ac85ece6eeb9182321/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error-fn.stderr?ref=aaaf0ba072815d275820d8ac85ece6eeb9182321", "patch": "@@ -1,10 +1,10 @@\n-error: unmatched visibility `pub`\n+error: unmatched visibility `pub(crate)`\n   --> $DIR/pub-restricted-error-fn.rs:1:1\n    |\n LL | pub(crate) () fn foo() {}\n    | ^^^^^^^^^^ the unmatched visibility\n    |\n-   = help: you likely meant to define an item, e.g., `pub fn foo() {}`\n+   = help: you likely meant to define an item, e.g., `pub(crate) fn foo() {}`\n \n error: expected item, found `(`\n   --> $DIR/pub-restricted-error-fn.rs:1:12"}]}