{"sha": "0a803c97523b99799e5f4c05bdf5f18764698c11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhODAzYzk3NTIzYjk5Nzk5ZTVmNGMwNWJkZjVmMTg3NjQ2OThjMTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-14T20:26:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-14T20:26:23Z"}, "message": "Auto merge of #1158 - divergentdave:shim-rename, r=RalfJung\n\nAdd shim for rename\n\nThis adds a straightforward shim for rename, which is used by `std::fs::rename`. Testing is included.\n\nAs a heads up, I expect one or two merge conflicts between my PRs, since some of them touch the same `use` statements, or add items near the same places. I'll rebase and fix them as they come up.", "tree": {"sha": "4ef2c4d832010b1d2f2e184d4875109871ebfdc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ef2c4d832010b1d2f2e184d4875109871ebfdc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a803c97523b99799e5f4c05bdf5f18764698c11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a803c97523b99799e5f4c05bdf5f18764698c11", "html_url": "https://github.com/rust-lang/rust/commit/0a803c97523b99799e5f4c05bdf5f18764698c11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a803c97523b99799e5f4c05bdf5f18764698c11/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ded5a52639a78907523b74a9d3ed8e3824c88ca5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ded5a52639a78907523b74a9d3ed8e3824c88ca5", "html_url": "https://github.com/rust-lang/rust/commit/ded5a52639a78907523b74a9d3ed8e3824c88ca5"}, {"sha": "91868125a519db341f86410590b959b10de03f11", "url": "https://api.github.com/repos/rust-lang/rust/commits/91868125a519db341f86410590b959b10de03f11", "html_url": "https://github.com/rust-lang/rust/commit/91868125a519db341f86410590b959b10de03f11"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "ff5ffb0e3ac6ac7daa6f81e3dba39221e2cbe1ab", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a803c97523b99799e5f4c05bdf5f18764698c11/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a803c97523b99799e5f4c05bdf5f18764698c11/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=0a803c97523b99799e5f4c05bdf5f18764698c11", "patch": "@@ -521,6 +521,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n \n+            \"rename\" => {\n+                let result = this.rename(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n             \"clock_gettime\" => {\n                 let result = this.clock_gettime(args[0], args[1])?;\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;"}, {"sha": "2ae215e7204f2219d758625761eeeceadb7d9bdd", "filename": "src/shims/fs.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0a803c97523b99799e5f4c05bdf5f18764698c11/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a803c97523b99799e5f4c05bdf5f18764698c11/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=0a803c97523b99799e5f4c05bdf5f18764698c11", "patch": "@@ -1,6 +1,6 @@\n use std::collections::HashMap;\n use std::convert::{TryFrom, TryInto};\n-use std::fs::{remove_file, File, OpenOptions};\n+use std::fs::{remove_file, rename, File, OpenOptions};\n use std::io::{Read, Seek, SeekFrom, Write};\n use std::path::PathBuf;\n use std::time::SystemTime;\n@@ -582,6 +582,32 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.set_last_error(ebadf)?;\n         Ok((-1).into())\n     }\n+\n+    fn rename(\n+        &mut self,\n+        oldpath_op: OpTy<'tcx, Tag>,\n+        newpath_op: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        this.check_no_isolation(\"rename\")?;\n+\n+        let oldpath_scalar = this.read_scalar(oldpath_op)?.not_undef()?;\n+        let newpath_scalar = this.read_scalar(newpath_op)?.not_undef()?;\n+\n+        if this.is_null(oldpath_scalar)? || this.is_null(newpath_scalar)? {\n+            let efault = this.eval_libc(\"EFAULT\")?;\n+            this.set_last_error(efault)?;\n+            return Ok(-1);\n+        }\n+\n+        let oldpath = this.read_os_str_from_c_str(oldpath_scalar)?;\n+        let newpath = this.read_os_str_from_c_str(newpath_scalar)?;\n+\n+        let result = rename(oldpath, newpath).map(|_| 0);\n+\n+        this.try_unwrap_io_result(result)\n+    }\n }\n \n /// Extracts the number of seconds and nanoseconds elapsed between `time` and the unix epoch when"}, {"sha": "71c6e854f7c57adb88a1a8d80f57f125f95359cb", "filename": "tests/run-pass/fs.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0a803c97523b99799e5f4c05bdf5f18764698c11/tests%2Frun-pass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a803c97523b99799e5f4c05bdf5f18764698c11/tests%2Frun-pass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs.rs?ref=0a803c97523b99799e5f4c05bdf5f18764698c11", "patch": "@@ -1,7 +1,7 @@\n // ignore-windows: File handling is not implemented yet\n // compile-flags: -Zmiri-disable-isolation\n \n-use std::fs::{File, remove_file};\n+use std::fs::{File, remove_file, rename};\n use std::io::{Read, Write, ErrorKind, Result, Seek, SeekFrom};\n use std::path::{PathBuf, Path};\n \n@@ -82,6 +82,19 @@ fn main() {\n     // Removing file should succeed.\n     remove_file(&path).unwrap();\n \n+    // Renaming a file should succeed.\n+    let path1 = tmp.join(\"rename_source.txt\");\n+    let path2 = tmp.join(\"rename_destination.txt\");\n+    // Clean files for robustness.\n+    remove_file(&path1).ok();\n+    remove_file(&path2).ok();\n+    let file = File::create(&path1).unwrap();\n+    drop(file);\n+    rename(&path1, &path2).unwrap();\n+    assert_eq!(ErrorKind::NotFound, path1.metadata().unwrap_err().kind());\n+    assert!(path2.metadata().unwrap().is_file());\n+    remove_file(&path2).unwrap();\n+\n     // The two following tests also check that the `__errno_location()` shim is working properly.\n     // Opening a non-existing file should fail with a \"not found\" error.\n     assert_eq!(ErrorKind::NotFound, File::open(&path).unwrap_err().kind());"}]}