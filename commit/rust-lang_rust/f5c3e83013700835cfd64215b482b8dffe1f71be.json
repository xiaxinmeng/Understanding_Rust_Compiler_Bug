{"sha": "f5c3e83013700835cfd64215b482b8dffe1f71be", "node_id": "C_kwDOAAsO6NoAKGY1YzNlODMwMTM3MDA4MzVjZmQ2NDIxNWI0ODJiOGRmZmUxZjcxYmU", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-30T15:24:54Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-10-25T11:36:23Z"}, "message": "Avoid a branch on key being local for queries that use the same local and extern providers", "tree": {"sha": "9ff9bcd4e9ac8e0a4b215ce25d2ff3c1edd20759", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ff9bcd4e9ac8e0a4b215ce25d2ff3c1edd20759"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5c3e83013700835cfd64215b482b8dffe1f71be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5c3e83013700835cfd64215b482b8dffe1f71be", "html_url": "https://github.com/rust-lang/rust/commit/f5c3e83013700835cfd64215b482b8dffe1f71be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5c3e83013700835cfd64215b482b8dffe1f71be/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56694b04532cc0dec6e2f577135da3513e856923", "url": "https://api.github.com/repos/rust-lang/rust/commits/56694b04532cc0dec6e2f577135da3513e856923", "html_url": "https://github.com/rust-lang/rust/commit/56694b04532cc0dec6e2f577135da3513e856923"}], "stats": {"total": 216, "additions": 189, "deletions": 27}, "files": [{"sha": "f80f9965f4d8acd0c651fb0a74dbf867abafa8ad", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5c3e83013700835cfd64215b482b8dffe1f71be/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c3e83013700835cfd64215b482b8dffe1f71be/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=f5c3e83013700835cfd64215b482b8dffe1f71be", "patch": "@@ -11,7 +11,7 @@ use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::middle::exported_symbols::{\n     metadata_symbol_name, ExportedSymbol, SymbolExportLevel,\n };\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::ty::query::{ExternProviders, Providers};\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::Instance;\n use rustc_middle::ty::{SymbolName, TyCtxt};\n@@ -363,7 +363,7 @@ pub fn provide(providers: &mut Providers) {\n     providers.wasm_import_module_map = wasm_import_module_map;\n }\n \n-pub fn provide_extern(providers: &mut Providers) {\n+pub fn provide_extern(providers: &mut ExternProviders) {\n     providers.is_reachable_non_generic = is_reachable_non_generic_provider_extern;\n     providers.upstream_monomorphizations_for = upstream_monomorphizations_for_provider;\n }"}, {"sha": "b2b0629c4b7dc683d5d434fe8a95341ab1acea91", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5c3e83013700835cfd64215b482b8dffe1f71be/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c3e83013700835cfd64215b482b8dffe1f71be/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=f5c3e83013700835cfd64215b482b8dffe1f71be", "patch": "@@ -28,7 +28,7 @@ use rustc_hir::def_id::CrateNum;\n use rustc_hir::LangItem;\n use rustc_middle::dep_graph::WorkProduct;\n use rustc_middle::middle::dependency_format::Dependencies;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::ty::query::{ExternProviders, Providers};\n use rustc_session::config::{CrateType, OutputFilenames, OutputType, RUST_CGU_EXT};\n use rustc_session::cstore::{self, CrateSource};\n use rustc_session::utils::NativeLibKind;\n@@ -170,7 +170,7 @@ pub fn provide(providers: &mut Providers) {\n     crate::target_features::provide(providers);\n }\n \n-pub fn provide_extern(providers: &mut Providers) {\n+pub fn provide_extern(providers: &mut ExternProviders) {\n     crate::back::symbol_export::provide_extern(providers);\n }\n "}, {"sha": "8fef8314a5ccd1aeea37ee4c83b7659d31e80cda", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5c3e83013700835cfd64215b482b8dffe1f71be/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c3e83013700835cfd64215b482b8dffe1f71be/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=f5c3e83013700835cfd64215b482b8dffe1f71be", "patch": "@@ -9,7 +9,7 @@ use rustc_errors::ErrorReported;\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt, LayoutOf, TyAndLayout};\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::ty::query::{ExternProviders, Providers};\n use rustc_middle::ty::{Ty, TyCtxt};\n use rustc_session::{\n     config::{self, OutputFilenames, PrintRequest},\n@@ -80,7 +80,7 @@ pub trait CodegenBackend {\n     }\n \n     fn provide(&self, _providers: &mut Providers) {}\n-    fn provide_extern(&self, _providers: &mut Providers) {}\n+    fn provide_extern(&self, _providers: &mut ExternProviders) {}\n     fn codegen_crate<'tcx>(\n         &self,\n         tcx: TyCtxt<'tcx>,"}, {"sha": "7a6a643e3d0bb27ed53eb4e764da2f8989dae487", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5c3e83013700835cfd64215b482b8dffe1f71be/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c3e83013700835cfd64215b482b8dffe1f71be/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=f5c3e83013700835cfd64215b482b8dffe1f71be", "patch": "@@ -38,7 +38,7 @@ pub struct Compiler {\n     pub(crate) output_file: Option<PathBuf>,\n     pub(crate) register_lints: Option<Box<dyn Fn(&Session, &mut LintStore) + Send + Sync>>,\n     pub(crate) override_queries:\n-        Option<fn(&Session, &mut ty::query::Providers, &mut ty::query::Providers)>,\n+        Option<fn(&Session, &mut ty::query::Providers, &mut ty::query::ExternProviders)>,\n }\n \n impl Compiler {\n@@ -155,7 +155,7 @@ pub struct Config {\n     ///\n     /// The second parameter is local providers and the third parameter is external providers.\n     pub override_queries:\n-        Option<fn(&Session, &mut ty::query::Providers, &mut ty::query::Providers)>,\n+        Option<fn(&Session, &mut ty::query::Providers, &mut ty::query::ExternProviders)>,\n \n     /// This is a callback from the driver that is called to create a codegen backend.\n     pub make_codegen_backend:"}, {"sha": "62f5f09aa48279a7a1eed4031bd3c858cc11f42d", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f5c3e83013700835cfd64215b482b8dffe1f71be/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c3e83013700835cfd64215b482b8dffe1f71be/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=f5c3e83013700835cfd64215b482b8dffe1f71be", "patch": "@@ -19,7 +19,7 @@ use rustc_metadata::creader::CStore;\n use rustc_metadata::{encode_metadata, EncodedMetadata};\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::ty::query::{ExternProviders, Providers};\n use rustc_middle::ty::{self, GlobalCtxt, ResolverOutputs, TyCtxt};\n use rustc_mir_build as mir_build;\n use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str, validate_attr};\n@@ -764,8 +764,8 @@ pub static DEFAULT_QUERY_PROVIDERS: SyncLazy<Providers> = SyncLazy::new(|| {\n     *providers\n });\n \n-pub static DEFAULT_EXTERN_QUERY_PROVIDERS: SyncLazy<Providers> = SyncLazy::new(|| {\n-    let mut extern_providers = *DEFAULT_QUERY_PROVIDERS;\n+pub static DEFAULT_EXTERN_QUERY_PROVIDERS: SyncLazy<ExternProviders> = SyncLazy::new(|| {\n+    let mut extern_providers = ExternProviders::default();\n     rustc_metadata::provide_extern(&mut extern_providers);\n     rustc_codegen_ssa::provide_extern(&mut extern_providers);\n     extern_providers\n@@ -816,7 +816,6 @@ pub fn create_global_ctxt<'tcx>(\n     codegen_backend.provide(&mut local_providers);\n \n     let mut extern_providers = *DEFAULT_EXTERN_QUERY_PROVIDERS;\n-    codegen_backend.provide(&mut extern_providers);\n     codegen_backend.provide_extern(&mut extern_providers);\n \n     if let Some(callback) = compiler.override_queries {"}, {"sha": "6dbba274360231a05c18e716b4a3d128bd1a3e75", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f5c3e83013700835cfd64215b482b8dffe1f71be/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c3e83013700835cfd64215b482b8dffe1f71be/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=f5c3e83013700835cfd64215b482b8dffe1f71be", "patch": "@@ -55,6 +55,9 @@ enum QueryModifier {\n \n     /// Always evaluate the query, ignoring its dependencies\n     EvalAlways(Ident),\n+\n+    /// Use a separate query provider for local and extern crates\n+    SeparateProvideExtern(Ident),\n }\n \n impl Parse for QueryModifier {\n@@ -118,6 +121,8 @@ impl Parse for QueryModifier {\n             Ok(QueryModifier::Anon(modifier))\n         } else if modifier == \"eval_always\" {\n             Ok(QueryModifier::EvalAlways(modifier))\n+        } else if modifier == \"separate_provide_extern\" {\n+            Ok(QueryModifier::SeparateProvideExtern(modifier))\n         } else {\n             Err(Error::new(modifier.span(), \"unknown query modifier\"))\n         }\n@@ -214,6 +219,9 @@ struct QueryModifiers {\n \n     // Always evaluate the query, ignoring its dependencies\n     eval_always: Option<Ident>,\n+\n+    /// Use a separate query provider for local and extern crates\n+    separate_provide_extern: Option<Ident>,\n }\n \n /// Process query modifiers into a struct, erroring on duplicates\n@@ -227,6 +235,7 @@ fn process_modifiers(query: &mut Query) -> QueryModifiers {\n     let mut no_hash = None;\n     let mut anon = None;\n     let mut eval_always = None;\n+    let mut separate_provide_extern = None;\n     for modifier in query.modifiers.0.drain(..) {\n         match modifier {\n             QueryModifier::LoadCached(tcx, id, block) => {\n@@ -317,6 +326,15 @@ fn process_modifiers(query: &mut Query) -> QueryModifiers {\n                 }\n                 eval_always = Some(ident);\n             }\n+            QueryModifier::SeparateProvideExtern(ident) => {\n+                if separate_provide_extern.is_some() {\n+                    panic!(\n+                        \"duplicate modifier `separate_provide_extern` for query `{}`\",\n+                        query.name\n+                    );\n+                }\n+                separate_provide_extern = Some(ident);\n+            }\n         }\n     }\n     let desc = desc.unwrap_or_else(|| {\n@@ -332,6 +350,7 @@ fn process_modifiers(query: &mut Query) -> QueryModifiers {\n         no_hash,\n         anon,\n         eval_always,\n+        separate_provide_extern,\n     }\n }\n \n@@ -462,6 +481,10 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n         if let Some(eval_always) = &modifiers.eval_always {\n             attributes.push(quote! { (#eval_always) });\n         };\n+        // Pass on the separate_provide_extern modifier\n+        if let Some(separate_provide_extern) = &modifiers.separate_provide_extern {\n+            attributes.push(quote! { (#separate_provide_extern) });\n+        }\n \n         // This uses the span of the query definition for the commas,\n         // which can be important if we later encounter any ambiguity"}, {"sha": "7ea004b16f23bc3546f4db41827ca4ef927a22a0", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f5c3e83013700835cfd64215b482b8dffe1f71be/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c3e83013700835cfd64215b482b8dffe1f71be/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=f5c3e83013700835cfd64215b482b8dffe1f71be", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n use rustc_middle::hir::exports::Export;\n use rustc_middle::middle::exported_symbols::ExportedSymbol;\n use rustc_middle::middle::stability::DeprecationEntry;\n-use rustc_middle::ty::query::Providers;\n+use rustc_middle::ty::query::{ExternProviders, Providers};\n use rustc_middle::ty::{self, TyCtxt, Visibility};\n use rustc_session::cstore::{CrateSource, CrateStore, ForeignModule};\n use rustc_session::utils::NativeLibKind;\n@@ -26,7 +26,7 @@ use std::any::Any;\n macro_rules! provide {\n     (<$lt:tt> $tcx:ident, $def_id:ident, $other:ident, $cdata:ident,\n       $($name:ident => $compute:block)*) => {\n-        pub fn provide_extern(providers: &mut Providers) {\n+        pub fn provide_extern(providers: &mut ExternProviders) {\n             $(fn $name<$lt>(\n                 $tcx: TyCtxt<$lt>,\n                 def_id_arg: ty::query::query_keys::$name<$lt>,\n@@ -51,7 +51,7 @@ macro_rules! provide {\n                 $compute\n             })*\n \n-            *providers = Providers {\n+            *providers = ExternProviders {\n                 $($name,)*\n                 ..*providers\n             };"}, {"sha": "6d384f5f3d645a845bae6b8b0b2341c3bc7640ad", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 82, "deletions": 4, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/f5c3e83013700835cfd64215b482b8dffe1f71be/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c3e83013700835cfd64215b482b8dffe1f71be/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=f5c3e83013700835cfd64215b482b8dffe1f71be", "patch": "@@ -107,6 +107,7 @@ rustc_queries! {\n     /// parameter. e.g. `fn example<const N: usize=3>` called on `N` would return `3`.\n     query const_param_default(param: DefId) -> &'tcx ty::Const<'tcx> {\n         desc { |tcx| \"compute const default for a given parameter `{}`\", tcx.def_path_str(param)  }\n+        separate_provide_extern\n     }\n \n     query default_anon_const_substs(key: DefId) -> SubstsRef<'tcx> {\n@@ -128,6 +129,7 @@ rustc_queries! {\n             path = tcx.def_path_str(key),\n         }\n         cache_on_disk_if { key.is_local() }\n+        separate_provide_extern\n     }\n \n     query analysis(key: ()) -> Result<(), ErrorReported> {\n@@ -141,6 +143,7 @@ rustc_queries! {\n         desc { |tcx| \"computing generics of `{}`\", tcx.def_path_str(key) }\n         storage(ArenaCacheSelector<'tcx>)\n         cache_on_disk_if { key.is_local() }\n+        separate_provide_extern\n     }\n \n     /// Maps from the `DefId` of an item (trait/struct/enum/fn) to the\n@@ -181,6 +184,7 @@ rustc_queries! {\n     /// Bounds from the parent (e.g. with nested impl trait) are not included.\n     query explicit_item_bounds(key: DefId) -> &'tcx [(ty::Predicate<'tcx>, Span)] {\n         desc { |tcx| \"finding item bounds for `{}`\", tcx.def_path_str(key) }\n+        separate_provide_extern\n     }\n \n     /// Elaborated version of the predicates from `explicit_item_bounds`.\n@@ -209,6 +213,7 @@ rustc_queries! {\n \n     query native_libraries(_: CrateNum) -> Lrc<Vec<NativeLib>> {\n         desc { \"looking up the native libraries of a linked crate\" }\n+        separate_provide_extern\n     }\n \n     query lint_levels(_: ()) -> LintLevelMap {\n@@ -226,11 +231,13 @@ rustc_queries! {\n         // This query reads from untracked data in definitions.\n         eval_always\n         desc { |tcx| \"expansion that defined `{}`\", tcx.def_path_str(key) }\n+        separate_provide_extern\n     }\n \n     query is_panic_runtime(_: CrateNum) -> bool {\n         fatal_cycle\n         desc { \"checking if the crate is_panic_runtime\" }\n+        separate_provide_extern\n     }\n \n     /// Fetch the THIR for a given body. If typeck for that body failed, returns an empty `Thir`.\n@@ -260,6 +267,7 @@ rustc_queries! {\n     query mir_const_qualif(key: DefId) -> mir::ConstQualifs {\n         desc { |tcx| \"const checking `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }\n+        separate_provide_extern\n     }\n     query mir_const_qualif_const_arg(\n         key: (LocalDefId, DefId)\n@@ -296,6 +304,7 @@ rustc_queries! {\n         desc {\n             |tcx| \"building an abstract representation for {}\", tcx.def_path_str(key),\n         }\n+        separate_provide_extern\n     }\n     /// Try to build an abstract representation of the given constant.\n     query thir_abstract_const_of_const_arg(\n@@ -329,6 +338,7 @@ rustc_queries! {\n     ) -> &'tcx mir::Body<'tcx> {\n         desc { |tcx| \"caching mir of `{}` for CTFE\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }\n+        separate_provide_extern\n     }\n \n     query mir_for_ctfe_of_const_arg(key: (LocalDefId, DefId)) -> &'tcx mir::Body<'tcx> {\n@@ -366,6 +376,7 @@ rustc_queries! {\n     query optimized_mir(key: DefId) -> &'tcx mir::Body<'tcx> {\n         desc { |tcx| \"optimizing MIR for `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }\n+        separate_provide_extern\n     }\n \n     /// Returns coverage summary info for a function, after executing the `InstrumentCoverage`\n@@ -404,6 +415,7 @@ rustc_queries! {\n     query promoted_mir(key: DefId) -> &'tcx IndexVec<mir::Promoted, mir::Body<'tcx>> {\n         desc { |tcx| \"optimizing promoted MIR for `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }\n+        separate_provide_extern\n     }\n     query promoted_mir_of_const_arg(\n         key: (LocalDefId, DefId)\n@@ -462,12 +474,14 @@ rustc_queries! {\n     /// Returns the predicates written explicitly by the user.\n     query explicit_predicates_of(key: DefId) -> ty::GenericPredicates<'tcx> {\n         desc { |tcx| \"computing explicit predicates of `{}`\", tcx.def_path_str(key) }\n+        separate_provide_extern\n     }\n \n     /// Returns the inferred outlives predicates (e.g., for `struct\n     /// Foo<'a, T> { x: &'a T }`, this would return `T: 'a`).\n     query inferred_outlives_of(key: DefId) -> &'tcx [(ty::Predicate<'tcx>, Span)] {\n         desc { |tcx| \"computing inferred outlives predicates of `{}`\", tcx.def_path_str(key) }\n+        separate_provide_extern\n     }\n \n     /// Maps from the `DefId` of a trait to the list of\n@@ -478,6 +492,7 @@ rustc_queries! {\n     /// additional acyclicity requirements).\n     query super_predicates_of(key: DefId) -> ty::GenericPredicates<'tcx> {\n         desc { |tcx| \"computing the super predicates of `{}`\", tcx.def_path_str(key) }\n+        separate_provide_extern\n     }\n \n     /// The `Option<Ident>` is the name of an associated type. If it is `None`, then this query\n@@ -503,12 +518,15 @@ rustc_queries! {\n     query trait_def(key: DefId) -> ty::TraitDef {\n         desc { |tcx| \"computing trait definition for `{}`\", tcx.def_path_str(key) }\n         storage(ArenaCacheSelector<'tcx>)\n+        separate_provide_extern\n     }\n     query adt_def(key: DefId) -> &'tcx ty::AdtDef {\n         desc { |tcx| \"computing ADT definition for `{}`\", tcx.def_path_str(key) }\n+        separate_provide_extern\n     }\n     query adt_destructor(key: DefId) -> Option<ty::Destructor> {\n         desc { |tcx| \"computing `Drop` impl for `{}`\", tcx.def_path_str(key) }\n+        separate_provide_extern\n     }\n \n     // The cycle error here should be reported as an error by `check_representable`.\n@@ -537,10 +555,12 @@ rustc_queries! {\n     /// `is_const_fn` function.\n     query is_const_fn_raw(key: DefId) -> bool {\n         desc { |tcx| \"checking if item is const fn: `{}`\", tcx.def_path_str(key) }\n+        separate_provide_extern\n     }\n \n     query asyncness(key: DefId) -> hir::IsAsync {\n         desc { |tcx| \"checking if the function is async: `{}`\", tcx.def_path_str(key) }\n+        separate_provide_extern\n     }\n \n     /// Returns `true` if calls to the function may be promoted.\n@@ -557,16 +577,19 @@ rustc_queries! {\n     /// Returns `true` if this is a foreign item (i.e., linked via `extern { ... }`).\n     query is_foreign_item(key: DefId) -> bool {\n         desc { |tcx| \"checking if `{}` is a foreign item\", tcx.def_path_str(key) }\n+        separate_provide_extern\n     }\n \n     /// Returns `Some(mutability)` if the node pointed to by `def_id` is a static item.\n     query static_mutability(def_id: DefId) -> Option<hir::Mutability> {\n         desc { |tcx| \"looking up static mutability of `{}`\", tcx.def_path_str(def_id) }\n+        separate_provide_extern\n     }\n \n     /// Returns `Some(generator_kind)` if the node pointed to by `def_id` is a generator.\n     query generator_kind(def_id: DefId) -> Option<hir::GeneratorKind> {\n         desc { |tcx| \"looking up generator kind of `{}`\", tcx.def_path_str(def_id) }\n+        separate_provide_extern\n     }\n \n     /// Gets a map with the variance of every item; use `item_variance` instead.\n@@ -578,6 +601,7 @@ rustc_queries! {\n     /// Maps from the `DefId` of a type or region parameter to its (inferred) variance.\n     query variances_of(def_id: DefId) -> &'tcx [ty::Variance] {\n         desc { |tcx| \"computing the variances of `{}`\", tcx.def_path_str(def_id) }\n+        separate_provide_extern\n     }\n \n     /// Maps from thee `DefId` of a type to its (inferred) outlives.\n@@ -589,12 +613,14 @@ rustc_queries! {\n     /// Maps from an impl/trait `DefId` to a list of the `DefId`s of its items.\n     query associated_item_def_ids(key: DefId) -> &'tcx [DefId] {\n         desc { |tcx| \"collecting associated items of `{}`\", tcx.def_path_str(key) }\n+        separate_provide_extern\n     }\n \n     /// Maps from a trait item to the trait item \"descriptor\".\n     query associated_item(key: DefId) -> ty::AssocItem {\n         desc { |tcx| \"computing associated item data for `{}`\", tcx.def_path_str(key) }\n         storage(ArenaCacheSelector<'tcx>)\n+        separate_provide_extern\n     }\n \n     /// Collects the associated items defined on a trait or impl.\n@@ -607,9 +633,11 @@ rustc_queries! {\n     /// Return `None` if this is an inherent impl.\n     query impl_trait_ref(impl_id: DefId) -> Option<ty::TraitRef<'tcx>> {\n         desc { |tcx| \"computing trait implemented by `{}`\", tcx.def_path_str(impl_id) }\n+        separate_provide_extern\n     }\n     query impl_polarity(impl_id: DefId) -> ty::ImplPolarity {\n         desc { |tcx| \"computing implementation polarity of `{}`\", tcx.def_path_str(impl_id) }\n+        separate_provide_extern\n     }\n \n     query issue33140_self_ty(key: DefId) -> Option<ty::Ty<'tcx>> {\n@@ -622,6 +650,7 @@ rustc_queries! {\n     query inherent_impls(key: DefId) -> &'tcx [DefId] {\n         desc { |tcx| \"collecting inherent impls for `{}`\", tcx.def_path_str(key) }\n         eval_always\n+        separate_provide_extern\n     }\n \n     /// The result of unsafety-checking this `LocalDefId`.\n@@ -661,6 +690,7 @@ rustc_queries! {\n     /// The signature of functions.\n     query fn_sig(key: DefId) -> ty::PolyFnSig<'tcx> {\n         desc { |tcx| \"computing function signature of `{}`\", tcx.def_path_str(key) }\n+        separate_provide_extern\n     }\n \n     query lint_mod(key: LocalDefId) -> () {\n@@ -715,10 +745,10 @@ rustc_queries! {\n     }\n \n     /// Caches `CoerceUnsized` kinds for impls on custom types.\n-    query coerce_unsized_info(key: DefId)\n-        -> ty::adjustment::CoerceUnsizedInfo {\n-            desc { |tcx| \"computing CoerceUnsized info for `{}`\", tcx.def_path_str(key) }\n-        }\n+    query coerce_unsized_info(key: DefId) -> ty::adjustment::CoerceUnsizedInfo {\n+        desc { |tcx| \"computing CoerceUnsized info for `{}`\", tcx.def_path_str(key) }\n+        separate_provide_extern\n+    }\n \n     query typeck_item_bodies(_: ()) -> () {\n         desc { \"type-checking all item bodies\" }\n@@ -913,22 +943,27 @@ rustc_queries! {\n \n     query opt_def_kind(def_id: DefId) -> Option<DefKind> {\n         desc { |tcx| \"looking up definition kind of `{}`\", tcx.def_path_str(def_id) }\n+        separate_provide_extern\n     }\n \n     query def_span(def_id: DefId) -> Span {\n         desc { |tcx| \"looking up span for `{}`\", tcx.def_path_str(def_id) }\n+        separate_provide_extern\n     }\n \n     query def_ident_span(def_id: DefId) -> Option<Span> {\n         desc { |tcx| \"looking up span for `{}`'s identifier\", tcx.def_path_str(def_id) }\n+        separate_provide_extern\n     }\n \n     query lookup_stability(def_id: DefId) -> Option<&'tcx attr::Stability> {\n         desc { |tcx| \"looking up stability of `{}`\", tcx.def_path_str(def_id) }\n+        separate_provide_extern\n     }\n \n     query lookup_const_stability(def_id: DefId) -> Option<&'tcx attr::ConstStability> {\n         desc { |tcx| \"looking up const stability of `{}`\", tcx.def_path_str(def_id) }\n+        separate_provide_extern\n     }\n \n     query should_inherit_track_caller(def_id: DefId) -> bool {\n@@ -937,10 +972,12 @@ rustc_queries! {\n \n     query lookup_deprecation_entry(def_id: DefId) -> Option<DeprecationEntry> {\n         desc { |tcx| \"checking whether `{}` is deprecated\", tcx.def_path_str(def_id) }\n+        separate_provide_extern\n     }\n \n     query item_attrs(def_id: DefId) -> &'tcx [ast::Attribute] {\n         desc { |tcx| \"collecting attributes of `{}`\", tcx.def_path_str(def_id) }\n+        separate_provide_extern\n     }\n \n     query codegen_fn_attrs(def_id: DefId) -> CodegenFnAttrs {\n@@ -951,27 +988,33 @@ rustc_queries! {\n \n     query fn_arg_names(def_id: DefId) -> &'tcx [rustc_span::symbol::Ident] {\n         desc { |tcx| \"looking up function parameter names for `{}`\", tcx.def_path_str(def_id) }\n+        separate_provide_extern\n     }\n     /// Gets the rendered value of the specified constant or associated constant.\n     /// Used by rustdoc.\n     query rendered_const(def_id: DefId) -> String {\n         desc { |tcx| \"rendering constant intializer of `{}`\", tcx.def_path_str(def_id) }\n+        separate_provide_extern\n     }\n     query impl_parent(def_id: DefId) -> Option<DefId> {\n         desc { |tcx| \"computing specialization parent impl of `{}`\", tcx.def_path_str(def_id) }\n+        separate_provide_extern\n     }\n \n     /// Given an `associated_item`, find the trait it belongs to.\n     /// Return `None` if the `DefId` is not an associated item.\n     query trait_of_item(associated_item: DefId) -> Option<DefId> {\n         desc { |tcx| \"finding trait defining `{}`\", tcx.def_path_str(associated_item) }\n+        separate_provide_extern\n     }\n \n     query is_ctfe_mir_available(key: DefId) -> bool {\n         desc { |tcx| \"checking if item has ctfe mir available: `{}`\", tcx.def_path_str(key) }\n+        separate_provide_extern\n     }\n     query is_mir_available(key: DefId) -> bool {\n         desc { |tcx| \"checking if item has mir available: `{}`\", tcx.def_path_str(key) }\n+        separate_provide_extern\n     }\n \n     query own_existential_vtable_entries(\n@@ -1137,6 +1180,7 @@ rustc_queries! {\n     query dylib_dependency_formats(_: CrateNum)\n                                     -> &'tcx [(CrateNum, LinkagePreference)] {\n         desc { \"dylib dependency formats of crate\" }\n+        separate_provide_extern\n     }\n \n     query dependency_formats(_: ()) -> Lrc<crate::middle::dependency_format::Dependencies> {\n@@ -1146,41 +1190,50 @@ rustc_queries! {\n     query is_compiler_builtins(_: CrateNum) -> bool {\n         fatal_cycle\n         desc { \"checking if the crate is_compiler_builtins\" }\n+        separate_provide_extern\n     }\n     query has_global_allocator(_: CrateNum) -> bool {\n         // This query depends on untracked global state in CStore\n         eval_always\n         fatal_cycle\n         desc { \"checking if the crate has_global_allocator\" }\n+        separate_provide_extern\n     }\n     query has_panic_handler(_: CrateNum) -> bool {\n         fatal_cycle\n         desc { \"checking if the crate has_panic_handler\" }\n+        separate_provide_extern\n     }\n     query is_profiler_runtime(_: CrateNum) -> bool {\n         fatal_cycle\n         desc { \"query a crate is `#![profiler_runtime]`\" }\n+        separate_provide_extern\n     }\n     query panic_strategy(_: CrateNum) -> PanicStrategy {\n         fatal_cycle\n         desc { \"query a crate's configured panic strategy\" }\n+        separate_provide_extern\n     }\n     query panic_in_drop_strategy(_: CrateNum) -> PanicStrategy {\n         fatal_cycle\n         desc { \"query a crate's configured panic-in-drop strategy\" }\n+        separate_provide_extern\n     }\n     query is_no_builtins(_: CrateNum) -> bool {\n         fatal_cycle\n         desc { \"test whether a crate has `#![no_builtins]`\" }\n+        separate_provide_extern\n     }\n     query symbol_mangling_version(_: CrateNum) -> SymbolManglingVersion {\n         fatal_cycle\n         desc { \"query a crate's symbol mangling version\" }\n+        separate_provide_extern\n     }\n \n     query extern_crate(def_id: DefId) -> Option<&'tcx ExternCrate> {\n         eval_always\n         desc { \"getting crate's ExternCrateData\" }\n+        separate_provide_extern\n     }\n \n     query specializes(_: (DefId, DefId)) -> bool {\n@@ -1197,10 +1250,12 @@ rustc_queries! {\n \n     query impl_defaultness(def_id: DefId) -> hir::Defaultness {\n         desc { |tcx| \"looking up whether `{}` is a default impl\", tcx.def_path_str(def_id) }\n+        separate_provide_extern\n     }\n \n     query impl_constness(def_id: DefId) -> hir::Constness {\n         desc { |tcx| \"looking up whether `{}` is a const impl\", tcx.def_path_str(def_id) }\n+        separate_provide_extern\n     }\n \n     query check_item_well_formed(key: LocalDefId) -> () {\n@@ -1229,9 +1284,11 @@ rustc_queries! {\n         -> DefIdMap<SymbolExportLevel> {\n         storage(ArenaCacheSelector<'tcx>)\n         desc { \"looking up the exported symbols of a crate\" }\n+        separate_provide_extern\n     }\n     query is_reachable_non_generic(def_id: DefId) -> bool {\n         desc { |tcx| \"checking whether `{}` is an exported symbol\", tcx.def_path_str(def_id) }\n+        separate_provide_extern\n     }\n     query is_unreachable_local_definition(def_id: LocalDefId) -> bool {\n         desc { |tcx|\n@@ -1264,6 +1321,7 @@ rustc_queries! {\n                 \"collecting available upstream monomorphizations for `{}`\",\n                 tcx.def_path_str(def_id),\n             }\n+            separate_provide_extern\n         }\n \n     /// Returns the upstream crate that exports drop-glue for the given\n@@ -1287,6 +1345,7 @@ rustc_queries! {\n \n     query foreign_modules(_: CrateNum) -> Lrc<FxHashMap<DefId, ForeignModule>> {\n         desc { \"looking up the foreign modules of a linked crate\" }\n+        separate_provide_extern\n     }\n \n     /// Identifies the entry-point (e.g., the `main` function) for a given\n@@ -1302,32 +1361,38 @@ rustc_queries! {\n     query crate_hash(_: CrateNum) -> Svh {\n         eval_always\n         desc { \"looking up the hash a crate\" }\n+        separate_provide_extern\n     }\n     query crate_host_hash(_: CrateNum) -> Option<Svh> {\n         eval_always\n         desc { \"looking up the hash of a host version of a crate\" }\n+        separate_provide_extern\n     }\n     query extra_filename(_: CrateNum) -> String {\n         eval_always\n         desc { \"looking up the extra filename for a crate\" }\n+        separate_provide_extern\n     }\n     query crate_extern_paths(_: CrateNum) -> Vec<PathBuf> {\n         eval_always\n         desc { \"looking up the paths for extern crates\" }\n+        separate_provide_extern\n     }\n \n     /// Given a crate and a trait, look up all impls of that trait in the crate.\n     /// Return `(impl_id, self_ty)`.\n     query implementations_of_trait(_: (CrateNum, DefId))\n         -> &'tcx [(DefId, Option<ty::fast_reject::SimplifiedType>)] {\n         desc { \"looking up implementations of a trait in a crate\" }\n+        separate_provide_extern\n     }\n \n     /// Given a crate, look up all trait impls in that crate.\n     /// Return `(impl_id, self_ty)`.\n     query all_trait_implementations(_: CrateNum)\n         -> &'tcx [(DefId, Option<ty::fast_reject::SimplifiedType>)] {\n         desc { \"looking up all (?) trait implementations\" }\n+        separate_provide_extern\n     }\n \n     query is_dllimport_foreign_item(def_id: DefId) -> bool {\n@@ -1384,6 +1449,7 @@ rustc_queries! {\n \n     query visibility(def_id: DefId) -> ty::Visibility {\n         desc { |tcx| \"computing visibility of `{}`\", tcx.def_path_str(def_id) }\n+        separate_provide_extern\n     }\n \n     /// Computes the set of modules from which this type is visibly uninhabited.\n@@ -1398,13 +1464,16 @@ rustc_queries! {\n     query dep_kind(_: CrateNum) -> CrateDepKind {\n         eval_always\n         desc { \"fetching what a dependency looks like\" }\n+        separate_provide_extern\n     }\n     query crate_name(_: CrateNum) -> Symbol {\n         eval_always\n         desc { \"fetching what a crate is named\" }\n+        separate_provide_extern\n     }\n     query item_children(def_id: DefId) -> &'tcx [Export] {\n         desc { |tcx| \"collecting child items of `{}`\", tcx.def_path_str(def_id) }\n+        separate_provide_extern\n     }\n     query extern_mod_stmt_cnum(def_id: LocalDefId) -> Option<CrateNum> {\n         desc { |tcx| \"computing crate imported by `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n@@ -1418,6 +1487,7 @@ rustc_queries! {\n     query defined_lib_features(_: CrateNum)\n         -> &'tcx [(Symbol, Option<Symbol>)] {\n         desc { \"calculating the lib features defined in a crate\" }\n+        separate_provide_extern\n     }\n     /// Returns the lang items defined in another crate by loading it from metadata.\n     query get_lang_items(_: ()) -> LanguageItems {\n@@ -1436,16 +1506,19 @@ rustc_queries! {\n     /// Returns the lang items defined in another crate by loading it from metadata.\n     query defined_lang_items(_: CrateNum) -> &'tcx [(DefId, usize)] {\n         desc { \"calculating the lang items defined in a crate\" }\n+        separate_provide_extern\n     }\n \n     /// Returns the diagnostic items defined in a crate.\n     query diagnostic_items(_: CrateNum) -> rustc_hir::diagnostic_items::DiagnosticItems {\n         storage(ArenaCacheSelector<'tcx>)\n         desc { \"calculating the diagnostic items map in a crate\" }\n+        separate_provide_extern\n     }\n \n     query missing_lang_items(_: CrateNum) -> &'tcx [LangItem] {\n         desc { \"calculating the missing lang items in a crate\" }\n+        separate_provide_extern\n     }\n     query visible_parent_map(_: ()) -> DefIdMap<DefId> {\n         storage(ArenaCacheSelector<'tcx>)\n@@ -1458,10 +1531,12 @@ rustc_queries! {\n     query missing_extern_crate_item(_: CrateNum) -> bool {\n         eval_always\n         desc { \"seeing if we're missing an `extern crate` item for this crate\" }\n+        separate_provide_extern\n     }\n     query used_crate_source(_: CrateNum) -> Lrc<CrateSource> {\n         eval_always\n         desc { \"looking at the source for a crate\" }\n+        separate_provide_extern\n     }\n     query postorder_cnums(_: ()) -> &'tcx [CrateNum] {\n         eval_always\n@@ -1472,6 +1547,7 @@ rustc_queries! {\n     query is_private_dep(c: CrateNum) -> bool {\n         eval_always\n         desc { \"check whether crate {} is a private dependency\", c }\n+        separate_provide_extern\n     }\n     query allocator_kind(_: ()) -> Option<AllocatorKind> {\n         eval_always\n@@ -1517,6 +1593,7 @@ rustc_queries! {\n     query exported_symbols(_: CrateNum)\n         -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportLevel)] {\n         desc { \"exported_symbols\" }\n+        separate_provide_extern\n     }\n \n     query collect_and_partition_mono_items(_: ()) -> (&'tcx DefIdSet, &'tcx [CodegenUnit<'tcx>]) {\n@@ -1542,6 +1619,7 @@ rustc_queries! {\n             |tcx| \"determining which generic parameters are unused by `{}`\",\n                 tcx.def_path_str(key.def_id())\n         }\n+        separate_provide_extern\n     }\n     query backend_optimization_level(_: ()) -> OptLevel {\n         desc { \"optimization level used by backend\" }"}, {"sha": "34f806271979af7ec3bef7af3d4e99438fc6862b", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f5c3e83013700835cfd64215b482b8dffe1f71be/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c3e83013700835cfd64215b482b8dffe1f71be/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=f5c3e83013700835cfd64215b482b8dffe1f71be", "patch": "@@ -123,6 +123,39 @@ macro_rules! query_storage {\n     };\n }\n \n+macro_rules! separate_provide_extern_decl {\n+    ([][$name:ident]) => {\n+        ()\n+    };\n+    ([(separate_provide_extern) $($rest:tt)*][$name:ident]) => {\n+        for<'tcx> fn(\n+            TyCtxt<'tcx>,\n+            query_keys::$name<'tcx>,\n+        ) -> query_values::$name<'tcx>\n+    };\n+    ([$other:tt $($modifiers:tt)*][$($args:tt)*]) => {\n+        separate_provide_extern_decl!([$($modifiers)*][$($args)*])\n+    };\n+}\n+\n+macro_rules! separate_provide_extern_default {\n+    ([][$name:ident]) => {\n+        ()\n+    };\n+    ([(separate_provide_extern) $($rest:tt)*][$name:ident]) => {\n+        |_, key| bug!(\n+            \"`tcx.{}({:?})` unsupported by its crate; \\\n+             perhaps the `{}` query was never assigned a provider function\",\n+            stringify!($name),\n+            key,\n+            stringify!($name),\n+        )\n+    };\n+    ([$other:tt $($modifiers:tt)*][$($args:tt)*]) => {\n+        separate_provide_extern_default!([$($modifiers)*][$($args)*])\n+    };\n+}\n+\n macro_rules! define_callbacks {\n     (<$tcx:tt>\n      $($(#[$attr:meta])*\n@@ -214,6 +247,10 @@ macro_rules! define_callbacks {\n             ) -> query_values::$name<'tcx>,)*\n         }\n \n+        pub struct ExternProviders {\n+            $(pub $name: separate_provide_extern_decl!([$($modifiers)*][$name]),)*\n+        }\n+\n         impl Default for Providers {\n             fn default() -> Self {\n                 Providers {\n@@ -228,11 +265,24 @@ macro_rules! define_callbacks {\n             }\n         }\n \n+        impl Default for ExternProviders {\n+            fn default() -> Self {\n+                ExternProviders {\n+                    $($name: separate_provide_extern_default!([$($modifiers)*][$name]),)*\n+                }\n+            }\n+        }\n+\n         impl Copy for Providers {}\n         impl Clone for Providers {\n             fn clone(&self) -> Self { *self }\n         }\n \n+        impl Copy for ExternProviders {}\n+        impl Clone for ExternProviders {\n+            fn clone(&self) -> Self { *self }\n+        }\n+\n         pub trait QueryEngine<'tcx>: rustc_data_structures::sync::Sync {\n             fn as_any(&'tcx self) -> &'tcx dyn std::any::Any;\n "}, {"sha": "9cd36a77b70ff1380249062ba6078f9f9bcecbf8", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5c3e83013700835cfd64215b482b8dffe1f71be/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c3e83013700835cfd64215b482b8dffe1f71be/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=f5c3e83013700835cfd64215b482b8dffe1f71be", "patch": "@@ -19,7 +19,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::{self, DepKindStruct, SerializedDepNodeIndex};\n use rustc_middle::ty::query::{query_keys, query_storage, query_stored, query_values};\n-use rustc_middle::ty::query::{Providers, QueryEngine};\n+use rustc_middle::ty::query::{ExternProviders, Providers, QueryEngine};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::Span;"}, {"sha": "81a36e0d59eff601769bb373d03bf3b047e62df1", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f5c3e83013700835cfd64215b482b8dffe1f71be/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c3e83013700835cfd64215b482b8dffe1f71be/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=f5c3e83013700835cfd64215b482b8dffe1f71be", "patch": "@@ -215,6 +215,22 @@ macro_rules! hash_result {\n     };\n }\n \n+macro_rules! get_provider {\n+    ([][$tcx:expr, $name:ident, $key:expr]) => {{\n+        $tcx.queries.local_providers.$name\n+    }};\n+    ([(separate_provide_extern) $($rest:tt)*][$tcx:expr, $name:ident, $key:expr]) => {{\n+        if $key.query_crate_is_local() {\n+            $tcx.queries.local_providers.$name\n+        } else {\n+            $tcx.queries.extern_providers.$name\n+        }\n+    }};\n+    ([$other:tt $($modifiers:tt)*][$($args:tt)*]) => {\n+        get_provider!([$($modifiers)*][$($args)*])\n+    };\n+}\n+\n macro_rules! define_queries {\n     (<$tcx:tt>\n      $($(#[$attr:meta])*\n@@ -310,11 +326,7 @@ macro_rules! define_queries {\n             fn make_vtable(tcx: QueryCtxt<'tcx>, key: &Self::Key) ->\n                 QueryVtable<QueryCtxt<$tcx>, Self::Key, Self::Value>\n             {\n-                let compute = if key.query_crate_is_local() {\n-                    tcx.queries.local_providers.$name\n-                } else {\n-                    tcx.queries.extern_providers.$name\n-                };\n+                let compute = get_provider!([$($modifiers)*][tcx, $name, key]);\n                 let cache_on_disk = Self::cache_on_disk(tcx.tcx, key);\n                 QueryVtable {\n                     anon: is_anon!([$($modifiers)*]),\n@@ -444,7 +456,7 @@ macro_rules! define_queries_struct {\n      input: ($(([$($modifiers:tt)*] [$($attr:tt)*] [$name:ident]))*)) => {\n         pub struct Queries<$tcx> {\n             local_providers: Box<Providers>,\n-            extern_providers: Box<Providers>,\n+            extern_providers: Box<ExternProviders>,\n \n             pub on_disk_cache: Option<OnDiskCache<$tcx>>,\n \n@@ -457,7 +469,7 @@ macro_rules! define_queries_struct {\n         impl<$tcx> Queries<$tcx> {\n             pub fn new(\n                 local_providers: Providers,\n-                extern_providers: Providers,\n+                extern_providers: ExternProviders,\n                 on_disk_cache: Option<OnDiskCache<$tcx>>,\n             ) -> Self {\n                 Queries {"}]}