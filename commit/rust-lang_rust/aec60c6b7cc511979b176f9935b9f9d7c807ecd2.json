{"sha": "aec60c6b7cc511979b176f9935b9f9d7c807ecd2", "node_id": "C_kwDOAAsO6NoAKGFlYzYwYzZiN2NjNTExOTc5YjE3NmY5OTM1YjlmOWQ3YzgwN2VjZDI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-25T17:35:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-25T17:35:40Z"}, "message": "Rollup merge of #104797 - weihanglo:stream-write-dwp, r=jackh726\n\nrustc_codegen_ssa: write `.dwp` in a streaming fashion\n\nWhen writing a `.dwp` file, rustc writes to a Vec first then to a BufWriter-wrapped file. It seems very likely that we can write in a streaming fashion to avoid double buffering in an intermediate Vec.\n\nOn my Linux machine, `.dwp` from the latest rust-lang/cargo is 113MiB. It may worth a stream writer, though I didn't do any benchmark \ud83d\ude47\ud83c\udffe\u200d\u2642\ufe0f.", "tree": {"sha": "85b4ce8626f991cf10c7793f8b768de49e62e8c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85b4ce8626f991cf10c7793f8b768de49e62e8c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aec60c6b7cc511979b176f9935b9f9d7c807ecd2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjgPzsCRBK7hj4Ov3rIwAA78gIAH1B1KSbykmGkwsVGJvBa6zz\nT9qszc8BVmfFy/6ItuWwvI0r+sEmDmxQn7ADKTBIqzOJ032qeKKExHWB+ttAFN7Y\nzpXBqe0RWgVfCplxxiyn35WxttJkKWf/o2/zU5Eve+i6caWH4v/UsR+rBKcDW6KZ\nmKAzH5CP3ka8LW2rMGYpStStfQ5D3D+xJWTO5JAhvSnsGPJ+mclln1oqi+UbWo6m\nwo3CgkoMjrnmar3sKiFj1J9pSRCO1U/0dCIGI/G4OaSDbNe6i16B5a17dy0Z8Nbm\n0f/6FfN3MrrSFIR0F9CXdBilKrj5yqHPWwQmowaN3/GM+QIfdv+X9q5NLvKcz74=\n=tB1R\n-----END PGP SIGNATURE-----\n", "payload": "tree 85b4ce8626f991cf10c7793f8b768de49e62e8c1\nparent 8f3f4980b4c9cf7b062b2c7638070e256381114f\nparent 433d471a1a06b5852c7f6b5d276725933d8ddce6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1669397740 +0100\ncommitter GitHub <noreply@github.com> 1669397740 +0100\n\nRollup merge of #104797 - weihanglo:stream-write-dwp, r=jackh726\n\nrustc_codegen_ssa: write `.dwp` in a streaming fashion\n\nWhen writing a `.dwp` file, rustc writes to a Vec first then to a BufWriter-wrapped file. It seems very likely that we can write in a streaming fashion to avoid double buffering in an intermediate Vec.\n\nOn my Linux machine, `.dwp` from the latest rust-lang/cargo is 113MiB. It may worth a stream writer, though I didn't do any benchmark \ud83d\ude47\ud83c\udffe\u200d\u2642\ufe0f.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aec60c6b7cc511979b176f9935b9f9d7c807ecd2", "html_url": "https://github.com/rust-lang/rust/commit/aec60c6b7cc511979b176f9935b9f9d7c807ecd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aec60c6b7cc511979b176f9935b9f9d7c807ecd2/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f3f4980b4c9cf7b062b2c7638070e256381114f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f3f4980b4c9cf7b062b2c7638070e256381114f", "html_url": "https://github.com/rust-lang/rust/commit/8f3f4980b4c9cf7b062b2c7638070e256381114f"}, {"sha": "433d471a1a06b5852c7f6b5d276725933d8ddce6", "url": "https://api.github.com/repos/rust-lang/rust/commits/433d471a1a06b5852c7f6b5d276725933d8ddce6", "html_url": "https://github.com/rust-lang/rust/commit/433d471a1a06b5852c7f6b5d276725933d8ddce6"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "762430c6187216b8ff2b66ee8832eef2a9c921e4", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aec60c6b7cc511979b176f9935b9f9d7c807ecd2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec60c6b7cc511979b176f9935b9f9d7c807ecd2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=aec60c6b7cc511979b176f9935b9f9d7c807ecd2", "patch": "@@ -676,17 +676,18 @@ fn link_dwarf_object<'a>(\n             thorin::MissingReferencedObjectBehaviour::Skip,\n         )?;\n \n-        let output = package.finish()?.write()?;\n-        let mut output_stream = BufWriter::new(\n+        let output_stream = BufWriter::new(\n             OpenOptions::new()\n                 .read(true)\n                 .write(true)\n                 .create(true)\n                 .truncate(true)\n                 .open(dwp_out_filename)?,\n         );\n-        output_stream.write_all(&output)?;\n-        output_stream.flush()?;\n+        let mut output_stream = object::write::StreamingBuffer::new(output_stream);\n+        package.finish()?.emit(&mut output_stream)?;\n+        output_stream.result()?;\n+        output_stream.into_inner().flush()?;\n \n         Ok(())\n     }) {"}]}