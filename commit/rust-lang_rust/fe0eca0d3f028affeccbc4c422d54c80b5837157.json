{"sha": "fe0eca0d3f028affeccbc4c422d54c80b5837157", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMGVjYTBkM2YwMjhhZmZlY2NiYzRjNDIyZDU0YzgwYjU4MzcxNTc=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-23T01:29:08Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-27T11:51:22Z"}, "message": "Change tools to take a compiler instead of a stage.", "tree": {"sha": "76cbdbb72dbdff14c8abfc31977f590d2f219428", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76cbdbb72dbdff14c8abfc31977f590d2f219428"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe0eca0d3f028affeccbc4c422d54c80b5837157", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe0eca0d3f028affeccbc4c422d54c80b5837157", "html_url": "https://github.com/rust-lang/rust/commit/fe0eca0d3f028affeccbc4c422d54c80b5837157", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe0eca0d3f028affeccbc4c422d54c80b5837157/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4240a4b2032e41943183b0c65c74fc64061be5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4240a4b2032e41943183b0c65c74fc64061be5b", "html_url": "https://github.com/rust-lang/rust/commit/f4240a4b2032e41943183b0c65c74fc64061be5b"}], "stats": {"total": 77, "additions": 40, "deletions": 37}, "files": [{"sha": "07b027ce5ab5c64a8d503eacfbbd5aec258f4bf8", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe0eca0d3f028affeccbc4c422d54c80b5837157/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe0eca0d3f028affeccbc4c422d54c80b5837157/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=fe0eca0d3f028affeccbc4c422d54c80b5837157", "patch": "@@ -194,7 +194,7 @@ impl Step for Cargo {\n         let build = builder.build;\n         let compiler = builder.compiler(self.stage, self.host);\n \n-        builder.ensure(tool::Cargo { stage: self.stage, target: self.host });\n+        builder.ensure(tool::Cargo { compiler, target: self.host });\n         let mut cargo = builder.cargo(compiler, Mode::Tool, self.host, \"test\");\n         cargo.arg(\"--manifest-path\").arg(build.src.join(\"src/tools/cargo/Cargo.toml\"));\n         if !build.fail_fast {\n@@ -240,7 +240,7 @@ impl Step for Rls {\n         let host = self.host;\n         let compiler = builder.compiler(stage, host);\n \n-        builder.ensure(tool::Rls { stage: self.stage, target: self.host });\n+        builder.ensure(tool::Rls { compiler, target: self.host });\n         let mut cargo = builder.cargo(compiler, Mode::Tool, host, \"test\");\n         cargo.arg(\"--manifest-path\").arg(build.src.join(\"src/tools/rls/Cargo.toml\"));\n \n@@ -1165,7 +1165,7 @@ impl Step for RemoteCopyLibs {\n         println!(\"REMOTE copy libs to emulator ({})\", target);\n         t!(fs::create_dir_all(build.out.join(\"tmp\")));\n \n-        let server = builder.ensure(tool::RemoteTestServer { stage: compiler.stage, target });\n+        let server = builder.ensure(tool::RemoteTestServer { compiler, target });\n \n         // Spawn the emulator and wait for it to come online\n         let tool = builder.tool_exe(Tool::RemoteTestClient);"}, {"sha": "e5ededbfec7db413bc099fb02aad3ed8108bbe3c", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fe0eca0d3f028affeccbc4c422d54c80b5837157/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe0eca0d3f028affeccbc4c422d54c80b5837157/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=fe0eca0d3f028affeccbc4c422d54c80b5837157", "patch": "@@ -963,7 +963,10 @@ impl Step for Cargo {\n         // Prepare the image directory\n         t!(fs::create_dir_all(image.join(\"share/zsh/site-functions\")));\n         t!(fs::create_dir_all(image.join(\"etc/bash_completion.d\")));\n-        let cargo = builder.ensure(tool::Cargo { stage, target });\n+        let cargo = builder.ensure(tool::Cargo {\n+            compiler: builder.compiler(stage, build.build),\n+            target\n+        });\n         install(&cargo, &image.join(\"bin\"), 0o755);\n         for man in t!(etc.join(\"man\").read_dir()) {\n             let man = t!(man);\n@@ -1046,7 +1049,10 @@ impl Step for Rls {\n         t!(fs::create_dir_all(&image));\n \n         // Prepare the image directory\n-        let rls = builder.ensure(tool::Rls { stage, target });\n+        let rls = builder.ensure(tool::Rls {\n+            compiler: builder.compiler(stage, build.build),\n+            target\n+        });\n         install(&rls, &image.join(\"bin\"), 0o755);\n         let doc = image.join(\"share/doc/rls\");\n         install(&src.join(\"README.md\"), &doc, 0o644);"}, {"sha": "f78792fc9b5927c6851bf0b85b13db447f2f0d7d", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 29, "deletions": 32, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/fe0eca0d3f028affeccbc4c422d54c80b5837157/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe0eca0d3f028affeccbc4c422d54c80b5837157/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=fe0eca0d3f028affeccbc4c422d54c80b5837157", "patch": "@@ -22,10 +22,10 @@ use channel::GitInfo;\n use cache::Interned;\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-pub struct CleanTools {\n-    pub stage: u32,\n-    pub target: Interned<String>,\n-    pub mode: Mode,\n+struct CleanTools {\n+    compiler: Compiler,\n+    target: Interned<String>,\n+    mode: Mode,\n }\n \n impl Step for CleanTools {\n@@ -41,12 +41,10 @@ impl Step for CleanTools {\n     /// `stage` into the normal cargo output directory.\n     fn run(self, builder: &Builder) {\n         let build = builder.build;\n-        let stage = self.stage;\n+        let compiler = self.compiler;\n         let target = self.target;\n         let mode = self.mode;\n \n-        let compiler = builder.compiler(stage, build.build);\n-\n         let stamp = match mode {\n             Mode::Libstd => libstd_stamp(build, compiler, target),\n             Mode::Libtest => libtest_stamp(build, compiler, target),\n@@ -59,11 +57,11 @@ impl Step for CleanTools {\n }\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-pub struct ToolBuild {\n-    pub stage: u32,\n-    pub target: Interned<String>,\n-    pub tool: &'static str,\n-    pub mode: Mode,\n+struct ToolBuild {\n+    compiler: Compiler,\n+    target: Interned<String>,\n+    tool: &'static str,\n+    mode: Mode,\n }\n \n impl Step for ToolBuild {\n@@ -79,21 +77,20 @@ impl Step for ToolBuild {\n     /// `stage` into the normal cargo output directory.\n     fn run(self, builder: &Builder) -> PathBuf {\n         let build = builder.build;\n-        let stage = self.stage;\n+        let compiler = self.compiler;\n         let target = self.target;\n         let tool = self.tool;\n \n-        let compiler = builder.compiler(stage, build.build);\n-        builder.ensure(CleanTools { stage, target, mode: self.mode });\n+        builder.ensure(CleanTools { compiler, target, mode: self.mode });\n         match self.mode {\n             Mode::Libstd => builder.ensure(compile::Std { compiler, target }),\n             Mode::Libtest => builder.ensure(compile::Test { compiler, target }),\n             Mode::Librustc => builder.ensure(compile::Rustc { compiler, target }),\n             Mode::Tool => panic!(\"unexpected Mode::Tool for tool build\")\n         }\n \n-        let _folder = build.fold_output(|| format!(\"stage{}-{}\", stage, tool));\n-        println!(\"Building stage{} tool {} ({})\", stage, tool, target);\n+        let _folder = build.fold_output(|| format!(\"stage{}-{}\", compiler.stage, tool));\n+        println!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target);\n \n         let mut cargo = builder.cargo(compiler, Mode::Tool, target, \"build\");\n         let dir = build.src.join(\"src/tools\").join(tool);\n@@ -141,7 +138,7 @@ macro_rules! tool {\n                 match tool {\n                     $(Tool::$name =>\n                         self.ensure($name {\n-                            stage: 0,\n+                            compiler: self.compiler(0, self.build.build),\n                             target: self.build.build,\n                         }),\n                     )+\n@@ -152,7 +149,7 @@ macro_rules! tool {\n         $(\n             #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n         pub struct $name {\n-            pub stage: u32,\n+            pub compiler: Compiler,\n             pub target: Interned<String>,\n         }\n \n@@ -165,14 +162,14 @@ macro_rules! tool {\n \n             fn make_run(run: RunConfig) {\n                 run.builder.ensure($name {\n-                    stage: run.builder.top_stage,\n+                    compiler: run.builder.compiler(run.builder.top_stage, run.builder.build.build),\n                     target: run.target,\n                 });\n             }\n \n             fn run(self, builder: &Builder) -> PathBuf {\n                 builder.ensure(ToolBuild {\n-                    stage: self.stage,\n+                    compiler: self.compiler,\n                     target: self.target,\n                     tool: $tool_name,\n                     mode: $mode,\n@@ -198,7 +195,7 @@ tool!(\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct RemoteTestServer {\n-    pub stage: u32,\n+    pub compiler: Compiler,\n     pub target: Interned<String>,\n }\n \n@@ -211,14 +208,14 @@ impl Step for RemoteTestServer {\n \n     fn make_run(run: RunConfig) {\n         run.builder.ensure(RemoteTestServer {\n-            stage: run.builder.top_stage,\n+            compiler: run.builder.compiler(run.builder.top_stage, run.builder.build.build),\n             target: run.target,\n         });\n     }\n \n     fn run(self, builder: &Builder) -> PathBuf {\n         builder.ensure(ToolBuild {\n-            stage: self.stage,\n+            compiler: self.compiler,\n             target: self.target,\n             tool: \"remote-test-server\",\n             mode: Mode::Libstd,\n@@ -228,7 +225,7 @@ impl Step for RemoteTestServer {\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Cargo {\n-    pub stage: u32,\n+    pub compiler: Compiler,\n     pub target: Interned<String>,\n }\n \n@@ -244,7 +241,7 @@ impl Step for Cargo {\n \n     fn make_run(run: RunConfig) {\n         run.builder.ensure(Cargo {\n-            stage: run.builder.top_stage,\n+            compiler: run.builder.compiler(run.builder.top_stage, run.builder.build.build),\n             target: run.target,\n         });\n     }\n@@ -256,11 +253,11 @@ impl Step for Cargo {\n         // Cargo depends on procedural macros, which requires a full host\n         // compiler to be available, so we need to depend on that.\n         builder.ensure(compile::Rustc {\n-            compiler: builder.compiler(self.stage, builder.build.build),\n+            compiler: self.compiler,\n             target: builder.build.build,\n         });\n         builder.ensure(ToolBuild {\n-            stage: self.stage,\n+            compiler: self.compiler,\n             target: self.target,\n             tool: \"cargo\",\n             mode: Mode::Librustc,\n@@ -270,7 +267,7 @@ impl Step for Cargo {\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Rls {\n-    pub stage: u32,\n+    pub compiler: Compiler,\n     pub target: Interned<String>,\n }\n \n@@ -286,7 +283,7 @@ impl Step for Rls {\n \n     fn make_run(run: RunConfig) {\n         run.builder.ensure(Rls {\n-            stage: run.builder.top_stage,\n+            compiler: run.builder.compiler(run.builder.top_stage, run.builder.build.build),\n             target: run.target,\n         });\n     }\n@@ -298,11 +295,11 @@ impl Step for Rls {\n         // RLS depends on procedural macros, which requires a full host\n         // compiler to be available, so we need to depend on that.\n         builder.ensure(compile::Rustc {\n-            compiler: builder.compiler(self.stage, builder.build.build),\n+            compiler: self.compiler,\n             target: builder.build.build,\n         });\n         builder.ensure(ToolBuild {\n-            stage: self.stage,\n+            compiler: self.compiler,\n             target: self.target,\n             tool: \"rls\",\n             mode: Mode::Librustc,"}]}