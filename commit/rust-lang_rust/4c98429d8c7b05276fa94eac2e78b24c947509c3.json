{"sha": "4c98429d8c7b05276fa94eac2e78b24c947509c3", "node_id": "C_kwDOAAsO6NoAKDRjOTg0MjlkOGM3YjA1Mjc2ZmE5NGVhYzJlNzhiMjRjOTQ3NTA5YzM", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-02-10T14:46:08Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-02-10T14:56:28Z"}, "message": "Add tests", "tree": {"sha": "fc9fb502f59cd9cb53ac7db102991881f6d27461", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc9fb502f59cd9cb53ac7db102991881f6d27461"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c98429d8c7b05276fa94eac2e78b24c947509c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c98429d8c7b05276fa94eac2e78b24c947509c3", "html_url": "https://github.com/rust-lang/rust/commit/4c98429d8c7b05276fa94eac2e78b24c947509c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c98429d8c7b05276fa94eac2e78b24c947509c3/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa83c10e96bc7eecf2c01a87fa802ee70b42344c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa83c10e96bc7eecf2c01a87fa802ee70b42344c", "html_url": "https://github.com/rust-lang/rust/commit/fa83c10e96bc7eecf2c01a87fa802ee70b42344c"}], "stats": {"total": 188, "additions": 188, "deletions": 0}, "files": [{"sha": "dc726ba51f94ffd18ab92635dfd134784f90d89f", "filename": "tests/ui/traits/new-solver/alias_eq_cant_be_furthur_normalized.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4c98429d8c7b05276fa94eac2e78b24c947509c3/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_cant_be_furthur_normalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c98429d8c7b05276fa94eac2e78b24c947509c3/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_cant_be_furthur_normalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_cant_be_furthur_normalized.rs?ref=4c98429d8c7b05276fa94eac2e78b24c947509c3", "patch": "@@ -0,0 +1,29 @@\n+// check-pass\n+// compile-flags: -Ztrait-solver=next\n+\n+// check that a goal such as `alias-eq(<T as TraitB>::Assoc<bool>, <T as TraitB>::Assoc<?0>)`\n+// succeeds with a constraint that `?0 = bool`\n+\n+// FIXME(deferred_projection_equality): add a test that this is true during coherence\n+\n+trait TraitA {}\n+\n+trait TraitB {\n+    type Assoc<T: ?Sized>;\n+}\n+\n+impl<T: TraitB> TraitA for (T, T::Assoc<bool>) {}\n+\n+impl TraitB for i32 {\n+    type Assoc<T: ?Sized> = u32;\n+}\n+\n+fn needs_a<T: TraitA>() {}\n+\n+fn bar<T: TraitB>() {\n+    needs_a::<(T, <T as TraitB>::Assoc<_>)>();\n+}\n+\n+fn main() {\n+    bar::<i32>();\n+}"}, {"sha": "fd5d0e3b1946e64442ccf44bb0f3d1f7b8465a28", "filename": "tests/ui/traits/new-solver/alias_eq_dont_use_normalizes_to_if_substs_eq.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4c98429d8c7b05276fa94eac2e78b24c947509c3/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_dont_use_normalizes_to_if_substs_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c98429d8c7b05276fa94eac2e78b24c947509c3/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_dont_use_normalizes_to_if_substs_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_dont_use_normalizes_to_if_substs_eq.rs?ref=4c98429d8c7b05276fa94eac2e78b24c947509c3", "patch": "@@ -0,0 +1,45 @@\n+// compile-flags: -Ztrait-solver=next\n+\n+// check that when computing `alias-eq(<() as Foo<u16, T>>::Assoc, <() as Foo<?0, T>>::Assoc)`\n+//  we do not infer `?0 = u8` via the `for<STOP> (): Foo<u8, STOP>` impl or `?0 = u16` by\n+// relating substs as either could be a valid solution.\n+\n+trait Foo<T, STOP> {\n+    type Assoc;\n+}\n+\n+impl<STOP> Foo<u8, STOP> for ()\n+where\n+    (): Foo<u16, STOP>,\n+{\n+    type Assoc = <() as Foo<u16, STOP>>::Assoc;\n+}\n+\n+impl Foo<u16, i8> for () {\n+    type Assoc = u8;\n+}\n+\n+impl Foo<u16, i16> for () {\n+    type Assoc = u16;\n+}\n+\n+fn output<T, U>() -> <() as Foo<T, U>>::Assoc\n+where\n+    (): Foo<T, U>,\n+{\n+    todo!()\n+}\n+\n+fn incomplete<T>()\n+where\n+    (): Foo<u16, T>,\n+{\n+    // `<() as Foo<u16, STOP>>::Assoc == <() as Foo<_, STOP>>::Assoc`\n+    let _: <() as Foo<u16, T>>::Assoc = output::<_, T>();\n+    //~^ error: type annotations needed\n+\n+    // let _: <() as Foo<u16, T>>::Assoc = output::<u8, T>(); // OK\n+    // let _: <() as Foo<u16, T>>::Assoc = output::<u16, T>(); // OK\n+}\n+\n+fn main() {}"}, {"sha": "a6712332c37c5e1abdf48b0eb325105fa7db981d", "filename": "tests/ui/traits/new-solver/alias_eq_dont_use_normalizes_to_if_substs_eq.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c98429d8c7b05276fa94eac2e78b24c947509c3/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_dont_use_normalizes_to_if_substs_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c98429d8c7b05276fa94eac2e78b24c947509c3/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_dont_use_normalizes_to_if_substs_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_dont_use_normalizes_to_if_substs_eq.stderr?ref=4c98429d8c7b05276fa94eac2e78b24c947509c3", "patch": "@@ -0,0 +1,9 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/alias_eq_dont_use_normalizes_to_if_substs_eq.rs:38:41\n+   |\n+LL |     let _: <() as Foo<u16, T>>::Assoc = output::<_, T>();\n+   |                                         ^^^^^^^^^^^^^^ cannot infer type of the type parameter `T` declared on the function `output`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "6792cf3ce35ab17c35bb37ce72148bb390473b3f", "filename": "tests/ui/traits/new-solver/alias_eq_simple.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4c98429d8c7b05276fa94eac2e78b24c947509c3/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c98429d8c7b05276fa94eac2e78b24c947509c3/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_simple.rs?ref=4c98429d8c7b05276fa94eac2e78b24c947509c3", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+// compile-flags: -Ztrait-solver=next\n+\n+// test that the new solver can handle `alias-eq(<i32 as TraitB>::Assoc, u32)`\n+\n+trait TraitA {}\n+\n+trait TraitB {\n+    type Assoc;\n+}\n+\n+impl<T: TraitB> TraitA for (T, T::Assoc) {}\n+\n+impl TraitB for i32 {\n+    type Assoc = u32;\n+}\n+\n+fn needs_a<T: TraitA>() {}\n+\n+fn main() {\n+    needs_a::<(i32, u32)>();\n+}"}, {"sha": "d4cc380fa211b1c87c8750cf4039e90650106eaf", "filename": "tests/ui/traits/new-solver/alias_eq_substs_eq_not_intercrate.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4c98429d8c7b05276fa94eac2e78b24c947509c3/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_substs_eq_not_intercrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c98429d8c7b05276fa94eac2e78b24c947509c3/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_substs_eq_not_intercrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_substs_eq_not_intercrate.rs?ref=4c98429d8c7b05276fa94eac2e78b24c947509c3", "patch": "@@ -0,0 +1,20 @@\n+// compile-flags: -Ztrait-solver=next\n+\n+// check that a `alias-eq(<?0 as TraitB>::Assoc, <T as TraitB>::Assoc)` goal fails.\n+\n+// FIXME(deferred_projection_equality): add a test that this is true during coherence\n+\n+trait TraitB {\n+    type Assoc;\n+}\n+\n+fn needs_a<T: TraitB>() -> T::Assoc {\n+    unimplemented!()\n+}\n+\n+fn bar<T: TraitB>() {\n+    let _: <_ as TraitB>::Assoc = needs_a::<T>();\n+    //~^ error: type annotations needed\n+}\n+\n+fn main() {}"}, {"sha": "d063d8fce111cf08d1053c5f22db38b268d48a9a", "filename": "tests/ui/traits/new-solver/alias_eq_substs_eq_not_intercrate.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c98429d8c7b05276fa94eac2e78b24c947509c3/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_substs_eq_not_intercrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c98429d8c7b05276fa94eac2e78b24c947509c3/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_substs_eq_not_intercrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Falias_eq_substs_eq_not_intercrate.stderr?ref=4c98429d8c7b05276fa94eac2e78b24c947509c3", "patch": "@@ -0,0 +1,9 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/alias_eq_substs_eq_not_intercrate.rs:16:12\n+   |\n+LL |     let _: <_ as TraitB>::Assoc = needs_a::<T>();\n+   |            ^^^^^^^^^^^^^^^^^^^^ cannot infer type for associated type `<_ as TraitB>::Assoc`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "46343241b452868d4c917757f426bab69964d013", "filename": "tests/ui/traits/new-solver/normalizes_to_ignores_unnormalizable_candidate.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4c98429d8c7b05276fa94eac2e78b24c947509c3/tests%2Fui%2Ftraits%2Fnew-solver%2Fnormalizes_to_ignores_unnormalizable_candidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c98429d8c7b05276fa94eac2e78b24c947509c3/tests%2Fui%2Ftraits%2Fnew-solver%2Fnormalizes_to_ignores_unnormalizable_candidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fnormalizes_to_ignores_unnormalizable_candidate.rs?ref=4c98429d8c7b05276fa94eac2e78b24c947509c3", "patch": "@@ -0,0 +1,40 @@\n+// [no_self_infer] check-pass\n+// compile-flags: -Ztrait-solver=next\n+// revisions: self_infer no_self_infer\n+\n+// checks that the new solver is smart enough to infer `?0 = U` when solving:\n+// `normalizes-to(<Vec<?0> as Trait>::Assoc, u8)`\n+// with `normalizes-to(<Vec<U> as Trait>::Assoc, u8)` in the paramenv even when\n+// there is a separate `Vec<T>: Trait` bound  in the paramenv.\n+//\n+// FIXME(-Ztrait-solver=next)\n+// This could also compile for `normalizes-to(<?0 as Trait>::Assoc, u8)` but\n+// we currently immediately consider a goal ambiguous if the self type is an\n+// inference variable.\n+\n+trait Trait {\n+    type Assoc;\n+}\n+\n+fn foo<T: Trait<Assoc = u8>>(x: T) {}\n+\n+#[cfg(self_infer)]\n+fn unconstrained<T>() -> T {\n+    todo!()\n+}\n+\n+#[cfg(no_self_infer)]\n+fn unconstrained<T>() -> Vec<T> {\n+    todo!()\n+}\n+\n+fn bar<T, U>()\n+where\n+    Vec<T>: Trait,\n+    Vec<U>: Trait<Assoc = u8>,\n+{\n+    foo(unconstrained())\n+    //[self_infer]~^ ERROR type annotations needed\n+}\n+\n+fn main() {}"}, {"sha": "06283201261042a14e48ab314412fb75787c45a5", "filename": "tests/ui/traits/new-solver/normalizes_to_ignores_unnormalizable_candidate.self_infer.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4c98429d8c7b05276fa94eac2e78b24c947509c3/tests%2Fui%2Ftraits%2Fnew-solver%2Fnormalizes_to_ignores_unnormalizable_candidate.self_infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c98429d8c7b05276fa94eac2e78b24c947509c3/tests%2Fui%2Ftraits%2Fnew-solver%2Fnormalizes_to_ignores_unnormalizable_candidate.self_infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fnormalizes_to_ignores_unnormalizable_candidate.self_infer.stderr?ref=4c98429d8c7b05276fa94eac2e78b24c947509c3", "patch": "@@ -0,0 +1,14 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/normalizes_to_ignores_unnormalizable_candidate.rs:36:5\n+   |\n+LL |     foo(unconstrained())\n+   |     ^^^ cannot infer type of the type parameter `T` declared on the function `foo`\n+   |\n+help: consider specifying the generic argument\n+   |\n+LL |     foo::<T>(unconstrained())\n+   |        +++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}]}