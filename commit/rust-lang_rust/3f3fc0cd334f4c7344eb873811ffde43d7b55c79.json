{"sha": "3f3fc0cd334f4c7344eb873811ffde43d7b55c79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmM2ZjMGNkMzM0ZjRjNzM0NGViODczODExZmZkZTQzZDdiNTVjNzk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-06T21:30:41Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-06T21:30:41Z"}, "message": "rollup merge of #18615 : huonw/simd", "tree": {"sha": "771522bc6db9145cbfb40489f07ad6560be9ffbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/771522bc6db9145cbfb40489f07ad6560be9ffbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f3fc0cd334f4c7344eb873811ffde43d7b55c79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f3fc0cd334f4c7344eb873811ffde43d7b55c79", "html_url": "https://github.com/rust-lang/rust/commit/3f3fc0cd334f4c7344eb873811ffde43d7b55c79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f3fc0cd334f4c7344eb873811ffde43d7b55c79/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b747f7039401e95305abeb3b0c5be7d69a8fdfdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b747f7039401e95305abeb3b0c5be7d69a8fdfdc", "html_url": "https://github.com/rust-lang/rust/commit/b747f7039401e95305abeb3b0c5be7d69a8fdfdc"}, {"sha": "071c4110457358f5b91287a63fb782201f5eb7ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/071c4110457358f5b91287a63fb782201f5eb7ad", "html_url": "https://github.com/rust-lang/rust/commit/071c4110457358f5b91287a63fb782201f5eb7ad"}], "stats": {"total": 37, "additions": 29, "deletions": 8}, "files": [{"sha": "399be73329bd51d4371f5fa88c65ec2d2688fdf9", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3f3fc0cd334f4c7344eb873811ffde43d7b55c79/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f3fc0cd334f4c7344eb873811ffde43d7b55c79/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=3f3fc0cd334f4c7344eb873811ffde43d7b55c79", "patch": "@@ -1461,14 +1461,35 @@ pub fn trans_adt<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         None => {}\n     };\n \n-    // Now, we just overwrite the fields we've explicitly specified\n-    for &(i, ref e) in fields.iter() {\n-        let dest = adt::trans_field_ptr(bcx, &*repr, addr, discr, i);\n-        let e_ty = expr_ty_adjusted(bcx, &**e);\n-        bcx = trans_into(bcx, &**e, SaveIn(dest));\n-        let scope = cleanup::CustomScope(custom_cleanup_scope);\n-        fcx.schedule_lifetime_end(scope, dest);\n-        fcx.schedule_drop_mem(scope, dest, e_ty);\n+    if ty::type_is_simd(bcx.tcx(), ty) {\n+        // This is the constructor of a SIMD type, such types are\n+        // always primitive machine types and so do not have a\n+        // destructor or require any clean-up.\n+        let llty = type_of::type_of(bcx.ccx(), ty);\n+\n+        // keep a vector as a register, and running through the field\n+        // `insertelement`ing them directly into that register\n+        // (i.e. avoid GEPi and `store`s to an alloca) .\n+        let mut vec_val = C_undef(llty);\n+\n+        for &(i, ref e) in fields.iter() {\n+            let block_datum = trans(bcx, &**e);\n+            bcx = block_datum.bcx;\n+            let position = C_uint(bcx.ccx(), i);\n+            let value = block_datum.datum.to_llscalarish(bcx);\n+            vec_val = InsertElement(bcx, vec_val, value, position);\n+        }\n+        Store(bcx, vec_val, addr);\n+    } else {\n+        // Now, we just overwrite the fields we've explicitly specified\n+        for &(i, ref e) in fields.iter() {\n+            let dest = adt::trans_field_ptr(bcx, &*repr, addr, discr, i);\n+            let e_ty = expr_ty_adjusted(bcx, &**e);\n+            bcx = trans_into(bcx, &**e, SaveIn(dest));\n+            let scope = cleanup::CustomScope(custom_cleanup_scope);\n+            fcx.schedule_lifetime_end(scope, dest);\n+            fcx.schedule_drop_mem(scope, dest, e_ty);\n+        }\n     }\n \n     adt::trans_set_discr(bcx, &*repr, addr, discr);"}]}