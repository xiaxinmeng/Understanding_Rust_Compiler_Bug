{"sha": "ad8e6bf5ccc60c558dc6ccedb548013d82f6aa8d", "node_id": "C_kwDOAAsO6NoAKGFkOGU2YmY1Y2NjNjBjNTU4ZGM2Y2NlZGI1NDgwMTNkODJmNmFhOGQ", "commit": {"author": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-11-14T05:36:19Z"}, "committer": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-11-28T06:01:47Z"}, "message": "Stabilize some `MaybeUninit` behavior as const", "tree": {"sha": "50f44f204d690c8c0f5451458a93cc37fa2debed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50f44f204d690c8c0f5451458a93cc37fa2debed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad8e6bf5ccc60c558dc6ccedb548013d82f6aa8d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQTgxeqBxcDGar1sVhy4DhnkZitapAUCYaMbSwAKCRC4DhnkZita\npDw2AP0bAGJcPxQnv3zdn4bhUjyLABTootsiMRzUWhD9Z8vAJgEA6sh1uq4tMBbk\ncV34RQ5LxPmGqXXIYx3oja7MHSzdOg8=\n=XqTd\n-----END PGP SIGNATURE-----", "payload": "tree 50f44f204d690c8c0f5451458a93cc37fa2debed\nparent 4919988fe1765e51232558647f2260fff3544658\nauthor Jacob Pratt <jacob@jhpratt.dev> 1636868179 -0500\ncommitter Jacob Pratt <jacob@jhpratt.dev> 1638079307 -0500\n\nStabilize some `MaybeUninit` behavior as const\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad8e6bf5ccc60c558dc6ccedb548013d82f6aa8d", "html_url": "https://github.com/rust-lang/rust/commit/ad8e6bf5ccc60c558dc6ccedb548013d82f6aa8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad8e6bf5ccc60c558dc6ccedb548013d82f6aa8d/comments", "author": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4919988fe1765e51232558647f2260fff3544658", "url": "https://api.github.com/repos/rust-lang/rust/commits/4919988fe1765e51232558647f2260fff3544658", "html_url": "https://github.com/rust-lang/rust/commit/4919988fe1765e51232558647f2260fff3544658"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "23b28766d70ea78cae57724116f9f61de749f3c2", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad8e6bf5ccc60c558dc6ccedb548013d82f6aa8d/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8e6bf5ccc60c558dc6ccedb548013d82f6aa8d/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=ad8e6bf5ccc60c558dc6ccedb548013d82f6aa8d", "patch": "@@ -853,7 +853,7 @@ extern \"rust-intrinsic\" {\n     /// This will statically either panic, or do nothing.\n     ///\n     /// This intrinsic does not have a stable counterpart.\n-    #[rustc_const_unstable(feature = \"const_assert_type\", issue = \"none\")]\n+    #[rustc_const_stable(feature = \"const_assert_type\", since = \"1.59.0\")]\n     pub fn assert_inhabited<T>();\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` does not permit"}, {"sha": "102e6f89eb82a52db3d87322e1754db978433c61", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad8e6bf5ccc60c558dc6ccedb548013d82f6aa8d/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8e6bf5ccc60c558dc6ccedb548013d82f6aa8d/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=ad8e6bf5ccc60c558dc6ccedb548013d82f6aa8d", "patch": "@@ -101,7 +101,6 @@\n #![feature(const_align_of_val)]\n #![feature(const_alloc_layout)]\n #![feature(const_arguments_as_str)]\n-#![feature(const_assert_type)]\n #![feature(const_bigint_helper_methods)]\n #![feature(const_caller_location)]\n #![feature(const_cell_into_inner)]\n@@ -117,7 +116,7 @@\n #![feature(const_intrinsic_copy)]\n #![feature(const_intrinsic_forget)]\n #![feature(const_likely)]\n-#![feature(const_maybe_uninit_as_ptr)]\n+#![feature(const_maybe_uninit_as_mut_ptr)]\n #![feature(const_maybe_uninit_assume_init)]\n #![feature(const_num_from_num)]\n #![feature(const_ops)]"}, {"sha": "a6e31452edcfcc04840919f325bb18cf1b33bce9", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ad8e6bf5ccc60c558dc6ccedb548013d82f6aa8d/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad8e6bf5ccc60c558dc6ccedb548013d82f6aa8d/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=ad8e6bf5ccc60c558dc6ccedb548013d82f6aa8d", "patch": "@@ -528,7 +528,7 @@ impl<T> MaybeUninit<T> {\n     /// (Notice that the rules around references to uninitialized data are not finalized yet, but\n     /// until they are, it is advisable to avoid them.)\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n-    #[rustc_const_unstable(feature = \"const_maybe_uninit_as_ptr\", issue = \"75251\")]\n+    #[rustc_const_stable(feature = \"const_maybe_uninit_as_ptr\", since = \"1.59.0\")]\n     #[inline(always)]\n     pub const fn as_ptr(&self) -> *const T {\n         // `MaybeUninit` and `ManuallyDrop` are both `repr(transparent)` so we can cast the pointer.\n@@ -567,7 +567,7 @@ impl<T> MaybeUninit<T> {\n     /// (Notice that the rules around references to uninitialized data are not finalized yet, but\n     /// until they are, it is advisable to avoid them.)\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n-    #[rustc_const_unstable(feature = \"const_maybe_uninit_as_ptr\", issue = \"75251\")]\n+    #[rustc_const_unstable(feature = \"const_maybe_uninit_as_mut_ptr\", issue = \"75251\")]\n     #[inline(always)]\n     pub const fn as_mut_ptr(&mut self) -> *mut T {\n         // `MaybeUninit` and `ManuallyDrop` are both `repr(transparent)` so we can cast the pointer.\n@@ -620,7 +620,7 @@ impl<T> MaybeUninit<T> {\n     /// // `x` had not been initialized yet, so this last line caused undefined behavior. \u26a0\ufe0f\n     /// ```\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n-    #[rustc_const_unstable(feature = \"const_maybe_uninit_assume_init\", issue = \"none\")]\n+    #[rustc_const_stable(feature = \"const_maybe_uninit_assume_init\", since = \"1.59.0\")]\n     #[inline(always)]\n     #[rustc_diagnostic_item = \"assume_init\"]\n     #[track_caller]\n@@ -788,7 +788,8 @@ impl<T> MaybeUninit<T> {\n     /// }\n     /// ```\n     #[stable(feature = \"maybe_uninit_ref\", since = \"1.55.0\")]\n-    #[rustc_const_unstable(feature = \"const_maybe_uninit_assume_init\", issue = \"none\")]\n+    #[rustc_const_stable(feature = \"const_maybe_uninit_assume_init\", since = \"1.59.0\")]\n+    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_raw_ptr_deref))]\n     #[inline(always)]\n     pub const unsafe fn assume_init_ref(&self) -> &T {\n         // SAFETY: the caller must guarantee that `self` is initialized.\n@@ -968,7 +969,7 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// [`assume_init_ref`]: MaybeUninit::assume_init_ref\n     #[unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n-    #[rustc_const_unstable(feature = \"const_maybe_uninit_assume_init\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n     #[inline(always)]\n     pub const unsafe fn slice_assume_init_ref(slice: &[Self]) -> &[T] {\n         // SAFETY: casting slice to a `*const [T]` is safe since the caller guarantees that"}]}