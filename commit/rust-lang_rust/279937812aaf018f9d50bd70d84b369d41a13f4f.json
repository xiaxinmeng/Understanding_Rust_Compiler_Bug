{"sha": "279937812aaf018f9d50bd70d84b369d41a13f4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3OTkzNzgxMmFhZjAxOGY5ZDUwYmQ3MGQ4NGIzNjlkNDFhMTNmNGY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-30T11:50:04Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-12-01T17:53:25Z"}, "message": "rustc_plugin: Remove support for plugins adding LLVM passes", "tree": {"sha": "d5ce0d781883a15cf96f9e46a8490a7c77cda9bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5ce0d781883a15cf96f9e46a8490a7c77cda9bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/279937812aaf018f9d50bd70d84b369d41a13f4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/279937812aaf018f9d50bd70d84b369d41a13f4f", "html_url": "https://github.com/rust-lang/rust/commit/279937812aaf018f9d50bd70d84b369d41a13f4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/279937812aaf018f9d50bd70d84b369d41a13f4f/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf1ffb0355e608453acc9803d6f317c16011d517", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf1ffb0355e608453acc9803d6f317c16011d517", "html_url": "https://github.com/rust-lang/rust/commit/cf1ffb0355e608453acc9803d6f317c16011d517"}], "stats": {"total": 84, "additions": 5, "deletions": 79}, "files": [{"sha": "f673ea3e771c544566b77c0b51d6dd7168cad9f0", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/279937812aaf018f9d50bd70d84b369d41a13f4f/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279937812aaf018f9d50bd70d84b369d41a13f4f/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=279937812aaf018f9d50bd70d84b369d41a13f4f", "patch": "@@ -76,7 +76,6 @@ pub struct Session {\n     /// (sub)diagnostics that have been set once, but should not be set again,\n     /// in order to avoid redundantly verbose output (Issue #24690, #44953).\n     pub one_time_diagnostics: Lock<FxHashSet<(DiagnosticMessageId, Option<Span>, String)>>,\n-    pub plugin_llvm_passes: OneThread<RefCell<Vec<String>>>,\n     pub crate_types: Once<Vec<config::CrateType>>,\n     /// The `crate_disambiguator` is constructed out of all the `-C metadata`\n     /// arguments passed to the compiler. Its value together with the crate-name\n@@ -1149,7 +1148,6 @@ fn build_session_(\n         local_crate_source_file,\n         working_dir,\n         one_time_diagnostics: Default::default(),\n-        plugin_llvm_passes: OneThread::new(RefCell::new(Vec::new())),\n         crate_types: Once::new(),\n         crate_disambiguator: Once::new(),\n         features: Once::new(),"}, {"sha": "07ac76cec990b85a2e5908f6e219aab910aaba5e", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/279937812aaf018f9d50bd70d84b369d41a13f4f/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279937812aaf018f9d50bd70d84b369d41a13f4f/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=279937812aaf018f9d50bd70d84b369d41a13f4f", "patch": "@@ -365,20 +365,6 @@ pub(crate) unsafe fn optimize(cgcx: &CodegenContext<LlvmCodegenBackend>,\n \n             add_sanitizer_passes(config, &mut extra_passes);\n \n-            for pass_name in &cgcx.plugin_passes {\n-                if let Some(pass) = find_pass(pass_name) {\n-                    extra_passes.push(pass);\n-                } else {\n-                    diag_handler.err(&format!(\"a plugin asked for LLVM pass \\\n-                                               `{}` but LLVM does not \\\n-                                               recognize it\", pass_name));\n-                }\n-\n-                if pass_name == \"name-anon-globals\" {\n-                    have_name_anon_globals_pass = true;\n-                }\n-            }\n-\n             // Some options cause LLVM bitcode to be emitted, which uses ThinLTOBuffers, so we need\n             // to make sure we run LLVM's NameAnonGlobals pass when emitting bitcode; otherwise\n             // we'll get errors in LLVM."}, {"sha": "863b41ec15ec07cfaa1613e577620c5589374329", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/279937812aaf018f9d50bd70d84b369d41a13f4f/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279937812aaf018f9d50bd70d84b369d41a13f4f/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=279937812aaf018f9d50bd70d84b369d41a13f4f", "patch": "@@ -231,8 +231,6 @@ pub struct CodegenContext<B: WriteBackendMethods> {\n     pub total_cgus: usize,\n     // Handler to use for diagnostics produced during codegen.\n     pub diag_emitter: SharedEmitter,\n-    // LLVM passes added by plugins.\n-    pub plugin_passes: Vec<String>,\n     // LLVM optimizations for which we want to print remarks.\n     pub remark: Passes,\n     // Worker thread number\n@@ -1028,7 +1026,6 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         time_passes: sess.time_extended(),\n         prof: sess.prof.clone(),\n         exported_symbols,\n-        plugin_passes: sess.plugin_llvm_passes.borrow().clone(),\n         remark: sess.opts.cg.remark.clone(),\n         worker: 0,\n         incr_comp_session_dir: sess.incr_comp_session_dir_opt().map(|r| r.clone()),"}, {"sha": "7ed1d12666fca4574e9698d4591d6883736151a2", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/279937812aaf018f9d50bd70d84b369d41a13f4f/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279937812aaf018f9d50bd70d84b369d41a13f4f/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=279937812aaf018f9d50bd70d84b369d41a13f4f", "patch": "@@ -208,27 +208,22 @@ pub fn register_plugins<'a>(\n         middle::recursion_limit::update_limits(sess, &krate);\n     });\n \n-    let registrars = time(sess, \"plugin loading\", || {\n-        plugin::load::load_plugins(sess, metadata_loader, &krate)\n-    });\n-\n     let mut lint_store = rustc_lint::new_lint_store(\n         sess.opts.debugging_opts.no_interleave_lints,\n         sess.unstable_options(),\n     );\n+    register_lints(&sess, &mut lint_store);\n \n-    (register_lints)(&sess, &mut lint_store);\n-\n-    let mut registry = Registry::new(sess, &mut lint_store, krate.span);\n-\n+    let registrars = time(sess, \"plugin loading\", || {\n+        plugin::load::load_plugins(sess, metadata_loader, &krate)\n+    });\n     time(sess, \"plugin registration\", || {\n+        let mut registry = Registry::new(sess, &mut lint_store, krate.span);\n         for registrar in registrars {\n             registrar(&mut registry);\n         }\n     });\n \n-    *sess.plugin_llvm_passes.borrow_mut() = registry.llvm_passes;\n-\n     Ok((krate, Lrc::new(lint_store)))\n }\n "}, {"sha": "fb749050756c730d26b8e36ee55c1cd939c7f901", "filename": "src/librustc_plugin_impl/registry.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/279937812aaf018f9d50bd70d84b369d41a13f4f/src%2Flibrustc_plugin_impl%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279937812aaf018f9d50bd70d84b369d41a13f4f/src%2Flibrustc_plugin_impl%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2Fregistry.rs?ref=279937812aaf018f9d50bd70d84b369d41a13f4f", "patch": "@@ -4,8 +4,6 @@ use rustc::lint::LintStore;\n use rustc::session::Session;\n use syntax_pos::Span;\n \n-use std::borrow::ToOwned;\n-\n /// Structure used to register plugins.\n ///\n /// A plugin registrar function takes an `&mut Registry` and should call\n@@ -24,9 +22,6 @@ pub struct Registry<'a> {\n \n     #[doc(hidden)]\n     pub krate_span: Span,\n-\n-    #[doc(hidden)]\n-    pub llvm_passes: Vec<String>,\n }\n \n impl<'a> Registry<'a> {\n@@ -36,16 +31,6 @@ impl<'a> Registry<'a> {\n             sess,\n             lint_store,\n             krate_span,\n-            llvm_passes: vec![],\n         }\n     }\n-\n-    /// Register an LLVM pass.\n-    ///\n-    /// Registration with LLVM itself is handled through static C++ objects with\n-    /// constructors. This method simply adds a name to the list of passes to\n-    /// execute.\n-    pub fn register_llvm_pass(&mut self, name: &str) {\n-        self.llvm_passes.push(name.to_owned());\n-    }\n }"}, {"sha": "2ff1c2e363d50c86ddeb3c3cdf4f529dea716c82", "filename": "src/test/ui-fulldeps/auxiliary/llvm-pass-plugin.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cf1ffb0355e608453acc9803d6f317c16011d517/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fllvm-pass-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf1ffb0355e608453acc9803d6f317c16011d517/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fllvm-pass-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fllvm-pass-plugin.rs?ref=cf1ffb0355e608453acc9803d6f317c16011d517", "patch": "@@ -1,19 +0,0 @@\n-// force-host\n-\n-#![feature(plugin_registrar)]\n-#![feature(rustc_private)]\n-\n-extern crate rustc;\n-extern crate rustc_driver;\n-\n-use rustc_driver::plugin::Registry;\n-\n-#[plugin_registrar]\n-pub fn plugin_registrar(reg: &mut Registry) {\n-    // This pass is built in to LLVM.\n-    //\n-    // Normally, we would name a pass that was registered through\n-    // C++ static object constructors in the same .so file as the\n-    // plugin registrar.\n-    reg.register_llvm_pass(\"gvn\");\n-}"}, {"sha": "fa5cbc1e808300b929c3f1ef90a3016be93ad839", "filename": "src/test/ui-fulldeps/llvm-pass-plugin.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf1ffb0355e608453acc9803d6f317c16011d517/src%2Ftest%2Fui-fulldeps%2Fllvm-pass-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf1ffb0355e608453acc9803d6f317c16011d517/src%2Ftest%2Fui-fulldeps%2Fllvm-pass-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fllvm-pass-plugin.rs?ref=cf1ffb0355e608453acc9803d6f317c16011d517", "patch": "@@ -1,8 +0,0 @@\n-// run-pass\n-// aux-build:llvm-pass-plugin.rs\n-// ignore-stage1\n-\n-#![feature(plugin)]\n-#![plugin(llvm_pass_plugin)] //~ WARNING compiler plugins are deprecated\n-\n-pub fn main() { }"}, {"sha": "61b53bb2b7cdfc0645349f17b1094510a4c6db2d", "filename": "src/test/ui-fulldeps/llvm-pass-plugin.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf1ffb0355e608453acc9803d6f317c16011d517/src%2Ftest%2Fui-fulldeps%2Fllvm-pass-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf1ffb0355e608453acc9803d6f317c16011d517/src%2Ftest%2Fui-fulldeps%2Fllvm-pass-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fllvm-pass-plugin.stderr?ref=cf1ffb0355e608453acc9803d6f317c16011d517", "patch": "@@ -1,8 +0,0 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/llvm-pass-plugin.rs:6:1\n-   |\n-LL | #![plugin(llvm_pass_plugin)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n-   |\n-   = note: `#[warn(deprecated)]` on by default\n-"}]}