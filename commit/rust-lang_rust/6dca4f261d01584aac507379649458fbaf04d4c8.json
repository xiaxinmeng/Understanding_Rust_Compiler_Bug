{"sha": "6dca4f261d01584aac507379649458fbaf04d4c8", "node_id": "C_kwDOAAsO6NoAKDZkY2E0ZjI2MWQwMTU4NGFhYzUwNzM3OTY0OTQ1OGZiYWYwNGQ0Yzg", "commit": {"author": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-08-19T09:50:05Z"}, "committer": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-11-20T08:40:11Z"}, "message": "Add some doc for `search_is_some` lint", "tree": {"sha": "8d8de0003d6be3f2a3dc30a7085c0b40321422bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d8de0003d6be3f2a3dc30a7085c0b40321422bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dca4f261d01584aac507379649458fbaf04d4c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dca4f261d01584aac507379649458fbaf04d4c8", "html_url": "https://github.com/rust-lang/rust/commit/6dca4f261d01584aac507379649458fbaf04d4c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dca4f261d01584aac507379649458fbaf04d4c8/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddcbac37ae7c8e5f9487454f800423e651e56868", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddcbac37ae7c8e5f9487454f800423e651e56868", "html_url": "https://github.com/rust-lang/rust/commit/ddcbac37ae7c8e5f9487454f800423e651e56868"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "b0bfe8d80e0d725bfa2c6ef29084643bbaaf6502", "filename": "clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6dca4f261d01584aac507379649458fbaf04d4c8/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dca4f261d01584aac507379649458fbaf04d4c8/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=6dca4f261d01584aac507379649458fbaf04d4c8", "patch": "@@ -50,6 +50,8 @@ pub(super) fn check<'tcx>(\n                     if let hir::PatKind::Ref(..) = closure_arg.pat.kind {\n                         Some(search_snippet.replacen('&', \"\", 1))\n                     } else if let PatKind::Binding(..) = strip_pat_refs(closure_arg.pat).kind {\n+                        // `find()` provides a reference to the item, but `any` does not,\n+                        // so we should fix item usages for suggestion\n                         get_closure_suggestion(cx, search_arg, closure_body)\n                             .or_else(|| Some(search_snippet.to_string()))\n                     } else {\n@@ -151,6 +153,9 @@ pub(super) fn check<'tcx>(\n     }\n }\n \n+// Build suggestion gradually by handling closure arg specific usages,\n+// such as explicit deref and borrowing cases.\n+// Returns `None` if no such use cases have been triggered in closure body\n fn get_closure_suggestion<'tcx>(\n     cx: &LateContext<'_>,\n     search_arg: &'tcx hir::Expr<'_>,\n@@ -203,8 +208,12 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n             let end_snip = snippet(self.cx, end_span, \"..\");\n \n             if cmt.place.projections.is_empty() {\n+                // handle item without any projection, that needs an explicit borrowing\n+                // i.e.: suggest `&x` instead of `x`\n                 self.suggestion_start.push_str(&format!(\"{}&{}\", start_snip, ident_str));\n             } else {\n+                // cases where a parent call is using the item\n+                // i.e.: suggest `.contains(&x)` for `.find(|x| [1, 2, 3].contains(x)).is_none()`\n                 let parent_expr = get_parent_expr_for_hir(self.cx, cmt.hir_id);\n                 if let Some(Expr { hir_id: _, kind, .. }) = parent_expr {\n                     if let ExprKind::Call(_, args) | ExprKind::MethodCall(_, _, args, _) = kind {\n@@ -230,6 +239,8 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                     }\n                 }\n \n+                // handle item projections by removing one explicit deref\n+                // i.e.: suggest `*x` instead of `**x`\n                 let mut replacement_str = ident_str;\n                 let last_deref = cmt\n                     .place"}]}