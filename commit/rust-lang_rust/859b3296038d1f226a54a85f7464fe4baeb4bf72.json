{"sha": "859b3296038d1f226a54a85f7464fe4baeb4bf72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1OWIzMjk2MDM4ZDFmMjI2YTU0YTg1Zjc0NjRmZTRiYWViNGJmNzI=", "commit": {"author": {"name": "BO41", "email": "botbob@disroot.org", "date": "2019-05-20T13:23:38Z"}, "committer": {"name": "BO41", "email": "botbob@disroot.org", "date": "2019-05-20T13:23:38Z"}, "message": "Make non_ascii_literal auto-fixable", "tree": {"sha": "11402cb4204f1ee71a3c191ffc84ef941c5c986f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11402cb4204f1ee71a3c191ffc84ef941c5c986f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/859b3296038d1f226a54a85f7464fe4baeb4bf72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/859b3296038d1f226a54a85f7464fe4baeb4bf72", "html_url": "https://github.com/rust-lang/rust/commit/859b3296038d1f226a54a85f7464fe4baeb4bf72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/859b3296038d1f226a54a85f7464fe4baeb4bf72/comments", "author": null, "committer": null, "parents": [{"sha": "874de889dcc48f71bb2d5194f6d8110bcefe41d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/874de889dcc48f71bb2d5194f6d8110bcefe41d6", "html_url": "https://github.com/rust-lang/rust/commit/874de889dcc48f71bb2d5194f6d8110bcefe41d6"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "ceae97a1d2ead51d300ee5bbf95da5a443deabc8", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/859b3296038d1f226a54a85f7464fe4baeb4bf72/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/859b3296038d1f226a54a85f7464fe4baeb4bf72/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=859b3296038d1f226a54a85f7464fe4baeb4bf72", "patch": "@@ -1,7 +1,8 @@\n-use crate::utils::{is_allowed, snippet, span_help_and_lint};\n+use crate::utils::{is_allowed, snippet, span_help_and_lint, span_lint_and_sugg};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n+use rustc_errors::Applicability;\n use syntax::ast::LitKind;\n use syntax::source_map::Span;\n use unicode_normalization::UnicodeNormalization;\n@@ -103,7 +104,7 @@ fn check_str(cx: &LateContext<'_, '_>, span: Span, id: HirId) {\n         );\n     }\n     if string.chars().any(|c| c as u32 > 0x7F) {\n-        span_help_and_lint(\n+        span_lint_and_sugg(\n             cx,\n             NON_ASCII_LITERAL,\n             span,\n@@ -116,6 +117,15 @@ fn check_str(cx: &LateContext<'_, '_>, span: Span, id: HirId) {\n                     escape(string.nfc())\n                 }\n             ),\n+            format!(\n+                \"{}\",\n+                if is_allowed(cx, UNICODE_NOT_NFC, id) {\n+                    escape(string.chars())\n+                } else {\n+                    escape(string.nfc())\n+                }\n+            ),\n+            Applicability::MachineApplicable,\n         );\n     }\n     if is_allowed(cx, NON_ASCII_LITERAL, id) && string.chars().zip(string.nfc()).any(|(a, b)| a != b) {"}]}