{"sha": "f3e51d8d65e7188ae10506807591aca621f8ad96", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZTUxZDhkNjVlNzE4OGFlMTA1MDY4MDc1OTFhY2E2MjFmOGFkOTY=", "commit": {"author": {"name": "Laura Peskin", "email": "laura.peskin@gmail.com", "date": "2017-09-29T02:24:31Z"}, "committer": {"name": "Laura Peskin", "email": "laura.peskin@gmail.com", "date": "2017-09-30T01:01:10Z"}, "message": "add lint for creation of invalid references", "tree": {"sha": "103b4477c435fe8c89ca5ab7c34b3a8ee78ff634", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/103b4477c435fe8c89ca5ab7c34b3a8ee78ff634"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3e51d8d65e7188ae10506807591aca621f8ad96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3e51d8d65e7188ae10506807591aca621f8ad96", "html_url": "https://github.com/rust-lang/rust/commit/f3e51d8d65e7188ae10506807591aca621f8ad96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3e51d8d65e7188ae10506807591aca621f8ad96/comments", "author": {"login": "lpesk", "id": 7589231, "node_id": "MDQ6VXNlcjc1ODkyMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/7589231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lpesk", "html_url": "https://github.com/lpesk", "followers_url": "https://api.github.com/users/lpesk/followers", "following_url": "https://api.github.com/users/lpesk/following{/other_user}", "gists_url": "https://api.github.com/users/lpesk/gists{/gist_id}", "starred_url": "https://api.github.com/users/lpesk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lpesk/subscriptions", "organizations_url": "https://api.github.com/users/lpesk/orgs", "repos_url": "https://api.github.com/users/lpesk/repos", "events_url": "https://api.github.com/users/lpesk/events{/privacy}", "received_events_url": "https://api.github.com/users/lpesk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lpesk", "id": 7589231, "node_id": "MDQ6VXNlcjc1ODkyMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/7589231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lpesk", "html_url": "https://github.com/lpesk", "followers_url": "https://api.github.com/users/lpesk/followers", "following_url": "https://api.github.com/users/lpesk/following{/other_user}", "gists_url": "https://api.github.com/users/lpesk/gists{/gist_id}", "starred_url": "https://api.github.com/users/lpesk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lpesk/subscriptions", "organizations_url": "https://api.github.com/users/lpesk/orgs", "repos_url": "https://api.github.com/users/lpesk/repos", "events_url": "https://api.github.com/users/lpesk/events{/privacy}", "received_events_url": "https://api.github.com/users/lpesk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06280e838b2a8ff2809566aff574d51b182330f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/06280e838b2a8ff2809566aff574d51b182330f5", "html_url": "https://github.com/rust-lang/rust/commit/06280e838b2a8ff2809566aff574d51b182330f5"}], "stats": {"total": 111, "additions": 111, "deletions": 0}, "files": [{"sha": "440e3055bb1076eb86bf0382b39f819a157f445f", "filename": "clippy_lints/src/invalid_ref.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/f3e51d8d65e7188ae10506807591aca621f8ad96/clippy_lints%2Fsrc%2Finvalid_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e51d8d65e7188ae10506807591aca621f8ad96/clippy_lints%2Fsrc%2Finvalid_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finvalid_ref.rs?ref=f3e51d8d65e7188ae10506807591aca621f8ad96", "patch": "@@ -0,0 +1,59 @@\n+use rustc::lint::*;\n+use rustc::ty;\n+use rustc::hir::*;\n+use utils::{match_def_path, paths, span_help_and_lint, opt_def_id};\n+\n+/// **What it does:** Checks for creation of references to zeroed or uninitialized memory.\n+///\n+/// **Why is this bad?** Creation of null references is undefined behavior.\n+///\n+/// **Known problems:** None. \n+///\n+/// **Example:**\n+/// ```rust\n+/// let bad_ref: &usize = std::mem::zeroed();\n+/// ```\n+\n+declare_lint! {\n+    pub INVALID_REF,\n+    Warn,\n+    \"creation of invalid reference\"\n+}\n+\n+const ZERO_REF_SUMMARY: &str = \"reference to zeroed memory\";\n+const UNINIT_REF_SUMMARY: &str = \"reference to uninitialized memory\";\n+\n+pub struct InvalidRef; \n+\n+impl LintPass for InvalidRef {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(INVALID_REF)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidRef {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if_let_chain!{[\n+            let ty::TyRef(..) = cx.tables.expr_ty(expr).sty,\n+            let ExprCall(ref path, ref args) = expr.node,\n+            let ExprPath(ref qpath) = path.node,\n+            args.len() == 0,\n+            let Some(def_id) = opt_def_id(cx.tables.qpath_def(qpath, path.hir_id)),\n+        ], {\n+            let help = \"Creation of a null reference is undefined behavior; see https://doc.rust-lang.org/reference/behavior-considered-undefined.html\"; \n+            if match_def_path(cx.tcx, def_id, &paths::MEM_ZEROED) | match_def_path(cx.tcx, def_id, &paths::INIT) {\n+                let lint = INVALID_REF;\n+                let msg = ZERO_REF_SUMMARY;\n+                span_help_and_lint(cx, lint, expr.span, &msg, &help);\n+            } else if match_def_path(cx.tcx, def_id, &paths::MEM_UNINIT) | match_def_path(cx.tcx, def_id, &paths::UNINIT) {\n+                let lint = INVALID_REF;\n+                let msg = UNINIT_REF_SUMMARY;\n+                span_help_and_lint(cx, lint, expr.span, &msg, &help);\n+            } else {\n+                return;\n+            }\n+        }}            \n+        return;\n+    }\n+}\n+"}, {"sha": "759a66eaae5b3a6a2ebf46bb9e207b98e5a679ef", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3e51d8d65e7188ae10506807591aca621f8ad96/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e51d8d65e7188ae10506807591aca621f8ad96/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f3e51d8d65e7188ae10506807591aca621f8ad96", "patch": "@@ -97,6 +97,7 @@ pub mod if_let_redundant_pattern_matching;\n pub mod if_not_else;\n pub mod infinite_iter;\n pub mod int_plus_one;\n+pub mod invalid_ref;\n pub mod is_unit_expr;\n pub mod items_after_statements;\n pub mod large_enum_variant;\n@@ -328,6 +329,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box use_self::UseSelf);\n     reg.register_late_lint_pass(box bytecount::ByteCount);\n     reg.register_late_lint_pass(box infinite_iter::Pass);\n+    reg.register_late_lint_pass(box invalid_ref::InvalidRef);\n \n     reg.register_lint_group(\"clippy_restrictions\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -345,6 +347,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         if_not_else::IF_NOT_ELSE,\n         infinite_iter::MAYBE_INFINITE_ITER,\n         int_plus_one::INT_PLUS_ONE,\n+        invalid_ref::INVALID_REF,\n         items_after_statements::ITEMS_AFTER_STATEMENTS,\n         matches::SINGLE_MATCH_ELSE,\n         mem_forget::MEM_FORGET,"}, {"sha": "89bc84f4a50bfb649031a29ca370413ebeb9800b", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3e51d8d65e7188ae10506807591aca621f8ad96/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e51d8d65e7188ae10506807591aca621f8ad96/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=f3e51d8d65e7188ae10506807591aca621f8ad96", "patch": "@@ -30,6 +30,7 @@ pub const HASH: [&'static str; 2] = [\"hash\", \"Hash\"];\n pub const HASHMAP: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"];\n pub const HASHMAP_ENTRY: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entry\"];\n pub const HASHSET: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"set\", \"HashSet\"];\n+pub const INIT: [&'static str; 4] = [\"core\", \"intrinsics\", \"\", \"init\"];\n pub const INTO_ITERATOR: [&'static str; 4] = [\"core\", \"iter\", \"traits\", \"IntoIterator\"];\n pub const IO_PRINT: [&'static str; 4] = [\"std\", \"io\", \"stdio\", \"_print\"];\n pub const IO_READ: [&'static str; 3] = [\"std\", \"io\", \"Read\"];\n@@ -39,6 +40,8 @@ pub const LINKED_LIST: [&'static str; 3] = [\"alloc\", \"linked_list\", \"LinkedList\"\n pub const LINT: [&'static str; 3] = [\"rustc\", \"lint\", \"Lint\"];\n pub const LINT_ARRAY: [&'static str; 3] = [\"rustc\", \"lint\", \"LintArray\"];\n pub const MEM_FORGET: [&'static str; 3] = [\"core\", \"mem\", \"forget\"];\n+pub const MEM_ZEROED: [&'static str; 3] = [\"core\", \"mem\", \"zeroed\"];\n+pub const MEM_UNINIT: [&'static str; 3] = [\"core\", \"mem\", \"uninitialized\"];\n pub const MUTEX: [&'static str; 4] = [\"std\", \"sync\", \"mutex\", \"Mutex\"];\n pub const OPEN_OPTIONS: [&'static str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n pub const OPS_MODULE: [&'static str; 2] = [\"core\", \"ops\"];\n@@ -80,6 +83,7 @@ pub const TO_OWNED: [&'static str; 3] = [\"alloc\", \"borrow\", \"ToOwned\"];\n pub const TO_STRING: [&'static str; 3] = [\"alloc\", \"string\", \"ToString\"];\n pub const TRANSMUTE: [&'static str; 4] = [\"core\", \"intrinsics\", \"\", \"transmute\"];\n pub const TRY_INTO_RESULT: [&'static str; 4] = [\"std\", \"ops\", \"Try\", \"into_result\"];\n+pub const UNINIT: [&'static str; 4] = [\"core\", \"intrinsics\", \"\", \"uninit\"];\n pub const VEC: [&'static str; 3] = [\"alloc\", \"vec\", \"Vec\"];\n pub const VEC_DEQUE: [&'static str; 3] = [\"alloc\", \"vec_deque\", \"VecDeque\"];\n pub const VEC_FROM_ELEM: [&'static str; 3] = [\"alloc\", \"vec\", \"from_elem\"];"}, {"sha": "d7341575e95d8e3c0fa6e89905982b8c3cc14482", "filename": "tests/ui/invalid_ref.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f3e51d8d65e7188ae10506807591aca621f8ad96/tests%2Fui%2Finvalid_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e51d8d65e7188ae10506807591aca621f8ad96/tests%2Fui%2Finvalid_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_ref.rs?ref=f3e51d8d65e7188ae10506807591aca621f8ad96", "patch": "@@ -0,0 +1,45 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![allow(unused)]\n+#![feature(core_intrinsics)]\n+\n+extern crate core;\n+use std::intrinsics::{init, uninit};\n+\n+fn main() {\n+    let x = 1; \n+    unsafe { \n+        ref_to_zeroed_std(&x);\n+        ref_to_zeroed_core(&x);\n+        ref_to_zeroed_intr(&x);\n+        ref_to_uninit_std(&x);\n+        ref_to_uninit_core(&x);\n+        ref_to_uninit_intr(&x);\n+    }\n+}\n+\n+unsafe fn ref_to_zeroed_std<T: ?Sized>(t: &T) {\n+    let ref_zero: &T = std::mem::zeroed();     // warning\n+}\n+\n+unsafe fn ref_to_zeroed_core<T: ?Sized>(t: &T) {\n+    let ref_zero: &T = core::mem::zeroed();   // warning\n+}\n+\n+unsafe fn ref_to_zeroed_intr<T: ?Sized>(t: &T) {\n+    let ref_zero: &T = std::intrinsics::init();   // warning\n+}\n+\n+unsafe fn ref_to_uninit_std<T: ?Sized>(t: &T) {\n+    let ref_uninit: &T = std::mem::uninitialized();   // warning\n+}\n+\n+unsafe fn ref_to_uninit_core<T: ?Sized>(t: &T) {\n+    let ref_uninit: &T = core::mem::uninitialized();   // warning\n+}\n+\n+unsafe fn ref_to_uninit_intr<T: ?Sized>(t: &T) {\n+    let ref_uninit: &T = std::intrinsics::uninit();   // warning\n+}\n+"}]}