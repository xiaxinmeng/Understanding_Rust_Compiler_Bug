{"sha": "90f71be4e9daafb11a71caaa3c6a02f0a76f8047", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZjcxYmU0ZTlkYWFmYjExYTcxY2FhYTNjNmEwMmYwYTc2ZjgwNDc=", "commit": {"author": {"name": "Sebastian Ullrich", "email": "sebasti@nullri.ch", "date": "2016-10-30T01:13:41Z"}, "committer": {"name": "Sebastian Ullrich", "email": "sebasti@nullri.ch", "date": "2016-10-30T18:25:06Z"}, "message": "factor out `is_automatically_derived` util fn", "tree": {"sha": "969c0ce109c367ba272a3b6c80059c70b3e36ba3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/969c0ce109c367ba272a3b6c80059c70b3e36ba3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90f71be4e9daafb11a71caaa3c6a02f0a76f8047", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90f71be4e9daafb11a71caaa3c6a02f0a76f8047", "html_url": "https://github.com/rust-lang/rust/commit/90f71be4e9daafb11a71caaa3c6a02f0a76f8047", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90f71be4e9daafb11a71caaa3c6a02f0a76f8047/comments", "author": {"login": "Kha", "id": 109126, "node_id": "MDQ6VXNlcjEwOTEyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/109126?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kha", "html_url": "https://github.com/Kha", "followers_url": "https://api.github.com/users/Kha/followers", "following_url": "https://api.github.com/users/Kha/following{/other_user}", "gists_url": "https://api.github.com/users/Kha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kha/subscriptions", "organizations_url": "https://api.github.com/users/Kha/orgs", "repos_url": "https://api.github.com/users/Kha/repos", "events_url": "https://api.github.com/users/Kha/events{/privacy}", "received_events_url": "https://api.github.com/users/Kha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kha", "id": 109126, "node_id": "MDQ6VXNlcjEwOTEyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/109126?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kha", "html_url": "https://github.com/Kha", "followers_url": "https://api.github.com/users/Kha/followers", "following_url": "https://api.github.com/users/Kha/following{/other_user}", "gists_url": "https://api.github.com/users/Kha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kha/subscriptions", "organizations_url": "https://api.github.com/users/Kha/orgs", "repos_url": "https://api.github.com/users/Kha/repos", "events_url": "https://api.github.com/users/Kha/events{/privacy}", "received_events_url": "https://api.github.com/users/Kha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8630376e71db564af9a6442920ee1006d3b0386d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8630376e71db564af9a6442920ee1006d3b0386d", "html_url": "https://github.com/rust-lang/rust/commit/8630376e71db564af9a6442920ee1006d3b0386d"}], "stats": {"total": 30, "additions": 12, "deletions": 18}, "files": [{"sha": "d95c72c58f4a26d1e5e9756d8f1afd6722718342", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/90f71be4e9daafb11a71caaa3c6a02f0a76f8047/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f71be4e9daafb11a71caaa3c6a02f0a76f8047/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=90f71be4e9daafb11a71caaa3c6a02f0a76f8047", "patch": "@@ -3,10 +3,9 @@ use rustc::ty::subst::Subst;\n use rustc::ty::TypeVariants;\n use rustc::ty;\n use rustc::hir::*;\n-use syntax::ast::{Attribute, MetaItemKind};\n use syntax::codemap::Span;\n use utils::paths;\n-use utils::{match_path, span_lint_and_then};\n+use utils::{is_automatically_derived, match_path, span_lint_and_then};\n \n /// **What it does:** Checks for deriving `Hash` but implementing `PartialEq`\n /// explicitly.\n@@ -75,7 +74,7 @@ impl LateLintPass for Derive {\n     fn check_item(&mut self, cx: &LateContext, item: &Item) {\n         if let ItemImpl(_, _, _, Some(ref trait_ref), _, _) = item.node {\n             let ty = cx.tcx.lookup_item_type(cx.tcx.map.local_def_id(item.id)).ty;\n-            let is_automatically_derived = item.attrs.iter().any(is_automatically_derived);\n+            let is_automatically_derived = is_automatically_derived(&*item.attrs);\n \n             check_hash_peq(cx, item.span, trait_ref, ty, is_automatically_derived);\n \n@@ -97,7 +96,7 @@ fn check_hash_peq<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, span: Span, trait_re\n \n         // Look for the PartialEq implementations for `ty`\n         peq_trait_def.for_each_relevant_impl(cx.tcx, ty, |impl_id| {\n-            let peq_is_automatically_derived = cx.tcx.get_attrs(impl_id).iter().any(is_automatically_derived);\n+            let peq_is_automatically_derived = is_automatically_derived(&cx.tcx.get_attrs(impl_id));\n \n             if peq_is_automatically_derived == hash_is_automatically_derived {\n                 return;\n@@ -174,12 +173,3 @@ fn check_copy_clone<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item: &Item, trait_ref\n                            });\n     }\n }\n-\n-/// Checks for the `#[automatically_derived]` attribute all `#[derive]`d implementations have.\n-fn is_automatically_derived(attr: &Attribute) -> bool {\n-    if let MetaItemKind::Word(ref word) = attr.node.value.node {\n-        word == &\"automatically_derived\"\n-    } else {\n-        false\n-    }\n-}"}, {"sha": "1db95c5625c50edfd62adb8b52050cd229951909", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90f71be4e9daafb11a71caaa3c6a02f0a76f8047/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f71be4e9daafb11a71caaa3c6a02f0a76f8047/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=90f71be4e9daafb11a71caaa3c6a02f0a76f8047", "patch": "@@ -4,7 +4,8 @@\n \n use rustc::lint::*;\n use rustc::hir;\n-use syntax::ast::{Attribute, MetaItemKind};\n+use syntax::ast::Attribute;\n+use syntax::attr;\n \n /// **What it does:** Dumps every ast/hir node which has the `#[clippy_dump]` attribute\n ///\n@@ -128,10 +129,7 @@ impl LateLintPass for Pass {\n }\n \n fn has_attr(attrs: &[Attribute]) -> bool {\n-    attrs.iter().any(|attr| match attr.node.value.node {\n-        MetaItemKind::Word(ref word) => word == \"clippy_dump\",\n-        _ => false,\n-    })\n+    attr::contains_name(attrs, \"clippy_dump\")\n }\n \n fn print_decl(cx: &LateContext, decl: &hir::Decl) {"}, {"sha": "edb0f1cf1d3c32a986f8e2976b80dd548413d4cf", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90f71be4e9daafb11a71caaa3c6a02f0a76f8047/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f71be4e9daafb11a71caaa3c6a02f0a76f8047/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=90f71be4e9daafb11a71caaa3c6a02f0a76f8047", "patch": "@@ -14,6 +14,7 @@ use std::env;\n use std::mem;\n use std::str::FromStr;\n use syntax::ast::{self, LitKind};\n+use syntax::attr;\n use syntax::codemap::{ExpnFormat, ExpnInfo, MultiSpan, Span, DUMMY_SP};\n use syntax::errors::DiagnosticBuilder;\n use syntax::ptr::P;\n@@ -761,3 +762,8 @@ pub fn is_refutable(cx: &LateContext, pat: &Pat) -> bool {\n         }\n     }\n }\n+\n+/// Checks for the `#[automatically_derived]` attribute all `#[derive]`d implementations have.\n+pub fn is_automatically_derived(attrs: &[ast::Attribute]) -> bool {\n+    attr::contains_name(attrs, \"automatically_derived\")\n+}"}]}