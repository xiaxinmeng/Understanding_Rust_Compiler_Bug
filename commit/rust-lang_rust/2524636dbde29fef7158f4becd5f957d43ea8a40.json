{"sha": "2524636dbde29fef7158f4becd5f957d43ea8a40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1MjQ2MzZkYmRlMjlmZWY3MTU4ZjRiZWNkNWY5NTdkNDNlYThhNDA=", "commit": {"author": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2011-11-21T01:01:36Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-21T12:00:00Z"}, "message": "std: declared fns in math to be pure; requires calling libc via unsafe", "tree": {"sha": "0aba48bb28ac5cf867e2d2ce6b55501a8012b393", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0aba48bb28ac5cf867e2d2ce6b55501a8012b393"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2524636dbde29fef7158f4becd5f957d43ea8a40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2524636dbde29fef7158f4becd5f957d43ea8a40", "html_url": "https://github.com/rust-lang/rust/commit/2524636dbde29fef7158f4becd5f957d43ea8a40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2524636dbde29fef7158f4becd5f957d43ea8a40/comments", "author": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68839c3dda175f376d1f2c46dd7480523a1b30ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/68839c3dda175f376d1f2c46dd7480523a1b30ad", "html_url": "https://github.com/rust-lang/rust/commit/68839c3dda175f376d1f2c46dd7480523a1b30ad"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "5d826d5ce321d6782357328077e1eb9817d8e430", "filename": "src/lib/math.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2524636dbde29fef7158f4becd5f957d43ea8a40/src%2Flib%2Fmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2524636dbde29fef7158f4becd5f957d43ea8a40/src%2Flib%2Fmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmath.rs?ref=2524636dbde29fef7158f4becd5f957d43ea8a40", "patch": "@@ -22,49 +22,49 @@ Function: sqrt\n \n Returns the square root\n */\n-fn sqrt(x: float) -> float { libc::sqrt(x) }\n+pure fn sqrt(x: float) -> float { unsafe { libc::sqrt(x) } }\n \n /*\n Function: sin\n \n Returns the sine of an angle\n */\n-fn sin(x: float) -> float { libc::sin(x) }\n+pure fn sin(x: float) -> float { unsafe { libc::sin(x) } }\n \n /*\n Function: cos\n \n Returns the cosine of an angle\n */\n-fn cos(x: float) -> float { libc::cos(x) }\n+pure fn cos(x: float) -> float { unsafe { libc::cos(x) } }\n \n /*\n Function: tan\n \n Returns the tangent of an angle\n */\n-fn tan(x: float) -> float { libc::tan(x) }\n+pure fn tan(x: float) -> float { unsafe { libc::tan(x) } }\n \n /*\n Function: asin\n \n Returns the arcsine of an angle\n */\n-fn asin(x: float) -> float { libc::asin(x) }\n+pure fn asin(x: float) -> float { unsafe { libc::asin(x) } }\n \n /*\n Function: acos\n \n Returns the arccosine of an angle\n */\n-fn acos(x: float) -> float { libc::acos(x) }\n+pure fn acos(x: float) -> float { unsafe { libc::acos(x) } }\n \n /*\n Function: atan\n \n Returns the arctangent of an angle\n */\n-fn atan(x: float) -> float { libc::atan(x) }\n+pure fn atan(x: float) -> float { unsafe { libc::atan(x) } }\n \n /*\n Const: pi\n@@ -78,14 +78,14 @@ Function: min\n \n Returns the minimum of two values\n */\n-fn min<copy T>(x: T, y: T) -> T { x < y ? x : y }\n+pure fn min<copy T>(x: T, y: T) -> T { x < y ? x : y }\n \n /*\n Function: max\n \n Returns the maximum of two values\n */\n-fn max<copy T>(x: T, y: T) -> T { x < y ? y : x }\n+pure fn max<copy T>(x: T, y: T) -> T { x < y ? y : x }\n \n /*\n Const: e\n@@ -99,27 +99,27 @@ Function: ln\n \n Returns the natural logaritm\n */\n-fn ln(n: float) -> float { libc::ln(n) }\n+pure fn ln(n: float) -> float { unsafe { libc::ln(n) } }\n \n /*\n Function: log2\n \n Returns the logarithm to base 2\n */\n-fn log2(n: float) -> float { libc::log2(n) }\n+pure fn log2(n: float) -> float { unsafe { libc::log2(n) } }\n \n /*\n Function: log2\n \n Returns the logarithm to base 10\n */\n-fn log10(n: float) -> float { libc::log10(n) }\n+pure fn log10(n: float) -> float { unsafe { libc::log10(n) } }\n \n \n /*\n Function: log1p\n \n-Returns the natural logarithm of `1+n` accurately, \n+Returns the natural logarithm of `1+n` accurately,\n even for very small values of `n`\n */\n-fn ln1p(n: float) -> float { libc::log1p(n) }\n+pure fn ln1p(n: float) -> float { unsafe { libc::log1p(n) } }"}]}