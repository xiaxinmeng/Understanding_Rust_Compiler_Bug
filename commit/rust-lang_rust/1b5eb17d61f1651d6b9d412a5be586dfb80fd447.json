{"sha": "1b5eb17d61f1651d6b9d412a5be586dfb80fd447", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNWViMTdkNjFmMTY1MWQ2YjlkNDEyYTViZTU4NmRmYjgwZmQ0NDc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-03-16T19:10:47Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-03-20T14:17:37Z"}, "message": "ci: Print out how long each step takes on CI\n\nThis commit updates CI configuration to inform rustbuild that it should print\nout how long each step takes on CI. This'll hopefully allow us to track the\nduration of steps over time and follow regressions a bit more closesly (as well\nas have closer analysis of differences between two builds).\n\ncc #48829", "tree": {"sha": "2aeffb618dd4f317d52bece20681732baeb96337", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2aeffb618dd4f317d52bece20681732baeb96337"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b5eb17d61f1651d6b9d412a5be586dfb80fd447", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b5eb17d61f1651d6b9d412a5be586dfb80fd447", "html_url": "https://github.com/rust-lang/rust/commit/1b5eb17d61f1651d6b9d412a5be586dfb80fd447", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b5eb17d61f1651d6b9d412a5be586dfb80fd447/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a04b88d1941644df01fa5e31dd43e0f57c13d938", "url": "https://api.github.com/repos/rust-lang/rust/commits/a04b88d1941644df01fa5e31dd43e0f57c13d938", "html_url": "https://github.com/rust-lang/rust/commit/a04b88d1941644df01fa5e31dd43e0f57c13d938"}], "stats": {"total": 103, "additions": 81, "deletions": 22}, "files": [{"sha": "e92807d5aaaaa8017789d977c7cead8a751b4b11", "filename": "config.toml.example", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b5eb17d61f1651d6b9d412a5be586dfb80fd447/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/1b5eb17d61f1651d6b9d412a5be586dfb80fd447/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=1b5eb17d61f1651d6b9d412a5be586dfb80fd447", "patch": "@@ -186,6 +186,10 @@\n # essentially skipping stage0 as the local compiler is recompiling itself again.\n #local-rebuild = false\n \n+# Print out how long each rustbuild step took (mostly intended for CI and\n+# tracking over time)\n+#print-step-timings = false\n+\n # =============================================================================\n # General install configuration options\n # ============================================================================="}, {"sha": "6701f58ba8e92593589679caf6772aeb6c1d9395", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 45, "deletions": 20, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/1b5eb17d61f1651d6b9d412a5be586dfb80fd447/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5eb17d61f1651d6b9d412a5be586dfb80fd447/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=1b5eb17d61f1651d6b9d412a5be586dfb80fd447", "patch": "@@ -31,9 +31,11 @@ extern crate bootstrap;\n \n use std::env;\n use std::ffi::OsString;\n-use std::str::FromStr;\n+use std::io;\n use std::path::PathBuf;\n-use std::process::{Command, ExitStatus};\n+use std::process::Command;\n+use std::str::FromStr;\n+use std::time::Instant;\n \n fn main() {\n     let mut args = env::args_os().skip(1).collect::<Vec<_>>();\n@@ -90,7 +92,7 @@ fn main() {\n     };\n     let stage = env::var(\"RUSTC_STAGE\").expect(\"RUSTC_STAGE was not set\");\n     let sysroot = env::var_os(\"RUSTC_SYSROOT\").expect(\"RUSTC_SYSROOT was not set\");\n-    let mut on_fail = env::var_os(\"RUSTC_ON_FAIL\").map(|of| Command::new(of));\n+    let on_fail = env::var_os(\"RUSTC_ON_FAIL\").map(|of| Command::new(of));\n \n     let rustc = env::var_os(rustc).unwrap_or_else(|| panic!(\"{:?} was not set\", rustc));\n     let libdir = env::var_os(libdir).unwrap_or_else(|| panic!(\"{:?} was not set\", libdir));\n@@ -103,6 +105,7 @@ fn main() {\n         .arg(format!(\"stage{}\", stage))\n         .env(bootstrap::util::dylib_path_var(),\n              env::join_paths(&dylib_path).unwrap());\n+    let mut maybe_crate = None;\n \n     if let Some(target) = target {\n         // The stage0 compiler has a special sysroot distinct from what we\n@@ -134,6 +137,7 @@ fn main() {\n             .find(|a| &*a[0] == \"--crate-name\")\n             .unwrap();\n         let crate_name = &*crate_name[1];\n+        maybe_crate = Some(crate_name);\n \n         // If we're compiling specifically the `panic_abort` crate then we pass\n         // the `-C panic=abort` option. Note that we do not do this for any\n@@ -281,31 +285,52 @@ fn main() {\n         eprintln!(\"libdir: {:?}\", libdir);\n     }\n \n-    // Actually run the compiler!\n-    std::process::exit(if let Some(ref mut on_fail) = on_fail {\n-        match cmd.status() {\n-            Ok(s) if s.success() => 0,\n-            _ => {\n-                println!(\"\\nDid not run successfully:\\n{:?}\\n-------------\", cmd);\n-                exec_cmd(on_fail).expect(\"could not run the backup command\");\n-                1\n+    if let Some(mut on_fail) = on_fail {\n+        let e = match cmd.status() {\n+            Ok(s) if s.success() => std::process::exit(0),\n+            e => e,\n+        };\n+        println!(\"\\nDid not run successfully: {:?}\\n{:?}\\n-------------\", e, cmd);\n+        exec_cmd(&mut on_fail).expect(\"could not run the backup command\");\n+        std::process::exit(1);\n+    }\n+\n+    if env::var_os(\"RUSTC_PRINT_STEP_TIMINGS\").is_some() {\n+        if let Some(krate) = maybe_crate {\n+            let start = Instant::now();\n+            let status = cmd\n+                .status()\n+                .expect(&format!(\"\\n\\n failed to run {:?}\", cmd));\n+            let dur = start.elapsed();\n+\n+            let is_test = args.iter().any(|a| a == \"--test\");\n+            eprintln!(\"[RUSTC-TIMING] {} test:{} {}.{:03}\",\n+                      krate.to_string_lossy(),\n+                      is_test,\n+                      dur.as_secs(),\n+                      dur.subsec_nanos() / 1_000_000);\n+\n+            match status.code() {\n+                Some(i) => std::process::exit(i),\n+                None => {\n+                    eprintln!(\"rustc exited with {}\", status);\n+                    std::process::exit(0xfe);\n+                }\n             }\n         }\n-    } else {\n-        std::process::exit(match exec_cmd(&mut cmd) {\n-            Ok(s) => s.code().unwrap_or(0xfe),\n-            Err(e) => panic!(\"\\n\\nfailed to run {:?}: {}\\n\\n\", cmd, e),\n-        })\n-    })\n+    }\n+\n+    let code = exec_cmd(&mut cmd).expect(&format!(\"\\n\\n failed to run {:?}\", cmd));\n+    std::process::exit(code);\n }\n \n #[cfg(unix)]\n-fn exec_cmd(cmd: &mut Command) -> ::std::io::Result<ExitStatus> {\n+fn exec_cmd(cmd: &mut Command) -> io::Result<i32> {\n     use std::os::unix::process::CommandExt;\n     Err(cmd.exec())\n }\n \n #[cfg(not(unix))]\n-fn exec_cmd(cmd: &mut Command) -> ::std::io::Result<ExitStatus> {\n-    cmd.status()\n+fn exec_cmd(cmd: &mut Command) -> io::Result<i32> {\n+    cmd.status().map(|status| status.code().unwrap())\n }"}, {"sha": "3fd50f17ef3e9983e3bd6a7171fbce49e9de9af4", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1b5eb17d61f1651d6b9d412a5be586dfb80fd447/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5eb17d61f1651d6b9d412a5be586dfb80fd447/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=1b5eb17d61f1651d6b9d412a5be586dfb80fd447", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::any::Any;\n-use std::cell::RefCell;\n+use std::cell::{Cell, RefCell};\n use std::collections::BTreeSet;\n use std::env;\n use std::fmt::Debug;\n@@ -18,6 +18,7 @@ use std::hash::Hash;\n use std::ops::Deref;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n+use std::time::{Instant, Duration};\n \n use compile;\n use install;\n@@ -40,6 +41,7 @@ pub struct Builder<'a> {\n     pub kind: Kind,\n     cache: Cache,\n     stack: RefCell<Vec<Box<Any>>>,\n+    time_spent_on_dependencies: Cell<Duration>,\n }\n \n impl<'a> Deref for Builder<'a> {\n@@ -343,6 +345,7 @@ impl<'a> Builder<'a> {\n             kind,\n             cache: Cache::new(),\n             stack: RefCell::new(Vec::new()),\n+            time_spent_on_dependencies: Cell::new(Duration::new(0, 0)),\n         };\n \n         let builder = &builder;\n@@ -383,6 +386,7 @@ impl<'a> Builder<'a> {\n             kind,\n             cache: Cache::new(),\n             stack: RefCell::new(Vec::new()),\n+            time_spent_on_dependencies: Cell::new(Duration::new(0, 0)),\n         };\n \n         if kind == Kind::Dist {\n@@ -662,6 +666,10 @@ impl<'a> Builder<'a> {\n             cargo.env(\"RUSTC_ON_FAIL\", on_fail);\n         }\n \n+        if self.config.print_step_timings {\n+            cargo.env(\"RUSTC_PRINT_STEP_TIMINGS\", \"1\");\n+        }\n+\n         cargo.env(\"RUSTC_VERBOSE\", format!(\"{}\", self.verbosity));\n \n         // Throughout the build Cargo can execute a number of build scripts\n@@ -818,7 +826,24 @@ impl<'a> Builder<'a> {\n             self.build.verbose(&format!(\"{}> {:?}\", \"  \".repeat(stack.len()), step));\n             stack.push(Box::new(step.clone()));\n         }\n-        let out = step.clone().run(self);\n+\n+        let (out, dur) = {\n+            let start = Instant::now();\n+            let zero = Duration::new(0, 0);\n+            let parent = self.time_spent_on_dependencies.replace(zero);\n+            let out = step.clone().run(self);\n+            let dur = start.elapsed();\n+            let deps = self.time_spent_on_dependencies.replace(parent + dur);\n+            (out, dur - deps)\n+        };\n+\n+        if self.build.config.print_step_timings && dur > Duration::from_millis(100) {\n+            println!(\"[TIMING] {:?} -- {}.{:03}\",\n+                     step,\n+                     dur.as_secs(),\n+                     dur.subsec_nanos() / 1_000_000);\n+        }\n+\n         {\n             let mut stack = self.stack.borrow_mut();\n             let cur_step = stack.pop().expect(\"step stack empty\");"}, {"sha": "3ef4b0f8ae7ac0bf0d9c32f4c48f4340860f0806", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b5eb17d61f1651d6b9d412a5be586dfb80fd447/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5eb17d61f1651d6b9d412a5be586dfb80fd447/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=1b5eb17d61f1651d6b9d412a5be586dfb80fd447", "patch": "@@ -121,6 +121,7 @@ pub struct Config {\n     pub quiet_tests: bool,\n     pub test_miri: bool,\n     pub save_toolstates: Option<PathBuf>,\n+    pub print_step_timings: bool,\n \n     // Fallback musl-root for all targets\n     pub musl_root: Option<PathBuf>,\n@@ -204,6 +205,7 @@ struct Build {\n     openssl_static: Option<bool>,\n     configure_args: Option<Vec<String>>,\n     local_rebuild: Option<bool>,\n+    print_step_timings: Option<bool>,\n }\n \n /// TOML representation of various global install decisions.\n@@ -413,6 +415,7 @@ impl Config {\n         set(&mut config.openssl_static, build.openssl_static);\n         set(&mut config.configure_args, build.configure_args);\n         set(&mut config.local_rebuild, build.local_rebuild);\n+        set(&mut config.print_step_timings, build.print_step_timings);\n         config.verbose = cmp::max(config.verbose, flags.verbose);\n \n         if let Some(ref install) = toml.install {"}, {"sha": "9a26043c92c13a34508af873771f2da3dc5ec578", "filename": "src/ci/run.sh", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b5eb17d61f1651d6b9d412a5be586dfb80fd447/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/1b5eb17d61f1651d6b9d412a5be586dfb80fd447/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=1b5eb17d61f1651d6b9d412a5be586dfb80fd447", "patch": "@@ -25,6 +25,8 @@ source \"$ci_dir/shared.sh\"\n \n if [ \"$TRAVIS\" == \"true\" ] && [ \"$TRAVIS_BRANCH\" != \"auto\" ]; then\n     RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-quiet-tests\"\n+else\n+    RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set build.print-step-timings\"\n fi\n \n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-sccache\""}]}