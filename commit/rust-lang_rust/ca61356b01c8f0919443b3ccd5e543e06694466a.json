{"sha": "ca61356b01c8f0919443b3ccd5e543e06694466a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhNjEzNTZiMDFjOGYwOTE5NDQzYjNjY2Q1ZTU0M2UwNjY5NDQ2NmE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-18T18:59:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-18T19:28:51Z"}, "message": "Add semantic tag for unresolved references\n\nThis is a quick way to implement unresolved reference diagnostics.\nFor example, adding to VS Code config\n\n    \"editor.tokenColorCustomizationsExperimental\": {\n        \"unresolvedReference\": \"#FF0000\"\n    },\n\nwill highlight all unresolved refs in red.", "tree": {"sha": "1d0f3ddc89d96d879ca5366928073ff9470ec9bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d0f3ddc89d96d879ca5366928073ff9470ec9bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca61356b01c8f0919443b3ccd5e543e06694466a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca61356b01c8f0919443b3ccd5e543e06694466a", "html_url": "https://github.com/rust-lang/rust/commit/ca61356b01c8f0919443b3ccd5e543e06694466a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca61356b01c8f0919443b3ccd5e543e06694466a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b16ae5149b7b01c8b2ec4bfb87182c993997b44", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b16ae5149b7b01c8b2ec4bfb87182c993997b44", "html_url": "https://github.com/rust-lang/rust/commit/9b16ae5149b7b01c8b2ec4bfb87182c993997b44"}], "stats": {"total": 55, "additions": 34, "deletions": 21}, "files": [{"sha": "ccb1fc7516c989f928ab464bbf615f0729a544e6", "filename": "crates/ra_ide/src/snapshots/highlighting.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca61356b01c8f0919443b3ccd5e543e06694466a/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/ca61356b01c8f0919443b3ccd5e543e06694466a/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html?ref=ca61356b01c8f0919443b3ccd5e543e06694466a", "patch": "@@ -50,12 +50,12 @@\n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span>() {\n     <span class=\"macro\">println!</span>(<span class=\"string_literal\">\"Hello, {}!\"</span>, <span class=\"numeric_literal\">92</span>);\n \n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">vec</span> = Vec::new();\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">vec</span> = <span class=\"unresolved_reference\">Vec</span>::<span class=\"unresolved_reference\">new</span>();\n     <span class=\"keyword control\">if</span> <span class=\"keyword\">true</span> {\n         <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> = <span class=\"numeric_literal\">92</span>;\n-        <span class=\"variable mutable\">vec</span>.push(<span class=\"struct\">Foo</span> { <span class=\"field\">x</span>, <span class=\"field\">y</span>: <span class=\"numeric_literal\">1</span> });\n+        <span class=\"variable mutable\">vec</span>.<span class=\"unresolved_reference\">push</span>(<span class=\"struct\">Foo</span> { <span class=\"field\">x</span>, <span class=\"field\">y</span>: <span class=\"numeric_literal\">1</span> });\n     }\n-    <span class=\"keyword unsafe\">unsafe</span> { <span class=\"variable mutable\">vec</span>.set_len(<span class=\"numeric_literal\">0</span>); }\n+    <span class=\"keyword unsafe\">unsafe</span> { <span class=\"variable mutable\">vec</span>.<span class=\"unresolved_reference\">set_len</span>(<span class=\"numeric_literal\">0</span>); }\n \n     <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">x</span> = <span class=\"numeric_literal\">42</span>;\n     <span class=\"keyword\">let</span> <span class=\"variable declaration mutable\">y</span> = &<span class=\"keyword\">mut</span> <span class=\"variable mutable\">x</span>;"}, {"sha": "3df82c45fbe9885ddc7a12a7a8d835edfc32c50e", "filename": "crates/ra_ide/src/snapshots/rainbow_highlighting.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca61356b01c8f0919443b3ccd5e543e06694466a/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/ca61356b01c8f0919443b3ccd5e543e06694466a/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html?ref=ca61356b01c8f0919443b3ccd5e543e06694466a", "patch": "@@ -28,11 +28,11 @@\n </style>\n <pre><code><span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span>() {\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span> = <span class=\"string_literal\">\"hello\"</span>;\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"2705725358298919760\" style=\"color: hsl(17,51%,74%);\">x</span> = <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span>.to_string();\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"3365759661443752373\" style=\"color: hsl(127,76%,66%);\">y</span> = <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span>.to_string();\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"2705725358298919760\" style=\"color: hsl(17,51%,74%);\">x</span> = <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span>.<span class=\"unresolved_reference\">to_string</span>();\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"3365759661443752373\" style=\"color: hsl(127,76%,66%);\">y</span> = <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span>.<span class=\"unresolved_reference\">to_string</span>();\n \n     <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(19,74%,76%);\">x</span> = <span class=\"string_literal\">\"other color please!\"</span>;\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"6717528807933952652\" style=\"color: hsl(85,49%,84%);\">y</span> = <span class=\"variable\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(19,74%,76%);\">x</span>.to_string();\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"6717528807933952652\" style=\"color: hsl(85,49%,84%);\">y</span> = <span class=\"variable\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(19,74%,76%);\">x</span>.<span class=\"unresolved_reference\">to_string</span>();\n }\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span>() {"}, {"sha": "93d50287561281e579c758937fa9944ae421c40d", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ca61356b01c8f0919443b3ccd5e543e06694466a/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca61356b01c8f0919443b3ccd5e543e06694466a/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=ca61356b01c8f0919443b3ccd5e543e06694466a", "patch": "@@ -239,20 +239,21 @@ fn highlight_element(\n         NAME_REF if element.ancestors().any(|it| it.kind() == ATTR) => return None,\n         NAME_REF => {\n             let name_ref = element.into_node().and_then(ast::NameRef::cast).unwrap();\n-            let name_kind = classify_name_ref(sema, &name_ref)?;\n-\n-            match name_kind {\n-                NameRefClass::Definition(def) => {\n-                    if let Definition::Local(local) = &def {\n-                        if let Some(name) = local.name(db) {\n-                            let shadow_count =\n-                                bindings_shadow_count.entry(name.clone()).or_default();\n-                            binding_hash = Some(calc_binding_hash(&name, *shadow_count))\n-                        }\n-                    };\n-                    highlight_name(db, def)\n-                }\n-                NameRefClass::FieldShorthand { .. } => HighlightTag::Field.into(),\n+            match classify_name_ref(sema, &name_ref) {\n+                Some(name_kind) => match name_kind {\n+                    NameRefClass::Definition(def) => {\n+                        if let Definition::Local(local) = &def {\n+                            if let Some(name) = local.name(db) {\n+                                let shadow_count =\n+                                    bindings_shadow_count.entry(name.clone()).or_default();\n+                                binding_hash = Some(calc_binding_hash(&name, *shadow_count))\n+                            }\n+                        };\n+                        highlight_name(db, def)\n+                    }\n+                    NameRefClass::FieldShorthand { .. } => HighlightTag::Field.into(),\n+                },\n+                None => HighlightTag::UnresolvedReference.into(),\n             }\n         }\n "}, {"sha": "f2c42165454e0408d54c174c57626416bc9f5835", "filename": "crates/ra_ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca61356b01c8f0919443b3ccd5e543e06694466a/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca61356b01c8f0919443b3ccd5e543e06694466a/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=ca61356b01c8f0919443b3ccd5e543e06694466a", "patch": "@@ -38,6 +38,7 @@ pub enum HighlightTag {\n     TypeParam,\n     Union,\n     Local,\n+    UnresolvedReference,\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n@@ -79,6 +80,7 @@ impl HighlightTag {\n             HighlightTag::TypeParam => \"type_param\",\n             HighlightTag::Union => \"union\",\n             HighlightTag::Local => \"variable\",\n+            HighlightTag::UnresolvedReference => \"unresolved_reference\",\n         }\n     }\n }"}, {"sha": "8d2360cc8dbece9f2fd33f405afdac71c7827d23", "filename": "crates/rust-analyzer/src/conv.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca61356b01c8f0919443b3ccd5e543e06694466a/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca61356b01c8f0919443b3ccd5e543e06694466a/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconv.rs?ref=ca61356b01c8f0919443b3ccd5e543e06694466a", "patch": "@@ -24,7 +24,9 @@ use crate::{\n     world::WorldSnapshot,\n     Result,\n };\n-use semantic_tokens::{ATTRIBUTE, BUILTIN_TYPE, ENUM_MEMBER, LIFETIME, TYPE_ALIAS, UNION};\n+use semantic_tokens::{\n+    ATTRIBUTE, BUILTIN_TYPE, ENUM_MEMBER, LIFETIME, TYPE_ALIAS, UNION, UNRESOLVED_REFERENCE,\n+};\n \n pub trait Conv {\n     type Output;\n@@ -373,6 +375,7 @@ impl Conv for Highlight {\n             HighlightTag::Comment => SemanticTokenType::COMMENT,\n             HighlightTag::Attribute => ATTRIBUTE,\n             HighlightTag::Keyword => SemanticTokenType::KEYWORD,\n+            HighlightTag::UnresolvedReference => UNRESOLVED_REFERENCE,\n         };\n \n         for modifier in self.modifiers.iter() {"}, {"sha": "10fe696f6f108bad64fdf25471f75b97fe34e24e", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca61356b01c8f0919443b3ccd5e543e06694466a/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca61356b01c8f0919443b3ccd5e543e06694466a/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=ca61356b01c8f0919443b3ccd5e543e06694466a", "patch": "@@ -10,6 +10,8 @@ pub(crate) const ENUM_MEMBER: SemanticTokenType = SemanticTokenType::new(\"enumMe\n pub(crate) const LIFETIME: SemanticTokenType = SemanticTokenType::new(\"lifetime\");\n pub(crate) const TYPE_ALIAS: SemanticTokenType = SemanticTokenType::new(\"typeAlias\");\n pub(crate) const UNION: SemanticTokenType = SemanticTokenType::new(\"union\");\n+pub(crate) const UNRESOLVED_REFERENCE: SemanticTokenType =\n+    SemanticTokenType::new(\"unresolvedReference\");\n \n pub(crate) const CONSTANT: SemanticTokenModifier = SemanticTokenModifier::new(\"constant\");\n pub(crate) const CONTROL_FLOW: SemanticTokenModifier = SemanticTokenModifier::new(\"controlFlow\");\n@@ -43,6 +45,7 @@ pub(crate) const SUPPORTED_TYPES: &[SemanticTokenType] = &[\n     LIFETIME,\n     TYPE_ALIAS,\n     UNION,\n+    UNRESOLVED_REFERENCE,\n ];\n \n pub(crate) const SUPPORTED_MODIFIERS: &[SemanticTokenModifier] = &["}, {"sha": "79410ad1094d9f17f2c636de3725995c04bb30ca", "filename": "editors/code/package.json", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca61356b01c8f0919443b3ccd5e543e06694466a/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/ca61356b01c8f0919443b3ccd5e543e06694466a/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=ca61356b01c8f0919443b3ccd5e543e06694466a", "patch": "@@ -517,6 +517,10 @@\n                 \"id\": \"union\",\n                 \"description\": \"Style for C-style untagged unions\",\n                 \"superType\": \"type\"\n+            },\n+            {\n+                \"id\": \"unresolvedReference\",\n+                \"description\": \"Style for names which can not be resolved due to compilation errors\"\n             }\n         ],\n         \"semanticTokenModifiers\": ["}]}