{"sha": "fa0df69a979e490b639a9f502f95060649ba5fb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMGRmNjlhOTc5ZTQ5MGI2MzlhOWY1MDJmOTUwNjA2NDliYTVmYjk=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2016-08-06T18:59:27Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2016-08-06T18:59:27Z"}, "message": "Add a configurable threshold for enum variants before name lints trigger (fixes #1138)", "tree": {"sha": "6324b1584ca554e451a95834679008011dedfe11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6324b1584ca554e451a95834679008011dedfe11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa0df69a979e490b639a9f502f95060649ba5fb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa0df69a979e490b639a9f502f95060649ba5fb9", "html_url": "https://github.com/rust-lang/rust/commit/fa0df69a979e490b639a9f502f95060649ba5fb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa0df69a979e490b639a9f502f95060649ba5fb9/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78fa1abc93842a8aadf9072e01c132c38baac0e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/78fa1abc93842a8aadf9072e01c132c38baac0e3", "html_url": "https://github.com/rust-lang/rust/commit/78fa1abc93842a8aadf9072e01c132c38baac0e3"}], "stats": {"total": 53, "additions": 36, "deletions": 17}, "files": [{"sha": "03bd49b09b60023db4b7cb5dbeb34c0cab6c9a9f", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fa0df69a979e490b639a9f502f95060649ba5fb9/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa0df69a979e490b639a9f502f95060649ba5fb9/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=fa0df69a979e490b639a9f502f95060649ba5fb9", "patch": "@@ -44,9 +44,15 @@ declare_lint! {\n     \"finds type names prefixed/postfixed with their containing module's name\"\n }\n \n-#[derive(Default)]\n pub struct EnumVariantNames {\n     modules: Vec<String>,\n+    threshold: u64,\n+}\n+\n+impl EnumVariantNames {\n+    pub fn new(threshold: u64) -> EnumVariantNames {\n+        EnumVariantNames { modules: Vec::new(), threshold: threshold }\n+    }\n }\n \n impl LintPass for EnumVariantNames {\n@@ -75,7 +81,11 @@ fn partial_rmatch(post: &str, name: &str) -> usize {\n \n // FIXME: #600\n #[allow(while_let_on_iterator)]\n-fn check_variant(cx: &EarlyContext, def: &EnumDef, item_name: &str, item_name_chars: usize, span: Span) {\n+fn check_variant(cx: &EarlyContext, threshold: u64, def: &EnumDef, item_name: &str,\n+                 item_name_chars: usize, span: Span) {\n+    if (def.variants.len() as u64) < threshold {\n+        return;\n+    }\n     for var in &def.variants {\n         let name = var2str(var);\n         if partial_match(item_name, &name) == item_name_chars {\n@@ -85,9 +95,6 @@ fn check_variant(cx: &EarlyContext, def: &EnumDef, item_name: &str, item_name_ch\n             span_lint(cx, ENUM_VARIANT_NAMES, var.span, \"Variant name ends with the enum's name\");\n         }\n     }\n-    if def.variants.len() < 2 {\n-        return;\n-    }\n     let first = var2str(&def.variants[0]);\n     let mut pre = &first[..camel_case_until(&*first)];\n     let mut post = &first[camel_case_from(&*first)..];\n@@ -177,7 +184,7 @@ impl EarlyLintPass for EnumVariantNames {\n             }\n         }\n         if let ItemKind::Enum(ref def, _) = item.node {\n-            check_variant(cx, def, &item_name, item_name_chars, item.span);\n+            check_variant(cx, self.threshold, def, &item_name, item_name_chars, item.span);\n         }\n         self.modules.push(item_camel);\n     }"}, {"sha": "f110bb8f32918723f8abae80e65f31a426c1fe59", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa0df69a979e490b639a9f502f95060649ba5fb9/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa0df69a979e490b639a9f502f95060649ba5fb9/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=fa0df69a979e490b639a9f502f95060649ba5fb9", "patch": "@@ -175,7 +175,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box misc::TopLevelRefPass);\n     reg.register_late_lint_pass(box misc::CmpNan);\n     reg.register_late_lint_pass(box eq_op::EqOp);\n-    reg.register_early_lint_pass(box enum_variants::EnumVariantNames::default());\n+    reg.register_early_lint_pass(box enum_variants::EnumVariantNames::new(conf.enum_variant_name_threshold));\n     reg.register_late_lint_pass(box enum_glob_use::EnumGlobUse);\n     reg.register_late_lint_pass(box enum_clike::UnportableVariant);\n     reg.register_late_lint_pass(box bit_mask::BitMask);"}, {"sha": "07be9f7f5bc2a95dc1f9d09269c10585f87e2d0c", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa0df69a979e490b639a9f502f95060649ba5fb9/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa0df69a979e490b639a9f502f95060649ba5fb9/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=fa0df69a979e490b639a9f502f95060649ba5fb9", "patch": "@@ -160,6 +160,8 @@ define_Conf! {\n     (\"single-char-binding-names-threshold\", max_single_char_names, 5 => u64),\n     /// Lint: BOXED_LOCAL. The maximum size of objects (in bytes) that will be linted. Larger objects are ok on the heap\n     (\"too-large-for-stack\", too_large_for_stack, 200 => u64),\n+    /// Lint: ENUM_VARIANT_NAMES. The minimum number of enum variants for the lints about variant names to trigger\n+    (\"enum-variant-name-threshold\", enum_variant_name_threshold, 3 => u64),\n }\n \n /// Read the `toml` configuration file. The function will ignore \u201cFile not found\u201d errors iif"}, {"sha": "f0fda37f7f8f6be43c5cd3cb7721772b02175cf8", "filename": "tests/compile-fail/enum_variants.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fa0df69a979e490b639a9f502f95060649ba5fb9/tests%2Fcompile-fail%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa0df69a979e490b639a9f502f95060649ba5fb9/tests%2Fcompile-fail%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fenum_variants.rs?ref=fa0df69a979e490b639a9f502f95060649ba5fb9", "patch": "@@ -13,6 +13,22 @@ enum FakeCallType2 {\n enum Foo {\n     cFoo, //~ ERROR: Variant name ends with the enum's name\n     cBar,\n+    cBaz,\n+}\n+\n+enum Fooo {\n+    cFoo, // no error, threshold is 3 variants by default\n+    cBar,\n+}\n+\n+enum Food { //~ ERROR: All variants have the same prefix: `Food`\n+    FoodGood, //~ ERROR: Variant name starts with the enum's name\n+    FoodMiddle, //~ ERROR: Variant name starts with the enum's name\n+    FoodBad, //~ ERROR: Variant name starts with the enum's name\n+}\n+\n+enum Stuff {\n+    StuffBad, // no error\n }\n \n enum BadCallType { //~ ERROR: All variants have the same prefix: `CallType`\n@@ -21,7 +37,7 @@ enum BadCallType { //~ ERROR: All variants have the same prefix: `CallType`\n     CallTypeDestroy,\n }\n \n-enum TwoCallType { //~ ERROR: All variants have the same prefix: `CallType`\n+enum TwoCallType { // no error\n     CallTypeCall,\n     CallTypeCreate,\n }\n@@ -32,7 +48,7 @@ enum Consts { //~ ERROR: All variants have the same prefix: `Constant`\n     ConstantLie,\n }\n \n-enum Two { //~ ERROR: All variants have the same prefix: `Constant`\n+enum Two { // no error here\n     ConstantInt,\n     ConstantInfer,\n }\n@@ -61,20 +77,14 @@ enum Sealll {\n \n enum Seallll { //~ ERROR: All variants have the same prefix: `With`\n     WithOutCake,\n+    WithOutTea,\n     WithOut,\n }\n \n enum NonCaps { //~ ERROR: All variants have the same prefix: `Prefix`\n     Prefix\u7684,\n+    PrefixTea,\n     PrefixCake,\n }\n \n-enum Stuff {\n-    BadStuff, //~ ERROR: Variant name ends with the enum's name\n-}\n-\n-enum Food {\n-    FoodGood, //~ ERROR: Variant name starts with the enum's name\n-}\n-\n fn main() {}"}]}