{"sha": "4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlZmU5N2EzZDlhNWYyZDI5NWJjMmZhOWJkMmJiOTBlZGYxOTg2ZDU=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-06-14T04:47:42Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-09-06T00:45:43Z"}, "message": "Check placement of more attributes", "tree": {"sha": "ef7b2d81a2d2b0c2f467631d6585a038bd200e1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef7b2d81a2d2b0c2f467631d6585a038bd200e1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5", "html_url": "https://github.com/rust-lang/rust/commit/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de921ab3c3aa25d65b1476d77285da1ca99af397", "url": "https://api.github.com/repos/rust-lang/rust/commits/de921ab3c3aa25d65b1476d77285da1ca99af397", "html_url": "https://github.com/rust-lang/rust/commit/de921ab3c3aa25d65b1476d77285da1ca99af397"}], "stats": {"total": 1170, "additions": 816, "deletions": 354}, "files": [{"sha": "037a653e3e019d698ef44d14804989cb583fec95", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 105, "deletions": 6, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5", "patch": "@@ -71,6 +71,16 @@ impl CheckAttrVisitor<'tcx> {\n                 self.check_track_caller(&attr.span, attrs, span, target)\n             } else if self.tcx.sess.check_name(attr, sym::doc) {\n                 self.check_doc_alias(attr, hir_id, target)\n+            } else if self.tcx.sess.check_name(attr, sym::cold) {\n+                self.check_cold(&attr, span, target)\n+            } else if self.tcx.sess.check_name(attr, sym::link_name) {\n+                self.check_link_name(&attr, span, target)\n+            } else if self.tcx.sess.check_name(attr, sym::no_link) {\n+                self.check_no_link(&attr, span, target)\n+            } else if self.tcx.sess.check_name(attr, sym::export_name) {\n+                self.check_export_name(&attr, span, target)\n+            } else if self.tcx.sess.check_name(attr, sym::link_section) {\n+                self.check_link_section(&attr, span, target)\n             } else {\n                 true\n             };\n@@ -277,6 +287,99 @@ impl CheckAttrVisitor<'tcx> {\n         true\n     }\n \n+    /// Checks if `#[cold]` is applied to a non-function. Returns `true` if valid.\n+    fn check_cold(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n+        match target {\n+            Target::Fn | Target::Method(..) | Target::ForeignFn => true,\n+            _ => {\n+                self.tcx\n+                    .sess\n+                    .struct_span_err(attr.span, \"attribute should be applied to a function\")\n+                    .span_label(*span, \"not a function\")\n+                    .emit();\n+                false\n+            }\n+        }\n+    }\n+\n+    /// Checks if `#[link_name]` is applied to an item other than a foreign function or static. Returns `true` if valid.\n+    fn check_link_name(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n+        if target == Target::ForeignFn || target == Target::ForeignStatic {\n+            true\n+        } else {\n+            let mut err = self.tcx.sess.struct_span_err(\n+                attr.span,\n+                \"attribute should be applied to a foreign function or static\",\n+            );\n+            err.span_label(*span, \"not a foreign function or static\");\n+\n+            // See issue #47725\n+            if target == Target::ForeignMod {\n+                if let Some(value) = attr.value_str() {\n+                    err.span_help(\n+                        attr.span,\n+                        &format!(r#\"try `#[link(name = \"{}\")]` instead\"#, value),\n+                    );\n+                } else {\n+                    err.span_help(attr.span, r#\"try `#[link(name = \"...\")]` instead\"#);\n+                }\n+            }\n+\n+            err.emit();\n+            false\n+        }\n+    }\n+\n+    /// Checks if `#[no_link]` is applied to an `extern crate`. Returns `true` if valid.\n+    fn check_no_link(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n+        if target == Target::ExternCrate {\n+            true\n+        } else {\n+            self.tcx\n+                .sess\n+                .struct_span_err(attr.span, \"attribute should be applied to an `extern crate` item\")\n+                .span_label(*span, \"not an `extern crate` item\")\n+                .emit();\n+            false\n+        }\n+    }\n+\n+    /// Checks if `#[export_name]` is applied to a function or static. Returns `true` if valid.\n+    fn check_export_name(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n+        match target {\n+            Target::Static | Target::Fn | Target::Method(..) => true,\n+            _ => {\n+                self.tcx\n+                    .sess\n+                    .struct_span_err(\n+                        attr.span,\n+                        \"attribute should be applied to a function or static\",\n+                    )\n+                    .span_label(*span, \"not a function or static\")\n+                    .emit();\n+                false\n+            }\n+        }\n+    }\n+\n+    /// Checks if `#[link_section]` is applied to a function or static. Returns `true` if valid.\n+    fn check_link_section(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n+        match target {\n+            Target::Static | Target::Fn | Target::Method(..) => true,\n+            _ => {\n+                self.tcx\n+                    .sess\n+                    .struct_span_err(\n+                        attr.span,\n+                        \"attribute should be applied to a function or static\",\n+                    )\n+                    .span_label(*span, \"not a function or static\")\n+                    .emit();\n+                false\n+            }\n+        }\n+    }\n+\n     /// Checks if the `#[repr]` attributes on `item` are valid.\n     fn check_repr(\n         &self,\n@@ -421,10 +524,8 @@ impl CheckAttrVisitor<'tcx> {\n     fn check_stmt_attributes(&self, stmt: &hir::Stmt<'_>) {\n         // When checking statements ignore expressions, they will be checked later\n         if let hir::StmtKind::Local(ref l) = stmt.kind {\n+            self.check_attributes(l.hir_id, &l.attrs, &stmt.span, Target::Statement, None);\n             for attr in l.attrs.iter() {\n-                if self.tcx.sess.check_name(attr, sym::inline) {\n-                    self.check_inline(l.hir_id, attr, &stmt.span, Target::Statement);\n-                }\n                 if self.tcx.sess.check_name(attr, sym::repr) {\n                     self.emit_repr_error(\n                         attr.span,\n@@ -442,10 +543,8 @@ impl CheckAttrVisitor<'tcx> {\n             hir::ExprKind::Closure(..) => Target::Closure,\n             _ => Target::Expression,\n         };\n+        self.check_attributes(expr.hir_id, &expr.attrs, &expr.span, target, None);\n         for attr in expr.attrs.iter() {\n-            if self.tcx.sess.check_name(attr, sym::inline) {\n-                self.check_inline(expr.hir_id, attr, &expr.span, target);\n-            }\n             if self.tcx.sess.check_name(attr, sym::repr) {\n                 self.emit_repr_error(\n                     attr.span,"}, {"sha": "b316f724349738700de56caceeea3cb99b28b706", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5", "patch": "@@ -2490,10 +2490,17 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                 codegen_fn_attrs.export_name = Some(s);\n             }\n         } else if tcx.sess.check_name(attr, sym::target_feature) {\n-            if !tcx.features().target_feature_11 {\n-                check_target_feature_safe_fn(tcx, id, attr.span);\n-            } else if let Some(local_id) = id.as_local() {\n-                if tcx.fn_sig(id).unsafety() == hir::Unsafety::Normal {\n+            if !tcx.is_closure(id) && tcx.fn_sig(id).unsafety() == hir::Unsafety::Normal {\n+                if !tcx.features().target_feature_11 {\n+                    let mut err = feature_err(\n+                        &tcx.sess.parse_sess,\n+                        sym::target_feature_11,\n+                        attr.span,\n+                        \"`#[target_feature(..)]` can only be applied to `unsafe` functions\",\n+                    );\n+                    err.span_label(tcx.def_span(id), \"not an `unsafe` function\");\n+                    err.emit();\n+                } else if let Some(local_id) = id.as_local() {\n                     check_target_feature_trait_unsafe(tcx, local_id, attr.span);\n                 }\n             }\n@@ -2750,21 +2757,6 @@ fn check_link_name_xor_ordinal(\n     }\n }\n \n-/// Checks the function annotated with `#[target_feature]` is unsafe,\n-/// reporting an error if it isn't.\n-fn check_target_feature_safe_fn(tcx: TyCtxt<'_>, id: DefId, attr_span: Span) {\n-    if tcx.is_closure(id) || tcx.fn_sig(id).unsafety() == hir::Unsafety::Normal {\n-        let mut err = feature_err(\n-            &tcx.sess.parse_sess,\n-            sym::target_feature_11,\n-            attr_span,\n-            \"`#[target_feature(..)]` can only be applied to `unsafe` functions\",\n-        );\n-        err.span_label(tcx.def_span(id), \"not an `unsafe` function\");\n-        err.emit();\n-    }\n-}\n-\n /// Checks the function annotated with `#[target_feature]` is not a safe\n /// trait method implementation, reporting an error if it is.\n fn check_target_feature_trait_unsafe(tcx: TyCtxt<'_>, id: LocalDefId, attr_span: Span) {"}, {"sha": "536d7933d3e51eeaf30690bd87e632fb0162b8de", "filename": "src/test/ui/check-static-recursion-foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/src%2Ftest%2Fui%2Fcheck-static-recursion-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/src%2Ftest%2Fui%2Fcheck-static-recursion-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-recursion-foreign.rs?ref=4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5", "patch": "@@ -15,7 +15,7 @@ extern crate libc;\n \n use libc::c_int;\n \n-#[link_name = \"check_static_recursion_foreign_helper\"]\n+#[link(name = \"check_static_recursion_foreign_helper\")]\n extern \"C\" {\n     #[allow(dead_code)]\n     static test_static: c_int;"}, {"sha": "06cc868994e32ef6bd7a1c0b99f3365624982838", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs-error.rs", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs-error.rs?ref=4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5", "patch": "@@ -0,0 +1,171 @@\n+// This is testing whether various builtin attributes signals an\n+// error or warning when put in \"weird\" places.\n+//\n+// (This file sits on its own because it actually signals an error,\n+// which would mess up the treatment of other cases in\n+// issue-43106-gating-of-builtin-attrs.rs)\n+\n+// ignore-tidy-linelength\n+\n+// Crate-level is accepted, though it is almost certainly unused?\n+#![inline]\n+\n+#[inline]\n+//~^ ERROR attribute should be applied to function or closure\n+mod inline {\n+    //~^ NOTE not a function or closure\n+\n+    mod inner { #![inline] }\n+    //~^ ERROR attribute should be applied to function or closure\n+    //~| NOTE not a function or closure\n+\n+    #[inline = \"2100\"] fn f() { }\n+    //~^ ERROR attribute must be of the form\n+    //~| WARN this was previously accepted\n+    //~| NOTE #[deny(ill_formed_attribute_input)]` on by default\n+    //~| NOTE for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n+\n+    #[inline] struct S;\n+    //~^ ERROR attribute should be applied to function or closure\n+    //~| NOTE not a function or closure\n+\n+    #[inline] type T = S;\n+    //~^ ERROR attribute should be applied to function or closure\n+    //~| NOTE not a function or closure\n+\n+    #[inline] impl S { }\n+    //~^ ERROR attribute should be applied to function or closure\n+    //~| NOTE not a function or closure\n+}\n+\n+#[no_link]\n+//~^ ERROR attribute should be applied to an `extern crate` item\n+mod no_link {\n+    //~^ NOTE not an `extern crate` item\n+\n+    mod inner { #![no_link] }\n+    //~^ ERROR attribute should be applied to an `extern crate` item\n+    //~| NOTE not an `extern crate` item\n+\n+    #[no_link] fn f() { }\n+    //~^ ERROR attribute should be applied to an `extern crate` item\n+    //~| NOTE not an `extern crate` item\n+\n+    #[no_link] struct S;\n+    //~^ ERROR attribute should be applied to an `extern crate` item\n+    //~| NOTE not an `extern crate` item\n+\n+    #[no_link]type T = S;\n+    //~^ ERROR attribute should be applied to an `extern crate` item\n+    //~| NOTE not an `extern crate` item\n+\n+    #[no_link] impl S { }\n+    //~^ ERROR attribute should be applied to an `extern crate` item\n+    //~| NOTE not an `extern crate` item\n+}\n+\n+#[cold]\n+//~^ ERROR attribute should be applied to a function\n+mod cold {\n+    //~^ NOTE not a function\n+\n+    mod inner { #![cold] }\n+    //~^ ERROR attribute should be applied to a function\n+    //~| NOTE not a function\n+\n+    #[cold] fn f() { }\n+\n+    #[cold] struct S;\n+    //~^ ERROR attribute should be applied to a function\n+    //~| NOTE not a function\n+\n+    #[cold] type T = S;\n+    //~^ ERROR attribute should be applied to a function\n+    //~| NOTE not a function\n+\n+    #[cold] impl S { }\n+    //~^ ERROR attribute should be applied to a function\n+    //~| NOTE not a function\n+}\n+\n+#[export_name = \"2200\"]\n+//~^ ERROR attribute should be applied to a function or static\n+mod export_name {\n+    //~^ NOTE not a function or static\n+\n+    mod inner { #![export_name=\"2200\"] }\n+    //~^ ERROR attribute should be applied to a function or static\n+    //~| NOTE not a function or static\n+\n+    #[export_name = \"2200\"] fn f() { }\n+\n+    #[export_name = \"2200\"] struct S;\n+    //~^ ERROR attribute should be applied to a function or static\n+    //~| NOTE not a function or static\n+\n+    #[export_name = \"2200\"] type T = S;\n+    //~^ ERROR attribute should be applied to a function or static\n+    //~| NOTE not a function or static\n+\n+    #[export_name = \"2200\"] impl S { }\n+    //~^ ERROR attribute should be applied to a function or static\n+    //~| NOTE not a function or static\n+}\n+\n+#[link_name = \"1900\"]\n+//~^ ERROR attribute should be applied to a foreign function or static\n+mod link_name {\n+    //~^ NOTE not a foreign function or static\n+\n+    #[link_name = \"1900\"]\n+    //~^ ERROR attribute should be applied to a foreign function or static\n+    //~| HELP try `#[link(name = \"1900\")]` instead\n+    extern { }\n+    //~^ NOTE not a foreign function or static\n+\n+    mod inner { #![link_name=\"1900\"] }\n+    //~^ ERROR attribute should be applied to a foreign function or static\n+    //~| NOTE not a foreign function or static\n+\n+    #[link_name = \"1900\"] fn f() { }\n+    //~^ ERROR attribute should be applied to a foreign function or static\n+    //~| NOTE not a foreign function or static\n+\n+    #[link_name = \"1900\"] struct S;\n+    //~^ ERROR attribute should be applied to a foreign function or static\n+    //~| NOTE not a foreign function or static\n+\n+    #[link_name = \"1900\"] type T = S;\n+    //~^ ERROR attribute should be applied to a foreign function or static\n+    //~| NOTE not a foreign function or static\n+\n+    #[link_name = \"1900\"] impl S { }\n+    //~^ ERROR attribute should be applied to a foreign function or static\n+    //~| NOTE not a foreign function or static\n+}\n+\n+#[link_section = \"1800\"]\n+//~^ ERROR attribute should be applied to a function or static\n+mod link_section {\n+    //~^ NOTE not a function or static\n+\n+    mod inner { #![link_section=\"1800\"] }\n+    //~^ ERROR attribute should be applied to a function or static\n+    //~| NOTE not a function or static\n+\n+    #[link_section = \"1800\"] fn f() { }\n+\n+    #[link_section = \"1800\"] struct S;\n+    //~^ ERROR attribute should be applied to a function or static\n+    //~| NOTE not a function or static\n+\n+    #[link_section = \"1800\"] type T = S;\n+    //~^ ERROR attribute should be applied to a function or static\n+    //~| NOTE not a function or static\n+\n+    #[link_section = \"1800\"] impl S { }\n+    //~^ ERROR attribute should be applied to a function or static\n+    //~| NOTE not a function or static\n+}\n+\n+fn main() {}"}, {"sha": "7b18774b6e55885219e3515f012f619d73a37fe8", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs-error.stderr", "status": "added", "additions": 274, "deletions": 0, "changes": 274, "blob_url": "https://github.com/rust-lang/rust/blob/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs-error.stderr?ref=4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5", "patch": "@@ -0,0 +1,274 @@\n+error: attribute must be of the form `#[inline]` or `#[inline(always|never)]`\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:22:5\n+   |\n+LL |     #[inline = \"2100\"] fn f() { }\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(ill_formed_attribute_input)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:13:1\n+   |\n+LL |   #[inline]\n+   |   ^^^^^^^^^\n+LL |\n+LL | / mod inline {\n+LL | |\n+LL | |\n+LL | |     mod inner { #![inline] }\n+...  |\n+LL | |\n+LL | | }\n+   | |_- not a function or closure\n+\n+error: attribute should be applied to an `extern crate` item\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:41:1\n+   |\n+LL |   #[no_link]\n+   |   ^^^^^^^^^^\n+LL |\n+LL | / mod no_link {\n+LL | |\n+LL | |\n+LL | |     mod inner { #![no_link] }\n+...  |\n+LL | |\n+LL | | }\n+   | |_- not an `extern crate` item\n+\n+error: attribute should be applied to a function\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:67:1\n+   |\n+LL |   #[cold]\n+   |   ^^^^^^^\n+LL |\n+LL | / mod cold {\n+LL | |\n+LL | |\n+LL | |     mod inner { #![cold] }\n+...  |\n+LL | |\n+LL | | }\n+   | |_- not a function\n+\n+error: attribute should be applied to a function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:91:1\n+   |\n+LL |   #[export_name = \"2200\"]\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | / mod export_name {\n+LL | |\n+LL | |\n+LL | |     mod inner { #![export_name=\"2200\"] }\n+...  |\n+LL | |\n+LL | | }\n+   | |_- not a function or static\n+\n+error: attribute should be applied to a foreign function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:115:1\n+   |\n+LL |   #[link_name = \"1900\"]\n+   |   ^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | / mod link_name {\n+LL | |\n+LL | |\n+LL | |     #[link_name = \"1900\"]\n+...  |\n+LL | |\n+LL | | }\n+   | |_- not a foreign function or static\n+\n+error: attribute should be applied to a function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:147:1\n+   |\n+LL |   #[link_section = \"1800\"]\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | / mod link_section {\n+LL | |\n+LL | |\n+LL | |     mod inner { #![link_section=\"1800\"] }\n+...  |\n+LL | |\n+LL | | }\n+   | |_- not a function or static\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:18:17\n+   |\n+LL |     mod inner { #![inline] }\n+   |     ------------^^^^^^^^^^-- not a function or closure\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:28:5\n+   |\n+LL |     #[inline] struct S;\n+   |     ^^^^^^^^^ --------- not a function or closure\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:32:5\n+   |\n+LL |     #[inline] type T = S;\n+   |     ^^^^^^^^^ ----------- not a function or closure\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:36:5\n+   |\n+LL |     #[inline] impl S { }\n+   |     ^^^^^^^^^ ---------- not a function or closure\n+\n+error: attribute should be applied to an `extern crate` item\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:46:17\n+   |\n+LL |     mod inner { #![no_link] }\n+   |     ------------^^^^^^^^^^^-- not an `extern crate` item\n+\n+error: attribute should be applied to an `extern crate` item\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:50:5\n+   |\n+LL |     #[no_link] fn f() { }\n+   |     ^^^^^^^^^^ ---------- not an `extern crate` item\n+\n+error: attribute should be applied to an `extern crate` item\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:54:5\n+   |\n+LL |     #[no_link] struct S;\n+   |     ^^^^^^^^^^ --------- not an `extern crate` item\n+\n+error: attribute should be applied to an `extern crate` item\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:58:5\n+   |\n+LL |     #[no_link]type T = S;\n+   |     ^^^^^^^^^^----------- not an `extern crate` item\n+\n+error: attribute should be applied to an `extern crate` item\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:62:5\n+   |\n+LL |     #[no_link] impl S { }\n+   |     ^^^^^^^^^^ ---------- not an `extern crate` item\n+\n+error: attribute should be applied to a function\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:72:17\n+   |\n+LL |     mod inner { #![cold] }\n+   |     ------------^^^^^^^^-- not a function\n+\n+error: attribute should be applied to a function\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:78:5\n+   |\n+LL |     #[cold] struct S;\n+   |     ^^^^^^^ --------- not a function\n+\n+error: attribute should be applied to a function\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:82:5\n+   |\n+LL |     #[cold] type T = S;\n+   |     ^^^^^^^ ----------- not a function\n+\n+error: attribute should be applied to a function\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:86:5\n+   |\n+LL |     #[cold] impl S { }\n+   |     ^^^^^^^ ---------- not a function\n+\n+error: attribute should be applied to a function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:96:17\n+   |\n+LL |     mod inner { #![export_name=\"2200\"] }\n+   |     ------------^^^^^^^^^^^^^^^^^^^^^^-- not a function or static\n+\n+error: attribute should be applied to a function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:102:5\n+   |\n+LL |     #[export_name = \"2200\"] struct S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ --------- not a function or static\n+\n+error: attribute should be applied to a function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:106:5\n+   |\n+LL |     #[export_name = \"2200\"] type T = S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ ----------- not a function or static\n+\n+error: attribute should be applied to a function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:110:5\n+   |\n+LL |     #[export_name = \"2200\"] impl S { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ ---------- not a function or static\n+\n+error: attribute should be applied to a foreign function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:120:5\n+   |\n+LL |     #[link_name = \"1900\"]\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     extern { }\n+   |     ---------- not a foreign function or static\n+   |\n+help: try `#[link(name = \"1900\")]` instead\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:120:5\n+   |\n+LL |     #[link_name = \"1900\"]\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: attribute should be applied to a foreign function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:126:17\n+   |\n+LL |     mod inner { #![link_name=\"1900\"] }\n+   |     ------------^^^^^^^^^^^^^^^^^^^^-- not a foreign function or static\n+\n+error: attribute should be applied to a foreign function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:130:5\n+   |\n+LL |     #[link_name = \"1900\"] fn f() { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^ ---------- not a foreign function or static\n+\n+error: attribute should be applied to a foreign function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:134:5\n+   |\n+LL |     #[link_name = \"1900\"] struct S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^ --------- not a foreign function or static\n+\n+error: attribute should be applied to a foreign function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:138:5\n+   |\n+LL |     #[link_name = \"1900\"] type T = S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^ ----------- not a foreign function or static\n+\n+error: attribute should be applied to a foreign function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:142:5\n+   |\n+LL |     #[link_name = \"1900\"] impl S { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^ ---------- not a foreign function or static\n+\n+error: attribute should be applied to a function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:152:17\n+   |\n+LL |     mod inner { #![link_section=\"1800\"] }\n+   |     ------------^^^^^^^^^^^^^^^^^^^^^^^-- not a function or static\n+\n+error: attribute should be applied to a function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:158:5\n+   |\n+LL |     #[link_section = \"1800\"] struct S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ --------- not a function or static\n+\n+error: attribute should be applied to a function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:162:5\n+   |\n+LL |     #[link_section = \"1800\"] type T = S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ ----------- not a function or static\n+\n+error: attribute should be applied to a function or static\n+  --> $DIR/issue-43106-gating-of-builtin-attrs-error.rs:166:5\n+   |\n+LL |     #[link_section = \"1800\"] impl S { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ ---------- not a function or static\n+\n+error: aborting due to 34 previous errors\n+\n+For more information about this error, try `rustc --explain E0518`."}, {"sha": "aea1ce6f5aeae3c9cd737e6993e409843b29089e", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 1, "deletions": 72, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs?ref=4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5", "patch": "@@ -72,7 +72,7 @@\n #![doc = \"2400\"]\n #![cold]\n #![export_name = \"2200\"]\n-// see issue-43106-gating-of-inline.rs\n+// see issue-43106-gating-of-builtin-attrs-error.rs\n #![link()]\n #![link_name = \"1900\"]\n #![link_section = \"1800\"]\n@@ -367,25 +367,6 @@ mod no_mangle {\n     #[no_mangle] impl S { }\n }\n \n-#[no_link]\n-//~^ WARN unused attribute\n-mod no_link {\n-    mod inner { #![no_link] }\n-    //~^ WARN unused attribute\n-\n-    #[no_link] fn f() { }\n-    //~^ WARN unused attribute\n-\n-    #[no_link] struct S;\n-    //~^ WARN unused attribute\n-\n-    #[no_link]type T = S;\n-    //~^ WARN unused attribute\n-\n-    #[no_link] impl S { }\n-    //~^ WARN unused attribute\n-}\n-\n #[should_panic]\n //~^ WARN unused attribute\n mod should_panic {\n@@ -524,32 +505,6 @@ mod doc {\n     #[doc = \"2400\"] impl S { }\n }\n \n-#[cold]\n-mod cold {\n-    mod inner { #![cold] }\n-\n-    #[cold] fn f() { }\n-\n-    #[cold] struct S;\n-\n-    #[cold] type T = S;\n-\n-    #[cold] impl S { }\n-}\n-\n-#[export_name = \"2200\"]\n-mod export_name {\n-    mod inner { #![export_name=\"2200\"] }\n-\n-    #[export_name = \"2200\"] fn f() { }\n-\n-    #[export_name = \"2200\"] struct S;\n-\n-    #[export_name = \"2200\"] type T = S;\n-\n-    #[export_name = \"2200\"] impl S { }\n-}\n-\n // Note that this is a `check-pass` test, so it\n // will never invoke the linker. These are here nonetheless to point\n // out that we allow them at non-crate-level (though I do not know\n@@ -568,32 +523,6 @@ mod link {\n     #[link()] impl S { }\n }\n \n-#[link_name = \"1900\"]\n-mod link_name {\n-    mod inner { #![link_name=\"1900\"] }\n-\n-    #[link_name = \"1900\"] fn f() { }\n-\n-    #[link_name = \"1900\"] struct S;\n-\n-    #[link_name = \"1900\"] type T = S;\n-\n-    #[link_name = \"1900\"] impl S { }\n-}\n-\n-#[link_section = \"1800\"]\n-mod link_section {\n-    mod inner { #![link_section=\"1800\"] }\n-\n-    #[link_section = \"1800\"] fn f() { }\n-\n-    #[link_section = \"1800\"] struct S;\n-\n-    #[link_section = \"1800\"] type T = S;\n-\n-    #[link_section = \"1800\"] impl S { }\n-}\n-\n struct StructForDeprecated;\n \n #[deprecated]"}, {"sha": "ebb81275df1390ed5edde6943b2960e6ea534755", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 114, "deletions": 150, "changes": 264, "blob_url": "https://github.com/rust-lang/rust/blob/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5", "patch": "@@ -173,13 +173,13 @@ LL |     #[deny(x5100)] impl S { }\n    |            ^^^^^\n \n warning: `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:466:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:447:1\n    |\n LL | #[macro_escape]\n    | ^^^^^^^^^^^^^^^\n \n warning: `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:469:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:450:17\n    |\n LL |     mod inner { #![macro_escape] }\n    |                 ^^^^^^^^^^^^^^^^\n@@ -463,707 +463,671 @@ LL | #[automatically_derived]\n warning: unused attribute\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:373:17\n    |\n-LL |     mod inner { #![no_link] }\n-   |                 ^^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:376:5\n-   |\n-LL |     #[no_link] fn f() { }\n-   |     ^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:379:5\n-   |\n-LL |     #[no_link] struct S;\n-   |     ^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:382:5\n-   |\n-LL |     #[no_link]type T = S;\n-   |     ^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:385:5\n-   |\n-LL |     #[no_link] impl S { }\n-   |     ^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:370:1\n-   |\n-LL | #[no_link]\n-   | ^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:392:17\n-   |\n LL |     mod inner { #![should_panic] }\n    |                 ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:395:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:376:5\n    |\n LL |     #[should_panic] fn f() { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:398:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:379:5\n    |\n LL |     #[should_panic] struct S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:401:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:382:5\n    |\n LL |     #[should_panic] type T = S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:404:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:385:5\n    |\n LL |     #[should_panic] impl S { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:389:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:370:1\n    |\n LL | #[should_panic]\n    | ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:411:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:392:17\n    |\n LL |     mod inner { #![ignore] }\n    |                 ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:414:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:395:5\n    |\n LL |     #[ignore] fn f() { }\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:417:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:398:5\n    |\n LL |     #[ignore] struct S;\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:420:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:401:5\n    |\n LL |     #[ignore] type T = S;\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:423:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:404:5\n    |\n LL |     #[ignore] impl S { }\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:408:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:389:1\n    |\n LL | #[ignore]\n    | ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:430:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:411:17\n    |\n LL |     mod inner { #![no_implicit_prelude] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:433:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:414:5\n    |\n LL |     #[no_implicit_prelude] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:436:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:417:5\n    |\n LL |     #[no_implicit_prelude] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:439:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:420:5\n    |\n LL |     #[no_implicit_prelude] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:442:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:423:5\n    |\n LL |     #[no_implicit_prelude] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:427:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:408:1\n    |\n LL | #[no_implicit_prelude]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:449:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:430:17\n    |\n LL |     mod inner { #![reexport_test_harness_main=\"2900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:452:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:433:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:455:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:436:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:458:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:439:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:461:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:442:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:446:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:427:1\n    |\n LL | #[reexport_test_harness_main = \"2900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:472:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:453:5\n    |\n LL |     #[macro_escape] fn f() { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:475:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:456:5\n    |\n LL |     #[macro_escape] struct S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:478:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:459:5\n    |\n LL |     #[macro_escape] type T = S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:481:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:462:5\n    |\n LL |     #[macro_escape] impl S { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:489:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:470:17\n    |\n LL |     mod inner { #![no_std] }\n    |                 ^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:489:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:470:17\n    |\n LL |     mod inner { #![no_std] }\n    |                 ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:493:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:474:5\n    |\n LL |     #[no_std] fn f() { }\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:493:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:474:5\n    |\n LL |     #[no_std] fn f() { }\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:497:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:478:5\n    |\n LL |     #[no_std] struct S;\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:497:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:478:5\n    |\n LL |     #[no_std] struct S;\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:501:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:482:5\n    |\n LL |     #[no_std] type T = S;\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:501:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:482:5\n    |\n LL |     #[no_std] type T = S;\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:505:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:486:5\n    |\n LL |     #[no_std] impl S { }\n    |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:505:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:486:5\n    |\n LL |     #[no_std] impl S { }\n    |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:485:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:466:1\n    |\n LL | #[no_std]\n    | ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:485:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:466:1\n    |\n LL | #[no_std]\n    | ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:644:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:573:17\n    |\n LL |     mod inner { #![crate_name=\"0900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:644:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:573:17\n    |\n LL |     mod inner { #![crate_name=\"0900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:648:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:577:5\n    |\n LL |     #[crate_name = \"0900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:648:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:577:5\n    |\n LL |     #[crate_name = \"0900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:652:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:581:5\n    |\n LL |     #[crate_name = \"0900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:652:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:581:5\n    |\n LL |     #[crate_name = \"0900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:656:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:585:5\n    |\n LL |     #[crate_name = \"0900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:656:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:585:5\n    |\n LL |     #[crate_name = \"0900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:660:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:589:5\n    |\n LL |     #[crate_name = \"0900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:660:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:589:5\n    |\n LL |     #[crate_name = \"0900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:640:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:569:1\n    |\n LL | #[crate_name = \"0900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:640:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:569:1\n    |\n LL | #[crate_name = \"0900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:669:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:598:17\n    |\n LL |     mod inner { #![crate_type=\"0800\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:669:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:598:17\n    |\n LL |     mod inner { #![crate_type=\"0800\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:673:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:602:5\n    |\n LL |     #[crate_type = \"0800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:673:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:602:5\n    |\n LL |     #[crate_type = \"0800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:677:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:606:5\n    |\n LL |     #[crate_type = \"0800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:677:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:606:5\n    |\n LL |     #[crate_type = \"0800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:681:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:610:5\n    |\n LL |     #[crate_type = \"0800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:681:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:610:5\n    |\n LL |     #[crate_type = \"0800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:685:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:614:5\n    |\n LL |     #[crate_type = \"0800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:685:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:614:5\n    |\n LL |     #[crate_type = \"0800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:665:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:594:1\n    |\n LL | #[crate_type = \"0800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:665:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:594:1\n    |\n LL | #[crate_type = \"0800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:694:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:623:17\n    |\n LL |     mod inner { #![feature(x0600)] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:694:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:623:17\n    |\n LL |     mod inner { #![feature(x0600)] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:698:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:627:5\n    |\n LL |     #[feature(x0600)] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:698:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:627:5\n    |\n LL |     #[feature(x0600)] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:702:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:631:5\n    |\n LL |     #[feature(x0600)] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:702:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:631:5\n    |\n LL |     #[feature(x0600)] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:706:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:635:5\n    |\n LL |     #[feature(x0600)] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:706:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:635:5\n    |\n LL |     #[feature(x0600)] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:710:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:639:5\n    |\n LL |     #[feature(x0600)] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:710:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:639:5\n    |\n LL |     #[feature(x0600)] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:690:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:619:1\n    |\n LL | #[feature(x0600)]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:690:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:619:1\n    |\n LL | #[feature(x0600)]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:720:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:649:17\n    |\n LL |     mod inner { #![no_main] }\n    |                 ^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:720:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:649:17\n    |\n LL |     mod inner { #![no_main] }\n    |                 ^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:724:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:653:5\n    |\n LL |     #[no_main] fn f() { }\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:724:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:653:5\n    |\n LL |     #[no_main] fn f() { }\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:728:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:657:5\n    |\n LL |     #[no_main] struct S;\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:728:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:657:5\n    |\n LL |     #[no_main] struct S;\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:732:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:661:5\n    |\n LL |     #[no_main] type T = S;\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:732:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:661:5\n    |\n LL |     #[no_main] type T = S;\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:736:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:665:5\n    |\n LL |     #[no_main] impl S { }\n    |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:736:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:665:5\n    |\n LL |     #[no_main] impl S { }\n    |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:716:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:645:1\n    |\n LL | #[no_main]\n    | ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:716:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:645:1\n    |\n LL | #[no_main]\n    | ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:758:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:687:17\n    |\n LL |     mod inner { #![recursion_limit=\"0200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:758:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:687:17\n    |\n LL |     mod inner { #![recursion_limit=\"0200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:762:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:691:5\n    |\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:762:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:691:5\n    |\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:766:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:695:5\n    |\n LL |     #[recursion_limit=\"0200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:766:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:695:5\n    |\n LL |     #[recursion_limit=\"0200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:770:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:699:5\n    |\n LL |     #[recursion_limit=\"0200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:770:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:699:5\n    |\n LL |     #[recursion_limit=\"0200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:774:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:703:5\n    |\n LL |     #[recursion_limit=\"0200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:774:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:703:5\n    |\n LL |     #[recursion_limit=\"0200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:754:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:683:1\n    |\n LL | #[recursion_limit=\"0200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:754:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:683:1\n    |\n LL | #[recursion_limit=\"0200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:783:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:712:17\n    |\n LL |     mod inner { #![type_length_limit=\"0100\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:783:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:712:17\n    |\n LL |     mod inner { #![type_length_limit=\"0100\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:787:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:716:5\n    |\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:787:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:716:5\n    |\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:791:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:720:5\n    |\n LL |     #[type_length_limit=\"0100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:791:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:720:5\n    |\n LL |     #[type_length_limit=\"0100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:795:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:724:5\n    |\n LL |     #[type_length_limit=\"0100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:795:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:724:5\n    |\n LL |     #[type_length_limit=\"0100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:799:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:728:5\n    |\n LL |     #[type_length_limit=\"0100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:799:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:728:5\n    |\n LL |     #[type_length_limit=\"0100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:779:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:708:1\n    |\n LL | #[type_length_limit=\"0100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:779:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:708:1\n    |\n LL | #[type_length_limit=\"0100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1234,5 +1198,5 @@ warning: unused attribute\n LL | #![proc_macro_derive()]\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: 203 warnings emitted\n+warning: 197 warnings emitted\n "}, {"sha": "80c602eb00afb61503e7dca2a5ef9408cd0d41bf", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-inline.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/de921ab3c3aa25d65b1476d77285da1ca99af397/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de921ab3c3aa25d65b1476d77285da1ca99af397/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs?ref=de921ab3c3aa25d65b1476d77285da1ca99af397", "patch": "@@ -1,31 +0,0 @@\n-// This is testing whether `#[inline]` signals an error or warning\n-// when put in \"weird\" places.\n-//\n-// (This file sits on its own because it actually signals an error,\n-// which would mess up the treatment of other cases in\n-// issue-43106-gating-of-builtin-attrs.rs)\n-\n-// Crate-level is accepted, though it is almost certainly unused?\n-#![inline]\n-\n-#[inline]\n-//~^ ERROR attribute should be applied to function or closure\n-mod inline {\n-    mod inner { #![inline] }\n-    //~^ ERROR attribute should be applied to function or closure\n-\n-    #[inline = \"2100\"] fn f() { }\n-    //~^ ERROR attribute must be of the form\n-    //~| WARN this was previously accepted\n-\n-    #[inline] struct S;\n-    //~^ ERROR attribute should be applied to function or closure\n-\n-    #[inline] type T = S;\n-    //~^ ERROR attribute should be applied to function or closure\n-\n-    #[inline] impl S { }\n-    //~^ ERROR attribute should be applied to function or closure\n-}\n-\n-fn main() {}"}, {"sha": "0987937192fe21f9ea681bfb12770f69ff9deedf", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-inline.stderr", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/de921ab3c3aa25d65b1476d77285da1ca99af397/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de921ab3c3aa25d65b1476d77285da1ca99af397/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr?ref=de921ab3c3aa25d65b1476d77285da1ca99af397", "patch": "@@ -1,52 +0,0 @@\n-error: attribute must be of the form `#[inline]` or `#[inline(always|never)]`\n-  --> $DIR/issue-43106-gating-of-inline.rs:17:5\n-   |\n-LL |     #[inline = \"2100\"] fn f() { }\n-   |     ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[deny(ill_formed_attribute_input)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n-\n-error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/issue-43106-gating-of-inline.rs:11:1\n-   |\n-LL |   #[inline]\n-   |   ^^^^^^^^^\n-LL |\n-LL | / mod inline {\n-LL | |     mod inner { #![inline] }\n-LL | |\n-LL | |\n-...  |\n-LL | |\n-LL | | }\n-   | |_- not a function or closure\n-\n-error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/issue-43106-gating-of-inline.rs:14:17\n-   |\n-LL |     mod inner { #![inline] }\n-   |     ------------^^^^^^^^^^-- not a function or closure\n-\n-error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/issue-43106-gating-of-inline.rs:21:5\n-   |\n-LL |     #[inline] struct S;\n-   |     ^^^^^^^^^ --------- not a function or closure\n-\n-error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/issue-43106-gating-of-inline.rs:24:5\n-   |\n-LL |     #[inline] type T = S;\n-   |     ^^^^^^^^^ ----------- not a function or closure\n-\n-error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/issue-43106-gating-of-inline.rs:27:5\n-   |\n-LL |     #[inline] impl S { }\n-   |     ^^^^^^^^^ ---------- not a function or closure\n-\n-error: aborting due to 6 previous errors\n-\n-For more information about this error, try `rustc --explain E0518`."}, {"sha": "e04eff7cc4d89943086787285be27d23a2d3ce9f", "filename": "src/test/ui/issues/issue-2214.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/src%2Ftest%2Fui%2Fissues%2Fissue-2214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/src%2Ftest%2Fui%2Fissues%2Fissue-2214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2214.rs?ref=4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5", "patch": "@@ -23,7 +23,7 @@ fn lgamma(n: c_double, value: &mut isize) -> c_double {\n mod m {\n     use libc::{c_double, c_int};\n \n-    #[link_name = \"m\"]\n+    #[link(name = \"m\")]\n     extern {\n         #[cfg(any(all(unix, not(target_os = \"vxworks\")), target_os = \"cloudabi\"))]\n         #[link_name=\"lgamma_r\"]"}, {"sha": "50f50ed153229f528836513494f6ca24dec982e7", "filename": "src/test/ui/issues/issue-47725.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/src%2Ftest%2Fui%2Fissues%2Fissue-47725.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/src%2Ftest%2Fui%2Fissues%2Fissue-47725.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47725.rs?ref=4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5", "patch": "@@ -0,0 +1,22 @@\n+#[link_name = \"foo\"] //~ ERROR attribute should be applied to a foreign function or static\n+struct Foo; //~ NOTE not a foreign function or static\n+\n+#[link_name = \"foobar\"]\n+//~^ ERROR attribute should be applied to a foreign function or static\n+//~| HELP try `#[link(name = \"foobar\")]` instead\n+extern \"C\" {\n+    fn foo() -> u32;\n+}\n+//~^^^ NOTE not a foreign function or static\n+\n+#[link_name]\n+//~^ ERROR malformed `link_name` attribute input\n+//~| HELP must be of the form\n+//~| ERROR attribute should be applied to a foreign function or static\n+//~| HELP try `#[link(name = \"...\")]` instead\n+extern \"C\" {\n+    fn bar() -> u32;\n+}\n+//~^^^ NOTE not a foreign function or static\n+\n+fn main() {}"}, {"sha": "8623317c7a0d4d583a49ad8ade97638dab52e5f9", "filename": "src/test/ui/issues/issue-47725.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/src%2Ftest%2Fui%2Fissues%2Fissue-47725.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/src%2Ftest%2Fui%2Fissues%2Fissue-47725.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47725.stderr?ref=4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5", "patch": "@@ -0,0 +1,50 @@\n+error: malformed `link_name` attribute input\n+  --> $DIR/issue-47725.rs:12:1\n+   |\n+LL | #[link_name]\n+   | ^^^^^^^^^^^^ help: must be of the form: `#[link_name = \"name\"]`\n+\n+error: attribute should be applied to a foreign function or static\n+  --> $DIR/issue-47725.rs:1:1\n+   |\n+LL | #[link_name = \"foo\"]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+LL | struct Foo;\n+   | ----------- not a foreign function or static\n+\n+error: attribute should be applied to a foreign function or static\n+  --> $DIR/issue-47725.rs:4:1\n+   |\n+LL |   #[link_name = \"foobar\"]\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | / extern \"C\" {\n+LL | |     fn foo() -> u32;\n+LL | | }\n+   | |_- not a foreign function or static\n+   |\n+help: try `#[link(name = \"foobar\")]` instead\n+  --> $DIR/issue-47725.rs:4:1\n+   |\n+LL | #[link_name = \"foobar\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: attribute should be applied to a foreign function or static\n+  --> $DIR/issue-47725.rs:12:1\n+   |\n+LL |   #[link_name]\n+   |   ^^^^^^^^^^^^\n+...\n+LL | / extern \"C\" {\n+LL | |     fn bar() -> u32;\n+LL | | }\n+   | |_- not a foreign function or static\n+   |\n+help: try `#[link(name = \"...\")]` instead\n+  --> $DIR/issue-47725.rs:12:1\n+   |\n+LL | #[link_name]\n+   | ^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "eb0cf27ffbb706ac69bb8c8921b4cd08f127b335", "filename": "src/test/ui/issues/issue-54044.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/src%2Ftest%2Fui%2Fissues%2Fissue-54044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/src%2Ftest%2Fui%2Fissues%2Fissue-54044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54044.rs?ref=4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5", "patch": "@@ -0,0 +1,7 @@\n+#[cold] //~ ERROR attribute should be applied to a function\n+struct Foo; //~ NOTE not a function\n+\n+fn main() {\n+    #[cold] //~ ERROR attribute should be applied to a function\n+    5; //~ NOTE not a function\n+}"}, {"sha": "25616292607107ea150f190fb7a222afa9542b9e", "filename": "src/test/ui/issues/issue-54044.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/src%2Ftest%2Fui%2Fissues%2Fissue-54044.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/src%2Ftest%2Fui%2Fissues%2Fissue-54044.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54044.stderr?ref=4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5", "patch": "@@ -0,0 +1,18 @@\n+error: attribute should be applied to a function\n+  --> $DIR/issue-54044.rs:1:1\n+   |\n+LL | #[cold]\n+   | ^^^^^^^\n+LL | struct Foo;\n+   | ----------- not a function\n+\n+error: attribute should be applied to a function\n+  --> $DIR/issue-54044.rs:5:5\n+   |\n+LL |     #[cold]\n+   |     ^^^^^^^\n+LL |     5;\n+   |     - not a function\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "1feddc4ebd89f3b66c30c32bd67bdf38e0744937", "filename": "src/test/ui/macros/issue-68060.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.rs?ref=4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5", "patch": "@@ -2,10 +2,11 @@ fn main() {\n     (0..)\n         .map(\n             #[target_feature(enable = \"\")]\n-            //~^ ERROR: the feature named `` is not valid for this target\n-            //~| ERROR: `#[target_feature(..)]` can only be applied to `unsafe` functions\n+            //~^ ERROR: attribute should be applied to a function\n+            //~| ERROR: the feature named `` is not valid for this target\n             #[track_caller]\n-            //~^ ERROR: `#[track_caller]` requires Rust ABI\n+            //~^ ERROR: attribute should be applied to function [E0739]\n+            //~| ERROR: `#[track_caller]` requires Rust ABI [E0737]\n             |_| (),\n         )\n         .next();"}, {"sha": "5def8780fbf029cf9401975cb61f1abeed709c43", "filename": "src/test/ui/macros/issue-68060.stderr", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-68060.stderr?ref=4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5", "patch": "@@ -1,14 +1,20 @@\n-error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n+error: attribute should be applied to a function\n   --> $DIR/issue-68060.rs:4:13\n    |\n LL |             #[target_feature(enable = \"\")]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL |             |_| (),\n-   |             ------ not an `unsafe` function\n+   |             ------ not a function\n+\n+error[E0739]: attribute should be applied to function\n+  --> $DIR/issue-68060.rs:7:13\n    |\n-   = note: see issue #69098 <https://github.com/rust-lang/rust/issues/69098> for more information\n-   = help: add `#![feature(target_feature_11)]` to the crate attributes to enable\n+LL |             #[track_caller]\n+   |             ^^^^^^^^^^^^^^^\n+...\n+LL |             |_| (),\n+   |             ------ not a function\n \n error: the feature named `` is not valid for this target\n   --> $DIR/issue-68060.rs:4:30\n@@ -17,12 +23,12 @@ LL |             #[target_feature(enable = \"\")]\n    |                              ^^^^^^^^^^^ `` is not valid for this target\n \n error[E0737]: `#[track_caller]` requires Rust ABI\n-  --> $DIR/issue-68060.rs:7:13\n+  --> $DIR/issue-68060.rs:8:13\n    |\n LL |             #[track_caller]\n    |             ^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0658, E0737.\n-For more information about an error, try `rustc --explain E0658`.\n+Some errors have detailed explanations: E0737, E0739.\n+For more information about an error, try `rustc --explain E0737`."}, {"sha": "3c2e34bb8c3e1a5740c48f954d9d366f0e34a50b", "filename": "src/test/ui/target-feature/invalid-attribute.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.rs?ref=4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5", "patch": "@@ -79,13 +79,16 @@ impl Quux for Foo {\n }\n \n fn main() {\n+    #[target_feature(enable = \"sse2\")]\n+    //~^ ERROR attribute should be applied to a function\n     unsafe {\n         foo();\n         bar();\n     }\n+    //~^^^^ NOTE not a function\n+\n     #[target_feature(enable = \"sse2\")]\n-    //~^ ERROR `#[target_feature(..)]` can only be applied to `unsafe` functions\n-    //~| NOTE see issue #69098\n+    //~^ ERROR attribute should be applied to a function\n     || {};\n-    //~^ NOTE not an `unsafe` function\n+    //~^ NOTE not a function\n }"}, {"sha": "c06538c5b8fe7f98403de7c1a7b7b0b4bf47c318", "filename": "src/test/ui/target-feature/invalid-attribute.stderr", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Finvalid-attribute.stderr?ref=4efe97a3d9a5f2d295bc2fa9bd2bb90edf1986d5", "patch": "@@ -94,17 +94,26 @@ error: cannot use `#[inline(always)]` with `#[target_feature]`\n LL | #[inline(always)]\n    | ^^^^^^^^^^^^^^^^^\n \n-error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n-  --> $DIR/invalid-attribute.rs:86:5\n+error: attribute should be applied to a function\n+  --> $DIR/invalid-attribute.rs:82:5\n+   |\n+LL |       #[target_feature(enable = \"sse2\")]\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | /     unsafe {\n+LL | |         foo();\n+LL | |         bar();\n+LL | |     }\n+   | |_____- not a function\n+\n+error: attribute should be applied to a function\n+  --> $DIR/invalid-attribute.rs:90:5\n    |\n LL |     #[target_feature(enable = \"sse2\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-...\n+LL |\n LL |     || {};\n-   |     ----- not an `unsafe` function\n-   |\n-   = note: see issue #69098 <https://github.com/rust-lang/rust/issues/69098> for more information\n-   = help: add `#![feature(target_feature_11)]` to the crate attributes to enable\n+   |     ----- not a function\n \n error[E0658]: `#[target_feature(..)]` can only be applied to `unsafe` functions\n   --> $DIR/invalid-attribute.rs:74:5\n@@ -118,6 +127,6 @@ LL |     fn foo() {}\n    = note: see issue #69098 <https://github.com/rust-lang/rust/issues/69098> for more information\n    = help: add `#![feature(target_feature_11)]` to the crate attributes to enable\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 15 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}]}