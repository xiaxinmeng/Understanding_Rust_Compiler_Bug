{"sha": "d29dc057ba53063a9ce7f1b307a89759a096f4ac", "node_id": "C_kwDOAAsO6NoAKGQyOWRjMDU3YmE1MzA2M2E5Y2U3ZjFiMzA3YTg5NzU5YTA5NmY0YWM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-20T19:34:46Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-27T18:22:45Z"}, "message": "Do not merge locals that have their address taken.", "tree": {"sha": "d98b433eb8f8974728b565e54caabf1a86f6801e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d98b433eb8f8974728b565e54caabf1a86f6801e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d29dc057ba53063a9ce7f1b307a89759a096f4ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d29dc057ba53063a9ce7f1b307a89759a096f4ac", "html_url": "https://github.com/rust-lang/rust/commit/d29dc057ba53063a9ce7f1b307a89759a096f4ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d29dc057ba53063a9ce7f1b307a89759a096f4ac/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9096d31dcc292bad1281e0ab37e55d9a3aac5dc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9096d31dcc292bad1281e0ab37e55d9a3aac5dc4", "html_url": "https://github.com/rust-lang/rust/commit/9096d31dcc292bad1281e0ab37e55d9a3aac5dc4"}], "stats": {"total": 497, "additions": 329, "deletions": 168}, "files": [{"sha": "182b3015dd7d784c4ad215d834d749e2915d73e6", "filename": "compiler/rustc_mir_transform/src/copy_prop.rs", "status": "modified", "additions": 58, "deletions": 13, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/d29dc057ba53063a9ce7f1b307a89759a096f4ac/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29dc057ba53063a9ce7f1b307a89759a096f4ac/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs?ref=d29dc057ba53063a9ce7f1b307a89759a096f4ac", "patch": "@@ -3,6 +3,7 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n+use rustc_mir_dataflow::impls::borrowed_locals;\n \n use crate::ssa::SsaLocals;\n use crate::MirPass;\n@@ -33,7 +34,8 @@ impl<'tcx> MirPass<'tcx> for CopyProp {\n \n fn propagate_ssa<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     let param_env = tcx.param_env_reveal_all_normalized(body.source.def_id());\n-    let ssa = SsaLocals::new(tcx, param_env, body);\n+    let borrowed_locals = borrowed_locals(body);\n+    let ssa = SsaLocals::new(tcx, param_env, body, &borrowed_locals);\n \n     let fully_moved = fully_moved_locals(&ssa, body);\n     debug!(?fully_moved);\n@@ -42,14 +44,19 @@ fn propagate_ssa<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     for (local, &head) in ssa.copy_classes().iter_enumerated() {\n         if local != head {\n             storage_to_remove.insert(head);\n-            storage_to_remove.insert(local);\n         }\n     }\n \n     let any_replacement = ssa.copy_classes().iter_enumerated().any(|(l, &h)| l != h);\n \n-    Replacer { tcx, copy_classes: &ssa.copy_classes(), fully_moved, storage_to_remove }\n-        .visit_body_preserves_cfg(body);\n+    Replacer {\n+        tcx,\n+        copy_classes: &ssa.copy_classes(),\n+        fully_moved,\n+        borrowed_locals,\n+        storage_to_remove,\n+    }\n+    .visit_body_preserves_cfg(body);\n \n     if any_replacement {\n         crate::simplify::remove_unused_definitions(body);\n@@ -94,6 +101,7 @@ struct Replacer<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     fully_moved: BitSet<Local>,\n     storage_to_remove: BitSet<Local>,\n+    borrowed_locals: BitSet<Local>,\n     copy_classes: &'a IndexVec<Local, Local>,\n }\n \n@@ -102,8 +110,45 @@ impl<'tcx> MutVisitor<'tcx> for Replacer<'_, 'tcx> {\n         self.tcx\n     }\n \n-    fn visit_local(&mut self, local: &mut Local, _: PlaceContext, _: Location) {\n-        *local = self.copy_classes[*local];\n+    fn visit_local(&mut self, local: &mut Local, ctxt: PlaceContext, _: Location) {\n+        let new_local = self.copy_classes[*local];\n+        match ctxt {\n+            // Do not modify the local in storage statements.\n+            PlaceContext::NonUse(NonUseContext::StorageLive | NonUseContext::StorageDead) => {}\n+            // The local should have been marked as non-SSA.\n+            PlaceContext::MutatingUse(_) => assert_eq!(*local, new_local),\n+            // We access the value.\n+            _ => *local = new_local,\n+        }\n+    }\n+\n+    fn visit_place(&mut self, place: &mut Place<'tcx>, ctxt: PlaceContext, loc: Location) {\n+        if let Some(new_projection) = self.process_projection(&place.projection, loc) {\n+            place.projection = self.tcx().intern_place_elems(&new_projection);\n+        }\n+\n+        let observes_address = match ctxt {\n+            PlaceContext::NonMutatingUse(\n+                NonMutatingUseContext::SharedBorrow\n+                | NonMutatingUseContext::ShallowBorrow\n+                | NonMutatingUseContext::UniqueBorrow\n+                | NonMutatingUseContext::AddressOf,\n+            ) => true,\n+            // For debuginfo, merging locals is ok.\n+            PlaceContext::NonUse(NonUseContext::VarDebugInfo) => {\n+                self.borrowed_locals.contains(place.local)\n+            }\n+            _ => false,\n+        };\n+        if observes_address && !place.is_indirect() {\n+            // We observe the address of `place.local`. Do not replace it.\n+        } else {\n+            self.visit_local(\n+                &mut place.local,\n+                PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n+                loc,\n+            )\n+        }\n     }\n \n     fn visit_operand(&mut self, operand: &mut Operand<'tcx>, loc: Location) {\n@@ -117,17 +162,17 @@ impl<'tcx> MutVisitor<'tcx> for Replacer<'_, 'tcx> {\n     }\n \n     fn visit_statement(&mut self, stmt: &mut Statement<'tcx>, loc: Location) {\n-        if let StatementKind::StorageLive(l) | StatementKind::StorageDead(l) = stmt.kind\n+        if let StatementKind::StorageDead(l) = stmt.kind\n             && self.storage_to_remove.contains(l)\n         {\n             stmt.make_nop();\n-        }\n-        if let StatementKind::Assign(box (ref place, _)) = stmt.kind\n-            && let Some(l) = place.as_local()\n-            && self.copy_classes[l] != l\n+        } else if let StatementKind::Assign(box (ref place, ref mut rvalue)) = stmt.kind\n+            && place.as_local().is_some()\n         {\n-            stmt.make_nop();\n+            // Do not replace assignments.\n+            self.visit_rvalue(rvalue, loc)\n+        } else {\n+            self.super_statement(stmt, loc);\n         }\n-        self.super_statement(stmt, loc);\n     }\n }"}, {"sha": "b6e0c6e6150986bb7df00b22d074dba72fb74366", "filename": "compiler/rustc_mir_transform/src/ssa.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d29dc057ba53063a9ce7f1b307a89759a096f4ac/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29dc057ba53063a9ce7f1b307a89759a096f4ac/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs?ref=d29dc057ba53063a9ce7f1b307a89759a096f4ac", "patch": "@@ -6,7 +6,6 @@ use rustc_middle::middle::resolve_lifetime::Set1;\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{ParamEnv, TyCtxt};\n-use rustc_mir_dataflow::impls::borrowed_locals;\n \n #[derive(Debug)]\n pub struct SsaLocals {\n@@ -21,19 +20,23 @@ pub struct SsaLocals {\n }\n \n impl SsaLocals {\n-    pub fn new<'tcx>(tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>, body: &Body<'tcx>) -> SsaLocals {\n+    pub fn new<'tcx>(\n+        tcx: TyCtxt<'tcx>,\n+        param_env: ParamEnv<'tcx>,\n+        body: &Body<'tcx>,\n+        borrowed_locals: &BitSet<Local>,\n+    ) -> SsaLocals {\n         let assignment_order = Vec::new();\n \n         let assignments = IndexVec::from_elem(Set1::Empty, &body.local_decls);\n         let dominators = body.basic_blocks.dominators();\n         let mut visitor = SsaVisitor { assignments, assignment_order, dominators };\n \n-        let borrowed = borrowed_locals(body);\n         for (local, decl) in body.local_decls.iter_enumerated() {\n             if matches!(body.local_kind(local), LocalKind::Arg) {\n                 visitor.assignments[local] = Set1::One(LocationExtended::Arg);\n             }\n-            if borrowed.contains(local) && !decl.ty.is_freeze(tcx, param_env) {\n+            if borrowed_locals.contains(local) && !decl.ty.is_freeze(tcx, param_env) {\n                 visitor.assignments[local] = Set1::Many;\n             }\n         }"}, {"sha": "5e587be1f1653f482d6bb3a8678ce14bf847cfda", "filename": "tests/mir-opt/const_debuginfo.main.ConstDebugInfo.diff", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff?ref=d29dc057ba53063a9ce7f1b307a89759a096f4ac", "patch": "@@ -56,8 +56,11 @@\n       }\n   \n       bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/const_debuginfo.rs:+1:9: +1:10\n           _1 = const 1_u8;                 // scope 0 at $DIR/const_debuginfo.rs:+1:13: +1:16\n+          StorageLive(_2);                 // scope 1 at $DIR/const_debuginfo.rs:+2:9: +2:10\n           _2 = const 2_u8;                 // scope 1 at $DIR/const_debuginfo.rs:+2:13: +2:16\n+          StorageLive(_3);                 // scope 2 at $DIR/const_debuginfo.rs:+3:9: +3:10\n           _3 = const 3_u8;                 // scope 2 at $DIR/const_debuginfo.rs:+3:13: +3:16\n           StorageLive(_4);                 // scope 3 at $DIR/const_debuginfo.rs:+4:9: +4:12\n           StorageLive(_5);                 // scope 3 at $DIR/const_debuginfo.rs:+4:15: +4:20"}, {"sha": "e085a88b2da8ba155f44730090f1545df43ce64b", "filename": "tests/mir-opt/const_prop/bad_op_mod_by_zero.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff?ref=d29dc057ba53063a9ce7f1b307a89759a096f4ac", "patch": "@@ -18,6 +18,7 @@\n       }\n   \n       bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:9: +1:10\n           _1 = const 0_i32;                // scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:13: +1:14\n           StorageLive(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:9: +2:11\n -         _4 = Eq(_1, const 0_i32);        // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19"}, {"sha": "e3f5b120a3234d8bb12f2eb2b99fe3199f04422d", "filename": "tests/mir-opt/const_prop/scalar_literal_propagation.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff?ref=d29dc057ba53063a9ce7f1b307a89759a096f4ac", "patch": "@@ -11,6 +11,7 @@\n       }\n   \n       bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/scalar_literal_propagation.rs:+1:9: +1:10\n           _1 = const 1_u32;                // scope 0 at $DIR/scalar_literal_propagation.rs:+1:13: +1:14\n           StorageLive(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n -         _2 = consume(_1) -> bb1;         // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15"}, {"sha": "b183865a9bcf52a8b9cf66674663c62611806ea4", "filename": "tests/mir-opt/copy-prop/borrowed_local.f.CopyProp.diff", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.f.CopyProp.diff?ref=d29dc057ba53063a9ce7f1b307a89759a096f4ac", "patch": "@@ -0,0 +1,34 @@\n+- // MIR for `f` before CopyProp\n++ // MIR for `f` after CopyProp\n+  \n+  fn f() -> bool {\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/borrowed_local.rs:+0:11: +0:15\n+      let mut _1: u8;                      // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _2: &u8;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _3: u8;                      // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+      let mut _4: &u8;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+  \n+      bb0: {\n+          _1 = const 5_u8;                 // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+          _2 = &_1;                        // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+          _3 = _1;                         // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+          _4 = &_3;                        // scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n+          _0 = cmp_ref(_2, _4) -> bb1;     // scope 0 at $DIR/borrowed_local.rs:+8:13: +8:45\n+                                           // mir::Constant\n+                                           // + span: $DIR/borrowed_local.rs:23:29: 23:36\n+                                           // + literal: Const { ty: for<'a, 'b> fn(&'a u8, &'b u8) -> bool {cmp_ref}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+-         _0 = opaque::<u8>(_3) -> bb2;    // scope 0 at $DIR/borrowed_local.rs:+12:13: +12:38\n++         _0 = opaque::<u8>(_1) -> bb2;    // scope 0 at $DIR/borrowed_local.rs:+12:13: +12:38\n+                                           // mir::Constant\n+                                           // + span: $DIR/borrowed_local.rs:27:28: 27:34\n+                                           // + literal: Const { ty: fn(u8) -> bool {opaque::<u8>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          return;                          // scope 0 at $DIR/borrowed_local.rs:+15:13: +15:21\n+      }\n+  }\n+  "}, {"sha": "c4b980e2b35167c3fb10b9fd0c2f6ade7ecc1e51", "filename": "tests/mir-opt/copy-prop/borrowed_local.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fborrowed_local.rs?ref=d29dc057ba53063a9ce7f1b307a89759a096f4ac", "patch": "@@ -0,0 +1,39 @@\n+// unit-test: CopyProp\n+\n+#![feature(custom_mir, core_intrinsics)]\n+#![allow(unused_assignments)]\n+extern crate core;\n+use core::intrinsics::mir::*;\n+\n+fn opaque(_: impl Sized) -> bool { true }\n+\n+fn cmp_ref(a: &u8, b: &u8) -> bool {\n+    std::ptr::eq(a as *const u8, b as *const u8)\n+}\n+\n+#[custom_mir(dialect = \"analysis\", phase = \"post-cleanup\")]\n+fn f() -> bool {\n+    mir!(\n+        {\n+            let a = 5_u8;\n+            let r1 = &a;\n+            let b = a;\n+            // We cannot propagate the place `a`.\n+            let r2 = &b;\n+            Call(RET, next, cmp_ref(r1, r2))\n+        }\n+        next = {\n+            // But we can propagate the value `a`.\n+            Call(RET, ret, opaque(b))\n+        }\n+        ret = {\n+            Return()\n+        }\n+    )\n+}\n+\n+fn main() {\n+    assert!(!f());\n+}\n+\n+// EMIT_MIR borrowed_local.f.CopyProp.diff"}, {"sha": "bc5083e1ad01a9c9e00b35bf8df741867778348c", "filename": "tests/mir-opt/copy-prop/cycle.main.CopyProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.diff?ref=d29dc057ba53063a9ce7f1b307a89759a096f4ac", "patch": "@@ -29,7 +29,7 @@\n       }\n   \n       bb1: {\n--         StorageLive(_2);                 // scope 1 at $DIR/cycle.rs:+2:9: +2:10\n+          StorageLive(_2);                 // scope 1 at $DIR/cycle.rs:+2:9: +2:10\n           _2 = _1;                         // scope 1 at $DIR/cycle.rs:+2:13: +2:14\n -         StorageLive(_3);                 // scope 2 at $DIR/cycle.rs:+3:9: +3:10\n -         _3 = _2;                         // scope 2 at $DIR/cycle.rs:+3:13: +3:14"}, {"sha": "918817da56ce48b2b2d6dfbd791b5379d2043954", "filename": "tests/mir-opt/copy-prop/dead_stores_79191.f.CopyProp.after.mir", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.mir?ref=d29dc057ba53063a9ce7f1b307a89759a096f4ac", "patch": "@@ -11,6 +11,7 @@ fn f(_1: usize) -> usize {\n     }\n \n     bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/dead_stores_79191.rs:+1:9: +1:10\n         _2 = _1;                         // scope 0 at $DIR/dead_stores_79191.rs:+1:13: +1:14\n         _1 = const 5_usize;              // scope 1 at $DIR/dead_stores_79191.rs:+2:5: +2:10\n         _1 = _2;                         // scope 1 at $DIR/dead_stores_79191.rs:+3:5: +3:10"}, {"sha": "cf21fadd437907823c5a5a63f251e272fa1035e7", "filename": "tests/mir-opt/copy-prop/dead_stores_better.f.CopyProp.after.mir", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.mir?ref=d29dc057ba53063a9ce7f1b307a89759a096f4ac", "patch": "@@ -11,6 +11,7 @@ fn f(_1: usize) -> usize {\n     }\n \n     bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/dead_stores_better.rs:+1:9: +1:10\n         _2 = _1;                         // scope 0 at $DIR/dead_stores_better.rs:+1:13: +1:14\n         _1 = const 5_usize;              // scope 1 at $DIR/dead_stores_better.rs:+2:5: +2:10\n         _1 = _2;                         // scope 1 at $DIR/dead_stores_better.rs:+3:5: +3:10"}, {"sha": "6870d7d6c45b457b8459dce4a63f514fdb4cbdc8", "filename": "tests/mir-opt/dataflow-const-prop/inherit_overflow.main.DataflowConstProp.diff", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.diff?ref=d29dc057ba53063a9ce7f1b307a89759a096f4ac", "patch": "@@ -16,7 +16,9 @@\n       }\n   \n       bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n           _1 = const u8::MAX;              // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n+          StorageLive(_2);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n           _2 = const 1_u8;                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n           _5 = CheckedAdd(const u8::MAX, const 1_u8); // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n           assert(!move (_5.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const u8::MAX, const 1_u8) -> bb1; // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL"}, {"sha": "df9f8dcf1a407b7496b9f719db0d88d374162b5c", "filename": "tests/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=d29dc057ba53063a9ce7f1b307a89759a096f4ac", "patch": "@@ -79,6 +79,7 @@\n       }\n   \n       bb6: {\n+          StorageLive(_10);                // scope 3 at $DIR/funky_arms.rs:+13:17: +13:26\n           _10 = ((_7 as Some).0: usize);   // scope 3 at $DIR/funky_arms.rs:+13:17: +13:26\n           StorageLive(_11);                // scope 3 at $DIR/funky_arms.rs:+15:43: +15:46\n           _11 = &mut (*_1);                // scope 3 at $DIR/funky_arms.rs:+15:43: +15:46"}, {"sha": "30bf2c0684e52525ba75d3da0232559318bd75f4", "filename": "tests/mir-opt/issue_101973.inner.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff?ref=d29dc057ba53063a9ce7f1b307a89759a096f4ac", "patch": "@@ -33,6 +33,7 @@\n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/issue_101973.rs:+1:5: +1:65\n           StorageLive(_3);                 // scope 0 at $DIR/issue_101973.rs:+1:5: +1:58\n+          StorageLive(_4);                 // scope 0 at $DIR/issue_101973.rs:+1:5: +1:17\n           StorageLive(_12);                // scope 2 at $DIR/issue_101973.rs:7:12: 7:27\n           StorageLive(_13);                // scope 2 at $DIR/issue_101973.rs:7:12: 7:20\n           _14 = CheckedShr(_1, const 0_i32); // scope 2 at $DIR/issue_101973.rs:7:12: 7:20\n@@ -62,6 +63,7 @@\n           StorageDead(_13);                // scope 2 at $DIR/issue_101973.rs:7:26: 7:27\n           _4 = BitOr(const 0_u32, move _12); // scope 2 at $DIR/issue_101973.rs:7:5: 7:27\n           StorageDead(_12);                // scope 2 at $DIR/issue_101973.rs:7:26: 7:27\n+          StorageLive(_6);                 // scope 0 at $DIR/issue_101973.rs:+1:31: +1:57\n           StorageLive(_7);                 // scope 0 at $DIR/issue_101973.rs:+1:31: +1:52\n           StorageLive(_8);                 // scope 0 at $DIR/issue_101973.rs:+1:32: +1:45\n           _10 = CheckedShr(_1, const 8_i32); // scope 0 at $DIR/issue_101973.rs:+1:32: +1:45"}, {"sha": "c14780052fb091f257fefbd178c0c05357f2c7c7", "filename": "tests/mir-opt/issue_76432.test.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff?ref=d29dc057ba53063a9ce7f1b307a89759a096f4ac", "patch": "@@ -29,6 +29,7 @@\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/issue_76432.rs:+1:9: +1:10\n+          StorageLive(_4);                 // scope 0 at $DIR/issue_76432.rs:+1:19: +1:29\n           StorageLive(_5);                 // scope 0 at $DIR/issue_76432.rs:+1:20: +1:29\n           _5 = [_1, _1, _1];               // scope 0 at $DIR/issue_76432.rs:+1:20: +1:29\n           _4 = &_5;                        // scope 0 at $DIR/issue_76432.rs:+1:19: +1:29"}, {"sha": "35ffc4963cb63b4f8d707e2d633ceca9a720548e", "filename": "tests/mir-opt/simplify_match.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff?ref=d29dc057ba53063a9ce7f1b307a89759a096f4ac", "patch": "@@ -10,6 +10,7 @@\n       }\n   \n       bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/simplify_match.rs:+1:17: +1:18\n           _2 = const false;                // scope 0 at $DIR/simplify_match.rs:+1:21: +1:26\n -         switchInt(_2) -> [0: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_match.rs:+1:5: +1:31\n +         switchInt(const false) -> [0: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_match.rs:+1:5: +1:31"}, {"sha": "d1f6fd97dc7c6cf58349fe1e087562b84bb12af5", "filename": "tests/mir-opt/slice_filter.variant_a-{closure#0}.CopyProp.diff", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.CopyProp.diff?ref=d29dc057ba53063a9ce7f1b307a89759a096f4ac", "patch": "@@ -101,28 +101,27 @@\n       }\n   \n       bb0: {\n--         StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+          StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n           _25 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n           _3 = &((*_25).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n--         StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+          StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n           _26 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n           _4 = &((*_26).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n--         StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+          StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n           _27 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n           _5 = &((*_27).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n--         StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+          StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n           _28 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n           _6 = &((*_28).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n           StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n           StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:46\n           StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n           _9 = &_3;                        // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n           StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n--         StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n--         _11 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n--         _10 = &_11;                      // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          _11 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          _10 = &_11;                      // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n -         StorageLive(_29);                // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _10 = &_5;                       // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n           _31 = deref_copy (*_9);          // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         _29 = _31;                       // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         StorageLive(_30);                // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n@@ -139,7 +138,7 @@\n           StorageDead(_33);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         StorageDead(_30);                // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         StorageDead(_29);                // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n           StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n           StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n           switchInt(move _8) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n@@ -156,11 +155,10 @@\n           StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n           _18 = &_5;                       // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n           StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n--         StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n--         _20 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n--         _19 = &_20;                      // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          _20 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          _19 = &_20;                      // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n -         StorageLive(_35);                // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _19 = &_3;                       // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n           _37 = deref_copy (*_18);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         _35 = _37;                       // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         StorageLive(_36);                // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n@@ -177,7 +175,7 @@\n           StorageDead(_39);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         StorageDead(_36);                // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         StorageDead(_35);                // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n           StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n           StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n           switchInt(move _17) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n@@ -205,11 +203,10 @@\n           StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n           _13 = &_6;                       // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n           StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         _15 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         _14 = &_15;                      // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          _15 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          _14 = &_15;                      // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n -         StorageLive(_41);                // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _14 = &_4;                       // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           _43 = deref_copy (*_13);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         _41 = _43;                       // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         StorageLive(_42);                // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n@@ -226,7 +223,7 @@\n           StorageDead(_45);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         StorageDead(_42);                // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         StorageDead(_41);                // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           _7 = move _12;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n@@ -245,11 +242,10 @@\n           StorageLive(_22);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n           _22 = &_4;                       // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n           StorageLive(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         StorageLive(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         _24 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         _23 = &_24;                      // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageLive(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          _24 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          _23 = &_24;                      // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n -         StorageLive(_47);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _23 = &_6;                       // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n           _49 = deref_copy (*_22);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         _47 = _49;                       // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         StorageLive(_48);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n@@ -266,7 +262,7 @@\n           StorageDead(_51);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         StorageDead(_48);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n -         StorageDead(_47);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         StorageDead(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n           StorageDead(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n           StorageDead(_22);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n           _16 = move _21;                  // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76"}, {"sha": "259cd4118960884844bdfedf7e746a4c09ee23bf", "filename": "tests/mir-opt/slice_filter.variant_a-{closure#0}.DestinationPropagation.diff", "status": "modified", "additions": 142, "deletions": 122, "changes": 264, "blob_url": "https://github.com/rust-lang/rust/blob/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff?ref=d29dc057ba53063a9ce7f1b307a89759a096f4ac", "patch": "@@ -11,20 +11,24 @@\n       let mut _8: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:46\n       let mut _9: &&usize;                 // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:41\n       let mut _10: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:45: +0:46\n-      let mut _11: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:56\n-      let mut _12: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:51\n-      let mut _13: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n-      let mut _14: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:76\n-      let mut _15: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:66\n-      let mut _16: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:61\n-      let mut _17: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n-      let mut _18: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:76\n-      let mut _19: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:71\n-      let mut _20: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n-      let mut _21: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _22: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _23: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n-      let mut _24: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let _11: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:45: +0:46\n+      let mut _12: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:56\n+      let mut _13: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:51\n+      let mut _14: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n+      let _15: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n+      let mut _16: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:76\n+      let mut _17: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:66\n+      let mut _18: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:61\n+      let mut _19: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n+      let _20: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n+      let mut _21: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:76\n+      let mut _22: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:70: +0:71\n+      let mut _23: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+      let _24: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n+      let mut _25: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _26: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _27: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n+      let mut _28: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:38\n       scope 1 {\n           debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:27: +0:28\n           debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:30: +0:31\n@@ -33,78 +37,85 @@\n           scope 2 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:40: 8:46\n               debug self => _9;            // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               debug other => _10;          // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _25: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _26: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _29: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _30: &usize;         // in scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 3 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _25;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _26;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _27: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _28: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => _29;       // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => _30;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _31: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _32: usize;      // in scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n           scope 4 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:60: 8:66\n-              debug self => _16;           // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _17;          // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _29: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _30: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug self => _18;           // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => _19;          // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _33: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _34: &usize;         // in scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 5 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _29;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _30;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _31: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _32: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => _33;       // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => _34;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _35: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _36: usize;      // in scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n           scope 6 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:50: 8:56\n-              debug self => _12;           // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _13;          // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _33: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _34: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug self => _13;           // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => _14;          // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _37: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _38: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 7 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _33;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _34;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _35: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _36: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => _37;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => _38;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _39: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _40: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n           scope 8 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:8:70: 8:76\n-              debug self => _19;           // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              debug other => _20;          // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _37: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-              let mut _38: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug self => _22;           // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              debug other => _23;          // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _41: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+              let mut _42: &usize;         // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               scope 9 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug self => _37;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  debug other => _38;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _39: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                  let mut _40: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug self => _41;       // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  debug other => _42;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _43: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                  let mut _44: usize;      // in scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n               }\n           }\n       }\n   \n       bb0: {\n-          _21 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-          _3 = &((*_21).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-          _22 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-          _4 = &((*_22).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-          _23 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-          _5 = &((*_23).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-          _24 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n-          _6 = &((*_24).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+          StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+          _25 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+          _3 = &((*_25).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+          StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+          _26 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+          _4 = &((*_26).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+          StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+          _27 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+          _5 = &((*_27).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+          StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+          _28 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+          _6 = &((*_28).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n -         StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n           StorageLive(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:46\n           StorageLive(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n           _9 = &_3;                        // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n           StorageLive(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          _10 = &_5;                       // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n-          _25 = deref_copy (*_9);          // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _26 = deref_copy (*_10);         // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_27);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _27 = (*_25);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_28);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _28 = (*_26);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _8 = Le(move _27, move _28);     // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_28);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_27);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          _11 = _5;                        // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          _10 = &_11;                      // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n+          _29 = deref_copy (*_9);          // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _30 = deref_copy (*_10);         // scope 2 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_31);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _31 = (*_29);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_32);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _32 = (*_30);                    // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _8 = Le(move _31, move _32);     // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_32);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_31);                // scope 3 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n           StorageDead(_10);                // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n           StorageDead(_9);                 // scope 1 at $DIR/slice_filter.rs:+0:45: +0:46\n           switchInt(move _8) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n@@ -116,104 +127,113 @@\n       }\n   \n       bb2: {\n--         StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+-         StorageLive(_16);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-          StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:66\n-          StorageLive(_16);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n-          _16 = &_5;                       // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n-          StorageLive(_17);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          _17 = &_3;                       // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          _29 = deref_copy (*_16);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _30 = deref_copy (*_17);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_31);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _31 = (*_29);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_32);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _32 = (*_30);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _15 = Le(move _31, move _32);    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_32);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_31);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_17);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-          switchInt(move _15) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+          StorageLive(_17);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:66\n+          StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n+          _18 = &_5;                       // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n+          StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          _20 = _3;                        // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          _19 = &_20;                      // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          _33 = deref_copy (*_18);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _34 = deref_copy (*_19);         // scope 4 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_35);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _35 = (*_33);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_36);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _36 = (*_34);                    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _17 = Le(move _35, move _36);    // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_36);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_35);                // scope 5 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n+          switchInt(move _17) -> [0: bb6, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n       }\n   \n       bb3: {\n--         StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n -         StorageDead(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n           return;                          // scope 0 at $DIR/slice_filter.rs:+0:76: +0:76\n       }\n   \n       bb4: {\n--         StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           goto -> bb2;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n       }\n   \n       bb5: {\n--         StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n+-         StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n-          StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n-          _12 = &_6;                       // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n-          StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          _13 = &_4;                       // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          _33 = deref_copy (*_12);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _34 = deref_copy (*_13);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_35);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _35 = (*_33);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_36);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _36 = (*_34);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _11 = Le(move _35, move _36);    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_36);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_35);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n+          _13 = &_6;                       // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n+          StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          _15 = _4;                        // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          _14 = &_15;                      // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          _37 = deref_copy (*_13);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _38 = deref_copy (*_14);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_39);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _39 = (*_37);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_40);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _40 = (*_38);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _12 = Le(move _39, move _40);    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_40);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_39);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+          StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-          StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n--         _7 = move _11;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n--         StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+-         _7 = move _12;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+-         StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n           StorageDead(_8);                 // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n -         switchInt(move _7) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n-+         switchInt(move _11) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n++         switchInt(move _12) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n       }\n   \n       bb6: {\n--         _14 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+-         _16 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n +         _0 = const false;                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n           goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n       }\n   \n       bb7: {\n--         StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n+-         StorageLive(_21);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n-          StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n-          _19 = &_4;                       // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n-          StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          _20 = &_6;                       // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          _37 = deref_copy (*_19);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _38 = deref_copy (*_20);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_39);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _39 = (*_37);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageLive(_40);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          _40 = (*_38);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n--         _18 = Le(move _39, move _40);    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-+         _0 = Le(move _39, move _40);     // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_40);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_39);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-          StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         _14 = move _18;                  // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+          StorageLive(_22);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n+          _22 = &_4;                       // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n+          StorageLive(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageLive(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          _24 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          _23 = &_24;                      // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          _41 = deref_copy (*_22);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _42 = deref_copy (*_23);         // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_43);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _43 = (*_41);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageLive(_44);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          _44 = (*_42);                    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+-         _21 = Le(move _43, move _44);    // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n++         _0 = Le(move _43, move _44);     // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_44);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_43);                // scope 9 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+          StorageDead(_24);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_23);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+          StorageDead(_22);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         _16 = move _21;                  // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n           goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n       }\n   \n       bb8: {\n--         StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         StorageDead(_21);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-          StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n--         _0 = move _14;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+          StorageDead(_17);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+-         _0 = move _16;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n +         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n           goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n       }"}, {"sha": "c3b8e7d2eba256530fe2bff824cb42f06fe898fd", "filename": "tests/mir-opt/slice_filter.variant_b-{closure#0}.CopyProp.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.CopyProp.diff?ref=d29dc057ba53063a9ce7f1b307a89759a096f4ac", "patch": "@@ -33,16 +33,16 @@\n       }\n   \n       bb0: {\n--         StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n+          StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n           _21 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n           _3 = ((*_21).0: usize);          // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n--         StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n+          StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n           _22 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n           _4 = ((*_22).1: usize);          // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n--         StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n+          StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n           _23 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n           _5 = ((*_23).2: usize);          // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n--         StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n+          StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n           _24 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n           _6 = ((*_24).3: usize);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n           StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58"}, {"sha": "a43e84d29c7add13d800b436f50349c55987a8ee", "filename": "tests/mir-opt/slice_filter.variant_b-{closure#0}.DestinationPropagation.diff", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.DestinationPropagation.diff?ref=d29dc057ba53063a9ce7f1b307a89759a096f4ac", "patch": "@@ -25,12 +25,16 @@\n       }\n   \n       bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n           _13 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n           _3 = ((*_13).0: usize);          // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n+          StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n           _14 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n           _4 = ((*_14).1: usize);          // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n+          StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n           _15 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n           _5 = ((*_15).2: usize);          // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n+          StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n           _16 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n           _6 = ((*_16).3: usize);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n -         StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58"}, {"sha": "7c67d2abcf7c37ccf1e0997d8550779a58c4d52f", "filename": "tests/mir-opt/try_identity_e2e.new.PreCodegen.after.mir", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir?ref=d29dc057ba53063a9ce7f1b307a89759a096f4ac", "patch": "@@ -30,6 +30,7 @@ fn new(_1: Result<T, E>) -> Result<T, E> {\n     }\n \n     bb1: {\n+        StorageLive(_5);                 // scope 0 at $DIR/try_identity_e2e.rs:+5:21: +5:22\n         _5 = move ((_1 as Err).0: E);    // scope 0 at $DIR/try_identity_e2e.rs:+5:21: +5:22\n         Deinit(_2);                      // scope 2 at $DIR/try_identity_e2e.rs:+5:27: +5:48\n         ((_2 as Break).0: E) = move _5;  // scope 2 at $DIR/try_identity_e2e.rs:+5:27: +5:48\n@@ -39,6 +40,7 @@ fn new(_1: Result<T, E>) -> Result<T, E> {\n     }\n \n     bb2: {\n+        StorageLive(_4);                 // scope 0 at $DIR/try_identity_e2e.rs:+4:20: +4:21\n         _4 = move ((_1 as Ok).0: T);     // scope 0 at $DIR/try_identity_e2e.rs:+4:20: +4:21\n         Deinit(_2);                      // scope 1 at $DIR/try_identity_e2e.rs:+4:26: +4:50\n         ((_2 as Continue).0: T) = move _4; // scope 1 at $DIR/try_identity_e2e.rs:+4:26: +4:50\n@@ -48,6 +50,7 @@ fn new(_1: Result<T, E>) -> Result<T, E> {\n     }\n \n     bb3: {\n+        StorageLive(_8);                 // scope 0 at $DIR/try_identity_e2e.rs:+9:32: +9:33\n         _8 = move ((_2 as Break).0: E);  // scope 0 at $DIR/try_identity_e2e.rs:+9:32: +9:33\n         Deinit(_0);                      // scope 4 at $DIR/try_identity_e2e.rs:+9:45: +9:51\n         ((_0 as Err).0: E) = move _8;    // scope 4 at $DIR/try_identity_e2e.rs:+9:45: +9:51\n@@ -61,6 +64,7 @@ fn new(_1: Result<T, E>) -> Result<T, E> {\n     }\n \n     bb5: {\n+        StorageLive(_7);                 // scope 0 at $DIR/try_identity_e2e.rs:+8:35: +8:36\n         _7 = move ((_2 as Continue).0: T); // scope 0 at $DIR/try_identity_e2e.rs:+8:35: +8:36\n         Deinit(_0);                      // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +11:6\n         ((_0 as Ok).0: T) = move _7;     // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +11:6"}, {"sha": "4a838e140262e76e51434fcb2f51f5bf4a743ea1", "filename": "tests/mir-opt/try_identity_e2e.old.PreCodegen.after.mir", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Ftry_identity_e2e.old.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d29dc057ba53063a9ce7f1b307a89759a096f4ac/tests%2Fmir-opt%2Ftry_identity_e2e.old.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ftry_identity_e2e.old.PreCodegen.after.mir?ref=d29dc057ba53063a9ce7f1b307a89759a096f4ac", "patch": "@@ -19,6 +19,7 @@ fn old(_1: Result<T, E>) -> Result<T, E> {\n     }\n \n     bb1: {\n+        StorageLive(_4);                 // scope 0 at $DIR/try_identity_e2e.rs:+4:17: +4:18\n         _4 = move ((_1 as Err).0: E);    // scope 0 at $DIR/try_identity_e2e.rs:+4:17: +4:18\n         Deinit(_0);                      // scope 2 at $DIR/try_identity_e2e.rs:+4:30: +4:36\n         ((_0 as Err).0: E) = move _4;    // scope 2 at $DIR/try_identity_e2e.rs:+4:30: +4:36\n@@ -31,6 +32,7 @@ fn old(_1: Result<T, E>) -> Result<T, E> {\n     }\n \n     bb3: {\n+        StorageLive(_3);                 // scope 0 at $DIR/try_identity_e2e.rs:+3:16: +3:17\n         _3 = move ((_1 as Ok).0: T);     // scope 0 at $DIR/try_identity_e2e.rs:+3:16: +3:17\n         Deinit(_0);                      // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +6:6\n         ((_0 as Ok).0: T) = move _3;     // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +6:6"}]}