{"sha": "bee14712ab2993c0c6a8af9c72dbfa9b149b7f8d", "node_id": "C_kwDOAAsO6NoAKGJlZTE0NzEyYWIyOTkzYzBjNmE4YWY5YzcyZGJmYTliMTQ5YjdmOGQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-29T09:17:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-29T09:17:08Z"}, "message": "Rollup merge of #92118 - jackh726:type-alias-position-error, r=petrochenkov\n\nParse and suggest moving where clauses after equals for type aliases\n\n~Mostly the same as #90076, but doesn't make any syntax changes.~ Whether or not we want to land the syntax changes, we should  parse the invalid where clause position and suggest moving.\n\nr? `@nikomatsakis`\ncc `@petrochenkov` you might have thoughts on implementation", "tree": {"sha": "610e13cbefe6dfbb2fbb5b9a0e6688acf4172fd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/610e13cbefe6dfbb2fbb5b9a0e6688acf4172fd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bee14712ab2993c0c6a8af9c72dbfa9b149b7f8d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhzCeVCRBK7hj4Ov3rIwAAd7kIAKzXnQ7ZnSSTu8ry4vQdRNsK\nhaDiDQe6XHo5lITJffxTn4UpyHgBI+LA7eBfPRVHdwK15I6zAd+FlCTxl1AH3Az6\n6xQP8Iy3P3r/Nx7i21Ie9izIsbBZJTIkMcUqBPbTftIQehTy192p7rugOL/1HTvZ\nZijuIR7N7wlQ3RCKHeVpxja4Pp4IGANBRX+7aScCYUyF60zRqmDJCKz6EwDKJw9u\nf1bp3UwLeIB0bEnDzFAWQQol2Yp00HgeAXhsuIdXLFYEr1oappY9BzNqbaA3+9pN\n2DVqhuAqDeH3b4Z+JxIOm3ccFfwzbQzh046tsPynr8B+Edr3OmDLwOKICpnsBYQ=\n=Kx4P\n-----END PGP SIGNATURE-----\n", "payload": "tree 610e13cbefe6dfbb2fbb5b9a0e6688acf4172fd1\nparent e31314307f09cef0989e2e052b1cad75d0a9e723\nparent 4391a11537ce38c919058c292e91f059d658da94\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1640769428 +0100\ncommitter GitHub <noreply@github.com> 1640769428 +0100\n\nRollup merge of #92118 - jackh726:type-alias-position-error, r=petrochenkov\n\nParse and suggest moving where clauses after equals for type aliases\n\n~Mostly the same as #90076, but doesn't make any syntax changes.~ Whether or not we want to land the syntax changes, we should  parse the invalid where clause position and suggest moving.\n\nr? `@nikomatsakis`\ncc `@petrochenkov` you might have thoughts on implementation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bee14712ab2993c0c6a8af9c72dbfa9b149b7f8d", "html_url": "https://github.com/rust-lang/rust/commit/bee14712ab2993c0c6a8af9c72dbfa9b149b7f8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bee14712ab2993c0c6a8af9c72dbfa9b149b7f8d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e31314307f09cef0989e2e052b1cad75d0a9e723", "url": "https://api.github.com/repos/rust-lang/rust/commits/e31314307f09cef0989e2e052b1cad75d0a9e723", "html_url": "https://github.com/rust-lang/rust/commit/e31314307f09cef0989e2e052b1cad75d0a9e723"}, {"sha": "4391a11537ce38c919058c292e91f059d658da94", "url": "https://api.github.com/repos/rust-lang/rust/commits/4391a11537ce38c919058c292e91f059d658da94", "html_url": "https://github.com/rust-lang/rust/commit/4391a11537ce38c919058c292e91f059d658da94"}], "stats": {"total": 186, "additions": 158, "deletions": 28}, "files": [{"sha": "4464b5eee963526b0a09c647978b512ce61cd1b9", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/bee14712ab2993c0c6a8af9c72dbfa9b149b7f8d/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bee14712ab2993c0c6a8af9c72dbfa9b149b7f8d/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=bee14712ab2993c0c6a8af9c72dbfa9b149b7f8d", "patch": "@@ -2780,34 +2780,34 @@ impl<'a> State<'a> {\n                 self.word_space(\",\");\n             }\n \n-            match *predicate {\n-                ast::WherePredicate::BoundPredicate(ast::WhereBoundPredicate {\n-                    ref bound_generic_params,\n-                    ref bounded_ty,\n-                    ref bounds,\n-                    ..\n-                }) => {\n-                    self.print_formal_generic_params(bound_generic_params);\n-                    self.print_type(bounded_ty);\n-                    self.print_type_bounds(\":\", bounds);\n-                }\n-                ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate {\n-                    ref lifetime,\n-                    ref bounds,\n-                    ..\n-                }) => {\n-                    self.print_lifetime_bounds(*lifetime, bounds);\n-                }\n-                ast::WherePredicate::EqPredicate(ast::WhereEqPredicate {\n-                    ref lhs_ty,\n-                    ref rhs_ty,\n-                    ..\n-                }) => {\n-                    self.print_type(lhs_ty);\n-                    self.space();\n-                    self.word_space(\"=\");\n-                    self.print_type(rhs_ty);\n-                }\n+            self.print_where_predicate(predicate);\n+        }\n+    }\n+\n+    pub fn print_where_predicate(&mut self, predicate: &ast::WherePredicate) {\n+        match predicate {\n+            ast::WherePredicate::BoundPredicate(ast::WhereBoundPredicate {\n+                bound_generic_params,\n+                bounded_ty,\n+                bounds,\n+                ..\n+            }) => {\n+                self.print_formal_generic_params(bound_generic_params);\n+                self.print_type(bounded_ty);\n+                self.print_type_bounds(\":\", bounds);\n+            }\n+            ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate {\n+                lifetime,\n+                bounds,\n+                ..\n+            }) => {\n+                self.print_lifetime_bounds(*lifetime, bounds);\n+            }\n+            ast::WherePredicate::EqPredicate(ast::WhereEqPredicate { lhs_ty, rhs_ty, .. }) => {\n+                self.print_type(lhs_ty);\n+                self.space();\n+                self.word_space(\"=\");\n+                self.print_type(rhs_ty);\n             }\n         }\n     }"}, {"sha": "d335ef8788b87f9910147da2475ee2d2d96a0b0c", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/bee14712ab2993c0c6a8af9c72dbfa9b149b7f8d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bee14712ab2993c0c6a8af9c72dbfa9b149b7f8d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=bee14712ab2993c0c6a8af9c72dbfa9b149b7f8d", "patch": "@@ -794,6 +794,44 @@ impl<'a> Parser<'a> {\n         ))\n     }\n \n+    /// Emits an error that the where clause at the end of a type alias is not\n+    /// allowed and suggests moving it.\n+    fn error_ty_alias_where(\n+        &self,\n+        before_where_clause_present: bool,\n+        before_where_clause_span: Span,\n+        after_predicates: &[WherePredicate],\n+        after_where_clause_span: Span,\n+    ) {\n+        let mut err =\n+            self.struct_span_err(after_where_clause_span, \"where clause not allowed here\");\n+        if !after_predicates.is_empty() {\n+            let mut state = crate::pprust::State::new();\n+            if !before_where_clause_present {\n+                state.space();\n+                state.word_space(\"where\");\n+            } else {\n+                state.word_space(\",\");\n+            }\n+            let mut first = true;\n+            for p in after_predicates.iter() {\n+                if !first {\n+                    state.word_space(\",\");\n+                }\n+                first = false;\n+                state.print_where_predicate(p);\n+            }\n+            let suggestion = state.s.eof();\n+            err.span_suggestion(\n+                before_where_clause_span.shrink_to_hi(),\n+                \"move it here\",\n+                suggestion,\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+        err.emit()\n+    }\n+\n     /// Parses a `type` alias with the following grammar:\n     /// ```\n     /// TypeAlias = \"type\" Ident Generics {\":\" GenericBounds}? {\"=\" Ty}? \";\" ;\n@@ -806,9 +844,24 @@ impl<'a> Parser<'a> {\n         // Parse optional colon and param bounds.\n         let bounds =\n             if self.eat(&token::Colon) { self.parse_generic_bounds(None)? } else { Vec::new() };\n+\n         generics.where_clause = self.parse_where_clause()?;\n \n         let ty = if self.eat(&token::Eq) { Some(self.parse_ty()?) } else { None };\n+\n+        if self.token.is_keyword(kw::Where) {\n+            let after_where_clause = self.parse_where_clause()?;\n+\n+            self.error_ty_alias_where(\n+                generics.where_clause.has_where_token,\n+                generics.where_clause.span,\n+                &after_where_clause.predicates,\n+                after_where_clause.span,\n+            );\n+\n+            generics.where_clause.predicates.extend(after_where_clause.predicates.into_iter());\n+        }\n+\n         self.expect_semi()?;\n \n         Ok((ident, ItemKind::TyAlias(Box::new(TyAlias { defaultness, generics, bounds, ty }))))"}, {"sha": "a9fa23dd95ef4eceda62e7de1c2d340ef88f09ad", "filename": "src/test/ui/parser/type-alias-where.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/bee14712ab2993c0c6a8af9c72dbfa9b149b7f8d/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bee14712ab2993c0c6a8af9c72dbfa9b149b7f8d/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where.rs?ref=bee14712ab2993c0c6a8af9c72dbfa9b149b7f8d", "patch": "@@ -0,0 +1,37 @@\n+// check-fail\n+\n+#![feature(generic_associated_types)]\n+\n+// Fine, but lints as unused\n+type Foo where u32: Copy = ();\n+// Not fine.\n+type Bar = () where u32: Copy;\n+//~^ ERROR where clause not allowed here\n+type Baz = () where;\n+//~^ ERROR where clause not allowed here\n+\n+trait Trait {\n+    // Fine.\n+    type Assoc where u32: Copy;\n+    // Fine.\n+    type Assoc2 where u32: Copy, i32: Copy;\n+}\n+\n+impl Trait for u32 {\n+    // Fine.\n+    type Assoc where u32: Copy = ();\n+    // Not fine, suggests moving `i32: Copy`\n+    type Assoc2 where u32: Copy = () where i32: Copy;\n+    //~^ ERROR where clause not allowed here\n+}\n+\n+impl Trait for i32 {\n+    // Not fine, suggests moving `u32: Copy`\n+    type Assoc = () where u32: Copy;\n+    //~^ ERROR where clause not allowed here\n+    // Not fine, suggests moving both.\n+    type Assoc2 = () where u32: Copy, i32: Copy;\n+    //~^ ERROR where clause not allowed here\n+}\n+\n+fn main() {}"}, {"sha": "7ab0b28c8640a6539d3632ece12f32d6476cb22f", "filename": "src/test/ui/parser/type-alias-where.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bee14712ab2993c0c6a8af9c72dbfa9b149b7f8d/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bee14712ab2993c0c6a8af9c72dbfa9b149b7f8d/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where.stderr?ref=bee14712ab2993c0c6a8af9c72dbfa9b149b7f8d", "patch": "@@ -0,0 +1,40 @@\n+error: where clause not allowed here\n+  --> $DIR/type-alias-where.rs:8:15\n+   |\n+LL | type Bar = () where u32: Copy;\n+   |         -     ^^^^^^^^^^^^^^^\n+   |         |\n+   |         help: move it here: `where u32: Copy`\n+\n+error: where clause not allowed here\n+  --> $DIR/type-alias-where.rs:10:15\n+   |\n+LL | type Baz = () where;\n+   |               ^^^^^\n+\n+error: where clause not allowed here\n+  --> $DIR/type-alias-where.rs:24:38\n+   |\n+LL |     type Assoc2 where u32: Copy = () where i32: Copy;\n+   |                                -     ^^^^^^^^^^^^^^^\n+   |                                |\n+   |                                help: move it here: `, i32: Copy`\n+\n+error: where clause not allowed here\n+  --> $DIR/type-alias-where.rs:30:21\n+   |\n+LL |     type Assoc = () where u32: Copy;\n+   |               -     ^^^^^^^^^^^^^^^\n+   |               |\n+   |               help: move it here: `where u32: Copy`\n+\n+error: where clause not allowed here\n+  --> $DIR/type-alias-where.rs:33:22\n+   |\n+LL |     type Assoc2 = () where u32: Copy, i32: Copy;\n+   |                -     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                help: move it here: `where u32: Copy, i32: Copy`\n+\n+error: aborting due to 5 previous errors\n+"}]}