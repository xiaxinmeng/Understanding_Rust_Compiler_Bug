{"sha": "0b0bf10533ce955e6bcc44c2392674f53c2f3952", "node_id": "C_kwDOAAsO6NoAKDBiMGJmMTA1MzNjZTk1NWU2YmNjNDRjMjM5MjY3NGY1M2MyZjM5NTI", "commit": {"author": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2022-10-29T08:57:39Z"}, "committer": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2022-10-29T19:48:08Z"}, "message": "Generate static file hashes once", "tree": {"sha": "de94e9942d01fdac4a3b20d36258da247d035331", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de94e9942d01fdac4a3b20d36258da247d035331"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b0bf10533ce955e6bcc44c2392674f53c2f3952", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b0bf10533ce955e6bcc44c2392674f53c2f3952", "html_url": "https://github.com/rust-lang/rust/commit/0b0bf10533ce955e6bcc44c2392674f53c2f3952", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b0bf10533ce955e6bcc44c2392674f53c2f3952/comments", "author": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf2533406670078a9110122f8c90e53285f994b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf2533406670078a9110122f8c90e53285f994b6", "html_url": "https://github.com/rust-lang/rust/commit/bf2533406670078a9110122f8c90e53285f994b6"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "94d8a9feca69d5010c0a36f4670547856dda22bf", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0b0bf10533ce955e6bcc44c2392674f53c2f3952/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b0bf10533ce955e6bcc44c2392674f53c2f3952/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=0b0bf10533ce955e6bcc44c2392674f53c2f3952", "patch": "@@ -85,12 +85,11 @@ pub(super) fn write_shared(\n     }\n \n     if options.emit.is_empty() || options.emit.contains(&EmitType::Toolchain) {\n-        for f in static_files::STATIC_FILES_LIST {\n-            let filename = cx.dst.join(\n-                Path::new(\"static.files/\").join(static_files::static_filename(f.filename, f.bytes)),\n-            );\n-            cx.shared.fs.write(filename, f.minified())?;\n-        }\n+        let static_dir = cx.dst.join(Path::new(\"static.files\"));\n+        static_files::for_each(|f: &static_files::StaticFile| {\n+            let filename = static_dir.join(f.output_filename());\n+            cx.shared.fs.write(filename, f.minified())\n+        })?;\n     }\n \n     /// Read a file and return all lines that match the `\"{crate}\":{data},` format,"}, {"sha": "afe920b7fa1e0a4d57519b7a3e049435e4302c9e", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0b0bf10533ce955e6bcc44c2392674f53c2f3952/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b0bf10533ce955e6bcc44c2392674f53c2f3952/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=0b0bf10533ce955e6bcc44c2392674f53c2f3952", "patch": "@@ -5,15 +5,19 @@\n \n use rustc_data_structures::fx::FxHasher;\n use std::hash::Hasher;\n-use std::path::PathBuf;\n+use std::path::{Path, PathBuf};\n use std::{fmt, str};\n \n pub(crate) struct StaticFile {\n-    pub(crate) filename: &'static str,\n+    pub(crate) filename: PathBuf,\n     pub(crate) bytes: &'static [u8],\n }\n \n impl StaticFile {\n+    fn new(filename: &str, bytes: &'static [u8]) -> StaticFile {\n+        Self { filename: static_filename(filename, bytes), bytes }\n+    }\n+\n     pub(crate) fn minified(&self) -> Vec<u8> {\n         if self.filename.ends_with(\".css\") {\n             minifier::css::minify(str::from_utf8(self.bytes).unwrap()).unwrap().to_string().into()\n@@ -24,8 +28,8 @@ impl StaticFile {\n         }\n     }\n \n-    pub(crate) fn output_filename(&self) -> PathBuf {\n-        static_filename(self.filename, self.bytes)\n+    pub(crate) fn output_filename(&self) -> &Path {\n+        &self.filename\n     }\n }\n \n@@ -66,13 +70,18 @@ macro_rules! static_files {\n             $(pub $field: StaticFile,)+\n         }\n \n-        pub(crate) const STATIC_FILES: StaticFiles = StaticFiles {\n-            $($field: StaticFile { filename: $file_path, bytes: include_bytes!($file_path) },)+\n-        };\n+        pub(crate) static STATIC_FILES: std::sync::LazyLock<StaticFiles> = std::sync::LazyLock::new(|| StaticFiles {\n+            $($field: StaticFile::new($file_path, include_bytes!($file_path)),)+\n+        });\n \n-        pub(crate) static STATIC_FILES_LIST: &[&'static StaticFile] = &[\n+        pub(crate) fn for_each<E>(f: impl Fn(&StaticFile) -> Result<(), E>) -> Result<(), E> {\n+            for sf in [\n             $(&STATIC_FILES.$field,)+\n-        ];\n+            ] {\n+                f(sf)?\n+            }\n+            Ok(())\n+        }\n     }\n }\n "}]}