{"sha": "4f4b716675cfea6b24d3fc5b47e165875bb76506", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNGI3MTY2NzVjZmVhNmIyNGQzZmM1YjQ3ZTE2NTg3NWJiNzY1MDY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-25T09:01:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-25T09:01:08Z"}, "message": "Rollup merge of #72544 - sexxi-goose:upvars_mentioned, r=matthewjasper\n\nlibrustc_middle: Rename upvars query to upvars_mentioned\n\nAs part of supporting RFC 2229, we will be capturing all the Places that\nwere mentioned in the closure.\n\nThis commit modifies the name of the upvars query to upvars_mentioned.\n\nr? @nikomatsakis @blitzerr @matthewjasper", "tree": {"sha": "0bdc47e1d8eaa39c2842f6b542278f1bddaa7a4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bdc47e1d8eaa39c2842f6b542278f1bddaa7a4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f4b716675cfea6b24d3fc5b47e165875bb76506", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJey4lVCRBK7hj4Ov3rIwAAdHIIAHrzSvPX3Tg6cjexv5awt0Ni\nKTOvKsRgLDqgKfgnooXzHGmyX6TMSHKpGSuNG9xpVfjfK/VjDl8mfeWkIV7vDQgj\nvQZ2TkbEM6LogEPr99z15c4vQdrS1LMh6gfZEzz/fKPxqHW2PiV9Fhp8tAOX/vYW\nN2zSvvXRgXcmVsDGSVVi/X/DYOVz4mQIwMurC+ngKsWEnM5vB2MfYh3yRVR77Mzh\nhzdE2t5dxHab68+ZB5TGF6adXgkXIHGmAs6c4TvvI0JhWUeSweP+dM02ioPOQkVC\ney3/2V8hhCc0rCpSsb3WDnNQ+H2534hSUOdU7H7EmkGmdxuWKfQtuduRRJafPNc=\n=tmUZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 0bdc47e1d8eaa39c2842f6b542278f1bddaa7a4e\nparent 14941cfe1116be6581718fef7437bff8f62d1aad\nparent c3edb15f36653050070b0959682c2d02c2f49bce\nauthor Ralf Jung <post@ralfj.de> 1590397268 +0200\ncommitter GitHub <noreply@github.com> 1590397268 +0200\n\nRollup merge of #72544 - sexxi-goose:upvars_mentioned, r=matthewjasper\n\nlibrustc_middle: Rename upvars query to upvars_mentioned\n\nAs part of supporting RFC 2229, we will be capturing all the Places that\nwere mentioned in the closure.\n\nThis commit modifies the name of the upvars query to upvars_mentioned.\n\nr? @nikomatsakis @blitzerr @matthewjasper\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f4b716675cfea6b24d3fc5b47e165875bb76506", "html_url": "https://github.com/rust-lang/rust/commit/4f4b716675cfea6b24d3fc5b47e165875bb76506", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f4b716675cfea6b24d3fc5b47e165875bb76506/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14941cfe1116be6581718fef7437bff8f62d1aad", "url": "https://api.github.com/repos/rust-lang/rust/commits/14941cfe1116be6581718fef7437bff8f62d1aad", "html_url": "https://github.com/rust-lang/rust/commit/14941cfe1116be6581718fef7437bff8f62d1aad"}, {"sha": "c3edb15f36653050070b0959682c2d02c2f49bce", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3edb15f36653050070b0959682c2d02c2f49bce", "html_url": "https://github.com/rust-lang/rust/commit/c3edb15f36653050070b0959682c2d02c2f49bce"}], "stats": {"total": 75, "additions": 41, "deletions": 34}, "files": [{"sha": "9b9207312e8dddfd938eef398325276e48995f1d", "filename": "src/librustc_middle/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f4b716675cfea6b24d3fc5b47e165875bb76506/src%2Flibrustc_middle%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4b716675cfea6b24d3fc5b47e165875bb76506/src%2Flibrustc_middle%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Farena.rs?ref=4f4b716675cfea6b24d3fc5b47e165875bb76506", "patch": "@@ -61,7 +61,7 @@ macro_rules! arena_types {\n             [few] privacy_access_levels: rustc_middle::middle::privacy::AccessLevels,\n             [few] foreign_module: rustc_middle::middle::cstore::ForeignModule,\n             [few] foreign_modules: Vec<rustc_middle::middle::cstore::ForeignModule>,\n-            [] upvars: rustc_data_structures::fx::FxIndexMap<rustc_hir::HirId, rustc_hir::Upvar>,\n+            [] upvars_mentioned: rustc_data_structures::fx::FxIndexMap<rustc_hir::HirId, rustc_hir::Upvar>,\n             [] object_safety_violations: rustc_middle::traits::ObjectSafetyViolation,\n             [] codegen_unit: rustc_middle::mir::mono::CodegenUnit<$tcx>,\n             [] attribute: rustc_ast::ast::Attribute,"}, {"sha": "c279213e5bd0e9f009e8ee8e4b308f5fbaabc3b5", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f4b716675cfea6b24d3fc5b47e165875bb76506/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4b716675cfea6b24d3fc5b47e165875bb76506/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=4f4b716675cfea6b24d3fc5b47e165875bb76506", "patch": "@@ -2439,7 +2439,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                             };\n                             let mut struct_fmt = fmt.debug_struct(&name);\n \n-                            if let Some(upvars) = tcx.upvars(def_id) {\n+                            if let Some(upvars) = tcx.upvars_mentioned(def_id) {\n                                 for (&var_id, place) in upvars.keys().zip(places) {\n                                     let var_name = tcx.hir().name(var_id);\n                                     struct_fmt.field(&var_name.as_str(), place);\n@@ -2458,7 +2458,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                             let name = format!(\"[generator@{:?}]\", tcx.hir().span(hir_id));\n                             let mut struct_fmt = fmt.debug_struct(&name);\n \n-                            if let Some(upvars) = tcx.upvars(def_id) {\n+                            if let Some(upvars) = tcx.upvars_mentioned(def_id) {\n                                 for (&var_id, place) in upvars.keys().zip(places) {\n                                     let var_name = tcx.hir().name(var_id);\n                                     struct_fmt.field(&var_name.as_str(), place);"}, {"sha": "2445d484754d0fbfbb45c73cd0661a012423d72e", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f4b716675cfea6b24d3fc5b47e165875bb76506/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4b716675cfea6b24d3fc5b47e165875bb76506/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=4f4b716675cfea6b24d3fc5b47e165875bb76506", "patch": "@@ -1040,7 +1040,7 @@ rustc_queries! {\n             desc { \"generating a postorder list of CrateNums\" }\n         }\n \n-        query upvars(_: DefId) -> Option<&'tcx FxIndexMap<hir::HirId, hir::Upvar>> {\n+        query upvars_mentioned(_: DefId) -> Option<&'tcx FxIndexMap<hir::HirId, hir::Upvar>> {\n             eval_always\n         }\n         query maybe_unused_trait_import(def_id: LocalDefId) -> bool {"}, {"sha": "031ce6629bf4dfc1ef959cdf8be51aba28188354", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f4b716675cfea6b24d3fc5b47e165875bb76506/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4b716675cfea6b24d3fc5b47e165875bb76506/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=4f4b716675cfea6b24d3fc5b47e165875bb76506", "patch": "@@ -610,7 +610,7 @@ pub trait PrettyPrinter<'tcx>:\n                         let mut sep = \" \";\n                         for (&var_id, upvar_ty) in self\n                             .tcx()\n-                            .upvars(did)\n+                            .upvars_mentioned(did)\n                             .as_ref()\n                             .iter()\n                             .flat_map(|v| v.keys())\n@@ -659,7 +659,7 @@ pub trait PrettyPrinter<'tcx>:\n                         let mut sep = \" \";\n                         for (&var_id, upvar_ty) in self\n                             .tcx()\n-                            .upvars(did)\n+                            .upvars_mentioned(did)\n                             .as_ref()\n                             .iter()\n                             .flat_map(|v| v.keys())"}, {"sha": "ca8e54ea286491d2112bd266a71ab21a1917db80", "filename": "src/librustc_mir/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4f4b716675cfea6b24d3fc5b47e165875bb76506/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4b716675cfea6b24d3fc5b47e165875bb76506/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=4f4b716675cfea6b24d3fc5b47e165875bb76506", "patch": "@@ -377,11 +377,16 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     self.describe_field_from_ty(&ty, field, variant_index)\n                 }\n                 ty::Closure(def_id, _) | ty::Generator(def_id, _, _) => {\n-                    // `tcx.upvars(def_id)` returns an `Option`, which is `None` in case\n+                    // `tcx.upvars_mentioned(def_id)` returns an `Option`, which is `None` in case\n                     // the closure comes from another crate. But in that case we wouldn't\n                     // be borrowck'ing it, so we can just unwrap:\n-                    let (&var_id, _) =\n-                        self.infcx.tcx.upvars(def_id).unwrap().get_index(field.index()).unwrap();\n+                    let (&var_id, _) = self\n+                        .infcx\n+                        .tcx\n+                        .upvars_mentioned(def_id)\n+                        .unwrap()\n+                        .get_index(field.index())\n+                        .unwrap();\n \n                     self.infcx.tcx.hir().name(var_id).to_string()\n                 }\n@@ -809,7 +814,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let expr = &self.infcx.tcx.hir().expect_expr(hir_id).kind;\n         debug!(\"closure_span: hir_id={:?} expr={:?}\", hir_id, expr);\n         if let hir::ExprKind::Closure(.., body_id, args_span, _) = expr {\n-            for (upvar, place) in self.infcx.tcx.upvars(def_id)?.values().zip(places) {\n+            for (upvar, place) in self.infcx.tcx.upvars_mentioned(def_id)?.values().zip(places) {\n                 match place {\n                     Operand::Copy(place) | Operand::Move(place)\n                         if target_place == place.as_ref() =>"}, {"sha": "114bf5710402f7b79e03a3ffdecce53c30ba0694", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f4b716675cfea6b24d3fc5b47e165875bb76506/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4b716675cfea6b24d3fc5b47e165875bb76506/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=4f4b716675cfea6b24d3fc5b47e165875bb76506", "patch": "@@ -386,7 +386,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n             };\n             let upvars = cx\n                 .tcx\n-                .upvars(def_id)\n+                .upvars_mentioned(def_id)\n                 .iter()\n                 .flat_map(|upvars| upvars.iter())\n                 .zip(substs.upvar_tys())"}, {"sha": "ece78d02512817175db4b8f37ffcbc0ee6bf3d04", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f4b716675cfea6b24d3fc5b47e165875bb76506/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4b716675cfea6b24d3fc5b47e165875bb76506/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=4f4b716675cfea6b24d3fc5b47e165875bb76506", "patch": "@@ -463,7 +463,7 @@ fn visit_expr<'tcx>(ir: &mut IrMaps<'tcx>, expr: &'tcx Expr<'tcx>) {\n         hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) => {\n             debug!(\"expr {}: path that leads to {:?}\", expr.hir_id, path.res);\n             if let Res::Local(var_hir_id) = path.res {\n-                let upvars = ir.tcx.upvars(ir.body_owner);\n+                let upvars = ir.tcx.upvars_mentioned(ir.body_owner);\n                 if !upvars.map_or(false, |upvars| upvars.contains_key(&var_hir_id)) {\n                     ir.add_live_node_for_node(expr.hir_id, ExprNode(expr.span));\n                 }\n@@ -481,8 +481,8 @@ fn visit_expr<'tcx>(ir: &mut IrMaps<'tcx>, expr: &'tcx Expr<'tcx>) {\n             // construction site.\n             let mut call_caps = Vec::new();\n             let closure_def_id = ir.tcx.hir().local_def_id(expr.hir_id);\n-            if let Some(upvars) = ir.tcx.upvars(closure_def_id) {\n-                let parent_upvars = ir.tcx.upvars(ir.body_owner);\n+            if let Some(upvars) = ir.tcx.upvars_mentioned(closure_def_id) {\n+                let parent_upvars = ir.tcx.upvars_mentioned(ir.body_owner);\n                 call_caps.extend(upvars.iter().filter_map(|(&var_id, upvar)| {\n                     let has_parent =\n                         parent_upvars.map_or(false, |upvars| upvars.contains_key(&var_id));\n@@ -1364,7 +1364,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     ) -> LiveNode {\n         match path.res {\n             Res::Local(hid) => {\n-                let upvars = self.ir.tcx.upvars(self.ir.body_owner);\n+                let upvars = self.ir.tcx.upvars_mentioned(self.ir.body_owner);\n                 if !upvars.map_or(false, |upvars| upvars.contains_key(&hid)) {\n                     self.access_var(hir_id, hid, succ, acc, path.span)\n                 } else {\n@@ -1529,7 +1529,7 @@ impl<'tcx> Liveness<'_, 'tcx> {\n         match expr.kind {\n             hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) => {\n                 if let Res::Local(var_hid) = path.res {\n-                    let upvars = self.ir.tcx.upvars(self.ir.body_owner);\n+                    let upvars = self.ir.tcx.upvars_mentioned(self.ir.body_owner);\n                     if !upvars.map_or(false, |upvars| upvars.contains_key(&var_hid)) {\n                         // Assignment to an immutable variable or argument: only legal\n                         // if there is no later assignment. If this local is actually"}, {"sha": "99b4ef9d12fcd2a5872e0a4f764b2587996add7b", "filename": "src/librustc_passes/upvars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f4b716675cfea6b24d3fc5b47e165875bb76506/src%2Flibrustc_passes%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4b716675cfea6b24d3fc5b47e165875bb76506/src%2Flibrustc_passes%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fupvars.rs?ref=4f4b716675cfea6b24d3fc5b47e165875bb76506", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::ty::TyCtxt;\n use rustc_span::Span;\n \n pub fn provide(providers: &mut Providers<'_>) {\n-    providers.upvars = |tcx, def_id| {\n+    providers.upvars_mentioned = |tcx, def_id| {\n         if !tcx.is_closure(def_id) {\n             return None;\n         }\n@@ -89,7 +89,7 @@ impl Visitor<'tcx> for CaptureCollector<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n         if let hir::ExprKind::Closure(..) = expr.kind {\n             let closure_def_id = self.tcx.hir().local_def_id(expr.hir_id);\n-            if let Some(upvars) = self.tcx.upvars(closure_def_id) {\n+            if let Some(upvars) = self.tcx.upvars_mentioned(closure_def_id) {\n                 // Every capture of a closure expression is a local in scope,\n                 // that is moved/copied/borrowed into the closure value, and\n                 // for this analysis they are like any other access to a local."}, {"sha": "31992f298080ead60326a5e846cfa4466f745865", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f4b716675cfea6b24d3fc5b47e165875bb76506/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4b716675cfea6b24d3fc5b47e165875bb76506/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=4f4b716675cfea6b24d3fc5b47e165875bb76506", "patch": "@@ -1380,7 +1380,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let mut interior_or_upvar_span = None;\n         let mut interior_extra_info = None;\n \n-        if let Some(upvars) = self.tcx.upvars(generator_did) {\n+        if let Some(upvars) = self.tcx.upvars_mentioned(generator_did) {\n             interior_or_upvar_span = upvars.iter().find_map(|(upvar_id, upvar)| {\n                 let upvar_ty = tables.node_type(*upvar_id);\n                 let upvar_ty = self.resolve_vars_if_possible(&upvar_ty);"}, {"sha": "af93f9bc8c0a79b74a237c592e20bf5a346281b0", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4f4b716675cfea6b24d3fc5b47e165875bb76506/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4b716675cfea6b24d3fc5b47e165875bb76506/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=4f4b716675cfea6b24d3fc5b47e165875bb76506", "patch": "@@ -90,18 +90,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             base_substs.extend_to(self.tcx, expr_def_id.to_def_id(), |param, _| match param.kind {\n                 GenericParamDefKind::Lifetime => span_bug!(expr.span, \"closure has lifetime param\"),\n                 GenericParamDefKind::Type { .. } => if param.index as usize == tupled_upvars_idx {\n-                    self.tcx.mk_tup(self.tcx.upvars(expr_def_id).iter().flat_map(|upvars| {\n-                        upvars.iter().map(|(&var_hir_id, _)| {\n-                            // Create type variables (for now) to represent the transformed\n-                            // types of upvars. These will be unified during the upvar\n-                            // inference phase (`upvar.rs`).\n-                            self.infcx.next_ty_var(TypeVariableOrigin {\n-                                // FIXME(eddyb) distinguish upvar inference variables from the rest.\n-                                kind: TypeVariableOriginKind::ClosureSynthetic,\n-                                span: self.tcx.hir().span(var_hir_id),\n+                    self.tcx.mk_tup(self.tcx.upvars_mentioned(expr_def_id).iter().flat_map(\n+                        |upvars| {\n+                            upvars.iter().map(|(&var_hir_id, _)| {\n+                                // Create type variables (for now) to represent the transformed\n+                                // types of upvars. These will be unified during the upvar\n+                                // inference phase (`upvar.rs`).\n+                                self.infcx.next_ty_var(TypeVariableOrigin {\n+                                    // FIXME(eddyb) distinguish upvar inference variables from the rest.\n+                                    kind: TypeVariableOriginKind::ClosureSynthetic,\n+                                    span: self.tcx.hir().span(var_hir_id),\n+                                })\n                             })\n-                        })\n-                    }))\n+                        },\n+                    ))\n                 } else {\n                     // Create type variables (for now) to represent the various\n                     // pieces of information kept in `{Closure,Generic}Substs`."}, {"sha": "8707e4fe84a22807e06cf3095efd65dee3766ba1", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f4b716675cfea6b24d3fc5b47e165875bb76506/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4b716675cfea6b24d3fc5b47e165875bb76506/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=4f4b716675cfea6b24d3fc5b47e165875bb76506", "patch": "@@ -111,7 +111,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             None\n         };\n \n-        if let Some(upvars) = self.tcx.upvars(closure_def_id) {\n+        if let Some(upvars) = self.tcx.upvars_mentioned(closure_def_id) {\n             let mut upvar_list: FxIndexMap<hir::HirId, ty::UpvarId> =\n                 FxIndexMap::with_capacity_and_hasher(upvars.len(), Default::default());\n             for (&var_hir_id, _) in upvars.iter() {\n@@ -218,7 +218,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let tcx = self.tcx;\n         let closure_def_id = tcx.hir().local_def_id(closure_id);\n \n-        tcx.upvars(closure_def_id)\n+        tcx.upvars_mentioned(closure_def_id)\n             .iter()\n             .flat_map(|upvars| {\n                 upvars.iter().map(|(&var_hir_id, _)| {"}, {"sha": "53973eba22940fba94b2659ed77bf0b22c5f9b57", "filename": "src/librustc_typeck/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f4b716675cfea6b24d3fc5b47e165875bb76506/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4b716675cfea6b24d3fc5b47e165875bb76506/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs?ref=4f4b716675cfea6b24d3fc5b47e165875bb76506", "patch": "@@ -539,7 +539,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         debug!(\"walk_captures({:?})\", closure_expr);\n \n         let closure_def_id = self.tcx().hir().local_def_id(closure_expr.hir_id);\n-        if let Some(upvars) = self.tcx().upvars(closure_def_id) {\n+        if let Some(upvars) = self.tcx().upvars_mentioned(closure_def_id) {\n             for &var_id in upvars.keys() {\n                 let upvar_id = ty::UpvarId {\n                     var_path: ty::UpvarPath { hir_id: var_id },"}, {"sha": "93d01ccd66f1e1059876a9c1fdbca0c23cf41001", "filename": "src/librustc_typeck/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f4b716675cfea6b24d3fc5b47e165875bb76506/src%2Flibrustc_typeck%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4b716675cfea6b24d3fc5b47e165875bb76506/src%2Flibrustc_typeck%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fmem_categorization.rs?ref=4f4b716675cfea6b24d3fc5b47e165875bb76506", "patch": "@@ -159,7 +159,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             infcx,\n             param_env,\n             body_owner,\n-            upvars: infcx.tcx.upvars(body_owner),\n+            upvars: infcx.tcx.upvars_mentioned(body_owner),\n         }\n     }\n "}]}