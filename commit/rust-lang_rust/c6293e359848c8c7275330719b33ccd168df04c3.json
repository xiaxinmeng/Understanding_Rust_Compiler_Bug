{"sha": "c6293e359848c8c7275330719b33ccd168df04c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MjkzZTM1OTg0OGM4YzcyNzUzMzA3MTliMzNjY2QxNjhkZjA0YzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-03T02:08:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-03T02:08:53Z"}, "message": "Auto merge of #65038 - Centril:rollup-m83dpfh, r=Centril\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #63678 (Improve HRTB error span when -Zno-leak-check is used)\n - #64931 (Reword E0392 slightly)\n - #64959 (syntax: improve parameter without type suggestions)\n - #64975 (Implement Clone::clone_from for LinkedList)\n - #64993 (BacktraceStatus: add Eq impl)\n - #64998 (Filter out RLS output directories on tidy runs)\n - #65010 (Compare `primary` with maximum of `children`s' line num instead of dropping it)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "e57fb077f12e3c6f5e1991e93a873d361a814ea9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e57fb077f12e3c6f5e1991e93a873d361a814ea9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6293e359848c8c7275330719b33ccd168df04c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6293e359848c8c7275330719b33ccd168df04c3", "html_url": "https://github.com/rust-lang/rust/commit/c6293e359848c8c7275330719b33ccd168df04c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6293e359848c8c7275330719b33ccd168df04c3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2daa404e9a151a2e8262cbd6d8c209fd067aca16", "url": "https://api.github.com/repos/rust-lang/rust/commits/2daa404e9a151a2e8262cbd6d8c209fd067aca16", "html_url": "https://github.com/rust-lang/rust/commit/2daa404e9a151a2e8262cbd6d8c209fd067aca16"}, {"sha": "d5a0765f44069d3f56bb91e7b5ba09514f2acffb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5a0765f44069d3f56bb91e7b5ba09514f2acffb", "html_url": "https://github.com/rust-lang/rust/commit/d5a0765f44069d3f56bb91e7b5ba09514f2acffb"}], "stats": {"total": 422, "additions": 357, "deletions": 65}, "files": [{"sha": "702df250999fbed23ebee3dd16ac53f5485719f6", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -1197,6 +1197,19 @@ impl<T: Clone> Clone for LinkedList<T> {\n     fn clone(&self) -> Self {\n         self.iter().cloned().collect()\n     }\n+\n+    fn clone_from(&mut self, other: &Self) {\n+        let mut iter_other = other.iter();\n+        if self.len() > other.len() {\n+            self.split_off(other.len());\n+        }\n+        for (elem, elem_other) in self.iter_mut().zip(&mut iter_other) {\n+            elem.clone_from(elem_other);\n+        }\n+        if !iter_other.is_empty() {\n+            self.extend(iter_other.cloned());\n+        }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "1001f6bba3b823573c7c15d378875b9fa222b0db", "filename": "src/liballoc/collections/linked_list/tests.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Fliballoc%2Fcollections%2Flinked_list%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Fliballoc%2Fcollections%2Flinked_list%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list%2Ftests.rs?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -110,6 +110,49 @@ fn test_append() {\n     check_links(&n);\n }\n \n+#[test]\n+fn test_clone_from() {\n+    // Short cloned from long\n+    {\n+        let v = vec![1, 2, 3, 4, 5];\n+        let u = vec![8, 7, 6, 2, 3, 4, 5];\n+        let mut m = list_from(&v);\n+        let n = list_from(&u);\n+        m.clone_from(&n);\n+        check_links(&m);\n+        assert_eq!(m, n);\n+        for elt in u {\n+            assert_eq!(m.pop_front(), Some(elt))\n+        }\n+    }\n+    // Long cloned from short\n+    {\n+        let v = vec![1, 2, 3, 4, 5];\n+        let u = vec![6, 7, 8];\n+        let mut m = list_from(&v);\n+        let n = list_from(&u);\n+        m.clone_from(&n);\n+        check_links(&m);\n+        assert_eq!(m, n);\n+        for elt in u {\n+            assert_eq!(m.pop_front(), Some(elt))\n+        }\n+    }\n+    // Two equal length lists\n+    {\n+        let v = vec![1, 2, 3, 4, 5];\n+        let u = vec![9, 8, 1, 2, 3];\n+        let mut m = list_from(&v);\n+        let n = list_from(&u);\n+        m.clone_from(&n);\n+        check_links(&m);\n+        assert_eq!(m, n);\n+        for elt in u {\n+            assert_eq!(m.pop_front(), Some(elt))\n+        }\n+    }\n+}\n+\n #[test]\n fn test_insert_prev() {\n     let mut m = list_from(&[0, 2, 4, 6, 8]);"}, {"sha": "35db82406ab4681ca993630a8dba1179cfa5b9ca", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -418,15 +418,27 @@ pub enum NLLRegionVariableOrigin {\n     /// from a `for<'a> T` binder). Meant to represent \"any region\".\n     Placeholder(ty::PlaceholderRegion),\n \n-    Existential,\n+    Existential {\n+        /// If this is true, then this variable was created to represent a lifetime\n+        /// bound in a `for` binder. For example, it might have been created to\n+        /// represent the lifetime `'a` in a type like `for<'a> fn(&'a u32)`.\n+        /// Such variables are created when we are trying to figure out if there\n+        /// is any valid instantiation of `'a` that could fit into some scenario.\n+        ///\n+        /// This is used to inform error reporting: in the case that we are trying to\n+        /// determine whether there is any valid instantiation of a `'a` variable that meets\n+        /// some constraint C, we want to blame the \"source\" of that `for` type,\n+        /// rather than blaming the source of the constraint C.\n+        from_forall: bool\n+    },\n }\n \n impl NLLRegionVariableOrigin {\n     pub fn is_universal(self) -> bool {\n         match self {\n             NLLRegionVariableOrigin::FreeRegion => true,\n             NLLRegionVariableOrigin::Placeholder(..) => true,\n-            NLLRegionVariableOrigin::Existential => false,\n+            NLLRegionVariableOrigin::Existential{ .. } => false,\n         }\n     }\n "}, {"sha": "4649f3f9567e78fb4e3eddcf48eadd3a33c2706f", "filename": "src/librustc/infer/nll_relate/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -93,7 +93,7 @@ pub trait TypeRelatingDelegate<'tcx> {\n     /// we will invoke this method to instantiate `'a` with an\n     /// inference variable (though `'b` would be instantiated first,\n     /// as a placeholder).\n-    fn next_existential_region_var(&mut self) -> ty::Region<'tcx>;\n+    fn next_existential_region_var(&mut self, was_placeholder: bool) -> ty::Region<'tcx>;\n \n     /// Creates a new region variable representing a\n     /// higher-ranked region that is instantiated universally.\n@@ -193,7 +193,7 @@ where\n                     let placeholder = ty::PlaceholderRegion { universe, name: br };\n                     delegate.next_placeholder_region(placeholder)\n                 } else {\n-                    delegate.next_existential_region_var()\n+                    delegate.next_existential_region_var(true)\n                 }\n             }\n         };"}, {"sha": "9aea46da68b1a340631b88c6807754463f46f697", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -1026,7 +1026,8 @@ impl EmitterWriter {\n         children.iter()\n             .map(|sub| self.get_multispan_max_line_num(&sub.span))\n             .max()\n-            .unwrap_or(primary)\n+            .unwrap_or(0)\n+            .max(primary)\n     }\n \n     /// Adds a left margin to every line but the first, given a padding length and the label being"}, {"sha": "a23afd2242cc76e945a1cde4a116683120f80bb5", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 86, "deletions": 12, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -97,9 +97,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         &self,\n         body: &Body<'tcx>,\n         from_region: RegionVid,\n+        from_region_origin: NLLRegionVariableOrigin,\n         target_test: impl Fn(RegionVid) -> bool,\n     ) -> (ConstraintCategory, bool, Span) {\n-        debug!(\"best_blame_constraint(from_region={:?})\", from_region);\n+        debug!(\"best_blame_constraint(from_region={:?}, from_region_origin={:?})\",\n+            from_region, from_region_origin);\n \n         // Find all paths\n         let (path, target_region) =\n@@ -152,19 +154,85 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // we still want to screen for an \"interesting\" point to\n         // highlight (e.g., a call site or something).\n         let target_scc = self.constraint_sccs.scc(target_region);\n-        let best_choice = (0..path.len()).rev().find(|&i| {\n-            let constraint = path[i];\n+        let mut range = 0..path.len();\n+\n+        // As noted above, when reporting an error, there is typically a chain of constraints\n+        // leading from some \"source\" region which must outlive some \"target\" region.\n+        // In most cases, we prefer to \"blame\" the constraints closer to the target --\n+        // but there is one exception. When constraints arise from higher-ranked subtyping,\n+        // we generally prefer to blame the source value,\n+        // as the \"target\" in this case tends to be some type annotation that the user gave.\n+        // Therefore, if we find that the region origin is some instantiation\n+        // of a higher-ranked region, we start our search from the \"source\" point\n+        // rather than the \"target\", and we also tweak a few other things.\n+        //\n+        // An example might be this bit of Rust code:\n+        //\n+        // ```rust\n+        // let x: fn(&'static ()) = |_| {};\n+        // let y: for<'a> fn(&'a ()) = x;\n+        // ```\n+        //\n+        // In MIR, this will be converted into a combination of assignments and type ascriptions.\n+        // In particular, the 'static is imposed through a type ascription:\n+        //\n+        // ```rust\n+        // x = ...;\n+        // AscribeUserType(x, fn(&'static ())\n+        // y = x;\n+        // ```\n+        //\n+        // We wind up ultimately with constraints like\n+        //\n+        // ```rust\n+        // !a: 'temp1 // from the `y = x` statement\n+        // 'temp1: 'temp2\n+        // 'temp2: 'static // from the AscribeUserType\n+        // ```\n+        //\n+        // and here we prefer to blame the source (the y = x statement).\n+        let blame_source = match from_region_origin {\n+            NLLRegionVariableOrigin::FreeRegion\n+                | NLLRegionVariableOrigin::Existential { from_forall: false  } => {\n+                    true\n+            }\n+            NLLRegionVariableOrigin::Placeholder(_)\n+                | NLLRegionVariableOrigin::Existential { from_forall: true  } => {\n+                    false\n+            }\n+        };\n+\n+        let find_region = |i: &usize| {\n+            let constraint = path[*i];\n \n             let constraint_sup_scc = self.constraint_sccs.scc(constraint.sup);\n \n-            match categorized_path[i].0 {\n-                ConstraintCategory::OpaqueType | ConstraintCategory::Boring |\n-                ConstraintCategory::BoringNoLocation | ConstraintCategory::Internal => false,\n-                ConstraintCategory::TypeAnnotation | ConstraintCategory::Return |\n-                ConstraintCategory::Yield => true,\n-                _ => constraint_sup_scc != target_scc,\n+            if blame_source {\n+                match categorized_path[*i].0 {\n+                    ConstraintCategory::OpaqueType | ConstraintCategory::Boring |\n+                    ConstraintCategory::BoringNoLocation | ConstraintCategory::Internal => false,\n+                    ConstraintCategory::TypeAnnotation | ConstraintCategory::Return |\n+                    ConstraintCategory::Yield => true,\n+                    _ => constraint_sup_scc != target_scc,\n+                }\n+            } else {\n+                match categorized_path[*i].0 {\n+                    ConstraintCategory::OpaqueType | ConstraintCategory::Boring |\n+                    ConstraintCategory::BoringNoLocation | ConstraintCategory::Internal => false,\n+                    _ => true\n+                }\n             }\n-        });\n+        };\n+\n+        let best_choice = if blame_source {\n+            range.rev().find(find_region)\n+        } else {\n+            range.find(find_region)\n+        };\n+\n+        debug!(\"best_blame_constraint: best_choice={:?} blame_source={}\",\n+            best_choice, blame_source);\n+\n         if let Some(i) = best_choice {\n             if let Some(next) = categorized_path.get(i + 1) {\n                 if categorized_path[i].0 == ConstraintCategory::Return\n@@ -300,12 +368,13 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         infcx: &'a InferCtxt<'a, 'tcx>,\n         mir_def_id: DefId,\n         fr: RegionVid,\n+        fr_origin: NLLRegionVariableOrigin,\n         outlived_fr: RegionVid,\n         renctx: &mut RegionErrorNamingCtx,\n     ) -> DiagnosticBuilder<'a> {\n         debug!(\"report_error(fr={:?}, outlived_fr={:?})\", fr, outlived_fr);\n \n-        let (category, _, span) = self.best_blame_constraint(body, fr, |r| {\n+        let (category, _, span) = self.best_blame_constraint(body, fr, fr_origin, |r| {\n             self.provides_universal_region(r, fr, outlived_fr)\n         });\n \n@@ -712,6 +781,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let (category, from_closure, span) = self.best_blame_constraint(\n             body,\n             borrow_region,\n+            NLLRegionVariableOrigin::FreeRegion,\n             |r| self.provides_universal_region(r, borrow_region, outlived_region)\n         );\n \n@@ -771,11 +841,13 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         &self,\n         body: &Body<'tcx>,\n         fr1: RegionVid,\n+        fr1_origin: NLLRegionVariableOrigin,\n         fr2: RegionVid,\n     ) -> (ConstraintCategory, Span) {\n         let (category, _, span) = self.best_blame_constraint(\n             body,\n             fr1,\n+            fr1_origin,\n             |r| self.provides_universal_region(r, fr1, fr2),\n         );\n         (category, span)\n@@ -828,7 +900,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 universe1.cannot_name(placeholder.universe)\n             }\n \n-            NLLRegionVariableOrigin::FreeRegion | NLLRegionVariableOrigin::Existential => false,\n+            NLLRegionVariableOrigin::FreeRegion | NLLRegionVariableOrigin::Existential { .. } => {\n+                false\n+            }\n         }\n     }\n }"}, {"sha": "dbb810db555b40769e2de65dca44427f7bb69c24", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -406,7 +406,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     }\n                 }\n \n-                NLLRegionVariableOrigin::Existential => {\n+                NLLRegionVariableOrigin::Existential { .. } => {\n                     // For existential, regions, nothing to do.\n                 }\n             }\n@@ -1348,7 +1348,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     self.check_bound_universal_region(infcx, body, mir_def_id, fr, placeholder);\n                 }\n \n-                NLLRegionVariableOrigin::Existential => {\n+                NLLRegionVariableOrigin::Existential { .. } => {\n                     // nothing to check here\n                 }\n             }\n@@ -1461,7 +1461,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 debug!(\"check_universal_region: fr_minus={:?}\", fr_minus);\n \n                 let blame_span_category =\n-                    self.find_outlives_blame_span(body, longer_fr, shorter_fr);\n+                    self.find_outlives_blame_span(body, longer_fr,\n+                                                  NLLRegionVariableOrigin::FreeRegion,shorter_fr);\n \n                 // Grow `shorter_fr` until we find some non-local regions. (We\n                 // always will.)  We'll call them `shorter_fr+` -- they're ever\n@@ -1494,6 +1495,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             infcx,\n             mir_def_id,\n             longer_fr,\n+            NLLRegionVariableOrigin::FreeRegion,\n             shorter_fr,\n             region_naming,\n         );\n@@ -1547,7 +1549,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         };\n \n         // Find the code to blame for the fact that `longer_fr` outlives `error_fr`.\n-        let (_, span) = self.find_outlives_blame_span(body, longer_fr, error_region);\n+        let (_, span) = self.find_outlives_blame_span(\n+            body, longer_fr, NLLRegionVariableOrigin::Placeholder(placeholder), error_region\n+        );\n \n         // Obviously, this error message is far from satisfactory.\n         // At present, though, it only appears in unit tests --\n@@ -1608,7 +1612,7 @@ impl<'tcx> RegionDefinition<'tcx> {\n \n         let origin = match rv_origin {\n             RegionVariableOrigin::NLL(origin) => origin,\n-            _ => NLLRegionVariableOrigin::Existential,\n+            _ => NLLRegionVariableOrigin::Existential { from_forall: false },\n         };\n \n         Self { origin, universe, external_name: None }"}, {"sha": "315c369716e38f005bad5b602cec465fa3812666", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -35,7 +35,7 @@ where\n     infcx\n         .tcx\n         .fold_regions(value, &mut false, |_region, _depth| {\n-            let origin = NLLRegionVariableOrigin::Existential;\n+            let origin = NLLRegionVariableOrigin::Existential { from_forall: false };\n             infcx.next_nll_region_var(origin)\n         })\n }"}, {"sha": "80bf0478128c792cd9f6d42d8296aba609c24ecc", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -66,9 +66,9 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n         self.infcx.create_next_universe()\n     }\n \n-    fn next_existential_region_var(&mut self) -> ty::Region<'tcx> {\n+    fn next_existential_region_var(&mut self, from_forall: bool) -> ty::Region<'tcx> {\n         if let Some(_) = &mut self.borrowck_context {\n-            let origin = NLLRegionVariableOrigin::Existential;\n+            let origin = NLLRegionVariableOrigin::Existential { from_forall };\n             self.infcx.next_nll_region_var(origin)\n         } else {\n             self.infcx.tcx.lifetimes.re_erased\n@@ -88,7 +88,9 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n \n     fn generalize_existential(&mut self, universe: ty::UniverseIndex) -> ty::Region<'tcx> {\n         self.infcx\n-            .next_nll_region_var_in_universe(NLLRegionVariableOrigin::Existential, universe)\n+            .next_nll_region_var_in_universe(NLLRegionVariableOrigin::Existential {\n+                from_forall: false\n+            }, universe)\n     }\n \n     fn push_outlives(&mut self, sup: ty::Region<'tcx>, sub: ty::Region<'tcx>) {"}, {"sha": "5959c2ea5ca147b90f30bda166af2fdb529510e8", "filename": "src/librustc_traits/chalk_context/unify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Flibrustc_traits%2Fchalk_context%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Flibrustc_traits%2Fchalk_context%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Funify.rs?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -65,7 +65,7 @@ impl TypeRelatingDelegate<'tcx> for &mut ChalkTypeRelatingDelegate<'_, 'tcx> {\n         self.infcx.create_next_universe()\n     }\n \n-    fn next_existential_region_var(&mut self) -> ty::Region<'tcx> {\n+    fn next_existential_region_var(&mut self, _was_placeholder: bool) -> ty::Region<'tcx> {\n         self.infcx.next_region_var(RegionVariableOrigin::MiscVariable(DUMMY_SP))\n     }\n "}, {"sha": "de1cc12aea37cc02a6580a6897cbefe477ce5c50", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -999,11 +999,16 @@ fn report_bivariance(tcx: TyCtxt<'_>, span: Span, param_name: ast::Name) {\n \n     let suggested_marker_id = tcx.lang_items().phantom_data();\n     // Help is available only in presence of lang items.\n-    if let Some(def_id) = suggested_marker_id {\n-        err.help(&format!(\"consider removing `{}` or using a marker such as `{}`\",\n-                          param_name,\n-                          tcx.def_path_str(def_id)));\n-    }\n+    let msg = if let Some(def_id) = suggested_marker_id {\n+        format!(\n+            \"consider removing `{}`, refering to it in a field, or using a marker such as `{}`\",\n+            param_name,\n+            tcx.def_path_str(def_id),\n+        )\n+    } else {\n+        format!( \"consider removing `{}` or refering to it in a field\", param_name)\n+    };\n+    err.help(&msg);\n     err.emit();\n }\n "}, {"sha": "9f400713a86d44e5626c4dcdeb91a7ec9a263c7c", "filename": "src/libstd/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Flibstd%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Flibstd%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbacktrace.rs?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -113,7 +113,7 @@ pub struct Backtrace {\n /// The current status of a backtrace, indicating whether it was captured or\n /// whether it is empty for some other reason.\n #[non_exhaustive]\n-#[derive(Debug)]\n+#[derive(Debug, PartialEq, Eq)]\n pub enum BacktraceStatus {\n     /// Capturing a backtrace is not supported, likely because it's not\n     /// implemented for the current platform."}, {"sha": "4ad0bd06d99aeb68129a470a8b7e13a7c03806a1", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -1220,6 +1220,7 @@ impl<'a> Parser<'a> {\n         err: &mut DiagnosticBuilder<'_>,\n         pat: P<ast::Pat>,\n         require_name: bool,\n+        is_self_allowed: bool,\n         is_trait_item: bool,\n     ) -> Option<Ident> {\n         // If we find a pattern followed by an identifier, it could be an (incorrect)\n@@ -1241,22 +1242,37 @@ impl<'a> Parser<'a> {\n             if require_name && (\n                 is_trait_item ||\n                 self.token == token::Comma ||\n+                self.token == token::Lt ||\n                 self.token == token::CloseDelim(token::Paren)\n-            ) { // `fn foo(a, b) {}` or `fn foo(usize, usize) {}`\n-                err.span_suggestion(\n-                    pat.span,\n-                    \"if this was a parameter name, give it a type\",\n-                    format!(\"{}: TypeName\", ident),\n-                    Applicability::HasPlaceholders,\n-                );\n+            ) { // `fn foo(a, b) {}`, `fn foo(a<x>, b<y>) {}` or `fn foo(usize, usize) {}`\n+                if is_self_allowed {\n+                    err.span_suggestion(\n+                        pat.span,\n+                        \"if this is a `self` type, give it a parameter name\",\n+                        format!(\"self: {}\", ident),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+                // Avoid suggesting that `fn foo(HashMap<u32>)` is fixed with a change to\n+                // `fn foo(HashMap: TypeName<u32>)`.\n+                if self.token != token::Lt {\n+                    err.span_suggestion(\n+                        pat.span,\n+                        \"if this was a parameter name, give it a type\",\n+                        format!(\"{}: TypeName\", ident),\n+                        Applicability::HasPlaceholders,\n+                    );\n+                }\n                 err.span_suggestion(\n                     pat.span,\n                     \"if this is a type, explicitly ignore the parameter name\",\n                     format!(\"_: {}\", ident),\n                     Applicability::MachineApplicable,\n                 );\n                 err.note(\"anonymous parameters are removed in the 2018 edition (see RFC 1685)\");\n-                return Some(ident);\n+\n+                // Don't attempt to recover by using the `X` in `X<Y>` as the parameter name.\n+                return if self.token == token::Lt { None } else { Some(ident) };\n             }\n         }\n         None"}, {"sha": "d4a6e9f6c6bc8f4fa1d9ccd10a024a4151c5d9df", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -1212,6 +1212,7 @@ impl<'a> Parser<'a> {\n                     &mut err,\n                     pat,\n                     is_name_required,\n+                    is_self_allowed,\n                     is_trait_item,\n                 ) {\n                     err.emit();"}, {"sha": "3fcf41a9a60a2f2037b8f6339db1fd95fc214442", "filename": "src/test/ui/anon-params-denied-2018.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fanon-params-denied-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fanon-params-denied-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params-denied-2018.stderr?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -5,6 +5,10 @@ LL |     fn foo(i32);\n    |               ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a `self` type, give it a parameter name\n+   |\n+LL |     fn foo(self: i32);\n+   |            ^^^^^^^^^\n help: if this was a parameter name, give it a type\n    |\n LL |     fn foo(i32: TypeName);\n@@ -21,6 +25,10 @@ LL |     fn bar_with_default_impl(String, String) {}\n    |                                    ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a `self` type, give it a parameter name\n+   |\n+LL |     fn bar_with_default_impl(self: String, String) {}\n+   |                              ^^^^^^^^^^^^\n help: if this was a parameter name, give it a type\n    |\n LL |     fn bar_with_default_impl(String: TypeName, String) {}"}, {"sha": "b50605ce0fe1a2be656cd70ab13735d1ca362a87", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -18,7 +18,7 @@ error[E0392]: parameter `T` is never used\n LL | pub struct Dependent<T, const X: T>([(); X]);\n    |                      ^ unused parameter\n    |\n-   = help: consider removing `T` or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `T`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "25cd9984052fa6b32deb7571559c5ad0450d500b", "filename": "src/test/ui/error-codes/E0392.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Ferror-codes%2FE0392.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Ferror-codes%2FE0392.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0392.stderr?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -4,7 +4,7 @@ error[E0392]: parameter `T` is never used\n LL | enum Foo<T> { Bar }\n    |          ^ unused parameter\n    |\n-   = help: consider removing `T` or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `T`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error: aborting due to previous error\n "}, {"sha": "cd1272da2a66ee8102912859c03b7587e33b06f9", "filename": "src/test/ui/hrtb/issue-30786.nll.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.nll.stderr?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -1,14 +1,20 @@\n error: higher-ranked subtype error\n-  --> $DIR/issue-30786.rs:113:18\n+  --> $DIR/issue-30786.rs:108:15\n+   |\n+LL |     let map = source.map(|x: &_| x);\n+   |               ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/issue-30786.rs:114:18\n    |\n LL |     let filter = map.filter(|x: &_| true);\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: higher-ranked subtype error\n-  --> $DIR/issue-30786.rs:115:17\n+  --> $DIR/issue-30786.rs:116:17\n    |\n LL |     let count = filter.count(); // Assert that we still have a valid stream.\n    |                 ^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "34d6b19f602f7d60c60caaba7bea48c2c0266c32", "filename": "src/test/ui/hrtb/issue-30786.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-30786.rs?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -106,12 +106,14 @@ impl<T> StreamExt for T where for<'a> &'a mut T: Stream { }\n fn main() {\n     let source = Repeat(10);\n     let map = source.map(|x: &_| x);\n-    //[migrate]~^ ERROR implementation of `Stream` is not general enough\n+    //[nll]~^ ERROR higher-ranked subtype error\n+    //[migrate]~^^ ERROR implementation of `Stream` is not general enough\n     //[migrate]~| NOTE  `Stream` would have to be implemented for the type `&'0 mut Map\n     //[migrate]~| NOTE  but `Stream` is actually implemented for the type `&'1\n     //[migrate]~| NOTE  implementation of `Stream` is not general enough\n     let filter = map.filter(|x: &_| true);\n     //[nll]~^ ERROR higher-ranked subtype error\n     let count = filter.count(); // Assert that we still have a valid stream.\n     //[nll]~^ ERROR higher-ranked subtype error\n+\n }"}, {"sha": "e8281b916f6fa236aef88f875e9328c51fdc59b3", "filename": "src/test/ui/inner-static-type-parameter.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Finner-static-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Finner-static-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finner-static-type-parameter.stderr?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -14,7 +14,7 @@ error[E0392]: parameter `T` is never used\n LL | enum Bar<T> { What }\n    |          ^ unused parameter\n    |\n-   = help: consider removing `T` or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `T`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9d1d769158687c4b29c18888dce75b33bcbdfe75", "filename": "src/test/ui/issues/issue-17904-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fissues%2Fissue-17904-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fissues%2Fissue-17904-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17904-2.stderr?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -4,7 +4,7 @@ error[E0392]: parameter `T` is never used\n LL | struct Foo<T> where T: Copy;\n    |            ^ unused parameter\n    |\n-   = help: consider removing `T` or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `T`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error: aborting due to previous error\n "}, {"sha": "675b47a68ad2e96081238334538dc8b8095c8817", "filename": "src/test/ui/issues/issue-20413.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -4,7 +4,7 @@ error[E0392]: parameter `T` is never used\n LL | struct NoData<T>;\n    |               ^ unused parameter\n    |\n-   = help: consider removing `T` or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `T`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Foo`\n   --> $DIR/issue-20413.rs:8:1"}, {"sha": "a092bab0e81f803526cc09ec3b6562ca36250940", "filename": "src/test/ui/issues/issue-36299.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fissues%2Fissue-36299.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fissues%2Fissue-36299.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36299.stderr?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -4,15 +4,15 @@ error[E0392]: parameter `'a` is never used\n LL | struct Foo<'a, A> {}\n    |            ^^ unused parameter\n    |\n-   = help: consider removing `'a` or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `'a`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error[E0392]: parameter `A` is never used\n   --> $DIR/issue-36299.rs:1:16\n    |\n LL | struct Foo<'a, A> {}\n    |                ^ unused parameter\n    |\n-   = help: consider removing `A` or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `A`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "699dba0e3f832c26198f4a7c60fedf1127efdcf6", "filename": "src/test/ui/issues/issue-36638.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fissues%2Fissue-36638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fissues%2Fissue-36638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36638.stderr?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -16,7 +16,7 @@ error[E0392]: parameter `Self` is never used\n LL | struct Foo<Self>(Self);\n    |            ^^^^ unused parameter\n    |\n-   = help: consider removing `Self` or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `Self`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "b5ef6ec594a9f6a01e69046a5e6924f80fa7620f", "filename": "src/test/ui/issues/issue-37534.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -20,7 +20,7 @@ error[E0392]: parameter `T` is never used\n LL | struct Foo<T: ?Hash> { }\n    |            ^ unused parameter\n    |\n-   = help: consider removing `T` or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `T`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ac00627ad00ebfb941165f8fc6bb78ae3d8ce29b", "filename": "src/test/ui/nll/relate_tys/fn-subtype.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Ffn-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Ffn-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Ffn-subtype.rs?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -0,0 +1,10 @@\n+// Test that NLL produces correct spans for higher-ranked subtyping errors.\n+//\n+// compile-flags:-Zno-leak-check\n+\n+#![feature(nll)]\n+\n+fn main() {\n+    let x: fn(&'static ()) = |_| {};\n+    let y: for<'a> fn(&'a ()) = x; //~ ERROR higher-ranked subtype error\n+}"}, {"sha": "b089b5aaa25354595a30cbc0a657999ba16f96f3", "filename": "src/test/ui/nll/relate_tys/fn-subtype.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Ffn-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Ffn-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Ffn-subtype.stderr?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -0,0 +1,8 @@\n+error: higher-ranked subtype error\n+  --> $DIR/fn-subtype.rs:9:33\n+   |\n+LL |     let y: for<'a> fn(&'a ()) = x;\n+   |                                 ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "80f31ca6b4782d86baff8223ee9beac9e84bb4cb", "filename": "src/test/ui/nll/relate_tys/trait-hrtb.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Ftrait-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Ftrait-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Ftrait-hrtb.rs?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -0,0 +1,16 @@\n+// Test that NLL generates proper error spans for trait HRTB errors\n+//\n+// compile-flags:-Zno-leak-check\n+\n+#![feature(nll)]\n+\n+trait Foo<'a> {}\n+\n+fn make_foo<'a>() -> Box<dyn Foo<'a>> {\n+    panic!()\n+}\n+\n+fn main() {\n+    let x: Box<dyn Foo<'static>> = make_foo();\n+    let y: Box<dyn for<'a> Foo<'a>> = x; //~ ERROR higher-ranked subtype error\n+}"}, {"sha": "4df2f352522a3e3078a283bf3b0e83ebb233d9ac", "filename": "src/test/ui/nll/relate_tys/trait-hrtb.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Ftrait-hrtb.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Ftrait-hrtb.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Ftrait-hrtb.stderr?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -0,0 +1,8 @@\n+error: higher-ranked subtype error\n+  --> $DIR/trait-hrtb.rs:15:39\n+   |\n+LL |     let y: Box<dyn for<'a> Foo<'a>> = x;\n+   |                                       ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "2191e31ad1ff28d2b20860127aaf3b4c50c3faa5", "filename": "src/test/ui/parser/pat-lt-bracket-2.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-lt-bracket-2.stderr?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -3,6 +3,12 @@ error: expected one of `:`, `@`, or `|`, found `<`\n    |\n LL | fn a(B<) {}\n    |       ^ expected one of `:`, `@`, or `|` here\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a type, explicitly ignore the parameter name\n+   |\n+LL | fn a(_: B<) {}\n+   |      ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "57a987f703851011cdbf33f0a0641da9bccac816", "filename": "src/test/ui/regions/region-bounds-on-objects-and-type-parameters.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fregions%2Fregion-bounds-on-objects-and-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fregions%2Fregion-bounds-on-objects-and-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-bounds-on-objects-and-type-parameters.stderr?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -27,7 +27,7 @@ error[E0392]: parameter `'c` is never used\n LL | struct Foo<'a,'b,'c> {\n    |                  ^^ unused parameter\n    |\n-   = help: consider removing `'c` or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `'c`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e4248f3b974b97df583223410e27842689e378e6", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-2018.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -5,6 +5,10 @@ LL | trait Trait2015 { fn foo(#[allow(C)] i32); }\n    |                                         ^ expected one of `:`, `@`, or `|` here\n    |\n    = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a `self` type, give it a parameter name\n+   |\n+LL | trait Trait2015 { fn foo(#[allow(C)] self: i32); }\n+   |                                      ^^^^^^^^^\n help: if this was a parameter name, give it a type\n    |\n LL | trait Trait2015 { fn foo(#[allow(C)] i32: TypeName); }"}, {"sha": "456077b65b83ee73999bbe7df38170aba9bc628c", "filename": "src/test/ui/self/self_type_keyword.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_type_keyword.stderr?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -76,7 +76,7 @@ error[E0392]: parameter `'Self` is never used\n LL | struct Bar<'Self>;\n    |            ^^^^^ unused parameter\n    |\n-   = help: consider removing `'Self` or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `'Self`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error: aborting due to 12 previous errors\n "}, {"sha": "8d4a66f142d2cf925c9416528ca4fb419d4ab284", "filename": "src/test/ui/span/issue-34264.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-34264.stderr?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -3,6 +3,12 @@ error: expected one of `:`, `@`, or `|`, found `<`\n    |\n LL | fn foo(Option<i32>, String) {}\n    |              ^ expected one of `:`, `@`, or `|` here\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a type, explicitly ignore the parameter name\n+   |\n+LL | fn foo(_: Option<i32>, String) {}\n+   |        ^^^^^^^^^\n \n error: expected one of `:`, `@`, or `|`, found `)`\n   --> $DIR/issue-34264.rs:1:27"}, {"sha": "128d5e85c22c87329d4dfcaf18fb806c82282ca3", "filename": "src/test/ui/suggestions/issue-64252-self-type.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fsuggestions%2Fissue-64252-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fsuggestions%2Fissue-64252-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-64252-self-type.rs?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -0,0 +1,14 @@\n+// This test checks that a suggestion to add a `self: ` parameter name is provided\n+// to functions where this is applicable.\n+\n+pub fn foo(Box<Self>) { }\n+//~^ ERROR expected one of `:`, `@`, or `|`, found `<`\n+\n+struct Bar;\n+\n+impl Bar {\n+    fn bar(Box<Self>) { }\n+    //~^ ERROR expected one of `:`, `@`, or `|`, found `<`\n+}\n+\n+fn main() { }"}, {"sha": "fa28a0d684e5eebdb31f5b0bfc156cb2f18d63d8", "filename": "src/test/ui/suggestions/issue-64252-self-type.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fsuggestions%2Fissue-64252-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fsuggestions%2Fissue-64252-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-64252-self-type.stderr?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -0,0 +1,30 @@\n+error: expected one of `:`, `@`, or `|`, found `<`\n+  --> $DIR/issue-64252-self-type.rs:4:15\n+   |\n+LL | pub fn foo(Box<Self>) { }\n+   |               ^ expected one of `:`, `@`, or `|` here\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a type, explicitly ignore the parameter name\n+   |\n+LL | pub fn foo(_: Box<Self>) { }\n+   |            ^^^^^^\n+\n+error: expected one of `:`, `@`, or `|`, found `<`\n+  --> $DIR/issue-64252-self-type.rs:10:15\n+   |\n+LL |     fn bar(Box<Self>) { }\n+   |               ^ expected one of `:`, `@`, or `|` here\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a `self` type, give it a parameter name\n+   |\n+LL |     fn bar(self: Box<Self>) { }\n+   |            ^^^^^^^^^\n+help: if this is a type, explicitly ignore the parameter name\n+   |\n+LL |     fn bar(_: Box<Self>) { }\n+   |            ^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "95fa841a758880aecedfb10489c0785a16e7bfb1", "filename": "src/test/ui/variance/variance-regions-unused-direct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fvariance%2Fvariance-regions-unused-direct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fvariance%2Fvariance-regions-unused-direct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-regions-unused-direct.stderr?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -4,15 +4,15 @@ error[E0392]: parameter `'a` is never used\n LL | struct Bivariant<'a>;\n    |                  ^^ unused parameter\n    |\n-   = help: consider removing `'a` or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `'a`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error[E0392]: parameter `'d` is never used\n   --> $DIR/variance-regions-unused-direct.rs:7:19\n    |\n LL | struct Struct<'a, 'd> {\n    |                   ^^ unused parameter\n    |\n-   = help: consider removing `'d` or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `'d`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c90bad8edd478b46d285e6f2b4975d8568844b00", "filename": "src/test/ui/variance/variance-regions-unused-indirect.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fvariance%2Fvariance-regions-unused-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fvariance%2Fvariance-regions-unused-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-regions-unused-indirect.stderr?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -4,15 +4,15 @@ error[E0392]: parameter `'a` is never used\n LL | enum Foo<'a> {\n    |          ^^ unused parameter\n    |\n-   = help: consider removing `'a` or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `'a`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error[E0392]: parameter `'a` is never used\n   --> $DIR/variance-regions-unused-indirect.rs:7:10\n    |\n LL | enum Bar<'a> {\n    |          ^^ unused parameter\n    |\n-   = help: consider removing `'a` or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `'a`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bba301cdbfbcd28499bef21af9ab7309ae52406e", "filename": "src/test/ui/variance/variance-unused-region-param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-region-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-region-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-region-param.stderr?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -4,15 +4,15 @@ error[E0392]: parameter `'a` is never used\n LL | struct SomeStruct<'a> { x: u32 }\n    |                   ^^ unused parameter\n    |\n-   = help: consider removing `'a` or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `'a`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error[E0392]: parameter `'a` is never used\n   --> $DIR/variance-unused-region-param.rs:4:15\n    |\n LL | enum SomeEnum<'a> { Nothing }\n    |               ^^ unused parameter\n    |\n-   = help: consider removing `'a` or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `'a`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d2891015eb7f522af118b7a3709026cb19b94bc8", "filename": "src/test/ui/variance/variance-unused-type-param.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-unused-type-param.stderr?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -4,23 +4,23 @@ error[E0392]: parameter `A` is never used\n LL | struct SomeStruct<A> { x: u32 }\n    |                   ^ unused parameter\n    |\n-   = help: consider removing `A` or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `A`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error[E0392]: parameter `A` is never used\n   --> $DIR/variance-unused-type-param.rs:9:15\n    |\n LL | enum SomeEnum<A> { Nothing }\n    |               ^ unused parameter\n    |\n-   = help: consider removing `A` or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `A`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error[E0392]: parameter `T` is never used\n   --> $DIR/variance-unused-type-param.rs:13:15\n    |\n LL | enum ListCell<T> {\n    |               ^ unused parameter\n    |\n-   = help: consider removing `T` or using a marker such as `std::marker::PhantomData`\n+   = help: consider removing `T`, refering to it in a field, or using a marker such as `std::marker::PhantomData`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "337f9c4d6dbedcc20b8c24a058dcdf5277658f51", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6293e359848c8c7275330719b33ccd168df04c3/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=c6293e359848c8c7275330719b33ccd168df04c3", "patch": "@@ -53,6 +53,9 @@ fn filter_dirs(path: &Path) -> bool {\n         \"src/tools/rls\",\n         \"src/tools/rust-installer\",\n         \"src/tools/rustfmt\",\n+\n+        // Filter RLS output directories\n+        \"target/rls\",\n     ];\n     skip.iter().any(|p| path.ends_with(p))\n }"}]}