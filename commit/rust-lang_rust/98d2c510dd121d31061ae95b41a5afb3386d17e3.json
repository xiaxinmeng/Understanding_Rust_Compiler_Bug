{"sha": "98d2c510dd121d31061ae95b41a5afb3386d17e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZDJjNTEwZGQxMjFkMzEwNjFhZTk1YjQxYTVhZmIzMzg2ZDE3ZTM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-03T17:34:21Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-06T10:10:36Z"}, "message": "safe_extern_static -> error", "tree": {"sha": "9614b0cb1485c1807d2804f4ace1d0a474191868", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9614b0cb1485c1807d2804f4ace1d0a474191868"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98d2c510dd121d31061ae95b41a5afb3386d17e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98d2c510dd121d31061ae95b41a5afb3386d17e3", "html_url": "https://github.com/rust-lang/rust/commit/98d2c510dd121d31061ae95b41a5afb3386d17e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98d2c510dd121d31061ae95b41a5afb3386d17e3/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1", "html_url": "https://github.com/rust-lang/rust/commit/79b35e90f1cbfa21b6a39354cf7d8e8acfa8b0e1"}], "stats": {"total": 151, "additions": 57, "deletions": 94}, "files": [{"sha": "b349c68359cdb24a8c8f9aa2c4be91c13c692753", "filename": "src/doc/rustc/src/lints/listing/deny-by-default.md", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/98d2c510dd121d31061ae95b41a5afb3386d17e3/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/98d2c510dd121d31061ae95b41a5afb3386d17e3/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fdeny-by-default.md?ref=98d2c510dd121d31061ae95b41a5afb3386d17e3", "patch": "@@ -151,11 +151,6 @@ To fix it, remove the `()`s.\n \n This lint detects a specific situation of re-exporting a private `extern crate`;\n \n-## safe-extern-statics\n-\n-In older versions of Rust, there was a soundness issue where `extern static`s were allowed\n-to be accessed in safe code. This lint now catches and denies this kind of code.\n-\n ## unknown-crate-types\n \n This lint detects an unknown crate type found in a `#[crate_type]` directive. Some"}, {"sha": "c1957df2e62dd1cf2397a97a74e154e0f90974d4", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98d2c510dd121d31061ae95b41a5afb3386d17e3/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d2c510dd121d31061ae95b41a5afb3386d17e3/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=98d2c510dd121d31061ae95b41a5afb3386d17e3", "patch": "@@ -177,16 +177,6 @@ declare_lint! {\n     \"lints that have been renamed or removed\"\n }\n \n-declare_lint! {\n-    pub SAFE_EXTERN_STATICS,\n-    Deny,\n-    \"safe access to extern statics was erroneously allowed\",\n-    @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #36247 <https://github.com/rust-lang/rust/issues/36247>\",\n-        edition: None,\n-    };\n-}\n-\n declare_lint! {\n     pub SAFE_PACKED_BORROWS,\n     Warn,\n@@ -535,7 +525,6 @@ declare_lint_pass! {\n         INVALID_TYPE_PARAM_DEFAULT,\n         CONST_ERR,\n         RENAMED_AND_REMOVED_LINTS,\n-        SAFE_EXTERN_STATICS,\n         SAFE_PACKED_BORROWS,\n         PATTERNS_IN_FNS_WITHOUT_BODY,\n         MISSING_FRAGMENT_SPECIFIER,"}, {"sha": "2eaf05beb2e9f8004f1f1be94c950d4cde4c5720", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98d2c510dd121d31061ae95b41a5afb3386d17e3/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d2c510dd121d31061ae95b41a5afb3386d17e3/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=98d2c510dd121d31061ae95b41a5afb3386d17e3", "patch": "@@ -2701,7 +2701,6 @@ pub enum UnsafetyViolationKind {\n     General,\n     /// Permitted both in `const fn`s and regular `fn`s.\n     GeneralAndConstFn,\n-    ExternStatic(hir::HirId),\n     BorrowPacked(hir::HirId),\n }\n "}, {"sha": "5c10399d7dbaee7af047f534900e8dbeb2f40930", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98d2c510dd121d31061ae95b41a5afb3386d17e3/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d2c510dd121d31061ae95b41a5afb3386d17e3/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=98d2c510dd121d31061ae95b41a5afb3386d17e3", "patch": "@@ -338,6 +338,8 @@ fn register_builtins(store: &mut lint::LintStore, no_interleave_lints: bool) {\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/39207\");\n     store.register_removed(\"legacy_disrectory_ownership\",\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/37872\");\n+    store.register_removed(\"safe_extern_statics\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/36247\");\n }\n \n fn register_internals(store: &mut lint::LintStore) {"}, {"sha": "9dc4fdf53083fbea4c99600bd7cce22298f9f3ae", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 15, "deletions": 28, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/98d2c510dd121d31061ae95b41a5afb3386d17e3/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d2c510dd121d31061ae95b41a5afb3386d17e3/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=98d2c510dd121d31061ae95b41a5afb3386d17e3", "patch": "@@ -8,7 +8,7 @@ use rustc::ty::cast::CastTy;\n use rustc::hir;\n use rustc::hir::Node;\n use rustc::hir::def_id::DefId;\n-use rustc::lint::builtin::{SAFE_EXTERN_STATICS, SAFE_PACKED_BORROWS, UNUSED_UNSAFE};\n+use rustc::lint::builtin::{SAFE_PACKED_BORROWS, UNUSED_UNSAFE};\n use rustc::mir::*;\n use rustc::mir::visit::{PlaceContext, Visitor, MutatingUseContext};\n \n@@ -208,23 +208,20 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             }\n             PlaceBase::Static(box Static { kind: StaticKind::Static, def_id, .. }) => {\n                 if self.tcx.is_mutable_static(def_id) {\n-                    self.require_unsafe(\"use of mutable static\",\n+                    self.require_unsafe(\n+                        \"use of mutable static\",\n                         \"mutable statics can be mutated by multiple threads: aliasing \\\n-                         violations or data races will cause undefined behavior\",\n-                         UnsafetyViolationKind::General);\n+                        violations or data races will cause undefined behavior\",\n+                        UnsafetyViolationKind::General,\n+                    );\n                 } else if self.tcx.is_foreign_item(def_id) {\n-                    let source_info = self.source_info;\n-                    let lint_root =\n-                        self.source_scope_local_data[source_info.scope].lint_root;\n-                    self.register_violations(&[UnsafetyViolation {\n-                        source_info,\n-                        description: Symbol::intern(\"use of extern static\"),\n-                        details: Symbol::intern(\n-                            \"extern statics are not controlled by the Rust type system: \\\n-                            invalid data, aliasing violations or data races will cause \\\n-                            undefined behavior\"),\n-                        kind: UnsafetyViolationKind::ExternStatic(lint_root)\n-                    }], &[]);\n+                    self.require_unsafe(\n+                        \"use of extern static\",\n+                        \"extern statics are not controlled by the Rust type system: \\\n+                        invalid data, aliasing violations or data races will cause \\\n+                        undefined behavior\",\n+                        UnsafetyViolationKind::General,\n+                    );\n                 }\n             }\n         }\n@@ -351,8 +348,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                     match violation.kind {\n                         UnsafetyViolationKind::GeneralAndConstFn |\n                         UnsafetyViolationKind::General => {},\n-                        UnsafetyViolationKind::BorrowPacked(_) |\n-                        UnsafetyViolationKind::ExternStatic(_) => if self.min_const_fn {\n+                        UnsafetyViolationKind::BorrowPacked(_) => if self.min_const_fn {\n                             // const fns don't need to be backwards compatible and can\n                             // emit these violations as a hard error instead of a backwards\n                             // compat lint\n@@ -380,8 +376,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                             UnsafetyViolationKind::GeneralAndConstFn => {},\n                             // these things are forbidden in const fns\n                             UnsafetyViolationKind::General |\n-                            UnsafetyViolationKind::BorrowPacked(_) |\n-                            UnsafetyViolationKind::ExternStatic(_) => {\n+                            UnsafetyViolationKind::BorrowPacked(_) => {\n                                 let mut violation = violation.clone();\n                                 // const fns don't need to be backwards compatible and can\n                                 // emit these violations as a hard error instead of a backwards\n@@ -646,14 +641,6 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: DefId) {\n                     .note(&details.as_str())\n                     .emit();\n             }\n-            UnsafetyViolationKind::ExternStatic(lint_hir_id) => {\n-                tcx.lint_node_note(SAFE_EXTERN_STATICS,\n-                              lint_hir_id,\n-                              source_info.span,\n-                              &format!(\"{} is unsafe and requires unsafe function or block \\\n-                                        (error E0133)\", description),\n-                              &details.as_str());\n-            }\n             UnsafetyViolationKind::BorrowPacked(lint_hir_id) => {\n                 if let Some(impl_def_id) = builtin_derive_def_id(tcx, def_id) {\n                     tcx.unsafe_derive_on_repr_packed(impl_def_id);"}, {"sha": "d80eefc41bf53cd3bba4cf0a9ba46eec8b024f80", "filename": "src/test/ui/issues/issue-14227.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/98d2c510dd121d31061ae95b41a5afb3386d17e3/src%2Ftest%2Fui%2Fissues%2Fissue-14227.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d2c510dd121d31061ae95b41a5afb3386d17e3/src%2Ftest%2Fui%2Fissues%2Fissue-14227.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14227.rs?ref=98d2c510dd121d31061ae95b41a5afb3386d17e3", "patch": "@@ -1,10 +1,7 @@\n-#![allow(safe_extern_statics, warnings)]\n-\n extern {\n     pub static symbol: u32;\n }\n static CRASH: u32 = symbol;\n-//~^ ERROR could not evaluate static initializer\n-//~| tried to read from foreign (extern) static\n+//~^ ERROR use of extern static is unsafe and requires\n \n fn main() {}"}, {"sha": "f9cdbe452df9c4b5f09774dd4dbf95a5467a0b14", "filename": "src/test/ui/issues/issue-14227.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98d2c510dd121d31061ae95b41a5afb3386d17e3/src%2Ftest%2Fui%2Fissues%2Fissue-14227.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98d2c510dd121d31061ae95b41a5afb3386d17e3/src%2Ftest%2Fui%2Fissues%2Fissue-14227.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14227.stderr?ref=98d2c510dd121d31061ae95b41a5afb3386d17e3", "patch": "@@ -1,9 +1,11 @@\n-error[E0080]: could not evaluate static initializer\n-  --> $DIR/issue-14227.rs:6:21\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/issue-14227.rs:4:21\n    |\n LL | static CRASH: u32 = symbol;\n-   |                     ^^^^^^ tried to read from foreign (extern) static\n+   |                     ^^^^^^ use of extern static\n+   |\n+   = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "54d9a732912c77b80ac6ed0bdb59027c6fcdd337", "filename": "src/test/ui/issues/issue-16538.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98d2c510dd121d31061ae95b41a5afb3386d17e3/src%2Ftest%2Fui%2Fissues%2Fissue-16538.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d2c510dd121d31061ae95b41a5afb3386d17e3/src%2Ftest%2Fui%2Fissues%2Fissue-16538.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16538.rs?ref=98d2c510dd121d31061ae95b41a5afb3386d17e3", "patch": "@@ -1,5 +1,3 @@\n-#![allow(safe_extern_statics)]\n-\n mod Y {\n     pub type X = usize;\n     extern {\n@@ -13,5 +11,6 @@ mod Y {\n static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n //~^ ERROR `*const usize` cannot be shared between threads safely [E0277]\n //~| ERROR E0015\n+//~| ERROR use of extern static is unsafe and requires\n \n fn main() {}"}, {"sha": "5e1f95a989ee0fbf7cc812ecdf6e360a019a76b6", "filename": "src/test/ui/issues/issue-16538.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/98d2c510dd121d31061ae95b41a5afb3386d17e3/src%2Ftest%2Fui%2Fissues%2Fissue-16538.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98d2c510dd121d31061ae95b41a5afb3386d17e3/src%2Ftest%2Fui%2Fissues%2Fissue-16538.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16538.stderr?ref=98d2c510dd121d31061ae95b41a5afb3386d17e3", "patch": "@@ -1,19 +1,27 @@\n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/issue-16538.rs:13:27\n+  --> $DIR/issue-16538.rs:11:27\n    |\n LL | static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `*const usize` cannot be shared between threads safely\n-  --> $DIR/issue-16538.rs:13:1\n+  --> $DIR/issue-16538.rs:11:1\n    |\n LL | static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `*const usize` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `*const usize`\n    = note: shared static variables must have a type that implements `Sync`\n \n-error: aborting due to 2 previous errors\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/issue-16538.rs:11:34\n+   |\n+LL | static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n+   |                                  ^^^^ use of extern static\n+   |\n+   = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n+\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0015, E0277.\n+Some errors have detailed explanations: E0015, E0133, E0277.\n For more information about an error, try `rustc --explain E0015`."}, {"sha": "bb48508a4a438d5f51eb853447411932b8babf62", "filename": "src/test/ui/issues/issue-28324.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/98d2c510dd121d31061ae95b41a5afb3386d17e3/src%2Ftest%2Fui%2Fissues%2Fissue-28324.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d2c510dd121d31061ae95b41a5afb3386d17e3/src%2Ftest%2Fui%2Fissues%2Fissue-28324.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28324.rs?ref=98d2c510dd121d31061ae95b41a5afb3386d17e3", "patch": "@@ -1,11 +1,8 @@\n-#![allow(safe_extern_statics)]\n-\n extern {\n     static error_message_count: u32;\n }\n \n pub static BAZ: u32 = *&error_message_count;\n-//~^ ERROR could not evaluate static initializer\n-//~| tried to read from foreign (extern) static\n+//~^ ERROR use of extern static is unsafe and requires\n \n fn main() {}"}, {"sha": "d7dad99215204f0f02985133fa3809a59dd297d3", "filename": "src/test/ui/issues/issue-28324.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98d2c510dd121d31061ae95b41a5afb3386d17e3/src%2Ftest%2Fui%2Fissues%2Fissue-28324.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98d2c510dd121d31061ae95b41a5afb3386d17e3/src%2Ftest%2Fui%2Fissues%2Fissue-28324.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28324.stderr?ref=98d2c510dd121d31061ae95b41a5afb3386d17e3", "patch": "@@ -1,9 +1,11 @@\n-error[E0080]: could not evaluate static initializer\n-  --> $DIR/issue-28324.rs:7:23\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/issue-28324.rs:5:24\n    |\n LL | pub static BAZ: u32 = *&error_message_count;\n-   |                       ^^^^^^^^^^^^^^^^^^^^^ tried to read from foreign (extern) static\n+   |                        ^^^^^^^^^^^^^^^^^^^^ use of extern static\n+   |\n+   = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "0535a078d2c31cb9c3ca006bf03c1aaeeafad5ef", "filename": "src/test/ui/safe-extern-statics.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98d2c510dd121d31061ae95b41a5afb3386d17e3/src%2Ftest%2Fui%2Fsafe-extern-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98d2c510dd121d31061ae95b41a5afb3386d17e3/src%2Ftest%2Fui%2Fsafe-extern-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsafe-extern-statics.rs?ref=98d2c510dd121d31061ae95b41a5afb3386d17e3", "patch": "@@ -1,7 +1,5 @@\n // aux-build:extern-statics.rs\n \n-#![allow(unused)]\n-\n extern crate extern_statics;\n use extern_statics::*;\n \n@@ -11,11 +9,7 @@ extern {\n \n fn main() {\n     let a = A; //~ ERROR use of extern static is unsafe\n-               //~^ WARN this was previously accepted by the compiler\n     let ra = &A; //~ ERROR use of extern static is unsafe\n-                 //~^ WARN this was previously accepted by the compiler\n     let xa = XA; //~ ERROR use of extern static is unsafe\n-                 //~^ WARN this was previously accepted by the compiler\n     let xra = &XA; //~ ERROR use of extern static is unsafe\n-                   //~^ WARN this was previously accepted by the compiler\n }"}, {"sha": "b42572ea3eeb52b39dbb55bd128c078f6db5d411", "filename": "src/test/ui/safe-extern-statics.stderr", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/98d2c510dd121d31061ae95b41a5afb3386d17e3/src%2Ftest%2Fui%2Fsafe-extern-statics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98d2c510dd121d31061ae95b41a5afb3386d17e3/src%2Ftest%2Fui%2Fsafe-extern-statics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsafe-extern-statics.stderr?ref=98d2c510dd121d31061ae95b41a5afb3386d17e3", "patch": "@@ -1,43 +1,35 @@\n-error: use of extern static is unsafe and requires unsafe function or block (error E0133)\n-  --> $DIR/safe-extern-statics.rs:13:13\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/safe-extern-statics.rs:11:13\n    |\n LL |     let a = A;\n-   |             ^\n+   |             ^ use of extern static\n    |\n-   = note: `#[deny(safe_extern_statics)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #36247 <https://github.com/rust-lang/rust/issues/36247>\n    = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n \n-error: use of extern static is unsafe and requires unsafe function or block (error E0133)\n-  --> $DIR/safe-extern-statics.rs:15:14\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/safe-extern-statics.rs:12:14\n    |\n LL |     let ra = &A;\n-   |              ^^\n+   |              ^^ use of extern static\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #36247 <https://github.com/rust-lang/rust/issues/36247>\n    = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n \n-error: use of extern static is unsafe and requires unsafe function or block (error E0133)\n-  --> $DIR/safe-extern-statics.rs:17:14\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/safe-extern-statics.rs:13:14\n    |\n LL |     let xa = XA;\n-   |              ^^\n+   |              ^^ use of extern static\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #36247 <https://github.com/rust-lang/rust/issues/36247>\n    = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n \n-error: use of extern static is unsafe and requires unsafe function or block (error E0133)\n-  --> $DIR/safe-extern-statics.rs:19:15\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/safe-extern-statics.rs:14:15\n    |\n LL |     let xra = &XA;\n-   |               ^^^\n+   |               ^^^ use of extern static\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #36247 <https://github.com/rust-lang/rust/issues/36247>\n    = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n \n error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0133`."}]}