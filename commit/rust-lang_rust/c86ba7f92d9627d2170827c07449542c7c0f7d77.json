{"sha": "c86ba7f92d9627d2170827c07449542c7c0f7d77", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NmJhN2Y5MmQ5NjI3ZDIxNzA4MjdjMDc0NDk1NDJjN2MwZjdkNzc=", "commit": {"author": {"name": "Mateusz Gacek", "email": "96mateusz.gacek@gmail.com", "date": "2021-03-01T15:49:52Z"}, "committer": {"name": "Mateusz Gacek", "email": "96mateusz.gacek@gmail.com", "date": "2021-03-12T20:57:54Z"}, "message": "mem_replace_with_default: recognize some std library ctors", "tree": {"sha": "4505f10bc352daf6323949c8e2cc94902bf0da0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4505f10bc352daf6323949c8e2cc94902bf0da0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c86ba7f92d9627d2170827c07449542c7c0f7d77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c86ba7f92d9627d2170827c07449542c7c0f7d77", "html_url": "https://github.com/rust-lang/rust/commit/c86ba7f92d9627d2170827c07449542c7c0f7d77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c86ba7f92d9627d2170827c07449542c7c0f7d77/comments", "author": {"login": "mgacek8", "id": 24357739, "node_id": "MDQ6VXNlcjI0MzU3NzM5", "avatar_url": "https://avatars.githubusercontent.com/u/24357739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgacek8", "html_url": "https://github.com/mgacek8", "followers_url": "https://api.github.com/users/mgacek8/followers", "following_url": "https://api.github.com/users/mgacek8/following{/other_user}", "gists_url": "https://api.github.com/users/mgacek8/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgacek8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgacek8/subscriptions", "organizations_url": "https://api.github.com/users/mgacek8/orgs", "repos_url": "https://api.github.com/users/mgacek8/repos", "events_url": "https://api.github.com/users/mgacek8/events{/privacy}", "received_events_url": "https://api.github.com/users/mgacek8/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mgacek8", "id": 24357739, "node_id": "MDQ6VXNlcjI0MzU3NzM5", "avatar_url": "https://avatars.githubusercontent.com/u/24357739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgacek8", "html_url": "https://github.com/mgacek8", "followers_url": "https://api.github.com/users/mgacek8/followers", "following_url": "https://api.github.com/users/mgacek8/following{/other_user}", "gists_url": "https://api.github.com/users/mgacek8/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgacek8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgacek8/subscriptions", "organizations_url": "https://api.github.com/users/mgacek8/orgs", "repos_url": "https://api.github.com/users/mgacek8/repos", "events_url": "https://api.github.com/users/mgacek8/events{/privacy}", "received_events_url": "https://api.github.com/users/mgacek8/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ed6f1e6a1a8f414ba7e6d9b8222e7e5a1686e42", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ed6f1e6a1a8f414ba7e6d9b8222e7e5a1686e42", "html_url": "https://github.com/rust-lang/rust/commit/6ed6f1e6a1a8f414ba7e6d9b8222e7e5a1686e42"}], "stats": {"total": 161, "additions": 154, "deletions": 7}, "files": [{"sha": "2f71e22b4fc0e2d2e9c2b25a00dfa60bad2ff624", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c86ba7f92d9627d2170827c07449542c7c0f7d77/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86ba7f92d9627d2170827c07449542c7c0f7d77/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=c86ba7f92d9627d2170827c07449542c7c0f7d77", "patch": "@@ -200,7 +200,22 @@ fn check_replace_with_default(cx: &LateContext<'_>, src: &Expr<'_>, dest: &Expr<\n             if !in_external_macro(cx.tcx.sess, expr_span);\n             if let ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n             if let Some(repl_def_id) = cx.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n-            if match_def_path(cx, repl_def_id, &paths::DEFAULT_TRAIT_METHOD);\n+\n+            let defaults = &[\n+                paths::DEFAULT_TRAIT_METHOD.as_ref(),\n+                paths::STRING_NEW.as_ref(),\n+                paths::VEC_NEW.as_ref(),\n+                paths::VEC_DEQUE_NEW.as_ref(),\n+                paths::LINKED_LIST_NEW.as_ref(),\n+                paths::HASHMAP_NEW.as_ref(),\n+                paths::BTREEMAP_NEW.as_ref(),\n+                paths::HASHSET_NEW.as_ref(),\n+                paths::BTREESET_NEW.as_ref(),\n+                paths::BINARY_HEAP_NEW.as_ref(),\n+            ];\n+\n+            if defaults.iter().any(|x| match_def_path(cx, repl_def_id, &x));\n+\n             then {\n                 span_lint_and_then(\n                     cx,"}, {"sha": "8234ab7282cf1276eed54e452e0e50bfe54cafeb", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c86ba7f92d9627d2170827c07449542c7c0f7d77/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86ba7f92d9627d2170827c07449542c7c0f7d77/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=c86ba7f92d9627d2170827c07449542c7c0f7d77", "patch": "@@ -11,10 +11,13 @@ pub const ASREF_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsRef\"];\n pub(super) const BEGIN_PANIC: [&str; 3] = [\"std\", \"panicking\", \"begin_panic\"];\n pub(super) const BEGIN_PANIC_FMT: [&str; 3] = [\"std\", \"panicking\", \"begin_panic_fmt\"];\n pub const BINARY_HEAP: [&str; 4] = [\"alloc\", \"collections\", \"binary_heap\", \"BinaryHeap\"];\n+pub const BINARY_HEAP_NEW: [&str; 5] = [\"alloc\", \"collections\", \"binary_heap\", \"BinaryHeap\", \"new\"];\n pub const BORROW_TRAIT: [&str; 3] = [\"core\", \"borrow\", \"Borrow\"];\n pub const BTREEMAP: [&str; 5] = [\"alloc\", \"collections\", \"btree\", \"map\", \"BTreeMap\"];\n+pub const BTREEMAP_NEW: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"map\", \"BTreeMap\", \"new\"];\n pub const BTREEMAP_ENTRY: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"map\", \"entry\", \"Entry\"];\n pub const BTREESET: [&str; 5] = [\"alloc\", \"collections\", \"btree\", \"set\", \"BTreeSet\"];\n+pub const BTREESET_NEW: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"set\", \"BTreeSet\", \"new\"];\n pub const CLONE_TRAIT_METHOD: [&str; 4] = [\"core\", \"clone\", \"Clone\", \"clone\"];\n pub const CMP_MAX: [&str; 3] = [\"core\", \"cmp\", \"max\"];\n pub const CMP_MIN: [&str; 3] = [\"core\", \"cmp\", \"min\"];\n@@ -46,8 +49,10 @@ pub const FROM_ITERATOR: [&str; 5] = [\"core\", \"iter\", \"traits\", \"collect\", \"From\n pub const FUTURE_FROM_GENERATOR: [&str; 3] = [\"core\", \"future\", \"from_generator\"];\n pub const HASH: [&str; 3] = [\"core\", \"hash\", \"Hash\"];\n pub const HASHMAP: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"];\n+pub const HASHMAP_NEW: [&str; 6] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\", \"new\"];\n pub const HASHMAP_ENTRY: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entry\"];\n pub const HASHSET: [&str; 5] = [\"std\", \"collections\", \"hash\", \"set\", \"HashSet\"];\n+pub const HASHSET_NEW: [&str; 6] = [\"std\", \"collections\", \"hash\", \"set\", \"HashSet\", \"new\"];\n #[cfg(feature = \"internal-lints\")]\n pub const IDENT: [&str; 3] = [\"rustc_span\", \"symbol\", \"Ident\"];\n #[cfg(feature = \"internal-lints\")]\n@@ -67,6 +72,7 @@ pub const KW_MODULE: [&str; 3] = [\"rustc_span\", \"symbol\", \"kw\"];\n #[cfg(feature = \"internal-lints\")]\n pub const LATE_CONTEXT: [&str; 2] = [\"rustc_lint\", \"LateContext\"];\n pub const LINKED_LIST: [&str; 4] = [\"alloc\", \"collections\", \"linked_list\", \"LinkedList\"];\n+pub const LINKED_LIST_NEW: [&str; 5] = [\"alloc\", \"collections\", \"linked_list\", \"LinkedList\", \"new\"];\n #[cfg(feature = \"internal-lints\")]\n pub const LINT: [&str; 2] = [\"rustc_lint_defs\", \"Lint\"];\n pub const MEM_DISCRIMINANT: [&str; 3] = [\"core\", \"mem\", \"discriminant\"];\n@@ -134,6 +140,7 @@ pub const STD_CONVERT_IDENTITY: [&str; 3] = [\"std\", \"convert\", \"identity\"];\n pub const STD_FS_CREATE_DIR: [&str; 3] = [\"std\", \"fs\", \"create_dir\"];\n pub const STD_MEM_TRANSMUTE: [&str; 3] = [\"std\", \"mem\", \"transmute\"];\n pub const STD_PTR_NULL: [&str; 3] = [\"std\", \"ptr\", \"null\"];\n+pub const STRING_NEW: [&str; 4] = [\"alloc\", \"string\", \"String\", \"new\"];\n pub const STRING_AS_MUT_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"as_mut_str\"];\n pub const STRING_AS_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"as_str\"];\n pub const STR_ENDS_WITH: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"ends_with\"];\n@@ -161,6 +168,7 @@ pub const VEC: [&str; 3] = [\"alloc\", \"vec\", \"Vec\"];\n pub const VEC_AS_MUT_SLICE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"as_mut_slice\"];\n pub const VEC_AS_SLICE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"as_slice\"];\n pub const VEC_DEQUE: [&str; 4] = [\"alloc\", \"collections\", \"vec_deque\", \"VecDeque\"];\n+pub const VEC_DEQUE_NEW: [&str; 5] = [\"alloc\", \"collections\", \"vec_deque\", \"VecDeque\", \"new\"];\n pub const VEC_FROM_ELEM: [&str; 3] = [\"alloc\", \"vec\", \"from_elem\"];\n pub const VEC_NEW: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"new\"];\n pub const VEC_RESIZE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"resize\"];"}, {"sha": "3b6224254a0a72d6a1b868acbd695bf7bdd79075", "filename": "tests/ui/mem_replace.fixed", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c86ba7f92d9627d2170827c07449542c7c0f7d77/tests%2Fui%2Fmem_replace.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c86ba7f92d9627d2170827c07449542c7c0f7d77/tests%2Fui%2Fmem_replace.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.fixed?ref=c86ba7f92d9627d2170827c07449542c7c0f7d77", "patch": "@@ -7,6 +7,7 @@\n     clippy::mem_replace_with_default\n )]\n \n+use std::collections::{BTreeMap, BTreeSet, BinaryHeap, HashMap, HashSet, LinkedList, VecDeque};\n use std::mem;\n \n fn replace_option_with_none() {\n@@ -19,9 +20,37 @@ fn replace_option_with_none() {\n fn replace_with_default() {\n     let mut s = String::from(\"foo\");\n     let _ = std::mem::take(&mut s);\n+\n     let s = &mut String::from(\"foo\");\n     let _ = std::mem::take(s);\n     let _ = std::mem::take(s);\n+\n+    let mut v = vec![123];\n+    let _ = std::mem::take(&mut v);\n+    let _ = std::mem::take(&mut v);\n+    let _ = std::mem::take(&mut v);\n+    let _ = std::mem::take(&mut v);\n+\n+    let mut hash_map: HashMap<i32, i32> = HashMap::new();\n+    let _ = std::mem::take(&mut hash_map);\n+\n+    let mut btree_map: BTreeMap<i32, i32> = BTreeMap::new();\n+    let _ = std::mem::take(&mut btree_map);\n+\n+    let mut vd: VecDeque<i32> = VecDeque::new();\n+    let _ = std::mem::take(&mut vd);\n+\n+    let mut hash_set: HashSet<&str> = HashSet::new();\n+    let _ = std::mem::take(&mut hash_set);\n+\n+    let mut btree_set: BTreeSet<&str> = BTreeSet::new();\n+    let _ = std::mem::take(&mut btree_set);\n+\n+    let mut list: LinkedList<i32> = LinkedList::new();\n+    let _ = std::mem::take(&mut list);\n+\n+    let mut binary_heap: BinaryHeap<i32> = BinaryHeap::new();\n+    let _ = std::mem::take(&mut binary_heap);\n }\n \n fn main() {"}, {"sha": "0a36db9e92159ad6f0dadb1fa7fd57b92b47ae20", "filename": "tests/ui/mem_replace.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c86ba7f92d9627d2170827c07449542c7c0f7d77/tests%2Fui%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86ba7f92d9627d2170827c07449542c7c0f7d77/tests%2Fui%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.rs?ref=c86ba7f92d9627d2170827c07449542c7c0f7d77", "patch": "@@ -7,6 +7,7 @@\n     clippy::mem_replace_with_default\n )]\n \n+use std::collections::{BTreeMap, BTreeSet, BinaryHeap, HashMap, HashSet, LinkedList, VecDeque};\n use std::mem;\n \n fn replace_option_with_none() {\n@@ -19,9 +20,37 @@ fn replace_option_with_none() {\n fn replace_with_default() {\n     let mut s = String::from(\"foo\");\n     let _ = std::mem::replace(&mut s, String::default());\n+\n     let s = &mut String::from(\"foo\");\n     let _ = std::mem::replace(s, String::default());\n     let _ = std::mem::replace(s, Default::default());\n+\n+    let mut v = vec![123];\n+    let _ = std::mem::replace(&mut v, Vec::default());\n+    let _ = std::mem::replace(&mut v, Default::default());\n+    let _ = std::mem::replace(&mut v, Vec::new());\n+    let _ = std::mem::replace(&mut v, vec![]);\n+\n+    let mut hash_map: HashMap<i32, i32> = HashMap::new();\n+    let _ = std::mem::replace(&mut hash_map, HashMap::new());\n+\n+    let mut btree_map: BTreeMap<i32, i32> = BTreeMap::new();\n+    let _ = std::mem::replace(&mut btree_map, BTreeMap::new());\n+\n+    let mut vd: VecDeque<i32> = VecDeque::new();\n+    let _ = std::mem::replace(&mut vd, VecDeque::new());\n+\n+    let mut hash_set: HashSet<&str> = HashSet::new();\n+    let _ = std::mem::replace(&mut hash_set, HashSet::new());\n+\n+    let mut btree_set: BTreeSet<&str> = BTreeSet::new();\n+    let _ = std::mem::replace(&mut btree_set, BTreeSet::new());\n+\n+    let mut list: LinkedList<i32> = LinkedList::new();\n+    let _ = std::mem::replace(&mut list, LinkedList::new());\n+\n+    let mut binary_heap: BinaryHeap<i32> = BinaryHeap::new();\n+    let _ = std::mem::replace(&mut binary_heap, BinaryHeap::new());\n }\n \n fn main() {"}, {"sha": "f8aa1538bffa87769567e4790ea5d147caaf20e4", "filename": "tests/ui/mem_replace.stderr", "status": "modified", "additions": 72, "deletions": 6, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/c86ba7f92d9627d2170827c07449542c7c0f7d77/tests%2Fui%2Fmem_replace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c86ba7f92d9627d2170827c07449542c7c0f7d77/tests%2Fui%2Fmem_replace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.stderr?ref=c86ba7f92d9627d2170827c07449542c7c0f7d77", "patch": "@@ -1,36 +1,102 @@\n error: replacing an `Option` with `None`\n-  --> $DIR/mem_replace.rs:14:13\n+  --> $DIR/mem_replace.rs:15:13\n    |\n LL |     let _ = mem::replace(&mut an_option, None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `an_option.take()`\n    |\n    = note: `-D clippy::mem-replace-option-with-none` implied by `-D warnings`\n \n error: replacing an `Option` with `None`\n-  --> $DIR/mem_replace.rs:16:13\n+  --> $DIR/mem_replace.rs:17:13\n    |\n LL |     let _ = mem::replace(an_option, None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `an_option.take()`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:21:13\n+  --> $DIR/mem_replace.rs:22:13\n    |\n LL |     let _ = std::mem::replace(&mut s, String::default());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut s)`\n    |\n    = note: `-D clippy::mem-replace-with-default` implied by `-D warnings`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:23:13\n+  --> $DIR/mem_replace.rs:25:13\n    |\n LL |     let _ = std::mem::replace(s, String::default());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(s)`\n \n error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n-  --> $DIR/mem_replace.rs:24:13\n+  --> $DIR/mem_replace.rs:26:13\n    |\n LL |     let _ = std::mem::replace(s, Default::default());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(s)`\n \n-error: aborting due to 5 previous errors\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:29:13\n+   |\n+LL |     let _ = std::mem::replace(&mut v, Vec::default());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut v)`\n+\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:30:13\n+   |\n+LL |     let _ = std::mem::replace(&mut v, Default::default());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut v)`\n+\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:31:13\n+   |\n+LL |     let _ = std::mem::replace(&mut v, Vec::new());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut v)`\n+\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:32:13\n+   |\n+LL |     let _ = std::mem::replace(&mut v, vec![]);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut v)`\n+\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:35:13\n+   |\n+LL |     let _ = std::mem::replace(&mut hash_map, HashMap::new());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut hash_map)`\n+\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:38:13\n+   |\n+LL |     let _ = std::mem::replace(&mut btree_map, BTreeMap::new());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut btree_map)`\n+\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:41:13\n+   |\n+LL |     let _ = std::mem::replace(&mut vd, VecDeque::new());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut vd)`\n+\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:44:13\n+   |\n+LL |     let _ = std::mem::replace(&mut hash_set, HashSet::new());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut hash_set)`\n+\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:47:13\n+   |\n+LL |     let _ = std::mem::replace(&mut btree_set, BTreeSet::new());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut btree_set)`\n+\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:50:13\n+   |\n+LL |     let _ = std::mem::replace(&mut list, LinkedList::new());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut list)`\n+\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:53:13\n+   |\n+LL |     let _ = std::mem::replace(&mut binary_heap, BinaryHeap::new());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut binary_heap)`\n+\n+error: aborting due to 16 previous errors\n "}]}