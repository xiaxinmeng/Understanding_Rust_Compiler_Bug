{"sha": "18d873e8f0d10ad61a6110af28e2d1008e6acd16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ZDg3M2U4ZjBkMTBhZDYxYTYxMTBhZjI4ZTJkMTAwOGU2YWNkMTY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-24T07:37:32Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-24T07:41:14Z"}, "message": "Avoid ICE when adjusting bad self ty", "tree": {"sha": "fa6e072577b1951cf9a5caeaa888fe5a51af3cf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa6e072577b1951cf9a5caeaa888fe5a51af3cf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18d873e8f0d10ad61a6110af28e2d1008e6acd16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18d873e8f0d10ad61a6110af28e2d1008e6acd16", "html_url": "https://github.com/rust-lang/rust/commit/18d873e8f0d10ad61a6110af28e2d1008e6acd16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18d873e8f0d10ad61a6110af28e2d1008e6acd16/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7", "html_url": "https://github.com/rust-lang/rust/commit/4a8c5b20c7772bc5342b83d4b0696ea216ef75a7"}], "stats": {"total": 101, "additions": 96, "deletions": 5}, "files": [{"sha": "59636d32bc037b84dcee5d97e5fcfa36f39bffd5", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/18d873e8f0d10ad61a6110af28e2d1008e6acd16/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d873e8f0d10ad61a6110af28e2d1008e6acd16/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=18d873e8f0d10ad61a6110af28e2d1008e6acd16", "patch": "@@ -141,14 +141,24 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n     ///////////////////////////////////////////////////////////////////////////\n     // ADJUSTMENTS\n \n-    fn adjust_self_ty(&mut self,\n-                      unadjusted_self_ty: Ty<'tcx>,\n-                      pick: &probe::Pick<'tcx>)\n-                      -> Ty<'tcx> {\n+    fn adjust_self_ty(\n+        &mut self,\n+        unadjusted_self_ty: Ty<'tcx>,\n+        pick: &probe::Pick<'tcx>,\n+    ) -> Ty<'tcx> {\n         // Commit the autoderefs by calling `autoderef` again, but this\n         // time writing the results into the various tables.\n         let mut autoderef = self.autoderef(self.span, unadjusted_self_ty);\n-        let (_, n) = autoderef.nth(pick.autoderefs).unwrap();\n+        let (_, n) = match autoderef.nth(pick.autoderefs) {\n+            Some(n) => n,\n+            None => {\n+                self.tcx.sess.delay_span_bug(\n+                    syntax_pos::DUMMY_SP,\n+                    &format!(\"failed autoderef {}\", pick.autoderefs),\n+                );\n+                return self.tcx.types.err;\n+            }\n+        };\n         assert_eq!(n, pick.autoderefs);\n \n         let mut adjustments = autoderef.adjust_steps(self, Needs::None);"}, {"sha": "b74ee1b0c6e54b6ffae430f3a7b8a0f2054dd29b", "filename": "src/test/ui/issues/issue-65611.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/18d873e8f0d10ad61a6110af28e2d1008e6acd16/src%2Ftest%2Fui%2Fissues%2Fissue-65611.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d873e8f0d10ad61a6110af28e2d1008e6acd16/src%2Ftest%2Fui%2Fissues%2Fissue-65611.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-65611.rs?ref=18d873e8f0d10ad61a6110af28e2d1008e6acd16", "patch": "@@ -0,0 +1,63 @@\n+use std::mem::MaybeUninit;\n+use std::ops::Deref;\n+\n+pub unsafe trait Array {\n+    /// The array\u2019s element type\n+    type Item;\n+    #[doc(hidden)]\n+    /// The smallest index type that indexes the array.\n+    type Index: Index;\n+    #[doc(hidden)]\n+    fn as_ptr(&self) -> *const Self::Item;\n+    #[doc(hidden)]\n+    fn as_mut_ptr(&mut self) -> *mut Self::Item;\n+    #[doc(hidden)]\n+    fn capacity() -> usize;\n+}\n+\n+pub trait Index : PartialEq + Copy {\n+    fn to_usize(self) -> usize;\n+    fn from(usize) -> Self;\n+}\n+\n+impl Index for usize {\n+    fn to_usize(self) -> usize { self }\n+    fn from(val: usize) -> Self {\n+        val\n+    }\n+}\n+\n+unsafe impl<T> Array for [T; 1] {\n+    type Item = T;\n+    type Index = usize;\n+    fn as_ptr(&self) -> *const T { self as *const _ as *const _ }\n+    fn as_mut_ptr(&mut self) -> *mut T { self as *mut _ as *mut _}\n+    fn capacity() -> usize { 1 }\n+}\n+\n+impl<A: Array> Deref for ArrayVec<A> {\n+    type Target = [A::Item];\n+    #[inline]\n+    fn deref(&self) -> &[A::Item] {\n+        panic!()\n+    }\n+}\n+\n+pub struct ArrayVec<A: Array> {\n+    xs: MaybeUninit<A>,\n+    len: usize,\n+}\n+\n+impl<A: Array> ArrayVec<A> {\n+    pub fn new() -> ArrayVec<A> {\n+        panic!()\n+    }\n+}\n+\n+fn main() {\n+    let mut buffer = ArrayVec::new();\n+    let x = buffer.last().unwrap().0.clone();\n+    //~^ ERROR type annotations needed\n+    //~| ERROR no field `0` on type `&_`\n+    buffer.reverse();\n+}"}, {"sha": "cb441c13c6b9e9e1329eca7ee117b72f96ab9238", "filename": "src/test/ui/issues/issue-65611.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/18d873e8f0d10ad61a6110af28e2d1008e6acd16/src%2Ftest%2Fui%2Fissues%2Fissue-65611.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18d873e8f0d10ad61a6110af28e2d1008e6acd16/src%2Ftest%2Fui%2Fissues%2Fissue-65611.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-65611.stderr?ref=18d873e8f0d10ad61a6110af28e2d1008e6acd16", "patch": "@@ -0,0 +1,18 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-65611.rs:59:20\n+   |\n+LL |     let x = buffer.last().unwrap().0.clone();\n+   |                    ^^^^ cannot infer type for `T`\n+   |\n+   = note: type must be known at this point\n+\n+error[E0609]: no field `0` on type `&_`\n+  --> $DIR/issue-65611.rs:59:36\n+   |\n+LL |     let x = buffer.last().unwrap().0.clone();\n+   |                                    ^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0282, E0609.\n+For more information about an error, try `rustc --explain E0282`."}]}