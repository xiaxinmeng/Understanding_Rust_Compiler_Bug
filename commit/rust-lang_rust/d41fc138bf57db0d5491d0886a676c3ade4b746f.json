{"sha": "d41fc138bf57db0d5491d0886a676c3ade4b746f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0MWZjMTM4YmY1N2RiMGQ1NDkxZDA4ODZhNjc2YzNhZGU0Yjc0NmY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-22T01:32:02Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-23T23:59:38Z"}, "message": "`parse_defaultness`: avoid hardcoded list of keywords.", "tree": {"sha": "82ea4e0e387780e09164f0269f2fdb12f9ceeef4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82ea4e0e387780e09164f0269f2fdb12f9ceeef4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d41fc138bf57db0d5491d0886a676c3ade4b746f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d41fc138bf57db0d5491d0886a676c3ade4b746f", "html_url": "https://github.com/rust-lang/rust/commit/d41fc138bf57db0d5491d0886a676c3ade4b746f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d41fc138bf57db0d5491d0886a676c3ade4b746f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa2a792491ed28530146ee55a46128c05a8026ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa2a792491ed28530146ee55a46128c05a8026ad", "html_url": "https://github.com/rust-lang/rust/commit/fa2a792491ed28530146ee55a46128c05a8026ad"}], "stats": {"total": 39, "additions": 13, "deletions": 26}, "files": [{"sha": "e770b4212e5ec39c82eb8cf5a6c38ea3b9dd743a", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d41fc138bf57db0d5491d0886a676c3ade4b746f/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d41fc138bf57db0d5491d0886a676c3ade4b746f/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=d41fc138bf57db0d5491d0886a676c3ade4b746f", "patch": "@@ -147,10 +147,7 @@ impl<'a> Parser<'a> {\n             || self.check_keyword(kw::Default) && self.is_keyword_ahead(1, &[kw::Impl, kw::Unsafe])\n         {\n             // IMPL ITEM\n-            let defaultness = self.parse_defaultness();\n-            let unsafety = self.parse_unsafety();\n-            self.expect_keyword(kw::Impl)?;\n-            self.parse_item_impl(attrs, unsafety, defaultness)?\n+            self.parse_item_impl(attrs)?\n         } else if self.eat_keyword(kw::Mod) {\n             // MODULE ITEM\n             self.parse_item_mod(attrs)?\n@@ -349,7 +346,7 @@ impl<'a> Parser<'a> {\n         err\n     }\n \n-    /// Parses an implementation item, `impl` keyword is already parsed.\n+    /// Parses an implementation item.\n     ///\n     /// ```\n     /// impl<'a, T> TYPE { /* impl items */ }\n@@ -363,12 +360,11 @@ impl<'a> Parser<'a> {\n     /// \"impl\" GENERICS \"const\"? \"!\"? TYPE \"for\"? (TYPE | \"..\") (\"where\" PREDICATES)? \"{\" BODY \"}\"\n     /// \"impl\" GENERICS \"const\"? \"!\"? TYPE (\"where\" PREDICATES)? \"{\" BODY \"}\"\n     /// ```\n-    fn parse_item_impl(\n-        &mut self,\n-        attrs: &mut Vec<Attribute>,\n-        unsafety: Unsafe,\n-        defaultness: Defaultness,\n-    ) -> PResult<'a, ItemInfo> {\n+    fn parse_item_impl(&mut self, attrs: &mut Vec<Attribute>) -> PResult<'a, ItemInfo> {\n+        let defaultness = self.parse_defaultness();\n+        let unsafety = self.parse_unsafety();\n+        self.expect_keyword(kw::Impl)?;\n+\n         // First, parse generic parameters if necessary.\n         let mut generics = if self.choose_generics_over_qpath() {\n             self.parse_generics()?\n@@ -529,22 +525,13 @@ impl<'a> Parser<'a> {\n \n     /// Parses defaultness (i.e., `default` or nothing).\n     fn parse_defaultness(&mut self) -> Defaultness {\n-        // `pub` is included for better error messages\n+        // We are interested in `default` followed by another keyword.\n+        // However, we must avoid keywords that occur as binary operators.\n+        // Currently, the only applicable keyword is `as` (`default as Ty`).\n         if self.check_keyword(kw::Default)\n-            && self.is_keyword_ahead(\n-                1,\n-                &[\n-                    kw::Impl,\n-                    kw::Static,\n-                    kw::Const,\n-                    kw::Async,\n-                    kw::Fn,\n-                    kw::Unsafe,\n-                    kw::Extern,\n-                    kw::Type,\n-                    kw::Pub,\n-                ],\n-            )\n+            && self.look_ahead(1, |t| {\n+                t.is_non_raw_ident_where(|i| i.is_reserved() && i.name != kw::As)\n+            })\n         {\n             self.bump(); // `default`\n             Defaultness::Default(self.prev_span)"}]}