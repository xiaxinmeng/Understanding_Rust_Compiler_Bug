{"sha": "496bd63f33ac649a637259ed359da7b9f1a65f80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NmJkNjNmMzNhYzY0OWE2MzcyNTllZDM1OWRhN2I5ZjFhNjVmODA=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2017-06-09T20:20:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-09T20:20:32Z"}, "message": "Simplify FromIterator example of Result", "tree": {"sha": "1affe0f2254e37fa5453835402d5bef90d6f21e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1affe0f2254e37fa5453835402d5bef90d6f21e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/496bd63f33ac649a637259ed359da7b9f1a65f80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/496bd63f33ac649a637259ed359da7b9f1a65f80", "html_url": "https://github.com/rust-lang/rust/commit/496bd63f33ac649a637259ed359da7b9f1a65f80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/496bd63f33ac649a637259ed359da7b9f1a65f80/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fe923d43455f362408aad30ffc86a6ab71ff7c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe923d43455f362408aad30ffc86a6ab71ff7c6", "html_url": "https://github.com/rust-lang/rust/commit/5fe923d43455f362408aad30ffc86a6ab71ff7c6"}], "stats": {"total": 9, "additions": 3, "deletions": 6}, "files": [{"sha": "88a93492de96257276348c3f1eda3a28f6d2ff01", "filename": "src/libcore/result.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/496bd63f33ac649a637259ed359da7b9f1a65f80/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/496bd63f33ac649a637259ed359da7b9f1a65f80/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=496bd63f33ac649a637259ed359da7b9f1a65f80", "patch": "@@ -1060,12 +1060,9 @@ impl<A, E, V: FromIterator<A>> FromIterator<Result<A, E>> for Result<V, E> {\n     /// checking for overflow:\n     ///\n     /// ```\n-    /// use std::u32;\n-    ///\n     /// let v = vec![1, 2];\n-    /// let res: Result<Vec<u32>, &'static str> = v.iter().map(|&x: &u32|\n-    ///     if x == u32::MAX { Err(\"Overflow!\") }\n-    ///     else { Ok(x + 1) }\n+    /// let res: Result<Vec<u32>, &'static str> = v.iter().map(|x: &u32|\n+    ///     x.checked_add(1).ok_or(\"Overflow!\")\n     /// ).collect();\n     /// assert!(res == Ok(vec![2, 3]));\n     /// ```\n@@ -1126,4 +1123,4 @@ impl<T,E> ops::Try for Result<T, E> {\n     fn from_error(v: E) -> Self {\n         Err(v)\n     }\n-}\n\\ No newline at end of file\n+}"}]}