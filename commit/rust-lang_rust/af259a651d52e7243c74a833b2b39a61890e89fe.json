{"sha": "af259a651d52e7243c74a833b2b39a61890e89fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMjU5YTY1MWQ1MmU3MjQzYzc0YTgzM2IyYjM5YTYxODkwZTg5ZmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-10T02:06:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-10T02:06:02Z"}, "message": "auto merge of #9086 : pcwalton/rust/writeback-port, r=brson\n\nr? @brson or @pnkfelix", "tree": {"sha": "ff6f83b8ddf97a97a982cecefb9cb09c49d4c620", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff6f83b8ddf97a97a982cecefb9cb09c49d4c620"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af259a651d52e7243c74a833b2b39a61890e89fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af259a651d52e7243c74a833b2b39a61890e89fe", "html_url": "https://github.com/rust-lang/rust/commit/af259a651d52e7243c74a833b2b39a61890e89fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af259a651d52e7243c74a833b2b39a61890e89fe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d41b5587927da19fbde2cd28e615b3bdb8ad6e01", "url": "https://api.github.com/repos/rust-lang/rust/commits/d41b5587927da19fbde2cd28e615b3bdb8ad6e01", "html_url": "https://github.com/rust-lang/rust/commit/d41b5587927da19fbde2cd28e615b3bdb8ad6e01"}, {"sha": "2a0dd9767546c3abd43a9f4dedf142959ef7c6b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a0dd9767546c3abd43a9f4dedf142959ef7c6b7", "html_url": "https://github.com/rust-lang/rust/commit/2a0dd9767546c3abd43a9f4dedf142959ef7c6b7"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "2f11d9ff2ebcf4fdbd9d72962b960f5d6be508b9", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/af259a651d52e7243c74a833b2b39a61890e89fe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af259a651d52e7243c74a833b2b39a61890e89fe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=af259a651d52e7243c74a833b2b39a61890e89fe", "patch": "@@ -29,7 +29,8 @@ use util::ppaux;\n use syntax::ast;\n use syntax::codemap::Span;\n use syntax::print::pprust::pat_to_str;\n-use syntax::oldvisit;\n+use syntax::visit;\n+use syntax::visit::Visitor;\n \n fn resolve_type_vars_in_type(fcx: @mut FnCtxt, sp: Span, typ: ty::t)\n                           -> Option<ty::t> {\n@@ -214,15 +215,15 @@ struct WbCtxt {\n     success: bool,\n }\n \n-type wb_vt = oldvisit::vt<@mut WbCtxt>;\n+struct WbVisitor;\n \n-fn visit_stmt(s: @ast::Stmt, (wbcx, v): (@mut WbCtxt, wb_vt)) {\n+fn visit_stmt(s: @ast::Stmt, (wbcx, v): (@mut WbCtxt, &mut WbVisitor)) {\n     if !wbcx.success { return; }\n     resolve_type_vars_for_node(wbcx, s.span, ty::stmt_node_id(s));\n-    oldvisit::visit_stmt(s, (wbcx, v));\n+    visit::walk_stmt(v, s, wbcx);\n }\n \n-fn visit_expr(e: @ast::Expr, (wbcx, v): (@mut WbCtxt, wb_vt)) {\n+fn visit_expr(e: @ast::Expr, (wbcx, v): (@mut WbCtxt, &mut WbVisitor)) {\n     if !wbcx.success {\n         return;\n     }\n@@ -267,19 +268,19 @@ fn visit_expr(e: @ast::Expr, (wbcx, v): (@mut WbCtxt, wb_vt)) {\n         _ => ()\n     }\n \n-    oldvisit::visit_expr(e, (wbcx, v));\n+    visit::walk_expr(v, e, wbcx);\n }\n \n-fn visit_block(b: &ast::Block, (wbcx, v): (@mut WbCtxt, wb_vt)) {\n+fn visit_block(b: &ast::Block, (wbcx, v): (@mut WbCtxt, &mut WbVisitor)) {\n     if !wbcx.success {\n         return;\n     }\n \n     resolve_type_vars_for_node(wbcx, b.span, b.id);\n-    oldvisit::visit_block(b, (wbcx, v));\n+    visit::walk_block(v, b, wbcx);\n }\n \n-fn visit_pat(p: @ast::Pat, (wbcx, v): (@mut WbCtxt, wb_vt)) {\n+fn visit_pat(p: @ast::Pat, (wbcx, v): (@mut WbCtxt, &mut WbVisitor)) {\n     if !wbcx.success {\n         return;\n     }\n@@ -290,10 +291,10 @@ fn visit_pat(p: @ast::Pat, (wbcx, v): (@mut WbCtxt, wb_vt)) {\n            wbcx.fcx.infcx().ty_to_str(\n                ty::node_id_to_type(wbcx.fcx.ccx.tcx,\n                                    p.id)));\n-    oldvisit::visit_pat(p, (wbcx, v));\n+    visit::walk_pat(v, p, wbcx);\n }\n \n-fn visit_local(l: @ast::Local, (wbcx, v): (@mut WbCtxt, wb_vt)) {\n+fn visit_local(l: @ast::Local, (wbcx, v): (@mut WbCtxt, &mut WbVisitor)) {\n     if !wbcx.success { return; }\n     let var_ty = wbcx.fcx.local_ty(l.span, l.id);\n     match resolve_type(wbcx.fcx.infcx(), var_ty, resolve_all | force_all) {\n@@ -313,26 +314,25 @@ fn visit_local(l: @ast::Local, (wbcx, v): (@mut WbCtxt, wb_vt)) {\n             wbcx.success = false;\n         }\n     }\n-    oldvisit::visit_local(l, (wbcx, v));\n+    visit::walk_local(v, l, wbcx);\n }\n-fn visit_item(_item: @ast::item, (_wbcx, _v): (@mut WbCtxt, wb_vt)) {\n+fn visit_item(_item: @ast::item, (_wbcx, _v): (@mut WbCtxt, &mut WbVisitor)) {\n     // Ignore items\n }\n \n-fn mk_visitor() -> oldvisit::vt<@mut WbCtxt> {\n-    oldvisit::mk_vt(@oldvisit::Visitor {visit_item: visit_item,\n-                                  visit_stmt: visit_stmt,\n-                                  visit_expr: visit_expr,\n-                                  visit_block: visit_block,\n-                                  visit_pat: visit_pat,\n-                                  visit_local: visit_local,\n-                                  .. *oldvisit::default_visitor()})\n+impl Visitor<@mut WbCtxt> for WbVisitor {\n+    fn visit_item(&mut self, i:@ast::item, e:@mut WbCtxt) { visit_item(i, (e, self)); }\n+    fn visit_stmt(&mut self, s:@ast::Stmt, e:@mut WbCtxt) { visit_stmt(s, (e, self)); }\n+    fn visit_expr(&mut self, ex:@ast::Expr, e:@mut WbCtxt) { visit_expr(ex, (e, self)); }\n+    fn visit_block(&mut self, b:&ast::Block, e:@mut WbCtxt) { visit_block(b, (e, self)); }\n+    fn visit_pat(&mut self, p:@ast::Pat, e:@mut WbCtxt) { visit_pat(p, (e, self)); }\n+    fn visit_local(&mut self, l:@ast::Local, e:@mut WbCtxt) { visit_local(l, (e, self)); }\n }\n \n pub fn resolve_type_vars_in_expr(fcx: @mut FnCtxt, e: @ast::Expr) -> bool {\n     let wbcx = @mut WbCtxt { fcx: fcx, success: true };\n-    let visit = mk_visitor();\n-    (visit.visit_expr)(e, (wbcx, visit));\n+    let mut visit = WbVisitor;\n+    visit.visit_expr(e, wbcx);\n     return wbcx.success;\n }\n \n@@ -341,15 +341,15 @@ pub fn resolve_type_vars_in_fn(fcx: @mut FnCtxt,\n                                blk: &ast::Block,\n                                self_info: Option<SelfInfo>) -> bool {\n     let wbcx = @mut WbCtxt { fcx: fcx, success: true };\n-    let visit = mk_visitor();\n-    (visit.visit_block)(blk, (wbcx, visit));\n+    let mut visit = WbVisitor;\n+    visit.visit_block(blk, wbcx);\n     for self_info in self_info.iter() {\n         resolve_type_vars_for_node(wbcx,\n                                    self_info.span,\n                                    self_info.self_id);\n     }\n     for arg in decl.inputs.iter() {\n-        (visit.visit_pat)(arg.pat, (wbcx, visit));\n+        visit.visit_pat(arg.pat, wbcx);\n         // Privacy needs the type for the whole pattern, not just each binding\n         if !pat_util::pat_is_binding(fcx.tcx().def_map, arg.pat) {\n             resolve_type_vars_for_node(wbcx, arg.pat.span, arg.pat.id);"}]}