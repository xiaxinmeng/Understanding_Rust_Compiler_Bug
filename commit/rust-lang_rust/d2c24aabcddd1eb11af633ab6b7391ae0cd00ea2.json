{"sha": "d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "node_id": "C_kwDOAAsO6NoAKGQyYzI0YWFiY2RkZDFlYjExYWY2MzNhYjZiNzM5MWFlMGNkMDBlYTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-24T23:09:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-24T23:09:42Z"}, "message": "Auto merge of #91203 - GuillaumeGomez:rollup-kwtqvb1, r=GuillaumeGomez\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #89542 (Partially stabilize `duration_consts_2`)\n - #90044 (Restrict aarch64 outline atomics to glibc for now.)\n - #90420 (Create rustdoc_internals feature gate)\n - #91075 (Reduce prominence of item-infos)\n - #91151 (Fix test in std::process on android)\n - #91179 (Fix more <a> color)\n - #91199 (rustdoc: Add test for mixing doc comments and attrs)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d195ee55e89dd213150f665feeb6943ee5397c90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d195ee55e89dd213150f665feeb6943ee5397c90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "html_url": "https://github.com/rust-lang/rust/commit/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b426445c60b4faab6e96d2b866164d478680abf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b426445c60b4faab6e96d2b866164d478680abf6", "html_url": "https://github.com/rust-lang/rust/commit/b426445c60b4faab6e96d2b866164d478680abf6"}, {"sha": "ae9681ecfad21f218ac3524dc798aafa35088202", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae9681ecfad21f218ac3524dc798aafa35088202", "html_url": "https://github.com/rust-lang/rust/commit/ae9681ecfad21f218ac3524dc798aafa35088202"}], "stats": {"total": 326, "additions": 199, "deletions": 127}, "files": [{"sha": "ad539f2564d4c01e2230e28b76073aacd87862d3", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -325,8 +325,12 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     cfg_hide => doc_cfg_hide\n                     masked => doc_masked\n                     notable_trait => doc_notable_trait\n-                    keyword => doc_keyword\n                 );\n+\n+                if nested_meta.has_name(sym::keyword) {\n+                    let msg = \"`#[doc(keyword)]` is meant for internal use only\";\n+                    gate_feature_post!(self, rustdoc_internals, attr.span, msg);\n+                }\n             }\n         }\n "}, {"sha": "7860f92f96f9647d2367a74bd16ca10f0cff5f1f", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -206,6 +206,8 @@ declare_features! (\n     (active, rustc_allow_const_fn_unstable, \"1.49.0\", Some(69399), None),\n     /// Allows using compiler's own crates.\n     (active, rustc_private, \"1.0.0\", Some(27812), None),\n+    /// Allows using internal rustdoc features like `doc(primitive)` or `doc(keyword)`.\n+    (active, rustdoc_internals, \"1.58.0\", Some(90418), None),\n     /// Allows using `#[start]` on a function indicating that it is the program entrypoint.\n     (active, start, \"1.0.0\", Some(29633), None),\n     /// Allows using `#[structural_match]` which indicates that a type is structurally matchable.\n@@ -366,12 +368,8 @@ declare_features! (\n     (active, doc_cfg, \"1.21.0\", Some(43781), None),\n     /// Allows `#[doc(cfg_hide(...))]`.\n     (active, doc_cfg_hide, \"1.57.0\", Some(43781), None),\n-    /// Allows using `#[doc(keyword = \"...\")]`.\n-    (active, doc_keyword, \"1.28.0\", Some(51315), None),\n     /// Allows `#[doc(masked)]`.\n     (active, doc_masked, \"1.21.0\", Some(44027), None),\n-    /// Allows using doc(primitive) without a future-incompat warning\n-    (active, doc_primitive, \"1.56.0\", Some(88070), None),\n     /// Allows `X..Y` patterns.\n     (active, exclusive_range_pattern, \"1.11.0\", Some(37854), None),\n     /// Allows exhaustive pattern matching on types that contain uninhabited types."}, {"sha": "b9f3b5ad1b1fce8b5c6aebbf821dbcaa0306b5af", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -76,6 +76,12 @@ declare_features! (\n     /// Allows the use of `#[derive(Anything)]` as sugar for `#[derive_Anything]`.\n     (removed, custom_derive, \"1.32.0\", Some(29644), None,\n      Some(\"subsumed by `#[proc_macro_derive]`\")),\n+    /// Allows using `#[doc(keyword = \"...\")]`.\n+    (removed, doc_keyword, \"1.28.0\", Some(51315), None,\n+     Some(\"merged into `#![feature(rustdoc_internals)]`\")),\n+    /// Allows using `doc(primitive)` without a future-incompat warning.\n+    (removed, doc_primitive, \"1.56.0\", Some(88070), None,\n+     Some(\"merged into `#![feature(rustdoc_internals)]`\")),\n     /// Allows `#[doc(spotlight)]`.\n     /// The attribute was renamed to `#[doc(notable_trait)]`\n     /// and the feature to `doc_notable_trait`."}, {"sha": "f761eaae5ab73652822d584ac0c4b0fd0ef7f92b", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -982,7 +982,7 @@ impl CheckAttrVisitor<'tcx> {\n                         }\n \n                         sym::primitive => {\n-                            if !self.tcx.features().doc_primitive {\n+                            if !self.tcx.features().rustdoc_internals {\n                                 self.tcx.struct_span_lint_hir(\n                                     INVALID_DOC_ATTRIBUTES,\n                                     hir_id,"}, {"sha": "97b155d2377c789eb8ffa8d46f63d3559cf82b89", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -1155,6 +1155,7 @@ symbols! {\n         rustc_unsafe_specialization_marker,\n         rustc_variance,\n         rustdoc,\n+        rustdoc_internals,\n         rustfmt,\n         rvalue_static_promotion,\n         s,"}, {"sha": "6a16b4ce419647f0569220f47e35f6f68540b0c1", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_musl.rs?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -9,10 +9,6 @@ pub fn target() -> Target {\n         pointer_width: 64,\n         data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n         arch: \"aarch64\".to_string(),\n-        options: TargetOptions {\n-            features: \"+outline-atomics\".to_string(),\n-            mcount: \"\\u{1}_mcount\".to_string(),\n-            ..base\n-        },\n+        options: TargetOptions { mcount: \"\\u{1}_mcount\".to_string(), ..base },\n     }\n }"}, {"sha": "fdb23529599c890aa6a9aeed9bff1ca85dd4a15c", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -138,7 +138,7 @@\n #![feature(const_type_id)]\n #![feature(const_type_name)]\n #![feature(const_default_impls)]\n-#![feature(duration_consts_2)]\n+#![feature(duration_consts_float)]\n #![feature(ptr_metadata)]\n #![feature(slice_ptr_get)]\n #![feature(str_internals)]\n@@ -166,7 +166,8 @@\n #![feature(derive_default_enum)]\n #![feature(doc_cfg)]\n #![feature(doc_notable_trait)]\n-#![feature(doc_primitive)]\n+#![cfg_attr(bootstrap, feature(doc_primitive))]\n+#![cfg_attr(not(bootstrap), feature(rustdoc_internals))]\n #![feature(exhaustive_patterns)]\n #![feature(doc_cfg_hide)]\n #![feature(extern_types)]"}, {"sha": "5efa04f7e5c578d3874e32588706da60e3d102c8", "filename": "library/core/src/time.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -180,8 +180,9 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     #[must_use]\n+    #[rustc_const_stable(feature = \"duration_consts_2\", since = \"1.58.0\")]\n+    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_panic))]\n     pub const fn new(secs: u64, nanos: u32) -> Duration {\n         let secs = match secs.checked_add((nanos / NANOS_PER_SEC) as u64) {\n             Some(secs) => secs,\n@@ -480,7 +481,8 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_stable(feature = \"duration_consts_2\", since = \"1.58.0\")]\n+    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_panic))]\n     pub const fn checked_add(self, rhs: Duration) -> Option<Duration> {\n         if let Some(mut secs) = self.secs.checked_add(rhs.secs) {\n             let mut nanos = self.nanos + rhs.nanos;\n@@ -515,7 +517,7 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_stable(feature = \"duration_consts_2\", since = \"1.58.0\")]\n     pub const fn saturating_add(self, rhs: Duration) -> Duration {\n         match self.checked_add(rhs) {\n             Some(res) => res,\n@@ -540,7 +542,8 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_stable(feature = \"duration_consts_2\", since = \"1.58.0\")]\n+    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_panic))]\n     pub const fn checked_sub(self, rhs: Duration) -> Option<Duration> {\n         if let Some(mut secs) = self.secs.checked_sub(rhs.secs) {\n             let nanos = if self.nanos >= rhs.nanos {\n@@ -573,7 +576,7 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_stable(feature = \"duration_consts_2\", since = \"1.58.0\")]\n     pub const fn saturating_sub(self, rhs: Duration) -> Duration {\n         match self.checked_sub(rhs) {\n             Some(res) => res,\n@@ -598,7 +601,8 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_stable(feature = \"duration_consts_2\", since = \"1.58.0\")]\n+    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_panic))]\n     pub const fn checked_mul(self, rhs: u32) -> Option<Duration> {\n         // Multiply nanoseconds as u64, because it cannot overflow that way.\n         let total_nanos = self.nanos as u64 * rhs as u64;\n@@ -629,7 +633,7 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_stable(feature = \"duration_consts_2\", since = \"1.58.0\")]\n     pub const fn saturating_mul(self, rhs: u32) -> Duration {\n         match self.checked_mul(rhs) {\n             Some(res) => res,\n@@ -655,7 +659,8 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_stable(feature = \"duration_consts_2\", since = \"1.58.0\")]\n+    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_panic))]\n     pub const fn checked_div(self, rhs: u32) -> Option<Duration> {\n         if rhs != 0 {\n             let secs = self.secs / (rhs as u64);\n@@ -683,7 +688,7 @@ impl Duration {\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[must_use]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n     pub const fn as_secs_f64(&self) -> f64 {\n         (self.secs as f64) + (self.nanos as f64) / (NANOS_PER_SEC as f64)\n     }\n@@ -702,7 +707,7 @@ impl Duration {\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[must_use]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n     pub const fn as_secs_f32(&self) -> f32 {\n         (self.secs as f32) + (self.nanos as f32) / (NANOS_PER_SEC as f32)\n     }\n@@ -723,7 +728,7 @@ impl Duration {\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[must_use]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n     pub const fn from_secs_f64(secs: f64) -> Duration {\n         match Duration::try_from_secs_f64(secs) {\n             Ok(v) => v,\n@@ -784,7 +789,7 @@ impl Duration {\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[must_use]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n     pub const fn from_secs_f32(secs: f32) -> Duration {\n         match Duration::try_from_secs_f32(secs) {\n             Ok(v) => v,\n@@ -846,7 +851,7 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n     pub const fn mul_f64(self, rhs: f64) -> Duration {\n         Duration::from_secs_f64(rhs * self.as_secs_f64())\n     }\n@@ -870,7 +875,7 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n     pub const fn mul_f32(self, rhs: f32) -> Duration {\n         Duration::from_secs_f32(rhs * self.as_secs_f32())\n     }\n@@ -893,7 +898,7 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n     pub const fn div_f64(self, rhs: f64) -> Duration {\n         Duration::from_secs_f64(self.as_secs_f64() / rhs)\n     }\n@@ -918,7 +923,7 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n     pub const fn div_f32(self, rhs: f32) -> Duration {\n         Duration::from_secs_f32(self.as_secs_f32() / rhs)\n     }\n@@ -938,7 +943,7 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n     pub const fn div_duration_f64(self, rhs: Duration) -> f64 {\n         self.as_secs_f64() / rhs.as_secs_f64()\n     }\n@@ -958,7 +963,7 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n     pub const fn div_duration_f32(self, rhs: Duration) -> f32 {\n         self.as_secs_f32() / rhs.as_secs_f32()\n     }"}, {"sha": "4563c2085c1290a91ac2c54eac284ba291b64875", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -21,7 +21,7 @@\n #![feature(core_private_diy_float)]\n #![feature(dec2flt)]\n #![feature(div_duration)]\n-#![feature(duration_consts_2)]\n+#![feature(duration_consts_float)]\n #![feature(duration_constants)]\n #![feature(exact_size_is_empty)]\n #![feature(extern_types)]"}, {"sha": "504c3b7e9f99c575be33b94fffbfb405ede59e32", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -275,10 +275,11 @@\n #![feature(decl_macro)]\n #![feature(doc_cfg)]\n #![feature(doc_cfg_hide)]\n-#![feature(doc_keyword)]\n+#![cfg_attr(bootstrap, feature(doc_primitive))]\n+#![cfg_attr(bootstrap, feature(doc_keyword))]\n+#![cfg_attr(not(bootstrap), feature(rustdoc_internals))]\n #![feature(doc_masked)]\n #![feature(doc_notable_trait)]\n-#![feature(doc_primitive)]\n #![feature(dropck_eyepatch)]\n #![feature(duration_checked_float)]\n #![feature(duration_constants)]"}, {"sha": "67b747e410732952bb333e1f6ed0a4b39385d963", "filename": "library/std/src/process/tests.rs", "status": "modified", "additions": 36, "deletions": 28, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/library%2Fstd%2Fsrc%2Fprocess%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/library%2Fstd%2Fsrc%2Fprocess%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess%2Ftests.rs?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -4,15 +4,23 @@ use super::{Command, Output, Stdio};\n use crate::io::ErrorKind;\n use crate::str;\n \n-// FIXME(#10380) these tests should not all be ignored on android.\n+#[cfg(target_os = \"android\")]\n+fn shell_cmd() -> Command {\n+    Command::new(\"/system/bin/sh\")\n+}\n+\n+#[cfg(not(target_os = \"android\"))]\n+fn shell_cmd() -> Command {\n+    Command::new(\"/bin/sh\")\n+}\n \n #[test]\n-#[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n+#[cfg_attr(any(target_os = \"vxworks\"), ignore)]\n fn smoke() {\n     let p = if cfg!(target_os = \"windows\") {\n         Command::new(\"cmd\").args(&[\"/C\", \"exit 0\"]).spawn()\n     } else {\n-        Command::new(\"true\").spawn()\n+        shell_cmd().arg(\"-c\").arg(\"true\").spawn()\n     };\n     assert!(p.is_ok());\n     let mut p = p.unwrap();\n@@ -29,12 +37,12 @@ fn smoke_failure() {\n }\n \n #[test]\n-#[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n+#[cfg_attr(any(target_os = \"vxworks\"), ignore)]\n fn exit_reported_right() {\n     let p = if cfg!(target_os = \"windows\") {\n         Command::new(\"cmd\").args(&[\"/C\", \"exit 1\"]).spawn()\n     } else {\n-        Command::new(\"false\").spawn()\n+        shell_cmd().arg(\"-c\").arg(\"false\").spawn()\n     };\n     assert!(p.is_ok());\n     let mut p = p.unwrap();\n@@ -44,12 +52,11 @@ fn exit_reported_right() {\n \n #[test]\n #[cfg(unix)]\n-#[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n+#[cfg_attr(any(target_os = \"vxworks\"), ignore)]\n fn signal_reported_right() {\n     use crate::os::unix::process::ExitStatusExt;\n \n-    let mut p =\n-        Command::new(\"/bin/sh\").arg(\"-c\").arg(\"read a\").stdin(Stdio::piped()).spawn().unwrap();\n+    let mut p = shell_cmd().arg(\"-c\").arg(\"read a\").stdin(Stdio::piped()).spawn().unwrap();\n     p.kill().unwrap();\n     match p.wait().unwrap().signal() {\n         Some(9) => {}\n@@ -69,31 +76,31 @@ pub fn run_output(mut cmd: Command) -> String {\n }\n \n #[test]\n-#[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n+#[cfg_attr(any(target_os = \"vxworks\"), ignore)]\n fn stdout_works() {\n     if cfg!(target_os = \"windows\") {\n         let mut cmd = Command::new(\"cmd\");\n         cmd.args(&[\"/C\", \"echo foobar\"]).stdout(Stdio::piped());\n         assert_eq!(run_output(cmd), \"foobar\\r\\n\");\n     } else {\n-        let mut cmd = Command::new(\"echo\");\n-        cmd.arg(\"foobar\").stdout(Stdio::piped());\n+        let mut cmd = shell_cmd();\n+        cmd.arg(\"-c\").arg(\"echo foobar\").stdout(Stdio::piped());\n         assert_eq!(run_output(cmd), \"foobar\\n\");\n     }\n }\n \n #[test]\n-#[cfg_attr(any(windows, target_os = \"android\", target_os = \"vxworks\"), ignore)]\n+#[cfg_attr(any(windows, target_os = \"vxworks\"), ignore)]\n fn set_current_dir_works() {\n-    let mut cmd = Command::new(\"/bin/sh\");\n+    let mut cmd = shell_cmd();\n     cmd.arg(\"-c\").arg(\"pwd\").current_dir(\"/\").stdout(Stdio::piped());\n     assert_eq!(run_output(cmd), \"/\\n\");\n }\n \n #[test]\n-#[cfg_attr(any(windows, target_os = \"android\", target_os = \"vxworks\"), ignore)]\n+#[cfg_attr(any(windows, target_os = \"vxworks\"), ignore)]\n fn stdin_works() {\n-    let mut p = Command::new(\"/bin/sh\")\n+    let mut p = shell_cmd()\n         .arg(\"-c\")\n         .arg(\"read line; echo $line\")\n         .stdin(Stdio::piped())\n@@ -109,19 +116,19 @@ fn stdin_works() {\n }\n \n #[test]\n-#[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n+#[cfg_attr(any(target_os = \"vxworks\"), ignore)]\n fn test_process_status() {\n     let mut status = if cfg!(target_os = \"windows\") {\n         Command::new(\"cmd\").args(&[\"/C\", \"exit 1\"]).status().unwrap()\n     } else {\n-        Command::new(\"false\").status().unwrap()\n+        shell_cmd().arg(\"-c\").arg(\"false\").status().unwrap()\n     };\n     assert!(status.code() == Some(1));\n \n     status = if cfg!(target_os = \"windows\") {\n         Command::new(\"cmd\").args(&[\"/C\", \"exit 0\"]).status().unwrap()\n     } else {\n-        Command::new(\"true\").status().unwrap()\n+        shell_cmd().arg(\"-c\").arg(\"true\").status().unwrap()\n     };\n     assert!(status.success());\n }\n@@ -135,12 +142,12 @@ fn test_process_output_fail_to_start() {\n }\n \n #[test]\n-#[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n+#[cfg_attr(any(target_os = \"vxworks\"), ignore)]\n fn test_process_output_output() {\n     let Output { status, stdout, stderr } = if cfg!(target_os = \"windows\") {\n         Command::new(\"cmd\").args(&[\"/C\", \"echo hello\"]).output().unwrap()\n     } else {\n-        Command::new(\"echo\").arg(\"hello\").output().unwrap()\n+        shell_cmd().arg(\"-c\").arg(\"echo hello\").output().unwrap()\n     };\n     let output_str = str::from_utf8(&stdout).unwrap();\n \n@@ -150,49 +157,50 @@ fn test_process_output_output() {\n }\n \n #[test]\n-#[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n+#[cfg_attr(any(target_os = \"vxworks\"), ignore)]\n fn test_process_output_error() {\n     let Output { status, stdout, stderr } = if cfg!(target_os = \"windows\") {\n         Command::new(\"cmd\").args(&[\"/C\", \"mkdir .\"]).output().unwrap()\n     } else {\n         Command::new(\"mkdir\").arg(\"./\").output().unwrap()\n     };\n \n-    assert!(status.code() == Some(1));\n+    assert!(status.code().is_some());\n+    assert!(status.code() != Some(0));\n     assert_eq!(stdout, Vec::new());\n     assert!(!stderr.is_empty());\n }\n \n #[test]\n-#[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n+#[cfg_attr(any(target_os = \"vxworks\"), ignore)]\n fn test_finish_once() {\n     let mut prog = if cfg!(target_os = \"windows\") {\n         Command::new(\"cmd\").args(&[\"/C\", \"exit 1\"]).spawn().unwrap()\n     } else {\n-        Command::new(\"false\").spawn().unwrap()\n+        shell_cmd().arg(\"-c\").arg(\"false\").spawn().unwrap()\n     };\n     assert!(prog.wait().unwrap().code() == Some(1));\n }\n \n #[test]\n-#[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n+#[cfg_attr(any(target_os = \"vxworks\"), ignore)]\n fn test_finish_twice() {\n     let mut prog = if cfg!(target_os = \"windows\") {\n         Command::new(\"cmd\").args(&[\"/C\", \"exit 1\"]).spawn().unwrap()\n     } else {\n-        Command::new(\"false\").spawn().unwrap()\n+        shell_cmd().arg(\"-c\").arg(\"false\").spawn().unwrap()\n     };\n     assert!(prog.wait().unwrap().code() == Some(1));\n     assert!(prog.wait().unwrap().code() == Some(1));\n }\n \n #[test]\n-#[cfg_attr(any(target_os = \"vxworks\", target_os = \"android\"), ignore)]\n+#[cfg_attr(any(target_os = \"vxworks\"), ignore)]\n fn test_wait_with_output_once() {\n     let prog = if cfg!(target_os = \"windows\") {\n         Command::new(\"cmd\").args(&[\"/C\", \"echo hello\"]).stdout(Stdio::piped()).spawn().unwrap()\n     } else {\n-        Command::new(\"echo\").arg(\"hello\").stdout(Stdio::piped()).spawn().unwrap()\n+        shell_cmd().arg(\"-c\").arg(\"echo hello\").stdout(Stdio::piped()).spawn().unwrap()\n     };\n \n     let Output { status, stdout, stderr } = prog.wait_with_output().unwrap();"}, {"sha": "6e52127591c76c66388d63a6abf817778ddae434", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -138,7 +138,8 @@ This is for Rust compiler internal use only.\n \n Since primitive types are defined in the compiler, there's no place to attach documentation\n attributes. The `#[doc(primitive)]` attribute is used by the standard library to provide a way\n-to generate documentation for primitive types, and requires `#![feature(doc_primitive)]` to enable.\n+to generate documentation for primitive types, and requires `#![feature(rustdoc_internals)]` to\n+enable.\n \n ## Document keywords\n \n@@ -149,7 +150,7 @@ Rust keywords are documented in the standard library (look for `match` for examp\n To do so, the `#[doc(keyword = \"...\")]` attribute is used. Example:\n \n ```rust\n-#![feature(doc_keyword)]\n+#![feature(rustdoc_internals)]\n \n /// Some documentation about the keyword.\n #[doc(keyword = \"keyword\")]"}, {"sha": "24baca285c6ff2fce8e5d3b7a630882f5f83a0ab", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -682,7 +682,7 @@ fn short_item_info(\n \n     // Render unstable items. But don't render \"rustc_private\" crates (internal compiler crates).\n     // Those crates are permanently unstable so it makes no sense to render \"unstable\" everywhere.\n-    if let Some((StabilityLevel::Unstable { reason, issue, .. }, feature)) = item\n+    if let Some((StabilityLevel::Unstable { reason: _, issue, .. }, feature)) = item\n         .stability(cx.tcx())\n         .as_ref()\n         .filter(|stab| stab.feature != sym::rustc_private)\n@@ -702,22 +702,6 @@ fn short_item_info(\n \n         message.push_str(&format!(\" ({})\", feature));\n \n-        if let Some(unstable_reason) = reason {\n-            let mut ids = cx.id_map.borrow_mut();\n-            message = format!(\n-                \"<details><summary>{}</summary>{}</details>\",\n-                message,\n-                MarkdownHtml(\n-                    &unstable_reason.as_str(),\n-                    &mut ids,\n-                    error_codes,\n-                    cx.shared.edition(),\n-                    &cx.shared.playground,\n-                )\n-                .into_string()\n-            );\n-        }\n-\n         extra_info.push(format!(\"<div class=\\\"stab unstable\\\">{}</div>\", message));\n     }\n "}, {"sha": "0f3eb2ca07d23522c8da5126bec8661602ec74af", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -964,8 +964,6 @@ body.blur > :not(#help) {\n \tdisplay: table;\n }\n .stab {\n-\tborder-width: 1px;\n-\tborder-style: solid;\n \tpadding: 3px;\n \tmargin-bottom: 5px;\n \tfont-size: 90%;\n@@ -976,7 +974,7 @@ body.blur > :not(#help) {\n }\n \n .stab .emoji {\n-\tfont-size: 1.5em;\n+\tfont-size: 1.2em;\n }\n \n /* Black one-pixel outline around emoji shapes */"}, {"sha": "13e8dc85a243ce14857ba8940490e5674153bc81", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -218,6 +218,8 @@ a {\n }\n a.srclink,\n a#toggle-all-docs,\n+a.anchor,\n+.section-header a,\n #source-sidebar a,\n pre.rust a,\n .sidebar a,"}, {"sha": "8caf8a05d507f1eced592b54a77fd1259e39fe3e", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -180,6 +180,8 @@ a {\n }\n a.srclink,\n a#toggle-all-docs,\n+a.anchor,\n+.section-header a,\n #source-sidebar a,\n pre.rust a,\n .sidebar a,"}, {"sha": "fec71674e634f75a56f5758e40f351baac95b1c5", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -175,6 +175,8 @@ a {\n }\n a.srclink,\n a#toggle-all-docs,\n+a.anchor,\n+.section-header a,\n #source-sidebar a,\n pre.rust a,\n .sidebar a,"}, {"sha": "4ce0ed1a4b8fd4f5c647a64c2c6940d2650288d1", "filename": "src/test/rustdoc-gui/anchors.goml", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Frustdoc-gui%2Fanchors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Frustdoc-gui%2Fanchors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fanchors.goml?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -1,17 +1,29 @@\n+// This test is to ensure that the anchors (`\u00a7`) have the expected color.\n goto: file://|DOC_PATH|/test_docs/struct.HeavilyDocumentedStruct.html\n \n+// This is needed to ensure that the text color is computed.\n+show-text: true\n+\n // Set the theme to light.\n local-storage: {\"rustdoc-theme\": \"light\", \"rustdoc-use-system-theme\": \"false\"}\n // We reload the page so the local storage settings are being used.\n reload:\n \n-assert-css: (\"#toggle-all-docs\", {\"color\": \"rgba(0, 0, 0, 0)\"})\n-assert-css: (\".fqn .in-band a:nth-of-type(1)\", {\"color\": \"rgba(0, 0, 0, 0)\"})\n-assert-css: (\".fqn .in-band a:nth-of-type(2)\", {\"color\": \"rgba(0, 0, 0, 0)\"})\n-assert-css: (\".srclink\", {\"color\": \"rgba(0, 0, 0, 0)\"})\n-assert-css: (\".srclink\", {\"color\": \"rgba(0, 0, 0, 0)\"})\n+assert-css: (\"#toggle-all-docs\", {\"color\": \"rgb(0, 0, 0)\"})\n+assert-css: (\".fqn .in-band a:nth-of-type(1)\", {\"color\": \"rgb(0, 0, 0)\"})\n+assert-css: (\".fqn .in-band a:nth-of-type(2)\", {\"color\": \"rgb(173, 68, 142)\"})\n+assert-css: (\".srclink\", {\"color\": \"rgb(0, 0, 0)\"})\n+assert-css: (\".srclink\", {\"color\": \"rgb(0, 0, 0)\"})\n+\n+assert-css: (\"#top-doc-prose-title\", {\"color\": \"rgb(0, 0, 0)\"})\n+\n+assert-css: (\".sidebar a\", {\"color\": \"rgb(0, 0, 0)\"})\n+assert-css: (\".in-band a\", {\"color\": \"rgb(0, 0, 0)\"})\n \n-assert-css: (\"#top-doc-prose-title\", {\"color\": \"rgba(0, 0, 0, 0)\"})\n+// We move the cursor over the \"Implementations\" title so the anchor is displayed.\n+move-cursor-to: \"h2#implementations\"\n+assert-css: (\"h2#implementations a.anchor\", {\"color\": \"rgb(0, 0, 0)\"})\n \n-assert-css: (\".sidebar a\", {\"color\": \"rgba(0, 0, 0, 0)\"})\n-assert-css: (\".in-band a\", {\"color\": \"rgba(0, 0, 0, 0)\"})\n+// Same thing with the impl block title.\n+move-cursor-to: \"#impl\"\n+assert-css: (\"#impl a.anchor\", {\"color\": \"rgb(0, 0, 0)\"})"}, {"sha": "7002812bb62c4d444022500aa9f5805e30dd159f", "filename": "src/test/rustdoc-gui/headers-color.goml", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Frustdoc-gui%2Fheaders-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Frustdoc-gui%2Fheaders-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fheaders-color.goml?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -17,6 +17,9 @@ assert-css: (\"#impl\", {\"color\": \"rgb(197, 197, 197)\", \"background-color\": \"rgba(\n goto: file://|DOC_PATH|/test_docs/struct.Foo.html#method.must_use\n assert-css: (\"#method\\.must_use\", {\"color\": \"rgb(197, 197, 197)\", \"background-color\": \"rgba(255, 236, 164, 0.06)\"}, ALL)\n \n+goto: file://|DOC_PATH|/test_docs/index.html\n+assert-css: (\".section-header a\", {\"color\": \"rgb(197, 197, 197)\"}, ALL)\n+\n // Dark theme\n local-storage: {\"rustdoc-theme\": \"dark\", \"rustdoc-preferred-dark-theme\": \"dark\", \"rustdoc-use-system-theme\": \"false\"}\n goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n@@ -30,6 +33,9 @@ assert-css: (\"#impl\", {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(7\n goto: file://|DOC_PATH|/test_docs/struct.Foo.html#method.must_use\n assert-css: (\"#method\\.must_use\", {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(73, 74, 61)\"}, ALL)\n \n+goto: file://|DOC_PATH|/test_docs/index.html\n+assert-css: (\".section-header a\", {\"color\": \"rgb(221, 221, 221)\"}, ALL)\n+\n // Light theme\n local-storage: {\"rustdoc-theme\": \"light\", \"rustdoc-use-system-theme\": \"false\"}\n reload:\n@@ -44,3 +50,6 @@ assert-css: (\"#impl\", {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(253, 25\n \n goto: file://|DOC_PATH|/test_docs/struct.Foo.html#method.must_use\n assert-css: (\"#method\\.must_use\", {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(253, 255, 211)\"}, ALL)\n+\n+goto: file://|DOC_PATH|/test_docs/index.html\n+assert-css: (\".section-header a\", {\"color\": \"rgb(0, 0, 0)\"}, ALL)"}, {"sha": "cdc00d341140332246dc0e3355472dc3bb45a651", "filename": "src/test/rustdoc-gui/item-info-width.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Frustdoc-gui%2Fitem-info-width.goml", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Frustdoc-gui%2Fitem-info-width.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fitem-info-width.goml?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -4,4 +4,4 @@ goto: file://|DOC_PATH|/lib2/struct.Foo.html\n size: (1100, 800)\n // We check that \".item-info\" is bigger than its content.\n assert-css: (\".item-info\", {\"width\": \"807px\"})\n-assert-css: (\".item-info .stab\", {\"width\": \"343px\"})\n+assert-css: (\".item-info .stab\", {\"width\": \"341px\"})"}, {"sha": "458bcc4780c6c5abfa909b611982fd7439e8b85b", "filename": "src/test/rustdoc-gui/src/test_docs/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -2,7 +2,7 @@\n //! documentation generated so we can test each different features.\n \n #![crate_name = \"test_docs\"]\n-#![feature(doc_keyword)]\n+#![feature(rustdoc_internals)]\n #![feature(doc_cfg)]\n \n use std::convert::AsRef;"}, {"sha": "b84c2f7c6ac39e440090cfb83ebbe7e2ed9c4147", "filename": "src/test/rustdoc-json/primitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Frustdoc-json%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Frustdoc-json%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fprimitive.rs?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -1,6 +1,6 @@\n // edition:2018\n \n-#![feature(doc_primitive)]\n+#![feature(rustdoc_internals)]\n \n #[doc(primitive = \"usize\")]\n mod usize {}"}, {"sha": "72b70d6980bf3f9e54997334b35b60e4c470086a", "filename": "src/test/rustdoc-ui/coverage/exotic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fexotic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fexotic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fexotic.rs?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -1,8 +1,7 @@\n // compile-flags:-Z unstable-options --show-coverage\n // check-pass\n \n-#![feature(doc_keyword)]\n-#![feature(doc_primitive)]\n+#![feature(rustdoc_internals)]\n \n //! the features only used in std also have entries in the table, so make sure those get pulled out\n //! properly as well"}, {"sha": "2d70471c85e111f3f93672079d234c25ee81b20c", "filename": "src/test/rustdoc-ui/invalid-keyword.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Frustdoc-ui%2Finvalid-keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Frustdoc-ui%2Finvalid-keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-keyword.rs?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -1,4 +1,4 @@\n-#![feature(doc_keyword)]\n+#![feature(rustdoc_internals)]\n \n #[doc(keyword = \"foo df\")] //~ ERROR\n mod foo {}"}, {"sha": "7654a5615275ac17e4d074ed04e42df5c2e88d48", "filename": "src/test/rustdoc/issue-32374.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Frustdoc%2Fissue-32374.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Frustdoc%2Fissue-32374.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-32374.rs?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -1,7 +1,6 @@\n #![feature(staged_api)]\n #![doc(issue_tracker_base_url = \"https://issue_url/\")]\n-\n-#![unstable(feature=\"test\", issue = \"32374\")]\n+#![unstable(feature = \"test\", issue = \"32374\")]\n \n // @matches issue_32374/index.html '//*[@class=\"item-left unstable deprecated module-item\"]/span[@class=\"stab deprecated\"]' \\\n //      'Deprecated'\n@@ -23,12 +22,6 @@ pub struct T;\n //      '\ud83d\udc4e Deprecated since 1.0.0: deprecated'\n // @has issue_32374/struct.U.html '//*[@class=\"stab unstable\"]' \\\n //      '\ud83d\udd2c This is a nightly-only experimental API. (test #32374)'\n-// @has issue_32374/struct.U.html '//details' \\\n-//      '\ud83d\udd2c This is a nightly-only experimental API. (test #32374)'\n-// @has issue_32374/struct.U.html '//summary' \\\n-//      '\ud83d\udd2c This is a nightly-only experimental API. (test #32374)'\n-// @has issue_32374/struct.U.html '//details/p' \\\n-//      'unstable'\n #[rustc_deprecated(since = \"1.0.0\", reason = \"deprecated\")]\n #[unstable(feature = \"test\", issue = \"32374\", reason = \"unstable\")]\n pub struct U;"}, {"sha": "16f7cac5f51cc77774a6372c1e8ec22280bbbf0a", "filename": "src/test/rustdoc/keyword.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Frustdoc%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Frustdoc%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fkeyword.rs?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -1,6 +1,6 @@\n #![crate_name = \"foo\"]\n \n-#![feature(doc_keyword)]\n+#![feature(rustdoc_internals)]\n \n // @has foo/index.html '//h2[@id=\"keywords\"]' 'Keywords'\n // @has foo/index.html '//a[@href=\"keyword.match.html\"]' 'match'"}, {"sha": "c26d3a319878dea6568405928bdd85afcd1c550a", "filename": "src/test/rustdoc/mixing-doc-comments-and-attrs.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Frustdoc%2Fmixing-doc-comments-and-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Frustdoc%2Fmixing-doc-comments-and-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmixing-doc-comments-and-attrs.rs?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -0,0 +1,26 @@\n+#![crate_name = \"foo\"]\n+\n+// @has 'foo/struct.S1.html'\n+// @count - '//details[@class=\"rustdoc-toggle top-doc\"]/div[@class=\"docblock\"]/p' \\\n+//     1\n+// @has - '//details[@class=\"rustdoc-toggle top-doc\"]/div[@class=\"docblock\"]/p[1]' \\\n+//     'Hello world! Goodbye! Hello again!'\n+\n+#[doc = \"Hello world!\\n\\n\"]\n+/// Goodbye!\n+#[doc = \"  Hello again!\\n\"]\n+pub struct S1;\n+\n+// @has 'foo/struct.S2.html'\n+// @count - '//details[@class=\"rustdoc-toggle top-doc\"]/div[@class=\"docblock\"]/p' \\\n+//     2\n+// @has - '//details[@class=\"rustdoc-toggle top-doc\"]/div[@class=\"docblock\"]/p[1]' \\\n+//     'Hello world!'\n+// @has - '//details[@class=\"rustdoc-toggle top-doc\"]/div[@class=\"docblock\"]/p[2]' \\\n+//     'Goodbye! Hello again!'\n+\n+/// Hello world!\n+///\n+#[doc = \"Goodbye!\"]\n+/// Hello again!\n+pub struct S2;"}, {"sha": "0cc4f147e1c071fc4f5cd19986e10ba303957c92", "filename": "src/test/rustdoc/tab_title.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Frustdoc%2Ftab_title.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Frustdoc%2Ftab_title.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftab_title.rs?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n-#![feature(doc_keyword)]\n+#![feature(rustdoc_internals)]\n \n // tests for the html <title> element\n "}, {"sha": "7783dc40fcf206ac6b64e0a4ce122534be01e110", "filename": "src/test/ui-fulldeps/internal-lints/existing_doc_keyword.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fexisting_doc_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fexisting_doc_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fexisting_doc_keyword.rs?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: -Z unstable-options\n \n #![feature(rustc_private)]\n-#![feature(doc_keyword)]\n+#![feature(rustdoc_internals)]\n \n #![crate_type = \"lib\"]\n "}, {"sha": "4bb9a40deb0dd844c71635354d13e4606abb3c46", "filename": "src/test/ui/feature-gates/feature-gate-doc_keyword.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b426445c60b4faab6e96d2b866164d478680abf6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b426445c60b4faab6e96d2b866164d478680abf6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.rs?ref=b426445c60b4faab6e96d2b866164d478680abf6", "patch": "@@ -1,5 +0,0 @@\n-#[doc(keyword = \"match\")] //~ ERROR: `#[doc(keyword)]` is experimental\n-/// wonderful\n-mod foo{}\n-\n-fn main() {}"}, {"sha": "c5dc7d537fd887e0f87090ef165ab8b9a42a9242", "filename": "src/test/ui/feature-gates/feature-gate-doc_keyword.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b426445c60b4faab6e96d2b866164d478680abf6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b426445c60b4faab6e96d2b866164d478680abf6/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.stderr?ref=b426445c60b4faab6e96d2b866164d478680abf6", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: `#[doc(keyword)]` is experimental\n-  --> $DIR/feature-gate-doc_keyword.rs:1:1\n-   |\n-LL | #[doc(keyword = \"match\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #51315 <https://github.com/rust-lang/rust/issues/51315> for more information\n-   = help: add `#![feature(doc_keyword)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "d2ff4f620098661406760c8ba73a833814636a71", "filename": "src/test/ui/feature-gates/feature-gate-rustdoc_internals.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.rs?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -0,0 +1,5 @@\n+#[doc(keyword = \"match\")] //~ ERROR: `#[doc(keyword)]` is meant for internal use only\n+/// wonderful\n+mod foo {}\n+\n+fn main() {}"}, {"sha": "e96461ac38acbe555dcb6f3e8e1350e755f641ad", "filename": "src/test/ui/feature-gates/feature-gate-rustdoc_internals.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustdoc_internals.stderr?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: `#[doc(keyword)]` is meant for internal use only\n+  --> $DIR/feature-gate-rustdoc_internals.rs:1:1\n+   |\n+LL | #[doc(keyword = \"match\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #90418 <https://github.com/rust-lang/rust/issues/90418> for more information\n+   = help: add `#![feature(rustdoc_internals)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "43b84e5018cda2c17385b533d71b2ca795a38d35", "filename": "src/test/ui/rustdoc/doc_keyword.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Fui%2Frustdoc%2Fdoc_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Fui%2Frustdoc%2Fdoc_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Fdoc_keyword.rs?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -1,5 +1,5 @@\n #![crate_type = \"lib\"]\n-#![feature(doc_keyword)]\n+#![feature(rustdoc_internals)]\n \n #![doc(keyword = \"hello\")] //~ ERROR\n "}, {"sha": "739c624d0c6f7dcaeb333dfa863f99368386b213", "filename": "src/test/ui/rustdoc/renamed-features-rustdoc_internals.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Fui%2Frustdoc%2Frenamed-features-rustdoc_internals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Fui%2Frustdoc%2Frenamed-features-rustdoc_internals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Frenamed-features-rustdoc_internals.rs?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -0,0 +1,5 @@\n+#![feature(doc_keyword)] //~ ERROR\n+#![feature(doc_primitive)] //~ ERROR\n+#![crate_type = \"lib\"]\n+\n+pub fn foo() {}"}, {"sha": "d0979ce97ac8701775295b17514c3f5e43085c21", "filename": "src/test/ui/rustdoc/renamed-features-rustdoc_internals.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Fui%2Frustdoc%2Frenamed-features-rustdoc_internals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2/src%2Ftest%2Fui%2Frustdoc%2Frenamed-features-rustdoc_internals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustdoc%2Frenamed-features-rustdoc_internals.stderr?ref=d2c24aabcddd1eb11af633ab6b7391ae0cd00ea2", "patch": "@@ -0,0 +1,19 @@\n+error[E0557]: feature has been removed\n+  --> $DIR/renamed-features-rustdoc_internals.rs:1:12\n+   |\n+LL | #![feature(doc_keyword)]\n+   |            ^^^^^^^^^^^ feature has been removed\n+   |\n+   = note: merged into `#![feature(rustdoc_internals)]`\n+\n+error[E0557]: feature has been removed\n+  --> $DIR/renamed-features-rustdoc_internals.rs:2:12\n+   |\n+LL | #![feature(doc_primitive)]\n+   |            ^^^^^^^^^^^^^ feature has been removed\n+   |\n+   = note: merged into `#![feature(rustdoc_internals)]`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0557`."}]}