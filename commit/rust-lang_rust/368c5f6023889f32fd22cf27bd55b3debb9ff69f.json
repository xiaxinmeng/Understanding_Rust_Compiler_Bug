{"sha": "368c5f6023889f32fd22cf27bd55b3debb9ff69f", "node_id": "C_kwDOAAsO6NoAKDM2OGM1ZjYwMjM4ODlmMzJmZDIyY2YyN2JkNTViM2RlYmI5ZmY2OWY", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-09-30T13:53:47Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-09-30T13:53:47Z"}, "message": "Fix format string highlighting in `panic!`", "tree": {"sha": "195e809758f7c7cc7c294457af24a77c1d637a0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/195e809758f7c7cc7c294457af24a77c1d637a0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/368c5f6023889f32fd22cf27bd55b3debb9ff69f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/368c5f6023889f32fd22cf27bd55b3debb9ff69f", "html_url": "https://github.com/rust-lang/rust/commit/368c5f6023889f32fd22cf27bd55b3debb9ff69f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/368c5f6023889f32fd22cf27bd55b3debb9ff69f/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "161a5e872415af20c175936779a101ad503337c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/161a5e872415af20c175936779a101ad503337c6", "html_url": "https://github.com/rust-lang/rust/commit/161a5e872415af20c175936779a101ad503337c6"}], "stats": {"total": 62, "additions": 59, "deletions": 3}, "files": [{"sha": "ce24311115c7e7ab8ea3bdf0b75d0aa7898c22ee", "filename": "crates/ide/src/syntax_highlighting/format.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/368c5f6023889f32fd22cf27bd55b3debb9ff69f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/368c5f6023889f32fd22cf27bd55b3debb9ff69f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs?ref=368c5f6023889f32fd22cf27bd55b3debb9ff69f", "patch": "@@ -31,14 +31,16 @@ fn is_format_string(string: &ast::String) -> Option<()> {\n     let parent = string.syntax().parent()?;\n \n     let name = parent.parent().and_then(ast::MacroCall::cast)?.path()?.segment()?.name_ref()?;\n-    if !matches!(name.text().as_str(), \"format_args\" | \"format_args_nl\") {\n+    if !matches!(\n+        name.text().as_str(),\n+        \"format_args\" | \"format_args_nl\" | \"const_format_args\" | \"panic_2015\" | \"panic_2021\"\n+    ) {\n         return None;\n     }\n \n     let first_literal = parent\n         .children_with_tokens()\n-        .filter_map(|it| it.as_token().cloned().and_then(ast::String::cast))\n-        .next()?;\n+        .find_map(|it| it.as_token().cloned().and_then(ast::String::cast))?;\n     if &first_literal != string {\n         return None;\n     }"}, {"sha": "d0ad7945a7d8dceef4c2d222c1352582bbd1b001", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_strings.html", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/368c5f6023889f32fd22cf27bd55b3debb9ff69f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/368c5f6023889f32fd22cf27bd55b3debb9ff69f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html?ref=368c5f6023889f32fd22cf27bd55b3debb9ff69f", "patch": "@@ -51,6 +51,31 @@\n     <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>fmt<span class=\"colon\">:</span>expr<span class=\"comma\">,</span> <span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>args<span class=\"colon\">:</span>tt<span class=\"parenthesis\">)</span><span class=\"punctuation\">*</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">{</span> <span class=\"comment\">/* compiler built-in */</span> <span class=\"brace\">}</span><span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span>\n \n+<span class=\"keyword\">mod</span> <span class=\"module declaration\">panic</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">macro</span> <span class=\"macro declaration\">panic_2015</span> <span class=\"brace\">{</span>\n+        <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"parenthesis\">(</span>\n+            <span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>panicking<span class=\"colon\">:</span><span class=\"colon\">:</span>panic<span class=\"parenthesis\">(</span><span class=\"string_literal\">\"explicit panic\"</span><span class=\"parenthesis\">)</span>\n+        <span class=\"parenthesis\">)</span><span class=\"comma\">,</span>\n+        <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>msg<span class=\"colon\">:</span>literal <span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"comma\">,</span><span class=\"parenthesis\">)</span><span class=\"operator control\">?</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"parenthesis\">(</span>\n+            <span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>panicking<span class=\"colon\">:</span><span class=\"colon\">:</span>panic<span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>msg<span class=\"parenthesis\">)</span>\n+        <span class=\"parenthesis\">)</span><span class=\"comma\">,</span>\n+        <span class=\"comment\">// Use `panic_str` instead of `panic_display::&lt;&str&gt;` for non_fmt_panic lint.</span>\n+        <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>msg<span class=\"colon\">:</span>expr <span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"comma\">,</span><span class=\"parenthesis\">)</span><span class=\"operator control\">?</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"parenthesis\">(</span>\n+            <span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>panicking<span class=\"colon\">:</span><span class=\"colon\">:</span>panic_str<span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>msg<span class=\"parenthesis\">)</span>\n+        <span class=\"parenthesis\">)</span><span class=\"comma\">,</span>\n+        <span class=\"comment\">// Special-case the single-argument case for const_panic.</span>\n+        <span class=\"parenthesis\">(</span><span class=\"string_literal\">\"{}\"</span><span class=\"comma\">,</span> <span class=\"punctuation\">$</span>arg<span class=\"colon\">:</span>expr <span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"comma\">,</span><span class=\"parenthesis\">)</span><span class=\"operator control\">?</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"parenthesis\">(</span>\n+            <span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>panicking<span class=\"colon\">:</span><span class=\"colon\">:</span>panic_display<span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"punctuation\">$</span>arg<span class=\"parenthesis\">)</span>\n+        <span class=\"parenthesis\">)</span><span class=\"comma\">,</span>\n+        <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>fmt<span class=\"colon\">:</span>expr<span class=\"comma\">,</span> <span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>arg<span class=\"colon\">:</span>tt<span class=\"parenthesis\">)</span><span class=\"punctuation\">+</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"parenthesis\">(</span>\n+            <span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>panicking<span class=\"colon\">:</span><span class=\"colon\">:</span>panic_fmt<span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>const_format_args<span class=\"punctuation\">!</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>fmt<span class=\"comma\">,</span> <span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>arg<span class=\"parenthesis\">)</span><span class=\"punctuation\">+</span><span class=\"parenthesis\">)</span><span class=\"parenthesis\">)</span>\n+        <span class=\"parenthesis\">)</span><span class=\"comma\">,</span>\n+    <span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n+\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">rustc_builtin_macro</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">std_panic</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n+<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">panic</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+\n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n     <span class=\"comment\">// from https://doc.rust-lang.org/std/fmt/index.html</span>\n     <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>                 <span class=\"comment\">// =&gt; \"Hello\"</span>\n@@ -100,4 +125,6 @@\n     <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">\u043d\u0438\u0447\u043e\u0441\u0438</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> \u043d\u0438\u0447\u043e\u0441\u0438 <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n \n     <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"variable\">x</span><span class=\"format_specifier\">?</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> \"</span><span class=\"comma\">,</span> thingy<span class=\"comma\">,</span> n2<span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">panic!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">panic!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"more </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "91d29a96bfcbf5de14abc5cdc7abaae778cbf8ce", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/368c5f6023889f32fd22cf27bd55b3debb9ff69f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/368c5f6023889f32fd22cf27bd55b3debb9ff69f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=368c5f6023889f32fd22cf27bd55b3debb9ff69f", "patch": "@@ -446,6 +446,31 @@ macro_rules! format_args_nl {\n     ($fmt:expr, $($args:tt)*) => {{ /* compiler built-in */ }};\n }\n \n+mod panic {\n+    pub macro panic_2015 {\n+        () => (\n+            $crate::panicking::panic(\"explicit panic\")\n+        ),\n+        ($msg:literal $(,)?) => (\n+            $crate::panicking::panic($msg)\n+        ),\n+        // Use `panic_str` instead of `panic_display::<&str>` for non_fmt_panic lint.\n+        ($msg:expr $(,)?) => (\n+            $crate::panicking::panic_str($msg)\n+        ),\n+        // Special-case the single-argument case for const_panic.\n+        (\"{}\", $arg:expr $(,)?) => (\n+            $crate::panicking::panic_display(&$arg)\n+        ),\n+        ($fmt:expr, $($arg:tt)+) => (\n+            $crate::panicking::panic_fmt($crate::const_format_args!($fmt, $($arg)+))\n+        ),\n+    }\n+}\n+\n+#[rustc_builtin_macro(std_panic)]\n+macro_rules! panic {}\n+\n fn main() {\n     // from https://doc.rust-lang.org/std/fmt/index.html\n     println!(\"Hello\");                 // => \"Hello\"\n@@ -495,6 +520,8 @@ fn main() {\n     println!(\"{\u043d\u0438\u0447\u043e\u0441\u0438}\", \u043d\u0438\u0447\u043e\u0441\u0438 = 92);\n \n     println!(\"{:x?} {} \", thingy, n2);\n+    panic!(\"{}\", 0);\n+    panic!(\"more {}\", 1);\n }\"#\n         .trim(),\n         expect_file![\"./test_data/highlight_strings.html\"],"}]}