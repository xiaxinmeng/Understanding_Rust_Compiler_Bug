{"sha": "89277e7a422fee67ef6c068d9430ab6bc88847ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5Mjc3ZTdhNDIyZmVlNjdlZjZjMDY4ZDk0MzBhYjZiYzg4ODQ3YmE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-26T16:12:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-26T16:12:22Z"}, "message": "Merge #5081\n\n5081: Fix a panic with malformed inner items r=jonas-schievink a=jonas-schievink\n\nbors r+\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>", "tree": {"sha": "ec3b8427ab991aa379ce3dfc1853e291c7b12e40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec3b8427ab991aa379ce3dfc1853e291c7b12e40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89277e7a422fee67ef6c068d9430ab6bc88847ba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe9h5mCRBK7hj4Ov3rIwAAdHIIAKS8+qlzPCCMxol2CrNym7jh\nBGNTfut8/F4NNNd85mfrs7uE5nw9yS8Jfq3Af2f/svq0aXsYyvzsC5TpCDhV8+1V\nweKTZt6FRzP2SDhGOOij6fiKhPTk2g7H46lqMPTIekHNU8D/zljmjuAVN3MA2hod\nKfcYj6rQtFA1T755VpfUrBRr87HBVhFtJ/6GhxLnDpoeYHL1S7Q4NwObOAdtHAEz\nKadQAXCOL5AlyhYDx9eNPwYo7qxDaMwAGsEyLF6UNje6eAYFjqJj2Ezd3RgPBXC4\n4g6BLndTBQUVb6Qn3hMhifKiEhykMqZQtNzRaNzlQCJHZnjVz3SLld36cY5u2f4=\n=m6ub\n-----END PGP SIGNATURE-----\n", "payload": "tree ec3b8427ab991aa379ce3dfc1853e291c7b12e40\nparent df27b99f2769146f588b5b5a29072fe51be7b57b\nparent efe378d2b43b90f8cf549781e870bfa2ebe90fd0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1593187942 +0000\ncommitter GitHub <noreply@github.com> 1593187942 +0000\n\nMerge #5081\n\n5081: Fix a panic with malformed inner items r=jonas-schievink a=jonas-schievink\n\nbors r+\n\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89277e7a422fee67ef6c068d9430ab6bc88847ba", "html_url": "https://github.com/rust-lang/rust/commit/89277e7a422fee67ef6c068d9430ab6bc88847ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89277e7a422fee67ef6c068d9430ab6bc88847ba/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df27b99f2769146f588b5b5a29072fe51be7b57b", "url": "https://api.github.com/repos/rust-lang/rust/commits/df27b99f2769146f588b5b5a29072fe51be7b57b", "html_url": "https://github.com/rust-lang/rust/commit/df27b99f2769146f588b5b5a29072fe51be7b57b"}, {"sha": "efe378d2b43b90f8cf549781e870bfa2ebe90fd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/efe378d2b43b90f8cf549781e870bfa2ebe90fd0", "html_url": "https://github.com/rust-lang/rust/commit/efe378d2b43b90f8cf549781e870bfa2ebe90fd0"}], "stats": {"total": 111, "additions": 50, "deletions": 61}, "files": [{"sha": "a7e2e09822ff421756663de87989bceeab9afce1", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 37, "deletions": 61, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/89277e7a422fee67ef6c068d9430ab6bc88847ba/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89277e7a422fee67ef6c068d9430ab6bc88847ba/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=89277e7a422fee67ef6c068d9430ab6bc88847ba", "patch": "@@ -5,7 +5,7 @@ use either::Either;\n use hir_expand::{\n     hygiene::Hygiene,\n     name::{name, AsName, Name},\n-    AstId, HirFileId, MacroDefId, MacroDefKind,\n+    HirFileId, MacroDefId, MacroDefKind,\n };\n use ra_arena::Arena;\n use ra_syntax::{\n@@ -27,7 +27,7 @@ use crate::{\n         LogicOp, MatchArm, Ordering, Pat, PatId, RecordFieldPat, RecordLitField, Statement,\n     },\n     item_scope::BuiltinShadowMode,\n-    item_tree::{FileItemTreeId, ItemTree, ItemTreeNode},\n+    item_tree::{ItemTree, ItemTreeId, ItemTreeNode},\n     path::{GenericArgs, Path},\n     type_ref::{Mutability, Rawness, TypeRef},\n     AdtId, ConstLoc, ContainerId, DefWithBodyId, EnumLoc, FunctionLoc, Intern, ModuleDefId,\n@@ -37,7 +37,7 @@ use crate::{\n use super::{ExprSource, PatSource};\n use ast::AstChildren;\n use rustc_hash::FxHashMap;\n-use std::sync::Arc;\n+use std::{any::type_name, sync::Arc};\n \n pub(crate) struct LowerCtx {\n     hygiene: Hygiene,\n@@ -561,17 +561,30 @@ impl ExprCollector<'_> {\n         }\n     }\n \n-    fn find_inner_item<S: ItemTreeNode>(&self, id: AstId<ast::ModuleItem>) -> FileItemTreeId<S> {\n+    fn find_inner_item<N: ItemTreeNode>(&self, ast: &N::Source) -> Option<ItemTreeId<N>> {\n+        let id = self.expander.ast_id(ast);\n         let tree = &self.item_trees[&id.file_id];\n \n         // FIXME: This probably breaks with `use` items, since they produce multiple item tree nodes\n \n         // Root file (non-macro).\n-        tree.all_inner_items()\n+        let item_tree_id = tree\n+            .all_inner_items()\n             .chain(tree.top_level_items().iter().copied())\n-            .filter_map(|mod_item| mod_item.downcast::<S>())\n-            .find(|tree_id| tree[*tree_id].ast_id().upcast() == id.value)\n-            .unwrap_or_else(|| panic!(\"couldn't find inner item for {:?}\", id))\n+            .filter_map(|mod_item| mod_item.downcast::<N>())\n+            .find(|tree_id| tree[*tree_id].ast_id().upcast() == id.value.upcast())\n+            .or_else(|| {\n+                log::debug!(\n+                    \"couldn't find inner {} item for {:?} (AST: `{}` - {:?})\",\n+                    type_name::<N>(),\n+                    id,\n+                    ast.syntax(),\n+                    ast.syntax(),\n+                );\n+                None\n+            })?;\n+\n+        Some(ItemTreeId::new(id.file_id, item_tree_id))\n     }\n \n     fn collect_expr_opt(&mut self, expr: Option<ast::Expr>) -> ExprId {\n@@ -611,82 +624,45 @@ impl ExprCollector<'_> {\n             .filter_map(|item| {\n                 let (def, name): (ModuleDefId, Option<ast::Name>) = match item {\n                     ast::ModuleItem::FnDef(def) => {\n-                        let ast_id = self.expander.ast_id(&def);\n-                        let id = self.find_inner_item(ast_id.map(|id| id.upcast()));\n+                        let id = self.find_inner_item(&def)?;\n                         (\n-                            FunctionLoc { container: container.into(), id: ast_id.with_value(id) }\n-                                .intern(self.db)\n-                                .into(),\n+                            FunctionLoc { container: container.into(), id }.intern(self.db).into(),\n                             def.name(),\n                         )\n                     }\n                     ast::ModuleItem::TypeAliasDef(def) => {\n-                        let ast_id = self.expander.ast_id(&def);\n-                        let id = self.find_inner_item(ast_id.map(|id| id.upcast()));\n+                        let id = self.find_inner_item(&def)?;\n                         (\n-                            TypeAliasLoc { container: container.into(), id: ast_id.with_value(id) }\n-                                .intern(self.db)\n-                                .into(),\n+                            TypeAliasLoc { container: container.into(), id }.intern(self.db).into(),\n                             def.name(),\n                         )\n                     }\n                     ast::ModuleItem::ConstDef(def) => {\n-                        let ast_id = self.expander.ast_id(&def);\n-                        let id = self.find_inner_item(ast_id.map(|id| id.upcast()));\n+                        let id = self.find_inner_item(&def)?;\n                         (\n-                            ConstLoc { container: container.into(), id: ast_id.with_value(id) }\n-                                .intern(self.db)\n-                                .into(),\n+                            ConstLoc { container: container.into(), id }.intern(self.db).into(),\n                             def.name(),\n                         )\n                     }\n                     ast::ModuleItem::StaticDef(def) => {\n-                        let ast_id = self.expander.ast_id(&def);\n-                        let id = self.find_inner_item(ast_id.map(|id| id.upcast()));\n-                        (\n-                            StaticLoc { container, id: ast_id.with_value(id) }\n-                                .intern(self.db)\n-                                .into(),\n-                            def.name(),\n-                        )\n+                        let id = self.find_inner_item(&def)?;\n+                        (StaticLoc { container, id }.intern(self.db).into(), def.name())\n                     }\n                     ast::ModuleItem::StructDef(def) => {\n-                        let ast_id = self.expander.ast_id(&def);\n-                        let id = self.find_inner_item(ast_id.map(|id| id.upcast()));\n-                        (\n-                            StructLoc { container, id: ast_id.with_value(id) }\n-                                .intern(self.db)\n-                                .into(),\n-                            def.name(),\n-                        )\n+                        let id = self.find_inner_item(&def)?;\n+                        (StructLoc { container, id }.intern(self.db).into(), def.name())\n                     }\n                     ast::ModuleItem::EnumDef(def) => {\n-                        let ast_id = self.expander.ast_id(&def);\n-                        let id = self.find_inner_item(ast_id.map(|id| id.upcast()));\n-                        (\n-                            EnumLoc { container, id: ast_id.with_value(id) }.intern(self.db).into(),\n-                            def.name(),\n-                        )\n+                        let id = self.find_inner_item(&def)?;\n+                        (EnumLoc { container, id }.intern(self.db).into(), def.name())\n                     }\n                     ast::ModuleItem::UnionDef(def) => {\n-                        let ast_id = self.expander.ast_id(&def);\n-                        let id = self.find_inner_item(ast_id.map(|id| id.upcast()));\n-                        (\n-                            UnionLoc { container, id: ast_id.with_value(id) }\n-                                .intern(self.db)\n-                                .into(),\n-                            def.name(),\n-                        )\n+                        let id = self.find_inner_item(&def)?;\n+                        (UnionLoc { container, id }.intern(self.db).into(), def.name())\n                     }\n                     ast::ModuleItem::TraitDef(def) => {\n-                        let ast_id = self.expander.ast_id(&def);\n-                        let id = self.find_inner_item(ast_id.map(|id| id.upcast()));\n-                        (\n-                            TraitLoc { container, id: ast_id.with_value(id) }\n-                                .intern(self.db)\n-                                .into(),\n-                            def.name(),\n-                        )\n+                        let id = self.find_inner_item(&def)?;\n+                        (TraitLoc { container, id }.intern(self.db).into(), def.name())\n                     }\n                     ast::ModuleItem::ExternBlock(_) => return None, // FIXME: collect from extern blocks\n                     ast::ModuleItem::ImplDef(_)"}, {"sha": "99e876683546861bad8512057e7bdfb267ce8e3b", "filename": "crates/ra_hir_def/src/body/scope.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/89277e7a422fee67ef6c068d9430ab6bc88847ba/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89277e7a422fee67ef6c068d9430ab6bc88847ba/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs?ref=89277e7a422fee67ef6c068d9430ab6bc88847ba", "patch": "@@ -337,6 +337,19 @@ fn foo() {\n         );\n     }\n \n+    #[test]\n+    fn broken_inner_item() {\n+        do_check(\n+            r\"\n+            fn foo() {\n+                trait {}\n+                <|>\n+            }\n+        \",\n+            &[],\n+        );\n+    }\n+\n     fn do_check_local_name(ra_fixture: &str, expected_offset: u32) {\n         let (db, position) = TestDB::with_position(ra_fixture);\n         let file_id = position.file_id;"}]}