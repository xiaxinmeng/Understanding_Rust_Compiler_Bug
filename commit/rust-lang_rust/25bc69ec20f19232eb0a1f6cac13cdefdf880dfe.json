{"sha": "25bc69ec20f19232eb0a1f6cac13cdefdf880dfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1YmM2OWVjMjBmMTkyMzJlYjBhMWY2Y2FjMTNjZGVmZGY4ODBkZmU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-09-14T15:42:12Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-09-20T09:21:25Z"}, "message": "incr.comp.: Allow for marking DepKinds as inputs.", "tree": {"sha": "f9c30738bd42c9ee879ffa06e951deaeaad4bb54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9c30738bd42c9ee879ffa06e951deaeaad4bb54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25bc69ec20f19232eb0a1f6cac13cdefdf880dfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25bc69ec20f19232eb0a1f6cac13cdefdf880dfe", "html_url": "https://github.com/rust-lang/rust/commit/25bc69ec20f19232eb0a1f6cac13cdefdf880dfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25bc69ec20f19232eb0a1f6cac13cdefdf880dfe/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b75a3dfeaf8261bd59343792b3650550be86c95", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b75a3dfeaf8261bd59343792b3650550be86c95", "html_url": "https://github.com/rust-lang/rust/commit/3b75a3dfeaf8261bd59343792b3650550be86c95"}], "stats": {"total": 80, "additions": 42, "deletions": 38}, "files": [{"sha": "3befab1fe2a63fac3b4cd1bd2316410c30b21ffe", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 37, "deletions": 17, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/25bc69ec20f19232eb0a1f6cac13cdefdf880dfe/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bc69ec20f19232eb0a1f6cac13cdefdf880dfe/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=25bc69ec20f19232eb0a1f6cac13cdefdf880dfe", "patch": "@@ -80,14 +80,28 @@ macro_rules! erase {\n     ($x:tt) => ({})\n }\n \n-macro_rules! anon_attr_to_bool {\n-    (anon) => (true)\n+macro_rules! is_anon_attr {\n+    (anon) => (true);\n+    ($attr:ident) => (false);\n+}\n+\n+macro_rules! is_input_attr {\n+    (input) => (true);\n+    ($attr:ident) => (false);\n+}\n+\n+macro_rules! contains_anon_attr {\n+    ($($attr:ident),*) => ({$(is_anon_attr!($attr) | )* false});\n+}\n+\n+macro_rules! contains_input_attr {\n+    ($($attr:ident),*) => ({$(is_input_attr!($attr) | )* false});\n }\n \n macro_rules! define_dep_nodes {\n     (<$tcx:tt>\n     $(\n-        [$($anon:ident)*]\n+        [$($attr:ident),* ]\n         $variant:ident $(( $($tuple_arg:tt),* ))*\n                        $({ $($struct_arg_name:ident : $struct_arg_ty:ty),* })*\n       ,)*\n@@ -105,7 +119,9 @@ macro_rules! define_dep_nodes {\n                 match *self {\n                     $(\n                         DepKind :: $variant => {\n-                            $(return !anon_attr_to_bool!($anon);)*\n+                            if contains_anon_attr!($($attr),*) {\n+                                return false;\n+                            }\n \n                             // tuple args\n                             $({\n@@ -126,15 +142,20 @@ macro_rules! define_dep_nodes {\n                 }\n             }\n \n-            #[allow(unreachable_code)]\n             #[inline]\n-            pub fn is_anon<$tcx>(&self) -> bool {\n+            pub fn is_anon(&self) -> bool {\n                 match *self {\n                     $(\n-                        DepKind :: $variant => {\n-                            $(return anon_attr_to_bool!($anon);)*\n-                            false\n-                        }\n+                        DepKind :: $variant => { contains_anon_attr!($($attr),*) }\n+                    )*\n+                }\n+            }\n+\n+            #[inline]\n+            pub fn is_input(&self) -> bool {\n+                match *self {\n+                    $(\n+                        DepKind :: $variant => { contains_input_attr!($($attr),*) }\n                     )*\n                 }\n             }\n@@ -378,18 +399,17 @@ define_dep_nodes!( <'tcx>\n     // suitable wrapper, you can use `tcx.dep_graph.ignore()` to gain\n     // access to the krate, but you must remember to add suitable\n     // edges yourself for the individual items that you read.\n-    [] Krate,\n+    [input] Krate,\n \n     // Represents the HIR node with the given node-id\n-    [] Hir(DefId),\n+    [input] Hir(DefId),\n \n     // Represents the body of a function or method. The def-id is that of the\n     // function/method.\n-    [] HirBody(DefId),\n+    [input] HirBody(DefId),\n \n-    // Represents the metadata for a given HIR node, typically found\n-    // in an extern crate.\n-    [] MetaData(DefId),\n+    // Represents metadata from an extern crate.\n+    [input] MetaData(DefId),\n \n     // Represents some artifact that we save to disk. Note that these\n     // do not have a def-id as part of their identifier.\n@@ -529,7 +549,7 @@ define_dep_nodes!( <'tcx>\n     [] ExternCrate(DefId),\n     [] LintLevels,\n     [] Specializes { impl1: DefId, impl2: DefId },\n-    [] InScopeTraits(DefIndex),\n+    [input] InScopeTraits(DefIndex),\n     [] ModuleExports(DefId),\n     [] IsSanitizerRuntime(CrateNum),\n     [] IsProfilerRuntime(CrateNum),"}, {"sha": "29c0ba66f3f726e0c3277676a3de4ba5d2b4e388", "filename": "src/librustc/dep_graph/edges.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25bc69ec20f19232eb0a1f6cac13cdefdf880dfe/src%2Flibrustc%2Fdep_graph%2Fedges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bc69ec20f19232eb0a1f6cac13cdefdf880dfe/src%2Flibrustc%2Fdep_graph%2Fedges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fedges.rs?ref=25bc69ec20f19232eb0a1f6cac13cdefdf880dfe", "patch": "@@ -123,6 +123,7 @@ impl DepGraphEdges {\n             reads\n         } = popped_node {\n             debug_assert_eq!(node, key);\n+            debug_assert!(!node.kind.is_input() || reads.is_empty());\n \n             let target_id = self.get_or_create_node(node);\n "}, {"sha": "8a7011a0dcc5199258e85436fe60b602b634a9bf", "filename": "src/librustc_incremental/persist/hash.rs", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/25bc69ec20f19232eb0a1f6cac13cdefdf880dfe/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bc69ec20f19232eb0a1f6cac13cdefdf880dfe/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs?ref=25bc69ec20f19232eb0a1f6cac13cdefdf880dfe", "patch": "@@ -45,21 +45,6 @@ impl<'a, 'tcx> HashContext<'a, 'tcx> {\n         }\n     }\n \n-    pub fn is_hashable(tcx: TyCtxt, dep_node: &DepNode) -> bool {\n-        match dep_node.kind {\n-            DepKind::Krate |\n-            DepKind::Hir |\n-            DepKind::InScopeTraits |\n-            DepKind::HirBody =>\n-                true,\n-            DepKind::MetaData => {\n-                let def_id = dep_node.extract_def_id(tcx).unwrap();\n-                !def_id.is_local()\n-            }\n-            _ => false,\n-        }\n-    }\n-\n     pub fn hash(&mut self, dep_node: &DepNode) -> Option<Fingerprint> {\n         match dep_node.kind {\n             DepKind::Krate => {\n@@ -79,13 +64,11 @@ impl<'a, 'tcx> HashContext<'a, 'tcx> {\n             // save it for others to use.\n             DepKind::MetaData => {\n                 let def_id = dep_node.extract_def_id(self.tcx).unwrap();\n-                if !def_id.is_local() {\n-                    Some(self.metadata_hash(def_id,\n+                assert!(!def_id.is_local());\n+\n+                Some(self.metadata_hash(def_id,\n                                         def_id.krate,\n                                         |this| &mut this.metadata_hashes))\n-                } else {\n-                    None\n-                }\n             }\n \n             _ => {"}, {"sha": "46bb37b017f5786827b097d58f3108a413b82c9d", "filename": "src/librustc_incremental/persist/preds/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25bc69ec20f19232eb0a1f6cac13cdefdf880dfe/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bc69ec20f19232eb0a1f6cac13cdefdf880dfe/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fmod.rs?ref=25bc69ec20f19232eb0a1f6cac13cdefdf880dfe", "patch": "@@ -66,7 +66,7 @@ impl<'q> Predecessors<'q> {\n         // Reduce the graph to the most important nodes.\n         let compress::Reduction { graph, input_nodes } =\n             compress::reduce_graph(&query.graph,\n-                                   |n| HashContext::is_hashable(tcx, n),\n+                                   |n| n.kind.is_input(),\n                                    |n| is_output(n));\n \n         let mut hashes = FxHashMap();"}]}