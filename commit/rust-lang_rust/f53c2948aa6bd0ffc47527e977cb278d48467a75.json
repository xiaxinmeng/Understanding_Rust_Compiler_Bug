{"sha": "f53c2948aa6bd0ffc47527e977cb278d48467a75", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1M2MyOTQ4YWE2YmQwZmZjNDc1MjdlOTc3Y2IyNzhkNDg0NjdhNzU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-09T23:53:19Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-09T23:53:19Z"}, "message": "Rename variables that clash with keywords", "tree": {"sha": "fb6899e415cf8ebee8d9f12bae2fd74600e6c146", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb6899e415cf8ebee8d9f12bae2fd74600e6c146"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f53c2948aa6bd0ffc47527e977cb278d48467a75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f53c2948aa6bd0ffc47527e977cb278d48467a75", "html_url": "https://github.com/rust-lang/rust/commit/f53c2948aa6bd0ffc47527e977cb278d48467a75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f53c2948aa6bd0ffc47527e977cb278d48467a75/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9007afab0aa27c469dc837d4244281a0f24a0769", "url": "https://api.github.com/repos/rust-lang/rust/commits/9007afab0aa27c469dc837d4244281a0f24a0769", "html_url": "https://github.com/rust-lang/rust/commit/9007afab0aa27c469dc837d4244281a0f24a0769"}], "stats": {"total": 86, "additions": 43, "deletions": 43}, "files": [{"sha": "5dfafb85bbd9f38c5c4809b6f09093ded997ba36", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f53c2948aa6bd0ffc47527e977cb278d48467a75/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53c2948aa6bd0ffc47527e977cb278d48467a75/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=f53c2948aa6bd0ffc47527e977cb278d48467a75", "patch": "@@ -420,17 +420,17 @@ fn test_select2_stress() {\n         };\n     }\n \n-    let mut as = 0;\n+    let mut as_ = 0;\n     let mut bs = 0;\n     for iter::repeat(msgs * times * 2u) {\n         match select2(po_a, po_b) {\n-          either::Left(~\"a\") => as += 1,\n+          either::Left(~\"a\") => as_ += 1,\n           either::Right(~\"b\") => bs += 1,\n           _ => fail ~\"test_select_2_stress failed\"\n         }\n     }\n \n-    assert as == 400;\n+    assert as_ == 400;\n     assert bs == 400;\n }\n "}, {"sha": "746544a6afdaf9db7707cf8d8717c04987a94154", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f53c2948aa6bd0ffc47527e977cb278d48467a75/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53c2948aa6bd0ffc47527e977cb278d48467a75/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=f53c2948aa6bd0ffc47527e977cb278d48467a75", "patch": "@@ -1029,15 +1029,15 @@ pure fn rposition_between<T>(v: &[T], start: uint, end: uint,\n  * Convert a vector of pairs into a pair of vectors, by reference. As unzip().\n  */\n pure fn unzip_slice<T: Copy, U: Copy>(v: &[(T, U)]) -> (~[T], ~[U]) {\n-    let mut as = ~[], bs = ~[];\n+    let mut as_ = ~[], bs = ~[];\n     for each(v) |p| {\n         let (a, b) = p;\n         unchecked {\n-            vec::push(as, a);\n+            vec::push(as_, a);\n             vec::push(bs, b);\n         }\n     }\n-    return (as, bs);\n+    return (as_, bs);\n }\n \n /**"}, {"sha": "09b53d2fccfa61efa7a8723e4206ae25c3e3fbc3", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f53c2948aa6bd0ffc47527e977cb278d48467a75/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53c2948aa6bd0ffc47527e977cb278d48467a75/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=f53c2948aa6bd0ffc47527e977cb278d48467a75", "patch": "@@ -116,17 +116,17 @@ fn type_uses_for(ccx: @crate_ctxt, fn_id: def_id, n_tps: uint)\n     uses\n }\n \n-fn type_needs(cx: ctx, use: uint, ty: ty::t) {\n+fn type_needs(cx: ctx, use_: uint, ty: ty::t) {\n     // Optimization -- don't descend type if all params already have this use\n     for vec::each_mut(cx.uses) |u| {\n-        if *u & use != use {\n-            type_needs_inner(cx, use, ty, @Nil);\n+        if *u & use_ != use_ {\n+            type_needs_inner(cx, use_, ty, @Nil);\n             return;\n         }\n     }\n }\n \n-fn type_needs_inner(cx: ctx, use: uint, ty: ty::t,\n+fn type_needs_inner(cx: ctx, use_: uint, ty: ty::t,\n                     enums_seen: @List<def_id>) {\n     do ty::maybe_walk_ty(ty) |ty| {\n         if ty::type_has_params(ty) {\n@@ -145,14 +145,14 @@ fn type_needs_inner(cx: ctx, use: uint, ty: ty::t,\n                     for vec::each(*ty::enum_variants(cx.ccx.tcx, did)) |v| {\n                         for vec::each(v.args) |aty| {\n                             let t = ty::subst(cx.ccx.tcx, &substs, aty);\n-                            type_needs_inner(cx, use, t, seen);\n+                            type_needs_inner(cx, use_, t, seen);\n                         }\n                     }\n                 }\n                 false\n               }\n               ty::ty_param(p) => {\n-                cx.uses[p.idx] |= use;\n+                cx.uses[p.idx] |= use_;\n                 false\n               }\n               _ => true\n@@ -161,8 +161,8 @@ fn type_needs_inner(cx: ctx, use: uint, ty: ty::t,\n     }\n }\n \n-fn node_type_needs(cx: ctx, use: uint, id: node_id) {\n-    type_needs(cx, use, ty::node_id_to_type(cx.ccx.tcx, id));\n+fn node_type_needs(cx: ctx, use_: uint, id: node_id) {\n+    type_needs(cx, use_, ty::node_id_to_type(cx.ccx.tcx, id));\n }\n \n fn mark_for_expr(cx: ctx, e: @expr) {"}, {"sha": "7cc9f26b1fdbd471f40f4ffdcff6ccb7c8ed2b8f", "filename": "src/rustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f53c2948aa6bd0ffc47527e977cb278d48467a75/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53c2948aa6bd0ffc47527e977cb278d48467a75/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=f53c2948aa6bd0ffc47527e977cb278d48467a75", "patch": "@@ -59,9 +59,9 @@ trait combine {\n     fn mts(a: ty::mt, b: ty::mt) -> cres<ty::mt>;\n     fn contratys(a: ty::t, b: ty::t) -> cres<ty::t>;\n     fn tys(a: ty::t, b: ty::t) -> cres<ty::t>;\n-    fn tps(as: &[ty::t], bs: &[ty::t]) -> cres<~[ty::t]>;\n+    fn tps(as_: &[ty::t], bs: &[ty::t]) -> cres<~[ty::t]>;\n     fn self_tys(a: Option<ty::t>, b: Option<ty::t>) -> cres<Option<ty::t>>;\n-    fn substs(did: ast::def_id, as: &ty::substs,\n+    fn substs(did: ast::def_id, as_: &ty::substs,\n               bs: &ty::substs) -> cres<ty::substs>;\n     fn fns(a: &ty::FnTy, b: &ty::FnTy) -> cres<ty::FnTy>;\n     fn fn_sigs(a: &ty::FnSig, b: &ty::FnSig) -> cres<ty::FnSig>;\n@@ -212,20 +212,20 @@ fn super_substs<C:combine>(\n }\n \n fn super_tps<C:combine>(\n-    self: &C, as: &[ty::t], bs: &[ty::t]) -> cres<~[ty::t]> {\n+    self: &C, as_: &[ty::t], bs: &[ty::t]) -> cres<~[ty::t]> {\n \n     // Note: type parameters are always treated as *invariant*\n     // (otherwise the type system would be unsound).  In the\n     // future we could allow type parameters to declare a\n     // variance.\n \n-    if vec::same_length(as, bs) {\n-        iter_vec2(as, bs, |a, b| {\n+    if vec::same_length(as_, bs) {\n+        iter_vec2(as_, bs, |a, b| {\n             eq_tys(self, a, b)\n-        }).then(|| Ok(as.to_vec()) )\n+        }).then(|| Ok(as_.to_vec()) )\n     } else {\n         Err(ty::terr_ty_param_size(\n-            expected_found(self, as.len(), bs.len())))\n+            expected_found(self, as_.len(), bs.len())))\n     }\n }\n \n@@ -383,9 +383,9 @@ fn super_tys<C:combine>(\n       (ty::ty_int(_), _) |\n       (ty::ty_uint(_), _) |\n       (ty::ty_float(_), _) => {\n-        let as = ty::get(a).struct;\n+        let as_ = ty::get(a).struct;\n         let bs = ty::get(b).struct;\n-        if as == bs {\n+        if as_ == bs {\n             Ok(a)\n         } else {\n             Err(ty::terr_sorts(expected_found(self, a, b)))\n@@ -471,23 +471,23 @@ fn super_tys<C:combine>(\n         }\n       }\n \n-      (ty::ty_rec(as), ty::ty_rec(bs)) => {\n-        if vec::same_length(as, bs) {\n-            map_vec2(as, bs, |a,b| {\n+      (ty::ty_rec(as_), ty::ty_rec(bs)) => {\n+        if vec::same_length(as_, bs) {\n+            map_vec2(as_, bs, |a,b| {\n                 self.flds(a, b)\n             }).chain(|flds| Ok(ty::mk_rec(tcx, flds)) )\n         } else {\n-            Err(ty::terr_record_size(expected_found(self, as.len(),\n+            Err(ty::terr_record_size(expected_found(self, as_.len(),\n                                                     bs.len())))\n         }\n       }\n \n-      (ty::ty_tup(as), ty::ty_tup(bs)) => {\n-        if vec::same_length(as, bs) {\n-            map_vec2(as, bs, |a, b| self.tys(a, b) )\n+      (ty::ty_tup(as_), ty::ty_tup(bs)) => {\n+        if vec::same_length(as_, bs) {\n+            map_vec2(as_, bs, |a, b| self.tys(a, b) )\n                 .chain(|ts| Ok(ty::mk_tup(tcx, ts)) )\n         } else {\n-            Err(ty::terr_tuple_size(expected_found(self, as.len(), bs.len())))\n+            Err(ty::terr_tuple_size(expected_found(self, as_.len(), bs.len())))\n         }\n       }\n "}, {"sha": "a8676a63b8895772d5b5b69323188432434fff2e", "filename": "src/rustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f53c2948aa6bd0ffc47527e977cb278d48467a75/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53c2948aa6bd0ffc47527e977cb278d48467a75/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=f53c2948aa6bd0ffc47527e977cb278d48467a75", "patch": "@@ -160,13 +160,13 @@ impl Glb: combine {\n     }\n \n     fn substs(did: ast::def_id,\n-              as: &ty::substs,\n+              as_: &ty::substs,\n               bs: &ty::substs) -> cres<ty::substs> {\n-        super_substs(&self, did, as, bs)\n+        super_substs(&self, did, as_, bs)\n     }\n \n-    fn tps(as: &[ty::t], bs: &[ty::t]) -> cres<~[ty::t]> {\n-        super_tps(&self, as, bs)\n+    fn tps(as_: &[ty::t], bs: &[ty::t]) -> cres<~[ty::t]> {\n+        super_tps(&self, as_, bs)\n     }\n \n     fn self_tys(a: Option<ty::t>, b: Option<ty::t>) -> cres<Option<ty::t>> {"}, {"sha": "093da5caec8724a5e97a8fc31227e40528941826", "filename": "src/rustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f53c2948aa6bd0ffc47527e977cb278d48467a75/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53c2948aa6bd0ffc47527e977cb278d48467a75/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=f53c2948aa6bd0ffc47527e977cb278d48467a75", "patch": "@@ -139,13 +139,13 @@ impl Lub: combine {\n     }\n \n     fn substs(did: ast::def_id,\n-              as: &ty::substs,\n+              as_: &ty::substs,\n               bs: &ty::substs) -> cres<ty::substs> {\n-        super_substs(&self, did, as, bs)\n+        super_substs(&self, did, as_, bs)\n     }\n \n-    fn tps(as: &[ty::t], bs: &[ty::t]) -> cres<~[ty::t]> {\n-        super_tps(&self, as, bs)\n+    fn tps(as_: &[ty::t], bs: &[ty::t]) -> cres<~[ty::t]> {\n+        super_tps(&self, as_, bs)\n     }\n \n     fn self_tys(a: Option<ty::t>, b: Option<ty::t>) -> cres<Option<ty::t>> {"}, {"sha": "1e16ad8b8d53780d632d60140a08f00547cf7eec", "filename": "src/rustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f53c2948aa6bd0ffc47527e977cb278d48467a75/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53c2948aa6bd0ffc47527e977cb278d48467a75/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=f53c2948aa6bd0ffc47527e977cb278d48467a75", "patch": "@@ -193,13 +193,13 @@ impl Sub: combine {\n     }\n \n     fn substs(did: ast::def_id,\n-              as: &ty::substs,\n+              as_: &ty::substs,\n               bs: &ty::substs) -> cres<ty::substs> {\n-        super_substs(&self, did, as, bs)\n+        super_substs(&self, did, as_, bs)\n     }\n \n-    fn tps(as: &[ty::t], bs: &[ty::t]) -> cres<~[ty::t]> {\n-        super_tps(&self, as, bs)\n+    fn tps(as_: &[ty::t], bs: &[ty::t]) -> cres<~[ty::t]> {\n+        super_tps(&self, as_, bs)\n     }\n \n     fn self_tys(a: Option<ty::t>, b: Option<ty::t>) -> cres<Option<ty::t>> {"}]}