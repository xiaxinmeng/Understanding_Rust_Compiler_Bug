{"sha": "bcbbb4d09b2f474614134730e84afad04d2d8e48", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjYmJiNGQwOWIyZjQ3NDYxNDEzNDczMGU4NGFmYWQwNGQyZDhlNDg=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-12-11T06:06:41Z"}, "committer": {"name": "Shotaro Yamada", "email": "yamada@ccs.ee.tut.ac.jp", "date": "2018-12-12T07:08:05Z"}, "message": "new_without_default, partialeq_ne_impl: Use span_lint_node\n\nFixes #2892, fixes #3199", "tree": {"sha": "77babc7965d071e31e86f374b31b8f5aa3d3d246", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77babc7965d071e31e86f374b31b8f5aa3d3d246"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcbbb4d09b2f474614134730e84afad04d2d8e48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcbbb4d09b2f474614134730e84afad04d2d8e48", "html_url": "https://github.com/rust-lang/rust/commit/bcbbb4d09b2f474614134730e84afad04d2d8e48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcbbb4d09b2f474614134730e84afad04d2d8e48/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2608fc27231d12a360915c9cb60de5219a22505", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2608fc27231d12a360915c9cb60de5219a22505", "html_url": "https://github.com/rust-lang/rust/commit/e2608fc27231d12a360915c9cb60de5219a22505"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "86c345b025ca16cfba9ed7944ca37f07f73dc7cc", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bcbbb4d09b2f474614134730e84afad04d2d8e48/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcbbb4d09b2f474614134730e84afad04d2d8e48/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=bcbbb4d09b2f474614134730e84afad04d2d8e48", "patch": "@@ -17,7 +17,7 @@ use crate::rustc_errors::Applicability;\n use crate::syntax::source_map::Span;\n use crate::utils::paths;\n use crate::utils::sugg::DiagnosticBuilderExt;\n-use crate::utils::{get_trait_def_id, implements_trait, return_ty, same_tys, span_lint_and_then};\n+use crate::utils::{get_trait_def_id, implements_trait, return_ty, same_tys, span_lint_node_and_then};\n use if_chain::if_chain;\n \n /// **What it does:** Checks for types with a `fn new() -> Self` method and no\n@@ -165,9 +165,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                                     }\n \n                                     if let Some(sp) = can_derive_default(self_ty, cx, default_trait_id) {\n-                                        span_lint_and_then(\n+                                        span_lint_node_and_then(\n                                             cx,\n                                             NEW_WITHOUT_DEFAULT_DERIVE,\n+                                            id,\n                                             impl_item.span,\n                                             &format!(\n                                                 \"you should consider deriving a `Default` implementation for `{}`\",\n@@ -183,9 +184,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                                                 );\n                                             });\n                                     } else {\n-                                        span_lint_and_then(\n+                                        span_lint_node_and_then(\n                                             cx,\n                                             NEW_WITHOUT_DEFAULT,\n+                                            id,\n                                             impl_item.span,\n                                             &format!(\n                                                 \"you should consider adding a `Default` implementation for `{}`\","}, {"sha": "02935cf773d271d5346f60a5b0228e0912c92721", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bcbbb4d09b2f474614134730e84afad04d2d8e48/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcbbb4d09b2f474614134730e84afad04d2d8e48/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=bcbbb4d09b2f474614134730e84afad04d2d8e48", "patch": "@@ -10,7 +10,7 @@\n use crate::rustc::hir::*;\n use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n-use crate::utils::{is_automatically_derived, span_lint};\n+use crate::utils::{is_automatically_derived, span_lint_node};\n use if_chain::if_chain;\n \n /// **What it does:** Checks for manual re-implementations of `PartialEq::ne`.\n@@ -56,10 +56,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             then {\n                 for impl_item in impl_items {\n                     if impl_item.ident.name == \"ne\" {\n-                        span_lint(cx,\n-                                  PARTIALEQ_NE_IMPL,\n-                                  impl_item.span,\n-                                  \"re-implementing `PartialEq::ne` is unnecessary\")\n+                        span_lint_node(\n+                            cx,\n+                            PARTIALEQ_NE_IMPL,\n+                            impl_item.id.node_id,\n+                            impl_item.span,\n+                            \"re-implementing `PartialEq::ne` is unnecessary\",\n+                        );\n                     }\n                 }\n             }"}, {"sha": "2e715a6f8ba8631c03f7f5b09ea45224e814dfbd", "filename": "tests/ui/new_without_default.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bcbbb4d09b2f474614134730e84afad04d2d8e48/tests%2Fui%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcbbb4d09b2f474614134730e84afad04d2d8e48/tests%2Fui%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.rs?ref=bcbbb4d09b2f474614134730e84afad04d2d8e48", "patch": "@@ -139,4 +139,18 @@ impl<'a, T: 'a> OptionRefWrapper<'a, T> {\n     }\n }\n \n+pub struct Allow(Foo);\n+\n+impl Allow {\n+    #[allow(clippy::new_without_default)]\n+    pub fn new() -> Self { unimplemented!() }\n+}\n+\n+pub struct AllowDerive;\n+\n+impl AllowDerive {\n+    #[allow(clippy::new_without_default_derive)]\n+    pub fn new() -> Self { unimplemented!() }\n+}\n+\n fn main() {}"}, {"sha": "fabeee24b305e083716a297458fec3e5155f87d1", "filename": "tests/ui/partialeq_ne_impl.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bcbbb4d09b2f474614134730e84afad04d2d8e48/tests%2Fui%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcbbb4d09b2f474614134730e84afad04d2d8e48/tests%2Fui%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpartialeq_ne_impl.rs?ref=bcbbb4d09b2f474614134730e84afad04d2d8e48", "patch": "@@ -20,4 +20,12 @@ impl PartialEq for Foo {\n     }\n }\n \n+struct Bar;\n+\n+impl PartialEq for Bar {\n+    fn eq(&self, _: &Bar) -> bool { true }\n+    #[allow(clippy::partialeq_ne_impl)]\n+    fn ne(&self, _: &Bar) -> bool { false }\n+}\n+\n fn main() {}"}]}