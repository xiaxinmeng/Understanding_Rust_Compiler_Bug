{"sha": "d9051341a1c142542a3f7dab509266606c775382", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MDUxMzQxYTFjMTQyNTQyYTNmN2RhYjUwOTI2NjYwNmM3NzUzODI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-01T04:42:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-01T04:42:21Z"}, "message": "Auto merge of #68943 - ecstatic-morse:no-useless-drop-on-enum-variants, r=matthewjasper\n\nSkip `Drop` terminators for enum variants without drop glue\n\nSplit out from #68528.\n\nWhen doing drop elaboration for an `enum` that may or may not be moved out of (an open drop), we check the discriminant of the `enum` to see whether the live variant has any drop flags and then check the drop flags to see whether we need to drop each field. Sometimes, however, the live\nvariant has no move paths and thus no drop flags. In this case, we still emit a drop terminator\nfor the entire enum after checking the enum discriminant. This drop shim will check the discriminant of the enum *again* and then drop the fields of the active variant. If the active variant has no drop glue, nothing will be done.\n\nThis commit skips emitting the drop terminator during drop elaboration when the \"otherwise\" variants, those without move paths, have no drop glue. A common example of this scenario is when an `Option` is moved from, since `Option::None` never needs drop glue. Below is a fragment the pre-codegen CFG for `Option::unwrap_or` in which we check the drop flag (`_5`) for `self` (`_1`), before and after the change.\n\nBefore:\n\n![image](https://user-images.githubusercontent.com/29463364/74078927-52942380-49e5-11ea-8e34-4b9d6d94ef25.png)\n\nAfter:\n\n![image](https://user-images.githubusercontent.com/29463364/74078945-78b9c380-49e5-11ea-8302-b043c4a7515a.png)\n\nThis change doesn't do much on its own, but it is a prerequisite to get the perf gains from #68528.\n\ncc @arielb1", "tree": {"sha": "50160e1bc8b40e2a1c89cdd68be101e1140fa242", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50160e1bc8b40e2a1c89cdd68be101e1140fa242"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9051341a1c142542a3f7dab509266606c775382", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9051341a1c142542a3f7dab509266606c775382", "html_url": "https://github.com/rust-lang/rust/commit/d9051341a1c142542a3f7dab509266606c775382", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9051341a1c142542a3f7dab509266606c775382/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2917d993023dec5111147a1552ec78b206a5a37e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2917d993023dec5111147a1552ec78b206a5a37e", "html_url": "https://github.com/rust-lang/rust/commit/2917d993023dec5111147a1552ec78b206a5a37e"}, {"sha": "b23d910d570b392b1740ef1bb888f04194fe82c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b23d910d570b392b1740ef1bb888f04194fe82c1", "html_url": "https://github.com/rust-lang/rust/commit/b23d910d570b392b1740ef1bb888f04194fe82c1"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "f7239ae55faa2494bda8deb268afbe5849a30bbd", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d9051341a1c142542a3f7dab509266606c775382/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9051341a1c142542a3f7dab509266606c775382/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=d9051341a1c142542a3f7dab509266606c775382", "patch": "@@ -153,9 +153,9 @@ where\n     // FIXME: I think we should just control the flags externally,\n     // and then we do not need this machinery.\n     pub fn elaborate_drop(&mut self, bb: BasicBlock) {\n-        debug!(\"elaborate_drop({:?})\", self);\n+        debug!(\"elaborate_drop({:?}, {:?})\", bb, self);\n         let style = self.elaborator.drop_style(self.path, DropFlagMode::Deep);\n-        debug!(\"elaborate_drop({:?}): live - {:?}\", self, style);\n+        debug!(\"elaborate_drop({:?}, {:?}): live - {:?}\", bb, self, style);\n         match style {\n             DropStyle::Dead => {\n                 self.elaborator\n@@ -426,25 +426,21 @@ where\n         let mut unwind_blocks =\n             if unwind.is_cleanup() { None } else { Some(Vec::with_capacity(adt.variants.len())) };\n \n+        let mut have_otherwise_with_drop_glue = false;\n         let mut have_otherwise = false;\n         let tcx = self.tcx();\n \n         for (variant_index, discr) in adt.discriminants(tcx) {\n+            let variant = &adt.variants[variant_index];\n             let subpath = self.elaborator.downcast_subpath(self.path, variant_index);\n+\n             if let Some(variant_path) = subpath {\n                 let base_place = tcx.mk_place_elem(\n                     self.place.clone(),\n-                    ProjectionElem::Downcast(\n-                        Some(adt.variants[variant_index].ident.name),\n-                        variant_index,\n-                    ),\n-                );\n-                let fields = self.move_paths_for_fields(\n-                    &base_place,\n-                    variant_path,\n-                    &adt.variants[variant_index],\n-                    substs,\n+                    ProjectionElem::Downcast(Some(variant.ident.name), variant_index),\n                 );\n+                let fields =\n+                    self.move_paths_for_fields(&base_place, variant_path, &variant, substs);\n                 values.push(discr.val);\n                 if let Unwind::To(unwind) = unwind {\n                     // We can't use the half-ladder from the original\n@@ -474,16 +470,30 @@ where\n                 normal_blocks.push(normal);\n             } else {\n                 have_otherwise = true;\n+\n+                let param_env = self.elaborator.param_env();\n+                let have_field_with_drop_glue = variant\n+                    .fields\n+                    .iter()\n+                    .any(|field| field.ty(tcx, substs).needs_drop(tcx, param_env));\n+                if have_field_with_drop_glue {\n+                    have_otherwise_with_drop_glue = true;\n+                }\n             }\n         }\n \n-        if have_otherwise {\n+        if !have_otherwise {\n+            values.pop();\n+        } else if !have_otherwise_with_drop_glue {\n+            normal_blocks.push(self.goto_block(succ, unwind));\n+            if let Unwind::To(unwind) = unwind {\n+                unwind_blocks.as_mut().unwrap().push(self.goto_block(unwind, Unwind::InCleanup));\n+            }\n+        } else {\n             normal_blocks.push(self.drop_block(succ, unwind));\n             if let Unwind::To(unwind) = unwind {\n                 unwind_blocks.as_mut().unwrap().push(self.drop_block(unwind, Unwind::InCleanup));\n             }\n-        } else {\n-            values.pop();\n         }\n \n         (\n@@ -929,6 +939,11 @@ where\n         self.new_block(unwind, block)\n     }\n \n+    fn goto_block(&mut self, target: BasicBlock, unwind: Unwind) -> BasicBlock {\n+        let block = TerminatorKind::Goto { target };\n+        self.new_block(unwind, block)\n+    }\n+\n     fn drop_flag_test_block(\n         &mut self,\n         on_set: BasicBlock,"}]}