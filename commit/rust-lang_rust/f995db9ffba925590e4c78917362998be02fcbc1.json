{"sha": "f995db9ffba925590e4c78917362998be02fcbc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5OTVkYjlmZmJhOTI1NTkwZTRjNzg5MTczNjI5OThiZTAyZmNiYzE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-03T14:51:51Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-03T14:51:51Z"}, "message": "store the current block in the frame", "tree": {"sha": "a8c56ecad75e498b0b9b0bac6b795dedd75fad0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8c56ecad75e498b0b9b0bac6b795dedd75fad0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f995db9ffba925590e4c78917362998be02fcbc1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXUZmHAAoJEFbW7qD8Z6xGRgcQAKsduKCmKoJuS2bnwJFIc43d\nWFNRzz5FNXM1GUHKwk3HyzSQIYKl8rQMxZetoc4pY+e3bREE/nZrsnIBqAhlE18N\ntphQoPF3I2/kd1+4P8/K0xA/xiMmUVfTgjw78Pu8qLouRWdlDjptYZvHM2kyanTa\nSJJ/QtUNTNdoNPtjqEJqDFr8vBMC7vQVqM/n6w9CK0uZADEI5mUM+OpEY5UDh5Y2\n7jFNkM5gPN3H7Tpaj+JbFSk6CtxoaWQxa7KN8BDoEnv3Mt0jEWcqGJZTFKNcOm91\n8ddkfSbcwrYtiKIPsamkATt+mlkZ7EMSMGi+1FDyYqmAoBbDShDrVmrDXrpxAPWd\nNrmbarzfG2L1utEZFmEvIgzmgMOuI69V6BP9/wCXkL8ZL+6HY7aqelXXwfDDgXWz\nyVXgL30R0Vb33AVAUIi4Y3BOcEMm2URkeg/A/lMTPDGOV+HXgLKMXBFXI5Euk5FZ\nqTadgKfcI4ANGv8qeKDPYf/V5Ia6QEOj/Oo/VP8MpVerPG+vu/aQYeivssMWTbsF\nKYRL8ufC0huokEUuNC2yPD7ytTEVX2Tiqfnzq8NdS04zI6GngHVF26InQ8aiSXTL\n9Ssg+yYl+tp50ps/TtXhucjdBebrgwm1t5/T1h34YWNe9iICHjFC/EWjIPDk7sky\n+eKSh1UokGlR9tdP9TWC\n=oYPq\n-----END PGP SIGNATURE-----", "payload": "tree a8c56ecad75e498b0b9b0bac6b795dedd75fad0c\nparent cc1ca73f5736a4aaa7a1ae164788051b8366fa3d\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1464965511 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1464965511 +0200\n\nstore the current block in the frame"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f995db9ffba925590e4c78917362998be02fcbc1", "html_url": "https://github.com/rust-lang/rust/commit/f995db9ffba925590e4c78917362998be02fcbc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f995db9ffba925590e4c78917362998be02fcbc1/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc1ca73f5736a4aaa7a1ae164788051b8366fa3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc1ca73f5736a4aaa7a1ae164788051b8366fa3d", "html_url": "https://github.com/rust-lang/rust/commit/cc1ca73f5736a4aaa7a1ae164788051b8366fa3d"}], "stats": {"total": 64, "additions": 34, "deletions": 30}, "files": [{"sha": "f20a958cd0e76ca80386b81c6ce40f6e2656bcbf", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f995db9ffba925590e4c78917362998be02fcbc1/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f995db9ffba925590e4c78917362998be02fcbc1/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=f995db9ffba925590e4c78917362998be02fcbc1", "patch": "@@ -118,8 +118,8 @@ enum CachedMir<'mir, 'tcx: 'mir> {\n \n /// Represents the action to be taken in the main loop as a result of executing a terminator.\n enum TerminatorTarget {\n-    /// Make a local jump to the given block.\n-    Block(mir::BasicBlock),\n+    /// Make a local jump to the next block\n+    Block,\n \n     /// Start executing from the new current frame. (For function calls.)\n     Call,\n@@ -268,12 +268,16 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n         let target = match terminator.kind {\n             Return => TerminatorTarget::Return,\n \n-            Goto { target } => TerminatorTarget::Block(target),\n+            Goto { target } => {\n+                self.frame_mut().next_block = target;\n+                TerminatorTarget::Block\n+            },\n \n             If { ref cond, targets: (then_target, else_target) } => {\n                 let cond_ptr = self.eval_operand(cond)?;\n                 let cond_val = self.memory.read_bool(cond_ptr)?;\n-                TerminatorTarget::Block(if cond_val { then_target } else { else_target })\n+                self.frame_mut().next_block = if cond_val { then_target } else { else_target };\n+                TerminatorTarget::Block\n             }\n \n             SwitchInt { ref discr, ref values, ref targets, .. } => {\n@@ -296,7 +300,8 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n                     }\n                 }\n \n-                TerminatorTarget::Block(target_block)\n+                self.frame_mut().next_block = target_block;\n+                TerminatorTarget::Block\n             }\n \n             Switch { ref discr, ref targets, adt_def } => {\n@@ -307,7 +312,10 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n                     .position(|v| discr_val == v.disr_val.to_u64_unchecked());\n \n                 match matching {\n-                    Some(i) => TerminatorTarget::Block(targets[i]),\n+                    Some(i) => {\n+                        self.frame_mut().next_block = targets[i];\n+                        TerminatorTarget::Block\n+                    },\n                     None => return Err(EvalError::InvalidDiscriminant),\n                 }\n             }\n@@ -408,7 +416,8 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n                 let ptr = self.eval_lvalue(value)?.to_ptr();\n                 let ty = self.lvalue_ty(value);\n                 self.drop(ptr, ty)?;\n-                TerminatorTarget::Block(target)\n+                self.frame_mut().next_block = target;\n+                TerminatorTarget::Block\n             }\n \n             Resume => unimplemented!(),\n@@ -1238,6 +1247,11 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n         self.stack.last().expect(\"no call frames exist\")\n     }\n \n+    fn basic_block(&self) -> &mir::BasicBlockData<'tcx> {\n+        let frame = self.frame();\n+        frame.mir.basic_block_data(frame.next_block)\n+    }\n+\n     fn frame_mut(&mut self) -> &mut Frame<'mir, 'tcx> {\n         self.stack.last_mut().expect(\"no call frames exist\")\n     }"}, {"sha": "4a0dedf8a0f9e7c66dec9ce6631251806e73d29a", "filename": "src/interpreter/stepper.rs", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f995db9ffba925590e4c78917362998be02fcbc1/src%2Finterpreter%2Fstepper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f995db9ffba925590e4c78917362998be02fcbc1/src%2Finterpreter%2Fstepper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fstepper.rs?ref=f995db9ffba925590e4c78917362998be02fcbc1", "patch": "@@ -22,7 +22,6 @@ pub enum Event {\n \n pub struct Stepper<'fncx, 'a: 'fncx, 'b: 'a + 'mir, 'mir: 'fncx, 'tcx: 'b>{\n     fncx: &'fncx mut FnEvalContext<'a, 'b, 'mir, 'tcx>,\n-    block: mir::BasicBlock,\n     // a stack of statement positions\n     stmt: Vec<usize>,\n     mir: CachedMir<'mir, 'tcx>,\n@@ -34,7 +33,6 @@ pub struct Stepper<'fncx, 'a: 'fncx, 'b: 'a + 'mir, 'mir: 'fncx, 'tcx: 'b>{\n impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx> {\n     pub(super) fn new(fncx: &'fncx mut FnEvalContext<'a, 'b, 'mir, 'tcx>) -> Self {\n         Stepper {\n-            block: fncx.frame().next_block,\n             mir: fncx.mir(),\n             fncx: fncx,\n             stmt: vec![0],\n@@ -46,7 +44,7 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n     fn dummy(&mut self) -> EvalResult<()> { Ok(()) }\n \n     fn statement(&mut self) -> EvalResult<()> {\n-        let block_data = self.mir.basic_block_data(self.block);\n+        let block_data = self.mir.basic_block_data(self.fncx.frame().next_block);\n         let stmt = &block_data.statements[*self.stmt.last().unwrap()];\n         let mir::StatementKind::Assign(ref lvalue, ref rvalue) = stmt.kind;\n         let result = self.fncx.eval_assignment(lvalue, rvalue);\n@@ -58,27 +56,23 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n     fn terminator(&mut self) -> EvalResult<()> {\n         *self.stmt.last_mut().unwrap() = 0;\n         let term = {\n-            let block_data = self.mir.basic_block_data(self.block);\n+            let block_data = self.mir.basic_block_data(self.fncx.frame().next_block);\n             let terminator = block_data.terminator();\n             let result = self.fncx.eval_terminator(terminator);\n             self.fncx.maybe_report(terminator.span, result)?\n         };\n         match term {\n-            TerminatorTarget::Block(block) => {\n-                self.block = block;\n-            },\n+            TerminatorTarget::Block => {},\n             TerminatorTarget::Return => {\n                 self.fncx.pop_stack_frame();\n                 self.stmt.pop();\n                 assert!(self.constants.last().unwrap().is_empty());\n                 self.constants.pop();\n                 if !self.fncx.stack.is_empty() {\n-                    self.block = self.fncx.frame().next_block;\n                     self.mir = self.fncx.mir();\n                 }\n             },\n             TerminatorTarget::Call => {\n-                self.block = self.fncx.frame().next_block;\n                 self.mir = self.fncx.mir();\n                 self.stmt.push(0);\n                 self.constants.push(Vec::new());\n@@ -97,7 +91,6 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n                 self.fncx.push_stack_frame(def_id, span, mir, substs, Some(return_ptr));\n                 self.stmt.push(0);\n                 self.constants.push(Vec::new());\n-                self.block = self.fncx.frame().next_block;\n                 self.mir = self.fncx.mir();\n             },\n             Some((ConstantId::Static { def_id, substs }, span, return_ptr, mir)) => {\n@@ -106,7 +99,6 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n                 self.fncx.push_stack_frame(def_id, span, mir, substs, Some(return_ptr));\n                 self.stmt.push(0);\n                 self.constants.push(Vec::new());\n-                self.block = self.fncx.frame().next_block;\n                 self.mir = self.fncx.mir();\n             },\n             None => unreachable!(),\n@@ -128,7 +120,8 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n             return Ok(Event::Constant);\n         }\n \n-        let basic_block = self.mir.basic_block_data(self.block);\n+        let block = self.fncx.frame().next_block;\n+        let basic_block = self.mir.basic_block_data(block);\n \n         if let Some(ref stmt) = basic_block.statements.get(*self.stmt.last().unwrap()) {\n             assert!(self.constants.last().unwrap().is_empty());\n@@ -137,7 +130,7 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n                 span: stmt.span,\n                 fncx: self.fncx,\n                 mir: &self.mir,\n-            }.visit_statement(self.block, stmt);\n+            }.visit_statement(block, stmt);\n             if self.constants.last().unwrap().is_empty() {\n                 self.process = Self::statement;\n                 return Ok(Event::Assignment);\n@@ -153,7 +146,7 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n             span: terminator.span,\n             fncx: self.fncx,\n             mir: &self.mir,\n-        }.visit_terminator(self.block, terminator);\n+        }.visit_terminator(block, terminator);\n         if self.constants.last().unwrap().is_empty() {\n             self.process = Self::terminator;\n             Ok(Event::Terminator)\n@@ -163,21 +156,18 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n         }\n     }\n \n-    /// returns the basic block index of the currently processed block\n-    pub fn block(&self) -> mir::BasicBlock {\n-        self.block\n-    }\n-\n     /// returns the statement that will be processed next\n     pub fn stmt(&self) -> &mir::Statement {\n-        let block_data = self.mir.basic_block_data(self.block);\n-        &block_data.statements[*self.stmt.last().unwrap()]\n+        &self.fncx.basic_block().statements[*self.stmt.last().unwrap()]\n     }\n \n     /// returns the terminator of the current block\n     pub fn term(&self) -> &mir::Terminator {\n-        let block_data = self.mir.basic_block_data(self.block);\n-        block_data.terminator()\n+        self.fncx.basic_block().terminator()\n+    }\n+\n+    pub fn block(&self) -> mir::BasicBlock {\n+        self.fncx.frame().next_block\n     }\n }\n "}]}