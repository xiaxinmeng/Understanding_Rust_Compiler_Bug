{"sha": "438765da59075339c99499e201384e835187f0ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzODc2NWRhNTkwNzUzMzljOTk0OTllMjAxMzg0ZTgzNTE4N2YwYWU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-08T00:46:07Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-08T00:46:51Z"}, "message": "rustc: Box struct_defs", "tree": {"sha": "3107aebd6046fe5cb2e50cd7fa38734f6b068fd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3107aebd6046fe5cb2e50cd7fa38734f6b068fd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/438765da59075339c99499e201384e835187f0ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/438765da59075339c99499e201384e835187f0ae", "html_url": "https://github.com/rust-lang/rust/commit/438765da59075339c99499e201384e835187f0ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/438765da59075339c99499e201384e835187f0ae/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "175be53e3f62664e445a57c2ad9e23f4bcb296b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/175be53e3f62664e445a57c2ad9e23f4bcb296b2", "html_url": "https://github.com/rust-lang/rust/commit/175be53e3f62664e445a57c2ad9e23f4bcb296b2"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "4a9cefe7d1bab9db09ce0f9b5d469bf04ce5edd6", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/438765da59075339c99499e201384e835187f0ae/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438765da59075339c99499e201384e835187f0ae/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=438765da59075339c99499e201384e835187f0ae", "patch": "@@ -736,7 +736,7 @@ enum item_ {\n     item_foreign_mod(foreign_mod),\n     item_ty(@ty, ~[ty_param]),\n     item_enum(~[variant], ~[ty_param]),\n-    item_class(struct_def, ~[ty_param]),\n+    item_class(@struct_def, ~[ty_param]),\n     item_trait(~[ty_param], ~[@trait_ref], ~[trait_method]),\n     item_impl(~[ty_param],\n               ~[@trait_ref], /* traits this impl implements */"}, {"sha": "27ecbdb4fb6b931da7579d0cb5a024c7891dc7b1", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/438765da59075339c99499e201384e835187f0ae/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438765da59075339c99499e201384e835187f0ae/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=438765da59075339c99499e201384e835187f0ae", "patch": "@@ -247,7 +247,7 @@ fn map_item(i: @item, cx: ctx, v: vt) {\n     vec::pop(cx.path);\n }\n \n-fn map_struct_def(struct_def: ast::struct_def, parent_node: ast_node,\n+fn map_struct_def(struct_def: @ast::struct_def, parent_node: ast_node,\n                   ident: ast::ident, id: ast::node_id, cx: ctx, _v: vt) {\n     let (_, ms) = ast_util::split_class_items(struct_def.members);\n     // Map trait refs to their parent classes. This is"}, {"sha": "55c7389fed6f5ea05465b70d10a21c451d8444d9", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/438765da59075339c99499e201384e835187f0ae/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438765da59075339c99499e201384e835187f0ae/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=438765da59075339c99499e201384e835187f0ae", "patch": "@@ -565,7 +565,7 @@ fn id_visitor(vfn: fn@(node_id)) -> visit::vt<()> {\n         visit_trait_method: fn@(_ty_m: trait_method) {\n         },\n \n-        visit_struct_def: fn@(_sd: struct_def, _id: ident, _tps: ~[ty_param],\n+        visit_struct_def: fn@(_sd: @struct_def, _id: ident, _tps: ~[ty_param],\n                               _id: node_id) {\n         },\n "}, {"sha": "36c80cb3d5f6cf88418dcc540de59000a5565eb0", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/438765da59075339c99499e201384e835187f0ae/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438765da59075339c99499e201384e835187f0ae/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=438765da59075339c99499e201384e835187f0ae", "patch": "@@ -266,7 +266,7 @@ fn noop_fold_item_underscore(i: item_, fld: ast_fold) -> item_ {\n                 {node: {body: dtor_body,\n                         id: dtor_id with dtor.node}\n                     with dtor}};\n-              item_class({\n+              item_class(@{\n                   traits: vec::map(struct_def.traits,\n                                    |p| fold_trait_ref(p, fld)),\n                   members: vec::map(struct_def.members,"}, {"sha": "46ed906900c60bfcb5d1b4eec2526d8f1a3d9107", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/438765da59075339c99499e201384e835187f0ae/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438765da59075339c99499e201384e835187f0ae/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=438765da59075339c99499e201384e835187f0ae", "patch": "@@ -2598,7 +2598,7 @@ class parser {\n         match the_ctor {\n           some((ct_d, ct_attrs, ct_b, ct_s)) => {\n             (class_name,\n-             item_class({\n+             item_class(@{\n                 traits: traits,\n                 members: ms,\n                 ctor: some({\n@@ -2614,7 +2614,7 @@ class parser {\n           }\n           none => {\n             (class_name,\n-             item_class({\n+             item_class(@{\n                     traits: traits,\n                     members: ms,\n                     ctor: none,"}, {"sha": "d9c85b8c72b87df964366e10df4854f3d4b132fe", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/438765da59075339c99499e201384e835187f0ae/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438765da59075339c99499e201384e835187f0ae/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=438765da59075339c99499e201384e835187f0ae", "patch": "@@ -582,7 +582,7 @@ fn print_item(s: ps, &&item: @ast::item) {\n     s.ann.post(ann_node);\n }\n \n-fn print_struct(s: ps, struct_def: ast::struct_def, tps: ~[ast::ty_param],\n+fn print_struct(s: ps, struct_def: @ast::struct_def, tps: ~[ast::ty_param],\n                 ident: ast::ident, span: ast::span) {\n     word_nbsp(s, *ident);\n     print_type_params(s, tps);"}, {"sha": "142656aa7c3044e1a310ef24e63860e5ba604d60", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/438765da59075339c99499e201384e835187f0ae/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438765da59075339c99499e201384e835187f0ae/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=438765da59075339c99499e201384e835187f0ae", "patch": "@@ -61,7 +61,7 @@ type visitor<E> =\n       visit_fn: fn@(fn_kind, fn_decl, blk, span, node_id, E, vt<E>),\n       visit_ty_method: fn@(ty_method, E, vt<E>),\n       visit_trait_method: fn@(trait_method, E, vt<E>),\n-      visit_struct_def: fn@(struct_def, ident, ~[ty_param], node_id, E,\n+      visit_struct_def: fn@(@struct_def, ident, ~[ty_param], node_id, E,\n                             vt<E>),\n       visit_class_item: fn@(@class_member, E, vt<E>)};\n \n@@ -83,8 +83,8 @@ fn default_visitor<E>() -> visitor<E> {\n           visit_fn: |a,b,c,d,e,f,g|visit_fn::<E>(a, b, c, d, e, f, g),\n           visit_ty_method: |a,b,c|visit_ty_method::<E>(a, b, c),\n           visit_trait_method: |a,b,c|visit_trait_method::<E>(a, b, c),\n-          visit_struct_def:\n-            |a,b,c,d,e,f|visit_struct_def::<E>(a, b, c, d, e, f),\n+          visit_struct_def: |a,b,c,d,e,f|visit_struct_def::<E>(a, b, c,\n+                                                               d, e, f),\n           visit_class_item: |a,b,c|visit_class_item::<E>(a, b, c)};\n }\n \n@@ -318,7 +318,7 @@ fn visit_trait_method<E>(m: trait_method, e: E, v: vt<E>) {\n     }\n }\n \n-fn visit_struct_def<E>(sd: struct_def, nm: ast::ident, tps: ~[ty_param],\n+fn visit_struct_def<E>(sd: @struct_def, nm: ast::ident, tps: ~[ty_param],\n                        id: node_id, e: E, v: vt<E>) {\n     for sd.members.each |m| {\n        v.visit_class_item(m, e, v);\n@@ -479,7 +479,7 @@ type simple_visitor =\n       visit_fn: fn@(fn_kind, fn_decl, blk, span, node_id),\n       visit_ty_method: fn@(ty_method),\n       visit_trait_method: fn@(trait_method),\n-      visit_struct_def: fn@(struct_def, ident, ~[ty_param], node_id),\n+      visit_struct_def: fn@(@struct_def, ident, ~[ty_param], node_id),\n       visit_class_item: fn@(@class_member)};\n \n fn simple_ignore_ty(_t: @ty) {}\n@@ -503,7 +503,7 @@ fn default_simple_visitor() -> simple_visitor {\n                         _id: node_id) { },\n           visit_ty_method: fn@(_m: ty_method) { },\n           visit_trait_method: fn@(_m: trait_method) { },\n-          visit_struct_def: fn@(_sd: struct_def, _nm: ident,\n+          visit_struct_def: fn@(_sd: @struct_def, _nm: ident,\n                                 _tps: ~[ty_param], _id: node_id) { },\n           visit_class_item: fn@(_c: @class_member) {}\n          };\n@@ -572,8 +572,8 @@ fn mk_simple_visitor(v: simple_visitor) -> vt<()> {\n         f(m);\n         visit_trait_method(m, e, v);\n     }\n-    fn v_struct_def(f: fn@(struct_def, ident, ~[ty_param], node_id),\n-                    sd: struct_def, nm: ident, tps: ~[ty_param], id: node_id,\n+    fn v_struct_def(f: fn@(@struct_def, ident, ~[ty_param], node_id),\n+                    sd: @struct_def, nm: ident, tps: ~[ty_param], id: node_id,\n                     &&e: (), v: vt<()>) {\n         f(sd, nm, tps, id);\n         visit_struct_def(sd, nm, tps, id, e, v);"}, {"sha": "a0e9c875f060b4d315b5c1fdbfa4fd2612312342", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/438765da59075339c99499e201384e835187f0ae/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438765da59075339c99499e201384e835187f0ae/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=438765da59075339c99499e201384e835187f0ae", "patch": "@@ -242,7 +242,7 @@ fn encode_module_item_paths(ebml_w: ebml::writer, ecx: @encode_ctxt,\n }\n \n fn encode_struct_def(ebml_w: ebml::writer,\n-                     struct_def: ast::struct_def,\n+                     struct_def: @ast::struct_def,\n                      path: ~[ast::ident],\n                      ident: ast::ident,\n                      &index: ~[entry<~str>]) {"}, {"sha": "c4ea48e3d41d89d99a71479264e1bdd5a71c79d3", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/438765da59075339c99499e201384e835187f0ae/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438765da59075339c99499e201384e835187f0ae/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=438765da59075339c99499e201384e835187f0ae", "patch": "@@ -4909,7 +4909,7 @@ fn trans_item(ccx: @crate_ctxt, item: ast::item) {\n     }\n }\n \n-fn trans_struct_def(ccx: @crate_ctxt, struct_def: ast::struct_def,\n+fn trans_struct_def(ccx: @crate_ctxt, struct_def: @ast::struct_def,\n                     tps: ~[ast::ty_param], path: @ast_map::path,\n                     ident: ast::ident, id: ast::node_id) {\n     if tps.len() == 0u {"}, {"sha": "aa33f355f22be2c5466bddd01a55493caff58cab", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/438765da59075339c99499e201384e835187f0ae/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438765da59075339c99499e201384e835187f0ae/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=438765da59075339c99499e201384e835187f0ae", "patch": "@@ -2742,7 +2742,7 @@ fn ty_dtor(cx: ctxt, class_id: def_id) -> option<def_id> {\n     if is_local(class_id) {\n        match cx.items.find(class_id.node) {\n            some(ast_map::node_item(@{\n-               node: ast::item_class({ dtor: some(dtor), _ }, _),\n+               node: ast::item_class(@{ dtor: some(dtor), _ }, _),\n                _\n            }, _)) =>\n                some(local_def(dtor.node.id)),"}, {"sha": "0c59559db762177bcfd53621e6d6cb68a9e811bc", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/438765da59075339c99499e201384e835187f0ae/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438765da59075339c99499e201384e835187f0ae/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=438765da59075339c99499e201384e835187f0ae", "patch": "@@ -400,7 +400,7 @@ fn check_no_duplicate_fields(tcx: ty::ctxt, fields:\n \n }\n \n-fn check_struct(ccx: @crate_ctxt, struct_def: ast::struct_def,\n+fn check_struct(ccx: @crate_ctxt, struct_def: @ast::struct_def,\n                 id: ast::node_id, span: span) {\n     let tcx = ccx.tcx;\n     let class_t = {self_ty: ty::node_id_to_type(tcx, id), node_id: id};"}, {"sha": "7c9035f3cdf0513170e680b2da2d7414e8830149", "filename": "src/rustc/middle/typeck/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/438765da59075339c99499e201384e835187f0ae/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438765da59075339c99499e201384e835187f0ae/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=438765da59075339c99499e201384e835187f0ae", "patch": "@@ -517,7 +517,7 @@ class CoherenceChecker {\n         }\n     }\n \n-    fn create_impl_from_struct(struct_def: ast::struct_def,\n+    fn create_impl_from_struct(struct_def: @ast::struct_def,\n                                ident: ast::ident,\n                                id: node_id)\n                             -> @Impl {"}, {"sha": "abbe5eb40ee5cf20ff7bd50295d17649f1a65697", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/438765da59075339c99499e201384e835187f0ae/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438765da59075339c99499e201384e835187f0ae/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=438765da59075339c99499e201384e835187f0ae", "patch": "@@ -445,7 +445,7 @@ fn convert(ccx: @crate_ctxt, it: @ast::item) {\n     }\n }\n \n-fn convert_struct(ccx: @crate_ctxt, rp: bool, struct_def: ast::struct_def,\n+fn convert_struct(ccx: @crate_ctxt, rp: bool, struct_def: @ast::struct_def,\n                   tps: ~[ast::ty_param], tpt: ty::ty_param_bounds_and_ty,\n                   id: ast::node_id) {\n     let tcx = ccx.tcx;"}]}