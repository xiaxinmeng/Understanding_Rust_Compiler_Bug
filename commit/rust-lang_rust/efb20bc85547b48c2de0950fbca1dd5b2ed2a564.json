{"sha": "efb20bc85547b48c2de0950fbca1dd5b2ed2a564", "node_id": "C_kwDOAAsO6NoAKGVmYjIwYmM4NTU0N2I0OGMyZGUwOTUwZmJjYTFkZDViMmVkMmE1NjQ", "commit": {"author": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-09-10T12:48:01Z"}, "committer": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-09-22T15:25:50Z"}, "message": "Point to previous applicability when declared multiple times", "tree": {"sha": "169ce5e0dd39a58644ed6e8cab72e86d595d6725", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/169ce5e0dd39a58644ed6e8cab72e86d595d6725"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efb20bc85547b48c2de0950fbca1dd5b2ed2a564", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efb20bc85547b48c2de0950fbca1dd5b2ed2a564", "html_url": "https://github.com/rust-lang/rust/commit/efb20bc85547b48c2de0950fbca1dd5b2ed2a564", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efb20bc85547b48c2de0950fbca1dd5b2ed2a564/comments", "author": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec85a1b2634edae81c77f5ea5d1d422215ecc457", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec85a1b2634edae81c77f5ea5d1d422215ecc457", "html_url": "https://github.com/rust-lang/rust/commit/ec85a1b2634edae81c77f5ea5d1d422215ecc457"}], "stats": {"total": 45, "additions": 19, "deletions": 26}, "files": [{"sha": "1e1bfbb943ecfb0cdf5970f3a95c335eb758aac0", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic_builder.rs", "status": "modified", "additions": 11, "deletions": 24, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/efb20bc85547b48c2de0950fbca1dd5b2ed2a564/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb20bc85547b48c2de0950fbca1dd5b2ed2a564/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs?ref=efb20bc85547b48c2de0950fbca1dd5b2ed2a564", "patch": "@@ -478,26 +478,12 @@ impl DiagnosticDeriveBuilder {\n                             let formatted_str = self.build_format(&s.value(), s.span());\n                             code.set_once((formatted_str, span));\n                         }\n-                        \"applicability\" => {\n-                            applicability = match applicability {\n-                                Some(v) => {\n-                                    span_err(\n-                                        span,\n-                                        \"applicability cannot be set in both the field and \\\n-                                         attribute\",\n-                                    )\n-                                    .emit();\n-                                    Some(v)\n-                                }\n-                                None => match Applicability::from_str(&s.value()) {\n-                                    Ok(v) => Some(quote! { #v }),\n-                                    Err(()) => {\n-                                        span_err(span, \"invalid applicability\").emit();\n-                                        None\n-                                    }\n-                                },\n+                        \"applicability\" => match Applicability::from_str(&s.value()) {\n+                            Ok(v) => applicability.set_once((quote! { #v }, span)),\n+                            Err(()) => {\n+                                span_err(span, \"invalid applicability\").emit();\n                             }\n-                        }\n+                        },\n                         _ => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n                             diag.help(\n                                 \"only `message`, `code` and `applicability` are valid field \\\n@@ -516,8 +502,9 @@ impl DiagnosticDeriveBuilder {\n             }\n         }\n \n-        let applicability =\n-            applicability.unwrap_or_else(|| quote!(rustc_errors::Applicability::Unspecified));\n+        let applicability = applicability\n+            .value()\n+            .unwrap_or_else(|| quote!(rustc_errors::Applicability::Unspecified));\n \n         let name = path.segments.last().unwrap().ident.to_string();\n         let method = format_ident!(\"span_{}\", name);\n@@ -559,7 +546,7 @@ impl DiagnosticDeriveBuilder {\n     fn span_and_applicability_of_ty(\n         &self,\n         info: FieldInfo<'_>,\n-    ) -> Result<(TokenStream, Option<TokenStream>), DiagnosticDeriveError> {\n+    ) -> Result<(TokenStream, Option<(TokenStream, proc_macro::Span)>), DiagnosticDeriveError> {\n         match &info.ty {\n             // If `ty` is `Span` w/out applicability, then use `Applicability::Unspecified`.\n             ty @ Type::Path(..) if type_matches_path(ty, &[\"rustc_span\", \"Span\"]) => {\n@@ -594,14 +581,14 @@ impl DiagnosticDeriveBuilder {\n                 let Some((span_idx, _)) = span_idx else {\n                     type_err(&tup.span())?;\n                 };\n-                let Some((applicability_idx, _applicability_span)) = applicability_idx else {\n+                let Some((applicability_idx, applicability_span)) = applicability_idx else {\n                     type_err(&tup.span())?;\n                 };\n                 let binding = &info.binding.binding;\n                 let span = quote!(#binding.#span_idx);\n                 let applicability = quote!(#binding.#applicability_idx);\n \n-                Ok((span, Some(applicability)))\n+                Ok((span, Some((applicability, applicability_span))))\n             }\n             // If `ty` isn't a `Span` or `(Span, Applicability)` then emit an error.\n             _ => throw_span_err!(info.span.unwrap(), \"wrong field type for suggestion\", |diag| {"}, {"sha": "c3d3c23fe5badbd9fe935221c376b9681c49acb4", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efb20bc85547b48c2de0950fbca1dd5b2ed2a564/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb20bc85547b48c2de0950fbca1dd5b2ed2a564/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=efb20bc85547b48c2de0950fbca1dd5b2ed2a564", "patch": "@@ -436,7 +436,7 @@ struct ErrorWithNoteCustomWrongOrder {\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ApplicabilityInBoth {\n     #[suggestion(typeck::suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n-    //~^ ERROR applicability cannot be set in both the field and attribute\n+    //~^ ERROR specified multiple times\n     suggestion: (Span, Applicability),\n }\n "}, {"sha": "f5432b0bf65618ad5b8a5d01059719b39da5c237", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/efb20bc85547b48c2de0950fbca1dd5b2ed2a564/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efb20bc85547b48c2de0950fbca1dd5b2ed2a564/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=efb20bc85547b48c2de0950fbca1dd5b2ed2a564", "patch": "@@ -293,11 +293,17 @@ error: `#[label = ...]` is not a valid attribute\n LL |     #[label = \"bar\"]\n    |     ^^^^^^^^^^^^^^^^\n \n-error: applicability cannot be set in both the field and attribute\n+error: specified multiple times\n   --> $DIR/diagnostic-derive.rs:438:52\n    |\n LL |     #[suggestion(typeck::suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: previously specified here\n+  --> $DIR/diagnostic-derive.rs:440:24\n+   |\n+LL |     suggestion: (Span, Applicability),\n+   |                        ^^^^^^^^^^^^^\n \n error: invalid applicability\n   --> $DIR/diagnostic-derive.rs:446:52"}]}