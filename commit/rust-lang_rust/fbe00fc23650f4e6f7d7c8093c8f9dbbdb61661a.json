{"sha": "fbe00fc23650f4e6f7d7c8093c8f9dbbdb61661a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZTAwZmMyMzY1MGY0ZTZmN2Q3YzgwOTNjOGY5ZGJiZGI2MTY2MWE=", "commit": {"author": {"name": "Jesse Ruderman", "email": "jruderman@gmail.com", "date": "2011-09-24T06:24:43Z"}, "committer": {"name": "Jesse Ruderman", "email": "jruderman@gmail.com", "date": "2011-09-24T06:24:43Z"}, "message": "Add rand_util.rs", "tree": {"sha": "17b23d6e2841f3b564fdc79a4772da1b84489c4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17b23d6e2841f3b564fdc79a4772da1b84489c4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbe00fc23650f4e6f7d7c8093c8f9dbbdb61661a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe00fc23650f4e6f7d7c8093c8f9dbbdb61661a", "html_url": "https://github.com/rust-lang/rust/commit/fbe00fc23650f4e6f7d7c8093c8f9dbbdb61661a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbe00fc23650f4e6f7d7c8093c8f9dbbdb61661a/comments", "author": {"login": "jruderman", "id": 692547, "node_id": "MDQ6VXNlcjY5MjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/692547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruderman", "html_url": "https://github.com/jruderman", "followers_url": "https://api.github.com/users/jruderman/followers", "following_url": "https://api.github.com/users/jruderman/following{/other_user}", "gists_url": "https://api.github.com/users/jruderman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruderman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruderman/subscriptions", "organizations_url": "https://api.github.com/users/jruderman/orgs", "repos_url": "https://api.github.com/users/jruderman/repos", "events_url": "https://api.github.com/users/jruderman/events{/privacy}", "received_events_url": "https://api.github.com/users/jruderman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jruderman", "id": 692547, "node_id": "MDQ6VXNlcjY5MjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/692547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruderman", "html_url": "https://github.com/jruderman", "followers_url": "https://api.github.com/users/jruderman/followers", "following_url": "https://api.github.com/users/jruderman/following{/other_user}", "gists_url": "https://api.github.com/users/jruderman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruderman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruderman/subscriptions", "organizations_url": "https://api.github.com/users/jruderman/orgs", "repos_url": "https://api.github.com/users/jruderman/repos", "events_url": "https://api.github.com/users/jruderman/events{/privacy}", "received_events_url": "https://api.github.com/users/jruderman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bac3378aeefad870404b3e4a3618c912600ce6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bac3378aeefad870404b3e4a3618c912600ce6a", "html_url": "https://github.com/rust-lang/rust/commit/3bac3378aeefad870404b3e4a3618c912600ce6a"}], "stats": {"total": 93, "additions": 93, "deletions": 0}, "files": [{"sha": "ad6fc958e76e0ae4b37aa24860849b6e2b7d4877", "filename": "src/fuzzer/rand_util.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/fbe00fc23650f4e6f7d7c8093c8f9dbbdb61661a/src%2Ffuzzer%2Frand_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe00fc23650f4e6f7d7c8093c8f9dbbdb61661a/src%2Ffuzzer%2Frand_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Frand_util.rs?ref=fbe00fc23650f4e6f7d7c8093c8f9dbbdb61661a", "patch": "@@ -0,0 +1,93 @@\n+use std;\n+import std::rand;\n+import std::vec;\n+\n+// random uint less than n\n+fn under(r : rand::rng, n : uint) -> uint { assert n != 0u; r.next() as uint % n }\n+\n+// random choice from a vec\n+fn choice<T>(r : rand::rng, v : [T]) -> T { assert vec::len(v) != 0u; v[under(r, vec::len(v))] }\n+\n+// 1 in n chance of being true\n+fn unlikely(r : rand::rng, n : uint) -> bool { under(r, n) == 0u }\n+\n+// shuffle a vec in place\n+fn shuffle<@T>(r : rand::rng, &v : [mutable T]) {\n+    let i = vec::len(v);\n+    while i >= 2u {\n+        // Loop invariant: elements with index >= i have been locked in place.\n+        i -= 1u;\n+        vec::swap(v, i, under(r, i + 1u)); // Lock element i in place.\n+    }\n+}\n+\n+// create a shuffled copy of a vec\n+fn shuffled<@T>(r : rand::rng, v : [T]) -> [T] {\n+    let w = vec::to_mut(v);\n+    shuffle(r, w);\n+    vec::from_mut(w) // Shouldn't this happen automatically?\n+}\n+\n+// sample from a population without replacement\n+//fn sample<T>(r : rand::rng, pop : [T], k : uint) -> [T] { fail }\n+\n+// Two ways to make a weighted choice.\n+// * weighted_choice is O(number of choices) time\n+// * weighted_vec is O(total weight) space\n+type weighted<T> = { weight: uint, item: T };\n+fn weighted_choice<@T>(r : rand::rng, v : [weighted<T>]) -> T {\n+    assert vec::len(v) != 0u;\n+    let total = 0u;\n+    for {weight: weight, item: _} in v {\n+        total += weight;\n+    }\n+    assert total >= 0u;\n+    let chosen = under(r, total);\n+    let so_far = 0u;\n+    for {weight: weight, item: item} in v {\n+        so_far += weight;\n+        if so_far > chosen {\n+            ret item;\n+        }\n+    }\n+    std::util::unreachable();\n+}\n+\n+fn weighted_vec<T>(v : [weighted<T>]) -> [T] {\n+    let r = [];\n+    for {weight: weight, item: item} in v {\n+        let i = 0u;\n+        while i < weight {\n+            r += [item];\n+            i += 1u;\n+        }\n+    }\n+    r\n+}\n+\n+fn main()\n+{\n+    let r = rand::mk_rng();\n+\n+    log_err under(r, 5u);\n+    log_err choice(r, [10, 20, 30]);\n+    log_err if unlikely(r, 5u) { \"unlikely\" } else { \"likely\" };\n+\n+    let a = [mutable 1, 2, 3];\n+    shuffle(r, a);\n+    log_err a;\n+\n+    let i = 0u;\n+    let v = [\n+        {weight:1u, item:\"low\"},\n+        {weight:8u, item:\"middle\"},\n+        {weight:1u, item:\"high\"}\n+    ];\n+    let w = weighted_vec(v);\n+\n+    while i < 1000u {\n+        log_err \"Immed: \" + weighted_choice(r, v);\n+        log_err \"Fast: \" + choice(r, w);\n+        i += 1u;\n+    }\n+}"}]}