{"sha": "2f6744c5fc086fcedd6515240fce15ed641f2846", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNjc0NGM1ZmMwODZmY2VkZDY1MTUyNDBmY2UxNWVkNjQxZjI4NDY=", "commit": {"author": {"name": "steveklabnik", "email": "steve@steveklabnik.com", "date": "2017-04-25T15:24:06Z"}, "committer": {"name": "steveklabnik", "email": "steve@steveklabnik.com", "date": "2017-05-09T16:49:58Z"}, "message": "Improve docs on Arc<T> and Send/Sync\n\nThis is something I always forget, so let's actually\nexplain in the docs.", "tree": {"sha": "e6a51d8e7b38c74fee6f720e2b126ddf61d25ec5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6a51d8e7b38c74fee6f720e2b126ddf61d25ec5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f6744c5fc086fcedd6515240fce15ed641f2846", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f6744c5fc086fcedd6515240fce15ed641f2846", "html_url": "https://github.com/rust-lang/rust/commit/2f6744c5fc086fcedd6515240fce15ed641f2846", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f6744c5fc086fcedd6515240fce15ed641f2846/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3fc547194d22dc673274ac20e9a7b1e607cb862", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3fc547194d22dc673274ac20e9a7b1e607cb862", "html_url": "https://github.com/rust-lang/rust/commit/f3fc547194d22dc673274ac20e9a7b1e607cb862"}], "stats": {"total": 39, "additions": 29, "deletions": 10}, "files": [{"sha": "27ecefe043b1e333b7788a4444c74ff519c35be3", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2f6744c5fc086fcedd6515240fce15ed641f2846/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6744c5fc086fcedd6515240fce15ed641f2846/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=2f6744c5fc086fcedd6515240fce15ed641f2846", "patch": "@@ -54,16 +54,33 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n /// exception. If you need to mutate through an `Arc`, use [`Mutex`][mutex],\n /// [`RwLock`][rwlock], or one of the [`Atomic`][atomic] types.\n ///\n-/// `Arc` uses atomic operations for reference counting, so `Arc`s can be\n-/// sent between threads. In other words, `Arc<T>` implements [`Send`]\n-/// as long as `T` implements [`Send`] and [`Sync`][sync]. The disadvantage is\n-/// that atomic operations are more expensive than ordinary memory accesses.\n-/// If you are not sharing reference-counted values between threads, consider\n-/// using [`rc::Rc`][`Rc`] for lower overhead. [`Rc`] is a safe default, because\n-/// the compiler will catch any attempt to send an [`Rc`] between threads.\n-/// However, a library might choose `Arc` in order to give library consumers\n+/// ## Thread Safety\n+///\n+/// Unlike [`Rc<T>`], `Arc<T>` uses atomic operations for its reference\n+/// counting  This means that it is thread-safe. The disadvantage is that\n+/// atomic operations are more expensive than ordinary memory accesses. If you\n+/// are not sharing reference-counted values between threads, consider using\n+/// [`Rc<T>`] for lower overhead. [`Rc<T>`] is a safe default, because the\n+/// compiler will catch any attempt to send an [`Rc<T>`] between threads.\n+/// However, a library might choose `Arc<T>` in order to give library consumers\n /// more flexibility.\n ///\n+/// `Arc<T>` will implement [`Send`] and [`Sync`] as long as the `T` implements\n+/// [`Send`] and [`Sync`]. Why can't you put a non-thread-safe type `T` in an\n+/// `Arc<T>` to make it thread-safe? This may be a bit counter-intuitive at\n+/// first: after all, isn't the point of `Arc<T>` thread safety? The key is\n+/// this: `Arc<T>` makes it thread safe to have multiple ownership of the same\n+/// data, but it  doesn't add thread safety to its data. Consider\n+/// `Arc<RefCell<T>>`. `RefCell<T>` isn't [`Sync`], and if `Arc<T>` was always\n+/// [`Send`], `Arc<RefCell<T>>` would be as well. But then we'd have a problem:\n+/// `RefCell<T>` is not thread safe; it keeps track of the borrowing count using\n+/// non-atomic operations.\n+///\n+/// In the end, this means that you may need to pair `Arc<T>` with some sort of\n+/// `std::sync` type, usually `Mutex<T>`.\n+///\n+/// ## Breaking cycles with `Weak`\n+///\n /// The [`downgrade`][downgrade] method can be used to create a non-owning\n /// [`Weak`][weak] pointer. A [`Weak`][weak] pointer can be [`upgrade`][upgrade]d\n /// to an `Arc`, but this will return [`None`] if the value has already been\n@@ -74,6 +91,8 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n /// strong `Arc` pointers from parent nodes to children, and [`Weak`][weak]\n /// pointers from children back to their parents.\n ///\n+/// ## `Deref` behavior\n+///\n /// `Arc<T>` automatically dereferences to `T` (via the [`Deref`][deref] trait),\n /// so you can call `T`'s methods on a value of type `Arc<T>`. To avoid name\n /// clashes with `T`'s methods, the methods of `Arc<T>` itself are [associated\n@@ -91,13 +110,13 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n ///\n /// [arc]: struct.Arc.html\n /// [weak]: struct.Weak.html\n-/// [`Rc`]: ../../std/rc/struct.Rc.html\n+/// [`Rc<T>`]: ../../std/rc/struct.Rc.html\n /// [clone]: ../../std/clone/trait.Clone.html#tymethod.clone\n /// [mutex]: ../../std/sync/struct.Mutex.html\n /// [rwlock]: ../../std/sync/struct.RwLock.html\n /// [atomic]: ../../std/sync/atomic/index.html\n /// [`Send`]: ../../std/marker/trait.Send.html\n-/// [sync]: ../../std/marker/trait.Sync.html\n+/// [`Sync`]: ../../std/marker/trait.Sync.html\n /// [deref]: ../../std/ops/trait.Deref.html\n /// [downgrade]: struct.Arc.html#method.downgrade\n /// [upgrade]: struct.Weak.html#method.upgrade"}]}