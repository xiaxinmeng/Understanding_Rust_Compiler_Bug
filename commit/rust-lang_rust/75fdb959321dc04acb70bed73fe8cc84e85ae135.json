{"sha": "75fdb959321dc04acb70bed73fe8cc84e85ae135", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZmRiOTU5MzIxZGMwNGFjYjcwYmVkNzNmZThjYzg0ZTg1YWUxMzU=", "commit": {"author": {"name": "Alex Zatelepin", "email": "mvzp10@gmail.com", "date": "2019-10-01T17:04:41Z"}, "committer": {"name": "Alex Zatelepin", "email": "mvzp10@gmail.com", "date": "2019-10-01T17:04:41Z"}, "message": "change .node -> .kind after rebase", "tree": {"sha": "ffcefe5d698ec67d68430e5a444c3efb82f955b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffcefe5d698ec67d68430e5a444c3efb82f955b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75fdb959321dc04acb70bed73fe8cc84e85ae135", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75fdb959321dc04acb70bed73fe8cc84e85ae135", "html_url": "https://github.com/rust-lang/rust/commit/75fdb959321dc04acb70bed73fe8cc84e85ae135", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75fdb959321dc04acb70bed73fe8cc84e85ae135/comments", "author": {"login": "ztlpn", "id": 2301957, "node_id": "MDQ6VXNlcjIzMDE5NTc=", "avatar_url": "https://avatars.githubusercontent.com/u/2301957?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ztlpn", "html_url": "https://github.com/ztlpn", "followers_url": "https://api.github.com/users/ztlpn/followers", "following_url": "https://api.github.com/users/ztlpn/following{/other_user}", "gists_url": "https://api.github.com/users/ztlpn/gists{/gist_id}", "starred_url": "https://api.github.com/users/ztlpn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ztlpn/subscriptions", "organizations_url": "https://api.github.com/users/ztlpn/orgs", "repos_url": "https://api.github.com/users/ztlpn/repos", "events_url": "https://api.github.com/users/ztlpn/events{/privacy}", "received_events_url": "https://api.github.com/users/ztlpn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ztlpn", "id": 2301957, "node_id": "MDQ6VXNlcjIzMDE5NTc=", "avatar_url": "https://avatars.githubusercontent.com/u/2301957?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ztlpn", "html_url": "https://github.com/ztlpn", "followers_url": "https://api.github.com/users/ztlpn/followers", "following_url": "https://api.github.com/users/ztlpn/following{/other_user}", "gists_url": "https://api.github.com/users/ztlpn/gists{/gist_id}", "starred_url": "https://api.github.com/users/ztlpn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ztlpn/subscriptions", "organizations_url": "https://api.github.com/users/ztlpn/orgs", "repos_url": "https://api.github.com/users/ztlpn/repos", "events_url": "https://api.github.com/users/ztlpn/events{/privacy}", "received_events_url": "https://api.github.com/users/ztlpn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb4ed52fd0d732c9a464937434651810fb666246", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb4ed52fd0d732c9a464937434651810fb666246", "html_url": "https://github.com/rust-lang/rust/commit/cb4ed52fd0d732c9a464937434651810fb666246"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "7a6fe9560fbfff4a6ed5fb4d182090df8ec73133", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75fdb959321dc04acb70bed73fe8cc84e85ae135/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75fdb959321dc04acb70bed73fe8cc84e85ae135/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=75fdb959321dc04acb70bed73fe8cc84e85ae135", "patch": "@@ -154,7 +154,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // True if `expr` is a `Try::from_ok(())` that is a result of desugaring a try block\n         // without the final expr (e.g. `try { return; }`). We don't want to generate an\n         // unreachable_code lint for it since warnings for autogenerated code are confusing.\n-        let is_try_block_generated_unit_expr = match expr.node {\n+        let is_try_block_generated_unit_expr = match expr.kind {\n             ExprKind::Call(_, ref args) if expr.span.is_desugaring(DesugaringKind::TryBlock) =>\n                 args.len() == 1 && args[0].span.is_desugaring(DesugaringKind::TryBlock),\n "}]}