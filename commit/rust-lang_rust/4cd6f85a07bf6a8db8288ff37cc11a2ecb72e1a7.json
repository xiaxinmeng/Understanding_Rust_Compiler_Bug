{"sha": "4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZDZmODVhMDdiZjZhOGRiODI4OGZmMzdjYzExYTJlY2I3MmUxYTc=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-12-23T21:36:23Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-01-16T23:40:47Z"}, "message": "Remove PredicateKind", "tree": {"sha": "ba8573fd7f5ebe9e23312a6726f63df5dc96dcd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba8573fd7f5ebe9e23312a6726f63df5dc96dcd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7", "html_url": "https://github.com/rust-lang/rust/commit/4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cb3d6f983cfeab13171a7171425b624545b9ccc", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cb3d6f983cfeab13171a7171425b624545b9ccc", "html_url": "https://github.com/rust-lang/rust/commit/4cb3d6f983cfeab13171a7171425b624545b9ccc"}], "stats": {"total": 106, "additions": 38, "deletions": 68}, "files": [{"sha": "113e2220d4d1f91689bc148ad9cd70dd691aeaa4", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7", "patch": "@@ -9,12 +9,8 @@ pub fn anonymize_predicate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     pred: ty::Predicate<'tcx>,\n ) -> ty::Predicate<'tcx> {\n-    match *pred.kind() {\n-        ty::PredicateKind::ForAll(binder) => {\n-            let new = ty::PredicateKind::ForAll(tcx.anonymize_late_bound_regions(binder));\n-            tcx.reuse_or_mk_predicate(pred, new)\n-        }\n-    }\n+    let new = tcx.anonymize_late_bound_regions(pred.kind());\n+    tcx.reuse_or_mk_predicate(pred, new)\n }\n \n struct PredicateSet<'tcx> {"}, {"sha": "987cb32d914df21fbfb374340ea07c16791b495d", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7", "patch": "@@ -44,9 +44,9 @@ impl<'tcx, E: TyEncoder<'tcx>> EncodableWithShorthand<'tcx, E> for Ty<'tcx> {\n }\n \n impl<'tcx, E: TyEncoder<'tcx>> EncodableWithShorthand<'tcx, E> for ty::Predicate<'tcx> {\n-    type Variant = ty::PredicateKind<'tcx>;\n+    type Variant = ty::Binder<ty::PredicateAtom<'tcx>>;\n     fn variant(&self) -> &Self::Variant {\n-        self.kind()\n+        self.kind_ref()\n     }\n }\n \n@@ -226,9 +226,9 @@ impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Predicate<'tcx> {\n             assert!(pos >= SHORTHAND_OFFSET);\n             let shorthand = pos - SHORTHAND_OFFSET;\n \n-            decoder.with_position(shorthand, ty::PredicateKind::decode)\n+            decoder.with_position(shorthand, ty::Binder::<ty::PredicateAtom<'tcx>>::decode)\n         } else {\n-            ty::PredicateKind::decode(decoder)\n+            ty::Binder::<ty::PredicateAtom<'tcx>>::decode(decoder)\n         }?;\n         let predicate = decoder.tcx().mk_predicate(predicate_kind);\n         Ok(predicate)"}, {"sha": "78ff8671d13af458cbce16c938ce1f02a6513d27", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7", "patch": "@@ -17,9 +17,9 @@ use crate::ty::query::{self, TyCtxtAt};\n use crate::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Subst, SubstsRef, UserSubsts};\n use crate::ty::TyKind::*;\n use crate::ty::{\n-    self, AdtDef, AdtKind, BindingMode, BoundVar, CanonicalPolyFnSig, Const, ConstVid, DefIdTree,\n-    ExistentialPredicate, FloatVar, FloatVid, GenericParamDefKind, InferConst, InferTy, IntVar,\n-    IntVid, List, ParamConst, ParamTy, PolyFnSig, Predicate, PredicateInner, PredicateKind,\n+    self, AdtDef, AdtKind, Binder, BindingMode, BoundVar, CanonicalPolyFnSig, Const, ConstVid,\n+    DefIdTree, ExistentialPredicate, FloatVar, FloatVid, GenericParamDefKind, InferConst, InferTy,\n+    IntVar, IntVid, List, ParamConst, ParamTy, PolyFnSig, Predicate, PredicateAtom, PredicateInner,\n     ProjectionTy, Region, RegionKind, ReprOptions, TraitObjectVisitor, Ty, TyKind, TyS, TyVar,\n     TyVid, TypeAndMut, Visibility,\n };\n@@ -133,7 +133,7 @@ impl<'tcx> CtxtInterners<'tcx> {\n     }\n \n     #[inline(never)]\n-    fn intern_predicate(&self, kind: PredicateKind<'tcx>) -> &'tcx PredicateInner<'tcx> {\n+    fn intern_predicate(&self, kind: Binder<PredicateAtom<'tcx>>) -> &'tcx PredicateInner<'tcx> {\n         self.predicate\n             .intern(kind, |kind| {\n                 let flags = super::flags::FlagComputation::for_predicate(kind);\n@@ -1948,8 +1948,8 @@ impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {\n     }\n }\n \n-impl<'tcx> Borrow<PredicateKind<'tcx>> for Interned<'tcx, PredicateInner<'tcx>> {\n-    fn borrow<'a>(&'a self) -> &'a PredicateKind<'tcx> {\n+impl<'tcx> Borrow<Binder<PredicateAtom<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {\n+    fn borrow<'a>(&'a self) -> &'a Binder<PredicateAtom<'tcx>> {\n         &self.0.kind\n     }\n }\n@@ -1987,12 +1987,6 @@ impl<'tcx> Borrow<Const<'tcx>> for Interned<'tcx, Const<'tcx>> {\n     }\n }\n \n-impl<'tcx> Borrow<PredicateKind<'tcx>> for Interned<'tcx, PredicateKind<'tcx>> {\n-    fn borrow<'a>(&'a self) -> &'a PredicateKind<'tcx> {\n-        &self.0\n-    }\n-}\n-\n macro_rules! direct_interners {\n     ($($name:ident: $method:ident($ty:ty),)+) => {\n         $(impl<'tcx> PartialEq for Interned<'tcx, $ty> {\n@@ -2091,7 +2085,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline]\n-    pub fn mk_predicate(self, kind: PredicateKind<'tcx>) -> Predicate<'tcx> {\n+    pub fn mk_predicate(self, kind: Binder<PredicateAtom<'tcx>>) -> Predicate<'tcx> {\n         let inner = self.interners.intern_predicate(kind);\n         Predicate { inner }\n     }\n@@ -2100,9 +2094,9 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn reuse_or_mk_predicate(\n         self,\n         pred: Predicate<'tcx>,\n-        kind: PredicateKind<'tcx>,\n+        kind: Binder<PredicateAtom<'tcx>>,\n     ) -> Predicate<'tcx> {\n-        if *pred.kind() != kind { self.mk_predicate(kind) } else { pred }\n+        if pred.kind() != kind { self.mk_predicate(kind) } else { pred }\n     }\n \n     pub fn mk_mach_int(self, tm: ast::IntTy) -> Ty<'tcx> {"}, {"sha": "b99587fe73499a35da9bf9e5762e9d5e3328c605", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7", "patch": "@@ -22,7 +22,7 @@ impl FlagComputation {\n         result\n     }\n \n-    pub fn for_predicate(kind: ty::PredicateKind<'_>) -> FlagComputation {\n+    pub fn for_predicate(kind: ty::Binder<ty::PredicateAtom<'_>>) -> FlagComputation {\n         let mut result = FlagComputation::new();\n         result.add_predicate_kind(kind);\n         result\n@@ -204,8 +204,7 @@ impl FlagComputation {\n         }\n     }\n \n-    fn add_predicate_kind(&mut self, kind: ty::PredicateKind<'_>) {\n-        let ty::PredicateKind::ForAll(binder) = kind;\n+    fn add_predicate_kind(&mut self, binder: ty::Binder<ty::PredicateAtom<'_>>) {\n         self.bound_computation(binder, |computation, atom| computation.add_predicate_atom(atom));\n     }\n "}, {"sha": "e023195605bbc968112b1a4c2b48608811523704", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7", "patch": "@@ -1030,7 +1030,7 @@ impl<'tcx> GenericPredicates<'tcx> {\n \n #[derive(Debug)]\n crate struct PredicateInner<'tcx> {\n-    kind: PredicateKind<'tcx>,\n+    kind: Binder<PredicateAtom<'tcx>>,\n     flags: TypeFlags,\n     /// See the comment for the corresponding field of [TyS].\n     outer_exclusive_binder: ty::DebruijnIndex,\n@@ -1061,7 +1061,12 @@ impl<'tcx> Eq for Predicate<'tcx> {}\n \n impl<'tcx> Predicate<'tcx> {\n     #[inline(always)]\n-    pub fn kind(self) -> &'tcx PredicateKind<'tcx> {\n+    pub fn kind(self) -> Binder<PredicateAtom<'tcx>> {\n+        self.inner.kind\n+    }\n+\n+    #[inline(always)]\n+    pub fn kind_ref(&self) -> &Binder<PredicateAtom<'tcx>> {\n         &self.inner.kind\n     }\n \n@@ -1072,7 +1077,7 @@ impl<'tcx> Predicate<'tcx> {\n     ///\n     /// Note that this method panics in case this predicate has unbound variables.\n     pub fn skip_binders(self) -> PredicateAtom<'tcx> {\n-        let &PredicateKind::ForAll(binder) = self.kind();\n+        let binder = self.kind();\n         binder.skip_binder()\n     }\n \n@@ -1083,21 +1088,21 @@ impl<'tcx> Predicate<'tcx> {\n     /// Rebinding the returned atom can causes the previously bound variables\n     /// to end up at the wrong binding level.\n     pub fn skip_binders_unchecked(self) -> PredicateAtom<'tcx> {\n-        let &PredicateKind::ForAll(binder) = self.kind();\n+        let binder = self.kind();\n         binder.skip_binder()\n     }\n \n     /// Converts this to a `Binder<PredicateAtom<'tcx>>`. If the value was an\n     /// `Atom`, then it is not allowed to contain escaping bound vars.\n     pub fn bound_atom(self) -> Binder<PredicateAtom<'tcx>> {\n-        let &PredicateKind::ForAll(binder) = self.kind();\n+        let binder = self.kind();\n         binder\n     }\n \n     /// Allows using a `Binder<PredicateAtom<'tcx>>` even if the given predicate previously\n     /// contained unbound variables by shifting these variables outwards.\n     pub fn bound_atom_with_opt_escaping(self, _tcx: TyCtxt<'tcx>) -> Binder<PredicateAtom<'tcx>> {\n-        let &PredicateKind::ForAll(binder) = self.kind();\n+        let binder = self.kind();\n         binder\n     }\n }\n@@ -1117,13 +1122,6 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Predicate<'tcx> {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n-pub enum PredicateKind<'tcx> {\n-    /// `for<'a>: ...`\n-    ForAll(Binder<PredicateAtom<'tcx>>),\n-}\n-\n #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]\n #[derive(HashStable, TypeFoldable)]\n pub enum PredicateAtom<'tcx> {\n@@ -1175,7 +1173,7 @@ pub enum PredicateAtom<'tcx> {\n impl<'tcx> Binder<PredicateAtom<'tcx>> {\n     /// Wraps `self` with the given qualifier if this predicate has any unbound variables.\n     pub fn potentially_quantified(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        PredicateKind::ForAll(self).to_predicate(tcx)\n+        self.to_predicate(tcx)\n     }\n }\n \n@@ -1387,7 +1385,7 @@ pub trait ToPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;\n }\n \n-impl ToPredicate<'tcx> for PredicateKind<'tcx> {\n+impl ToPredicate<'tcx> for Binder<PredicateAtom<'tcx>> {\n     #[inline(always)]\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         tcx.mk_predicate(self)\n@@ -1398,7 +1396,7 @@ impl ToPredicate<'tcx> for PredicateAtom<'tcx> {\n     #[inline(always)]\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         debug_assert!(!self.has_escaping_bound_vars(), \"escaping bound vars for {:?}\", self);\n-        tcx.mk_predicate(PredicateKind::ForAll(Binder::dummy(self)))\n+        tcx.mk_predicate(Binder::dummy(self))\n     }\n }\n "}, {"sha": "04bea024bd38ea71c16e889e892b2bf7dc5be509", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7", "patch": "@@ -2068,7 +2068,7 @@ define_print_and_forward_display! {\n     }\n \n     ty::Predicate<'tcx> {\n-        let ty::PredicateKind::ForAll(binder) = self.kind();\n+        let binder = self.kind();\n         p!(print(binder))\n     }\n "}, {"sha": "f2e41c88f15f4ecd320e14a7447fe072a9e52b0b", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7", "patch": "@@ -228,14 +228,6 @@ impl fmt::Debug for ty::Predicate<'tcx> {\n     }\n }\n \n-impl fmt::Debug for ty::PredicateKind<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match *self {\n-            ty::PredicateKind::ForAll(binder) => write!(f, \"ForAll({:?})\", binder),\n-        }\n-    }\n-}\n-\n impl fmt::Debug for ty::PredicateAtom<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n@@ -480,15 +472,6 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ExistentialProjection<'a> {\n     }\n }\n \n-impl<'a, 'tcx> Lift<'tcx> for ty::PredicateKind<'a> {\n-    type Lifted = ty::PredicateKind<'tcx>;\n-    fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n-        match self {\n-            ty::PredicateKind::ForAll(binder) => tcx.lift(binder).map(ty::PredicateKind::ForAll),\n-        }\n-    }\n-}\n-\n impl<'a, 'tcx> Lift<'tcx> for ty::PredicateAtom<'a> {\n     type Lifted = ty::PredicateAtom<'tcx>;\n     fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {"}, {"sha": "aa7f746e52fe3b04923d72f3987bb5f8c9c005cc", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7", "patch": "@@ -345,7 +345,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n \n         let infcx = self.selcx.infcx();\n \n-        let ty::PredicateKind::ForAll(binder) = *obligation.predicate.kind();\n+        let binder = obligation.predicate.kind();\n         if binder.skip_binder().has_escaping_bound_vars() {\n             match binder.skip_binder() {\n                 // Evaluation will discard candidates using the leak check."}, {"sha": "0e8e15cb221cd2252eb5267b42b16f4e7bee6e5b", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7", "patch": "@@ -94,7 +94,7 @@ fn compute_implied_outlives_bounds<'tcx>(\n         // region relationships.\n         implied_bounds.extend(obligations.into_iter().flat_map(|obligation| {\n             assert!(!obligation.has_escaping_bound_vars());\n-            let ty::PredicateKind::ForAll(binder) = obligation.predicate.kind();\n+            let binder = obligation.predicate.kind();\n             if binder.skip_binder().has_escaping_bound_vars() {\n                 vec![]\n             } else {"}, {"sha": "64fefd82e06abc4b15fb07d8c890b4ce5e6e916b", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7", "patch": "@@ -5,7 +5,7 @@ use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use rustc_middle::hir::map as hir_map;\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{\n-    self, Binder, Predicate, PredicateAtom, PredicateKind, ToPredicate, Ty, TyCtxt, WithConstness,\n+    self, Binder, Predicate, PredicateAtom, ToPredicate, Ty, TyCtxt, WithConstness,\n };\n use rustc_session::CrateDisambiguator;\n use rustc_span::symbol::Symbol;\n@@ -379,7 +379,7 @@ fn well_formed_types_in_env<'tcx>(\n         match arg.unpack() {\n             GenericArgKind::Type(ty) => {\n                 let binder = Binder::dummy(PredicateAtom::TypeWellFormedFromEnv(ty));\n-                Some(tcx.mk_predicate(PredicateKind::ForAll(binder)))\n+                Some(tcx.mk_predicate(binder))\n             }\n \n             // FIXME(eddyb) no WF conditions from lifetimes?"}, {"sha": "c0920895b66d617f06050b6e057c71db7f02c4d4", "filename": "compiler/rustc_typeck/src/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs?ref=4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7", "patch": "@@ -31,7 +31,7 @@ fn inferred_outlives_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[(ty::Predicate\n                     let mut pred: Vec<String> = predicates\n                         .iter()\n                         .map(|(out_pred, _)| {\n-                            let ty::PredicateKind::ForAll(binder) = out_pred.kind();\n+                            let binder = out_pred.kind();\n                             match binder.skip_binder() {\n                                 ty::PredicateAtom::RegionOutlives(p) => p.to_string(),\n                                 ty::PredicateAtom::TypeOutlives(p) => p.to_string(),"}, {"sha": "d2a3bd3921d277203f4695cc781544a259210951", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=4cd6f85a07bf6a8db8288ff37cc11a2ecb72e1a7", "patch": "@@ -115,7 +115,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n             .filter(|p| !p.is_global())\n             .filter_map(|obligation| {\n                 // Note that we do not want to deal with qualified predicates here.\n-                let ty::PredicateKind::ForAll(binder) = obligation.predicate.kind();\n+                let binder = obligation.predicate.kind();\n                 match binder.skip_binder() {\n                     ty::PredicateAtom::Trait(pred, _) if !binder.has_escaping_bound_vars() => {\n                         if pred.def_id() == sized_trait {"}]}