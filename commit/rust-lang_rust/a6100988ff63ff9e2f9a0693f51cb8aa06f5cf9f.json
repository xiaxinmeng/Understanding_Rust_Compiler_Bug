{"sha": "a6100988ff63ff9e2f9a0693f51cb8aa06f5cf9f", "node_id": "C_kwDOAAsO6NoAKGE2MTAwOTg4ZmY2M2ZmOWUyZjlhMDY5M2Y1MWNiOGFhMDZmNWNmOWY", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-05-23T00:39:44Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-05-23T00:39:56Z"}, "message": "Fix clippy explicit_write lint for new writeln implementation", "tree": {"sha": "5fe39fe13dade88a7471a5a2c8e3ce1568461a17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fe39fe13dade88a7471a5a2c8e3ce1568461a17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6100988ff63ff9e2f9a0693f51cb8aa06f5cf9f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmKK19wACgkQ+boUO5X/\nbYKYJA/+PvDcbzLVNClp71bPSS8pO9/kBNxFou37Pjz77RZNIPHbHzstYS4mLx3j\nUzh6T4bbWWdh9aVVz2W7vlNmlczxloETN3bhinHAbZWo+EKYUqJOS9cFjtx8lWEv\niLpH8cNseQbedVjURKjVywCUpc+8ABb5lz0sASyqKbS+Ut5QxSYDnO8rHSW1mgJb\neMBVCqxNIIxK4/0uNawB46YKlOyfLTbkksq+haiujg1hfByr1Q3DdEhJnd2j6Hjg\naQ8IbVQxmuOw5hi+kohpSKaOFCzRFkJH9VexNQqXncakCok2NbmxN+dhNM9A+Q6W\nuI0g2EwYPgtc5/oNLD/F1XEWdqa3+6HnKgyc7dldl5MK1qlBahQX1fwlipS1Z0aR\nm4UXFGWknmKrKmdVVL+dk4kbhOXdH828lAy4B2aH3FxijnaDymIQmCIVJJ+P9wQl\nKbt8l+LJFsmbm/kUgPqKoHgUOk7FS43YAIQvolKKg7FI6Up5YUNHnwuTIBgXJsNe\nH2sldqS70tJSftEw6fxkzY/BVltNzlB9s2cPGASUGpmWrmisPYY9dW07M6/qOSXH\nBy52NfYS3ZtvOdpOtvyswsh6rJxKOv5wEn0+5o6lVVLBB0zLJRoroZTU77wLtoSq\nnxnJnwjXWD3VEIJqQLH2QMIEwK6O7OwrhGHw4tlYaXXdlmDzJyU=\n=x8JR\n-----END PGP SIGNATURE-----", "payload": "tree 5fe39fe13dade88a7471a5a2c8e3ce1568461a17\nparent 0502496b1e5c53fe0f5c7e9a6bb67c7cc6777d33\nauthor David Tolnay <dtolnay@gmail.com> 1653266384 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1653266396 -0700\n\nFix clippy explicit_write lint for new writeln implementation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6100988ff63ff9e2f9a0693f51cb8aa06f5cf9f", "html_url": "https://github.com/rust-lang/rust/commit/a6100988ff63ff9e2f9a0693f51cb8aa06f5cf9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6100988ff63ff9e2f9a0693f51cb8aa06f5cf9f/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0502496b1e5c53fe0f5c7e9a6bb67c7cc6777d33", "url": "https://api.github.com/repos/rust-lang/rust/commits/0502496b1e5c53fe0f5c7e9a6bb67c7cc6777d33", "html_url": "https://github.com/rust-lang/rust/commit/0502496b1e5c53fe0f5c7e9a6bb67c7cc6777d33"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "d8f765b288a6c20a624ee4a980b4615e2ddad85b", "filename": "src/tools/clippy/clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a6100988ff63ff9e2f9a0693f51cb8aa06f5cf9f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6100988ff63ff9e2f9a0693f51cb8aa06f5cf9f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexplicit_write.rs?ref=a6100988ff63ff9e2f9a0693f51cb8aa06f5cf9f", "patch": "@@ -4,7 +4,8 @@ use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::{is_expn_of, match_function_call, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind};\n+use rustc_hir::def::Res;\n+use rustc_hir::{BindingAnnotation, Block, BlockCheckMode, Expr, ExprKind, Node, PatKind, QPath, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n@@ -39,7 +40,7 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitWrite {\n             if let ExprKind::MethodCall(unwrap_fun, [write_call], _) = expr.kind;\n             if unwrap_fun.ident.name == sym::unwrap;\n             // match call to write_fmt\n-            if let ExprKind::MethodCall(write_fun, [write_recv, write_arg], _) = write_call.kind;\n+            if let ExprKind::MethodCall(write_fun, [write_recv, write_arg], _) = look_in_block(cx, &write_call.kind);\n             if write_fun.ident.name == sym!(write_fmt);\n             // match calls to std::io::stdout() / std::io::stderr ()\n             if let Some(dest_name) = if match_function_call(cx, write_recv, &paths::STDOUT).is_some() {\n@@ -100,3 +101,34 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitWrite {\n         }\n     }\n }\n+\n+/// If `kind` is a block that looks like `{ let result = $expr; result }` then\n+/// returns $expr. Otherwise returns `kind`.\n+fn look_in_block<'tcx, 'hir>(cx: &LateContext<'tcx>, kind: &'tcx ExprKind<'hir>) -> &'tcx ExprKind<'hir> {\n+    if_chain! {\n+        if let ExprKind::Block(block, _label @ None) = kind;\n+        if let Block {\n+            stmts: [Stmt { kind: StmtKind::Local(local), .. }],\n+            expr: Some(expr_end_of_block),\n+            rules: BlockCheckMode::DefaultBlock,\n+            ..\n+        } = block;\n+\n+        // Find id of the local that expr_end_of_block resolves to\n+        if let ExprKind::Path(QPath::Resolved(None, expr_path)) = expr_end_of_block.kind;\n+        if let Res::Local(expr_res) = expr_path.res;\n+        if let Some(Node::Binding(res_pat)) = cx.tcx.hir().find(expr_res);\n+\n+        // Find id of the local we found in the block\n+        if let PatKind::Binding(BindingAnnotation::Unannotated, local_hir_id, _ident, None) = local.pat.kind;\n+\n+        // If those two are the same hir id\n+        if res_pat.hir_id == local_hir_id;\n+\n+        if let Some(init) = local.init;\n+        then {\n+            return &init.kind;\n+        }\n+    }\n+    kind\n+}"}]}