{"sha": "996ec62cbfce9f25ecc8b573a0b9eb7f4a1b6db9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NmVjNjJjYmZjZTlmMjVlY2M4YjU3M2EwYjllYjdmNGExYjZkYjk=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-27T02:40:05Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-27T02:42:02Z"}, "message": "Remove spurious by-ref argument to destructors\n\nDestructors were internally declared with an extra (hidden) nil-typed\nargument that was passed in by-ref mode. This was causing spurious\nmode warnings. Deleted it. Also some misc. cleanup because I\ncouldn't help myself.", "tree": {"sha": "9d544b22c33bddfea8376115fb4ee1ac0cd3a078", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d544b22c33bddfea8376115fb4ee1ac0cd3a078"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/996ec62cbfce9f25ecc8b573a0b9eb7f4a1b6db9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/996ec62cbfce9f25ecc8b573a0b9eb7f4a1b6db9", "html_url": "https://github.com/rust-lang/rust/commit/996ec62cbfce9f25ecc8b573a0b9eb7f4a1b6db9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/996ec62cbfce9f25ecc8b573a0b9eb7f4a1b6db9/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "656cbead49f0d7022152887970719f9c95f76419", "url": "https://api.github.com/repos/rust-lang/rust/commits/656cbead49f0d7022152887970719f9c95f76419", "html_url": "https://github.com/rust-lang/rust/commit/656cbead49f0d7022152887970719f9c95f76419"}], "stats": {"total": 32, "additions": 14, "deletions": 18}, "files": [{"sha": "a2c935ea6f4fc41a6e7163abcaa6ad3a796b9c34", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/996ec62cbfce9f25ecc8b573a0b9eb7f4a1b6db9/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996ec62cbfce9f25ecc8b573a0b9eb7f4a1b6db9/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=996ec62cbfce9f25ecc8b573a0b9eb7f4a1b6db9", "patch": "@@ -398,10 +398,8 @@ fn operator_prec(op: ast::binop) -> uint {\n \n fn dtor_dec() -> fn_decl {\n     let nil_t = @{id: 0, node: ty_nil, span: dummy_sp()};\n-    // dtor has one argument, of type ()\n-    {inputs: ~[{mode: ast::expl(ast::by_ref),\n-                ty: nil_t, ident: parse::token::special_idents::underscore,\n-                id: 0}],\n+    // dtor has no args\n+    {inputs: ~[],\n      output: nil_t, cf: return_val}\n }\n "}, {"sha": "47ac8e9ef6aaafb6cc4a306d65b0c3d11afb19b0", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/996ec62cbfce9f25ecc8b573a0b9eb7f4a1b6db9/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996ec62cbfce9f25ecc8b573a0b9eb7f4a1b6db9/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=996ec62cbfce9f25ecc8b573a0b9eb7f4a1b6db9", "patch": "@@ -383,7 +383,7 @@ fn get_res_dtor(ccx: @crate_ctxt, did: ast::def_id,\n                 parent_id: ast::def_id, substs: ~[ty::t])\n    -> ValueRef {\n     let _icx = ccx.insn_ctxt(\"trans_res_dtor\");\n-    if (substs.len() > 0u) {\n+    if (substs.is_not_empty()) {\n         let did = if did.crate != ast::local_crate {\n             inline::maybe_instantiate_inline(ccx, did)\n         } else { did };\n@@ -1496,7 +1496,7 @@ fn copy_args_to_allocas(fcx: fn_ctxt,\n \n         // For certain mode/type combinations, the raw llarg values are passed\n         // by value.  However, within the fn body itself, we want to always\n-        // have all locals and argumenst be by-ref so that we can cancel the\n+        // have all locals and arguments be by-ref so that we can cancel the\n         // cleanup and for better interaction with LLVM's debug info.  So, if\n         // the argument would be passed by value, we store it into an alloca.\n         // This alloca should be optimized away by LLVM's mem-to-reg pass in\n@@ -1767,9 +1767,7 @@ fn trans_class_dtor(ccx: @crate_ctxt, path: path,\n \n   /* The dtor takes a (null) output pointer, and a self argument,\n      and returns () */\n-  let lldty = T_fn(~[T_ptr(type_of(ccx, ty::mk_nil(tcx))),\n-                    T_ptr(type_of(ccx, class_ty))],\n-                   llvm::LLVMVoidType());\n+  let lldty = type_of_dtor(ccx, class_ty);\n \n   let s = get_dtor_symbol(ccx, path, dtor_id, psubsts);\n \n@@ -1833,7 +1831,7 @@ fn trans_item(ccx: @crate_ctxt, item: ast::item) {\n                                          *path,\n                                          ~[path_name(item.ident)]),\n                                      decl, body, llfndecl, item.id);\n-        } else if tps.len() == 0u {\n+        } else if tps.is_empty() {\n             let llfndecl = get_item_val(ccx, item.id);\n             trans_fn(ccx,\n                      vec::append(*path, ~[path_name(item.ident)]),"}, {"sha": "59e8cd720254fec917b5e095eae326911a707d4c", "filename": "src/rustc/middle/trans/datum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/996ec62cbfce9f25ecc8b573a0b9eb7f4a1b6db9/src%2Frustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996ec62cbfce9f25ecc8b573a0b9eb7f4a1b6db9/src%2Frustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=996ec62cbfce9f25ecc8b573a0b9eb7f4a1b6db9", "patch": "@@ -204,7 +204,7 @@ fn appropriate_mode(ty: ty::t) -> DatumMode {\n     *\n     * Indicates the \"appropriate\" mode for this value,\n     * which is either by ref or by value, depending\n-    * on whether type is iimmediate or what. */\n+    * on whether type is immediate or not. */\n \n     if ty::type_is_nil(ty) || ty::type_is_bot(ty) {\n         ByValue"}, {"sha": "50a24a1a8258cea80d7ba5842fd3227b40ecb694", "filename": "src/rustc/middle/trans/glue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/996ec62cbfce9f25ecc8b573a0b9eb7f4a1b6db9/src%2Frustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996ec62cbfce9f25ecc8b573a0b9eb7f4a1b6db9/src%2Frustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=996ec62cbfce9f25ecc8b573a0b9eb7f4a1b6db9", "patch": "@@ -426,8 +426,8 @@ fn trans_class_drop(bcx: block,\n         // Class dtors have no explicit args, so the params should\n         // just consist of the output pointer and the environment\n         // (self)\n-        assert(params.len() == 2u);\n-        let self_arg = PointerCast(bcx, v0, params[1u]);\n+        assert(params.len() == 2);\n+        let self_arg = PointerCast(bcx, v0, params[1]);\n         let args = ~[bcx.fcx.llretptr, self_arg];\n         Call(bcx, dtor_addr, args);\n \n@@ -440,7 +440,7 @@ fn trans_class_drop(bcx: block,\n             bcx = drop_ty(bcx, llfld_a, fld.mt.ty);\n         }\n \n-        Store(bcx, C_u8(0u), drop_flag);\n+        Store(bcx, C_u8(0), drop_flag);\n         bcx\n     }\n }"}, {"sha": "bbcacec052e15e56d6ee9c6cc7652c13e8141d0c", "filename": "src/rustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/996ec62cbfce9f25ecc8b573a0b9eb7f4a1b6db9/src%2Frustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996ec62cbfce9f25ecc8b573a0b9eb7f4a1b6db9/src%2Frustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=996ec62cbfce9f25ecc8b573a0b9eb7f4a1b6db9", "patch": "@@ -103,11 +103,11 @@ fn monomorphic_fn(ccx: @crate_ctxt,\n     // Random cut-off -- code that needs to instantiate the same function\n     // recursively more than ten times can probably safely be assumed to be\n     // causing an infinite expansion.\n-    if depth > 10u {\n+    if depth > 10 {\n         ccx.sess.span_fatal(\n             span, ~\"overly deep expansion of inlined function\");\n     }\n-    ccx.monomorphizing.insert(fn_id, depth + 1u);\n+    ccx.monomorphizing.insert(fn_id, depth + 1);\n \n     let pt = vec::append(*pt,\n                          ~[path_name(ccx.names(ccx.sess.str_of(name)))]);"}, {"sha": "b45da3b27004b95649dfddaeae8eae5c90e85dfd", "filename": "src/rustc/middle/trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/996ec62cbfce9f25ecc8b573a0b9eb7f4a1b6db9/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996ec62cbfce9f25ecc8b573a0b9eb7f4a1b6db9/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=996ec62cbfce9f25ecc8b573a0b9eb7f4a1b6db9", "patch": "@@ -254,8 +254,8 @@ fn llvm_type_name(cx: @crate_ctxt,\n }\n \n fn type_of_dtor(ccx: @crate_ctxt, self_ty: ty::t) -> TypeRef {\n-    T_fn(~[T_ptr(type_of(ccx, ty::mk_nil(ccx.tcx))),\n-          T_ptr(type_of(ccx, self_ty))],\n+    T_fn(~[T_ptr(type_of(ccx, ty::mk_nil(ccx.tcx))), // output pointer\n+           T_ptr(type_of(ccx, self_ty))],            // self arg\n          llvm::LLVMVoidType())\n }\n "}]}