{"sha": "fd22c27c47a71cff2f92e61b11b3344ed9e50d25", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMjJjMjdjNDdhNzFjZmYyZjkyZTYxYjExYjMzNDRlZDllNTBkMjU=", "commit": {"author": {"name": "Ruben Schmidmeister", "email": "ruben.schmidmeister@icloud.com", "date": "2019-05-17T13:58:01Z"}, "committer": {"name": "Ruben Schmidmeister", "email": "ruben.schmidmeister@icloud.com", "date": "2019-05-17T13:58:01Z"}, "message": "Allow tests to be run on nightly only", "tree": {"sha": "8813874eab712913e270b645dffbc30fdbca5059", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8813874eab712913e270b645dffbc30fdbca5059"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd22c27c47a71cff2f92e61b11b3344ed9e50d25", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEU0FXzFYkrmfOhhqxKTh7Wnqvhj8FAlzevfgACgkQKTh7Wnqv\nhj+bEwf/YP1D42GxWvYCVNsSkPIcsV4s3gWOoME4JysVy5o3/rrFvPGAmMsUd92/\nw7NsflcW1MrGklq6mHWW30zSF5bUuRgExAZ79FGGgyaXeFdhUtuxXJ9C8SXJrA3w\nKqL3kx+2bk6puUyA9wSa/hd1BHn9YxkRHWcFJjbWsyU6yH+KJpPD5YnTwDOFkiVf\nm/w0XBBjFR+rE2Cgwt2pfSIOXrmv+5JYhSCdMefyW1cZznJ1L7JNzDQzkhABQRPj\ncb2V5BOhsdmD8lpss97dJJAGQ4GWu31GlIGnasMSC560OE89jBF5mO3cyNL/DtB7\nq37CchSOhXCZV1KXLw+Tc0BvN+mRtg==\n=XCLC\n-----END PGP SIGNATURE-----", "payload": "tree 8813874eab712913e270b645dffbc30fdbca5059\nparent c97aa152dac4b27e7cba692abed0fea2fcce2bd4\nauthor Ruben Schmidmeister <ruben.schmidmeister@icloud.com> 1558101481 +0200\ncommitter Ruben Schmidmeister <ruben.schmidmeister@icloud.com> 1558101481 +0200\n\nAllow tests to be run on nightly only\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd22c27c47a71cff2f92e61b11b3344ed9e50d25", "html_url": "https://github.com/rust-lang/rust/commit/fd22c27c47a71cff2f92e61b11b3344ed9e50d25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd22c27c47a71cff2f92e61b11b3344ed9e50d25/comments", "author": {"login": "bash", "id": 4602612, "node_id": "MDQ6VXNlcjQ2MDI2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4602612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bash", "html_url": "https://github.com/bash", "followers_url": "https://api.github.com/users/bash/followers", "following_url": "https://api.github.com/users/bash/following{/other_user}", "gists_url": "https://api.github.com/users/bash/gists{/gist_id}", "starred_url": "https://api.github.com/users/bash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bash/subscriptions", "organizations_url": "https://api.github.com/users/bash/orgs", "repos_url": "https://api.github.com/users/bash/repos", "events_url": "https://api.github.com/users/bash/events{/privacy}", "received_events_url": "https://api.github.com/users/bash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bash", "id": 4602612, "node_id": "MDQ6VXNlcjQ2MDI2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4602612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bash", "html_url": "https://github.com/bash", "followers_url": "https://api.github.com/users/bash/followers", "following_url": "https://api.github.com/users/bash/following{/other_user}", "gists_url": "https://api.github.com/users/bash/gists{/gist_id}", "starred_url": "https://api.github.com/users/bash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bash/subscriptions", "organizations_url": "https://api.github.com/users/bash/orgs", "repos_url": "https://api.github.com/users/bash/repos", "events_url": "https://api.github.com/users/bash/events{/privacy}", "received_events_url": "https://api.github.com/users/bash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c97aa152dac4b27e7cba692abed0fea2fcce2bd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c97aa152dac4b27e7cba692abed0fea2fcce2bd4", "html_url": "https://github.com/rust-lang/rust/commit/c97aa152dac4b27e7cba692abed0fea2fcce2bd4"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "101a8c07fd9c0df4a9af98a4322d54ef2113fe9b", "filename": "src/test/mod.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fd22c27c47a71cff2f92e61b11b3344ed9e50d25/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd22c27c47a71cff2f92e61b11b3344ed9e50d25/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=fd22c27c47a71cff2f92e61b11b3344ed9e50d25", "patch": "@@ -259,9 +259,9 @@ fn assert_output(source: &Path, expected_filename: &Path) {\n #[test]\n fn idempotence_tests() {\n     run_test_with(&TestSetting::default(), || {\n-        match option_env!(\"CFG_RELEASE_CHANNEL\") {\n-            None | Some(\"nightly\") => {}\n-            _ => return, // these tests require nightly\n+        // these tests require nightly\n+        if !is_nightly() {\n+            return;\n         }\n         // Get all files in the tests/target directory.\n         let files = get_test_files(Path::new(\"tests/target\"), true);\n@@ -277,9 +277,9 @@ fn idempotence_tests() {\n // no warnings are emitted.\n #[test]\n fn self_tests() {\n-    match option_env!(\"CFG_RELEASE_CHANNEL\") {\n-        None | Some(\"nightly\") => {}\n-        _ => return, // Issue-3443: these tests require nightly\n+    // Issue-3443: these tests require nightly\n+    if !is_nightly() {\n+        return;\n     }\n     let mut files = get_test_files(Path::new(\"tests\"), false);\n     let bin_directories = vec![\"cargo-fmt\", \"git-rustfmt\", \"bin\", \"format-diff\"];\n@@ -313,6 +313,11 @@ fn self_tests() {\n     );\n }\n \n+fn is_nightly() -> bool {\n+    let release_channel = option_env!(\"CFG_RELEASE_CHANNEL\");\n+    release_channel.is_none() || release_channel == Some(\"nightly\")\n+}\n+\n #[test]\n fn stdin_formatting_smoke_test() {\n     let input = Input::Text(\"fn main () {}\".to_owned());\n@@ -426,6 +431,16 @@ fn check_files(files: Vec<PathBuf>, opt_config: &Option<PathBuf>) -> (Vec<Format\n     let mut reports = vec![];\n \n     for file_name in files {\n+        let sig_comments = read_significant_comments(&file_name);\n+        if sig_comments.contains_key(\"unstable\") && !is_nightly() {\n+            debug!(\n+                \"Skipping '{}' because it requires unstable \\\n+                 features which are only available on nightly...\",\n+                file_name.display()\n+            );\n+            continue;\n+        }\n+\n         debug!(\"Testing '{}'...\", file_name.display());\n \n         match idempotent_check(&file_name, &opt_config) {\n@@ -485,7 +500,7 @@ fn read_config(filename: &Path) -> Config {\n     };\n \n     for (key, val) in &sig_comments {\n-        if key != \"target\" && key != \"config\" {\n+        if key != \"target\" && key != \"config\" && key != \"unstable\" {\n             config.override_value(key, val);\n             if config.is_default(key) {\n                 warn!(\"Default value {} used explicitly for {}\", val, key);"}]}