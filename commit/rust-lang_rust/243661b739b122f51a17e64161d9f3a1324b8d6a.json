{"sha": "243661b739b122f51a17e64161d9f3a1324b8d6a", "node_id": "C_kwDOAAsO6NoAKDI0MzY2MWI3MzliMTIyZjUxYTE3ZTY0MTYxZDlmM2ExMzI0YjhkNmE", "commit": {"author": {"name": "hrxi", "email": "hrrrxi@gmail.com", "date": "2022-11-12T21:26:09Z"}, "committer": {"name": "hrxi", "email": "hrrrxi@gmail.com", "date": "2022-11-12T21:26:09Z"}, "message": "Make it clear that `or_fun_call` can be a false-positive\n\nAlso move it to nursery so that the false-positives can be dealt with.\n\nCC #8574", "tree": {"sha": "a44421476451dff98013ee45e0ed7d4eee76763f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a44421476451dff98013ee45e0ed7d4eee76763f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/243661b739b122f51a17e64161d9f3a1324b8d6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/243661b739b122f51a17e64161d9f3a1324b8d6a", "html_url": "https://github.com/rust-lang/rust/commit/243661b739b122f51a17e64161d9f3a1324b8d6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/243661b739b122f51a17e64161d9f3a1324b8d6a/comments", "author": {"login": "hrxi", "id": 24882852, "node_id": "MDQ6VXNlcjI0ODgyODUy", "avatar_url": "https://avatars.githubusercontent.com/u/24882852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hrxi", "html_url": "https://github.com/hrxi", "followers_url": "https://api.github.com/users/hrxi/followers", "following_url": "https://api.github.com/users/hrxi/following{/other_user}", "gists_url": "https://api.github.com/users/hrxi/gists{/gist_id}", "starred_url": "https://api.github.com/users/hrxi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hrxi/subscriptions", "organizations_url": "https://api.github.com/users/hrxi/orgs", "repos_url": "https://api.github.com/users/hrxi/repos", "events_url": "https://api.github.com/users/hrxi/events{/privacy}", "received_events_url": "https://api.github.com/users/hrxi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hrxi", "id": 24882852, "node_id": "MDQ6VXNlcjI0ODgyODUy", "avatar_url": "https://avatars.githubusercontent.com/u/24882852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hrxi", "html_url": "https://github.com/hrxi", "followers_url": "https://api.github.com/users/hrxi/followers", "following_url": "https://api.github.com/users/hrxi/following{/other_user}", "gists_url": "https://api.github.com/users/hrxi/gists{/gist_id}", "starred_url": "https://api.github.com/users/hrxi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hrxi/subscriptions", "organizations_url": "https://api.github.com/users/hrxi/orgs", "repos_url": "https://api.github.com/users/hrxi/repos", "events_url": "https://api.github.com/users/hrxi/events{/privacy}", "received_events_url": "https://api.github.com/users/hrxi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f1698db60e309884e9a7ccdc85e5dad7b84a28a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f1698db60e309884e9a7ccdc85e5dad7b84a28a", "html_url": "https://github.com/rust-lang/rust/commit/4f1698db60e309884e9a7ccdc85e5dad7b84a28a"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "53f9c355c5d7331864534e3fbc2ca763f4b58300", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/243661b739b122f51a17e64161d9f3a1324b8d6a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243661b739b122f51a17e64161d9f3a1324b8d6a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=243661b739b122f51a17e64161d9f3a1324b8d6a", "patch": "@@ -832,32 +832,30 @@ declare_clippy_lint! {\n     /// etc. instead.\n     ///\n     /// ### Why is this bad?\n-    /// The function will always be called and potentially\n-    /// allocate an object acting as the default.\n+    /// The function will always be called. This is only bad if it allocates or\n+    /// does some non-trivial amount of work.\n     ///\n     /// ### Known problems\n-    /// If the function has side-effects, not calling it will\n-    /// change the semantic of the program, but you shouldn't rely on that anyway.\n+    /// If the function has side-effects, not calling it will change the\n+    /// semantic of the program, but you shouldn't rely on that.\n+    ///\n+    /// The lint also cannot figure out whether the function you call is\n+    /// actually expensive to call or not.\n     ///\n     /// ### Example\n     /// ```rust\n     /// # let foo = Some(String::new());\n-    /// foo.unwrap_or(String::new());\n+    /// foo.unwrap_or(String::from(\"empty\"));\n     /// ```\n     ///\n     /// Use instead:\n     /// ```rust\n     /// # let foo = Some(String::new());\n-    /// foo.unwrap_or_else(String::new);\n-    ///\n-    /// // or\n-    ///\n-    /// # let foo = Some(String::new());\n-    /// foo.unwrap_or_default();\n+    /// foo.unwrap_or_else(|| String::from(\"empty\"));\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub OR_FUN_CALL,\n-    perf,\n+    nursery,\n     \"using any `*or` method with a function call, which suggests `*or_else`\"\n }\n "}, {"sha": "a0c003f5b1eaca44b507a864d53344568b78fb9a", "filename": "tests/ui/unwrap_or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/243661b739b122f51a17e64161d9f3a1324b8d6a/tests%2Fui%2Funwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243661b739b122f51a17e64161d9f3a1324b8d6a/tests%2Fui%2Funwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_or.rs?ref=243661b739b122f51a17e64161d9f3a1324b8d6a", "patch": "@@ -1,4 +1,4 @@\n-#![warn(clippy::all)]\n+#![warn(clippy::all, clippy::or_fun_call)]\n \n fn main() {\n     let s = Some(String::from(\"test string\")).unwrap_or(\"Fail\".to_string()).len();"}]}