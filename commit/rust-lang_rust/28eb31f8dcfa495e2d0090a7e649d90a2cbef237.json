{"sha": "28eb31f8dcfa495e2d0090a7e649d90a2cbef237", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZWIzMWY4ZGNmYTQ5NWUyZDAwOTBhN2U2NDlkOTBhMmNiZWYyMzc=", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2019-11-30T03:50:24Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2019-11-30T04:17:11Z"}, "message": "Make libcore/unicode/tables.rs compatible with rustfmt", "tree": {"sha": "7bac8e6a8bcf6968b1b7124177d9701962709c1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bac8e6a8bcf6968b1b7124177d9701962709c1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28eb31f8dcfa495e2d0090a7e649d90a2cbef237", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAl3h7UcACgkQ+boUO5X/\nbYLS2A/9Hzhd+oiaNACEqS1wZIroKTeQjp5npANrMClwkRu5EO5evDBCmHuDNVEi\nK8P8Il4fso43xVdCaeVHyWc3Jg42j5haMBgM/m9xnCbCissG5kZ7xmetXWKucXN0\nYsmj99ZGD2Yaq6TplgLd9gEMIacXAktElY66qGEbHPocexuka/4qbnfSLCwHBLbD\nWkH71ATJN96R+hvlzubk/13XkaRRyT/esuKNyGSN5oV9hv6nOeV2QLPwlRaZCS6f\ngLDDmtWLpD0F9h1p1SgnvDRDfCZ0JUWoLRfemA5IMSnVrlA7UKaqvRBa/cK3mvc3\n1bjHQnQJyScu9NFW6ZMAavHDOOFLbtk7chDeo6a5dtqCd6ioqaMowcspnWH531Q5\nfh3/lNIeSdc7kHhbllaBLX9l10IssqUAvzVvHbEqXsn07be7+Aw2iUi/OPwVWQ2w\nhsLITJa7rURK4ad4rICkii4pdMpVG72fTxtORe5vU5cSMwfAKEJPjXLeV6pwLPGA\nM/bBlaJilf3847j4lGyVm6wtCCiAoAiXNVOMakekzukPuIg4TweWtuHUNed/nhs3\nySFrZ6K8AAgGwHVFFQiT/CJJaYmJaO2H1kohsghX63hVSV+PEtbPY7It0VCgxaTR\nvI98TTjBBtK/+9lqgHQXbat7Q61AwHy1s1bZzv05gWmG3y7sQ6s=\n=XhFM\n-----END PGP SIGNATURE-----", "payload": "tree 7bac8e6a8bcf6968b1b7124177d9701962709c1a\nparent f4cff277925d61c15e64cc2a05b37a3446a3a411\nauthor David Tolnay <dtolnay@gmail.com> 1575085824 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1575087431 -0800\n\nMake libcore/unicode/tables.rs compatible with rustfmt\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28eb31f8dcfa495e2d0090a7e649d90a2cbef237", "html_url": "https://github.com/rust-lang/rust/commit/28eb31f8dcfa495e2d0090a7e649d90a2cbef237", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28eb31f8dcfa495e2d0090a7e649d90a2cbef237/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4cff277925d61c15e64cc2a05b37a3446a3a411", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4cff277925d61c15e64cc2a05b37a3446a3a411", "html_url": "https://github.com/rust-lang/rust/commit/f4cff277925d61c15e64cc2a05b37a3446a3a411"}], "stats": {"total": 65, "additions": 36, "deletions": 29}, "files": [{"sha": "3fa125e8fea15fc9921ce35af4660c76554f619c", "filename": "src/libcore/unicode/tables.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/28eb31f8dcfa495e2d0090a7e649d90a2cbef237/src%2Flibcore%2Funicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28eb31f8dcfa495e2d0090a7e649d90a2cbef237/src%2Flibcore%2Funicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Ftables.rs?ref=28eb31f8dcfa495e2d0090a7e649d90a2cbef237", "patch": "@@ -2,19 +2,16 @@\n \n #![allow(missing_docs, non_upper_case_globals, non_snake_case, clippy::unreadable_literal)]\n \n-use crate::unicode::version::UnicodeVersion;\n use crate::unicode::bool_trie::{BoolTrie, SmallBoolTrie};\n+use crate::unicode::version::UnicodeVersion;\n \n /// The version of [Unicode](http://www.unicode.org/) that the Unicode parts of\n /// `char` and `str` methods are based on.\n #[unstable(feature = \"unicode_version\", issue = \"49726\")]\n-pub const UNICODE_VERSION: UnicodeVersion = UnicodeVersion {\n-    major: 12,\n-    minor: 1,\n-    micro: 0,\n-    _priv: (),\n-};\n+pub const UNICODE_VERSION: UnicodeVersion =\n+    UnicodeVersion { major: 12, minor: 1, micro: 0, _priv: () };\n pub(crate) mod general_category {\n+    #[rustfmt::skip]\n     const Cc_table: &super::SmallBoolTrie = &super::SmallBoolTrie {\n         r1: &[\n             0, 1, 0\n@@ -28,6 +25,7 @@ pub(crate) mod general_category {\n         Cc_table.lookup(c)\n     }\n \n+    #[rustfmt::skip]\n     const N_table: &super::BoolTrie = &super::BoolTrie {\n         r1: [\n             0x03ff000000000000, 0x0000000000000000, 0x720c000000000000, 0x0000000000000000,\n@@ -138,10 +136,10 @@ pub(crate) mod general_category {\n     pub fn N(c: char) -> bool {\n         N_table.lookup(c)\n     }\n-\n }\n \n pub(crate) mod derived_property {\n+    #[rustfmt::skip]\n     const Alphabetic_table: &super::BoolTrie = &super::BoolTrie {\n         r1: [\n             0x0000000000000000, 0x07fffffe07fffffe, 0x0420040000000000, 0xff7fffffff7fffff,\n@@ -327,6 +325,7 @@ pub(crate) mod derived_property {\n         Alphabetic_table.lookup(c)\n     }\n \n+    #[rustfmt::skip]\n     const Case_Ignorable_table: &super::BoolTrie = &super::BoolTrie {\n         r1: [\n             0x0400408000000000, 0x0000000140000000, 0x0190a10000000000, 0x0000000000000000,\n@@ -464,6 +463,7 @@ pub(crate) mod derived_property {\n         Case_Ignorable_table.lookup(c)\n     }\n \n+    #[rustfmt::skip]\n     const Cased_table: &super::BoolTrie = &super::BoolTrie {\n         r1: [\n             0x0000000000000000, 0x07fffffe07fffffe, 0x0420040000000000, 0xff7fffffff7fffff,\n@@ -565,6 +565,7 @@ pub(crate) mod derived_property {\n         Cased_table.lookup(c)\n     }\n \n+    #[rustfmt::skip]\n     const Grapheme_Extend_table: &super::BoolTrie = &super::BoolTrie {\n         r1: [\n             0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,\n@@ -689,6 +690,7 @@ pub(crate) mod derived_property {\n         Grapheme_Extend_table.lookup(c)\n     }\n \n+    #[rustfmt::skip]\n     const Lowercase_table: &super::BoolTrie = &super::BoolTrie {\n         r1: [\n             0x0000000000000000, 0x07fffffe00000000, 0x0420040000000000, 0xff7fffff80000000,\n@@ -789,6 +791,7 @@ pub(crate) mod derived_property {\n         Lowercase_table.lookup(c)\n     }\n \n+    #[rustfmt::skip]\n     const Uppercase_table: &super::BoolTrie = &super::BoolTrie {\n         r1: [\n             0x0000000000000000, 0x0000000007fffffe, 0x0000000000000000, 0x000000007f7fffff,\n@@ -889,10 +892,10 @@ pub(crate) mod derived_property {\n     pub fn Uppercase(c: char) -> bool {\n         Uppercase_table.lookup(c)\n     }\n-\n }\n \n pub(crate) mod property {\n+    #[rustfmt::skip]\n     const White_Space_table: &super::SmallBoolTrie = &super::SmallBoolTrie {\n         r1: &[\n             0, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n@@ -912,20 +915,19 @@ pub(crate) mod property {\n     pub fn White_Space(c: char) -> bool {\n         White_Space_table.lookup(c)\n     }\n-\n }\n \n pub(crate) mod conversions {\n     pub fn to_lower(c: char) -> [char; 3] {\n         match bsearch_case_table(c, to_lowercase_table) {\n-            None        => [c, '\\0', '\\0'],\n+            None => [c, '\\0', '\\0'],\n             Some(index) => to_lowercase_table[index].1,\n         }\n     }\n \n     pub fn to_upper(c: char) -> [char; 3] {\n         match bsearch_case_table(c, to_uppercase_table) {\n-            None        => [c, '\\0', '\\0'],\n+            None => [c, '\\0', '\\0'],\n             Some(index) => to_uppercase_table[index].1,\n         }\n     }\n@@ -934,6 +936,7 @@ pub(crate) mod conversions {\n         table.binary_search_by(|&(key, _)| key.cmp(&c)).ok()\n     }\n \n+    #[rustfmt::skip]\n     const to_lowercase_table: &[(char, [char; 3])] = &[\n         ('\\u{41}', ['\\u{61}', '\\0', '\\0']), ('\\u{42}', ['\\u{62}', '\\0', '\\0']), ('\\u{43}',\n         ['\\u{63}', '\\0', '\\0']), ('\\u{44}', ['\\u{64}', '\\0', '\\0']), ('\\u{45}', ['\\u{65}', '\\0',\n@@ -1558,6 +1561,7 @@ pub(crate) mod conversions {\n         ('\\u{1e920}', ['\\u{1e942}', '\\0', '\\0']), ('\\u{1e921}', ['\\u{1e943}', '\\0', '\\0'])\n     ];\n \n+    #[rustfmt::skip]\n     const to_uppercase_table: &[(char, [char; 3])] = &[\n         ('\\u{61}', ['\\u{41}', '\\0', '\\0']), ('\\u{62}', ['\\u{42}', '\\0', '\\0']), ('\\u{63}',\n         ['\\u{43}', '\\0', '\\0']), ('\\u{64}', ['\\u{44}', '\\0', '\\0']), ('\\u{65}', ['\\u{45}', '\\0',\n@@ -2228,5 +2232,4 @@ pub(crate) mod conversions {\n         ('\\u{1e940}', ['\\u{1e91e}', '\\0', '\\0']), ('\\u{1e941}', ['\\u{1e91f}', '\\0', '\\0']),\n         ('\\u{1e942}', ['\\u{1e920}', '\\0', '\\0']), ('\\u{1e943}', ['\\u{1e921}', '\\0', '\\0'])\n     ];\n-\n }"}, {"sha": "97df92a56da66ea2b0527a35d4a5eb28f6457390", "filename": "src/libcore/unicode/unicode.py", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/28eb31f8dcfa495e2d0090a7e649d90a2cbef237/src%2Flibcore%2Funicode%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/28eb31f8dcfa495e2d0090a7e649d90a2cbef237/src%2Flibcore%2Funicode%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Funicode.py?ref=28eb31f8dcfa495e2d0090a7e649d90a2cbef237", "patch": "@@ -81,8 +81,8 @@ class UnicodeFiles(object):\n \n #![allow(missing_docs, non_upper_case_globals, non_snake_case, clippy::unreadable_literal)]\n \n-use crate::unicode::version::UnicodeVersion;\n use crate::unicode::bool_trie::{{BoolTrie, SmallBoolTrie}};\n+use crate::unicode::version::UnicodeVersion;\n \"\"\".format(year=datetime.datetime.now().year)\n \n # Mapping taken from Table 12 from:\n@@ -555,6 +555,8 @@ def generate_table(\n     if is_pub:\n         pub_string = \"pub \"\n \n+    yield \"\\n\"\n+    yield \"    #[rustfmt::skip]\\n\"\n     yield \"    %sconst %s: %s = &[\\n\" % (pub_string, name, decl_type)\n \n     data = []\n@@ -568,7 +570,7 @@ def generate_table(\n     for table_line in generate_table_lines(\"\".join(data).split(\",\"), 8):\n         yield table_line\n \n-    yield \"\\n    ];\\n\\n\"\n+    yield \"\\n    ];\\n\"\n \n \n def compute_trie(raw_data, chunk_size):\n@@ -634,6 +636,9 @@ def generate_bool_trie(name, codepoint_ranges, is_pub=False):\n     pub_string = \"\"\n     if is_pub:\n         pub_string = \"pub \"\n+\n+    yield \"\\n\"\n+    yield \"    #[rustfmt::skip]\\n\"\n     yield \"    %sconst %s: &super::BoolTrie = &super::BoolTrie {\\n\" % (pub_string, name)\n     yield \"        r1: [\\n\"\n     data = (\"0x%016x\" % chunk for chunk in chunks[:0x800 // chunk_size])\n@@ -678,7 +683,7 @@ def generate_bool_trie(name, codepoint_ranges, is_pub=False):\n         yield fragment\n     yield \"\\n        ],\\n\"\n \n-    yield \"    };\\n\\n\"\n+    yield \"    };\\n\"\n \n \n def generate_small_bool_trie(name, codepoint_ranges, is_pub=False):\n@@ -700,6 +705,8 @@ def generate_small_bool_trie(name, codepoint_ranges, is_pub=False):\n     if is_pub:\n         pub_string = \"pub \"\n \n+    yield \"\\n\"\n+    yield \"    #[rustfmt::skip]\\n\"\n     yield (\"    %sconst %s: &super::SmallBoolTrie = &super::SmallBoolTrie {\\n\"\n            % (pub_string, name))\n \n@@ -717,7 +724,7 @@ def generate_small_bool_trie(name, codepoint_ranges, is_pub=False):\n         yield fragment\n     yield \"\\n        ],\\n\"\n \n-    yield \"    };\\n\\n\"\n+    yield \"    };\\n\"\n \n \n def generate_property_module(mod, grouped_categories, category_subset):\n@@ -726,7 +733,7 @@ def generate_property_module(mod, grouped_categories, category_subset):\n     Generate Rust code for module defining properties.\n     \"\"\"\n \n-    yield \"pub(crate) mod %s {\\n\" % mod\n+    yield \"pub(crate) mod %s {\" % mod\n     for cat in sorted(category_subset):\n         if cat in (\"Cc\", \"White_Space\"):\n             generator = generate_small_bool_trie(\"%s_table\" % cat, grouped_categories[cat])\n@@ -736,9 +743,10 @@ def generate_property_module(mod, grouped_categories, category_subset):\n         for fragment in generator:\n             yield fragment\n \n+        yield \"\\n\"\n         yield \"    pub fn %s(c: char) -> bool {\\n\" % cat\n         yield \"        %s_table.lookup(c)\\n\" % cat\n-        yield \"    }\\n\\n\"\n+        yield \"    }\\n\"\n \n     yield \"}\\n\\n\"\n \n@@ -753,21 +761,21 @@ def generate_conversions_module(unicode_data):\n     yield \"\"\"\n     pub fn to_lower(c: char) -> [char; 3] {\n         match bsearch_case_table(c, to_lowercase_table) {\n-            None        => [c, '\\\\0', '\\\\0'],\n+            None => [c, '\\\\0', '\\\\0'],\n             Some(index) => to_lowercase_table[index].1,\n         }\n     }\n \n     pub fn to_upper(c: char) -> [char; 3] {\n         match bsearch_case_table(c, to_uppercase_table) {\n-            None        => [c, '\\\\0', '\\\\0'],\n+            None => [c, '\\\\0', '\\\\0'],\n             Some(index) => to_uppercase_table[index].1,\n         }\n     }\n \n     fn bsearch_case_table(c: char, table: &[(char, [char; 3])]) -> Option<usize> {\n         table.binary_search_by(|&(key, _)| key.cmp(&c)).ok()\n-    }\\n\\n\"\"\"\n+    }\\n\"\"\"\n \n     decl_type = \"&[(char, [char; 3])]\"\n     format_conversion = lambda x: \"({},[{},{},{}])\".format(*(\n@@ -827,13 +835,9 @@ def main():\n     /// The version of [Unicode](http://www.unicode.org/) that the Unicode parts of\n     /// `char` and `str` methods are based on.\n     #[unstable(feature = \"unicode_version\", issue = \"49726\")]\n-    pub const UNICODE_VERSION: UnicodeVersion = UnicodeVersion {{\n-        major: {version.major},\n-        minor: {version.minor},\n-        micro: {version.micro},\n-        _priv: (),\n-    }};\n-    \"\"\").format(version=unicode_version)\n+    pub const UNICODE_VERSION: UnicodeVersion =\n+        UnicodeVersion {{ major: {v.major}, minor: {v.minor}, micro: {v.micro}, _priv: () }};\n+    \"\"\").format(v=unicode_version)\n     buf.write(unicode_version_notice)\n \n     get_path = lambda f: get_unicode_file_path(unicode_version, f)"}]}