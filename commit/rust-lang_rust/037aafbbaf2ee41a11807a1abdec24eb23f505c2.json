{"sha": "037aafbbaf2ee41a11807a1abdec24eb23f505c2", "node_id": "C_kwDOAAsO6NoAKDAzN2FhZmJiYWYyZWU0MWExMTgwN2ExYWJkZWMyNGViMjNmNTA1YzI", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-30T17:35:08Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-30T17:35:08Z"}, "message": "Fix simd type validation", "tree": {"sha": "025e5c339bc1605d5211d59f6548d0d9c2828c1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/025e5c339bc1605d5211d59f6548d0d9c2828c1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/037aafbbaf2ee41a11807a1abdec24eb23f505c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/037aafbbaf2ee41a11807a1abdec24eb23f505c2", "html_url": "https://github.com/rust-lang/rust/commit/037aafbbaf2ee41a11807a1abdec24eb23f505c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/037aafbbaf2ee41a11807a1abdec24eb23f505c2/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb1b5cdde26cc5055fb6b3f1a5ff22a1e16db72b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb1b5cdde26cc5055fb6b3f1a5ff22a1e16db72b", "html_url": "https://github.com/rust-lang/rust/commit/bb1b5cdde26cc5055fb6b3f1a5ff22a1e16db72b"}], "stats": {"total": 227, "additions": 161, "deletions": 66}, "files": [{"sha": "644d379d0fad43a8a7b3f4ba2b4632f2c53bbf52", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 161, "deletions": 66, "changes": 227, "blob_url": "https://github.com/rust-lang/rust/blob/037aafbbaf2ee41a11807a1abdec24eb23f505c2/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/037aafbbaf2ee41a11807a1abdec24eb23f505c2/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=037aafbbaf2ee41a11807a1abdec24eb23f505c2", "patch": "@@ -6,16 +6,23 @@ use rustc_span::Symbol;\n use super::*;\n use crate::prelude::*;\n \n-fn validate_simd_type(fx: &mut FunctionCx<'_, '_, '_>, intrinsic: Symbol, span: Span, ty: Ty<'_>) {\n-    if !ty.is_simd() {\n-        fx.tcx.sess.span_err(span, &format!(\"invalid monomorphization of `{}` intrinsic: expected SIMD input type, found non-SIMD `{}`\", intrinsic, ty));\n-        // Prevent verifier error\n-        crate::trap::trap_unreachable(fx, \"compilation should not have succeeded\");\n+fn report_simd_type_validation_error(\n+    fx: &mut FunctionCx<'_, '_, '_>,\n+    intrinsic: Symbol,\n+    span: Span,\n+    ty: Ty<'_>,\n+) {\n+    fx.tcx.sess.span_err(span, &format!(\"invalid monomorphization of `{}` intrinsic: expected SIMD input type, found non-SIMD `{}`\", intrinsic, ty));\n+    // Prevent verifier error\n+    crate::trap::trap_unreachable(fx, \"compilation should not have succeeded\");\n+}\n+\n+macro simd_cmp($fx:expr, $intrinsic:ident, $span:ident, $cc_u:ident|$cc_s:ident|$cc_f:ident($x:ident, $y:ident) -> $ret:ident) {\n+    if !$x.layout().ty.is_simd() {\n+        report_simd_type_validation_error($fx, $intrinsic, $span, $x.layout().ty);\n         return;\n     }\n-}\n \n-macro simd_cmp($fx:expr, $cc_u:ident|$cc_s:ident|$cc_f:ident($x:ident, $y:ident) -> $ret:ident) {\n     // FIXME use vector instructions when possible\n     simd_pair_for_each_lane($fx, $x, $y, $ret, &|fx, lane_ty, res_lane_ty, x_lane, y_lane| {\n         let res_lane = match lane_ty.kind() {\n@@ -32,7 +39,12 @@ macro simd_cmp($fx:expr, $cc_u:ident|$cc_s:ident|$cc_f:ident($x:ident, $y:ident)\n     });\n }\n \n-macro simd_int_binop($fx:expr, $op_u:ident|$op_s:ident($x:ident, $y:ident) -> $ret:ident) {\n+macro simd_int_binop($fx:expr, $intrinsic:ident, $span:ident, $op_u:ident|$op_s:ident($x:ident, $y:ident) -> $ret:ident) {\n+    if !$x.layout().ty.is_simd() {\n+        report_simd_type_validation_error($fx, $intrinsic, $span, $x.layout().ty);\n+        return;\n+    }\n+\n     // FIXME use vector instructions when possible\n     simd_pair_for_each_lane($fx, $x, $y, $ret, &|fx, lane_ty, _ret_lane_ty, x_lane, y_lane| {\n         match lane_ty.kind() {\n@@ -43,7 +55,12 @@ macro simd_int_binop($fx:expr, $op_u:ident|$op_s:ident($x:ident, $y:ident) -> $r\n     });\n }\n \n-macro simd_int_flt_binop($fx:expr, $op_u:ident|$op_s:ident|$op_f:ident($x:ident, $y:ident) -> $ret:ident) {\n+macro simd_int_flt_binop($fx:expr, $intrinsic:ident, $span:ident, $op_u:ident|$op_s:ident|$op_f:ident($x:ident, $y:ident) -> $ret:ident) {\n+    if !$x.layout().ty.is_simd() {\n+        report_simd_type_validation_error($fx, $intrinsic, $span, $x.layout().ty);\n+        return;\n+    }\n+\n     // FIXME use vector instructions when possible\n     simd_pair_for_each_lane($fx, $x, $y, $ret, &|fx, lane_ty, _ret_lane_ty, x_lane, y_lane| {\n         match lane_ty.kind() {\n@@ -55,7 +72,12 @@ macro simd_int_flt_binop($fx:expr, $op_u:ident|$op_s:ident|$op_f:ident($x:ident,\n     });\n }\n \n-macro simd_flt_binop($fx:expr, $op:ident($x:ident, $y:ident) -> $ret:ident) {\n+macro simd_flt_binop($fx:expr, $intrinsic:ident, $span:ident, $op:ident($x:ident, $y:ident) -> $ret:ident) {\n+    if !$x.layout().ty.is_simd() {\n+        report_simd_type_validation_error($fx, $intrinsic, $span, $x.layout().ty);\n+        return;\n+    }\n+\n     // FIXME use vector instructions when possible\n     simd_pair_for_each_lane($fx, $x, $y, $ret, &|fx, lane_ty, _ret_lane_ty, x_lane, y_lane| {\n         match lane_ty.kind() {\n@@ -80,7 +102,11 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n \n         simd_cast, (c a) {\n-            validate_simd_type(fx, intrinsic, span, a.layout().ty);\n+            if !a.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n+                return;\n+            }\n+\n             simd_for_each_lane(fx, a, ret, &|fx, lane_ty, ret_lane_ty, lane| {\n                 let ret_lane_clif_ty = fx.clif_type(ret_lane_ty).unwrap();\n \n@@ -92,37 +118,36 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n \n         simd_eq, (c x, c y) {\n-            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n-            simd_cmp!(fx, Equal|Equal|Equal(x, y) -> ret);\n+            simd_cmp!(fx, intrinsic, span, Equal|Equal|Equal(x, y) -> ret);\n         };\n         simd_ne, (c x, c y) {\n-            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n-            simd_cmp!(fx, NotEqual|NotEqual|NotEqual(x, y) -> ret);\n+            simd_cmp!(fx, intrinsic, span, NotEqual|NotEqual|NotEqual(x, y) -> ret);\n         };\n         simd_lt, (c x, c y) {\n-            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n-            simd_cmp!(fx, UnsignedLessThan|SignedLessThan|LessThan(x, y) -> ret);\n+            simd_cmp!(fx, intrinsic, span, UnsignedLessThan|SignedLessThan|LessThan(x, y) -> ret);\n         };\n         simd_le, (c x, c y) {\n-            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n-            simd_cmp!(fx, UnsignedLessThanOrEqual|SignedLessThanOrEqual|LessThanOrEqual(x, y) -> ret);\n+            simd_cmp!(fx, intrinsic, span, UnsignedLessThanOrEqual|SignedLessThanOrEqual|LessThanOrEqual(x, y) -> ret);\n         };\n         simd_gt, (c x, c y) {\n-            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n-            simd_cmp!(fx, UnsignedGreaterThan|SignedGreaterThan|GreaterThan(x, y) -> ret);\n+            simd_cmp!(fx, intrinsic, span, UnsignedGreaterThan|SignedGreaterThan|GreaterThan(x, y) -> ret);\n         };\n         simd_ge, (c x, c y) {\n-            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n             simd_cmp!(\n                 fx,\n+                intrinsic,\n+                span,\n                 UnsignedGreaterThanOrEqual|SignedGreaterThanOrEqual|GreaterThanOrEqual\n                 (x, y) -> ret\n             );\n         };\n \n         // simd_shuffle32<T, U>(x: T, y: T, idx: [u32; 32]) -> U\n         _ if intrinsic.as_str().starts_with(\"simd_shuffle\"), (c x, c y, o idx) {\n-            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n+            if !x.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, x.layout().ty);\n+                return;\n+            }\n \n             // If this intrinsic is the older \"simd_shuffleN\" form, simply parse the integer.\n             // If there is no suffix, use the index array length.\n@@ -224,7 +249,11 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n \n         simd_extract, (c v, o idx) {\n-            validate_simd_type(fx, intrinsic, span, v.layout().ty);\n+            if !v.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n+                return;\n+            }\n+\n             let idx_const = if let Some(idx_const) = crate::constant::mir_operand_get_const_val(fx, idx) {\n                 idx_const\n             } else {\n@@ -252,7 +281,11 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n \n         simd_neg, (c a) {\n-            validate_simd_type(fx, intrinsic, span, a.layout().ty);\n+            if !a.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n+                return;\n+            }\n+\n             simd_for_each_lane(fx, a, ret, &|fx, lane_ty, _ret_lane_ty, lane| {\n                 match lane_ty.kind() {\n                     ty::Int(_) => fx.bcx.ins().ineg(lane),\n@@ -263,37 +296,45 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n \n         simd_fabs, (c a) {\n-            validate_simd_type(fx, intrinsic, span, a.layout().ty);\n+            if !a.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n+                return;\n+            }\n+\n             simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _ret_lane_ty, lane| {\n                 fx.bcx.ins().fabs(lane)\n             });\n         };\n \n         simd_fsqrt, (c a) {\n-            validate_simd_type(fx, intrinsic, span, a.layout().ty);\n+            if !a.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n+                return;\n+            }\n+\n             simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _ret_lane_ty, lane| {\n                 fx.bcx.ins().sqrt(lane)\n             });\n         };\n \n         simd_add, (c x, c y) {\n-            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n-            simd_int_flt_binop!(fx, iadd|iadd|fadd(x, y) -> ret);\n+            simd_int_flt_binop!(fx, intrinsic, span, iadd|iadd|fadd(x, y) -> ret);\n         };\n         simd_sub, (c x, c y) {\n-            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n-            simd_int_flt_binop!(fx, isub|isub|fsub(x, y) -> ret);\n+            simd_int_flt_binop!(fx, intrinsic, span, isub|isub|fsub(x, y) -> ret);\n         };\n         simd_mul, (c x, c y) {\n-            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n-            simd_int_flt_binop!(fx, imul|imul|fmul(x, y) -> ret);\n+            simd_int_flt_binop!(fx, intrinsic, span, imul|imul|fmul(x, y) -> ret);\n         };\n         simd_div, (c x, c y) {\n-            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n-            simd_int_flt_binop!(fx, udiv|sdiv|fdiv(x, y) -> ret);\n+            simd_int_flt_binop!(fx, intrinsic, span, udiv|sdiv|fdiv(x, y) -> ret);\n         };\n         simd_rem, (c x, c y) {\n-            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n+            if !x.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, x.layout().ty);\n+                return;\n+            }\n+\n             simd_pair_for_each_lane(fx, x, y, ret, &|fx, lane_ty, _ret_lane_ty, x_lane, y_lane| {\n                 match lane_ty.kind() {\n                     ty::Uint(_) => fx.bcx.ins().urem(x_lane, y_lane),\n@@ -315,28 +356,26 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             });\n         };\n         simd_shl, (c x, c y) {\n-            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n-            simd_int_binop!(fx, ishl|ishl(x, y) -> ret);\n+            simd_int_binop!(fx, intrinsic, span, ishl|ishl(x, y) -> ret);\n         };\n         simd_shr, (c x, c y) {\n-            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n-            simd_int_binop!(fx, ushr|sshr(x, y) -> ret);\n+            simd_int_binop!(fx, intrinsic, span, ushr|sshr(x, y) -> ret);\n         };\n         simd_and, (c x, c y) {\n-            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n-            simd_int_binop!(fx, band|band(x, y) -> ret);\n+            simd_int_binop!(fx, intrinsic, span, band|band(x, y) -> ret);\n         };\n         simd_or, (c x, c y) {\n-            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n-            simd_int_binop!(fx, bor|bor(x, y) -> ret);\n+            simd_int_binop!(fx, intrinsic, span, bor|bor(x, y) -> ret);\n         };\n         simd_xor, (c x, c y) {\n-            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n-            simd_int_binop!(fx, bxor|bxor(x, y) -> ret);\n+            simd_int_binop!(fx, intrinsic, span, bxor|bxor(x, y) -> ret);\n         };\n \n         simd_fma, (c a, c b, c c) {\n-            validate_simd_type(fx, intrinsic, span, a.layout().ty);\n+            if !a.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n+                return;\n+            }\n             assert_eq!(a.layout(), b.layout());\n             assert_eq!(a.layout(), c.layout());\n             let layout = a.layout();\n@@ -359,16 +398,18 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n \n         simd_fmin, (c x, c y) {\n-            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n-            simd_flt_binop!(fx, fmin(x, y) -> ret);\n+            simd_flt_binop!(fx, intrinsic, span, fmin(x, y) -> ret);\n         };\n         simd_fmax, (c x, c y) {\n-            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n-            simd_flt_binop!(fx, fmax(x, y) -> ret);\n+            simd_flt_binop!(fx, intrinsic, span, fmax(x, y) -> ret);\n         };\n \n         simd_round, (c a) {\n-            validate_simd_type(fx, intrinsic, span, a.layout().ty);\n+            if !a.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n+                return;\n+            }\n+\n             simd_for_each_lane(fx, a, ret, &|fx, lane_ty, _ret_lane_ty, lane| {\n                 match lane_ty.kind() {\n                     ty::Float(FloatTy::F32) => fx.lib_call(\n@@ -388,26 +429,42 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             });\n         };\n         simd_ceil, (c a) {\n-            validate_simd_type(fx, intrinsic, span, a.layout().ty);\n+            if !a.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n+                return;\n+            }\n+\n             simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _ret_lane_ty, lane| {\n                 fx.bcx.ins().ceil(lane)\n             });\n         };\n         simd_floor, (c a) {\n-            validate_simd_type(fx, intrinsic, span, a.layout().ty);\n+            if !a.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n+                return;\n+            }\n+\n             simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _ret_lane_ty, lane| {\n                 fx.bcx.ins().floor(lane)\n             });\n         };\n         simd_trunc, (c a) {\n-            validate_simd_type(fx, intrinsic, span, a.layout().ty);\n+            if !a.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n+                return;\n+            }\n+\n             simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _ret_lane_ty, lane| {\n                 fx.bcx.ins().trunc(lane)\n             });\n         };\n \n         simd_reduce_add_ordered | simd_reduce_add_unordered, (c v, v acc) {\n-            validate_simd_type(fx, intrinsic, span, v.layout().ty);\n+            if !v.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n+                return;\n+            }\n+\n             simd_reduce(fx, v, Some(acc), ret, &|fx, lane_ty, a, b| {\n                 if lane_ty.is_floating_point() {\n                     fx.bcx.ins().fadd(a, b)\n@@ -418,7 +475,11 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n \n         simd_reduce_mul_ordered | simd_reduce_mul_unordered, (c v, v acc) {\n-            validate_simd_type(fx, intrinsic, span, v.layout().ty);\n+            if !v.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n+                return;\n+            }\n+\n             simd_reduce(fx, v, Some(acc), ret, &|fx, lane_ty, a, b| {\n                 if lane_ty.is_floating_point() {\n                     fx.bcx.ins().fmul(a, b)\n@@ -429,32 +490,56 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n \n         simd_reduce_all, (c v) {\n-            validate_simd_type(fx, intrinsic, span, v.layout().ty);\n+            if !v.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n+                return;\n+            }\n+\n             simd_reduce_bool(fx, v, ret, &|fx, a, b| fx.bcx.ins().band(a, b));\n         };\n \n         simd_reduce_any, (c v) {\n-            validate_simd_type(fx, intrinsic, span, v.layout().ty);\n+            if !v.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n+                return;\n+            }\n+\n             simd_reduce_bool(fx, v, ret, &|fx, a, b| fx.bcx.ins().bor(a, b));\n         };\n \n         simd_reduce_and, (c v) {\n-            validate_simd_type(fx, intrinsic, span, v.layout().ty);\n+            if !v.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n+                return;\n+            }\n+\n             simd_reduce(fx, v, None, ret, &|fx, _ty, a, b| fx.bcx.ins().band(a, b));\n         };\n \n         simd_reduce_or, (c v) {\n-            validate_simd_type(fx, intrinsic, span, v.layout().ty);\n+            if !v.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n+                return;\n+            }\n+\n             simd_reduce(fx, v, None, ret, &|fx, _ty, a, b| fx.bcx.ins().bor(a, b));\n         };\n \n         simd_reduce_xor, (c v) {\n-            validate_simd_type(fx, intrinsic, span, v.layout().ty);\n+            if !v.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n+                return;\n+            }\n+\n             simd_reduce(fx, v, None, ret, &|fx, _ty, a, b| fx.bcx.ins().bxor(a, b));\n         };\n \n         simd_reduce_min, (c v) {\n-            validate_simd_type(fx, intrinsic, span, v.layout().ty);\n+            if !v.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n+                return;\n+            }\n+\n             simd_reduce(fx, v, None, ret, &|fx, ty, a, b| {\n                 let lt = match ty.kind() {\n                     ty::Int(_) => fx.bcx.ins().icmp(IntCC::SignedLessThan, a, b),\n@@ -467,7 +552,11 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n \n         simd_reduce_max, (c v) {\n-            validate_simd_type(fx, intrinsic, span, v.layout().ty);\n+            if !v.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n+                return;\n+            }\n+\n             simd_reduce(fx, v, None, ret, &|fx, ty, a, b| {\n                 let gt = match ty.kind() {\n                     ty::Int(_) => fx.bcx.ins().icmp(IntCC::SignedGreaterThan, a, b),\n@@ -480,8 +569,14 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n \n         simd_select, (c m, c a, c b) {\n-            validate_simd_type(fx, intrinsic, span, m.layout().ty);\n-            validate_simd_type(fx, intrinsic, span, a.layout().ty);\n+            if !m.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, m.layout().ty);\n+                return;\n+            }\n+            if !a.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n+                return;\n+            }\n             assert_eq!(a.layout(), b.layout());\n \n             let (lane_count, lane_ty) = a.layout().ty.simd_size_and_type(fx.tcx);"}]}