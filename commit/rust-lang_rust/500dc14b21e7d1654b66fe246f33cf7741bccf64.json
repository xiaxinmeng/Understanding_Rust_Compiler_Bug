{"sha": "500dc14b21e7d1654b66fe246f33cf7741bccf64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMGRjMTRiMjFlN2QxNjU0YjY2ZmUyNDZmMzNjZjc3NDFiY2NmNjQ=", "commit": {"author": {"name": "m4b", "email": "m4b.github.io@gmail.com", "date": "2017-12-20T05:18:24Z"}, "committer": {"name": "m4b", "email": "m4b.github.io@gmail.com", "date": "2017-12-20T05:18:24Z"}, "message": "dwarf: do not set linkage_name for no mangle statics, and do not have a scope. ref #33172", "tree": {"sha": "9fdd65a4106b6652561f3321dc764b1b03939887", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fdd65a4106b6652561f3321dc764b1b03939887"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/500dc14b21e7d1654b66fe246f33cf7741bccf64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/500dc14b21e7d1654b66fe246f33cf7741bccf64", "html_url": "https://github.com/rust-lang/rust/commit/500dc14b21e7d1654b66fe246f33cf7741bccf64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/500dc14b21e7d1654b66fe246f33cf7741bccf64/comments", "author": {"login": "m4b", "id": 1920204, "node_id": "MDQ6VXNlcjE5MjAyMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1920204?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m4b", "html_url": "https://github.com/m4b", "followers_url": "https://api.github.com/users/m4b/followers", "following_url": "https://api.github.com/users/m4b/following{/other_user}", "gists_url": "https://api.github.com/users/m4b/gists{/gist_id}", "starred_url": "https://api.github.com/users/m4b/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m4b/subscriptions", "organizations_url": "https://api.github.com/users/m4b/orgs", "repos_url": "https://api.github.com/users/m4b/repos", "events_url": "https://api.github.com/users/m4b/events{/privacy}", "received_events_url": "https://api.github.com/users/m4b/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m4b", "id": 1920204, "node_id": "MDQ6VXNlcjE5MjAyMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1920204?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m4b", "html_url": "https://github.com/m4b", "followers_url": "https://api.github.com/users/m4b/followers", "following_url": "https://api.github.com/users/m4b/following{/other_user}", "gists_url": "https://api.github.com/users/m4b/gists{/gist_id}", "starred_url": "https://api.github.com/users/m4b/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m4b/subscriptions", "organizations_url": "https://api.github.com/users/m4b/orgs", "repos_url": "https://api.github.com/users/m4b/repos", "events_url": "https://api.github.com/users/m4b/events{/privacy}", "received_events_url": "https://api.github.com/users/m4b/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f351415e53b9214d9a536f84f232a58f46698b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f351415e53b9214d9a536f84f232a58f46698b6", "html_url": "https://github.com/rust-lang/rust/commit/2f351415e53b9214d9a536f84f232a58f46698b6"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "6602a31b5c5b76209ed5036623590b5e514cecbe", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/500dc14b21e7d1654b66fe246f33cf7741bccf64/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500dc14b21e7d1654b66fe246f33cf7741bccf64/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=500dc14b21e7d1654b66fe246f33cf7741bccf64", "patch": "@@ -42,7 +42,7 @@ use std::ffi::CString;\n use std::fmt::Write;\n use std::ptr;\n use std::path::{Path, PathBuf};\n-use syntax::ast;\n+use syntax::{ast, attr};\n use syntax::symbol::{Interner, InternedString, Symbol};\n use syntax_pos::{self, Span, FileName};\n \n@@ -1643,8 +1643,10 @@ pub fn create_global_var_metadata(cx: &CrateContext,\n     }\n \n     let tcx = cx.tcx();\n-\n     let node_def_id = tcx.hir.local_def_id(node_id);\n+    let no_mangle = attr::contains_name(&tcx.get_attrs(node_def_id), \"no_mangle\");\n+    // We may want to remove the namespace scope if we're in an extern block, see:\n+    // https://github.com/rust-lang/rust/pull/46457#issuecomment-351750952\n     let var_scope = get_namespace_for_item(cx, node_def_id);\n     let span = cx.tcx().def_span(node_def_id);\n \n@@ -1659,18 +1661,24 @@ pub fn create_global_var_metadata(cx: &CrateContext,\n     let variable_type = common::def_ty(cx.tcx(), node_def_id, Substs::empty());\n     let type_metadata = type_metadata(cx, variable_type, span);\n     let var_name = tcx.item_name(node_def_id).to_string();\n-    let linkage_name = mangled_name_of_item(cx, node_def_id, \"\");\n-\n     let var_name = CString::new(var_name).unwrap();\n-    let linkage_name = CString::new(linkage_name).unwrap();\n+    let linkage_name = if no_mangle {\n+        None\n+    } else {\n+        let linkage_name = mangled_name_of_item(cx, node_def_id, \"\");\n+        Some(CString::new(linkage_name).unwrap())\n+    };\n \n     let global_align = cx.align_of(variable_type);\n \n     unsafe {\n         llvm::LLVMRustDIBuilderCreateStaticVariable(DIB(cx),\n                                                     var_scope,\n                                                     var_name.as_ptr(),\n-                                                    linkage_name.as_ptr(),\n+                                                    // If null, linkage_name field is omitted,\n+                                                    // which is what we want for no_mangle statics\n+                                                    linkage_name.as_ref()\n+                                                     .map_or(ptr::null(), |name| name.as_ptr()),\n                                                     file_metadata,\n                                                     line_number,\n                                                     type_metadata,"}]}