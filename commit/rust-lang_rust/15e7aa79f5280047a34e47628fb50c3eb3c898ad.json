{"sha": "15e7aa79f5280047a34e47628fb50c3eb3c898ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZTdhYTc5ZjUyODAwNDdhMzRlNDc2MjhmYjUwYzNlYjNjODk4YWQ=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-07-28T16:00:32Z"}, "committer": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-08-04T23:05:07Z"}, "message": "Add feature gate", "tree": {"sha": "eb51b90108465e517b574bb07ee0bd30825999dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb51b90108465e517b574bb07ee0bd30825999dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15e7aa79f5280047a34e47628fb50c3eb3c898ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15e7aa79f5280047a34e47628fb50c3eb3c898ad", "html_url": "https://github.com/rust-lang/rust/commit/15e7aa79f5280047a34e47628fb50c3eb3c898ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15e7aa79f5280047a34e47628fb50c3eb3c898ad/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bb5a1a8249e3c5b97b4e60a2ab37cc5a2300306", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bb5a1a8249e3c5b97b4e60a2ab37cc5a2300306", "html_url": "https://github.com/rust-lang/rust/commit/0bb5a1a8249e3c5b97b4e60a2ab37cc5a2300306"}], "stats": {"total": 58, "additions": 36, "deletions": 22}, "files": [{"sha": "64575e6856993fed492ab18c0029e513b1f69012", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15e7aa79f5280047a34e47628fb50c3eb3c898ad/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e7aa79f5280047a34e47628fb50c3eb3c898ad/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=15e7aa79f5280047a34e47628fb50c3eb3c898ad", "patch": "@@ -1611,7 +1611,7 @@ impl Clean<Type> for ast::Ty {\n             TyTypeof(..) => {\n                 panic!(\"Unimplemented type {:?}\", self.node)\n             },\n-            TyMac(..) => {\n+            TyMac(ref m) => {\n                 cx.tcx().sess.span_bug(m.span, \"unexpanded type macro found during cleaning\")\n             }\n         }"}, {"sha": "aadc3cfbafe00fcf0ddb128fdb396b9e982fe318", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/15e7aa79f5280047a34e47628fb50c3eb3c898ad/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e7aa79f5280047a34e47628fb50c3eb3c898ad/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=15e7aa79f5280047a34e47628fb50c3eb3c898ad", "patch": "@@ -1555,29 +1555,39 @@ fn expand_and_rename_method(sig: ast::MethodSig, body: P<ast::Block>,\n pub fn expand_type(t: P<ast::Ty>, fld: &mut MacroExpander) -> P<ast::Ty> {\n     let t = match t.node.clone() {\n         ast::Ty_::TyMac(mac) => {\n-            let expanded_ty = match expand_mac_invoc(mac, t.span,\n-                                                     |r| r.make_ty(),\n-                                                     mark_ty,\n-                                                     fld) {\n-                Some(ty) => ty,\n-                None => {\n-                    return DummyResult::raw_ty(t.span);\n-                }\n-            };\n-\n-            // Keep going, outside-in.\n-            //\n-            let fully_expanded = fld.fold_ty(expanded_ty);\n-            fld.cx.bt_pop();\n+            if fld.cx.ecfg.features.unwrap().type_macros {\n+                let expanded_ty = match expand_mac_invoc(mac, t.span,\n+                                                         |r| r.make_ty(),\n+                                                         mark_ty,\n+                                                         fld) {\n+                    Some(ty) => ty,\n+                    None => {\n+                        return DummyResult::raw_ty(t.span);\n+                    }\n+                };\n \n-            fully_expanded.map(|t| ast::Ty {\n-                id: ast::DUMMY_NODE_ID,\n-                node: t.node,\n-                span: t.span,\n-            })\n+                // Keep going, outside-in.\n+                //\n+                let fully_expanded = fld.fold_ty(expanded_ty);\n+                fld.cx.bt_pop();\n+\n+                fully_expanded.map(|t| ast::Ty {\n+                    id: ast::DUMMY_NODE_ID,\n+                    node: t.node,\n+                    span: t.span,\n+                    })\n+            } else {\n+                feature_gate::emit_feature_err(\n+                    &fld.cx.parse_sess.span_diagnostic,\n+                    \"type_macros\",\n+                    t.span,\n+                    \"type macros are experimental (see tracking issue: 27336)\");\n+                t\n+            }\n         }\n         _ => t\n     };\n+\n     fold::noop_fold_ty(t, fld)\n }\n "}, {"sha": "02764215612e6d1f1b72aca854d8207735aa17b5", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15e7aa79f5280047a34e47628fb50c3eb3c898ad/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15e7aa79f5280047a34e47628fb50c3eb3c898ad/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=15e7aa79f5280047a34e47628fb50c3eb3c898ad", "patch": "@@ -169,6 +169,8 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n \n     // Allows associated type defaults\n     (\"associated_type_defaults\", \"1.2.0\", Active),\n+// Allows macros to appear in the type position.\n+    (\"type_macros\", \"1.3.0\", Active),\n ];\n // (changing above list without updating src/doc/reference.md makes @cmr sad)\n \n@@ -228,8 +230,7 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n                      \"no_std is experimental\")),\n     (\"lang\", Gated(\"lang_items\",\n                      \"language items are subject to change\")),\n-    (\"linkage\", Gated(\"linkage\",\n-                      \"the `linkage` attribute is experimental \\\n+    (\"linkage\", Gated(\"linkage\", \"the `linkage` attribute is experimental \\\n                        and not portable across platforms\")),\n     (\"thread_local\", Gated(\"thread_local\",\n                             \"`#[thread_local]` is an experimental feature, and does not \\\n@@ -349,6 +350,7 @@ pub struct Features {\n     pub const_fn: bool,\n     pub static_recursion: bool,\n     pub default_type_parameter_fallback: bool,\n+    pub type_macros: bool,\n }\n \n impl Features {\n@@ -375,6 +377,7 @@ impl Features {\n             const_fn: false,\n             static_recursion: false,\n             default_type_parameter_fallback: false,\n+            type_macros: false,\n         }\n     }\n }\n@@ -878,6 +881,7 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler,\n         const_fn: cx.has_feature(\"const_fn\"),\n         static_recursion: cx.has_feature(\"static_recursion\"),\n         default_type_parameter_fallback: cx.has_feature(\"default_type_parameter_fallback\"),\n+        type_macros: cx.has_feature(\"type_macros\"),\n     }\n }\n "}]}