{"sha": "375d78012f2e7bdeba942eeb2a85115d1b1a98cb", "node_id": "C_kwDOAAsO6NoAKDM3NWQ3ODAxMmYyZTdiZGViYTk0MmVlYjJhODUxMTVkMWIxYTk4Y2I", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-08-24T03:10:47Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-01T23:42:26Z"}, "message": "Move `try_on_disk_cache` out of the giant macro", "tree": {"sha": "f442395c715fbc574979b064213591c02dd8222d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f442395c715fbc574979b064213591c02dd8222d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/375d78012f2e7bdeba942eeb2a85115d1b1a98cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/375d78012f2e7bdeba942eeb2a85115d1b1a98cb", "html_url": "https://github.com/rust-lang/rust/commit/375d78012f2e7bdeba942eeb2a85115d1b1a98cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/375d78012f2e7bdeba942eeb2a85115d1b1a98cb/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cf7bcc388b5aee7ef940d730d1ede212f8e5a31", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cf7bcc388b5aee7ef940d730d1ede212f8e5a31", "html_url": "https://github.com/rust-lang/rust/commit/1cf7bcc388b5aee7ef940d730d1ede212f8e5a31"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "e0707eee8ba66aea5e0dabf481f771b803648664", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/375d78012f2e7bdeba942eeb2a85115d1b1a98cb/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/375d78012f2e7bdeba942eeb2a85115d1b1a98cb/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=375d78012f2e7bdeba942eeb2a85115d1b1a98cb", "patch": "@@ -7,7 +7,7 @@ use crate::{on_disk_cache, Queries};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lock;\n use rustc_errors::{Diagnostic, Handler};\n-use rustc_middle::dep_graph::{self, DepKind, DepNodeIndex, SerializedDepNodeIndex};\n+use rustc_middle::dep_graph::{self, DepKind, DepNode, DepNodeIndex, SerializedDepNodeIndex};\n use rustc_middle::ty::tls::{self, ImplicitCtxt};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_query_system::dep_graph::HasDepContext;\n@@ -298,6 +298,23 @@ pub(crate) fn create_query_frame<\n     QueryStackFrame::new(name, description, span, def_kind, hash)\n }\n \n+pub(crate) fn try_load_from_on_disk_cache<'tcx, K, V>(\n+    tcx: TyCtxt<'tcx>,\n+    dep_node: DepNode,\n+    recover: fn(TyCtxt<'tcx>, DepNode) -> Option<K>,\n+    cache_on_disk: fn(TyCtxt<'tcx>, &K) -> bool,\n+    do_query: fn(TyCtxt<'tcx>, K) -> V,\n+) {\n+    debug_assert!(tcx.dep_graph.is_green(&dep_node));\n+\n+    let key = recover(tcx, dep_node).unwrap_or_else(|| {\n+        panic!(\"Failed to recover key for {:?} with hash {}\", dep_node, dep_node.hash)\n+    });\n+    if cache_on_disk(tcx, &key) {\n+        let _ = do_query(tcx, key);\n+    }\n+}\n+\n // NOTE: `$V` isn't used here, but we still need to match on it so it can be passed to other macros\n // invoked by `rustc_query_append`.\n macro_rules! define_queries {\n@@ -457,21 +474,12 @@ macro_rules! define_queries {\n                     }\n                 }\n \n-                fn try_load_from_on_disk_cache(tcx: TyCtxt<'_>, dep_node: DepNode) {\n-                    debug_assert!(tcx.dep_graph.is_green(&dep_node));\n-\n-                    let key = recover(tcx, dep_node).unwrap_or_else(|| panic!(\"Failed to recover key for {:?} with hash {}\", dep_node, dep_node.hash));\n-                    if queries::$name::cache_on_disk(tcx, &key) {\n-                        let _ = tcx.$name(key);\n-                    }\n-                }\n-\n                 DepKindStruct {\n                     is_anon,\n                     is_eval_always,\n                     fingerprint_style,\n                     force_from_dep_node: Some(force_from_dep_node),\n-                    try_load_from_on_disk_cache: Some(try_load_from_on_disk_cache),\n+                    try_load_from_on_disk_cache: Some(|tcx, key| $crate::plumbing::try_load_from_on_disk_cache(tcx, key, recover, queries::$name::cache_on_disk, TyCtxt::$name)),\n                 }\n             })*\n         }"}]}