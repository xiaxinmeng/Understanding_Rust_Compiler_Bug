{"sha": "3013b26947e956352f95edfa39251319520cb06c", "node_id": "C_kwDOAAsO6NoAKDMwMTNiMjY5NDdlOTU2MzUyZjk1ZWRmYTM5MjUxMzE5NTIwY2IwNmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-08T06:16:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-08T06:16:31Z"}, "message": "Auto merge of #89659 - workingjubilee:rollup-0vggc69, r=workingjubilee\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #87918 (Enable AutoFDO.)\n - #88137 (On macOS, make strip=\"symbols\" not pass any options to strip)\n - #88772 (Fixed confusing wording on Result::map_or_else.)\n - #89025 (Implement `#[link_ordinal(n)]`)\n - #89082 (Implement #85440 (Random test ordering))\n - #89288 (Wrapper for `-Z gcc-ld=lld` to invoke rust-lld with the correct flavor)\n - #89476 (Correct decoding of foreign expansions during incr. comp.)\n - #89622 (Use correct edition for panic in [debug_]assert!().)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5debef34b4d6ef94b38dbb51099a499d72daaa2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5debef34b4d6ef94b38dbb51099a499d72daaa2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3013b26947e956352f95edfa39251319520cb06c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3013b26947e956352f95edfa39251319520cb06c", "html_url": "https://github.com/rust-lang/rust/commit/3013b26947e956352f95edfa39251319520cb06c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3013b26947e956352f95edfa39251319520cb06c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2171ee53ef2c98addbc3543e50e61496d8440a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2171ee53ef2c98addbc3543e50e61496d8440a9", "html_url": "https://github.com/rust-lang/rust/commit/c2171ee53ef2c98addbc3543e50e61496d8440a9"}, {"sha": "30e068f58b46d42b0e71b5112ceb2193f376ecc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/30e068f58b46d42b0e71b5112ceb2193f376ecc2", "html_url": "https://github.com/rust-lang/rust/commit/30e068f58b46d42b0e71b5112ceb2193f376ecc2"}], "stats": {"total": 1157, "additions": 1034, "deletions": 123}, "files": [{"sha": "e45926f832c982036dc9285a415395e45ad5b38b", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -1965,6 +1965,10 @@ dependencies = [\n  \"walkdir\",\n ]\n \n+[[package]]\n+name = \"lld-wrapper\"\n+version = \"0.1.0\"\n+\n [[package]]\n name = \"lock_api\"\n version = \"0.4.1\""}, {"sha": "42dd5d7ef432ee091c1f18ed1e78601c99d30806", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -36,6 +36,7 @@ members = [\n   \"src/tools/jsondocck\",\n   \"src/tools/html-checker\",\n   \"src/tools/bump-stage0\",\n+  \"src/tools/lld-wrapper\",\n ]\n \n exclude = ["}, {"sha": "1e2646e4d348faa5f72614ade0978ac7b01d988c", "filename": "compiler/rustc_builtin_macros/src/assert.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -1,10 +1,10 @@\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n-\n+use crate::panic::use_panic_2021;\n use rustc_ast::ptr::P;\n use rustc_ast::token;\n use rustc_ast::tokenstream::{DelimSpan, TokenStream};\n use rustc_ast::{self as ast, *};\n use rustc_ast_pretty::pprust;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_expand::base::*;\n use rustc_parse::parser::Parser;\n use rustc_span::symbol::{sym, Ident, Symbol};\n@@ -28,7 +28,7 @@ pub fn expand_assert<'cx>(\n     let sp = cx.with_call_site_ctxt(span);\n \n     let panic_call = if let Some(tokens) = custom_message {\n-        let path = if span.rust_2021() {\n+        let path = if use_panic_2021(span) {\n             // On edition 2021, we always call `$crate::panic::panic_2021!()`.\n             Path {\n                 span: sp,"}, {"sha": "54ab596bf3eb848739a86726afa6d805e3f973c9", "filename": "compiler/rustc_builtin_macros/src/panic.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_builtin_macros%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_builtin_macros%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fpanic.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -2,6 +2,7 @@ use rustc_ast::ptr::P;\n use rustc_ast::tokenstream::{DelimSpan, TokenStream};\n use rustc_ast::*;\n use rustc_expand::base::*;\n+use rustc_span::edition::Edition;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n@@ -19,7 +20,7 @@ pub fn expand_panic<'cx>(\n     sp: Span,\n     tts: TokenStream,\n ) -> Box<dyn MacResult + 'cx> {\n-    let panic = if sp.rust_2021() { sym::panic_2021 } else { sym::panic_2015 };\n+    let panic = if use_panic_2021(sp) { sym::panic_2021 } else { sym::panic_2015 };\n \n     let sp = cx.with_call_site_ctxt(sp);\n \n@@ -46,3 +47,19 @@ pub fn expand_panic<'cx>(\n         ),\n     )\n }\n+\n+pub fn use_panic_2021(mut span: Span) -> bool {\n+    // To determine the editon, we check the first span up the expansion\n+    // stack that does not have #[allow_internal_unstable(edition_panic)].\n+    // (To avoid using the edition of e.g. the assert!() or debug_assert!() definition.)\n+    loop {\n+        let expn = span.ctxt().outer_expn_data();\n+        if let Some(features) = expn.allow_internal_unstable {\n+            if features.iter().any(|&f| f == sym::edition_panic) {\n+                span = expn.call_site;\n+                continue;\n+            }\n+        }\n+        break expn.edition >= Edition::Edition2021;\n+    }\n+}"}, {"sha": "659cf9ea070b1b6f5811852850e7d770a20c0ee5", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -263,6 +263,10 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n         attributes::emit_uwtable(llfn, true);\n     }\n \n+    if cx.sess().opts.debugging_opts.profile_sample_use.is_some() {\n+        llvm::AddFunctionAttrString(llfn, Function, cstr!(\"use-sample-profile\"));\n+    }\n+\n     // FIXME: none of these three functions interact with source level attributes.\n     set_frame_pointer_type(cx, llfn);\n     set_instrument_function(cx, llfn);"}, {"sha": "2fb5a0f9faf8269492f5d4b45ed0b949d389ee2a", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -163,13 +163,13 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n         // All import names are Rust identifiers and therefore cannot contain \\0 characters.\n         // FIXME: when support for #[link_name] implemented, ensure that import.name values don't\n         // have any \\0 characters\n-        let import_name_vector: Vec<CString> = dll_imports\n+        let import_name_and_ordinal_vector: Vec<(CString, Option<u16>)> = dll_imports\n             .iter()\n             .map(|import: &DllImport| {\n                 if self.config.sess.target.arch == \"x86\" {\n-                    LlvmArchiveBuilder::i686_decorated_name(import)\n+                    (LlvmArchiveBuilder::i686_decorated_name(import), import.ordinal)\n                 } else {\n-                    CString::new(import.name.to_string()).unwrap()\n+                    (CString::new(import.name.to_string()).unwrap(), import.ordinal)\n                 }\n             })\n             .collect();\n@@ -184,9 +184,9 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n             dll_imports.iter().map(|import| import.name.to_string()).collect::<Vec<_>>().join(\", \"),\n         );\n \n-        let ffi_exports: Vec<LLVMRustCOFFShortExport> = import_name_vector\n+        let ffi_exports: Vec<LLVMRustCOFFShortExport> = import_name_and_ordinal_vector\n             .iter()\n-            .map(|name_z| LLVMRustCOFFShortExport::from_name(name_z.as_ptr()))\n+            .map(|(name_z, ordinal)| LLVMRustCOFFShortExport::new(name_z.as_ptr(), *ordinal))\n             .collect();\n         let result = unsafe {\n             crate::llvm::LLVMRustWriteImportLibrary("}, {"sha": "ca78254f0c84a3573a5c49d8eb71ae914cab1661", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -370,6 +370,13 @@ fn get_pgo_use_path(config: &ModuleConfig) -> Option<CString> {\n         .map(|path_buf| CString::new(path_buf.to_string_lossy().as_bytes()).unwrap())\n }\n \n+fn get_pgo_sample_use_path(config: &ModuleConfig) -> Option<CString> {\n+    config\n+        .pgo_sample_use\n+        .as_ref()\n+        .map(|path_buf| CString::new(path_buf.to_string_lossy().as_bytes()).unwrap())\n+}\n+\n pub(crate) fn should_use_new_llvm_pass_manager(config: &ModuleConfig) -> bool {\n     // The new pass manager is enabled by default for LLVM >= 13.\n     // This matches Clang, which also enables it since Clang 13.\n@@ -389,6 +396,7 @@ pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n     let using_thin_buffers = opt_stage == llvm::OptStage::PreLinkThinLTO || config.bitcode_needed();\n     let pgo_gen_path = get_pgo_gen_path(config);\n     let pgo_use_path = get_pgo_use_path(config);\n+    let pgo_sample_use_path = get_pgo_sample_use_path(config);\n     let is_lto = opt_stage == llvm::OptStage::ThinLTO || opt_stage == llvm::OptStage::FatLTO;\n     // Sanitizer instrumentation is only inserted during the pre-link optimization stage.\n     let sanitizer_options = if !is_lto {\n@@ -439,6 +447,8 @@ pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n         pgo_use_path.as_ref().map_or(std::ptr::null(), |s| s.as_ptr()),\n         config.instrument_coverage,\n         config.instrument_gcov,\n+        pgo_sample_use_path.as_ref().map_or(std::ptr::null(), |s| s.as_ptr()),\n+        config.debug_info_for_profiling,\n         llvm_selfprofiler,\n         selfprofile_before_pass_callback,\n         selfprofile_after_pass_callback,\n@@ -544,6 +554,9 @@ pub(crate) unsafe fn optimize(\n             if config.instrument_coverage {\n                 llvm::LLVMRustAddPass(mpm, find_pass(\"instrprof\").unwrap());\n             }\n+            if config.debug_info_for_profiling {\n+                llvm::LLVMRustAddPass(mpm, find_pass(\"add-discriminators\").unwrap());\n+            }\n \n             add_sanitizer_passes(config, &mut extra_passes);\n \n@@ -1001,6 +1014,7 @@ pub unsafe fn with_llvm_pmb(\n     let inline_threshold = config.inline_threshold;\n     let pgo_gen_path = get_pgo_gen_path(config);\n     let pgo_use_path = get_pgo_use_path(config);\n+    let pgo_sample_use_path = get_pgo_sample_use_path(config);\n \n     llvm::LLVMRustConfigurePassManagerBuilder(\n         builder,\n@@ -1011,6 +1025,7 @@ pub unsafe fn with_llvm_pmb(\n         prepare_for_thin_lto,\n         pgo_gen_path.as_ref().map_or(ptr::null(), |s| s.as_ptr()),\n         pgo_use_path.as_ref().map_or(ptr::null(), |s| s.as_ptr()),\n+        pgo_sample_use_path.as_ref().map_or(ptr::null(), |s| s.as_ptr()),\n     );\n \n     llvm::LLVMPassManagerBuilderSetSizeLevel(builder, opt_size as u32);"}, {"sha": "63eca00de2a4fdff3a2ecb946970114ebb556ee2", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -34,11 +34,18 @@ pub enum LLVMRustResult {\n #[repr(C)]\n pub struct LLVMRustCOFFShortExport {\n     pub name: *const c_char,\n+    pub ordinal_present: bool,\n+    // value of `ordinal` only important when `ordinal_present` is true\n+    pub ordinal: u16,\n }\n \n impl LLVMRustCOFFShortExport {\n-    pub fn from_name(name: *const c_char) -> LLVMRustCOFFShortExport {\n-        LLVMRustCOFFShortExport { name }\n+    pub fn new(name: *const c_char, ordinal: Option<u16>) -> LLVMRustCOFFShortExport {\n+        LLVMRustCOFFShortExport {\n+            name,\n+            ordinal_present: ordinal.is_some(),\n+            ordinal: ordinal.unwrap_or(0),\n+        }\n     }\n }\n \n@@ -2176,6 +2183,7 @@ extern \"C\" {\n         PrepareForThinLTO: bool,\n         PGOGenPath: *const c_char,\n         PGOUsePath: *const c_char,\n+        PGOSampleUsePath: *const c_char,\n     );\n     pub fn LLVMRustAddLibraryInfo(\n         PM: &PassManager<'a>,\n@@ -2210,6 +2218,8 @@ extern \"C\" {\n         PGOUsePath: *const c_char,\n         InstrumentCoverage: bool,\n         InstrumentGCOV: bool,\n+        PGOSampleUsePath: *const c_char,\n+        DebugInfoForProfiling: bool,\n         llvm_selfprofiler: *mut c_void,\n         begin_callback: SelfProfileBeforePassCallback,\n         end_callback: SelfProfileAfterPassCallback,"}, {"sha": "3fdfb08f5847b21b62027250ed2bb558345940f1", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -1024,14 +1024,20 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n     }\n \n     if sess.target.is_like_osx {\n-        if let Some(option) = osx_strip_opt(sess.opts.debugging_opts.strip) {\n-            strip_symbols_in_osx(sess, &out_filename, option);\n+        match sess.opts.debugging_opts.strip {\n+            Strip::Debuginfo => strip_symbols_in_osx(sess, &out_filename, Some(\"-S\")),\n+            Strip::Symbols => strip_symbols_in_osx(sess, &out_filename, None),\n+            Strip::None => {}\n         }\n     }\n }\n \n-fn strip_symbols_in_osx<'a>(sess: &'a Session, out_filename: &Path, option: &str) {\n-    let prog = Command::new(\"strip\").arg(option).arg(out_filename).output();\n+fn strip_symbols_in_osx<'a>(sess: &'a Session, out_filename: &Path, option: Option<&str>) {\n+    let mut cmd = Command::new(\"strip\");\n+    if let Some(option) = option {\n+        cmd.arg(option);\n+    }\n+    let prog = cmd.arg(out_filename).output();\n     match prog {\n         Ok(prog) => {\n             if !prog.status.success() {\n@@ -1049,14 +1055,6 @@ fn strip_symbols_in_osx<'a>(sess: &'a Session, out_filename: &Path, option: &str\n     }\n }\n \n-fn osx_strip_opt<'a>(strip: Strip) -> Option<&'a str> {\n-    match strip {\n-        Strip::Debuginfo => Some(\"-S\"),\n-        Strip::Symbols => Some(\"-x\"),\n-        Strip::None => None,\n-    }\n-}\n-\n fn escape_string(s: &[u8]) -> String {\n     str::from_utf8(s).map(|s| s.to_owned()).unwrap_or_else(|_| {\n         let mut x = \"Non-UTF-8 output: \".to_string();"}, {"sha": "429dc45d6a4c40e4d971c961358506443076d692", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -286,6 +286,9 @@ impl<'a> GccLinker<'a> {\n             config::OptLevel::Aggressive => \"O3\",\n         };\n \n+        if let Some(path) = &self.sess.opts.debugging_opts.profile_sample_use {\n+            self.linker_arg(&format!(\"-plugin-opt=sample-profile={}\", path.display()));\n+        };\n         self.linker_arg(&format!(\"-plugin-opt={}\", opt_level));\n         self.linker_arg(&format!(\"-plugin-opt=mcpu={}\", self.target_cpu));\n     }"}, {"sha": "da34612ce76acb274b996feb2538efb03e49eb92", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -83,6 +83,8 @@ pub struct ModuleConfig {\n \n     pub pgo_gen: SwitchWithOptPath,\n     pub pgo_use: Option<PathBuf>,\n+    pub pgo_sample_use: Option<PathBuf>,\n+    pub debug_info_for_profiling: bool,\n     pub instrument_coverage: bool,\n     pub instrument_gcov: bool,\n \n@@ -176,6 +178,8 @@ impl ModuleConfig {\n                 SwitchWithOptPath::Disabled\n             ),\n             pgo_use: if_regular!(sess.opts.cg.profile_use.clone(), None),\n+            pgo_sample_use: if_regular!(sess.opts.debugging_opts.profile_sample_use.clone(), None),\n+            debug_info_for_profiling: sess.opts.debugging_opts.debug_info_for_profiling,\n             instrument_coverage: if_regular!(sess.instrument_coverage(), false),\n             instrument_gcov: if_regular!(\n                 // compiler_builtins overrides the codegen-units settings,"}, {"sha": "844e5ab56a420e6bd30fe42caffa51d2d0252f81", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -715,6 +715,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(chalk, true);\n     tracked!(codegen_backend, Some(\"abc\".to_string()));\n     tracked!(crate_attr, vec![\"abc\".to_string()]);\n+    tracked!(debug_info_for_profiling, true);\n     tracked!(debug_macros, true);\n     tracked!(dep_info_omit_d_target, true);\n     tracked!(dual_proc_macros, true);\n@@ -752,6 +753,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(profile, true);\n     tracked!(profile_emit, Some(PathBuf::from(\"abc\")));\n     tracked!(profiler_runtime, \"abc\".to_string());\n+    tracked!(profile_sample_use, Some(PathBuf::from(\"abc\")));\n     tracked!(relax_elf_relocations, Some(true));\n     tracked!(relro_level, Some(RelroLevel::Full));\n     tracked!(remap_cwd_prefix, Some(PathBuf::from(\"abc\")));"}, {"sha": "87f423fb2d56eb0b51771bc519d0a6386716b821", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -25,6 +25,7 @@\n #include \"llvm/Transforms/IPO/PassManagerBuilder.h\"\n #include \"llvm/Transforms/IPO/AlwaysInliner.h\"\n #include \"llvm/Transforms/IPO/FunctionImport.h\"\n+#include \"llvm/Transforms/Utils/AddDiscriminators.h\"\n #include \"llvm/Transforms/Utils/FunctionImportUtils.h\"\n #include \"llvm/LTO/LTO.h\"\n #include \"llvm-c/Transforms/PassManagerBuilder.h\"\n@@ -39,6 +40,7 @@\n #include \"llvm/Transforms/Instrumentation/HWAddressSanitizer.h\"\n #include \"llvm/Transforms/Utils/CanonicalizeAliases.h\"\n #include \"llvm/Transforms/Utils/NameAnonGlobals.h\"\n+#include \"llvm/Transforms/Utils.h\"\n \n using namespace llvm;\n \n@@ -523,21 +525,22 @@ extern \"C\" void LLVMRustDisposeTargetMachine(LLVMTargetMachineRef TM) {\n extern \"C\" void LLVMRustConfigurePassManagerBuilder(\n     LLVMPassManagerBuilderRef PMBR, LLVMRustCodeGenOptLevel OptLevel,\n     bool MergeFunctions, bool SLPVectorize, bool LoopVectorize, bool PrepareForThinLTO,\n-    const char* PGOGenPath, const char* PGOUsePath) {\n+    const char* PGOGenPath, const char* PGOUsePath, const char* PGOSampleUsePath) {\n   unwrap(PMBR)->MergeFunctions = MergeFunctions;\n   unwrap(PMBR)->SLPVectorize = SLPVectorize;\n   unwrap(PMBR)->OptLevel = fromRust(OptLevel);\n   unwrap(PMBR)->LoopVectorize = LoopVectorize;\n   unwrap(PMBR)->PrepareForThinLTO = PrepareForThinLTO;\n \n   if (PGOGenPath) {\n-    assert(!PGOUsePath);\n+    assert(!PGOUsePath && !PGOSampleUsePath);\n     unwrap(PMBR)->EnablePGOInstrGen = true;\n     unwrap(PMBR)->PGOInstrGen = PGOGenPath;\n-  }\n-  if (PGOUsePath) {\n-    assert(!PGOGenPath);\n+  } else if (PGOUsePath) {\n+    assert(!PGOSampleUsePath);\n     unwrap(PMBR)->PGOInstrUse = PGOUsePath;\n+  } else if (PGOSampleUsePath) {\n+    unwrap(PMBR)->PGOSampleUse = PGOSampleUsePath;\n   }\n }\n \n@@ -759,6 +762,7 @@ LLVMRustOptimizeWithNewPassManager(\n     LLVMRustSanitizerOptions *SanitizerOptions,\n     const char *PGOGenPath, const char *PGOUsePath,\n     bool InstrumentCoverage, bool InstrumentGCOV,\n+    const char *PGOSampleUsePath, bool DebugInfoForProfiling,\n     void* LlvmSelfProfiler,\n     LLVMRustSelfProfileBeforePassCallback BeforePassCallback,\n     LLVMRustSelfProfileAfterPassCallback AfterPassCallback,\n@@ -797,11 +801,19 @@ LLVMRustOptimizeWithNewPassManager(\n \n   Optional<PGOOptions> PGOOpt;\n   if (PGOGenPath) {\n-    assert(!PGOUsePath);\n-    PGOOpt = PGOOptions(PGOGenPath, \"\", \"\", PGOOptions::IRInstr);\n+    assert(!PGOUsePath && !PGOSampleUsePath);\n+    PGOOpt = PGOOptions(PGOGenPath, \"\", \"\", PGOOptions::IRInstr,\n+                        PGOOptions::NoCSAction, DebugInfoForProfiling);\n   } else if (PGOUsePath) {\n-    assert(!PGOGenPath);\n-    PGOOpt = PGOOptions(PGOUsePath, \"\", \"\", PGOOptions::IRUse);\n+    assert(!PGOSampleUsePath);\n+    PGOOpt = PGOOptions(PGOUsePath, \"\", \"\", PGOOptions::IRUse,\n+                        PGOOptions::NoCSAction, DebugInfoForProfiling);\n+  } else if (PGOSampleUsePath) {\n+    PGOOpt = PGOOptions(PGOSampleUsePath, \"\", \"\", PGOOptions::SampleUse,\n+                        PGOOptions::NoCSAction, DebugInfoForProfiling);\n+  } else if (DebugInfoForProfiling) {\n+    PGOOpt = PGOOptions(\"\", \"\", \"\", PGOOptions::NoAction,\n+                        PGOOptions::NoCSAction, DebugInfoForProfiling);\n   }\n \n #if LLVM_VERSION_GE(12, 0) && !LLVM_VERSION_GE(13,0)"}, {"sha": "b7b0524e2a38867091a878f27b093f220d7142ce", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -1753,10 +1753,11 @@ LLVMRustBuildMaxNum(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS) {\n }\n \n // This struct contains all necessary info about a symbol exported from a DLL.\n-// At the moment, it's just the symbol's name, but we use a separate struct to\n-// make it easier to add other information like ordinal later.\n struct LLVMRustCOFFShortExport {\n   const char* name;\n+  bool ordinal_present;\n+  // The value of `ordinal` is only meaningful if `ordinal_present` is true.\n+  uint16_t ordinal;\n };\n \n // Machine must be a COFF machine type, as defined in PE specs.\n@@ -1772,13 +1773,15 @@ extern \"C\" LLVMRustResult LLVMRustWriteImportLibrary(\n   ConvertedExports.reserve(NumExports);\n \n   for (size_t i = 0; i < NumExports; ++i) {\n+    bool ordinal_present = Exports[i].ordinal_present;\n+    uint16_t ordinal = ordinal_present ? Exports[i].ordinal : 0;\n     ConvertedExports.push_back(llvm::object::COFFShortExport{\n       Exports[i].name,  // Name\n       std::string{},    // ExtName\n       std::string{},    // SymbolName\n       std::string{},    // AliasTarget\n-      0,                // Ordinal\n-      false,            // Noname\n+      ordinal,          // Ordinal\n+      ordinal_present,  // Noname\n       false,            // Data\n       false,            // Private\n       false             // Constant"}, {"sha": "a744676590066f87a39026599e95ad7ef5ed9712", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -433,6 +433,12 @@ impl Collector<'tcx> {\n                 }\n             }\n         };\n-        DllImport { name: item.ident.name, ordinal: None, calling_convention, span: item.span }\n+\n+        DllImport {\n+            name: item.ident.name,\n+            ordinal: self.tcx.codegen_fn_attrs(item.id.def_id).link_ordinal,\n+            calling_convention,\n+            span: item.span,\n+        }\n     }\n }"}, {"sha": "89bb5797a828f3770d78f02ad1ba0c96dc10e62e", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -1632,7 +1632,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         self.def_path_hash_map.def_path_hash_to_def_index(&hash)\n     }\n \n-    fn expn_hash_to_expn_id(&self, index_guess: u32, hash: ExpnHash) -> ExpnId {\n+    fn expn_hash_to_expn_id(&self, sess: &Session, index_guess: u32, hash: ExpnHash) -> ExpnId {\n         debug_assert_eq!(ExpnId::from_hash(hash), None);\n         let index_guess = ExpnIndex::from_u32(index_guess);\n         let old_hash = self.root.expn_hashes.get(self, index_guess).map(|lazy| lazy.decode(self));\n@@ -1654,16 +1654,14 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                     let i = ExpnIndex::from_u32(i);\n                     if let Some(hash) = self.root.expn_hashes.get(self, i) {\n                         map.insert(hash.decode(self), i);\n-                    } else {\n-                        panic!(\"Missing expn_hash entry for {:?}\", i);\n                     }\n                 }\n                 map\n             });\n             map[&hash]\n         };\n \n-        let data = self.root.expn_data.get(self, index).unwrap().decode(self);\n+        let data = self.root.expn_data.get(self, index).unwrap().decode((self, sess));\n         rustc_span::hygiene::register_expn_id(self.cnum, index, data, hash)\n     }\n "}, {"sha": "4e7f85d2c372772dce0c10fd47dfd855edad6268", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -506,7 +506,13 @@ impl CrateStore for CStore {\n         DefId { krate: cnum, index: def_index }\n     }\n \n-    fn expn_hash_to_expn_id(&self, cnum: CrateNum, index_guess: u32, hash: ExpnHash) -> ExpnId {\n-        self.get_crate_data(cnum).expn_hash_to_expn_id(index_guess, hash)\n+    fn expn_hash_to_expn_id(\n+        &self,\n+        sess: &Session,\n+        cnum: CrateNum,\n+        index_guess: u32,\n+        hash: ExpnHash,\n+    ) -> ExpnId {\n+        self.get_crate_data(cnum).expn_hash_to_expn_id(sess, index_guess, hash)\n     }\n }"}, {"sha": "b054d21adaa139354d5c3ba05fe70d18fd19e1d7", "filename": "compiler/rustc_middle/src/middle/codegen_fn_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -22,7 +22,7 @@ pub struct CodegenFnAttrs {\n     /// imported function has in the dynamic library. Note that this must not\n     /// be set when `link_name` is set. This is for foreign items with the\n     /// \"raw-dylib\" kind.\n-    pub link_ordinal: Option<usize>,\n+    pub link_ordinal: Option<u16>,\n     /// The `#[target_feature(enable = \"...\")]` attribute and the enabled\n     /// features (only enabled features are supported right now).\n     pub target_features: Vec<Symbol>,"}, {"sha": "48eb488792d8973b05fe582fa329c0c4679e854a", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -664,22 +664,32 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for ExpnId {\n \n             let data: ExpnData = decoder\n                 .with_position(pos.to_usize(), |decoder| decode_tagged(decoder, TAG_EXPN_DATA))?;\n-            rustc_span::hygiene::register_local_expn_id(data, hash)\n+            let expn_id = rustc_span::hygiene::register_local_expn_id(data, hash);\n+\n+            #[cfg(debug_assertions)]\n+            {\n+                use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+                let mut hcx = decoder.tcx.create_stable_hashing_context();\n+                let mut hasher = StableHasher::new();\n+                hcx.while_hashing_spans(true, |hcx| {\n+                    expn_id.expn_data().hash_stable(hcx, &mut hasher)\n+                });\n+                let local_hash: u64 = hasher.finish();\n+                debug_assert_eq!(hash.local_hash(), local_hash);\n+            }\n+\n+            expn_id\n         } else {\n             let index_guess = decoder.foreign_expn_data[&hash];\n-            decoder.tcx.cstore_untracked().expn_hash_to_expn_id(krate, index_guess, hash)\n+            decoder.tcx.cstore_untracked().expn_hash_to_expn_id(\n+                decoder.tcx.sess,\n+                krate,\n+                index_guess,\n+                hash,\n+            )\n         };\n \n-        #[cfg(debug_assertions)]\n-        {\n-            use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-            let mut hcx = decoder.tcx.create_stable_hashing_context();\n-            let mut hasher = StableHasher::new();\n-            hcx.while_hashing_spans(true, |hcx| expn_id.expn_data().hash_stable(hcx, &mut hasher));\n-            let local_hash: u64 = hasher.finish();\n-            debug_assert_eq!(hash.local_hash(), local_hash);\n-        }\n-\n+        debug_assert_eq!(expn_id.krate, krate);\n         Ok(expn_id)\n     }\n }"}, {"sha": "ac4bce7350b9079c4530686d496e43bc77c0e4d1", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -2009,6 +2009,15 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         );\n     }\n \n+    if debugging_opts.profile_sample_use.is_some()\n+        && (cg.profile_generate.enabled() || cg.profile_use.is_some())\n+    {\n+        early_error(\n+            error_format,\n+            \"option `-Z profile-sample-use` cannot be used with `-C profile-generate` or `-C profile-use`\",\n+        );\n+    }\n+\n     if debugging_opts.instrument_coverage.is_some()\n         && debugging_opts.instrument_coverage != Some(InstrumentCoverage::Off)\n     {"}, {"sha": "59e7abc2ea3bd5d85be45b2896634440b8c11b68", "filename": "compiler/rustc_session/src/cstore.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcstore.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -4,6 +4,7 @@\n \n use crate::search_paths::PathKind;\n use crate::utils::NativeLibKind;\n+use crate::Session;\n use rustc_ast as ast;\n use rustc_data_structures::sync::{self, MetadataRef};\n use rustc_hir::def_id::{CrateNum, DefId, StableCrateId, LOCAL_CRATE};\n@@ -193,7 +194,13 @@ pub trait CrateStore: std::fmt::Debug {\n \n     /// Fetch a DefId from a DefPathHash for a foreign crate.\n     fn def_path_hash_to_def_id(&self, cnum: CrateNum, hash: DefPathHash) -> DefId;\n-    fn expn_hash_to_expn_id(&self, cnum: CrateNum, index_guess: u32, hash: ExpnHash) -> ExpnId;\n+    fn expn_hash_to_expn_id(\n+        &self,\n+        sess: &Session,\n+        cnum: CrateNum,\n+        index_guess: u32,\n+        hash: ExpnHash,\n+    ) -> ExpnId;\n }\n \n pub type CrateStoreDyn = dyn CrateStore + sync::Sync;"}, {"sha": "b3d36b396c51cafe80e657ec51e1202831b41af4", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -1040,6 +1040,8 @@ options! {\n         \"combine CGUs into a single one\"),\n     crate_attr: Vec<String> = (Vec::new(), parse_string_push, [TRACKED],\n         \"inject the given attribute in the crate\"),\n+    debug_info_for_profiling: bool = (false, parse_bool, [TRACKED],\n+        \"emit discriminators and other data necessary for AutoFDO\"),\n     debug_macros: bool = (false, parse_bool, [TRACKED],\n         \"emit line numbers debug info inside macros (default: no)\"),\n     deduplicate_diagnostics: bool = (true, parse_bool, [UNTRACKED],\n@@ -1242,6 +1244,8 @@ options! {\n         (default based on relative source path)\"),\n     profiler_runtime: String = (String::from(\"profiler_builtins\"), parse_string, [TRACKED],\n         \"name of the profiler runtime crate to automatically inject (default: `profiler_builtins`)\"),\n+    profile_sample_use: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n+        \"use the given `.prof` file for sampled profile-guided optimization (also known as AutoFDO)\"),\n     query_dep_graph: bool = (false, parse_bool, [UNTRACKED],\n         \"enable queries of the dependency graph for regression testing (default: no)\"),\n     query_stats: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "b6ba6cc1dd659861202d40b14ff8c75dd8fea001", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -1353,6 +1353,16 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n         }\n     }\n \n+    // Do the same for sample profile data.\n+    if let Some(ref path) = sess.opts.debugging_opts.profile_sample_use {\n+        if !path.exists() {\n+            sess.err(&format!(\n+                \"File `{}` passed to `-C profile-sample-use` does not exist.\",\n+                path.display()\n+            ));\n+        }\n+    }\n+\n     // Unwind tables cannot be disabled if the target requires them.\n     if let Some(include_uwtables) = sess.opts.cg.force_unwind_tables {\n         if sess.target.requires_uwtable && !include_uwtables {"}, {"sha": "0e30e154ee57c7d5d0abbd0e53c56260f4dacb28", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -570,6 +570,7 @@ symbols! {\n         dyn_metadata,\n         dyn_trait,\n         edition_macro_pats,\n+        edition_panic,\n         eh_catch_typeinfo,\n         eh_personality,\n         emit_enum,"}, {"sha": "df7f2aea9c3ac08ec51b1dc406ff1065d8a091ea", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -2861,6 +2861,14 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n         } else if attr.has_name(sym::link_name) {\n             codegen_fn_attrs.link_name = attr.value_str();\n         } else if attr.has_name(sym::link_ordinal) {\n+            if link_ordinal_span.is_some() {\n+                tcx.sess\n+                    .struct_span_err(\n+                        attr.span,\n+                        \"multiple `link_ordinal` attributes on a single definition\",\n+                    )\n+                    .emit();\n+            }\n             link_ordinal_span = Some(attr.span);\n             if let ordinal @ Some(_) = check_link_ordinal(tcx, attr) {\n                 codegen_fn_attrs.link_ordinal = ordinal;\n@@ -3156,22 +3164,41 @@ fn should_inherit_track_caller(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     false\n }\n \n-fn check_link_ordinal(tcx: TyCtxt<'_>, attr: &ast::Attribute) -> Option<usize> {\n+fn check_link_ordinal(tcx: TyCtxt<'_>, attr: &ast::Attribute) -> Option<u16> {\n     use rustc_ast::{Lit, LitIntType, LitKind};\n     let meta_item_list = attr.meta_item_list();\n     let meta_item_list: Option<&[ast::NestedMetaItem]> = meta_item_list.as_ref().map(Vec::as_ref);\n     let sole_meta_list = match meta_item_list {\n         Some([item]) => item.literal(),\n+        Some(_) => {\n+            tcx.sess\n+                .struct_span_err(attr.span, \"incorrect number of arguments to `#[link_ordinal]`\")\n+                .note(\"the attribute requires exactly one argument\")\n+                .emit();\n+            return None;\n+        }\n         _ => None,\n     };\n     if let Some(Lit { kind: LitKind::Int(ordinal, LitIntType::Unsuffixed), .. }) = sole_meta_list {\n-        if *ordinal <= usize::MAX as u128 {\n-            Some(*ordinal as usize)\n+        // According to the table at https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#import-header,\n+        // the ordinal must fit into 16 bits.  Similarly, the Ordinal field in COFFShortExport (defined\n+        // in llvm/include/llvm/Object/COFFImportFile.h), which we use to communicate import information\n+        // to LLVM for `#[link(kind = \"raw-dylib\"_])`, is also defined to be uint16_t.\n+        //\n+        // FIXME: should we allow an ordinal of 0?  The MSVC toolchain has inconsistent support for this:\n+        // both LINK.EXE and LIB.EXE signal errors and abort when given a .DEF file that specifies\n+        // a zero ordinal.  However, llvm-dlltool is perfectly happy to generate an import library\n+        // for such a .DEF file, and MSVC's LINK.EXE is also perfectly happy to consume an import\n+        // library produced by LLVM with an ordinal of 0, and it generates an .EXE.  (I don't know yet\n+        // if the resulting EXE runs, as I haven't yet built the necessary DLL -- see earlier comment\n+        // about LINK.EXE failing.)\n+        if *ordinal <= u16::MAX as u128 {\n+            Some(*ordinal as u16)\n         } else {\n             let msg = format!(\"ordinal value in `link_ordinal` is too large: `{}`\", &ordinal);\n             tcx.sess\n                 .struct_span_err(attr.span, &msg)\n-                .note(\"the value may not exceed `usize::MAX`\")\n+                .note(\"the value may not exceed `u16::MAX`\")\n                 .emit();\n             None\n         }"}, {"sha": "5b3e988caa506cc61e8c74f069e30e9ca3711649", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -210,6 +210,7 @@ pub macro assert_matches {\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_diagnostic_item = \"debug_assert_macro\"]\n+#[allow_internal_unstable(edition_panic)]\n macro_rules! debug_assert {\n     ($($arg:tt)*) => (if $crate::cfg!(debug_assertions) { $crate::assert!($($arg)*); })\n }"}, {"sha": "dda827900d9593b7c03ba1adf195e4edb9afc270", "filename": "library/core/src/result.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -795,9 +795,8 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /// Maps a `Result<T, E>` to `U` by applying a provided default fallback\n-    /// function to a contained [`Err`] value, or a provided function to a\n-    /// contained [`Ok`] value.\n+    /// Maps a `Result<T, E>` to `U` by applying fallback function `default` to\n+    /// a contained [`Err`] value, or function `f` to a contained [`Ok`] value.\n     ///\n     /// This function can be used to unpack a successful result\n     /// while handling an error."}, {"sha": "cb40b4e965b2a56d81184ec3d65d7c14b859208b", "filename": "library/test/src/cli.rs", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/library%2Ftest%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/library%2Ftest%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fcli.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -21,6 +21,8 @@ pub struct TestOpts {\n     pub nocapture: bool,\n     pub color: ColorConfig,\n     pub format: OutputFormat,\n+    pub shuffle: bool,\n+    pub shuffle_seed: Option<u64>,\n     pub test_threads: Option<usize>,\n     pub skip: Vec<String>,\n     pub time_options: Option<TestTimeOptions>,\n@@ -138,6 +140,13 @@ fn optgroups() -> getopts::Options {\n \n             `CRITICAL_TIME` here means the limit that should not be exceeded by test.\n             \",\n+        )\n+        .optflag(\"\", \"shuffle\", \"Run tests in random order\")\n+        .optopt(\n+            \"\",\n+            \"shuffle-seed\",\n+            \"Run tests in random order; seed the random number generator with SEED\",\n+            \"SEED\",\n         );\n     opts\n }\n@@ -155,6 +164,12 @@ By default, all tests are run in parallel. This can be altered with the\n --test-threads flag or the RUST_TEST_THREADS environment variable when running\n tests (set it to 1).\n \n+By default, the tests are run in alphabetical order. Use --shuffle or set\n+RUST_TEST_SHUFFLE to run the tests in random order. Pass the generated\n+\"shuffle seed\" to --shuffle-seed (or set RUST_TEST_SHUFFLE_SEED) to run the\n+tests in the same order again. Note that --shuffle and --shuffle-seed do not\n+affect whether the tests are run in parallel.\n+\n All tests have their standard output and standard error captured by default.\n This can be overridden with the --nocapture flag or setting RUST_TEST_NOCAPTURE\n environment variable to a value other than \"0\". Logging is not captured by default.\n@@ -218,6 +233,21 @@ macro_rules! unstable_optflag {\n     }};\n }\n \n+// Gets the option value and checks if unstable features are enabled.\n+macro_rules! unstable_optopt {\n+    ($matches:ident, $allow_unstable:ident, $option_name:literal) => {{\n+        let opt = $matches.opt_str($option_name);\n+        if !$allow_unstable && opt.is_some() {\n+            return Err(format!(\n+                \"The \\\"{}\\\" option is only accepted on the nightly compiler with -Z unstable-options\",\n+                $option_name\n+            ));\n+        }\n+\n+        opt\n+    }};\n+}\n+\n // Implementation of `parse_opts` that doesn't care about help message\n // and returns a `Result`.\n fn parse_opts_impl(matches: getopts::Matches) -> OptRes {\n@@ -227,6 +257,8 @@ fn parse_opts_impl(matches: getopts::Matches) -> OptRes {\n     let force_run_in_process = unstable_optflag!(matches, allow_unstable, \"force-run-in-process\");\n     let exclude_should_panic = unstable_optflag!(matches, allow_unstable, \"exclude-should-panic\");\n     let time_options = get_time_options(&matches, allow_unstable)?;\n+    let shuffle = get_shuffle(&matches, allow_unstable)?;\n+    let shuffle_seed = get_shuffle_seed(&matches, allow_unstable)?;\n \n     let include_ignored = matches.opt_present(\"include-ignored\");\n     let quiet = matches.opt_present(\"quiet\");\n@@ -260,6 +292,8 @@ fn parse_opts_impl(matches: getopts::Matches) -> OptRes {\n         nocapture,\n         color,\n         format,\n+        shuffle,\n+        shuffle_seed,\n         test_threads,\n         skip,\n         time_options,\n@@ -303,6 +337,46 @@ fn get_time_options(\n     Ok(options)\n }\n \n+fn get_shuffle(matches: &getopts::Matches, allow_unstable: bool) -> OptPartRes<bool> {\n+    let mut shuffle = unstable_optflag!(matches, allow_unstable, \"shuffle\");\n+    if !shuffle && allow_unstable {\n+        shuffle = match env::var(\"RUST_TEST_SHUFFLE\") {\n+            Ok(val) => &val != \"0\",\n+            Err(_) => false,\n+        };\n+    }\n+\n+    Ok(shuffle)\n+}\n+\n+fn get_shuffle_seed(matches: &getopts::Matches, allow_unstable: bool) -> OptPartRes<Option<u64>> {\n+    let mut shuffle_seed = match unstable_optopt!(matches, allow_unstable, \"shuffle-seed\") {\n+        Some(n_str) => match n_str.parse::<u64>() {\n+            Ok(n) => Some(n),\n+            Err(e) => {\n+                return Err(format!(\n+                    \"argument for --shuffle-seed must be a number \\\n+                     (error: {})\",\n+                    e\n+                ));\n+            }\n+        },\n+        None => None,\n+    };\n+\n+    if shuffle_seed.is_none() && allow_unstable {\n+        shuffle_seed = match env::var(\"RUST_TEST_SHUFFLE_SEED\") {\n+            Ok(val) => match val.parse::<u64>() {\n+                Ok(n) => Some(n),\n+                Err(_) => panic!(\"RUST_TEST_SHUFFLE_SEED is `{}`, should be a number.\", val),\n+            },\n+            Err(_) => None,\n+        };\n+    }\n+\n+    Ok(shuffle_seed)\n+}\n+\n fn get_test_threads(matches: &getopts::Matches) -> OptPartRes<Option<usize>> {\n     let test_threads = match matches.opt_str(\"test-threads\") {\n         Some(n_str) => match n_str.parse::<usize>() {"}, {"sha": "11c5ab48ed3e8e572faa2b7ade04a105009e197e", "filename": "library/test/src/console.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/library%2Ftest%2Fsrc%2Fconsole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/library%2Ftest%2Fsrc%2Fconsole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fconsole.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -225,9 +225,9 @@ fn on_test_event(\n     out: &mut dyn OutputFormatter,\n ) -> io::Result<()> {\n     match (*event).clone() {\n-        TestEvent::TeFiltered(ref filtered_tests) => {\n+        TestEvent::TeFiltered(ref filtered_tests, shuffle_seed) => {\n             st.total = filtered_tests.len();\n-            out.write_run_start(filtered_tests.len())?;\n+            out.write_run_start(filtered_tests.len(), shuffle_seed)?;\n         }\n         TestEvent::TeFilteredOut(filtered_out) => {\n             st.filtered_out = filtered_out;"}, {"sha": "6ff1a615eb4d055a7e3f78c5e5271a0101ec8d84", "filename": "library/test/src/event.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/library%2Ftest%2Fsrc%2Fevent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/library%2Ftest%2Fsrc%2Fevent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fevent.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -28,7 +28,7 @@ impl CompletedTest {\n \n #[derive(Debug, Clone)]\n pub enum TestEvent {\n-    TeFiltered(Vec<TestDesc>),\n+    TeFiltered(Vec<TestDesc>, Option<u64>),\n     TeWait(TestDesc),\n     TeResult(CompletedTest),\n     TeTimeout(TestDesc),"}, {"sha": "424d3ef7b4106fd29139f73563a31e4a4b36cb9f", "filename": "library/test/src/formatters/json.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -60,10 +60,15 @@ impl<T: Write> JsonFormatter<T> {\n }\n \n impl<T: Write> OutputFormatter for JsonFormatter<T> {\n-    fn write_run_start(&mut self, test_count: usize) -> io::Result<()> {\n+    fn write_run_start(&mut self, test_count: usize, shuffle_seed: Option<u64>) -> io::Result<()> {\n+        let shuffle_seed_json = if let Some(shuffle_seed) = shuffle_seed {\n+            format!(r#\", \"shuffle_seed\": {}\"#, shuffle_seed)\n+        } else {\n+            String::new()\n+        };\n         self.writeln_message(&*format!(\n-            r#\"{{ \"type\": \"suite\", \"event\": \"started\", \"test_count\": {} }}\"#,\n-            test_count\n+            r#\"{{ \"type\": \"suite\", \"event\": \"started\", \"test_count\": {}{} }}\"#,\n+            test_count, shuffle_seed_json\n         ))\n     }\n "}, {"sha": "e2aebee916d0eae7bb4f1364fec83f62660141fa", "filename": "library/test/src/formatters/junit.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -27,7 +27,11 @@ impl<T: Write> JunitFormatter<T> {\n }\n \n impl<T: Write> OutputFormatter for JunitFormatter<T> {\n-    fn write_run_start(&mut self, _test_count: usize) -> io::Result<()> {\n+    fn write_run_start(\n+        &mut self,\n+        _test_count: usize,\n+        _shuffle_seed: Option<u64>,\n+    ) -> io::Result<()> {\n         // We write xml header on run start\n         self.out.write_all(b\"\\n\")?;\n         self.write_message(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\")"}, {"sha": "cb80859759fad7c55968eeb6ec6b194e4cede049", "filename": "library/test/src/formatters/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/library%2Ftest%2Fsrc%2Fformatters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/library%2Ftest%2Fsrc%2Fformatters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fmod.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -18,7 +18,7 @@ pub(crate) use self::pretty::PrettyFormatter;\n pub(crate) use self::terse::TerseFormatter;\n \n pub(crate) trait OutputFormatter {\n-    fn write_run_start(&mut self, test_count: usize) -> io::Result<()>;\n+    fn write_run_start(&mut self, test_count: usize, shuffle_seed: Option<u64>) -> io::Result<()>;\n     fn write_test_start(&mut self, desc: &TestDesc) -> io::Result<()>;\n     fn write_timeout(&mut self, desc: &TestDesc) -> io::Result<()>;\n     fn write_result("}, {"sha": "4a03b4b9147605c392fe76e4d7fa725fb37f9b49", "filename": "library/test/src/formatters/pretty.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -181,9 +181,14 @@ impl<T: Write> PrettyFormatter<T> {\n }\n \n impl<T: Write> OutputFormatter for PrettyFormatter<T> {\n-    fn write_run_start(&mut self, test_count: usize) -> io::Result<()> {\n+    fn write_run_start(&mut self, test_count: usize, shuffle_seed: Option<u64>) -> io::Result<()> {\n         let noun = if test_count != 1 { \"tests\" } else { \"test\" };\n-        self.write_plain(&format!(\"\\nrunning {} {}\\n\", test_count, noun))\n+        let shuffle_seed_msg = if let Some(shuffle_seed) = shuffle_seed {\n+            format!(\" (shuffle seed: {})\", shuffle_seed)\n+        } else {\n+            String::new()\n+        };\n+        self.write_plain(&format!(\"\\nrunning {} {}{}\\n\", test_count, noun, shuffle_seed_msg))\n     }\n \n     fn write_test_start(&mut self, desc: &TestDesc) -> io::Result<()> {"}, {"sha": "1f2c410cd96f3902493d9a17eab2fc5bc95a466c", "filename": "library/test/src/formatters/terse.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -170,10 +170,15 @@ impl<T: Write> TerseFormatter<T> {\n }\n \n impl<T: Write> OutputFormatter for TerseFormatter<T> {\n-    fn write_run_start(&mut self, test_count: usize) -> io::Result<()> {\n+    fn write_run_start(&mut self, test_count: usize, shuffle_seed: Option<u64>) -> io::Result<()> {\n         self.total_test_count = test_count;\n         let noun = if test_count != 1 { \"tests\" } else { \"test\" };\n-        self.write_plain(&format!(\"\\nrunning {} {}\\n\", test_count, noun))\n+        let shuffle_seed_msg = if let Some(shuffle_seed) = shuffle_seed {\n+            format!(\" (shuffle seed: {})\", shuffle_seed)\n+        } else {\n+            String::new()\n+        };\n+        self.write_plain(&format!(\"\\nrunning {} {}{}\\n\", test_count, noun, shuffle_seed_msg))\n     }\n \n     fn write_test_start(&mut self, desc: &TestDesc) -> io::Result<()> {"}, {"sha": "049cadf86a6d029d3668882ad1d53b1a19d79f84", "filename": "library/test/src/helpers/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/library%2Ftest%2Fsrc%2Fhelpers%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/library%2Ftest%2Fsrc%2Fhelpers%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fhelpers%2Fmod.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -5,3 +5,4 @@ pub mod concurrency;\n pub mod exit_code;\n pub mod isatty;\n pub mod metrics;\n+pub mod shuffle;"}, {"sha": "ca503106c556c43b5fd92e377a1ee6a4fc8db8e7", "filename": "library/test/src/helpers/shuffle.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/library%2Ftest%2Fsrc%2Fhelpers%2Fshuffle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/library%2Ftest%2Fsrc%2Fhelpers%2Fshuffle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fhelpers%2Fshuffle.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -0,0 +1,67 @@\n+use crate::cli::TestOpts;\n+use crate::types::{TestDescAndFn, TestId, TestName};\n+use std::collections::hash_map::DefaultHasher;\n+use std::hash::Hasher;\n+use std::time::{SystemTime, UNIX_EPOCH};\n+\n+pub fn get_shuffle_seed(opts: &TestOpts) -> Option<u64> {\n+    opts.shuffle_seed.or_else(|| {\n+        if opts.shuffle {\n+            Some(\n+                SystemTime::now()\n+                    .duration_since(UNIX_EPOCH)\n+                    .expect(\"Failed to get system time\")\n+                    .as_nanos() as u64,\n+            )\n+        } else {\n+            None\n+        }\n+    })\n+}\n+\n+pub fn shuffle_tests(shuffle_seed: u64, tests: &mut [(TestId, TestDescAndFn)]) {\n+    let test_names: Vec<&TestName> = tests.iter().map(|test| &test.1.desc.name).collect();\n+    let test_names_hash = calculate_hash(&test_names);\n+    let mut rng = Rng::new(shuffle_seed, test_names_hash);\n+    shuffle(&mut rng, tests);\n+}\n+\n+// `shuffle` is from `rust-analyzer/src/cli/analysis_stats.rs`.\n+fn shuffle<T>(rng: &mut Rng, slice: &mut [T]) {\n+    for i in 0..slice.len() {\n+        randomize_first(rng, &mut slice[i..]);\n+    }\n+\n+    fn randomize_first<T>(rng: &mut Rng, slice: &mut [T]) {\n+        assert!(!slice.is_empty());\n+        let idx = rng.rand_range(0..slice.len() as u64) as usize;\n+        slice.swap(0, idx);\n+    }\n+}\n+\n+struct Rng {\n+    state: u64,\n+    extra: u64,\n+}\n+\n+impl Rng {\n+    fn new(seed: u64, extra: u64) -> Self {\n+        Self { state: seed, extra }\n+    }\n+\n+    fn rand_range(&mut self, range: core::ops::Range<u64>) -> u64 {\n+        self.rand_u64() % (range.end - range.start) + range.start\n+    }\n+\n+    fn rand_u64(&mut self) -> u64 {\n+        self.state = calculate_hash(&(self.state, self.extra));\n+        self.state\n+    }\n+}\n+\n+// `calculate_hash` is from `core/src/hash/mod.rs`.\n+fn calculate_hash<T: core::hash::Hash>(t: &T) -> u64 {\n+    let mut s = DefaultHasher::new();\n+    t.hash(&mut s);\n+    s.finish()\n+}"}, {"sha": "99d951d8016bb4aef1e0ad0695f53b80ef488ddf", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -91,6 +91,7 @@ mod tests;\n use event::{CompletedTest, TestEvent};\n use helpers::concurrency::get_concurrency;\n use helpers::exit_code::get_exit_code;\n+use helpers::shuffle::{get_shuffle_seed, shuffle_tests};\n use options::{Concurrent, RunStrategy};\n use test_result::*;\n use time::TestExecTime;\n@@ -247,7 +248,9 @@ where\n \n     let filtered_descs = filtered_tests.iter().map(|t| t.desc.clone()).collect();\n \n-    let event = TestEvent::TeFiltered(filtered_descs);\n+    let shuffle_seed = get_shuffle_seed(opts);\n+\n+    let event = TestEvent::TeFiltered(filtered_descs, shuffle_seed);\n     notify_about_test_event(event)?;\n \n     let (filtered_tests, filtered_benchs): (Vec<_>, _) = filtered_tests\n@@ -259,7 +262,11 @@ where\n     let concurrency = opts.test_threads.unwrap_or_else(get_concurrency);\n \n     let mut remaining = filtered_tests;\n-    remaining.reverse();\n+    if let Some(shuffle_seed) = shuffle_seed {\n+        shuffle_tests(shuffle_seed, &mut remaining);\n+    } else {\n+        remaining.reverse();\n+    }\n     let mut pending = 0;\n \n     let (tx, rx) = channel::<CompletedTest>();"}, {"sha": "718613895dee4e30fd2170824b3d07e80c994cb3", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 94, "deletions": 25, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -45,6 +45,8 @@ impl TestOpts {\n             nocapture: false,\n             color: AutoColor,\n             format: OutputFormat::Pretty,\n+            shuffle: false,\n+            shuffle_seed: None,\n             test_threads: None,\n             skip: vec![],\n             time_options: None,\n@@ -565,11 +567,7 @@ pub fn exact_filter_match() {\n     assert_eq!(exact.len(), 2);\n }\n \n-#[test]\n-pub fn sort_tests() {\n-    let mut opts = TestOpts::new();\n-    opts.run_tests = true;\n-\n+fn sample_tests() -> Vec<TestDescAndFn> {\n     let names = vec![\n         \"sha1::test\".to_string(),\n         \"isize::test_to_str\".to_string(),\n@@ -583,26 +581,32 @@ pub fn sort_tests() {\n         \"test::run_include_ignored_option\".to_string(),\n         \"test::sort_tests\".to_string(),\n     ];\n-    let tests = {\n-        fn testfn() {}\n-        let mut tests = Vec::new();\n-        for name in &names {\n-            let test = TestDescAndFn {\n-                desc: TestDesc {\n-                    name: DynTestName((*name).clone()),\n-                    ignore: false,\n-                    should_panic: ShouldPanic::No,\n-                    allow_fail: false,\n-                    compile_fail: false,\n-                    no_run: false,\n-                    test_type: TestType::Unknown,\n-                },\n-                testfn: DynTestFn(Box::new(testfn)),\n-            };\n-            tests.push(test);\n-        }\n-        tests\n-    };\n+    fn testfn() {}\n+    let mut tests = Vec::new();\n+    for name in &names {\n+        let test = TestDescAndFn {\n+            desc: TestDesc {\n+                name: DynTestName((*name).clone()),\n+                ignore: false,\n+                should_panic: ShouldPanic::No,\n+                allow_fail: false,\n+                compile_fail: false,\n+                no_run: false,\n+                test_type: TestType::Unknown,\n+            },\n+            testfn: DynTestFn(Box::new(testfn)),\n+        };\n+        tests.push(test);\n+    }\n+    tests\n+}\n+\n+#[test]\n+pub fn sort_tests() {\n+    let mut opts = TestOpts::new();\n+    opts.run_tests = true;\n+\n+    let tests = sample_tests();\n     let filtered = filter_tests(&opts, tests);\n \n     let expected = vec![\n@@ -624,6 +628,71 @@ pub fn sort_tests() {\n     }\n }\n \n+#[test]\n+pub fn shuffle_tests() {\n+    let mut opts = TestOpts::new();\n+    opts.shuffle = true;\n+\n+    let shuffle_seed = get_shuffle_seed(&opts).unwrap();\n+\n+    let left =\n+        sample_tests().into_iter().enumerate().map(|(i, e)| (TestId(i), e)).collect::<Vec<_>>();\n+    let mut right =\n+        sample_tests().into_iter().enumerate().map(|(i, e)| (TestId(i), e)).collect::<Vec<_>>();\n+\n+    assert!(left.iter().zip(&right).all(|(a, b)| a.1.desc.name == b.1.desc.name));\n+\n+    helpers::shuffle::shuffle_tests(shuffle_seed, right.as_mut_slice());\n+\n+    assert!(left.iter().zip(right).any(|(a, b)| a.1.desc.name != b.1.desc.name));\n+}\n+\n+#[test]\n+pub fn shuffle_tests_with_seed() {\n+    let mut opts = TestOpts::new();\n+    opts.shuffle = true;\n+\n+    let shuffle_seed = get_shuffle_seed(&opts).unwrap();\n+\n+    let mut left =\n+        sample_tests().into_iter().enumerate().map(|(i, e)| (TestId(i), e)).collect::<Vec<_>>();\n+    let mut right =\n+        sample_tests().into_iter().enumerate().map(|(i, e)| (TestId(i), e)).collect::<Vec<_>>();\n+\n+    helpers::shuffle::shuffle_tests(shuffle_seed, left.as_mut_slice());\n+    helpers::shuffle::shuffle_tests(shuffle_seed, right.as_mut_slice());\n+\n+    assert!(left.iter().zip(right).all(|(a, b)| a.1.desc.name == b.1.desc.name));\n+}\n+\n+#[test]\n+pub fn order_depends_on_more_than_seed() {\n+    let mut opts = TestOpts::new();\n+    opts.shuffle = true;\n+\n+    let shuffle_seed = get_shuffle_seed(&opts).unwrap();\n+\n+    let mut left_tests = sample_tests();\n+    let mut right_tests = sample_tests();\n+\n+    left_tests.pop();\n+    right_tests.remove(0);\n+\n+    let mut left =\n+        left_tests.into_iter().enumerate().map(|(i, e)| (TestId(i), e)).collect::<Vec<_>>();\n+    let mut right =\n+        right_tests.into_iter().enumerate().map(|(i, e)| (TestId(i), e)).collect::<Vec<_>>();\n+\n+    assert_eq!(left.len(), right.len());\n+\n+    assert!(left.iter().zip(&right).all(|(a, b)| a.0 == b.0));\n+\n+    helpers::shuffle::shuffle_tests(shuffle_seed, left.as_mut_slice());\n+    helpers::shuffle::shuffle_tests(shuffle_seed, right.as_mut_slice());\n+\n+    assert!(left.iter().zip(right).any(|(a, b)| a.0 != b.0));\n+}\n+\n #[test]\n pub fn test_metricmap_compare() {\n     let mut m1 = MetricMap::new();"}, {"sha": "4b189672226ea5984ee75c6f2780b12baac1df43", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -1136,14 +1136,14 @@ impl Step for Assemble {\n             // for `-Z gcc-ld=lld`\n             let gcc_ld_dir = libdir_bin.join(\"gcc-ld\");\n             t!(fs::create_dir(&gcc_ld_dir));\n-            builder.copy(\n-                &lld_install.join(\"bin\").join(&src_exe),\n-                &gcc_ld_dir.join(exe(\"ld\", target_compiler.host)),\n-            );\n-            builder.copy(\n-                &lld_install.join(\"bin\").join(&src_exe),\n-                &gcc_ld_dir.join(exe(\"ld64\", target_compiler.host)),\n-            );\n+            for flavor in [\"ld\", \"ld64\"] {\n+                let lld_wrapper_exe = builder.ensure(crate::tool::LldWrapper {\n+                    compiler: build_compiler,\n+                    target: target_compiler.host,\n+                    flavor_feature: flavor,\n+                });\n+                builder.copy(&lld_wrapper_exe, &gcc_ld_dir.join(exe(flavor, target_compiler.host)));\n+            }\n         }\n \n         // Similarly, copy `llvm-dwp` into libdir for Split DWARF. Only copy it when the LLVM"}, {"sha": "d4875cfe1b066e31d74f4d1ed48fc67ace3d26d8", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -409,11 +409,14 @@ impl Step for Rustc {\n                 let rust_lld = exe(\"rust-lld\", compiler.host);\n                 builder.copy(&src_dir.join(&rust_lld), &dst_dir.join(&rust_lld));\n                 // for `-Z gcc-ld=lld`\n-                let gcc_lld_dir = dst_dir.join(\"gcc-ld\");\n-                t!(fs::create_dir(&gcc_lld_dir));\n-                builder.copy(&src_dir.join(&rust_lld), &gcc_lld_dir.join(exe(\"ld\", compiler.host)));\n-                builder\n-                    .copy(&src_dir.join(&rust_lld), &gcc_lld_dir.join(exe(\"ld64\", compiler.host)));\n+                let gcc_lld_src_dir = src_dir.join(\"gcc-ld\");\n+                let gcc_lld_dst_dir = dst_dir.join(\"gcc-ld\");\n+                t!(fs::create_dir(&gcc_lld_dst_dir));\n+                for flavor in [\"ld\", \"ld64\"] {\n+                    let exe_name = exe(flavor, compiler.host);\n+                    builder\n+                        .copy(&gcc_lld_src_dir.join(&exe_name), &gcc_lld_dst_dir.join(&exe_name));\n+                }\n             }\n \n             // Copy over llvm-dwp if it's there"}, {"sha": "af6f4bb0e5fcba19c98240a9bdbf80cb8dcad5ef", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -664,6 +664,38 @@ impl Step for Cargo {\n     }\n }\n \n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct LldWrapper {\n+    pub compiler: Compiler,\n+    pub target: TargetSelection,\n+    pub flavor_feature: &'static str,\n+}\n+\n+impl Step for LldWrapper {\n+    type Output = PathBuf;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.never()\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) -> PathBuf {\n+        let src_exe = builder\n+            .ensure(ToolBuild {\n+                compiler: self.compiler,\n+                target: self.target,\n+                tool: \"lld-wrapper\",\n+                mode: Mode::ToolStd,\n+                path: \"src/tools/lld-wrapper\",\n+                is_optional_tool: false,\n+                source_type: SourceType::InTree,\n+                extra_features: vec![self.flavor_feature.to_owned()],\n+            })\n+            .expect(\"expected to build -- essential tool\");\n+\n+        src_exe\n+    }\n+}\n+\n macro_rules! tool_extended {\n     (($sel:ident, $builder:ident),\n        $($name:ident,"}, {"sha": "23a9f31e8e7da00c10434cb47c6e630ade13afae", "filename": "src/doc/rustc/src/tests/index.md", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/src%2Fdoc%2Frustc%2Fsrc%2Ftests%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/src%2Fdoc%2Frustc%2Fsrc%2Ftests%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Ftests%2Findex.md?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -181,6 +181,40 @@ unstable-options` flag. See [tracking issue\n #64888](https://github.com/rust-lang/rust/issues/64888) and the [unstable\n docs](../../unstable-book/compiler-flags/report-time.html) for more information.\n \n+#### `--shuffle`\n+\n+Runs the tests in random order, as opposed to the default alphabetical order.\n+\n+This may also be specified by setting the `RUST_TEST_SHUFFLE` environment\n+variable to anything but `0`.\n+\n+The random number generator seed that is output can be passed to\n+[`--shuffle-seed`](#--shuffle-seed-seed) to run the tests in the same order\n+again.\n+\n+Note that `--shuffle` does not affect whether the tests are run in parallel. To\n+run the tests in random order sequentially, use `--shuffle --test-threads 1`.\n+\n+\u26a0\ufe0f \ud83d\udea7 This option is [unstable](#unstable-options), and requires the `-Z\n+unstable-options` flag. See [tracking issue\n+#89583](https://github.com/rust-lang/rust/issues/89583) for more information.\n+\n+#### `--shuffle-seed` _SEED_\n+\n+Like [`--shuffle`](#--shuffle), but seeds the random number generator with\n+_SEED_. Thus, calling the test harness with `--shuffle-seed` _SEED_ twice runs\n+the tests in the same order both times.\n+\n+_SEED_ is any 64-bit unsigned integer, for example, one produced by\n+[`--shuffle`](#--shuffle).\n+\n+This can also be specified with the `RUST_TEST_SHUFFLE_SEED` environment\n+variable.\n+\n+\u26a0\ufe0f \ud83d\udea7 This option is [unstable](#unstable-options), and requires the `-Z\n+unstable-options` flag. See [tracking issue\n+#89583](https://github.com/rust-lang/rust/issues/89583) for more information.\n+\n ### Output options\n \n The following options affect the output behavior.\n@@ -197,7 +231,7 @@ to the console. Usually the output is captured, and only displayed if the test\n fails.\n \n This may also be specified by setting the `RUST_TEST_NOCAPTURE` environment\n-variable set to anything but `0`.\n+variable to anything but `0`.\n \n #### `--show-output`\n "}, {"sha": "44bd3baeeedfcf0560fae9670d0124d2de7da850", "filename": "src/doc/unstable-book/src/compiler-flags/debug_info_for_profiling.md", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdebug_info_for_profiling.md", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdebug_info_for_profiling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdebug_info_for_profiling.md?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -0,0 +1,35 @@\n+# `debug-info-for-profiling\n+\n+---\n+\n+## Introduction\n+\n+Automatic Feedback Directed Optimization (AFDO) is a method for using sampling\n+based profiles to guide optimizations. This is contrasted with other methods of\n+FDO or profile-guided optimization (PGO) which use instrumented profiling.\n+\n+Unlike PGO (controlled by the `rustc` flags `-Cprofile-generate` and\n+`-Cprofile-use`), a binary being profiled does not perform significantly worse,\n+and thus it's possible to profile binaries used in real workflows and not\n+necessary to construct artificial workflows.\n+\n+## Use\n+\n+In order to use AFDO, the target platform must be Linux running on an `x86_64`\n+architecture with the performance profiler `perf` available. In addition, the\n+external tool `create_llvm_prof` from [this repository] must be used.\n+\n+Given a Rust file `main.rs`, we can produce an optimized binary as follows:\n+\n+```shell\n+rustc -O -Zdebug-info-for-profiling main.rs -o main\n+perf record -b ./main\n+create_llvm_prof --binary=main --out=code.prof\n+rustc -O -Zprofile-sample-use=code.prof main.rs -o main2\n+```\n+\n+The `perf` command produces a profile `perf.data`, which is then used by the\n+`create_llvm_prof` command to create `code.prof`. This final profile is then\n+used by `rustc` to guide optimizations in producing the binary `main2`.\n+\n+[this repository]: https://github.com/google/autofdo"}, {"sha": "ce894ce6ac7f1d48a55dea2e01b4da61d5155310", "filename": "src/doc/unstable-book/src/compiler-flags/profile_sample_use.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fprofile_sample_use.md", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fprofile_sample_use.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fprofile_sample_use.md?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -0,0 +1,10 @@\n+# `profile-sample-use\n+\n+---\n+\n+`-Zprofile-sample-use=code.prof` directs `rustc` to use the profile\n+`code.prof` as a source for Automatic Feedback Directed Optimization (AFDO).\n+See the documentation of [`-Zdebug-info-for-profiling`] for more information\n+on using AFDO.\n+\n+[`-Zdebug-info-for-profiling`]: debug_info_for_profiling.html"}, {"sha": "5bd863439df5d3426279359c784c67930334487a", "filename": "src/test/incremental/mir-opt.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Fincremental%2Fmir-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Fincremental%2Fmir-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fmir-opt.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -0,0 +1,11 @@\n+// MIR optimizations can create expansions after the TyCtxt has been created.\n+// This test verifies that those expansions can be decoded correctly.\n+\n+// revisions:rpass1 rpass2\n+// compile-flags: -Z query-dep-graph -Z mir-opt-level=3\n+\n+fn main() {\n+    if std::env::var(\"a\").is_ok() {\n+        println!(\"b\");\n+    }\n+}"}, {"sha": "04b257d063204d6c044d3f71c7ff53529fde583e", "filename": "src/test/run-make/raw-dylib-link-ordinal/Makefile", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2FMakefile?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -0,0 +1,18 @@\n+# Test the behavior of #[link(.., kind = \"raw-dylib\")] and #[link_ordinal] on windows-msvc\n+\n+# only-windows-msvc\n+\n+-include ../../run-make-fulldeps/tools.mk\n+\n+all:\n+\t$(call COMPILE_OBJ,\"$(TMPDIR)\"/exporter.obj,exporter.c)\n+\t$(CC) \"$(TMPDIR)\"/exporter.obj exporter.def -link -dll -out:\"$(TMPDIR)\"/exporter.dll\n+\t$(RUSTC) --crate-type lib --crate-name raw_dylib_test lib.rs\n+\t$(RUSTC) --crate-type bin driver.rs -L \"$(TMPDIR)\"\n+\t\"$(TMPDIR)\"/driver > \"$(TMPDIR)\"/output.txt\n+\n+ifdef RUSTC_BLESS_TEST\n+\tcp \"$(TMPDIR)\"/output.txt output.txt\n+else\n+\t$(DIFF) output.txt \"$(TMPDIR)\"/output.txt\n+endif"}, {"sha": "4059ede11fc96ec7363aefdc0209442030390d80", "filename": "src/test/run-make/raw-dylib-link-ordinal/driver.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Fdriver.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -0,0 +1,5 @@\n+extern crate raw_dylib_test;\n+\n+fn main() {\n+    raw_dylib_test::library_function();\n+}"}, {"sha": "a9dd6da6616f9ac078294e295a7924f4617d118a", "filename": "src/test/run-make/raw-dylib-link-ordinal/exporter.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Fexporter.c", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Fexporter.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Fexporter.c?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -0,0 +1,5 @@\n+#include <stdio.h>\n+\n+void exported_function() {\n+    printf(\"exported_function\\n\");\n+}"}, {"sha": "1a4b4c941b65d05f6d3c693d0a7dada240403d05", "filename": "src/test/run-make/raw-dylib-link-ordinal/exporter.def", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Fexporter.def", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Fexporter.def", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Fexporter.def?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -0,0 +1,3 @@\n+LIBRARY exporter\n+EXPORTS\n+    exported_function @13 NONAME"}, {"sha": "20609caa5be21129353c77f56d2a7f6915783247", "filename": "src/test/run-make/raw-dylib-link-ordinal/lib.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Flib.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -0,0 +1,13 @@\n+#![feature(raw_dylib)]\n+\n+#[link(name = \"exporter\", kind = \"raw-dylib\")]\n+extern {\n+    #[link_ordinal(13)]\n+    fn imported_function();\n+}\n+\n+pub fn library_function() {\n+    unsafe {\n+        imported_function();\n+    }\n+}"}, {"sha": "2d0ed60f2166788133ef9ec72e76c831c34b8ead", "filename": "src/test/run-make/raw-dylib-link-ordinal/output.txt", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Foutput.txt", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Foutput.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-link-ordinal%2Foutput.txt?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -0,0 +1 @@\n+exported_function"}, {"sha": "c391ccd1c822766543bd273b475c76602ab14f1b", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-missing-argument.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-missing-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-missing-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-missing-argument.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -0,0 +1,11 @@\n+#![feature(raw_dylib)]\n+//~^ WARN the feature `raw_dylib` is incomplete\n+\n+#[link(name = \"foo\")]\n+extern \"C\" {\n+    #[link_ordinal()]\n+    //~^ ERROR incorrect number of arguments to `#[link_ordinal]`\n+    fn foo();\n+}\n+\n+fn main() {}"}, {"sha": "8e9edfb9d20ac6553d60646237ce26dccc1e4d78", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-missing-argument.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-missing-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-missing-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-missing-argument.stderr?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -0,0 +1,19 @@\n+warning: the feature `raw_dylib` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/link-ordinal-missing-argument.rs:1:12\n+   |\n+LL | #![feature(raw_dylib)]\n+   |            ^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n+\n+error: incorrect number of arguments to `#[link_ordinal]`\n+  --> $DIR/link-ordinal-missing-argument.rs:6:5\n+   |\n+LL |     #[link_ordinal()]\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the attribute requires exactly one argument\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "987412126771778a502f7a747337f9aa86f700dc", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-multiple.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-multiple.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -0,0 +1,13 @@\n+// only-windows-msvc\n+#![feature(raw_dylib)]\n+//~^ WARN the feature `raw_dylib` is incomplete\n+\n+#[link(name = \"foo\", kind = \"raw-dylib\")]\n+extern \"C\" {\n+    #[link_ordinal(1)]\n+    #[link_ordinal(2)]\n+    //~^ ERROR multiple `link_ordinal` attributes on a single definition\n+    fn foo();\n+}\n+\n+fn main() {}"}, {"sha": "a79fb2de94402c377ba484aa13caab3ac71376b9", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-multiple.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-multiple.stderr?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `raw_dylib` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/link-ordinal-multiple.rs:2:12\n+   |\n+LL | #![feature(raw_dylib)]\n+   |            ^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n+\n+error: multiple `link_ordinal` attributes on a single definition\n+  --> $DIR/link-ordinal-multiple.rs:8:5\n+   |\n+LL |     #[link_ordinal(2)]\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "b6089d27e7ab731e2e15429d498b361fdb6a9765", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-too-large.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -3,8 +3,8 @@\n \n #[link(name = \"foo\")]\n extern \"C\" {\n-    #[link_ordinal(18446744073709551616)]\n-    //~^ ERROR ordinal value in `link_ordinal` is too large: `18446744073709551616`\n+    #[link_ordinal(72436)]\n+    //~^ ERROR ordinal value in `link_ordinal` is too large: `72436`\n     fn foo();\n }\n "}, {"sha": "bbe985fa10ada35d30e2c687603a89df52f51c43", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-too-large.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-large.stderr?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -7,13 +7,13 @@ LL | #![feature(raw_dylib)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n \n-error: ordinal value in `link_ordinal` is too large: `18446744073709551616`\n+error: ordinal value in `link_ordinal` is too large: `72436`\n   --> $DIR/link-ordinal-too-large.rs:6:5\n    |\n-LL |     #[link_ordinal(18446744073709551616)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[link_ordinal(72436)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: the value may not exceed `usize::MAX`\n+   = note: the value may not exceed `u16::MAX`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "93286c616c5ac55ada64fc3ddc75dbf3cb5e58fc", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-too-many-arguments.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-many-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-many-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-many-arguments.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -0,0 +1,11 @@\n+#![feature(raw_dylib)]\n+//~^ WARN the feature `raw_dylib` is incomplete\n+\n+#[link(name = \"foo\")]\n+extern \"C\" {\n+    #[link_ordinal(3, 4)]\n+    //~^ ERROR incorrect number of arguments to `#[link_ordinal]`\n+    fn foo();\n+}\n+\n+fn main() {}"}, {"sha": "484c85a0f422a9bada710f70b6531bc6e213a8b8", "filename": "src/test/ui/rfc-2627-raw-dylib/link-ordinal-too-many-arguments.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-many-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-many-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Flink-ordinal-too-many-arguments.stderr?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -0,0 +1,19 @@\n+warning: the feature `raw_dylib` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/link-ordinal-too-many-arguments.rs:1:12\n+   |\n+LL | #![feature(raw_dylib)]\n+   |            ^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n+\n+error: incorrect number of arguments to `#[link_ordinal]`\n+  --> $DIR/link-ordinal-too-many-arguments.rs:6:5\n+   |\n+LL |     #[link_ordinal(3, 4)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the attribute requires exactly one argument\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "394fc3c8f8254c3e6fbe59979096a3a584aea278", "filename": "src/test/ui/rust-2021/panic.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Fui%2Frust-2021%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Fui%2Frust-2021%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Fpanic.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -0,0 +1,24 @@\n+// edition:2021\n+\n+fn main() {\n+    debug_assert!(false, 123);\n+    //~^ ERROR must be a string literal\n+    assert!(false, 123);\n+    //~^ ERROR must be a string literal\n+    panic!(false, 123);\n+    //~^ ERROR must be a string literal\n+\n+    std::debug_assert!(false, 123);\n+    //~^ ERROR must be a string literal\n+    std::assert!(false, 123);\n+    //~^ ERROR must be a string literal\n+    std::panic!(false, 123);\n+    //~^ ERROR must be a string literal\n+\n+    core::debug_assert!(false, 123);\n+    //~^ ERROR must be a string literal\n+    core::assert!(false, 123);\n+    //~^ ERROR must be a string literal\n+    core::panic!(false, 123);\n+    //~^ ERROR must be a string literal\n+}"}, {"sha": "40b62d279a5098ed4ab65a74a6ab067c299ecbaf", "filename": "src/test/ui/rust-2021/panic.stderr", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Fui%2Frust-2021%2Fpanic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/src%2Ftest%2Fui%2Frust-2021%2Fpanic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Fpanic.stderr?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -0,0 +1,101 @@\n+error: format argument must be a string literal\n+  --> $DIR/panic.rs:4:26\n+   |\n+LL |     debug_assert!(false, 123);\n+   |                          ^^^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL |     debug_assert!(false, \"{}\", 123);\n+   |                          +++++\n+\n+error: format argument must be a string literal\n+  --> $DIR/panic.rs:6:20\n+   |\n+LL |     assert!(false, 123);\n+   |                    ^^^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL |     assert!(false, \"{}\", 123);\n+   |                    +++++\n+\n+error: format argument must be a string literal\n+  --> $DIR/panic.rs:8:12\n+   |\n+LL |     panic!(false, 123);\n+   |            ^^^^^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL |     panic!(\"{} {}\", false, 123);\n+   |            ++++++++\n+\n+error: format argument must be a string literal\n+  --> $DIR/panic.rs:11:31\n+   |\n+LL |     std::debug_assert!(false, 123);\n+   |                               ^^^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL |     std::debug_assert!(false, \"{}\", 123);\n+   |                               +++++\n+\n+error: format argument must be a string literal\n+  --> $DIR/panic.rs:13:25\n+   |\n+LL |     std::assert!(false, 123);\n+   |                         ^^^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL |     std::assert!(false, \"{}\", 123);\n+   |                         +++++\n+\n+error: format argument must be a string literal\n+  --> $DIR/panic.rs:15:17\n+   |\n+LL |     std::panic!(false, 123);\n+   |                 ^^^^^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL |     std::panic!(\"{} {}\", false, 123);\n+   |                 ++++++++\n+\n+error: format argument must be a string literal\n+  --> $DIR/panic.rs:18:32\n+   |\n+LL |     core::debug_assert!(false, 123);\n+   |                                ^^^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL |     core::debug_assert!(false, \"{}\", 123);\n+   |                                +++++\n+\n+error: format argument must be a string literal\n+  --> $DIR/panic.rs:20:26\n+   |\n+LL |     core::assert!(false, 123);\n+   |                          ^^^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL |     core::assert!(false, \"{}\", 123);\n+   |                          +++++\n+\n+error: format argument must be a string literal\n+  --> $DIR/panic.rs:22:18\n+   |\n+LL |     core::panic!(false, 123);\n+   |                  ^^^^^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL |     core::panic!(\"{} {}\", false, 123);\n+   |                  ++++++++\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "87aba8c5d32bfcae9296c87804bc9853379094fc", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -506,6 +506,8 @@ pub fn test_opts(config: &Config) -> test::TestOpts {\n             Err(_) => false,\n         },\n         color: config.color,\n+        shuffle: false,\n+        shuffle_seed: None,\n         test_threads: None,\n         skip: vec![],\n         list: false,"}, {"sha": "66a586fd6c35ed049f72f4f8d6c96d6fd93d62bd", "filename": "src/tools/lld-wrapper/Cargo.toml", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/src%2Ftools%2Flld-wrapper%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/src%2Ftools%2Flld-wrapper%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flld-wrapper%2FCargo.toml?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -0,0 +1,11 @@\n+[package]\n+name = \"lld-wrapper\"\n+version = \"0.1.0\"\n+edition = \"2021\"\n+license = \"MIT OR Apache-2.0\"\n+\n+[dependencies]\n+\n+[features]\n+ld = []\n+ld64 = []\n\\ No newline at end of file"}, {"sha": "1601bf1b34e9c44b76f26b9ad44b109019a23878", "filename": "src/tools/lld-wrapper/src/main.rs", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/3013b26947e956352f95edfa39251319520cb06c/src%2Ftools%2Flld-wrapper%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3013b26947e956352f95edfa39251319520cb06c/src%2Ftools%2Flld-wrapper%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flld-wrapper%2Fsrc%2Fmain.rs?ref=3013b26947e956352f95edfa39251319520cb06c", "patch": "@@ -0,0 +1,125 @@\n+//! Script to invoke the bundled rust-lld with the correct flavor. The flavor is selected by\n+//! feature.\n+//!\n+//! lld supports multiple command line interfaces. If `-flavor <flavor>` are passed as the first\n+//! two arguments the `<flavor>` command line interface is used to process the remaining arguments.\n+//! If no `-flavor` argument is present the flavor is determined by the executable name.\n+//!\n+//! In Rust with `-Z gcc-ld=lld` we have gcc or clang invoke rust-lld. Since there is no way to\n+//! make gcc/clang pass `-flavor <flavor>` as the first two arguments in the linker invocation\n+//! and since Windows does not support symbolic links for files this wrapper is used in place of a\n+//! symblic link. It execs `../rust-lld -flavor ld` if the feature `ld` is enabled and\n+//! `../rust-lld -flavor ld64` if `ld64` is enabled. On Windows it spawns a `..\\rust-lld.exe`\n+//! child process.\n+\n+#[cfg(not(any(feature = \"ld\", feature = \"ld64\")))]\n+compile_error!(\"One of the features ld and ld64 must be enabled.\");\n+\n+#[cfg(all(feature = \"ld\", feature = \"ld64\"))]\n+compile_error!(\"Only one of the feature ld or ld64 can be enabled.\");\n+\n+#[cfg(feature = \"ld\")]\n+const FLAVOR: &str = \"ld\";\n+\n+#[cfg(feature = \"ld64\")]\n+const FLAVOR: &str = \"ld64\";\n+\n+use std::env;\n+use std::fmt::Display;\n+use std::path::{Path, PathBuf};\n+use std::process;\n+\n+trait ResultExt<T, E> {\n+    fn unwrap_or_exit_with(self, context: &str) -> T;\n+}\n+\n+impl<T, E> ResultExt<T, E> for Result<T, E>\n+where\n+    E: Display,\n+{\n+    fn unwrap_or_exit_with(self, context: &str) -> T {\n+        match self {\n+            Ok(t) => t,\n+            Err(e) => {\n+                eprintln!(\"lld-wrapper: {}: {}\", context, e);\n+                process::exit(1);\n+            }\n+        }\n+    }\n+}\n+\n+trait OptionExt<T> {\n+    fn unwrap_or_exit_with(self, context: &str) -> T;\n+}\n+\n+impl<T> OptionExt<T> for Option<T> {\n+    fn unwrap_or_exit_with(self, context: &str) -> T {\n+        match self {\n+            Some(t) => t,\n+            None => {\n+                eprintln!(\"lld-wrapper: {}\", context);\n+                process::exit(1);\n+            }\n+        }\n+    }\n+}\n+\n+/// Returns the path to rust-lld in the parent directory.\n+///\n+/// Exits if the parent directory cannot be determined.\n+fn get_rust_lld_path(current_exe_path: &Path) -> PathBuf {\n+    let mut rust_lld_exe_name = \"rust-lld\".to_owned();\n+    rust_lld_exe_name.push_str(env::consts::EXE_SUFFIX);\n+    let mut rust_lld_path = current_exe_path\n+        .parent()\n+        .unwrap_or_exit_with(\"directory containing current executable could not be determined\")\n+        .parent()\n+        .unwrap_or_exit_with(\"parent directory could not be determined\")\n+        .to_owned();\n+    rust_lld_path.push(rust_lld_exe_name);\n+    rust_lld_path\n+}\n+\n+/// Returns the command for invoking rust-lld with the correct flavor.\n+///\n+/// Exits on error.\n+fn get_rust_lld_command(current_exe_path: &Path) -> process::Command {\n+    let rust_lld_path = get_rust_lld_path(current_exe_path);\n+    let mut command = process::Command::new(rust_lld_path);\n+    command.arg(\"-flavor\");\n+    command.arg(FLAVOR);\n+    command.args(env::args_os().skip(1));\n+    command\n+}\n+\n+#[cfg(unix)]\n+fn exec_lld(mut command: process::Command) {\n+    use std::os::unix::prelude::CommandExt;\n+    Result::<(), _>::Err(command.exec()).unwrap_or_exit_with(\"could not exec rust-lld\");\n+    unreachable!(\"lld-wrapper: after exec without error\");\n+}\n+\n+#[cfg(not(unix))]\n+fn exec_lld(mut command: process::Command) {\n+    // Windows has no exec(), spawn a child process and wait for it\n+    let exit_status = command.status().unwrap_or_exit_with(\"error running rust-lld child process\");\n+    if !exit_status.success() {\n+        match exit_status.code() {\n+            Some(code) => {\n+                // return the original lld exit code\n+                process::exit(code)\n+            }\n+            None => {\n+                eprintln!(\"lld-wrapper: rust-lld child process exited with error: {}\", exit_status,);\n+                process::exit(1);\n+            }\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let current_exe_path =\n+        env::current_exe().unwrap_or_exit_with(\"could not get the path of the current executable\");\n+\n+    exec_lld(get_rust_lld_command(current_exe_path.as_ref()));\n+}"}]}