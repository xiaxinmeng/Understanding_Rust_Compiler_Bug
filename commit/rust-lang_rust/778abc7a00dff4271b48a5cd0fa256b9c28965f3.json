{"sha": "778abc7a00dff4271b48a5cd0fa256b9c28965f3", "node_id": "C_kwDOAAsO6NoAKDc3OGFiYzdhMDBkZmY0MjcxYjQ4YTVjZDBmYTI1NmI5YzI4OTY1ZjM", "commit": {"author": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "me@fmease.dev", "date": "2023-05-11T23:36:37Z"}, "committer": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "me@fmease.dev", "date": "2023-05-22T20:39:45Z"}, "message": "properly pretty-print inherent projections", "tree": {"sha": "00c25a389d4e231ee488b971b5fafd8e803f9aa5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00c25a389d4e231ee488b971b5fafd8e803f9aa5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/778abc7a00dff4271b48a5cd0fa256b9c28965f3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIyBAABCAAdFiEEXSQFaHGAjVoD5I3F0XoHIV9o5xMFAmRr0yMACgkQ0XoHIV9o\n5xPwIA/3TdqP6n4b+JGT6iamsL438rD8PwXoLgIHdCkqBR2PspE9B8kHx/WD8Qb+\nwv4gNTxBHLQhX9qGx3oNNUpuei4pYiyeoMf+Ih2qF16c0koYXlhNviBWrGc+Isd6\ne0gbtgq+UZOVqG4La8C2qlEINlUW8febk1xPKOEpDx73nuyUWkYOYqw8z6rK5Z7Q\nh0ElNtCdD2IJz0d3fpcV2dRP/EIYJ+7/dapOM2J4WUXra3ffLujBWmHdVcPO7MKP\nz3PDfSEdN4a83IeGHMYizKWSY5XDcvpCnSVIh8DanPr77GWYS8p9aaI1v+59xcao\n57epuD7VfSDuvUj5I/q8IPHyw1uL/ACCohuS3x9u5LZMxDCij6OipQXHW2HkYuQB\nDcP+DIcAHzNHOE4tCEcU26fxRoJ8qT2l7qpRB7BpdZx48LPUjot2lsBGiQJ/DWw6\nCbTU9iXn+hyuGMesMTZcvS6Jthgh4BOt/92Au9Pj29McYXg9WIA8ng+p3018mmqd\nuXoG4//Ex/ZQmQJvKmKmeKY9KU61NYAlV7be6ezQdO6dwStxohCBAksC6Z9AqcOw\nZ90wpnLJMQYvRXc/ZK3nXb8VzLFBdPCsLLbFjGuDXQhXDiAQ08C4GiDw4r5COZzm\nW2DW9ce+1RA9FoLeKnqkKggimqeJ3pkY70+6Zj9tPHDv4Bgx3w==\n=20hl\n-----END PGP SIGNATURE-----", "payload": "tree 00c25a389d4e231ee488b971b5fafd8e803f9aa5\nparent c2ccc855e74aec03e434405eca3c247ee2432e53\nauthor Le\u00f3n Orell Valerian Liehr <me@fmease.dev> 1683848197 +0200\ncommitter Le\u00f3n Orell Valerian Liehr <me@fmease.dev> 1684787985 +0200\n\nproperly pretty-print inherent projections\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/778abc7a00dff4271b48a5cd0fa256b9c28965f3", "html_url": "https://github.com/rust-lang/rust/commit/778abc7a00dff4271b48a5cd0fa256b9c28965f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/778abc7a00dff4271b48a5cd0fa256b9c28965f3/comments", "author": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2ccc855e74aec03e434405eca3c247ee2432e53", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2ccc855e74aec03e434405eca3c247ee2432e53", "html_url": "https://github.com/rust-lang/rust/commit/c2ccc855e74aec03e434405eca3c247ee2432e53"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "11ad5b49df2ef24d766123e3d0bdaa52570f3648", "filename": "compiler/rustc_const_eval/src/util/type_name.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/778abc7a00dff4271b48a5cd0fa256b9c28965f3/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778abc7a00dff4271b48a5cd0fa256b9c28965f3/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs?ref=778abc7a00dff4271b48a5cd0fa256b9c28965f3", "patch": "@@ -58,11 +58,12 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n             // Types with identity (print the module path).\n             ty::Adt(ty::AdtDef(Interned(&ty::AdtDefData { did: def_id, .. }, _)), substs)\n             | ty::FnDef(def_id, substs)\n-            | ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n+            | ty::Alias(ty::Projection | ty::Opaque, ty::AliasTy { def_id, substs, .. })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => self.print_def_path(def_id, substs),\n             ty::Foreign(def_id) => self.print_def_path(def_id, &[]),\n \n+            ty::Alias(ty::Inherent, _) => bug!(\"type_name: unexpected inherent projection\"),\n             ty::GeneratorWitness(_) => bug!(\"type_name: unexpected `GeneratorWitness`\"),\n             ty::GeneratorWitnessMIR(..) => bug!(\"type_name: unexpected `GeneratorWitnessMIR`\"),\n         }"}, {"sha": "e381c1812eda6e2dbdd37f0905b56b0bf2447ab4", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/778abc7a00dff4271b48a5cd0fa256b9c28965f3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778abc7a00dff4271b48a5cd0fa256b9c28965f3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=778abc7a00dff4271b48a5cd0fa256b9c28965f3", "patch": "@@ -1164,6 +1164,22 @@ pub trait PrettyPrinter<'tcx>:\n         traits.entry(trait_ref).or_default().extend(proj_ty);\n     }\n \n+    fn pretty_print_inherent_projection(\n+        self,\n+        alias_ty: &ty::AliasTy<'tcx>,\n+    ) -> Result<Self::Path, Self::Error> {\n+        let def_key = self.tcx().def_key(alias_ty.def_id);\n+        self.path_generic_args(\n+            |cx| {\n+                cx.path_append(\n+                    |cx| cx.path_qualified(alias_ty.self_ty(), None),\n+                    &def_key.disambiguated_data,\n+                )\n+            },\n+            &alias_ty.substs[1..],\n+        )\n+    }\n+\n     fn ty_infer_name(&self, _: ty::TyVid) -> Option<Symbol> {\n         None\n     }\n@@ -2821,7 +2837,11 @@ define_print_and_forward_display! {\n     }\n \n     ty::AliasTy<'tcx> {\n-        p!(print_def_path(self.def_id, self.substs));\n+        if let DefKind::Impl { of_trait: false } = cx.tcx().def_kind(cx.tcx().parent(self.def_id)) {\n+            p!(pretty_print_inherent_projection(self))\n+        } else {\n+            p!(print_def_path(self.def_id, self.substs));\n+        }\n     }\n \n     ty::ClosureKind {"}, {"sha": "254ede4e6a00af65133353711f580d2a300b4060", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/778abc7a00dff4271b48a5cd0fa256b9c28965f3/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778abc7a00dff4271b48a5cd0fa256b9c28965f3/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=778abc7a00dff4271b48a5cd0fa256b9c28965f3", "patch": "@@ -220,7 +220,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n         match *ty.kind() {\n             // Print all nominal types as paths (unlike `pretty_print_type`).\n             ty::FnDef(def_id, substs)\n-            | ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n+            | ty::Alias(ty::Projection | ty::Opaque, ty::AliasTy { def_id, substs, .. })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => self.print_def_path(def_id, substs),\n \n@@ -241,6 +241,8 @@ impl<'tcx> Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n                 Ok(self)\n             }\n \n+            ty::Alias(ty::Inherent, _) => panic!(\"unexpected inherent projection\"),\n+\n             _ => self.pretty_print_type(ty),\n         }\n     }"}, {"sha": "4cccc6398927c331f1b2347bb5ab0c29cb4e8cc6", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/778abc7a00dff4271b48a5cd0fa256b9c28965f3/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/778abc7a00dff4271b48a5cd0fa256b9c28965f3/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=778abc7a00dff4271b48a5cd0fa256b9c28965f3", "patch": "@@ -433,7 +433,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n             // Mangle all nominal types as paths.\n             ty::Adt(ty::AdtDef(Interned(&ty::AdtDefData { did: def_id, .. }, _)), substs)\n             | ty::FnDef(def_id, substs)\n-            | ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n+            | ty::Alias(ty::Projection | ty::Opaque, ty::AliasTy { def_id, substs, .. })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => {\n                 self = self.print_def_path(def_id, substs)?;\n@@ -482,6 +482,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n                 self = r.print(self)?;\n             }\n \n+            ty::Alias(ty::Inherent, _) => bug!(\"symbol_names: unexpected inherent projection\"),\n             ty::GeneratorWitness(_) => bug!(\"symbol_names: unexpected `GeneratorWitness`\"),\n             ty::GeneratorWitnessMIR(..) => bug!(\"symbol_names: unexpected `GeneratorWitnessMIR`\"),\n         }"}]}