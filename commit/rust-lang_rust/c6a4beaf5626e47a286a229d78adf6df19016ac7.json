{"sha": "c6a4beaf5626e47a286a229d78adf6df19016ac7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YTRiZWFmNTYyNmU0N2EyODZhMjI5ZDc4YWRmNmRmMTkwMTZhYzc=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-02-07T03:34:06Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-02-07T03:40:09Z"}, "message": "Rustup https://github.com/rust-lang/rust/pull/67359", "tree": {"sha": "2fd5ca0f391d5da9891186238fd3d38c32630f93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fd5ca0f391d5da9891186238fd3d38c32630f93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6a4beaf5626e47a286a229d78adf6df19016ac7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6a4beaf5626e47a286a229d78adf6df19016ac7", "html_url": "https://github.com/rust-lang/rust/commit/c6a4beaf5626e47a286a229d78adf6df19016ac7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6a4beaf5626e47a286a229d78adf6df19016ac7/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5e6d6db417a88f67e94b63463940c21bc37120b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5e6d6db417a88f67e94b63463940c21bc37120b", "html_url": "https://github.com/rust-lang/rust/commit/b5e6d6db417a88f67e94b63463940c21bc37120b"}], "stats": {"total": 59, "additions": 47, "deletions": 12}, "files": [{"sha": "8f09c8ce9d52aec82b1fb2193ccb6df05dc480ba", "filename": "tests/ui/assertions_on_constants.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Fassertions_on_constants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Fassertions_on_constants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_constants.stderr?ref=c6a4beaf5626e47a286a229d78adf6df19016ac7", "patch": "@@ -6,6 +6,7 @@ LL |     assert!(true);\n    |\n    = note: `-D clippy::assertions-on-constants` implied by `-D warnings`\n    = help: remove it\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false)` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:10:5\n@@ -14,6 +15,7 @@ LL |     assert!(false);\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: use `panic!()` or `unreachable!()`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(true)` will be optimized out by the compiler\n   --> $DIR/assertions_on_constants.rs:11:5\n@@ -22,6 +24,7 @@ LL |     assert!(true, \"true message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove it\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false, \"false message\")` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:12:5\n@@ -30,6 +33,7 @@ LL |     assert!(false, \"false message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use `panic!(\"false message\")` or `unreachable!(\"false message\")`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false, msg.to_uppercase())` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:15:5\n@@ -38,6 +42,7 @@ LL |     assert!(false, msg.to_uppercase());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use `panic!(msg.to_uppercase())` or `unreachable!(msg.to_uppercase())`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(true)` will be optimized out by the compiler\n   --> $DIR/assertions_on_constants.rs:18:5\n@@ -46,6 +51,7 @@ LL |     assert!(B);\n    |     ^^^^^^^^^^^\n    |\n    = help: remove it\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false)` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:21:5\n@@ -54,6 +60,7 @@ LL |     assert!(C);\n    |     ^^^^^^^^^^^\n    |\n    = help: use `panic!()` or `unreachable!()`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false, \"C message\")` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:22:5\n@@ -62,6 +69,7 @@ LL |     assert!(C, \"C message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use `panic!(\"C message\")` or `unreachable!(\"C message\")`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `debug_assert!(true)` will be optimized out by the compiler\n   --> $DIR/assertions_on_constants.rs:24:5\n@@ -70,7 +78,7 @@ LL |     debug_assert!(true);\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove it\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 9 previous errors\n "}, {"sha": "e40542e2e4f90ba47fd1bc788a97801941f86d1f", "filename": "tests/ui/checked_unwrap/simple_conditionals.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr?ref=c6a4beaf5626e47a286a229d78adf6df19016ac7", "patch": "@@ -54,6 +54,8 @@ LL |             $a.unwrap(); // unnecessary\n ...\n LL |     m!(x);\n    |     ------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n   --> $DIR/simple_conditionals.rs:27:9"}, {"sha": "53799b4fbf1d971c26eab4b29a21619b567254e9", "filename": "tests/ui/crashes/ice-2636.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Fcrashes%2Fice-2636.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Fcrashes%2Fice-2636.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-2636.stderr?ref=c6a4beaf5626e47a286a229d78adf6df19016ac7", "patch": "@@ -11,6 +11,7 @@ LL |       test_hash!(&a, A => 0, B => 1, C => 2);\n    |       --------------------------------------- in this macro invocation\n    |\n    = note: `-D clippy::match-ref-pats` implied by `-D warnings`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "6a9a57361f9f39fe1c762988bfdc4e6b632898a5", "filename": "tests/ui/declare_interior_mutable_const.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Fdeclare_interior_mutable_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Fdeclare_interior_mutable_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeclare_interior_mutable_const.stderr?ref=c6a4beaf5626e47a286a229d78adf6df19016ac7", "patch": "@@ -32,6 +32,8 @@ LL |         const $name: $ty = $e;\n ...\n LL | declare_const!(_ONCE: Once = Once::new()); //~ ERROR interior mutable\n    | ------------------------------------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: a `const` item should never be interior mutable\n   --> $DIR/declare_interior_mutable_const.rs:40:5\n@@ -71,6 +73,8 @@ LL |         const $name: $ty = $e;\n ...\n LL |     declare_const!(ANOTHER_INPUT: T = Self::INPUT); //~ ERROR interior mutable\n    |     ----------------------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: a `const` item should never be interior mutable\n   --> $DIR/declare_interior_mutable_const.rs:60:5"}, {"sha": "fc76dec822235426b1e15c11678ecd23877f7645", "filename": "tests/ui/default_lint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Fdefault_lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Fdefault_lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_lint.stderr?ref=c6a4beaf5626e47a286a229d78adf6df19016ac7", "patch": "@@ -15,7 +15,7 @@ note: the lint level is defined here\n LL | #![deny(clippy::internal)]\n    |         ^^^^^^^^^^^^^^^^\n    = note: `#[deny(clippy::default_lint)]` implied by `#[deny(clippy::internal)]`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "2287a548fe46cc67a8b3de8de09ea609a97424e7", "filename": "tests/ui/derive_hash_xor_eq.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Fderive_hash_xor_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Fderive_hash_xor_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive_hash_xor_eq.stderr?ref=c6a4beaf5626e47a286a229d78adf6df19016ac7", "patch": "@@ -14,6 +14,7 @@ LL | |         true\n LL | |     }\n LL | | }\n    | |_^\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are deriving `Hash` but have implemented `PartialEq` explicitly\n   --> $DIR/derive_hash_xor_eq.rs:19:10\n@@ -30,6 +31,7 @@ LL | |         true\n LL | |     }\n LL | | }\n    | |_^\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are implementing `Hash` explicitly but have derived `PartialEq`\n   --> $DIR/derive_hash_xor_eq.rs:31:1\n@@ -44,6 +46,7 @@ note: `PartialEq` implemented here\n    |\n LL | #[derive(PartialEq)]\n    |          ^^^^^^^^^\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are implementing `Hash` explicitly but have derived `PartialEq`\n   --> $DIR/derive_hash_xor_eq.rs:49:5\n@@ -58,6 +61,7 @@ note: `PartialEq` implemented here\n    |\n LL |     #[derive(PartialEq)]\n    |              ^^^^^^^^^\n+   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "c784d41ba1724815db75e43289b7e082db391fed", "filename": "tests/ui/doc_unsafe.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Fdoc_unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Fdoc_unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_unsafe.stderr?ref=c6a4beaf5626e47a286a229d78adf6df19016ac7", "patch": "@@ -40,6 +40,8 @@ LL | |         }\n ...\n LL |   very_unsafe!();\n    |   --------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "ab976b947b356e0f3ea9de6a1408791093e0ced3", "filename": "tests/ui/fallible_impl_from.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Ffallible_impl_from.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Ffallible_impl_from.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffallible_impl_from.stderr?ref=c6a4beaf5626e47a286a229d78adf6df19016ac7", "patch": "@@ -38,7 +38,7 @@ note: potential failure(s)\n    |\n LL |             panic!();\n    |             ^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: consider implementing `TryFrom` instead\n   --> $DIR/fallible_impl_from.rs:35:1\n@@ -65,7 +65,7 @@ LL |         } else if s.parse::<u32>().unwrap() != 42 {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |             panic!(\"{:?}\", s);\n    |             ^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: consider implementing `TryFrom` instead\n   --> $DIR/fallible_impl_from.rs:53:1\n@@ -87,7 +87,7 @@ LL |         if s.parse::<u32>().ok().unwrap() != 42 {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |             panic!(\"{:?}\", s);\n    |             ^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "252e9eb5dd8c8bd2f6631be373ca967b6c1dae67", "filename": "tests/ui/implicit_hasher.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Fimplicit_hasher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Fimplicit_hasher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.stderr?ref=c6a4beaf5626e47a286a229d78adf6df19016ac7", "patch": "@@ -105,6 +105,7 @@ LL |         impl<K: Hash + Eq, V> Foo<u8> for HashMap<K, V> {\n LL | gen!(impl);\n    | ----------- in this macro invocation\n    |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider adding a type parameter\n    |\n LL |         impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher + Default> Foo<u8> for HashMap<K, V, S> {\n@@ -123,6 +124,7 @@ LL |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>)\n LL | gen!(fn bar);\n    | ------------- in this macro invocation\n    |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider adding a type parameter\n    |\n LL |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32, S>, _set: &mut HashSet<i32>) {}\n@@ -137,6 +139,7 @@ LL |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>)\n LL | gen!(fn bar);\n    | ------------- in this macro invocation\n    |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider adding a type parameter\n    |\n LL |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32, S>) {}"}, {"sha": "1257dae96d71cc17c0261ff5f66efcea3575c165", "filename": "tests/ui/lint_without_lint_pass.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Flint_without_lint_pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Flint_without_lint_pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint_without_lint_pass.stderr?ref=c6a4beaf5626e47a286a229d78adf6df19016ac7", "patch": "@@ -15,7 +15,7 @@ note: the lint level is defined here\n LL | #![deny(clippy::internal)]\n    |         ^^^^^^^^^^^^^^^^\n    = note: `#[deny(clippy::lint_without_lint_pass)]` implied by `#[deny(clippy::internal)]`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "26c65f32ad780a454d133432a2d2f02c00dc6465", "filename": "tests/ui/match_same_arms2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Fmatch_same_arms2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Fmatch_same_arms2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms2.stderr?ref=c6a4beaf5626e47a286a229d78adf6df19016ac7", "patch": "@@ -121,7 +121,7 @@ help: consider refactoring into `(Ok(x), Some(_)) | (Ok(_), Some(x))`\n    |\n LL |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n   --> $DIR/match_same_arms2.rs:117:18\n@@ -139,7 +139,7 @@ help: consider refactoring into `Ok(3) | Ok(_)`\n    |\n LL |         Ok(3) => println!(\"ok\"),\n    |         ^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 7 previous errors\n "}, {"sha": "8d9810970adee1bbe7d8301b15eec78c6d36f6ee", "filename": "tests/ui/mem_discriminant.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Fmem_discriminant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Fmem_discriminant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_discriminant.stderr?ref=c6a4beaf5626e47a286a229d78adf6df19016ac7", "patch": "@@ -71,6 +71,8 @@ LL |     mem_discriminant_but_in_a_macro!(&rro);\n    |     |                                |\n    |     |                                help: try dereferencing: `*rro`\n    |     in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: calling `mem::discriminant` on non-enum type `&&&&&std::option::Option<i32>`\n   --> $DIR/mem_discriminant.rs:34:5"}, {"sha": "4971a91050bf20f968bd2bf62547a8558babd156", "filename": "tests/ui/mem_replace_macro.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Fmem_replace_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Fmem_replace_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace_macro.stderr?ref=c6a4beaf5626e47a286a229d78adf6df19016ac7", "patch": "@@ -8,6 +8,7 @@ LL |     take!(s);\n    |     --------- in this macro invocation\n    |\n    = note: `-D clippy::mem-replace-with-default` implied by `-D warnings`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "44e81422714181250edb7b3338c7d4cf3e7fe7c8", "filename": "tests/ui/mut_mut.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Fmut_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Fmut_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_mut.stderr?ref=c6a4beaf5626e47a286a229d78adf6df19016ac7", "patch": "@@ -20,6 +20,8 @@ LL |         &mut $p\n ...\n LL |     let mut z = mut_ptr!(&mut 3u32);\n    |                 ------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: this expression mutably borrows a mutable reference. Consider reborrowing\n   --> $DIR/mut_mut.rs:22:21"}, {"sha": "c8c0a85dfc102d9b2cb4c25e03803a7c8ec260c6", "filename": "tests/ui/unit_cmp.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Funit_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Funit_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_cmp.stderr?ref=c6a4beaf5626e47a286a229d78adf6df19016ac7", "patch": "@@ -34,7 +34,7 @@ LL | |         }\n LL | |     );\n    | |______^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `debug_assert_eq` of unit values detected. This will always succeed\n   --> $DIR/unit_cmp.rs:32:5\n@@ -48,7 +48,7 @@ LL | |         }\n LL | |     );\n    | |______^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert_ne` of unit values detected. This will always fail\n   --> $DIR/unit_cmp.rs:41:5\n@@ -62,7 +62,7 @@ LL | |         }\n LL | |     );\n    | |______^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `debug_assert_ne` of unit values detected. This will always fail\n   --> $DIR/unit_cmp.rs:49:5\n@@ -76,7 +76,7 @@ LL | |         }\n LL | |     );\n    | |______^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "d7dd526bcb9af431f2f93291401e3781be90f64f", "filename": "tests/ui/unseparated_prefix_literals.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Funseparated_prefix_literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Funseparated_prefix_literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funseparated_prefix_literals.stderr?ref=c6a4beaf5626e47a286a229d78adf6df19016ac7", "patch": "@@ -50,6 +50,8 @@ LL |         42usize\n ...\n LL |     let _ = lit_from_macro!();\n    |             ----------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: integer type suffix should be separated by an underscore\n   --> $DIR/unseparated_prefix_literals.rs:40:16"}, {"sha": "b33928597c1455534bd6f8327aec24263f200990", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6a4beaf5626e47a286a229d78adf6df19016ac7/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=c6a4beaf5626e47a286a229d78adf6df19016ac7", "patch": "@@ -56,6 +56,8 @@ LL |             fn new() -> Foo {\n ...\n LL |         use_self_expand!(); // Should lint in local macros\n    |         ------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unnecessary structure name repetition\n   --> $DIR/use_self.rs:113:17\n@@ -65,6 +67,8 @@ LL |                 Foo {}\n ...\n LL |         use_self_expand!(); // Should lint in local macros\n    |         ------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unnecessary structure name repetition\n   --> $DIR/use_self.rs:148:21"}]}