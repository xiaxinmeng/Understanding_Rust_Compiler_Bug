{"sha": "525a798ca6513a204de8bd434bf260d79cbdfc9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNWE3OThjYTY1MTNhMjA0ZGU4YmQ0MzRiZjI2MGQ3OWNiZGZjOWY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-09-22T19:55:42Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-09-30T21:02:55Z"}, "message": "Rewrite emscripten unwinding to use libcxx", "tree": {"sha": "d8169b462b219d52c4187565c91181b611339ea6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8169b462b219d52c4187565c91181b611339ea6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/525a798ca6513a204de8bd434bf260d79cbdfc9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/525a798ca6513a204de8bd434bf260d79cbdfc9f", "html_url": "https://github.com/rust-lang/rust/commit/525a798ca6513a204de8bd434bf260d79cbdfc9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/525a798ca6513a204de8bd434bf260d79cbdfc9f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c0bf41cffc39d011bde4ca722c94d58617c4c91", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c0bf41cffc39d011bde4ca722c94d58617c4c91", "html_url": "https://github.com/rust-lang/rust/commit/7c0bf41cffc39d011bde4ca722c94d58617c4c91"}], "stats": {"total": 105, "additions": 93, "deletions": 12}, "files": [{"sha": "0cf75c941508b7b378ceeb86cb3105e0c593df5b", "filename": "src/libpanic_unwind/Cargo.lock", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/525a798ca6513a204de8bd434bf260d79cbdfc9f/src%2Flibpanic_unwind%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/525a798ca6513a204de8bd434bf260d79cbdfc9f/src%2Flibpanic_unwind%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2FCargo.lock?ref=525a798ca6513a204de8bd434bf260d79cbdfc9f", "patch": "@@ -5,6 +5,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"core 0.0.0\",\n  \"libc 0.0.0\",\n+ \"unwind 0.0.0\",\n ]\n \n [[package]]\n@@ -25,3 +26,11 @@ dependencies = [\n  \"core 0.0.0\",\n ]\n \n+[[package]]\n+name = \"unwind\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"core 0.0.0\",\n+ \"libc 0.0.0\",\n+]\n+"}, {"sha": "598f99ba27bf16fe502b4bb2ae0df6e114f6311f", "filename": "src/libpanic_unwind/emcc.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/525a798ca6513a204de8bd434bf260d79cbdfc9f/src%2Flibpanic_unwind%2Femcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/525a798ca6513a204de8bd434bf260d79cbdfc9f/src%2Flibpanic_unwind%2Femcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Femcc.rs?ref=525a798ca6513a204de8bd434bf260d79cbdfc9f", "patch": "@@ -0,0 +1,76 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(private_no_mangle_fns)]\n+\n+use core::any::Any;\n+use core::ptr;\n+use alloc::boxed::Box;\n+use libc::{self, c_int};\n+use unwind as uw;\n+use core::mem;\n+\n+pub fn payload() -> *mut u8 {\n+    ptr::null_mut()\n+}\n+\n+pub unsafe fn cleanup(ptr: *mut u8) -> Box<Any + Send> {\n+    assert!(!ptr.is_null());\n+    let ex = ptr::read(ptr as *mut _);\n+    __cxa_free_exception(ptr as *mut _);\n+    ex\n+}\n+\n+pub unsafe fn panic(data: Box<Any + Send>) -> u32 {\n+    let sz = mem::size_of_val(&data);\n+    let exception = __cxa_allocate_exception(sz);\n+    if exception == ptr::null_mut() {\n+        return uw::_URC_FATAL_PHASE1_ERROR as u32;\n+    }\n+    let exception = exception as *mut Box<Any + Send>;\n+    ptr::write(exception, data);\n+    __cxa_throw(exception as *mut _, ptr::null_mut(), ptr::null_mut());\n+\n+    unreachable!()\n+}\n+\n+#[lang = \"eh_personality\"]\n+#[no_mangle]\n+unsafe extern \"C\" fn rust_eh_personality(version: c_int,\n+                                         actions: uw::_Unwind_Action,\n+                                         exception_class: uw::_Unwind_Exception_Class,\n+                                         exception_object: *mut uw::_Unwind_Exception,\n+                                         context: *mut uw::_Unwind_Context)\n+                                         -> uw::_Unwind_Reason_Code {\n+    __gxx_personality_v0(version, actions,\n+                         exception_class,\n+                         exception_object,\n+                         context)\n+}\n+\n+#[lang = \"eh_unwind_resume\"]\n+#[unwind]\n+unsafe extern \"C\" fn rust_eh_unwind_resume(panic_ctx: *mut u8) -> ! {\n+    uw::_Unwind_Resume(panic_ctx as *mut uw::_Unwind_Exception);\n+}\n+\n+extern {\n+    fn __cxa_allocate_exception(thrown_size: libc::size_t) -> *mut libc::c_void;\n+    fn __cxa_free_exception(thrown_exception: *mut libc::c_void);\n+    fn __cxa_throw(thrown_exception: *mut libc::c_void,\n+                   tinfo: *mut libc::c_void,\n+                   dest: *mut libc::c_void);\n+    fn __gxx_personality_v0(version: c_int,\n+                            actions: uw::_Unwind_Action,\n+                            exception_class: uw::_Unwind_Exception_Class,\n+                            exception_object: *mut uw::_Unwind_Exception,\n+                            context: *mut uw::_Unwind_Context)\n+                            -> uw::_Unwind_Reason_Code;\n+}"}, {"sha": "33b24fbaa26594d5326c66981110c00aa9966208", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/525a798ca6513a204de8bd434bf260d79cbdfc9f/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/525a798ca6513a204de8bd434bf260d79cbdfc9f/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=525a798ca6513a204de8bd434bf260d79cbdfc9f", "patch": "@@ -133,16 +133,6 @@ const UNWIND_DATA_REG: (i32, i32) = (3, 4); // R3, R4 / X3, X4\n #[cfg(target_arch = \"s390x\")]\n const UNWIND_DATA_REG: (i32, i32) = (6, 7); // R6, R7\n \n-// FIXME: This is completely and utterly wrong.\n-// I copy'n'pasted the x86 thing just to see if asmjs-unknown-emscripten compiles at all\n-// (the happy path)\n-#[cfg(target_arch = \"asmjs\")]\n-const UNWIND_DATA_REG: (i32, i32) = (0, 2); // EAX, EDX\n-\n-// FIXME: Ditto the above\n-#[cfg(target_arch = \"wasm32\")]\n-const UNWIND_DATA_REG: (i32, i32) = (0, 2); // EAX, EDX\n-\n // The following code is based on GCC's C and C++ personality routines.  For reference, see:\n // https://github.com/gcc-mirror/gcc/blob/master/libstdc++-v3/libsupc++/eh_personality.cc\n // https://github.com/gcc-mirror/gcc/blob/trunk/libgcc/unwind-c.c"}, {"sha": "ff483fa823e0cc0c86d7b224474b0ad5ae7266d7", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/525a798ca6513a204de8bd434bf260d79cbdfc9f/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/525a798ca6513a204de8bd434bf260d79cbdfc9f/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=525a798ca6513a204de8bd434bf260d79cbdfc9f", "patch": "@@ -68,10 +68,16 @@ mod imp;\n mod imp;\n \n // i686-pc-windows-gnu and all others\n-#[cfg(any(unix, all(windows, target_arch = \"x86\", target_env = \"gnu\")))]\n+#[cfg(any(all(unix, not(target_os = \"emscripten\")),\n+          all(windows, target_arch = \"x86\", target_env = \"gnu\")))]\n #[path = \"gcc.rs\"]\n mod imp;\n \n+// emscripten\n+#[cfg(target_os = \"emscripten\")]\n+#[path = \"emcc.rs\"]\n+mod imp;\n+\n mod dwarf;\n mod windows;\n "}, {"sha": "c2edf754e49c18ef38c97ac9fbb1d8b25f8658c6", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/525a798ca6513a204de8bd434bf260d79cbdfc9f/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/525a798ca6513a204de8bd434bf260d79cbdfc9f/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=525a798ca6513a204de8bd434bf260d79cbdfc9f", "patch": "@@ -65,7 +65,7 @@ pub const unwinder_private_data_size: usize = 2;\n #[cfg(target_arch = \"s390x\")]\n pub const unwinder_private_data_size: usize = 2;\n \n-#[cfg(any(target_arch = \"asmjs\", target_arch = \"wasm32\"))]\n+#[cfg(target_os = \"emscripten\")]\n pub const unwinder_private_data_size: usize = 20;\n \n #[repr(C)]"}]}