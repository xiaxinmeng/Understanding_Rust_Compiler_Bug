{"sha": "b2966e651de3bf83ab9c712a1afaeba84162cab1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyOTY2ZTY1MWRlM2JmODNhYjljNzEyYTFhZmFlYmE4NDE2MmNhYjE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T19:43:28Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T20:29:57Z"}, "message": "parser: bool -> GateOr.", "tree": {"sha": "3d5cdeb72531f694ae80f3dd03589c1829956a8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d5cdeb72531f694ae80f3dd03589c1829956a8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2966e651de3bf83ab9c712a1afaeba84162cab1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2966e651de3bf83ab9c712a1afaeba84162cab1", "html_url": "https://github.com/rust-lang/rust/commit/b2966e651de3bf83ab9c712a1afaeba84162cab1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2966e651de3bf83ab9c712a1afaeba84162cab1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b205055c7bc92c0f873755996e6fac3e694c7e72", "url": "https://api.github.com/repos/rust-lang/rust/commits/b205055c7bc92c0f873755996e6fac3e694c7e72", "html_url": "https://github.com/rust-lang/rust/commit/b205055c7bc92c0f873755996e6fac3e694c7e72"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "83e5a84a8c6aeb883d322ac67ca06eb33971732d", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b2966e651de3bf83ab9c712a1afaeba84162cab1/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2966e651de3bf83ab9c712a1afaeba84162cab1/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=b2966e651de3bf83ab9c712a1afaeba84162cab1", "patch": "@@ -1,6 +1,7 @@\n use super::{Parser, PResult, Restrictions, PrevTokenKind, TokenType, PathStyle};\n use super::{BlockMode, SemiColonMode};\n use super::{SeqSep, TokenExpectType};\n+use super::pat::GateOr;\n \n use crate::maybe_recover_from_interpolated_ty_qpath;\n use crate::ptr::P;\n@@ -1246,7 +1247,7 @@ impl<'a> Parser<'a> {\n     fn parse_let_expr(&mut self, attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n         let lo = self.prev_span;\n         // FIXME(or_patterns, Centril | dlrobertson): use `parse_top_pat` instead.\n-        let pat = self.parse_top_pat_unpack(false)?;\n+        let pat = self.parse_top_pat_unpack(GateOr::No)?;\n         self.expect(&token::Eq)?;\n         let expr = self.with_res(\n             Restrictions::NO_STRUCT_LITERAL,\n@@ -1284,7 +1285,7 @@ impl<'a> Parser<'a> {\n             _ => None,\n         };\n \n-        let pat = self.parse_top_pat(true)?;\n+        let pat = self.parse_top_pat(GateOr::Yes)?;\n         if !self.eat_keyword(kw::In) {\n             let in_span = self.prev_span.between(self.token.span);\n             self.struct_span_err(in_span, \"missing `in` in `for` loop\")\n@@ -1389,7 +1390,7 @@ impl<'a> Parser<'a> {\n         let attrs = self.parse_outer_attributes()?;\n         let lo = self.token.span;\n         // FIXME(or_patterns, Centril | dlrobertson): use `parse_top_pat` instead.\n-        let pat = self.parse_top_pat_unpack(false)?;\n+        let pat = self.parse_top_pat_unpack(GateOr::No)?;\n         let guard = if self.eat_keyword(kw::If) {\n             Some(self.parse_expr()?)\n         } else {"}, {"sha": "3d89ec56ffafa43d91fc81712428b6720266df54", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b2966e651de3bf83ab9c712a1afaeba84162cab1/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2966e651de3bf83ab9c712a1afaeba84162cab1/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=b2966e651de3bf83ab9c712a1afaeba84162cab1", "patch": "@@ -14,6 +14,10 @@ use errors::{Applicability, DiagnosticBuilder};\n \n type Expected = Option<&'static str>;\n \n+/// Whether or not an or-pattern should be gated when occurring in the current context.\n+#[derive(PartialEq)]\n+pub enum GateOr { Yes, No }\n+\n impl<'a> Parser<'a> {\n     /// Parses a pattern.\n     ///\n@@ -26,7 +30,7 @@ impl<'a> Parser<'a> {\n \n     // FIXME(or_patterns, Centril | dlrobertson):\n     // remove this and use `parse_top_pat` everywhere it is used instead.\n-    pub(super) fn parse_top_pat_unpack(&mut self, gate_or: bool) -> PResult<'a, Vec<P<Pat>>> {\n+    pub(super) fn parse_top_pat_unpack(&mut self, gate_or: GateOr) -> PResult<'a, Vec<P<Pat>>> {\n         self.parse_top_pat(gate_or)\n             .map(|pat| pat.and_then(|pat| match pat.node {\n                 PatKind::Or(pats) => pats,\n@@ -36,9 +40,9 @@ impl<'a> Parser<'a> {\n \n     /// Entry point to the main pattern parser.\n     /// Corresponds to `top_pat` in RFC 2535 and allows or-pattern at the top level.\n-    pub(super) fn parse_top_pat(&mut self, gate_or: bool) -> PResult<'a, P<Pat>> {\n+    pub(super) fn parse_top_pat(&mut self, gate_or: GateOr) -> PResult<'a, P<Pat>> {\n         // Allow a '|' before the pats (RFCs 1925, 2530, and 2535).\n-        if self.eat_or_separator() && gate_or {\n+        if self.eat_or_separator() && gate_or == GateOr::Yes {\n             self.sess.gated_spans.or_patterns.borrow_mut().push(self.prev_span);\n         }\n \n@@ -50,7 +54,7 @@ impl<'a> Parser<'a> {\n     fn parse_pat_with_or(\n         &mut self,\n         expected: Expected,\n-        gate_or: bool,\n+        gate_or: GateOr,\n         top_level: bool\n     ) -> PResult<'a, P<Pat>> {\n         // Parse the first pattern.\n@@ -73,7 +77,7 @@ impl<'a> Parser<'a> {\n         let or_pattern_span = lo.to(self.prev_span);\n \n         // Feature gate the or-pattern if instructed:\n-        if gate_or {\n+        if gate_or == GateOr::Yes {\n             self.sess.gated_spans.or_patterns.borrow_mut().push(or_pattern_span);\n         }\n \n@@ -171,7 +175,7 @@ impl<'a> Parser<'a> {\n             self.bump();\n         }\n \n-        self.parse_pat_with_or(expected, true, false)\n+        self.parse_pat_with_or(expected, GateOr::Yes, false)\n     }\n \n     /// Parses a pattern, with a setting whether modern range patterns (e.g., `a..=b`, `a..b` are"}, {"sha": "651ebf6342e715ac136738c9b474d4f483bc7651", "filename": "src/libsyntax/parse/parser/stmt.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2966e651de3bf83ab9c712a1afaeba84162cab1/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2966e651de3bf83ab9c712a1afaeba84162cab1/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs?ref=b2966e651de3bf83ab9c712a1afaeba84162cab1", "patch": "@@ -1,6 +1,7 @@\n use super::{Parser, PResult, Restrictions, PrevTokenKind, SemiColonMode, BlockMode};\n use super::expr::LhsExpr;\n use super::path::PathStyle;\n+use super::pat::GateOr;\n \n use crate::ptr::P;\n use crate::{maybe_whole, ThinVec};\n@@ -207,7 +208,7 @@ impl<'a> Parser<'a> {\n     /// Parses a local variable declaration.\n     fn parse_local(&mut self, attrs: ThinVec<Attribute>) -> PResult<'a, P<Local>> {\n         let lo = self.prev_span;\n-        let pat = self.parse_top_pat(true)?;\n+        let pat = self.parse_top_pat(GateOr::Yes)?;\n \n         let (err, ty) = if self.eat(&token::Colon) {\n             // Save the state of the parser before parsing type normally, in case there is a `:`"}]}