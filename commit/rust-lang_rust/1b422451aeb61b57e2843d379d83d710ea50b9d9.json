{"sha": "1b422451aeb61b57e2843d379d83d710ea50b9d9", "node_id": "C_kwDOAAsO6NoAKDFiNDIyNDUxYWViNjFiNTdlMjg0M2QzNzlkODNkNzEwZWE1MGI5ZDk", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-05-19T05:51:49Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-05-19T06:13:41Z"}, "message": "Move condition out of `maybe_recover_from_bad_qpath`.", "tree": {"sha": "32358688eef1a0780e7357b285891e89dfc8836e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32358688eef1a0780e7357b285891e89dfc8836e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b422451aeb61b57e2843d379d83d710ea50b9d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b422451aeb61b57e2843d379d83d710ea50b9d9", "html_url": "https://github.com/rust-lang/rust/commit/1b422451aeb61b57e2843d379d83d710ea50b9d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b422451aeb61b57e2843d379d83d710ea50b9d9/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c5f6e6277b89e47d73a192078697f7a5f3dc0ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c5f6e6277b89e47d73a192078697f7a5f3dc0ac", "html_url": "https://github.com/rust-lang/rust/commit/4c5f6e6277b89e47d73a192078697f7a5f3dc0ac"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "51db52fbf40c48725483580d6be4b4f19b02f94d", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1b422451aeb61b57e2843d379d83d710ea50b9d9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b422451aeb61b57e2843d379d83d710ea50b9d9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=1b422451aeb61b57e2843d379d83d710ea50b9d9", "patch": "@@ -1449,10 +1449,9 @@ impl<'a> Parser<'a> {\n     pub(super) fn maybe_recover_from_bad_qpath<T: RecoverQPath>(\n         &mut self,\n         base: P<T>,\n-        allow_recovery: bool,\n     ) -> PResult<'a, P<T>> {\n         // Do not add `::` to expected tokens.\n-        if allow_recovery && self.token == token::ModSep {\n+        if self.token == token::ModSep {\n             if let Some(ty) = base.to_ty() {\n                 return self.maybe_recover_from_bad_qpath_stage_2(ty.span, ty);\n             }\n@@ -1598,7 +1597,7 @@ impl<'a> Parser<'a> {\n             _ => ExprKind::Await(expr),\n         };\n         let expr = self.mk_expr(lo.to(sp), kind, attrs);\n-        self.maybe_recover_from_bad_qpath(expr, true)\n+        self.maybe_recover_from_bad_qpath(expr)\n     }\n \n     fn recover_await_macro(&mut self) -> PResult<'a, (Span, P<Expr>, bool)> {"}, {"sha": "6e97c665715498c535813b5d2eb37b0449cbe4bd", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1b422451aeb61b57e2843d379d83d710ea50b9d9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b422451aeb61b57e2843d379d83d710ea50b9d9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=1b422451aeb61b57e2843d379d83d710ea50b9d9", "patch": "@@ -1417,7 +1417,7 @@ impl<'a> Parser<'a> {\n         match self.parse_opt_lit() {\n             Some(literal) => {\n                 let expr = self.mk_expr(lo.to(self.prev_token.span), ExprKind::Lit(literal), attrs);\n-                self.maybe_recover_from_bad_qpath(expr, true)\n+                self.maybe_recover_from_bad_qpath(expr)\n             }\n             None => self.try_macro_suggestion(),\n         }\n@@ -1444,7 +1444,7 @@ impl<'a> Parser<'a> {\n             ExprKind::Tup(es)\n         };\n         let expr = self.mk_expr(lo.to(self.prev_token.span), kind, attrs);\n-        self.maybe_recover_from_bad_qpath(expr, true)\n+        self.maybe_recover_from_bad_qpath(expr)\n     }\n \n     fn parse_array_or_repeat_expr(\n@@ -1481,7 +1481,7 @@ impl<'a> Parser<'a> {\n             }\n         };\n         let expr = self.mk_expr(lo.to(self.prev_token.span), kind, attrs);\n-        self.maybe_recover_from_bad_qpath(expr, true)\n+        self.maybe_recover_from_bad_qpath(expr)\n     }\n \n     fn parse_path_start_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n@@ -1519,7 +1519,7 @@ impl<'a> Parser<'a> {\n         };\n \n         let expr = self.mk_expr(lo.to(hi), kind, attrs);\n-        self.maybe_recover_from_bad_qpath(expr, true)\n+        self.maybe_recover_from_bad_qpath(expr)\n     }\n \n     /// Parse `'label: $expr`. The label is already parsed.\n@@ -1604,7 +1604,7 @@ impl<'a> Parser<'a> {\n         let lo = self.prev_token.span;\n         let kind = ExprKind::Ret(self.parse_expr_opt()?);\n         let expr = self.mk_expr(lo.to(self.prev_token.span), kind, attrs);\n-        self.maybe_recover_from_bad_qpath(expr, true)\n+        self.maybe_recover_from_bad_qpath(expr)\n     }\n \n     /// Parse `\"do\" \"yeet\" expr?`.\n@@ -1619,7 +1619,7 @@ impl<'a> Parser<'a> {\n         let span = lo.to(self.prev_token.span);\n         self.sess.gated_spans.gate(sym::yeet_expr, span);\n         let expr = self.mk_expr(span, kind, attrs);\n-        self.maybe_recover_from_bad_qpath(expr, true)\n+        self.maybe_recover_from_bad_qpath(expr)\n     }\n \n     /// Parse `\"break\" (('label (:? expr)?) | expr?)` with `\"break\"` token already eaten.\n@@ -1679,7 +1679,7 @@ impl<'a> Parser<'a> {\n             None\n         };\n         let expr = self.mk_expr(lo.to(self.prev_token.span), ExprKind::Break(label, kind), attrs);\n-        self.maybe_recover_from_bad_qpath(expr, true)\n+        self.maybe_recover_from_bad_qpath(expr)\n     }\n \n     /// Parse `\"yield\" expr?`.\n@@ -1689,7 +1689,7 @@ impl<'a> Parser<'a> {\n         let span = lo.to(self.prev_token.span);\n         self.sess.gated_spans.gate(sym::generators, span);\n         let expr = self.mk_expr(span, kind, attrs);\n-        self.maybe_recover_from_bad_qpath(expr, true)\n+        self.maybe_recover_from_bad_qpath(expr)\n     }\n \n     /// Returns a string literal if the next token is a string literal."}, {"sha": "d521db7a058d64aa1707245dd4e3618a52f7ea54", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b422451aeb61b57e2843d379d83d710ea50b9d9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b422451aeb61b57e2843d379d83d710ea50b9d9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=1b422451aeb61b57e2843d379d83d710ea50b9d9", "patch": "@@ -408,7 +408,7 @@ impl<'a> Parser<'a> {\n         };\n \n         let pat = self.mk_pat(lo.to(self.prev_token.span), pat);\n-        let pat = self.maybe_recover_from_bad_qpath(pat, true)?;\n+        let pat = self.maybe_recover_from_bad_qpath(pat)?;\n         let pat = self.recover_intersection_pat(pat)?;\n \n         if !allow_range_pat {"}, {"sha": "85faa84e9cfa3ef96fe50c75802e8b96a8ec50b0", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b422451aeb61b57e2843d379d83d710ea50b9d9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b422451aeb61b57e2843d379d83d710ea50b9d9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=1b422451aeb61b57e2843d379d83d710ea50b9d9", "patch": "@@ -180,7 +180,7 @@ impl<'a> Parser<'a> {\n         } else {\n             // Since none of the above applied, this is an expression statement macro.\n             let e = self.mk_expr(lo.to(hi), ExprKind::MacCall(mac), AttrVec::new());\n-            let e = self.maybe_recover_from_bad_qpath(e, true)?;\n+            let e = self.maybe_recover_from_bad_qpath(e)?;\n             let e = self.parse_dot_or_call_expr_with(e, lo, attrs.into())?;\n             let e = self.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(e))?;\n             StmtKind::Expr(e)"}, {"sha": "fea1217887901560f2355fce494dce9bfd4fdfed", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b422451aeb61b57e2843d379d83d710ea50b9d9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b422451aeb61b57e2843d379d83d710ea50b9d9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=1b422451aeb61b57e2843d379d83d710ea50b9d9", "patch": "@@ -318,7 +318,7 @@ impl<'a> Parser<'a> {\n         self.maybe_report_ambiguous_plus(allow_plus, impl_dyn_multi, &ty);\n         self.maybe_recover_from_bad_type_plus(allow_plus, &ty)?;\n         let ty = self.maybe_recover_from_question_mark(ty, recover_question_mark);\n-        self.maybe_recover_from_bad_qpath(ty, allow_qpath_recovery)\n+        if allow_qpath_recovery { self.maybe_recover_from_bad_qpath(ty) } else { Ok(ty) }\n     }\n \n     /// Parses either:"}]}