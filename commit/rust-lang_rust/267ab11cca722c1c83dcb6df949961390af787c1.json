{"sha": "267ab11cca722c1c83dcb6df949961390af787c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2N2FiMTFjY2E3MjJjMWM4M2RjYjZkZjk0OTk2MTM5MGFmNzg3YzE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-20T22:59:09Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-25T19:47:35Z"}, "message": "use + mode for (almost) everything when not using legacy modes", "tree": {"sha": "120bac2adfa7908a2ea90feea00481b29fd69234", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/120bac2adfa7908a2ea90feea00481b29fd69234"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/267ab11cca722c1c83dcb6df949961390af787c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/267ab11cca722c1c83dcb6df949961390af787c1", "html_url": "https://github.com/rust-lang/rust/commit/267ab11cca722c1c83dcb6df949961390af787c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/267ab11cca722c1c83dcb6df949961390af787c1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37aee97e4b22c58ed2c7898d666c62fb27646851", "url": "https://api.github.com/repos/rust-lang/rust/commits/37aee97e4b22c58ed2c7898d666c62fb27646851", "html_url": "https://github.com/rust-lang/rust/commit/37aee97e4b22c58ed2c7898d666c62fb27646851"}], "stats": {"total": 201, "additions": 133, "deletions": 68}, "files": [{"sha": "ae09531887384a9cfed5ef836b5c9752dfc9c364", "filename": "src/cargo/cargo.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Fcargo%2Fcargo.rc", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Fcargo%2Fcargo.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rc?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -19,6 +19,8 @@\n #[no_core];\n #[legacy_exports];\n \n+#[legacy_modes];\n+\n #[allow(vecs_implicitly_copyable,\n         non_implicitly_copyable_typarams)];\n #[allow(non_camel_case_types)];"}, {"sha": "5bee7fb255dc7cf2f1c1b1fcc92cb91be39bafd8", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -12,7 +12,7 @@ use common::mode_pretty;\n use common::mode;\n use util::logv;\n \n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let config = parse_config(args);\n     log_config(config);\n     run_tests(config);"}, {"sha": "7321829f6b61c6b96eac4008e910b3a220b17dfb", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -256,16 +256,31 @@ fn entangle_buffer<T: Send, Tstart: Send>(\n     (SendPacketBuffered(p), RecvPacketBuffered(p))\n }\n \n+#[cfg(stage0)]\n #[abi = \"rust-intrinsic\"]\n #[doc(hidden)]\n extern mod rusti {\n     #[legacy_exports];\n-    fn atomic_xchg(dst: &mut int, src: int) -> int;\n-    fn atomic_xchg_acq(dst: &mut int, src: int) -> int;\n-    fn atomic_xchg_rel(dst: &mut int, src: int) -> int;\n+    fn atomic_xchg(dst: &mut int, ++src: int) -> int;\n+    fn atomic_xchg_acq(dst: &mut int, ++src: int) -> int;\n+    fn atomic_xchg_rel(dst: &mut int, ++src: int) -> int;\n \n-    fn atomic_xadd_acq(dst: &mut int, src: int) -> int;\n-    fn atomic_xsub_rel(dst: &mut int, src: int) -> int;\n+    fn atomic_xadd_acq(dst: &mut int, ++src: int) -> int;\n+    fn atomic_xsub_rel(dst: &mut int, ++src: int) -> int;\n+}\n+\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+#[abi = \"rust-intrinsic\"]\n+#[doc(hidden)]\n+extern mod rusti {\n+    #[legacy_exports];\n+    fn atomic_xchg(dst: &mut int, +src: int) -> int;\n+    fn atomic_xchg_acq(dst: &mut int, +src: int) -> int;\n+    fn atomic_xchg_rel(dst: &mut int, +src: int) -> int;\n+\n+    fn atomic_xadd_acq(dst: &mut int, +src: int) -> int;\n+    fn atomic_xsub_rel(dst: &mut int, +src: int) -> int;\n }\n \n // If I call the rusti versions directly from a polymorphic function,"}, {"sha": "dba28ec06e612e116f94747ff0477a1c4276e640", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -240,7 +240,7 @@ pure fn to_str_bytes<U>(neg: bool, num: T, radix: uint,\n             }\n \n             vec::raw::form_slice(ptr::offset(p, i),\n-                                    len - i, f)\n+                                 len - i, f)\n         }\n     }\n }"}, {"sha": "e3df52b3cd6e2ad7ce48e2e14197a5754ae58c21", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -1723,7 +1723,7 @@ mod raw {\n      * not bytes).\n      */\n     #[inline(always)]\n-    unsafe fn form_slice<T,U>(p: *T, len: uint, f: fn(&&v: &[T]) -> U) -> U {\n+    unsafe fn form_slice<T,U>(p: *T, len: uint, f: fn(v: &[T]) -> U) -> U {\n         let pair = (p, len * sys::size_of::<T>());\n         let v : *(&blk/[T]) =\n             ::cast::reinterpret_cast(&ptr::addr_of(pair));"}, {"sha": "879c73308da84e333118a45a9469d5764f679bc4", "filename": "src/rustc/front/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Frustc%2Ffront%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Frustc%2Ffront%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fintrinsic.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -116,6 +116,6 @@ mod intrinsic {\n     extern mod rusti {\n         #[legacy_exports];\n         fn get_tydesc<T>() -> *();\n-        fn visit_tydesc(td: *TyDesc, &&tv: TyVisitor);\n+        fn visit_tydesc(++td: *TyDesc, &&tv: TyVisitor);\n     }\n }"}, {"sha": "f256b4b76cdbbdf41821b7fe2a31ec2223e600ba", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -133,6 +133,7 @@ export type_is_numeric;\n export type_is_pod;\n export type_is_scalar;\n export type_is_immediate;\n+export type_is_borrowed;\n export type_is_sequence;\n export type_is_signed;\n export type_is_structural;\n@@ -1090,13 +1091,21 @@ pure fn mach_sty(cfg: @session::config, t: t) -> sty {\n }\n \n fn default_arg_mode_for_ty(tcx: ctxt, ty: ty::t) -> ast::rmode {\n-    return if ty::type_is_immediate(ty) {\n-        ast::by_val\n-    } else if tcx.legacy_modes || type_is_fn(ty) {\n-        //                        ^^^^^^^^^^^^^^\n+    return if type_is_fn(ty) {\n+        //    ^^^^^^^^^^^^^^\n         // FIXME(#2202) --- We retain by-ref by default to workaround a memory\n         // leak that otherwise results when @fn is upcast to &fn.\n         ast::by_ref\n+    } else if tcx.legacy_modes {\n+        if type_is_borrowed(ty) {\n+            // the old mode default was ++ for things like &ptr, but to be\n+            // forward-compatible with non-legacy, we should use +\n+            ast::by_copy\n+        } else if ty::type_is_immediate(ty) {\n+            ast::by_val\n+        } else {\n+            ast::by_ref\n+        }\n     } else {\n         ast::by_copy\n     };\n@@ -1107,6 +1116,18 @@ fn default_arg_mode_for_ty(tcx: ctxt, ty: ty::t) -> ast::rmode {\n             _ => false\n         }\n     }\n+\n+    fn type_is_borrowed(ty: t) -> bool {\n+        match ty::get(ty).sty {\n+            ty::ty_rptr(*) => true,\n+            ty_evec(_, vstore_slice(_)) => true,\n+            ty_estr(vstore_slice(_)) => true,\n+\n+            // technically, we prob ought to include\n+            // &fn(), but that is treated specially due to #2202\n+            _ => false\n+        }\n+    }\n }\n \n // Returns the narrowest lifetime enclosing the evaluation of the expression\n@@ -1575,7 +1596,6 @@ fn type_is_immediate(ty: t) -> bool {\n         type_is_unique(ty) || type_is_region_ptr(ty);\n }\n \n-\n fn type_needs_drop(cx: ctxt, ty: t) -> bool {\n     match cx.needs_drop_cache.find(ty) {\n       Some(result) => return result,"}, {"sha": "e0b2ca5ae6425afe0ef8b5cba74703bba3b9ca4c", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -256,7 +256,14 @@ fn require_same_types(\n     }\n }\n \n-fn arg_is_argv_ty(_tcx: ty::ctxt, a: ty::arg) -> bool {\n+fn arg_is_argv_ty(tcx: ty::ctxt, a: ty::arg) -> bool {\n+    match ty::resolved_mode(tcx, a.mode) {\n+        ast::by_val => { /*ok*/ }\n+        _ => {\n+            return false;\n+        }\n+    }\n+\n     match ty::get(a.ty).sty {\n       ty::ty_evec(mt, vstore_uniq) => {\n         if mt.mutbl != ast::m_imm { return false; }\n@@ -300,7 +307,7 @@ fn check_main_fn_ty(ccx: @crate_ctxt,\n                 tcx.sess.span_err(\n                     main_span,\n                     fmt!(\"Wrong type in main function: found `%s`, \\\n-                          expected `extern fn(~[str]) -> ()` \\\n+                          expected `extern fn(++v: ~[~str]) -> ()` \\\n                           or `extern fn() -> ()`\",\n                          ty_to_str(tcx, main_t)));\n             }"}, {"sha": "8d2384cd5306989f3323ecbd5a7cedd34b8fd52a", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -2609,10 +2609,10 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::foreign_item) {\n       ~\"atomic_xchg\"     | ~\"atomic_xadd\"     | ~\"atomic_xsub\" |\n       ~\"atomic_xchg_acq\" | ~\"atomic_xadd_acq\" | ~\"atomic_xsub_acq\" |\n       ~\"atomic_xchg_rel\" | ~\"atomic_xadd_rel\" | ~\"atomic_xsub_rel\" => {\n-        (0u, ~[arg(ast::by_val,\n+        (0u, ~[arg(ast::by_copy,\n                    ty::mk_mut_rptr(tcx, ty::re_bound(ty::br_anon(0)),\n                                    ty::mk_int(tcx))),\n-               arg(ast::by_val, ty::mk_int(tcx))],\n+               arg(ast::by_copy, ty::mk_int(tcx))],\n          ty::mk_int(tcx))\n       }\n "}, {"sha": "279905fe3f182f3ada49d217ec3f682e18101b12", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -142,7 +142,7 @@ fn empty_results() -> Results {\n     }\n }\n \n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let num_keys = {\n         if args.len() == 2 {\n             uint::from_str(args[1]).get()"}, {"sha": "a88793705a6b6cee3ad323f843c1cab5ebb2953d", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -8,7 +8,7 @@ use std::map::{Map, HashMap};\n \n use io::{Reader, ReaderUtil};\n \n-fn main(argv: ~[~str]) {\n+fn main(++argv: ~[~str]) {\n     #macro[\n         [#bench[id],\n          maybe_run_test(argv, #stringify(id), id)"}, {"sha": "05643536dc0ad379782512383b8effb7e8127de7", "filename": "src/test/bench/core-uint-to-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -1,4 +1,4 @@\n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"10000000\"]\n     } else if args.len() <= 1u {"}, {"sha": "d708ac9eaa7b69964050ebd8371977ee8a003fbf", "filename": "src/test/bench/core-vec-append.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fcore-vec-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fcore-vec-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-vec-append.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -20,7 +20,7 @@ fn collect_dvec(num: uint) -> ~[uint] {\n     return dvec::unwrap(move result);\n }\n \n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"50000000\"]\n     } else if args.len() <= 1u {"}, {"sha": "89ca8eadde4fbc247a60554a582f2b81e8b647e4", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -384,7 +384,7 @@ fn validate(edges: ~[(node_id, node_id)],\n     true\n }\n \n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"15\", ~\"48\"]\n     } else if args.len() <= 1u {"}, {"sha": "89d339b7a763d24afbe4117f0d8e32445eeb3a29", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -90,7 +90,7 @@ fn run(args: &[~str]) {\n     assert result == num_bytes * size;\n }\n \n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"1000000\", ~\"10000\"]\n     } else if args.len() <= 1u {"}, {"sha": "babc97694a5631c6b639d50eb86a9d8dbd8e176e", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -87,7 +87,7 @@ fn run(args: &[~str]) {\n     assert result == num_bytes * size;\n }\n \n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"1000000\", ~\"8\"]\n     } else if args.len() <= 1u {"}, {"sha": "e3d8afce1bf08e6e8689ef2896ca07151e051e63", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -56,7 +56,7 @@ fn thread_ring(i: uint,\n     };\n }\n \n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"100\", ~\"10000\"]\n     } else if args.len() <= 1u {"}, {"sha": "645aa65470006640d113a6d143bd88b9c8f0cc6a", "filename": "src/test/bench/msgsend-ring-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -52,7 +52,7 @@ fn thread_ring(i: uint,\n     };\n }\n \n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"100\", ~\"10000\"]\n     } else if args.len() <= 1u {"}, {"sha": "b4b75adc3b5cdac7a9e3a0e2b4149176fafa8c0c", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -56,7 +56,7 @@ fn thread_ring(i: uint,\n     };\n }\n \n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"100\", ~\"10000\"]\n     } else if args.len() <= 1u {"}, {"sha": "47ce0d2b91f41eccfe2630e83f1f17117849ad0a", "filename": "src/test/bench/msgsend-ring.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fmsgsend-ring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fmsgsend-ring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -21,7 +21,7 @@ fn thread_ring(i: uint,\n     };\n }\n \n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"100\", ~\"10000\"]\n     } else if args.len() <= 1u {"}, {"sha": "2790f00d40d1fcef493a708e5a666c4db152a416", "filename": "src/test/bench/msgsend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fmsgsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fmsgsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -57,7 +57,7 @@ fn run(args: ~[~str]) {\n     io::stdout().write_str(fmt!(\"Throughput=%f per sec\\n\", thruput));\n }\n \n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"1000000\", ~\"10000\"]\n     } else if args.len() <= 1u {"}, {"sha": "03985a22d112274cefc3b507634baeedf3dec75e", "filename": "src/test/bench/shootout-ackermann.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-ackermann.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -12,7 +12,7 @@ fn ack(m: int, n: int) -> int {\n     }\n }\n \n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"12\"]\n     } else if args.len() <= 1u {"}, {"sha": "2003c16fe6f73d19d8036fb87cda4aa1992aea61", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -25,7 +25,7 @@ fn bottom_up_tree(arena: &r/arena::Arena,\n     return arena.alloc(|| nil);\n }\n \n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"17\"]\n     } else if args.len() <= 1u {"}, {"sha": "bdfe4b7b727a88e2975c13fd45a8c518e7c806c5", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -178,7 +178,7 @@ fn rendezvous(nn: uint, set: ~[color]) {\n     io::println(show_number(creatures_met));\n }\n \n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"200000\"]\n     } else if args.len() <= 1u {"}, {"sha": "19dced9aa183d215df326a02d12d1da582aae780", "filename": "src/test/bench/shootout-fannkuchredux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -5,7 +5,7 @@ fn fannkuch(n: int) -> int {\n     fn perm1init(i: uint) -> int { return i as int; }\n \n     let perm = vec::to_mut(vec::from_elem(n as uint, 0));\n-    let perm1 = vec::to_mut(vec::from_fn(n as uint, perm1init));\n+    let perm1 = vec::to_mut(vec::from_fn(n as uint, |i| perm1init(i)));\n     let count = vec::to_mut(vec::from_elem(n as uint, 0));\n     let mut f = 0;\n     let mut i = 0;\n@@ -56,7 +56,7 @@ fn fannkuch(n: int) -> int {\n     return flips;\n }\n \n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"10\"]\n     } else if args.len() <= 1u {"}, {"sha": "a07b29f3dc6f88719951b4e6cac9b950c4a00963", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -70,7 +70,7 @@ fn make_repeat_fasta(wr: io::Writer, id: ~str, desc: ~str, s: ~str, n: int) unsa\n \n fn acid(ch: char, prob: u32) -> aminoacids { return {ch: ch, prob: prob}; }\n \n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         // alioth tests k-nucleotide with this data at 25,000,000\n         ~[~\"\", ~\"5000000\"]"}, {"sha": "9c39ed4aad1d317f58c211a14641a96f86606db5", "filename": "src/test/bench/shootout-fibo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fibo.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -8,7 +8,7 @@ fn fib(n: int) -> int {\n     }\n }\n \n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"40\"]\n     } else if args.len() <= 1u {"}, {"sha": "dbdcf15db8a75a3fdf7f73539f55aeb979f2c940", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -128,7 +128,7 @@ fn make_sequence_processor(sz: uint, from_parent: pipes::Port<~[u8]>,\n }\n \n // given a FASTA file on stdin, process sequence THREE\n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n    let rdr = if os::getenv(~\"RUST_BENCH\").is_some() {\n        // FIXME: Using this compile-time env variable is a crummy way to\n        // get to this massive data set, but #include_bin chokes on it (#2598)"}, {"sha": "d9d5827c56d410333fb9981f931ed5a33b8433bc", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -125,7 +125,7 @@ fn make_sequence_processor(sz: uint, from_parent: comm::Port<~[u8]>,\n }\n \n // given a FASTA file on stdin, process sequence THREE\n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n    let rdr = if os::getenv(~\"RUST_BENCH\").is_some() {\n        // FIXME: Using this compile-time env variable is a crummy way to\n        // get to this massive data set, but #include_bin chokes on it (#2598)"}, {"sha": "f6386a207b11a45dbf37bf50768d88ba98b66248", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -151,7 +151,7 @@ fn writer(path: ~str, writech: comm::Chan<comm::Chan<line>>, size: uint)\n     }\n }\n \n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"4000\", ~\"10\"]\n     } else {"}, {"sha": "e2d3d2a429eb7382178abe98cd8a18fede817db2", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -14,7 +14,7 @@ extern mod libc {\n     fn sqrt(n: float) -> float;\n }\n \n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"4000000\"]\n     } else if args.len() <= 1u {"}, {"sha": "705679bd4030bb690da774fd3e3543478b9d5f77", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -81,7 +81,7 @@ fn stress(num_tasks: int) {\n     for results.each |r| { future::get(r); }\n }\n \n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"20\"]\n     } else if args.len() <= 1u {"}, {"sha": "1f00c419de800aeb0aadd3bde54182f82c536bcb", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -40,7 +40,7 @@ fn eval_AtA_times_u(u: ~[const float], AtAu: ~[mut float]) {\n     eval_At_times_u(v, AtAu);\n }\n \n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"2000\"]\n     } else if args.len() <= 1u {"}, {"sha": "43229d1db13380ba1d10984f908fc7a46d141dea", "filename": "src/test/bench/shootout-threadring.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-threadring.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -37,7 +37,7 @@ fn roundtrip(id: int, p: comm::Port<int>, ch: comm::Chan<int>) {\n     }\n }\n \n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"2000000\"]\n     } else if args.len() <= 1u {"}, {"sha": "3fdbe028b70878449c34031f67244abf4ae195c8", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -17,7 +17,7 @@ fn check_sequential(min: uint, max: uint, map: SmallIntMap<uint>) {\n     }\n }\n \n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"100000\", ~\"100\"]\n     } else if args.len() <= 1u {"}, {"sha": "8f4e509e629489d60c6ffa3c38641a0826fa53b8", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -126,7 +126,7 @@ fn write_grid(f: io::Writer, g: grid_t) {\n      }\n }\n \n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let grid = if vec::len(args) == 1u {\n         // FIXME create sudoku inline since nested vec consts dont work yet\n         // (#571)"}, {"sha": "53735cdbb16a3b61c4410a262d39d0daf23b8892", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -23,7 +23,7 @@ fn child_generation(gens_left: uint, -c: pipes::Chan<()>) {\n     }\n }\n \n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"100000\"]\n     } else if args.len() <= 1u {"}, {"sha": "1ba92bfadee834a2f6e6f2d312b2ac0424ab9659", "filename": "src/test/bench/task-perf-linked-failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -37,7 +37,7 @@ fn spawn_supervised_blocking(myname: &str, +f: fn~()) {\n     assert x == task::Success;\n }\n \n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"100000\"]\n     } else if args.len() <= 1u {"}, {"sha": "da8b1932f6539eac7c341d89561f9dd38d826d42", "filename": "src/test/bench/task-perf-one-million.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -48,7 +48,7 @@ fn calc(children: uint, parent_ch: comm::Chan<msg>) {\n     comm::send(parent_ch, done(sum + 1));\n }\n \n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"100000\"]\n     } else if args.len() <= 1u {"}, {"sha": "48af1dcd5049cb066d5480fffd1368c98763f65b", "filename": "src/test/bench/task-perf-spawnalot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -8,7 +8,7 @@ fn f(&&n: uint) {\n \n fn g() { }\n \n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"400\"]\n     } else if args.len() <= 1u {"}, {"sha": "73c5dab16d865e05d3eca62b974b8ed32aa16059", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -289,7 +289,7 @@ mod map_reduce {\n     }\n }\n \n-fn main(argv: ~[~str]) {\n+fn main(++argv: ~[~str]) {\n     if vec::len(argv) < 2u && !os::getenv(~\"RUST_BENCH\").is_some() {\n         let out = io::stdout();\n "}, {"sha": "79364a1bb520f945cd7181441205987e337571c1", "filename": "src/test/compile-fail/bad-main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fcompile-fail%2Fbad-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Fcompile-fail%2Fbad-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-main.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern:expected `extern fn(~[str])\n+// error-pattern:expected `extern fn(++v: ~[~str])\n \n fn main(x: int) { }"}, {"sha": "21e90f75d0debcddc8e61c885324ad8b0d1c855b", "filename": "src/test/run-pass/alt-pattern-drop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -18,6 +18,7 @@ fn foo(s: @int) {\n     }\n     log(debug, sys::refcount(s));\n     assert (sys::refcount(s) == count + 1u);\n+    let _ = sys::refcount(s); // don't get bitten by last-use.\n }\n \n fn main() {"}, {"sha": "a697e0f73dcb470dfde028ceb80b195a56064e8d", "filename": "src/test/run-pass/argv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Fargv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Fargv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fargv.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -1,4 +1,4 @@\n-fn main(args: ~[~str]) {\n+fn main(++args: ~[~str]) {\n     let vs: ~[~str] = ~[~\"hi\", ~\"there\", ~\"this\", ~\"is\", ~\"a\", ~\"vec\"];\n     let vvs: ~[~[~str]] = ~[args, vs];\n     for vvs.each |vs| { for vs.each |s| { log(debug, *s); } }"}, {"sha": "242392ccbe1726bf45dda3b0439835f96178588f", "filename": "src/test/run-pass/command-line-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Fcommand-line-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Fcommand-line-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcommand-line-args.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -1,3 +1,3 @@\n \n \n-fn main(args: ~[~str]) { log(debug, args[0]); }\n+fn main(++args: ~[~str]) { log(debug, args[0]); }"}, {"sha": "3d34a6fd0b430bddb7862622f71836d688fd5ca7", "filename": "src/test/run-pass/foreign2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Fforeign2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Fforeign2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign2.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -21,4 +21,4 @@ extern mod libc {\n extern mod baz {\n     #[legacy_exports]; }\n \n-fn main(args: ~[~str]) { }\n+fn main() { }"}, {"sha": "09c63c9c71548d0681dcf4e082da420f5dfadb0c", "filename": "src/test/run-pass/import4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Fimport4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Fimport4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport4.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -6,4 +6,4 @@ mod zed {\n     fn bar() { debug!(\"bar\"); }\n }\n \n-fn main(args: ~[~str]) { let zed = 42; bar(); }\n+fn main() { let zed = 42; bar(); }"}, {"sha": "ba711639091227bc665fc231c9a1a5f61ba5ad84", "filename": "src/test/run-pass/import5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Fimport5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Fimport5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport5.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -9,4 +9,4 @@ mod foo {\n     }\n }\n \n-fn main(args: ~[~str]) { bar(); }\n+fn main() { bar(); }"}, {"sha": "f4c8a888764be6284f656a38a8b5b66650a28a2c", "filename": "src/test/run-pass/import7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Fimport7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Fimport7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport7.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -17,4 +17,4 @@ mod bar {\n             #[legacy_exports]; }\n     }\n }\n-fn main(args: ~[~str]) { baz(); }\n+fn main() { baz(); }"}, {"sha": "b61169ee5f6d6fc40f763098152c7475a5bb4dbd", "filename": "src/test/run-pass/issue-2834.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Fissue-2834.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Fissue-2834.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2834.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -14,7 +14,7 @@ fn rendezvous() {\n     error!(\"%?\", streams[0]);\n }\n \n-fn main(args: ~[~str]) {\n+fn main() {\n     //os::getenv(\"FOO\");\n     rendezvous();\n-}\n\\ No newline at end of file\n+}"}, {"sha": "39bbd07c66b12ce0aa4de9fbf59494af3cd6b849", "filename": "src/test/run-pass/main-ivec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Fmain-ivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Fmain-ivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmain-ivec.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -1 +1 @@\n-fn main(args: ~[~str]) { for args.each |s| { log(debug, *s); } }\n+fn main(++args: ~[~str]) { for args.each |s| { log(debug, *s); } }"}, {"sha": "8fb843d8564aefa4db994ff0048534b71f484462", "filename": "src/test/run-pass/non-legacy-modes.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Fnon-legacy-modes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Fnon-legacy-modes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnon-legacy-modes.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -0,0 +1,20 @@\n+struct X {\n+    repr: int\n+}\n+\n+fn apply<T>(x: T, f: fn(T)) {\n+    f(x);\n+}\n+\n+fn check_int(x: int) {\n+    assert x == 22;\n+}\n+\n+fn check_struct(x: X) {\n+    check_int(x.repr);\n+}\n+\n+fn main() {\n+    apply(22, check_int);\n+    apply(X {repr: 22}, check_struct);\n+}"}, {"sha": "3d9786b44b065fc133ab1614d908b1a0c6e3d700", "filename": "src/test/run-pass/option-ext.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Foption-ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Foption-ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foption-ext.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -1,8 +1,8 @@\n-fn main(args: ~[~str]) {\n+fn main() {\n     let thing = ~\"{{ f }}\";\n     let f = str::find_str(thing, ~\"{{\");\n \n     if f.is_none() {\n         io::println(~\"None!\");\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "ef97c2c09f0af7894015998969a191976b37a97a", "filename": "src/test/run-pass/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpath.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -5,4 +5,4 @@ mod foo {\n     fn bar(offset: uint) { }\n }\n \n-fn main(args: ~[~str]) { foo::bar(0u); }\n+fn main() { foo::bar(0u); }"}, {"sha": "ff464594ba21eb72d00cb3e8fb735337bd5cb3e1", "filename": "src/test/run-pass/swap-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Fswap-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Fswap-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fswap-2.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -1,4 +1,4 @@\n-fn swap<T>(v: ~[mut T], i: int, j: int) { v[i] <-> v[j]; }\n+fn swap<T>(v: &[mut T], i: int, j: int) { v[i] <-> v[j]; }\n \n fn main() {\n     let a: ~[mut int] = ~[mut 0, 1, 2, 3, 4, 5, 6];"}, {"sha": "69c7c5e7a04692da8d72e82f770eb950749bde05", "filename": "src/test/run-pass/tag-in-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Ftag-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Ftag-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-in-block.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -6,4 +6,4 @@ fn foo() {\n     fn baz() { zed(nil); }\n }\n \n-fn main(args: ~[~str]) { }\n+fn main() { }"}, {"sha": "5bf81efd15948bf1d5573037abc98798999ebb40", "filename": "src/test/run-pass/type-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Ftype-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Ftype-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-param.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -2,4 +2,4 @@\n \n type lteq<T> = extern fn(T) -> bool;\n \n-fn main(args: ~[~str]) { }\n+fn main() { }"}, {"sha": "74ad4951a66d291b18bbd2ac5fcf0d64ebaac1c3", "filename": "src/test/run-pass/type-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Ftype-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267ab11cca722c1c83dcb6df949961390af787c1/src%2Ftest%2Frun-pass%2Ftype-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-ptr.rs?ref=267ab11cca722c1c83dcb6df949961390af787c1", "patch": "@@ -2,4 +2,4 @@ fn f(a: *int) -> *int { return a; }\n \n fn g(a: *int) -> *int { let b = f(a); return b; }\n \n-fn main(args: ~[~str]) { return; }\n+fn main() { return; }"}]}