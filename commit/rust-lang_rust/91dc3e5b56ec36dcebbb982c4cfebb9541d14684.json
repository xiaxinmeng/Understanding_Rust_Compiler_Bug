{"sha": "91dc3e5b56ec36dcebbb982c4cfebb9541d14684", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZGMzZTViNTZlYzM2ZGNlYmJiOTgyYzRjZmViYjk1NDFkMTQ2ODQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-07-24T23:34:17Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-07-26T11:17:55Z"}, "message": "Add scary warnings to errors-downgraded-to-warnings in borrowck=migrate.\n\nAlso convert an ICE that became reachable code under borrowck=migrate\ninto a normally reported error (which is then downgraded to a\nwarning). This actually has a nice side benefit of providing a\nsomewhat more useful error message, at least in the particular case of\nthe example from issue #27282.", "tree": {"sha": "5608798470bb9788c1ed41518e7013862f638114", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5608798470bb9788c1ed41518e7013862f638114"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91dc3e5b56ec36dcebbb982c4cfebb9541d14684", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91dc3e5b56ec36dcebbb982c4cfebb9541d14684", "html_url": "https://github.com/rust-lang/rust/commit/91dc3e5b56ec36dcebbb982c4cfebb9541d14684", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91dc3e5b56ec36dcebbb982c4cfebb9541d14684/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "346011515760dd552bd41d4abf8a2a55471a9e84", "url": "https://api.github.com/repos/rust-lang/rust/commits/346011515760dd552bd41d4abf8a2a55471a9e84", "html_url": "https://github.com/rust-lang/rust/commit/346011515760dd552bd41d4abf8a2a55471a9e84"}], "stats": {"total": 67, "additions": 53, "deletions": 14}, "files": [{"sha": "beedcac02f6259ac6101270806512a6d069fea0d", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 44, "deletions": 14, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/91dc3e5b56ec36dcebbb982c4cfebb9541d14684/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91dc3e5b56ec36dcebbb982c4cfebb9541d14684/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=91dc3e5b56ec36dcebbb982c4cfebb9541d14684", "patch": "@@ -338,7 +338,13 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n                     // downgrade all the buffered MIR-borrowck errors\n                     // to warnings.\n                     for err in &mut mbcx.errors_buffer {\n-                        if err.is_error() { err.level = Level::Warning; }\n+                        if err.is_error() {\n+                            err.level = Level::Warning;\n+                            err.warn(\"This error has been downgraded to a warning \\\n+                                      for backwards compatibility with previous releases.\\n\\\n+                                      It represents potential unsoundness in your code.\\n\\\n+                                      This warning will become a hard error in the future.\");\n+                        }\n                     }\n                 }\n                 SignalledError::SawSomeError => {\n@@ -1768,20 +1774,44 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 }\n             }\n \n-            Reservation(WriteKind::Move)\n-            | Write(WriteKind::Move)\n-            | Reservation(WriteKind::StorageDeadOrDrop)\n-            | Reservation(WriteKind::MutableBorrow(BorrowKind::Shared))\n-            | Write(WriteKind::StorageDeadOrDrop)\n-            | Write(WriteKind::MutableBorrow(BorrowKind::Shared)) => {\n+            Reservation(wk @ WriteKind::Move)\n+            | Write(wk @ WriteKind::Move)\n+            | Reservation(wk @ WriteKind::StorageDeadOrDrop)\n+            | Reservation(wk @ WriteKind::MutableBorrow(BorrowKind::Shared))\n+            | Write(wk @ WriteKind::StorageDeadOrDrop)\n+            | Write(wk @ WriteKind::MutableBorrow(BorrowKind::Shared)) => {\n                 if let Err(_place_err) = self.is_mutable(place, is_local_mutation_allowed) {\n-                    self.tcx.sess.delay_span_bug(\n-                        span,\n-                        &format!(\n-                            \"Accessing `{:?}` with the kind `{:?}` shouldn't be possible\",\n-                            place, kind\n-                        ),\n-                    );\n+                    if self.tcx.migrate_borrowck() {\n+                        // rust-lang/rust#46908: In pure NLL mode this\n+                        // code path should be unreachable (and thus\n+                        // we signal an ICE in the else branch\n+                        // here). But we can legitimately get here\n+                        // under borrowck=migrate mode, so instead of\n+                        // ICE'ing we instead report a legitimate\n+                        // error (which will then be downgraded to a\n+                        // warning by the migrate machinery).\n+                        error_access = match wk {\n+                            WriteKind::MutableBorrow(_) => AccessKind::MutableBorrow,\n+                            WriteKind::Move => AccessKind::Move,\n+                            WriteKind::StorageDeadOrDrop |\n+                            WriteKind::Mutate => AccessKind::Mutate,\n+                        };\n+                        self.report_mutability_error(\n+                            place,\n+                            span,\n+                            _place_err,\n+                            error_access,\n+                            location,\n+                        );\n+                    } else {\n+                        self.tcx.sess.delay_span_bug(\n+                            span,\n+                            &format!(\n+                                \"Accessing `{:?}` with the kind `{:?}` shouldn't be possible\",\n+                                place, kind\n+                            ),\n+                        );\n+                    }\n                 }\n                 return false;\n             }"}, {"sha": "571a1188d49ca836add5afa477611b6d353fc9d1", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/91dc3e5b56ec36dcebbb982c4cfebb9541d14684/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91dc3e5b56ec36dcebbb982c4cfebb9541d14684/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=91dc3e5b56ec36dcebbb982c4cfebb9541d14684", "patch": "@@ -24,6 +24,7 @@ use util::suggest_ref_mut;\n pub(super) enum AccessKind {\n     MutableBorrow,\n     Mutate,\n+    Move,\n }\n \n impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n@@ -110,6 +111,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                     if let Some(desc) = access_place_desc {\n                         item_msg = format!(\"`{}`\", desc);\n                         reason = match error_access {\n+                            AccessKind::Move |\n                             AccessKind::Mutate => format!(\" which is behind a {}\", pointer_type),\n                             AccessKind::MutableBorrow => {\n                                 format!(\", as it is behind a {}\", pointer_type)\n@@ -160,6 +162,13 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n \n \n         let span = match error_access {\n+            AccessKind::Move => {\n+                err = self.tcx\n+                    .cannot_move_out_of(span, &(item_msg + &reason), Origin::Mir);\n+                act = \"move\";\n+                acted_on = \"moved\";\n+                span\n+            }\n             AccessKind::Mutate => {\n                 err = self.tcx\n                     .cannot_assign(span, &(item_msg + &reason), Origin::Mir);"}]}