{"sha": "372c4fd67fc41f0a06b1e6d804e8345db508761a", "node_id": "C_kwDOAAsO6NoAKDM3MmM0ZmQ2N2ZjNDFmMGEwNmIxZTZkODA0ZTgzNDVkYjUwODc2MWE", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-07-04T18:07:14Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-09-13T15:44:52Z"}, "message": "remove visit_const from mir visitors", "tree": {"sha": "117fbc01e5d4a20ca4d22b5a5e75d11f93a32ddc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/117fbc01e5d4a20ca4d22b5a5e75d11f93a32ddc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/372c4fd67fc41f0a06b1e6d804e8345db508761a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/372c4fd67fc41f0a06b1e6d804e8345db508761a", "html_url": "https://github.com/rust-lang/rust/commit/372c4fd67fc41f0a06b1e6d804e8345db508761a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/372c4fd67fc41f0a06b1e6d804e8345db508761a/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0726265442e7c3b0925286e831b24afe508e5cc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0726265442e7c3b0925286e831b24afe508e5cc8", "html_url": "https://github.com/rust-lang/rust/commit/0726265442e7c3b0925286e831b24afe508e5cc8"}], "stats": {"total": 84, "additions": 24, "deletions": 60}, "files": [{"sha": "a1f95d48c85d3cb4830f4ba627e45cc6e5d6ce25", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/372c4fd67fc41f0a06b1e6d804e8345db508761a/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372c4fd67fc41f0a06b1e6d804e8345db508761a/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=372c4fd67fc41f0a06b1e6d804e8345db508761a", "patch": "@@ -106,8 +106,4 @@ impl<'a, 'tcx> MutVisitor<'tcx> for NllVisitor<'a, 'tcx> {\n \n         debug!(\"constant: {:#?}\", constant);\n     }\n-\n-    fn visit_const(&mut self, _constant: &mut ty::Const<'tcx>, _location: Location) {\n-        bug!(\"should never be called\");\n-    }\n }"}, {"sha": "0b42137d4e3cd5cfe381a6673db7c0c16ff0de66", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/372c4fd67fc41f0a06b1e6d804e8345db508761a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372c4fd67fc41f0a06b1e6d804e8345db508761a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=372c4fd67fc41f0a06b1e6d804e8345db508761a", "patch": "@@ -706,13 +706,12 @@ pub fn write_allocations<'tcx>(\n     struct CollectAllocIds(BTreeSet<AllocId>);\n \n     impl<'tcx> Visitor<'tcx> for CollectAllocIds {\n-        fn visit_constant(&mut self, c: &Constant<'tcx>, loc: Location) {\n+        fn visit_constant(&mut self, c: &Constant<'tcx>, _: Location) {\n             match c.literal {\n-                ConstantKind::Ty(c) => self.visit_const(c, loc),\n+                ConstantKind::Ty(_) | ConstantKind::Unevaluated(..) => {}\n                 ConstantKind::Val(val, _) => {\n                     self.0.extend(alloc_ids_from_const_val(val));\n                 }\n-                ConstantKind::Unevaluated(..) => {}\n             }\n         }\n     }"}, {"sha": "3b1e02a9e9dae5fefa47aced36a3596db41075e2", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/372c4fd67fc41f0a06b1e6d804e8345db508761a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372c4fd67fc41f0a06b1e6d804e8345db508761a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=372c4fd67fc41f0a06b1e6d804e8345db508761a", "patch": "@@ -237,14 +237,6 @@ macro_rules! make_mir_visitor {\n                 self.super_region(region);\n             }\n \n-            fn visit_const(\n-                &mut self,\n-                constant: $(& $mutability)? ty::Const<'tcx>,\n-                _: Location,\n-            ) {\n-                self.super_const(constant);\n-            }\n-\n             fn visit_substs(\n                 &mut self,\n                 substs: & $($mutability)? SubstsRef<'tcx>,\n@@ -877,7 +869,7 @@ macro_rules! make_mir_visitor {\n                 self.visit_span($(& $mutability)? *span);\n                 drop(user_ty); // no visit method for this\n                 match literal {\n-                    ConstantKind::Ty(ct) => self.visit_const($(& $mutability)? *ct, location),\n+                    ConstantKind::Ty(_) => {}\n                     ConstantKind::Val(_, ty) => self.visit_ty($(& $mutability)? *ty, TyContext::Location(location)),\n                     ConstantKind::Unevaluated(_, ty) => self.visit_ty($(& $mutability)? *ty, TyContext::Location(location)),\n                 }\n@@ -917,9 +909,6 @@ macro_rules! make_mir_visitor {\n             fn super_region(&mut self, _region: $(& $mutability)? ty::Region<'tcx>) {\n             }\n \n-            fn super_const(&mut self, _const: $(& $mutability)? ty::Const<'tcx>) {\n-            }\n-\n             fn super_substs(&mut self, _substs: & $($mutability)? SubstsRef<'tcx>) {\n             }\n \n@@ -1088,12 +1077,20 @@ macro_rules! visit_place_fns {\n                         location,\n                     );\n \n-                    if new_local == local { None } else { Some(PlaceElem::Index(new_local)) }\n+                    if new_local == local {\n+                        None\n+                    } else {\n+                        Some(PlaceElem::Index(new_local))\n+                    }\n                 }\n                 PlaceElem::Field(field, ty) => {\n                     let mut new_ty = ty;\n                     self.visit_ty(&mut new_ty, TyContext::Location(location));\n-                    if ty != new_ty { Some(PlaceElem::Field(field, new_ty)) } else { None }\n+                    if ty != new_ty {\n+                        Some(PlaceElem::Field(field, new_ty))\n+                    } else {\n+                        None\n+                    }\n                 }\n                 PlaceElem::Deref\n                 | PlaceElem::ConstantIndex { .. }"}, {"sha": "b7b24981217d88b9b87d959ad4a12d9d653fb084", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 36, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/372c4fd67fc41f0a06b1e6d804e8345db508761a/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372c4fd67fc41f0a06b1e6d804e8345db508761a/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=372c4fd67fc41f0a06b1e6d804e8345db508761a", "patch": "@@ -795,42 +795,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             }\n         };\n         collect_const_value(self.tcx, val, self.output);\n-        self.visit_ty(literal.ty(), TyContext::Location(location));\n-    }\n-\n-    #[instrument(skip(self), level = \"debug\")]\n-    fn visit_const(&mut self, constant: ty::Const<'tcx>, location: Location) {\n-        debug!(\"visiting const {:?} @ {:?}\", constant, location);\n-\n-        let substituted_constant = self.monomorphize(constant);\n-        let param_env = ty::ParamEnv::reveal_all();\n-\n-        match substituted_constant.kind() {\n-            ty::ConstKind::Value(val) => {\n-                let const_val = self.tcx.valtree_to_const_val((constant.ty(), val));\n-                collect_const_value(self.tcx, const_val, self.output)\n-            }\n-            ty::ConstKind::Unevaluated(unevaluated) => {\n-                match self.tcx.const_eval_resolve(param_env, unevaluated.expand(), None) {\n-                    // The `monomorphize` call should have evaluated that constant already.\n-                    Ok(val) => span_bug!(\n-                        self.body.source_info(location).span,\n-                        \"collection encountered the unevaluated constant {} which evaluated to {:?}\",\n-                        substituted_constant,\n-                        val\n-                    ),\n-                    Err(ErrorHandled::Reported(_) | ErrorHandled::Linted) => {}\n-                    Err(ErrorHandled::TooGeneric) => span_bug!(\n-                        self.body.source_info(location).span,\n-                        \"collection encountered polymorphic constant: {}\",\n-                        substituted_constant\n-                    ),\n-                }\n-            }\n-            _ => {}\n-        }\n-\n-        self.super_const(constant);\n+        MirVisitor::visit_ty(self, literal.ty(), TyContext::Location(location));\n     }\n \n     fn visit_terminator(&mut self, terminator: &mir::Terminator<'tcx>, location: Location) {"}, {"sha": "b5a8c6a2e72c403d4eb9a90905dfdec3f71fe17d", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/372c4fd67fc41f0a06b1e6d804e8345db508761a/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372c4fd67fc41f0a06b1e6d804e8345db508761a/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=372c4fd67fc41f0a06b1e6d804e8345db508761a", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::{def::DefKind, def_id::DefId, ConstContext};\n use rustc_index::bit_set::FiniteBitSet;\n use rustc_middle::mir::{\n     visit::{TyContext, Visitor},\n-    ConstantKind, Local, LocalDecl, Location,\n+    Constant, ConstantKind, Local, LocalDecl, Location,\n };\n use rustc_middle::ty::{\n     self,\n@@ -270,8 +270,15 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n         self.super_local_decl(local, local_decl);\n     }\n \n-    fn visit_const(&mut self, c: Const<'tcx>, _: Location) {\n-        c.visit_with(self);\n+    fn visit_constant(&mut self, ct: &Constant<'tcx>, location: Location) {\n+        match ct.literal {\n+            ConstantKind::Ty(c) => {\n+                c.visit_with(self);\n+            }\n+            ConstantKind::Val(_, ty) | ConstantKind::Unevaluated(_, ty) => {\n+                Visitor::visit_ty(self, ty, TyContext::Location(location))\n+            }\n+        }\n     }\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>, _: TyContext) {"}]}