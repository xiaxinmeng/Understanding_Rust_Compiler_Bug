{"sha": "0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlODlmNTcwZDIyNGVlMDhiNmUzMmFhOWVhOGVhNDRhNGU5MjQ0ZjM=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-11-04T04:47:10Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-11-07T21:57:40Z"}, "message": "Added tests.", "tree": {"sha": "b4608c47fb643d3b8955e272b3c322274f788ecc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4608c47fb643d3b8955e272b3c322274f788ecc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3", "html_url": "https://github.com/rust-lang/rust/commit/0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d08a42bf2c2115fc1869b3a72ee40fa4dd445795", "url": "https://api.github.com/repos/rust-lang/rust/commits/d08a42bf2c2115fc1869b3a72ee40fa4dd445795", "html_url": "https://github.com/rust-lang/rust/commit/d08a42bf2c2115fc1869b3a72ee40fa4dd445795"}], "stats": {"total": 175, "additions": 133, "deletions": 42}, "files": [{"sha": "96590c1fc72d400c8724e663dd39598da5fad024", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3", "patch": "@@ -2134,7 +2134,7 @@ static X: u32 = 42;\n \n \n register_diagnostics! {\n-//  E0006 // merged with E0005\n+//  E0006, // merged with E0005\n //  E0101, // replaced with E0282\n //  E0102, // replaced with E0282\n //  E0134,\n@@ -2183,9 +2183,7 @@ register_diagnostics! {\n     E0657, // `impl Trait` can only capture lifetimes bound at the fn level\n     E0687, // in-band lifetimes cannot be used in `fn`/`Fn` syntax\n     E0688, // in-band lifetimes cannot be mixed with explicit lifetime binders\n-\n     E0697, // closures cannot be static\n-\n     E0707, // multiple elided lifetimes used in arguments of `async fn`\n     E0708, // `async` non-`move` closures with arguments are not currently supported\n     E0709, // multiple different lifetimes used in arguments of `async fn`"}, {"sha": "71d59750d6c8758e9063f8af06841220d8c9b21f", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3", "patch": "@@ -1239,11 +1239,11 @@ pub type PolySubtypePredicate<'tcx> = ty::Binder<SubtypePredicate<'tcx>>;\n /// This kind of predicate has no *direct* correspondent in the\n /// syntax, but it roughly corresponds to the syntactic forms:\n ///\n-/// 1. `T : TraitRef<..., Item=Type>`\n+/// 1. `T: TraitRef<..., Item=Type>`\n /// 2. `<T as TraitRef<...>>::Item == Type` (NYI)\n ///\n /// In particular, form #1 is \"desugared\" to the combination of a\n-/// normal trait predicate (`T : TraitRef<...>`) and one of these\n+/// normal trait predicate (`T: TraitRef<...>`) and one of these\n /// predicates. Form #2 is a broader form in that it also permits\n /// equality between arbitrary types. Processing an instance of\n /// Form #2 eventually yields one of these `ProjectionPredicate`"}, {"sha": "3aaa5810eab38b4a9fc155dbc8bde2d4b7b88c65", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3", "patch": "@@ -831,15 +831,15 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n         let tcx = self.tcx();\n \n         if !speculative {\n-            // Given something like `U : SomeTrait<T=X>`, we want to produce a\n+            // Given something like `U: SomeTrait<T = X>`, we want to produce a\n             // predicate like `<U as SomeTrait>::T = X`. This is somewhat\n             // subtle in the event that `T` is defined in a supertrait of\n             // `SomeTrait`, because in that case we need to upcast.\n             //\n             // That is, consider this case:\n             //\n             // ```\n-            // trait SubTrait : SuperTrait<int> { }\n+            // trait SubTrait: SuperTrait<int> { }\n             // trait SuperTrait<A> { type T; }\n             //\n             // ... B : SubTrait<T=foo> ...\n@@ -879,17 +879,20 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n             }\n         }\n \n+        let supertraits = traits::supertraits(tcx, trait_ref);\n         let candidate = if self.trait_defines_associated_type_named(trait_ref.def_id(),\n                                                                     binding.item_name) {\n             // Simple case: X is defined in the current trait.\n             Ok(trait_ref)\n         } else {\n             // Otherwise, we have to walk through the supertraits to find\n             // those that do.\n-            let candidates = traits::supertraits(tcx, trait_ref).filter(|r| {\n+            let candidates = supertraits.filter(|r| {\n                 self.trait_defines_associated_type_named(r.def_id(), binding.item_name)\n             });\n-            self.one_bound_for_assoc_type(candidates, &trait_ref.to_string(),\n+            let candidates = candidates.collect::<Vec<_>>();\n+            debug!(\"foo: candidates: {:?}\", candidates);\n+            self.one_bound_for_assoc_type(candidates.into_iter(), &trait_ref.to_string(),\n                                           binding.item_name, binding.span)\n         }?;\n \n@@ -905,6 +908,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n         }\n         tcx.check_stability(assoc_ty.def_id, Some(ref_id), binding.span);\n \n+        debug!(\"foo: info: {:?} {:?} {:?} {:?} {:?}\", trait_ref, binding.item_name, speculative, assoc_ty.def_id, dup_bindings);\n         if !speculative {\n             dup_bindings.entry(assoc_ty.def_id)\n                 .and_modify(|prev_span| {\n@@ -921,6 +925,13 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                 })\n                 .or_insert(binding.span);\n         }\n+        static mut ABC: u32 = 0;\n+        unsafe {\n+            ABC += 1;\n+            if ABC == 3 {\n+                assert!(false);\n+            }\n+        };\n \n         Ok(candidate.map_bound(|trait_ref| {\n             ty::ProjectionPredicate {\n@@ -1017,8 +1028,25 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                 }));\n         }\n \n-        for (projection_bound, _) in &projection_bounds {\n-            associated_types.remove(&projection_bound.projection_def_id());\n+        let mut seen_projection_bounds = FxHashMap::default();\n+        for (projection_bound, span) in projection_bounds.iter().rev() {\n+            let bound_def_id = projection_bound.projection_def_id();\n+            seen_projection_bounds.entry(bound_def_id)\n+                .and_modify(|prev_span| {\n+                    let assoc_item = tcx.associated_item(bound_def_id);\n+                    let trait_def_id = assoc_item.container.id();\n+                    struct_span_err!(tcx.sess, *span, E0719,\n+                                     \"the value of the associated type `{}` (from the trait `{}`) \\\n+                                      is already specified\",\n+                                     assoc_item.ident,\n+                                     tcx.item_path_str(trait_def_id))\n+                        .span_label(*span, \"re-bound here\")\n+                        .span_label(*prev_span, format!(\"binding for `{}`\", assoc_item.ident))\n+                        .emit();\n+                })\n+                .or_insert(*span);\n+\n+            associated_types.remove(&bound_def_id);\n         }\n \n         for item_def_id in associated_types {\n@@ -1132,7 +1160,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                                       span)\n     }\n \n-    // Checks that bounds contains exactly one element and reports appropriate\n+    // Checks that `bounds` contains exactly one element and reports appropriate\n     // errors otherwise.\n     fn one_bound_for_assoc_type<I>(&self,\n                                    mut bounds: I,"}, {"sha": "8574443190d7c7a2d6a70f8737e3b1b7565de272", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3", "patch": "@@ -28,9 +28,9 @@ use errors::{DiagnosticBuilder, DiagnosticId};\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir;\n \n-/// Helper type of a temporary returned by .for_item(...).\n+/// Helper type of a temporary returned by `.for_item(...)`.\n /// Necessary because we can't write the following bound:\n-/// F: for<'b, 'tcx> where 'gcx: 'tcx FnOnce(FnCtxt<'b, 'gcx, 'tcx>).\n+/// `F: for<'b, 'tcx> where 'gcx: 'tcx FnOnce(FnCtxt<'b, 'gcx, 'tcx>)`.\n struct CheckWfFcxBuilder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     inherited: super::InheritedBuilder<'a, 'gcx, 'tcx>,\n     id: ast::NodeId,"}, {"sha": "d5f5cbb562e78514581bea80c91fc6e1237add51", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3", "patch": "@@ -1978,18 +1978,18 @@ pub enum SizedByDefault {\n     No,\n }\n \n-/// Translate the AST's notion of ty param bounds (which are an enum consisting of a newtyped Ty or\n-/// a region) to ty's notion of ty param bounds, which can either be user-defined traits, or the\n-/// built-in trait (formerly known as kind): Send.\n+/// Translate the AST's notion of ty param bounds (which are an enum consisting of a newtyped `Ty`\n+/// or a region) to ty's notion of ty param bounds, which can either be user-defined traits, or the\n+/// built-in trait `Send`.\n pub fn compute_bounds<'gcx: 'tcx, 'tcx>(\n     astconv: &dyn AstConv<'gcx, 'tcx>,\n     param_ty: Ty<'tcx>,\n     ast_bounds: &[hir::GenericBound],\n     sized_by_default: SizedByDefault,\n     span: Span,\n ) -> Bounds<'tcx> {\n-    let mut region_bounds = vec![];\n-    let mut trait_bounds = vec![];\n+    let mut region_bounds = Vec::new();\n+    let mut trait_bounds = Vec::new();\n \n     for ast_bound in ast_bounds {\n         match *ast_bound {\n@@ -1999,7 +1999,7 @@ pub fn compute_bounds<'gcx: 'tcx, 'tcx>(\n         }\n     }\n \n-    let mut projection_bounds = vec![];\n+    let mut projection_bounds = Vec::new();\n \n     let mut trait_bounds: Vec<_> = trait_bounds.iter().map(|&bound| {\n         (astconv.instantiate_poly_trait_ref(bound, param_ty, &mut projection_bounds), bound.span)"}, {"sha": "a985c3e9fdf449bfc8b57664c867ef065d1025f6", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3", "patch": "@@ -4909,4 +4909,5 @@ register_diagnostics! {\n     E0641, // cannot cast to/from a pointer with an unknown kind\n     E0645, // trait aliases not finished\n     E0698, // type inside generator must be known in this context\n+    E0719, // duplicate values for associated type binding\n }"}, {"sha": "cce8bb84837f3b2fde9928063a557647e3a82013", "filename": "src/test/run-pass/issues/issue-24010.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3/src%2Ftest%2Frun-pass%2Fissues%2Fissue-24010.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3/src%2Ftest%2Frun-pass%2Fissues%2Fissue-24010.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-24010.rs?ref=0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo: Fn(i32) -> i32 + Send {}\n+\n+impl<T: ?Sized + Fn(i32) -> i32 + Send> Foo for T {}\n+\n+fn wants_foo(f: Box<Foo>) -> i32 {\n+    f(42)\n+}\n+\n+fn main() {\n+    let f = Box::new(|x| x);\n+    assert_eq!(wants_foo(f), 42);\n+}"}, {"sha": "a5bb0cac251b208fbdd988d53b0ef58e48ee7ffa", "filename": "src/test/run-pass/traits/trait-alias-objects.rs", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-alias-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-alias-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-alias-objects.rs?ref=0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3", "patch": "@@ -21,7 +21,6 @@ pub fn main() {\n     let b = Box::new(456) as Box<dyn Foo>;\n     assert!(*b == 456);\n \n-    // FIXME(alexreg): associated type should be gotten from trait alias definition\n-    // let c: &dyn I32Iterator = &vec![123].into_iter();\n-    // assert_eq!(c.next(), Some(123));\n+    let c: &mut dyn I32Iterator<Item = u32> = &mut vec![123].into_iter();\n+    assert_eq!(c.next(), Some(123));\n }", "previous_filename": "src/test/run-pass/traits/trait-alias-object-type.rs"}, {"sha": "c35c7e10f5a38500ab26cff4ab0cc8854964f397", "filename": "src/test/ui/error-codes/E0191.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3/src%2Ftest%2Fui%2Ferror-codes%2FE0191.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3/src%2Ftest%2Fui%2Ferror-codes%2FE0191.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0191.rs?ref=0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3", "patch": "@@ -14,5 +14,4 @@ trait Trait {\n \n type Foo = Trait; //~ ERROR E0191\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "951041124bb1d7ca58f73faf713e0f3a044e9626", "filename": "src/test/ui/error-codes/E0719.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3/src%2Ftest%2Fui%2Ferror-codes%2FE0719.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3/src%2Ftest%2Fui%2Ferror-codes%2FE0719.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0719.rs?ref=0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(trait_alias)]\n+\n+trait I32Iterator = Iterator<Item = i32>;\n+\n+pub fn main() {\n+    let _: &I32Iterator<Item = f32>; //~ ERROR E0719\n+}"}, {"sha": "7b79807e4d7ff5df6ffa42a3e4a12a3ec698367d", "filename": "src/test/ui/issue-51947.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d08a42bf2c2115fc1869b3a72ee40fa4dd445795/src%2Ftest%2Fui%2Fissue-51947.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08a42bf2c2115fc1869b3a72ee40fa4dd445795/src%2Ftest%2Fui%2Fissue-51947.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51947.rs?ref=d08a42bf2c2115fc1869b3a72ee40fa4dd445795", "patch": "@@ -1,17 +0,0 @@\n-// compile-pass\n-\n-#![crate_type = \"lib\"]\n-#![feature(linkage)]\n-\n-// MergeFunctions will merge these via an anonymous internal\n-// backing function, which must be named if ThinLTO buffers are used\n-\n-#[linkage = \"weak\"]\n-pub fn fn1(a: u32, b: u32, c: u32) -> u32 {\n-    a + b + c\n-}\n-\n-#[linkage = \"weak\"]\n-pub fn fn2(a: u32, b: u32, c: u32) -> u32 {\n-    a + b + c\n-}"}, {"sha": "3e0c3c002f64962cb97c905a8f8e1faa239c30d7", "filename": "src/test/ui/issues/issue-51947.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3/src%2Ftest%2Fui%2Fissues%2Fissue-51947.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3/src%2Ftest%2Fui%2Fissues%2Fissue-51947.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51947.rs?ref=0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+#![crate_type = \"lib\"]\n+#![feature(linkage)]\n+\n+// MergeFunctions will merge these via an anonymous internal\n+// backing function, which must be named if ThinLTO buffers are used\n+\n+#[linkage = \"weak\"]\n+pub fn fn1(a: u32, b: u32, c: u32) -> u32 {\n+    a + b + c\n+}\n+\n+#[linkage = \"weak\"]\n+pub fn fn2(a: u32, b: u32, c: u32) -> u32 {\n+    a + b + c\n+}"}, {"sha": "32f707e192decefe35dc62e4f0cffeaf14438be1", "filename": "src/test/ui/traits/trait-alias-associated-type-rebound.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-associated-type-rebound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-associated-type-rebound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-associated-type-rebound.rs?ref=0e89f570d224ee08b6e32aa9ea8ea44a4e9244f3", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(trait_alias)]\n+\n+trait I32Iterator = Iterator<Item = i32>;\n+trait I32Iterator2 = I32Iterator<Item = i32>;\n+trait U32Iterator = I32Iterator2<Item = i32>;\n+\n+pub fn main() {}"}]}