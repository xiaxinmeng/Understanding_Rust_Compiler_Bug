{"sha": "3533204e999cf70378131c63e1abbfe812109792", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MzMyMDRlOTk5Y2Y3MDM3ODEzMWM2M2UxYWJiZmU4MTIxMDk3OTI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-12-26T14:59:02Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-12-26T14:59:02Z"}, "message": "clarify wrapping ptr arithmetic docs", "tree": {"sha": "2de26917cbacb8a0e3e50cd796104d3ad0898a29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2de26917cbacb8a0e3e50cd796104d3ad0898a29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3533204e999cf70378131c63e1abbfe812109792", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3533204e999cf70378131c63e1abbfe812109792", "html_url": "https://github.com/rust-lang/rust/commit/3533204e999cf70378131c63e1abbfe812109792", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3533204e999cf70378131c63e1abbfe812109792/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f5beec3b111560be181283009ef96da6ac5e7a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5beec3b111560be181283009ef96da6ac5e7a7", "html_url": "https://github.com/rust-lang/rust/commit/1f5beec3b111560be181283009ef96da6ac5e7a7"}], "stats": {"total": 174, "additions": 102, "deletions": 72}, "files": [{"sha": "6638033566f29e96ca241aff3bd6bbd0f098ec85", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 51, "deletions": 36, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/3533204e999cf70378131c63e1abbfe812109792/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3533204e999cf70378131c63e1abbfe812109792/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=3533204e999cf70378131c63e1abbfe812109792", "patch": "@@ -232,23 +232,26 @@ impl<T: ?Sized> *const T {\n     ///\n     /// # Safety\n     ///\n-    /// The resulting pointer does not need to be in bounds, but it is\n-    /// potentially hazardous to dereference (which requires `unsafe`).\n+    /// This operation itself is always safe, but using the resulting pointer is not.\n     ///\n-    /// In particular, the resulting pointer remains attached to the same allocated\n-    /// object that `self` points to. It may *not* be used to access a\n-    /// different allocated object. Note that in Rust,\n-    /// every (stack-allocated) variable is considered a separate allocated object.\n+    /// The resulting pointer remains attached to the same allocated object that `self` points to.\n+    /// It may *not* be used to access a different allocated object. Note that in Rust, every\n+    /// (stack-allocated) variable is considered a separate allocated object.\n     ///\n-    /// In other words, `x.wrapping_offset((y as usize).wrapping_sub(x as usize) / size_of::<T>())`\n-    /// is *not* the same as `y`, and dereferencing it is undefined behavior\n-    /// unless `x` and `y` point into the same allocated object.\n+    /// In other words, `let z = x.wrapping_add((y as usize).wrapping_sub(x as usize) /\n+    /// size_of::<T>())` does *not* make `z` the same as `y`: `z` is still attached to the object `x` is\n+    /// attached to, and dereferencing it is Undefined Behavior unless `x` and `y` point into the\n+    /// same allocated object.\n     ///\n-    /// Compared to [`offset`], this method basically delays the requirement of staying\n-    /// within the same allocated object: [`offset`] is immediate Undefined Behavior when\n-    /// crossing object boundaries; `wrapping_offset` produces a pointer but still leads\n-    /// to Undefined Behavior if that pointer is dereferenced. [`offset`] can be optimized\n-    /// better and is thus preferable in performance-sensitive code.\n+    /// Compared to [`offset`], this method basically delays the requirement of staying within the\n+    /// same allocated object: [`offset`] is immediate Undefined Behavior when crossing object\n+    /// boundaries; `wrapping_offset` produces a pointer but still leads to Undefined Behavior if a\n+    /// pointer is dereferenced when it is out-of-bounds of the object it is attached to. [`offset`]\n+    /// can be optimized better and is thus preferable in performance-sensitive code.\n+    ///\n+    /// `x.wrapping_offset(o).wrapping_offset(-o)` is always the same as `x` (if `-o` does not\n+    /// overflow). In other words, leaving the allocated object and then re-entering it later is\n+    /// permitted.\n     ///\n     /// If you need to cross object boundaries, cast the pointer to an integer and\n     /// do the arithmetic there.\n@@ -571,19 +574,25 @@ impl<T: ?Sized> *const T {\n     ///\n     /// # Safety\n     ///\n-    /// The resulting pointer does not need to be in bounds, but it is\n-    /// potentially hazardous to dereference (which requires `unsafe`).\n+    /// This operation itself is always safe, but using the resulting pointer is not.\n+    ///\n+    /// The resulting pointer remains attached to the same allocated object that `self` points to.\n+    /// It may *not* be used to access a different allocated object. Note that in Rust, every\n+    /// (stack-allocated) variable is considered a separate allocated object.\n+    ///\n+    /// In other words, `let z = x.wrapping_add((y as usize).wrapping_sub(x as usize) /\n+    /// size_of::<T>())` does *not* make `z` the same as `y`: `z` is still attached to the object `x` is\n+    /// attached to, and dereferencing it is Undefined Behavior unless `x` and `y` point into the\n+    /// same allocated object.\n     ///\n-    /// In particular, the resulting pointer remains attached to the same allocated\n-    /// object that `self` points to. It may *not* be used to access a\n-    /// different allocated object. Note that in Rust,\n-    /// every (stack-allocated) variable is considered a separate allocated object.\n+    /// Compared to [`add`], this method basically delays the requirement of staying within the\n+    /// same allocated object: [`add`] is immediate Undefined Behavior when crossing object\n+    /// boundaries; `wrapping_add` produces a pointer but still leads to Undefined Behavior if a\n+    /// pointer is dereferenced when it is out-of-bounds of the object it is attached to. [`add`]\n+    /// can be optimized better and is thus preferable in performance-sensitive code.\n     ///\n-    /// Compared to [`add`], this method basically delays the requirement of staying\n-    /// within the same allocated object: [`add`] is immediate Undefined Behavior when\n-    /// crossing object boundaries; `wrapping_add` produces a pointer but still leads\n-    /// to Undefined Behavior if that pointer is dereferenced. [`add`] can be optimized\n-    /// better and is thus preferable in performance-sensitive code.\n+    /// `x.wrapping_add(o).wrapping_sub(o)` is always the same as `x`. In other words, leaving the\n+    /// allocated object and then re-entering it later is permitted.\n     ///\n     /// If you need to cross object boundaries, cast the pointer to an integer and\n     /// do the arithmetic there.\n@@ -628,19 +637,25 @@ impl<T: ?Sized> *const T {\n     ///\n     /// # Safety\n     ///\n-    /// The resulting pointer does not need to be in bounds, but it is\n-    /// potentially hazardous to dereference (which requires `unsafe`).\n+    /// This operation itself is always safe, but using the resulting pointer is not.\n+    ///\n+    /// The resulting pointer remains attached to the same allocated object that `self` points to.\n+    /// It may *not* be used to access a different allocated object. Note that in Rust, every\n+    /// (stack-allocated) variable is considered a separate allocated object.\n+    ///\n+    /// In other words, `let z = x.wrapping_add((y as usize).wrapping_sub(x as usize) /\n+    /// size_of::<T>())` does *not* make `z` the same as `y`: `z` is still attached to the object `x` is\n+    /// attached to, and dereferencing it is Undefined Behavior unless `x` and `y` point into the\n+    /// same allocated object.\n     ///\n-    /// In particular, the resulting pointer remains attached to the same allocated\n-    /// object that `self` points to. It may *not* be used to access a\n-    /// different allocated object. Note that in Rust,\n-    /// every (stack-allocated) variable is considered a separate allocated object.\n+    /// Compared to [`sub`], this method basically delays the requirement of staying within the\n+    /// same allocated object: [`sub`] is immediate Undefined Behavior when crossing object\n+    /// boundaries; `wrapping_sub` produces a pointer but still leads to Undefined Behavior if a\n+    /// pointer is dereferenced when it is out-of-bounds of the object it is attached to. [`sub`]\n+    /// can be optimized better and is thus preferable in performance-sensitive code.\n     ///\n-    /// Compared to [`sub`], this method basically delays the requirement of staying\n-    /// within the same allocated object: [`sub`] is immediate Undefined Behavior when\n-    /// crossing object boundaries; `wrapping_sub` produces a pointer but still leads\n-    /// to Undefined Behavior if that pointer is dereferenced. [`sub`] can be optimized\n-    /// better and is thus preferable in performance-sensitive code.\n+    /// `x.wrapping_add(o).wrapping_sub(o)` is always the same as `x`. In other words, leaving the\n+    /// allocated object and then re-entering it later is permitted.\n     ///\n     /// If you need to cross object boundaries, cast the pointer to an integer and\n     /// do the arithmetic there."}, {"sha": "a0edb036c251dea9fe1f93333504daecc3ac7b67", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 51, "deletions": 36, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/3533204e999cf70378131c63e1abbfe812109792/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3533204e999cf70378131c63e1abbfe812109792/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=3533204e999cf70378131c63e1abbfe812109792", "patch": "@@ -238,23 +238,26 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// # Safety\n     ///\n-    /// The resulting pointer does not need to be in bounds, but it is\n-    /// potentially hazardous to dereference (which requires `unsafe`).\n+    /// This operation itself is always safe, but using the resulting pointer is not.\n     ///\n-    /// In particular, the resulting pointer remains attached to the same allocated\n-    /// object that `self` points to. It may *not* be used to access a\n-    /// different allocated object. Note that in Rust,\n-    /// every (stack-allocated) variable is considered a separate allocated object.\n+    /// The resulting pointer remains attached to the same allocated object that `self` points to.\n+    /// It may *not* be used to access a different allocated object. Note that in Rust, every\n+    /// (stack-allocated) variable is considered a separate allocated object.\n     ///\n-    /// In other words, `x.wrapping_offset((y as usize).wrapping_sub(x as usize) / size_of::<T>())`\n-    /// is *not* the same as `y`, and dereferencing it is undefined behavior\n-    /// unless `x` and `y` point into the same allocated object.\n+    /// In other words, `let z = x.wrapping_add((y as usize).wrapping_sub(x as usize) /\n+    /// size_of::<T>())` does *not* make `z` the same as `y`: `z` is still attached to the object `x` is\n+    /// attached to, and dereferencing it is Undefined Behavior unless `x` and `y` point into the\n+    /// same allocated object.\n     ///\n-    /// Compared to [`offset`], this method basically delays the requirement of staying\n-    /// within the same allocated object: [`offset`] is immediate Undefined Behavior when\n-    /// crossing object boundaries; `wrapping_offset` produces a pointer but still leads\n-    /// to Undefined Behavior if that pointer is dereferenced. [`offset`] can be optimized\n-    /// better and is thus preferable in performance-sensitive code.\n+    /// Compared to [`offset`], this method basically delays the requirement of staying within the\n+    /// same allocated object: [`offset`] is immediate Undefined Behavior when crossing object\n+    /// boundaries; `wrapping_offset` produces a pointer but still leads to Undefined Behavior if a\n+    /// pointer is dereferenced when it is out-of-bounds of the object it is attached to. [`offset`]\n+    /// can be optimized better and is thus preferable in performance-sensitive code.\n+    ///\n+    /// `x.wrapping_offset(o).wrapping_offset(-o)` is always the same as `x` (if `-o` does not\n+    /// overflow). In other words, leaving the allocated object and then re-entering it later is\n+    /// permitted.\n     ///\n     /// If you need to cross object boundaries, cast the pointer to an integer and\n     /// do the arithmetic there.\n@@ -678,19 +681,25 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// # Safety\n     ///\n-    /// The resulting pointer does not need to be in bounds, but it is\n-    /// potentially hazardous to dereference (which requires `unsafe`).\n+    /// This operation itself is always safe, but using the resulting pointer is not.\n+    ///\n+    /// The resulting pointer remains attached to the same allocated object that `self` points to.\n+    /// It may *not* be used to access a different allocated object. Note that in Rust, every\n+    /// (stack-allocated) variable is considered a separate allocated object.\n+    ///\n+    /// In other words, `let z = x.wrapping_add((y as usize).wrapping_sub(x as usize) /\n+    /// size_of::<T>())` does *not* make `z` the same as `y`: `z` is still attached to the object `x` is\n+    /// attached to, and dereferencing it is Undefined Behavior unless `x` and `y` point into the\n+    /// same allocated object.\n     ///\n-    /// In particular, the resulting pointer remains attached to the same allocated\n-    /// object that `self` points to. It may *not* be used to access a\n-    /// different allocated object. Note that in Rust,\n-    /// every (stack-allocated) variable is considered a separate allocated object.\n+    /// Compared to [`add`], this method basically delays the requirement of staying within the\n+    /// same allocated object: [`add`] is immediate Undefined Behavior when crossing object\n+    /// boundaries; `wrapping_add` produces a pointer but still leads to Undefined Behavior if a\n+    /// pointer is dereferenced when it is out-of-bounds of the object it is attached to. [`add`]\n+    /// can be optimized better and is thus preferable in performance-sensitive code.\n     ///\n-    /// Compared to [`add`], this method basically delays the requirement of staying\n-    /// within the same allocated object: [`add`] is immediate Undefined Behavior when\n-    /// crossing object boundaries; `wrapping_add` produces a pointer but still leads\n-    /// to Undefined Behavior if that pointer is dereferenced. [`add`] can be optimized\n-    /// better and is thus preferable in performance-sensitive code.\n+    /// `x.wrapping_add(o).wrapping_sub(o)` is always the same as `x`. In other words, leaving the\n+    /// allocated object and then re-entering it later is permitted.\n     ///\n     /// If you need to cross object boundaries, cast the pointer to an integer and\n     /// do the arithmetic there.\n@@ -735,19 +744,25 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// # Safety\n     ///\n-    /// The resulting pointer does not need to be in bounds, but it is\n-    /// potentially hazardous to dereference (which requires `unsafe`).\n+    /// This operation itself is always safe, but using the resulting pointer is not.\n+    ///\n+    /// The resulting pointer remains attached to the same allocated object that `self` points to.\n+    /// It may *not* be used to access a different allocated object. Note that in Rust, every\n+    /// (stack-allocated) variable is considered a separate allocated object.\n+    ///\n+    /// In other words, `let z = x.wrapping_add((y as usize).wrapping_sub(x as usize) /\n+    /// size_of::<T>())` does *not* make `z` the same as `y`: `z` is still attached to the object `x` is\n+    /// attached to, and dereferencing it is Undefined Behavior unless `x` and `y` point into the\n+    /// same allocated object.\n     ///\n-    /// In particular, the resulting pointer remains attached to the same allocated\n-    /// object that `self` points to. It may *not* be used to access a\n-    /// different allocated object. Note that in Rust,\n-    /// every (stack-allocated) variable is considered a separate allocated object.\n+    /// Compared to [`sub`], this method basically delays the requirement of staying within the\n+    /// same allocated object: [`sub`] is immediate Undefined Behavior when crossing object\n+    /// boundaries; `wrapping_sub` produces a pointer but still leads to Undefined Behavior if a\n+    /// pointer is dereferenced when it is out-of-bounds of the object it is attached to. [`sub`]\n+    /// can be optimized better and is thus preferable in performance-sensitive code.\n     ///\n-    /// Compared to [`sub`], this method basically delays the requirement of staying\n-    /// within the same allocated object: [`sub`] is immediate Undefined Behavior when\n-    /// crossing object boundaries; `wrapping_sub` produces a pointer but still leads\n-    /// to Undefined Behavior if that pointer is dereferenced. [`sub`] can be optimized\n-    /// better and is thus preferable in performance-sensitive code.\n+    /// `x.wrapping_add(o).wrapping_sub(o)` is always the same as `x`. In other words, leaving the\n+    /// allocated object and then re-entering it later is permitted.\n     ///\n     /// If you need to cross object boundaries, cast the pointer to an integer and\n     /// do the arithmetic there."}]}