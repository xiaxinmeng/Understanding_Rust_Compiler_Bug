{"sha": "703364f2144c4055e5851fc5400625f086210f27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMzM2NGYyMTQ0YzQwNTVlNTg1MWZjNTQwMDYyNWYwODYyMTBmMjc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-06T00:11:55Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-06T10:51:13Z"}, "message": "Rollup merge of #21968 - nikomatsakis:issue-21965-duplicate-preds-in-env, r=pnkfelix\n\n We were already building a hashset to check for duplicates, but we assumed that the initial vector had no duplicates. Fixes #21965.\n\nr? @pnkfelix", "tree": {"sha": "cb0ed5e6bc0c26ced51e9d90f5b3e893167d3878", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb0ed5e6bc0c26ced51e9d90f5b3e893167d3878"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/703364f2144c4055e5851fc5400625f086210f27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/703364f2144c4055e5851fc5400625f086210f27", "html_url": "https://github.com/rust-lang/rust/commit/703364f2144c4055e5851fc5400625f086210f27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/703364f2144c4055e5851fc5400625f086210f27/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfc92656e5551d6fd9b163da7a9bb2107d51ecce", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfc92656e5551d6fd9b163da7a9bb2107d51ecce", "html_url": "https://github.com/rust-lang/rust/commit/dfc92656e5551d6fd9b163da7a9bb2107d51ecce"}, {"sha": "bbf0898013d0e2cb9655987cbef1f00569e6299a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbf0898013d0e2cb9655987cbef1f00569e6299a", "html_url": "https://github.com/rust-lang/rust/commit/bbf0898013d0e2cb9655987cbef1f00569e6299a"}], "stats": {"total": 153, "additions": 125, "deletions": 28}, "files": [{"sha": "f00781fd65c89d62a135ba519b3848028d5cbd59", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/703364f2144c4055e5851fc5400625f086210f27/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/703364f2144c4055e5851fc5400625f086210f27/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=703364f2144c4055e5851fc5400625f086210f27", "patch": "@@ -1335,25 +1335,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // the where clauses are in scope.\n                 true\n             }\n-            (&ParamCandidate(ref bound1), &ParamCandidate(ref bound2)) => {\n-                self.infcx.probe(|_| {\n-                    let bound1 =\n-                        project::normalize_with_depth(self,\n-                                                      stack.obligation.cause.clone(),\n-                                                      stack.obligation.recursion_depth+1,\n-                                                      bound1);\n-                    let bound2 =\n-                        project::normalize_with_depth(self,\n-                                                      stack.obligation.cause.clone(),\n-                                                      stack.obligation.recursion_depth+1,\n-                                                      bound2);\n-                    let origin =\n-                        infer::RelateOutputImplTypes(stack.obligation.cause.span);\n-                    self.infcx\n-                        .sub_poly_trait_refs(false, origin, bound1.value, bound2.value)\n-                        .is_ok()\n-                })\n-            }\n             _ => {\n                 false\n             }"}, {"sha": "573efa727569ec915629143df38a9524917c98b7", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 47, "deletions": 9, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/703364f2144c4055e5851fc5400625f086210f27/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/703364f2144c4055e5851fc5400625f086210f27/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=703364f2144c4055e5851fc5400625f086210f27", "patch": "@@ -11,17 +11,58 @@\n use middle::subst::{Substs, VecPerParamSpace};\n use middle::infer::InferCtxt;\n use middle::ty::{self, Ty, AsPredicate, ToPolyTraitRef};\n-use std::collections::HashSet;\n use std::fmt;\n use std::rc::Rc;\n use syntax::ast;\n use syntax::codemap::Span;\n use util::common::ErrorReported;\n+use util::nodemap::FnvHashSet;\n use util::ppaux::Repr;\n \n use super::{Obligation, ObligationCause, PredicateObligation,\n             VtableImpl, VtableParam, VtableImplData};\n \n+struct PredicateSet<'a,'tcx:'a> {\n+    tcx: &'a ty::ctxt<'tcx>,\n+    set: FnvHashSet<ty::Predicate<'tcx>>,\n+}\n+\n+impl<'a,'tcx> PredicateSet<'a,'tcx> {\n+    fn new(tcx: &'a ty::ctxt<'tcx>) -> PredicateSet<'a,'tcx> {\n+        PredicateSet { tcx: tcx, set: FnvHashSet() }\n+    }\n+\n+    fn insert(&mut self, pred: &ty::Predicate<'tcx>) -> bool {\n+        // We have to be careful here because we want\n+        //\n+        //    for<'a> Foo<&'a int>\n+        //\n+        // and\n+        //\n+        //    for<'b> Foo<&'b int>\n+        //\n+        // to be considered equivalent. So normalize all late-bound\n+        // regions before we throw things into the underlying set.\n+        let normalized_pred = match *pred {\n+            ty::Predicate::Trait(ref data) =>\n+                ty::Predicate::Trait(ty::anonymize_late_bound_regions(self.tcx, data)),\n+\n+            ty::Predicate::Equate(ref data) =>\n+                ty::Predicate::Equate(ty::anonymize_late_bound_regions(self.tcx, data)),\n+\n+            ty::Predicate::RegionOutlives(ref data) =>\n+                ty::Predicate::RegionOutlives(ty::anonymize_late_bound_regions(self.tcx, data)),\n+\n+            ty::Predicate::TypeOutlives(ref data) =>\n+                ty::Predicate::TypeOutlives(ty::anonymize_late_bound_regions(self.tcx, data)),\n+\n+            ty::Predicate::Projection(ref data) =>\n+                ty::Predicate::Projection(ty::anonymize_late_bound_regions(self.tcx, data)),\n+        };\n+        self.set.insert(normalized_pred)\n+    }\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // `Elaboration` iterator\n ///////////////////////////////////////////////////////////////////////////\n@@ -36,7 +77,7 @@ use super::{Obligation, ObligationCause, PredicateObligation,\n pub struct Elaborator<'cx, 'tcx:'cx> {\n     tcx: &'cx ty::ctxt<'tcx>,\n     stack: Vec<StackEntry<'tcx>>,\n-    visited: HashSet<ty::Predicate<'tcx>>,\n+    visited: PredicateSet<'cx,'tcx>,\n }\n \n struct StackEntry<'tcx> {\n@@ -65,14 +106,11 @@ pub fn elaborate_trait_refs<'cx, 'tcx>(\n \n pub fn elaborate_predicates<'cx, 'tcx>(\n     tcx: &'cx ty::ctxt<'tcx>,\n-    predicates: Vec<ty::Predicate<'tcx>>)\n+    mut predicates: Vec<ty::Predicate<'tcx>>)\n     -> Elaborator<'cx, 'tcx>\n {\n-    let visited: HashSet<ty::Predicate<'tcx>> =\n-        predicates.iter()\n-                  .map(|b| (*b).clone())\n-                  .collect();\n-\n+    let mut visited = PredicateSet::new(tcx);\n+    predicates.retain(|pred| visited.insert(pred));\n     let entry = StackEntry { position: 0, predicates: predicates };\n     Elaborator { tcx: tcx, stack: vec![entry], visited: visited }\n }\n@@ -94,7 +132,7 @@ impl<'cx, 'tcx> Elaborator<'cx, 'tcx> {\n                 // recursion in some cases.  One common case is when\n                 // people define `trait Sized: Sized { }` rather than `trait\n                 // Sized { }`.\n-                predicates.retain(|r| self.visited.insert(r.clone()));\n+                predicates.retain(|r| self.visited.insert(r));\n \n                 self.stack.push(StackEntry { position: 0,\n                                              predicates: predicates });"}, {"sha": "f768d6c00ecdb1df44ed1d4e34e31db1866ac42b", "filename": "src/test/compile-fail/issue-21974.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/703364f2144c4055e5851fc5400625f086210f27/src%2Ftest%2Fcompile-fail%2Fissue-21974.rs", "raw_url": "https://github.com/rust-lang/rust/raw/703364f2144c4055e5851fc5400625f086210f27/src%2Ftest%2Fcompile-fail%2Fissue-21974.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21974.rs?ref=703364f2144c4055e5851fc5400625f086210f27", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that (for now) we report an ambiguity error here, because\n+// specific trait relationships are ignored for the purposes of trait\n+// matching. This behavior should likely be improved such that this\n+// test passes. See #21974 for more details.\n+\n+trait Foo {\n+    fn foo(self);\n+}\n+\n+fn foo<'a,'b,T>(x: &'a T, y: &'b T)\n+    where &'a T : Foo,\n+          &'b T : Foo\n+{\n+    x.foo(); //~ ERROR type annotations required\n+    y.foo();\n+}\n+\n+fn main() { }"}, {"sha": "8b7ea61dc77e9cec9d560c2ea9f88485bf955a91", "filename": "src/test/run-pass/associated-types-duplicate-binding-in-env-hrtb.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/703364f2144c4055e5851fc5400625f086210f27/src%2Ftest%2Frun-pass%2Fassociated-types-duplicate-binding-in-env-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/703364f2144c4055e5851fc5400625f086210f27/src%2Ftest%2Frun-pass%2Fassociated-types-duplicate-binding-in-env-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-duplicate-binding-in-env-hrtb.rs?ref=703364f2144c4055e5851fc5400625f086210f27", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we do not report ambiguities when equivalent predicates\n+// (modulo bound lifetime names) appears in the environment\n+// twice. Issue #21965.\n+\n+fn foo<T>(t: T) -> i32\n+    where T : for<'a> Fn(&'a u8) -> i32,\n+          T : for<'b> Fn(&'b u8) -> i32,\n+{\n+    t(&3)\n+}\n+\n+fn main() {\n+}"}, {"sha": "62ac21879520bf324e29fa056a0a6cb4e144672d", "filename": "src/test/run-pass/associated-types-duplicate-binding-in-env.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/703364f2144c4055e5851fc5400625f086210f27/src%2Ftest%2Frun-pass%2Fassociated-types-duplicate-binding-in-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/703364f2144c4055e5851fc5400625f086210f27/src%2Ftest%2Frun-pass%2Fassociated-types-duplicate-binding-in-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-duplicate-binding-in-env.rs?ref=703364f2144c4055e5851fc5400625f086210f27", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we do not report ambiguities when the same predicate\n+// appears in the environment twice. Issue #21965.\n+\n+trait Foo {\n+    type B;\n+\n+    fn get() -> Self::B;\n+}\n+\n+fn foo<T>() -> ()\n+    where T : Foo<B=()>, T : Foo<B=()>\n+{\n+    <T as Foo>::get()\n+}\n+\n+fn main() {\n+}"}]}