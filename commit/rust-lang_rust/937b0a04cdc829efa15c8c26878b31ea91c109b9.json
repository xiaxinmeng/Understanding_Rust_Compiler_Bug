{"sha": "937b0a04cdc829efa15c8c26878b31ea91c109b9", "node_id": "C_kwDOAAsO6NoAKDkzN2IwYTA0Y2RjODI5ZWZhMTVjOGMyNjg3OGIzMWVhOTFjMTA5Yjk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-15T18:50:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-15T18:50:48Z"}, "message": "Rollup merge of #96027 - matthiaskrgr:clippy_rec, r=fee1-dead\n\nremove function parameters only used in recursion", "tree": {"sha": "239109d45243dc6e7bedd2fad5159e21138281e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/239109d45243dc6e7bedd2fad5159e21138281e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/937b0a04cdc829efa15c8c26878b31ea91c109b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiWb6ICRBK7hj4Ov3rIwAAZI0IAFDyPHn2p2drp8gLqcFQWApd\n+Tb+20LXXJlkMkaJjVPrB1UMZLNrGD3mtUnzTxfPF9FeGDrnu0zfJWgj8sojX91x\nMT12/wDVTYIyK4R1r+Rh9+YGi4IunK/zSJfC7XrSu/rRqIBNyDOXmQWKzMCBzgXZ\nIXuN64ARTRsNBCfq9tDjChNJ7ZQ/ksQRXn7TjifFQy+p5Gp+HCQlhiKQIKjKwoFA\ngJ1QvV9Jrd8/HOpNvtkKPz4Waf0HPbUXKqf057/c+EH89RQ/Z3MprihTqqFiD1pL\nfBa85Oh98wtqcqqmbafdRzJDRuyyiukq0Niw23KFi+Gvuytom2YjdFFy+/I83h8=\n=QRHN\n-----END PGP SIGNATURE-----\n", "payload": "tree 239109d45243dc6e7bedd2fad5159e21138281e2\nparent ba9c3a13ee6a240d979f41e061c3a76336f59b63\nparent 65119765155bcf9e89d3b5c6c6d054254e343e1e\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1650048648 +0200\ncommitter GitHub <noreply@github.com> 1650048648 +0200\n\nRollup merge of #96027 - matthiaskrgr:clippy_rec, r=fee1-dead\n\nremove function parameters only used in recursion\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/937b0a04cdc829efa15c8c26878b31ea91c109b9", "html_url": "https://github.com/rust-lang/rust/commit/937b0a04cdc829efa15c8c26878b31ea91c109b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/937b0a04cdc829efa15c8c26878b31ea91c109b9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba9c3a13ee6a240d979f41e061c3a76336f59b63", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba9c3a13ee6a240d979f41e061c3a76336f59b63", "html_url": "https://github.com/rust-lang/rust/commit/ba9c3a13ee6a240d979f41e061c3a76336f59b63"}, {"sha": "65119765155bcf9e89d3b5c6c6d054254e343e1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/65119765155bcf9e89d3b5c6c6d054254e343e1e", "html_url": "https://github.com/rust-lang/rust/commit/65119765155bcf9e89d3b5c6c6d054254e343e1e"}], "stats": {"total": 45, "additions": 15, "deletions": 30}, "files": [{"sha": "63aac64989dfaa4d4712bbade80c1cc4eee67b8c", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/937b0a04cdc829efa15c8c26878b31ea91c109b9/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/937b0a04cdc829efa15c8c26878b31ea91c109b9/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=937b0a04cdc829efa15c8c26878b31ea91c109b9", "patch": "@@ -77,7 +77,6 @@ use crate::mbe::{KleeneOp, TokenTree};\n \n use rustc_ast::token::{self, DocComment, Nonterminal, NonterminalKind, Token};\n use rustc_parse::parser::{NtOrTt, Parser};\n-use rustc_session::parse::ParseSess;\n use rustc_span::symbol::MacroRulesNormalizedIdent;\n use rustc_span::Span;\n \n@@ -128,9 +127,8 @@ pub(super) enum MatcherLoc {\n     Eof,\n }\n \n-pub(super) fn compute_locs(sess: &ParseSess, matcher: &[TokenTree]) -> Vec<MatcherLoc> {\n+pub(super) fn compute_locs(matcher: &[TokenTree]) -> Vec<MatcherLoc> {\n     fn inner(\n-        sess: &ParseSess,\n         tts: &[TokenTree],\n         locs: &mut Vec<MatcherLoc>,\n         next_metavar: &mut usize,\n@@ -147,7 +145,7 @@ pub(super) fn compute_locs(sess: &ParseSess, matcher: &[TokenTree]) -> Vec<Match\n \n                     locs.push(MatcherLoc::Delimited);\n                     locs.push(MatcherLoc::Token { token: open_token });\n-                    inner(sess, &delimited.tts, locs, next_metavar, seq_depth);\n+                    inner(&delimited.tts, locs, next_metavar, seq_depth);\n                     locs.push(MatcherLoc::Token { token: close_token });\n                 }\n                 TokenTree::Sequence(_, seq) => {\n@@ -162,7 +160,7 @@ pub(super) fn compute_locs(sess: &ParseSess, matcher: &[TokenTree]) -> Vec<Match\n                     let op = seq.kleene.op;\n                     let idx_first = locs.len();\n                     let idx_seq = idx_first - 1;\n-                    inner(sess, &seq.tts, locs, next_metavar, seq_depth + 1);\n+                    inner(&seq.tts, locs, next_metavar, seq_depth + 1);\n \n                     if let Some(separator) = &seq.separator {\n                         locs.push(MatcherLoc::SequenceSep { separator: separator.clone() });\n@@ -197,7 +195,7 @@ pub(super) fn compute_locs(sess: &ParseSess, matcher: &[TokenTree]) -> Vec<Match\n \n     let mut locs = vec![];\n     let mut next_metavar = 0;\n-    inner(sess, matcher, &mut locs, &mut next_metavar, /* seq_depth */ 0);\n+    inner(matcher, &mut locs, &mut next_metavar, /* seq_depth */ 0);\n \n     // A final entry is needed for eof.\n     locs.push(MatcherLoc::Eof);"}, {"sha": "2cfd6968accf7744a3b54d1e1588d206d92757de", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/937b0a04cdc829efa15c8c26878b31ea91c109b9/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/937b0a04cdc829efa15c8c26878b31ea91c109b9/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=937b0a04cdc829efa15c8c26878b31ea91c109b9", "patch": "@@ -435,7 +435,7 @@ pub fn compile_declarative_macro(\n         ),\n     ];\n     // Convert it into `MatcherLoc` form.\n-    let argument_gram = mbe::macro_parser::compute_locs(&sess.parse_sess, &argument_gram);\n+    let argument_gram = mbe::macro_parser::compute_locs(&argument_gram);\n \n     let parser = Parser::new(&sess.parse_sess, body, true, rustc_parse::MACRO_ARGUMENTS);\n     let mut tt_parser =\n@@ -478,7 +478,7 @@ pub fn compile_declarative_macro(\n                     )\n                     .pop()\n                     .unwrap();\n-                    valid &= check_lhs_nt_follows(&sess.parse_sess, features, &def, &tt);\n+                    valid &= check_lhs_nt_follows(&sess.parse_sess, &def, &tt);\n                     return tt;\n                 }\n                 sess.parse_sess.span_diagnostic.span_bug(def.span, \"wrong-structured lhs\")\n@@ -540,7 +540,7 @@ pub fn compile_declarative_macro(\n                 // Ignore the delimiters around the matcher.\n                 match lhs {\n                     mbe::TokenTree::Delimited(_, delimited) => {\n-                        mbe::macro_parser::compute_locs(&sess.parse_sess, &delimited.tts)\n+                        mbe::macro_parser::compute_locs(&delimited.tts)\n                     }\n                     _ => sess.parse_sess.span_diagnostic.span_bug(def.span, \"malformed macro lhs\"),\n                 }\n@@ -563,16 +563,11 @@ pub fn compile_declarative_macro(\n     }))\n }\n \n-fn check_lhs_nt_follows(\n-    sess: &ParseSess,\n-    features: &Features,\n-    def: &ast::Item,\n-    lhs: &mbe::TokenTree,\n-) -> bool {\n+fn check_lhs_nt_follows(sess: &ParseSess, def: &ast::Item, lhs: &mbe::TokenTree) -> bool {\n     // lhs is going to be like TokenTree::Delimited(...), where the\n     // entire lhs is those tts. Or, it can be a \"bare sequence\", not wrapped in parens.\n     if let mbe::TokenTree::Delimited(_, delimited) = lhs {\n-        check_matcher(sess, features, def, &delimited.tts)\n+        check_matcher(sess, def, &delimited.tts)\n     } else {\n         let msg = \"invalid macro matcher; matchers must be contained in balanced delimiters\";\n         sess.span_diagnostic.span_err(lhs.span(), msg);\n@@ -632,16 +627,11 @@ fn check_rhs(sess: &ParseSess, rhs: &mbe::TokenTree) -> bool {\n     false\n }\n \n-fn check_matcher(\n-    sess: &ParseSess,\n-    features: &Features,\n-    def: &ast::Item,\n-    matcher: &[mbe::TokenTree],\n-) -> bool {\n+fn check_matcher(sess: &ParseSess, def: &ast::Item, matcher: &[mbe::TokenTree]) -> bool {\n     let first_sets = FirstSets::new(matcher);\n     let empty_suffix = TokenSet::empty();\n     let err = sess.span_diagnostic.err_count();\n-    check_matcher_core(sess, features, def, &first_sets, matcher, &empty_suffix);\n+    check_matcher_core(sess, def, &first_sets, matcher, &empty_suffix);\n     err == sess.span_diagnostic.err_count()\n }\n \n@@ -955,7 +945,6 @@ impl<'tt> TokenSet<'tt> {\n // see `FirstSets::new`.\n fn check_matcher_core<'tt>(\n     sess: &ParseSess,\n-    features: &Features,\n     def: &ast::Item,\n     first_sets: &FirstSets<'tt>,\n     matcher: &'tt [mbe::TokenTree],\n@@ -1008,7 +997,7 @@ fn check_matcher_core<'tt>(\n                     token::CloseDelim(d.delim),\n                     span.close,\n                 ));\n-                check_matcher_core(sess, features, def, first_sets, &d.tts, &my_suffix);\n+                check_matcher_core(sess, def, first_sets, &d.tts, &my_suffix);\n                 // don't track non NT tokens\n                 last.replace_with_irrelevant();\n \n@@ -1040,8 +1029,7 @@ fn check_matcher_core<'tt>(\n                 // At this point, `suffix_first` is built, and\n                 // `my_suffix` is some TokenSet that we can use\n                 // for checking the interior of `seq_rep`.\n-                let next =\n-                    check_matcher_core(sess, features, def, first_sets, &seq_rep.tts, my_suffix);\n+                let next = check_matcher_core(sess, def, first_sets, &seq_rep.tts, my_suffix);\n                 if next.maybe_empty {\n                     last.add_all(&next);\n                 } else {"}, {"sha": "8c979a124667c015e860de514c343cd14c913e49", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/937b0a04cdc829efa15c8c26878b31ea91c109b9/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/937b0a04cdc829efa15c8c26878b31ea91c109b9/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=937b0a04cdc829efa15c8c26878b31ea91c109b9", "patch": "@@ -158,7 +158,6 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n     #[allow(dead_code)] // FIXME(81658): should be used + lint reinstated after #83171 relands.\n     fn check_for_self_assign(&mut self, assign: &'tcx hir::Expr<'tcx>) {\n         fn check_for_self_assign_helper<'tcx>(\n-            tcx: TyCtxt<'tcx>,\n             typeck_results: &'tcx ty::TypeckResults<'tcx>,\n             lhs: &'tcx hir::Expr<'tcx>,\n             rhs: &'tcx hir::Expr<'tcx>,\n@@ -177,7 +176,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n                 }\n                 (hir::ExprKind::Field(lhs_l, ident_l), hir::ExprKind::Field(lhs_r, ident_r)) => {\n                     if ident_l == ident_r {\n-                        return check_for_self_assign_helper(tcx, typeck_results, lhs_l, lhs_r);\n+                        return check_for_self_assign_helper(typeck_results, lhs_l, lhs_r);\n                     }\n                     return false;\n                 }\n@@ -188,7 +187,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n         }\n \n         if let hir::ExprKind::Assign(lhs, rhs, _) = assign.kind {\n-            if check_for_self_assign_helper(self.tcx, self.typeck_results(), lhs, rhs)\n+            if check_for_self_assign_helper(self.typeck_results(), lhs, rhs)\n                 && !assign.span.from_expansion()\n             {\n                 let is_field_assign = matches!(lhs.kind, hir::ExprKind::Field(..));"}]}