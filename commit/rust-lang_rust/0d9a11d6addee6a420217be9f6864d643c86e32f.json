{"sha": "0d9a11d6addee6a420217be9f6864d643c86e32f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkOWExMWQ2YWRkZWU2YTQyMDIxN2JlOWY2ODY0ZDY0M2M4NmUzMmY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-08T17:02:15Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-08T17:02:23Z"}, "message": "Normalize types bottom up. Fixes #20666.", "tree": {"sha": "f7ad44777ecaa15c94468b613fd23c89aa4448ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7ad44777ecaa15c94468b613fd23c89aa4448ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d9a11d6addee6a420217be9f6864d643c86e32f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d9a11d6addee6a420217be9f6864d643c86e32f", "html_url": "https://github.com/rust-lang/rust/commit/0d9a11d6addee6a420217be9f6864d643c86e32f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d9a11d6addee6a420217be9f6864d643c86e32f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75919c554a3c0ffe206619134d87de410cee93e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/75919c554a3c0ffe206619134d87de410cee93e4", "html_url": "https://github.com/rust-lang/rust/commit/75919c554a3c0ffe206619134d87de410cee93e4"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "95a938328cf452650c64bc305ab57b90989eb285", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d9a11d6addee6a420217be9f6864d643c86e32f/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d9a11d6addee6a420217be9f6864d643c86e32f/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=0d9a11d6addee6a420217be9f6864d643c86e32f", "patch": "@@ -206,6 +206,7 @@ impl<'a,'b,'tcx> TypeFolder<'tcx> for AssociatedTypeNormalizer<'a,'b,'tcx> {\n         // normalize it when we instantiate those bound regions (which\n         // should occur eventually).\n \n+        let ty = ty_fold::super_fold_ty(self, ty);\n         match ty.sty {\n             ty::ty_projection(ref data) if !data.has_escaping_regions() => { // (*)\n \n@@ -229,8 +230,9 @@ impl<'a,'b,'tcx> TypeFolder<'tcx> for AssociatedTypeNormalizer<'a,'b,'tcx> {\n                 self.obligations.extend(obligations.into_iter());\n                 ty\n             }\n+\n             _ => {\n-                ty_fold::super_fold_ty(self, ty)\n+                ty\n             }\n         }\n     }"}, {"sha": "12d3fcaa4fe7303c34d58504742201200e308576", "filename": "src/test/run-pass/associated-types-nested-projections.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/0d9a11d6addee6a420217be9f6864d643c86e32f/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d9a11d6addee6a420217be9f6864d643c86e32f/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs?ref=0d9a11d6addee6a420217be9f6864d643c86e32f", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we can resolve nested projection types. Issue #20666.\n+\n+use std::slice;\n+\n+trait Bound {}\n+\n+impl<'a> Bound for &'a int {}\n+\n+trait IntoIterator {\n+    type Iter: Iterator;\n+\n+    fn into_iter(self) -> Self::Iter;\n+}\n+\n+impl<'a, T> IntoIterator for &'a [T; 3] {\n+    type Iter = slice::Iter<'a, T>;\n+\n+    fn into_iter(self) -> slice::Iter<'a, T> {\n+        self.iter()\n+    }\n+}\n+\n+fn foo<X>(x: X) where\n+    X: IntoIterator,\n+    <<X as IntoIterator>::Iter as Iterator>::Item: Bound,\n+{\n+}\n+\n+fn bar<T, I, X>(x: X) where\n+    T: Bound,\n+    I: Iterator<Item=T>,\n+    X: IntoIterator<Iter=I>,\n+{\n+\n+}\n+\n+fn main() {\n+    foo(&[0i, 1, 2]);\n+    //~^ error: the trait `Bound` is not implemented for the type `<<&[int; 3] as IntoIterator>::Iter as core::iter::Iterator>::Item`\n+    bar(&[0i, 1, 2]);\n+}"}]}