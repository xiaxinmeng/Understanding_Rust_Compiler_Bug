{"sha": "98c550ecc8ea51db79bc4a83f9fb518220add79c", "node_id": "C_kwDOAAsO6NoAKDk4YzU1MGVjYzhlYTUxZGI3OWJjNGE4M2Y5ZmI1MTgyMjBhZGQ3OWM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-03T10:17:50Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-25T08:11:29Z"}, "message": "Reinstate the previous compact form of \"in this field\" errors", "tree": {"sha": "fd6451e7f4629470d3c1ccf89aa261051dfe20dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd6451e7f4629470d3c1ccf89aa261051dfe20dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98c550ecc8ea51db79bc4a83f9fb518220add79c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98c550ecc8ea51db79bc4a83f9fb518220add79c", "html_url": "https://github.com/rust-lang/rust/commit/98c550ecc8ea51db79bc4a83f9fb518220add79c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98c550ecc8ea51db79bc4a83f9fb518220add79c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "545fccaab4215e3abb5d1023119202520e2da795", "url": "https://api.github.com/repos/rust-lang/rust/commits/545fccaab4215e3abb5d1023119202520e2da795", "html_url": "https://github.com/rust-lang/rust/commit/545fccaab4215e3abb5d1023119202520e2da795"}], "stats": {"total": 79, "additions": 33, "deletions": 46}, "files": [{"sha": "2f3a2dcb81962a5ff449fe7e3663813d46c7c10a", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/98c550ecc8ea51db79bc4a83f9fb518220add79c/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c550ecc8ea51db79bc4a83f9fb518220add79c/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=98c550ecc8ea51db79bc4a83f9fb518220add79c", "patch": "@@ -57,6 +57,8 @@ use rustc_trait_selection::traits::{self, misc::can_type_implement_copy};\n \n use crate::nonstandard_style::{method_context, MethodLateContext};\n \n+use std::fmt::Write;\n+\n // hardwired lints from librustc_middle\n pub use rustc_session::lint::builtin::*;\n \n@@ -2496,10 +2498,16 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n             init: InitKind,\n         ) -> Option<InitError> {\n             let field_err = variant.fields.iter().find_map(|field| {\n-                ty_find_init_error(cx, field.ty(cx.tcx, substs), init).map(|err| {\n-                    InitError::from(format!(\"in this {descr}\"))\n-                        .spanned(cx.tcx.def_span(field.did))\n-                        .nested(err)\n+                ty_find_init_error(cx, field.ty(cx.tcx, substs), init).map(|mut err| {\n+                    if err.span.is_none() {\n+                        err.span = Some(cx.tcx.def_span(field.did));\n+                        write!(&mut err.message, \" (in this {descr})\").unwrap();\n+                        err\n+                    } else {\n+                        InitError::from(format!(\"in this {descr}\"))\n+                            .spanned(cx.tcx.def_span(field.did))\n+                            .nested(err)\n+                    }\n                 })\n             });\n "}, {"sha": "e9449605e35c357df5cd93f545c83a40e483e4e0", "filename": "src/test/ui/lint/invalid_value.stderr", "status": "modified", "additions": 21, "deletions": 42, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/98c550ecc8ea51db79bc4a83f9fb518220add79c/src%2Ftest%2Fui%2Flint%2Finvalid_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98c550ecc8ea51db79bc4a83f9fb518220add79c/src%2Ftest%2Fui%2Flint%2Finvalid_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finvalid_value.stderr?ref=98c550ecc8ea51db79bc4a83f9fb518220add79c", "patch": "@@ -35,12 +35,11 @@ LL |         let _val: Wrap<&'static T> = mem::zeroed();\n    |                                      help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `Wrap<&T>` must be non-null\n-note: in this struct field\n+note: references must be non-null (in this struct field)\n   --> $DIR/invalid_value.rs:17:18\n    |\n LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n-   = note: references must be non-null\n \n error: the type `Wrap<&T>` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:58:38\n@@ -52,12 +51,11 @@ LL |         let _val: Wrap<&'static T> = mem::uninitialized();\n    |                                      help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `Wrap<&T>` must be non-null\n-note: in this struct field\n+note: references must be non-null (in this struct field)\n   --> $DIR/invalid_value.rs:17:18\n    |\n LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n-   = note: references must be non-null\n \n error: the type `!` does not permit zero-initialization\n   --> $DIR/invalid_value.rs:65:23\n@@ -165,12 +163,11 @@ LL |         let _val: Ref = mem::zeroed();\n    |                         help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `Ref` must be non-null\n-note: in this struct field\n+note: references must be non-null (in this struct field)\n   --> $DIR/invalid_value.rs:14:12\n    |\n LL | struct Ref(&'static i32);\n    |            ^^^^^^^^^^^^\n-   = note: references must be non-null\n \n error: the type `Ref` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:78:25\n@@ -182,12 +179,11 @@ LL |         let _val: Ref = mem::uninitialized();\n    |                         help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `Ref` must be non-null\n-note: in this struct field\n+note: references must be non-null (in this struct field)\n   --> $DIR/invalid_value.rs:14:12\n    |\n LL | struct Ref(&'static i32);\n    |            ^^^^^^^^^^^^\n-   = note: references must be non-null\n \n error: the type `fn()` does not permit zero-initialization\n   --> $DIR/invalid_value.rs:80:26\n@@ -221,12 +217,11 @@ LL |         let _val: Wrap<fn()> = mem::zeroed();\n    |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `Wrap<fn()>` must be non-null\n-note: in this struct field\n+note: function pointers must be non-null (in this struct field)\n   --> $DIR/invalid_value.rs:17:18\n    |\n LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n-   = note: function pointers must be non-null\n \n error: the type `Wrap<fn()>` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:84:32\n@@ -238,12 +233,11 @@ LL |         let _val: Wrap<fn()> = mem::uninitialized();\n    |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `Wrap<fn()>` must be non-null\n-note: in this struct field\n+note: function pointers must be non-null (in this struct field)\n   --> $DIR/invalid_value.rs:17:18\n    |\n LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n-   = note: function pointers must be non-null\n \n error: the type `WrapEnum<fn()>` does not permit zero-initialization\n   --> $DIR/invalid_value.rs:86:36\n@@ -255,12 +249,11 @@ LL |         let _val: WrapEnum<fn()> = mem::zeroed();\n    |                                    help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `WrapEnum<fn()>` must be non-null\n-note: in this field of the only potentially inhabited enum variant\n+note: function pointers must be non-null (in this field of the only potentially inhabited enum variant)\n   --> $DIR/invalid_value.rs:18:28\n    |\n LL | enum WrapEnum<T> { Wrapped(T) }\n    |                            ^\n-   = note: function pointers must be non-null\n \n error: the type `WrapEnum<fn()>` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:87:36\n@@ -272,12 +265,11 @@ LL |         let _val: WrapEnum<fn()> = mem::uninitialized();\n    |                                    help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `WrapEnum<fn()>` must be non-null\n-note: in this field of the only potentially inhabited enum variant\n+note: function pointers must be non-null (in this field of the only potentially inhabited enum variant)\n   --> $DIR/invalid_value.rs:18:28\n    |\n LL | enum WrapEnum<T> { Wrapped(T) }\n    |                            ^\n-   = note: function pointers must be non-null\n \n error: the type `Wrap<(RefPair, i32)>` does not permit zero-initialization\n   --> $DIR/invalid_value.rs:89:42\n@@ -288,18 +280,16 @@ LL |         let _val: Wrap<(RefPair, i32)> = mem::zeroed();\n    |                                          this code causes undefined behavior when executed\n    |                                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-note: in this struct field\n+note: `RefPair` must be non-null (in this struct field)\n   --> $DIR/invalid_value.rs:17:18\n    |\n LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n-   = note: `RefPair` must be non-null\n-note: in this struct field\n+note: references must be non-null (in this struct field)\n   --> $DIR/invalid_value.rs:15:16\n    |\n LL | struct RefPair((&'static i32, i32));\n    |                ^^^^^^^^^^^^^^^^^^^\n-   = note: references must be non-null\n \n error: the type `Wrap<(RefPair, i32)>` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:90:42\n@@ -310,18 +300,16 @@ LL |         let _val: Wrap<(RefPair, i32)> = mem::uninitialized();\n    |                                          this code causes undefined behavior when executed\n    |                                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-note: in this struct field\n+note: `RefPair` must be non-null (in this struct field)\n   --> $DIR/invalid_value.rs:17:18\n    |\n LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n-   = note: `RefPair` must be non-null\n-note: in this struct field\n+note: references must be non-null (in this struct field)\n   --> $DIR/invalid_value.rs:15:16\n    |\n LL | struct RefPair((&'static i32, i32));\n    |                ^^^^^^^^^^^^^^^^^^^\n-   = note: references must be non-null\n \n error: the type `NonNull<i32>` does not permit zero-initialization\n   --> $DIR/invalid_value.rs:92:34\n@@ -344,12 +332,11 @@ LL |         let _val: NonNull<i32> = mem::uninitialized();\n    |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `std::ptr::NonNull<i32>` must be non-null\n-note: in this struct field\n+note: raw pointers must not be uninitialized (in this struct field)\n   --> $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n    |\n LL |     pointer: *const T,\n    |     ^^^^^^^^^^^^^^^^^\n-   = note: raw pointers must not be uninitialized\n \n error: the type `(NonZeroU32, i32)` does not permit zero-initialization\n   --> $DIR/invalid_value.rs:95:39\n@@ -372,7 +359,7 @@ LL |         let _val: (NonZeroU32, i32) = mem::uninitialized();\n    |                                       help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `std::num::NonZeroU32` must be non-null\n-note: in this struct field\n+note: integers must not be uninitialized (in this struct field)\n   --> $SRC_DIR/core/src/num/nonzero.rs:LL:COL\n    |\n LL | / nonzero_integers! {\n@@ -383,7 +370,6 @@ LL | |     #[stable(feature = \"nonzero\", since = \"1.28.0\")] #[rustc_const_stable\n LL | |     #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] #[rustc_const_stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroIs...\n LL | | }\n    | |_^\n-   = note: integers must not be uninitialized\n    = note: this error originates in the macro `nonzero_integers` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: the type `*const dyn Send` does not permit zero-initialization\n@@ -470,12 +456,11 @@ LL |         let _val: OneFruitNonZero = mem::zeroed();\n    |                                     help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `OneFruitNonZero` must be non-null\n-note: in this field of the only potentially inhabited enum variant\n+note: `std::num::NonZeroU32` must be non-null (in this field of the only potentially inhabited enum variant)\n   --> $DIR/invalid_value.rs:39:12\n    |\n LL |     Banana(NonZeroU32),\n    |            ^^^^^^^^^^\n-   = note: `std::num::NonZeroU32` must be non-null\n \n error: the type `OneFruitNonZero` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:108:37\n@@ -487,13 +472,12 @@ LL |         let _val: OneFruitNonZero = mem::uninitialized();\n    |                                     help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `OneFruitNonZero` must be non-null\n-note: in this field of the only potentially inhabited enum variant\n+note: `std::num::NonZeroU32` must be non-null (in this field of the only potentially inhabited enum variant)\n   --> $DIR/invalid_value.rs:39:12\n    |\n LL |     Banana(NonZeroU32),\n    |            ^^^^^^^^^^\n-   = note: `std::num::NonZeroU32` must be non-null\n-note: in this struct field\n+note: integers must not be uninitialized (in this struct field)\n   --> $SRC_DIR/core/src/num/nonzero.rs:LL:COL\n    |\n LL | / nonzero_integers! {\n@@ -504,7 +488,6 @@ LL | |     #[stable(feature = \"nonzero\", since = \"1.28.0\")] #[rustc_const_stable\n LL | |     #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] #[rustc_const_stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroIs...\n LL | | }\n    | |_^\n-   = note: integers must not be uninitialized\n    = note: this error originates in the macro `nonzero_integers` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: the type `bool` does not permit being left uninitialized\n@@ -528,12 +511,11 @@ LL |         let _val: Wrap<char> = mem::uninitialized();\n    |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `Wrap<char>` must be initialized inside its custom valid range\n-note: in this struct field\n+note: characters must be a valid Unicode codepoint (in this struct field)\n   --> $DIR/invalid_value.rs:17:18\n    |\n LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n-   = note: characters must be a valid Unicode codepoint\n \n error: the type `NonBig` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:118:28\n@@ -545,12 +527,11 @@ LL |         let _val: NonBig = mem::uninitialized();\n    |                            help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `NonBig` must be initialized inside its custom valid range\n-note: in this struct field\n+note: integers must not be uninitialized (in this struct field)\n   --> $DIR/invalid_value.rs:23:26\n    |\n LL | pub(crate) struct NonBig(u64);\n    |                          ^^^\n-   = note: integers must not be uninitialized\n \n error: the type `Fruit` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:121:27\n@@ -632,12 +613,11 @@ LL |         let _val: WrapAroundRange = mem::uninitialized();\n    |                                     help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `WrapAroundRange` must be initialized inside its custom valid range\n-note: in this struct field\n+note: integers must not be uninitialized (in this struct field)\n   --> $DIR/invalid_value.rs:49:35\n    |\n LL | pub(crate) struct WrapAroundRange(u8);\n    |                                   ^^\n-   = note: integers must not be uninitialized\n \n error: the type `Result<i32, i32>` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:144:38\n@@ -708,12 +688,11 @@ LL |         let _val: NonNull<i32> = MaybeUninit::uninit().assume_init();\n    |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `std::ptr::NonNull<i32>` must be non-null\n-note: in this struct field\n+note: raw pointers must not be uninitialized (in this struct field)\n   --> $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n    |\n LL |     pointer: *const T,\n    |     ^^^^^^^^^^^^^^^^^\n-   = note: raw pointers must not be uninitialized\n \n error: the type `bool` does not permit being left uninitialized\n   --> $DIR/invalid_value.rs:159:26"}]}