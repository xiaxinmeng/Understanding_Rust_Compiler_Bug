{"sha": "a0c978cd0ce95446f6d3e6a13047474670d9ee55", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwYzk3OGNkMGNlOTU0NDZmNmQzZTZhMTMwNDc0NzQ2NzBkOWVlNTU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-10T15:32:02Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-10T15:32:02Z"}, "message": "fix code duplication", "tree": {"sha": "9a1d8f53d0befa10e5cd0adba180ac2ebd534800", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a1d8f53d0befa10e5cd0adba180ac2ebd534800"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0c978cd0ce95446f6d3e6a13047474670d9ee55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0c978cd0ce95446f6d3e6a13047474670d9ee55", "html_url": "https://github.com/rust-lang/rust/commit/a0c978cd0ce95446f6d3e6a13047474670d9ee55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0c978cd0ce95446f6d3e6a13047474670d9ee55/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ca76c203921215cc9af68042ed8fbf4f50b5969", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ca76c203921215cc9af68042ed8fbf4f50b5969", "html_url": "https://github.com/rust-lang/rust/commit/3ca76c203921215cc9af68042ed8fbf4f50b5969"}], "stats": {"total": 123, "additions": 55, "deletions": 68}, "files": [{"sha": "d64c34d54acdd643fdd8e79093507df28f773289", "filename": "crates/ra_ide_api_light/src/assists/replace_if_let_with_match.rs", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a0c978cd0ce95446f6d3e6a13047474670d9ee55/crates%2Fra_ide_api_light%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c978cd0ce95446f6d3e6a13047474670d9ee55/crates%2Fra_ide_api_light%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api_light%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs?ref=a0c978cd0ce95446f6d3e6a13047474670d9ee55", "patch": "@@ -1,9 +1,9 @@\n-use ra_syntax::{\n-    AstNode, SyntaxKind::{L_CURLY, R_CURLY, WHITESPACE},\n-    ast,\n-};\n+use ra_syntax::{AstNode, ast};\n \n-use crate::assists::{AssistCtx, Assist};\n+use crate::{\n+    assists::{AssistCtx, Assist},\n+    formatting::extract_trivial_expression,\n+};\n \n pub fn replace_if_let_with_match(ctx: AssistCtx) -> Option<Assist> {\n     let if_expr: &ast::IfExpr = ctx.node_at_offset()?;\n@@ -39,26 +39,12 @@ fn build_match_expr(\n }\n \n fn format_arm(block: &ast::Block) -> String {\n-    match extract_expression(block) {\n+    match extract_trivial_expression(block) {\n         None => block.syntax().text().to_string(),\n         Some(e) => format!(\"{},\", e.syntax().text()),\n     }\n }\n \n-fn extract_expression(block: &ast::Block) -> Option<&ast::Expr> {\n-    let expr = block.expr()?;\n-    let non_trivial_children = block.syntax().children().filter(|it| {\n-        !(it == &expr.syntax()\n-            || it.kind() == L_CURLY\n-            || it.kind() == R_CURLY\n-            || it.kind() == WHITESPACE)\n-    });\n-    if non_trivial_children.count() > 0 {\n-        return None;\n-    }\n-    Some(expr)\n-}\n-\n #[cfg(test)]\n mod tests {\n     use super::*;"}, {"sha": "1f376920993bad0ca7a124302cb463926c8e0345", "filename": "crates/ra_ide_api_light/src/formatting.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a0c978cd0ce95446f6d3e6a13047474670d9ee55/crates%2Fra_ide_api_light%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c978cd0ce95446f6d3e6a13047474670d9ee55/crates%2Fra_ide_api_light%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api_light%2Fsrc%2Fformatting.rs?ref=a0c978cd0ce95446f6d3e6a13047474670d9ee55", "patch": "@@ -0,0 +1,42 @@\n+use ra_syntax::{\n+    ast, AstNode,\n+    SyntaxNode, SyntaxKind::*,\n+};\n+\n+pub(crate) fn extract_trivial_expression(block: &ast::Block) -> Option<&ast::Expr> {\n+    let expr = block.expr()?;\n+    if expr.syntax().text().contains('\\n') {\n+        return None;\n+    }\n+    let non_trivial_children = block.syntax().children().filter(|it| match it.kind() {\n+        WHITESPACE | L_CURLY | R_CURLY => false,\n+        _ => it != &expr.syntax(),\n+    });\n+    if non_trivial_children.count() > 0 {\n+        return None;\n+    }\n+    Some(expr)\n+}\n+\n+pub(crate) fn compute_ws(left: &SyntaxNode, right: &SyntaxNode) -> &'static str {\n+    match left.kind() {\n+        L_PAREN | L_BRACK => return \"\",\n+        L_CURLY => {\n+            if let USE_TREE = right.kind() {\n+                return \"\";\n+            }\n+        }\n+        _ => (),\n+    }\n+    match right.kind() {\n+        R_PAREN | R_BRACK => return \"\",\n+        R_CURLY => {\n+            if let USE_TREE = left.kind() {\n+                return \"\";\n+            }\n+        }\n+        DOT => return \"\",\n+        _ => (),\n+    }\n+    \" \"\n+}"}, {"sha": "ab7c5b4b5eb432a520d144d36ea361347c1e41ba", "filename": "crates/ra_ide_api_light/src/join_lines.rs", "status": "modified", "additions": 6, "deletions": 48, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a0c978cd0ce95446f6d3e6a13047474670d9ee55/crates%2Fra_ide_api_light%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c978cd0ce95446f6d3e6a13047474670d9ee55/crates%2Fra_ide_api_light%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api_light%2Fsrc%2Fjoin_lines.rs?ref=a0c978cd0ce95446f6d3e6a13047474670d9ee55", "patch": "@@ -1,14 +1,15 @@\n-use std::mem;\n-\n use itertools::Itertools;\n use ra_syntax::{\n     SourceFile, TextRange, TextUnit, AstNode, SyntaxNode,\n-    SyntaxKind::{self, WHITESPACE, COMMA, L_CURLY, R_CURLY, L_PAREN, R_PAREN, L_BRACK, R_BRACK, USE_TREE, DOT},\n+    SyntaxKind::{self, WHITESPACE, COMMA, R_CURLY, R_PAREN, R_BRACK},\n     algo::find_covering_node,\n     ast,\n };\n \n-use crate::{LocalEdit, TextEditBuilder};\n+use crate::{\n+    LocalEdit, TextEditBuilder,\n+    formatting::{compute_ws, extract_trivial_expression},\n+};\n \n pub fn join_lines(file: &SourceFile, range: TextRange) -> LocalEdit {\n     let range = if range.is_empty() {\n@@ -132,34 +133,14 @@ fn remove_newline(\n fn join_single_expr_block(edit: &mut TextEditBuilder, node: &SyntaxNode) -> Option<()> {\n     let block = ast::Block::cast(node.parent()?)?;\n     let block_expr = ast::BlockExpr::cast(block.syntax().parent()?)?;\n-    let expr = single_expr(block)?;\n+    let expr = extract_trivial_expression(block)?;\n     edit.replace(\n         block_expr.syntax().range(),\n         expr.syntax().text().to_string(),\n     );\n     Some(())\n }\n \n-fn single_expr(block: &ast::Block) -> Option<&ast::Expr> {\n-    let mut res = None;\n-    for child in block.syntax().children() {\n-        if let Some(expr) = ast::Expr::cast(child) {\n-            if expr.syntax().text().contains('\\n') {\n-                return None;\n-            }\n-            if mem::replace(&mut res, Some(expr)).is_some() {\n-                return None;\n-            }\n-        } else {\n-            match child.kind() {\n-                WHITESPACE | L_CURLY | R_CURLY => (),\n-                _ => return None,\n-            }\n-        }\n-    }\n-    res\n-}\n-\n fn join_single_use_tree(edit: &mut TextEditBuilder, node: &SyntaxNode) -> Option<()> {\n     let use_tree_list = ast::UseTreeList::cast(node.parent()?)?;\n     let (tree,) = use_tree_list.use_trees().collect_tuple()?;\n@@ -177,29 +158,6 @@ fn is_trailing_comma(left: SyntaxKind, right: SyntaxKind) -> bool {\n     }\n }\n \n-fn compute_ws(left: &SyntaxNode, right: &SyntaxNode) -> &'static str {\n-    match left.kind() {\n-        L_PAREN | L_BRACK => return \"\",\n-        L_CURLY => {\n-            if let USE_TREE = right.kind() {\n-                return \"\";\n-            }\n-        }\n-        _ => (),\n-    }\n-    match right.kind() {\n-        R_PAREN | R_BRACK => return \"\",\n-        R_CURLY => {\n-            if let USE_TREE = left.kind() {\n-                return \"\";\n-            }\n-        }\n-        DOT => return \"\",\n-        _ => (),\n-    }\n-    \" \"\n-}\n-\n #[cfg(test)]\n mod tests {\n     use crate::test_utils::{assert_eq_text, check_action, extract_range};"}, {"sha": "bc9bee752e066f567564bbba1a4743b9fe7f3dd7", "filename": "crates/ra_ide_api_light/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0c978cd0ce95446f6d3e6a13047474670d9ee55/crates%2Fra_ide_api_light%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0c978cd0ce95446f6d3e6a13047474670d9ee55/crates%2Fra_ide_api_light%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api_light%2Fsrc%2Flib.rs?ref=a0c978cd0ce95446f6d3e6a13047474670d9ee55", "patch": "@@ -14,6 +14,7 @@ mod test_utils;\n mod join_lines;\n mod typing;\n mod diagnostics;\n+pub(crate) mod formatting;\n \n pub use self::{\n     assists::LocalEdit,"}]}