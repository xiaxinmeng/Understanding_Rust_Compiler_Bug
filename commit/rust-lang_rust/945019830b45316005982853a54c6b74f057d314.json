{"sha": "945019830b45316005982853a54c6b74f057d314", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NTAxOTgzMGI0NTMxNjAwNTk4Mjg1M2E1NGM2Yjc0ZjA1N2QzMTQ=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-21T03:43:18Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-21T20:16:17Z"}, "message": "migrate from `exchange_malloc` to `allocate`\n\nThis is now only used internally by the compiler.", "tree": {"sha": "da70d6f27c0576f873f8c137946ac7663c98ffdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da70d6f27c0576f873f8c137946ac7663c98ffdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/945019830b45316005982853a54c6b74f057d314", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/945019830b45316005982853a54c6b74f057d314", "html_url": "https://github.com/rust-lang/rust/commit/945019830b45316005982853a54c6b74f057d314", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/945019830b45316005982853a54c6b74f057d314/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83eefa88c15727675cededb0d5804eb2fff39801", "url": "https://api.github.com/repos/rust-lang/rust/commits/83eefa88c15727675cededb0d5804eb2fff39801", "html_url": "https://github.com/rust-lang/rust/commit/83eefa88c15727675cededb0d5804eb2fff39801"}], "stats": {"total": 35, "additions": 14, "deletions": 21}, "files": [{"sha": "40f60c365d2a8aed21d10fe9bc1e5cee6eee06c4", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/945019830b45316005982853a54c6b74f057d314/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945019830b45316005982853a54c6b74f057d314/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=945019830b45316005982853a54c6b74f057d314", "patch": "@@ -119,14 +119,8 @@ pub fn stats_print() {\n /// The allocator for unique pointers.\n #[cfg(not(test))]\n #[lang=\"exchange_malloc\"]\n-#[inline(always)]\n-pub unsafe fn exchange_malloc_(size: uint, align: uint) -> *mut u8 {\n-    exchange_malloc(size, align)\n-}\n-\n-/// The allocator for unique pointers.\n #[inline]\n-pub unsafe fn exchange_malloc(size: uint, align: uint) -> *mut u8 {\n+unsafe fn exchange_malloc(size: uint, align: uint) -> *mut u8 {\n     // The compiler never calls `exchange_free` on ~ZeroSizeType, so zero-size\n     // allocations can point to this `static`. It would be incorrect to use a null\n     // pointer, due to enums assuming types like unique pointers are never null.\n@@ -167,16 +161,16 @@ unsafe fn closure_exchange_malloc(drop_glue: fn(*mut u8), size: uint, align: uin\n #[doc(hidden)]\n #[deprecated]\n #[cfg(not(test))]\n-pub unsafe extern \"C\" fn rust_malloc(size: uint, align: uint) -> *mut u8 {\n-    exchange_malloc(size, align)\n+pub unsafe extern \"C\" fn rust_allocate(size: uint, align: uint) -> *mut u8 {\n+    allocate(size, align)\n }\n \n // hack for libcore\n #[no_mangle]\n #[doc(hidden)]\n #[deprecated]\n #[cfg(not(test))]\n-pub unsafe extern \"C\" fn rust_free(ptr: *mut u8, size: uint, align: uint) {\n+pub unsafe extern \"C\" fn rust_deallocate(ptr: *mut u8, size: uint, align: uint) {\n     deallocate(ptr, size, align)\n }\n "}, {"sha": "2f654bdd3004a134a2444ce5a87f74a3766597ca", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/945019830b45316005982853a54c6b74f057d314/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945019830b45316005982853a54c6b74f057d314/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=945019830b45316005982853a54c6b74f057d314", "patch": "@@ -38,7 +38,7 @@ use std::mem;\n use std::num;\n use std::ptr::read;\n use std::rc::Rc;\n-use std::rt::heap::exchange_malloc;\n+use std::rt::heap::allocate;\n \n // The way arena uses arrays is really deeply awful. The arrays are\n // allocated, and have capacities reserved, but the fill for the array\n@@ -358,8 +358,7 @@ impl<T> TypedArenaChunk<T> {\n         size = size.checked_add(&elems_size).unwrap();\n \n         let mut chunk = unsafe {\n-            let chunk = exchange_malloc(size,\n-                                        mem::min_align_of::<TypedArenaChunk<T>>());\n+            let chunk = allocate(size, mem::min_align_of::<TypedArenaChunk<T>>());\n             let mut chunk: Box<TypedArenaChunk<T>> = mem::transmute(chunk);\n             mem::overwrite(&mut chunk.next, next);\n             chunk"}, {"sha": "2046017869dea9ef44fb2321a5e91ff109a2bce2", "filename": "src/libcore/should_not_exist.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/945019830b45316005982853a54c6b74f057d314/src%2Flibcore%2Fshould_not_exist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945019830b45316005982853a54c6b74f057d314/src%2Flibcore%2Fshould_not_exist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fshould_not_exist.rs?ref=945019830b45316005982853a54c6b74f057d314", "patch": "@@ -44,14 +44,14 @@ use str::StrSlice;\n \n #[allow(ctypes)]\n extern {\n-    fn rust_malloc(size: uint, align: uint) -> *u8;\n-    fn rust_free(ptr: *u8, size: uint, align: uint);\n+    fn rust_allocate(size: uint, align: uint) -> *u8;\n+    fn rust_deallocate(ptr: *u8, size: uint, align: uint);\n }\n \n unsafe fn alloc(cap: uint) -> *mut Vec<()> {\n     let cap = cap.checked_add(&mem::size_of::<Vec<()>>()).unwrap();\n     // this should use the real alignment, but the new representation will take care of that\n-    let ret = rust_malloc(cap, 8) as *mut Vec<()>;\n+    let ret = rust_allocate(cap, 8) as *mut Vec<()>;\n     if ret.is_null() {\n         intrinsics::abort();\n     }\n@@ -119,7 +119,7 @@ impl FromIterator<char> for ~str {\n                                                     &(*ptr).data,\n                                                     len);\n                     // FIXME: #13994: port to the sized deallocation API when available\n-                    rust_free(ptr as *u8, 0, 8);\n+                    rust_deallocate(ptr as *u8, 0, 8);\n                     mem::forget(ret);\n                     ret = mem::transmute(ptr2);\n                     ptr = ptr2;\n@@ -191,7 +191,7 @@ impl<A: Clone> Clone for ~[A] {\n                     for j in range(0, *i as int) {\n                         ptr::read(&*p.offset(j));\n                     }\n-                    rust_free(ret as *u8, 0, 8);\n+                    rust_deallocate(ret as *u8, 0, 8);\n                 });\n             mem::transmute(ret)\n         }"}, {"sha": "0838211b9a59f610764c09e370bc323b077f9798", "filename": "src/libstd/slice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/945019830b45316005982853a54c6b74f057d314/src%2Flibstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945019830b45316005982853a54c6b74f057d314/src%2Flibstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fslice.rs?ref=945019830b45316005982853a54c6b74f057d314", "patch": "@@ -109,7 +109,7 @@ use ops::Drop;\n use option::{None, Option, Some};\n use ptr::RawPtr;\n use ptr;\n-use rt::heap::{exchange_malloc, deallocate};\n+use rt::heap::{allocate, deallocate};\n use unstable::finally::try_finally;\n use vec::Vec;\n \n@@ -304,7 +304,7 @@ impl<'a, T: Clone> CloneableVector<T> for &'a [T] {\n \n         unsafe {\n             // this should pass the real required alignment\n-            let ret = exchange_malloc(size, 8) as *mut RawVec<()>;\n+            let ret = allocate(size, 8) as *mut RawVec<()>;\n \n             let a_size = mem::size_of::<T>();\n             let a_size = if a_size == 0 {1} else {a_size};\n@@ -968,7 +968,7 @@ mod tests {\n         assert_eq!(v_b[0], 2);\n         assert_eq!(v_b[1], 3);\n \n-        // Test on exchange heap.\n+        // Test `Box<[T]>`\n         let vec_unique = box [1, 2, 3, 4, 5, 6];\n         let v_d = vec_unique.slice(1u, 6u).to_owned();\n         assert_eq!(v_d.len(), 5u);"}]}