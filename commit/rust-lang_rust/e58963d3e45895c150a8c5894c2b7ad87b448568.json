{"sha": "e58963d3e45895c150a8c5894c2b7ad87b448568", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ODk2M2QzZTQ1ODk1YzE1MGE4YzU4OTRjMmI3YWQ4N2I0NDg1Njg=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-22T01:55:42Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-28T05:28:27Z"}, "message": "groundwork: create the `Resolver` earlier in phase 2", "tree": {"sha": "45722645fb4e198c4cb128b1dc2fb428b92f1ffb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45722645fb4e198c4cb128b1dc2fb428b92f1ffb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e58963d3e45895c150a8c5894c2b7ad87b448568", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e58963d3e45895c150a8c5894c2b7ad87b448568", "html_url": "https://github.com/rust-lang/rust/commit/e58963d3e45895c150a8c5894c2b7ad87b448568", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e58963d3e45895c150a8c5894c2b7ad87b448568/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec0c150152c85435a23160b0db3472580a76fb74", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec0c150152c85435a23160b0db3472580a76fb74", "html_url": "https://github.com/rust-lang/rust/commit/ec0c150152c85435a23160b0db3472580a76fb74"}], "stats": {"total": 53, "additions": 24, "deletions": 29}, "files": [{"sha": "2b89695ab41cad2fdbb39f846547a314f1ece101", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e58963d3e45895c150a8c5894c2b7ad87b448568/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58963d3e45895c150a8c5894c2b7ad87b448568/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=e58963d3e45895c150a8c5894c2b7ad87b448568", "patch": "@@ -25,15 +25,15 @@ pub struct DefCollector<'ast> {\n     // If we are walking HIR (c.f., AST), we need to keep a reference to the\n     // crate.\n     hir_crate: Option<&'ast hir::Crate>,\n-    pub definitions: Definitions,\n+    definitions: &'ast mut Definitions,\n     parent_def: Option<DefIndex>,\n }\n \n impl<'ast> DefCollector<'ast> {\n-    pub fn root() -> DefCollector<'ast> {\n+    pub fn root(definitions: &'ast mut Definitions) -> DefCollector<'ast> {\n         let mut collector = DefCollector {\n             hir_crate: None,\n-            definitions: Definitions::new(),\n+            definitions: definitions,\n             parent_def: None,\n         };\n         let root = collector.create_def_with_parent(None, CRATE_NODE_ID, DefPathData::CrateRoot);\n@@ -48,7 +48,7 @@ impl<'ast> DefCollector<'ast> {\n     pub fn extend(parent_node: NodeId,\n                   parent_def_path: DefPath,\n                   parent_def_id: DefId,\n-                  definitions: Definitions)\n+                  definitions: &'ast mut Definitions)\n                   -> DefCollector<'ast> {\n         let mut collector = DefCollector {\n             hir_crate: None,"}, {"sha": "3317585f820aa60b30647c97d7b33c1561a7b784", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e58963d3e45895c150a8c5894c2b7ad87b448568/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58963d3e45895c150a8c5894c2b7ad87b448568/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=e58963d3e45895c150a8c5894c2b7ad87b448568", "patch": "@@ -10,8 +10,9 @@\n \n use middle::cstore::LOCAL_CRATE;\n use hir::def_id::{DefId, DefIndex};\n+use hir::map::def_collector::DefCollector;\n use rustc_data_structures::fnv::FnvHashMap;\n-use syntax::ast;\n+use syntax::{ast, visit};\n use syntax::parse::token::InternedString;\n use util::nodemap::NodeMap;\n \n@@ -189,6 +190,11 @@ impl Definitions {\n         }\n     }\n \n+    pub fn collect(&mut self, krate: &ast::Crate) {\n+        let mut def_collector = DefCollector::root(self);\n+        visit::walk_crate(&mut def_collector, krate);\n+    }\n+\n     /// Get the number of definitions.\n     pub fn len(&self) -> usize {\n         self.data.len()"}, {"sha": "960e32ae99faf0810cdde1ff5fe9adf479c7f7dc", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e58963d3e45895c150a8c5894c2b7ad87b448568/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58963d3e45895c150a8c5894c2b7ad87b448568/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=e58963d3e45895c150a8c5894c2b7ad87b448568", "patch": "@@ -24,7 +24,6 @@ use hir::def_id::{CRATE_DEF_INDEX, DefId, DefIndex};\n use syntax::abi::Abi;\n use syntax::ast::{self, Name, NodeId, DUMMY_NODE_ID, };\n use syntax::codemap::Spanned;\n-use syntax::visit;\n use syntax_pos::Span;\n \n use hir::*;\n@@ -780,12 +779,6 @@ impl<F: FoldOps> Folder for IdAndSpanUpdater<F> {\n     }\n }\n \n-pub fn collect_definitions<'ast>(krate: &'ast ast::Crate) -> Definitions {\n-    let mut def_collector = DefCollector::root();\n-    visit::walk_crate(&mut def_collector, krate);\n-    def_collector.definitions\n-}\n-\n pub fn map_crate<'ast>(forest: &'ast mut Forest,\n                        definitions: Definitions)\n                        -> Map<'ast> {\n@@ -842,13 +835,12 @@ pub fn map_decoded_item<'ast, F: FoldOps>(map: &Map<'ast>,\n     let ii = map.forest.inlined_items.alloc(ii);\n     let ii_parent_id = fld.new_id(DUMMY_NODE_ID);\n \n-    let defs = mem::replace(&mut *map.definitions.borrow_mut(), Definitions::new());\n+    let defs = &mut *map.definitions.borrow_mut();\n     let mut def_collector = DefCollector::extend(ii_parent_id,\n                                                  parent_def_path.clone(),\n                                                  parent_def_id,\n                                                  defs);\n     def_collector.walk_item(ii, map.krate());\n-    *map.definitions.borrow_mut() = def_collector.definitions;\n \n     let mut collector = NodeCollector::extend(map.krate(),\n                                               ii,"}, {"sha": "46009e581309444f7496ba886aff3f180899840f", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e58963d3e45895c150a8c5894c2b7ad87b448568/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58963d3e45895c150a8c5894c2b7ad87b448568/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=e58963d3e45895c150a8c5894c2b7ad87b448568", "patch": "@@ -726,13 +726,16 @@ pub fn phase_2_configure_and_expand<'a>(sess: &Session,\n \n     krate = assign_node_ids(sess, krate);\n \n+    let resolver_arenas = Resolver::arenas();\n+    let mut resolver = Resolver::new(sess, make_glob_map, &resolver_arenas);\n+\n     // Collect defintions for def ids.\n-    let defs =\n-        time(sess.time_passes(), \"collecting defs\", || hir_map::collect_definitions(&krate));\n+    time(sess.time_passes(), \"collecting defs\", || resolver.definitions.collect(&krate));\n \n-    time(sess.time_passes(),\n-         \"external crate/lib resolution\",\n-         || read_local_crates(sess, &cstore, &defs, &krate, crate_name, &sess.dep_graph));\n+    time(sess.time_passes(), \"external crate/lib resolution\", || {\n+        let defs = &resolver.definitions;\n+        read_local_crates(sess, &cstore, defs, &krate, crate_name, &sess.dep_graph)\n+    });\n \n     time(sess.time_passes(),\n          \"early lint checks\",\n@@ -742,9 +745,6 @@ pub fn phase_2_configure_and_expand<'a>(sess: &Session,\n          \"AST validation\",\n          || ast_validation::check_crate(sess, &krate));\n \n-    let resolver_arenas = Resolver::arenas();\n-    let mut resolver = Resolver::new(sess, defs, make_glob_map, &resolver_arenas);\n-\n     time(sess.time_passes(), \"name resolution\", || {\n         resolver.resolve_crate(&krate);\n     });"}, {"sha": "9c9e3ff037bc40061925739e23bf4af8abda283e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e58963d3e45895c150a8c5894c2b7ad87b448568/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58963d3e45895c150a8c5894c2b7ad87b448568/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e58963d3e45895c150a8c5894c2b7ad87b448568", "patch": "@@ -47,7 +47,7 @@ use rustc::hir::{self, PrimTy, TyBool, TyChar, TyFloat, TyInt, TyUint, TyStr};\n use rustc::session::Session;\n use rustc::lint;\n use rustc::hir::def::*;\n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::ty;\n use rustc::ty::subst::{ParamSpace, FnSpace, TypeSpace};\n use rustc::hir::{Freevar, FreevarMap, TraitCandidate, TraitMap, GlobMap};\n@@ -1100,12 +1100,9 @@ impl Named for hir::PathSegment {\n }\n \n impl<'a> Resolver<'a> {\n-    pub fn new(session: &'a Session,\n-               definitions: Definitions,\n-               make_glob_map: MakeGlobMap,\n-               arenas: &'a ResolverArenas<'a>)\n+    pub fn new(session: &'a Session, make_glob_map: MakeGlobMap, arenas: &'a ResolverArenas<'a>)\n                -> Resolver<'a> {\n-        let root_def_id = definitions.local_def_id(CRATE_NODE_ID);\n+        let root_def_id = DefId::local(CRATE_DEF_INDEX);\n         let graph_root =\n             ModuleS::new(NoParentLink, Some(Def::Mod(root_def_id)), false, arenas);\n         let graph_root = arenas.alloc_module(graph_root);\n@@ -1115,7 +1112,7 @@ impl<'a> Resolver<'a> {\n         Resolver {\n             session: session,\n \n-            definitions: definitions,\n+            definitions: Definitions::new(),\n \n             // The outermost module has def ID 0; this is not reflected in the\n             // AST."}]}