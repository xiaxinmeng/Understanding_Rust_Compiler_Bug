{"sha": "9b606a3203da5141f4922ef405ef0d1b9bf0b8bf", "node_id": "C_kwDOAAsO6NoAKDliNjA2YTMyMDNkYTUxNDFmNDkyMmVmNDA1ZWYwZDFiOWJmMGI4YmY", "commit": {"author": {"name": "Joshua Nelson", "email": "github@jyn.dev", "date": "2023-03-05T12:45:07Z"}, "committer": {"name": "Joshua Nelson", "email": "github@jyn.dev", "date": "2023-03-18T05:38:17Z"}, "message": "Speed up file walking in tidy\n\n- Skip files in `skip` wherever possible to avoid reading their contents\n- Don't look for `tidy-alphabetic-start` in tests. It's never currently used and slows the check down a lot.\n- Add new `filter_not_rust` helper function", "tree": {"sha": "ba4fe52484af4be79256bbe4dac6789d343c73f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba4fe52484af4be79256bbe4dac6789d343c73f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b606a3203da5141f4922ef405ef0d1b9bf0b8bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b606a3203da5141f4922ef405ef0d1b9bf0b8bf", "html_url": "https://github.com/rust-lang/rust/commit/9b606a3203da5141f4922ef405ef0d1b9bf0b8bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b606a3203da5141f4922ef405ef0d1b9bf0b8bf/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c76e260fa7b8318216dac0f78fe008ce1e0f8684", "url": "https://api.github.com/repos/rust-lang/rust/commits/c76e260fa7b8318216dac0f78fe008ce1e0f8684", "html_url": "https://github.com/rust-lang/rust/commit/c76e260fa7b8318216dac0f78fe008ce1e0f8684"}], "stats": {"total": 163, "additions": 80, "deletions": 83}, "files": [{"sha": "84b133068055b174303c1d22878ee6ae07256bdb", "filename": "src/tools/tidy/src/debug_artifacts.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b606a3203da5141f4922ef405ef0d1b9bf0b8bf/src%2Ftools%2Ftidy%2Fsrc%2Fdebug_artifacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b606a3203da5141f4922ef405ef0d1b9bf0b8bf/src%2Ftools%2Ftidy%2Fsrc%2Fdebug_artifacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdebug_artifacts.rs?ref=9b606a3203da5141f4922ef405ef0d1b9bf0b8bf", "patch": "@@ -1,21 +1,15 @@\n //! Tidy check to prevent creation of unnecessary debug artifacts while running tests.\n \n-use crate::walk::{filter_dirs, walk};\n+use crate::walk::{filter_dirs, filter_not_rust, walk};\n use std::path::Path;\n \n const GRAPHVIZ_POSTFLOW_MSG: &str = \"`borrowck_graphviz_postflow` attribute in test\";\n \n pub fn check(test_dir: &Path, bad: &mut bool) {\n-    walk(test_dir, filter_dirs, &mut |entry, contents| {\n-        let filename = entry.path();\n-        let is_rust = filename.extension().map_or(false, |ext| ext == \"rs\");\n-        if !is_rust {\n-            return;\n-        }\n-\n+    walk(test_dir, |path| filter_dirs(path) || filter_not_rust(path), &mut |entry, contents| {\n         for (i, line) in contents.lines().enumerate() {\n             if line.contains(\"borrowck_graphviz_postflow\") {\n-                tidy_error!(bad, \"{}:{}: {}\", filename.display(), i + 1, GRAPHVIZ_POSTFLOW_MSG);\n+                tidy_error!(bad, \"{}:{}: {}\", entry.path().display(), i + 1, GRAPHVIZ_POSTFLOW_MSG);\n             }\n         }\n     });"}, {"sha": "f18feda533c9ca104b033b2ffef59429eda0ebd0", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9b606a3203da5141f4922ef405ef0d1b9bf0b8bf/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b606a3203da5141f4922ef405ef0d1b9bf0b8bf/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=9b606a3203da5141f4922ef405ef0d1b9bf0b8bf", "patch": "@@ -9,8 +9,9 @@\n //! * All unstable lang features have tests to ensure they are actually unstable.\n //! * Language features in a group are sorted by feature name.\n \n-use crate::walk::{filter_dirs, walk, walk_many};\n+use crate::walk::{filter_dirs, filter_not_rust, walk, walk_many};\n use std::collections::hash_map::{Entry, HashMap};\n+use std::ffi::OsStr;\n use std::fmt;\n use std::fs;\n use std::num::NonZeroU32;\n@@ -101,17 +102,15 @@ pub fn check(\n             &tests_path.join(\"rustdoc-ui\"),\n             &tests_path.join(\"rustdoc\"),\n         ],\n-        filter_dirs,\n+        |path| {\n+            filter_dirs(path)\n+                || filter_not_rust(path)\n+                || path.file_name() == Some(OsStr::new(\"features.rs\"))\n+                || path.file_name() == Some(OsStr::new(\"diagnostic_list.rs\"))\n+        },\n         &mut |entry, contents| {\n             let file = entry.path();\n             let filename = file.file_name().unwrap().to_string_lossy();\n-            if !filename.ends_with(\".rs\")\n-                || filename == \"features.rs\"\n-                || filename == \"diagnostic_list.rs\"\n-            {\n-                return;\n-            }\n-\n             let filen_underscore = filename.replace('-', \"_\").replace(\".rs\", \"\");\n             let filename_is_gate_test = test_filen_gate(&filen_underscore, &mut features);\n "}, {"sha": "f59406c404bab9d4f29be5fa6e9ee47b6b4ae1ea", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b606a3203da5141f4922ef405ef0d1b9bf0b8bf/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b606a3203da5141f4922ef405ef0d1b9bf0b8bf/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=9b606a3203da5141f4922ef405ef0d1b9bf0b8bf", "patch": "@@ -120,7 +120,6 @@ fn main() {\n         check!(edition, &library_path);\n \n         check!(alphabetical, &src_path);\n-        check!(alphabetical, &tests_path);\n         check!(alphabetical, &compiler_path);\n         check!(alphabetical, &library_path);\n "}, {"sha": "e3f04840bc71b38f217a8ebdd30b5fafb6ecf8ab", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9b606a3203da5141f4922ef405ef0d1b9bf0b8bf/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b606a3203da5141f4922ef405ef0d1b9bf0b8bf/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=9b606a3203da5141f4922ef405ef0d1b9bf0b8bf", "patch": "@@ -19,7 +19,7 @@\n \n use crate::walk::{filter_dirs, walk};\n use regex::{Regex, RegexSet};\n-use std::path::Path;\n+use std::{ffi::OsStr, path::Path};\n \n /// Error code markdown is restricted to 80 columns because they can be\n /// displayed on the console with --example.\n@@ -228,21 +228,28 @@ fn is_unexplained_ignore(extension: &str, line: &str) -> bool {\n \n pub fn check(path: &Path, bad: &mut bool) {\n     fn skip(path: &Path) -> bool {\n-        filter_dirs(path) || skip_markdown_path(path)\n+        if filter_dirs(path) || skip_markdown_path(path) {\n+            return true;\n+        }\n+\n+        let extensions = [\"rs\", \"py\", \"js\", \"sh\", \"c\", \"cpp\", \"h\", \"md\", \"css\", \"ftl\", \"goml\"];\n+        if extensions.iter().all(|e| path.extension() != Some(OsStr::new(e))) {\n+            return true;\n+        }\n+\n+        // We only check CSS files in rustdoc.\n+        path.extension().map_or(false, |e| e == \"css\") && !is_in(path, \"src\", \"librustdoc\")\n     }\n+\n     let problematic_consts_strings: Vec<String> = (PROBLEMATIC_CONSTS.iter().map(u32::to_string))\n         .chain(PROBLEMATIC_CONSTS.iter().map(|v| format!(\"{:x}\", v)))\n         .chain(PROBLEMATIC_CONSTS.iter().map(|v| format!(\"{:X}\", v)))\n         .collect();\n     let problematic_regex = RegexSet::new(problematic_consts_strings.as_slice()).unwrap();\n+\n     walk(path, skip, &mut |entry, contents| {\n         let file = entry.path();\n         let filename = file.file_name().unwrap().to_string_lossy();\n-        let extensions =\n-            [\".rs\", \".py\", \".js\", \".sh\", \".c\", \".cpp\", \".h\", \".md\", \".css\", \".ftl\", \".goml\"];\n-        if extensions.iter().all(|e| !filename.ends_with(e)) || filename.starts_with(\".#\") {\n-            return;\n-        }\n \n         let is_style_file = filename.ends_with(\".css\");\n         let under_rustfmt = filename.ends_with(\".rs\") &&\n@@ -253,11 +260,6 @@ pub fn check(path: &Path, bad: &mut bool) {\n                     a.ends_with(\"src/doc/book\")\n             });\n \n-        if is_style_file && !is_in(file, \"src\", \"librustdoc\") {\n-            // We only check CSS files in rustdoc.\n-            return;\n-        }\n-\n         if contents.is_empty() {\n             tidy_error!(bad, \"{}: empty file\", file.display());\n         }"}, {"sha": "e0fa6aceb853c05686d14618f0348220ec158cc1", "filename": "src/tools/tidy/src/target_specific_tests.rs", "status": "modified", "additions": 49, "deletions": 51, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/9b606a3203da5141f4922ef405ef0d1b9bf0b8bf/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b606a3203da5141f4922ef405ef0d1b9bf0b8bf/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs?ref=9b606a3203da5141f4922ef405ef0d1b9bf0b8bf", "patch": "@@ -4,6 +4,8 @@\n use std::collections::BTreeMap;\n use std::path::Path;\n \n+use crate::walk::filter_not_rust;\n+\n const COMMENT: &str = \"//\";\n const LLVM_COMPONENTS_HEADER: &str = \"needs-llvm-components:\";\n const COMPILE_FLAGS_HEADER: &str = \"compile-flags:\";\n@@ -35,61 +37,57 @@ struct RevisionInfo<'a> {\n }\n \n pub fn check(path: &Path, bad: &mut bool) {\n-    crate::walk::walk(\n-        path,\n-        |path| path.extension().map(|p| p == \"rs\") == Some(false),\n-        &mut |entry, content| {\n-            let file = entry.path().display();\n-            let mut header_map = BTreeMap::new();\n-            iter_header(content, &mut |cfg, directive| {\n-                if let Some(value) = directive.strip_prefix(LLVM_COMPONENTS_HEADER) {\n-                    let info = header_map.entry(cfg).or_insert(RevisionInfo::default());\n-                    let comp_vec = info.llvm_components.get_or_insert(Vec::new());\n-                    for component in value.split(' ') {\n-                        let component = component.trim();\n-                        if !component.is_empty() {\n-                            comp_vec.push(component);\n-                        }\n-                    }\n-                } else if directive.starts_with(COMPILE_FLAGS_HEADER) {\n-                    let compile_flags = &directive[COMPILE_FLAGS_HEADER.len()..];\n-                    if let Some((_, v)) = compile_flags.split_once(\"--target\") {\n-                        if let Some((arch, _)) =\n-                            v.trim_start_matches(|c| c == ' ' || c == '=').split_once(\"-\")\n-                        {\n-                            let info = header_map.entry(cfg).or_insert(RevisionInfo::default());\n-                            info.target_arch.replace(arch);\n-                        } else {\n-                            eprintln!(\"{file}: seems to have a malformed --target value\");\n-                            *bad = true;\n-                        }\n+    crate::walk::walk(path, filter_not_rust, &mut |entry, content| {\n+        let file = entry.path().display();\n+        let mut header_map = BTreeMap::new();\n+        iter_header(content, &mut |cfg, directive| {\n+            if let Some(value) = directive.strip_prefix(LLVM_COMPONENTS_HEADER) {\n+                let info = header_map.entry(cfg).or_insert(RevisionInfo::default());\n+                let comp_vec = info.llvm_components.get_or_insert(Vec::new());\n+                for component in value.split(' ') {\n+                    let component = component.trim();\n+                    if !component.is_empty() {\n+                        comp_vec.push(component);\n                     }\n                 }\n-            });\n-            for (rev, RevisionInfo { target_arch, llvm_components }) in &header_map {\n-                let rev = rev.unwrap_or(\"[unspecified]\");\n-                match (target_arch, llvm_components) {\n-                    (None, None) => {}\n-                    (Some(_), None) => {\n-                        eprintln!(\n-                            \"{}: revision {} should specify `{}` as it has `--target` set\",\n-                            file, rev, LLVM_COMPONENTS_HEADER\n-                        );\n+            } else if directive.starts_with(COMPILE_FLAGS_HEADER) {\n+                let compile_flags = &directive[COMPILE_FLAGS_HEADER.len()..];\n+                if let Some((_, v)) = compile_flags.split_once(\"--target\") {\n+                    if let Some((arch, _)) =\n+                        v.trim_start_matches(|c| c == ' ' || c == '=').split_once(\"-\")\n+                    {\n+                        let info = header_map.entry(cfg).or_insert(RevisionInfo::default());\n+                        info.target_arch.replace(arch);\n+                    } else {\n+                        eprintln!(\"{file}: seems to have a malformed --target value\");\n                         *bad = true;\n                     }\n-                    (None, Some(_)) => {\n-                        eprintln!(\n-                            \"{}: revision {} should not specify `{}` as it doesn't need `--target`\",\n-                            file, rev, LLVM_COMPONENTS_HEADER\n-                        );\n-                        *bad = true;\n-                    }\n-                    (Some(_), Some(_)) => {\n-                        // FIXME: check specified components against the target architectures we\n-                        // gathered.\n-                    }\n                 }\n             }\n-        },\n-    );\n+        });\n+        for (rev, RevisionInfo { target_arch, llvm_components }) in &header_map {\n+            let rev = rev.unwrap_or(\"[unspecified]\");\n+            match (target_arch, llvm_components) {\n+                (None, None) => {}\n+                (Some(_), None) => {\n+                    eprintln!(\n+                        \"{}: revision {} should specify `{}` as it has `--target` set\",\n+                        file, rev, LLVM_COMPONENTS_HEADER\n+                    );\n+                    *bad = true;\n+                }\n+                (None, Some(_)) => {\n+                    eprintln!(\n+                        \"{}: revision {} should not specify `{}` as it doesn't need `--target`\",\n+                        file, rev, LLVM_COMPONENTS_HEADER\n+                    );\n+                    *bad = true;\n+                }\n+                (Some(_), Some(_)) => {\n+                    // FIXME: check specified components against the target architectures we\n+                    // gathered.\n+                }\n+            }\n+        }\n+    });\n }"}, {"sha": "90cd62531d0c22387ca089853bb863cf8d2f0d6f", "filename": "src/tools/tidy/src/walk.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b606a3203da5141f4922ef405ef0d1b9bf0b8bf/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b606a3203da5141f4922ef405ef0d1b9bf0b8bf/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs?ref=9b606a3203da5141f4922ef405ef0d1b9bf0b8bf", "patch": "@@ -1,6 +1,6 @@\n use ignore::DirEntry;\n \n-use std::{fs::File, io::Read, path::Path};\n+use std::{ffi::OsStr, fs::File, io::Read, path::Path};\n \n /// The default directory filter.\n pub fn filter_dirs(path: &Path) -> bool {\n@@ -33,6 +33,11 @@ pub fn filter_dirs(path: &Path) -> bool {\n     skip.iter().any(|p| path.ends_with(p))\n }\n \n+/// Filter for only files that end in `.rs`.\n+pub fn filter_not_rust(path: &Path) -> bool {\n+    !path.is_dir() && path.extension() != Some(OsStr::new(\"rs\"))\n+}\n+\n pub fn walk_many(\n     paths: &[&Path],\n     skip: impl Clone + Send + Sync + 'static + Fn(&Path) -> bool,"}]}