{"sha": "f30fc0a5e2e1d2e816c264354c45a6d7da576107", "node_id": "C_kwDOAAsO6NoAKGYzMGZjMGE1ZTJlMWQyZTgxNmMyNjQzNTRjNDVhNmQ3ZGE1NzYxMDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-22T09:54:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-22T09:54:21Z"}, "message": "Auto merge of #104844 - cjgillot:mention-eval-place, r=jackh726,RalfJung\n\nEvaluate place expression in `PlaceMention`\n\nhttps://github.com/rust-lang/rust/pull/102256 introduces a `PlaceMention(place)` MIR statement which keep trace of `let _ = place` statements from surface rust, but without semantics.\n\nThis PR proposes to change the behaviour of `let _ =` patterns with respect to the borrow-checker to verify that the bound place is live.\n\nSpecifically, consider this code:\n```rust\nlet _ = {\n    let a = 5;\n    &a\n};\n```\n\nThis passes borrowck without error on stable. Meanwhile, replacing `_` by `_: _` or `_p` errors with \"error[E0597]: `a` does not live long enough\", [see playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=c448d25a7c205dc95a0967fe96bccce8).\n\nThis PR *does not* change how `_` patterns behave with respect to initializedness: it remains ok to bind a moved-from place to `_`.\n\nThe relevant test is `tests/ui/borrowck/let_underscore_temporary.rs`. Crater check found no regression.\n\nFor consistency, this PR changes miri to evaluate the place found in `PlaceMention`, and report eventual dangling pointers found within it.\n\nr? `@RalfJung`", "tree": {"sha": "cd0c0bbf5ab6206228d026c3823200c775426ec3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd0c0bbf5ab6206228d026c3823200c775426ec3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f30fc0a5e2e1d2e816c264354c45a6d7da576107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f30fc0a5e2e1d2e816c264354c45a6d7da576107", "html_url": "https://github.com/rust-lang/rust/commit/f30fc0a5e2e1d2e816c264354c45a6d7da576107", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f30fc0a5e2e1d2e816c264354c45a6d7da576107/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86d8f1268ae0fbc07ca42233a0eac4668e2af724", "url": "https://api.github.com/repos/rust-lang/rust/commits/86d8f1268ae0fbc07ca42233a0eac4668e2af724", "html_url": "https://github.com/rust-lang/rust/commit/86d8f1268ae0fbc07ca42233a0eac4668e2af724"}, {"sha": "cb3e0fbb5999429f4f4c30e505c4904c9999cdf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb3e0fbb5999429f4f4c30e505c4904c9999cdf8", "html_url": "https://github.com/rust-lang/rust/commit/cb3e0fbb5999429f4f4c30e505c4904c9999cdf8"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "35ce89c79864997d89152fe2c6152b2038debc27", "filename": "tests/ui/option_if_let_else.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f30fc0a5e2e1d2e816c264354c45a6d7da576107/tests%2Fui%2Foption_if_let_else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f30fc0a5e2e1d2e816c264354c45a6d7da576107/tests%2Fui%2Foption_if_let_else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.fixed?ref=f30fc0a5e2e1d2e816c264354c45a6d7da576107", "patch": "@@ -25,7 +25,7 @@ fn else_if_option(string: Option<&str>) -> Option<(bool, &str)> {\n fn unop_bad(string: &Option<&str>, mut num: Option<i32>) {\n     let _ = string.map_or(0, |s| s.len());\n     let _ = num.as_ref().map_or(&0, |s| s);\n-    let _ = num.as_mut().map_or(&mut 0, |s| {\n+    let _ = num.as_mut().map_or(&0, |s| {\n         *s += 1;\n         s\n     });\n@@ -34,7 +34,7 @@ fn unop_bad(string: &Option<&str>, mut num: Option<i32>) {\n         s += 1;\n         s\n     });\n-    let _ = num.as_mut().map_or(&mut 0, |s| {\n+    let _ = num.as_mut().map_or(&0, |s| {\n         *s += 1;\n         s\n     });"}, {"sha": "c8683e5aae2d0a2fa298f6c62982442bb0cced67", "filename": "tests/ui/option_if_let_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f30fc0a5e2e1d2e816c264354c45a6d7da576107/tests%2Fui%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f30fc0a5e2e1d2e816c264354c45a6d7da576107/tests%2Fui%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.rs?ref=f30fc0a5e2e1d2e816c264354c45a6d7da576107", "patch": "@@ -33,7 +33,7 @@ fn unop_bad(string: &Option<&str>, mut num: Option<i32>) {\n         *s += 1;\n         s\n     } else {\n-        &mut 0\n+        &0\n     };\n     let _ = if let Some(ref s) = num { s } else { &0 };\n     let _ = if let Some(mut s) = num {\n@@ -46,7 +46,7 @@ fn unop_bad(string: &Option<&str>, mut num: Option<i32>) {\n         *s += 1;\n         s\n     } else {\n-        &mut 0\n+        &0\n     };\n }\n "}, {"sha": "f5e4affb67229cd8019736e61b54381a76158b5a", "filename": "tests/ui/option_if_let_else.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f30fc0a5e2e1d2e816c264354c45a6d7da576107/tests%2Fui%2Foption_if_let_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f30fc0a5e2e1d2e816c264354c45a6d7da576107/tests%2Fui%2Foption_if_let_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_if_let_else.stderr?ref=f30fc0a5e2e1d2e816c264354c45a6d7da576107", "patch": "@@ -30,13 +30,13 @@ LL |       let _ = if let Some(s) = &mut num {\n LL | |         *s += 1;\n LL | |         s\n LL | |     } else {\n-LL | |         &mut 0\n+LL | |         &0\n LL | |     };\n    | |_____^\n    |\n help: try\n    |\n-LL ~     let _ = num.as_mut().map_or(&mut 0, |s| {\n+LL ~     let _ = num.as_mut().map_or(&0, |s| {\n LL +         *s += 1;\n LL +         s\n LL ~     });\n@@ -76,13 +76,13 @@ LL |       let _ = if let Some(ref mut s) = num {\n LL | |         *s += 1;\n LL | |         s\n LL | |     } else {\n-LL | |         &mut 0\n+LL | |         &0\n LL | |     };\n    | |_____^\n    |\n help: try\n    |\n-LL ~     let _ = num.as_mut().map_or(&mut 0, |s| {\n+LL ~     let _ = num.as_mut().map_or(&0, |s| {\n LL +         *s += 1;\n LL +         s\n LL ~     });"}]}