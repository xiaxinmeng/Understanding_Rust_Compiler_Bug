{"sha": "206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNmFlNTc1MmUwNWYzZDIyZmRmYjNmODZkMjYxYTI0ZTZkYzIyODY=", "commit": {"author": {"name": "Birunthan Mohanathas", "email": "birunthan@mohanathas.com", "date": "2013-07-22T16:04:51Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-24T13:45:20Z"}, "message": "Change 'print(fmt!(...))' to printf!/printfln! in src/test/", "tree": {"sha": "fd5a1eb2a7cf1a89c985d5d3fe9fbf2c4f40a5cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd5a1eb2a7cf1a89c985d5d3fe9fbf2c4f40a5cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "html_url": "https://github.com/rust-lang/rust/commit/206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/comments", "author": {"login": "poiru", "id": 1319028, "node_id": "MDQ6VXNlcjEzMTkwMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1319028?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poiru", "html_url": "https://github.com/poiru", "followers_url": "https://api.github.com/users/poiru/followers", "following_url": "https://api.github.com/users/poiru/following{/other_user}", "gists_url": "https://api.github.com/users/poiru/gists{/gist_id}", "starred_url": "https://api.github.com/users/poiru/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poiru/subscriptions", "organizations_url": "https://api.github.com/users/poiru/orgs", "repos_url": "https://api.github.com/users/poiru/repos", "events_url": "https://api.github.com/users/poiru/events{/privacy}", "received_events_url": "https://api.github.com/users/poiru/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d047cf1ec612f766365bde0c9d146b58ef3cc7c7", "html_url": "https://github.com/rust-lang/rust/commit/d047cf1ec612f766365bde0c9d146b58ef3cc7c7"}], "stats": {"total": 202, "additions": 99, "deletions": 103}, "files": [{"sha": "3bd0157c48a568649893d94380fc21211347870e", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -24,7 +24,7 @@ fn timed(label: &str, f: &fn()) {\n     let start = time::precise_time_s();\n     f();\n     let end = time::precise_time_s();\n-    io::println(fmt!(\"  %s: %f\", label, end - start));\n+    printfln!(\"  %s: %f\", label, end - start);\n }\n \n fn ascending<M: MutableMap<uint, uint>>(map: &mut M, n_keys: uint) {\n@@ -116,7 +116,7 @@ fn main() {\n         }\n     }\n \n-    io::println(fmt!(\"%? keys\", n_keys));\n+    printfln!(\"%? keys\", n_keys);\n \n     io::println(\"\\nTreeMap:\");\n "}, {"sha": "0d93bdb6f9446347d80912c2487b3d8f9ccc98c2", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -58,7 +58,7 @@ fn maybe_run_test(argv: &[~str], name: ~str, test: &fn()) {\n     test();\n     let stop = precise_time_s();\n \n-    io::println(fmt!(\"%s:\\t\\t%f ms\", name, (stop - start) * 1000f));\n+    printfln!(\"%s:\\t\\t%f ms\", name, (stop - start) * 1000f);\n }\n \n fn shift_push() {"}, {"sha": "0fa641e395eeefdfaa67ed919fa3ba1bd020c609", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -119,8 +119,7 @@ fn main() {\n     let elapsed = (stop - start);\n     let rate = (num_msgs as float) / elapsed;\n \n-    io::println(fmt!(\"Sent %? messages in %? seconds\",\n-                     num_msgs, elapsed));\n-    io::println(fmt!(\"  %? messages / second\", rate));\n-    io::println(fmt!(\"  %? \u03bcs / message\", 1000000. / rate));\n+    printfln!(\"Sent %? messages in %? seconds\", num_msgs, elapsed);\n+    printfln!(\"  %? messages / second\", rate);\n+    printfln!(\"  %? \u03bcs / message\", 1000000. / rate);\n }"}, {"sha": "9eb415e88923374ebd539912f47656d1a5d9f534", "filename": "src/test/bench/msgsend-ring-pipes.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -105,8 +105,7 @@ fn main() {\n     let elapsed = (stop - start);\n     let rate = (num_msgs as float) / elapsed;\n \n-    io::println(fmt!(\"Sent %? messages in %? seconds\",\n-                     num_msgs, elapsed));\n-    io::println(fmt!(\"  %? messages / second\", rate));\n-    io::println(fmt!(\"  %? \u03bcs / message\", 1000000. / rate));\n+    printfln!(\"Sent %? messages in %? seconds\", num_msgs, elapsed);\n+    printfln!(\"  %? messages / second\", rate);\n+    printfln!(\"  %? \u03bcs / message\", 1000000. / rate);\n }"}, {"sha": "09d1c632d0e48f035d71f5f7a422887990903432", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -115,8 +115,7 @@ fn main() {\n     let elapsed = (stop - start);\n     let rate = (num_msgs as float) / elapsed;\n \n-    io::println(fmt!(\"Sent %? messages in %? seconds\",\n-                     num_msgs, elapsed));\n-    io::println(fmt!(\"  %? messages / second\", rate));\n-    io::println(fmt!(\"  %? \u03bcs / message\", 1000000. / rate));\n+    printfln!(\"Sent %? messages in %? seconds\", num_msgs, elapsed);\n+    printfln!(\"  %? messages / second\", rate);\n+    printfln!(\"  %? \u03bcs / message\", 1000000. / rate);\n }"}, {"sha": "b11daeef12f51a48c0ef6998d9af7560fbe736ad", "filename": "src/test/bench/pingpong.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fpingpong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fpingpong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fpingpong.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -198,13 +198,13 @@ fn main() {\n     let bounded = do timeit { bounded(count) };\n     let unbounded = do timeit { unbounded(count) };\n \n-    io::println(fmt!(\"count: %?\\n\", count));\n-    io::println(fmt!(\"bounded:   %? s\\t(%? \u03bcs/message)\",\n-                     bounded, bounded * 1000000. / (count as float)));\n-    io::println(fmt!(\"unbounded: %? s\\t(%? \u03bcs/message)\",\n-                     unbounded, unbounded * 1000000. / (count as float)));\n-\n-    io::println(fmt!(\"\\n\\\n-                      bounded is %?%% faster\",\n-                     (unbounded - bounded) / bounded * 100.));\n+    printfln!(\"count: %?\\n\", count);\n+    printfln!(\"bounded:   %? s\\t(%? \u03bcs/message)\",\n+              bounded, bounded * 1000000. / (count as float));\n+    printfln!(\"unbounded: %? s\\t(%? \u03bcs/message)\",\n+              unbounded, unbounded * 1000000. / (count as float));\n+\n+    printfln!(\"\\n\\\n+               bounded is %?%% faster\",\n+              (unbounded - bounded) / bounded * 100.);\n }"}, {"sha": "e06ff02a0b38f403404e78706b1e9f7046b6d0c5", "filename": "src/test/bench/shootout-ackermann.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-ackermann.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -36,5 +36,5 @@ fn main() {\n         args\n     };\n     let n = int::from_str(args[1]).get();\n-    io::println(fmt!(\"Ack(3,%d): %d\\n\", n, ack(3, n)));\n+    printfln!(\"Ack(3,%d): %d\\n\", n, ack(3, n));\n }"}, {"sha": "2f63c302d534d1be57be380618fa9d11166c86e3", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -61,9 +61,9 @@ fn main() {\n     let stretch_depth = max_depth + 1;\n     let stretch_tree = bottom_up_tree(&stretch_arena, 0, stretch_depth);\n \n-    println(fmt!(\"stretch tree of depth %d\\t check: %d\",\n-                          stretch_depth,\n-                          item_check(stretch_tree)));\n+    printfln!(\"stretch tree of depth %d\\t check: %d\",\n+              stretch_depth,\n+              item_check(stretch_tree));\n \n     let long_lived_arena = arena::Arena();\n     let long_lived_tree = bottom_up_tree(&long_lived_arena, 0, max_depth);\n@@ -79,12 +79,11 @@ fn main() {\n             chk += item_check(temp_tree);\n             i += 1;\n         }\n-        println(fmt!(\"%d\\t trees of depth %d\\t check: %d\",\n-                         iterations * 2, depth,\n-                         chk));\n+        printfln!(\"%d\\t trees of depth %d\\t check: %d\",\n+                  iterations * 2, depth, chk));\n         depth += 2;\n     }\n-    println(fmt!(\"long lived tree of depth %d\\t check: %d\",\n-                     max_depth,\n-                     item_check(long_lived_tree)));\n+    printfln!(\"long lived tree of depth %d\\t check: %d\",\n+              max_depth,\n+              item_check(long_lived_tree));\n }"}, {"sha": "97c2cba3b9e3146d2d5d1389c996f62dece1633a", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -93,5 +93,5 @@ fn fannkuch_redux(n: i32) -> i32 {\n #[fixed_stack_segment]\n fn main() {\n     let n: i32 = FromStr::from_str(os::args()[1]).get();\n-    println(fmt!(\"Pfannkuchen(%d) = %d\", n as int, fannkuch_redux(n) as int));\n+    printfln!(\"Pfannkuchen(%d) = %d\", n as int, fannkuch_redux(n) as int);\n }"}, {"sha": "7b8bc31bf1c8326331e70180ac69e178b18cfa11", "filename": "src/test/bench/shootout-fibo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fibo.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -32,5 +32,5 @@ fn main() {\n         args\n     };\n     let n = int::from_str(args[1]).get();\n-    io::println(fmt!(\"%d\\n\", fib(n)));\n+    printfln!(\"%d\\n\", fib(n));\n }"}, {"sha": "a7b784e1a96e875b8f51dcc8a8b8a07ba3e934df", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -82,7 +82,7 @@ struct PrintCallback(&'static str);\n \n impl TableCallback for PrintCallback {\n     fn f(&self, entry: &mut Entry) {\n-        println(fmt!(\"%d\\t%s\", entry.count as int, **self));\n+        printfln!(\"%d\\t%s\", entry.count as int, **self);\n     }\n }\n \n@@ -279,9 +279,9 @@ fn print_frequencies(frequencies: &Table, frame: i32) {\n     }\n \n     for vector.each |&(key, count)| {\n-        println(fmt!(\"%s %.3f\",\n-                     key.unpack(frame),\n-                     (count as float * 100.0) / (total_count as float)));\n+        printfln!(\"%s %.3f\",\n+                  key.unpack(frame),\n+                  (count as float * 100.0) / (total_count as float));\n     }\n }\n "}, {"sha": "594593e2ea343787d8b5c3240e87f858aad86c6a", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -15,7 +15,7 @@ fn main() {\n         let mut byte_acc: i8 = 0;\n         let mut bit_num: i32 = 0;\n \n-        println(fmt!(\"P4\\n%d %d\", w as int, h as int));\n+        printfln!(\"P4\\n%d %d\", w as int, h as int);\n \n         let mode = \"w\";\n         let stdout = fdopen(STDOUT_FILENO as c_int, transmute(&mode[0]));"}, {"sha": "6d04292588d459bc4ca5529234b843d51ca2ec86", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -142,9 +142,9 @@ fn main() {\n     let mut bodies = BODIES;\n \n     offset_momentum(&mut bodies);\n-    println(fmt!(\"%.9f\", energy(&bodies) as float));\n+    printfln!(\"%.9f\", energy(&bodies) as float);\n \n     advance(&mut bodies, 0.01, n);\n \n-    println(fmt!(\"%.9f\", energy(&bodies) as float));\n+    printfln!(\"%.9f\", energy(&bodies) as float);\n }"}, {"sha": "388613482c2cfcd17b96fbdb0806fd69d6770cfa", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -61,5 +61,5 @@ fn main() {\n         mult_AtAv(v, u, tmp);\n     }\n \n-    println(fmt!(\"%.9f\", (dot(u,v) / dot(v,v)).sqrt() as float));\n+    printfln!(\"%.9f\", (dot(u,v) / dot(v,v)).sqrt() as float);\n }"}, {"sha": "203b9c297fa6b402d806f7719f9fa08053bf239f", "filename": "src/test/bench/shootout-threadring.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-threadring.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -40,7 +40,7 @@ fn roundtrip(id: int, n_tasks: int, p: &Port<int>, ch: &Chan<int>) {\n     while (true) {\n         match p.recv() {\n           1 => {\n-            println(fmt!(\"%d\\n\", id));\n+            printfln!(\"%d\\n\", id);\n             return;\n           }\n           token => {"}, {"sha": "9a82dd3f512ca36b1a16d2ecc3cd0c680f830595", "filename": "src/test/compile-fail/borrowck-auto-mut-ref-to-immut-var.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fcompile-fail%2Fborrowck-auto-mut-ref-to-immut-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fcompile-fail%2Fborrowck-auto-mut-ref-to-immut-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-auto-mut-ref-to-immut-var.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -18,7 +18,7 @@ struct Foo {\n \n impl Foo {\n     pub fn printme(&mut self) {\n-        io::println(fmt!(\"%d\", self.x));\n+        printfln!(\"%d\", self.x);\n     }\n }\n "}, {"sha": "e3e12a4a4168bc0114229773d134c5d47dab01d2", "filename": "src/test/compile-fail/borrowck-vec-pattern-tail-element-loan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-tail-element-loan.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -9,5 +9,5 @@ fn a() -> &int {\n \n fn main() {\n     let fifth = a();\n-    println(fmt!(\"%d\", *fifth));\n+    printfln!(\"%d\", *fifth);\n }"}, {"sha": "04c3a0624264d306c3e625c8f023645208506e4b", "filename": "src/test/compile-fail/issue-3820.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fcompile-fail%2Fissue-3820.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fcompile-fail%2Fissue-3820.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3820.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -22,5 +22,5 @@ fn main() {\n     let u = Thing {x: 2};\n     let _v = u.mul(&3); // This is ok\n     let w = u * 3; //~ ERROR binary operation * cannot be applied to type `Thing`\n-    println(fmt!(\"%i\", w.x));\n+    printfln!(\"%i\", w.x);\n }"}, {"sha": "9ec1f5cd441b0e127abb5a02b77c0412136696bc", "filename": "src/test/compile-fail/issue-4335.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -14,5 +14,5 @@ fn f<'r, T>(v: &'r T) -> &'r fn()->T { id::<&'r fn()->T>(|| *v) } //~ ERROR cann\n \n fn main() {\n     let v = &5;\n-    println(fmt!(\"%d\", f(v)()));\n+    printfln!(\"%d\", f(v)());\n }"}, {"sha": "19a3ce4f8384b37e07d00816a16575c9fb2d9911", "filename": "src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -28,7 +28,7 @@ fn innocent_looking_victim() {\n             match x {\n                 Some(ref msg) => {\n                     (f.c)(f, true);\n-                    println(fmt!(\"%?\", msg));\n+                    printfln!(msg);\n                 },\n                 None => fail!(\"oops\"),\n             }"}, {"sha": "4640957a9a894e0b693f5247f8a3f04a19bf0190", "filename": "src/test/compile-fail/tuple-struct-nonexhaustive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fcompile-fail%2Ftuple-struct-nonexhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Fcompile-fail%2Ftuple-struct-nonexhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftuple-struct-nonexhaustive.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -13,7 +13,7 @@ struct Foo(int, int);\n fn main() {\n     let x = Foo(1, 2);\n     match x {   //~ ERROR non-exhaustive\n-        Foo(1, b) => println(fmt!(\"%d\", b)),\n-        Foo(2, b) => println(fmt!(\"%d\", b))\n+        Foo(1, b) => printfln!(\"%d\", b),\n+        Foo(2, b) => printfln!(\"%d\", b)\n     }\n }"}, {"sha": "8ed3297e7d142d07b964f732e7fec2e776c193c2", "filename": "src/test/run-fail/borrowck-wg-one-mut-one-imm-slice-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slice-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slice-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slice-method.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -33,5 +33,5 @@ pub fn main()\n     let z = @mut [1,2,3];\n     let z2 = z;\n     add(z.my_mut_slice(), z2.my_slice());\n-    print(fmt!(\"%d\\n\", z[0]));\n+    printfln!(\"%d\", z[0]);\n }"}, {"sha": "d2971ad40ab44894e79a73604c3916200a5a8af3", "filename": "src/test/run-fail/borrowck-wg-one-mut-one-imm-slices.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm-slices.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -12,5 +12,5 @@ pub fn main()\n     let z = @mut [1,2,3];\n     let z2 = z;\n     add(z, z2);\n-    print(fmt!(\"%d\\n\", z[0]));\n+    printfln!(\"%d\", z[0]);\n }"}, {"sha": "df096e8292f827b2b8b987826a6ba79faf41a5aa", "filename": "src/test/run-fail/borrowck-wg-one-mut-one-imm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-one-mut-one-imm.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -13,5 +13,5 @@ pub fn main()\n     let z = @mut [1,2,3];\n     let z2 = z;\n     add(&mut z[0], &z2[0]);\n-    print(fmt!(\"%d\\n\", z[0]));\n+    printfln!(\"%d\", z[0]);\n }"}, {"sha": "98bb72c93408b5e89513895525ef7effa5b7b1d3", "filename": "src/test/run-fail/borrowck-wg-two-array-indices.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-fail%2Fborrowck-wg-two-array-indices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-fail%2Fborrowck-wg-two-array-indices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-two-array-indices.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -13,5 +13,5 @@ pub fn main()\n     let z = @mut [1,2,3];\n     let z2 = z;\n     add(&mut z[0], &mut z2[0]);\n-    print(fmt!(\"%d\\n\", z[0]));\n+    printfln!(\"%d\", z[0]);\n }"}, {"sha": "cc14af45c85cbaa12b751d5c075dc113ff36b120", "filename": "src/test/run-pass/auto-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fauto-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fauto-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -18,7 +18,7 @@ trait Stuff {\n \n impl Stuff for Foo {\n     fn printme(&self) {\n-        println(fmt!(\"%d\", self.x));\n+        printfln!(\"%d\", self.x);\n     }\n }\n "}, {"sha": "306141354ca7679d64346ada76888c1d35d0fc9a", "filename": "src/test/run-pass/borrowck-wg-two-imm-borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fborrowck-wg-two-imm-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fborrowck-wg-two-imm-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-wg-two-imm-borrows.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -10,5 +10,5 @@ pub fn main()\n     let z = @mut [1,2,3];\n     let z2 = z;\n     add(&z[0], &z2[0]);\n-    print(fmt!(\"%d\\n\", z[0]));\n+    printfln!(\"%d\", z[0]);\n }"}, {"sha": "30adaf2dae4a35526705c0bed8b2e5a72b40b051", "filename": "src/test/run-pass/cci_impl_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -19,7 +19,7 @@ pub fn main() {\n     //info!(\"%?\", bt0);\n \n     do 3u.to(10u) |i| {\n-        print(fmt!(\"%u\\n\", i));\n+        printfln!(\"%u\", i);\n \n         //let bt1 = sys::frame_address();\n         //info!(\"%?\", bt1);"}, {"sha": "4db0b1871d078d9d370cc8c0673df9f3e1961a1c", "filename": "src/test/run-pass/cci_iter_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -17,7 +17,7 @@ pub fn main() {\n     //let bt0 = sys::rusti::frame_address(1u32);\n     //info!(\"%?\", bt0);\n     do cci_iter_lib::iter(~[1, 2, 3]) |i| {\n-        print(fmt!(\"%d\", *i));\n+        printf!(\"%d\", *i);\n         //assert!(bt0 == sys::rusti::frame_address(2u32));\n     }\n }"}, {"sha": "6459239e46959505596b1d9a6f655ab9a77c1487", "filename": "src/test/run-pass/cci_no_inline_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -23,7 +23,7 @@ pub fn main() {\n     //let bt0 = sys::frame_address();\n     //info!(\"%?\", bt0);\n     do iter(~[1u, 2u, 3u]) |i| {\n-        print(fmt!(\"%u\\n\", i));\n+        printfln!(\"%u\", i);\n \n         //let bt1 = sys::frame_address();\n         //info!(\"%?\", bt1);"}, {"sha": "6dca5d60f11114b1fc7952fd6eb8976048466999", "filename": "src/test/run-pass/const-fields-and-indexing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -27,9 +27,9 @@ static k : K = K {a: 10, b: 20, c: D {d: 30, e: 40}};\n static m : int = k.c.e;\n \n pub fn main() {\n-    io::println(fmt!(\"%?\", p));\n-    io::println(fmt!(\"%?\", q));\n-    io::println(fmt!(\"%?\", t));\n+    printfln!(p);\n+    printfln!(q);\n+    printfln!(t);\n     assert_eq!(p, 3);\n     assert_eq!(q, 3);\n     assert_eq!(t, 20);"}, {"sha": "5b80988dcdfb00e4e058f2ba2f570eadb7ccea52", "filename": "src/test/run-pass/const-rec-and-tup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fconst-rec-and-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fconst-rec-and-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-rec-and-tup.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -21,5 +21,5 @@ static y : AnotherPair = AnotherPair{ x: (0xf0f0f0f0_f0f0f0f0,\n pub fn main() {\n     let (p, _) = y.x;\n     assert_eq!(p, - 1085102592571150096);\n-    println(fmt!(\"0x%x\", p as uint));\n+    printfln!(\"0x%x\", p as uint);\n }"}, {"sha": "c2103a40bfea7025d9ea561b033c690f26e91a31", "filename": "src/test/run-pass/const-region-ptrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -17,8 +17,8 @@ static x: &'static int = &10;\n static y: &'static Pair<'static> = &Pair {a: 15, b: x};\n \n pub fn main() {\n-    io::println(fmt!(\"x = %?\", *x));\n-    io::println(fmt!(\"y = {a: %?, b: %?}\", y.a, *(y.b)));\n+    printfln!(\"x = %?\", *x);\n+    printfln!(\"y = {a: %?, b: %?}\", y.a, *(y.b));\n     assert_eq!(*x, 10);\n     assert_eq!(*(y.b), 10);\n }"}, {"sha": "c62fcd8980fad1e5d16598e112cc8bba8e9ffd9c", "filename": "src/test/run-pass/const-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fconst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fconst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-struct.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -30,6 +30,6 @@ pub fn main() {\n     assert_eq!(x.b, 2);\n     assert_eq!(x, y);\n     assert_eq!(z.b, 22);\n-    io::println(fmt!(\"0x%x\", x.b as uint));\n-    io::println(fmt!(\"0x%x\", z.c as uint));\n+    printfln!(\"0x%x\", x.b as uint);\n+    printfln!(\"0x%x\", z.c as uint);\n }"}, {"sha": "01ef3284e32f9eabdd94fc144449015de1d8ae11", "filename": "src/test/run-pass/const-vecs-and-slices.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -14,8 +14,8 @@ static x : [int, ..4] = [1,2,3,4];\n static y : &'static [int] = &[1,2,3,4];\n \n pub fn main() {\n-    io::println(fmt!(\"%?\", x[1]));\n-    io::println(fmt!(\"%?\", y[1]));\n+    printfln!(x[1]);\n+    printfln!(y[1]);\n     assert_eq!(x[1], 2);\n     assert_eq!(x[3], 4);\n     assert_eq!(x[3], y[3]);"}, {"sha": "0cd9b2adf7ce6f5c8a9e1ee09411dd4d9633f4b7", "filename": "src/test/run-pass/functional-struct-update.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Ffunctional-struct-update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Ffunctional-struct-update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunctional-struct-update.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -16,5 +16,5 @@ struct Foo {\n pub fn main() {\n     let a = Foo { x: 1, y: 2 };\n     let c = Foo { x: 4, .. a};\n-    println(fmt!(\"%?\", c));\n+    printfln!(c);\n }"}, {"sha": "c84386c722da745774a4a2a999bac04f20a5fe2b", "filename": "src/test/run-pass/issue-2185.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2185.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -80,5 +80,5 @@ pub fn main() {\n         a);\n     let sum = foldl(filt, 0u, |accum, &&n: uint| accum + n );\n \n-    io::println(fmt!(\"%u\", sum));\n+    printfln!(\"%u\", sum);\n }"}, {"sha": "d4cbfa91fb6a4f098b25645ca762a62a7ce17fcf", "filename": "src/test/run-pass/issue-2989.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2989.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -42,7 +42,7 @@ pub fn main() {\n     let bools2 = to_bools(Storage{storage: ~[0b01100100]});\n \n     for uint::range(0, 8) |i| {\n-        io::println(fmt!(\"%u => %u vs %u\", i, bools[i] as uint, bools2[i] as uint));\n+        printfln!(\"%u => %u vs %u\", i, bools[i] as uint, bools2[i] as uint);\n     }\n \n     assert_eq!(bools, bools2);"}, {"sha": "3e3e6d6f99215c4afd9f6f4d2cf7d10ad1549e84", "filename": "src/test/run-pass/issue-3211.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fissue-3211.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fissue-3211.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3211.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -4,5 +4,5 @@ pub fn main() {\n         x += 1;\n     }\n     assert_eq!(x, 4096);\n-    println(fmt!(\"x = %u\", x));\n+    printfln!(\"x = %u\", x);\n }"}, {"sha": "e42b70b5a5e0d8a8e0390605e8d86e7826702d3e", "filename": "src/test/run-pass/issue-3743.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3743.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -42,11 +42,11 @@ pub fn main() {\n \n     // the following compiles and works properly\n     let v1: Vec2 = a * 3f;\n-    io::println(fmt!(\"%f %f\", v1.x, v1.y));\n+    printfln!(\"%f %f\", v1.x, v1.y);\n \n     // the following compiles but v2 will not be Vec2 yet and\n     // using it later will cause an error that the type of v2\n     // must be known\n     let v2 = a * 3f;\n-    io::println(fmt!(\"%f %f\", v2.x, v2.y)); // error regarding v2's type\n+    printfln!(\"%f %f\", v2.x, v2.y); // error regarding v2's type\n }"}, {"sha": "12ec501788de81e5d14e9b6eb4b34896d0ade368", "filename": "src/test/run-pass/issue-3753.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fissue-3753.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fissue-3753.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3753.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -35,5 +35,5 @@ impl Shape {\n \n pub fn main(){\n     let s = Circle(Point { x: 1f, y: 2f }, 3f);\n-    println(fmt!(\"%f\", s.area(s)));\n+    printfln!(\"%f\", s.area(s));\n }"}, {"sha": "5ec8383dd20b2ab3b881cdf0b335af388fa0f947", "filename": "src/test/run-pass/issue-3794.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fissue-3794.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fissue-3794.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3794.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -19,7 +19,7 @@ struct S {\n \n impl T for S {\n     fn print(&self) {\n-        io::println(fmt!(\"%?\", self));\n+        printfln!(self);\n     }\n }\n "}, {"sha": "98b7741461ec4412467c85d9a829bc36e328f71f", "filename": "src/test/run-pass/issue-3904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fissue-3904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fissue-3904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3904.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -12,7 +12,7 @@\n type ErrPrinter = &fn(&str, &str);\n \n fn example_err(prog: &str, arg: &str) {\n-    io::println(fmt!(\"%s: %s\", prog, arg))\n+    printfln!(\"%s: %s\", prog, arg)\n }\n \n fn exit(+print: ErrPrinter, prog: &str, arg: &str) {"}, {"sha": "857ecb3f9cbcfeb70a300c7b4bd12de7858e9022", "filename": "src/test/run-pass/issue-4241.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4241.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -114,15 +114,15 @@ fn query(cmd: ~[~str], sb: TcpSocketBuf) -> Result {\n   //io::println(cmd);\n   sb.write_str(cmd);\n   let res = parse_response(@sb as @io::Reader);\n-  //io::println(fmt!(\"%?\", res));\n+  //printfln!(res);\n   res\n }\n \n fn query2(cmd: ~[~str]) -> Result {\n   let _cmd = cmd_to_str(cmd);\n     do io::with_str_reader(~\"$3\\r\\nXXX\\r\\n\") |sb| {\n     let res = parse_response(@sb as @io::Reader);\n-    io::println(fmt!(\"%?\", res));\n+    printfln!(res);\n     res\n     }\n }"}, {"sha": "e993d827abb7d7d5fd5321917ab020524c78e6a8", "filename": "src/test/run-pass/issue-4401.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fissue-4401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fissue-4401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4401.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -4,5 +4,5 @@ pub fn main() {\n         count += 1;\n     }\n     assert_eq!(count, 999_999);\n-    println(fmt!(\"%u\", count));\n+    printfln!(\"%u\", count);\n }"}, {"sha": "685a11c79ee32536478c08d8648ef5b358f233ff", "filename": "src/test/run-pass/max-min-classes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fmax-min-classes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fmax-min-classes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmax-min-classes.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -35,5 +35,5 @@ fn Foo(x: int, y: int) -> Foo {\n \n pub fn main() {\n     let foo = Foo(3, 20);\n-    println(fmt!(\"%d %d\", foo.sum(), foo.product()));\n+    printfln!(\"%d %d\", foo.sum(), foo.product());\n }"}, {"sha": "a00bfceab0f4d51305ac0327e302561e9a13a845", "filename": "src/test/run-pass/new-style-constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fnew-style-constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fnew-style-constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-style-constants.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -13,5 +13,5 @@ use std::io::println;\n static FOO: int = 3;\n \n pub fn main() {\n-    println(fmt!(\"%d\", FOO));\n+    printfln!(\"%d\", FOO);\n }"}, {"sha": "488bd65f5484a19d40d1316867dc365a1cf01983", "filename": "src/test/run-pass/new-style-fixed-length-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fnew-style-fixed-length-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fnew-style-fixed-length-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-style-fixed-length-vec.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -13,5 +13,5 @@ use std::io::println;\n static FOO: [int, ..3] = [1, 2, 3];\n \n pub fn main() {\n-    println(fmt!(\"%d %d %d\", FOO[0], FOO[1], FOO[2]));\n+    printfln!(\"%d %d %d\", FOO[0], FOO[1], FOO[2]);\n }"}, {"sha": "3e2308bfcaf660e7c8a51dd66fc48af73b3ed23b", "filename": "src/test/run-pass/newtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fnewtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fnewtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -16,6 +16,6 @@ fn compute(i: mytype) -> int { return i.val + 20; }\n \n pub fn main() {\n     let myval = mytype(Mytype{compute: compute, val: 30});\n-    println(fmt!(\"%d\", compute(myval)));\n+    printfln!(\"%d\", compute(myval));\n     assert_eq!((myval.compute)(myval), 50);\n }"}, {"sha": "e40a183243e01d3a6b34174d1e499e9262bde4a9", "filename": "src/test/run-pass/num-range-rev.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fnum-range-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fnum-range-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnum-range-rev.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -56,13 +56,13 @@ pub fn main() {\n     let primes = [2,3,5,7,11];\n     let mut prod = 1i;\n     for uint_range_rev(5, 0) |i| {\n-        println(fmt!(\"uint 4 downto 0: %u\", i));\n+        printfln!(\"uint 4 downto 0: %u\", i);\n         prod *= int::pow(primes[i], i);\n     }\n     assert_eq!(prod, 11*11*11*11*7*7*7*5*5*3*1);\n     let mut prod = 1i;\n     for int_range_rev(5, 0) |i| {\n-        println(fmt!(\"int 4 downto 0: %d\", i));\n+        printfln!(\"int 4 downto 0: %d\", i);\n         prod *= int::pow(primes[i], i as uint);\n     }\n     assert_eq!(prod, 11*11*11*11*7*7*7*5*5*3*1);"}, {"sha": "d01b22404467a1cc58d1100617f283894413736d", "filename": "src/test/run-pass/num-range.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fnum-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fnum-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnum-range.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -28,7 +28,7 @@ fn uint_range_step(a: uint, b: uint, s: int, it: &fn(uint) -> bool) -> bool {\n }\n \n pub fn main() {\n-    println(fmt!(\"num-range start\"));\n+    println(\"num-range start\");\n     // int and uint have same result for\n     //   Sum{2 <= i < 100} == (Sum{1 <= i <= 99} - 1) == n*(n+1)/2 - 1 for n=99\n     let mut sum = 0u;\n@@ -105,7 +105,7 @@ pub fn main() {\n     let mut saw21 = false;\n     for uint::range_step_inclusive(0, 21, 3) |x| {\n         assert!(x <= 21);\n-        println(fmt!(\"saw: %u\", x));\n+        printfln!(\"saw: %u\", x);\n         if x == 21 { saw21 = true; }\n     }\n     assert!(saw21);"}, {"sha": "9500f83b76b09132b6ea729b5a6758640c0219a6", "filename": "src/test/run-pass/placement-new-arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -17,6 +17,6 @@ pub fn main() {\n     let mut arena = arena::Arena();\n     let p = &mut arena;\n     let x = p.alloc(|| 4u);\n-    print(fmt!(\"%u\", *x));\n+    printf!(\"%u\", *x);\n     assert_eq!(*x, 4u);\n }"}, {"sha": "07a5c10ab1fd1c910f088eeaa2ca63d160538f3e", "filename": "src/test/run-pass/recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Frecursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Frecursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frecursion.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -30,5 +30,5 @@ fn test<T:Dot> (n:int, i:int, first:T, second:T) ->int {\n }\n pub fn main() {\n   let n = test(1, 0, Nil, Nil);\n-  io::println(fmt!(\"%d\", n));\n+  printfln!(\"%d\", n);\n }"}, {"sha": "21d13c722e752aea7e4bdb136f809c8b7c22e5ee", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -667,7 +667,7 @@ pub fn main() {\n \n         let r = u.vals.clone();\n         for r.iter().advance |s| {\n-            println(fmt!(\"val: %s\", *s));\n+            printfln!(\"val: %s\", *s);\n         }\n         error!(\"%?\", u.vals.clone());\n         assert_eq!(u.vals.clone(),"}, {"sha": "dc639bad75efa0e3e20829f0e727d914beef726d", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -171,7 +171,7 @@ pub fn main() {\n     visit_ty::<~[int]>(vv);\n \n     for v.types.iter().advance |s| {\n-        println(fmt!(\"type: %s\", (*s).clone()));\n+        printfln!(\"type: %s\", (*s).clone());\n     }\n     assert_eq!((*v.types).clone(), ~[~\"bool\", ~\"int\", ~\"i8\", ~\"i16\", ~\"[\", ~\"int\", ~\"]\"]);\n }"}, {"sha": "3d8c2b7f56a0d8c24d5dadb41e9b8c6ad304f232", "filename": "src/test/run-pass/struct-pattern-matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fstruct-pattern-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fstruct-pattern-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-pattern-matching.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -16,6 +16,6 @@ struct Foo {\n pub fn main() {\n     let a = Foo { x: 1, y: 2 };\n     match a {\n-        Foo { x: x, y: y } => println(fmt!(\"yes, %d, %d\", x, y))\n+        Foo { x: x, y: y } => printfln!(\"yes, %d, %d\", x, y)\n     }\n }"}, {"sha": "4003a83e80bb07bde4a496b4ac28a59e7bfc403d", "filename": "src/test/run-pass/trait-inheritance-num2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -99,7 +99,7 @@ impl FloatExt for f64 {}\n impl FloatExt for float {}\n \n \n-fn test_float_ext<T:FloatExt>(n: T) { println(fmt!(\"%?\", n < n)) }\n+fn test_float_ext<T:FloatExt>(n: T) { printfln!(n < n) }\n \n pub fn main() {\n     test_float_ext(1f32);"}, {"sha": "2d6b5e1132536054c3b90022e99bbf6738776d4f", "filename": "src/test/run-pass/trait-inheritance-num3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -16,7 +16,7 @@ pub trait NumExt: Eq + Ord + Num + NumCast {}\n impl NumExt for f32 {}\n \n fn num_eq_one<T:NumExt>(n: T) {\n-    println(fmt!(\"%?\", n == NumCast::from(1)))\n+    printfln!(n == NumCast::from(1))\n }\n \n pub fn main() {"}, {"sha": "9f1b930f16835b9502710ca49651f8ad2fa3757d", "filename": "src/test/run-pass/tuple-struct-construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Ftuple-struct-construct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Ftuple-struct-construct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftuple-struct-construct.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -12,5 +12,5 @@ struct Foo(int, int);\n \n pub fn main() {\n     let x = Foo(1, 2);\n-    println(fmt!(\"%?\", x));\n+    printfln!(x);\n }"}, {"sha": "a1b1f36dc413124f0744f877ca8b7a431078d83a", "filename": "src/test/run-pass/tuple-struct-destructuring.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Ftuple-struct-destructuring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Ftuple-struct-destructuring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftuple-struct-destructuring.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -13,7 +13,7 @@ struct Foo(int, int);\n pub fn main() {\n     let x = Foo(1, 2);\n     let Foo(y, z) = x;\n-    println(fmt!(\"%d %d\", y, z));\n+    printfln!(\"%d %d\", y, z);\n     assert_eq!(y, 1);\n     assert_eq!(z, 2);\n }"}, {"sha": "36467189bbd9b8f31a321bbf73ecbc81cca7c25d", "filename": "src/test/run-pass/tuple-struct-matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Ftuple-struct-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Ftuple-struct-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftuple-struct-matching.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -16,7 +16,7 @@ pub fn main() {\n         Foo(a, b) => {\n             assert_eq!(a, 1);\n             assert_eq!(b, 2);\n-            println(fmt!(\"%d %d\", a, b));\n+            printfln!(\"%d %d\", a, b);\n         }\n     }\n }"}, {"sha": "e4c6bcf6791e291c3fc2bc9842641957e5ce8a31", "filename": "src/test/run-pass/vec-fixed-length.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fvec-fixed-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fvec-fixed-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-fixed-length.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -10,5 +10,5 @@\n \n pub fn main() {\n     let x: [int, ..4] = [1, 2, 3, 4];\n-    println(fmt!(\"%d\", x[0]));\n+    printfln!(\"%d\", x[0]);\n }"}, {"sha": "08b62cce715626d347b84c6e2c4255fe53377e77", "filename": "src/test/run-pass/vec-matching-legal-tail-element-borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206ae5752e05f3d22fdfb3f86d261a24e6dc2286/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs?ref=206ae5752e05f3d22fdfb3f86d261a24e6dc2286", "patch": "@@ -5,6 +5,6 @@ pub fn main() {\n             [1, ..ref tail] => &tail[0],\n             _ => ::std::util::unreachable()\n         };\n-        println(fmt!(\"%d\", *el));\n+        printfln!(\"%d\", *el);\n     }\n }"}]}