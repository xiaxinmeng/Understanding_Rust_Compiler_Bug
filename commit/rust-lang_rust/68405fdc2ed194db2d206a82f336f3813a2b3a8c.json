{"sha": "68405fdc2ed194db2d206a82f336f3813a2b3a8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NDA1ZmRjMmVkMTk0ZGIyZDIwNmE4MmYzMzZmMzgxM2EyYjNhOGM=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-02-13T19:08:31Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-02-13T19:10:08Z"}, "message": "debug!(\"paramenv={}paramenv={}paramenv={}paramenv={}\")", "tree": {"sha": "8b3cd9abc8f55bcbde84faef0f5dc37712c4279e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b3cd9abc8f55bcbde84faef0f5dc37712c4279e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68405fdc2ed194db2d206a82f336f3813a2b3a8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68405fdc2ed194db2d206a82f336f3813a2b3a8c", "html_url": "https://github.com/rust-lang/rust/commit/68405fdc2ed194db2d206a82f336f3813a2b3a8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68405fdc2ed194db2d206a82f336f3813a2b3a8c/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e0241c63755ea28045d512b742f50b307874419", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e0241c63755ea28045d512b742f50b307874419", "html_url": "https://github.com/rust-lang/rust/commit/7e0241c63755ea28045d512b742f50b307874419"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "364a8ce3e53d9036aa7ba6855eee1770b39009ea", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68405fdc2ed194db2d206a82f336f3813a2b3a8c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68405fdc2ed194db2d206a82f336f3813a2b3a8c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=68405fdc2ed194db2d206a82f336f3813a2b3a8c", "patch": "@@ -228,6 +228,7 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n         ct: &'tcx ty::Const<'tcx>,\n         vid_is_expected: bool,\n     ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {\n+        debug!(\"unify_const_variable: param_env={:?}\", param_env);\n         let (for_universe, span) = {\n             let mut inner = self.inner.borrow_mut();\n             let variable_table = &mut inner.const_unification_table();"}, {"sha": "3a2496315c38bec1293e60039a19df9c6903cc4b", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68405fdc2ed194db2d206a82f336f3813a2b3a8c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68405fdc2ed194db2d206a82f336f3813a2b3a8c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=68405fdc2ed194db2d206a82f336f3813a2b3a8c", "patch": "@@ -39,6 +39,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         promoted: Option<mir::Promoted>,\n         span: Option<Span>,\n     ) -> EvalToConstValueResult<'tcx> {\n+        debug!(\"const_eval_resolve: param_env={:?}\", param_env);\n         match ty::Instance::resolve_opt_const_arg(self, param_env, def, substs) {\n             Ok(Some(instance)) => {\n                 let cid = GlobalId { instance, promoted };"}, {"sha": "560b00a281d70ab1c63b5a88e7a8dd5a92396a41", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68405fdc2ed194db2d206a82f336f3813a2b3a8c/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68405fdc2ed194db2d206a82f336f3813a2b3a8c/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=68405fdc2ed194db2d206a82f336f3813a2b3a8c", "patch": "@@ -353,6 +353,7 @@ impl<'tcx> Instance<'tcx> {\n         def: ty::WithOptConstParam<DefId>,\n         substs: SubstsRef<'tcx>,\n     ) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n+        debug!(\"resolve_opt_const_arg: param_env={:?},substs={:?}\", param_env, substs);\n         // All regions in the result of this query are erased, so it's\n         // fine to erase all of the input regions.\n "}, {"sha": "3acf53ba3ecc853237ea33ed07571c906900d22f", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/68405fdc2ed194db2d206a82f336f3813a2b3a8c/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68405fdc2ed194db2d206a82f336f3813a2b3a8c/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=68405fdc2ed194db2d206a82f336f3813a2b3a8c", "patch": "@@ -14,6 +14,7 @@ fn resolve_instance<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, (DefId, SubstsRef<'tcx>)>,\n ) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n+    debug!(\"resolve_instance: key = {:?}\", key);\n     let (param_env, (did, substs)) = key.into_parts();\n     if let Some(did) = did.as_local() {\n         if let Some(param_did) = tcx.opt_const_param_of(did) {\n@@ -44,7 +45,7 @@ fn inner_resolve_instance<'tcx>(\n ) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n     let (param_env, (def, substs)) = key.into_parts();\n \n-    debug!(\"resolve(def={:?}, substs={:?})\", def.did, substs);\n+    debug!(\"inner_resolve_instance: key={:?}\", key);\n     let result = if let Some(trait_def_id) = tcx.trait_of_item(def.did) {\n         debug!(\" => associated item, attempting to find impl in param_env {:#?}\", param_env);\n         let item = tcx.associated_item(def.did);\n@@ -93,7 +94,10 @@ fn inner_resolve_instance<'tcx>(\n         };\n         Ok(Some(Instance { def, substs }))\n     };\n-    debug!(\"resolve(def.did={:?}, substs={:?}) = {:?}\", def.did, substs, result);\n+    debug!(\n+        \"inner_resolve_instance: resolve(def.did={:?}, substs={:?}) = {:?}\",\n+        def.did, substs, result\n+    );\n     result\n }\n "}]}