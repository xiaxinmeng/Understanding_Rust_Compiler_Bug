{"sha": "0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlYzRkMzRiM2YwZmExODk3YWNlOTY0NzVhMzJmZjBjOGUxNWIzM2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-16T18:30:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-16T18:30:42Z"}, "message": "auto merge of #9211 : klutzy/rust/win32-fix, r=alexcrichton", "tree": {"sha": "ac2eb072f640149efa009fdf710f7aa8fe2a523a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac2eb072f640149efa009fdf710f7aa8fe2a523a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b", "html_url": "https://github.com/rust-lang/rust/commit/0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "250c3d47dfb56c0ef5581b8ff65958b226dc656a", "url": "https://api.github.com/repos/rust-lang/rust/commits/250c3d47dfb56c0ef5581b8ff65958b226dc656a", "html_url": "https://github.com/rust-lang/rust/commit/250c3d47dfb56c0ef5581b8ff65958b226dc656a"}, {"sha": "6d9c399ee2a462f14631fe2df905d16fad9a8143", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d9c399ee2a462f14631fe2df905d16fad9a8143", "html_url": "https://github.com/rust-lang/rust/commit/6d9c399ee2a462f14631fe2df905d16fad9a8143"}], "stats": {"total": 82, "additions": 47, "deletions": 35}, "files": [{"sha": "25d11d413c06a360c5525de3534303902aee57a5", "filename": "src/libextra/fileinput.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b/src%2Flibextra%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b/src%2Flibextra%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffileinput.rs?ref=0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b", "patch": "@@ -433,7 +433,6 @@ mod test {\n     }\n \n     #[test]\n-    #[ignore(cfg(windows))] // FIXME(#8810): rt::io::file and windows don't agree\n     fn test_make_path_option_vec() {\n         let strs = [~\"some/path\",\n                     ~\"some/other/path\"];\n@@ -448,7 +447,6 @@ mod test {\n     }\n \n     #[test]\n-    #[ignore(cfg(windows))] // FIXME(#8810): rt::io::file and windows don't agree\n     fn test_fileinput_read_byte() {\n         let filenames = make_path_option_vec(vec::from_fn(\n             3,\n@@ -479,7 +477,6 @@ mod test {\n     }\n \n     #[test]\n-    #[ignore(cfg(windows))] // FIXME(#8810): rt::io::file and windows don't agree\n     fn test_fileinput_read() {\n         let filenames = make_path_option_vec(vec::from_fn(\n             3,\n@@ -500,7 +497,6 @@ mod test {\n     }\n \n     #[test]\n-    #[ignore(cfg(windows))] // FIXME(#8810): rt::io::file and windows don't agree\n     fn test_input_vec() {\n         let mut all_lines = ~[];\n         let filenames = make_path_option_vec(vec::from_fn(\n@@ -524,7 +520,6 @@ mod test {\n     }\n \n     #[test]\n-    #[ignore(cfg(windows))] // FIXME(#8810): rt::io::file and windows don't agree\n     fn test_input_vec_state() {\n         let filenames = make_path_option_vec(vec::from_fn(\n             3,\n@@ -547,7 +542,6 @@ mod test {\n     }\n \n     #[test]\n-    #[ignore(cfg(windows))] // FIXME(#8810): rt::io::file and windows don't agree\n     fn test_empty_files() {\n         let filenames = make_path_option_vec(vec::from_fn(\n             3,\n@@ -572,7 +566,6 @@ mod test {\n     }\n \n     #[test]\n-    #[ignore(cfg(windows))] // FIXME(#8810): rt::io::file and windows don't agree\n     fn test_no_trailing_newline() {\n         let f1 =\n             Some(Path(\"tmp/lib-fileinput-test-no-trailing-newline-1.tmp\"));\n@@ -598,7 +591,6 @@ mod test {\n \n \n     #[test]\n-    #[ignore(cfg(windows))] // FIXME(#8810): rt::io::file and windows don't agree\n     fn test_next_file() {\n         let filenames = make_path_option_vec(vec::from_fn(\n             3,\n@@ -630,7 +622,6 @@ mod test {\n \n     #[test]\n     #[should_fail]\n-    #[ignore(cfg(windows))] // FIXME(#8810): rt::io::file and windows don't agree\n     fn test_input_vec_missing_file() {\n         do input_vec(make_path_option_vec([~\"this/file/doesnt/exist\"], true)) |line| {\n             println(line);"}, {"sha": "c45f2af8f7ec792cd74897ae1a7026eb39e61b4f", "filename": "src/libstd/os.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b", "patch": "@@ -1135,18 +1135,19 @@ pub fn last_os_error() -> ~str {\n         #[fixed_stack_segment]; #[inline(never)];\n \n         use libc::types::os::arch::extra::DWORD;\n-        use libc::types::os::arch::extra::LPSTR;\n+        use libc::types::os::arch::extra::LPWSTR;\n         use libc::types::os::arch::extra::LPVOID;\n+        use libc::types::os::arch::extra::WCHAR;\n \n         #[cfg(target_arch = \"x86\")]\n         #[link_name = \"kernel32\"]\n         #[abi = \"stdcall\"]\n         extern \"stdcall\" {\n-            fn FormatMessageA(flags: DWORD,\n+            fn FormatMessageW(flags: DWORD,\n                               lpSrc: LPVOID,\n                               msgId: DWORD,\n                               langId: DWORD,\n-                              buf: LPSTR,\n+                              buf: LPWSTR,\n                               nsize: DWORD,\n                               args: *c_void)\n                               -> DWORD;\n@@ -1155,11 +1156,11 @@ pub fn last_os_error() -> ~str {\n         #[cfg(target_arch = \"x86_64\")]\n         #[link_name = \"kernel32\"]\n         extern {\n-            fn FormatMessageA(flags: DWORD,\n+            fn FormatMessageW(flags: DWORD,\n                               lpSrc: LPVOID,\n                               msgId: DWORD,\n                               langId: DWORD,\n-                              buf: LPSTR,\n+                              buf: LPWSTR,\n                               nsize: DWORD,\n                               args: *c_void)\n                               -> DWORD;\n@@ -1173,11 +1174,11 @@ pub fn last_os_error() -> ~str {\n         let langId = 0x0800 as DWORD;\n         let err = errno() as DWORD;\n \n-        let mut buf = [0 as c_char, ..TMPBUF_SZ];\n+        let mut buf = [0 as WCHAR, ..TMPBUF_SZ];\n \n         unsafe {\n             do buf.as_mut_buf |buf, len| {\n-                let res = FormatMessageA(FORMAT_MESSAGE_FROM_SYSTEM |\n+                let res = FormatMessageW(FORMAT_MESSAGE_FROM_SYSTEM |\n                                          FORMAT_MESSAGE_IGNORE_INSERTS,\n                                          ptr::mut_null(),\n                                          err,\n@@ -1190,9 +1191,7 @@ pub fn last_os_error() -> ~str {\n                 }\n             }\n \n-            do buf.as_imm_buf |buf, _len| {\n-                str::raw::from_c_str(buf)\n-            }\n+            str::from_utf16(buf)\n         }\n     }\n "}, {"sha": "c24f4eb257e1f8902f5cbe36d8af970e1041d272", "filename": "src/libstd/rt/io/file.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Ffile.rs?ref=0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b", "patch": "@@ -168,7 +168,6 @@ fn file_test_smoke_test_impl() {\n }\n \n #[test]\n-#[ignore(cfg(windows))] // FIXME #8810\n fn file_test_io_smoke_test() {\n     file_test_smoke_test_impl();\n }\n@@ -236,7 +235,6 @@ fn file_test_io_non_positional_read_impl() {\n }\n \n #[test]\n-#[ignore(cfg(windows))] // FIXME #8810\n fn file_test_io_non_positional_read() {\n     file_test_io_non_positional_read_impl();\n }\n@@ -268,8 +266,8 @@ fn file_test_io_seeking_impl() {\n         assert!(tell_pos_post_read == message.len() as u64);\n     }\n }\n+\n #[test]\n-#[ignore(cfg(windows))] // FIXME #8810\n fn file_test_io_seek_and_tell_smoke_test() {\n     file_test_io_seeking_impl();\n }\n@@ -300,8 +298,8 @@ fn file_test_io_seek_and_write_impl() {\n         assert!(read_str == final_msg.to_owned());\n     }\n }\n+\n #[test]\n-#[ignore(cfg(windows))] // FIXME #8810\n fn file_test_io_seek_and_write() {\n     file_test_io_seek_and_write_impl();\n }\n@@ -340,8 +338,8 @@ fn file_test_io_seek_shakedown_impl() {\n         unlink(filename);\n     }\n }\n+\n #[test]\n-#[ignore(cfg(windows))] // FIXME #8810\n fn file_test_io_seek_shakedown() {\n     file_test_io_seek_shakedown_impl();\n }"}, {"sha": "55abc4ab135860f9447b7b94bed40e7ef4818bf9", "filename": "src/libstd/rt/io/net/tcp.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs?ref=0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b", "patch": "@@ -178,12 +178,17 @@ mod test {\n     }\n \n     #[test]\n-    #[ignore(cfg(windows))] // FIXME #8811\n     fn connect_error() {\n         do run_in_mt_newsched_task {\n             let mut called = false;\n             do io_error::cond.trap(|e| {\n-                assert_eq!(e.kind, ConnectionRefused);\n+                let expected_error = if cfg!(unix) {\n+                    ConnectionRefused\n+                } else {\n+                    // On Win32, opening port 1 gives WSAEADDRNOTAVAIL error.\n+                    OtherIoError\n+                };\n+                assert_eq!(e.kind, expected_error);\n                 called = true;\n             }).inside {\n                 let addr = SocketAddr { ip: Ipv4Addr(0, 0, 0, 0), port: 1 };"}, {"sha": "59db8194963bb401205bb564d20a115db6fa7d5f", "filename": "src/libstd/rt/io/support.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b/src%2Flibstd%2Frt%2Fio%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b/src%2Flibstd%2Frt%2Fio%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fsupport.rs?ref=0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b", "patch": "@@ -33,9 +33,8 @@ mod test {\n     use super::PathLike;\n \n     #[test]\n-    #[ignore(cfg(windows))] // FIXME #8812\n     fn path_like_smoke_test() {\n-        let expected = \"/home\";\n+        let expected = if cfg!(unix) { \"/home\" } else { \"C:\\\\\" };\n         let path = Path(expected);\n         path.path_as_str(|p| assert!(p == expected));\n         path.path_as_str(|p| assert!(p == expected));"}, {"sha": "e87e2d4b1e420207a40ad0de7617f3d3646be1ef", "filename": "src/libstd/rt/uv/file.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b/src%2Flibstd%2Frt%2Fuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b/src%2Flibstd%2Frt%2Fuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Ffile.rs?ref=0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b", "patch": "@@ -408,13 +408,11 @@ mod test {\n     }\n \n     #[test]\n-    #[ignore(cfg(windows))] // FIXME #8814\n     fn file_test_full_simple() {\n         file_test_full_simple_impl();\n     }\n \n     #[test]\n-    #[ignore(cfg(windows))] // FIXME #8814\n     fn file_test_full_simple_sync() {\n         file_test_full_simple_impl_sync();\n     }"}, {"sha": "b930ea2437ea86aa4eeb5186d19c056e6a560d5a", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b", "patch": "@@ -1740,7 +1740,6 @@ fn test_read_read_read() {\n }\n \n #[test]\n-#[ignore(cfg(windows))] // FIXME #8816\n fn test_udp_twice() {\n     do run_in_mt_newsched_task {\n         let server_addr = next_test_ip4();\n@@ -1892,7 +1891,6 @@ fn file_test_uvio_full_simple_impl() {\n }\n \n #[test]\n-#[ignore(cfg(windows))] // FIXME #8816\n fn file_test_uvio_full_simple() {\n     do run_in_mt_newsched_task {\n         file_test_uvio_full_simple_impl();"}, {"sha": "8f3cef4d2388322e1057eea6c6a34bc616b11598", "filename": "src/libstd/rt/uv/uvll.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs?ref=0ec4d34b3f0fa1897ace96475a32ff0c8e15b33b", "patch": "@@ -237,6 +237,7 @@ pub enum uv_handle_type {\n     UV_HANDLE_TYPE_MAX\n }\n \n+#[cfg(unix)]\n #[deriving(Eq)]\n pub enum uv_req_type {\n     UV_UNKNOWN_REQ,\n@@ -251,6 +252,31 @@ pub enum uv_req_type {\n     UV_REQ_TYPE_MAX\n }\n \n+// uv_req_type may have additional fields defined by UV_REQ_TYPE_PRIVATE.\n+// See UV_REQ_TYPE_PRIVATE at libuv/include/uv-win.h\n+#[cfg(windows)]\n+#[deriving(Eq)]\n+pub enum uv_req_type {\n+    UV_UNKNOWN_REQ,\n+    UV_REQ,\n+    UV_CONNECT,\n+    UV_WRITE,\n+    UV_SHUTDOWN,\n+    UV_UDP_SEND,\n+    UV_FS,\n+    UV_WORK,\n+    UV_GETADDRINFO,\n+    UV_ACCEPT,\n+    UV_FS_EVENT_REQ,\n+    UV_POLL_REQ,\n+    UV_PROCESS_EXIT,\n+    UV_READ,\n+    UV_UDP_RECV,\n+    UV_WAKEUP,\n+    UV_SIGNAL_REQ,\n+    UV_REQ_TYPE_MAX\n+}\n+\n #[deriving(Eq)]\n pub enum uv_membership {\n     UV_LEAVE_GROUP,\n@@ -298,10 +324,8 @@ fn handle_sanity_check() {\n }\n \n #[test]\n-#[ignore(cfg(windows))] // FIXME #8817\n-#[fixed_stack_segment]\n-#[inline(never)]\n fn request_sanity_check() {\n+    #[fixed_stack_segment]; #[inline(never)];\n     unsafe {\n         assert_eq!(UV_REQ_TYPE_MAX as uint, rust_uv_req_type_max());\n     }"}]}