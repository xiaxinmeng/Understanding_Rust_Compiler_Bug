{"sha": "0e660d8a79062ba3c664822a72ae782cb8c38da7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNjYwZDhhNzkwNjJiYTNjNjY0ODIyYTcyYWU3ODJjYjhjMzhkYTc=", "commit": {"author": {"name": "Janusz Marcinkiewicz", "email": "virrages@gmail.com", "date": "2019-11-23T02:41:12Z"}, "committer": {"name": "Janusz Marcinkiewicz", "email": "virrages@gmail.com", "date": "2019-11-23T02:41:12Z"}, "message": "Add error reporting on nested keywords inside 'enum' definition", "tree": {"sha": "7f968a5aa46311dad16b9ae0acb968279720228f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f968a5aa46311dad16b9ae0acb968279720228f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e660d8a79062ba3c664822a72ae782cb8c38da7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e660d8a79062ba3c664822a72ae782cb8c38da7", "html_url": "https://github.com/rust-lang/rust/commit/0e660d8a79062ba3c664822a72ae782cb8c38da7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e660d8a79062ba3c664822a72ae782cb8c38da7/comments", "author": {"login": "VirrageS", "id": 3855799, "node_id": "MDQ6VXNlcjM4NTU3OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3855799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VirrageS", "html_url": "https://github.com/VirrageS", "followers_url": "https://api.github.com/users/VirrageS/followers", "following_url": "https://api.github.com/users/VirrageS/following{/other_user}", "gists_url": "https://api.github.com/users/VirrageS/gists{/gist_id}", "starred_url": "https://api.github.com/users/VirrageS/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VirrageS/subscriptions", "organizations_url": "https://api.github.com/users/VirrageS/orgs", "repos_url": "https://api.github.com/users/VirrageS/repos", "events_url": "https://api.github.com/users/VirrageS/events{/privacy}", "received_events_url": "https://api.github.com/users/VirrageS/received_events", "type": "User", "site_admin": false}, "committer": {"login": "VirrageS", "id": 3855799, "node_id": "MDQ6VXNlcjM4NTU3OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3855799?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VirrageS", "html_url": "https://github.com/VirrageS", "followers_url": "https://api.github.com/users/VirrageS/followers", "following_url": "https://api.github.com/users/VirrageS/following{/other_user}", "gists_url": "https://api.github.com/users/VirrageS/gists{/gist_id}", "starred_url": "https://api.github.com/users/VirrageS/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VirrageS/subscriptions", "organizations_url": "https://api.github.com/users/VirrageS/orgs", "repos_url": "https://api.github.com/users/VirrageS/repos", "events_url": "https://api.github.com/users/VirrageS/events{/privacy}", "received_events_url": "https://api.github.com/users/VirrageS/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a449535bbc7912c4adc1bbf2ab2738d0442f212c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a449535bbc7912c4adc1bbf2ab2738d0442f212c", "html_url": "https://github.com/rust-lang/rust/commit/a449535bbc7912c4adc1bbf2ab2738d0442f212c"}], "stats": {"total": 71, "additions": 70, "deletions": 1}, "files": [{"sha": "712715705e1ed85a0f84c0ebc14e9f7ca6744f22", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0e660d8a79062ba3c664822a72ae782cb8c38da7/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e660d8a79062ba3c664822a72ae782cb8c38da7/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=0e660d8a79062ba3c664822a72ae782cb8c38da7", "patch": "@@ -9,14 +9,15 @@ use syntax::ast::{PathSegment, IsAuto, Constness, IsAsync, Unsafety, Defaultness\n use syntax::ast::{Visibility, VisibilityKind, Mutability, FnHeader, ForeignItem, ForeignItemKind};\n use syntax::ast::{Ty, TyKind, Generics, TraitRef, EnumDef, VariantData, StructField};\n use syntax::ast::{Mac, MacDelimiter, Block, BindingMode, FnDecl, FnSig, SelfKind, Param};\n+use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::ThinVec;\n use syntax::token;\n use syntax::tokenstream::{TokenTree, TokenStream};\n use syntax::source_map::{self, respan, Span};\n use syntax::struct_span_err;\n use syntax_pos::BytePos;\n-use syntax_pos::symbol::{kw, sym};\n+use syntax_pos::symbol::{kw, sym, Symbol};\n \n use rustc_error_codes::*;\n \n@@ -1341,6 +1342,10 @@ impl<'a> Parser<'a> {\n             let vlo = self.token.span;\n \n             let vis = self.parse_visibility(FollowedByType::No)?;\n+            if !self.recover_nested_adt_item(kw::Enum)? {\n+                // Item already parsed, we need to skip this variant.\n+                continue\n+            }\n             let ident = self.parse_ident()?;\n \n             let struct_def = if self.check(&token::OpenDelim(token::Brace)) {\n@@ -1742,6 +1747,36 @@ impl<'a> Parser<'a> {\n         ).emit();\n     }\n \n+    /// Checks if current token is one of tokens which cannot be nested like `kw::Enum`. In case\n+    /// it is, we try to parse the item and report error about nested types.\n+    fn recover_nested_adt_item(&mut self, keyword: Symbol) -> PResult<'a, bool> {\n+        if self.token.is_keyword(kw::Enum) ||\n+            self.token.is_keyword(kw::Struct) ||\n+            self.token.is_keyword(kw::Union)  {\n+\n+            let prev_token = self.token.clone();\n+            let item = self.parse_item()?;\n+            if self.token == token::Comma {\n+                self.bump();\n+            }\n+\n+            let mut err = self.struct_span_err(\n+                prev_token.span,\n+                &format!(\"`{}` definition cannot be nested inside `{}`\", pprust::token_to_string(&prev_token), keyword),\n+            );\n+            err.span_suggestion(\n+                item.unwrap().span,\n+                &format!(\"consider creating a new `{}` definition instead of nesting\", pprust::token_to_string(&prev_token)),\n+                String::new(),\n+                Applicability::MaybeIncorrect,\n+            );\n+            err.emit();\n+            // We successfully parsed the item but we must inform the caller about nested problem.\n+            return Ok(false)\n+        }\n+        Ok(true)\n+    }\n+\n     fn mk_item(&self, span: Span, ident: Ident, kind: ItemKind, vis: Visibility,\n                attrs: Vec<Attribute>) -> P<Item> {\n         P(Item {"}, {"sha": "80957b8a14c238184184a1c837cca51bd707d54c", "filename": "src/test/ui/enum/nested-enum.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e660d8a79062ba3c664822a72ae782cb8c38da7/src%2Ftest%2Fui%2Fenum%2Fnested-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e660d8a79062ba3c664822a72ae782cb8c38da7/src%2Ftest%2Fui%2Fenum%2Fnested-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fnested-enum.rs?ref=0e660d8a79062ba3c664822a72ae782cb8c38da7", "patch": "@@ -0,0 +1,8 @@\n+enum Foo {\n+    enum Bar { Baz }, //~ ERROR `enum` definition cannot be nested inside `enum`\n+    struct Quux { field: u8 }, //~ ERROR `struct` definition cannot be nested inside `enum`\n+    union Wibble { field: u8 }, //~ ERROR `union` definition cannot be nested inside `enum`\n+    Bat,\n+}\n+\n+fn main() { }"}, {"sha": "7d6f57e88a8269b08fe008ff1a31d98b1d5f8482", "filename": "src/test/ui/enum/nested-enum.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0e660d8a79062ba3c664822a72ae782cb8c38da7/src%2Ftest%2Fui%2Fenum%2Fnested-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e660d8a79062ba3c664822a72ae782cb8c38da7/src%2Ftest%2Fui%2Fenum%2Fnested-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fnested-enum.stderr?ref=0e660d8a79062ba3c664822a72ae782cb8c38da7", "patch": "@@ -0,0 +1,26 @@\n+error: `enum` definition cannot be nested inside `enum`\n+  --> $DIR/nested-enum.rs:2:5\n+   |\n+LL |     enum Bar { Baz },\n+   |     ^^^^------------\n+   |     |\n+   |     help: consider creating a new `enum` definition instead of nesting\n+\n+error: `struct` definition cannot be nested inside `enum`\n+  --> $DIR/nested-enum.rs:3:5\n+   |\n+LL |     struct Quux { field: u8 },\n+   |     ^^^^^^-------------------\n+   |     |\n+   |     help: consider creating a new `struct` definition instead of nesting\n+\n+error: `union` definition cannot be nested inside `enum`\n+  --> $DIR/nested-enum.rs:4:5\n+   |\n+LL |     union Wibble { field: u8 },\n+   |     ^^^^^---------------------\n+   |     |\n+   |     help: consider creating a new `union` definition instead of nesting\n+\n+error: aborting due to 3 previous errors\n+"}]}