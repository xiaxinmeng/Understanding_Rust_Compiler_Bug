{"sha": "d8e247e38c9ce6746a595d374cf260b46ac54f27", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZTI0N2UzOGM5Y2U2NzQ2YTU5NWQzNzRjZjI2MGI0NmFjNTRmMjc=", "commit": {"author": {"name": "ltdk", "email": "usr@ltdk.xyz", "date": "2021-06-13T18:00:15Z"}, "committer": {"name": "ltdk", "email": "usr@ltdk.xyz", "date": "2021-06-13T18:00:15Z"}, "message": "More lerp tests, altering lerp docs", "tree": {"sha": "0fb040e3e24ae2c2564ad78364c8df861675d254", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fb040e3e24ae2c2564ad78364c8df861675d254"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8e247e38c9ce6746a595d374cf260b46ac54f27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8e247e38c9ce6746a595d374cf260b46ac54f27", "html_url": "https://github.com/rust-lang/rust/commit/d8e247e38c9ce6746a595d374cf260b46ac54f27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8e247e38c9ce6746a595d374cf260b46ac54f27/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0865acd22b9f0fa2d2ac0bcec61b479e4b3613d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0865acd22b9f0fa2d2ac0bcec61b479e4b3613d9", "html_url": "https://github.com/rust-lang/rust/commit/0865acd22b9f0fa2d2ac0bcec61b479e4b3613d9"}], "stats": {"total": 144, "additions": 118, "deletions": 26}, "files": [{"sha": "00cab72564f94fc52a5f79224691a44b1c68d2d2", "filename": "library/std/src/f32.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d8e247e38c9ce6746a595d374cf260b46ac54f27/library%2Fstd%2Fsrc%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e247e38c9ce6746a595d374cf260b46ac54f27/library%2Fstd%2Fsrc%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32.rs?ref=d8e247e38c9ce6746a595d374cf260b46ac54f27", "patch": "@@ -879,19 +879,27 @@ impl f32 {\n \n     /// Linear interpolation between `start` and `end`.\n     ///\n-    /// This enables the calculation of a \"smooth\" transition between `start` and `end`,\n-    /// where start is represented by `self == 0.0` and `end` is represented by `self == 1.0`.\n-    ///\n-    /// Values below 0.0 or above 1.0 are allowed, and in general this function closely\n-    /// resembles the value of `start + self * (end - start)`, plus additional guarantees.\n-    ///\n-    /// Those guarantees are, assuming that all values are [`finite`]:\n-    ///\n-    /// * The value at 0.0 is always `start` and the value at 1.0 is always `end` (exactness)\n-    /// * If `start == end`, the value at any point will always be `start == end` (consistency)\n-    /// * The values will always move in the direction from `start` to `end` (monotonicity)\n-    ///\n-    /// [`finite`]: #method.is_finite\n+    /// This enables linear interpolation between `start` and `end`, where start is represented by\n+    /// `self == 0.0` and `end` is represented by `self == 1.0`. This is the basis of all\n+    /// \"transition\", \"easing\", or \"step\" functions; if you change `self` from 0.0 to 1.0\n+    /// at a given rate, the result will change from `start` to `end` at a similar rate.\n+    ///\n+    /// Values below 0.0 or above 1.0 are allowed, allowing you to extrapolate values outside the\n+    /// range from `start` to `end`. This also is useful for transition functions which might\n+    /// move slightly past the end or start for a desired effect. Mathematically, the values\n+    /// returned are equivalent to `start + self * (end - start)`, although we make a few specific\n+    /// guarantees that are useful specifically to linear interpolation.\n+    ///\n+    /// These guarantees are:\n+    ///\n+    /// * If `start` and `end` are [finite], the value at 0.0 is always `start` and the\n+    ///   value at 1.0 is always `end`. (exactness)\n+    /// * If `start` and `end` are [finite], the values will always move in the direction from\n+    ///   `start` to `end` (monotonicity)\n+    /// * If `self` is [finite] and `start == end`, the value at any point will always be\n+    ///   `start == end`. (consistency)\n+    ///\n+    /// [finite]: #method.is_finite\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[unstable(feature = \"float_interpolation\", issue = \"71015\")]\n     pub fn lerp(self, start: f32, end: f32) -> f32 {"}, {"sha": "fe66a73afd63ab7ef6d55f5dfe708640e22cde46", "filename": "library/std/src/f32/tests.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d8e247e38c9ce6746a595d374cf260b46ac54f27/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e247e38c9ce6746a595d374cf260b46ac54f27/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs?ref=d8e247e38c9ce6746a595d374cf260b46ac54f27", "patch": "@@ -760,8 +760,11 @@ fn test_total_cmp() {\n \n #[test]\n fn test_lerp_exact() {\n+    // simple values\n     assert_eq!(f32::lerp(0.0, 2.0, 4.0), 2.0);\n     assert_eq!(f32::lerp(1.0, 2.0, 4.0), 4.0);\n+\n+    // boundary values\n     assert_eq!(f32::lerp(0.0, f32::MIN, f32::MAX), f32::MIN);\n     assert_eq!(f32::lerp(1.0, f32::MIN, f32::MAX), f32::MAX);\n }\n@@ -770,11 +773,50 @@ fn test_lerp_exact() {\n fn test_lerp_consistent() {\n     assert_eq!(f32::lerp(f32::MAX, f32::MIN, f32::MIN), f32::MIN);\n     assert_eq!(f32::lerp(f32::MIN, f32::MAX, f32::MAX), f32::MAX);\n+\n+    // as long as t is finite, a/b can be infinite\n+    assert_eq!(f32::lerp(f32::MAX, f32::NEG_INFINITY, f32::NEG_INFINITY), f32::NEG_INFINITY);\n+    assert_eq!(f32::lerp(f32::MIN, f32::INFINITY, f32::INFINITY), f32::INFINITY);\n+}\n+\n+#[test]\n+fn test_lerp_nan_infinite() {\n+    // non-finite t is not NaN if a/b different\n+    assert!(!f32::lerp(f32::INFINITY, f32::MIN, f32::MAX).is_nan());\n+    assert!(!f32::lerp(f32::NEG_INFINITY, f32::MIN, f32::MAX).is_nan());\n }\n \n #[test]\n fn test_lerp_values() {\n+    // just a few basic values\n     assert_eq!(f32::lerp(0.25, 1.0, 2.0), 1.25);\n     assert_eq!(f32::lerp(0.50, 1.0, 2.0), 1.50);\n     assert_eq!(f32::lerp(0.75, 1.0, 2.0), 1.75);\n }\n+\n+#[test]\n+fn test_lerp_monotonic() {\n+    // near 0\n+    let below_zero = f32::lerp(-f32::EPSILON, f32::MIN, f32::MAX);\n+    let zero = f32::lerp(0.0, f32::MIN, f32::MAX);\n+    let above_zero = f32::lerp(f32::EPSILON, f32::MIN, f32::MAX);\n+    assert!(below_zero <= zero);\n+    assert!(zero <= above_zero);\n+    assert!(below_zero <= above_zero);\n+\n+    // near 0.5\n+    let below_half = f32::lerp(0.5 - f32::EPSILON, f32::MIN, f32::MAX);\n+    let half = f32::lerp(0.5, f32::MIN, f32::MAX);\n+    let above_half = f32::lerp(0.5 + f32::EPSILON, f32::MIN, f32::MAX);\n+    assert!(below_half <= half);\n+    assert!(half <= above_half);\n+    assert!(below_half <= above_half);\n+\n+    // near 1\n+    let below_one = f32::lerp(1.0 - f32::EPSILON, f32::MIN, f32::MAX);\n+    let one = f32::lerp(1.0, f32::MIN, f32::MAX);\n+    let above_one = f32::lerp(1.0 + f32::EPSILON, f32::MIN, f32::MAX);\n+    assert!(below_one <= one);\n+    assert!(one <= above_one);\n+    assert!(below_one <= above_one);\n+}"}, {"sha": "ff41f999dd56578f0b146f9566fed9d049e69b77", "filename": "library/std/src/f64.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d8e247e38c9ce6746a595d374cf260b46ac54f27/library%2Fstd%2Fsrc%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e247e38c9ce6746a595d374cf260b46ac54f27/library%2Fstd%2Fsrc%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64.rs?ref=d8e247e38c9ce6746a595d374cf260b46ac54f27", "patch": "@@ -881,19 +881,27 @@ impl f64 {\n \n     /// Linear interpolation between `start` and `end`.\n     ///\n-    /// This enables the calculation of a \"smooth\" transition between `start` and `end`,\n-    /// where start is represented by `self == 0.0` and `end` is represented by `self == 1.0`.\n-    ///\n-    /// Values below 0.0 or above 1.0 are allowed, and in general this function closely\n-    /// resembles the value of `start + self * (end - start)`, plus additional guarantees.\n-    ///\n-    /// Those guarantees are, assuming that all values are [`finite`]:\n-    ///\n-    /// * The value at 0.0 is always `start` and the value at 1.0 is always `end` (exactness)\n-    /// * If `start == end`, the value at any point will always be `start == end` (consistency)\n-    /// * The values will always move in the direction from `start` to `end` (monotonicity)\n-    ///\n-    /// [`finite`]: #method.is_finite\n+    /// This enables linear interpolation between `start` and `end`, where start is represented by\n+    /// `self == 0.0` and `end` is represented by `self == 1.0`. This is the basis of all\n+    /// \"transition\", \"easing\", or \"step\" functions; if you change `self` from 0.0 to 1.0\n+    /// at a given rate, the result will change from `start` to `end` at a similar rate.\n+    ///\n+    /// Values below 0.0 or above 1.0 are allowed, allowing you to extrapolate values outside the\n+    /// range from `start` to `end`. This also is useful for transition functions which might\n+    /// move slightly past the end or start for a desired effect. Mathematically, the values\n+    /// returned are equivalent to `start + self * (end - start)`, although we make a few specific\n+    /// guarantees that are useful specifically to linear interpolation.\n+    ///\n+    /// These guarantees are:\n+    ///\n+    /// * If `start` and `end` are [finite], the value at 0.0 is always `start` and the\n+    ///   value at 1.0 is always `end`. (exactness)\n+    /// * If `start` and `end` are [finite], the values will always move in the direction from\n+    ///   `start` to `end` (monotonicity)\n+    /// * If `self` is [finite] and `start == end`, the value at any point will always be\n+    ///   `start == end`. (consistency)\n+    ///\n+    /// [finite]: #method.is_finite\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[unstable(feature = \"float_interpolation\", issue = \"71015\")]\n     pub fn lerp(self, start: f64, end: f64) -> f64 {"}, {"sha": "04cb0109261a48068d54261a7c3cb381ed458220", "filename": "library/std/src/f64/tests.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d8e247e38c9ce6746a595d374cf260b46ac54f27/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8e247e38c9ce6746a595d374cf260b46ac54f27/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs?ref=d8e247e38c9ce6746a595d374cf260b46ac54f27", "patch": "@@ -756,8 +756,11 @@ fn test_total_cmp() {\n \n #[test]\n fn test_lerp_exact() {\n+    // simple values\n     assert_eq!(f64::lerp(0.0, 2.0, 4.0), 2.0);\n     assert_eq!(f64::lerp(1.0, 2.0, 4.0), 4.0);\n+\n+    // boundary values\n     assert_eq!(f64::lerp(0.0, f64::MIN, f64::MAX), f64::MIN);\n     assert_eq!(f64::lerp(1.0, f64::MIN, f64::MAX), f64::MAX);\n }\n@@ -766,11 +769,42 @@ fn test_lerp_exact() {\n fn test_lerp_consistent() {\n     assert_eq!(f64::lerp(f64::MAX, f64::MIN, f64::MIN), f64::MIN);\n     assert_eq!(f64::lerp(f64::MIN, f64::MAX, f64::MAX), f64::MAX);\n+\n+    // as long as t is finite, a/b can be infinite\n+    assert_eq!(f64::lerp(f64::MAX, f64::NEG_INFINITY, f64::NEG_INFINITY), f64::NEG_INFINITY);\n+    assert_eq!(f64::lerp(f64::MIN, f64::INFINITY, f64::INFINITY), f64::INFINITY);\n+}\n+\n+#[test]\n+fn test_lerp_nan_infinite() {\n+    // non-finite t is not NaN if a/b different\n+    assert!(!f64::lerp(f64::INFINITY, f64::MIN, f64::MAX).is_nan());\n+    assert!(!f64::lerp(f64::NEG_INFINITY, f64::MIN, f64::MAX).is_nan());\n }\n \n #[test]\n fn test_lerp_values() {\n+    // just a few basic values\n     assert_eq!(f64::lerp(0.25, 1.0, 2.0), 1.25);\n     assert_eq!(f64::lerp(0.50, 1.0, 2.0), 1.50);\n     assert_eq!(f64::lerp(0.75, 1.0, 2.0), 1.75);\n }\n+\n+#[test]\n+fn test_lerp_monotonic() {\n+    // near 0\n+    let below_zero = f64::lerp(-f64::EPSILON, f64::MIN, f64::MAX);\n+    let zero = f64::lerp(0.0, f64::MIN, f64::MAX);\n+    let above_zero = f64::lerp(f64::EPSILON, f64::MIN, f64::MAX);\n+    assert!(below_zero <= zero);\n+    assert!(zero <= above_zero);\n+    assert!(below_zero <= above_zero);\n+\n+    // near 1\n+    let below_one = f64::lerp(1.0 - f64::EPSILON, f64::MIN, f64::MAX);\n+    let one = f64::lerp(1.0, f64::MIN, f64::MAX);\n+    let above_one = f64::lerp(1.0 + f64::EPSILON, f64::MIN, f64::MAX);\n+    assert!(below_one <= one);\n+    assert!(one <= above_one);\n+    assert!(below_one <= above_one);\n+}"}]}