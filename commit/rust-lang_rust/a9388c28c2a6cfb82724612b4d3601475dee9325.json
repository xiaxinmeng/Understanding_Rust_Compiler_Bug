{"sha": "a9388c28c2a6cfb82724612b4d3601475dee9325", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5Mzg4YzI4YzJhNmNmYjgyNzI0NjEyYjRkMzYwMTQ3NWRlZTkzMjU=", "commit": {"author": {"name": "Anthony Ramine", "email": "n.oxyde@gmail.com", "date": "2019-03-16T11:16:25Z"}, "committer": {"name": "Anthony Ramine", "email": "n.oxyde@gmail.com", "date": "2019-03-16T11:16:25Z"}, "message": "Tweak documentation of RefCell::borrow_state", "tree": {"sha": "0e1c3e0730fc53064fb995a6b0fa0493289c9899", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e1c3e0730fc53064fb995a6b0fa0493289c9899"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9388c28c2a6cfb82724612b4d3601475dee9325", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9388c28c2a6cfb82724612b4d3601475dee9325", "html_url": "https://github.com/rust-lang/rust/commit/a9388c28c2a6cfb82724612b4d3601475dee9325", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9388c28c2a6cfb82724612b4d3601475dee9325/comments", "author": {"login": "nox", "id": 123095, "node_id": "MDQ6VXNlcjEyMzA5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/123095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nox", "html_url": "https://github.com/nox", "followers_url": "https://api.github.com/users/nox/followers", "following_url": "https://api.github.com/users/nox/following{/other_user}", "gists_url": "https://api.github.com/users/nox/gists{/gist_id}", "starred_url": "https://api.github.com/users/nox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nox/subscriptions", "organizations_url": "https://api.github.com/users/nox/orgs", "repos_url": "https://api.github.com/users/nox/repos", "events_url": "https://api.github.com/users/nox/events{/privacy}", "received_events_url": "https://api.github.com/users/nox/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nox", "id": 123095, "node_id": "MDQ6VXNlcjEyMzA5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/123095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nox", "html_url": "https://github.com/nox", "followers_url": "https://api.github.com/users/nox/followers", "following_url": "https://api.github.com/users/nox/following{/other_user}", "gists_url": "https://api.github.com/users/nox/gists{/gist_id}", "starred_url": "https://api.github.com/users/nox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nox/subscriptions", "organizations_url": "https://api.github.com/users/nox/orgs", "repos_url": "https://api.github.com/users/nox/repos", "events_url": "https://api.github.com/users/nox/events{/privacy}", "received_events_url": "https://api.github.com/users/nox/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fab71dd0469840c349c236d8c3caa89fbbfb8fc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/fab71dd0469840c349c236d8c3caa89fbbfb8fc5", "html_url": "https://github.com/rust-lang/rust/commit/fab71dd0469840c349c236d8c3caa89fbbfb8fc5"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "fe5cc8bd2740d9ae5d74b014e513b894626965f9", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a9388c28c2a6cfb82724612b4d3601475dee9325/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9388c28c2a6cfb82724612b4d3601475dee9325/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=a9388c28c2a6cfb82724612b4d3601475dee9325", "patch": "@@ -765,10 +765,14 @@ impl<T> RefCell<T> {\n }\n \n impl<T: ?Sized> RefCell<T> {\n-    /// Query the current state of this `RefCell`\n+    /// Queries the current state of this `RefCell`.\n     ///\n-    /// The returned value can be dispatched on to determine if a call to\n-    /// `borrow` or `borrow_mut` would succeed.\n+    /// A return value of `BorrowState::Writing` signals that this `RefCell`\n+    /// is currently mutably borrowed, while `BorrowState::Reading` signals\n+    /// that it is immutably borrowed.\n+    ///\n+    /// This is mostly useful in rare use cases with `RefCell::as_ptr` to\n+    /// access the data without changing its borrow state, use with care.\n     ///\n     /// # Examples\n     ///\n@@ -780,9 +784,9 @@ impl<T: ?Sized> RefCell<T> {\n     /// let c = RefCell::new(5);\n     ///\n     /// match c.borrow_state() {\n-    ///     BorrowState::Writing => println!(\"Cannot be borrowed\"),\n-    ///     BorrowState::Reading => println!(\"Cannot be borrowed mutably\"),\n-    ///     BorrowState::Unused => println!(\"Can be borrowed (mutably as well)\"),\n+    ///     BorrowState::Writing => println!(\"currently borrowed mutably\"),\n+    ///     BorrowState::Reading => println!(\"currently borrowed immutably\"),\n+    ///     BorrowState::Unused => println!(\"not borrowed\"),\n     /// }\n     /// ```\n     #[unstable(feature = \"borrow_state\", issue = \"27733\")]"}]}