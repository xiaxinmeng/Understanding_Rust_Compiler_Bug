{"sha": "377d1a984cd2a53327092b90aa1d8b7e22d1e347", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3N2QxYTk4NGNkMmE1MzMyNzA5MmI5MGFhMWQ4YjdlMjJkMWUzNDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-06T17:42:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-06T17:42:32Z"}, "message": "Auto merge of #84559 - jackh726:issue-84398, r=nikomatsakis\n\nDeduplicate ParamCandidates with the same value except for bound vars\n\nFixes #84398\n\nThis is kind of a hack. I wonder if we can get other types of candidates that are the same except for bound vars. This won't be a problem with Chalk, since we don't really need to know that there are two different \"candidates\" if they both give the same final substitution.\n\nr? `@nikomatsakis`", "tree": {"sha": "31123fc32dd8c0a30252d48d8e1b600aee63b426", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31123fc32dd8c0a30252d48d8e1b600aee63b426"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/377d1a984cd2a53327092b90aa1d8b7e22d1e347", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/377d1a984cd2a53327092b90aa1d8b7e22d1e347", "html_url": "https://github.com/rust-lang/rust/commit/377d1a984cd2a53327092b90aa1d8b7e22d1e347", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/377d1a984cd2a53327092b90aa1d8b7e22d1e347/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca", "html_url": "https://github.com/rust-lang/rust/commit/d44f647ffcff0e1ff2c0f45b6a0ce9796d80f1ca"}, {"sha": "c1ef0f3050c3575d864740e14b4e49b36bb3dae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1ef0f3050c3575d864740e14b4e49b36bb3dae1", "html_url": "https://github.com/rust-lang/rust/commit/c1ef0f3050c3575d864740e14b4e49b36bb3dae1"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "727285e4927a00f61fdb2157de7d3f7355df9dbf", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/377d1a984cd2a53327092b90aa1d8b7e22d1e347/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/377d1a984cd2a53327092b90aa1d8b7e22d1e347/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=377d1a984cd2a53327092b90aa1d8b7e22d1e347", "patch": "@@ -1361,7 +1361,17 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ) => false,\n \n             (ParamCandidate(other), ParamCandidate(victim)) => {\n-                if other.value == victim.value && victim.constness == Constness::NotConst {\n+                let value_same_except_bound_vars = other.value.skip_binder()\n+                    == victim.value.skip_binder()\n+                    && !other.value.skip_binder().has_escaping_bound_vars();\n+                if value_same_except_bound_vars {\n+                    // See issue #84398. In short, we can generate multiple ParamCandidates which are\n+                    // the same except for unused bound vars. Just pick the one with the fewest bound vars\n+                    // or the current one if tied (they should both evaluate to the same answer). This is\n+                    // probably best characterized as a \"hack\", since we might prefer to just do our\n+                    // best to *not* create essentially duplicate candidates in the first place.\n+                    other.value.bound_vars().len() <= victim.value.bound_vars().len()\n+                } else if other.value == victim.value && victim.constness == Constness::NotConst {\n                     // Drop otherwise equivalent non-const candidates in favor of const candidates.\n                     true\n                 } else {"}, {"sha": "1912fa59b79905af603e5e76fbdbbcc734a8f7e0", "filename": "src/test/ui/lifetimes/issue-84398.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/377d1a984cd2a53327092b90aa1d8b7e22d1e347/src%2Ftest%2Fui%2Flifetimes%2Fissue-84398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/377d1a984cd2a53327092b90aa1d8b7e22d1e347/src%2Ftest%2Fui%2Flifetimes%2Fissue-84398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-84398.rs?ref=377d1a984cd2a53327092b90aa1d8b7e22d1e347", "patch": "@@ -0,0 +1,20 @@\n+// check-pass\n+\n+pub trait Deserialize<'de>: Sized {}\n+pub trait DeserializeOwned: for<'de> Deserialize<'de> {}\n+\n+pub trait Extensible {\n+    type Config;\n+}\n+\n+// The `C` here generates a `C: Sized` candidate\n+pub trait Installer<C> {\n+    fn init<B: Extensible<Config = C>>(&mut self) -> ()\n+    where\n+        // This clause generates a `for<'de> C: Sized` candidate\n+        B::Config: DeserializeOwned,\n+    {\n+    }\n+}\n+\n+fn main() {}"}]}