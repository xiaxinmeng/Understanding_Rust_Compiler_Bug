{"sha": "1fcfee674a569b296d0da391af113a3776c749a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmY2ZlZTY3NGE1NjliMjk2ZDBkYTM5MWFmMTEzYTM3NzZjNzQ5YTE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-07T22:45:11Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-07T22:46:08Z"}, "message": "rustc: Add a str_eq lang item for pattern matching", "tree": {"sha": "c4c956d1cb2f929f13ee6a29b26143a2e1cb535f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4c956d1cb2f929f13ee6a29b26143a2e1cb535f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fcfee674a569b296d0da391af113a3776c749a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fcfee674a569b296d0da391af113a3776c749a1", "html_url": "https://github.com/rust-lang/rust/commit/1fcfee674a569b296d0da391af113a3776c749a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fcfee674a569b296d0da391af113a3776c749a1/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2572e8035522bd2002fab4ef777ad0290312ac71", "url": "https://api.github.com/repos/rust-lang/rust/commits/2572e8035522bd2002fab4ef777ad0290312ac71", "html_url": "https://github.com/rust-lang/rust/commit/2572e8035522bd2002fab4ef777ad0290312ac71"}], "stats": {"total": 57, "additions": 32, "deletions": 25}, "files": [{"sha": "003f2a888c12f214975314e0426eb16dd1bb520a", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1fcfee674a569b296d0da391af113a3776c749a1/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fcfee674a569b296d0da391af113a3776c749a1/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=1fcfee674a569b296d0da391af113a3776c749a1", "patch": "@@ -713,6 +713,7 @@ Section: Comparing strings\n */\n \n /// Bytewise slice equality\n+#[lang=\"str_eq\"]\n pure fn eq_slice(a: &str, b: &str) -> bool {\n     do as_buf(a) |ap, alen| {\n         do as_buf(b) |bp, blen| {"}, {"sha": "31f12a4b355ad2d74007c94c60912a06ea6be013", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1fcfee674a569b296d0da391af113a3776c749a1/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fcfee674a569b296d0da391af113a3776c749a1/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=1fcfee674a569b296d0da391af113a3776c749a1", "patch": "@@ -542,6 +542,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::Writer, item: @item,\n         encode_type_param_bounds(ebml_w, ecx, tps);\n         encode_type(ecx, ebml_w, node_id_to_type(tcx, item.id));\n         encode_path(ecx, ebml_w, path, ast_map::path_name(item.ident));\n+        encode_attributes(ebml_w, item.attrs);\n         if tps.len() > 0u || should_inline(item.attrs) {\n             ecx.encode_inlined_item(ecx, ebml_w, path, ii_item(item));\n         } else {"}, {"sha": "2cf26904b0d3d44f4f2e3df9f2389c6424481cb1", "filename": "src/rustc/middle/lang_items.rs", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/1fcfee674a569b296d0da391af113a3776c749a1/src%2Frustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fcfee674a569b296d0da391af113a3776c749a1/src%2Frustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flang_items.rs?ref=1fcfee674a569b296d0da391af113a3776c749a1", "patch": "@@ -13,8 +13,8 @@ use driver::session::session;\n use metadata::csearch::{each_path, get_item_attrs};\n use metadata::cstore::{iter_crate_data};\n use metadata::decoder::{dl_def, dl_field, dl_impl};\n-use syntax::ast::{crate, def_id, def_ty, lit_str, meta_item, meta_list};\n-use syntax::ast::{meta_name_value, meta_word};\n+use syntax::ast::{crate, def_fn, def_id, def_ty, lit_str, meta_item};\n+use syntax::ast::{meta_list, meta_name_value, meta_word};\n use syntax::ast_util::{local_def};\n use syntax::visit::{default_simple_visitor, mk_simple_visitor};\n use syntax::visit::{visit_crate, visit_item};\n@@ -23,26 +23,28 @@ use std::map::{hashmap, str_hash};\n use str_eq = str::eq;\n \n struct LanguageItems {\n-    mut const_trait: Option<def_id>;\n-    mut copy_trait: Option<def_id>;\n-    mut send_trait: Option<def_id>;\n-    mut owned_trait: Option<def_id>;\n-\n-    mut add_trait: Option<def_id>;\n-    mut sub_trait: Option<def_id>;\n-    mut mul_trait: Option<def_id>;\n-    mut div_trait: Option<def_id>;\n-    mut modulo_trait: Option<def_id>;\n-    mut neg_trait: Option<def_id>;\n-    mut bitxor_trait: Option<def_id>;\n-    mut bitand_trait: Option<def_id>;\n-    mut bitor_trait: Option<def_id>;\n-    mut shl_trait: Option<def_id>;\n-    mut shr_trait: Option<def_id>;\n-    mut index_trait: Option<def_id>;\n-\n-    mut eq_trait: Option<def_id>;\n-    mut ord_trait: Option<def_id>;\n+    mut const_trait: Option<def_id>,\n+    mut copy_trait: Option<def_id>,\n+    mut send_trait: Option<def_id>,\n+    mut owned_trait: Option<def_id>,\n+\n+    mut add_trait: Option<def_id>,\n+    mut sub_trait: Option<def_id>,\n+    mut mul_trait: Option<def_id>,\n+    mut div_trait: Option<def_id>,\n+    mut modulo_trait: Option<def_id>,\n+    mut neg_trait: Option<def_id>,\n+    mut bitxor_trait: Option<def_id>,\n+    mut bitand_trait: Option<def_id>,\n+    mut bitor_trait: Option<def_id>,\n+    mut shl_trait: Option<def_id>,\n+    mut shr_trait: Option<def_id>,\n+    mut index_trait: Option<def_id>,\n+\n+    mut eq_trait: Option<def_id>,\n+    mut ord_trait: Option<def_id>,\n+\n+    mut str_eq_fn: Option<def_id>\n }\n \n mod LanguageItems {\n@@ -67,7 +69,9 @@ mod LanguageItems {\n             index_trait: None,\n \n             eq_trait: None,\n-            ord_trait: None\n+            ord_trait: None,\n+\n+            str_eq_fn: None\n         }\n     }\n }\n@@ -99,6 +103,8 @@ fn LanguageItemCollector(crate: @crate, session: session,\n     item_refs.insert(~\"eq\", &mut items.eq_trait);\n     item_refs.insert(~\"ord\", &mut items.ord_trait);\n \n+    item_refs.insert(~\"str_eq\", &mut items.str_eq_fn);\n+\n     LanguageItemCollector {\n         crate: crate,\n         session: session,\n@@ -117,7 +123,6 @@ struct LanguageItemCollector {\n \n     fn match_and_collect_meta_item(item_def_id: def_id,\n                                    meta_item: meta_item) {\n-\n         match meta_item.node {\n             meta_name_value(key, literal) => {\n                 match literal.node {\n@@ -183,7 +188,7 @@ struct LanguageItemCollector {\n             for each_path(crate_store, crate_number) |path_entry| {\n                 let def_id;\n                 match path_entry.def_like {\n-                    dl_def(def_ty(did)) => {\n+                    dl_def(def_ty(did)) | dl_def(def_fn(did, _)) => {\n                         def_id = did;\n                     }\n                     dl_def(_) | dl_impl(_) | dl_field => {"}]}