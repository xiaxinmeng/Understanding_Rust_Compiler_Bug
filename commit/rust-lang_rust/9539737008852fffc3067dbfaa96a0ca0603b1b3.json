{"sha": "9539737008852fffc3067dbfaa96a0ca0603b1b3", "node_id": "C_kwDOAAsO6NoAKDk1Mzk3MzcwMDg4NTJmZmZjMzA2N2RiZmFhOTZhMGNhMDYwM2IxYjM", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-02-01T03:49:09Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-02-06T14:22:12Z"}, "message": "Make an optimal cold path for query_cache_hit", "tree": {"sha": "f8fc839f564b28c252ddb3c31103d25925172001", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8fc839f564b28c252ddb3c31103d25925172001"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9539737008852fffc3067dbfaa96a0ca0603b1b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9539737008852fffc3067dbfaa96a0ca0603b1b3", "html_url": "https://github.com/rust-lang/rust/commit/9539737008852fffc3067dbfaa96a0ca0603b1b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9539737008852fffc3067dbfaa96a0ca0603b1b3/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e60ccfc6a9e91a7b26f368c9fee40bd22831450f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e60ccfc6a9e91a7b26f368c9fee40bd22831450f", "html_url": "https://github.com/rust-lang/rust/commit/e60ccfc6a9e91a7b26f368c9fee40bd22831450f"}], "stats": {"total": 60, "additions": 28, "deletions": 32}, "files": [{"sha": "7fab8954cb19f1911ff8654061770315bbf0e0a7", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9539737008852fffc3067dbfaa96a0ca0603b1b3/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9539737008852fffc3067dbfaa96a0ca0603b1b3/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=9539737008852fffc3067dbfaa96a0ca0603b1b3", "patch": "@@ -11,6 +11,7 @@\n #![feature(associated_type_bounds)]\n #![feature(auto_traits)]\n #![feature(cell_leak)]\n+#![feature(core_intrinsics)]\n #![feature(extend_one)]\n #![feature(hash_raw_entry)]\n #![feature(hasher_prefixfree_extras)]"}, {"sha": "3aca03f6e5c63cbae99bda4e58c09b05cddcf065", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9539737008852fffc3067dbfaa96a0ca0603b1b3/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9539737008852fffc3067dbfaa96a0ca0603b1b3/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=9539737008852fffc3067dbfaa96a0ca0603b1b3", "patch": "@@ -88,6 +88,7 @@ use std::borrow::Borrow;\n use std::collections::hash_map::Entry;\n use std::error::Error;\n use std::fs;\n+use std::intrinsics::unlikely;\n use std::path::Path;\n use std::process;\n use std::sync::Arc;\n@@ -393,13 +394,20 @@ impl SelfProfilerRef {\n     }\n \n     /// Record a query in-memory cache hit.\n-    #[inline(never)]\n+    #[inline(always)]\n     pub fn query_cache_hit(&self, query_invocation_id: QueryInvocationId) {\n-        self.instant_query_event(\n-            |profiler| profiler.query_cache_hit_event_kind,\n-            query_invocation_id,\n-            EventFilter::QUERY_CACHE_HITS,\n-        );\n+        #[inline(never)]\n+        #[cold]\n+        fn cold_call(profiler_ref: &SelfProfilerRef, query_invocation_id: QueryInvocationId) {\n+            profiler_ref.instant_query_event(\n+                |profiler| profiler.query_cache_hit_event_kind,\n+                query_invocation_id,\n+            );\n+        }\n+\n+        if unlikely(self.event_filter_mask.contains(EventFilter::QUERY_CACHE_HITS)) {\n+            cold_call(self, query_invocation_id);\n+        }\n     }\n \n     /// Start profiling a query being blocked on a concurrent execution.\n@@ -444,20 +452,15 @@ impl SelfProfilerRef {\n         &self,\n         event_kind: fn(&SelfProfiler) -> StringId,\n         query_invocation_id: QueryInvocationId,\n-        event_filter: EventFilter,\n     ) {\n-        drop(self.exec(event_filter, |profiler| {\n-            let event_id = StringId::new_virtual(query_invocation_id.0);\n-            let thread_id = get_thread_id();\n-\n-            profiler.profiler.record_instant_event(\n-                event_kind(profiler),\n-                EventId::from_virtual(event_id),\n-                thread_id,\n-            );\n-\n-            TimingGuard::none()\n-        }));\n+        let event_id = StringId::new_virtual(query_invocation_id.0);\n+        let thread_id = get_thread_id();\n+        let profiler = self.profiler.as_ref().unwrap();\n+        profiler.profiler.record_instant_event(\n+            event_kind(profiler),\n+            EventId::from_virtual(event_id),\n+            thread_id,\n+        );\n     }\n \n     pub fn with_profiler(&self, f: impl FnOnce(&SelfProfiler)) {"}, {"sha": "9443ded704d63059c8ae48cdd7acc859876ecc74", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9539737008852fffc3067dbfaa96a0ca0603b1b3/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9539737008852fffc3067dbfaa96a0ca0603b1b3/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=9539737008852fffc3067dbfaa96a0ca0603b1b3", "patch": "@@ -47,7 +47,7 @@ impl DepNodeIndex {\n }\n \n impl From<DepNodeIndex> for QueryInvocationId {\n-    #[inline]\n+    #[inline(always)]\n     fn from(dep_node_index: DepNodeIndex) -> Self {\n         QueryInvocationId(dep_node_index.as_u32())\n     }"}, {"sha": "f59d71124ecbf4452d6ada8139d557ac3cfd2c10", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9539737008852fffc3067dbfaa96a0ca0603b1b3/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9539737008852fffc3067dbfaa96a0ca0603b1b3/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=9539737008852fffc3067dbfaa96a0ca0603b1b3", "patch": "@@ -346,9 +346,7 @@ where\n {\n     match cache.lookup(&key) {\n         Some((value, index)) => {\n-            if std::intrinsics::unlikely(tcx.profiler().enabled()) {\n-                tcx.profiler().query_cache_hit(index.into());\n-            }\n+            tcx.profiler().query_cache_hit(index.into());\n             tcx.dep_graph().read_index(index);\n             Some(value)\n         }\n@@ -408,9 +406,7 @@ where\n                 panic!(\"value must be in cache after waiting\")\n             };\n \n-            if std::intrinsics::unlikely(qcx.dep_context().profiler().enabled()) {\n-                qcx.dep_context().profiler().query_cache_hit(index.into());\n-            }\n+            qcx.dep_context().profiler().query_cache_hit(index.into());\n             query_blocked_prof_timer.finish_with_query_invocation_id(index.into());\n \n             (v, Some(index))\n@@ -722,9 +718,7 @@ where\n         }\n         Some((_, dep_node_index)) => {\n             dep_graph.read_index(dep_node_index);\n-            if std::intrinsics::unlikely(qcx.dep_context().profiler().enabled()) {\n-                qcx.dep_context().profiler().query_cache_hit(dep_node_index.into());\n-            }\n+            qcx.dep_context().profiler().query_cache_hit(dep_node_index.into());\n             (false, None)\n         }\n     }\n@@ -778,9 +772,7 @@ where\n     // Ensure that only one of them runs the query.\n     let cache = Q::query_cache(qcx);\n     if let Some((_, index)) = cache.lookup(&key) {\n-        if std::intrinsics::unlikely(qcx.dep_context().profiler().enabled()) {\n-            qcx.dep_context().profiler().query_cache_hit(index.into());\n-        }\n+        qcx.dep_context().profiler().query_cache_hit(index.into());\n         return;\n     }\n "}]}