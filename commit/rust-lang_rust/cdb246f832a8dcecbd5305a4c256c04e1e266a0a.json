{"sha": "cdb246f832a8dcecbd5305a4c256c04e1e266a0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYjI0NmY4MzJhOGRjZWNiZDUzMDVhNGMyNTZjMDRlMWUyNjZhMGE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-05T02:00:59Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-05T02:00:59Z"}, "message": "bench: Add threadring shootout benchmark", "tree": {"sha": "9a5361efa0d9a543584fb559aed6784dfee05cca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a5361efa0d9a543584fb559aed6784dfee05cca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdb246f832a8dcecbd5305a4c256c04e1e266a0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdb246f832a8dcecbd5305a4c256c04e1e266a0a", "html_url": "https://github.com/rust-lang/rust/commit/cdb246f832a8dcecbd5305a4c256c04e1e266a0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdb246f832a8dcecbd5305a4c256c04e1e266a0a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e81840607266d8c9af6ac5ddf187174c4689e26b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e81840607266d8c9af6ac5ddf187174c4689e26b", "html_url": "https://github.com/rust-lang/rust/commit/e81840607266d8c9af6ac5ddf187174c4689e26b"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "73f993f27287fded2aa2d9493789c6ba7eab1779", "filename": "src/test/bench/shootout-threadring.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/cdb246f832a8dcecbd5305a4c256c04e1e266a0a/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdb246f832a8dcecbd5305a4c256c04e1e266a0a/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-threadring.rs?ref=cdb246f832a8dcecbd5305a4c256c04e1e266a0a", "patch": "@@ -0,0 +1,53 @@\n+// Based on threadring.erlang by Jira Isa\n+use std;\n+\n+// FIXME: Need a cleaner way to request the runtime to exit\n+#[nolink]\n+native mod libc {\n+    fn exit(status: ctypes::c_int);\n+}\n+\n+const n_threads: int = 503;\n+\n+fn start(+token: int) {\n+    import iter::*;\n+\n+    let p = comm::port();\n+    let ch = iter::foldl(bind int::range(2, n_threads + 1, _),\n+                         comm::chan(p)) { |ch, i|\n+        // FIXME: Some twiddling because we don't have a standard\n+        // reverse range function yet\n+        let id = n_threads + 2 - i;\n+        let {to_child, _} = task::spawn_connected::<int, int> {|p, _ch|\n+            roundtrip(id, p, ch)\n+        };\n+        to_child\n+    };\n+    comm::send(ch, token);\n+    roundtrip(1, p, ch);\n+}\n+\n+fn roundtrip(id: int, p: comm::port<int>, ch: comm::chan<int>) {\n+    while (true) {\n+        alt comm::recv(p) {\n+          1 {\n+            std::io::println(#fmt(\"%d\\n\", id));\n+            libc::exit(0i32);\n+          }\n+          token {\n+            #debug(\"%d %d\", id, token);\n+            comm::send(ch, token - 1);\n+          }\n+        }\n+    }\n+}\n+\n+fn main(args: [str]) {\n+    let token = if vec::len(args) < 2u {\n+        1000\n+    } else {\n+        int::from_str(args[1])\n+    };\n+\n+    start(token);\n+}\n\\ No newline at end of file"}]}