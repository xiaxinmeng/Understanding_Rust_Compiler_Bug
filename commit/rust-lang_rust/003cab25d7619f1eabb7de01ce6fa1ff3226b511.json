{"sha": "003cab25d7619f1eabb7de01ce6fa1ff3226b511", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwM2NhYjI1ZDc2MTlmMWVhYmI3ZGUwMWNlNmZhMWZmMzIyNmI1MTE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-08-24T20:48:20Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-08-29T16:34:53Z"}, "message": "Generalize `async_idents` to all new keywords\n\nThis commit generalizes the existing `async_idents` lint to easily encompass\nother identifiers that will be keywords in future editions. The new lint is\ncalled `keyword_idents` and the old `async_idents` lint is registered as renamed\nto this new lint.\n\nAs a proof of concept the `try` keyword was added to this list as it looks to be\nlisted as a keyword in the 2018 edition only. The `await` keyword was not added\nas it's not listed as a keyword yet.\n\nCloses #53077", "tree": {"sha": "6e62271b0521e6d8436e98160b738740f6caa93c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e62271b0521e6d8436e98160b738740f6caa93c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/003cab25d7619f1eabb7de01ce6fa1ff3226b511", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/003cab25d7619f1eabb7de01ce6fa1ff3226b511", "html_url": "https://github.com/rust-lang/rust/commit/003cab25d7619f1eabb7de01ce6fa1ff3226b511", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/003cab25d7619f1eabb7de01ce6fa1ff3226b511/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6b35b0e1115f008796e8313574e4a4739b6d39d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6b35b0e1115f008796e8313574e4a4739b6d39d", "html_url": "https://github.com/rust-lang/rust/commit/e6b35b0e1115f008796e8313574e4a4739b6d39d"}], "stats": {"total": 170, "additions": 125, "deletions": 45}, "files": [{"sha": "5cc862a58d35a3496875452086b834902c33409b", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003cab25d7619f1eabb7de01ce6fa1ff3226b511/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003cab25d7619f1eabb7de01ce6fa1ff3226b511/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=003cab25d7619f1eabb7de01ce6fa1ff3226b511", "patch": "@@ -1046,7 +1046,7 @@ impl<'a> ast_visit::Visitor<'a> for EarlyContext<'a> {\n         self.check_id(id);\n     }\n \n-    fn visit_mac(&mut self, mac: &'ast ast::Mac) {\n+    fn visit_mac(&mut self, mac: &'a ast::Mac) {\n         run_lints!(self, check_mac, mac);\n     }\n }"}, {"sha": "16aa80c34cc1bcad120bc5307bc46ba2893f2e7a", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 46, "deletions": 33, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/003cab25d7619f1eabb7de01ce6fa1ff3226b511/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003cab25d7619f1eabb7de01ce6fa1ff3226b511/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=003cab25d7619f1eabb7de01ce6fa1ff3226b511", "patch": "@@ -46,6 +46,7 @@ use syntax::tokenstream::{TokenTree, TokenStream};\n use syntax::ast;\n use syntax::attr;\n use syntax::source_map::Spanned;\n+use syntax::edition::Edition;\n use syntax::feature_gate::{AttributeGate, AttributeType, Stability, deprecated_attributes};\n use syntax_pos::{BytePos, Span, SyntaxContext};\n use syntax::symbol::keywords;\n@@ -1876,30 +1877,33 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnameableTestFunctions {\n }\n \n declare_lint! {\n-    pub ASYNC_IDENTS,\n+    pub KEYWORD_IDENTS,\n     Allow,\n-    \"detects `async` being used as an identifier\"\n+    \"detects edition keywords being used as an identifier\"\n }\n \n-/// Checks for uses of `async` as an identifier\n+/// Checks for uses of edtion keywords used as an identifier\n #[derive(Clone)]\n-pub struct Async2018;\n+pub struct KeywordIdents;\n \n-impl LintPass for Async2018 {\n+impl LintPass for KeywordIdents {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(ASYNC_IDENTS)\n+        lint_array!(KEYWORD_IDENTS)\n     }\n }\n \n-impl Async2018 {\n+impl KeywordIdents {\n     fn check_tokens(&mut self, cx: &EarlyContext, tokens: TokenStream) {\n         for tt in tokens.into_trees() {\n             match tt {\n                 TokenTree::Token(span, tok) => match tok.ident() {\n                     // only report non-raw idents\n-                    Some((ident, false)) if ident.as_str() == \"async\" => {\n-                        self.report(cx, span.substitute_dummy(ident.span))\n-                    },\n+                    Some((ident, false)) => {\n+                        self.check_ident(cx, ast::Ident {\n+                            span: span.substitute_dummy(ident.span),\n+                            ..ident\n+                        });\n+                    }\n                     _ => {},\n                 }\n                 TokenTree::Delimited(_, ref delim) => {\n@@ -1908,38 +1912,47 @@ impl Async2018 {\n             }\n         }\n     }\n-    fn report(&mut self, cx: &EarlyContext, span: Span) {\n-        // don't lint `r#async`\n-        if cx.sess.parse_sess.raw_identifier_spans.borrow().contains(&span) {\n-            return;\n-        }\n-        let mut lint = cx.struct_span_lint(\n-            ASYNC_IDENTS,\n-            span,\n-            \"`async` is a keyword in the 2018 edition\",\n-        );\n-\n-        // Don't suggest about raw identifiers if the feature isn't active\n-        lint.span_suggestion_with_applicability(\n-            span,\n-            \"you can use a raw identifier to stay compatible\",\n-            \"r#async\".to_string(),\n-            Applicability::MachineApplicable,\n-        );\n-        lint.emit()\n-    }\n }\n \n-impl EarlyLintPass for Async2018 {\n+impl EarlyLintPass for KeywordIdents {\n     fn check_mac_def(&mut self, cx: &EarlyContext, mac_def: &ast::MacroDef, _id: ast::NodeId) {\n         self.check_tokens(cx, mac_def.stream());\n     }\n     fn check_mac(&mut self, cx: &EarlyContext, mac: &ast::Mac) {\n         self.check_tokens(cx, mac.node.tts.clone().into());\n     }\n     fn check_ident(&mut self, cx: &EarlyContext, ident: ast::Ident) {\n-        if ident.as_str() == \"async\" {\n-            self.report(cx, ident.span);\n+        let next_edition = match cx.sess.edition() {\n+            Edition::Edition2015 => {\n+                match &ident.as_str()[..] {\n+                    \"async\" |\n+                    \"try\" => Edition::Edition2018,\n+                    _ => return,\n+                }\n+            }\n+\n+            // no new keywords yet for 2018 edition and beyond\n+            _ => return,\n+        };\n+\n+        // don't lint `r#foo`\n+        if cx.sess.parse_sess.raw_identifier_spans.borrow().contains(&ident.span) {\n+            return;\n         }\n+\n+        let mut lint = cx.struct_span_lint(\n+            KEYWORD_IDENTS,\n+            ident.span,\n+            &format!(\"`{}` is a keyword in the {} edition\",\n+                     ident.as_str(),\n+                     next_edition),\n+        );\n+        lint.span_suggestion_with_applicability(\n+            ident.span,\n+            \"you can use a raw identifier to stay compatible\",\n+            format!(\"r#{}\", ident.as_str()),\n+            Applicability::MachineApplicable,\n+        );\n+        lint.emit()\n     }\n }"}, {"sha": "39abfee5fb9ec851c9d99f23817256857c303262", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/003cab25d7619f1eabb7de01ce6fa1ff3226b511/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003cab25d7619f1eabb7de01ce6fa1ff3226b511/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=003cab25d7619f1eabb7de01ce6fa1ff3226b511", "patch": "@@ -110,7 +110,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     }\n \n     add_pre_expansion_builtin!(sess,\n-        Async2018,\n+        KeywordIdents,\n     );\n \n     add_early_builtin!(sess,\n@@ -240,7 +240,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             edition: Some(Edition::Edition2018),\n         },\n         FutureIncompatibleInfo {\n-            id: LintId::of(ASYNC_IDENTS),\n+            id: LintId::of(KEYWORD_IDENTS),\n             reference: \"issue #49716 <https://github.com/rust-lang/rust/issues/49716>\",\n             edition: Some(Edition::Edition2018),\n         },\n@@ -349,6 +349,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     store.register_renamed(\"bare_trait_object\", \"bare_trait_objects\");\n     store.register_renamed(\"unstable_name_collision\", \"unstable_name_collisions\");\n     store.register_renamed(\"unused_doc_comment\", \"unused_doc_comments\");\n+    store.register_renamed(\"async_idents\", \"keyword_idents\");\n     store.register_removed(\"unknown_features\", \"replaced by an error\");\n     store.register_removed(\"unsigned_negation\", \"replaced by negate_unsigned feature gate\");\n     store.register_removed(\"negate_unsigned\", \"cast a signed value instead\");"}, {"sha": "9343312fdd84f91953475818cb627f318d1b79ab", "filename": "src/test/ui/editions/auxiliary/edition-kw-macro-2015.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003cab25d7619f1eabb7de01ce6fa1ff3226b511/src%2Ftest%2Fui%2Feditions%2Fauxiliary%2Fedition-kw-macro-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003cab25d7619f1eabb7de01ce6fa1ff3226b511/src%2Ftest%2Fui%2Feditions%2Fauxiliary%2Fedition-kw-macro-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fauxiliary%2Fedition-kw-macro-2015.rs?ref=003cab25d7619f1eabb7de01ce6fa1ff3226b511", "patch": "@@ -10,7 +10,7 @@\n \n // edition:2015\n \n-#![allow(async_idents)]\n+#![allow(keyword_idents)]\n \n #[macro_export]\n macro_rules! produces_async {"}, {"sha": "19a7b91624fe339b6b8791060ea21fd06fa8bb2d", "filename": "src/test/ui/editions/auxiliary/edition-kw-macro-2018.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003cab25d7619f1eabb7de01ce6fa1ff3226b511/src%2Ftest%2Fui%2Feditions%2Fauxiliary%2Fedition-kw-macro-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003cab25d7619f1eabb7de01ce6fa1ff3226b511/src%2Ftest%2Fui%2Feditions%2Fauxiliary%2Fedition-kw-macro-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fauxiliary%2Fedition-kw-macro-2018.rs?ref=003cab25d7619f1eabb7de01ce6fa1ff3226b511", "patch": "@@ -10,7 +10,7 @@\n \n // edition:2018\n \n-#![allow(async_idents)]\n+#![allow(keyword_idents)]\n \n #[macro_export]\n macro_rules! produces_async {"}, {"sha": "382c7c1f325a3bf5b8acbbd5bf3d698096bda345", "filename": "src/test/ui/editions/edition-keywords-2015-2015-expansion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003cab25d7619f1eabb7de01ce6fa1ff3226b511/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003cab25d7619f1eabb7de01ce6fa1ff3226b511/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-expansion.rs?ref=003cab25d7619f1eabb7de01ce6fa1ff3226b511", "patch": "@@ -12,7 +12,7 @@\n // aux-build:edition-kw-macro-2015.rs\n // compile-pass\n \n-#![allow(async_idents)]\n+#![allow(keyword_idents)]\n \n #[macro_use]\n extern crate edition_kw_macro_2015;"}, {"sha": "46434daaab9244c12cce7dad984684c326cd8f8f", "filename": "src/test/ui/editions/edition-keywords-2018-2015-expansion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003cab25d7619f1eabb7de01ce6fa1ff3226b511/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003cab25d7619f1eabb7de01ce6fa1ff3226b511/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-expansion.rs?ref=003cab25d7619f1eabb7de01ce6fa1ff3226b511", "patch": "@@ -12,7 +12,7 @@\n // aux-build:edition-kw-macro-2015.rs\n // compile-pass\n \n-#![allow(async_idents)]\n+#![allow(keyword_idents)]\n \n #[macro_use]\n extern crate edition_kw_macro_2015;"}, {"sha": "68d7930e0434af4eb2cfbcabd0f1ff39cae27469", "filename": "src/test/ui/rust-2018/async-ident-allowed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003cab25d7619f1eabb7de01ce6fa1ff3226b511/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003cab25d7619f1eabb7de01ce6fa1ff3226b511/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident-allowed.stderr?ref=003cab25d7619f1eabb7de01ce6fa1ff3226b511", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![deny(rust_2018_compatibility)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: #[deny(async_idents)] implied by #[deny(rust_2018_compatibility)]\n+   = note: #[deny(keyword_idents)] implied by #[deny(rust_2018_compatibility)]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n "}, {"sha": "ef88f835fc83d1fc454d2903c81fc39b1fde44ab", "filename": "src/test/ui/rust-2018/async-ident.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003cab25d7619f1eabb7de01ce6fa1ff3226b511/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/003cab25d7619f1eabb7de01ce6fa1ff3226b511/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.fixed?ref=003cab25d7619f1eabb7de01ce6fa1ff3226b511", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![allow(dead_code, unused_variables, non_camel_case_types, non_upper_case_globals)]\n-#![deny(async_idents)]\n+#![deny(keyword_idents)]\n \n // edition:2015\n // run-rustfix"}, {"sha": "069da7ffcdd4dd4ecd8f594d0994d7dcf7182ff6", "filename": "src/test/ui/rust-2018/async-ident.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003cab25d7619f1eabb7de01ce6fa1ff3226b511/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003cab25d7619f1eabb7de01ce6fa1ff3226b511/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.rs?ref=003cab25d7619f1eabb7de01ce6fa1ff3226b511", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![allow(dead_code, unused_variables, non_camel_case_types, non_upper_case_globals)]\n-#![deny(async_idents)]\n+#![deny(keyword_idents)]\n \n // edition:2015\n // run-rustfix"}, {"sha": "b9bb2e254b44e0fa008efd0e3325382156aa91bf", "filename": "src/test/ui/rust-2018/async-ident.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/003cab25d7619f1eabb7de01ce6fa1ff3226b511/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003cab25d7619f1eabb7de01ce6fa1ff3226b511/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.stderr?ref=003cab25d7619f1eabb7de01ce6fa1ff3226b511", "patch": "@@ -7,8 +7,8 @@ LL | fn async() {} //~ ERROR async\n note: lint level defined here\n   --> $DIR/async-ident.rs:12:9\n    |\n-LL | #![deny(async_idents)]\n-   |         ^^^^^^^^^^^^\n+LL | #![deny(keyword_idents)]\n+   |         ^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n "}, {"sha": "96a0cd0f8e95b024e533f9b94ac387b691810709", "filename": "src/test/ui/rust-2018/try-ident.fixed", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/003cab25d7619f1eabb7de01ce6fa1ff3226b511/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/003cab25d7619f1eabb7de01ce6fa1ff3226b511/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.fixed?ref=003cab25d7619f1eabb7de01ce6fa1ff3226b511", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+// compile-pass\n+\n+#![warn(rust_2018_compatibility)]\n+\n+fn main() {\n+    r#try();\n+}\n+\n+fn r#try() {\n+}"}, {"sha": "ade2e03ff22ba7759cd1c741d96ae9b956a28273", "filename": "src/test/ui/rust-2018/try-ident.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/003cab25d7619f1eabb7de01ce6fa1ff3226b511/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003cab25d7619f1eabb7de01ce6fa1ff3226b511/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.rs?ref=003cab25d7619f1eabb7de01ce6fa1ff3226b511", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+// compile-pass\n+\n+#![warn(rust_2018_compatibility)]\n+\n+fn main() {\n+    try();\n+}\n+\n+fn try() {\n+}"}, {"sha": "72bd81530df7631a82abf822b357b81e8c9f6b33", "filename": "src/test/ui/rust-2018/try-ident.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/003cab25d7619f1eabb7de01ce6fa1ff3226b511/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/003cab25d7619f1eabb7de01ce6fa1ff3226b511/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftry-ident.stderr?ref=003cab25d7619f1eabb7de01ce6fa1ff3226b511", "patch": "@@ -0,0 +1,24 @@\n+warning: `try` is a keyword in the 2018 edition\n+  --> $DIR/try-ident.rs:17:5\n+   |\n+LL |     try();\n+   |     ^^^ help: you can use a raw identifier to stay compatible: `r#try`\n+   |\n+note: lint level defined here\n+  --> $DIR/try-ident.rs:14:9\n+   |\n+LL | #![warn(rust_2018_compatibility)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: #[warn(keyword_idents)] implied by #[warn(rust_2018_compatibility)]\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+warning: `try` is a keyword in the 2018 edition\n+  --> $DIR/try-ident.rs:20:4\n+   |\n+LL | fn try() {\n+   |    ^^^ help: you can use a raw identifier to stay compatible: `r#try`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+"}]}