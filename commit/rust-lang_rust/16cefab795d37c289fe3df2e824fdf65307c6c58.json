{"sha": "16cefab795d37c289fe3df2e824fdf65307c6c58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2Y2VmYWI3OTVkMzdjMjg5ZmUzZGYyZTgyNGZkZjY1MzA3YzZjNTg=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-06-06T12:26:40Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-06-06T18:05:39Z"}, "message": "linked_list: Add method Node::set_next", "tree": {"sha": "0ace08eefe3bf2b13e6cd324cf80cc24ab04412f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ace08eefe3bf2b13e6cd324cf80cc24ab04412f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16cefab795d37c289fe3df2e824fdf65307c6c58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16cefab795d37c289fe3df2e824fdf65307c6c58", "html_url": "https://github.com/rust-lang/rust/commit/16cefab795d37c289fe3df2e824fdf65307c6c58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16cefab795d37c289fe3df2e824fdf65307c6c58/comments", "author": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "committer": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "201852e56ac1c6a2d9d050d12693df8a4b6e936f", "url": "https://api.github.com/repos/rust-lang/rust/commits/201852e56ac1c6a2d9d050d12693df8a4b6e936f", "html_url": "https://github.com/rust-lang/rust/commit/201852e56ac1c6a2d9d050d12693df8a4b6e936f"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "43cefeecdd9dc48e2c3ac940f213abfd79f7a1c3", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/16cefab795d37c289fe3df2e824fdf65307c6c58/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16cefab795d37c289fe3df2e824fdf65307c6c58/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=16cefab795d37c289fe3df2e824fdf65307c6c58", "patch": "@@ -140,12 +140,21 @@ impl<T> Node<T> {\n     fn new(v: T) -> Node<T> {\n         Node{value: v, next: None, prev: Rawlink::none()}\n     }\n+\n+    /// Update the `prev` link on `next`, then set self's next pointer.\n+    ///\n+    /// `self.next` should be `None` when you call this\n+    /// (otherwise a Node is probably being dropped by mistake).\n+    fn set_next(&mut self, mut next: Box<Node<T>>) {\n+        debug_assert!(self.next.is_none());\n+        next.prev = Rawlink::some(self);\n+        self.next = Some(next);\n+    }\n }\n \n-/// Set the .prev field on `next`, then return `Some(next)`\n-fn link_with_prev<T>(mut next: Box<Node<T>>, prev: Rawlink<Node<T>>)\n-                  -> Link<T> {\n-    next.prev = prev;\n+/// Clear the .prev field on `next`, then return `Some(next)`\n+fn link_no_prev<T>(mut next: Box<Node<T>>) -> Link<T> {\n+    next.prev = Rawlink::none();\n     Some(next)\n }\n \n@@ -157,7 +166,7 @@ impl<T> LinkedList<T> {\n         match self.list_head {\n             None => {\n                 self.list_tail = Rawlink::some(&mut *new_head);\n-                self.list_head = link_with_prev(new_head, Rawlink::none());\n+                self.list_head = link_no_prev(new_head);\n             }\n             Some(ref mut head) => {\n                 new_head.prev = Rawlink::none();\n@@ -175,7 +184,7 @@ impl<T> LinkedList<T> {\n         self.list_head.take().map(|mut front_node| {\n             self.length -= 1;\n             match front_node.next.take() {\n-                Some(node) => self.list_head = link_with_prev(node, Rawlink::none()),\n+                Some(node) => self.list_head = link_no_prev(node),\n                 None => self.list_tail = Rawlink::none()\n             }\n             front_node\n@@ -184,12 +193,12 @@ impl<T> LinkedList<T> {\n \n     /// Add a Node last in the list\n     #[inline]\n-    fn push_back_node(&mut self, mut new_tail: Box<Node<T>>) {\n+    fn push_back_node(&mut self, new_tail: Box<Node<T>>) {\n         match unsafe { self.list_tail.resolve_mut() } {\n             None => return self.push_front_node(new_tail),\n             Some(tail) => {\n                 self.list_tail = Rawlink::some(&mut *new_tail);\n-                tail.next = link_with_prev(new_tail, Rawlink::some(tail));\n+                tail.set_next(new_tail);\n             }\n         }\n         self.length += 1;\n@@ -267,7 +276,7 @@ impl<T> LinkedList<T> {\n                 match other.list_head.take() {\n                     None => return,\n                     Some(node) => {\n-                        tail.next = link_with_prev(node, self.list_tail);\n+                        tail.set_next(node);\n                         self.list_tail = o_tail;\n                         self.length += o_length;\n                     }\n@@ -758,8 +767,8 @@ impl<'a, A> IterMut<'a, A> {\n                     Some(prev) => prev,\n                 };\n                 let node_own = prev_node.next.take().unwrap();\n-                ins_node.next = link_with_prev(node_own, Rawlink::some(&mut *ins_node));\n-                prev_node.next = link_with_prev(ins_node, Rawlink::some(prev_node));\n+                ins_node.set_next(node_own);\n+                prev_node.set_next(ins_node);\n                 self.list.length += 1;\n             }\n         }"}]}