{"sha": "8bc43f99e91a94868fe08bb72b7ce66d7656d0b5", "node_id": "C_kwDOAAsO6NoAKDhiYzQzZjk5ZTkxYTk0ODY4ZmUwOGJiNzJiN2NlNjZkNzY1NmQwYjU", "commit": {"author": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-10-17T17:41:49Z"}, "committer": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-10-23T16:59:13Z"}, "message": "Allow specifying multiple alternative suggestions\n\nThis allows porting uses of span_suggestions() to diagnostic structs.\n\nDoesn't work for multipart_suggestions() because the rank would be\nreversed - the struct would specify multiple spans, each of which has\nmultiple possible replacements, while multipart_suggestions() creates\nmultiple possible replacements, each with multiple spans.", "tree": {"sha": "a22595844fc5ab4f427e44a7735dc8d4cf50587f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a22595844fc5ab4f427e44a7735dc8d4cf50587f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bc43f99e91a94868fe08bb72b7ce66d7656d0b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bc43f99e91a94868fe08bb72b7ce66d7656d0b5", "html_url": "https://github.com/rust-lang/rust/commit/8bc43f99e91a94868fe08bb72b7ce66d7656d0b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bc43f99e91a94868fe08bb72b7ce66d7656d0b5/comments", "author": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9be2f35a4c1ed1b04aa4a6945b64763f599259ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/9be2f35a4c1ed1b04aa4a6945b64763f599259ff", "html_url": "https://github.com/rust-lang/rust/commit/9be2f35a4c1ed1b04aa4a6945b64763f599259ff"}], "stats": {"total": 289, "additions": 263, "deletions": 26}, "files": [{"sha": "23f29a24fe79feb71a6385d2dde8f4062a71ab12", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8bc43f99e91a94868fe08bb72b7ce66d7656d0b5/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc43f99e91a94868fe08bb72b7ce66d7656d0b5/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=8bc43f99e91a94868fe08bb72b7ce66d7656d0b5", "patch": "@@ -690,6 +690,24 @@ impl Diagnostic {\n         msg: impl Into<SubdiagnosticMessage>,\n         suggestions: impl Iterator<Item = String>,\n         applicability: Applicability,\n+    ) -> &mut Self {\n+        self.span_suggestions_with_style(\n+            sp,\n+            msg,\n+            suggestions,\n+            applicability,\n+            SuggestionStyle::ShowCode,\n+        )\n+    }\n+\n+    /// [`Diagnostic::span_suggestions()`] but you can set the [`SuggestionStyle`].\n+    pub fn span_suggestions_with_style(\n+        &mut self,\n+        sp: Span,\n+        msg: impl Into<SubdiagnosticMessage>,\n+        suggestions: impl Iterator<Item = String>,\n+        applicability: Applicability,\n+        style: SuggestionStyle,\n     ) -> &mut Self {\n         let mut suggestions: Vec<_> = suggestions.collect();\n         suggestions.sort();\n@@ -706,14 +724,15 @@ impl Diagnostic {\n         self.push_suggestion(CodeSuggestion {\n             substitutions,\n             msg: self.subdiagnostic_message_to_diagnostic_message(msg),\n-            style: SuggestionStyle::ShowCode,\n+            style,\n             applicability,\n         });\n         self\n     }\n \n-    /// Prints out a message with multiple suggested edits of the code.\n-    /// See also [`Diagnostic::span_suggestion()`].\n+    /// Prints out a message with multiple suggested edits of the code, where each edit consists of\n+    /// multiple parts.\n+    /// See also [`Diagnostic::multipart_suggestion()`].\n     pub fn multipart_suggestions(\n         &mut self,\n         msg: impl Into<SubdiagnosticMessage>,\n@@ -745,6 +764,7 @@ impl Diagnostic {\n         });\n         self\n     }\n+\n     /// Prints out a message with a suggested edit of the code. If the suggestion is presented\n     /// inline, it will only show the message and not the suggestion.\n     ///"}, {"sha": "3ea83fd09c794d5092586afe89cdc70a76be9fe5", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bc43f99e91a94868fe08bb72b7ce66d7656d0b5/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc43f99e91a94868fe08bb72b7ce66d7656d0b5/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs?ref=8bc43f99e91a94868fe08bb72b7ce66d7656d0b5", "patch": "@@ -454,7 +454,7 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n \n                 self.formatting_init.extend(code_init);\n                 Ok(quote! {\n-                    #diag.span_suggestion_with_style(\n+                    #diag.span_suggestions_with_style(\n                         #span_field,\n                         rustc_errors::fluent::#slug,\n                         #code_field,"}, {"sha": "fa0ca5a52423af786b2c53bce1e4d6cf6a60874b", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8bc43f99e91a94868fe08bb72b7ce66d7656d0b5/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc43f99e91a94868fe08bb72b7ce66d7656d0b5/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=8bc43f99e91a94868fe08bb72b7ce66d7656d0b5", "patch": "@@ -11,9 +11,11 @@ use crate::diagnostics::utils::{\n };\n use proc_macro2::TokenStream;\n use quote::{format_ident, quote};\n-use syn::{spanned::Spanned, Attribute, Meta, MetaList, MetaNameValue, NestedMeta, Path};\n+use syn::{spanned::Spanned, Attribute, Meta, MetaList, NestedMeta, Path};\n use synstructure::{BindingInfo, Structure, VariantInfo};\n \n+use super::utils::{build_suggestion_code, AllowMultipleAlternatives};\n+\n /// The central struct for constructing the `add_to_diagnostic` method from an annotated struct.\n pub(crate) struct SubdiagnosticDeriveBuilder {\n     diag: syn::Ident,\n@@ -414,30 +416,31 @@ impl<'parent, 'a> SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n                     let nested_name = meta.path().segments.last().unwrap().ident.to_string();\n                     let nested_name = nested_name.as_str();\n \n-                    let Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(value), .. }) = meta else {\n-                        throw_invalid_nested_attr!(attr, &nested_attr);\n-                    };\n-\n                     match nested_name {\n                         \"code\" => {\n-                            let formatted_str = self.build_format(&value.value(), value.span());\n                             let code_field = new_code_ident();\n-                            code.set_once((code_field, formatted_str), span);\n+                            let formatting_init = build_suggestion_code(\n+                                &code_field,\n+                                meta,\n+                                self,\n+                                AllowMultipleAlternatives::No,\n+                            );\n+                            code.set_once((code_field, formatting_init), span);\n                         }\n                         _ => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n                             diag.help(\"`code` is the only valid nested attribute\")\n                         }),\n                     }\n                 }\n \n-                let Some((code_field, formatted_str)) = code.value() else {\n+                let Some((code_field, formatting_init)) = code.value() else {\n                     span_err(span, \"`#[suggestion_part(...)]` attribute without `code = \\\"...\\\"`\")\n                         .emit();\n                     return Ok(quote! {});\n                 };\n                 let binding = info.binding;\n \n-                self.formatting_init.extend(quote! { let #code_field = #formatted_str; });\n+                self.formatting_init.extend(formatting_init);\n                 let code_field = if clone_suggestion_code {\n                     quote! { #code_field.clone() }\n                 } else {"}, {"sha": "374c795d0a6385c81802224989716ab9227b9efa", "filename": "compiler/rustc_macros/src/diagnostics/utils.rs", "status": "modified", "additions": 94, "deletions": 11, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/8bc43f99e91a94868fe08bb72b7ce66d7656d0b5/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc43f99e91a94868fe08bb72b7ce66d7656d0b5/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs?ref=8bc43f99e91a94868fe08bb72b7ce66d7656d0b5", "patch": "@@ -2,7 +2,7 @@ use crate::diagnostics::error::{\n     span_err, throw_invalid_attr, throw_invalid_nested_attr, throw_span_err, DiagnosticDeriveError,\n };\n use proc_macro::Span;\n-use proc_macro2::TokenStream;\n+use proc_macro2::{Ident, TokenStream};\n use quote::{format_ident, quote, ToTokens};\n use std::cell::RefCell;\n use std::collections::{BTreeSet, HashMap};\n@@ -395,6 +395,82 @@ pub(super) fn build_field_mapping<'v>(variant: &VariantInfo<'v>) -> HashMap<Stri\n     fields_map\n }\n \n+#[derive(Copy, Clone, Debug)]\n+pub(super) enum AllowMultipleAlternatives {\n+    No,\n+    Yes,\n+}\n+\n+/// Constructs the `format!()` invocation(s) necessary for a `#[suggestion*(code = \"foo\")]` or\n+/// `#[suggestion*(code(\"foo\", \"bar\"))]` attribute field\n+pub(super) fn build_suggestion_code(\n+    code_field: &Ident,\n+    meta: &Meta,\n+    fields: &impl HasFieldMap,\n+    allow_multiple: AllowMultipleAlternatives,\n+) -> TokenStream {\n+    let values = match meta {\n+        // `code = \"foo\"`\n+        Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(s), .. }) => vec![s],\n+        // `code(\"foo\", \"bar\")`\n+        Meta::List(MetaList { nested, .. }) => {\n+            if let AllowMultipleAlternatives::No = allow_multiple {\n+                span_err(\n+                    meta.span().unwrap(),\n+                    \"expected exactly one string literal for `code = ...`\",\n+                )\n+                .emit();\n+                vec![]\n+            } else if nested.is_empty() {\n+                span_err(\n+                    meta.span().unwrap(),\n+                    \"expected at least one string literal for `code(...)`\",\n+                )\n+                .emit();\n+                vec![]\n+            } else {\n+                nested\n+                    .into_iter()\n+                    .filter_map(|item| {\n+                        if let NestedMeta::Lit(syn::Lit::Str(s)) = item {\n+                            Some(s)\n+                        } else {\n+                            span_err(\n+                                item.span().unwrap(),\n+                                \"`code(...)` must contain only string literals\",\n+                            )\n+                            .emit();\n+                            None\n+                        }\n+                    })\n+                    .collect()\n+            }\n+        }\n+        _ => {\n+            span_err(\n+                meta.span().unwrap(),\n+                r#\"`code = \"...\"`/`code(...)` must contain only string literals\"#,\n+            )\n+            .emit();\n+            vec![]\n+        }\n+    };\n+\n+    if let AllowMultipleAlternatives::Yes = allow_multiple {\n+        let formatted_strings: Vec<_> = values\n+            .into_iter()\n+            .map(|value| fields.build_format(&value.value(), value.span()))\n+            .collect();\n+        quote! { let #code_field = [#(#formatted_strings),*].into_iter(); }\n+    } else if let [value] = values.as_slice() {\n+        let formatted_str = fields.build_format(&value.value(), value.span());\n+        quote! { let #code_field = #formatted_str; }\n+    } else {\n+        // error handled previously\n+        quote! { let #code_field = String::new(); }\n+    }\n+}\n+\n /// Possible styles for suggestion subdiagnostics.\n #[derive(Clone, Copy)]\n pub(super) enum SuggestionKind {\n@@ -571,28 +647,35 @@ impl SubdiagnosticKind {\n             let nested_name = meta.path().segments.last().unwrap().ident.to_string();\n             let nested_name = nested_name.as_str();\n \n-            let value = match meta {\n-                Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(value), .. }) => value,\n+            let string_value = match meta {\n+                Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(value), .. }) => Some(value),\n+\n                 Meta::Path(_) => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n                     diag.help(\"a diagnostic slug must be the first argument to the attribute\")\n                 }),\n-                _ => {\n-                    invalid_nested_attr(attr, &nested_attr).emit();\n-                    continue;\n-                }\n+                _ => None,\n             };\n \n             match (nested_name, &mut kind) {\n                 (\"code\", SubdiagnosticKind::Suggestion { code_field, .. }) => {\n-                    let formatted_str = fields.build_format(&value.value(), value.span());\n-                    let code_init = quote! { let #code_field = #formatted_str; };\n+                    let code_init = build_suggestion_code(\n+                        code_field,\n+                        meta,\n+                        fields,\n+                        AllowMultipleAlternatives::Yes,\n+                    );\n                     code.set_once(code_init, span);\n                 }\n                 (\n                     \"applicability\",\n                     SubdiagnosticKind::Suggestion { ref mut applicability, .. }\n                     | SubdiagnosticKind::MultipartSuggestion { ref mut applicability, .. },\n                 ) => {\n+                    let Some(value) = string_value else {\n+                        invalid_nested_attr(attr, &nested_attr).emit();\n+                        continue;\n+                    };\n+\n                     let value = Applicability::from_str(&value.value()).unwrap_or_else(|()| {\n                         span_err(span, \"invalid applicability\").emit();\n                         Applicability::Unspecified\n@@ -623,7 +706,7 @@ impl SubdiagnosticKind {\n                     init\n                 } else {\n                     span_err(span, \"suggestion without `code = \\\"...\\\"`\").emit();\n-                    quote! { let #code_field: String = unreachable!(); }\n+                    quote! { let #code_field = std::iter::empty(); }\n                 };\n             }\n             SubdiagnosticKind::Label\n@@ -644,7 +727,7 @@ impl quote::IdentFragment for SubdiagnosticKind {\n             SubdiagnosticKind::Note => write!(f, \"note\"),\n             SubdiagnosticKind::Help => write!(f, \"help\"),\n             SubdiagnosticKind::Warn => write!(f, \"warn\"),\n-            SubdiagnosticKind::Suggestion { .. } => write!(f, \"suggestion_with_style\"),\n+            SubdiagnosticKind::Suggestion { .. } => write!(f, \"suggestions_with_style\"),\n             SubdiagnosticKind::MultipartSuggestion { .. } => {\n                 write!(f, \"multipart_suggestion_with_style\")\n             }"}, {"sha": "ca77e483d6ff8dd233fd2327e7aeb45a397f47a7", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8bc43f99e91a94868fe08bb72b7ce66d7656d0b5/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc43f99e91a94868fe08bb72b7ce66d7656d0b5/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=8bc43f99e91a94868fe08bb72b7ce66d7656d0b5", "patch": "@@ -758,3 +758,41 @@ struct WithDocComment {\n     #[primary_span]\n     span: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(compiletest_example)]\n+struct SuggestionsGood {\n+    #[suggestion(code(\"foo\", \"bar\"))]\n+    sub: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(compiletest_example)]\n+struct SuggestionsSingleItem {\n+    #[suggestion(code(\"foo\"))]\n+    sub: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(compiletest_example)]\n+struct SuggestionsNoItem {\n+    #[suggestion(code())]\n+    //~^ ERROR expected at least one string literal for `code(...)`\n+    sub: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(compiletest_example)]\n+struct SuggestionsInvalidItem {\n+    #[suggestion(code(foo))]\n+    //~^ ERROR `code(...)` must contain only string literals\n+    sub: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(compiletest_example)]\n+struct SuggestionsInvalidLiteral {\n+    #[suggestion(code = 3)]\n+    //~^ ERROR `code = \"...\"`/`code(...)` must contain only string literals\n+    sub: Span,\n+}"}, {"sha": "859c272b6ba9c3a98f3381dc93093c50dd3be53b", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8bc43f99e91a94868fe08bb72b7ce66d7656d0b5/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc43f99e91a94868fe08bb72b7ce66d7656d0b5/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=8bc43f99e91a94868fe08bb72b7ce66d7656d0b5", "patch": "@@ -573,6 +573,24 @@ LL |     #[subdiagnostic(eager)]\n    |\n    = help: eager subdiagnostics are not supported on lints\n \n+error: expected at least one string literal for `code(...)`\n+  --> $DIR/diagnostic-derive.rs:779:18\n+   |\n+LL |     #[suggestion(code())]\n+   |                  ^^^^^^\n+\n+error: `code(...)` must contain only string literals\n+  --> $DIR/diagnostic-derive.rs:787:23\n+   |\n+LL |     #[suggestion(code(foo))]\n+   |                       ^^^\n+\n+error: `code = \"...\"`/`code(...)` must contain only string literals\n+  --> $DIR/diagnostic-derive.rs:795:18\n+   |\n+LL |     #[suggestion(code = 3)]\n+   |                  ^^^^^^^^\n+\n error: cannot find attribute `nonsense` in this scope\n   --> $DIR/diagnostic-derive.rs:55:3\n    |\n@@ -647,7 +665,7 @@ LL |         arg: impl IntoDiagnosticArg,\n    |                   ^^^^^^^^^^^^^^^^^ required by this bound in `DiagnosticBuilder::<'a, G>::set_arg`\n    = note: this error originates in the derive macro `Diagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 80 previous errors\n+error: aborting due to 83 previous errors\n \n Some errors have detailed explanations: E0277, E0425.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "efec85eb52c2ec90aaa71856264e86c3d4e4e5a5", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8bc43f99e91a94868fe08bb72b7ce66d7656d0b5/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc43f99e91a94868fe08bb72b7ce66d7656d0b5/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs?ref=8bc43f99e91a94868fe08bb72b7ce66d7656d0b5", "patch": "@@ -661,3 +661,48 @@ enum BL {\n         span: Span,\n     }\n }\n+\n+#[derive(Subdiagnostic)]\n+#[multipart_suggestion(parser_add_paren)]\n+struct BM {\n+    #[suggestion_part(code(\"foo\"))]\n+    //~^ ERROR expected exactly one string literal for `code = ...`\n+    span: Span,\n+    r#type: String,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[multipart_suggestion(parser_add_paren)]\n+struct BN {\n+    #[suggestion_part(code(\"foo\", \"bar\"))]\n+    //~^ ERROR expected exactly one string literal for `code = ...`\n+    span: Span,\n+    r#type: String,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[multipart_suggestion(parser_add_paren)]\n+struct BO {\n+    #[suggestion_part(code(3))]\n+    //~^ ERROR expected exactly one string literal for `code = ...`\n+    span: Span,\n+    r#type: String,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[multipart_suggestion(parser_add_paren)]\n+struct BP {\n+    #[suggestion_part(code())]\n+    //~^ ERROR expected exactly one string literal for `code = ...`\n+    span: Span,\n+    r#type: String,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[multipart_suggestion(parser_add_paren)]\n+struct BQ {\n+    #[suggestion_part(code = 3)]\n+    //~^ ERROR `code = \"...\"`/`code(...)` must contain only string literals\n+    span: Span,\n+    r#type: String,\n+}"}, {"sha": "a85a8711eaca4e983cedf5948977e848446224cd", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.stderr", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8bc43f99e91a94868fe08bb72b7ce66d7656d0b5/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bc43f99e91a94868fe08bb72b7ce66d7656d0b5/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr?ref=8bc43f99e91a94868fe08bb72b7ce66d7656d0b5", "patch": "@@ -415,6 +415,36 @@ error: `#[applicability]` has no effect if all `#[suggestion]`/`#[multipart_sugg\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n+error: expected exactly one string literal for `code = ...`\n+  --> $DIR/subdiagnostic-derive.rs:668:23\n+   |\n+LL |     #[suggestion_part(code(\"foo\"))]\n+   |                       ^^^^^^^^^^^\n+\n+error: expected exactly one string literal for `code = ...`\n+  --> $DIR/subdiagnostic-derive.rs:677:23\n+   |\n+LL |     #[suggestion_part(code(\"foo\", \"bar\"))]\n+   |                       ^^^^^^^^^^^^^^^^^^\n+\n+error: expected exactly one string literal for `code = ...`\n+  --> $DIR/subdiagnostic-derive.rs:686:23\n+   |\n+LL |     #[suggestion_part(code(3))]\n+   |                       ^^^^^^^\n+\n+error: expected exactly one string literal for `code = ...`\n+  --> $DIR/subdiagnostic-derive.rs:695:23\n+   |\n+LL |     #[suggestion_part(code())]\n+   |                       ^^^^^^\n+\n+error: `code = \"...\"`/`code(...)` must contain only string literals\n+  --> $DIR/subdiagnostic-derive.rs:704:23\n+   |\n+LL |     #[suggestion_part(code = 3)]\n+   |                       ^^^^^^^^\n+\n error: cannot find attribute `foo` in this scope\n   --> $DIR/subdiagnostic-derive.rs:63:3\n    |\n@@ -475,6 +505,6 @@ error[E0425]: cannot find value `slug` in module `rustc_errors::fluent`\n LL | #[label(slug)]\n    |         ^^^^ not found in `rustc_errors::fluent`\n \n-error: aborting due to 67 previous errors\n+error: aborting due to 72 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}]}