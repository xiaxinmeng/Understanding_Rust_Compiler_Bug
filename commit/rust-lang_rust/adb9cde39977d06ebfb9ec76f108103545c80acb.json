{"sha": "adb9cde39977d06ebfb9ec76f108103545c80acb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkYjljZGUzOTk3N2QwNmViZmI5ZWM3NmYxMDgxMDM1NDVjODBhY2I=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2011-08-10T14:50:00Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-08-16T22:05:57Z"}, "message": "Remove type parameter and vec/port/chan foo[T] syntax.", "tree": {"sha": "576508b360ded61bd1001935e068c6c0aaafe6e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/576508b360ded61bd1001935e068c6c0aaafe6e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adb9cde39977d06ebfb9ec76f108103545c80acb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adb9cde39977d06ebfb9ec76f108103545c80acb", "html_url": "https://github.com/rust-lang/rust/commit/adb9cde39977d06ebfb9ec76f108103545c80acb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adb9cde39977d06ebfb9ec76f108103545c80acb/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3eba1527127264cb26ec5acffb6d3bcd1558ce9", "html_url": "https://github.com/rust-lang/rust/commit/b3eba1527127264cb26ec5acffb6d3bcd1558ce9"}], "stats": {"total": 25, "additions": 6, "deletions": 19}, "files": [{"sha": "3591322c1cfd0040e13e112c1cd7de8a0ecd72c0", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/adb9cde39977d06ebfb9ec76f108103545c80acb/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb9cde39977d06ebfb9ec76f108103545c80acb/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=adb9cde39977d06ebfb9ec76f108103545c80acb", "patch": "@@ -448,23 +448,17 @@ fn parse_ty_postfix(orig_t: ast::ty_, p: &parser, colons_before_params: bool)\n         -> @ast::ty {\n     let lo = p.get_lo_pos();\n \n-    let seq;\n-    if p.peek() == token::LBRACKET {\n-        p.bump();\n-        seq = parse_seq_to_end(token::RBRACKET, some(token::COMMA),\n-                               bind parse_ty(_, false), p);\n-    } else if colons_before_params && p.peek() == token::MOD_SEP {\n+    if colons_before_params && p.peek() == token::MOD_SEP {\n         p.bump();\n         expect(p, token::LT);\n-        seq = parse_seq_to_gt(some(token::COMMA), bind parse_ty(_, false), p);\n     } else if !colons_before_params && p.peek() == token::LT {\n         p.bump();\n-        seq = parse_seq_to_gt(some(token::COMMA), bind parse_ty(_, false), p);\n     } else {\n         ret @spanned(lo, p.get_lo_pos(), orig_t);\n     }\n \n     // If we're here, we have explicit type parameter instantiation.\n+    let seq = parse_seq_to_gt(some(token::COMMA), bind parse_ty(_, false), p);\n \n     alt orig_t {\n       ast::ty_path(pth, ann) {\n@@ -575,17 +569,10 @@ fn parse_ty(p: &parser, colons_before_params: bool) -> @ast::ty {\n                                parse_type_constraints(p));\n         }\n     } else if (eat_word(p, \"vec\")) {\n-        if p.peek() == token::LBRACKET {\n-            p.bump();\n-            t = ast::ty_vec(parse_mt(p));\n-            hi = p.get_hi_pos();\n-            expect(p, token::RBRACKET);\n-        } else {\n-            expect(p, token::LT);\n-            t = ast::ty_vec(parse_mt(p));\n-            hi = p.get_hi_pos();\n-            expect_gt(p);\n-        }\n+        expect(p, token::LT);\n+        t = ast::ty_vec(parse_mt(p));\n+        hi = p.get_hi_pos();\n+        expect_gt(p);\n     } else if (p.peek() == token::LBRACKET) {\n         expect(p, token::LBRACKET);\n         t = ast::ty_ivec(parse_mt(p));"}]}