{"sha": "aea0186fe5e583b101016e40da55bd9adcd0bc27", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlYTAxODZmZTVlNTgzYjEwMTAxNmU0MGRhNTViZDlhZGNkMGJjMjc=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2020-05-12T16:41:41Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2020-05-17T15:35:57Z"}, "message": "make many ptr functions must_use\n\nhttps://djugei.github.io/bad-at-unsafe/ describes an error a user had when trying to use offset:\n\n> At first I just assumed that the .add() and .offset() methods on pointers would mutate the pointer. They do not. Instead they return a new pointer, which gets dropped silently if you don't use it. Unlike for example Result, which is must_use annotated.", "tree": {"sha": "675dcc6080daa4d3f3355807e928a0a268262838", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/675dcc6080daa4d3f3355807e928a0a268262838"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aea0186fe5e583b101016e40da55bd9adcd0bc27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aea0186fe5e583b101016e40da55bd9adcd0bc27", "html_url": "https://github.com/rust-lang/rust/commit/aea0186fe5e583b101016e40da55bd9adcd0bc27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aea0186fe5e583b101016e40da55bd9adcd0bc27/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7faeae0d385730e712634fb2af331ea0140771b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7faeae0d385730e712634fb2af331ea0140771b4", "html_url": "https://github.com/rust-lang/rust/commit/7faeae0d385730e712634fb2af331ea0140771b4"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "9b53172b00f446f7de91ccba15dc8976cfb59b96", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aea0186fe5e583b101016e40da55bd9adcd0bc27/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea0186fe5e583b101016e40da55bd9adcd0bc27/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=aea0186fe5e583b101016e40da55bd9adcd0bc27", "patch": "@@ -1311,6 +1311,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::pointer::offset`](../../std/primitive.pointer.html#method.offset).\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n \n     /// Calculates the offset from a pointer, potentially wrapping.\n@@ -1327,6 +1328,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::pointer::wrapping_offset`](../../std/primitive.pointer.html#method.wrapping_offset).\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     pub fn arith_offset<T>(dst: *const T, offset: isize) -> *const T;\n \n     /// Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with"}, {"sha": "85ba5fc0638ea18fc84e80df6b152257ebfa07a2", "filename": "src/libcore/ptr/const_ptr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aea0186fe5e583b101016e40da55bd9adcd0bc27/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea0186fe5e583b101016e40da55bd9adcd0bc27/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fconst_ptr.rs?ref=aea0186fe5e583b101016e40da55bd9adcd0bc27", "patch": "@@ -150,6 +150,7 @@ impl<T: ?Sized> *const T {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n     pub unsafe fn offset(self, count: isize) -> *const T\n     where\n@@ -208,6 +209,7 @@ impl<T: ?Sized> *const T {\n     /// }\n     /// ```\n     #[stable(feature = \"ptr_wrapping_offset\", since = \"1.16.0\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n     pub fn wrapping_offset(self, count: isize) -> *const T\n     where\n@@ -390,6 +392,7 @@ impl<T: ?Sized> *const T {\n     /// }\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n     pub unsafe fn add(self, count: usize) -> Self\n     where\n@@ -451,6 +454,7 @@ impl<T: ?Sized> *const T {\n     /// }\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n     pub unsafe fn sub(self, count: usize) -> Self\n     where\n@@ -506,6 +510,7 @@ impl<T: ?Sized> *const T {\n     /// }\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n     pub fn wrapping_add(self, count: usize) -> Self\n     where\n@@ -561,6 +566,7 @@ impl<T: ?Sized> *const T {\n     /// }\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n     pub fn wrapping_sub(self, count: usize) -> Self\n     where"}, {"sha": "0781d7e6cac452c63a4d7376ce73b4c07ec08848", "filename": "src/libcore/ptr/mut_ptr.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aea0186fe5e583b101016e40da55bd9adcd0bc27/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea0186fe5e583b101016e40da55bd9adcd0bc27/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmut_ptr.rs?ref=aea0186fe5e583b101016e40da55bd9adcd0bc27", "patch": "@@ -144,6 +144,7 @@ impl<T: ?Sized> *mut T {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n     pub unsafe fn offset(self, count: isize) -> *mut T\n     where\n@@ -201,6 +202,7 @@ impl<T: ?Sized> *mut T {\n     /// assert_eq!(&data, &[0, 2, 0, 4, 0]);\n     /// ```\n     #[stable(feature = \"ptr_wrapping_offset\", since = \"1.16.0\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n     pub fn wrapping_offset(self, count: isize) -> *mut T\n     where\n@@ -436,6 +438,7 @@ impl<T: ?Sized> *mut T {\n     /// }\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n     pub unsafe fn add(self, count: usize) -> Self\n     where\n@@ -497,6 +500,7 @@ impl<T: ?Sized> *mut T {\n     /// }\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n     pub unsafe fn sub(self, count: usize) -> Self\n     where\n@@ -552,6 +556,7 @@ impl<T: ?Sized> *mut T {\n     /// }\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n     pub fn wrapping_add(self, count: usize) -> Self\n     where\n@@ -607,6 +612,7 @@ impl<T: ?Sized> *mut T {\n     /// }\n     /// ```\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n+    #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline]\n     pub fn wrapping_sub(self, count: usize) -> Self\n     where"}]}