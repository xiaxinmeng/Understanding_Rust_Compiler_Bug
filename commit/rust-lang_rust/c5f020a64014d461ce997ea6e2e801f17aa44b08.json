{"sha": "c5f020a64014d461ce997ea6e2e801f17aa44b08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ZjAyMGE2NDAxNGQ0NjFjZTk5N2VhNmUyZTgwMWYxN2FhNDRiMDg=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-03-17T09:40:49Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-03-17T10:07:02Z"}, "message": "Make the deprecated unstable SipHasher24 type private.\n\nIt is still used by the deprecated *stable* `SipHasher` type.", "tree": {"sha": "6ed18984f240f8748e7787ddc6a9fd2067c97b30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ed18984f240f8748e7787ddc6a9fd2067c97b30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5f020a64014d461ce997ea6e2e801f17aa44b08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5f020a64014d461ce997ea6e2e801f17aa44b08", "html_url": "https://github.com/rust-lang/rust/commit/c5f020a64014d461ce997ea6e2e801f17aa44b08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5f020a64014d461ce997ea6e2e801f17aa44b08/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc34ca1c9787fde84116637a0cee92fc5e375e3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc34ca1c9787fde84116637a0cee92fc5e375e3d", "html_url": "https://github.com/rust-lang/rust/commit/cc34ca1c9787fde84116637a0cee92fc5e375e3d"}], "stats": {"total": 59, "additions": 13, "deletions": 46}, "files": [{"sha": "90d9ab3644a8272f799fd8fb6c77eb5f0f2da81c", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5f020a64014d461ce997ea6e2e801f17aa44b08/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f020a64014d461ce997ea6e2e801f17aa44b08/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=c5f020a64014d461ce997ea6e2e801f17aa44b08", "patch": "@@ -101,7 +101,7 @@ pub use self::sip::SipHasher;\n \n #[unstable(feature = \"sip_hash_13\", issue = \"34767\")]\n #[allow(deprecated)]\n-pub use self::sip::{SipHasher13, SipHasher24};\n+pub use self::sip::SipHasher13;\n \n mod sip;\n "}, {"sha": "7790118fbde1c73c1d6b2b59cefd1d512666a1a4", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 6, "deletions": 39, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c5f020a64014d461ce997ea6e2e801f17aa44b08/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f020a64014d461ce997ea6e2e801f17aa44b08/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=c5f020a64014d461ce997ea6e2e801f17aa44b08", "patch": "@@ -38,7 +38,7 @@ pub struct SipHasher13 {\n #[rustc_deprecated(since = \"1.13.0\",\n                    reason = \"use `std::collections::hash_map::DefaultHasher` instead\")]\n #[derive(Debug, Clone, Default)]\n-pub struct SipHasher24 {\n+struct SipHasher24 {\n     hasher: Hasher<Sip24Rounds>,\n }\n \n@@ -156,7 +156,9 @@ impl SipHasher {\n     #[rustc_deprecated(since = \"1.13.0\",\n                        reason = \"use `std::collections::hash_map::DefaultHasher` instead\")]\n     pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher {\n-        SipHasher(SipHasher24::new_with_keys(key0, key1))\n+        SipHasher(SipHasher24 {\n+            hasher: Hasher::new_with_keys(key0, key1)\n+        })\n     }\n }\n \n@@ -182,28 +184,6 @@ impl SipHasher13 {\n     }\n }\n \n-impl SipHasher24 {\n-    /// Creates a new `SipHasher24` with the two initial keys set to 0.\n-    #[inline]\n-    #[unstable(feature = \"sip_hash_13\", issue = \"34767\")]\n-    #[rustc_deprecated(since = \"1.13.0\",\n-                       reason = \"use `std::collections::hash_map::DefaultHasher` instead\")]\n-    pub fn new() -> SipHasher24 {\n-        SipHasher24::new_with_keys(0, 0)\n-    }\n-\n-    /// Creates a `SipHasher24` that is keyed off the provided keys.\n-    #[inline]\n-    #[unstable(feature = \"sip_hash_13\", issue = \"34767\")]\n-    #[rustc_deprecated(since = \"1.13.0\",\n-                       reason = \"use `std::collections::hash_map::DefaultHasher` instead\")]\n-    pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher24 {\n-        SipHasher24 {\n-            hasher: Hasher::new_with_keys(key0, key1)\n-        }\n-    }\n-}\n-\n impl<S: Sip> Hasher<S> {\n     #[inline]\n     fn new_with_keys(key0: u64, key1: u64) -> Hasher<S> {\n@@ -271,12 +251,12 @@ impl<S: Sip> Hasher<S> {\n impl super::Hasher for SipHasher {\n     #[inline]\n     fn write(&mut self, msg: &[u8]) {\n-        self.0.write(msg)\n+        self.0.hasher.write(msg)\n     }\n \n     #[inline]\n     fn finish(&self) -> u64 {\n-        self.0.finish()\n+        self.0.hasher.finish()\n     }\n }\n \n@@ -293,19 +273,6 @@ impl super::Hasher for SipHasher13 {\n     }\n }\n \n-#[unstable(feature = \"sip_hash_13\", issue = \"34767\")]\n-impl super::Hasher for SipHasher24 {\n-    #[inline]\n-    fn write(&mut self, msg: &[u8]) {\n-        self.hasher.write(msg)\n-    }\n-\n-    #[inline]\n-    fn finish(&self) -> u64 {\n-        self.hasher.finish()\n-    }\n-}\n-\n impl<S: Sip> super::Hasher for Hasher<S> {\n     // see short_write comment for explanation\n     #[inline]"}, {"sha": "bad858011e960e4513fbe29a36ea5c9c4640de83", "filename": "src/libcore/tests/hash/sip.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5f020a64014d461ce997ea6e2e801f17aa44b08/src%2Flibcore%2Ftests%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5f020a64014d461ce997ea6e2e801f17aa44b08/src%2Flibcore%2Ftests%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fhash%2Fsip.rs?ref=c5f020a64014d461ce997ea6e2e801f17aa44b08", "patch": "@@ -11,7 +11,7 @@\n #![allow(deprecated)]\n \n use core::hash::{Hash, Hasher};\n-use core::hash::{SipHasher, SipHasher13, SipHasher24};\n+use core::hash::{SipHasher, SipHasher13};\n use core::{slice, mem};\n \n // Hash just the bytes of the slice, without length prefix\n@@ -224,14 +224,14 @@ fn test_siphash_2_4() {\n     let k1 = 0x_0f_0e_0d_0c_0b_0a_09_08;\n     let mut buf = Vec::new();\n     let mut t = 0;\n-    let mut state_inc = SipHasher24::new_with_keys(k0, k1);\n+    let mut state_inc = SipHasher::new_with_keys(k0, k1);\n \n     while t < 64 {\n         let vec = u8to64_le!(vecs[t], 0);\n-        let out = hash_with(SipHasher24::new_with_keys(k0, k1), &Bytes(&buf));\n+        let out = hash_with(SipHasher::new_with_keys(k0, k1), &Bytes(&buf));\n         assert_eq!(vec, out);\n \n-        let full = hash_with(SipHasher24::new_with_keys(k0, k1), &Bytes(&buf));\n+        let full = hash_with(SipHasher::new_with_keys(k0, k1), &Bytes(&buf));\n         let i = state_inc.finish();\n \n         assert_eq!(full, i);\n@@ -322,13 +322,13 @@ fn test_hash_no_concat_alias() {\n #[test]\n fn test_write_short_works() {\n     let test_usize = 0xd0c0b0a0usize;\n-    let mut h1 = SipHasher24::new();\n+    let mut h1 = SipHasher::new();\n     h1.write_usize(test_usize);\n     h1.write(b\"bytes\");\n     h1.write(b\"string\");\n     h1.write_u8(0xFFu8);\n     h1.write_u8(0x01u8);\n-    let mut h2 = SipHasher24::new();\n+    let mut h2 = SipHasher::new();\n     h2.write(unsafe {\n         slice::from_raw_parts(&test_usize as *const _ as *const u8,\n                               mem::size_of::<usize>())"}]}