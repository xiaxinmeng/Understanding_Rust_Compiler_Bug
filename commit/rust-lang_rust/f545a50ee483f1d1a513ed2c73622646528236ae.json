{"sha": "f545a50ee483f1d1a513ed2c73622646528236ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NDVhNTBlZTQ4M2YxZDFhNTEzZWQyYzczNjIyNjQ2NTI4MjM2YWU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-24T05:45:15Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-06T18:00:59Z"}, "message": "Suggest missing item from `trait` in `impl`", "tree": {"sha": "8b458cb59e87569f54d596d5deb41f75f8f24f7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b458cb59e87569f54d596d5deb41f75f8f24f7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f545a50ee483f1d1a513ed2c73622646528236ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f545a50ee483f1d1a513ed2c73622646528236ae", "html_url": "https://github.com/rust-lang/rust/commit/f545a50ee483f1d1a513ed2c73622646528236ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f545a50ee483f1d1a513ed2c73622646528236ae/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f0e16473de5ec010f44290a8c3ea1d90e0ad7a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f0e16473de5ec010f44290a8c3ea1d90e0ad7a2", "html_url": "https://github.com/rust-lang/rust/commit/3f0e16473de5ec010f44290a8c3ea1d90e0ad7a2"}], "stats": {"total": 226, "additions": 192, "deletions": 34}, "files": [{"sha": "f8d3c05508735ed277976bbbae19e7c4a9f5e6e9", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f545a50ee483f1d1a513ed2c73622646528236ae/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f545a50ee483f1d1a513ed2c73622646528236ae/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=f545a50ee483f1d1a513ed2c73622646528236ae", "patch": "@@ -592,20 +592,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             cause.span,\n                             target_id,\n                         );\n-                        let val = match ty.kind {\n-                            ty::Bool => \"true\",\n-                            ty::Char => \"'a'\",\n-                            ty::Int(_) | ty::Uint(_) => \"42\",\n-                            ty::Float(_) => \"3.14159\",\n-                            ty::Error | ty::Never => return,\n-                            _ => \"value\",\n-                        };\n-                        let msg = \"give it a value of the expected type\";\n-                        let label = destination.label\n-                            .map(|l| format!(\" {}\", l.ident))\n-                            .unwrap_or_else(String::new);\n-                        let sugg = format!(\"break{} {}\", label, val);\n-                        err.span_suggestion(expr.span, msg, sugg, Applicability::HasPlaceholders);\n+                        if let Some(val) = ty_kind_suggestion(ty) {\n+                            let label = destination.label\n+                                .map(|l| format!(\" {}\", l.ident))\n+                                .unwrap_or_else(String::new);\n+                            err.span_suggestion(\n+                                expr.span,\n+                                \"give it a value of the expected type\",\n+                                format!(\"break{} {}\", label, val),\n+                                Applicability::HasPlaceholders,\n+                            );\n+                        }\n                     }, false);\n                 }\n             } else {\n@@ -1725,3 +1722,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.tcx.mk_unit()\n     }\n }\n+\n+crate fn ty_kind_suggestion(ty: Ty<'_>) -> Option<&'static str> {\n+    Some(match ty.kind {\n+        ty::Bool => \"true\",\n+        ty::Char => \"'a'\",\n+        ty::Int(_) | ty::Uint(_) => \"42\",\n+        ty::Float(_) => \"3.14159\",\n+        ty::Error | ty::Never => return None,\n+        _ => \"value\",\n+    })\n+}"}, {"sha": "3b5a6be198926e78d196dedef55d0099a3005735", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 100, "deletions": 11, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/f545a50ee483f1d1a513ed2c73622646528236ae/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f545a50ee483f1d1a513ed2c73622646528236ae/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f545a50ee483f1d1a513ed2c73622646528236ae", "patch": "@@ -1800,12 +1800,12 @@ fn check_specialization_validity<'tcx>(\n \n fn check_impl_items_against_trait<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    impl_span: Span,\n+    full_impl_span: Span,\n     impl_id: DefId,\n     impl_trait_ref: ty::TraitRef<'tcx>,\n     impl_item_refs: &[hir::ImplItemRef],\n ) {\n-    let impl_span = tcx.sess.source_map().def_span(impl_span);\n+    let impl_span = tcx.sess.source_map().def_span(full_impl_span);\n \n     // If the trait reference itself is erroneous (so the compilation is going\n     // to fail), skip checking the items here -- the `impl_item` table in `tcx`\n@@ -1934,26 +1934,115 @@ fn check_impl_items_against_trait<'tcx>(\n                 missing_items.iter()\n                     .map(|trait_item| trait_item.ident.to_string())\n                     .collect::<Vec<_>>().join(\"`, `\")));\n+\n+        // `Span` before impl block closing brace.\n+        let hi = full_impl_span.hi() - BytePos(1);\n+        let sugg_sp = full_impl_span.with_lo(hi).with_hi(hi);\n+        let indentation = tcx.sess.source_map().span_to_margin(sugg_sp).unwrap_or(0);\n+        let padding: String = (0..indentation).map(|_| \" \").collect();\n         for trait_item in missing_items {\n+            let snippet = suggestion_signature(&trait_item, tcx);\n+            let code = format!(\"{}{}\\n{}\", padding, snippet, padding);\n+            let msg = format!(\"implement the missing item: `{}`\", snippet);\n+            let appl = Applicability::HasPlaceholders;\n             if let Some(span) = tcx.hir().span_if_local(trait_item.def_id) {\n                 err.span_label(span, format!(\"`{}` from trait\", trait_item.ident));\n+                err.tool_only_span_suggestion(sugg_sp, &msg, code, appl);\n             } else {\n-                err.note_trait_signature(trait_item.ident.to_string(),\n-                                         trait_item.signature(tcx));\n+                err.span_suggestion_hidden(sugg_sp, &msg, code, appl);\n             }\n         }\n         err.emit();\n     }\n \n     if !invalidated_items.is_empty() {\n         let invalidator = overridden_associated_type.unwrap();\n-        span_err!(tcx.sess, invalidator.span, E0399,\n-                  \"the following trait items need to be reimplemented \\\n-                   as `{}` was overridden: `{}`\",\n-                  invalidator.ident,\n-                  invalidated_items.iter()\n-                                   .map(|name| name.to_string())\n-                                   .collect::<Vec<_>>().join(\"`, `\"))\n+        span_err!(\n+            tcx.sess,\n+            invalidator.span,\n+            E0399,\n+            \"the following trait items need to be reimplemented as `{}` was overridden: `{}`\",\n+            invalidator.ident,\n+            invalidated_items.iter()\n+                .map(|name| name.to_string())\n+                .collect::<Vec<_>>().join(\"`, `\"))\n+    }\n+}\n+\n+/// Given a `ty::AssocItem` and a `TyCtxt`, return placeholder code for that associated item.\n+/// Similar to `ty::AssocItem::suggestion`, but appropriate for use as the code snippet of a\n+/// structured suggestion.\n+fn suggestion_signature(assoc: &ty::AssocItem, tcx: TyCtxt<'_>) -> String {\n+    match assoc.kind {\n+        ty::AssocKind::Method => {\n+            // We skip the binder here because the binder would deanonymize all\n+            // late-bound regions, and we don't want method signatures to show up\n+            // `as for<'r> fn(&'r MyType)`.  Pretty-printing handles late-bound\n+            // regions just fine, showing `fn(&MyType)`.\n+            let sig = tcx.fn_sig(assoc.def_id);\n+            let unsafety = match sig.unsafety() {\n+                hir::Unsafety::Unsafe => \"unsafe \",\n+                _ => \"\",\n+            };\n+            let args = sig.inputs()\n+                .skip_binder()\n+                .iter()\n+                .map(|ty| Some(match ty.kind {\n+                    ty::Param(param) if param.name == kw::SelfUpper => {\n+                        \"self\".to_string()\n+                    }\n+                    ty::Ref(reg, ref_ty, mutability) => {\n+                        let mutability = match mutability {\n+                            hir::Mutability::MutMutable => \"mut \",\n+                            _ => \"\",\n+                        };\n+                        let mut reg = format!(\"{}\", reg);\n+                        if &reg[..] == \"'_\" {\n+                            reg = \"\".to_string();\n+                        }\n+                        if &reg[..] != \"\" {\n+                            reg = format!(\"{} \", reg);\n+                        }\n+                        match ref_ty.kind {\n+                            ty::Param(param)\n+                            if param.name == kw::SelfUpper => {\n+                                format!(\"&{}{}self\", reg, mutability)\n+                            }\n+                            _ => format!(\"_: {:?}\", ty),\n+                        }\n+\n+                    }\n+                    _ => format!(\"_: {:?}\", ty),\n+                }))\n+                .chain(std::iter::once(if sig.c_variadic() {\n+                    Some(\"...\".to_string())\n+                } else {\n+                    None\n+                }))\n+                .filter_map(|arg| arg)\n+                .collect::<Vec<String>>()\n+                .join(\", \");\n+            let output = sig.output();\n+            let output = if !output.skip_binder().is_unit() {\n+                format!(\" -> {:?}\", output.skip_binder())\n+            } else {\n+                String::new()\n+            };\n+            // FIXME: this is not entirely correct, as the lifetimes from borrowed params will\n+            // not be present in the `fn` definition, not will we account for renamed\n+            // lifetimes between the `impl` and the `trait`, but this should be good enough to\n+            // fill in a significant portion of the missing code, and other subsequent\n+            // suggestions can help the user fix the code.\n+            format!(\"{}fn {}({}){} {{ unimplemented!() }}\", unsafety, assoc.ident, args, output)\n+        }\n+        ty::AssocKind::Type => format!(\"type {} = Type;\", assoc.ident),\n+        // FIXME(type_alias_impl_trait): we should print bounds here too.\n+        ty::AssocKind::OpaqueTy => format!(\"type {} = Type;\", assoc.ident),\n+        ty::AssocKind::Const => {\n+            let ty = tcx.type_of(assoc.def_id);\n+            let val = expr::ty_kind_suggestion(ty).unwrap_or(\"value\");\n+            format!(\"const {}: {:?} = {};\", assoc.ident, ty, val)\n+        }\n     }\n }\n "}, {"sha": "151dc68162155c971f4be0694ce111e42b3aeff1", "filename": "src/test/ui/impl-trait/trait_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f545a50ee483f1d1a513ed2c73622646528236ae/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f545a50ee483f1d1a513ed2c73622646528236ae/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr?ref=f545a50ee483f1d1a513ed2c73622646528236ae", "patch": "@@ -29,7 +29,7 @@ error[E0046]: not all trait items implemented, missing: `fmt`\n LL | impl std::fmt::Display for MyType4 {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `fmt` in implementation\n    |\n-   = note: `fmt` from trait: `fn(&Self, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n+   = help: implement the missing item: `fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> { unimplemented!() }`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "271fbb6c87426b9726d2848d538b8d26dbab5be4", "filename": "src/test/ui/issues/issue-3344.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f545a50ee483f1d1a513ed2c73622646528236ae/src%2Ftest%2Fui%2Fissues%2Fissue-3344.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f545a50ee483f1d1a513ed2c73622646528236ae/src%2Ftest%2Fui%2Fissues%2Fissue-3344.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3344.stderr?ref=f545a50ee483f1d1a513ed2c73622646528236ae", "patch": "@@ -4,7 +4,7 @@ error[E0046]: not all trait items implemented, missing: `partial_cmp`\n LL | impl PartialOrd for Thing {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ missing `partial_cmp` in implementation\n    |\n-   = note: `partial_cmp` from trait: `fn(&Self, &Rhs) -> std::option::Option<std::cmp::Ordering>`\n+   = help: implement the missing item: `fn partial_cmp(&self, _: &Rhs) -> std::option::Option<std::cmp::Ordering> { unimplemented!() }`\n \n error: aborting due to previous error\n "}, {"sha": "f8243528d72cff0243759b5afba8633df46c6f9a", "filename": "src/test/ui/missing/missing-items/m2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f545a50ee483f1d1a513ed2c73622646528236ae/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f545a50ee483f1d1a513ed2c73622646528236ae/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fm2.stderr?ref=f545a50ee483f1d1a513ed2c73622646528236ae", "patch": "@@ -4,9 +4,9 @@ error[E0046]: not all trait items implemented, missing: `CONSTANT`, `Type`, `met\n LL | impl m1::X for X {\n    | ^^^^^^^^^^^^^^^^ missing `CONSTANT`, `Type`, `method` in implementation\n    |\n-   = note: `CONSTANT` from trait: `const CONSTANT: u32;`\n-   = note: `Type` from trait: `type Type;`\n-   = note: `method` from trait: `fn(&Self, std::string::String) -> <Self as m1::X>::Type`\n+   = help: implement the missing item: `const CONSTANT: u32 = 42;`\n+   = help: implement the missing item: `type Type = Type;`\n+   = help: implement the missing item: `fn method(&self, _: std::string::String) -> <Self as m1::X>::Type { unimplemented!() }`\n \n error: aborting due to previous error\n "}, {"sha": "f23f421edc7c55dad352d0d48fb837acee5e377c", "filename": "src/test/ui/span/impl-wrong-item-for-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f545a50ee483f1d1a513ed2c73622646528236ae/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f545a50ee483f1d1a513ed2c73622646528236ae/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr?ref=f545a50ee483f1d1a513ed2c73622646528236ae", "patch": "@@ -64,7 +64,7 @@ error[E0046]: not all trait items implemented, missing: `fmt`\n LL | impl Debug for FooTypeForMethod {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `fmt` in implementation\n    |\n-   = note: `fmt` from trait: `fn(&Self, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n+   = help: implement the missing item: `fn fmt(&self, _: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> { unimplemented!() }`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "f88ce6c88db2397d094cdd9a80acd28da8509f10", "filename": "src/test/ui/span/issue-23729.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f545a50ee483f1d1a513ed2c73622646528236ae/src%2Ftest%2Fui%2Fspan%2Fissue-23729.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f545a50ee483f1d1a513ed2c73622646528236ae/src%2Ftest%2Fui%2Fspan%2Fissue-23729.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23729.stderr?ref=f545a50ee483f1d1a513ed2c73622646528236ae", "patch": "@@ -4,7 +4,7 @@ error[E0046]: not all trait items implemented, missing: `Item`\n LL |         impl Iterator for Recurrence {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `Item` in implementation\n    |\n-   = note: `Item` from trait: `type Item;`\n+   = help: implement the missing item: `type Item = Type;`\n \n error: aborting due to previous error\n "}, {"sha": "46a820f1b76606c1f850dffb4522ea92c9a6d4ca", "filename": "src/test/ui/span/issue-23827.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f545a50ee483f1d1a513ed2c73622646528236ae/src%2Ftest%2Fui%2Fspan%2Fissue-23827.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f545a50ee483f1d1a513ed2c73622646528236ae/src%2Ftest%2Fui%2Fspan%2Fissue-23827.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23827.stderr?ref=f545a50ee483f1d1a513ed2c73622646528236ae", "patch": "@@ -4,7 +4,7 @@ error[E0046]: not all trait items implemented, missing: `Output`\n LL | impl<C: Component> FnOnce<(C,)> for Prototype {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `Output` in implementation\n    |\n-   = note: `Output` from trait: `type Output;`\n+   = help: implement the missing item: `type Output = Type;`\n \n error: aborting due to previous error\n "}, {"sha": "a1f9b2550201903b5c03076a44b6d693cb853edd", "filename": "src/test/ui/span/issue-24356.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f545a50ee483f1d1a513ed2c73622646528236ae/src%2Ftest%2Fui%2Fspan%2Fissue-24356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f545a50ee483f1d1a513ed2c73622646528236ae/src%2Ftest%2Fui%2Fspan%2Fissue-24356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24356.stderr?ref=f545a50ee483f1d1a513ed2c73622646528236ae", "patch": "@@ -4,7 +4,7 @@ error[E0046]: not all trait items implemented, missing: `Target`\n LL |         impl Deref for Thing {\n    |         ^^^^^^^^^^^^^^^^^^^^ missing `Target` in implementation\n    |\n-   = note: `Target` from trait: `type Target;`\n+   = help: implement the missing item: `type Target = Type;`\n \n error: aborting due to previous error\n "}, {"sha": "42f579a665e5fe0fcecd6a93a95d01bff609a421", "filename": "src/test/ui/suggestions/missing-trait-item.fixed", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f545a50ee483f1d1a513ed2c73622646528236ae/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-item.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f545a50ee483f1d1a513ed2c73622646528236ae/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-item.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-item.fixed?ref=f545a50ee483f1d1a513ed2c73622646528236ae", "patch": "@@ -0,0 +1,20 @@\n+// run-rustfix\n+\n+trait T {\n+    unsafe fn foo(a: &usize, b: &usize) -> usize;\n+    fn bar(&self, a: &usize, b: &usize) -> usize;\n+}\n+\n+mod foo {\n+    use super::T;\n+    impl T for () {    fn bar(&self, _: &usize, _: &usize) -> usize { unimplemented!() }\n+        unsafe fn foo(_: &usize, _: &usize) -> usize { unimplemented!() }\n+    } //~ ERROR not all trait items\n+\n+    impl T for usize { //~ ERROR not all trait items\n+        fn bar(&self, _: &usize, _: &usize) -> usize { unimplemented!() }\n+        unsafe fn foo(_: &usize, _: &usize) -> usize { unimplemented!() }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "b4fca25ba2f11c586fa0a3ebdb395a5a4b53a497", "filename": "src/test/ui/suggestions/missing-trait-item.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f545a50ee483f1d1a513ed2c73622646528236ae/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f545a50ee483f1d1a513ed2c73622646528236ae/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-item.rs?ref=f545a50ee483f1d1a513ed2c73622646528236ae", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+\n+trait T {\n+    unsafe fn foo(a: &usize, b: &usize) -> usize;\n+    fn bar(&self, a: &usize, b: &usize) -> usize;\n+}\n+\n+mod foo {\n+    use super::T;\n+    impl T for () {} //~ ERROR not all trait items\n+\n+    impl T for usize { //~ ERROR not all trait items\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "4a9d7b472c93a16b9ed4d89538f9475a81713db7", "filename": "src/test/ui/suggestions/missing-trait-item.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f545a50ee483f1d1a513ed2c73622646528236ae/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f545a50ee483f1d1a513ed2c73622646528236ae/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-trait-item.stderr?ref=f545a50ee483f1d1a513ed2c73622646528236ae", "patch": "@@ -0,0 +1,25 @@\n+error[E0046]: not all trait items implemented, missing: `foo`, `bar`\n+  --> $DIR/missing-trait-item.rs:10:5\n+   |\n+LL |     unsafe fn foo(a: &usize, b: &usize) -> usize;\n+   |     --------------------------------------------- `foo` from trait\n+LL |     fn bar(&self, a: &usize, b: &usize) -> usize;\n+   |     --------------------------------------------- `bar` from trait\n+...\n+LL |     impl T for () {}\n+   |     ^^^^^^^^^^^^^ missing `foo`, `bar` in implementation\n+\n+error[E0046]: not all trait items implemented, missing: `foo`, `bar`\n+  --> $DIR/missing-trait-item.rs:12:5\n+   |\n+LL |     unsafe fn foo(a: &usize, b: &usize) -> usize;\n+   |     --------------------------------------------- `foo` from trait\n+LL |     fn bar(&self, a: &usize, b: &usize) -> usize;\n+   |     --------------------------------------------- `bar` from trait\n+...\n+LL |     impl T for usize {\n+   |     ^^^^^^^^^^^^^^^^ missing `foo`, `bar` in implementation\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0046`."}]}