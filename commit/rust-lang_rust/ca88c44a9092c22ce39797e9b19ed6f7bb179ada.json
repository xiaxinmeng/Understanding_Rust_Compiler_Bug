{"sha": "ca88c44a9092c22ce39797e9b19ed6f7bb179ada", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhODhjNDRhOTA5MmMyMmNlMzk3OTdlOWIxOWVkNmY3YmIxNzlhZGE=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-04-30T00:48:03Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-01T23:30:18Z"}, "message": "Avoid using the lowering context in `librustc_save_analysis`", "tree": {"sha": "8a4a9493d5f4fc223157bc1696859776469ea47c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a4a9493d5f4fc223157bc1696859776469ea47c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca88c44a9092c22ce39797e9b19ed6f7bb179ada", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca88c44a9092c22ce39797e9b19ed6f7bb179ada", "html_url": "https://github.com/rust-lang/rust/commit/ca88c44a9092c22ce39797e9b19ed6f7bb179ada", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca88c44a9092c22ce39797e9b19ed6f7bb179ada/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02df9f32b1947fe194e2844a11db454b9763ea92", "url": "https://api.github.com/repos/rust-lang/rust/commits/02df9f32b1947fe194e2844a11db454b9763ea92", "html_url": "https://github.com/rust-lang/rust/commit/02df9f32b1947fe194e2844a11db454b9763ea92"}], "stats": {"total": 39, "additions": 11, "deletions": 28}, "files": [{"sha": "3f0833cd6700c63ed52f84bc42705b465ad97af0", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca88c44a9092c22ce39797e9b19ed6f7bb179ada/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88c44a9092c22ce39797e9b19ed6f7bb179ada/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=ca88c44a9092c22ce39797e9b19ed6f7bb179ada", "patch": "@@ -165,8 +165,7 @@ pub fn compile_input(sess: &Session,\n                                                                          &hir_map,\n                                                                          &expanded_crate,\n                                                                          &hir_map.krate(),\n-                                                                         &id[..],\n-                                                                         &lcx),\n+                                                                         &id[..]),\n                                     Ok(()));\n         }\n \n@@ -203,7 +202,6 @@ pub fn compile_input(sess: &Session,\n                                                                &analysis,\n                                                                mir_map.as_ref(),\n                                                                tcx,\n-                                                               &lcx,\n                                                                &id);\n                 (control.after_analysis.callback)(state);\n \n@@ -345,7 +343,6 @@ pub struct CompileState<'a, 'ast: 'a, 'tcx: 'a> {\n     pub mir_map: Option<&'a MirMap<'tcx>>,\n     pub analysis: Option<&'a ty::CrateAnalysis<'a>>,\n     pub tcx: Option<&'a TyCtxt<'tcx>>,\n-    pub lcx: Option<&'a LoweringContext<'a>>,\n     pub trans: Option<&'a trans::CrateTranslation>,\n }\n \n@@ -368,7 +365,6 @@ impl<'a, 'ast, 'tcx> CompileState<'a, 'ast, 'tcx> {\n             analysis: None,\n             mir_map: None,\n             tcx: None,\n-            lcx: None,\n             trans: None,\n         }\n     }\n@@ -400,15 +396,13 @@ impl<'a, 'ast, 'tcx> CompileState<'a, 'ast, 'tcx> {\n                               hir_map: &'a hir_map::Map<'ast>,\n                               krate: &'a ast::Crate,\n                               hir_crate: &'a hir::Crate,\n-                              crate_name: &'a str,\n-                              lcx: &'a LoweringContext<'a>)\n+                              crate_name: &'a str)\n                               -> CompileState<'a, 'ast, 'tcx> {\n         CompileState {\n             crate_name: Some(crate_name),\n             ast_map: Some(hir_map),\n             krate: Some(krate),\n             hir_crate: Some(hir_crate),\n-            lcx: Some(lcx),\n             ..CompileState::empty(input, session, out_dir)\n         }\n     }\n@@ -421,7 +415,6 @@ impl<'a, 'ast, 'tcx> CompileState<'a, 'ast, 'tcx> {\n                             analysis: &'a ty::CrateAnalysis,\n                             mir_map: Option<&'a MirMap<'tcx>>,\n                             tcx: &'a TyCtxt<'tcx>,\n-                            lcx: &'a LoweringContext<'a>,\n                             crate_name: &'a str)\n                             -> CompileState<'a, 'ast, 'tcx> {\n         CompileState {\n@@ -430,7 +423,6 @@ impl<'a, 'ast, 'tcx> CompileState<'a, 'ast, 'tcx> {\n             tcx: Some(tcx),\n             krate: krate,\n             hir_crate: Some(hir_crate),\n-            lcx: Some(lcx),\n             crate_name: Some(crate_name),\n             ..CompileState::empty(input, session, out_dir)\n         }"}, {"sha": "2d3363507d06c7d8fab51dcad498fb06ac1823d6", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca88c44a9092c22ce39797e9b19ed6f7bb179ada/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88c44a9092c22ce39797e9b19ed6f7bb179ada/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=ca88c44a9092c22ce39797e9b19ed6f7bb179ada", "patch": "@@ -499,7 +499,6 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n             control.after_analysis.callback = box |state| {\n                 time(state.session.time_passes(), \"save analysis\", || {\n                     save::process_crate(state.tcx.unwrap(),\n-                                        state.lcx.unwrap(),\n                                         state.krate.unwrap(),\n                                         state.analysis.unwrap(),\n                                         state.crate_name.unwrap(),"}, {"sha": "d12d1c8aae0577f18142bef4bdeb9218e7931ace", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca88c44a9092c22ce39797e9b19ed6f7bb179ada/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88c44a9092c22ce39797e9b19ed6f7bb179ada/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=ca88c44a9092c22ce39797e9b19ed6f7bb179ada", "patch": "@@ -42,8 +42,6 @@ use syntax::visit::{self, Visitor};\n use syntax::print::pprust::{path_to_string, ty_to_string};\n use syntax::ptr::P;\n \n-use rustc::hir::lowering::lower_expr;\n-\n use super::{escape, generated_code, SaveContext, PathCollector};\n use super::data::*;\n use super::dump::Dump;\n@@ -1222,7 +1220,7 @@ impl<'v, 'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'v> for DumpVisitor<'l, 'tcx,\n                 visit::walk_expr(self, ex);\n             }\n             ast::ExprKind::Struct(ref path, ref fields, ref base) => {\n-                let hir_expr = lower_expr(self.save_ctxt.lcx, ex);\n+                let hir_expr = self.save_ctxt.tcx.map.expect_expr(ex.id);\n                 let adt = self.tcx.expr_ty(&hir_expr).ty_adt_def().unwrap();\n                 let def = self.tcx.resolve_expr(&hir_expr);\n                 self.process_struct_lit(ex, path, fields, adt.variant_of_def(def), base)\n@@ -1241,7 +1239,7 @@ impl<'v, 'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'v> for DumpVisitor<'l, 'tcx,\n             ast::ExprKind::TupField(ref sub_ex, idx) => {\n                 self.visit_expr(&sub_ex);\n \n-                let hir_node = lower_expr(self.save_ctxt.lcx, sub_ex);\n+                let hir_node = self.save_ctxt.tcx.map.expect_expr(sub_ex.id);\n                 let ty = &self.tcx.expr_ty_adjusted(&hir_node).sty;\n                 match *ty {\n                     ty::TyStruct(def, _) => {"}, {"sha": "85c8f1f8ec98c4cff11c1068be75c39f7eeac878", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ca88c44a9092c22ce39797e9b19ed6f7bb179ada/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88c44a9092c22ce39797e9b19ed6f7bb179ada/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=ca88c44a9092c22ce39797e9b19ed6f7bb179ada", "patch": "@@ -28,7 +28,7 @@\n #[macro_use] extern crate syntax;\n extern crate serialize as rustc_serialize;\n \n-use rustc::hir::{self, lowering};\n+use rustc::hir;\n use rustc::hir::map::NodeItem;\n use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n@@ -75,7 +75,6 @@ pub mod recorder {\n \n pub struct SaveContext<'l, 'tcx: 'l> {\n     tcx: &'l TyCtxt<'tcx>,\n-    lcx: &'l lowering::LoweringContext<'l>,\n     span_utils: SpanUtils<'tcx>,\n }\n \n@@ -84,20 +83,16 @@ macro_rules! option_try(\n );\n \n impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n-    pub fn new(tcx: &'l TyCtxt<'tcx>,\n-               lcx: &'l lowering::LoweringContext<'l>)\n-               -> SaveContext<'l, 'tcx> {\n+    pub fn new(tcx: &'l TyCtxt<'tcx>) -> SaveContext<'l, 'tcx> {\n         let span_utils = SpanUtils::new(&tcx.sess);\n-        SaveContext::from_span_utils(tcx, lcx, span_utils)\n+        SaveContext::from_span_utils(tcx, span_utils)\n     }\n \n     pub fn from_span_utils(tcx: &'l TyCtxt<'tcx>,\n-                           lcx: &'l lowering::LoweringContext<'l>,\n                            span_utils: SpanUtils<'tcx>)\n                            -> SaveContext<'l, 'tcx> {\n         SaveContext {\n             tcx: tcx,\n-            lcx: lcx,\n             span_utils: span_utils,\n         }\n     }\n@@ -378,14 +373,14 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n     }\n \n     pub fn get_expr_data(&self, expr: &ast::Expr) -> Option<Data> {\n-        let hir_node = lowering::lower_expr(self.lcx, expr);\n+        let hir_node = self.tcx.map.expect_expr(expr.id);\n         let ty = self.tcx.expr_ty_adjusted_opt(&hir_node);\n         if ty.is_none() || ty.unwrap().sty == ty::TyError {\n             return None;\n         }\n         match expr.node {\n             ast::ExprKind::Field(ref sub_ex, ident) => {\n-                let hir_node = lowering::lower_expr(self.lcx, sub_ex);\n+                let hir_node = self.tcx.map.expect_expr(sub_ex.id);\n                 match self.tcx.expr_ty_adjusted(&hir_node).sty {\n                     ty::TyStruct(def, _) => {\n                         let f = def.struct_variant().field_named(ident.node.name);\n@@ -405,7 +400,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 }\n             }\n             ast::ExprKind::Struct(ref path, _, _) => {\n-                let hir_node = lowering::lower_expr(self.lcx, expr);\n+                let hir_node = self.tcx.map.expect_expr(expr.id);\n                 match self.tcx.expr_ty_adjusted(&hir_node).sty {\n                     ty::TyStruct(def, _) => {\n                         let sub_span = self.span_utils.span_for_last_ident(path.span);\n@@ -704,7 +699,6 @@ impl Format {\n }\n \n pub fn process_crate<'l, 'tcx>(tcx: &'l TyCtxt<'tcx>,\n-                               lcx: &'l lowering::LoweringContext<'l>,\n                                krate: &ast::Crate,\n                                analysis: &'l ty::CrateAnalysis<'l>,\n                                cratename: &str,\n@@ -755,7 +749,7 @@ pub fn process_crate<'l, 'tcx>(tcx: &'l TyCtxt<'tcx>,\n     let output = &mut output_file;\n \n     let utils: SpanUtils<'tcx> = SpanUtils::new(&tcx.sess);\n-    let save_ctxt = SaveContext::new(tcx, lcx);\n+    let save_ctxt = SaveContext::new(tcx);\n \n     macro_rules! dump {\n         ($new_dumper: expr) => {{"}]}