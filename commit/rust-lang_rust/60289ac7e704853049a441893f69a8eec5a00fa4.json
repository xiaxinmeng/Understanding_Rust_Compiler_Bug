{"sha": "60289ac7e704853049a441893f69a8eec5a00fa4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMjg5YWM3ZTcwNDg1MzA0OWE0NDE4OTNmNjlhOGVlYzVhMDBmYTQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-03-27T13:17:10Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-01T00:56:07Z"}, "message": "Added overflowing_{div,rem,shl,shr} method implementations to WrappingOps.", "tree": {"sha": "f1e3429b7cb8436eb1f66b798806a24977f39b6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1e3429b7cb8436eb1f66b798806a24977f39b6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60289ac7e704853049a441893f69a8eec5a00fa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60289ac7e704853049a441893f69a8eec5a00fa4", "html_url": "https://github.com/rust-lang/rust/commit/60289ac7e704853049a441893f69a8eec5a00fa4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60289ac7e704853049a441893f69a8eec5a00fa4/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "792f6aa4259b438aee1633d495d01d909bfb6ea9", "url": "https://api.github.com/repos/rust-lang/rust/commits/792f6aa4259b438aee1633d495d01d909bfb6ea9", "html_url": "https://github.com/rust-lang/rust/commit/792f6aa4259b438aee1633d495d01d909bfb6ea9"}], "stats": {"total": 130, "additions": 130, "deletions": 0}, "files": [{"sha": "a78eed8ae5fa843c65007fc8bb097cc9328d81d7", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/60289ac7e704853049a441893f69a8eec5a00fa4/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60289ac7e704853049a441893f69a8eec5a00fa4/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=60289ac7e704853049a441893f69a8eec5a00fa4", "patch": "@@ -30,6 +30,8 @@ use intrinsics::{i16_mul_with_overflow, u16_mul_with_overflow};\n use intrinsics::{i32_mul_with_overflow, u32_mul_with_overflow};\n use intrinsics::{i64_mul_with_overflow, u64_mul_with_overflow};\n \n+use ::{i8,i16,i32,i64,u8,u16,u32,u64};\n+\n #[unstable(feature = \"core\", reason = \"may be removed, renamed, or relocated\")]\n #[deprecated(since = \"1.0.0\", reason = \"moved to inherent methods\")]\n pub trait WrappingOps {\n@@ -43,6 +45,12 @@ pub trait OverflowingOps {\n     fn overflowing_add(self, rhs: Self) -> (Self, bool);\n     fn overflowing_sub(self, rhs: Self) -> (Self, bool);\n     fn overflowing_mul(self, rhs: Self) -> (Self, bool);\n+\n+    fn overflowing_div(self, rhs: Self) -> (Self, bool);\n+    fn overflowing_rem(self, rhs: Self) -> (Self, bool);\n+\n+    fn overflowing_shl(self, rhs: u32) -> (Self, bool);\n+    fn overflowing_shr(self, rhs: u32) -> (Self, bool);\n }\n \n macro_rules! sh_impl {\n@@ -184,6 +192,20 @@ macro_rules! wrapping_impl {\n \n wrapping_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n \n+mod shift_max {\n+    #![allow(non_upper_case_globals)]\n+\n+    pub const  i8: u32 = (1 << 3) - 1;\n+    pub const i16: u32 = (1 << 4) - 1;\n+    pub const i32: u32 = (1 << 5) - 1;\n+    pub const i64: u32 = (1 << 6) - 1;\n+\n+    pub const  u8: u32 = i8;\n+    pub const u16: u32 = i16;\n+    pub const u32: u32 = i32;\n+    pub const u64: u32 = i64;\n+}\n+\n macro_rules! overflowing_impl {\n     ($($t:ident)*) => ($(\n         impl OverflowingOps for $t {\n@@ -205,6 +227,34 @@ macro_rules! overflowing_impl {\n                     concat_idents!($t, _mul_with_overflow)(self, rhs)\n                 }\n             }\n+\n+            #[inline(always)]\n+            fn overflowing_div(self, rhs: $t) -> ($t, bool) {\n+                if self == $t::MIN && rhs == -1 {\n+                    (1, true)\n+                } else {\n+                    (self/rhs, false)\n+                }\n+            }\n+            #[inline(always)]\n+            fn overflowing_rem(self, rhs: $t) -> ($t, bool) {\n+                if self == $t::MIN && rhs == -1 {\n+                    (0, true)\n+                } else {\n+                    (self % rhs, false)\n+                }\n+            }\n+\n+            #[inline(always)]\n+            fn overflowing_shl(self, rhs: u32) -> ($t, bool) {\n+                (self << (rhs & self::shift_max::$t),\n+                 (rhs > self::shift_max::$t))\n+            }\n+            #[inline(always)]\n+            fn overflowing_shr(self, rhs: u32) -> ($t, bool) {\n+                (self >> (rhs & self::shift_max::$t),\n+                 (rhs > self::shift_max::$t))\n+            }\n         }\n     )*)\n }\n@@ -234,6 +284,26 @@ impl OverflowingOps for usize {\n             (res.0 as usize, res.1)\n         }\n     }\n+    #[inline(always)]\n+    fn overflowing_div(self, rhs: usize) -> (usize, bool) {\n+        let (r, f) = (self as u64).overflowing_div(rhs as u64);\n+        (r as usize, f)\n+    }\n+    #[inline(always)]\n+    fn overflowing_rem(self, rhs: usize) -> (usize, bool) {\n+        let (r, f) = (self as u64).overflowing_rem(rhs as u64);\n+        (r as usize, f)\n+    }\n+    #[inline(always)]\n+    fn overflowing_shl(self, rhs: u32) -> (usize, bool) {\n+        let (r, f) = (self as u64).overflowing_shl(rhs);\n+        (r as usize, f)\n+    }\n+    #[inline(always)]\n+    fn overflowing_shr(self, rhs: u32) -> (usize, bool) {\n+        let (r, f) = (self as u64).overflowing_shr(rhs);\n+        (r as usize, f)\n+    }\n }\n \n #[cfg(target_pointer_width = \"32\")]\n@@ -259,6 +329,26 @@ impl OverflowingOps for usize {\n             (res.0 as usize, res.1)\n         }\n     }\n+    #[inline(always)]\n+    fn overflowing_div(self, rhs: usize) -> (usize, bool) {\n+        let (r, f) = (self as u32).overflowing_div(rhs as u32);\n+        (r as usize, f)\n+    }\n+    #[inline(always)]\n+    fn overflowing_rem(self, rhs: usize) -> (usize, bool) {\n+        let (r, f) = (self as u32).overflowing_rem(rhs as u32);\n+        (r as usize, f)\n+    }\n+    #[inline(always)]\n+    fn overflowing_shl(self, rhs: u32) -> (usize, bool) {\n+        let (r, f) = (self as u32).overflowing_shl(rhs);\n+        (r as usize, f)\n+    }\n+    #[inline(always)]\n+    fn overflowing_shr(self, rhs: u32) -> (usize, bool) {\n+        let (r, f) = (self as u32).overflowing_shr(rhs);\n+        (r as usize, f)\n+    }\n }\n \n #[cfg(target_pointer_width = \"64\")]\n@@ -284,6 +374,26 @@ impl OverflowingOps for isize {\n             (res.0 as isize, res.1)\n         }\n     }\n+    #[inline(always)]\n+    fn overflowing_div(self, rhs: isize) -> (isize, bool) {\n+        let (r, f) = (self as i64).overflowing_div(rhs as i64);\n+        (r as isize, f)\n+    }\n+    #[inline(always)]\n+    fn overflowing_rem(self, rhs: isize) -> (isize, bool) {\n+        let (r, f) = (self as i64).overflowing_rem(rhs as i64);\n+        (r as isize, f)\n+    }\n+    #[inline(always)]\n+    fn overflowing_shl(self, rhs: u32) -> (isize, bool) {\n+        let (r, f) = (self as i64).overflowing_shl(rhs);\n+        (r as isize, f)\n+    }\n+    #[inline(always)]\n+    fn overflowing_shr(self, rhs: u32) -> (isize, bool) {\n+        let (r, f) = (self as i64).overflowing_shr(rhs);\n+        (r as isize, f)\n+    }\n }\n \n #[cfg(target_pointer_width = \"32\")]\n@@ -309,4 +419,24 @@ impl OverflowingOps for isize {\n             (res.0 as isize, res.1)\n         }\n     }\n+    #[inline(always)]\n+    fn overflowing_div(self, rhs: isize) -> (isize, bool) {\n+        let (r, f) = (self as i32).overflowing_div(rhs as i32);\n+        (r as isize, f)\n+    }\n+    #[inline(always)]\n+    fn overflowing_rem(self, rhs: isize) -> (isize, bool) {\n+        let (r, f) = (self as i32).overflowing_rem(rhs as i32);\n+        (r as isize, f)\n+    }\n+    #[inline(always)]\n+    fn overflowing_shl(self, rhs: u32) -> (isize, bool) {\n+        let (r, f) = (self as i32).overflowing_shl(rhs);\n+        (r as isize, f)\n+    }\n+    #[inline(always)]\n+    fn overflowing_shr(self, rhs: u32) -> (isize, bool) {\n+        let (r, f) = (self as i32).overflowing_shr(rhs);\n+        (r as isize, f)\n+    }\n }"}]}