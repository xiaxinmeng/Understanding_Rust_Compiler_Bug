{"sha": "02c49b32caaf9ed23a347ede9ea47743717e94d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYzQ5YjMyY2FhZjllZDIzYTM0N2VkZTllYTQ3NzQzNzE3ZTk0ZDc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-21T22:39:17Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-22T00:31:35Z"}, "message": "libsyntax: Remove `@const` from the language", "tree": {"sha": "3fa5e70ce6a635058746ca4d58b8bad97e0b0e2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fa5e70ce6a635058746ca4d58b8bad97e0b0e2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02c49b32caaf9ed23a347ede9ea47743717e94d7", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02c49b32caaf9ed23a347ede9ea47743717e94d7", "html_url": "https://github.com/rust-lang/rust/commit/02c49b32caaf9ed23a347ede9ea47743717e94d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02c49b32caaf9ed23a347ede9ea47743717e94d7/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "html_url": "https://github.com/rust-lang/rust/commit/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb"}], "stats": {"total": 289, "additions": 41, "deletions": 248}, "files": [{"sha": "b177dced888e475c05eaed02ee5c771c7f9abe78", "filename": "src/libcore/managed.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/02c49b32caaf9ed23a347ede9ea47743717e94d7/src%2Flibcore%2Fmanaged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c49b32caaf9ed23a347ede9ea47743717e94d7/src%2Flibcore%2Fmanaged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmanaged.rs?ref=02c49b32caaf9ed23a347ede9ea47743717e94d7", "patch": "@@ -49,23 +49,43 @@ pub pure fn mut_ptr_eq<T>(a: @mut T, b: @mut T) -> bool {\n }\n \n #[cfg(notest)]\n-impl<T:Eq> Eq for @const T {\n+impl<T:Eq> Eq for @T {\n     #[inline(always)]\n-    pure fn eq(&self, other: &@const T) -> bool { *(*self) == *(*other) }\n+    pure fn eq(&self, other: &@T) -> bool { *(*self) == *(*other) }\n     #[inline(always)]\n-    pure fn ne(&self, other: &@const T) -> bool { *(*self) != *(*other) }\n+    pure fn ne(&self, other: &@T) -> bool { *(*self) != *(*other) }\n }\n \n #[cfg(notest)]\n-impl<T:Ord> Ord for @const T {\n+impl<T:Eq> Eq for @mut T {\n     #[inline(always)]\n-    pure fn lt(&self, other: &@const T) -> bool { *(*self) < *(*other) }\n+    pure fn eq(&self, other: &@mut T) -> bool { *(*self) == *(*other) }\n     #[inline(always)]\n-    pure fn le(&self, other: &@const T) -> bool { *(*self) <= *(*other) }\n+    pure fn ne(&self, other: &@mut T) -> bool { *(*self) != *(*other) }\n+}\n+\n+#[cfg(notest)]\n+impl<T:Ord> Ord for @T {\n+    #[inline(always)]\n+    pure fn lt(&self, other: &@T) -> bool { *(*self) < *(*other) }\n+    #[inline(always)]\n+    pure fn le(&self, other: &@T) -> bool { *(*self) <= *(*other) }\n+    #[inline(always)]\n+    pure fn ge(&self, other: &@T) -> bool { *(*self) >= *(*other) }\n+    #[inline(always)]\n+    pure fn gt(&self, other: &@T) -> bool { *(*self) > *(*other) }\n+}\n+\n+#[cfg(notest)]\n+impl<T:Ord> Ord for @mut T {\n+    #[inline(always)]\n+    pure fn lt(&self, other: &@mut T) -> bool { *(*self) < *(*other) }\n+    #[inline(always)]\n+    pure fn le(&self, other: &@mut T) -> bool { *(*self) <= *(*other) }\n     #[inline(always)]\n-    pure fn ge(&self, other: &@const T) -> bool { *(*self) >= *(*other) }\n+    pure fn ge(&self, other: &@mut T) -> bool { *(*self) >= *(*other) }\n     #[inline(always)]\n-    pure fn gt(&self, other: &@const T) -> bool { *(*self) > *(*other) }\n+    pure fn gt(&self, other: &@mut T) -> bool { *(*self) > *(*other) }\n }\n \n #[test]"}, {"sha": "573f90af020a219ab98dcfb759bd7e2ab7cc48c2", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02c49b32caaf9ed23a347ede9ea47743717e94d7/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c49b32caaf9ed23a347ede9ea47743717e94d7/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=02c49b32caaf9ed23a347ede9ea47743717e94d7", "patch": "@@ -58,6 +58,7 @@ pub enum ObsoleteSyntax {\n     ObsoleteMode,\n     ObsoleteImplicitSelf,\n     ObsoleteLifetimeNotation,\n+    ObsoleteConstManagedPointer,\n }\n \n impl to_bytes::IterBytes for ObsoleteSyntax {\n@@ -193,6 +194,10 @@ pub impl Parser {\n                 \"instead of `&foo/bar`, write `&'foo bar`; instead of \\\n                  `bar/&foo`, write `&bar<'foo>\"\n             ),\n+            ObsoleteConstManagedPointer => (\n+                \"const `@` pointer\",\n+                \"instead of `@const Foo`, write `@Foo`\"\n+            ),\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "95f8afd538a8c997aa68c77a87e58fc265414ac8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/02c49b32caaf9ed23a347ede9ea47743717e94d7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c49b32caaf9ed23a347ede9ea47743717e94d7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=02c49b32caaf9ed23a347ede9ea47743717e94d7", "patch": "@@ -79,7 +79,7 @@ use parse::obsolete::{ObsoleteRecordType, ObsoleteRecordPattern};\n use parse::obsolete::{ObsoleteAssertion, ObsoletePostFnTySigil};\n use parse::obsolete::{ObsoleteBareFnType, ObsoleteNewtypeEnum};\n use parse::obsolete::{ObsoleteMode, ObsoleteImplicitSelf};\n-use parse::obsolete::{ObsoleteLifetimeNotation};\n+use parse::obsolete::{ObsoleteLifetimeNotation, ObsoleteConstManagedPointer};\n use parse::prec::{as_prec, token_to_binop};\n use parse::token::{can_begin_expr, is_ident, is_ident_or_path};\n use parse::token::{is_plain_ident, INTERPOLATED, special_idents};\n@@ -710,6 +710,9 @@ pub impl Parser {\n         if mt.mutbl != m_imm && sigil == OwnedSigil {\n             self.obsolete(*self.last_span, ObsoleteMutOwnedPointer);\n         }\n+        if mt.mutbl == m_const && sigil == ManagedSigil {\n+            self.obsolete(*self.last_span, ObsoleteConstManagedPointer);\n+        }\n \n         ctor(mt)\n     }\n@@ -1636,6 +1639,10 @@ pub impl Parser {\n           token::AT => {\n             self.bump();\n             let m = self.parse_mutability();\n+            if m == m_const {\n+                self.obsolete(*self.last_span, ObsoleteConstManagedPointer);\n+            }\n+\n             let e = self.parse_prefix_expr();\n             hi = e.span.hi;\n             // HACK: turn @[...] into a @-evec"}, {"sha": "610802ca68b310462dccbf8821108c421971f1c7", "filename": "src/test/compile-fail/borrowck-assign-to-subfield.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02c49b32caaf9ed23a347ede9ea47743717e94d7/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-subfield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c49b32caaf9ed23a347ede9ea47743717e94d7/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-subfield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-to-subfield.rs?ref=02c49b32caaf9ed23a347ede9ea47743717e94d7", "patch": "@@ -13,7 +13,6 @@ fn main() {\n         a: int,\n         w: B,\n         x: @B,\n-        y: @const B,\n         z: @mut B\n     }\n     struct B {\n@@ -23,7 +22,6 @@ fn main() {\n         a: 1,\n         w: B {a: 1},\n         x: @B {a: 1},\n-        y: @const B {a: 1},\n         z: @mut B {a: 1}\n     };\n \n@@ -37,6 +35,5 @@ fn main() {\n     // in these cases we pass through a box, so the mut\n     // of the box is dominant\n     p.x.a = 2;     //~ ERROR assigning to immutable field\n-    p.y.a = 2;     //~ ERROR assigning to const field\n     p.z.a = 2;\n }"}, {"sha": "bd1001bf38cb704c0c2d9719ccf29da8071b4ded", "filename": "src/test/compile-fail/borrowck-pat-enum-in-box.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-enum-in-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-enum-in-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-pat-enum-in-box.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -1,37 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn match_imm_box(v: &const @Option<int>) -> int {\n-    match *v {\n-      @Some(ref i) => {*i}\n-      @None => {0}\n-    }\n-}\n-\n-fn match_const_box(v: &const @const Option<int>) -> int {\n-    match *v {\n-      @Some(ref i) => { *i } // ok because this is pure\n-      @None => {0}\n-    }\n-}\n-\n-fn process(_i: int) {}\n-\n-fn match_const_box_and_do_bad_things(v: &const @const Option<int>) {\n-    match *v {\n-      @Some(ref i) => { //~ ERROR illegal borrow unless pure\n-        process(*i) //~ NOTE impure due to access to impure function\n-      }\n-      @None => {}\n-    }\n-}\n-\n-fn main() {\n-}"}, {"sha": "e1c0e67ff8dcc93907b7779f06d615c5d58228a1", "filename": "src/test/compile-fail/borrowck-uniq-via-box.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02c49b32caaf9ed23a347ede9ea47743717e94d7/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c49b32caaf9ed23a347ede9ea47743717e94d7/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-box.rs?ref=02c49b32caaf9ed23a347ede9ea47743717e94d7", "patch": "@@ -50,18 +50,6 @@ fn box_imm_recs(v: @Outer) {\n     borrow(v.f.g.h); // OK\n }\n \n-fn box_const(v: @const ~int) {\n-    borrow(*v); //~ ERROR illegal borrow unless pure\n-}\n-\n-fn box_const_rec(v: @const Rec) {\n-    borrow(v.f); //~ ERROR illegal borrow unless pure\n-}\n-\n-fn box_const_recs(v: @const Outer) {\n-    borrow(v.f.g.h); //~ ERROR illegal borrow unless pure\n-}\n-\n fn main() {\n }\n "}, {"sha": "6ce969c7eaf3c31c0b0f8ecbb6a2e1e6190c0a26", "filename": "src/test/compile-fail/coerce-bad-variance.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fcompile-fail%2Fcoerce-bad-variance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fcompile-fail%2Fcoerce-bad-variance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-bad-variance.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -1,17 +0,0 @@\n-fn mutate(x: &mut @const int) {\n-    *x = @3;\n-}\n-\n-fn give_away1(y: @mut @mut int) {\n-    mutate(y); //~ ERROR values differ in mutability\n-}\n-\n-fn give_away2(y: @mut @const int) {\n-    mutate(y);\n-}\n-\n-fn give_away3(y: @mut @int) {\n-    mutate(y); //~ ERROR values differ in mutability\n-}\n-\n-fn main() {}"}, {"sha": "6f3ccfd35ac21019a03b3cd0f48f391942995cd5", "filename": "src/test/compile-fail/fn-variance-1.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02c49b32caaf9ed23a347ede9ea47743717e94d7/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c49b32caaf9ed23a347ede9ea47743717e94d7/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs?ref=02c49b32caaf9ed23a347ede9ea47743717e94d7", "patch": "@@ -11,7 +11,6 @@\n #[legacy_modes];\n \n fn takes_mut(&&x: @mut int) { }\n-fn takes_const(&&x: @const int) { }\n fn takes_imm(&&x: @int) { }\n \n fn apply<T>(t: T, f: &fn(T)) {\n@@ -20,10 +19,8 @@ fn apply<T>(t: T, f: &fn(T)) {\n \n fn main() {\n     apply(@3, takes_mut); //~ ERROR (values differ in mutability)\n-    apply(@3, takes_const);\n     apply(@3, takes_imm);\n \n     apply(@mut 3, takes_mut);\n-    apply(@mut 3, takes_const);\n     apply(@mut 3, takes_imm); //~ ERROR (values differ in mutability)\n }"}, {"sha": "61668cbdb9eabf663fcb4ad320a8e55b3dc4c993", "filename": "src/test/compile-fail/fn-variance-2.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02c49b32caaf9ed23a347ede9ea47743717e94d7/src%2Ftest%2Fcompile-fail%2Ffn-variance-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c49b32caaf9ed23a347ede9ea47743717e94d7/src%2Ftest%2Fcompile-fail%2Ffn-variance-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-2.rs?ref=02c49b32caaf9ed23a347ede9ea47743717e94d7", "patch": "@@ -25,9 +25,6 @@ fn main() {\n     // @mut int.\n     let f: @mut int = r();\n \n-    // OK.\n-    let g: @const int = r();\n-\n     // Bad.\n     let h: @int = r(); //~ ERROR (values differ in mutability)\n }"}, {"sha": "bb06cbb6d03a231428675360d15d248d1be86e9b", "filename": "src/test/compile-fail/mutable-huh-box-assign.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fcompile-fail%2Fmutable-huh-box-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fcompile-fail%2Fmutable-huh-box-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-box-assign.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    fn f(&&v: @const int) {\n-        *v = 1 //~ ERROR assigning to dereference of const @ pointer\n-    }\n-\n-    let v = @0;\n-\n-    f(v);\n-}"}, {"sha": "0411eeb05ebe1de6114cc8e324d0591e75a5c211", "filename": "src/test/compile-fail/tps-invariant-class.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fcompile-fail%2Ftps-invariant-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fcompile-fail%2Ftps-invariant-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftps-invariant-class.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -1,33 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-struct box_impl<T> {\n-    f: T,\n-}\n-\n-fn box_impl<T>(f: T) -> box_impl<T> {\n-    box_impl {\n-        f: f\n-    }\n-}\n-\n-fn set_box_impl<T>(b: box_impl<@const T>, v: @const T) {\n-    b.f = v;\n-}\n-\n-fn main() {\n-    let b = box_impl::<@int>(@3);\n-    set_box_impl(b, @mut 5);\n-    //~^ ERROR values differ in mutability\n-\n-    // No error when type of parameter actually IS @const int\n-    let b = box_impl::<@const int>(@3);\n-    set_box_impl(b, @mut 5);\n-}"}, {"sha": "9e19ecdcb755691ba7b27bed5088082651f5df8f", "filename": "src/test/compile-fail/tps-invariant-enum.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fcompile-fail%2Ftps-invariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fcompile-fail%2Ftps-invariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftps-invariant-enum.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-struct box<T> {\n-    f: T\n-}\n-\n-struct box_impl<T>(box<T>);\n-\n-fn set_box_impl<T>(b: box_impl<@const T>, v: @const T) {\n-    b.f = v;\n-}\n-\n-fn main() {\n-    let b = box_impl::<@int>(box::<@int> {f: @3});\n-    set_box_impl(b, @mut 5);\n-    //~^ ERROR values differ in mutability\n-\n-    // No error when type of parameter actually IS @const int\n-    let x: @const int = @3; // only way I could find to upcast\n-    let b = box_impl::<@const int>(box::<@const int>{f: x});\n-    set_box_impl(b, @mut 5);\n-}"}, {"sha": "127aa23d6aba40b13a802cf7189627ad26eca360", "filename": "src/test/compile-fail/tps-invariant-trait.rs", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fcompile-fail%2Ftps-invariant-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fcompile-fail%2Ftps-invariant-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftps-invariant-trait.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -1,41 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-trait box_trait<T> {\n-    fn get(&self) -> T;\n-    fn set(&self, t: T);\n-}\n-\n-struct box<T> {\n-    f: T\n-}\n-\n-struct box_impl<T>(box<T>);\n-\n-impl<T:Copy> box_trait<T> for box_impl<T> {\n-    fn get(&self) -> T { return self.f; }\n-    fn set(&self, t: T) { self.f = t; }\n-}\n-\n-fn set_box_trait<T>(b: @box_trait<@const T>, v: @const T) {\n-    b.set(v);\n-}\n-\n-fn set_box_impl<T>(b: box_impl<@const T>, v: @const T) {\n-    b.set(v);\n-}\n-\n-fn main() {\n-    let b = box_impl::<@int>(box::<@int> {f: @3});\n-    set_box_trait(@b as @box_trait<@int>, @mut 5);\n-    //~^ ERROR values differ in mutability\n-    set_box_impl(b, @mut 5);\n-    //~^ ERROR values differ in mutability\n-}"}, {"sha": "7f4c227d2d083ccf39bbc9c963bb3ab2ee99fff1", "filename": "src/test/compile-fail/trait-impl-method-mismatch.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/02c49b32caaf9ed23a347ede9ea47743717e94d7/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c49b32caaf9ed23a347ede9ea47743717e94d7/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-method-mismatch.rs?ref=02c49b32caaf9ed23a347ede9ea47743717e94d7", "patch": "@@ -10,22 +10,12 @@\n \n trait Mumbo {\n     fn jumbo(&self, x: @uint) -> uint;\n-    fn jambo(&self, x: @const uint) -> uint;\n-    fn jbmbo(&self) -> @uint;\n }\n \n impl Mumbo for uint {\n     // Cannot have a larger effect than the trait:\n     unsafe fn jumbo(&self, x: @uint) { *self + *x; }\n     //~^ ERROR expected impure fn but found unsafe fn\n-\n-    // Cannot accept a narrower range of parameters:\n-    fn jambo(&self, x: @uint) { *self + *x; }\n-    //~^ ERROR values differ in mutability\n-\n-    // Cannot return a wider range of values:\n-    fn jbmbo(&self) -> @const uint { @const 0 }\n-    //~^ ERROR values differ in mutability\n }\n \n fn main() {}"}, {"sha": "eb34ebbdfb0d80f5b0606fb86894f531641851d9", "filename": "src/test/compile-fail/trait-impl-subtype.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fcompile-fail%2Ftrait-impl-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fee24c7c4c8ddb1c2c681a01f666a59881acbb/src%2Ftest%2Fcompile-fail%2Ftrait-impl-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-subtype.rs?ref=d4fee24c7c4c8ddb1c2c681a01f666a59881acbb", "patch": "@@ -1,31 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-trait Mumbo {\n-    fn jumbo(&self, x: @uint) -> uint;\n-}\n-\n-impl Mumbo for uint {\n-    // Note: this method def is ok, it is more accepting and\n-    // less effecting than the trait method:\n-    pure fn jumbo(&self, x: @const uint) -> uint { *self + *x }\n-}\n-\n-fn main() {\n-    let a = 3u;\n-    let b = a.jumbo(@mut 6);\n-\n-    let x = @a as @Mumbo;\n-    let y = x.jumbo(@mut 6); //~ ERROR values differ in mutability\n-    let z = x.jumbo(@6);\n-}\n-\n-\n-"}]}