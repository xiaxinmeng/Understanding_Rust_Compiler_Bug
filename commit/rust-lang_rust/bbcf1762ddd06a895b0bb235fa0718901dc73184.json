{"sha": "bbcf1762ddd06a895b0bb235fa0718901dc73184", "node_id": "C_kwDOAAsO6NoAKGJiY2YxNzYyZGRkMDZhODk1YjBiYjIzNWZhMDcxODkwMWRjNzMxODQ", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-01-03T15:43:30Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-04-18T18:59:08Z"}, "message": "Improve naming of \"val\" field", "tree": {"sha": "34bf1963c7a769830bac04949f9cf8445b50df71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34bf1963c7a769830bac04949f9cf8445b50df71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbcf1762ddd06a895b0bb235fa0718901dc73184", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbcf1762ddd06a895b0bb235fa0718901dc73184", "html_url": "https://github.com/rust-lang/rust/commit/bbcf1762ddd06a895b0bb235fa0718901dc73184", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbcf1762ddd06a895b0bb235fa0718901dc73184/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5833e759ecd55c03afeb918263cb35fabc91177", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5833e759ecd55c03afeb918263cb35fabc91177", "html_url": "https://github.com/rust-lang/rust/commit/f5833e759ecd55c03afeb918263cb35fabc91177"}], "stats": {"total": 116, "additions": 58, "deletions": 58}, "files": [{"sha": "15665b1f31ad70138eeeb23f9a6db0f3c28a5b98", "filename": "src/librustdoc/html/static/js/externs.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcf1762ddd06a895b0bb235fa0718901dc73184/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js", "raw_url": "https://github.com/rust-lang/rust/raw/bbcf1762ddd06a895b0bb235fa0718901dc73184/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fexterns.js?ref=bbcf1762ddd06a895b0bb235fa0718901dc73184", "patch": "@@ -21,7 +21,7 @@ var QueryElement;\n /**\n  * @typedef {{\n  *     original: string,\n- *     val: string,\n+ *     userQuery: string,\n  *     length: number,\n  *     pos: number,\n  *     typeFilter: number,"}, {"sha": "55d957db333f05d3109b159a16ef89a362f976a4", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/bbcf1762ddd06a895b0bb235fa0718901dc73184/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/bbcf1762ddd06a895b0bb235fa0718901dc73184/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=bbcf1762ddd06a895b0bb235fa0718901dc73184", "patch": "@@ -163,7 +163,7 @@ window.initSearch = function(rawSearchIndex) {\n      * @param  {string} val     - The user query\n      * @return {ParsedQuery}    - The parsed query\n      */\n-    function parseQuery(val) {\n+    function parseQuery(userQuery) {\n         function isWhitespace(c) {\n             return \" \\t\\n\\r\".indexOf(c) !== -1;\n         }\n@@ -182,8 +182,8 @@ window.initSearch = function(rawSearchIndex) {\n                 throw new Error(\"Cannot use literal search when there is more than one element\");\n             }\n             query.pos += 1;\n-            while (query.pos < query.length && query.val[query.pos] !== \"\\\"\") {\n-                if (query.val[query.pos] === \"\\\\\") {\n+            while (query.pos < query.length && query.userQuery[query.pos] !== \"\\\"\") {\n+                if (query.userQuery[query.pos] === \"\\\\\") {\n                     // We ignore the next coming character.\n                     query.pos += 1;\n                 }\n@@ -198,7 +198,7 @@ window.initSearch = function(rawSearchIndex) {\n         }\n         function skipWhitespaces(query) {\n             while (query.pos < query.length) {\n-                var c = query.val[query.pos];\n+                var c = query.userQuery[query.pos];\n                 if (!isWhitespace(c)) {\n                     break;\n                 }\n@@ -207,7 +207,7 @@ window.initSearch = function(rawSearchIndex) {\n         }\n         function skipStopCharacters(query) {\n             while (query.pos < query.length) {\n-                var c = query.val[query.pos];\n+                var c = query.userQuery[query.pos];\n                 if (!isStopCharacter(c)) {\n                     break;\n                 }\n@@ -216,11 +216,11 @@ window.initSearch = function(rawSearchIndex) {\n         }\n         function isPathStart(query) {\n             var pos = query.pos;\n-            return pos + 1 < query.length && query.val[pos] === ':' && query.val[pos + 1] === ':';\n+            return pos + 1 < query.length && query.userQuery[pos] === ':' && query.userQuery[pos + 1] === ':';\n         }\n         function isReturnArrow(query) {\n             var pos = query.pos;\n-            return pos + 1 < query.length && query.val[pos] === '-' && query.val[pos + 1] === '>';\n+            return pos + 1 < query.length && query.userQuery[pos] === '-' && query.userQuery[pos + 1] === '>';\n         }\n         function removeEmptyStringsFromArray(x) {\n             for (var i = 0, len = x.length; i < len; ++i) {\n@@ -230,19 +230,19 @@ window.initSearch = function(rawSearchIndex) {\n                 }\n             }\n         }\n-        function createQueryElement(query, elems, val, generics) {\n+        function createQueryElement(query, elems, name, generics) {\n             removeEmptyStringsFromArray(generics);\n-            if (val === '*' || (val.length === 0 && generics.length === 0)) {\n+            if (name === '*' || (name.length === 0 && generics.length === 0)) {\n                 return;\n             }\n-            var paths = val.split(\"::\");\n+            var paths = name.split(\"::\");\n             removeEmptyStringsFromArray(paths);\n             // In case we only have something like `<p>`, there is no name but it remains valid.\n             if (paths.length === 0) {\n                 paths = [\"\"];\n             }\n             elems.push({\n-                name: val,\n+                name: name,\n                 fullPath: paths,\n                 pathWithoutLast: paths.slice(0, paths.length - 1),\n                 pathLast: paths[paths.length - 1],\n@@ -257,14 +257,14 @@ window.initSearch = function(rawSearchIndex) {\n             var start = query.pos;\n             var end = start;\n             // We handle the strings on their own mostly to make code easier to follow.\n-            if (query.val[query.pos] === \"\\\"\") {\n+            if (query.userQuery[query.pos] === \"\\\"\") {\n                 start += 1;\n                 getStringElem(query, isInGenerics);\n                 end = query.pos - 1;\n                 skipWhitespaces(query);\n             } else {\n                 while (query.pos < query.length) {\n-                    var c = query.val[query.pos];\n+                    var c = query.userQuery[query.pos];\n                     if (isStopCharacter(c) || isSpecialStartCharacter(c)) {\n                         break;\n                     }\n@@ -281,17 +281,17 @@ window.initSearch = function(rawSearchIndex) {\n                     skipWhitespaces(query);\n                 }\n             }\n-            if (query.pos < query.length && query.val[query.pos] === \"<\") {\n+            if (query.pos < query.length && query.userQuery[query.pos] === \"<\") {\n                 getItemsBefore(query, generics, \">\");\n             }\n             if (start >= end && generics.length === 0) {\n                 return;\n             }\n-            createQueryElement(query, elems, query.val.slice(start, end), generics);\n+            createQueryElement(query, elems, query.userQuery.slice(start, end), generics);\n         }\n         function getItemsBefore(query, elems, limit) {\n             while (query.pos < query.length) {\n-                var c = query.val[query.pos];\n+                var c = query.userQuery[query.pos];\n                 if (c === limit) {\n                     break;\n                 } else if (isSpecialStartCharacter(c) || c === \":\") {\n@@ -307,7 +307,7 @@ window.initSearch = function(rawSearchIndex) {\n             var c, before;\n \n             while (query.pos < query.length) {\n-                c = query.val[query.pos];\n+                c = query.userQuery[query.pos];\n                 if (isStopCharacter(c)) {\n                     if (c === \",\") {\n                         query.pos += 1;\n@@ -331,14 +331,14 @@ window.initSearch = function(rawSearchIndex) {\n                 getNextElem(query, query.elems, false);\n                 if (query.elems.length === before) {\n                     // Nothing was added, let's check it's not because of a solo \":\"!\n-                    if (query.pos >= query.length || query.val[query.pos] !== \":\") {\n+                    if (query.pos >= query.length || query.userQuery[query.pos] !== \":\") {\n                         break;\n                     }\n                     query.pos += 1;\n                 }\n             }\n             while (query.pos < query.length) {\n-                c = query.val[query.pos];\n+                c = query.userQuery[query.pos];\n                 if (query.args.length === 0 && c === \"(\") {\n                     if (query.elemName === null && query.elems.length === 1) {\n                         query.elemName = query.elems.pop();\n@@ -364,11 +364,11 @@ window.initSearch = function(rawSearchIndex) {\n             return NO_TYPE_FILTER;\n         }\n \n-        val = val.trim();\n+        userQuery = userQuery.trim();\n         var query = {\n-            original: val,\n-            val: val.toLowerCase(),\n-            length: val.length,\n+            original: userQuery,\n+            userQuery: userQuery.toLowerCase(),\n+            length: userQuery.length,\n             pos: 0,\n             typeFilter: null,\n             elems: [],\n@@ -386,7 +386,7 @@ window.initSearch = function(rawSearchIndex) {\n             literalSearch: false,\n             error: null,\n         };\n-        query.id = val;\n+        query.id = userQuery;\n         try {\n             parseInput(query);\n         } catch (err) {\n@@ -405,9 +405,9 @@ window.initSearch = function(rawSearchIndex) {\n         if (query.elemName !== null) {\n             query.foundElems += 1;\n         }\n-        if (query.foundElems === 0 && val.length !== 0) {\n+        if (query.foundElems === 0 && userQuery.length !== 0) {\n             // In this case, we'll simply keep whatever was entered by the user...\n-            createQueryElement(query, query.elems, val, []);\n+            createQueryElement(query, query.elems, userQuery, []);\n             query.foundElems += 1;\n         }\n         if (query.typeFilter !== null) {\n@@ -422,8 +422,8 @@ window.initSearch = function(rawSearchIndex) {\n             query.elemName = null;\n         }\n         if (query.elemName !== null || query.elems.length === 1) {\n-            val = query.elemName || query.elems[0];\n-            query.nameSplit = typeof val.path === \"undefined\" ? null : val.path;\n+            userQuery = query.elemName || query.elems[0];\n+            query.nameSplit = typeof userQuery.path === \"undefined\" ? null : userQuery.path;\n         }\n         return query;\n     }\n@@ -493,7 +493,7 @@ window.initSearch = function(rawSearchIndex) {\n \n         function sortResults(results, isType) {\n             var nameSplit = queryInfo.nameSplit;\n-            var query = queryInfo.val;\n+            var query = queryInfo.userQuery;\n             var ar = [];\n             for (var entry in results) {\n                 if (hasOwnPropertyRustdoc(results, entry)) {\n@@ -1344,7 +1344,7 @@ window.initSearch = function(rawSearchIndex) {\n             output.className = \"search-failed\" + extraClass;\n             output.innerHTML = \"No results :(<br/>\" +\n                 \"Try on <a href=\\\"https://duckduckgo.com/?q=\" +\n-                encodeURIComponent(\"rust \" + query.val) +\n+                encodeURIComponent(\"rust \" + query.userQuery) +\n                 \"\\\">DuckDuckGo</a>?<br/><br/>\" +\n                 \"Or try looking in one of these:<ul><li>The <a \" +\n                 \"href=\\\"https://doc.rust-lang.org/reference/index.html\\\">Rust Reference</a> \" +\n@@ -1424,7 +1424,7 @@ window.initSearch = function(rawSearchIndex) {\n         }\n \n         var output = `<div id=\"search-settings\">` +\n-            `<h1 class=\"search-results-title\">Results for ${escape(results.query.val)}$` +\n+            `<h1 class=\"search-results-title\">Results for ${escape(results.query.userQuery)}` +\n             `${typeFilter}</h1> in ${crates} </div>` +\n             `<div id=\"titles\">` +\n             makeTabHeader(0, \"In Names\", ret_others[1]) +"}, {"sha": "b789fd05d7c7251eb79ac40afda4a27bb4190236", "filename": "src/test/rustdoc-js-std/parser-errors.js", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcf1762ddd06a895b0bb235fa0718901dc73184/src%2Ftest%2Frustdoc-js-std%2Fparser-errors.js", "raw_url": "https://github.com/rust-lang/rust/raw/bbcf1762ddd06a895b0bb235fa0718901dc73184/src%2Ftest%2Frustdoc-js-std%2Fparser-errors.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-errors.js?ref=bbcf1762ddd06a895b0bb235fa0718901dc73184", "patch": "@@ -11,7 +11,7 @@ const PARSED = [\n         original: \"<\\\"P\\\">\",\n         returned: [],\n         typeFilter: null,\n-        val: \"<\\\"p\\\">\",\n+        userQuery: \"<\\\"p\\\">\",\n         error: \"`\\\"` cannot be used in generics\",\n     },\n     {\n@@ -24,7 +24,7 @@ const PARSED = [\n         original: \"\\\"P\\\" \\\"P\\\"\",\n         returned: [],\n         typeFilter: null,\n-        val: \"\\\"p\\\" \\\"p\\\"\",\n+        userQuery: \"\\\"p\\\" \\\"p\\\"\",\n         error: \"Cannot have more than one literal search element\",\n     },\n     {\n@@ -37,7 +37,7 @@ const PARSED = [\n         original: \"P \\\"P\\\"\",\n         returned: [],\n         typeFilter: null,\n-        val: \"p \\\"p\\\"\",\n+        userQuery: \"p \\\"p\\\"\",\n         error: \"Cannot use literal search when there is more than one element\",\n     },\n ];"}, {"sha": "60eb8aa92b27e510ac41ed750c4fbc6277cf6aa6", "filename": "src/test/rustdoc-js-std/parser-filter.js", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbcf1762ddd06a895b0bb235fa0718901dc73184/src%2Ftest%2Frustdoc-js-std%2Fparser-filter.js", "raw_url": "https://github.com/rust-lang/rust/raw/bbcf1762ddd06a895b0bb235fa0718901dc73184/src%2Ftest%2Frustdoc-js-std%2Fparser-filter.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-filter.js?ref=bbcf1762ddd06a895b0bb235fa0718901dc73184", "patch": "@@ -17,7 +17,7 @@ const PARSED = [\n         original: \"fn:foo\",\n         returned: [],\n         typeFilter: 5,\n-        val: \"fn:foo\",\n+        userQuery: \"fn:foo\",\n         error: null,\n     },\n     {\n@@ -36,7 +36,7 @@ const PARSED = [\n         original: \"enum : foo\",\n         returned: [],\n         typeFilter: 4,\n-        val: \"enum : foo\",\n+        userQuery: \"enum : foo\",\n         error: null,\n     },\n     {\n@@ -55,7 +55,7 @@ const PARSED = [\n         original: \"macro<f>:foo\",\n         returned: [],\n         typeFilter: 14,\n-        val: \"macro<f>:foo\",\n+        userQuery: \"macro<f>:foo\",\n         error: null,\n     },\n ];"}, {"sha": "d21adf767ded3becff7fb7405c92bd0e6ae8580e", "filename": "src/test/rustdoc-js-std/parser-generics.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcf1762ddd06a895b0bb235fa0718901dc73184/src%2Ftest%2Frustdoc-js-std%2Fparser-generics.js", "raw_url": "https://github.com/rust-lang/rust/raw/bbcf1762ddd06a895b0bb235fa0718901dc73184/src%2Ftest%2Frustdoc-js-std%2Fparser-generics.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-generics.js?ref=bbcf1762ddd06a895b0bb235fa0718901dc73184", "patch": "@@ -25,7 +25,7 @@ const PARSED = [\n         original: \"<P>\",\n         returned: [],\n         typeFilter: -1,\n-        val: \"<p>\",\n+        userQuery: \"<p>\",\n         error: null,\n     },\n     {\n@@ -75,7 +75,7 @@ const PARSED = [\n         original: 'A<B<C<D>, E>',\n         returned: [],\n         typeFilter: -1,\n-        val: 'a<b<c<d>, e>',\n+        userQuery: 'a<b<c<d>, e>',\n         error: null,\n     }\n ];"}, {"sha": "88761771d9d3be25b9a2f55658be7edbac929252", "filename": "src/test/rustdoc-js-std/parser-in_args.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcf1762ddd06a895b0bb235fa0718901dc73184/src%2Ftest%2Frustdoc-js-std%2Fparser-in_args.js", "raw_url": "https://github.com/rust-lang/rust/raw/bbcf1762ddd06a895b0bb235fa0718901dc73184/src%2Ftest%2Frustdoc-js-std%2Fparser-in_args.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-in_args.js?ref=bbcf1762ddd06a895b0bb235fa0718901dc73184", "patch": "@@ -17,7 +17,7 @@ const PARSED = [\n         original: \"(whatever)\",\n         returned: [],\n         typeFilter: -1,\n-        val: \"(whatever)\",\n+        userQuery: \"(whatever)\",\n         error: null,\n     },\n     {\n@@ -44,7 +44,7 @@ const PARSED = [\n         original: \"(<P>)\",\n         returned: [],\n         typeFilter: -1,\n-        val: \"(<p>)\",\n+        userQuery: \"(<p>)\",\n         error: null,\n     },\n ];"}, {"sha": "b5d96e9f507c6e97499746a4ae2d0eca30b21756", "filename": "src/test/rustdoc-js-std/parser-invalid.js", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbcf1762ddd06a895b0bb235fa0718901dc73184/src%2Ftest%2Frustdoc-js-std%2Fparser-invalid.js", "raw_url": "https://github.com/rust-lang/rust/raw/bbcf1762ddd06a895b0bb235fa0718901dc73184/src%2Ftest%2Frustdoc-js-std%2Fparser-invalid.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-invalid.js?ref=bbcf1762ddd06a895b0bb235fa0718901dc73184", "patch": "@@ -37,7 +37,7 @@ const PARSED = [\n             },\n         ],\n         typeFilter: -1,\n-        val: \"-> <p> (p2)\",\n+        userQuery: \"-> <p> (p2)\",\n         error: null,\n     },\n     {\n@@ -65,7 +65,7 @@ const PARSED = [\n         original: \"(p -> p2\",\n         returned: [],\n         typeFilter: -1,\n-        val: \"(p -> p2\",\n+        userQuery: \"(p -> p2\",\n         error: null,\n     },\n     {\n@@ -86,7 +86,7 @@ const PARSED = [\n         original: \"a b\",\n         returned: [],\n         typeFilter: -1,\n-        val: \"a b\",\n+        userQuery: \"a b\",\n         error: null,\n     },\n     {\n@@ -122,7 +122,7 @@ const PARSED = [\n         original: \"a,b(c)\",\n         returned: [],\n         typeFilter: -1,\n-        val: \"a,b(c)\",\n+        userQuery: \"a,b(c)\",\n         error: null,\n     },\n ];"}, {"sha": "1a70bafbf5e9fe1606811318755af4ae6507ad65", "filename": "src/test/rustdoc-js-std/parser-literal.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcf1762ddd06a895b0bb235fa0718901dc73184/src%2Ftest%2Frustdoc-js-std%2Fparser-literal.js", "raw_url": "https://github.com/rust-lang/rust/raw/bbcf1762ddd06a895b0bb235fa0718901dc73184/src%2Ftest%2Frustdoc-js-std%2Fparser-literal.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-literal.js?ref=bbcf1762ddd06a895b0bb235fa0718901dc73184", "patch": "@@ -25,7 +25,7 @@ const PARSED = [\n         original: \"\\\"R\\\"<P>\",\n         returned: [],\n         typeFilter: -1,\n-        val: \"\\\"r\\\"<p>\",\n+        userQuery: \"\\\"r\\\"<p>\",\n         error: null,\n     }\n ];"}, {"sha": "980a396ba7f6ff88b1dcdee74dc485f8a573506c", "filename": "src/test/rustdoc-js-std/parser-paths.js", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbcf1762ddd06a895b0bb235fa0718901dc73184/src%2Ftest%2Frustdoc-js-std%2Fparser-paths.js", "raw_url": "https://github.com/rust-lang/rust/raw/bbcf1762ddd06a895b0bb235fa0718901dc73184/src%2Ftest%2Frustdoc-js-std%2Fparser-paths.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-paths.js?ref=bbcf1762ddd06a895b0bb235fa0718901dc73184", "patch": "@@ -17,7 +17,7 @@ const PARSED = [\n         original: \"A::B\",\n         returned: [],\n         typeFilter: -1,\n-        val: \"a::b\",\n+        userQuery: \"a::b\",\n         error: null,\n     },\n     {\n@@ -36,7 +36,7 @@ const PARSED = [\n         original: '::A::B',\n         returned: [],\n         typeFilter: -1,\n-        val: '::a::b',\n+        userQuery: '::a::b',\n         error: null,\n     },\n     {\n@@ -64,7 +64,7 @@ const PARSED = [\n         original: 'A::B::,C',\n         returned: [],\n         typeFilter: -1,\n-        val: 'a::b::,c',\n+        userQuery: 'a::b::,c',\n         error: null,\n     },\n     {\n@@ -100,7 +100,7 @@ const PARSED = [\n         original: 'A::B::<f>,C',\n         returned: [],\n         typeFilter: -1,\n-        val: 'a::b::<f>,c',\n+        userQuery: 'a::b::<f>,c',\n         error: null,\n     },\n ];"}, {"sha": "aa1b8d3dc64e04eb93be5c609671c3d4a6565f43", "filename": "src/test/rustdoc-js-std/parser-quote.js", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbcf1762ddd06a895b0bb235fa0718901dc73184/src%2Ftest%2Frustdoc-js-std%2Fparser-quote.js", "raw_url": "https://github.com/rust-lang/rust/raw/bbcf1762ddd06a895b0bb235fa0718901dc73184/src%2Ftest%2Frustdoc-js-std%2Fparser-quote.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-quote.js?ref=bbcf1762ddd06a895b0bb235fa0718901dc73184", "patch": "@@ -17,7 +17,7 @@ const PARSED = [\n             generics: [],\n         }],\n         typeFilter: -1,\n-        val: \"-> \\\"p\\\"\",\n+        userQuery: \"-> \\\"p\\\"\",\n         error: null,\n     },\n     // This one checks that if quotes are used on the type filter, they're\n@@ -38,7 +38,7 @@ const PARSED = [\n         original: \"\\\"const\\\": \\\"p\\\"\",\n         returned: [],\n         typeFilter: 17,\n-        val: \"\\\"const\\\": \\\"p\\\"\",\n+        userQuery: \"\\\"const\\\": \\\"p\\\"\",\n         error: null,\n     },\n     {\n@@ -57,7 +57,7 @@ const PARSED = [\n         original: \"(\\\"p\\\")\",\n         returned: [],\n         typeFilter: -1,\n-        val: \"(\\\"p\\\")\",\n+        userQuery: \"(\\\"p\\\")\",\n         error: null,\n     },\n     // This test checks that a literal item can still have generics.\n@@ -83,7 +83,7 @@ const PARSED = [\n         original: \"\\\"p\\\"<p>\",\n         returned: [],\n         typeFilter: -1,\n-        val: \"\\\"p\\\"<p>\",\n+        userQuery: \"\\\"p\\\"<p>\",\n         error: null,\n     },\n ];"}, {"sha": "ceecda670503d6c31a0244c54e534959e0bf39be", "filename": "src/test/rustdoc-js-std/parser-returned.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbcf1762ddd06a895b0bb235fa0718901dc73184/src%2Ftest%2Frustdoc-js-std%2Fparser-returned.js", "raw_url": "https://github.com/rust-lang/rust/raw/bbcf1762ddd06a895b0bb235fa0718901dc73184/src%2Ftest%2Frustdoc-js-std%2Fparser-returned.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-returned.js?ref=bbcf1762ddd06a895b0bb235fa0718901dc73184", "patch": "@@ -25,7 +25,7 @@ const PARSED = [\n             ],\n         }],\n         typeFilter: -1,\n-        val: \"-> <p>\",\n+        userQuery: \"-> <p>\",\n         error: null,\n     },\n     {\n@@ -44,7 +44,7 @@ const PARSED = [\n             generics: [],\n         }],\n         typeFilter: -1,\n-        val: \"-> p\",\n+        userQuery: \"-> p\",\n         error: null,\n     },\n ];"}, {"sha": "5b051523ceaef47410af18f04f111328504e9f1d", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbcf1762ddd06a895b0bb235fa0718901dc73184/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/bbcf1762ddd06a895b0bb235fa0718901dc73184/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=bbcf1762ddd06a895b0bb235fa0718901dc73184", "patch": "@@ -296,7 +296,7 @@ function checkFieldNeededFields(fullPath, expected, error_text, queryName, posit\n             \"original\",\n             \"returned\",\n             \"typeFilter\",\n-            \"val\",\n+            \"userQuery\",\n             \"error\",\n         ];\n     } else if (fullPath.endsWith(\"elems\") || fullPath.endsWith(\"generics\")) {"}]}