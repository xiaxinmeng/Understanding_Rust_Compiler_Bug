{"sha": "f78d6a0d9719d6d63b06e0fb0a4648a86bf317b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3OGQ2YTBkOTcxOWQ2ZDYzYjA2ZTBmYjBhNDY0OGE4NmJmMzE3Yjg=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-12T08:36:14Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-07-13T14:31:14Z"}, "message": "Don't use magic numbers for synconf names\n\ninstead read them from the `libc` crate if available.\n\nfixes #216", "tree": {"sha": "2cc57a9c957ee4cdeb6aa497ca9fbfa8b2591e80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cc57a9c957ee4cdeb6aa497ca9fbfa8b2591e80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f78d6a0d9719d6d63b06e0fb0a4648a86bf317b8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCABKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAllnhDIsHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MARg\nkhAA0fih2yJrFaf3D4HuPfmwwzPzv5bKD1AcDifhIaUP8kdkyQ9/EStJqK58deKT\ny5rUXHlVsDi8+gPumjaVYFUsQUsUuJD79a0+nUHSDgnQ6Qjyb3xtfybVhPzJnTl8\nlZOaPa+rahOehLR3REbmQlLOPxJ/ogingubG6g4ippNvrNYi0Y0EgKezANJEsZvw\n8CW92D3SzVeLAsshQV5kk+MdCV5d7EC8qpdT+4QJFspXBfbpjblLN/jkt9EgrFXU\nGmFcbawtEh2skYe0LTub2G10sgXcpdpx4szZ1Yyl9Brw6/3e/JollL0TxM7+N++e\n565yZaisvQ91gX2WmEuM1aHhVFbYeAhRlSbWc+BGToCVVAHgAX2ckd353V21AdI3\nbYHhxScLbrGTl1drj47DBUTBc1EXQEiAqfEJsV09cZVizVKyy2pUQDQnCDIo4pGk\nWo7HFwOUMuARWbZ/88kSKI8EfFYDtd7oZ+gR9WgVXIfTJ87gFFKomhUoSmK9hofz\ne4IOJG1Wb8E6sJ1We8ElKQiLRPDjKBQVdUccwPbyxs195w/jWJtbguybOcuB/hTz\nhhPBFRAoLbm6PE88eAuWxTWdp2ex3JSOu4N5TOqe0GnN1Mr429RWWlENYQPY4U3x\nUTgzLi7qjHO76eC13Ov5/VkI7oTQbn5R4FQqqWjMuyfgLp4=\n=SDIG\n-----END PGP SIGNATURE-----", "payload": "tree 2cc57a9c957ee4cdeb6aa497ca9fbfa8b2591e80\nparent fdef27acf5a233220272776cd565378a4fc59459\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1499848574 +0200\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1499956274 +0200\n\nDon't use magic numbers for synconf names\n\ninstead read them from the `libc` crate if available.\n\nfixes #216\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f78d6a0d9719d6d63b06e0fb0a4648a86bf317b8", "html_url": "https://github.com/rust-lang/rust/commit/f78d6a0d9719d6d63b06e0fb0a4648a86bf317b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f78d6a0d9719d6d63b06e0fb0a4648a86bf317b8/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdef27acf5a233220272776cd565378a4fc59459", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdef27acf5a233220272776cd565378a4fc59459", "html_url": "https://github.com/rust-lang/rust/commit/fdef27acf5a233220272776cd565378a4fc59459"}], "stats": {"total": 69, "additions": 59, "deletions": 10}, "files": [{"sha": "3e1155e0b874dd1f064a301eee369a2d70397fbe", "filename": "src/error.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f78d6a0d9719d6d63b06e0fb0a4648a86bf317b8/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f78d6a0d9719d6d63b06e0fb0a4648a86bf317b8/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=f78d6a0d9719d6d63b06e0fb0a4648a86bf317b8", "patch": "@@ -69,6 +69,7 @@ pub enum EvalError<'tcx> {\n     NeedsRfc(String),\n     NotConst(String),\n     ReadFromReturnPointer,\n+    PathNotFound(Vec<String>),\n }\n \n pub type EvalResult<'tcx, T = ()> = Result<T, EvalError<'tcx>>;\n@@ -175,6 +176,8 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"this feature is not compatible with constant evaluation\",\n             ReadFromReturnPointer =>\n                 \"tried to read from the return pointer\",\n+            EvalError::PathNotFound(_) =>\n+                \"a path could not be resolved, maybe the crate is not loaded\",\n         }\n     }\n \n@@ -215,6 +218,8 @@ impl<'tcx> fmt::Display for EvalError<'tcx> {\n                 write!(f, \"\\\"{}\\\" needs an rfc before being allowed inside constants\", msg),\n             NotConst(ref msg) =>\n                 write!(f, \"Cannot evaluate within constants: \\\"{}\\\"\", msg),\n+            EvalError::PathNotFound(ref path) =>\n+                write!(f, \"Cannot find path {:?}\", path),\n             _ => write!(f, \"{}\", self.description()),\n         }\n     }"}, {"sha": "c15b7b9162d24e6f22b7a8e6180646b3b4c1cda5", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 54, "deletions": 10, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/f78d6a0d9719d6d63b06e0fb0a4648a86bf317b8/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f78d6a0d9719d6d63b06e0fb0a4648a86bf317b8/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=f78d6a0d9719d6d63b06e0fb0a4648a86bf317b8", "patch": "@@ -1,5 +1,4 @@\n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n-use rustc::hir::def::Def;\n use rustc::mir;\n use rustc::ty::{self, TypeVariants, Ty};\n use rustc::ty::layout::Layout;\n@@ -856,12 +855,50 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             \"sysconf\" => {\n                 let name = self.value_to_primval(args[0], usize)?.to_u64()?;\n                 trace!(\"sysconf() called with name {}\", name);\n-                let result = match name {\n-                    30 => PrimVal::Bytes(4096), // _SC_PAGESIZE\n-                    70 => PrimVal::from_i128(-1), // _SC_GETPW_R_SIZE_MAX\n-                    _ => return Err(EvalError::Unimplemented(format!(\"Unimplemented sysconf name: {}\", name)))\n-                };\n-                self.write_primval(dest, result, dest_ty)?;\n+                // cache the sysconf integers\n+                let paths = &[\n+                    (&[\"libc\", \"_SC_PAGESIZE\"], PrimVal::Bytes(4096)),\n+                    (&[\"libc\", \"_SC_GETPW_R_SIZE_MAX\"], PrimVal::from_i128(-1)),\n+                ];\n+                let mut result = None;\n+                for &(path, path_value) in paths {\n+                    if let Ok(instance) = self.resolve_path(path) {\n+                        use lvalue::{Global, GlobalId};\n+                        let cid = GlobalId { instance, promoted: None };\n+                        let val = match self.globals.get(&cid).map(|glob| glob.value) {\n+                            Some(value) => value,\n+                            None => {\n+                                let mir = self.load_mir(instance.def)?;\n+                                self.globals.insert(cid, Global::uninitialized(mir.return_ty));\n+                                let cleanup = StackPopCleanup::MarkStatic(false);\n+                                let name = ty::tls::with(|tcx| tcx.item_path_str(def_id));\n+                                trace!(\"pushing stack frame for global: {}\", name);\n+                                let frame = self.stack.len();\n+                                self.push_stack_frame(\n+                                    instance,\n+                                    mir.span,\n+                                    mir,\n+                                    Lvalue::Global(cid),\n+                                    cleanup,\n+                                )?;\n+                                while self.stack.len() != frame {\n+                                    self.step()?;\n+                                }\n+                                self.globals.get(&cid).expect(\"we just computed the global\").value\n+                            }\n+                        };\n+                        let val = self.value_to_primval(val, usize)?.to_u64()?;\n+                        if val == name {\n+                            result = Some(path_value);\n+                            break;\n+                        }\n+                    }\n+                }\n+                if let Some(result) = result {\n+                    self.write_primval(dest, result, dest_ty)?;\n+                } else {\n+                    return Err(EvalError::Unimplemented(format!(\"Unimplemented sysconf name: {}\", name)));\n+                }\n             }\n \n             // Hook pthread calls that go to the thread-local storage memory subsystem\n@@ -936,8 +973,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         self.goto_block(dest_block);\n         Ok(())\n     }\n-    /// Get the definition associated to a path.\n-    fn path_to_def(&self, path: &[&str]) -> Option<Def> {\n+\n+    /// Get an instance for a path.\n+    fn resolve_path(&self, path: &[&str]) -> EvalResult<'tcx, ty::Instance<'tcx>> {\n         let cstore = &self.tcx.sess.cstore;\n \n         let crates = cstore.crates();\n@@ -955,7 +993,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     for item in &mem::replace(&mut items, vec![]) {\n                         if item.ident.name == *segment {\n                             if path_it.peek().is_none() {\n-                                return Some(item.def);\n+                                return Some(ty::Instance::mono(self.tcx, item.def.def_id()));\n                             }\n \n                             items = cstore.item_children(item.def.def_id(), self.tcx.sess);\n@@ -965,5 +1003,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 }\n                 None\n             })\n+            .ok_or_else(|| {\n+                let path = path.iter()\n+                    .map(|&s| s.to_owned())\n+                    .collect();\n+                EvalError::PathNotFound(path)\n+            })\n     }\n }"}]}