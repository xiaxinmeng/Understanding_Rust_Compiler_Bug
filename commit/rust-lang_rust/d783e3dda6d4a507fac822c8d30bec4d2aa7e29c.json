{"sha": "d783e3dda6d4a507fac822c8d30bec4d2aa7e29c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ODNlM2RkYTZkNGE1MDdmYWM4MjJjOGQzMGJlYzRkMmFhN2UyOWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-04T11:43:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-04T11:43:05Z"}, "message": "Auto merge of #6839 - matthiaskrgr:lintcheck_clippy_warnings, r=flip1995\n\nlintcheck: fix clippy warnings\n\nsplit out from https://github.com/rust-lang/rust-clippy/pull/6829\nchangelog: none", "tree": {"sha": "5c55b80024caf33ea8faddb627301344809dcbd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c55b80024caf33ea8faddb627301344809dcbd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d783e3dda6d4a507fac822c8d30bec4d2aa7e29c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d783e3dda6d4a507fac822c8d30bec4d2aa7e29c", "html_url": "https://github.com/rust-lang/rust/commit/d783e3dda6d4a507fac822c8d30bec4d2aa7e29c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d783e3dda6d4a507fac822c8d30bec4d2aa7e29c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff51964102db6fbf73cd2e111d441bf8202ea205", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff51964102db6fbf73cd2e111d441bf8202ea205", "html_url": "https://github.com/rust-lang/rust/commit/ff51964102db6fbf73cd2e111d441bf8202ea205"}, {"sha": "bbe641678c70924de9dd6624db819ef0324bbb22", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbe641678c70924de9dd6624db819ef0324bbb22", "html_url": "https://github.com/rust-lang/rust/commit/bbe641678c70924de9dd6624db819ef0324bbb22"}], "stats": {"total": 53, "additions": 27, "deletions": 26}, "files": [{"sha": "977ff771a99f444a9298b2052d04c689627694df", "filename": "clippy_dev/src/lintcheck.rs", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d783e3dda6d4a507fac822c8d30bec4d2aa7e29c/clippy_dev%2Fsrc%2Flintcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d783e3dda6d4a507fac822c8d30bec4d2aa7e29c/clippy_dev%2Fsrc%2Flintcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flintcheck.rs?ref=d783e3dda6d4a507fac822c8d30bec4d2aa7e29c", "patch": "@@ -5,14 +5,19 @@\n // positives.\n \n #![cfg(feature = \"lintcheck\")]\n-#![allow(clippy::filter_map)]\n+#![allow(clippy::filter_map, clippy::collapsible_else_if)]\n+#![allow(clippy::blocks_in_if_conditions)] // FP on `if x.iter().any(|x| ...)`\n \n use crate::clippy_project_root;\n \n use std::collections::HashMap;\n use std::process::Command;\n use std::sync::atomic::{AtomicUsize, Ordering};\n-use std::{env, fmt, fs::write, path::PathBuf};\n+use std::{\n+    env, fmt,\n+    fs::write,\n+    path::{Path, PathBuf},\n+};\n \n use clap::ArgMatches;\n use rayon::prelude::*;\n@@ -196,11 +201,9 @@ impl CrateSource {\n                 if !crate_root.exists() {\n                     println!(\"Copying {} to {}\", path.display(), copy_dest.display());\n \n-                    dir::copy(path, &copy_dest, &dir::CopyOptions::new()).expect(&format!(\n-                        \"Failed to copy from {}, to  {}\",\n-                        path.display(),\n-                        crate_root.display()\n-                    ));\n+                    dir::copy(path, &copy_dest, &dir::CopyOptions::new()).unwrap_or_else(|_| {\n+                        panic!(\"Failed to copy from {}, to  {}\", path.display(), crate_root.display())\n+                    });\n                 } else {\n                     println!(\n                         \"Not copying {} to {}, destination already exists\",\n@@ -225,7 +228,7 @@ impl Crate {\n     /// issued\n     fn run_clippy_lints(\n         &self,\n-        cargo_clippy_path: &PathBuf,\n+        cargo_clippy_path: &Path,\n         target_dir_index: &AtomicUsize,\n         thread_limit: usize,\n         total_crates_to_lint: usize,\n@@ -308,13 +311,13 @@ impl LintcheckConfig {\n         // first, check if we got anything passed via the LINTCHECK_TOML env var,\n         // if not, ask clap if we got any value for --crates-toml  <foo>\n         // if not, use the default \"clippy_dev/lintcheck_crates.toml\"\n-        let sources_toml = env::var(\"LINTCHECK_TOML\").unwrap_or(\n+        let sources_toml = env::var(\"LINTCHECK_TOML\").unwrap_or_else(|_| {\n             clap_config\n                 .value_of(\"crates-toml\")\n                 .clone()\n                 .unwrap_or(\"clippy_dev/lintcheck_crates.toml\")\n-                .to_string(),\n-        );\n+                .to_string()\n+        });\n \n         let sources_toml_path = PathBuf::from(sources_toml);\n \n@@ -330,7 +333,7 @@ impl LintcheckConfig {\n             Some(threads) => {\n                 let threads: usize = threads\n                     .parse()\n-                    .expect(&format!(\"Failed to parse '{}' to a digit\", threads));\n+                    .unwrap_or_else(|_| panic!(\"Failed to parse '{}' to a digit\", threads));\n                 if threads == 0 {\n                     // automatic choice\n                     // Rayon seems to return thread count so half that for core count\n@@ -387,7 +390,7 @@ fn build_clippy() {\n }\n \n /// Read a `toml` file and return a list of `CrateSources` that we want to check with clippy\n-fn read_crates(toml_path: &PathBuf) -> Vec<CrateSource> {\n+fn read_crates(toml_path: &Path) -> Vec<CrateSource> {\n     let toml_content: String =\n         std::fs::read_to_string(&toml_path).unwrap_or_else(|_| panic!(\"Failed to read {}\", toml_path.display()));\n     let crate_list: SourceList =\n@@ -499,7 +502,7 @@ fn gather_stats(clippy_warnings: &[ClippyWarning]) -> (String, HashMap<&String,\n \n /// check if the latest modification of the logfile is older than the modification date of the\n /// clippy binary, if this is true, we should clean the lintchec shared target directory and recheck\n-fn lintcheck_needs_rerun(lintcheck_logs_path: &PathBuf) -> bool {\n+fn lintcheck_needs_rerun(lintcheck_logs_path: &Path) -> bool {\n     let clippy_modified: std::time::SystemTime = {\n         let mut times = [CLIPPY_DRIVER_PATH, CARGO_CLIPPY_PATH].iter().map(|p| {\n             std::fs::metadata(p)\n@@ -533,15 +536,13 @@ pub fn run(clap_config: &ArgMatches) {\n     // refresh the logs\n     if lintcheck_needs_rerun(&config.lintcheck_results_path) {\n         let shared_target_dir = \"target/lintcheck/shared_target_dir\";\n-        match std::fs::metadata(&shared_target_dir) {\n-            Ok(metadata) => {\n-                if metadata.is_dir() {\n-                    println!(\"Clippy is newer than lint check logs, clearing lintcheck shared target dir...\");\n-                    std::fs::remove_dir_all(&shared_target_dir)\n-                        .expect(\"failed to remove target/lintcheck/shared_target_dir\");\n-                }\n-            },\n-            Err(_) => { /*  dir probably does not exist, don't remove anything  */ },\n+        // if we get an Err here, the shared target dir probably does simply not exist\n+        if let Ok(metadata) = std::fs::metadata(&shared_target_dir) {\n+            if metadata.is_dir() {\n+                println!(\"Clippy is newer than lint check logs, clearing lintcheck shared target dir...\");\n+                std::fs::remove_dir_all(&shared_target_dir)\n+                    .expect(\"failed to remove target/lintcheck/shared_target_dir\");\n+            }\n         }\n     }\n \n@@ -660,7 +661,7 @@ pub fn run(clap_config: &ArgMatches) {\n }\n \n /// read the previous stats from the lintcheck-log file\n-fn read_stats_from_file(file_path: &PathBuf) -> HashMap<String, usize> {\n+fn read_stats_from_file(file_path: &Path) -> HashMap<String, usize> {\n     let file_content: String = match std::fs::read_to_string(file_path).ok() {\n         Some(content) => content,\n         None => {\n@@ -678,9 +679,9 @@ fn read_stats_from_file(file_path: &PathBuf) -> HashMap<String, usize> {\n     let stats_lines = &lines[start + 1..=end - 1];\n \n     stats_lines\n-        .into_iter()\n+        .iter()\n         .map(|line| {\n-            let mut spl = line.split(\" \").into_iter();\n+            let mut spl = line.split(' ');\n             (\n                 spl.next().unwrap().to_string(),\n                 spl.next().unwrap().parse::<usize>().unwrap(),"}]}