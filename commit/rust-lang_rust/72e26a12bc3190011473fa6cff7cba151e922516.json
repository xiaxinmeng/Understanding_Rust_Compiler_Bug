{"sha": "72e26a12bc3190011473fa6cff7cba151e922516", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZTI2YTEyYmMzMTkwMDExNDczZmE2Y2ZmN2NiYTE1MWU5MjI1MTY=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-02-23T16:04:36Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-02-23T16:04:36Z"}, "message": "Add a test for formatting lazy_static!", "tree": {"sha": "18e8753b9ca76437486efeee4235ab019910164d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18e8753b9ca76437486efeee4235ab019910164d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72e26a12bc3190011473fa6cff7cba151e922516", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72e26a12bc3190011473fa6cff7cba151e922516", "html_url": "https://github.com/rust-lang/rust/commit/72e26a12bc3190011473fa6cff7cba151e922516", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72e26a12bc3190011473fa6cff7cba151e922516/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc2c7433e249005c0fb70744f999b4d7f2ad17fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc2c7433e249005c0fb70744f999b4d7f2ad17fe", "html_url": "https://github.com/rust-lang/rust/commit/cc2c7433e249005c0fb70744f999b4d7f2ad17fe"}], "stats": {"total": 76, "additions": 76, "deletions": 0}, "files": [{"sha": "c1c74fb830753955e33645072060b335300ee219", "filename": "rustfmt-core/tests/source/lazy_static.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/72e26a12bc3190011473fa6cff7cba151e922516/rustfmt-core%2Ftests%2Fsource%2Flazy_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e26a12bc3190011473fa6cff7cba151e922516/rustfmt-core%2Ftests%2Fsource%2Flazy_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Fsource%2Flazy_static.rs?ref=72e26a12bc3190011473fa6cff7cba151e922516", "patch": "@@ -0,0 +1,37 @@\n+// Format `lazy_static!`.\n+\n+lazy_static! {\n+static ref CONFIG_NAME_REGEX: regex::Regex =\n+regex::Regex::new(r\"^## `([^`]+)`\").expect(\"Failed creating configuration pattern\");\n+static ref CONFIG_VALUE_REGEX: regex::Regex = regex::Regex::new(r#\"^#### `\"?([^`\"]+)\"?`\"#)\n+.expect(\"Failed creating configuration value pattern\");\n+}\n+\n+// We need to be able to format `lazy_static!` without known syntax.\n+lazy_static!(\n+    xxx,\n+yyyy ,\n+    zzzzz\n+);\n+\n+lazy_static!{\n+}\n+\n+// #2354\n+lazy_static ! {\n+pub static ref Sbase64_encode_string : :: lisp :: LispSubrRef = {\n+let subr = :: remacs_sys :: Lisp_Subr {\n+header : :: remacs_sys :: Lisp_Vectorlike_Header {\n+size : (\n+( :: remacs_sys :: PseudovecType :: PVEC_SUBR as :: libc :: ptrdiff_t ) << ::\n+remacs_sys :: PSEUDOVECTOR_AREA_BITS ) , } , function : self ::\n+Fbase64_encode_string as * const :: libc :: c_void , min_args : 1i16 ,\n+max_args : 2i16 , symbol_name : ( b\"base64-encode-string\\x00\" ) . as_ptr (  )\n+as * const :: libc :: c_char , intspec : :: std :: ptr :: null (  ) , doc : ::\n+std :: ptr :: null (  ) , lang : :: remacs_sys :: Lisp_Subr_Lang_Rust , } ;\n+unsafe {\n+let ptr = :: remacs_sys :: xmalloc (\n+:: std :: mem :: size_of :: < :: remacs_sys :: Lisp_Subr > (  ) ) as * mut ::\n+remacs_sys :: Lisp_Subr ; :: std :: ptr :: copy_nonoverlapping (\n+& subr , ptr , 1 ) ; :: std :: mem :: forget ( subr ) ; :: lisp :: ExternalPtr\n+:: new ( ptr ) } } ; }"}, {"sha": "edce6e7b8945320a0bbf42ada842eb4de5ff449f", "filename": "rustfmt-core/tests/target/lazy_static.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/72e26a12bc3190011473fa6cff7cba151e922516/rustfmt-core%2Ftests%2Ftarget%2Flazy_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e26a12bc3190011473fa6cff7cba151e922516/rustfmt-core%2Ftests%2Ftarget%2Flazy_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt-core%2Ftests%2Ftarget%2Flazy_static.rs?ref=72e26a12bc3190011473fa6cff7cba151e922516", "patch": "@@ -0,0 +1,39 @@\n+// Format `lazy_static!`.\n+\n+lazy_static! {\n+    static ref CONFIG_NAME_REGEX: regex::Regex =\n+        regex::Regex::new(r\"^## `([^`]+)`\").expect(\"Failed creating configuration pattern\");\n+    static ref CONFIG_VALUE_REGEX: regex::Regex = regex::Regex::new(r#\"^#### `\"?([^`\"]+)\"?`\"#)\n+        .expect(\"Failed creating configuration value pattern\");\n+}\n+\n+// We need to be able to format `lazy_static!` without known syntax.\n+lazy_static!(xxx, yyyy, zzzzz);\n+\n+lazy_static!{}\n+\n+// #2354\n+lazy_static! {\n+    pub static ref Sbase64_encode_string: ::lisp::LispSubrRef = {\n+        let subr = ::remacs_sys::Lisp_Subr {\n+            header: ::remacs_sys::Lisp_Vectorlike_Header {\n+                size: ((::remacs_sys::PseudovecType::PVEC_SUBR as ::libc::ptrdiff_t)\n+                    << ::remacs_sys::PSEUDOVECTOR_AREA_BITS),\n+            },\n+            function: self::Fbase64_encode_string as *const ::libc::c_void,\n+            min_args: 1i16,\n+            max_args: 2i16,\n+            symbol_name: (b\"base64-encode-string\\x00\").as_ptr() as *const ::libc::c_char,\n+            intspec: ::std::ptr::null(),\n+            doc: ::std::ptr::null(),\n+            lang: ::remacs_sys::Lisp_Subr_Lang_Rust,\n+        };\n+        unsafe {\n+            let ptr = ::remacs_sys::xmalloc(::std::mem::size_of::<::remacs_sys::Lisp_Subr>())\n+                as *mut ::remacs_sys::Lisp_Subr;\n+            ::std::ptr::copy_nonoverlapping(&subr, ptr, 1);\n+            ::std::mem::forget(subr);\n+            ::lisp::ExternalPtr::new(ptr)\n+        }\n+    };\n+}"}]}