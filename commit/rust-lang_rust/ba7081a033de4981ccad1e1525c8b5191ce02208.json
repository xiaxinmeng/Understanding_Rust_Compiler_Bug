{"sha": "ba7081a033de4981ccad1e1525c8b5191ce02208", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNzA4MWEwMzNkZTQ5ODFjY2FkMWUxNTI1YzhiNTE5MWNlMDIyMDg=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-03T13:41:09Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-12T20:53:03Z"}, "message": "Make AllocErr a zero-size unit struct", "tree": {"sha": "f1072f20039289e2f81131ea2d48440bbb2be63d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1072f20039289e2f81131ea2d48440bbb2be63d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba7081a033de4981ccad1e1525c8b5191ce02208", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba7081a033de4981ccad1e1525c8b5191ce02208", "html_url": "https://github.com/rust-lang/rust/commit/ba7081a033de4981ccad1e1525c8b5191ce02208", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba7081a033de4981ccad1e1525c8b5191ce02208/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4caac5e93b801411fb59eeafa399240a7aa5fec", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4caac5e93b801411fb59eeafa399240a7aa5fec", "html_url": "https://github.com/rust-lang/rust/commit/a4caac5e93b801411fb59eeafa399240a7aa5fec"}], "stats": {"total": 186, "additions": 51, "deletions": 135}, "files": [{"sha": "b975ff6be581762c9a00bd71da77f5204c2d1f36", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ba7081a033de4981ccad1e1525c8b5191ce02208/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7081a033de4981ccad1e1525c8b5191ce02208/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=ba7081a033de4981ccad1e1525c8b5191ce02208", "patch": "@@ -16,7 +16,7 @@\n             issue = \"32838\")]\n \n use core::intrinsics::{min_align_of_val, size_of_val};\n-use core::mem::{self, ManuallyDrop};\n+use core::mem;\n use core::usize;\n \n #[doc(inline)]\n@@ -86,12 +86,12 @@ pub const Heap: Global = Global;\n unsafe impl Alloc for Global {\n     #[inline]\n     unsafe fn alloc(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> {\n-        let mut err = ManuallyDrop::new(mem::uninitialized::<AllocErr>());\n+        let mut err = AllocErr;\n         let ptr = __rust_alloc(layout.size(),\n                                layout.align(),\n-                               &mut *err as *mut AllocErr as *mut u8);\n+                               &mut err as *mut AllocErr as *mut u8);\n         if ptr.is_null() {\n-            Err(ManuallyDrop::into_inner(err))\n+            Err(AllocErr)\n         } else {\n             Ok(ptr)\n         }\n@@ -129,15 +129,15 @@ unsafe impl Alloc for Global {\n                       new_layout: Layout)\n                       -> Result<*mut u8, AllocErr>\n     {\n-        let mut err = ManuallyDrop::new(mem::uninitialized::<AllocErr>());\n+        let mut err = AllocErr;\n         let ptr = __rust_realloc(ptr,\n                                  layout.size(),\n                                  layout.align(),\n                                  new_layout.size(),\n                                  new_layout.align(),\n-                                 &mut *err as *mut AllocErr as *mut u8);\n+                                 &mut err as *mut AllocErr as *mut u8);\n         if ptr.is_null() {\n-            Err(ManuallyDrop::into_inner(err))\n+            Err(AllocErr)\n         } else {\n             mem::forget(err);\n             Ok(ptr)\n@@ -146,27 +146,27 @@ unsafe impl Alloc for Global {\n \n     #[inline]\n     unsafe fn alloc_zeroed(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> {\n-        let mut err = ManuallyDrop::new(mem::uninitialized::<AllocErr>());\n+        let mut err = AllocErr;\n         let ptr = __rust_alloc_zeroed(layout.size(),\n                                       layout.align(),\n-                                      &mut *err as *mut AllocErr as *mut u8);\n+                                      &mut err as *mut AllocErr as *mut u8);\n         if ptr.is_null() {\n-            Err(ManuallyDrop::into_inner(err))\n+            Err(AllocErr)\n         } else {\n             Ok(ptr)\n         }\n     }\n \n     #[inline]\n     unsafe fn alloc_excess(&mut self, layout: Layout) -> Result<Excess, AllocErr> {\n-        let mut err = ManuallyDrop::new(mem::uninitialized::<AllocErr>());\n+        let mut err = AllocErr;\n         let mut size = 0;\n         let ptr = __rust_alloc_excess(layout.size(),\n                                       layout.align(),\n                                       &mut size,\n-                                      &mut *err as *mut AllocErr as *mut u8);\n+                                      &mut err as *mut AllocErr as *mut u8);\n         if ptr.is_null() {\n-            Err(ManuallyDrop::into_inner(err))\n+            Err(AllocErr)\n         } else {\n             Ok(Excess(ptr, size))\n         }\n@@ -177,17 +177,17 @@ unsafe impl Alloc for Global {\n                              ptr: *mut u8,\n                              layout: Layout,\n                              new_layout: Layout) -> Result<Excess, AllocErr> {\n-        let mut err = ManuallyDrop::new(mem::uninitialized::<AllocErr>());\n+        let mut err = AllocErr;\n         let mut size = 0;\n         let ptr = __rust_realloc_excess(ptr,\n                                         layout.size(),\n                                         layout.align(),\n                                         new_layout.size(),\n                                         new_layout.align(),\n                                         &mut size,\n-                                        &mut *err as *mut AllocErr as *mut u8);\n+                                        &mut err as *mut AllocErr as *mut u8);\n         if ptr.is_null() {\n-            Err(ManuallyDrop::into_inner(err))\n+            Err(AllocErr)\n         } else {\n             Ok(Excess(ptr, size))\n         }"}, {"sha": "caedb971ddc6fe2f9aa11008d698a07d918e01a2", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba7081a033de4981ccad1e1525c8b5191ce02208/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7081a033de4981ccad1e1525c8b5191ce02208/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=ba7081a033de4981ccad1e1525c8b5191ce02208", "patch": "@@ -760,7 +760,7 @@ mod tests {\n             unsafe fn alloc(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> {\n                 let size = layout.size();\n                 if size > self.fuel {\n-                    return Err(AllocErr::Unsupported { details: \"fuel exhausted\" });\n+                    return Err(AllocErr);\n                 }\n                 match Global.alloc(layout) {\n                     ok @ Ok(_) => { self.fuel -= size; ok }"}, {"sha": "59a7e87e1ec31811c1445c3457d1505c647a86d1", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ba7081a033de4981ccad1e1525c8b5191ce02208/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7081a033de4981ccad1e1525c8b5191ce02208/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=ba7081a033de4981ccad1e1525c8b5191ce02208", "patch": "@@ -30,8 +30,6 @@ extern crate libc;\n pub use contents::*;\n #[cfg(not(dummy_jemalloc))]\n mod contents {\n-    use core::ptr;\n-\n     use core::alloc::{Alloc, AllocErr, Layout};\n     use alloc_system::System;\n     use libc::{c_int, c_void, size_t};\n@@ -106,14 +104,9 @@ mod contents {\n     #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rde_alloc(size: usize,\n                                      align: usize,\n-                                     err: *mut u8) -> *mut u8 {\n+                                     _err: *mut u8) -> *mut u8 {\n         let flags = align_to_flags(align, size);\n         let ptr = mallocx(size as size_t, flags) as *mut u8;\n-        if ptr.is_null() {\n-            let layout = Layout::from_size_align_unchecked(size, align);\n-            ptr::write(err as *mut AllocErr,\n-                       AllocErr::Exhausted { request: layout });\n-        }\n         ptr\n     }\n \n@@ -155,39 +148,27 @@ mod contents {\n                                        old_align: usize,\n                                        new_size: usize,\n                                        new_align: usize,\n-                                       err: *mut u8) -> *mut u8 {\n+                                       _err: *mut u8) -> *mut u8 {\n         if new_align != old_align {\n-            ptr::write(err as *mut AllocErr,\n-                       AllocErr::Unsupported { details: \"can't change alignments\" });\n             return 0 as *mut u8\n         }\n \n         let flags = align_to_flags(new_align, new_size);\n         let ptr = rallocx(ptr as *mut c_void, new_size, flags) as *mut u8;\n-        if ptr.is_null() {\n-            let layout = Layout::from_size_align_unchecked(new_size, new_align);\n-            ptr::write(err as *mut AllocErr,\n-                       AllocErr::Exhausted { request: layout });\n-        }\n         ptr\n     }\n \n     #[no_mangle]\n     #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rde_alloc_zeroed(size: usize,\n                                             align: usize,\n-                                            err: *mut u8) -> *mut u8 {\n+                                            _err: *mut u8) -> *mut u8 {\n         let ptr = if align <= MIN_ALIGN && align <= size {\n             calloc(size as size_t, 1) as *mut u8\n         } else {\n             let flags = align_to_flags(align, size) | MALLOCX_ZERO;\n             mallocx(size as size_t, flags) as *mut u8\n         };\n-        if ptr.is_null() {\n-            let layout = Layout::from_size_align_unchecked(size, align);\n-            ptr::write(err as *mut AllocErr,\n-                       AllocErr::Exhausted { request: layout });\n-        }\n         ptr\n     }\n "}, {"sha": "5dca05cf08537642e90c327a1558f04a55553d93", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ba7081a033de4981ccad1e1525c8b5191ce02208/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7081a033de4981ccad1e1525c8b5191ce02208/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=ba7081a033de4981ccad1e1525c8b5191ce02208", "patch": "@@ -133,17 +133,15 @@ mod platform {\n                 #[cfg(target_os = \"macos\")]\n                 {\n                     if layout.align() > (1 << 31) {\n-                        return Err(AllocErr::Unsupported {\n-                            details: \"requested alignment too large\"\n-                        })\n+                        return Err(AllocErr)\n                     }\n                 }\n                 aligned_malloc(&layout)\n             };\n             if !ptr.is_null() {\n                 Ok(ptr)\n             } else {\n-                Err(AllocErr::Exhausted { request: layout })\n+                Err(AllocErr)\n             }\n         }\n \n@@ -156,7 +154,7 @@ mod platform {\n                 if !ptr.is_null() {\n                     Ok(ptr)\n                 } else {\n-                    Err(AllocErr::Exhausted { request: layout })\n+                    Err(AllocErr)\n                 }\n             } else {\n                 let ret = self.alloc(layout.clone());\n@@ -178,17 +176,15 @@ mod platform {\n                           old_layout: Layout,\n                           new_layout: Layout) -> Result<*mut u8, AllocErr> {\n             if old_layout.align() != new_layout.align() {\n-                return Err(AllocErr::Unsupported {\n-                    details: \"cannot change alignment on `realloc`\",\n-                })\n+                return Err(AllocErr)\n             }\n \n             if new_layout.align() <= MIN_ALIGN  && new_layout.align() <= new_layout.size(){\n                 let ptr = libc::realloc(ptr as *mut libc::c_void, new_layout.size());\n                 if !ptr.is_null() {\n                     Ok(ptr as *mut u8)\n                 } else {\n-                    Err(AllocErr::Exhausted { request: new_layout })\n+                    Err(AllocErr)\n                 }\n             } else {\n                 let res = self.alloc(new_layout.clone());\n@@ -342,7 +338,7 @@ mod platform {\n             }\n         };\n         if ptr.is_null() {\n-            Err(AllocErr::Exhausted { request: layout })\n+            Err(AllocErr)\n         } else {\n             Ok(ptr as *mut u8)\n         }\n@@ -382,9 +378,7 @@ mod platform {\n                           old_layout: Layout,\n                           new_layout: Layout) -> Result<*mut u8, AllocErr> {\n             if old_layout.align() != new_layout.align() {\n-                return Err(AllocErr::Unsupported {\n-                    details: \"cannot change alignment on `realloc`\",\n-                })\n+                return Err(AllocErr)\n             }\n \n             if new_layout.align() <= MIN_ALIGN {\n@@ -395,7 +389,7 @@ mod platform {\n                 if !ptr.is_null() {\n                     Ok(ptr as *mut u8)\n                 } else {\n-                    Err(AllocErr::Exhausted { request: new_layout })\n+                    Err(AllocErr)\n                 }\n             } else {\n                 let res = self.alloc(new_layout.clone());\n@@ -505,7 +499,7 @@ mod platform {\n         if !ptr.is_null() {\n             Ok(ptr)\n         } else {\n-            Err(AllocErr::Unsupported { details: \"\" })\n+            Err(AllocErr)\n         }\n     }\n "}, {"sha": "b6626ff9f26e893bd64dcb23b97ab4f52a27c1cc", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 8, "deletions": 50, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/ba7081a033de4981ccad1e1525c8b5191ce02208/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7081a033de4981ccad1e1525c8b5191ce02208/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=ba7081a033de4981ccad1e1525c8b5191ce02208", "patch": "@@ -320,50 +320,12 @@ impl Layout {\n /// something wrong when combining the given input arguments with this\n /// allocator.\n #[derive(Clone, PartialEq, Eq, Debug)]\n-pub enum AllocErr {\n-    /// Error due to hitting some resource limit or otherwise running\n-    /// out of memory. This condition strongly implies that *some*\n-    /// series of deallocations would allow a subsequent reissuing of\n-    /// the original allocation request to succeed.\n-    Exhausted { request: Layout },\n-\n-    /// Error due to allocator being fundamentally incapable of\n-    /// satisfying the original request. This condition implies that\n-    /// such an allocation request will never succeed on the given\n-    /// allocator, regardless of environment, memory pressure, or\n-    /// other contextual conditions.\n-    ///\n-    /// For example, an allocator that does not support requests for\n-    /// large memory blocks might return this error variant.\n-    Unsupported { details: &'static str },\n-}\n-\n-impl AllocErr {\n-    #[inline]\n-    pub fn invalid_input(details: &'static str) -> Self {\n-        AllocErr::Unsupported { details: details }\n-    }\n-    #[inline]\n-    pub fn is_memory_exhausted(&self) -> bool {\n-        if let AllocErr::Exhausted { .. } = *self { true } else { false }\n-    }\n-    #[inline]\n-    pub fn is_request_unsupported(&self) -> bool {\n-        if let AllocErr::Unsupported { .. } = *self { true } else { false }\n-    }\n-    #[inline]\n-    pub fn description(&self) -> &str {\n-        match *self {\n-            AllocErr::Exhausted { .. } => \"allocator memory exhausted\",\n-            AllocErr::Unsupported { .. } => \"unsupported allocator request\",\n-        }\n-    }\n-}\n+pub struct AllocErr;\n \n // (we need this for downstream impl of trait Error)\n impl fmt::Display for AllocErr {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{}\", self.description())\n+        f.write_str(\"memory allocation failed\")\n     }\n }\n \n@@ -592,12 +554,8 @@ pub unsafe trait Alloc {\n     /// aborting.\n     ///\n     /// `oom` is meant to be used by clients unable to cope with an\n-    /// unsatisfied allocation request (signaled by an error such as\n-    /// `AllocErr::Exhausted`), and wish to abandon computation rather\n-    /// than attempt to recover locally. Such clients should pass the\n-    /// signaling error value back into `oom`, where the allocator\n-    /// may incorporate that error value into its diagnostic report\n-    /// before aborting.\n+    /// unsatisfied allocation request, and wish to abandon\n+    /// computation rather than attempt to recover locally.\n     ///\n     /// Implementations of the `oom` method are discouraged from\n     /// infinitely regressing in nested calls to `oom`. In\n@@ -963,7 +921,7 @@ pub unsafe trait Alloc {\n         if k.size() > 0 {\n             unsafe { self.alloc(k).map(|p| NonNull::new_unchecked(p as *mut T)) }\n         } else {\n-            Err(AllocErr::invalid_input(\"zero-sized type invalid for alloc_one\"))\n+            Err(AllocErr)\n         }\n     }\n \n@@ -1036,7 +994,7 @@ pub unsafe trait Alloc {\n                         })\n                 }\n             }\n-            _ => Err(AllocErr::invalid_input(\"invalid layout for alloc_array\")),\n+            _ => Err(AllocErr),\n         }\n     }\n \n@@ -1084,7 +1042,7 @@ pub unsafe trait Alloc {\n                     .map(|p| NonNull::new_unchecked(p as *mut T))\n             }\n             _ => {\n-                Err(AllocErr::invalid_input(\"invalid layout for realloc_array\"))\n+                Err(AllocErr)\n             }\n         }\n     }\n@@ -1118,7 +1076,7 @@ pub unsafe trait Alloc {\n                 Ok(self.dealloc(raw_ptr, k.clone()))\n             }\n             _ => {\n-                Err(AllocErr::invalid_input(\"invalid layout for dealloc_array\"))\n+                Err(AllocErr)\n             }\n         }\n     }"}, {"sha": "533ad3ad47332e29cbd71735245f98e71efb9a08", "filename": "src/libstd/alloc.rs", "status": "modified", "additions": 13, "deletions": 30, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ba7081a033de4981ccad1e1525c8b5191ce02208/src%2Flibstd%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7081a033de4981ccad1e1525c8b5191ce02208/src%2Flibstd%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Falloc.rs?ref=ba7081a033de4981ccad1e1525c8b5191ce02208", "patch": "@@ -21,9 +21,7 @@\n #[doc(hidden)]\n #[allow(unused_attributes)]\n pub mod __default_lib_allocator {\n-    use super::{System, Layout, Alloc, AllocErr};\n-    use ptr;\n-\n+    use super::{System, Layout, Alloc, AllocErr, CannotReallocInPlace};\n     // for symbol names src/librustc/middle/allocator.rs\n     // for signatures src/librustc_allocator/lib.rs\n \n@@ -34,14 +32,11 @@ pub mod __default_lib_allocator {\n     #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rdl_alloc(size: usize,\n                                      align: usize,\n-                                     err: *mut u8) -> *mut u8 {\n+                                     _err: *mut u8) -> *mut u8 {\n         let layout = Layout::from_size_align_unchecked(size, align);\n         match System.alloc(layout) {\n             Ok(p) => p,\n-            Err(e) => {\n-                ptr::write(err as *mut AllocErr, e);\n-                0 as *mut u8\n-            }\n+            Err(AllocErr) => 0 as *mut u8,\n         }\n     }\n \n@@ -76,30 +71,24 @@ pub mod __default_lib_allocator {\n                                        old_align: usize,\n                                        new_size: usize,\n                                        new_align: usize,\n-                                       err: *mut u8) -> *mut u8 {\n+                                       _err: *mut u8) -> *mut u8 {\n         let old_layout = Layout::from_size_align_unchecked(old_size, old_align);\n         let new_layout = Layout::from_size_align_unchecked(new_size, new_align);\n         match System.realloc(ptr, old_layout, new_layout) {\n             Ok(p) => p,\n-            Err(e) => {\n-                ptr::write(err as *mut AllocErr, e);\n-                0 as *mut u8\n-            }\n+            Err(AllocErr) => 0 as *mut u8,\n         }\n     }\n \n     #[no_mangle]\n     #[rustc_std_internal_symbol]\n     pub unsafe extern fn __rdl_alloc_zeroed(size: usize,\n                                             align: usize,\n-                                            err: *mut u8) -> *mut u8 {\n+                                            _err: *mut u8) -> *mut u8 {\n         let layout = Layout::from_size_align_unchecked(size, align);\n         match System.alloc_zeroed(layout) {\n             Ok(p) => p,\n-            Err(e) => {\n-                ptr::write(err as *mut AllocErr, e);\n-                0 as *mut u8\n-            }\n+            Err(AllocErr) => 0 as *mut u8,\n         }\n     }\n \n@@ -108,17 +97,14 @@ pub mod __default_lib_allocator {\n     pub unsafe extern fn __rdl_alloc_excess(size: usize,\n                                             align: usize,\n                                             excess: *mut usize,\n-                                            err: *mut u8) -> *mut u8 {\n+                                            _err: *mut u8) -> *mut u8 {\n         let layout = Layout::from_size_align_unchecked(size, align);\n         match System.alloc_excess(layout) {\n             Ok(p) => {\n                 *excess = p.1;\n                 p.0\n             }\n-            Err(e) => {\n-                ptr::write(err as *mut AllocErr, e);\n-                0 as *mut u8\n-            }\n+            Err(AllocErr) => 0 as *mut u8,\n         }\n     }\n \n@@ -130,18 +116,15 @@ pub mod __default_lib_allocator {\n                                               new_size: usize,\n                                               new_align: usize,\n                                               excess: *mut usize,\n-                                              err: *mut u8) -> *mut u8 {\n+                                              _err: *mut u8) -> *mut u8 {\n         let old_layout = Layout::from_size_align_unchecked(old_size, old_align);\n         let new_layout = Layout::from_size_align_unchecked(new_size, new_align);\n         match System.realloc_excess(ptr, old_layout, new_layout) {\n             Ok(p) => {\n                 *excess = p.1;\n                 p.0\n             }\n-            Err(e) => {\n-                ptr::write(err as *mut AllocErr, e);\n-                0 as *mut u8\n-            }\n+            Err(AllocErr) => 0 as *mut u8,\n         }\n     }\n \n@@ -156,7 +139,7 @@ pub mod __default_lib_allocator {\n         let new_layout = Layout::from_size_align_unchecked(new_size, new_align);\n         match System.grow_in_place(ptr, old_layout, new_layout) {\n             Ok(()) => 1,\n-            Err(_) => 0,\n+            Err(CannotReallocInPlace) => 0,\n         }\n     }\n \n@@ -171,7 +154,7 @@ pub mod __default_lib_allocator {\n         let new_layout = Layout::from_size_align_unchecked(new_size, new_align);\n         match System.shrink_in_place(ptr, old_layout, new_layout) {\n             Ok(()) => 1,\n-            Err(_) => 0,\n+            Err(CannotReallocInPlace) => 0,\n         }\n     }\n }"}, {"sha": "ec55a3c021a8090d92dd58a078329edeae272565", "filename": "src/libstd/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba7081a033de4981ccad1e1525c8b5191ce02208/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7081a033de4981ccad1e1525c8b5191ce02208/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=ba7081a033de4981ccad1e1525c8b5191ce02208", "patch": "@@ -243,7 +243,7 @@ impl Error for ! {\n            issue = \"32838\")]\n impl Error for AllocErr {\n     fn description(&self) -> &str {\n-        AllocErr::description(self)\n+        \"memory allocation failed\"\n     }\n }\n "}]}