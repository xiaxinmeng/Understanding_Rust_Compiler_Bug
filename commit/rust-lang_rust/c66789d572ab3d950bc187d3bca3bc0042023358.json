{"sha": "c66789d572ab3d950bc187d3bca3bc0042023358", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2Njc4OWQ1NzJhYjNkOTUwYmMxODdkM2JjYTNiYzAwNDIwMjMzNTg=", "commit": {"author": {"name": "Flying-Toast", "email": "38232168+Flying-Toast@users.noreply.github.com", "date": "2020-09-09T02:26:44Z"}, "committer": {"name": "Flying-Toast", "email": "38232168+Flying-Toast@users.noreply.github.com", "date": "2020-09-09T02:26:44Z"}, "message": "Capitalize safety comments", "tree": {"sha": "26872b4ec4e3140cb54b9b68ea4c389d0f9112af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26872b4ec4e3140cb54b9b68ea4c389d0f9112af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c66789d572ab3d950bc187d3bca3bc0042023358", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c66789d572ab3d950bc187d3bca3bc0042023358", "html_url": "https://github.com/rust-lang/rust/commit/c66789d572ab3d950bc187d3bca3bc0042023358", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c66789d572ab3d950bc187d3bca3bc0042023358/comments", "author": {"login": "Flying-Toast", "id": 38232168, "node_id": "MDQ6VXNlcjM4MjMyMTY4", "avatar_url": "https://avatars.githubusercontent.com/u/38232168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Flying-Toast", "html_url": "https://github.com/Flying-Toast", "followers_url": "https://api.github.com/users/Flying-Toast/followers", "following_url": "https://api.github.com/users/Flying-Toast/following{/other_user}", "gists_url": "https://api.github.com/users/Flying-Toast/gists{/gist_id}", "starred_url": "https://api.github.com/users/Flying-Toast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Flying-Toast/subscriptions", "organizations_url": "https://api.github.com/users/Flying-Toast/orgs", "repos_url": "https://api.github.com/users/Flying-Toast/repos", "events_url": "https://api.github.com/users/Flying-Toast/events{/privacy}", "received_events_url": "https://api.github.com/users/Flying-Toast/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Flying-Toast", "id": 38232168, "node_id": "MDQ6VXNlcjM4MjMyMTY4", "avatar_url": "https://avatars.githubusercontent.com/u/38232168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Flying-Toast", "html_url": "https://github.com/Flying-Toast", "followers_url": "https://api.github.com/users/Flying-Toast/followers", "following_url": "https://api.github.com/users/Flying-Toast/following{/other_user}", "gists_url": "https://api.github.com/users/Flying-Toast/gists{/gist_id}", "starred_url": "https://api.github.com/users/Flying-Toast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Flying-Toast/subscriptions", "organizations_url": "https://api.github.com/users/Flying-Toast/orgs", "repos_url": "https://api.github.com/users/Flying-Toast/repos", "events_url": "https://api.github.com/users/Flying-Toast/events{/privacy}", "received_events_url": "https://api.github.com/users/Flying-Toast/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59", "url": "https://api.github.com/repos/rust-lang/rust/commits/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59", "html_url": "https://github.com/rust-lang/rust/commit/90782cb50ba6d1f2ea97cf74a3b06eca6bef8b59"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "ddce0fe4b7dc5f8bdf7becdd22d9839267cf22b7", "filename": "library/core/src/future/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs?ref=c66789d572ab3d950bc187d3bca3bc0042023358", "patch": "@@ -71,7 +71,7 @@ where\n     impl<T: Generator<ResumeTy, Yield = ()>> Future for GenFuture<T> {\n         type Output = T::Return;\n         fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n-            // Safety: Safe because we're !Unpin + !Drop, and this is just a field projection.\n+            // SAFETY: Safe because we're !Unpin + !Drop, and this is just a field projection.\n             let gen = unsafe { Pin::map_unchecked_mut(self, |s| &mut s.0) };\n \n             // Resume the generator, turning the `&mut Context` into a `NonNull` raw pointer. The"}, {"sha": "409f202780ba6db876a94f3c3412c5181245f624", "filename": "library/core/src/iter/adapters/fuse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs?ref=c66789d572ab3d950bc187d3bca3bc0042023358", "patch": "@@ -530,7 +530,7 @@ where\n     #[inline]\n     unsafe fn as_inner(&mut self) -> &mut S {\n         match self.iter {\n-            // Safety: unsafe function forwarding to unsafe function with the same requirements\n+            // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n             Some(ref mut iter) => unsafe { SourceIter::as_inner(iter) },\n             // SAFETY: the specialized iterator never sets `None`\n             None => unsafe { intrinsics::unreachable() },"}, {"sha": "ab27fe15a8e2c5f26c335c60b5b2875ba755e201", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=c66789d572ab3d950bc187d3bca3bc0042023358", "patch": "@@ -1019,7 +1019,7 @@ where\n \n     #[inline]\n     unsafe fn as_inner(&mut self) -> &mut S {\n-        // Safety: unsafe function forwarding to unsafe function with the same requirements\n+        // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }\n }\n@@ -1168,7 +1168,7 @@ where\n \n     #[inline]\n     unsafe fn as_inner(&mut self) -> &mut S {\n-        // Safety: unsafe function forwarding to unsafe function with the same requirements\n+        // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }\n }\n@@ -1312,7 +1312,7 @@ where\n \n     #[inline]\n     unsafe fn as_inner(&mut self) -> &mut S {\n-        // Safety: unsafe function forwarding to unsafe function with the same requirements\n+        // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }\n }\n@@ -1550,7 +1550,7 @@ where\n \n     #[inline]\n     unsafe fn as_inner(&mut self) -> &mut S {\n-        // Safety: unsafe function forwarding to unsafe function with the same requirements\n+        // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }\n }\n@@ -1848,7 +1848,7 @@ where\n \n     #[inline]\n     unsafe fn as_inner(&mut self) -> &mut S {\n-        // Safety: unsafe function forwarding to unsafe function with the same requirements\n+        // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }\n }\n@@ -1967,7 +1967,7 @@ where\n \n     #[inline]\n     unsafe fn as_inner(&mut self) -> &mut S {\n-        // Safety: unsafe function forwarding to unsafe function with the same requirements\n+        // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }\n }\n@@ -2102,7 +2102,7 @@ where\n \n     #[inline]\n     unsafe fn as_inner(&mut self) -> &mut S {\n-        // Safety: unsafe function forwarding to unsafe function with the same requirements\n+        // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }\n }\n@@ -2200,7 +2200,7 @@ where\n \n     #[inline]\n     unsafe fn as_inner(&mut self) -> &mut S {\n-        // Safety: unsafe function forwarding to unsafe function with the same requirements\n+        // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }\n }\n@@ -2403,7 +2403,7 @@ where\n \n     #[inline]\n     unsafe fn as_inner(&mut self) -> &mut S {\n-        // Safety: unsafe function forwarding to unsafe function with the same requirements\n+        // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }\n }\n@@ -2530,7 +2530,7 @@ where\n \n     #[inline]\n     unsafe fn as_inner(&mut self) -> &mut S {\n-        // Safety: unsafe function forwarding to unsafe function with the same requirements\n+        // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }\n }\n@@ -2712,7 +2712,7 @@ where\n \n     #[inline]\n     unsafe fn as_inner(&mut self) -> &mut S {\n-        // Safety: unsafe function forwarding to unsafe function with the same requirements\n+        // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }\n }\n@@ -2879,7 +2879,7 @@ where\n \n     #[inline]\n     unsafe fn as_inner(&mut self) -> &mut S {\n-        // Safety: unsafe function forwarding to unsafe function with the same requirements\n+        // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.iter) }\n     }\n }"}, {"sha": "e02de0ce45dff75156d2978ff7987268cb3dc24c", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=c66789d572ab3d950bc187d3bca3bc0042023358", "patch": "@@ -343,7 +343,7 @@ where\n \n     #[inline]\n     unsafe fn as_inner(&mut self) -> &mut S {\n-        // Safety: unsafe function forwarding to unsafe function with the same requirements\n+        // SAFETY: unsafe function forwarding to unsafe function with the same requirements\n         unsafe { SourceIter::as_inner(&mut self.a) }\n     }\n }"}, {"sha": "2c517371c2c9bbccf80bffc7880136e64f85c33e", "filename": "library/core/src/lazy.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fcore%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fcore%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flazy.rs?ref=c66789d572ab3d950bc187d3bca3bc0042023358", "patch": "@@ -92,7 +92,7 @@ impl<T> OnceCell<T> {\n     /// Returns `None` if the cell is empty.\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub fn get(&self) -> Option<&T> {\n-        // Safety: Safe due to `inner`'s invariant\n+        // SAFETY: Safe due to `inner`'s invariant\n         unsafe { &*self.inner.get() }.as_ref()\n     }\n \n@@ -101,7 +101,7 @@ impl<T> OnceCell<T> {\n     /// Returns `None` if the cell is empty.\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub fn get_mut(&mut self) -> Option<&mut T> {\n-        // Safety: Safe because we have unique access\n+        // SAFETY: Safe because we have unique access\n         unsafe { &mut *self.inner.get() }.as_mut()\n     }\n \n@@ -129,13 +129,13 @@ impl<T> OnceCell<T> {\n     /// ```\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub fn set(&self, value: T) -> Result<(), T> {\n-        // Safety: Safe because we cannot have overlapping mutable borrows\n+        // SAFETY: Safe because we cannot have overlapping mutable borrows\n         let slot = unsafe { &*self.inner.get() };\n         if slot.is_some() {\n             return Err(value);\n         }\n \n-        // Safety: This is the only place where we set the slot, no races\n+        // SAFETY: This is the only place where we set the slot, no races\n         // due to reentrancy/concurrency are possible, and we've\n         // checked that slot is currently `None`, so this write\n         // maintains the `inner`'s invariant."}, {"sha": "3a7489aa27955870992f6a9031390aeef467fa13", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=c66789d572ab3d950bc187d3bca3bc0042023358", "patch": "@@ -599,7 +599,7 @@ impl<T> MaybeUninit<T> {\n     /// // Now that our `MaybeUninit<_>` is known to be initialized, it is okay to\n     /// // create a shared reference to it:\n     /// let x: &Vec<u32> = unsafe {\n-    ///     // Safety: `x` has been initialized.\n+    ///     // SAFETY: `x` has been initialized.\n     ///     x.assume_init_ref()\n     /// };\n     /// assert_eq!(x, &vec![1, 2, 3]);\n@@ -676,7 +676,7 @@ impl<T> MaybeUninit<T> {\n     /// // To assert our buffer has been initialized without copying it, we upgrade\n     /// // the `&mut MaybeUninit<[u8; 2048]>` to a `&mut [u8; 2048]`:\n     /// let buf: &mut [u8; 2048] = unsafe {\n-    ///     // Safety: `buf` has been initialized.\n+    ///     // SAFETY: `buf` has been initialized.\n     ///     buf.assume_init_mut()\n     /// };\n     ///"}, {"sha": "2a936c1867da00e63c50e5a07429dba4b84986bd", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=c66789d572ab3d950bc187d3bca3bc0042023358", "patch": "@@ -124,7 +124,7 @@ assert_eq!(size_of::<Option<core::num::\", stringify!($Ty), \">>(), size_of::<\", s\n                 type Output = Self;\n                 #[inline]\n                 fn bitor(self, rhs: Self) -> Self::Output {\n-                    // Safety: since `self` and `rhs` are both nonzero, the\n+                    // SAFETY: since `self` and `rhs` are both nonzero, the\n                     // result of the bitwise-or will be nonzero.\n                     unsafe { $Ty::new_unchecked(self.get() | rhs.get()) }\n                 }\n@@ -135,7 +135,7 @@ assert_eq!(size_of::<Option<core::num::\", stringify!($Ty), \">>(), size_of::<\", s\n                 type Output = Self;\n                 #[inline]\n                 fn bitor(self, rhs: $Int) -> Self::Output {\n-                    // Safety: since `self` is nonzero, the result of the\n+                    // SAFETY: since `self` is nonzero, the result of the\n                     // bitwise-or will be nonzero regardless of the value of\n                     // `rhs`.\n                     unsafe { $Ty::new_unchecked(self.get() | rhs) }\n@@ -147,7 +147,7 @@ assert_eq!(size_of::<Option<core::num::\", stringify!($Ty), \">>(), size_of::<\", s\n                 type Output = $Ty;\n                 #[inline]\n                 fn bitor(self, rhs: $Ty) -> Self::Output {\n-                    // Safety: since `rhs` is nonzero, the result of the\n+                    // SAFETY: since `rhs` is nonzero, the result of the\n                     // bitwise-or will be nonzero regardless of the value of\n                     // `self`.\n                     unsafe { $Ty::new_unchecked(self | rhs.get()) }"}, {"sha": "1cc1dfb01433556f6bf20ad47374af1fbae190e5", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=c66789d572ab3d950bc187d3bca3bc0042023358", "patch": "@@ -474,7 +474,7 @@ impl<P: Deref<Target: Unpin>> Pin<P> {\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n     pub fn new(pointer: P) -> Pin<P> {\n-        // Safety: the value pointed to is `Unpin`, and so has no requirements\n+        // SAFETY: the value pointed to is `Unpin`, and so has no requirements\n         // around pinning.\n         unsafe { Pin::new_unchecked(pointer) }\n     }"}, {"sha": "ce3a17a0d28e4d44d33805a0304247debd0e3552", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=c66789d572ab3d950bc187d3bca3bc0042023358", "patch": "@@ -3245,7 +3245,7 @@ fn is_ascii(s: &[u8]) -> bool {\n             (word_ptr as usize) - (start as usize) == byte_pos\n         );\n \n-        // Safety: We know `word_ptr` is properly aligned (because of\n+        // SAFETY: We know `word_ptr` is properly aligned (because of\n         // `align_offset`), and we know that we have enough bytes between `word_ptr` and the end\n         let word = unsafe { word_ptr.read() };\n         if contains_nonascii(word) {"}, {"sha": "770c97899f00253b5f429547e0d19c35696dacd6", "filename": "library/std/src/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fstd%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fstd%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Falloc.rs?ref=c66789d572ab3d950bc187d3bca3bc0042023358", "patch": "@@ -149,7 +149,7 @@ impl System {\n         }\n     }\n \n-    // Safety: Same as `AllocRef::grow`\n+    // SAFETY: Same as `AllocRef::grow`\n     #[inline]\n     unsafe fn grow_impl(\n         &mut self,"}, {"sha": "13021738af139fe3635d0271308c1309400e5ba7", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=c66789d572ab3d950bc187d3bca3bc0042023358", "patch": "@@ -881,13 +881,13 @@ impl From<Vec<NonZeroU8>> for CString {\n         unsafe {\n             // Transmute `Vec<NonZeroU8>` to `Vec<u8>`.\n             let v: Vec<u8> = {\n-                // Safety:\n+                // SAFETY:\n                 //   - transmuting between `NonZeroU8` and `u8` is sound;\n                 //   - `alloc::Layout<NonZeroU8> == alloc::Layout<u8>`.\n                 let (ptr, len, cap): (*mut NonZeroU8, _, _) = Vec::into_raw_parts(v);\n                 Vec::from_raw_parts(ptr.cast::<u8>(), len, cap)\n             };\n-            // Safety: `v` cannot contain null bytes, given the type-level\n+            // SAFETY: `v` cannot contain null bytes, given the type-level\n             // invariant of `NonZeroU8`.\n             CString::from_vec_unchecked(v)\n         }"}, {"sha": "c83e996634c8a6e79ca4a9637c898f106fdad6ee", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=c66789d572ab3d950bc187d3bca3bc0042023358", "patch": "@@ -510,14 +510,14 @@ impl OsStr {\n \n     #[inline]\n     fn from_inner(inner: &Slice) -> &OsStr {\n-        // Safety: OsStr is just a wrapper of Slice,\n+        // SAFETY: OsStr is just a wrapper of Slice,\n         // therefore converting &Slice to &OsStr is safe.\n         unsafe { &*(inner as *const Slice as *const OsStr) }\n     }\n \n     #[inline]\n     fn from_inner_mut(inner: &mut Slice) -> &mut OsStr {\n-        // Safety: OsStr is just a wrapper of Slice,\n+        // SAFETY: OsStr is just a wrapper of Slice,\n         // therefore converting &mut Slice to &mut OsStr is safe.\n         // Any method that mutates OsStr must be careful not to\n         // break platform-specific encoding, in particular Wtf8 on Windows."}, {"sha": "091e2091fb09576c37a259d3a8a408583aef9298", "filename": "library/std/src/lazy.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fstd%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fstd%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flazy.rs?ref=c66789d572ab3d950bc187d3bca3bc0042023358", "patch": "@@ -293,7 +293,7 @@ impl<T> SyncOnceCell<T> {\n \n         debug_assert!(self.is_initialized());\n \n-        // Safety: The inner value has been initialized\n+        // SAFETY: The inner value has been initialized\n         Ok(unsafe { self.get_unchecked() })\n     }\n \n@@ -316,7 +316,7 @@ impl<T> SyncOnceCell<T> {\n     /// ```\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub fn into_inner(mut self) -> Option<T> {\n-        // Safety: Safe because we immediately free `self` without dropping\n+        // SAFETY: Safe because we immediately free `self` without dropping\n         let inner = unsafe { self.take_inner() };\n \n         // Don't drop this `SyncOnceCell`. We just moved out one of the fields, but didn't set\n@@ -416,7 +416,7 @@ impl<T> SyncOnceCell<T> {\n \n unsafe impl<#[may_dangle] T> Drop for SyncOnceCell<T> {\n     fn drop(&mut self) {\n-        // Safety: The cell is being dropped, so it can't be accessed again.\n+        // SAFETY: The cell is being dropped, so it can't be accessed again.\n         // We also don't touch the `T`, which validates our usage of #[may_dangle].\n         unsafe { self.take_inner() };\n     }"}, {"sha": "7e09a4fd5613036c02801d9a0851ca694b5e74f5", "filename": "library/std/src/sys/windows/os_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos_str.rs?ref=c66789d572ab3d950bc187d3bca3bc0042023358", "patch": "@@ -77,14 +77,14 @@ impl Buf {\n     }\n \n     pub fn as_slice(&self) -> &Slice {\n-        // Safety: Slice is just a wrapper for Wtf8,\n+        // SAFETY: Slice is just a wrapper for Wtf8,\n         // and self.inner.as_slice() returns &Wtf8.\n         // Therefore, transmuting &Wtf8 to &Slice is safe.\n         unsafe { mem::transmute(self.inner.as_slice()) }\n     }\n \n     pub fn as_mut_slice(&mut self) -> &mut Slice {\n-        // Safety: Slice is just a wrapper for Wtf8,\n+        // SAFETY: Slice is just a wrapper for Wtf8,\n         // and self.inner.as_mut_slice() returns &mut Wtf8.\n         // Therefore, transmuting &mut Wtf8 to &mut Slice is safe.\n         // Additionally, care should be taken to ensure the slice"}, {"sha": "497e5fc7bdd166c959d4572467db7f12bd1a1361", "filename": "library/std/src/sys_common/os_str_bytes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fstd%2Fsrc%2Fsys_common%2Fos_str_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c66789d572ab3d950bc187d3bca3bc0042023358/library%2Fstd%2Fsrc%2Fsys_common%2Fos_str_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fos_str_bytes.rs?ref=c66789d572ab3d950bc187d3bca3bc0042023358", "patch": "@@ -106,15 +106,15 @@ impl Buf {\n \n     #[inline]\n     pub fn as_slice(&self) -> &Slice {\n-        // Safety: Slice just wraps [u8],\n+        // SAFETY: Slice just wraps [u8],\n         // and &*self.inner is &[u8], therefore\n         // transmuting &[u8] to &Slice is safe.\n         unsafe { mem::transmute(&*self.inner) }\n     }\n \n     #[inline]\n     pub fn as_mut_slice(&mut self) -> &mut Slice {\n-        // Safety: Slice just wraps [u8],\n+        // SAFETY: Slice just wraps [u8],\n         // and &mut *self.inner is &mut [u8], therefore\n         // transmuting &mut [u8] to &mut Slice is safe.\n         unsafe { mem::transmute(&mut *self.inner) }"}]}