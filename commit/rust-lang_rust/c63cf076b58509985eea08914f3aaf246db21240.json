{"sha": "c63cf076b58509985eea08914f3aaf246db21240", "node_id": "C_kwDOAAsO6NoAKGM2M2NmMDc2YjU4NTA5OTg1ZWVhMDg5MTRmM2FhZjI0NmRiMjEyNDA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-16T22:58:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-16T22:58:22Z"}, "message": "Rollup merge of #90787 - JohnTitor:inline-sorted-index-map, r=oli-obk\n\nAdd `#[inline]`s to `SortedIndexMultiMap`\n\nThey're small enough and good candidates to add `#[inline]` generally.", "tree": {"sha": "384dc08f85b73827638bc7222c95067621f8fb57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/384dc08f85b73827638bc7222c95067621f8fb57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c63cf076b58509985eea08914f3aaf246db21240", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhlDeOCRBK7hj4Ov3rIwAA9sgIAHiwupvbNFCVLnE1bhlebJeP\ni2wBB56bVBa/x/SKqSiYguvxpJYPIlN+wJ9jMnEtk82oNmzGoGzdgdOG1Rg1e+jz\nNwCIDiA1+mZJamv9MSXV59z6eKK0qfByw1VLPDM9agWp9SJUMx4QSQODtfCc3q7d\ntnfOwwh7bnkslIw6r7g56pJszThqA+F3TyVhv7LiOWWLmpSgFLt/uWkpXgiMTJBc\nbTu/rMkjJJBkfDa5a7wZI/toh8r/rirV/5UAk0xW4qx4S7fK6w44STxL+C4mtFZY\nhw8sO3HkUn9cq0xe6M/82SaZaIAvG7XlkufEMIQu+Cwv+s11DXTi63Sn8nCvpAc=\n=/87C\n-----END PGP SIGNATURE-----\n", "payload": "tree 384dc08f85b73827638bc7222c95067621f8fb57\nparent 3b0249b1c95cd4e907f770fff2b4aed6d43e2fe5\nparent 8d4fbc9a73fa8aaebe76d3606a90d91e2b8e3faa\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1637103502 +0100\ncommitter GitHub <noreply@github.com> 1637103502 +0100\n\nRollup merge of #90787 - JohnTitor:inline-sorted-index-map, r=oli-obk\n\nAdd `#[inline]`s to `SortedIndexMultiMap`\n\nThey're small enough and good candidates to add `#[inline]` generally.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c63cf076b58509985eea08914f3aaf246db21240", "html_url": "https://github.com/rust-lang/rust/commit/c63cf076b58509985eea08914f3aaf246db21240", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c63cf076b58509985eea08914f3aaf246db21240/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b0249b1c95cd4e907f770fff2b4aed6d43e2fe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b0249b1c95cd4e907f770fff2b4aed6d43e2fe5", "html_url": "https://github.com/rust-lang/rust/commit/3b0249b1c95cd4e907f770fff2b4aed6d43e2fe5"}, {"sha": "8d4fbc9a73fa8aaebe76d3606a90d91e2b8e3faa", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d4fbc9a73fa8aaebe76d3606a90d91e2b8e3faa", "html_url": "https://github.com/rust-lang/rust/commit/8d4fbc9a73fa8aaebe76d3606a90d91e2b8e3faa"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "61c7239c55ff497b8b190257f8cec9b48512c5c0", "filename": "compiler/rustc_data_structures/src/sorted_map/index_map.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c63cf076b58509985eea08914f3aaf246db21240/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c63cf076b58509985eea08914f3aaf246db21240/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs?ref=c63cf076b58509985eea08914f3aaf246db21240", "patch": "@@ -34,39 +34,47 @@ pub struct SortedIndexMultiMap<I: Idx, K, V> {\n }\n \n impl<I: Idx, K: Ord, V> SortedIndexMultiMap<I, K, V> {\n+    #[inline]\n     pub fn new() -> Self {\n         SortedIndexMultiMap { items: IndexVec::new(), idx_sorted_by_item_key: Vec::new() }\n     }\n \n+    #[inline]\n     pub fn len(&self) -> usize {\n         self.items.len()\n     }\n \n+    #[inline]\n     pub fn is_empty(&self) -> bool {\n         self.items.is_empty()\n     }\n \n     /// Returns an iterator over the items in the map in insertion order.\n+    #[inline]\n     pub fn into_iter(self) -> impl DoubleEndedIterator<Item = (K, V)> {\n         self.items.into_iter()\n     }\n \n     /// Returns an iterator over the items in the map in insertion order along with their indices.\n+    #[inline]\n     pub fn into_iter_enumerated(self) -> impl DoubleEndedIterator<Item = (I, (K, V))> {\n         self.items.into_iter_enumerated()\n     }\n \n     /// Returns an iterator over the items in the map in insertion order.\n+    #[inline]\n     pub fn iter(&self) -> impl '_ + DoubleEndedIterator<Item = (&K, &V)> {\n         self.items.iter().map(|(ref k, ref v)| (k, v))\n     }\n \n     /// Returns an iterator over the items in the map in insertion order along with their indices.\n+    #[inline]\n     pub fn iter_enumerated(&self) -> impl '_ + DoubleEndedIterator<Item = (I, (&K, &V))> {\n         self.items.iter_enumerated().map(|(i, (ref k, ref v))| (i, (k, v)))\n     }\n \n     /// Returns the item in the map with the given index.\n+    #[inline]\n     pub fn get(&self, idx: I) -> Option<&(K, V)> {\n         self.items.get(idx)\n     }\n@@ -75,6 +83,7 @@ impl<I: Idx, K: Ord, V> SortedIndexMultiMap<I, K, V> {\n     ///\n     /// If there are multiple items that are equivalent to `key`, they will be yielded in\n     /// insertion order.\n+    #[inline]\n     pub fn get_by_key(&'a self, key: K) -> impl 'a + Iterator<Item = &'a V> {\n         self.get_by_key_enumerated(key).map(|(_, v)| v)\n     }\n@@ -84,6 +93,7 @@ impl<I: Idx, K: Ord, V> SortedIndexMultiMap<I, K, V> {\n     ///\n     /// If there are multiple items that are equivalent to `key`, they will be yielded in\n     /// insertion order.\n+    #[inline]\n     pub fn get_by_key_enumerated(&'a self, key: K) -> impl '_ + Iterator<Item = (I, &V)> {\n         let lower_bound = self.idx_sorted_by_item_key.partition_point(|&i| self.items[i].0 < key);\n         self.idx_sorted_by_item_key[lower_bound..].iter().map_while(move |&i| {"}]}