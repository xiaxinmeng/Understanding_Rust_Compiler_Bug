{"sha": "8d9da4d7c74ca5ba8af1b5aae41b884fadc1cafa", "node_id": "C_kwDOAAsO6NoAKDhkOWRhNGQ3Yzc0Y2E1YmE4YWYxYjVhYWU0MWI4ODRmYWRjMWNhZmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-28T07:08:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-28T07:08:18Z"}, "message": "Auto merge of #9276 - dswij:9164, r=flip1995\n\nIgnore `match_like_matches_macro` when there is comment\n\nCloses #9164\n\nchangelog: [`match_like_matches_macro`] is ignored when there is some comment inside the match block.\n\nAlso add `span_contains_comment` util to check if given span contains comments.", "tree": {"sha": "275f91ad56ca9cf4f4a57682a33564acdda4ba05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/275f91ad56ca9cf4f4a57682a33564acdda4ba05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d9da4d7c74ca5ba8af1b5aae41b884fadc1cafa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d9da4d7c74ca5ba8af1b5aae41b884fadc1cafa", "html_url": "https://github.com/rust-lang/rust/commit/8d9da4d7c74ca5ba8af1b5aae41b884fadc1cafa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d9da4d7c74ca5ba8af1b5aae41b884fadc1cafa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d4d8e16cd390a6a4fd2f249e2e15116f363f681", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d4d8e16cd390a6a4fd2f249e2e15116f363f681", "html_url": "https://github.com/rust-lang/rust/commit/2d4d8e16cd390a6a4fd2f249e2e15116f363f681"}, {"sha": "b07d72b69eac4f37081316801fa2979d904bbe13", "url": "https://api.github.com/repos/rust-lang/rust/commits/b07d72b69eac4f37081316801fa2979d904bbe13", "html_url": "https://github.com/rust-lang/rust/commit/b07d72b69eac4f37081316801fa2979d904bbe13"}], "stats": {"total": 68, "additions": 67, "deletions": 1}, "files": [{"sha": "34cc082687ec20426d6f36ae4c1aa11a4530458a", "filename": "clippy_lints/src/matches/match_like_matches.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d9da4d7c74ca5ba8af1b5aae41b884fadc1cafa/clippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9da4d7c74ca5ba8af1b5aae41b884fadc1cafa/clippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_like_matches.rs?ref=8d9da4d7c74ca5ba8af1b5aae41b884fadc1cafa", "patch": "@@ -1,10 +1,11 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::is_wild;\n use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::span_contains_comment;\n use rustc_ast::{Attribute, LitKind};\n use rustc_errors::Applicability;\n use rustc_hir::{Arm, BorrowKind, Expr, ExprKind, Guard, Pat};\n-use rustc_lint::LateContext;\n+use rustc_lint::{LateContext, LintContext};\n use rustc_middle::ty;\n use rustc_span::source_map::Spanned;\n \n@@ -76,6 +77,7 @@ where\n         >,\n {\n     if_chain! {\n+        if !span_contains_comment(cx.sess().source_map(), expr.span);\n         if iter.len() >= 2;\n         if cx.typeck_results().expr_ty(expr).is_bool();\n         if let Some((_, last_pat_opt, last_expr, _)) = iter.next_back();"}, {"sha": "4c5adde61906a5a0a59463fc3e767d85238c5d0e", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8d9da4d7c74ca5ba8af1b5aae41b884fadc1cafa/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9da4d7c74ca5ba8af1b5aae41b884fadc1cafa/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=8d9da4d7c74ca5ba8af1b5aae41b884fadc1cafa", "patch": "@@ -87,6 +87,7 @@ use rustc_hir::{\n     Mutability, Node, Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind, TraitItem, TraitItemKind,\n     TraitRef, TyKind, UnOp,\n };\n+use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::place::PlaceBase;\n use rustc_middle::ty as rustc_ty;\n@@ -104,6 +105,7 @@ use rustc_semver::RustcVersion;\n use rustc_session::Session;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::original_sp;\n+use rustc_span::source_map::SourceMap;\n use rustc_span::sym;\n use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n@@ -2278,6 +2280,18 @@ pub fn walk_to_expr_usage<'tcx, T>(\n     None\n }\n \n+/// Checks whether a given span has any comment token\n+/// This checks for all types of comment: line \"//\", block \"/**\", doc \"///\" \"//!\"\n+pub fn span_contains_comment(sm: &SourceMap, span: Span) -> bool {\n+    let Ok(snippet) = sm.span_to_snippet(span) else { return false };\n+    return tokenize(&snippet).any(|token| {\n+        matches!(\n+            token.kind,\n+            TokenKind::BlockComment { .. } | TokenKind::LineComment { .. }\n+        )\n+    });\n+}\n+\n macro_rules! op_utils {\n     ($($name:ident $assign:ident)*) => {\n         /// Binary operation traits like `LangItem::Add`"}, {"sha": "95ca571d07bfbf88fcce5d626814d6f210156ee2", "filename": "tests/ui/match_expr_like_matches_macro.fixed", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8d9da4d7c74ca5ba8af1b5aae41b884fadc1cafa/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8d9da4d7c74ca5ba8af1b5aae41b884fadc1cafa/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed?ref=8d9da4d7c74ca5ba8af1b5aae41b884fadc1cafa", "patch": "@@ -167,4 +167,29 @@ fn main() {\n             _ => false,\n         };\n     }\n+\n+    let x = ' ';\n+    // ignore if match block contains comment\n+    let _line_comments = match x {\n+        // numbers are bad!\n+        '1' | '2' | '3' => true,\n+        // spaces are very important to be true.\n+        ' ' => true,\n+        // as are dots\n+        '.' => true,\n+        _ => false,\n+    };\n+\n+    let _block_comments = match x {\n+        /* numbers are bad!\n+         */\n+        '1' | '2' | '3' => true,\n+        /* spaces are very important to be true.\n+         */\n+        ' ' => true,\n+        /* as are dots\n+         */\n+        '.' => true,\n+        _ => false,\n+    };\n }"}, {"sha": "3b9c8cadadcc417ebbe731a3735dd98580837e46", "filename": "tests/ui/match_expr_like_matches_macro.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8d9da4d7c74ca5ba8af1b5aae41b884fadc1cafa/tests%2Fui%2Fmatch_expr_like_matches_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9da4d7c74ca5ba8af1b5aae41b884fadc1cafa/tests%2Fui%2Fmatch_expr_like_matches_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_expr_like_matches_macro.rs?ref=8d9da4d7c74ca5ba8af1b5aae41b884fadc1cafa", "patch": "@@ -208,4 +208,29 @@ fn main() {\n             _ => false,\n         };\n     }\n+\n+    let x = ' ';\n+    // ignore if match block contains comment\n+    let _line_comments = match x {\n+        // numbers are bad!\n+        '1' | '2' | '3' => true,\n+        // spaces are very important to be true.\n+        ' ' => true,\n+        // as are dots\n+        '.' => true,\n+        _ => false,\n+    };\n+\n+    let _block_comments = match x {\n+        /* numbers are bad!\n+         */\n+        '1' | '2' | '3' => true,\n+        /* spaces are very important to be true.\n+         */\n+        ' ' => true,\n+        /* as are dots\n+         */\n+        '.' => true,\n+        _ => false,\n+    };\n }"}]}