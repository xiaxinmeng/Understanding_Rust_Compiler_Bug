{"sha": "0e4c3b2c2be83251ab0f1ffba74780e05e77c2ff", "node_id": "C_kwDOAAsO6NoAKDBlNGMzYjJjMmJlODMyNTFhYjBmMWZmYmE3NDc4MGUwNWU3N2MyZmY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-19T11:51:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-19T11:51:07Z"}, "message": "Merge #10586\n\n10586: internal: Derive completions work on hir, not names r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "ff5430d6bfdd2c13d5456b872d2cbc905ade2513", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff5430d6bfdd2c13d5456b872d2cbc905ade2513"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e4c3b2c2be83251ab0f1ffba74780e05e77c2ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhbrErCRBK7hj4Ov3rIwAAA3IIAHvvWTW1Goock/Izju4CH3kd\nR/KGf59hoFP3Zq3DEwK78rFvPnQ+Oz2bJVJgdCcqv6NWCGJMyNc+rW0NOwYc+X6v\nYCZxdVBqVAVfhnFKUxb3vyPibeOkCQR0JAUqjZT2yOUEtuZGY/qXKCjYGURt61RY\nvrSEP7UzuoRf0MKV03XQ2koU7Q8s4wbPumFxrKsERBHvX0n1GK0hzXUEItvJM9Dv\nXSU18ekNGFC6JtWX+AWN7NpxJXaBQke9D12C8h0ZR5Qd6km3q9J9Bhsdzyt/vANa\nsT4W5cIEmhDKWjhuuyiT/RIJgQKqynYrJmsdUzFuwKLBHNbJ5r/ek0zT+v3hyZo=\n=XILE\n-----END PGP SIGNATURE-----\n", "payload": "tree ff5430d6bfdd2c13d5456b872d2cbc905ade2513\nparent d85946b73566312f96b2c465d26ed6a613b39109\nparent 3dfe5045c54a927459932c8347d653abf1eca2e2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1634644267 +0000\ncommitter GitHub <noreply@github.com> 1634644267 +0000\n\nMerge #10586\n\n10586: internal: Derive completions work on hir, not names r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e4c3b2c2be83251ab0f1ffba74780e05e77c2ff", "html_url": "https://github.com/rust-lang/rust/commit/0e4c3b2c2be83251ab0f1ffba74780e05e77c2ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e4c3b2c2be83251ab0f1ffba74780e05e77c2ff/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d85946b73566312f96b2c465d26ed6a613b39109", "url": "https://api.github.com/repos/rust-lang/rust/commits/d85946b73566312f96b2c465d26ed6a613b39109", "html_url": "https://github.com/rust-lang/rust/commit/d85946b73566312f96b2c465d26ed6a613b39109"}, {"sha": "3dfe5045c54a927459932c8347d653abf1eca2e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dfe5045c54a927459932c8347d653abf1eca2e2", "html_url": "https://github.com/rust-lang/rust/commit/3dfe5045c54a927459932c8347d653abf1eca2e2"}], "stats": {"total": 180, "additions": 93, "deletions": 87}, "files": [{"sha": "2824b2a2c2ad3377bf6141d6c1fc27af6ae6eb6d", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 47, "deletions": 33, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/0e4c3b2c2be83251ab0f1ffba74780e05e77c2ff/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4c3b2c2be83251ab0f1ffba74780e05e77c2ff/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=0e4c3b2c2be83251ab0f1ffba74780e05e77c2ff", "patch": "@@ -1,8 +1,9 @@\n //! Completion for derives\n-use hir::HasAttrs;\n+use hir::{HasAttrs, MacroDef, MacroKind};\n+use ide_db::helpers::FamousDefs;\n use itertools::Itertools;\n-use rustc_hash::FxHashMap;\n-use syntax::{ast, SmolStr};\n+use rustc_hash::FxHashSet;\n+use syntax::ast;\n \n use crate::{\n     context::CompletionContext,\n@@ -15,36 +16,51 @@ pub(super) fn complete_derive(\n     ctx: &CompletionContext,\n     derive_input: ast::TokenTree,\n ) {\n-    if let Some(existing_derives) = super::parse_comma_sep_paths(derive_input) {\n-        for (derive, docs) in get_derive_names_in_scope(ctx) {\n+    if let Some(existing_derives) = super::parse_comma_sep_paths(derive_input.clone()) {\n+        let core = FamousDefs(&ctx.sema, ctx.krate).core();\n+        let existing_derives: FxHashSet<_> = existing_derives\n+            .into_iter()\n+            .filter_map(|path| ctx.scope.speculative_resolve_as_mac(&path))\n+            .filter(|mac| mac.kind() == MacroKind::Derive)\n+            .collect();\n+\n+        for (name, mac) in get_derives_in_scope(ctx) {\n+            if existing_derives.contains(&mac) {\n+                continue;\n+            }\n+\n+            let name = name.to_smol_str();\n             let label;\n-            let (label, lookup) = if let Some(derive_completion) = DEFAULT_DERIVE_COMPLETIONS\n-                .iter()\n-                .find(|derive_completion| derive_completion.label == derive)\n-            {\n-                let mut components = vec![derive_completion.label];\n-                components.extend(derive_completion.dependencies.iter().filter(|&&dependency| {\n-                    !existing_derives\n+            let (label, lookup) = match core.zip(mac.module(ctx.db).map(|it| it.krate())) {\n+                // show derive dependencies for `core`/`std` derives\n+                Some((core, mac_krate)) if core == mac_krate => {\n+                    if let Some(derive_completion) = DEFAULT_DERIVE_DEPENDENCIES\n                         .iter()\n-                        .filter_map(|it| it.as_single_name_ref())\n-                        .any(|it| it.text() == dependency)\n-                }));\n-                let lookup = components.join(\", \");\n-                label = components.iter().rev().join(\", \");\n-                (&*label, Some(lookup))\n-            } else if existing_derives\n-                .iter()\n-                .filter_map(|it| it.as_single_name_ref())\n-                .any(|it| it.text().as_str() == derive)\n-            {\n-                continue;\n-            } else {\n-                (&*derive, None)\n+                        .find(|derive_completion| derive_completion.label == name)\n+                    {\n+                        let mut components = vec![derive_completion.label];\n+                        components.extend(derive_completion.dependencies.iter().filter(\n+                            |&&dependency| {\n+                                !existing_derives\n+                                    .iter()\n+                                    .filter_map(|it| it.name(ctx.db))\n+                                    .any(|it| it.to_smol_str() == dependency)\n+                            },\n+                        ));\n+                        let lookup = components.join(\", \");\n+                        label = components.iter().rev().join(\", \");\n+                        (label.as_str(), Some(lookup))\n+                    } else {\n+                        (&*name, None)\n+                    }\n+                }\n+                _ => (&*name, None),\n             };\n+\n             let mut item =\n                 CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), label);\n             item.kind(CompletionItemKind::Attribute);\n-            if let Some(docs) = docs {\n+            if let Some(docs) = mac.docs(ctx.db) {\n                 item.documentation(docs);\n             }\n             if let Some(lookup) = lookup {\n@@ -55,14 +71,12 @@ pub(super) fn complete_derive(\n     }\n }\n \n-fn get_derive_names_in_scope(\n-    ctx: &CompletionContext,\n-) -> FxHashMap<SmolStr, Option<hir::Documentation>> {\n-    let mut result = FxHashMap::default();\n+fn get_derives_in_scope(ctx: &CompletionContext) -> Vec<(hir::Name, MacroDef)> {\n+    let mut result = Vec::default();\n     ctx.process_all_names(&mut |name, scope_def| {\n         if let hir::ScopeDef::MacroDef(mac) = scope_def {\n             if mac.kind() == hir::MacroKind::Derive {\n-                result.insert(name.to_smol_str(), mac.docs(ctx.db));\n+                result.push((name, mac));\n             }\n         }\n     });\n@@ -76,7 +90,7 @@ struct DeriveDependencies {\n \n /// Standard Rust derives that have dependencies\n /// (the dependencies are needed so that the main derive don't break the compilation when added)\n-const DEFAULT_DERIVE_COMPLETIONS: &[DeriveDependencies] = &[\n+const DEFAULT_DERIVE_DEPENDENCIES: &[DeriveDependencies] = &[\n     DeriveDependencies { label: \"Copy\", dependencies: &[\"Clone\"] },\n     DeriveDependencies { label: \"Eq\", dependencies: &[\"PartialEq\"] },\n     DeriveDependencies { label: \"Ord\", dependencies: &[\"PartialOrd\", \"Eq\", \"PartialEq\"] },"}, {"sha": "6a37b53cf580f9aa5222d08472da70ebc2d2de62", "filename": "crates/ide_completion/src/tests/attribute.rs", "status": "modified", "additions": 42, "deletions": 54, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/0e4c3b2c2be83251ab0f1ffba74780e05e77c2ff/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4c3b2c2be83251ab0f1ffba74780e05e77c2ff/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs?ref=0e4c3b2c2be83251ab0f1ffba74780e05e77c2ff", "patch": "@@ -571,85 +571,73 @@ mod derive {\n     use super::*;\n \n     fn check_derive(ra_fixture: &str, expect: Expect) {\n-        let builtin_derives = r#\"\n-    #[rustc_builtin_macro]\n-    pub macro Clone {}\n-    #[rustc_builtin_macro]\n-    pub macro Copy {}\n-    #[rustc_builtin_macro]\n-    pub macro Default {}\n-    #[rustc_builtin_macro]\n-    pub macro Debug {}\n-    #[rustc_builtin_macro]\n-    pub macro Hash {}\n-    #[rustc_builtin_macro]\n-    pub macro PartialEq {}\n-    #[rustc_builtin_macro]\n-    pub macro Eq {}\n-    #[rustc_builtin_macro]\n-    pub macro PartialOrd {}\n-    #[rustc_builtin_macro]\n-    pub macro Ord {}\n-\n-    \"#;\n-        let actual = completion_list(&format!(\"{} {}\", builtin_derives, ra_fixture));\n+        let actual = completion_list(ra_fixture);\n         expect.assert_eq(&actual);\n     }\n \n     #[test]\n     fn no_completion_for_incorrect_derive() {\n-        check_derive(r#\"#[derive{$0)] struct Test;\"#, expect![[]])\n+        check_derive(\n+            r#\"\n+//- minicore: derive, copy, clone, ord, eq, default, fmt\n+#[derive{$0)] struct Test;\n+\"#,\n+            expect![[]],\n+        )\n     }\n \n     #[test]\n     fn empty_derive() {\n         check_derive(\n-            r#\"#[derive($0)] struct Test;\"#,\n+            r#\"\n+//- minicore: derive, copy, clone, ord, eq, default, fmt\n+#[derive($0)] struct Test;\n+\"#,\n             expect![[r#\"\n-        at PartialEq\n-        at Default\n-        at PartialEq, Eq\n-        at PartialEq, Eq, PartialOrd, Ord\n-        at Clone, Copy\n-        at Debug\n-        at Clone\n-        at Hash\n-        at PartialEq, PartialOrd\n-    \"#]],\n+                at Default\n+                at Clone, Copy\n+                at PartialEq\n+                at PartialEq, Eq\n+                at PartialEq, Eq, PartialOrd, Ord\n+                at Clone\n+                at PartialEq, PartialOrd\n+            \"#]],\n         );\n     }\n \n     #[test]\n     fn derive_with_input_before() {\n         check_derive(\n-            r#\"#[derive(serde::Serialize, PartialEq, $0)] struct Test;\"#,\n+            r#\"\n+//- minicore: derive, copy, clone, ord, eq, default, fmt\n+#[derive(serde::Serialize, PartialEq, $0)] struct Test;\n+\"#,\n             expect![[r#\"\n-            at Default\n-            at Eq\n-            at Eq, PartialOrd, Ord\n-            at Clone, Copy\n-            at Debug\n-            at Clone\n-            at Hash\n-            at PartialOrd\n-        \"#]],\n+                at Default\n+                at Clone, Copy\n+                at Eq\n+                at Eq, PartialOrd, Ord\n+                at Clone\n+                at PartialOrd\n+            \"#]],\n         )\n     }\n \n     #[test]\n     fn derive_with_input_after() {\n         check_derive(\n-            r#\"#[derive($0 serde::Serialize, PartialEq)] struct Test;\"#,\n+            r#\"\n+//- minicore: derive, copy, clone, ord, eq, default, fmt\n+#[derive($0 serde::Serialize, PartialEq)] struct Test;\n+\"#,\n             expect![[r#\"\n-            at Default\n-            at Eq\n-            at Eq, PartialOrd, Ord\n-            at Clone, Copy\n-            at Debug\n-            at Clone\n-            at Hash\n-            at PartialOrd\n-        \"#]],\n+                at Default\n+                at Clone, Copy\n+                at Eq\n+                at Eq, PartialOrd, Ord\n+                at Clone\n+                at PartialOrd\n+            \"#]],\n         )\n     }\n }"}, {"sha": "ef38a194bc371a52c6541734467f8538f762d438", "filename": "crates/test_utils/src/minicore.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e4c3b2c2be83251ab0f1ffba74780e05e77c2ff/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e4c3b2c2be83251ab0f1ffba74780e05e77c2ff/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fminicore.rs?ref=0e4c3b2c2be83251ab0f1ffba74780e05e77c2ff", "patch": "@@ -87,6 +87,10 @@ pub mod default {\n     pub trait Default: Sized {\n         fn default() -> Self;\n     }\n+    // region:derive\n+    #[rustc_builtin_macro]\n+    pub macro Default($item:item) {}\n+    // endregion:derive\n }\n // endregion:default\n "}]}