{"sha": "f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMjUwYTIzZDNmYTJmOGI0YTRhNDExM2NhODllNDE5NDVhNGNmZWQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-08T00:48:57Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-08T00:51:31Z"}, "message": "stdlib: Stop incurring vtable dispatch costs when hashmaps are used\n\nThis required changing almost all users of hashmaps to import the hashmap interface first.\n\nThe `size` member in the hashmap structure was renamed to `count` to work around a name conflict.", "tree": {"sha": "dc4426e7ef764f596c25feb3947980ea9ee2d042", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc4426e7ef764f596c25feb3947980ea9ee2d042"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "html_url": "https://github.com/rust-lang/rust/commit/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9bd76b3c11ee0ad706abc3779a337fee3550424", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9bd76b3c11ee0ad706abc3779a337fee3550424", "html_url": "https://github.com/rust-lang/rust/commit/a9bd76b3c11ee0ad706abc3779a337fee3550424"}], "stats": {"total": 142, "additions": 95, "deletions": 47}, "files": [{"sha": "c188b9d94438b2de2c557efab8e15d147d9ddccd", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -16,6 +16,7 @@ import io::writer_util;\n import std::json;\n import result;\n import std::map;\n+import std::map::hashmap;\n import std::os;\n import std::run;\n import str;"}, {"sha": "26e4cc3165e31de36d4d75af449b7f4ed41357d3", "filename": "src/libstd/json.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -5,6 +5,7 @@ import result::{ok, err};\n import io;\n import io::{reader_util, writer_util};\n import map;\n+import map::hashmap;\n \n export json;\n export error;\n@@ -36,7 +37,7 @@ enum json {\n     /* Variant: list */\n     list([json]),\n     /* Variant: dict */\n-    dict(map::map<str,json>),\n+    dict(map::hashmap<str,json>),\n     /* Variant: null */\n     null,\n }"}, {"sha": "0511b82b5ba347a321359c175654bcd87468f025", "filename": "src/libstd/map.rs", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -4,6 +4,10 @@ Module: map\n A map type\n */\n \n+import chained::hashmap;\n+export hashmap, hashfn, eqfn, set, map, chained, mk_hashmap, new_str_hash;\n+export new_bytes_hash, new_int_hash, new_uint_hash, set_add;\n+\n /* Section: Types */\n \n /*\n@@ -23,14 +27,13 @@ Equality\n type eqfn<K> = fn@(K, K) -> bool;\n \n /*\n-Type: hashset\n+Type: set\n \n-A convenience type to treat a map as a set\n+A convenience type to treat a hashmap as a set\n */\n-type set<K> = map<K, ()>;\n+type set<K> = hashmap<K, ()>;\n \n-// Temporary alias to make migration easier\n-type hashmap<K, V> = map<K, V>;\n+type hashmap<K, V> = chained::t<K, V>;\n \n /*\n IFace: map\n@@ -103,8 +106,7 @@ iface map<K: copy, V: copy> {\n }\n \n // FIXME: package this up and export it as a datatype usable for\n-// external code that doesn't want to pay the cost of a box and vtable\n-// lookups.\n+// external code that doesn't want to pay the cost of a box.\n mod chained {\n     type entry<K, V> = {\n         hash: uint,\n@@ -118,8 +120,8 @@ mod chained {\n         absent\n     }\n \n-    type t<K, V> = {\n-        mutable size: uint,\n+    type t<K, V> = @{\n+        mutable count: uint,\n         mutable chains: [mutable chain<K,V>],\n         hasher: hashfn<K>,\n         eqer: eqfn<K>\n@@ -185,7 +187,7 @@ mod chained {\n         let hash = tbl.hasher(k);\n         alt search_tbl(tbl, k, hash) {\n           not_found {\n-            tbl.size += 1u;\n+            tbl.count += 1u;\n             let idx = hash % vec::len(tbl.chains);\n             let old_chain = tbl.chains[idx];\n             tbl.chains[idx] = present(@{\n@@ -229,13 +231,13 @@ mod chained {\n           }\n \n           found_first(idx, entry) {\n-            tbl.size -= 1u;\n+            tbl.count -= 1u;\n             tbl.chains[idx] = entry.next;\n             ret core::option::some(entry.value);\n           }\n \n           found_after(eprev, entry) {\n-            tbl.size -= 1u;\n+            tbl.count -= 1u;\n             eprev.next = entry.next;\n             ret core::option::some(entry.value);\n           }\n@@ -291,12 +293,12 @@ mod chained {\n         }\n     }\n \n-    impl <K: copy, V: copy> of map<K, V> for t<K, V> {\n-        fn size() -> uint { self.size }\n+    impl hashmap<K: copy, V: copy> of map<K, V> for t<K, V> {\n+        fn size() -> uint { self.count }\n \n         fn insert(k: K, v: V) -> bool {\n             let nchains = vec::len(self.chains);\n-            let load = {num: (self.size + 1u) as int, den: nchains as int};\n+            let load = {num: (self.count + 1u) as int, den: nchains as int};\n             // Structural consts would be nice. This is a const 3/4\n             // load factor that we compare against.\n             if !util::rational_leq(load, {num:3, den:4}) { rehash(self); }\n@@ -318,13 +320,13 @@ mod chained {\n         fn values(blk: fn(V)) { items(self) { |_k, v| blk(v) } }\n     }\n \n-    fn mk<K: copy, V: copy>(hasher: hashfn<K>, eqer: eqfn<K>) -> map<K,V> {\n+    fn mk<K: copy, V: copy>(hasher: hashfn<K>, eqer: eqfn<K>) -> t<K,V> {\n         let initial_capacity: uint = 32u; // 2^5\n-        let slf: t<K, V> = {mutable size: 0u,\n-                            mutable chains: chains(initial_capacity),\n-                            hasher: hasher,\n-                            eqer: eqer};\n-        slf as map::<K, V>\n+        let slf: t<K, V> = @{mutable count: 0u,\n+                             mutable chains: chains(initial_capacity),\n+                             hasher: hasher,\n+                             eqer: eqer};\n+        slf\n     }\n }\n \n@@ -339,7 +341,7 @@ hasher - The hash function for key type K\n eqer - The equality function for key type K\n */\n fn mk_hashmap<K: copy, V: copy>(hasher: hashfn<K>, eqer: eqfn<K>)\n-    -> map<K, V> {\n+        -> hashmap<K, V> {\n     chained::mk(hasher, eqer)\n }\n \n@@ -348,7 +350,7 @@ Function: new_str_hash\n \n Construct a hashmap for string keys\n */\n-fn new_str_hash<V: copy>() -> map<str, V> {\n+fn new_str_hash<V: copy>() -> hashmap<str, V> {\n     ret mk_hashmap(str::hash, str::eq);\n }\n \n@@ -357,7 +359,7 @@ Function: new_bytes_hash\n \n Construct a hashmap for byte string keys\n */\n-fn new_bytes_hash<V: copy>() -> map<[u8], V> {\n+fn new_bytes_hash<V: copy>() -> hashmap<[u8], V> {\n     ret mk_hashmap(vec::u8::hash, vec::u8::eq);\n }\n \n@@ -366,7 +368,7 @@ Function: new_int_hash\n \n Construct a hashmap for int keys\n */\n-fn new_int_hash<V: copy>() -> map<int, V> {\n+fn new_int_hash<V: copy>() -> hashmap<int, V> {\n     fn hash_int(&&x: int) -> uint { int::hash(x) }\n     fn eq_int(&&a: int, &&b: int) -> bool { ret a == b; }\n     ret mk_hashmap(hash_int, eq_int);\n@@ -377,7 +379,7 @@ Function: new_uint_hash\n \n Construct a hashmap for uint keys\n */\n-fn new_uint_hash<V: copy>() -> map<uint, V> {\n+fn new_uint_hash<V: copy>() -> hashmap<uint, V> {\n     fn hash_uint(&&x: uint) -> uint { uint::hash(x) }\n     fn eq_uint(&&a: uint, &&b: uint) -> bool { ret a == b; }\n     ret mk_hashmap(hash_uint, eq_uint);"}, {"sha": "9991d68b295ce14a1821926cdbcb7562d5e3806e", "filename": "src/libstd/uv.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Flibstd%2Fuv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Flibstd%2Fuv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -1,3 +1,4 @@\n+import map::hashmap;\n export loop_new, loop_delete, run, close, run_in_bg;\n export async_init, async_send;\n export timer_init, timer_start, timer_stop;\n@@ -129,17 +130,17 @@ fn loop_new() -> uv_loop unsafe {\n             process_operation);\n \n         // all state goes here\n-        let handles: map::map<[u8], *ctypes::void> =\n+        let handles: map::hashmap<[u8], *ctypes::void> =\n             map::new_bytes_hash();\n-        let id_to_handle: map::map<[u8], uv_handle> =\n+        let id_to_handle: map::hashmap<[u8], uv_handle> =\n             map::new_bytes_hash();\n-        let after_cbs: map::map<[u8], fn~(uv_handle)> =\n+        let after_cbs: map::hashmap<[u8], fn~(uv_handle)> =\n             map::new_bytes_hash();\n-        let close_callbacks: map::map<[u8], fn~()> =\n+        let close_callbacks: map::hashmap<[u8], fn~()> =\n             map::new_bytes_hash();\n-        let async_cbs: map::map<[u8], fn~(uv_handle)> =\n+        let async_cbs: map::hashmap<[u8], fn~(uv_handle)> =\n             map::new_bytes_hash();\n-        let timer_cbs: map::map<[u8], fn~(uv_handle)> =\n+        let timer_cbs: map::hashmap<[u8], fn~(uv_handle)> =\n             map::new_bytes_hash();\n \n         // the main loop that this task blocks on."}, {"sha": "1889497957c46d8d461a72fbd6f78da736f6f3bf", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -7,6 +7,7 @@ import middle::ty;\n import metadata::{encoder, cstore};\n import middle::trans::common::crate_ctxt;\n import std::fs;\n+import std::map::hashmap;\n import std::run;\n import std::sha1::sha1;\n import syntax::ast;"}, {"sha": "8ecb48f86eab1f19eac0c48fdbc9b9d40da1ed09", "filename": "src/rustc/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Frpath.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -1,4 +1,5 @@\n import std::{os, fs, os_fs, map};\n+import std::map::hashmap;\n import metadata::cstore;\n import driver::session;\n import util::filesearch;"}, {"sha": "834d0957ca50d15ecbe18d376bbff87ee1dd7764", "filename": "src/rustc/front/attr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Ffront%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Ffront%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fattr.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -1,6 +1,7 @@\n // Functions dealing with attributes and meta_items\n \n import std::map;\n+import std::map::hashmap;\n import syntax::{ast, ast_util};\n import driver::session::session;\n "}, {"sha": "83b45583a61971b41e144aed900a189b5ca5d507", "filename": "src/rustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flib%2Fllvm.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -1,4 +1,5 @@\n import str::sbuf;\n+import std::map::hashmap;\n \n import ctypes::{c_int, c_uint, unsigned, longlong, ulonglong};\n "}, {"sha": "d3d8593b654c34cdcf78ec71876afa6b0dc25d67", "filename": "src/rustc/metadata/astencode.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmetadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmetadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fastencode.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -4,15 +4,15 @@ import syntax::visit;\n import syntax::ast_util;\n import syntax::ast_util::inlined_item_methods;\n import syntax::codemap::span;\n-import std::map::map;\n-import std::smallintmap::map;\n import std::ebml;\n import std::ebml::writer;\n+import std::map::hashmap;\n import std::serialization;\n import std::serialization::serializer;\n import std::serialization::deserializer;\n import std::serialization::serializer_helpers;\n import std::serialization::deserializer_helpers;\n+import std::smallintmap::map;\n import middle::trans::common::maps;\n import middle::{ty, typeck, last_use, ast_map};\n import middle::typeck::method_origin;\n@@ -922,4 +922,4 @@ fn test_more() {\n             ret z;\n         }\n     });\n-}\n\\ No newline at end of file\n+}"}, {"sha": "0da50704635f5ecd2c3683a4883cb4113402539c", "filename": "src/rustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcsearch.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -6,6 +6,7 @@ import middle::{ty, ast_map};\n import option::{some, none};\n import driver::session;\n import middle::trans::common::maps;\n+import std::map::hashmap;\n \n export get_symbol;\n export get_type_param_count;"}, {"sha": "24670e1394e8fba349bc920d7f2a5abf2b3fbebf", "filename": "src/rustc/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcstore.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -2,6 +2,7 @@\n // crates and libraries\n \n import std::map;\n+import std::map::hashmap;\n import syntax::ast;\n import util::common::*;\n "}, {"sha": "c43ed20b2fc5174ec3054a53ce95fba437a093b1", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -1,6 +1,7 @@\n // Decoding metadata from a single crate's metadata\n \n import std::{ebml, map, io};\n+import std::map::hashmap;\n import io::writer_util;\n import syntax::{ast, ast_util};\n import driver::session::session;"}, {"sha": "c2c0cbc91503853f19283c6e3295aafe85827396", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -1,6 +1,7 @@\n // Metadata encoding\n \n import std::{io, ebml, map, list};\n+import std::map::hashmap;\n import io::writer_util;\n import ebml::writer;\n import syntax::ast::*;"}, {"sha": "dad1f9b70391a29bd7f078fd9fbc06e8d2e30d6e", "filename": "src/rustc/metadata/reachable.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmetadata%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmetadata%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Freachable.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -10,10 +10,11 @@ import syntax::ast::*;\n import syntax::visit;\n import syntax::ast_util::def_id_of_def;\n import front::attr;\n+import std::map::hashmap;\n \n export map, find_reachable;\n \n-type map = std::map::map<node_id, ()>;\n+type map = std::map::hashmap<node_id, ()>;\n \n type ctx = {ccx: middle::trans::common::crate_ctxt,\n             rmap: map};"}, {"sha": "284c38a6a3e066b9d152c56636610825ea41ef16", "filename": "src/rustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftydecode.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -5,6 +5,7 @@ import syntax::ast::*;\n import syntax::ast_util;\n import syntax::ast_util::respan;\n import middle::ty;\n+import std::map::hashmap;\n \n export parse_ty_data, parse_def_id;\n export parse_bounds_data;"}, {"sha": "cc5a68e7b11b267e8a13a98341ea0a0ab56c5131", "filename": "src/rustc/middle/alias.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Falias.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -5,6 +5,7 @@ import syntax::codemap::span;\n import syntax::visit;\n import visit::vt;\n import std::list;\n+import std::map::hashmap;\n import std::util::unreachable;\n import option::is_none;\n import list::list;"}, {"sha": "c39686b0d3098186c77af4e7cf6535ee612b43b8", "filename": "src/rustc/middle/ast_map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fast_map.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -1,4 +1,5 @@\n import std::map;\n+import std::map::hashmap;\n import syntax::ast::*;\n import syntax::ast_util;\n import syntax::ast_util::inlined_item_methods;\n@@ -35,7 +36,7 @@ enum ast_node {\n     node_res_ctor(@item),\n }\n \n-type map = std::map::map<node_id, ast_node>;\n+type map = std::map::hashmap<node_id, ast_node>;\n type ctx = {map: map, mutable path: path, mutable local_id: uint};\n type vt = visit::vt<ctx>;\n "}, {"sha": "7da4edfc956bc7300fa6019815c252b0063f7a0f", "filename": "src/rustc/middle/capture.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Fcapture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Fcapture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcapture.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -1,6 +1,7 @@\n import syntax::{ast, ast_util};\n import driver::session::session;\n import std::map;\n+import std::map::hashmap;\n \n export capture_mode;\n export capture_var;"}, {"sha": "a52669b65d70ac41678a128cea06ee8c81a31e30", "filename": "src/rustc/middle/check_alt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_alt.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -8,6 +8,7 @@ import syntax::visit;\n import driver::session::session;\n import middle::ty;\n import middle::ty::*;\n+import std::map::hashmap;\n \n fn check_crate(tcx: ty::ctxt, crate: @crate) {\n     visit::visit_crate(*crate, (), visit::mk_vt(@{"}, {"sha": "c36aeaede76aba61996cdccdd5e369dea99c00ae", "filename": "src/rustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_const.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -1,6 +1,7 @@\n import syntax::ast::*;\n import syntax::{visit, ast_util};\n import driver::session::session;\n+import std::map::hashmap;\n \n fn check_crate(sess: session, crate: @crate, method_map: typeck::method_map) {\n     visit::visit_crate(*crate, false, visit::mk_vt(@{"}, {"sha": "332b316b986dd097ab736304f16567d09294db28", "filename": "src/rustc/middle/fn_usage.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Ffn_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Ffn_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ffn_usage.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -1,3 +1,4 @@\n+import std::map::hashmap;\n import syntax::ast;\n import syntax::visit;\n import syntax::print::pprust::expr_to_str;"}, {"sha": "9672848f4c80b3d7671481e77a172dbe455f6e43", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -3,6 +3,7 @@ import syntax::ast::*;\n import syntax::codemap::span;\n import ty::{kind, kind_copyable, kind_sendable, kind_noncopyable};\n import driver::session::session;\n+import std::map::hashmap;\n \n // Kind analysis pass. There are three kinds:\n //"}, {"sha": "60954e25c913a88908232e932839d3d5ad349ce9", "filename": "src/rustc/middle/last_use.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flast_use.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -4,6 +4,7 @@ import syntax::codemap::span;\n import std::list::{is_not_empty, list, nil, cons, tail};\n import std::util::unreachable;\n import std::list;\n+import std::map::hashmap;\n \n // Last use analysis pass.\n //"}, {"sha": "65b570e35a26dc13273fa670967cb5387a99d77a", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -3,6 +3,7 @@ import middle::ty::ctxt;\n import syntax::{ast, visit};\n import front::attr;\n import std::io;\n+import std::map::hashmap;\n import io::writer_util;\n \n enum option {"}, {"sha": "dacf6e5ca9832b3622b3ad5a330fccd8063fee95", "filename": "src/rustc/middle/mutbl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Fmutbl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Fmutbl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fmutbl.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -2,6 +2,7 @@ import syntax::ast::*;\n import syntax::visit;\n import syntax::ast_util;\n import driver::session::session;\n+import std::map::hashmap;\n \n enum deref_t { unbox(bool), field, index, }\n "}, {"sha": "08aa720be68c06fa199f026772775ca2fd48ed32", "filename": "src/rustc/middle/pat_util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fpat_util.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -4,6 +4,7 @@ import syntax::ast_util::respan;\n import syntax::fold;\n import syntax::fold::*;\n import syntax::codemap::span;\n+import std::map::hashmap;\n \n export walk_pat;\n export pat_binding_ids, pat_bindings, pat_id_map;"}, {"sha": "169b74b7a255ca62ecf4c4a9d0aa2dc0d269c3ad", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -12,6 +12,7 @@ import syntax::codemap::span;\n import syntax::print::pprust::pat_to_str;\n import back::abi;\n import resolve::def_map;\n+import std::map::hashmap;\n \n import common::*;\n "}, {"sha": "ceadecb5c83d0cbfab021ae0ed7cfc46c41bdcfe", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -18,6 +18,7 @@ import util::ppaux::ty_to_str;\n import shape::{size_of};\n import ast_map::{path, path_mod, path_name};\n import driver::session::session;\n+import std::map::hashmap;\n \n // ___Good to know (tm)__________________________________________________\n //"}, {"sha": "86522ba9934d61bc66fc003edf8d95de5b4e456b", "filename": "src/rustc/middle/trans/impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -11,6 +11,7 @@ import lib::llvm::llvm;\n import lib::llvm::{ValueRef, TypeRef};\n import lib::llvm::llvm::LLVMGetParam;\n import ast_map::{path, path_mod, path_name};\n+import std::map::hashmap;\n \n // Translation functionality related to impls and ifaces\n //"}, {"sha": "dff2a207cd036a995ce7ad5bce466930324778e6", "filename": "src/rustc/middle/trans/native.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -9,6 +9,7 @@ import common::*;\n import build::*;\n import base::*;\n import type_of::*;\n+import std::map::hashmap;\n \n export link_name, trans_native_mod, register_crust_fn, trans_crust_fn;\n \n@@ -358,4 +359,4 @@ fn register_crust_fn(ccx: crate_ctxt, sp: span,\n     let llfty = T_fn(llargtys, llretty);\n     register_fn_fuller(ccx, sp, path, \"crust fn\", node_id,\n                        t, lib::llvm::CCallConv, llfty)\n-}\n\\ No newline at end of file\n+}"}, {"sha": "89de5e249a2cc0dafc1d5ebf6c90271adc349582", "filename": "src/rustc/middle/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -3,6 +3,7 @@ import lib::llvm::{TypeRef};\n import syntax::ast;\n import lib::llvm::llvm;\n import driver::session::session;\n+import std::map::hashmap;\n \n import ty::*;\n "}, {"sha": "e49748f6b65c46f01d0234e0a79c443a3c83d1db", "filename": "src/rustc/middle/tstate/auxiliary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -4,7 +4,7 @@ import syntax::ast::*;\n import syntax::ast_util::*;\n import syntax::{visit, codemap};\n import codemap::span;\n-import std::map::{new_int_hash};\n+import std::map::{hashmap, new_int_hash};\n import syntax::print::pprust::path_to_str;\n import tstate::ann::{pre_and_post, pre_and_post_state, empty_ann, prestate,\n                      poststate, precond, postcond,"}, {"sha": "7433da333ac6c6657d585305f6450cfe7f825b7c", "filename": "src/rustc/middle/tstate/bitvectors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Ftstate%2Fbitvectors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Ftstate%2Fbitvectors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fbitvectors.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -12,6 +12,7 @@ import tstate::ann::{pre_and_post, precond, postcond, prestate, poststate,\n import tritv::*;\n import util::common::*;\n import driver::session::session;\n+import std::map::hashmap;\n \n fn bit_num(fcx: fn_ctxt, c: tsconstr) -> uint {\n     let d = tsconstr_to_def_id(c);"}, {"sha": "56001460f8b5cd5ada9bef0cc5db6c606506e482", "filename": "src/rustc/middle/tstate/ck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Ftstate%2Fck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Ftstate%2Fck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fck.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -14,6 +14,7 @@ import collect_locals::mk_f_to_fn_info;\n import pre_post_conditions::fn_pre_post;\n import states::find_pre_post_state_fn;\n import driver::session::session;\n+import std::map::hashmap;\n \n fn check_unused_vars(fcx: fn_ctxt) {\n "}, {"sha": "79a085b892e65bb719616f32e4a448c040e5e00b", "filename": "src/rustc/middle/tstate/collect_locals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -8,6 +8,7 @@ import syntax::codemap::span;\n import syntax::ast_util::respan;\n import driver::session::session;\n import aux::*;\n+import std::map::hashmap;\n \n type ctxt = {cs: @mutable [sp_constr], tcx: ty::ctxt};\n "}, {"sha": "3fe6f82f42e919a093846766be966c72b297dc00", "filename": "src/rustc/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -13,6 +13,7 @@ import util::common::{new_def_hash, log_expr, field_exprs,\n                       has_nonlocal_exits, log_stmt};\n import syntax::codemap::span;\n import driver::session::session;\n+import std::map::hashmap;\n \n fn find_pre_post_mod(_m: _mod) -> _mod {\n     #debug(\"implement find_pre_post_mod!\");"}, {"sha": "c7eebf317af81fa5dfe71fd961e6f33c40fda339", "filename": "src/rustc/middle/tstate/states.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -10,6 +10,7 @@ import syntax::codemap::span;\n import middle::ty::{expr_ty, type_is_bot};\n import util::common::*;\n import driver::session::session;\n+import std::map::hashmap;\n \n fn forbid_upvar(fcx: fn_ctxt, rhs_id: node_id, sp: span, t: oper_type) {\n     alt t {"}, {"sha": "718e8af35b9bf6d3606d2504eae1cb8c5dc41955", "filename": "src/rustdoc/astsrv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fastsrv.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -7,6 +7,7 @@\n      Rustdoc from its non-sendableness.\"\n )];\n \n+import std::map::hashmap;\n import rustc::driver::session;\n import rustc::driver::driver;\n import rustc::driver::diagnostic;"}, {"sha": "70572fad825d1b58d6a5a4510de56121b0d8e04d", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -8,6 +8,7 @@\n \n import rustc::syntax::ast;\n import rustc::middle::ast_map;\n+import std::map::hashmap;\n \n export mk_pass;\n \n@@ -474,4 +475,4 @@ mod test {\n             run(srv, doc)\n         }\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "80fe5732d9dce0248ba15a31a747a64f42c866da", "filename": "src/rustdoc/prune_unexported_pass.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustdoc%2Fprune_unexported_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustdoc%2Fprune_unexported_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_unexported_pass.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -3,6 +3,7 @@\n import rustc::syntax::ast;\n import rustc::syntax::ast_util;\n import rustc::middle::ast_map;\n+import std::map::hashmap;\n \n export mk_pass;\n \n@@ -253,4 +254,4 @@ mod test {\n             run(srv, doc)\n         }\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "99f2e19149e0599ea6890b76a0b38ccfe8302414", "filename": "src/rustdoc/reexport_pass.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustdoc%2Freexport_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustdoc%2Freexport_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Freexport_pass.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -1,6 +1,7 @@\n #[doc = \"Finds docs for reexported items and duplicates them\"];\n \n import std::map;\n+import std::map::hashmap;\n import rustc::syntax::ast;\n import rustc::syntax::ast_util;\n import rustc::util::common;"}, {"sha": "5e630ac2ade858389bc396664a91bfb20bb8196f", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -4,6 +4,7 @@\n import rustc::syntax::ast;\n import rustc::syntax::print::pprust;\n import rustc::middle::ast_map;\n+import std::map::hashmap;\n \n export mk_pass;\n "}, {"sha": "06684474c473758ba18baf139058e9ab99eb8e19", "filename": "src/serializer/serializer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Fserializer%2Fserializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Fserializer%2Fserializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fserializer%2Fserializer.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -50,7 +50,7 @@ type ast_pat = str;\n type ast_ty = str;\n type ast_item = str;\n \n-type tp_map = map<ast::node_id, ty::t>;\n+type tp_map = hashmap<ast::node_id, ty::t>;\n \n type serialize_ctx = {\n     crate: @ast::crate,\n@@ -519,4 +519,4 @@ fn main(argv: [str]) {\n     vec::iter(copy sctx.item_fns) {|item|\n         stdout.write_str(#fmt[\"%s\\n\", item])\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "6cf0d3e7ce36d0bfa1c9dfcc9d539cdf169d52e8", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -14,6 +14,7 @@\n \n use std;\n import std::io::writer_util;\n+import std::map::hashmap;\n \n type cmplx = {re: f64, im: f64};\n type line = {i: uint, b: [u8]};"}, {"sha": "d800b5e9a64e750c5e4e5dc32040296e19cd0205", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -13,6 +13,7 @@ use std;\n import option = option;\n import option::{some, none};\n import std::{map, io, time};\n+import std::map::hashmap;\n import io::reader_util;\n \n import comm::chan;"}, {"sha": "76c0807e69b51cc784f01be75723064cc9af4afa", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -1,10 +1,12 @@\n use std;\n import std::map;\n+import std::map::hashmap;\n import std::map::map;\n \n // Test that iface types printed in error msgs include the type arguments.\n \n fn main() {\n-    let x: map<uint,str> = map::new_str_hash::<str>();\n+    let x: map<str,str> = map::new_str_hash::<str>() as map::<str,str>;\n+    let y: map<uint,str> = x;\n     //!^ ERROR mismatched types: expected `std::map::map<uint,str>`\n-}\n\\ No newline at end of file\n+}"}, {"sha": "532a911bd4210a7cc9e518cdf4e524856474a358", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -2,6 +2,7 @@\n \n use std;\n import std::map;\n+import std::map::hashmap;\n import uint;\n \n fn main() {\n@@ -21,4 +22,4 @@ fn main() {\n         map.insert(arr, arr + [@\"value stuff\"]);\n     }\n     map.insert([@\"boom\"], []);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "10f7388f720649ab78ea49dce9f999acdc1d5e13", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -12,6 +12,7 @@ import option::none;\n import str;\n import vec;\n import std::map;\n+import std::map::hashmap;\n import task;\n import comm::chan;\n import comm::port;"}, {"sha": "249f64d445d832021ec563e3833301df58e20595", "filename": "src/test/run-pass/issue-1696.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1696.rs?ref=f0250a23d3fa2f8b4a4a4113ca89e41945a4cfed", "patch": "@@ -1,5 +1,6 @@\n use std;\n import std::map;\n+import std::map::hashmap;\n \n fn main() {\n     let m = map::new_bytes_hash();"}]}