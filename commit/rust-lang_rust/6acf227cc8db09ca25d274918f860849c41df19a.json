{"sha": "6acf227cc8db09ca25d274918f860849c41df19a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhY2YyMjdjYzhkYjA5Y2EyNWQyNzQ5MThmODYwODQ5YzQxZGYxOWE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-25T05:47:13Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-25T05:47:13Z"}, "message": "Set uv's custom data before uv_read_start\n\nThis is a behavioral difference in libuv between different platforms in\ndifferent situations. It turns out that libuv on windows will immediately\nallocate a buffer instead of waiting for data to be ready. What this implies is\nthat we must have our custom data set on the handle before we call\nuv_read_start.\n\nI wish I knew of a way to test this, but this relies to being on the windows\nplatform *and* reading from a true TTY handle which only happens when this is\nactually attached to a terminal. I have manually verified this works.\n\nCloses #10645", "tree": {"sha": "bed69e4989a63e62a74c1c25f01175d08e7057e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bed69e4989a63e62a74c1c25f01175d08e7057e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6acf227cc8db09ca25d274918f860849c41df19a", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6acf227cc8db09ca25d274918f860849c41df19a", "html_url": "https://github.com/rust-lang/rust/commit/6acf227cc8db09ca25d274918f860849c41df19a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6acf227cc8db09ca25d274918f860849c41df19a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01b53817033ba3a3ec01685d30e4a8e7ce14ba0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/01b53817033ba3a3ec01685d30e4a8e7ce14ba0c", "html_url": "https://github.com/rust-lang/rust/commit/01b53817033ba3a3ec01685d30e4a8e7ce14ba0c"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "47ef26ee9d42c17c1e87f6105db855307081ef74", "filename": "src/librustuv/stream.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6acf227cc8db09ca25d274918f860849c41df19a/src%2Flibrustuv%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6acf227cc8db09ca25d274918f860849c41df19a/src%2Flibrustuv%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fstream.rs?ref=6acf227cc8db09ca25d274918f860849c41df19a", "patch": "@@ -69,22 +69,27 @@ impl StreamWatcher {\n         // uv_read_stop function\n         let _f = ForbidUnwind::new(\"stream read\");\n \n+        let mut rcx = ReadContext {\n+            buf: Some(slice_to_uv_buf(buf)),\n+            result: 0,\n+            task: None,\n+        };\n+        // When reading a TTY stream on windows, libuv will invoke alloc_cb\n+        // immediately as part of the call to alloc_cb. What this means is that\n+        // we must be ready for this to happen (by setting the data in the uv\n+        // handle). In theory this otherwise doesn't need to happen until after\n+        // the read is succesfully started.\n+        unsafe {\n+            uvll::set_data_for_uv_handle(self.handle, &rcx)\n+        }\n+\n         // Send off the read request, but don't block until we're sure that the\n         // read request is queued.\n         match unsafe {\n             uvll::uv_read_start(self.handle, alloc_cb, read_cb)\n         } {\n             0 => {\n-                let mut rcx = ReadContext {\n-                    buf: Some(slice_to_uv_buf(buf)),\n-                    result: 0,\n-                    task: None,\n-                };\n-                do wait_until_woken_after(&mut rcx.task) {\n-                    unsafe {\n-                        uvll::set_data_for_uv_handle(self.handle, &rcx)\n-                    }\n-                }\n+                wait_until_woken_after(&mut rcx.task, || {});\n                 match rcx.result {\n                     n if n < 0 => Err(UvError(n as c_int)),\n                     n => Ok(n as uint),"}]}