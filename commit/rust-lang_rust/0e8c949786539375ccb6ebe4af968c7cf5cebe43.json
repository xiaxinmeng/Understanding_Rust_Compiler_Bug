{"sha": "0e8c949786539375ccb6ebe4af968c7cf5cebe43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlOGM5NDk3ODY1MzkzNzVjY2I2ZWJlNGFmOTY4YzdjZjVjZWJlNDM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-24T13:41:43Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-04-01T09:46:09Z"}, "message": "rand: bubble up IO errors when creating an OSRng.", "tree": {"sha": "12f9528c73f1104bc37f202bf69e969ba7038307", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12f9528c73f1104bc37f202bf69e969ba7038307"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e8c949786539375ccb6ebe4af968c7cf5cebe43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e8c949786539375ccb6ebe4af968c7cf5cebe43", "html_url": "https://github.com/rust-lang/rust/commit/0e8c949786539375ccb6ebe4af968c7cf5cebe43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e8c949786539375ccb6ebe4af968c7cf5cebe43/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "119289b0f2359472ff07b4fac14188c3dc37b63c", "url": "https://api.github.com/repos/rust-lang/rust/commits/119289b0f2359472ff07b4fac14188c3dc37b63c", "html_url": "https://github.com/rust-lang/rust/commit/119289b0f2359472ff07b4fac14188c3dc37b63c"}], "stats": {"total": 36, "additions": 23, "deletions": 13}, "files": [{"sha": "5021675c2d81a1e3c18f538958883d1ef12496b2", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0e8c949786539375ccb6ebe4af968c7cf5cebe43/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e8c949786539375ccb6ebe4af968c7cf5cebe43/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=0e8c949786539375ccb6ebe4af968c7cf5cebe43", "patch": "@@ -46,12 +46,15 @@ impl IsaacRng {\n     /// Create an ISAAC random number generator with a random seed.\n     pub fn new() -> IsaacRng {\n         let mut rng = EMPTY;\n-\n+        let mut os_rng = match OSRng::new() {\n+            Ok(r) => r,\n+            Err(e) => fail!(\"IsaacRng::new: creating OSRng failed: {}\", e)\n+        };\n         unsafe {\n             let ptr = rng.rsl.as_mut_ptr();\n \n             raw::mut_buf_as_slice(ptr as *mut u8, mem::size_of_val(&rng.rsl), |slice| {\n-                OSRng::new().fill_bytes(slice);\n+                os_rng.fill_bytes(slice);\n             })\n         }\n \n@@ -251,12 +254,15 @@ impl Isaac64Rng {\n     /// seed.\n     pub fn new() -> Isaac64Rng {\n         let mut rng = EMPTY_64;\n-\n+        let mut os_rng = match OSRng::new() {\n+            Ok(r) => r,\n+            Err(e) => fail!(\"Isaac64Rng::new: creating OSRng failed: {}\", e)\n+        };\n         unsafe {\n             let ptr = rng.rsl.as_mut_ptr();\n \n             raw::mut_buf_as_slice(ptr as *mut u8, mem::size_of_val(&rng.rsl), |slice| {\n-                OSRng::new().fill_bytes(slice);\n+                os_rng.fill_bytes(slice);\n             })\n         }\n "}, {"sha": "438075998f7ead010cea87f29b078038703653ca", "filename": "src/librand/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0e8c949786539375ccb6ebe4af968c7cf5cebe43/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e8c949786539375ccb6ebe4af968c7cf5cebe43/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=0e8c949786539375ccb6ebe4af968c7cf5cebe43", "patch": "@@ -540,7 +540,10 @@ impl XorShiftRng {\n     pub fn new() -> XorShiftRng {\n         let mut s = [0u8, ..16];\n         loop {\n-            let mut r = OSRng::new();\n+            let mut r = match OSRng::new() {\n+                Ok(r) => r,\n+                Err(e) => fail!(\"XorShiftRng::new: creating OSRng failed: {}\", e)\n+            };\n             r.fill_bytes(s);\n \n             if !s.iter().all(|x| *x == 0) {"}, {"sha": "396346b672f5398d9658f61e5299fe89ef48df6f", "filename": "src/librand/os.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0e8c949786539375ccb6ebe4af968c7cf5cebe43/src%2Flibrand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e8c949786539375ccb6ebe4af968c7cf5cebe43/src%2Flibrand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fos.rs?ref=0e8c949786539375ccb6ebe4af968c7cf5cebe43", "patch": "@@ -17,7 +17,7 @@ pub use self::imp::OSRng;\n mod imp {\n     use Rng;\n     use reader::ReaderRng;\n-    use std::io::File;\n+    use std::io::{IoResult, File};\n \n     /// A random number generator that retrieves randomness straight from\n     /// the operating system. Platform sources:\n@@ -35,12 +35,11 @@ mod imp {\n \n     impl OSRng {\n         /// Create a new `OSRng`.\n-        pub fn new() -> OSRng {\n-            let reader = File::open(&Path::new(\"/dev/urandom\"));\n-            let reader = reader.ok().expect(\"Error opening /dev/urandom\");\n+        pub fn new() -> IoResult<OSRng> {\n+            let reader = try!(File::open(&Path::new(\"/dev/urandom\")));\n             let reader_rng = ReaderRng::new(reader);\n \n-            OSRng { inner: reader_rng }\n+            Ok(OSRng { inner: reader_rng })\n         }\n     }\n \n@@ -61,6 +60,7 @@ mod imp {\n mod imp {\n     use Rng;\n     use std::cast;\n+    use std::io::{IoResult, IoError};\n     use std::libc::{c_ulong, DWORD, BYTE, LPCSTR, BOOL};\n     use std::os;\n     use std::rt::stack;\n@@ -99,7 +99,7 @@ mod imp {\n \n     impl OSRng {\n         /// Create a new `OSRng`.\n-        pub fn new() -> OSRng {\n+        pub fn new() -> IoResult<OSRng> {\n             let mut hcp = 0;\n             let mut ret = unsafe {\n                 CryptAcquireContextA(&mut hcp, 0 as LPCSTR, 0 as LPCSTR,\n@@ -143,9 +143,10 @@ mod imp {\n             }\n \n             if ret == 0 {\n-                fail!(\"couldn't create context: {}\", os::last_os_error());\n+                Err(IoError::last_error())\n+            } else {\n+                Ok(OSRng { hcryptprov: hcp })\n             }\n-            OSRng { hcryptprov: hcp }\n         }\n     }\n "}]}