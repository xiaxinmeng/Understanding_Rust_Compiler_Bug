{"sha": "a63bf3bb10117af94cc8189e9f228a81da5b432d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2M2JmM2JiMTAxMTdhZjk0Y2M4MTg5ZTlmMjI4YTgxZGE1YjQzMmQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-03-09T13:08:59Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-03-09T13:08:59Z"}, "message": "Add missing urls", "tree": {"sha": "9b4eb809bc69d3682f6e40692be935d972eed30d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b4eb809bc69d3682f6e40692be935d972eed30d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a63bf3bb10117af94cc8189e9f228a81da5b432d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a63bf3bb10117af94cc8189e9f228a81da5b432d", "html_url": "https://github.com/rust-lang/rust/commit/a63bf3bb10117af94cc8189e9f228a81da5b432d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a63bf3bb10117af94cc8189e9f228a81da5b432d/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "html_url": "https://github.com/rust-lang/rust/commit/2079a084df08c38eb4dbfc5c8de5c0245170c3d9"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "1bb2bed463b0925be99a8d48e4bf7a628dfda9a1", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a63bf3bb10117af94cc8189e9f228a81da5b432d/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63bf3bb10117af94cc8189e9f228a81da5b432d/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=a63bf3bb10117af94cc8189e9f228a81da5b432d", "patch": "@@ -1212,8 +1212,9 @@ impl<T: Clone> Vec<T> {\n     /// difference, with each additional slot filled with `value`.\n     /// If `new_len` is less than `len`, the `Vec` is simply truncated.\n     ///\n-    /// This method requires `Clone` to clone the passed value. If you'd\n-    /// rather create a value with `Default` instead, see [`resize_default`].\n+    /// This method requires [`Clone`] to be able clone the passed value. If\n+    /// you'd rather create a value with [`Default`] instead, see\n+    /// [`resize_default`].\n     ///\n     /// # Examples\n     ///\n@@ -1227,6 +1228,8 @@ impl<T: Clone> Vec<T> {\n     /// assert_eq!(vec, [1, 2]);\n     /// ```\n     ///\n+    /// [`Clone`]: ../../std/clone/trait.Clone.html\n+    /// [`Default`]: ../../std/default/trait.Default.html\n     /// [`resize_default`]: #method.resize_default\n     #[stable(feature = \"vec_resize\", since = \"1.5.0\")]\n     pub fn resize(&mut self, new_len: usize, value: T) {\n@@ -1244,7 +1247,7 @@ impl<T: Clone> Vec<T> {\n     /// Iterates over the slice `other`, clones each element, and then appends\n     /// it to this `Vec`. The `other` vector is traversed in-order.\n     ///\n-    /// Note that this function is same as `extend` except that it is\n+    /// Note that this function is same as [`extend`] except that it is\n     /// specialized to work with slices instead. If and when Rust gets\n     /// specialization this function will likely be deprecated (but still\n     /// available).\n@@ -1256,6 +1259,8 @@ impl<T: Clone> Vec<T> {\n     /// vec.extend_from_slice(&[2, 3, 4]);\n     /// assert_eq!(vec, [1, 2, 3, 4]);\n     /// ```\n+    ///\n+    /// [`extend`]: #method.extend\n     #[stable(feature = \"vec_extend_from_slice\", since = \"1.6.0\")]\n     pub fn extend_from_slice(&mut self, other: &[T]) {\n         self.spec_extend(other.iter())\n@@ -1266,12 +1271,11 @@ impl<T: Default> Vec<T> {\n     /// Resizes the `Vec` in-place so that `len` is equal to `new_len`.\n     ///\n     /// If `new_len` is greater than `len`, the `Vec` is extended by the\n-    /// difference, with each additional slot filled with `Default::default()`.\n+    /// difference, with each additional slot filled with [`Default::default()`].\n     /// If `new_len` is less than `len`, the `Vec` is simply truncated.\n     ///\n-    /// This method uses `Default` to create new values on every push. If\n-    /// you'd rather `Clone` a given value, use [`resize`].\n-    ///\n+    /// This method uses [`Default`] to create new values on every push. If\n+    /// you'd rather [`Clone`] a given value, use [`resize`].\n     ///\n     /// # Examples\n     ///\n@@ -1288,6 +1292,9 @@ impl<T: Default> Vec<T> {\n     /// ```\n     ///\n     /// [`resize`]: #method.resize\n+    /// [`Default::default()`]: ../../std/default/trait.Default.html#tymethod.default\n+    /// [`Default`]: ../../std/default/trait.Default.html\n+    /// [`Clone`]: ../../std/clone/trait.Clone.html\n     #[unstable(feature = \"vec_resize_default\", issue = \"41758\")]\n     pub fn resize_default(&mut self, new_len: usize) {\n         let len = self.len();"}]}