{"sha": "cb17049b36c367070a35913861426249521596cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMTcwNDliMzZjMzY3MDcwYTM1OTEzODYxNDI2MjQ5NTIxNTk2Y2Q=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-25T05:45:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-25T05:45:35Z"}, "message": "Rollup merge of #70369 - estebank:bad-placeholder-in-where, r=Centril\n\nFix smaller issues with invalid placeholder type errors\n\nFollow up to #70294.\n\n- Fix placement of suggested generic param when bounds are present.\n- Reduce error duplication for invalid placeholder types in `fn` types.\n\nr? @Centril", "tree": {"sha": "7787402961daac4d95adcbbcede8a76d84c339cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7787402961daac4d95adcbbcede8a76d84c339cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb17049b36c367070a35913861426249521596cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeeu//CRBK7hj4Ov3rIwAAdHIIADw8b3xo0RsX896ig6jHpuRS\ny/ESLF7HFL9rLDTJ9N3Nc6uMym+E4PC3ZdUZ2cgndDtM0K44mXm9dNP8O1PGsh5V\nlcXXZSScia+Ljc1deVUhL6EhqVPaKTD8wvlXPT8IpW1U++jFmI+F9k6bj7ci6NGw\nXJlaAIP/uK1vPLSW+1+kDtd7yjhfpC3+qraC3M/wFBOdIXUCKrfJrc8tUj/MjZjr\nkqTGtVaEIpU3oidGJspZ8V1awYXtC7cSiLIQqNuhIt87RaatMLPSldEsA768gnEQ\ndLq7BoXrBp3RZBOy++2mYSzTtOGdDbQMeXsu8AtoKJbrMkkjaDF+UiTkW+u5VLE=\n=N//c\n-----END PGP SIGNATURE-----\n", "payload": "tree 7787402961daac4d95adcbbcede8a76d84c339cc\nparent 3d0976a91bdff6122bd7e8218d22a99b4079c73c\nparent 7534efa0ef15506b1bfa25d4d7154ed7ec5e83a8\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1585115135 +0100\ncommitter GitHub <noreply@github.com> 1585115135 +0100\n\nRollup merge of #70369 - estebank:bad-placeholder-in-where, r=Centril\n\nFix smaller issues with invalid placeholder type errors\n\nFollow up to #70294.\n\n- Fix placement of suggested generic param when bounds are present.\n- Reduce error duplication for invalid placeholder types in `fn` types.\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb17049b36c367070a35913861426249521596cd", "html_url": "https://github.com/rust-lang/rust/commit/cb17049b36c367070a35913861426249521596cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb17049b36c367070a35913861426249521596cd/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d0976a91bdff6122bd7e8218d22a99b4079c73c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d0976a91bdff6122bd7e8218d22a99b4079c73c", "html_url": "https://github.com/rust-lang/rust/commit/3d0976a91bdff6122bd7e8218d22a99b4079c73c"}, {"sha": "7534efa0ef15506b1bfa25d4d7154ed7ec5e83a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7534efa0ef15506b1bfa25d4d7154ed7ec5e83a8", "html_url": "https://github.com/rust-lang/rust/commit/7534efa0ef15506b1bfa25d4d7154ed7ec5e83a8"}], "stats": {"total": 156, "additions": 75, "deletions": 81}, "files": [{"sha": "3bf144e9643f0e528d4d051e4a024c68aa63fbb1", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb17049b36c367070a35913861426249521596cd/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb17049b36c367070a35913861426249521596cd/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=cb17049b36c367070a35913861426249521596cd", "patch": "@@ -2883,16 +2883,17 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let bare_fn_ty =\n             ty::Binder::bind(tcx.mk_fn_sig(input_tys, output_ty, decl.c_variadic, unsafety, abi));\n \n-        if !self.allow_ty_infer() {\n+        if let (false, Some(ident_span)) = (self.allow_ty_infer(), ident_span) {\n             // We always collect the spans for placeholder types when evaluating `fn`s, but we\n             // only want to emit an error complaining about them if infer types (`_`) are not\n-            // allowed. `allow_ty_infer` gates this behavior.\n+            // allowed. `allow_ty_infer` gates this behavior. We check for the presence of\n+            // `ident_span` to not emit an error twice when we have `fn foo(_: fn() -> _)`.\n             crate::collect::placeholder_type_error(\n                 tcx,\n-                ident_span.map(|sp| sp.shrink_to_hi()).unwrap_or(DUMMY_SP),\n+                ident_span.shrink_to_hi(),\n                 &generics.params[..],\n                 visitor.0,\n-                ident_span.is_some(),\n+                true,\n             );\n         }\n "}, {"sha": "42cd7246f086e2ce0caaa564a7b78826bdb72d7e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cb17049b36c367070a35913861426249521596cd/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb17049b36c367070a35913861426249521596cd/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=cb17049b36c367070a35913861426249521596cd", "patch": "@@ -162,8 +162,10 @@ crate fn placeholder_type_error(\n         // `struct S<T>(T);` instead of `struct S<_, T>(T);`.\n         sugg.push((arg.span, (*type_name).to_string()));\n     } else {\n+        let last = generics.iter().last().unwrap();\n         sugg.push((\n-            generics.iter().last().unwrap().span.shrink_to_hi(),\n+            // Account for bounds, we want `fn foo<T: E, K>(_: K)` not `fn foo<T, K: E>(_: K)`.\n+            last.bounds_span().unwrap_or(last.span).shrink_to_hi(),\n             format!(\", {}\", type_name),\n         ));\n     }\n@@ -1501,9 +1503,13 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n             AstConv::ty_of_fn(&icx, header.unsafety, header.abi, decl, &generics, Some(ident.span))\n         }\n \n-        ForeignItem(&hir::ForeignItem { kind: ForeignItemKind::Fn(ref fn_decl, _, _), .. }) => {\n+        ForeignItem(&hir::ForeignItem {\n+            kind: ForeignItemKind::Fn(ref fn_decl, _, _),\n+            ident,\n+            ..\n+        }) => {\n             let abi = tcx.hir().get_foreign_abi(hir_id);\n-            compute_sig_of_foreign_fn_decl(tcx, def_id, fn_decl, abi)\n+            compute_sig_of_foreign_fn_decl(tcx, def_id, fn_decl, abi, ident)\n         }\n \n         Ctor(data) | Variant(hir::Variant { data, .. }) if data.ctor_hir_id().is_some() => {\n@@ -2116,6 +2122,7 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n     def_id: DefId,\n     decl: &'tcx hir::FnDecl<'tcx>,\n     abi: abi::Abi,\n+    ident: Ident,\n ) -> ty::PolyFnSig<'tcx> {\n     let unsafety = if abi == abi::Abi::RustIntrinsic {\n         intrinsic_operation_unsafety(&tcx.item_name(def_id).as_str())\n@@ -2128,7 +2135,7 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n         abi,\n         decl,\n         &hir::Generics::empty(),\n-        None,\n+        Some(ident.span),\n     );\n \n     // Feature gate SIMD types in FFI, since I am not sure that the"}, {"sha": "c409ea9c6576d78a32c3601ec81a451ad9241148", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb17049b36c367070a35913861426249521596cd/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb17049b36c367070a35913861426249521596cd/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=cb17049b36c367070a35913861426249521596cd", "patch": "@@ -145,8 +145,8 @@ LL | fn foo<X: K<_, _>>(x: X) {}\n    |\n help: use type parameters instead\n    |\n-LL | fn foo<X, T: K<T, T>>(x: X) {}\n-   |         ^^^    ^  ^\n+LL | fn foo<X: K<T, T>, T>(x: X) {}\n+   |             ^  ^ ^^^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/bad-assoc-ty.rs:52:34\n@@ -167,8 +167,8 @@ LL | fn baz<F: Fn() -> _>(_: F) {}\n    |\n help: use type parameters instead\n    |\n-LL | fn baz<F, T: Fn() -> T>(_: F) {}\n-   |         ^^^          ^\n+LL | fn baz<F: Fn() -> T, T>(_: F) {}\n+   |                   ^^^^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/bad-assoc-ty.rs:58:33"}, {"sha": "99a70230892833d8996864bcce78c3fe2db850aa", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb17049b36c367070a35913861426249521596cd/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb17049b36c367070a35913861426249521596cd/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs?ref=cb17049b36c367070a35913861426249521596cd", "patch": "@@ -32,7 +32,6 @@ fn test7(x: _) { let _x: usize = x; }\n \n fn test8(_f: fn() -> _) { }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n-//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n \n struct Test9;\n \n@@ -99,7 +98,6 @@ pub fn main() {\n \n     fn fn_test8(_f: fn() -> _) { }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n-    //~| ERROR the type placeholder `_` is not allowed within types on item signatures\n \n     struct FnTest9;\n "}, {"sha": "db67e0c9b7d98fa6d1f977ce9e1384c077b787d5", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 55, "deletions": 67, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/cb17049b36c367070a35913861426249521596cd/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb17049b36c367070a35913861426249521596cd/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=cb17049b36c367070a35913861426249521596cd", "patch": "@@ -1,43 +1,43 @@\n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:154:18\n+  --> $DIR/typeck_type_placeholder_item.rs:152:18\n    |\n LL | struct BadStruct<_>(_);\n    |                  ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:157:16\n+  --> $DIR/typeck_type_placeholder_item.rs:155:16\n    |\n LL | trait BadTrait<_> {}\n    |                ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:167:19\n+  --> $DIR/typeck_type_placeholder_item.rs:165:19\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                   ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:167:22\n+  --> $DIR/typeck_type_placeholder_item.rs:165:22\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                      ^ expected identifier, found reserved identifier\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/typeck_type_placeholder_item.rs:172:19\n+  --> $DIR/typeck_type_placeholder_item.rs:170:19\n    |\n LL | struct BadStruct2<_, T>(_, T);\n    |                   ^ expected identifier, found reserved identifier\n \n error: associated constant in `impl` without body\n-  --> $DIR/typeck_type_placeholder_item.rs:203:5\n+  --> $DIR/typeck_type_placeholder_item.rs:201:5\n    |\n LL |     const C: _;\n    |     ^^^^^^^^^^-\n    |               |\n    |               help: provide a definition for the constant: `= <expr>;`\n \n error[E0403]: the name `_` is already used for a generic parameter in this item's generic parameters\n-  --> $DIR/typeck_type_placeholder_item.rs:167:22\n+  --> $DIR/typeck_type_placeholder_item.rs:165:22\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                   -  ^ already used\n@@ -131,12 +131,6 @@ help: use type parameters instead\n LL | fn test7<T>(x: T) { let _x: usize = x; }\n    |         ^^^    ^\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:33:22\n-   |\n-LL | fn test8(_f: fn() -> _) { }\n-   |                      ^ not allowed in type signatures\n-\n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:33:22\n    |\n@@ -149,7 +143,7 @@ LL | fn test8<T>(_f: fn() -> T) { }\n    |         ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:47:26\n+  --> $DIR/typeck_type_placeholder_item.rs:46:26\n    |\n LL | fn test11(x: &usize) -> &_ {\n    |                         -^\n@@ -158,7 +152,7 @@ LL | fn test11(x: &usize) -> &_ {\n    |                         help: replace with the correct return type: `&&usize`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:52:52\n+  --> $DIR/typeck_type_placeholder_item.rs:51:52\n    |\n LL | unsafe fn test12(x: *const usize) -> *const *const _ {\n    |                                      --------------^\n@@ -167,7 +161,7 @@ LL | unsafe fn test12(x: *const usize) -> *const *const _ {\n    |                                      help: replace with the correct return type: `*const *const usize`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:66:8\n+  --> $DIR/typeck_type_placeholder_item.rs:65:8\n    |\n LL |     a: _,\n    |        ^ not allowed in type signatures\n@@ -186,13 +180,13 @@ LL |     b: (T, T),\n    |\n \n error: missing type for `static` item\n-  --> $DIR/typeck_type_placeholder_item.rs:72:12\n+  --> $DIR/typeck_type_placeholder_item.rs:71:12\n    |\n LL |     static A = 42;\n    |            ^ help: provide a type for the item: `A: i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:74:15\n+  --> $DIR/typeck_type_placeholder_item.rs:73:15\n    |\n LL |     static B: _ = 42;\n    |               ^\n@@ -201,13 +195,13 @@ LL |     static B: _ = 42;\n    |               help: replace `_` with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:76:15\n+  --> $DIR/typeck_type_placeholder_item.rs:75:15\n    |\n LL |     static C: Option<_> = Some(42);\n    |               ^^^^^^^^^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:79:21\n+  --> $DIR/typeck_type_placeholder_item.rs:78:21\n    |\n LL |     fn fn_test() -> _ { 5 }\n    |                     ^\n@@ -216,7 +210,7 @@ LL |     fn fn_test() -> _ { 5 }\n    |                     help: replace with the correct return type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:82:23\n+  --> $DIR/typeck_type_placeholder_item.rs:81:23\n    |\n LL |     fn fn_test2() -> (_, _) { (5, 5) }\n    |                      -^--^-\n@@ -226,7 +220,7 @@ LL |     fn fn_test2() -> (_, _) { (5, 5) }\n    |                      help: replace with the correct return type: `(i32, i32)`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:85:22\n+  --> $DIR/typeck_type_placeholder_item.rs:84:22\n    |\n LL |     static FN_TEST3: _ = \"test\";\n    |                      ^\n@@ -235,7 +229,7 @@ LL |     static FN_TEST3: _ = \"test\";\n    |                      help: replace `_` with the correct type: `&str`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:88:22\n+  --> $DIR/typeck_type_placeholder_item.rs:87:22\n    |\n LL |     static FN_TEST4: _ = 145;\n    |                      ^\n@@ -244,13 +238,13 @@ LL |     static FN_TEST4: _ = 145;\n    |                      help: replace `_` with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:91:22\n+  --> $DIR/typeck_type_placeholder_item.rs:90:22\n    |\n LL |     static FN_TEST5: (_, _) = (1, 2);\n    |                      ^^^^^^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:94:20\n+  --> $DIR/typeck_type_placeholder_item.rs:93:20\n    |\n LL |     fn fn_test6(_: _) { }\n    |                    ^ not allowed in type signatures\n@@ -261,7 +255,7 @@ LL |     fn fn_test6<T>(_: T) { }\n    |                ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:97:20\n+  --> $DIR/typeck_type_placeholder_item.rs:96:20\n    |\n LL |     fn fn_test7(x: _) { let _x: usize = x; }\n    |                    ^ not allowed in type signatures\n@@ -272,13 +266,7 @@ LL |     fn fn_test7<T>(x: T) { let _x: usize = x; }\n    |                ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:100:29\n-   |\n-LL |     fn fn_test8(_f: fn() -> _) { }\n-   |                             ^ not allowed in type signatures\n-\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:100:29\n+  --> $DIR/typeck_type_placeholder_item.rs:99:29\n    |\n LL |     fn fn_test8(_f: fn() -> _) { }\n    |                             ^ not allowed in type signatures\n@@ -289,7 +277,7 @@ LL |     fn fn_test8<T>(_f: fn() -> T) { }\n    |                ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:123:12\n+  --> $DIR/typeck_type_placeholder_item.rs:121:12\n    |\n LL |         a: _,\n    |            ^ not allowed in type signatures\n@@ -308,21 +296,21 @@ LL |         b: (T, T),\n    |\n \n error[E0282]: type annotations needed\n-  --> $DIR/typeck_type_placeholder_item.rs:128:18\n+  --> $DIR/typeck_type_placeholder_item.rs:126:18\n    |\n LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n    |                  ^ cannot infer type\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:128:28\n+  --> $DIR/typeck_type_placeholder_item.rs:126:28\n    |\n LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n    |                            ^  ^ not allowed in type signatures\n    |                            |\n    |                            not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:132:30\n+  --> $DIR/typeck_type_placeholder_item.rs:130:30\n    |\n LL |     fn fn_test12(x: i32) -> (_, _) { (x, x) }\n    |                             -^--^-\n@@ -332,7 +320,7 @@ LL |     fn fn_test12(x: i32) -> (_, _) { (x, x) }\n    |                             help: replace with the correct return type: `(i32, i32)`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:135:33\n+  --> $DIR/typeck_type_placeholder_item.rs:133:33\n    |\n LL |     fn fn_test13(x: _) -> (i32, _) { (x, x) }\n    |                           ------^-\n@@ -341,7 +329,7 @@ LL |     fn fn_test13(x: _) -> (i32, _) { (x, x) }\n    |                           help: replace with the correct return type: `(i32, i32)`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:154:21\n+  --> $DIR/typeck_type_placeholder_item.rs:152:21\n    |\n LL | struct BadStruct<_>(_);\n    |                     ^ not allowed in type signatures\n@@ -352,7 +340,7 @@ LL | struct BadStruct<T>(T);\n    |                  ^  ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:159:15\n+  --> $DIR/typeck_type_placeholder_item.rs:157:15\n    |\n LL | impl BadTrait<_> for BadStruct<_> {}\n    |               ^                ^ not allowed in type signatures\n@@ -365,13 +353,13 @@ LL | impl<T> BadTrait<T> for BadStruct<T> {}\n    |     ^^^          ^                ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:162:34\n+  --> $DIR/typeck_type_placeholder_item.rs:160:34\n    |\n LL | fn impl_trait() -> impl BadTrait<_> {\n    |                                  ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:167:25\n+  --> $DIR/typeck_type_placeholder_item.rs:165:25\n    |\n LL | struct BadStruct1<_, _>(_);\n    |                         ^ not allowed in type signatures\n@@ -382,7 +370,7 @@ LL | struct BadStruct1<T, _>(T);\n    |                   ^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:172:25\n+  --> $DIR/typeck_type_placeholder_item.rs:170:25\n    |\n LL | struct BadStruct2<_, T>(_, T);\n    |                         ^ not allowed in type signatures\n@@ -393,13 +381,13 @@ LL | struct BadStruct2<K, T>(K, T);\n    |                   ^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:176:14\n+  --> $DIR/typeck_type_placeholder_item.rs:174:14\n    |\n LL | type X = Box<_>;\n    |              ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:43:27\n+  --> $DIR/typeck_type_placeholder_item.rs:42:27\n    |\n LL |     fn test10(&self, _x : _) { }\n    |                           ^ not allowed in type signatures\n@@ -410,7 +398,7 @@ LL |     fn test10<T>(&self, _x : T) { }\n    |              ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:140:31\n+  --> $DIR/typeck_type_placeholder_item.rs:138:31\n    |\n LL |     fn method_test1(&self, x: _);\n    |                               ^ not allowed in type signatures\n@@ -421,7 +409,7 @@ LL |     fn method_test1<T>(&self, x: T);\n    |                    ^^^           ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:142:31\n+  --> $DIR/typeck_type_placeholder_item.rs:140:31\n    |\n LL |     fn method_test2(&self, x: _) -> _;\n    |                               ^     ^ not allowed in type signatures\n@@ -434,7 +422,7 @@ LL |     fn method_test2<T>(&self, x: T) -> T;\n    |                    ^^^           ^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:144:31\n+  --> $DIR/typeck_type_placeholder_item.rs:142:31\n    |\n LL |     fn method_test3(&self) -> _;\n    |                               ^ not allowed in type signatures\n@@ -445,7 +433,7 @@ LL |     fn method_test3<T>(&self) -> T;\n    |                    ^^^           ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:146:26\n+  --> $DIR/typeck_type_placeholder_item.rs:144:26\n    |\n LL |     fn assoc_fn_test1(x: _);\n    |                          ^ not allowed in type signatures\n@@ -456,7 +444,7 @@ LL |     fn assoc_fn_test1<T>(x: T);\n    |                      ^^^    ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:148:26\n+  --> $DIR/typeck_type_placeholder_item.rs:146:26\n    |\n LL |     fn assoc_fn_test2(x: _) -> _;\n    |                          ^     ^ not allowed in type signatures\n@@ -469,7 +457,7 @@ LL |     fn assoc_fn_test2<T>(x: T) -> T;\n    |                      ^^^    ^     ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:150:28\n+  --> $DIR/typeck_type_placeholder_item.rs:148:28\n    |\n LL |     fn assoc_fn_test3() -> _;\n    |                            ^ not allowed in type signatures\n@@ -480,7 +468,7 @@ LL |     fn assoc_fn_test3<T>() -> T;\n    |                      ^^^      ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:61:37\n+  --> $DIR/typeck_type_placeholder_item.rs:60:37\n    |\n LL |     fn clone_from(&mut self, other: _) { *self = Test9; }\n    |                                     ^ not allowed in type signatures\n@@ -491,7 +479,7 @@ LL |     fn clone_from<T>(&mut self, other: T) { *self = Test9; }\n    |                  ^^^                   ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:110:34\n+  --> $DIR/typeck_type_placeholder_item.rs:108:34\n    |\n LL |         fn fn_test10(&self, _x : _) { }\n    |                                  ^ not allowed in type signatures\n@@ -502,7 +490,7 @@ LL |         fn fn_test10<T>(&self, _x : T) { }\n    |                     ^^^             ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:118:41\n+  --> $DIR/typeck_type_placeholder_item.rs:116:41\n    |\n LL |         fn clone_from(&mut self, other: _) { *self = FnTest9; }\n    |                                         ^ not allowed in type signatures\n@@ -513,25 +501,25 @@ LL |         fn clone_from<T>(&mut self, other: T) { *self = FnTest9; }\n    |                      ^^^                   ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:182:21\n+  --> $DIR/typeck_type_placeholder_item.rs:180:21\n    |\n LL | type Y = impl Trait<_>;\n    |                     ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:190:14\n+  --> $DIR/typeck_type_placeholder_item.rs:188:14\n    |\n LL |     type B = _;\n    |              ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:192:14\n+  --> $DIR/typeck_type_placeholder_item.rs:190:14\n    |\n LL |     const C: _;\n    |              ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:194:14\n+  --> $DIR/typeck_type_placeholder_item.rs:192:14\n    |\n LL |     const D: _ = 42;\n    |              ^\n@@ -540,7 +528,7 @@ LL |     const D: _ = 42;\n    |              help: replace `_` with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:40:24\n+  --> $DIR/typeck_type_placeholder_item.rs:39:24\n    |\n LL |     fn test9(&self) -> _ { () }\n    |                        ^\n@@ -549,7 +537,7 @@ LL |     fn test9(&self) -> _ { () }\n    |                        help: replace with the correct return type: `()`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:58:24\n+  --> $DIR/typeck_type_placeholder_item.rs:57:24\n    |\n LL |     fn clone(&self) -> _ { Test9 }\n    |                        ^\n@@ -558,7 +546,7 @@ LL |     fn clone(&self) -> _ { Test9 }\n    |                        help: replace with the correct return type: `Test9`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:107:31\n+  --> $DIR/typeck_type_placeholder_item.rs:105:31\n    |\n LL |         fn fn_test9(&self) -> _ { () }\n    |                               ^\n@@ -567,7 +555,7 @@ LL |         fn fn_test9(&self) -> _ { () }\n    |                               help: replace with the correct return type: `()`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:115:28\n+  --> $DIR/typeck_type_placeholder_item.rs:113:28\n    |\n LL |         fn clone(&self) -> _ { FnTest9 }\n    |                            ^\n@@ -576,33 +564,33 @@ LL |         fn clone(&self) -> _ { FnTest9 }\n    |                            help: replace with the correct return type: `main::FnTest9`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:199:14\n+  --> $DIR/typeck_type_placeholder_item.rs:197:14\n    |\n LL |     type A = _;\n    |              ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:201:14\n+  --> $DIR/typeck_type_placeholder_item.rs:199:14\n    |\n LL |     type B = _;\n    |              ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:203:14\n+  --> $DIR/typeck_type_placeholder_item.rs:201:14\n    |\n LL |     const C: _;\n    |              ^ not allowed in type signatures\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/typeck_type_placeholder_item.rs:206:14\n+  --> $DIR/typeck_type_placeholder_item.rs:204:14\n    |\n LL |     const D: _ = 42;\n    |              ^\n    |              |\n    |              not allowed in type signatures\n    |              help: replace `_` with the correct type: `i32`\n \n-error: aborting due to 66 previous errors\n+error: aborting due to 64 previous errors\n \n Some errors have detailed explanations: E0121, E0282, E0403.\n For more information about an error, try `rustc --explain E0121`."}]}