{"sha": "8211539114df8b6e3a9b8b251fa57cb5a77d2f14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMTE1MzkxMTRkZjhiNmUzYTliOGIyNTFmYTU3Y2I1YTc3ZDJmMTQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-14T21:24:41Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-15T20:50:34Z"}, "message": "Register new snapshots", "tree": {"sha": "92a98a66aebf8388e199ccb059c83d6afefaa1e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92a98a66aebf8388e199ccb059c83d6afefaa1e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8211539114df8b6e3a9b8b251fa57cb5a77d2f14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8211539114df8b6e3a9b8b251fa57cb5a77d2f14", "html_url": "https://github.com/rust-lang/rust/commit/8211539114df8b6e3a9b8b251fa57cb5a77d2f14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8211539114df8b6e3a9b8b251fa57cb5a77d2f14/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "912a9675c0b7f9e8c836983e525b180c48693925", "url": "https://api.github.com/repos/rust-lang/rust/commits/912a9675c0b7f9e8c836983e525b180c48693925", "html_url": "https://github.com/rust-lang/rust/commit/912a9675c0b7f9e8c836983e525b180c48693925"}], "stats": {"total": 119, "additions": 10, "deletions": 109}, "files": [{"sha": "9e3a92981e5324014a3c62a49f732b8384faf10a", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8211539114df8b6e3a9b8b251fa57cb5a77d2f14/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8211539114df8b6e3a9b8b251fa57cb5a77d2f14/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=8211539114df8b6e3a9b8b251fa57cb5a77d2f14", "patch": "@@ -116,9 +116,6 @@ pub mod slice;\n pub mod str;\n pub mod tuple;\n \n-#[cfg(stage0, not(test))]\n-pub mod owned;\n-\n // FIXME: this module should not exist. Once owned allocations are no longer a\n //        language type, this module can move outside to the owned allocation\n //        crate."}, {"sha": "3af12c5154c29d5f08847f5ca209ff53f477781d", "filename": "src/libcore/owned.rs", "status": "removed", "additions": 0, "deletions": 101, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/912a9675c0b7f9e8c836983e525b180c48693925/src%2Flibcore%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/912a9675c0b7f9e8c836983e525b180c48693925/src%2Flibcore%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fowned.rs?ref=912a9675c0b7f9e8c836983e525b180c48693925", "patch": "@@ -1,101 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Operations on unique pointer types\n-\n-use any::{Any, AnyRefExt};\n-use clone::Clone;\n-use cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering};\n-use default::Default;\n-use intrinsics;\n-use mem;\n-use raw::TraitObject;\n-use result::{Ok, Err, Result};\n-\n-/// A value that represents the global exchange heap. This is the default\n-/// place that the `box` keyword allocates into when no place is supplied.\n-///\n-/// The following two examples are equivalent:\n-///\n-///     let foo = box(HEAP) Bar::new(...);\n-///     let foo = box Bar::new(...);\n-#[lang=\"exchange_heap\"]\n-pub static HEAP: () = ();\n-\n-/// A type that represents a uniquely-owned value.\n-#[lang=\"owned_box\"]\n-pub struct Box<T>(*T);\n-\n-impl<T: Default> Default for Box<T> {\n-    fn default() -> Box<T> { box Default::default() }\n-}\n-\n-impl<T: Clone> Clone for Box<T> {\n-    /// Return a copy of the owned box.\n-    #[inline]\n-    fn clone(&self) -> Box<T> { box {(**self).clone()} }\n-\n-    /// Perform copy-assignment from `source` by reusing the existing allocation.\n-    #[inline]\n-    fn clone_from(&mut self, source: &Box<T>) {\n-        (**self).clone_from(&(**source));\n-    }\n-}\n-\n-// box pointers\n-impl<T:Eq> Eq for Box<T> {\n-    #[inline]\n-    fn eq(&self, other: &Box<T>) -> bool { *(*self) == *(*other) }\n-    #[inline]\n-    fn ne(&self, other: &Box<T>) -> bool { *(*self) != *(*other) }\n-}\n-impl<T:Ord> Ord for Box<T> {\n-    #[inline]\n-    fn lt(&self, other: &Box<T>) -> bool { *(*self) < *(*other) }\n-    #[inline]\n-    fn le(&self, other: &Box<T>) -> bool { *(*self) <= *(*other) }\n-    #[inline]\n-    fn ge(&self, other: &Box<T>) -> bool { *(*self) >= *(*other) }\n-    #[inline]\n-    fn gt(&self, other: &Box<T>) -> bool { *(*self) > *(*other) }\n-}\n-impl<T: TotalOrd> TotalOrd for Box<T> {\n-    #[inline]\n-    fn cmp(&self, other: &Box<T>) -> Ordering { (**self).cmp(*other) }\n-}\n-impl<T: TotalEq> TotalEq for Box<T> {}\n-\n-/// Extension methods for an owning `Any` trait object\n-pub trait AnyOwnExt {\n-    /// Returns the boxed value if it is of type `T`, or\n-    /// `Err(Self)` if it isn't.\n-    fn move<T: 'static>(self) -> Result<Box<T>, Self>;\n-}\n-\n-impl AnyOwnExt for Box<Any> {\n-    #[inline]\n-    fn move<T: 'static>(self) -> Result<Box<T>, Box<Any>> {\n-        if self.is::<T>() {\n-            unsafe {\n-                // Get the raw representation of the trait object\n-                let to: TraitObject =\n-                    *mem::transmute::<&Box<Any>, &TraitObject>(&self);\n-\n-                // Prevent destructor on self being run\n-                intrinsics::forget(self);\n-\n-                // Extract the data pointer\n-                Ok(mem::transmute(to.data))\n-            }\n-        } else {\n-            Err(self)\n-        }\n-    }\n-}"}, {"sha": "87c4ef1046f1a490405395c7431bf4789b244ec6", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8211539114df8b6e3a9b8b251fa57cb5a77d2f14/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8211539114df8b6e3a9b8b251fa57cb5a77d2f14/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=8211539114df8b6e3a9b8b251fa57cb5a77d2f14", "patch": "@@ -133,16 +133,13 @@ extern crate core;\n #[cfg(test)] pub use ops = realstd::ops;\n #[cfg(test)] pub use cmp = realstd::cmp;\n #[cfg(test)] pub use ty = realstd::ty;\n-#[cfg(not(stage0), test)] pub use owned = realstd::owned;\n+#[cfg(test)] pub use owned = realstd::owned;\n \n #[cfg(not(test))] pub use cmp = core::cmp;\n #[cfg(not(test))] pub use kinds = core::kinds;\n #[cfg(not(test))] pub use ops = core::ops;\n #[cfg(not(test))] pub use ty = core::ty;\n \n-#[cfg(stage0, test)] pub use owned = realstd::owned;\n-#[cfg(stage0, not(test))] pub use owned = core::owned;\n-\n pub use core::any;\n pub use core::bool;\n pub use core::cell;\n@@ -209,7 +206,7 @@ pub mod ascii;\n \n pub mod rc;\n pub mod gc;\n-#[cfg(not(stage0), not(test))]\n+#[cfg(not(test))]\n pub mod owned;\n \n /* Common traits */"}, {"sha": "4c62d519d78122c7d0ce83c1f9d79444e84a7387", "filename": "src/snapshots.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8211539114df8b6e3a9b8b251fa57cb5a77d2f14/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8211539114df8b6e3a9b8b251fa57cb5a77d2f14/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=8211539114df8b6e3a9b8b251fa57cb5a77d2f14", "patch": "@@ -1,3 +1,11 @@\n+S 2014-05-15 6a2b3d1\n+  freebsd-x86_64 afc98b59cb819025fecdb9d145ca4463f857a477\n+  linux-i386 d6f7a404412ea34db3d19814ca21fe6fa662b02f\n+  linux-x86_64 3dfb54406a7ea75565a7ea3071daad885cb91775\n+  macos-i386 bebb937551d601ad908c9e4eaa196cc7a977c503\n+  macos-x86_64 08346ed401ad2891c7d2ba0aac0960f6e77bb78b\n+  winnt-i386 ad8e5b8292a00f60f1f7dc2e35bd18abeb5b858d\n+\n S 2014-05-11 72fc4a5\n   freebsd-x86_64 82db6355b0b7c8023c8845a74e2f224da2831b50\n   linux-i386 91901299d5f86f5b67377d940073908a1f0e4e82"}]}