{"sha": "37c8f254ede23a35167018fc9b672f5f7b098f52", "node_id": "C_kwDOAAsO6NoAKDM3YzhmMjU0ZWRlMjNhMzUxNjcwMThmYzliNjcyZjVmN2IwOThmNTI", "commit": {"author": {"name": "jam1garner", "email": "8260240+jam1garner@users.noreply.github.com", "date": "2021-11-26T18:59:57Z"}, "committer": {"name": "jam1garner", "email": "8260240+jam1garner@users.noreply.github.com", "date": "2021-11-26T18:59:57Z"}, "message": "Use non-generic inner function for pointer formatting", "tree": {"sha": "d01b9028a168a2fd061922e920993bbb917b604b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d01b9028a168a2fd061922e920993bbb917b604b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37c8f254ede23a35167018fc9b672f5f7b098f52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37c8f254ede23a35167018fc9b672f5f7b098f52", "html_url": "https://github.com/rust-lang/rust/commit/37c8f254ede23a35167018fc9b672f5f7b098f52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37c8f254ede23a35167018fc9b672f5f7b098f52/comments", "author": {"login": "jam1garner", "id": 8260240, "node_id": "MDQ6VXNlcjgyNjAyNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8260240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jam1garner", "html_url": "https://github.com/jam1garner", "followers_url": "https://api.github.com/users/jam1garner/followers", "following_url": "https://api.github.com/users/jam1garner/following{/other_user}", "gists_url": "https://api.github.com/users/jam1garner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jam1garner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jam1garner/subscriptions", "organizations_url": "https://api.github.com/users/jam1garner/orgs", "repos_url": "https://api.github.com/users/jam1garner/repos", "events_url": "https://api.github.com/users/jam1garner/events{/privacy}", "received_events_url": "https://api.github.com/users/jam1garner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jam1garner", "id": 8260240, "node_id": "MDQ6VXNlcjgyNjAyNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8260240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jam1garner", "html_url": "https://github.com/jam1garner", "followers_url": "https://api.github.com/users/jam1garner/followers", "following_url": "https://api.github.com/users/jam1garner/following{/other_user}", "gists_url": "https://api.github.com/users/jam1garner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jam1garner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jam1garner/subscriptions", "organizations_url": "https://api.github.com/users/jam1garner/orgs", "repos_url": "https://api.github.com/users/jam1garner/repos", "events_url": "https://api.github.com/users/jam1garner/events{/privacy}", "received_events_url": "https://api.github.com/users/jam1garner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "454cc5fb86be180b3ec1138b6f2b480fbf3f1388", "url": "https://api.github.com/repos/rust-lang/rust/commits/454cc5fb86be180b3ec1138b6f2b480fbf3f1388", "html_url": "https://github.com/rust-lang/rust/commit/454cc5fb86be180b3ec1138b6f2b480fbf3f1388"}], "stats": {"total": 42, "additions": 24, "deletions": 18}, "files": [{"sha": "6fc3cd0b7c4adcf2abe72f363c745c08a02b1c92", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/37c8f254ede23a35167018fc9b672f5f7b098f52/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c8f254ede23a35167018fc9b672f5f7b098f52/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=37c8f254ede23a35167018fc9b672f5f7b098f52", "patch": "@@ -2186,28 +2186,34 @@ impl Display for char {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Pointer for *const T {\n     fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n-        let old_width = f.width;\n-        let old_flags = f.flags;\n-\n-        // The alternate flag is already treated by LowerHex as being special-\n-        // it denotes whether to prefix with 0x. We use it to work out whether\n-        // or not to zero extend, and then unconditionally set it to get the\n-        // prefix.\n-        if f.alternate() {\n-            f.flags |= 1 << (FlagV1::SignAwareZeroPad as u32);\n-\n-            if f.width.is_none() {\n-                f.width = Some((usize::BITS / 4) as usize + 2);\n+        /// Since the formatting will be identical for all pointer types, use a non-monomorphized\n+        /// implementation for the actual formatting to reduce the amount of codegen work needed\n+        fn inner(ptr: *const (), f: &mut Formatter<'_>) -> Result {\n+            let old_width = f.width;\n+            let old_flags = f.flags;\n+\n+            // The alternate flag is already treated by LowerHex as being special-\n+            // it denotes whether to prefix with 0x. We use it to work out whether\n+            // or not to zero extend, and then unconditionally set it to get the\n+            // prefix.\n+            if f.alternate() {\n+                f.flags |= 1 << (FlagV1::SignAwareZeroPad as u32);\n+\n+                if f.width.is_none() {\n+                    f.width = Some((usize::BITS / 4) as usize + 2);\n+                }\n             }\n-        }\n-        f.flags |= 1 << (FlagV1::Alternate as u32);\n+            f.flags |= 1 << (FlagV1::Alternate as u32);\n+\n+            let ret = LowerHex::fmt(&(ptr as usize), f);\n \n-        let ret = LowerHex::fmt(&(*self as *const () as usize), f);\n+            f.width = old_width;\n+            f.flags = old_flags;\n \n-        f.width = old_width;\n-        f.flags = old_flags;\n+            ret\n+        }\n \n-        ret\n+        inner(*self as *const (), f)\n     }\n }\n "}]}