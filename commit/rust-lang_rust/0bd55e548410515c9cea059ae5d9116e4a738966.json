{"sha": "0bd55e548410515c9cea059ae5d9116e4a738966", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZDU1ZTU0ODQxMDUxNWM5Y2VhMDU5YWU1ZDkxMTZlNGE3Mzg5NjY=", "commit": {"author": {"name": "Paul Dicker", "email": "pitdicker@gmail.com", "date": "2016-02-03T17:50:57Z"}, "committer": {"name": "Paul Dicker", "email": "pitdicker@gmail.com", "date": "2016-02-03T17:50:57Z"}, "message": "Reformat comments", "tree": {"sha": "53ce15566ed43b9ad87962ea8fe6fe6d4ef46824", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53ce15566ed43b9ad87962ea8fe6fe6d4ef46824"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bd55e548410515c9cea059ae5d9116e4a738966", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bd55e548410515c9cea059ae5d9116e4a738966", "html_url": "https://github.com/rust-lang/rust/commit/0bd55e548410515c9cea059ae5d9116e4a738966", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bd55e548410515c9cea059ae5d9116e4a738966/comments", "author": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f6f4581946f9ae8e2c23cd7e09eb4f03d6c3cb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f6f4581946f9ae8e2c23cd7e09eb4f03d6c3cb1", "html_url": "https://github.com/rust-lang/rust/commit/7f6f4581946f9ae8e2c23cd7e09eb4f03d6c3cb1"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "d1f0fe517e24629e654d0d45e86e52538a42ade4", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0bd55e548410515c9cea059ae5d9116e4a738966/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bd55e548410515c9cea059ae5d9116e4a738966/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=0bd55e548410515c9cea059ae5d9116e4a738966", "patch": "@@ -1531,12 +1531,14 @@ mod tests {\n         TempDir(ret)\n     }\n \n-    // Several test fail on windows if the user does not have permission to create symlinks (the\n-    // `SeCreateSymbolicLinkPrivilege`). Instead of disabling these test on Windows, use this\n-    // function to test whether we have permission, and return otherwise. This way, we still don't\n-    // run these tests most of the time, but at least we do if the user has the right permissions.\n-    #[cfg(windows)]\n+    // Several test fail on windows if the user does not have permission to\n+    // create symlinks (the `SeCreateSymbolicLinkPrivilege`). Instead of\n+    // disabling these test on Windows, use this function to test whether we\n+    // have permission, and return otherwise. This way, we still don't run these\n+    // tests most of the time, but at least we do if the user has the right\n+    // permissions.\n     pub fn got_symlink_permission(tmpdir: &TempDir) -> bool {\n+        if cfg!(unix) { return true }\n         let link = tmpdir.join(\"some_hopefully_unique_link_name\");\n \n         match symlink_file(r\"nonexisting_target\", link) {\n@@ -1549,9 +1551,6 @@ mod tests {\n                 }\n         }\n     }\n-    #[cfg(not(windows))]\n-    #[allow(unused_variables)]\n-    pub fn got_symlink_permission(tmpdir: &TempDir) -> bool { true }\n \n     #[test]\n     fn file_test_io_smoke_test() {\n@@ -2052,10 +2051,11 @@ mod tests {\n         let tmpdir = tmpdir();\n         if !got_symlink_permission(&tmpdir) { return };\n \n-        // Use a relative path for testing. Symlinks get normalized by Windows, so we may not get\n-        // the same path back for absolute paths\n+        // Use a relative path for testing. Symlinks get normalized by Windows,\n+        // so we may not get the same path back for absolute paths\n         check!(symlink_file(&\"foo\", &tmpdir.join(\"bar\")));\n-        assert_eq!(check!(fs::read_link(&tmpdir.join(\"bar\"))).to_str().unwrap(), \"foo\");\n+        assert_eq!(check!(fs::read_link(&tmpdir.join(\"bar\"))).to_str().unwrap(),\n+                   \"foo\");\n     }\n \n     #[test]\n@@ -2423,7 +2423,8 @@ mod tests {\n \n         check!(symlink_junction(&target, &junction));\n         check!(fs::create_dir_all(&b));\n-        // the junction itself is not a directory, but `is_dir()` on a Path follows links\n+        // the junction itself is not a directory, but `is_dir()` on a Path\n+        // follows links\n         assert!(junction.is_dir());\n         assert!(b.exists());\n "}]}