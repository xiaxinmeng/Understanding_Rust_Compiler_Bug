{"sha": "4d75430e912491c19fb1a7b1a95ee812f6a8a124", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNzU0MzBlOTEyNDkxYzE5ZmIxYTdiMWE5NWVlODEyZjZhOGExMjQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-31T15:17:08Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-01-11T22:33:04Z"}, "message": "Qualify some paths in 'add missing impl members'", "tree": {"sha": "4ae28c225c8c4032f20fda876796b1e436984a2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ae28c225c8c4032f20fda876796b1e436984a2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d75430e912491c19fb1a7b1a95ee812f6a8a124", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d75430e912491c19fb1a7b1a95ee812f6a8a124", "html_url": "https://github.com/rust-lang/rust/commit/4d75430e912491c19fb1a7b1a95ee812f6a8a124", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d75430e912491c19fb1a7b1a95ee812f6a8a124/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "460fa71c5528d95d34465a4db6853dc8c992b80b", "url": "https://api.github.com/repos/rust-lang/rust/commits/460fa71c5528d95d34465a4db6853dc8c992b80b", "html_url": "https://github.com/rust-lang/rust/commit/460fa71c5528d95d34465a4db6853dc8c992b80b"}], "stats": {"total": 131, "additions": 128, "deletions": 3}, "files": [{"sha": "2b072686991460a2600284064614d8e15ab93e77", "filename": "crates/ra_assists/src/assists/add_missing_impl_members.rs", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4d75430e912491c19fb1a7b1a95ee812f6a8a124/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d75430e912491c19fb1a7b1a95ee812f6a8a124/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs?ref=4d75430e912491c19fb1a7b1a95ee812f6a8a124", "patch": "@@ -139,6 +139,12 @@ fn add_missing_impl_members_inner(\n \n     ctx.add_assist(AssistId(assist_id), label, |edit| {\n         let n_existing_items = impl_item_list.impl_items().count();\n+        let module = hir::SourceAnalyzer::new(\n+            db,\n+            hir::InFile::new(file_id.into(), impl_node.syntax()),\n+            None,\n+        )\n+        .module();\n         let substs = get_syntactic_substs(impl_node).unwrap_or_default();\n         let generic_def: hir::GenericDef = trait_.into();\n         let substs_by_param: HashMap<_, _> = generic_def\n@@ -150,6 +156,10 @@ fn add_missing_impl_members_inner(\n             .collect();\n         let items = missing_items\n             .into_iter()\n+            .map(|it| match module {\n+                Some(module) => qualify_paths(db, hir::InFile::new(file_id.into(), it), module),\n+                None => it,\n+            })\n             .map(|it| {\n                 substitute_type_params(db, hir::InFile::new(file_id.into(), it), &substs_by_param)\n             })\n@@ -227,6 +237,41 @@ fn substitute_type_params<N: AstNode>(\n     }\n }\n \n+use hir::PathResolution;\n+\n+// TODO handle partial paths, with generic args\n+// TODO handle value ns?\n+\n+fn qualify_paths<N: AstNode>(db: &impl HirDatabase, node: hir::InFile<N>, from: hir::Module) -> N {\n+    let path_replacements = node\n+        .value\n+        .syntax()\n+        .descendants()\n+        .filter_map(ast::Path::cast)\n+        .filter_map(|p| {\n+            let analyzer = hir::SourceAnalyzer::new(db, node.with_value(p.syntax()), None);\n+            let resolution = analyzer.resolve_path(db, &p)?;\n+            match resolution {\n+                PathResolution::Def(def) => {\n+                    let found_path = from.find_path(db, def)?;\n+                    Some((p, found_path.to_ast()))\n+                }\n+                PathResolution::Local(_)\n+                | PathResolution::TypeParam(_)\n+                | PathResolution::SelfType(_) => None,\n+                PathResolution::Macro(_) => None,\n+                PathResolution::AssocItem(_) => None,\n+            }\n+        })\n+        .collect::<Vec<_>>();\n+\n+    if path_replacements.is_empty() {\n+        node.value\n+    } else {\n+        edit::replace_descendants(&node.value, path_replacements.into_iter())\n+    }\n+}\n+\n /// Given an `ast::ImplBlock`, resolves the target trait (the one being\n /// implemented) to a `ast::TraitDef`.\n fn resolve_target_trait_def(\n@@ -406,14 +451,14 @@ impl Foo for S {\n             add_missing_impl_members,\n             \"\n mod foo {\n-    struct Bar;\n+    pub struct Bar;\n     trait Foo { fn foo(&self, bar: Bar); }\n }\n struct S;\n impl foo::Foo for S { <|> }\",\n             \"\n mod foo {\n-    struct Bar;\n+    pub struct Bar;\n     trait Foo { fn foo(&self, bar: Bar); }\n }\n struct S;"}, {"sha": "4da3db0d6b88c34a20eca0cb00025048011f0750", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4d75430e912491c19fb1a7b1a95ee812f6a8a124/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d75430e912491c19fb1a7b1a95ee812f6a8a124/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=4d75430e912491c19fb1a7b1a95ee812f6a8a124", "patch": "@@ -227,6 +227,19 @@ impl Module {\n     pub(crate) fn with_module_id(self, module_id: LocalModuleId) -> Module {\n         Module::new(self.krate(), module_id)\n     }\n+\n+    pub fn find_path(\n+        self,\n+        db: &impl DefDatabase,\n+        item: ModuleDef,\n+    ) -> Option<hir_def::path::ModPath> {\n+        // FIXME expose namespace choice\n+        hir_def::find_path::find_path(\n+            db,\n+            hir_def::item_scope::ItemInNs::Types(item.into()),\n+            self.into(),\n+        )\n+    }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}, {"sha": "c16c17072b7d5bc3664b5fe435dfdd2ae02b7918", "filename": "crates/ra_hir/src/from_id.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4d75430e912491c19fb1a7b1a95ee812f6a8a124/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d75430e912491c19fb1a7b1a95ee812f6a8a124/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs?ref=4d75430e912491c19fb1a7b1a95ee812f6a8a124", "patch": "@@ -91,6 +91,22 @@ impl From<ModuleDefId> for ModuleDef {\n     }\n }\n \n+impl From<ModuleDef> for ModuleDefId {\n+    fn from(id: ModuleDef) -> Self {\n+        match id {\n+            ModuleDef::Module(it) => ModuleDefId::ModuleId(it.into()),\n+            ModuleDef::Function(it) => ModuleDefId::FunctionId(it.into()),\n+            ModuleDef::Adt(it) => ModuleDefId::AdtId(it.into()),\n+            ModuleDef::EnumVariant(it) => ModuleDefId::EnumVariantId(it.into()),\n+            ModuleDef::Const(it) => ModuleDefId::ConstId(it.into()),\n+            ModuleDef::Static(it) => ModuleDefId::StaticId(it.into()),\n+            ModuleDef::Trait(it) => ModuleDefId::TraitId(it.into()),\n+            ModuleDef::TypeAlias(it) => ModuleDefId::TypeAliasId(it.into()),\n+            ModuleDef::BuiltinType(it) => ModuleDefId::BuiltinType(it),\n+        }\n+    }\n+}\n+\n impl From<DefWithBody> for DefWithBodyId {\n     fn from(def: DefWithBody) -> Self {\n         match def {"}, {"sha": "71339565f065b63862a3474ade7e2c57c1027a57", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d75430e912491c19fb1a7b1a95ee812f6a8a124/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d75430e912491c19fb1a7b1a95ee812f6a8a124/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=4d75430e912491c19fb1a7b1a95ee812f6a8a124", "patch": "@@ -205,6 +205,10 @@ impl SourceAnalyzer {\n         }\n     }\n \n+    pub fn module(&self) -> Option<crate::code_model::Module> {\n+        Some(crate::code_model::Module { id: self.resolver.module_id()? })\n+    }\n+\n     fn expr_id(&self, expr: &ast::Expr) -> Option<ExprId> {\n         let src = InFile { file_id: self.file_id, value: expr };\n         self.body_source_map.as_ref()?.node_expr(src)"}, {"sha": "7dd1939b988548bf307ee5e7201ca46a9560cc09", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4d75430e912491c19fb1a7b1a95ee812f6a8a124/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d75430e912491c19fb1a7b1a95ee812f6a8a124/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=4d75430e912491c19fb1a7b1a95ee812f6a8a124", "patch": "@@ -1,7 +1,7 @@\n //! A desugared representation of paths like `crate::foo` or `<Type as Trait>::bar`.\n mod lower;\n \n-use std::{iter, sync::Arc};\n+use std::{fmt::Display, iter, sync::Arc};\n \n use hir_expand::{\n     hygiene::Hygiene,\n@@ -78,6 +78,12 @@ impl ModPath {\n         }\n         self.segments.first()\n     }\n+\n+    pub fn to_ast(&self) -> ast::Path {\n+        use ast::AstNode;\n+        let parse = ast::SourceFile::parse(&self.to_string());\n+        parse.tree().syntax().descendants().find_map(ast::Path::cast).unwrap()\n+    }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -248,6 +254,42 @@ impl From<Name> for ModPath {\n     }\n }\n \n+impl Display for ModPath {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        let mut first_segment = true;\n+        let mut add_segment = |s| {\n+            if !first_segment {\n+                f.write_str(\"::\")?;\n+            }\n+            first_segment = false;\n+            f.write_str(s)?;\n+            Ok(())\n+        };\n+        match self.kind {\n+            PathKind::Plain => {}\n+            PathKind::Super(n) => {\n+                if n == 0 {\n+                    add_segment(\"self\")?;\n+                }\n+                for _ in 0..n {\n+                    add_segment(\"super\")?;\n+                }\n+            }\n+            PathKind::Crate => add_segment(\"crate\")?,\n+            PathKind::Abs => add_segment(\"\")?,\n+            PathKind::DollarCrate(_) => add_segment(\"$crate\")?,\n+        }\n+        for segment in &self.segments {\n+            if !first_segment {\n+                f.write_str(\"::\")?;\n+            }\n+            first_segment = false;\n+            write!(f, \"{}\", segment)?;\n+        }\n+        Ok(())\n+    }\n+}\n+\n pub use hir_expand::name as __name;\n \n #[macro_export]"}, {"sha": "40d0cb5880894ab786256fedee2ef707ee8020d0", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d75430e912491c19fb1a7b1a95ee812f6a8a124/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d75430e912491c19fb1a7b1a95ee812f6a8a124/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=4d75430e912491c19fb1a7b1a95ee812f6a8a124", "patch": "@@ -411,6 +411,11 @@ impl Resolver {\n         })\n     }\n \n+    pub fn module_id(&self) -> Option<ModuleId> {\n+        let (def_map, local_id) = self.module()?;\n+        Some(ModuleId { krate: def_map.krate, local_id })\n+    }\n+\n     pub fn krate(&self) -> Option<CrateId> {\n         self.module().map(|t| t.0.krate)\n     }"}]}