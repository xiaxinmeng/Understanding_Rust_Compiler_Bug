{"sha": "72e2cfd93438ef0109cbaca9f961efa5ac6d4f84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZTJjZmQ5MzQzOGVmMDEwOWNiYWNhOWY5NjFlZmE1YWM2ZDRmODQ=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-19T22:26:08Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-20T13:55:31Z"}, "message": "Remove serialization of diagnostics to files\n\nThis is no longer used by the index generator and was always an unstable\ncompiler detail, so strip it out.\n\nThis also leaves in RUSTC_ERROR_METADATA_DST since the stage0 compiler\nstill needs it to be set.", "tree": {"sha": "6d21e11a7aab94f1575300119b1331fb6e4d2552", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d21e11a7aab94f1575300119b1331fb6e4d2552"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72e2cfd93438ef0109cbaca9f961efa5ac6d4f84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72e2cfd93438ef0109cbaca9f961efa5ac6d4f84", "html_url": "https://github.com/rust-lang/rust/commit/72e2cfd93438ef0109cbaca9f961efa5ac6d4f84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72e2cfd93438ef0109cbaca9f961efa5ac6d4f84/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99ce39b30a296354409c5161c4a5bc833f5f72d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/99ce39b30a296354409c5161c4a5bc833f5f72d0", "html_url": "https://github.com/rust-lang/rust/commit/99ce39b30a296354409c5161c4a5bc833f5f72d0"}], "stats": {"total": 145, "additions": 13, "deletions": 132}, "files": [{"sha": "4f96c12fc1dddb3b2bf856bc503412a2fca26c6e", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72e2cfd93438ef0109cbaca9f961efa5ac6d4f84/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e2cfd93438ef0109cbaca9f961efa5ac6d4f84/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=72e2cfd93438ef0109cbaca9f961efa5ac6d4f84", "patch": "@@ -825,8 +825,7 @@ impl Step for ErrorIndex {\n         index.arg(crate::channel::CFG_RELEASE_NUM);\n \n         // FIXME: shouldn't have to pass this env var\n-        index.env(\"CFG_BUILD\", &builder.config.build)\n-             .env(\"RUSTC_ERROR_METADATA_DST\", builder.extended_error_dir());\n+        index.env(\"CFG_BUILD\", &builder.config.build);\n \n         builder.run(&mut index);\n     }"}, {"sha": "87bd5cbacfffaccaf59c342fae379a2b91a58b55", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72e2cfd93438ef0109cbaca9f961efa5ac6d4f84/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e2cfd93438ef0109cbaca9f961efa5ac6d4f84/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=72e2cfd93438ef0109cbaca9f961efa5ac6d4f84", "patch": "@@ -1535,8 +1535,7 @@ impl Step for ErrorIndex {\n         );\n         tool.arg(\"markdown\")\n             .arg(&output)\n-            .env(\"CFG_BUILD\", &builder.config.build)\n-            .env(\"RUSTC_ERROR_METADATA_DST\", builder.extended_error_dir());\n+            .env(\"CFG_BUILD\", &builder.config.build);\n \n         builder.info(&format!(\"Testing error-index stage{}\", compiler.stage));\n         let _time = util::timeit(&builder);"}, {"sha": "53f37bb10bdc0ecfb61bb228826c27c66fea896d", "filename": "src/libsyntax/diagnostics/metadata.rs", "status": "removed", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/99ce39b30a296354409c5161c4a5bc833f5f72d0/src%2Flibsyntax%2Fdiagnostics%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99ce39b30a296354409c5161c4a5bc833f5f72d0/src%2Flibsyntax%2Fdiagnostics%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fmetadata.rs?ref=99ce39b30a296354409c5161c4a5bc833f5f72d0", "patch": "@@ -1,93 +0,0 @@\n-//! This module contains utilities for outputting metadata for diagnostic errors.\n-//!\n-//! Each set of errors is mapped to a metadata file by a name, which is\n-//! currently always a crate name.\n-\n-use std::collections::BTreeMap;\n-use std::env;\n-use std::fs::{remove_file, create_dir_all, File};\n-use std::io::Write;\n-use std::path::PathBuf;\n-use std::error::Error;\n-use rustc_serialize::json::as_json;\n-\n-use syntax_pos::{Span, FileName};\n-\n-use crate::ext::base::ExtCtxt;\n-use crate::diagnostics::plugin::{ErrorMap, ErrorInfo};\n-\n-/// JSON encodable/decodable version of `ErrorInfo`.\n-#[derive(PartialEq, RustcDecodable, RustcEncodable)]\n-pub struct ErrorMetadata {\n-    pub description: Option<String>,\n-    pub use_site: Option<ErrorLocation>\n-}\n-\n-/// Mapping from error codes to metadata that can be (de)serialized.\n-pub type ErrorMetadataMap = BTreeMap<String, ErrorMetadata>;\n-\n-/// JSON encodable error location type with filename and line number.\n-#[derive(PartialEq, RustcDecodable, RustcEncodable)]\n-pub struct ErrorLocation {\n-    pub filename: FileName,\n-    pub line: usize\n-}\n-\n-impl ErrorLocation {\n-    /// Creates an error location from a span.\n-    pub fn from_span(ecx: &ExtCtxt<'_>, sp: Span) -> ErrorLocation {\n-        let loc = ecx.source_map().lookup_char_pos(sp.lo());\n-        ErrorLocation {\n-            filename: loc.file.name.clone(),\n-            line: loc.line\n-        }\n-    }\n-}\n-\n-/// Gets the directory where metadata for a given `prefix` should be stored.\n-///\n-/// See `output_metadata`.\n-pub fn get_metadata_dir(prefix: &str) -> PathBuf {\n-    env::var_os(\"RUSTC_ERROR_METADATA_DST\")\n-        .map(PathBuf::from)\n-        .expect(\"env var `RUSTC_ERROR_METADATA_DST` isn't set\")\n-        .join(prefix)\n-}\n-\n-/// Map `name` to a path in the given directory: <directory>/<name>.json\n-fn get_metadata_path(directory: PathBuf, name: &str) -> PathBuf {\n-    directory.join(format!(\"{}.json\", name))\n-}\n-\n-/// Write metadata for the errors in `err_map` to disk, to a file corresponding to `prefix/name`.\n-///\n-/// For our current purposes the prefix is the target architecture and the name is a crate name.\n-/// If an error occurs steps will be taken to ensure that no file is created.\n-pub fn output_metadata(ecx: &ExtCtxt<'_>, prefix: &str, name: &str, err_map: &ErrorMap)\n-    -> Result<(), Box<dyn Error>>\n-{\n-    // Create the directory to place the file in.\n-    let metadata_dir = get_metadata_dir(prefix);\n-    create_dir_all(&metadata_dir)?;\n-\n-    // Open the metadata file.\n-    let metadata_path = get_metadata_path(metadata_dir, name);\n-    let mut metadata_file = File::create(&metadata_path)?;\n-\n-    // Construct a serializable map.\n-    let json_map = err_map.iter().map(|(k, &ErrorInfo { description, use_site })| {\n-        let key = k.as_str().to_string();\n-        let value = ErrorMetadata {\n-            description: description.map(|n| n.as_str().to_string()),\n-            use_site: use_site.map(|sp| ErrorLocation::from_span(ecx, sp))\n-        };\n-        (key, value)\n-    }).collect::<ErrorMetadataMap>();\n-\n-    // Write the data to the file, deleting it if the write fails.\n-    let result = write!(&mut metadata_file, \"{}\", as_json(&json_map));\n-    if result.is_err() {\n-        remove_file(&metadata_path)?;\n-    }\n-    Ok(result?)\n-}"}, {"sha": "e9a55af52e8780001625dbd79a97fd9632edbe62", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 4, "deletions": 30, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/72e2cfd93438ef0109cbaca9f961efa5ac6d4f84/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e2cfd93438ef0109cbaca9f961efa5ac6d4f84/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=72e2cfd93438ef0109cbaca9f961efa5ac6d4f84", "patch": "@@ -1,5 +1,4 @@\n use std::collections::BTreeMap;\n-use std::env;\n \n use crate::ast::{self, Ident, Name};\n use crate::source_map;\n@@ -12,8 +11,6 @@ use crate::tokenstream::{TokenTree};\n use smallvec::smallvec;\n use syntax_pos::Span;\n \n-use crate::diagnostics::metadata::output_metadata;\n-\n pub use errors::*;\n \n // Maximum width of any line in an extended error description (inclusive).\n@@ -127,36 +124,13 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n                                           token_tree: &[TokenTree])\n                                           -> Box<dyn MacResult+'cx> {\n     assert_eq!(token_tree.len(), 3);\n-    let (crate_name, ident) = match (&token_tree[0], &token_tree[2]) {\n-        (\n-            // Crate name.\n-            &TokenTree::Token(Token { kind: token::Ident(crate_name, _), .. }),\n-            // DIAGNOSTICS ident.\n-            &TokenTree::Token(Token { kind: token::Ident(name, _), span })\n-        ) => (crate_name, Ident::new(name, span)),\n+    let ident = match &token_tree[2] {\n+        // DIAGNOSTICS ident.\n+        &TokenTree::Token(Token { kind: token::Ident(name, _), span })\n+        => Ident::new(name, span),\n         _ => unreachable!()\n     };\n \n-    // Output error metadata to `tmp/extended-errors/<target arch>/<crate name>.json`\n-    if let Ok(target_triple) = env::var(\"CFG_COMPILER_HOST_TRIPLE\") {\n-        ecx.parse_sess.registered_diagnostics.with_lock(|diagnostics| {\n-            if let Err(e) = output_metadata(ecx,\n-                                            &target_triple,\n-                                            &crate_name.as_str(),\n-                                            diagnostics) {\n-                ecx.span_bug(span, &format!(\n-                    \"error writing metadata for triple `{}` and crate `{}`, error: {}, \\\n-                     cause: {:?}\",\n-                    target_triple, crate_name, e.description(), e.source()\n-                ));\n-            }\n-        });\n-    } else {\n-        ecx.span_err(span, &format!(\n-            \"failed to write metadata for crate `{}` because $CFG_COMPILER_HOST_TRIPLE is not set\",\n-            crate_name));\n-    }\n-\n     // Construct the output expression.\n     let (count, expr) =\n         ecx.parse_sess.registered_diagnostics.with_lock(|diagnostics| {"}, {"sha": "1741932c1b80e30f86abfe47d345b37678f24068", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72e2cfd93438ef0109cbaca9f961efa5ac6d4f84/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e2cfd93438ef0109cbaca9f961efa5ac6d4f84/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=72e2cfd93438ef0109cbaca9f961efa5ac6d4f84", "patch": "@@ -124,7 +124,6 @@ pub mod diagnostics {\n     #[macro_use]\n     pub mod macros;\n     pub mod plugin;\n-    pub mod metadata;\n }\n \n // N.B., this module needs to be declared first so diagnostics are"}, {"sha": "c4826a0c31d6cb457500c33b9f4f7a9b28df36d4", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/72e2cfd93438ef0109cbaca9f961efa5ac6d4f84/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e2cfd93438ef0109cbaca9f961efa5ac6d4f84/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=72e2cfd93438ef0109cbaca9f961efa5ac6d4f84", "patch": "@@ -13,10 +13,16 @@ use std::path::PathBuf;\n use std::cell::RefCell;\n \n use syntax::edition::DEFAULT_EDITION;\n-use syntax::diagnostics::metadata::{ErrorMetadataMap, ErrorMetadata};\n \n use rustdoc::html::markdown::{Markdown, IdMap, ErrorCodes, Playground};\n \n+pub struct ErrorMetadata {\n+    pub description: Option<String>,\n+}\n+\n+/// Mapping from error codes to metadata that can be (de)serialized.\n+pub type ErrorMetadataMap = BTreeMap<String, ErrorMetadata>;\n+\n enum OutputFormat {\n     HTML(HTMLFormatter),\n     Markdown(MarkdownFormatter),\n@@ -214,9 +220,6 @@ fn main_with_result(format: OutputFormat, dst: &Path) -> Result<(), Box<dyn Erro\n     for (code, desc) in long_codes {\n         err_map.insert(code.to_string(), ErrorMetadata {\n             description: desc.map(String::from),\n-            // FIXME: this indicates that the error code is not used, which may not be true.\n-            // We currently do not use this information.\n-            use_site: None,\n         });\n     }\n     match format {"}]}