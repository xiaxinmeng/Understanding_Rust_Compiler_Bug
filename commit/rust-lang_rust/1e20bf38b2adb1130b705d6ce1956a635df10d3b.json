{"sha": "1e20bf38b2adb1130b705d6ce1956a635df10d3b", "node_id": "C_kwDOAAsO6NoAKDFlMjBiZjM4YjJhZGIxMTMwYjcwNWQ2Y2UxOTU2YTYzNWRmMTBkM2I", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-09T11:40:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-09T11:40:48Z"}, "message": "Auto merge of #13684 - unvalley:extract-expressions-from-format-string, r=Veykril\n\nfeat: extract_expressions_from_format_string\n\ncloses #13640\n- rename to `extract_expressions_from_format_string`\n- leave identifier from format string\n\t- but this is from rustc version 1.65.0\n\t- Should I add flag or something?\n\nNote: the assist behaves below cases for now. I'll create an issue for these.\n```rs\nlet var = 1 + 1;\n// ok\nformat!(\"{var} {1+1}\");   // \u2192 format!(\"{var} {}\", 1+1);\nformat!(\"{var:?} {1+1}\"); // \u2192 format!(\"{var:?} {}\", 1 + 1);\nformat!(\"{var} {var} {1+1}\"); // \u2192 format!(\"{var} {var} {}\", 1 + 1);\n\n// breaks (need to handle minimum width by postfix`$`)\nformat!(\"{var:width$} {1+1}\"); // \u2192 format!(\"{var:width\\$} {}\", 1+1);\nformat!(\"{var:.prec$} {1+1}\"); // \u2192 format!(\"{var:.prec\\$} {}\", 1+1);\nformat!(\"Hello {:1$}! {1+1}\", \"x\" 5); // \u2192 format(\"Hello {:1\\$}! {}\", \"x\", 1+1);\nformat!(\"Hello {:width$}! {1+1}\", \"x\", width = 5); // \u2192 println!(\"Hello {:width\\$}! {}\", \"x\", 1+1);\n```\n\nhttps://user-images.githubusercontent.com/38400669/204344911-f1f8fbd2-706d-414e-b1ab-d309376efb9b.mov", "tree": {"sha": "764ff8d0ab48762f4f1a4eafb52b575e394dbdbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/764ff8d0ab48762f4f1a4eafb52b575e394dbdbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e20bf38b2adb1130b705d6ce1956a635df10d3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e20bf38b2adb1130b705d6ce1956a635df10d3b", "html_url": "https://github.com/rust-lang/rust/commit/1e20bf38b2adb1130b705d6ce1956a635df10d3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e20bf38b2adb1130b705d6ce1956a635df10d3b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "814ff01620730f3406797d7aaf210e0bec8f2754", "url": "https://api.github.com/repos/rust-lang/rust/commits/814ff01620730f3406797d7aaf210e0bec8f2754", "html_url": "https://github.com/rust-lang/rust/commit/814ff01620730f3406797d7aaf210e0bec8f2754"}, {"sha": "9eabc2cde8e76d718de81b6cd4d0091c7a8d9690", "url": "https://api.github.com/repos/rust-lang/rust/commits/9eabc2cde8e76d718de81b6cd4d0091c7a8d9690", "html_url": "https://github.com/rust-lang/rust/commit/9eabc2cde8e76d718de81b6cd4d0091c7a8d9690"}], "stats": {"total": 171, "additions": 106, "deletions": 65}, "files": [{"sha": "4f3b6e0c287c9e9ba760b8b2961fc4ad30488d8e", "filename": "crates/ide-assists/src/handlers/extract_expressions_from_format_string.rs", "status": "renamed", "additions": 42, "deletions": 16, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1e20bf38b2adb1130b705d6ce1956a635df10d3b/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_expressions_from_format_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e20bf38b2adb1130b705d6ce1956a635df10d3b/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_expressions_from_format_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_expressions_from_format_string.rs?ref=1e20bf38b2adb1130b705d6ce1956a635df10d3b", "patch": "@@ -10,7 +10,7 @@ use itertools::Itertools;\n use stdx::format_to;\n use syntax::{ast, AstNode, AstToken, NodeOrToken, SyntaxKind::COMMA, TextRange};\n \n-// Assist: move_format_string_arg\n+// Assist: extract_expressions_from_format_string\n //\n // Move an expression out of a format string.\n //\n@@ -23,7 +23,7 @@ use syntax::{ast, AstNode, AstToken, NodeOrToken, SyntaxKind::COMMA, TextRange};\n // }\n //\n // fn main() {\n-//     print!(\"{x + 1}$0\");\n+//     print!(\"{var} {x + 1}$0\");\n // }\n // ```\n // ->\n@@ -36,11 +36,14 @@ use syntax::{ast, AstNode, AstToken, NodeOrToken, SyntaxKind::COMMA, TextRange};\n // }\n //\n // fn main() {\n-//     print!(\"{}\"$0, x + 1);\n+//     print!(\"{var} {}\"$0, x + 1);\n // }\n // ```\n \n-pub(crate) fn move_format_string_arg(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n+pub(crate) fn extract_expressions_from_format_string(\n+    acc: &mut Assists,\n+    ctx: &AssistContext<'_>,\n+) -> Option<()> {\n     let fmt_string = ctx.find_token_at_offset::<ast::String>()?;\n     let tt = fmt_string.syntax().parent().and_then(ast::TokenTree::cast)?;\n \n@@ -58,15 +61,15 @@ pub(crate) fn move_format_string_arg(acc: &mut Assists, ctx: &AssistContext<'_>)\n \n     acc.add(\n         AssistId(\n-            \"move_format_string_arg\",\n+            \"extract_expressions_from_format_string\",\n             // if there aren't any expressions, then make the assist a RefactorExtract\n             if extracted_args.iter().filter(|f| matches!(f, Arg::Expr(_))).count() == 0 {\n                 AssistKind::RefactorExtract\n             } else {\n                 AssistKind::QuickFix\n             },\n         ),\n-        \"Extract format args\",\n+        \"Extract format expressions\",\n         tt.syntax().text_range(),\n         |edit| {\n             let fmt_range = fmt_string.syntax().text_range();\n@@ -118,15 +121,14 @@ pub(crate) fn move_format_string_arg(acc: &mut Assists, ctx: &AssistContext<'_>)\n             let mut placeholder_idx = 1;\n \n             for extracted_args in extracted_args {\n-                // remove expr from format string\n-                args.push_str(\", \");\n-\n                 match extracted_args {\n-                    Arg::Ident(s) | Arg::Expr(s) => {\n+                    Arg::Expr(s)=> {\n+                        args.push_str(\", \");\n                         // insert arg\n                         args.push_str(&s);\n                     }\n                     Arg::Placeholder => {\n+                        args.push_str(\", \");\n                         // try matching with existing argument\n                         match existing_args.next() {\n                             Some(ea) => {\n@@ -139,6 +141,7 @@ pub(crate) fn move_format_string_arg(acc: &mut Assists, ctx: &AssistContext<'_>)\n                             }\n                         }\n                     }\n+                    Arg::Ident(_s) => (),\n                 }\n             }\n \n@@ -171,7 +174,7 @@ macro_rules! print {\n     #[test]\n     fn multiple_middle_arg() {\n         check_assist(\n-            move_format_string_arg,\n+            extract_expressions_from_format_string,\n             &add_macro_decl(\n                 r#\"\n fn main() {\n@@ -192,7 +195,7 @@ fn main() {\n     #[test]\n     fn single_arg() {\n         check_assist(\n-            move_format_string_arg,\n+            extract_expressions_from_format_string,\n             &add_macro_decl(\n                 r#\"\n fn main() {\n@@ -213,7 +216,7 @@ fn main() {\n     #[test]\n     fn multiple_middle_placeholders_arg() {\n         check_assist(\n-            move_format_string_arg,\n+            extract_expressions_from_format_string,\n             &add_macro_decl(\n                 r#\"\n fn main() {\n@@ -234,7 +237,7 @@ fn main() {\n     #[test]\n     fn multiple_trailing_args() {\n         check_assist(\n-            move_format_string_arg,\n+            extract_expressions_from_format_string,\n             &add_macro_decl(\n                 r#\"\n fn main() {\n@@ -255,7 +258,7 @@ fn main() {\n     #[test]\n     fn improper_commas() {\n         check_assist(\n-            move_format_string_arg,\n+            extract_expressions_from_format_string,\n             &add_macro_decl(\n                 r#\"\n fn main() {\n@@ -276,7 +279,7 @@ fn main() {\n     #[test]\n     fn nested_tt() {\n         check_assist(\n-            move_format_string_arg,\n+            extract_expressions_from_format_string,\n             &add_macro_decl(\n                 r#\"\n fn main() {\n@@ -289,6 +292,29 @@ fn main() {\n fn main() {\n     print!(\"My name is {} {}\"$0, stringify!(Paperino), x + x)\n }\n+\"#,\n+            ),\n+        );\n+    }\n+\n+    #[test]\n+    fn extract_only_expressions() {\n+        check_assist(\n+            extract_expressions_from_format_string,\n+            &add_macro_decl(\n+                r#\"\n+fn main() {\n+    let var = 1 + 1;\n+    print!(\"foobar {var} {var:?} {x$0 + x}\")\n+}\n+\"#,\n+            ),\n+            &add_macro_decl(\n+                r#\"\n+fn main() {\n+    let var = 1 + 1;\n+    print!(\"foobar {var} {var:?} {}\"$0, x + x)\n+}\n \"#,\n             ),\n         );", "previous_filename": "crates/ide-assists/src/handlers/move_format_string_arg.rs"}, {"sha": "f7ac9d8fd6bb2f2eec6a2c96484f59aa1fe510f8", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e20bf38b2adb1130b705d6ce1956a635df10d3b/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e20bf38b2adb1130b705d6ce1956a635df10d3b/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=1e20bf38b2adb1130b705d6ce1956a635df10d3b", "patch": "@@ -128,6 +128,7 @@ mod handlers {\n     mod convert_while_to_loop;\n     mod destructure_tuple_binding;\n     mod expand_glob_import;\n+    mod extract_expressions_from_format_string;\n     mod extract_function;\n     mod extract_module;\n     mod extract_struct_from_enum_variant;\n@@ -138,7 +139,6 @@ mod handlers {\n     mod flip_binexpr;\n     mod flip_comma;\n     mod flip_trait_bound;\n-    mod move_format_string_arg;\n     mod generate_constant;\n     mod generate_default_from_enum_variant;\n     mod generate_default_from_new;\n@@ -231,6 +231,7 @@ mod handlers {\n             convert_while_to_loop::convert_while_to_loop,\n             destructure_tuple_binding::destructure_tuple_binding,\n             expand_glob_import::expand_glob_import,\n+            extract_expressions_from_format_string::extract_expressions_from_format_string,\n             extract_struct_from_enum_variant::extract_struct_from_enum_variant,\n             extract_type_alias::extract_type_alias,\n             fix_visibility::fix_visibility,\n@@ -265,7 +266,6 @@ mod handlers {\n             merge_match_arms::merge_match_arms,\n             move_bounds::move_bounds_to_where_clause,\n             move_const_to_impl::move_const_to_impl,\n-            move_format_string_arg::move_format_string_arg,\n             move_guard::move_arm_cond_to_match_guard,\n             move_guard::move_guard_to_arm_body,\n             move_module_to_file::move_module_to_file,"}, {"sha": "210df6999d8cb0f366ee4f977bb6e0639dfba99c", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/1e20bf38b2adb1130b705d6ce1956a635df10d3b/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e20bf38b2adb1130b705d6ce1956a635df10d3b/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=1e20bf38b2adb1130b705d6ce1956a635df10d3b", "patch": "@@ -624,6 +624,37 @@ fn qux(bar: Bar, baz: Baz) {}\n     )\n }\n \n+#[test]\n+fn doctest_extract_expressions_from_format_string() {\n+    check_doc_test(\n+        \"extract_expressions_from_format_string\",\n+        r#####\"\n+macro_rules! format_args {\n+    ($lit:literal $(tt:tt)*) => { 0 },\n+}\n+macro_rules! print {\n+    ($($arg:tt)*) => (std::io::_print(format_args!($($arg)*)));\n+}\n+\n+fn main() {\n+    print!(\"{var} {x + 1}$0\");\n+}\n+\"#####,\n+        r#####\"\n+macro_rules! format_args {\n+    ($lit:literal $(tt:tt)*) => { 0 },\n+}\n+macro_rules! print {\n+    ($($arg:tt)*) => (std::io::_print(format_args!($($arg)*)));\n+}\n+\n+fn main() {\n+    print!(\"{var} {}\"$0, x + 1);\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_extract_function() {\n     check_doc_test(\n@@ -1703,37 +1734,6 @@ impl S {\n     )\n }\n \n-#[test]\n-fn doctest_move_format_string_arg() {\n-    check_doc_test(\n-        \"move_format_string_arg\",\n-        r#####\"\n-macro_rules! format_args {\n-    ($lit:literal $(tt:tt)*) => { 0 },\n-}\n-macro_rules! print {\n-    ($($arg:tt)*) => (std::io::_print(format_args!($($arg)*)));\n-}\n-\n-fn main() {\n-    print!(\"{x + 1}$0\");\n-}\n-\"#####,\n-        r#####\"\n-macro_rules! format_args {\n-    ($lit:literal $(tt:tt)*) => { 0 },\n-}\n-macro_rules! print {\n-    ($($arg:tt)*) => (std::io::_print(format_args!($($arg)*)));\n-}\n-\n-fn main() {\n-    print!(\"{}\"$0, x + 1);\n-}\n-\"#####,\n-    )\n-}\n-\n #[test]\n fn doctest_move_from_mod_rs() {\n     check_doc_test("}, {"sha": "f4f37d77d81f37d8e4234c46280c2aed4365c408", "filename": "crates/ide-completion/src/completions/postfix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e20bf38b2adb1130b705d6ce1956a635df10d3b/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e20bf38b2adb1130b705d6ce1956a635df10d3b/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=1e20bf38b2adb1130b705d6ce1956a635df10d3b", "patch": "@@ -595,12 +595,12 @@ fn main() {\n         check_edit(\n             \"format\",\n             r#\"fn main() { \"{some_var:?}\".$0 }\"#,\n-            r#\"fn main() { format!(\"{:?}\", some_var) }\"#,\n+            r#\"fn main() { format!(\"{some_var:?}\") }\"#,\n         );\n         check_edit(\n             \"panic\",\n             r#\"fn main() { \"Panic with {a}\".$0 }\"#,\n-            r#\"fn main() { panic!(\"Panic with {}\", a) }\"#,\n+            r#\"fn main() { panic!(\"Panic with {a}\") }\"#,\n         );\n         check_edit(\n             \"println\","}, {"sha": "dfcc78e92308d1679ea912610d763b029919e4f2", "filename": "crates/ide-completion/src/completions/postfix/format_like.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1e20bf38b2adb1130b705d6ce1956a635df10d3b/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e20bf38b2adb1130b705d6ce1956a635df10d3b/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpostfix%2Fformat_like.rs?ref=1e20bf38b2adb1130b705d6ce1956a635df10d3b", "patch": "@@ -54,7 +54,11 @@ pub(crate) fn add_format_like_completions(\n     if let Ok((out, exprs)) = parse_format_exprs(receiver_text.text()) {\n         let exprs = with_placeholders(exprs);\n         for (label, macro_name) in KINDS {\n-            let snippet = format!(r#\"{macro_name}({out}, {})\"#, exprs.join(\", \"));\n+            let snippet = if exprs.is_empty() {\n+                format!(r#\"{}({})\"#, macro_name, out)\n+            } else {\n+                format!(r#\"{}({}, {})\"#, macro_name, out, exprs.join(\", \"))\n+            };\n \n             postfix_snippet(label, macro_name, &snippet).add_to(acc);\n         }\n@@ -72,10 +76,9 @@ mod tests {\n             (\"eprintln!\", \"{}\", r#\"eprintln!(\"{}\", $1)\"#),\n             (\n                 \"log::info!\",\n-                \"{} {expr} {} {2 + 2}\",\n-                r#\"log::info!(\"{} {} {} {}\", $1, expr, $2, 2 + 2)\"#,\n+                \"{} {ident} {} {2 + 2}\",\n+                r#\"log::info!(\"{} {ident} {} {}\", $1, $2, 2 + 2)\"#,\n             ),\n-            (\"format!\", \"{expr:?}\", r#\"format!(\"{:?}\", expr)\"#),\n         ];\n \n         for (kind, input, output) in test_vector {\n@@ -85,4 +88,18 @@ mod tests {\n             assert_eq!(&snippet, output);\n         }\n     }\n+\n+    #[test]\n+    fn test_into_suggestion_no_epxrs() {\n+        let test_vector = &[\n+            (\"println!\", \"{ident}\", r#\"println!(\"{ident}\")\"#),\n+            (\"format!\", \"{ident:?}\", r#\"format!(\"{ident:?}\")\"#),\n+        ];\n+\n+        for (kind, input, output) in test_vector {\n+            let (parsed_string, _exprs) = parse_format_exprs(input).unwrap();\n+            let snippet = format!(r#\"{}(\"{}\")\"#, kind, parsed_string);\n+            assert_eq!(&snippet, output);\n+        }\n+    }\n }"}, {"sha": "fcef71fb74e7bbe4612f3c4e352f1943e95bc64e", "filename": "crates/ide-db/src/syntax_helpers/format_string_exprs.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1e20bf38b2adb1130b705d6ce1956a635df10d3b/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e20bf38b2adb1130b705d6ce1956a635df10d3b/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string_exprs.rs?ref=1e20bf38b2adb1130b705d6ce1956a635df10d3b", "patch": "@@ -140,8 +140,8 @@ pub fn parse_format_exprs(input: &str) -> Result<(String, Vec<Arg>), ()> {\n                         output.push_str(trimmed);\n                     } else if matches!(state, State::Expr) {\n                         extracted_expressions.push(Arg::Expr(trimmed.into()));\n-                    } else {\n-                        extracted_expressions.push(Arg::Ident(trimmed.into()));\n+                    } else if matches!(state, State::Ident) {\n+                        output.push_str(trimmed);\n                     }\n \n                     output.push(chr);\n@@ -218,9 +218,9 @@ mod tests {\n         let test_vector = &[\n             (\"no expressions\", expect![[\"no expressions\"]]),\n             (r\"no expressions with \\$0$1\", expect![r\"no expressions with \\\\\\$0\\$1\"]),\n-            (\"{expr} is {2 + 2}\", expect![[\"{} is {}; expr, 2 + 2\"]]),\n-            (\"{expr:?}\", expect![[\"{:?}; expr\"]]),\n-            (\"{expr:1$}\", expect![[r\"{:1\\$}; expr\"]]),\n+            (\"{expr} is {2 + 2}\", expect![[\"{expr} is {}; 2 + 2\"]]),\n+            (\"{expr:?}\", expect![[\"{expr:?}\"]]),\n+            (\"{expr:1$}\", expect![[r\"{expr:1\\$}\"]]),\n             (\"{:1$}\", expect![[r\"{:1\\$}; $1\"]]),\n             (\"{:>padding$}\", expect![[r\"{:>padding\\$}; $1\"]]),\n             (\"{}, {}, {0}\", expect![[r\"{}, {}, {0}; $1, $2\"]]),\n@@ -230,16 +230,16 @@ mod tests {\n             (\"malformed}\", expect![[\"-\"]]),\n             (\"{{correct\", expect![[\"{{correct\"]]),\n             (\"correct}}\", expect![[\"correct}}\"]]),\n-            (\"{correct}}}\", expect![[\"{}}}; correct\"]]),\n-            (\"{correct}}}}}\", expect![[\"{}}}}}; correct\"]]),\n+            (\"{correct}}}\", expect![[\"{correct}}}\"]]),\n+            (\"{correct}}}}}\", expect![[\"{correct}}}}}\"]]),\n             (\"{incorrect}}\", expect![[\"-\"]]),\n             (\"placeholders {} {}\", expect![[\"placeholders {} {}; $1, $2\"]]),\n             (\"mixed {} {2 + 2} {}\", expect![[\"mixed {} {} {}; $1, 2 + 2, $2\"]]),\n             (\n                 \"{SomeStruct { val_a: 0, val_b: 1 }}\",\n                 expect![[\"{}; SomeStruct { val_a: 0, val_b: 1 }\"]],\n             ),\n-            (\"{expr:?} is {2.32f64:.5}\", expect![[\"{:?} is {:.5}; expr, 2.32f64\"]]),\n+            (\"{expr:?} is {2.32f64:.5}\", expect![[\"{expr:?} is {:.5}; 2.32f64\"]]),\n             (\n                 \"{SomeStruct { val_a: 0, val_b: 1 }:?}\",\n                 expect![[\"{:?}; SomeStruct { val_a: 0, val_b: 1 }\"]],\n@@ -262,8 +262,6 @@ mod tests {\n                 .unwrap()\n                 .1,\n             vec![\n-                Arg::Ident(\"_ident\".to_owned()),\n-                Arg::Ident(\"r#raw_ident\".to_owned()),\n                 Arg::Expr(\"expr.obj\".to_owned()),\n                 Arg::Expr(\"name {thing: 42}\".to_owned()),\n                 Arg::Placeholder"}]}