{"sha": "43a0268f3a28fa53ad8290720002984cff785224", "node_id": "C_kwDOAAsO6NoAKDQzYTAyNjhmM2EyOGZhNTNhZDgyOTA3MjAwMDI5ODRjZmY3ODUyMjQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-26T02:06:13Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-01T21:26:22Z"}, "message": "Use boxed slices in `PatKind`.\n\nTo shrink it a little more.", "tree": {"sha": "69e4a04f76b5ac097fc9b938c41006b24c051dd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69e4a04f76b5ac097fc9b938c41006b24c051dd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43a0268f3a28fa53ad8290720002984cff785224", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43a0268f3a28fa53ad8290720002984cff785224", "html_url": "https://github.com/rust-lang/rust/commit/43a0268f3a28fa53ad8290720002984cff785224", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43a0268f3a28fa53ad8290720002984cff785224/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a40124e01c4b10629c78b417a1fe524d929bcbe9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a40124e01c4b10629c78b417a1fe524d929bcbe9", "html_url": "https://github.com/rust-lang/rust/commit/a40124e01c4b10629c78b417a1fe524d929bcbe9"}], "stats": {"total": 61, "additions": 36, "deletions": 25}, "files": [{"sha": "59e14337f4ed86a55fc92120be7c81c5c06aa261", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/43a0268f3a28fa53ad8290720002984cff785224/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a0268f3a28fa53ad8290720002984cff785224/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=43a0268f3a28fa53ad8290720002984cff785224", "patch": "@@ -634,22 +634,22 @@ pub enum PatKind<'tcx> {\n     /// irrefutable when there is a slice pattern and both `prefix` and `suffix` are empty.\n     /// e.g., `&[ref xs @ ..]`.\n     Slice {\n-        prefix: Vec<Box<Pat<'tcx>>>,\n+        prefix: Box<[Box<Pat<'tcx>>]>,\n         slice: Option<Box<Pat<'tcx>>>,\n-        suffix: Vec<Box<Pat<'tcx>>>,\n+        suffix: Box<[Box<Pat<'tcx>>]>,\n     },\n \n     /// Fixed match against an array; irrefutable.\n     Array {\n-        prefix: Vec<Box<Pat<'tcx>>>,\n+        prefix: Box<[Box<Pat<'tcx>>]>,\n         slice: Option<Box<Pat<'tcx>>>,\n-        suffix: Vec<Box<Pat<'tcx>>>,\n+        suffix: Box<[Box<Pat<'tcx>>]>,\n     },\n \n     /// An or-pattern, e.g. `p | q`.\n     /// Invariant: `pats.len() >= 2`.\n     Or {\n-        pats: Vec<Box<Pat<'tcx>>>,\n+        pats: Box<[Box<Pat<'tcx>>]>,\n     },\n }\n \n@@ -775,7 +775,7 @@ impl<'tcx> fmt::Display for Pat<'tcx> {\n             PatKind::Slice { ref prefix, ref slice, ref suffix }\n             | PatKind::Array { ref prefix, ref slice, ref suffix } => {\n                 write!(f, \"[\")?;\n-                for p in prefix {\n+                for p in prefix.iter() {\n                     write!(f, \"{}{}\", start_or_comma(), p)?;\n                 }\n                 if let Some(ref slice) = *slice {\n@@ -786,13 +786,13 @@ impl<'tcx> fmt::Display for Pat<'tcx> {\n                     }\n                     write!(f, \"..\")?;\n                 }\n-                for p in suffix {\n+                for p in suffix.iter() {\n                     write!(f, \"{}{}\", start_or_comma(), p)?;\n                 }\n                 write!(f, \"]\")\n             }\n             PatKind::Or { ref pats } => {\n-                for pat in pats {\n+                for pat in pats.iter() {\n                     write!(f, \"{}{}\", start_or_continue(\" | \"), pat)?;\n                 }\n                 Ok(())\n@@ -809,8 +809,8 @@ mod size_asserts {\n     static_assert_size!(Block, 56);\n     static_assert_size!(Expr<'_>, 64);\n     static_assert_size!(ExprKind<'_>, 40);\n-    static_assert_size!(Pat<'_>, 80);\n-    static_assert_size!(PatKind<'_>, 64);\n+    static_assert_size!(Pat<'_>, 72);\n+    static_assert_size!(PatKind<'_>, 56);\n     static_assert_size!(Stmt<'_>, 56);\n     static_assert_size!(StmtKind<'_>, 48);\n }"}, {"sha": "79a0e75aa7c788b6923047908692c748a3f8b417", "filename": "compiler/rustc_middle/src/thir/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43a0268f3a28fa53ad8290720002984cff785224/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a0268f3a28fa53ad8290720002984cff785224/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs?ref=43a0268f3a28fa53ad8290720002984cff785224", "patch": "@@ -232,18 +232,18 @@ pub fn walk_pat<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, pat: &Pat<'\n         Constant { value: _ } => {}\n         Range(_) => {}\n         Slice { prefix, slice, suffix } | Array { prefix, slice, suffix } => {\n-            for subpattern in prefix {\n+            for subpattern in prefix.iter() {\n                 visitor.visit_pat(&subpattern);\n             }\n             if let Some(pat) = slice {\n                 visitor.visit_pat(&pat);\n             }\n-            for subpattern in suffix {\n+            for subpattern in suffix.iter() {\n                 visitor.visit_pat(&subpattern);\n             }\n         }\n         Or { pats } => {\n-            for pat in pats {\n+            for pat in pats.iter() {\n                 visitor.visit_pat(&pat);\n             }\n         }"}, {"sha": "a316c2e7d6e187bf1d25a5b7da4c33543cf89695", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43a0268f3a28fa53ad8290720002984cff785224/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a0268f3a28fa53ad8290720002984cff785224/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=43a0268f3a28fa53ad8290720002984cff785224", "patch": "@@ -764,7 +764,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | PatKind::Slice { ref prefix, ref slice, ref suffix } => {\n                 let from = u64::try_from(prefix.len()).unwrap();\n                 let to = u64::try_from(suffix.len()).unwrap();\n-                for subpattern in prefix {\n+                for subpattern in prefix.iter() {\n                     self.visit_primary_bindings(subpattern, pattern_user_ty.clone().index(), f);\n                 }\n                 for subpattern in slice {\n@@ -774,7 +774,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         f,\n                     );\n                 }\n-                for subpattern in suffix {\n+                for subpattern in suffix.iter() {\n                     self.visit_primary_bindings(subpattern, pattern_user_ty.clone().index(), f);\n                 }\n             }\n@@ -827,7 +827,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // may not all be in the leftmost subpattern. For example in\n                 // `let (x | y) = ...`, the primary binding of `y` occurs in\n                 // the right subpattern\n-                for subpattern in pats {\n+                for subpattern in pats.iter() {\n                     self.visit_primary_bindings(subpattern, pattern_user_ty.clone(), f);\n                 }\n             }"}, {"sha": "b58685e895809b266d76df47122f3add615fad3a", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43a0268f3a28fa53ad8290720002984cff785224/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a0268f3a28fa53ad8290720002984cff785224/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=43a0268f3a28fa53ad8290720002984cff785224", "patch": "@@ -400,7 +400,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                     .map(|val| self.recur(*val, false))\n                     .collect::<Result<_, _>>()?,\n                 slice: None,\n-                suffix: Vec::new(),\n+                suffix: Box::new([]),\n             },\n             ty::Ref(_, pointee_ty, ..) => match *pointee_ty.kind() {\n                 // These are not allowed and will error elsewhere anyway.\n@@ -436,7 +436,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                                     .map(|val| self.recur(*val, false))\n                                     .collect::<Result<_, _>>()?,\n                                 slice: None,\n-                                suffix: vec![],\n+                                suffix: Box::new([]),\n                             },\n                             span,\n                             ty: *pointee_ty,\n@@ -462,7 +462,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                                     .map(|val| self.recur(*val, false))\n                                     .collect::<Result<_, _>>()?,\n                                 slice: None,\n-                                suffix: vec![],\n+                                suffix: Box::new([]),\n                             },\n                             span,\n                             ty: tcx.mk_slice(elem_ty),"}, {"sha": "5105f059f9b64797317ac251dc630389a8a1ceb8", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/43a0268f3a28fa53ad8290720002984cff785224/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a0268f3a28fa53ad8290720002984cff785224/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=43a0268f3a28fa53ad8290720002984cff785224", "patch": "@@ -72,7 +72,7 @@ use std::ops::RangeInclusive;\n fn expand_or_pat<'p, 'tcx>(pat: &'p Pat<'tcx>) -> Vec<&'p Pat<'tcx>> {\n     fn expand<'p, 'tcx>(pat: &'p Pat<'tcx>, vec: &mut Vec<&'p Pat<'tcx>>) {\n         if let PatKind::Or { pats } = &pat.kind {\n-            for pat in pats {\n+            for pat in pats.iter() {\n                 expand(&pat, vec);\n             }\n         } else {\n@@ -1433,7 +1433,8 @@ impl<'p, 'tcx> DeconstructedPat<'p, 'tcx> {\n                     FixedLen(prefix.len() + suffix.len())\n                 };\n                 ctor = Slice(Slice::new(array_len, kind));\n-                fields = Fields::from_iter(cx, prefix.iter().chain(suffix).map(|p| mkpat(&*p)));\n+                fields =\n+                    Fields::from_iter(cx, prefix.iter().chain(suffix.iter()).map(|p| mkpat(&*p)));\n             }\n             PatKind::Or { .. } => {\n                 ctor = Or;\n@@ -1489,7 +1490,7 @@ impl<'p, 'tcx> DeconstructedPat<'p, 'tcx> {\n                     FixedLen(_) => PatKind::Slice {\n                         prefix: subpatterns.collect(),\n                         slice: None,\n-                        suffix: vec![],\n+                        suffix: Box::new([]),\n                     },\n                     VarLen(prefix, _) => {\n                         let mut subpatterns = subpatterns.peekable();\n@@ -1508,9 +1509,13 @@ impl<'p, 'tcx> DeconstructedPat<'p, 'tcx> {\n                                 subpatterns.next();\n                             }\n                         }\n-                        let suffix: Vec<_> = subpatterns.collect();\n+                        let suffix: Box<[_]> = subpatterns.collect();\n                         let wild = Pat::wildcard_from_ty(self.ty);\n-                        PatKind::Slice { prefix, slice: Some(Box::new(wild)), suffix }\n+                        PatKind::Slice {\n+                            prefix: prefix.into_boxed_slice(),\n+                            slice: Some(Box::new(wild)),\n+                            suffix,\n+                        }\n                     }\n                 }\n             }"}, {"sha": "d2f93b679acc596a89525e118f23a06dfcc385eb", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/43a0268f3a28fa53ad8290720002984cff785224/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a0268f3a28fa53ad8290720002984cff785224/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=43a0268f3a28fa53ad8290720002984cff785224", "patch": "@@ -344,7 +344,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n             .collect()\n     }\n \n-    fn lower_patterns(&mut self, pats: &'tcx [hir::Pat<'tcx>]) -> Vec<Box<Pat<'tcx>>> {\n+    fn lower_patterns(&mut self, pats: &'tcx [hir::Pat<'tcx>]) -> Box<[Box<Pat<'tcx>>]> {\n         pats.iter().map(|p| self.lower_pattern(p)).collect()\n     }\n \n@@ -653,6 +653,12 @@ impl<'tcx, T: PatternFoldable<'tcx>> PatternFoldable<'tcx> for Vec<T> {\n     }\n }\n \n+impl<'tcx, T: PatternFoldable<'tcx>> PatternFoldable<'tcx> for Box<[T]> {\n+    fn super_fold_with<F: PatternFolder<'tcx>>(&self, folder: &mut F) -> Self {\n+        self.iter().map(|t| t.fold_with(folder)).collect()\n+    }\n+}\n+\n impl<'tcx, T: PatternFoldable<'tcx>> PatternFoldable<'tcx> for Option<T> {\n     fn super_fold_with<F: PatternFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         self.as_ref().map(|t| t.fold_with(folder))"}]}