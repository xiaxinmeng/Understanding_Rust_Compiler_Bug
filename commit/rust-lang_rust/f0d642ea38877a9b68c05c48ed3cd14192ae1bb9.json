{"sha": "f0d642ea38877a9b68c05c48ed3cd14192ae1bb9", "node_id": "C_kwDOAAsO6NoAKGYwZDY0MmVhMzg4NzdhOWI2OGMwNWM0OGVkM2NkMTQxOTJhZTFiYjk", "commit": {"author": {"name": "dswij", "email": "dswijj@gmail.com", "date": "2022-08-31T16:47:56Z"}, "committer": {"name": "dswij", "email": "dswijj@gmail.com", "date": "2022-09-01T10:46:53Z"}, "message": "Use macro source when creating `Sugg` helper", "tree": {"sha": "510d26303c264eb92a917cc982bb9575ac295306", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/510d26303c264eb92a917cc982bb9575ac295306"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0d642ea38877a9b68c05c48ed3cd14192ae1bb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0d642ea38877a9b68c05c48ed3cd14192ae1bb9", "html_url": "https://github.com/rust-lang/rust/commit/f0d642ea38877a9b68c05c48ed3cd14192ae1bb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0d642ea38877a9b68c05c48ed3cd14192ae1bb9/comments", "author": {"login": "dswij", "id": 44697459, "node_id": "MDQ6VXNlcjQ0Njk3NDU5", "avatar_url": "https://avatars.githubusercontent.com/u/44697459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dswij", "html_url": "https://github.com/dswij", "followers_url": "https://api.github.com/users/dswij/followers", "following_url": "https://api.github.com/users/dswij/following{/other_user}", "gists_url": "https://api.github.com/users/dswij/gists{/gist_id}", "starred_url": "https://api.github.com/users/dswij/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dswij/subscriptions", "organizations_url": "https://api.github.com/users/dswij/orgs", "repos_url": "https://api.github.com/users/dswij/repos", "events_url": "https://api.github.com/users/dswij/events{/privacy}", "received_events_url": "https://api.github.com/users/dswij/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dswij", "id": 44697459, "node_id": "MDQ6VXNlcjQ0Njk3NDU5", "avatar_url": "https://avatars.githubusercontent.com/u/44697459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dswij", "html_url": "https://github.com/dswij", "followers_url": "https://api.github.com/users/dswij/followers", "following_url": "https://api.github.com/users/dswij/following{/other_user}", "gists_url": "https://api.github.com/users/dswij/gists{/gist_id}", "starred_url": "https://api.github.com/users/dswij/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dswij/subscriptions", "organizations_url": "https://api.github.com/users/dswij/orgs", "repos_url": "https://api.github.com/users/dswij/repos", "events_url": "https://api.github.com/users/dswij/events{/privacy}", "received_events_url": "https://api.github.com/users/dswij/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f51aade56f93175dde89177a92e3669ebd8e7592", "url": "https://api.github.com/repos/rust-lang/rust/commits/f51aade56f93175dde89177a92e3669ebd8e7592", "html_url": "https://github.com/rust-lang/rust/commit/f51aade56f93175dde89177a92e3669ebd8e7592"}], "stats": {"total": 64, "additions": 42, "deletions": 22}, "files": [{"sha": "b4619860a6d9d23f907c9c7e5ddecd9ea4ad8d15", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f0d642ea38877a9b68c05c48ed3cd14192ae1bb9/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0d642ea38877a9b68c05c48ed3cd14192ae1bb9/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=f0d642ea38877a9b68c05c48ed3cd14192ae1bb9", "patch": "@@ -22,7 +22,7 @@ use std::fmt::{Display, Write as _};\n use std::ops::{Add, Neg, Not, Sub};\n \n /// A helper type to build suggestion correctly handling parentheses.\n-#[derive(Clone, PartialEq)]\n+#[derive(Clone, Debug, PartialEq)]\n pub enum Sugg<'a> {\n     /// An expression that never needs parentheses such as `1337` or `[0; 42]`.\n     NonParen(Cow<'a, str>),\n@@ -177,11 +177,11 @@ impl<'a> Sugg<'a> {\n     pub fn ast(cx: &EarlyContext<'_>, expr: &ast::Expr, default: &'a str) -> Self {\n         use rustc_ast::ast::RangeLimits;\n \n-        let get_whole_snippet = || {\n-            if expr.span.from_expansion() {\n-                snippet_with_macro_callsite(cx, expr.span, default)\n+        let snippet_without_expansion = |cx, span: Span, default| {\n+            if span.from_expansion() {\n+                snippet_with_macro_callsite(cx, span, default)\n             } else {\n-                snippet(cx, expr.span, default)\n+                snippet(cx, span, default)\n             }\n         };\n \n@@ -192,7 +192,7 @@ impl<'a> Sugg<'a> {\n             | ast::ExprKind::If(..)\n             | ast::ExprKind::Let(..)\n             | ast::ExprKind::Unary(..)\n-            | ast::ExprKind::Match(..) => Sugg::MaybeParen(get_whole_snippet()),\n+            | ast::ExprKind::Match(..) => Sugg::MaybeParen(snippet_without_expansion(cx, expr.span, default)),\n             ast::ExprKind::Async(..)\n             | ast::ExprKind::Block(..)\n             | ast::ExprKind::Break(..)\n@@ -221,41 +221,45 @@ impl<'a> Sugg<'a> {\n             | ast::ExprKind::Array(..)\n             | ast::ExprKind::While(..)\n             | ast::ExprKind::Await(..)\n-            | ast::ExprKind::Err => Sugg::NonParen(get_whole_snippet()),\n+            | ast::ExprKind::Err => Sugg::NonParen(snippet_without_expansion(cx, expr.span, default)),\n             ast::ExprKind::Range(ref lhs, ref rhs, RangeLimits::HalfOpen) => Sugg::BinOp(\n                 AssocOp::DotDot,\n-                lhs.as_ref().map_or(\"\".into(), |lhs| snippet(cx, lhs.span, default)),\n-                rhs.as_ref().map_or(\"\".into(), |rhs| snippet(cx, rhs.span, default)),\n+                lhs.as_ref()\n+                    .map_or(\"\".into(), |lhs| snippet_without_expansion(cx, lhs.span, default)),\n+                rhs.as_ref()\n+                    .map_or(\"\".into(), |rhs| snippet_without_expansion(cx, rhs.span, default)),\n             ),\n             ast::ExprKind::Range(ref lhs, ref rhs, RangeLimits::Closed) => Sugg::BinOp(\n                 AssocOp::DotDotEq,\n-                lhs.as_ref().map_or(\"\".into(), |lhs| snippet(cx, lhs.span, default)),\n-                rhs.as_ref().map_or(\"\".into(), |rhs| snippet(cx, rhs.span, default)),\n+                lhs.as_ref()\n+                    .map_or(\"\".into(), |lhs| snippet_without_expansion(cx, lhs.span, default)),\n+                rhs.as_ref()\n+                    .map_or(\"\".into(), |rhs| snippet_without_expansion(cx, rhs.span, default)),\n             ),\n             ast::ExprKind::Assign(ref lhs, ref rhs, _) => Sugg::BinOp(\n                 AssocOp::Assign,\n-                snippet(cx, lhs.span, default),\n-                snippet(cx, rhs.span, default),\n+                snippet_without_expansion(cx, lhs.span, default),\n+                snippet_without_expansion(cx, rhs.span, default),\n             ),\n             ast::ExprKind::AssignOp(op, ref lhs, ref rhs) => Sugg::BinOp(\n                 astbinop2assignop(op),\n-                snippet(cx, lhs.span, default),\n-                snippet(cx, rhs.span, default),\n+                snippet_without_expansion(cx, lhs.span, default),\n+                snippet_without_expansion(cx, rhs.span, default),\n             ),\n             ast::ExprKind::Binary(op, ref lhs, ref rhs) => Sugg::BinOp(\n                 AssocOp::from_ast_binop(op.node),\n-                snippet(cx, lhs.span, default),\n-                snippet(cx, rhs.span, default),\n+                snippet_without_expansion(cx, lhs.span, default),\n+                snippet_without_expansion(cx, rhs.span, default),\n             ),\n             ast::ExprKind::Cast(ref lhs, ref ty) => Sugg::BinOp(\n                 AssocOp::As,\n-                snippet(cx, lhs.span, default),\n-                snippet(cx, ty.span, default),\n+                snippet_without_expansion(cx, lhs.span, default),\n+                snippet_without_expansion(cx, ty.span, default),\n             ),\n             ast::ExprKind::Type(ref lhs, ref ty) => Sugg::BinOp(\n                 AssocOp::Colon,\n-                snippet(cx, lhs.span, default),\n-                snippet(cx, ty.span, default),\n+                snippet_without_expansion(cx, lhs.span, default),\n+                snippet_without_expansion(cx, ty.span, default),\n             ),\n         }\n     }"}, {"sha": "6bb7682bae9530883c8035aa3ca0a1aebf5c5cbe", "filename": "tests/ui/collapsible_if.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0d642ea38877a9b68c05c48ed3cd14192ae1bb9/tests%2Fui%2Fcollapsible_if.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f0d642ea38877a9b68c05c48ed3cd14192ae1bb9/tests%2Fui%2Fcollapsible_if.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.fixed?ref=f0d642ea38877a9b68c05c48ed3cd14192ae1bb9", "patch": "@@ -139,6 +139,9 @@ fn main() {\n     // Fix #5962\n     if matches!(true, true) && matches!(true, true) {}\n \n+    // Issue #9375\n+    if matches!(true, true) && truth() && matches!(true, true) {}\n+\n     if true {\n         #[cfg(not(teehee))]\n         if true {"}, {"sha": "e216a9ee54c90ee959415569eb612f1a8010dfb9", "filename": "tests/ui/collapsible_if.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f0d642ea38877a9b68c05c48ed3cd14192ae1bb9/tests%2Fui%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0d642ea38877a9b68c05c48ed3cd14192ae1bb9/tests%2Fui%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.rs?ref=f0d642ea38877a9b68c05c48ed3cd14192ae1bb9", "patch": "@@ -155,6 +155,11 @@ fn main() {\n         if matches!(true, true) {}\n     }\n \n+    // Issue #9375\n+    if matches!(true, true) && truth() {\n+        if matches!(true, true) {}\n+    }\n+\n     if true {\n         #[cfg(not(teehee))]\n         if true {"}, {"sha": "6327444df21d7641a151decebff28f3dcbca3a61", "filename": "tests/ui/collapsible_if.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0d642ea38877a9b68c05c48ed3cd14192ae1bb9/tests%2Fui%2Fcollapsible_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0d642ea38877a9b68c05c48ed3cd14192ae1bb9/tests%2Fui%2Fcollapsible_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.stderr?ref=f0d642ea38877a9b68c05c48ed3cd14192ae1bb9", "patch": "@@ -126,5 +126,13 @@ LL | |         if matches!(true, true) {}\n LL | |     }\n    | |_____^ help: collapse nested if block: `if matches!(true, true) && matches!(true, true) {}`\n \n-error: aborting due to 8 previous errors\n+error: this `if` statement can be collapsed\n+  --> $DIR/collapsible_if.rs:159:5\n+   |\n+LL | /     if matches!(true, true) && truth() {\n+LL | |         if matches!(true, true) {}\n+LL | |     }\n+   | |_____^ help: collapse nested if block: `if matches!(true, true) && truth() && matches!(true, true) {}`\n+\n+error: aborting due to 9 previous errors\n "}]}