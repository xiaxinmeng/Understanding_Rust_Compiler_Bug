{"sha": "e31b8b3342f4fc97198609f5e7e13e484969c8b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMWI4YjMzNDJmNGZjOTcxOTg2MDlmNWU3ZTEzZTQ4NDk2OWM4YjE=", "commit": {"author": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2020-03-07T14:39:44Z"}, "committer": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2020-03-07T15:06:20Z"}, "message": "add `_NSGetEnviron` foreign function for macos", "tree": {"sha": "ea2716bff88f76107954a7aa1fd0891ca4c8d3d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea2716bff88f76107954a7aa1fd0891ca4c8d3d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e31b8b3342f4fc97198609f5e7e13e484969c8b1", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQRsB8A/3NrzTlMMjT0nUl7150IKUAUCXmO4bQAKCRAnUl7150IK\nUNITAQD3yk8fk41WVEgKMH1VHLwrIEAd1z1AMuUnQTDpPgInsgD/f9EHhZs9CZXk\nLgqktDJ8GDY4CEE8lIpizQ/PLdhIng0=\n=YLF8\n-----END PGP SIGNATURE-----", "payload": "tree ea2716bff88f76107954a7aa1fd0891ca4c8d3d0\nparent 6eccc809f21c11f583ec237dffdbebc7e6b66038\nauthor Christian Poveda <git@christianpoveda.xyz> 1583591984 -0500\ncommitter Christian Poveda <git@christianpoveda.xyz> 1583593580 -0500\n\nadd `_NSGetEnviron` foreign function for macos\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e31b8b3342f4fc97198609f5e7e13e484969c8b1", "html_url": "https://github.com/rust-lang/rust/commit/e31b8b3342f4fc97198609f5e7e13e484969c8b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e31b8b3342f4fc97198609f5e7e13e484969c8b1/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eccc809f21c11f583ec237dffdbebc7e6b66038", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eccc809f21c11f583ec237dffdbebc7e6b66038", "html_url": "https://github.com/rust-lang/rust/commit/6eccc809f21c11f583ec237dffdbebc7e6b66038"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "5a50a76dfb9f8e2e1f3f6dbeac3b72ceaecea3c8", "filename": "src/machine.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e31b8b3342f4fc97198609f5e7e13e484969c8b1/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e31b8b3342f4fc97198609f5e7e13e484969c8b1/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=e31b8b3342f4fc97198609f5e7e13e484969c8b1", "patch": "@@ -110,19 +110,21 @@ impl<'tcx> MemoryExtra<'tcx> {\n     pub fn init_extern_statics<'mir>(\n         this: &mut MiriEvalContext<'mir, 'tcx>,\n     ) -> InterpResult<'tcx> {\n-        match this.tcx.sess.target.target.target_os.as_str() {\n-            \"linux\" => {\n-                // \"__cxa_thread_atexit_impl\"\n-                // This should be all-zero, pointer-sized.\n-                let layout = this.layout_of(this.tcx.types.usize)?;\n-                let place = this.allocate(layout, MiriMemoryKind::Machine.into());\n-                this.write_scalar(Scalar::from_machine_usize(0, &*this.tcx), place.into())?;\n-                this.memory\n-                    .extra\n-                    .extern_statics\n-                    .insert(Symbol::intern(\"__cxa_thread_atexit_impl\"), place.ptr.assert_ptr().alloc_id)\n-                    .unwrap_none();\n-\n+        let target_os = this.tcx.sess.target.target.target_os.as_str();\n+        match target_os {\n+            \"linux\" | \"macos\" => {\n+                if target_os == \"linux\" {\n+                    // \"__cxa_thread_atexit_impl\"\n+                    // This should be all-zero, pointer-sized.\n+                    let layout = this.layout_of(this.tcx.types.usize)?;\n+                    let place = this.allocate(layout, MiriMemoryKind::Machine.into());\n+                    this.write_scalar(Scalar::from_machine_usize(0, &*this.tcx), place.into())?;\n+                    this.memory\n+                        .extra\n+                        .extern_statics\n+                        .insert(Symbol::intern(\"__cxa_thread_atexit_impl\"), place.ptr.assert_ptr().alloc_id)\n+                        .unwrap_none();\n+                }\n                 // \"environ\"\n                 let layout = this.layout_of(this.tcx.types.usize)?;\n                 let place = this.allocate(layout, MiriMemoryKind::Machine.into());"}, {"sha": "d167191279ebcf840b49a2514b426a6a24b0ce94", "filename": "src/shims/foreign_items/posix/macos.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e31b8b3342f4fc97198609f5e7e13e484969c8b1/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e31b8b3342f4fc97198609f5e7e13e484969c8b1/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs?ref=e31b8b3342f4fc97198609f5e7e13e484969c8b1", "patch": "@@ -41,7 +41,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let result = this.macos_fstat(args[0], args[1])?;\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n-\n+            // Environment related shims\n+            \"_NSGetEnviron\" => {\n+                this.write_scalar(this.memory.extra.environ.unwrap().ptr, dest)?;\n+            }\n             // The only reason this is not in the `posix` module is because the `linux` item has a\n             // different name.\n             \"opendir$INODE64\" => {"}]}