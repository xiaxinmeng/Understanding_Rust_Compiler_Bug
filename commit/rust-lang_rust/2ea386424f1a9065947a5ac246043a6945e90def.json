{"sha": "2ea386424f1a9065947a5ac246043a6945e90def", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYTM4NjQyNGYxYTkwNjU5NDdhNWFjMjQ2MDQzYTY5NDVlOTBkZWY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-06-15T17:04:43Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-06-15T17:04:43Z"}, "message": "Remove use of specialization from librustc_arena", "tree": {"sha": "b79b1f81265750c7d2056d02436d74b7ed75d228", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b79b1f81265750c7d2056d02436d74b7ed75d228"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ea386424f1a9065947a5ac246043a6945e90def", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ea386424f1a9065947a5ac246043a6945e90def", "html_url": "https://github.com/rust-lang/rust/commit/2ea386424f1a9065947a5ac246043a6945e90def", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ea386424f1a9065947a5ac246043a6945e90def/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff4a2533a0720f9cdd86e02eafa3725f07aa7752", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff4a2533a0720f9cdd86e02eafa3725f07aa7752", "html_url": "https://github.com/rust-lang/rust/commit/ff4a2533a0720f9cdd86e02eafa3725f07aa7752"}], "stats": {"total": 94, "additions": 48, "deletions": 46}, "files": [{"sha": "7f154052538acf301775763dd071d8e519604268", "filename": "src/librustc_arena/lib.rs", "status": "modified", "additions": 48, "deletions": 43, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/2ea386424f1a9065947a5ac246043a6945e90def/src%2Flibrustc_arena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ea386424f1a9065947a5ac246043a6945e90def/src%2Flibrustc_arena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_arena%2Flib.rs?ref=2ea386424f1a9065947a5ac246043a6945e90def", "patch": "@@ -602,62 +602,73 @@ macro_rules! which_arena_for_type {\n \n #[macro_export]\n macro_rules! declare_arena {\n-    ([], [$($a:tt $name:ident: $ty:ty, $gen_ty:ty;)*], $tcx:lifetime) => {\n+    ([], [$($a:tt $name:ident: $ty:ty, $_gen_ty:ty;)*], $tcx:lifetime) => {\n         #[derive(Default)]\n         pub struct Arena<$tcx> {\n             pub dropless: $crate::DroplessArena,\n             drop: $crate::DropArena,\n             $($name: $crate::arena_for_type!($a[$ty]),)*\n         }\n \n-        #[marker]\n-        pub trait ArenaAllocatable<'tcx> {}\n-\n-        impl<'tcx, T: Copy> ArenaAllocatable<'tcx> for T {}\n-\n-        unsafe trait ArenaField<'tcx>: Sized + ArenaAllocatable<'tcx> {\n-            /// Returns a specific arena to allocate from.\n-            /// If `None` is returned, the `DropArena` will be used.\n-            fn arena<'a>(arena: &'a Arena<'tcx>) -> Option<&'a $crate::TypedArena<Self>>;\n+        pub trait ArenaAllocatable<'tcx, T = Self>: Sized {\n+            fn allocate_on<'a>(self, arena: &'a Arena<'tcx>) -> &'a mut Self;\n+            fn allocate_from_iter<'a>(\n+                arena: &'a Arena<'tcx>,\n+                iter: impl ::std::iter::IntoIterator<Item = Self>,\n+            ) -> &'a mut [Self];\n         }\n \n-        unsafe impl<'tcx, T: ArenaAllocatable<'tcx>> ArenaField<'tcx> for T {\n+        impl<'tcx, T: Copy> ArenaAllocatable<'tcx, ()> for T {\n             #[inline]\n-            default fn arena<'a>(_: &'a Arena<'tcx>) -> Option<&'a $crate::TypedArena<Self>> {\n-                panic!()\n+            fn allocate_on<'a>(self, arena: &'a Arena<'tcx>) -> &'a mut Self {\n+                arena.dropless.alloc(self)\n+            }\n+            #[inline]\n+            fn allocate_from_iter<'a>(\n+                arena: &'a Arena<'tcx>,\n+                iter: impl ::std::iter::IntoIterator<Item = Self>,\n+            ) -> &'a mut [Self] {\n+                arena.dropless.alloc_from_iter(iter)\n             }\n-        }\n \n+        }\n         $(\n-            #[allow(unused_lifetimes)]\n-            impl<$tcx> ArenaAllocatable<$tcx> for $ty {}\n-            unsafe impl<$tcx, '_x, '_y, '_z, '_w> ArenaField<$tcx> for $gen_ty where Self: ArenaAllocatable<$tcx> {\n+            impl<$tcx> ArenaAllocatable<$tcx, $ty> for $ty {\n                 #[inline]\n-                fn arena<'a>(_arena: &'a Arena<$tcx>) -> Option<&'a $crate::TypedArena<Self>> {\n-                    // SAFETY: We only implement `ArenaAllocatable<$tcx>` for\n-                    // `$ty`, so `$ty` and Self are the same type\n-                    unsafe {\n-                        ::std::mem::transmute::<\n-                            Option<&'a $crate::TypedArena<$ty>>,\n-                            Option<&'a $crate::TypedArena<Self>>,\n-                        >(\n-                            $crate::which_arena_for_type!($a[&_arena.$name])\n-                        )\n+                fn allocate_on<'a>(self, arena: &'a Arena<$tcx>) -> &'a mut Self {\n+                    if !::std::mem::needs_drop::<Self>() {\n+                        return arena.dropless.alloc(self);\n+                    }\n+                    match $crate::which_arena_for_type!($a[&arena.$name]) {\n+                        ::std::option::Option::<&$crate::TypedArena<Self>>::Some(ty_arena) => {\n+                            ty_arena.alloc(self)\n+                        }\n+                        ::std::option::Option::None => unsafe { arena.drop.alloc(self) },\n+                    }\n+                }\n+\n+                #[inline]\n+                fn allocate_from_iter<'a>(\n+                    arena: &'a Arena<$tcx>,\n+                    iter: impl ::std::iter::IntoIterator<Item = Self>,\n+                ) -> &'a mut [Self] {\n+                    if !::std::mem::needs_drop::<Self>() {\n+                        return arena.dropless.alloc_from_iter(iter);\n+                    }\n+                    match $crate::which_arena_for_type!($a[&arena.$name]) {\n+                        ::std::option::Option::<&$crate::TypedArena<Self>>::Some(ty_arena) => {\n+                            ty_arena.alloc_from_iter(iter)\n+                        }\n+                        ::std::option::Option::None => unsafe { arena.drop.alloc_from_iter(iter) },\n                     }\n                 }\n             }\n         )*\n \n         impl<'tcx> Arena<'tcx> {\n             #[inline]\n-            pub fn alloc<T: ArenaAllocatable<'tcx>>(&self, value: T) -> &mut T {\n-                if !::std::mem::needs_drop::<T>() {\n-                    return self.dropless.alloc(value);\n-                }\n-                match <T as ArenaField<'tcx>>::arena(self) {\n-                    ::std::option::Option::Some(arena) => arena.alloc(value),\n-                    ::std::option::Option::None => unsafe { self.drop.alloc(value) },\n-                }\n+            pub fn alloc<T: ArenaAllocatable<'tcx, U>, U>(&self, value: T) -> &mut T {\n+                value.allocate_on(self)\n             }\n \n             #[inline]\n@@ -668,17 +679,11 @@ macro_rules! declare_arena {\n                 self.dropless.alloc_slice(value)\n             }\n \n-            pub fn alloc_from_iter<'a, T: ArenaAllocatable<'tcx>>(\n+            pub fn alloc_from_iter<'a, T: ArenaAllocatable<'tcx, U>, U>(\n                 &'a self,\n                 iter: impl ::std::iter::IntoIterator<Item = T>,\n             ) -> &'a mut [T] {\n-                if !::std::mem::needs_drop::<T>() {\n-                    return self.dropless.alloc_from_iter(iter);\n-                }\n-                match <T as ArenaField<'tcx>>::arena(self) {\n-                    ::std::option::Option::Some(arena) => arena.alloc_from_iter(iter),\n-                    ::std::option::Option::None => unsafe { self.drop.alloc_from_iter(iter) },\n-                }\n+                T::allocate_from_iter(self, iter)\n             }\n         }\n     }"}, {"sha": "af1e33a049bfb66d1baf5b0c151e3beab7257733", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ea386424f1a9065947a5ac246043a6945e90def/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ea386424f1a9065947a5ac246043a6945e90def/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=2ea386424f1a9065947a5ac246043a6945e90def", "patch": "@@ -32,8 +32,6 @@\n \n #![feature(array_value_iter)]\n #![feature(crate_visibility_modifier)]\n-#![feature(marker_trait_attr)]\n-#![feature(min_specialization)]\n #![feature(or_patterns)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "2e27ab514d80b242818a98c72ce682bdbeac2ca2", "filename": "src/librustc_middle/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ea386424f1a9065947a5ac246043a6945e90def/src%2Flibrustc_middle%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ea386424f1a9065947a5ac246043a6945e90def/src%2Flibrustc_middle%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Flib.rs?ref=2ea386424f1a9065947a5ac246043a6945e90def", "patch": "@@ -36,7 +36,6 @@\n #![feature(drain_filter)]\n #![feature(never_type)]\n #![feature(exhaustive_patterns)]\n-#![feature(marker_trait_attr)]\n #![feature(extern_types)]\n #![feature(nll)]\n #![feature(option_expect_none)]"}]}