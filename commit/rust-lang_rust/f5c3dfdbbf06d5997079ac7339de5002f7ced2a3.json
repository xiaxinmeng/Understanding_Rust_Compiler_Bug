{"sha": "f5c3dfdbbf06d5997079ac7339de5002f7ced2a3", "node_id": "C_kwDOAAsO6NoAKGY1YzNkZmRiYmYwNmQ1OTk3MDc5YWM3MzM5ZGU1MDAyZjdjZWQyYTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-24T14:00:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-24T14:00:37Z"}, "message": "Auto merge of #105085 - oli-obk:stop_promoting_all_the_things, r=RalfJung\n\nStop promoting all the things\n\nfixes #91009\n\nr? `@RalfJung`", "tree": {"sha": "12dde3af79aba65b86e36f5e2ad34af74effc367", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12dde3af79aba65b86e36f5e2ad34af74effc367"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5c3dfdbbf06d5997079ac7339de5002f7ced2a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5c3dfdbbf06d5997079ac7339de5002f7ced2a3", "html_url": "https://github.com/rust-lang/rust/commit/f5c3dfdbbf06d5997079ac7339de5002f7ced2a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5c3dfdbbf06d5997079ac7339de5002f7ced2a3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8766bbdc30a297aaa249193f5513fb261ccef17c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8766bbdc30a297aaa249193f5513fb261ccef17c", "html_url": "https://github.com/rust-lang/rust/commit/8766bbdc30a297aaa249193f5513fb261ccef17c"}, {"sha": "b4a6047e4b4facf0662687b2c8c948421072526a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4a6047e4b4facf0662687b2c8c948421072526a", "html_url": "https://github.com/rust-lang/rust/commit/b4a6047e4b4facf0662687b2c8c948421072526a"}], "stats": {"total": 427, "additions": 419, "deletions": 8}, "files": [{"sha": "04ce701452b90de0c346efd4b8c8250f0e6d76f9", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f5c3dfdbbf06d5997079ac7339de5002f7ced2a3/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c3dfdbbf06d5997079ac7339de5002f7ced2a3/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=f5c3dfdbbf06d5997079ac7339de5002f7ced2a3", "patch": "@@ -216,12 +216,6 @@ impl<'tcx> Validator<'_, 'tcx> {\n                     return Err(Unpromotable);\n                 }\n \n-                // We cannot promote things that need dropping, since the promoted value\n-                // would not get dropped.\n-                if self.qualif_local::<qualifs::NeedsDrop>(place.local) {\n-                    return Err(Unpromotable);\n-                }\n-\n                 Ok(())\n             }\n             _ => bug!(),\n@@ -262,13 +256,17 @@ impl<'tcx> Validator<'_, 'tcx> {\n                 }\n             }\n         } else {\n-            let span = self.body.local_decls[local].source_info.span;\n-            span_bug!(span, \"{:?} not promotable, qualif_local shouldn't have been called\", local);\n+            false\n         }\n     }\n \n     fn validate_local(&mut self, local: Local) -> Result<(), Unpromotable> {\n         if let TempState::Defined { location: loc, uses, valid } = self.temps[local] {\n+            // We cannot promote things that need dropping, since the promoted value\n+            // would not get dropped.\n+            if self.qualif_local::<qualifs::NeedsDrop>(local) {\n+                return Err(Unpromotable);\n+            }\n             valid.or_else(|_| {\n                 let ok = {\n                     let block = &self.body[loc.block];"}, {"sha": "30ae730535ca6498f9b9893be83aeb4a050dc21f", "filename": "src/test/ui/consts/promoted_const_call.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f5c3dfdbbf06d5997079ac7339de5002f7ced2a3/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c3dfdbbf06d5997079ac7339de5002f7ced2a3/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call.rs?ref=f5c3dfdbbf06d5997079ac7339de5002f7ced2a3", "patch": "@@ -0,0 +1,19 @@\n+#![feature(const_mut_refs)]\n+#![feature(const_trait_impl)]\n+struct Panic;\n+impl const Drop for Panic { fn drop(&mut self) { panic!(); } }\n+pub const fn id<T>(x: T) -> T { x }\n+pub const C: () = {\n+    let _: &'static _ = &id(&Panic);\n+    //~^ ERROR: temporary value dropped while borrowed\n+    //~| ERROR: temporary value dropped while borrowed\n+};\n+\n+fn main() {\n+    let _: &'static _ = &id(&Panic);\n+    //~^ ERROR: temporary value dropped while borrowed\n+    //~| ERROR: temporary value dropped while borrowed\n+    let _: &'static _ = &&(Panic, 0).1;\n+    //~^ ERROR: temporary value dropped while borrowed\n+    //~| ERROR: temporary value dropped while borrowed\n+}"}, {"sha": "83cc16f6f94d695fc55633e696daecb6788a72c9", "filename": "src/test/ui/consts/promoted_const_call.stderr", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/f5c3dfdbbf06d5997079ac7339de5002f7ced2a3/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c3dfdbbf06d5997079ac7339de5002f7ced2a3/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call.stderr?ref=f5c3dfdbbf06d5997079ac7339de5002f7ced2a3", "patch": "@@ -0,0 +1,65 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call.rs:7:26\n+   |\n+LL |     let _: &'static _ = &id(&Panic);\n+   |            ----------    ^^^^^^^^^^ creates a temporary value which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+...\n+LL | };\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call.rs:7:30\n+   |\n+LL |     let _: &'static _ = &id(&Panic);\n+   |            ----------        ^^^^^ - temporary value is freed at the end of this statement\n+   |            |                 |\n+   |            |                 creates a temporary value which is freed while still in use\n+   |            type annotation requires that borrow lasts for `'static`\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call.rs:13:26\n+   |\n+LL |     let _: &'static _ = &id(&Panic);\n+   |            ----------    ^^^^^^^^^^ creates a temporary value which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call.rs:13:30\n+   |\n+LL |     let _: &'static _ = &id(&Panic);\n+   |            ----------        ^^^^^ - temporary value is freed at the end of this statement\n+   |            |                 |\n+   |            |                 creates a temporary value which is freed while still in use\n+   |            type annotation requires that borrow lasts for `'static`\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call.rs:16:26\n+   |\n+LL |     let _: &'static _ = &&(Panic, 0).1;\n+   |            ----------    ^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call.rs:16:27\n+   |\n+LL |     let _: &'static _ = &&(Panic, 0).1;\n+   |            ----------     ^^^^^^^^^^ creates a temporary value which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "f332cd18cea3743952cf0806812d0b788a3576e5", "filename": "src/test/ui/consts/promoted_const_call2.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f5c3dfdbbf06d5997079ac7339de5002f7ced2a3/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c3dfdbbf06d5997079ac7339de5002f7ced2a3/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call2.rs?ref=f5c3dfdbbf06d5997079ac7339de5002f7ced2a3", "patch": "@@ -0,0 +1,14 @@\n+#![feature(const_precise_live_drops)]\n+pub const fn id<T>(x: T) -> T { x }\n+pub const C: () = {\n+    let _: &'static _ = &id(&String::new());\n+    //~^ ERROR: temporary value dropped while borrowed\n+    //~| ERROR: temporary value dropped while borrowed\n+    //~| ERROR: destructor of `String` cannot be evaluated at compile-time\n+};\n+\n+fn main() {\n+    let _: &'static _ = &id(&String::new());\n+    //~^ ERROR: temporary value dropped while borrowed\n+    //~| ERROR: temporary value dropped while borrowed\n+}"}, {"sha": "13d864ed3dbbd05442363b20a8b38d3d45e6ee46", "filename": "src/test/ui/consts/promoted_const_call2.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f5c3dfdbbf06d5997079ac7339de5002f7ced2a3/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c3dfdbbf06d5997079ac7339de5002f7ced2a3/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call2.stderr?ref=f5c3dfdbbf06d5997079ac7339de5002f7ced2a3", "patch": "@@ -0,0 +1,50 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call2.rs:4:26\n+   |\n+LL |     let _: &'static _ = &id(&String::new());\n+   |            ----------    ^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+...\n+LL | };\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call2.rs:4:30\n+   |\n+LL |     let _: &'static _ = &id(&String::new());\n+   |            ----------        ^^^^^^^^^^^^^ - temporary value is freed at the end of this statement\n+   |            |                 |\n+   |            |                 creates a temporary value which is freed while still in use\n+   |            type annotation requires that borrow lasts for `'static`\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call2.rs:11:26\n+   |\n+LL |     let _: &'static _ = &id(&String::new());\n+   |            ----------    ^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call2.rs:11:30\n+   |\n+LL |     let _: &'static _ = &id(&String::new());\n+   |            ----------        ^^^^^^^^^^^^^ - temporary value is freed at the end of this statement\n+   |            |                 |\n+   |            |                 creates a temporary value which is freed while still in use\n+   |            type annotation requires that borrow lasts for `'static`\n+\n+error[E0493]: destructor of `String` cannot be evaluated at compile-time\n+  --> $DIR/promoted_const_call2.rs:4:30\n+   |\n+LL |     let _: &'static _ = &id(&String::new());\n+   |                              ^^^^^^^^^^^^^ the destructor for this type cannot be evaluated in constants\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0493, E0716.\n+For more information about an error, try `rustc --explain E0493`."}, {"sha": "6d68a2de70e471bc930a529b8a5c52ef4e34271d", "filename": "src/test/ui/consts/promoted_const_call3.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f5c3dfdbbf06d5997079ac7339de5002f7ced2a3/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c3dfdbbf06d5997079ac7339de5002f7ced2a3/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call3.rs?ref=f5c3dfdbbf06d5997079ac7339de5002f7ced2a3", "patch": "@@ -0,0 +1,26 @@\n+pub const fn id<T>(x: T) -> T { x }\n+pub const C: () = {\n+    let _: &'static _ = &String::new();\n+    //~^ ERROR: destructor of `String` cannot be evaluated at compile-time\n+    //~| ERROR: temporary value dropped while borrowed\n+\n+    let _: &'static _ = &id(&String::new());\n+    //~^ ERROR: destructor of `String` cannot be evaluated at compile-time\n+    //~| ERROR: temporary value dropped while borrowed\n+    //~| ERROR: temporary value dropped while borrowed\n+\n+    let _: &'static _ = &std::mem::ManuallyDrop::new(String::new());\n+    //~^ ERROR: temporary value dropped while borrowed\n+};\n+\n+fn main() {\n+    let _: &'static _ = &String::new();\n+    //~^ ERROR: temporary value dropped while borrowed\n+\n+    let _: &'static _ = &id(&String::new());\n+    //~^ ERROR: temporary value dropped while borrowed\n+    //~| ERROR: temporary value dropped while borrowed\n+\n+    let _: &'static _ = &std::mem::ManuallyDrop::new(String::new());\n+    //~^ ERROR: temporary value dropped while borrowed\n+}"}, {"sha": "af17457a10a1bcfae54c041e9c27e6356e6a2323", "filename": "src/test/ui/consts/promoted_const_call3.stderr", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/f5c3dfdbbf06d5997079ac7339de5002f7ced2a3/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c3dfdbbf06d5997079ac7339de5002f7ced2a3/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call3.stderr?ref=f5c3dfdbbf06d5997079ac7339de5002f7ced2a3", "patch": "@@ -0,0 +1,105 @@\n+error[E0493]: destructor of `String` cannot be evaluated at compile-time\n+  --> $DIR/promoted_const_call3.rs:7:30\n+   |\n+LL |     let _: &'static _ = &id(&String::new());\n+   |                              ^^^^^^^^^^^^^ - value is dropped here\n+   |                              |\n+   |                              the destructor for this type cannot be evaluated in constants\n+\n+error[E0493]: destructor of `String` cannot be evaluated at compile-time\n+  --> $DIR/promoted_const_call3.rs:3:26\n+   |\n+LL |     let _: &'static _ = &String::new();\n+   |                          ^^^^^^^^^^^^^ the destructor for this type cannot be evaluated in constants\n+...\n+LL | };\n+   | - value is dropped here\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call3.rs:3:26\n+   |\n+LL |     let _: &'static _ = &String::new();\n+   |            ----------    ^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+...\n+LL | };\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call3.rs:7:26\n+   |\n+LL |     let _: &'static _ = &id(&String::new());\n+   |            ----------    ^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+...\n+LL | };\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call3.rs:7:30\n+   |\n+LL |     let _: &'static _ = &id(&String::new());\n+   |            ----------        ^^^^^^^^^^^^^ - temporary value is freed at the end of this statement\n+   |            |                 |\n+   |            |                 creates a temporary value which is freed while still in use\n+   |            type annotation requires that borrow lasts for `'static`\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call3.rs:12:26\n+   |\n+LL |     let _: &'static _ = &std::mem::ManuallyDrop::new(String::new());\n+   |            ----------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+LL |\n+LL | };\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call3.rs:17:26\n+   |\n+LL |     let _: &'static _ = &String::new();\n+   |            ----------    ^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call3.rs:20:26\n+   |\n+LL |     let _: &'static _ = &id(&String::new());\n+   |            ----------    ^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call3.rs:20:30\n+   |\n+LL |     let _: &'static _ = &id(&String::new());\n+   |            ----------        ^^^^^^^^^^^^^ - temporary value is freed at the end of this statement\n+   |            |                 |\n+   |            |                 creates a temporary value which is freed while still in use\n+   |            type annotation requires that borrow lasts for `'static`\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call3.rs:24:26\n+   |\n+LL |     let _: &'static _ = &std::mem::ManuallyDrop::new(String::new());\n+   |            ----------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+LL |\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error: aborting due to 10 previous errors\n+\n+Some errors have detailed explanations: E0493, E0716.\n+For more information about an error, try `rustc --explain E0493`."}, {"sha": "82a17b7bf863f77822eb60d169f24ef525623e34", "filename": "src/test/ui/consts/promoted_const_call4.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f5c3dfdbbf06d5997079ac7339de5002f7ced2a3/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c3dfdbbf06d5997079ac7339de5002f7ced2a3/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call4.rs?ref=f5c3dfdbbf06d5997079ac7339de5002f7ced2a3", "patch": "@@ -0,0 +1,18 @@\n+// run-pass\n+\n+use std::sync::atomic::*;\n+\n+static FLAG: AtomicBool = AtomicBool::new(false);\n+\n+struct NoisyDrop(&'static str);\n+impl Drop for NoisyDrop {\n+    fn drop(&mut self) {\n+        FLAG.store(true, Ordering::SeqCst);\n+    }\n+}\n+fn main() {\n+    {\n+        let _val = &&(NoisyDrop(\"drop!\"), 0).1;\n+    }\n+    assert!(FLAG.load(Ordering::SeqCst));\n+}"}, {"sha": "3ac8d358ce4855e4621e077d5b17f616707559fe", "filename": "src/test/ui/consts/promoted_const_call5.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f5c3dfdbbf06d5997079ac7339de5002f7ced2a3/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c3dfdbbf06d5997079ac7339de5002f7ced2a3/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call5.rs?ref=f5c3dfdbbf06d5997079ac7339de5002f7ced2a3", "patch": "@@ -0,0 +1,42 @@\n+#![feature(rustc_attrs)]\n+#![feature(staged_api)]\n+#![stable(feature = \"a\", since = \"1.0.0\")]\n+\n+#[rustc_promotable]\n+#[stable(feature = \"a\", since = \"1.0.0\")]\n+#[rustc_const_stable(feature = \"a\", since = \"1.0.0\")]\n+pub const fn id<T>(x: &'static T) -> &'static T { x }\n+\n+#[rustc_promotable]\n+#[stable(feature = \"a\", since = \"1.0.0\")]\n+#[rustc_const_stable(feature = \"a\", since = \"1.0.0\")]\n+pub const fn new_string() -> String {\n+    String::new()\n+}\n+\n+#[rustc_promotable]\n+#[stable(feature = \"a\", since = \"1.0.0\")]\n+#[rustc_const_stable(feature = \"a\", since = \"1.0.0\")]\n+pub const fn new_manually_drop<T>(t: T) -> std::mem::ManuallyDrop<T>  {\n+    std::mem::ManuallyDrop::new(t)\n+}\n+\n+\n+const C: () = {\n+    let _: &'static _ = &id(&new_string());\n+    //~^ ERROR destructor of `String` cannot be evaluated at compile-time\n+    //~| ERROR: temporary value dropped while borrowed\n+    //~| ERROR: temporary value dropped while borrowed\n+\n+    let _: &'static _ = &new_manually_drop(new_string());\n+    //~^ ERROR: temporary value dropped while borrowed\n+};\n+\n+fn main() {\n+    let _: &'static _ = &id(&new_string());\n+    //~^ ERROR: temporary value dropped while borrowed\n+    //~| ERROR: temporary value dropped while borrowed\n+\n+    let _: &'static _ = &new_manually_drop(new_string());\n+    //~^ ERROR: temporary value dropped while borrowed\n+}"}, {"sha": "f736220b1833349e2af5cb20c7e977cadfbee338", "filename": "src/test/ui/consts/promoted_const_call5.stderr", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f5c3dfdbbf06d5997079ac7339de5002f7ced2a3/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c3dfdbbf06d5997079ac7339de5002f7ced2a3/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call5.stderr?ref=f5c3dfdbbf06d5997079ac7339de5002f7ced2a3", "patch": "@@ -0,0 +1,74 @@\n+error[E0493]: destructor of `String` cannot be evaluated at compile-time\n+  --> $DIR/promoted_const_call5.rs:26:30\n+   |\n+LL |     let _: &'static _ = &id(&new_string());\n+   |                              ^^^^^^^^^^^^ - value is dropped here\n+   |                              |\n+   |                              the destructor for this type cannot be evaluated in constants\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call5.rs:26:26\n+   |\n+LL |     let _: &'static _ = &id(&new_string());\n+   |            ----------    ^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+...\n+LL | };\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call5.rs:26:30\n+   |\n+LL |     let _: &'static _ = &id(&new_string());\n+   |                          ----^^^^^^^^^^^^-- temporary value is freed at the end of this statement\n+   |                          |   |\n+   |                          |   creates a temporary value which is freed while still in use\n+   |                          argument requires that borrow lasts for `'static`\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call5.rs:31:26\n+   |\n+LL |     let _: &'static _ = &new_manually_drop(new_string());\n+   |            ----------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+LL |\n+LL | };\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call5.rs:36:26\n+   |\n+LL |     let _: &'static _ = &id(&new_string());\n+   |            ----------    ^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call5.rs:36:30\n+   |\n+LL |     let _: &'static _ = &id(&new_string());\n+   |                          ----^^^^^^^^^^^^-- temporary value is freed at the end of this statement\n+   |                          |   |\n+   |                          |   creates a temporary value which is freed while still in use\n+   |                          argument requires that borrow lasts for `'static`\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call5.rs:40:26\n+   |\n+LL |     let _: &'static _ = &new_manually_drop(new_string());\n+   |            ----------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+LL |\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error: aborting due to 7 previous errors\n+\n+Some errors have detailed explanations: E0493, E0716.\n+For more information about an error, try `rustc --explain E0493`."}]}