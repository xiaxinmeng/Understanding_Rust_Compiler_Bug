{"sha": "4c4fc7512eff62f5cc63a1a30f4474db003884c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNGZjNzUxMmVmZjYyZjVjYzYzYTFhMzBmNDQ3NGRiMDAzODg0Yzk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-16T09:33:47Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-18T15:10:26Z"}, "message": "rustc: reintroduce lifetime bounds where necessary.", "tree": {"sha": "92c659f2e003119d2f7e1799a35e930c1eb071bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92c659f2e003119d2f7e1799a35e930c1eb071bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c4fc7512eff62f5cc63a1a30f4474db003884c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c4fc7512eff62f5cc63a1a30f4474db003884c9", "html_url": "https://github.com/rust-lang/rust/commit/4c4fc7512eff62f5cc63a1a30f4474db003884c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c4fc7512eff62f5cc63a1a30f4474db003884c9/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "356a37d8d1e9c62481970c36ef45fe7f4f936549", "url": "https://api.github.com/repos/rust-lang/rust/commits/356a37d8d1e9c62481970c36ef45fe7f4f936549", "html_url": "https://github.com/rust-lang/rust/commit/356a37d8d1e9c62481970c36ef45fe7f4f936549"}], "stats": {"total": 66, "additions": 36, "deletions": 30}, "files": [{"sha": "68cbef4407677f5a202f2089a247f8489f1b2b3f", "filename": "src/librustc/infer/lattice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flattice.rs?ref=4c4fc7512eff62f5cc63a1a30f4474db003884c9", "patch": "@@ -41,7 +41,7 @@ pub trait LatticeDir<'f, 'tcx>: TypeRelation<'tcx> {\n     fn relate_bound(&mut self, v: Ty<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, ()>;\n }\n \n-pub fn super_lattice_tys<'a, 'tcx, L>(\n+pub fn super_lattice_tys<'a, 'tcx: 'a, L>(\n     this: &mut L,\n     a: Ty<'tcx>,\n     b: Ty<'tcx>,"}, {"sha": "7c4742259ac161cae85c08cb00fb93e66010d910", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=4c4fc7512eff62f5cc63a1a30f4474db003884c9", "patch": "@@ -3788,9 +3788,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         matcher.relate(previous, current).is_ok()\n     }\n \n-    fn push_stack<'o, 's>(\n+    fn push_stack<'o>(\n         &mut self,\n-        previous_stack: TraitObligationStackList<'s, 'tcx>,\n+        previous_stack: TraitObligationStackList<'o, 'tcx>,\n         obligation: &'o TraitObligation<'tcx>,\n     ) -> TraitObligationStack<'o, 'tcx> {\n         let fresh_trait_ref = obligation"}, {"sha": "ba96865d23bd1cca6b9f180cb5e29bf4334e0b0c", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=4c4fc7512eff62f5cc63a1a30f4474db003884c9", "patch": "@@ -366,7 +366,7 @@ pub fn memcpy_ty<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx.memcpy(dst, dst_align, src, src_align, bx.cx().const_usize(size), flags);\n }\n \n-pub fn codegen_instance<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n+pub fn codegen_instance<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n     cx: &'a Bx::CodegenCx,\n     instance: Instance<'tcx>,\n ) {"}, {"sha": "4446f1a3a5ce2b28bb09e39132e38c46f168236b", "filename": "src/librustc_codegen_ssa/mono_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc_codegen_ssa%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc_codegen_ssa%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmono_item.rs?ref=4c4fc7512eff62f5cc63a1a30f4474db003884c9", "patch": "@@ -17,7 +17,7 @@ pub trait MonoItemExt<'a, 'tcx> {\n     fn to_raw_string(&self) -> String;\n }\n \n-impl<'a, 'tcx> MonoItemExt<'a, 'tcx> for MonoItem<'tcx> {\n+impl<'a, 'tcx: 'a> MonoItemExt<'a, 'tcx> for MonoItem<'tcx> {\n     fn define<Bx: BuilderMethods<'a, 'tcx>>(&self, cx: &'a Bx::CodegenCx) {\n         debug!(\"BEGIN IMPLEMENTING '{} ({})' in cgu {}\",\n                self.to_string(cx.tcx(), true),"}, {"sha": "6a01d7454bee5d23f761f02467ad3506e546a0ad", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=4c4fc7512eff62f5cc63a1a30f4474db003884c9", "patch": "@@ -289,11 +289,14 @@ impl<'a> CrateLoader<'a> {\n         (cnum, cmeta)\n     }\n \n-    fn load_proc_macro<'b> (\n+    fn load_proc_macro<'b>(\n         &mut self,\n         locate_ctxt: &mut locator::Context<'b>,\n         path_kind: PathKind,\n-    ) -> Option<(LoadResult, Option<Library>)> {\n+    ) -> Option<(LoadResult, Option<Library>)>\n+    where\n+        'a: 'b,\n+    {\n         // Use a new locator Context so trying to load a proc macro doesn't affect the error\n         // message we emit\n         let mut proc_macro_locator = locate_ctxt.clone();"}, {"sha": "f78cc2f38a93a7977a6613c6d7e80a1e0a6472ba", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=4c4fc7512eff62f5cc63a1a30f4474db003884c9", "patch": "@@ -38,7 +38,7 @@ use log::debug;\n pub struct DecodeContext<'a, 'tcx> {\n     opaque: opaque::Decoder<'a>,\n     cdata: Option<&'a CrateMetadata>,\n-    sess: Option<&'a Session>,\n+    sess: Option<&'tcx Session>,\n     tcx: Option<TyCtxt<'tcx>>,\n \n     // Cache the last used source_file for translating spans as an optimization.\n@@ -54,10 +54,8 @@ pub struct DecodeContext<'a, 'tcx> {\n pub trait Metadata<'a, 'tcx>: Copy {\n     fn raw_bytes(self) -> &'a [u8];\n     fn cdata(self) -> Option<&'a CrateMetadata> { None }\n-    fn sess(self) -> Option<&'a Session> { None }\n-    fn tcx(self) -> Option<TyCtxt<'tcx>> {\n-        None\n-        }\n+    fn sess(self) -> Option<&'tcx Session> { None }\n+    fn tcx(self) -> Option<TyCtxt<'tcx>> { None }\n \n     fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> {\n         let tcx = self.tcx();\n@@ -82,13 +80,13 @@ impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a MetadataBlob {\n }\n \n \n-impl<'a, 'tcx> Metadata<'a, 'tcx> for (&'a MetadataBlob, &'a Session) {\n+impl<'a, 'tcx> Metadata<'a, 'tcx> for (&'a MetadataBlob, &'tcx Session) {\n     fn raw_bytes(self) -> &'a [u8] {\n         let (blob, _) = self;\n         &blob.0\n     }\n \n-    fn sess(self) -> Option<&'a Session> {\n+    fn sess(self) -> Option<&'tcx Session> {\n         let (_, sess) = self;\n         Some(sess)\n     }\n@@ -104,14 +102,14 @@ impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a CrateMetadata {\n     }\n }\n \n-impl<'a, 'tcx> Metadata<'a, 'tcx> for (&'a CrateMetadata, &'a Session) {\n+impl<'a, 'tcx> Metadata<'a, 'tcx> for (&'a CrateMetadata, &'tcx Session) {\n     fn raw_bytes(self) -> &'a [u8] {\n         self.0.raw_bytes()\n     }\n     fn cdata(self) -> Option<&'a CrateMetadata> {\n         Some(self.0)\n     }\n-    fn sess(self) -> Option<&'a Session> {\n+    fn sess(self) -> Option<&'tcx Session> {\n         Some(&self.1)\n     }\n }\n@@ -136,11 +134,11 @@ impl<'a, 'tcx, T: Decodable> Lazy<T> {\n     }\n }\n \n-impl<'a, 'tcx, T: Decodable> LazySeq<T> {\n+impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable> LazySeq<T> {\n     pub fn decode<M: Metadata<'a, 'tcx>>(\n         self,\n         meta: M,\n-    ) -> impl Iterator<Item = T> + Captures<'tcx> + 'a {\n+    ) -> impl Iterator<Item = T> + Captures<'a> + Captures<'tcx> + 'x {\n         let mut dcx = meta.decoder(self.position);\n         dcx.lazy_state = LazyState::NodeStart(self.position);\n         (0..self.len).map(move |_| T::decode(&mut dcx).unwrap())"}, {"sha": "afdc9f5c02ae1e45b9771e47e131ea71a351d9d7", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=4c4fc7512eff62f5cc63a1a30f4474db003884c9", "patch": "@@ -1693,7 +1693,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     fn move_path_closest_to<'a>(\n         &mut self,\n         place: &'a Place<'tcx>,\n-    ) -> Result<(&'a Place<'tcx>, MovePathIndex), NoMovePathFound> {\n+    ) -> Result<(&'a Place<'tcx>, MovePathIndex), NoMovePathFound> where 'cx: 'a {\n         let mut last_prefix = place;\n         for prefix in self.prefixes(place, PrefixSet::All) {\n             if let Some(mpi) = self.move_path_for_place(prefix) {"}, {"sha": "55093f28a42e16e61682b60493500e94445fd130", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=4c4fc7512eff62f5cc63a1a30f4474db003884c9", "patch": "@@ -1691,7 +1691,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         &mut self,\n         block: BasicBlock,\n         bindings: impl IntoIterator<Item = &'b Binding<'tcx>>,\n-    ) {\n+    ) where 'tcx: 'b {\n         debug!(\"bind_matched_candidate_for_arm_body(block={:?})\", block);\n \n         let re_erased = self.hir.tcx().lifetimes.re_erased;"}, {"sha": "8f91ba23e23b80d2283cb06eb68e4b380ad7bb4c", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=4c4fc7512eff62f5cc63a1a30f4474db003884c9", "patch": "@@ -297,7 +297,7 @@ impl<'a, 'tcx, BD> DataflowBuilder<'a, 'tcx, BD> where BD: BitDenotation<'tcx>\n /// underlying flow analysis results, because it needs to handle cases\n /// where we are combining the results of *multiple* flow analyses\n /// (e.g., borrows + inits + uninits).\n-pub(crate) trait DataflowResultsConsumer<'a, 'tcx> {\n+pub(crate) trait DataflowResultsConsumer<'a, 'tcx: 'a> {\n     type FlowState: FlowsAtLocation;\n \n     // Observation Hooks: override (at least one of) these to get analysis feedback."}, {"sha": "f5817694c50a34f6791729154d595ddc5aa2c87c", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=4c4fc7512eff62f5cc63a1a30f4474db003884c9", "patch": "@@ -709,7 +709,8 @@ fn all_constructors<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n fn max_slice_length<'p, 'a, 'tcx, I>(\n     cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     patterns: I) -> u64\n-    where I: Iterator<Item=&'p Pattern<'tcx>>\n+    where I: Iterator<Item=&'p Pattern<'tcx>>,\n+        'tcx: 'p,\n {\n     // The exhaustiveness-checking paper does not include any details on\n     // checking variable-length slice patterns. However, they are matched\n@@ -1709,7 +1710,7 @@ fn patterns_for_variant<'p, 'tcx>(\n /// different patterns.\n /// Structure patterns with a partial wild pattern (Foo { a: 42, .. }) have their missing\n /// fields filled with wild patterns.\n-fn specialize<'p, 'a, 'tcx>(\n+fn specialize<'p, 'a: 'p, 'tcx>(\n     cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     r: &[&'p Pattern<'tcx>],\n     constructor: &Constructor<'tcx>,"}, {"sha": "9150f16526ba7ee7c7b6551279c874862eebe4fe", "filename": "src/librustc_mir/interpret/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs?ref=4c4fc7512eff62f5cc63a1a30f4474db003884c9", "patch": "@@ -122,7 +122,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Value<'mir, 'tcx, M> for MPlaceTy<'tcx,\n macro_rules! make_value_visitor {\n     ($visitor_trait_name:ident, $($mutability:ident)?) => {\n         // How to traverse a value and what to do when we are at the leaves.\n-        pub trait $visitor_trait_name<'mir, 'tcx, M: Machine<'mir, 'tcx>>: Sized {\n+        pub trait $visitor_trait_name<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>>: Sized {\n             type V: Value<'mir, 'tcx, M>;\n \n             /// The visitor must have an `InterpretCx` in it."}, {"sha": "32e4d4f437a7884605833461241ca0734c0f9bad", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=4c4fc7512eff62f5cc63a1a30f4474db003884c9", "patch": "@@ -766,9 +766,10 @@ fn numbered_codegen_unit_name(\n     name_builder.build_cgu_name_no_mangle(LOCAL_CRATE, &[\"cgu\"], Some(index))\n }\n \n-fn debug_dump<'a, 'b, 'tcx, I>(tcx: TyCtxt<'tcx>, label: &str, cgus: I)\n+fn debug_dump<'a, 'tcx, I>(tcx: TyCtxt<'tcx>, label: &str, cgus: I)\n where\n-    I: Iterator<Item = &'b CodegenUnit<'tcx>>,\n+    I: Iterator<Item = &'a CodegenUnit<'tcx>>,\n+    'tcx: 'a,\n {\n     if cfg!(debug_assertions) {\n         debug!(\"{}\", label);\n@@ -796,6 +797,7 @@ where\n fn assert_symbols_are_distinct<'a, 'tcx, I>(tcx: TyCtxt<'tcx>, mono_items: I)\n where\n     I: Iterator<Item = &'a MonoItem<'tcx>>,\n+    'tcx: 'a,\n {\n     let mut symbols: Vec<_> = mono_items.map(|mono_item| {\n         (mono_item, mono_item.symbol_name(tcx))"}, {"sha": "002ff4b0b089f04ea4a29ac9c17e053a4fe1b83e", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=4c4fc7512eff62f5cc63a1a30f4474db003884c9", "patch": "@@ -111,7 +111,8 @@ pub fn elaborate_drop<'b, 'tcx, D>(\n     succ: BasicBlock,\n     unwind: Unwind,\n     bb: BasicBlock)\n-    where D: DropElaborator<'b, 'tcx>\n+    where D: DropElaborator<'b, 'tcx>,\n+    'tcx: 'b,\n {\n     DropCtxt {\n         elaborator, source_info, place, path, succ, unwind\n@@ -121,6 +122,7 @@ pub fn elaborate_drop<'b, 'tcx, D>(\n impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n where\n     D: DropElaborator<'b, 'tcx>,\n+    'tcx: 'b,\n {\n     fn place_ty(&self, place: &Place<'tcx>) -> Ty<'tcx> {\n         place.ty(self.elaborator.body(), self.tcx()).ty"}, {"sha": "bc813b3d5a2e7584e72b143d83d3c31b4506dd51", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=4c4fc7512eff62f5cc63a1a30f4474db003884c9", "patch": "@@ -960,8 +960,8 @@ impl<'l> PathCollector<'l> {\n     }\n }\n \n-impl<'l, 'a> Visitor<'a> for PathCollector<'l> {\n-    fn visit_pat(&mut self, p: &'a ast::Pat) {\n+impl<'l> Visitor<'l> for PathCollector<'l> {\n+    fn visit_pat(&mut self, p: &'l ast::Pat) {\n         match p.node {\n             PatKind::Struct(ref path, ..) => {\n                 self.collected_paths.push((p.id, path));"}, {"sha": "5606d9c0ce815157a7b943d8096cae7d2aa5bd90", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4fc7512eff62f5cc63a1a30f4474db003884c9/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=4c4fc7512eff62f5cc63a1a30f4474db003884c9", "patch": "@@ -1786,7 +1786,7 @@ fn impl_polarity<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> hir::ImplPolarity {\n /// the lifetimes that are declared. For fns or methods, we have to\n /// screen out those that do not appear in any where-clauses etc using\n /// `resolve_lifetime::early_bound_lifetimes`.\n-fn early_bound_lifetimes_from_generics<'a, 'tcx>(\n+fn early_bound_lifetimes_from_generics<'a, 'tcx: 'a>(\n     tcx: TyCtxt<'tcx>,\n     generics: &'a hir::Generics,\n ) -> impl Iterator<Item = &'a hir::GenericParam> + Captures<'tcx> {"}]}