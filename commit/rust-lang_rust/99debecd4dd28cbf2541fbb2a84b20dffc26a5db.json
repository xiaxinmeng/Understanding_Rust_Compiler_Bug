{"sha": "99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZGViZWNkNGRkMjhjYmYyNTQxZmJiMmE4NGIyMGRmZmMyNmE1ZGI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-03T12:23:08Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-03T12:23:08Z"}, "message": "warn about each skipped feature gate", "tree": {"sha": "9cb563c1d75c492042daa244e054c89c8f42099b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cb563c1d75c492042daa244e054c89c8f42099b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "html_url": "https://github.com/rust-lang/rust/commit/99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89666ab6b405ba95ba4a32da7ebe95d8f89b73d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/89666ab6b405ba95ba4a32da7ebe95d8f89b73d2", "html_url": "https://github.com/rust-lang/rust/commit/89666ab6b405ba95ba4a32da7ebe95d8f89b73d2"}], "stats": {"total": 688, "additions": 343, "deletions": 345}, "files": [{"sha": "5c1c3582d5c3bd360c127923703572e383744a70", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -253,13 +253,7 @@ impl Validator<'mir, 'tcx> {\n         let is_unleashable = O::IS_SUPPORTED_IN_MIRI;\n \n         if is_unleashable && self.tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you {\n-            // Use `def_span` to deduplicate all warnings for the same const.\n-            self.tcx.sess.span_warn(self.tcx.def_span(self.def_id), \"skipping const checks\");\n-            if let Some(feature) = O::feature_gate() {\n-                // We'd like to use `delay_span_bug` here, but we cannot as that ICEs\n-                // before codegen has the chance to emit errors.  So we use a custom system instead.\n-                self.tcx.sess.miri_unleashed_feature(feature);\n-            }\n+            self.tcx.sess.miri_unleashed_feature(span, O::feature_gate());\n             return;\n         }\n "}, {"sha": "922850f994004979a3f0eddacabf1584da4d151e", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -27,7 +27,6 @@ use rustc_target::spec::{PanicStrategy, RelocModel, RelroLevel, Target, TargetTr\n \n use std::cell::{self, RefCell};\n use std::env;\n-use std::fmt::Write as _;\n use std::io::Write;\n use std::num::NonZeroU32;\n use std::path::PathBuf;\n@@ -144,9 +143,11 @@ pub struct Session {\n     /// and immediately printing the backtrace to stderr.\n     pub ctfe_backtrace: Lock<CtfeBacktrace>,\n \n-    /// This tracks whether `-Zunleash-the-miri-inside-of-you` was used to get around a\n-    /// feature gate.  If yes, this file must fail to compile.\n-    miri_unleashed_features: Lock<FxHashSet<Symbol>>,\n+    /// This tracks where `-Zunleash-the-miri-inside-of-you` was used to get around a\n+    /// const check, optionally with the relevant feature gate.  We use this to\n+    /// warn about unleashing, but with a single diagnostic instead of dozens that\n+    /// drown everything else in noise.\n+    miri_unleashed_features: Lock<Vec<(Span, Option<Symbol>)>>,\n \n     /// Base directory containing the `src/` for the Rust standard library, and\n     /// potentially `rustc` as well, if we can can find it. Right now it's always\n@@ -195,29 +196,34 @@ impl From<&'static lint::Lint> for DiagnosticMessageId {\n }\n \n impl Session {\n-    pub fn miri_unleashed_feature(&self, s: Symbol) {\n-        self.miri_unleashed_features.lock().insert(s);\n+    pub fn miri_unleashed_feature(&self, span: Span, feature_gate: Option<Symbol>) {\n+        self.miri_unleashed_features.lock().push((span, feature_gate));\n     }\n \n     fn check_miri_unleashed_features(&self) {\n-        if !self.has_errors_or_delayed_span_bugs() {\n-            let unleashed_features = self.miri_unleashed_features.lock();\n-            if !unleashed_features.is_empty() {\n-                // Join the strings (itertools has it but libstd does not...)\n-                let mut list = String::new();\n-                for feature in unleashed_features.iter() {\n-                    if !list.is_empty() {\n-                        list.push_str(\", \");\n-                    }\n-                    write!(&mut list, \"{}\", feature).unwrap();\n+        let unleashed_features = self.miri_unleashed_features.lock();\n+        if !unleashed_features.is_empty() {\n+            let mut must_err = false;\n+            // Create a diagnostic pointing at where things got unleashed.\n+            let mut diag = self.struct_warn(\"skipping const checks\");\n+            for &(span, feature_gate) in unleashed_features.iter() {\n+                // FIXME: `span_label` doesn't do anything, so we use \"help\" as a hack.\n+                if let Some(feature_gate) = feature_gate {\n+                    diag.span_help(span, &format!(\"skipping check for `{}` feature\", feature_gate));\n+                    // The unleash flag must *not* be used to just \"hack around\" feature gates.\n+                    must_err = true;\n+                } else {\n+                    diag.span_help(span, \"skipping check that does not even have a feature gate\");\n                 }\n+            }\n+            diag.emit();\n+            // If we should err, make sure we did.\n+            if must_err && !self.has_errors() {\n                 // We have skipped a feature gate, and not run into other errors... reject.\n-                self.err(&format!(\n+                self.err(\n                     \"`-Zunleash-the-miri-inside-of-you` may not be used to circumvent feature \\\n-                    gates, except when testing error paths in the CTFE engine.\\n\\\n-                    The following feature flags are missing from this crate: {}\",\n-                    list,\n-                ));\n+                     gates, except when testing error paths in the CTFE engine\"\n+                );\n             }\n         }\n     }"}, {"sha": "045fe9ad11a91cd830f5c06d3320c5018ac1c248", "filename": "src/test/ui/consts/const-eval/const_fn_ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.rs?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -8,15 +8,15 @@ const fn double_const(x: usize) -> usize { x * 2 }\n const X: fn(usize) -> usize = double;\n const X_CONST: fn(usize) -> usize = double_const;\n \n-const fn bar(x: usize) -> usize { //~ WARNING skipping const checks\n+const fn bar(x: usize) -> usize {\n     X(x)\n }\n \n-const fn bar_const(x: usize) -> usize { //~ WARNING skipping const checks\n+const fn bar_const(x: usize) -> usize {\n     X_CONST(x)\n }\n \n-const fn foo(x: fn(usize) -> usize, y: usize)  -> usize { //~ WARNING skipping const checks\n+const fn foo(x: fn(usize) -> usize, y: usize)  -> usize {\n     x(y)\n }\n "}, {"sha": "d0ae94079da2eaa4923dcd245628f37ef81e6ec3", "filename": "src/test/ui/consts/const-eval/const_fn_ptr.stderr", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -1,26 +1,20 @@\n warning: skipping const checks\n-  --> $DIR/const_fn_ptr.rs:11:1\n    |\n-LL | / const fn bar(x: usize) -> usize {\n-LL | |     X(x)\n-LL | | }\n-   | |_^\n-\n-warning: skipping const checks\n-  --> $DIR/const_fn_ptr.rs:15:1\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_fn_ptr.rs:12:5\n    |\n-LL | / const fn bar_const(x: usize) -> usize {\n-LL | |     X_CONST(x)\n-LL | | }\n-   | |_^\n-\n-warning: skipping const checks\n-  --> $DIR/const_fn_ptr.rs:19:1\n+LL |     X(x)\n+   |     ^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_fn_ptr.rs:16:5\n+   |\n+LL |     X_CONST(x)\n+   |     ^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_fn_ptr.rs:20:5\n    |\n-LL | / const fn foo(x: fn(usize) -> usize, y: usize)  -> usize {\n-LL | |     x(y)\n-LL | | }\n-   | |_^\n+LL |     x(y)\n+   |     ^^^^\n \n-warning: 3 warnings emitted\n+warning: 1 warning emitted\n "}, {"sha": "14bd6558e7f898fb4d575ccdc7319c3db0ee9b24", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.rs?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -6,7 +6,7 @@\n fn double(x: usize) -> usize { x * 2 }\n const X: fn(usize) -> usize = double;\n \n-const fn bar(x: usize) -> usize { //~ WARNING skipping const checks\n+const fn bar(x: usize) -> usize {\n     X(x) // FIXME: this should error someday\n }\n "}, {"sha": "0a7182fd39c6872b71f67880029f43ece3bbb459", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.stderr?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -1,10 +1,10 @@\n warning: skipping const checks\n-  --> $DIR/const_fn_ptr_fail.rs:9:1\n    |\n-LL | / const fn bar(x: usize) -> usize {\n-LL | |     X(x) // FIXME: this should error someday\n-LL | | }\n-   | |_^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_fn_ptr_fail.rs:10:5\n+   |\n+LL |     X(x) // FIXME: this should error someday\n+   |     ^^^^\n \n warning: 1 warning emitted\n "}, {"sha": "f67871e6142ef0eb420adab2c4892bd48969e85f", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -9,7 +9,7 @@ fn double(x: usize) -> usize {\n }\n const X: fn(usize) -> usize = double;\n \n-const fn bar(x: fn(usize) -> usize, y: usize) -> usize { //~ WARN skipping const checks\n+const fn bar(x: fn(usize) -> usize, y: usize) -> usize {\n     x(y)\n }\n "}, {"sha": "90ee2afa315d815a965c51f6f1ddf8289fa62dc2", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -1,11 +1,3 @@\n-warning: skipping const checks\n-  --> $DIR/const_fn_ptr_fail2.rs:12:1\n-   |\n-LL | / const fn bar(x: fn(usize) -> usize, y: usize) -> usize {\n-LL | |     x(y)\n-LL | | }\n-   | |_^\n-\n error[E0080]: evaluation of constant expression failed\n   --> $DIR/const_fn_ptr_fail2.rs:20:5\n    |\n@@ -26,6 +18,14 @@ LL |     assert_eq!(Z, 4);\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_fn_ptr_fail2.rs:13:5\n+   |\n+LL |     x(y)\n+   |     ^^^^\n+\n error: aborting due to 2 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "7087b6e6a6764eab2b8d4041c1b05697250e738a", "filename": "src/test/ui/consts/const-points-to-static.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.rs?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -3,8 +3,9 @@\n #![allow(dead_code)]\n \n const TEST: &u8 = &MY_STATIC;\n-//~^ skipping const checks\n-//~| it is undefined behavior to use this value\n+//~^ ERROR it is undefined behavior to use this value\n+//~| NOTE  encountered a reference pointing to a static variable\n+//~| NOTE\n \n static MY_STATIC: u8 = 4;\n "}, {"sha": "465537fb3d5eac5987274314f0c8d6ea8533deb6", "filename": "src/test/ui/consts/const-points-to-static.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.stderr?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -1,9 +1,3 @@\n-warning: skipping const checks\n-  --> $DIR/const-points-to-static.rs:5:1\n-   |\n-LL | const TEST: &u8 = &MY_STATIC;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-points-to-static.rs:5:1\n    |\n@@ -12,6 +6,14 @@ LL | const TEST: &u8 = &MY_STATIC;\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const-points-to-static.rs:5:20\n+   |\n+LL | const TEST: &u8 = &MY_STATIC;\n+   |                    ^^^^^^^^^\n+\n error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "13b1b2d14125b77883f559ef5fa303bb278ace38", "filename": "src/test/ui/consts/const-prop-read-static-in-const.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.rs?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -3,7 +3,6 @@\n #![allow(dead_code)]\n \n const TEST: u8 = MY_STATIC; //~ ERROR any use of this value will cause an error\n-//~^ skipping const checks\n \n static MY_STATIC: u8 = 4;\n "}, {"sha": "7a517d1d7b3638820dfb1c15f5238ba9f68ca3af", "filename": "src/test/ui/consts/const-prop-read-static-in-const.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-read-static-in-const.stderr?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -1,9 +1,3 @@\n-warning: skipping const checks\n-  --> $DIR/const-prop-read-static-in-const.rs:5:1\n-   |\n-LL | const TEST: u8 = MY_STATIC;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: any use of this value will cause an error\n   --> $DIR/const-prop-read-static-in-const.rs:5:18\n    |\n@@ -14,5 +8,13 @@ LL | const TEST: u8 = MY_STATIC;\n    |\n    = note: `#[deny(const_err)]` on by default\n \n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const-prop-read-static-in-const.rs:5:18\n+   |\n+LL | const TEST: u8 = MY_STATIC;\n+   |                  ^^^^^^^^^\n+\n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "ae440d4f8f7b57881049d77fd6177209d9e75978", "filename": "src/test/ui/consts/miri_unleashed/abi-mismatch.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.rs?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -7,15 +7,13 @@\n const extern \"C\" fn c_fn() {}\n \n const fn call_rust_fn(my_fn: extern \"Rust\" fn()) {\n-//~^ WARN skipping const checks\n     my_fn();\n     //~^ ERROR could not evaluate static initializer\n     //~| NOTE calling a function with ABI C using caller ABI Rust\n     //~| NOTE inside `call_rust_fn`\n }\n \n static VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });\n-//~^ WARN skipping const checks\n-//~| NOTE inside `VAL`\n+//~^ NOTE inside `VAL`\n \n fn main() {}"}, {"sha": "d55090c75e614ebcb4871d23168dfb31caa16473", "filename": "src/test/ui/consts/miri_unleashed/abi-mismatch.stderr", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fabi-mismatch.stderr?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -1,33 +1,28 @@\n-warning: skipping const checks\n-  --> $DIR/abi-mismatch.rs:9:1\n-   |\n-LL | / const fn call_rust_fn(my_fn: extern \"Rust\" fn()) {\n-LL | |\n-LL | |     my_fn();\n-LL | |\n-LL | |\n-LL | |\n-LL | | }\n-   | |_^\n-\n-warning: skipping const checks\n-  --> $DIR/abi-mismatch.rs:17:1\n-   |\n-LL | static VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0080]: could not evaluate static initializer\n-  --> $DIR/abi-mismatch.rs:11:5\n+  --> $DIR/abi-mismatch.rs:10:5\n    |\n LL |     my_fn();\n    |     ^^^^^^^\n    |     |\n    |     calling a function with ABI C using caller ABI Rust\n-   |     inside `call_rust_fn` at $DIR/abi-mismatch.rs:11:5\n+   |     inside `call_rust_fn` at $DIR/abi-mismatch.rs:10:5\n ...\n LL | static VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });\n-   |                  --------------------------------------------------------------------- inside `VAL` at $DIR/abi-mismatch.rs:17:18\n+   |                  --------------------------------------------------------------------- inside `VAL` at $DIR/abi-mismatch.rs:16:18\n+\n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/abi-mismatch.rs:10:5\n+   |\n+LL |     my_fn();\n+   |     ^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/abi-mismatch.rs:16:40\n+   |\n+LL | static VAL: () = call_rust_fn(unsafe { std::mem::transmute(c_fn as extern \"C\" fn()) });\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "5f520c2cfdbce18dee90b886cc880d35bf4e112e", "filename": "src/test/ui/consts/miri_unleashed/assoc_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.rs?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -11,7 +11,7 @@ trait Foo<T> {\n }\n \n trait Bar<T, U: Foo<T>> {\n-    const F: u32 = (U::X, 42).1; //~ WARN skipping const checks\n+    const F: u32 = (U::X, 42).1;\n }\n \n impl Foo<u32> for () {"}, {"sha": "193a49bb2666f4f458567869bd90a625d4e297a8", "filename": "src/test/ui/consts/miri_unleashed/assoc_const.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fassoc_const.stderr?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -1,15 +1,17 @@\n-warning: skipping const checks\n-  --> $DIR/assoc_const.rs:14:5\n-   |\n-LL |     const F: u32 = (U::X, 42).1;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0080]: erroneous constant used\n   --> $DIR/assoc_const.rs:31:13\n    |\n LL |     let y = <String as Bar<Vec<u32>, String>>::F;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/assoc_const.rs:14:20\n+   |\n+LL |     const F: u32 = (U::X, 42).1;\n+   |                    ^^^^^^^^^^\n+\n error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "133ac7649c81c1886d1b38597cb49f763e612d7a", "filename": "src/test/ui/consts/miri_unleashed/box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -6,7 +6,7 @@ use std::mem::ManuallyDrop;\n \n fn main() {}\n \n-static TEST_BAD: &mut i32 = { //~ WARN skipping const checks\n+static TEST_BAD: &mut i32 = {\n     &mut *(box 0)\n     //~^ ERROR could not evaluate static initializer\n     //~| NOTE heap allocations"}, {"sha": "768b795ca5b392b8c93b345150bd85b65879ec17", "filename": "src/test/ui/consts/miri_unleashed/box.stderr", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.stderr?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -1,19 +1,32 @@\n-warning: skipping const checks\n-  --> $DIR/box.rs:9:1\n-   |\n-LL | / static TEST_BAD: &mut i32 = {\n-LL | |     &mut *(box 0)\n-LL | |\n-LL | |\n-LL | | };\n-   | |__^\n-\n error[E0080]: could not evaluate static initializer\n   --> $DIR/box.rs:10:11\n    |\n LL |     &mut *(box 0)\n    |           ^^^^^^^ \"heap allocations via `box` keyword\" needs an rfc before being allowed inside constants\n \n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/box.rs:10:11\n+   |\n+LL |     &mut *(box 0)\n+   |           ^^^^^^^\n+help: skipping check for `const_mut_refs` feature\n+  --> $DIR/box.rs:10:16\n+   |\n+LL |     &mut *(box 0)\n+   |                ^\n+help: skipping check for `const_mut_refs` feature\n+  --> $DIR/box.rs:10:5\n+   |\n+LL |     &mut *(box 0)\n+   |     ^^^^^^^^^^^^^\n+help: skipping check for `const_mut_refs` feature\n+  --> $DIR/box.rs:10:5\n+   |\n+LL |     &mut *(box 0)\n+   |     ^^^^^^^^^^^^^\n+\n error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "a769bfd78d30d9e20d6700c9c814925c240e2101", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -9,20 +9,17 @@ use std::sync::atomic::Ordering;\n // when *using* the const.\n \n const MUTATE_INTERIOR_MUT: usize = {\n-//~^ WARN skipping const checks\n     static FOO: AtomicUsize = AtomicUsize::new(0);\n     FOO.fetch_add(1, Ordering::Relaxed)\n };\n \n const READ_INTERIOR_MUT: usize = {\n-//~^ WARN skipping const checks\n     static FOO: AtomicUsize = AtomicUsize::new(0);\n     unsafe { *(&FOO as *const _ as *const usize) }\n };\n \n static mut MUTABLE: u32 = 0;\n const READ_MUT: u32 = unsafe { MUTABLE };\n-//~^ WARN skipping const checks\n \n fn main() {\n     MUTATE_INTERIOR_MUT;"}, {"sha": "e5cd86b3d6c2f316c2020761013db9c5cb7b3530", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.stderr", "status": "modified", "additions": 37, "deletions": 30, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -1,47 +1,54 @@\n-warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:11:1\n-   |\n-LL | / const MUTATE_INTERIOR_MUT: usize = {\n-LL | |\n-LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n-LL | |     FOO.fetch_add(1, Ordering::Relaxed)\n-LL | | };\n-   | |__^\n-\n-warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:17:1\n-   |\n-LL | / const READ_INTERIOR_MUT: usize = {\n-LL | |\n-LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n-LL | |     unsafe { *(&FOO as *const _ as *const usize) }\n-LL | | };\n-   | |__^\n-\n-warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:24:1\n-   |\n-LL | const READ_MUT: u32 = unsafe { MUTABLE };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0080]: erroneous constant used\n-  --> $DIR/const_refers_to_static.rs:28:5\n+  --> $DIR/const_refers_to_static.rs:25:5\n    |\n LL |     MUTATE_INTERIOR_MUT;\n    |     ^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const_refers_to_static.rs:30:5\n+  --> $DIR/const_refers_to_static.rs:27:5\n    |\n LL |     READ_INTERIOR_MUT;\n    |     ^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n error[E0080]: erroneous constant used\n-  --> $DIR/const_refers_to_static.rs:32:5\n+  --> $DIR/const_refers_to_static.rs:29:5\n    |\n LL |     READ_MUT;\n    |     ^^^^^^^^ referenced constant has errors\n \n-error: aborting due to 3 previous errors; 3 warnings emitted\n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static.rs:13:5\n+   |\n+LL |     FOO.fetch_add(1, Ordering::Relaxed)\n+   |     ^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static.rs:13:5\n+   |\n+LL |     FOO.fetch_add(1, Ordering::Relaxed)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static.rs:18:17\n+   |\n+LL |     unsafe { *(&FOO as *const _ as *const usize) }\n+   |                 ^^^\n+help: skipping check for `const_raw_ptr_deref` feature\n+  --> $DIR/const_refers_to_static.rs:18:14\n+   |\n+LL |     unsafe { *(&FOO as *const _ as *const usize) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static.rs:22:32\n+   |\n+LL | const READ_MUT: u32 = unsafe { MUTABLE };\n+   |                                ^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static.rs:22:32\n+   |\n+LL | const READ_MUT: u32 = unsafe { MUTABLE };\n+   |                                ^^^^^^^\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "4e67ff704e6490c8c7d822c0a1522e281ea47a01", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -8,7 +8,6 @@ use std::sync::atomic::Ordering;\n // so they cause an immediate error when *defining* the const.\n \n const REF_INTERIOR_MUT: &usize = { //~ ERROR undefined behavior to use this value\n-//~^ WARN skipping const checks\n //~| NOTE encountered a reference pointing to a static variable\n //~| NOTE\n     static FOO: AtomicUsize = AtomicUsize::new(0);\n@@ -17,7 +16,6 @@ const REF_INTERIOR_MUT: &usize = { //~ ERROR undefined behavior to use this valu\n \n // ok some day perhaps\n const READ_IMMUT: &usize = { //~ ERROR it is undefined behavior to use this value\n-//~^ WARN skipping const checks\n //~| NOTE encountered a reference pointing to a static variable\n //~| NOTE\n     static FOO: usize = 0;"}, {"sha": "2e40b38dac76847bed70ef20f519bc5eb2610bc4", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static2.stderr", "status": "modified", "additions": 20, "deletions": 28, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.stderr?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -1,34 +1,9 @@\n-warning: skipping const checks\n-  --> $DIR/const_refers_to_static2.rs:10:1\n-   |\n-LL | / const REF_INTERIOR_MUT: &usize = {\n-LL | |\n-LL | |\n-LL | |\n-LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n-LL | |     unsafe { &*(&FOO as *const _ as *const usize) }\n-LL | | };\n-   | |__^\n-\n-warning: skipping const checks\n-  --> $DIR/const_refers_to_static2.rs:19:1\n-   |\n-LL | / const READ_IMMUT: &usize = {\n-LL | |\n-LL | |\n-LL | |\n-LL | |     static FOO: usize = 0;\n-LL | |     &FOO\n-LL | | };\n-   | |__^\n-\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const_refers_to_static2.rs:10:1\n    |\n LL | / const REF_INTERIOR_MUT: &usize = {\n LL | |\n LL | |\n-LL | |\n LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n LL | |     unsafe { &*(&FOO as *const _ as *const usize) }\n LL | | };\n@@ -37,19 +12,36 @@ LL | | };\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static2.rs:19:1\n+  --> $DIR/const_refers_to_static2.rs:18:1\n    |\n LL | / const READ_IMMUT: &usize = {\n LL | |\n LL | |\n-LL | |\n LL | |     static FOO: usize = 0;\n LL | |     &FOO\n LL | | };\n    | |__^ type validation failed: encountered a reference pointing to a static variable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n-error: aborting due to 2 previous errors; 2 warnings emitted\n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static2.rs:14:18\n+   |\n+LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n+   |                  ^^^\n+help: skipping check for `const_raw_ptr_deref` feature\n+  --> $DIR/const_refers_to_static2.rs:14:14\n+   |\n+LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static2.rs:22:6\n+   |\n+LL |     &FOO\n+   |      ^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "e159c109bfd68b2e380291112c2b41840ee03d93", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -9,14 +9,12 @@ extern crate static_cross_crate;\n // Sneaky: reference to a mutable static.\n // Allowing this would be a disaster for pattern matching, we could violate exhaustiveness checking!\n const SLICE_MUT: &[u8; 1] = { //~ ERROR undefined behavior to use this value\n-//~^ WARN skipping const checks\n //~| NOTE encountered a reference pointing to a static variable\n //~| NOTE\n     unsafe { &static_cross_crate::ZERO }\n };\n \n const U8_MUT: &u8 = { //~ ERROR undefined behavior to use this value\n-//~^ WARN skipping const checks\n //~| NOTE encountered a reference pointing to a static variable\n //~| NOTE\n     unsafe { &static_cross_crate::ZERO[0] }\n@@ -25,14 +23,12 @@ const U8_MUT: &u8 = { //~ ERROR undefined behavior to use this value\n // Also test indirection that reads from other static. This causes a const_err.\n #[warn(const_err)] //~ NOTE\n const U8_MUT2: &u8 = { //~ NOTE\n-//~^ WARN skipping const checks\n     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n     //~^ WARN [const_err]\n     //~| NOTE constant accesses static\n };\n #[warn(const_err)] //~ NOTE\n const U8_MUT3: &u8 = { //~ NOTE\n-//~^ WARN skipping const checks\n     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n     //~^ WARN [const_err]\n     //~| NOTE constant accesses static"}, {"sha": "b44ac5633d5a347adb0eb757a888cf163cdb18b0", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.stderr", "status": "modified", "additions": 69, "deletions": 58, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.stderr?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -1,79 +1,43 @@\n-warning: skipping const checks\n-  --> $DIR/const_refers_to_static_cross_crate.rs:11:1\n-   |\n-LL | / const SLICE_MUT: &[u8; 1] = {\n-LL | |\n-LL | |\n-LL | |\n-LL | |     unsafe { &static_cross_crate::ZERO }\n-LL | | };\n-   | |__^\n-\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const_refers_to_static_cross_crate.rs:11:1\n    |\n LL | / const SLICE_MUT: &[u8; 1] = {\n LL | |\n LL | |\n-LL | |\n LL | |     unsafe { &static_cross_crate::ZERO }\n LL | | };\n    | |__^ type validation failed: encountered a reference pointing to a static variable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:43:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:39:9\n    |\n LL |         SLICE_MUT => true,\n    |         ^^^^^^^^^\n \n-warning: skipping const checks\n-  --> $DIR/const_refers_to_static_cross_crate.rs:18:1\n-   |\n-LL | / const U8_MUT: &u8 = {\n-LL | |\n-LL | |\n-LL | |\n-LL | |     unsafe { &static_cross_crate::ZERO[0] }\n-LL | | };\n-   | |__^\n-\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static_cross_crate.rs:18:1\n+  --> $DIR/const_refers_to_static_cross_crate.rs:17:1\n    |\n LL | / const U8_MUT: &u8 = {\n LL | |\n LL | |\n-LL | |\n LL | |     unsafe { &static_cross_crate::ZERO[0] }\n LL | | };\n    | |__^ type validation failed: encountered a reference pointing to a static variable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:51:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:47:9\n    |\n LL |         U8_MUT => true,\n    |         ^^^^^^\n \n-warning: skipping const checks\n-  --> $DIR/const_refers_to_static_cross_crate.rs:27:1\n-   |\n-LL | / const U8_MUT2: &u8 = {\n-LL | |\n-LL | |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n-LL | |\n-LL | |\n-LL | | };\n-   | |__^\n-\n warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:29:14\n+  --> $DIR/const_refers_to_static_cross_crate.rs:26:14\n    |\n LL | / const U8_MUT2: &u8 = {\n-LL | |\n LL | |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n    | |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n LL | |\n@@ -82,33 +46,21 @@ LL | | };\n    | |__-\n    |\n note: the lint level is defined here\n-  --> $DIR/const_refers_to_static_cross_crate.rs:26:8\n+  --> $DIR/const_refers_to_static_cross_crate.rs:24:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:61:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:57:9\n    |\n LL |         U8_MUT2 => true,\n    |         ^^^^^^^\n \n-warning: skipping const checks\n-  --> $DIR/const_refers_to_static_cross_crate.rs:34:1\n-   |\n-LL | / const U8_MUT3: &u8 = {\n-LL | |\n-LL | |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n-LL | |\n-LL | |\n-LL | | };\n-   | |__^\n-\n warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:36:51\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:51\n    |\n LL | / const U8_MUT3: &u8 = {\n-LL | |\n LL | |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    | |                                                   ^^^^^^^^^^^ constant accesses static\n LL | |\n@@ -117,17 +69,76 @@ LL | | };\n    | |__-\n    |\n note: the lint level is defined here\n-  --> $DIR/const_refers_to_static_cross_crate.rs:33:8\n+  --> $DIR/const_refers_to_static_cross_crate.rs:30:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:64:9\n    |\n LL |         U8_MUT3 => true,\n    |         ^^^^^^^\n \n-error: aborting due to 6 previous errors; 6 warnings emitted\n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static_cross_crate.rs:14:15\n+   |\n+LL |     unsafe { &static_cross_crate::ZERO }\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static_cross_crate.rs:14:15\n+   |\n+LL |     unsafe { &static_cross_crate::ZERO }\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static_cross_crate.rs:20:15\n+   |\n+LL |     unsafe { &static_cross_crate::ZERO[0] }\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static_cross_crate.rs:20:15\n+   |\n+LL |     unsafe { &static_cross_crate::ZERO[0] }\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static_cross_crate.rs:20:15\n+   |\n+LL |     unsafe { &static_cross_crate::ZERO[0] }\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static_cross_crate.rs:26:17\n+   |\n+LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+   |\n+LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+   |\n+LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+   |\n+LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check for `const_panic` feature\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:77\n+   |\n+LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n+   |                                                                             ^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n+   |\n+LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 6 previous errors; 3 warnings emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "9bd56e81cbf8ea8492c279350b6cfaf44d67149f", "filename": "src/test/ui/consts/miri_unleashed/drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.rs?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -13,6 +13,6 @@ static TEST_OK: () = {\n \n // Make sure we catch executing bad drop functions.\n // The actual error is tested by the error-pattern above.\n-static TEST_BAD: () = { //~ WARN skipping const checks\n+static TEST_BAD: () = {\n     let _v: Vec<i32> = Vec::new();\n };"}, {"sha": "34ab5155e22d0ef1d7cc36abd61c9bd8b59f1e5f", "filename": "src/test/ui/consts/miri_unleashed/drop.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -1,11 +1,3 @@\n-warning: skipping const checks\n-  --> $DIR/drop.rs:16:1\n-   |\n-LL | / static TEST_BAD: () = {\n-LL | |     let _v: Vec<i32> = Vec::new();\n-LL | | };\n-   | |__^\n-\n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n    |\n@@ -24,6 +16,14 @@ LL | | }\n LL |   };\n    |   - inside `TEST_BAD` at $DIR/drop.rs:18:1\n \n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/drop.rs:17:9\n+   |\n+LL |     let _v: Vec<i32> = Vec::new();\n+   |         ^^\n+\n error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "7b2b1ed4965f265706aadc38c9b262b2e5447202", "filename": "src/test/ui/consts/miri_unleashed/inline_asm.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.rs?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -6,9 +6,10 @@\n fn main() {}\n \n // Make sure we catch executing inline assembly.\n-static TEST_BAD: () = { //~ WARN skipping const checks\n+static TEST_BAD: () = {\n     unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n     //~^ ERROR could not evaluate static initializer\n     //~| NOTE inline assembly is not supported\n     //~| NOTE in this expansion of llvm_asm!\n+    //~| NOTE in this expansion of llvm_asm!\n };"}, {"sha": "0f5ee5de39634c044b430f8a439ba0d1575ef5be", "filename": "src/test/ui/consts/miri_unleashed/inline_asm.stderr", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -1,14 +1,3 @@\n-warning: skipping const checks\n-  --> $DIR/inline_asm.rs:9:1\n-   |\n-LL | / static TEST_BAD: () = {\n-LL | |     unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n-LL | |\n-LL | |\n-LL | |\n-LL | | };\n-   | |__^\n-\n error[E0080]: could not evaluate static initializer\n   --> $DIR/inline_asm.rs:10:14\n    |\n@@ -17,6 +6,15 @@ LL |     unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/inline_asm.rs:10:14\n+   |\n+LL |     unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "5aae34e93d47e1d4dbcbca83765977f2ae8e9386", "filename": "src/test/ui/consts/miri_unleashed/mutable_const.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.rs?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -11,10 +11,8 @@ use std::cell::UnsafeCell;\n \n // make sure we do not just intern this as mutable\n const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n-//~^ WARN: skipping const checks\n \n const MUTATING_BEHIND_RAW: () = { //~ NOTE\n-//~^ WARN skipping const checks\n     // Test that `MUTABLE_BEHIND_RAW` is actually immutable, by doing this at const time.\n     unsafe {\n         *MUTABLE_BEHIND_RAW = 99 //~ ERROR any use of this value will cause an error"}, {"sha": "4772baf9d9a019a7bb254dd4256816c165430f39", "filename": "src/test/ui/consts/miri_unleashed/mutable_const.stderr", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const.stderr?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -1,26 +1,7 @@\n-warning: skipping const checks\n-  --> $DIR/mutable_const.rs:13:1\n-   |\n-LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-warning: skipping const checks\n-  --> $DIR/mutable_const.rs:16:1\n-   |\n-LL | / const MUTATING_BEHIND_RAW: () = {\n-LL | |\n-LL | |     // Test that `MUTABLE_BEHIND_RAW` is actually immutable, by doing this at const time.\n-LL | |     unsafe {\n-...  |\n-LL | |     }\n-LL | | };\n-   | |__^\n-\n error: any use of this value will cause an error\n-  --> $DIR/mutable_const.rs:20:9\n+  --> $DIR/mutable_const.rs:18:9\n    |\n LL | / const MUTATING_BEHIND_RAW: () = {\n-LL | |\n LL | |     // Test that `MUTABLE_BEHIND_RAW` is actually immutable, by doing this at const time.\n LL | |     unsafe {\n LL | |         *MUTABLE_BEHIND_RAW = 99\n@@ -36,5 +17,23 @@ note: the lint level is defined here\n LL | #![deny(const_err)] // The `allow` variant is tested by `mutable_const2`.\n    |         ^^^^^^^^^\n \n-error: aborting due to previous error; 2 warnings emitted\n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/mutable_const.rs:13:38\n+   |\n+LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n+   |                                      ^^^^^^^^^^^^^^^^^^^^\n+help: skipping check for `const_raw_ptr_deref` feature\n+  --> $DIR/mutable_const.rs:18:9\n+   |\n+LL |         *MUTABLE_BEHIND_RAW = 99\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: skipping check for `const_mut_refs` feature\n+  --> $DIR/mutable_const.rs:18:9\n+   |\n+LL |         *MUTABLE_BEHIND_RAW = 99\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "867091af7ba762335a31e9f7a2ee2b9070b191a1", "filename": "src/test/ui/consts/miri_unleashed/mutable_const2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.rs?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -11,7 +11,6 @@ use std::cell::UnsafeCell;\n \n // make sure we do not just intern this as mutable\n const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n-//~^ WARN: skipping const checks\n-//~| ERROR: mutable allocation in constant\n+//~^ ERROR: mutable allocation in constant\n \n fn main() {}"}, {"sha": "98a1c8bdd8967d881efd94a8800947cda3251b0d", "filename": "src/test/ui/consts/miri_unleashed/mutable_const2.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_const2.stderr?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -1,8 +1,10 @@\n warning: skipping const checks\n-  --> $DIR/mutable_const2.rs:13:1\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/mutable_const2.rs:13:38\n    |\n LL | const MUTABLE_BEHIND_RAW: *mut i32 = &UnsafeCell::new(42) as *const _ as *mut _;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                      ^^^^^^^^^^^^^^^^^^^^\n \n warning: 1 warning emitted\n "}, {"sha": "ed2ca86ba2c6b5714a4bb12693d772c7b818d528", "filename": "src/test/ui/consts/miri_unleashed/mutable_references.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.rs?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -7,32 +7,28 @@ use std::cell::UnsafeCell;\n \n // this is fine because is not possible to mutate through an immutable reference.\n static FOO: &&mut u32 = &&mut 42;\n-//~^ WARN skipping const checks\n \n // this is fine because accessing an immutable static `BAR` is equivalent to accessing `*&BAR`\n // which puts the mutable reference behind an immutable one.\n static BAR: &mut () = &mut ();\n-//~^ WARN skipping const checks\n \n struct Foo<T>(T);\n \n // this is fine for the same reason as `BAR`.\n static BOO: &mut Foo<()> = &mut Foo(());\n-//~^ WARN skipping const checks\n \n struct Meh {\n     x: &'static UnsafeCell<i32>,\n }\n \n unsafe impl Sync for Meh {}\n \n-static MEH: Meh = Meh { //~ WARN skipping const checks\n+static MEH: Meh = Meh {\n     x: &UnsafeCell::new(42),\n };\n \n // this is fine for the same reason as `BAR`.\n static OH_YES: &mut i32 = &mut 42;\n-//~^ WARN skipping const checks\n \n fn main() {\n     unsafe {"}, {"sha": "83c4e0ceba0de4b430515af36272fc5a3a6fb163", "filename": "src/test/ui/consts/miri_unleashed/mutable_references.stderr", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references.stderr?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -1,41 +1,37 @@\n-warning: skipping const checks\n-  --> $DIR/mutable_references.rs:9:1\n+error[E0594]: cannot assign to `*OH_YES`, as `OH_YES` is an immutable static item\n+  --> $DIR/mutable_references.rs:37:5\n    |\n-LL | static FOO: &&mut u32 = &&mut 42;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     *OH_YES = 99;\n+   |     ^^^^^^^^^^^^ cannot assign\n \n warning: skipping const checks\n-  --> $DIR/mutable_references.rs:14:1\n+   |\n+help: skipping check for `const_mut_refs` feature\n+  --> $DIR/mutable_references.rs:9:26\n+   |\n+LL | static FOO: &&mut u32 = &&mut 42;\n+   |                          ^^^^^^^\n+help: skipping check for `const_mut_refs` feature\n+  --> $DIR/mutable_references.rs:13:23\n    |\n LL | static BAR: &mut () = &mut ();\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-warning: skipping const checks\n-  --> $DIR/mutable_references.rs:20:1\n+   |                       ^^^^^^^\n+help: skipping check for `const_mut_refs` feature\n+  --> $DIR/mutable_references.rs:18:28\n    |\n LL | static BOO: &mut Foo<()> = &mut Foo(());\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-warning: skipping const checks\n-  --> $DIR/mutable_references.rs:29:1\n+   |                            ^^^^^^^^^^^^\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/mutable_references.rs:27:8\n    |\n-LL | / static MEH: Meh = Meh {\n-LL | |     x: &UnsafeCell::new(42),\n-LL | | };\n-   | |__^\n-\n-warning: skipping const checks\n-  --> $DIR/mutable_references.rs:34:1\n+LL |     x: &UnsafeCell::new(42),\n+   |        ^^^^^^^^^^^^^^^^^^^^\n+help: skipping check for `const_mut_refs` feature\n+  --> $DIR/mutable_references.rs:31:27\n    |\n LL | static OH_YES: &mut i32 = &mut 42;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0594]: cannot assign to `*OH_YES`, as `OH_YES` is an immutable static item\n-  --> $DIR/mutable_references.rs:41:5\n-   |\n-LL |     *OH_YES = 99;\n-   |     ^^^^^^^^^^^^ cannot assign\n+   |                           ^^^^^^^\n \n-error: aborting due to previous error; 5 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0594`."}, {"sha": "7388aad2a9e53c05b90bb5910f40f3ff1a7aa732", "filename": "src/test/ui/consts/miri_unleashed/mutable_references_ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.rs?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -18,7 +18,7 @@ struct Meh {\n unsafe impl Sync for Meh {}\n \n // the following will never be ok!\n-const MUH: Meh = Meh { //~ WARN skipping const checks\n+const MUH: Meh = Meh {\n     x: &UnsafeCell::new(42),\n };\n "}, {"sha": "7ddf77af4d3af645a272acd7b0fff0cb82aa296a", "filename": "src/test/ui/consts/miri_unleashed/mutable_references_ice.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_ice.stderr?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -1,11 +1,3 @@\n-warning: skipping const checks\n-  --> $DIR/mutable_references_ice.rs:21:1\n-   |\n-LL | / const MUH: Meh = Meh {\n-LL | |     x: &UnsafeCell::new(42),\n-LL | | };\n-   | |__^\n-\n thread 'rustc' panicked at 'assertion failed: `(left != right)`\n   left: `Const`,\n  right: `Const`: UnsafeCells are not allowed behind references in constants. This should have been prevented statically by const qualification. If this were allowed one would be able to change a constant at one use site and other use sites could observe that mutation.', src/librustc_mir/interpret/intern.rs:LL:CC\n@@ -21,5 +13,13 @@ note: rustc VERSION running on TARGET\n \n note: compiler flags: FLAGS\n \n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n+  --> $DIR/mutable_references_ice.rs:22:8\n+   |\n+LL |     x: &UnsafeCell::new(42),\n+   |        ^^^^^^^^^^^^^^^^^^^^\n+\n warning: 1 warning emitted\n "}, {"sha": "70da94df7a2653a2d4acc6949b21dc13dc370ba9", "filename": "src/test/ui/consts/miri_unleashed/non_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.rs?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -6,7 +6,7 @@\n \n fn foo() {}\n \n-static C: () = foo(); //~ WARN: skipping const checks\n+static C: () = foo();\n //~^ ERROR could not evaluate static initializer\n //~| NOTE calling non-const function `foo`\n "}, {"sha": "3e9658ad88ec035a11071b2c99c2e566d6a4953b", "filename": "src/test/ui/consts/miri_unleashed/non_const_fn.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99debecd4dd28cbf2541fbb2a84b20dffc26a5db/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fnon_const_fn.stderr?ref=99debecd4dd28cbf2541fbb2a84b20dffc26a5db", "patch": "@@ -1,14 +1,16 @@\n-warning: skipping const checks\n-  --> $DIR/non_const_fn.rs:9:1\n+error[E0080]: could not evaluate static initializer\n+  --> $DIR/non_const_fn.rs:9:16\n    |\n LL | static C: () = foo();\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^ calling non-const function `foo`\n \n-error[E0080]: could not evaluate static initializer\n+warning: skipping const checks\n+   |\n+help: skipping check that does not even have a feature gate\n   --> $DIR/non_const_fn.rs:9:16\n    |\n LL | static C: () = foo();\n-   |                ^^^^^ calling non-const function `foo`\n+   |                ^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n "}]}