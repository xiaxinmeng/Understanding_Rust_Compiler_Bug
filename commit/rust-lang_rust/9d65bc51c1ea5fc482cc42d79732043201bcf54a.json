{"sha": "9d65bc51c1ea5fc482cc42d79732043201bcf54a", "node_id": "C_kwDOAAsO6NoAKDlkNjViYzUxYzFlYTVmYzQ4MmNjNDJkNzk3MzIwNDMyMDFiY2Y1NGE", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-12-30T18:36:55Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-12-30T18:36:55Z"}, "message": "Move Option::as_deref_mut", "tree": {"sha": "5bc4551d420bd9962a87337b47f7d04d93edbeaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bc4551d420bd9962a87337b47f7d04d93edbeaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d65bc51c1ea5fc482cc42d79732043201bcf54a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmHN/EcACgkQ+boUO5X/\nbYIMHQ//fphPhZfY/hUofMGUydKa3zPTTheBoOLQ0fRuZkUWux1voxBBlY4uRYIQ\nQFQBH4BiWeGmSeEEhvUEt08l4Q0hmXlCGuKbRbJS0iv5+GvM9bu59zFnZLJ/aKoP\ni36pW+/WIi7HyPKFyItZe6Dy37mgrvzUVAukoFDsTBFz8P3GRm5Jq/d6/P2gMXuj\n2uPbx/iar3KEkBV4nKGkrkqdRf2r1cXurCZYOZw0er50BWEU5miZKvNPN1e0doEm\nRjVW4x4R615GdnLXpJs5SgEnUM+d5jwKSWUQXtpTeM4vC89wZE01oFHGNy5OHk79\n8AUB09JgxkNp4xDuIGL1pLAMZsf7YpdrRStixhTCu2WRuz2pBuxHZVjDgUOqckl9\nR8Z2Hs7jRhgr5+yQjuw5xd4+xG7vVrHNE2xjmuE3HVyZ3dHSBWK31pL6vempXeOW\n8US7td5+yQU3PWYR1kmrlIvz65QbZ8J5J/rrDVzNdA6fxyE53NNaZP8dHwzos1ZW\nWP4hU1s1XJWYnqg4YUnnwzBPDalD41IflV1NaW5T04PndbrQfIbTEm8Hf4pDaIMF\nfzVWGvH1C7xK8vFPrdsN/N0gVLvT5RJsQnjAKmIVkLzv0XvHsiTTjqMoG1pox9SO\nWVbw9NqRyK3dknEKaYx4XNorEDrOFJq6zSdrMJi4bHyhYdXnEPQ=\n=bqy0\n-----END PGP SIGNATURE-----", "payload": "tree 5bc4551d420bd9962a87337b47f7d04d93edbeaf\nparent 48a91a08d166d293fcc03fdc9f86fa30ecbcc51c\nauthor David Tolnay <dtolnay@gmail.com> 1640889415 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1640889415 -0800\n\nMove Option::as_deref_mut\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d65bc51c1ea5fc482cc42d79732043201bcf54a", "html_url": "https://github.com/rust-lang/rust/commit/9d65bc51c1ea5fc482cc42d79732043201bcf54a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d65bc51c1ea5fc482cc42d79732043201bcf54a/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48a91a08d166d293fcc03fdc9f86fa30ecbcc51c", "url": "https://api.github.com/repos/rust-lang/rust/commits/48a91a08d166d293fcc03fdc9f86fa30ecbcc51c", "html_url": "https://github.com/rust-lang/rust/commit/48a91a08d166d293fcc03fdc9f86fa30ecbcc51c"}], "stats": {"total": 54, "additions": 26, "deletions": 28}, "files": [{"sha": "c3bea55772f40999aaad2bdbf2e5c1fd0f0f87b1", "filename": "library/core/src/option.rs", "status": "modified", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/9d65bc51c1ea5fc482cc42d79732043201bcf54a/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d65bc51c1ea5fc482cc42d79732043201bcf54a/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=9d65bc51c1ea5fc482cc42d79732043201bcf54a", "patch": "@@ -1098,6 +1098,32 @@ impl<T> Option<T> {\n         }\n     }\n \n+    /// Converts from `Option<T>` (or `&mut Option<T>`) to `Option<&mut T::Target>`.\n+    ///\n+    /// Leaves the original `Option` in-place, creating a new one containing a mutable reference to\n+    /// the inner type's [`Deref::Target`] type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let mut x: Option<String> = Some(\"hey\".to_owned());\n+    /// assert_eq!(x.as_deref_mut().map(|x| {\n+    ///     x.make_ascii_uppercase();\n+    ///     x\n+    /// }), Some(\"HEY\".to_owned().as_mut_str()));\n+    /// ```\n+    #[stable(feature = \"option_deref\", since = \"1.40.0\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn as_deref_mut(&mut self) -> Option<&mut T::Target>\n+    where\n+        T: ~const DerefMut,\n+    {\n+        match self.as_mut() {\n+            Some(t) => Some(t.deref_mut()),\n+            None => None,\n+        }\n+    }\n+\n     /////////////////////////////////////////////////////////////////////////\n     // Iterator constructors\n     /////////////////////////////////////////////////////////////////////////\n@@ -1750,34 +1776,6 @@ impl<T: Clone> Option<&mut T> {\n     }\n }\n \n-impl<T: DerefMut> Option<T> {\n-    /// Converts from `Option<T>` (or `&mut Option<T>`) to `Option<&mut T::Target>`.\n-    ///\n-    /// Leaves the original `Option` in-place, creating a new one containing a mutable reference to\n-    /// the inner type's [`Deref::Target`] type.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// let mut x: Option<String> = Some(\"hey\".to_owned());\n-    /// assert_eq!(x.as_deref_mut().map(|x| {\n-    ///     x.make_ascii_uppercase();\n-    ///     x\n-    /// }), Some(\"HEY\".to_owned().as_mut_str()));\n-    /// ```\n-    #[stable(feature = \"option_deref\", since = \"1.40.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn as_deref_mut(&mut self) -> Option<&mut T::Target>\n-    where\n-        T: ~const DerefMut,\n-    {\n-        match self.as_mut() {\n-            Some(t) => Some(t.deref_mut()),\n-            None => None,\n-        }\n-    }\n-}\n-\n impl<T, E> Option<Result<T, E>> {\n     /// Transposes an `Option` of a [`Result`] into a [`Result`] of an `Option`.\n     ///"}]}