{"sha": "7c4ec40346591755b5401bf95a048974542c43bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjNGVjNDAzNDY1OTE3NTViNTQwMWJmOTVhMDQ4OTc0NTQyYzQzYmM=", "commit": {"author": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2018-07-04T08:51:04Z"}, "committer": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2018-07-04T11:50:39Z"}, "message": "add missing_inline lint\n\nWhen turned on, the lint warns on all exported functions, methods,\ntrait methods (default impls, impls), that are not `#[inline]`.\n\nCloses #1503.", "tree": {"sha": "94a41737e40aa51490af9d8a974284bd0874c5ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94a41737e40aa51490af9d8a974284bd0874c5ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c4ec40346591755b5401bf95a048974542c43bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c4ec40346591755b5401bf95a048974542c43bc", "html_url": "https://github.com/rust-lang/rust/commit/7c4ec40346591755b5401bf95a048974542c43bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c4ec40346591755b5401bf95a048974542c43bc/comments", "author": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30a9879c461ce18ff120e513a2f6a16d0f2f4b80", "url": "https://api.github.com/repos/rust-lang/rust/commits/30a9879c461ce18ff120e513a2f6a16d0f2f4b80", "html_url": "https://github.com/rust-lang/rust/commit/30a9879c461ce18ff120e513a2f6a16d0f2f4b80"}], "stats": {"total": 289, "additions": 288, "deletions": 1}, "files": [{"sha": "2b2d2082a7a1b1a6a79889c29a07f47c41804f20", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c4ec40346591755b5401bf95a048974542c43bc/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/7c4ec40346591755b5401bf95a048974542c43bc/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=7c4ec40346591755b5401bf95a048974542c43bc", "patch": "@@ -744,6 +744,7 @@ All notable changes to this project will be documented in this file.\n [`misaligned_transmute`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#misaligned_transmute\n [`misrefactored_assign_op`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#misrefactored_assign_op\n [`missing_docs_in_private_items`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\n+[`missing_inline_in_public_items`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#missing_inline_in_public_items\n [`mixed_case_hex_literals`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#mixed_case_hex_literals\n [`module_inception`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#module_inception\n [`modulo_one`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#modulo_one"}, {"sha": "f2121e13ffd5d1971388aafedf3dd552ba81e242", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c4ec40346591755b5401bf95a048974542c43bc/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/7c4ec40346591755b5401bf95a048974542c43bc/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=7c4ec40346591755b5401bf95a048974542c43bc", "patch": "@@ -9,7 +9,7 @@ We are currently in the process of discussing Clippy 1.0 via the RFC process in\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 272 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n+[There are 273 lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "9d0a0c3741ba3e18d889f3005192d4d6e47da5a0", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c4ec40346591755b5401bf95a048974542c43bc/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c4ec40346591755b5401bf95a048974542c43bc/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=7c4ec40346591755b5401bf95a048974542c43bc", "patch": "@@ -134,6 +134,7 @@ pub mod minmax;\n pub mod misc;\n pub mod misc_early;\n pub mod missing_doc;\n+pub mod missing_inline;\n pub mod multiple_crate_versions;\n pub mod mut_mut;\n pub mod mut_reference;\n@@ -364,6 +365,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box let_if_seq::LetIfSeq);\n     reg.register_late_lint_pass(box eval_order_dependence::EvalOrderDependence);\n     reg.register_late_lint_pass(box missing_doc::MissingDoc::new());\n+    reg.register_late_lint_pass(box missing_inline::MissingInline::new());\n     reg.register_late_lint_pass(box ok_if_let::Pass);\n     reg.register_late_lint_pass(box if_let_redundant_pattern_matching::Pass);\n     reg.register_late_lint_pass(box partialeq_ne_impl::Pass);\n@@ -422,6 +424,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         methods::WRONG_PUB_SELF_CONVENTION,\n         misc::FLOAT_CMP_CONST,\n         missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS,\n+        missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS,\n         panic_unimplemented::UNIMPLEMENTED,\n         shadow::SHADOW_REUSE,\n         shadow::SHADOW_SAME,"}, {"sha": "ddd44ba7fa183bc4b204e3321abfe9b1e3316b36", "filename": "clippy_lints/src/missing_inline.rs", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/7c4ec40346591755b5401bf95a048974542c43bc/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c4ec40346591755b5401bf95a048974542c43bc/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=7c4ec40346591755b5401bf95a048974542c43bc", "patch": "@@ -0,0 +1,171 @@\n+//   Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n+//   file at the top-level directory of this distribution and at\n+//   http://rust-lang.org/COPYRIGHT.\n+//\n+//   Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+//   http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+//   <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+//   option. This file may not be copied, modified, or distributed\n+//   except according to those terms.\n+//\n+\n+use rustc::hir;\n+use rustc::lint::*;\n+use syntax::ast;\n+use syntax::codemap::Span;\n+\n+/// **What it does:** it lints if an exported function, method, trait method with default impl,\n+/// or trait method impl is not `#[inline]`.\n+///\n+/// **Why is this bad?** In general, it is not. Functions can be inlined across\n+/// crates when that's profitable as long as any form of LTO is used. When LTO is disabled,\n+/// functions that are not `#[inline]` cannot be inlined across crates. Certain types of crates\n+/// might intend for most of the methods in their public API to be able to be inlined across\n+/// crates even when LTO is disabled. For these types of crates, enabling this lint might make sense.\n+/// It allows the crate to require all exported methods to be `#[inline]` by default, and then opt\n+/// out for specific methods where this might not make sense.\n+///\n+/// **Known problems:** None.\n+declare_clippy_lint! {\n+    pub MISSING_INLINE_IN_PUBLIC_ITEMS,\n+    restriction,\n+    \"detects missing #[inline] attribute for public callables (functions, trait methods, methods...)\"\n+}\n+\n+pub struct MissingInline {}\n+\n+impl ::std::default::Default for MissingInline {\n+    fn default() -> Self {\n+        Self::new()\n+    }\n+}\n+\n+impl MissingInline {\n+    pub fn new() -> Self {\n+        Self {}\n+    }\n+\n+    fn check_missing_inline_attrs(&self, cx: &LateContext,\n+                                  attrs: &[ast::Attribute], sp: Span, desc: &'static str) {\n+        // If we're building a test harness, FIXME: is this relevant?\n+        // if cx.sess().opts.test {\n+        //    return;\n+        // }\n+\n+        let has_inline = attrs\n+            .iter()\n+            .any(|a| a.name() == \"inline\" );\n+        if !has_inline {\n+            cx.span_lint(\n+                MISSING_INLINE_IN_PUBLIC_ITEMS,\n+                sp,\n+                &format!(\"missing `#[inline]` for {}\", desc),\n+            );\n+        }\n+    }\n+}\n+\n+impl LintPass for MissingInline {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array![MISSING_INLINE_IN_PUBLIC_ITEMS]\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n+        if !cx.access_levels.is_exported(it.id) {\n+            return;\n+        }\n+        match it.node {\n+            hir::ItemFn(..) => {\n+                // ignore main()\n+                if it.name == \"main\" {\n+                    let def_id = cx.tcx.hir.local_def_id(it.id);\n+                    let def_key = cx.tcx.hir.def_key(def_id);\n+                    if def_key.parent == Some(hir::def_id::CRATE_DEF_INDEX) {\n+                        return;\n+                    }\n+                }\n+                let desc = \"a function\";\n+                self.check_missing_inline_attrs(cx, &it.attrs, it.span, desc);\n+            },\n+            hir::ItemTrait(ref _is_auto, ref _unsafe, ref _generics,\n+                           ref _bounds, ref trait_items)  => {\n+                for tit in trait_items {\n+                    let tit_ = cx.tcx.hir.trait_item(tit.id);\n+                    match tit_.node {\n+                        hir::TraitItemKind::Const(..) |\n+                        hir::TraitItemKind::Type(..) => {},\n+                        hir::TraitItemKind::Method(..) => {\n+                            if tit.defaultness.has_value() {\n+                                // trait method with default body needs inline in case\n+                                // an impl is not provided\n+                                let desc = \"a default trait method\";\n+                                let item = cx.tcx.hir.expect_trait_item(tit.id.node_id);\n+                                self.check_missing_inline_attrs(cx, &item.attrs,\n+                                                                item.span, desc);\n+                            }\n+                        },\n+                    }\n+                }\n+            }\n+            hir::ItemConst(..) |\n+            hir::ItemEnum(..) |\n+            hir::ItemMod(..) |\n+            hir::ItemStatic(..) |\n+            hir::ItemStruct(..) |\n+            hir::ItemTraitAlias(..) |\n+            hir::ItemGlobalAsm(..) |\n+            hir::ItemTy(..) |\n+            hir::ItemUnion(..) |\n+            hir::ItemExistential(..) |\n+            hir::ItemExternCrate(..) |\n+            hir::ItemForeignMod(..) |\n+            hir::ItemImpl(..) |\n+            hir::ItemUse(..) => {},\n+        };\n+    }\n+\n+    fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, impl_item: &'tcx hir::ImplItem) {\n+        use rustc::ty::{TraitContainer, ImplContainer};\n+\n+        // If the item being implemented is not exported, then we don't need #[inline]\n+        if !cx.access_levels.is_exported(impl_item.id) {\n+            return;\n+        }\n+\n+        let def_id = cx.tcx.hir.local_def_id(impl_item.id);\n+        match cx.tcx.associated_item(def_id).container {\n+            TraitContainer(cid) => {\n+                let n = cx.tcx.hir.as_local_node_id(cid);\n+                if n.is_some() {\n+                    if !cx.access_levels.is_exported(n.unwrap()) {\n+                        // If a trait is being implemented for an item, and the\n+                        // trait is not exported, we don't need #[inline]\n+                        return;\n+                    }\n+                }\n+            },\n+            ImplContainer(cid) => {\n+                if cx.tcx.impl_trait_ref(cid).is_some() {\n+                    let trait_ref = cx.tcx.impl_trait_ref(cid).unwrap();\n+                    let n = cx.tcx.hir.as_local_node_id(trait_ref.def_id);\n+                    if n.is_some() {\n+                        if !cx.access_levels.is_exported(n.unwrap()) {\n+                            // If a trait is being implemented for an item, and the\n+                            // trait is not exported, we don't need #[inline]\n+                            return;\n+                        }\n+                    }\n+                }\n+            },\n+        }\n+\n+        let desc = match impl_item.node {\n+            hir::ImplItemKind::Method(..) => \"a method\",\n+            hir::ImplItemKind::Const(..) |\n+            hir::ImplItemKind::Type(_) => return,\n+        };\n+        self.check_missing_inline_attrs(cx, &impl_item.attrs, impl_item.span, desc);\n+    }\n+}"}, {"sha": "5dc473ef09dac1348873f0d5cc81caae22d61366", "filename": "tests/ui/missing_inline.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/7c4ec40346591755b5401bf95a048974542c43bc/tests%2Fui%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c4ec40346591755b5401bf95a048974542c43bc/tests%2Fui%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_inline.rs?ref=7c4ec40346591755b5401bf95a048974542c43bc", "patch": "@@ -0,0 +1,72 @@\n+/* This file incorporates work covered by the following copyright and\n+ * permission notice:\n+ *   Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+ *   file at the top-level directory of this distribution and at\n+ *   http://rust-lang.org/COPYRIGHT.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+ *   http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+ *   <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+ *   option. This file may not be copied, modified, or distributed\n+ *   except according to those terms.\n+ */\n+#![warn(missing_inline_in_public_items)]\n+\n+// When denying at the crate level, be sure to not get random warnings from the\n+// injected intrinsics by the compiler.\n+#![allow(dead_code, non_snake_case)]\n+\n+type Typedef = String;\n+pub type PubTypedef = String;\n+\n+struct Foo {} // ok\n+pub struct PubFoo { } // ok\n+enum FooE {} // ok\n+pub enum PubFooE {} // ok\n+\n+mod module {} // ok\n+pub mod pub_module {} // ok\n+\n+fn foo() {}\n+pub fn pub_foo() {} // missing #[inline]\n+#[inline] pub fn pub_foo_inline() {} // ok\n+#[inline(always)] pub fn pub_foo_inline_always() {} // ok\n+\n+#[allow(missing_inline_in_public_items)]\n+pub fn pub_foo_no_inline() {}\n+fn main() {}\n+\n+trait Bar {\n+    fn Bar_a(); // ok\n+    fn Bar_b() {} // ok\n+}\n+\n+pub trait PubBar {\n+    fn PubBar_a(); // ok\n+    fn PubBar_b() {} // missing #[inline]\n+    #[inline] fn PubBar_c() {} // ok\n+}\n+\n+// none of these need inline because Foo is not exported\n+impl PubBar for Foo {\n+    fn PubBar_a() {} // ok\n+    fn PubBar_b() {} // ok\n+    fn PubBar_c() {} // ok\n+}\n+\n+// all of these need inline because PubFoo is exported\n+impl PubBar for PubFoo {\n+    fn PubBar_a() {} // missing #[inline]\n+    fn PubBar_b() {} // missing #[inline]\n+    fn PubBar_c() {} // missing #[inline]\n+}\n+\n+// do not need inline because Foo is not exported\n+impl Foo {\n+    fn FooImpl() {} // ok\n+}\n+\n+// need inline because PubFoo is exported\n+impl PubFoo {\n+    pub fn PubFooImpl() {} // missing #[inline]\n+}"}, {"sha": "fe343742708d56e0a7368702afd3cf17616b1ff9", "filename": "tests/ui/missing_inline.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7c4ec40346591755b5401bf95a048974542c43bc/tests%2Fui%2Fmissing_inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c4ec40346591755b5401bf95a048974542c43bc/tests%2Fui%2Fmissing_inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_inline.stderr?ref=7c4ec40346591755b5401bf95a048974542c43bc", "patch": "@@ -0,0 +1,40 @@\n+error: missing `#[inline]` for a function\n+  --> $DIR/missing_inline.rs:31:1\n+   |\n+31 | pub fn pub_foo() {} // missing #[inline]\n+   | ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D missing-inline-in-public-items` implied by `-D warnings`\n+\n+error: missing `#[inline]` for a default trait method\n+  --> $DIR/missing_inline.rs:46:5\n+   |\n+46 |     fn PubBar_b() {} // missing #[inline]\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: missing `#[inline]` for a method\n+  --> $DIR/missing_inline.rs:59:5\n+   |\n+59 |     fn PubBar_a() {} // missing #[inline]\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: missing `#[inline]` for a method\n+  --> $DIR/missing_inline.rs:60:5\n+   |\n+60 |     fn PubBar_b() {} // missing #[inline]\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: missing `#[inline]` for a method\n+  --> $DIR/missing_inline.rs:61:5\n+   |\n+61 |     fn PubBar_c() {} // missing #[inline]\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: missing `#[inline]` for a method\n+  --> $DIR/missing_inline.rs:71:5\n+   |\n+71 |     pub fn PubFooImpl() {} // missing #[inline]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}]}