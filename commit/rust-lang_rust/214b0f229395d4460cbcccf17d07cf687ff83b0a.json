{"sha": "214b0f229395d4460cbcccf17d07cf687ff83b0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNGIwZjIyOTM5NWQ0NDYwY2JjY2NmMTdkMDdjZjY4N2ZmODNiMGE=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-10-19T21:43:47Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-10-23T06:58:13Z"}, "message": "`crate` shorthand visibility modifier\n\nWith regrets, this breaks rustfmt and rls.\n\nThis is in the matter of #45388.", "tree": {"sha": "1c89764c9ee401c47f1be752002804d4ba94f8cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c89764c9ee401c47f1be752002804d4ba94f8cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/214b0f229395d4460cbcccf17d07cf687ff83b0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/214b0f229395d4460cbcccf17d07cf687ff83b0a", "html_url": "https://github.com/rust-lang/rust/commit/214b0f229395d4460cbcccf17d07cf687ff83b0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/214b0f229395d4460cbcccf17d07cf687ff83b0a/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c053db233d69519b548e5b8ed7192d0783e582a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c053db233d69519b548e5b8ed7192d0783e582a", "html_url": "https://github.com/rust-lang/rust/commit/4c053db233d69519b548e5b8ed7192d0783e582a"}], "stats": {"total": 111, "additions": 99, "deletions": 12}, "files": [{"sha": "11b3ee8edf0b1a13329f818ba7e27f16be297f03", "filename": "src/doc/unstable-book/src/language-features/crate-visibility-modifier.md", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcrate-visibility-modifier.md", "raw_url": "https://github.com/rust-lang/rust/raw/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcrate-visibility-modifier.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcrate-visibility-modifier.md?ref=214b0f229395d4460cbcccf17d07cf687ff83b0a", "patch": "@@ -0,0 +1,20 @@\n+# `crate_visibility_modifier`\n+\n+The tracking issue for this feature is: [#45388]\n+\n+[#45388]: https://github.com/rust-lang/rust/issues/45388\n+\n+-----\n+\n+The `crate_visibility_modifier` feature allows the `crate` keyword to be used\n+as a visibility modifier synonymous to `pub(crate)`, indicating that a type\n+(function, _&c._) is to be visible to the entire enclosing crate, but not to\n+other crates.\n+\n+```rust\n+#![feature(crate_visibility_modifier)]\n+\n+crate struct Foo {\n+    bar: usize,\n+}\n+```"}, {"sha": "012cc1e4ac13c984497e6418c1a1104508ca3ae2", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=214b0f229395d4460cbcccf17d07cf687ff83b0a", "patch": "@@ -2666,7 +2666,7 @@ impl<'a> LoweringContext<'a> {\n                         -> hir::Visibility {\n         match *v {\n             Visibility::Public => hir::Public,\n-            Visibility::Crate(_) => hir::Visibility::Crate,\n+            Visibility::Crate(..) => hir::Visibility::Crate,\n             Visibility::Restricted { ref path, id } => {\n                 hir::Visibility::Restricted {\n                     path: P(self.lower_path(id, path, ParamMode::Explicit, true)),"}, {"sha": "1e9ac66d237779c31bd911202071a0fe1383fddd", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=214b0f229395d4460cbcccf17d07cf687ff83b0a", "patch": "@@ -1787,10 +1787,19 @@ impl PolyTraitRef {\n     }\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub enum CrateSugar {\n+    /// Source is `pub(crate)`\n+    PubCrate,\n+\n+    /// Source is (just) `crate`\n+    JustCrate,\n+}\n+\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Visibility {\n     Public,\n-    Crate(Span),\n+    Crate(Span, CrateSugar),\n     Restricted { path: P<Path>, id: NodeId },\n     Inherited,\n }"}, {"sha": "da1a0107f2f4f9e96ba074b2cc51701b3aff3640", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=214b0f229395d4460cbcccf17d07cf687ff83b0a", "patch": "@@ -401,6 +401,9 @@ declare_features! (\n \n     // Trait object syntax with `dyn` prefix\n     (active, dyn_trait, \"1.22.0\", Some(44662)),\n+\n+    // `crate` as visibility modifier, synonymous to `pub(crate)`\n+    (active, crate_visibility_modifier, \"1.23.0\", Some(45388)),\n );\n \n declare_features! (\n@@ -1582,6 +1585,14 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         visit::walk_impl_item(self, ii);\n     }\n \n+    fn visit_vis(&mut self, vis: &'a ast::Visibility) {\n+        if let ast::Visibility::Crate(span, ast::CrateSugar::JustCrate) = *vis {\n+            gate_feature_post!(&self, crate_visibility_modifier, span,\n+                               \"`crate` visibility modifier is experimental\");\n+        }\n+        visit::walk_vis(self, vis);\n+    }\n+\n     fn visit_generics(&mut self, g: &'a ast::Generics) {\n         for t in &g.ty_params {\n             if !t.attrs.is_empty() {"}, {"sha": "c9e9a8edcb87ceaa9bb52b450153804450f6fb3f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=214b0f229395d4460cbcccf17d07cf687ff83b0a", "patch": "@@ -36,7 +36,7 @@ use ast::SelfKind;\n use ast::{TraitItem, TraitRef, TraitObjectSyntax};\n use ast::{Ty, TyKind, TypeBinding, TyParam, TyParamBounds};\n use ast::{ViewPath, ViewPathGlob, ViewPathList, ViewPathSimple};\n-use ast::{Visibility, WhereClause};\n+use ast::{Visibility, WhereClause, CrateSugar};\n use ast::{BinOpKind, UnOp};\n use ast::{RangeEnd, RangeSyntax};\n use {ast, attr};\n@@ -5325,6 +5325,10 @@ impl<'a> Parser<'a> {\n     pub fn parse_visibility(&mut self, can_take_tuple: bool) -> PResult<'a, Visibility> {\n         maybe_whole!(self, NtVis, |x| x);\n \n+        if self.eat_keyword(keywords::Crate) {\n+            return Ok(Visibility::Crate(self.prev_span, CrateSugar::JustCrate));\n+        }\n+\n         if !self.eat_keyword(keywords::Pub) {\n             return Ok(Visibility::Inherited)\n         }\n@@ -5338,7 +5342,7 @@ impl<'a> Parser<'a> {\n                 // `pub(crate)`\n                 self.bump(); // `(`\n                 self.bump(); // `crate`\n-                let vis = Visibility::Crate(self.prev_span);\n+                let vis = Visibility::Crate(self.prev_span, CrateSugar::PubCrate);\n                 self.expect(&token::CloseDelim(token::Paren))?; // `)`\n                 return Ok(vis)\n             } else if self.look_ahead(1, |t| t.is_keyword(keywords::In)) {"}, {"sha": "4082cc03f12bccaab3a7469b08c0a2dbfdd81d89", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=214b0f229395d4460cbcccf17d07cf687ff83b0a", "patch": "@@ -1440,7 +1440,10 @@ impl<'a> State<'a> {\n     pub fn print_visibility(&mut self, vis: &ast::Visibility) -> io::Result<()> {\n         match *vis {\n             ast::Visibility::Public => self.word_nbsp(\"pub\"),\n-            ast::Visibility::Crate(_) => self.word_nbsp(\"pub(crate)\"),\n+            ast::Visibility::Crate(_, sugar) => match sugar {\n+                ast::CrateSugar::PubCrate => self.word_nbsp(\"pub(crate)\"),\n+                ast::CrateSugar::JustCrate => self.word_nbsp(\"crate\")\n+            }\n             ast::Visibility::Restricted { ref path, .. } => {\n                 let path = to_string(|s| s.print_path(path, false, 0, true));\n                 if path == \"self\" || path == \"super\" {"}, {"sha": "a2937d6de31f3501a9db2d98872164a94810a744", "filename": "src/test/compile-fail/feature-gate-crate_visibility_modifier.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Ftest%2Fcompile-fail%2Ffeature-gate-crate_visibility_modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Ftest%2Fcompile-fail%2Ffeature-gate-crate_visibility_modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-crate_visibility_modifier.rs?ref=214b0f229395d4460cbcccf17d07cf687ff83b0a", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+crate struct Bender { //~ ERROR `crate` visibility modifier is experimental\n+    earth: bool,\n+    fire: bool,\n+    air: bool,\n+    water: bool,\n+}\n+\n+fn main() {}"}, {"sha": "c4ab96c845619488310706977dcc70a4794723a9", "filename": "src/test/compile-fail/privacy/restricted/auxiliary/pub_restricted.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fauxiliary%2Fpub_restricted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fauxiliary%2Fpub_restricted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fauxiliary%2Fpub_restricted.rs?ref=214b0f229395d4460cbcccf17d07cf687ff83b0a", "patch": "@@ -8,14 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(crate_visibility_modifier)]\n+\n pub(crate) struct Crate;\n+\n #[derive(Default)]\n pub struct Universe {\n     pub x: i32,\n-    pub(crate) y: i32\n+    pub(crate) y: i32,\n+    crate z: i32,\n }\n \n impl Universe {\n     pub fn f(&self) {}\n     pub(crate) fn g(&self) {}\n+    crate fn h(&self) {}\n }"}, {"sha": "4d3f537779740adcea4ac675481938a51204d25a", "filename": "src/test/compile-fail/privacy/restricted/private-in-public.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fprivate-in-public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fprivate-in-public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fprivate-in-public.rs?ref=214b0f229395d4460cbcccf17d07cf687ff83b0a", "patch": "@@ -8,12 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(crate_visibility_modifier)]\n+\n mod foo {\n     struct Priv;\n     mod bar {\n         use foo::Priv;\n         pub(super) fn f(_: Priv) {}\n         pub(crate) fn g(_: Priv) {} //~ ERROR E0446\n+        crate fn h(_: Priv) {} //~ ERROR E0446\n     }\n }\n "}, {"sha": "7f076ebf287e2dcd89ccc82db647e7682eb92d08", "filename": "src/test/compile-fail/privacy/restricted/test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftest.rs?ref=214b0f229395d4460cbcccf17d07cf687ff83b0a", "patch": "@@ -50,8 +50,10 @@ fn main() {\n     let u = Universe::default();\n     let _ = u.x;\n     let _ = u.y; //~ ERROR private\n+    let _ = u.z; //~ ERROR private\n     u.f();\n     u.g(); //~ ERROR private\n+    u.h(); //~ ERROR private\n }\n \n mod pathological {"}, {"sha": "3a330d8bee21b8c165a2c7b1e83f39069d75b2cb", "filename": "src/test/parse-fail/issue-20711-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Ftest%2Fparse-fail%2Fissue-20711-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Ftest%2Fparse-fail%2Fissue-20711-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-20711-2.rs?ref=214b0f229395d4460cbcccf17d07cf687ff83b0a", "patch": "@@ -16,6 +16,6 @@ impl Foo {\n     fn foo() {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-} //~ ERROR expected one of `const`, `default`, `extern`, `fn`, `pub`, `type`, or `unsafe`\n+} //~ ERROR expected one of `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, or `unsafe`\n \n fn main() {}"}, {"sha": "cd79fa8be7c6527062011514f4c46ca7089d5bb9", "filename": "src/test/parse-fail/issue-20711.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Ftest%2Fparse-fail%2Fissue-20711.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Ftest%2Fparse-fail%2Fissue-20711.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-20711.rs?ref=214b0f229395d4460cbcccf17d07cf687ff83b0a", "patch": "@@ -14,6 +14,6 @@ struct Foo;\n \n impl Foo {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-} //~ ERROR expected one of `const`, `default`, `extern`, `fn`, `pub`, `type`, or `unsafe`\n+} //~ ERROR expected one of `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, or `unsafe`\n \n fn main() {}"}, {"sha": "3b783aa79e281c2c00b001e1917d8007102d4c95", "filename": "src/test/parse-fail/removed-syntax-static-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Ftest%2Fparse-fail%2Fremoved-syntax-static-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Ftest%2Fparse-fail%2Fremoved-syntax-static-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fremoved-syntax-static-fn.rs?ref=214b0f229395d4460cbcccf17d07cf687ff83b0a", "patch": "@@ -15,4 +15,4 @@ struct S;\n impl S {\n     static fn f() {}\n }\n-//~^^ ERROR expected one of `const`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`\n+//~^^ ERROR expected one of `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, `unsafe`"}, {"sha": "32145277252cb89df22f3283b56cbcc92b405986", "filename": "src/test/run-pass/macro-pub-matcher.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Ftest%2Frun-pass%2Fmacro-pub-matcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Ftest%2Frun-pass%2Fmacro-pub-matcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-pub-matcher.rs?ref=214b0f229395d4460cbcccf17d07cf687ff83b0a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![allow(dead_code, unused_imports)]\n-#![feature(macro_vis_matcher)]\n+#![feature(macro_vis_matcher, crate_visibility_modifier)]\n \n /**\n Ensure that `:vis` matches can be captured in existing positions, and passed\n@@ -64,6 +64,18 @@ mod with_pub_restricted {\n     vis_passthru! { pub(crate) use A as I; }\n }\n \n+mod with_crate {\n+    vis_passthru! { crate const A: i32 = 0; }\n+    vis_passthru! { crate enum B {} }\n+    vis_passthru! { crate extern \"C\" fn c() {} }\n+    vis_passthru! { crate mod d {} }\n+    vis_passthru! { crate static E: i32 = 0; }\n+    vis_passthru! { crate struct F; }\n+    vis_passthru! { crate trait G {} }\n+    vis_passthru! { crate type H = i32; }\n+    vis_passthru! { crate use A as I; }\n+}\n+\n mod garden {\n     mod with_pub_restricted_path {\n         vis_passthru! { pub(in garden) const A: i32 = 0; }"}, {"sha": "da4d26d78dabc0cb9e1d4926559b9d6c2f3f5bae", "filename": "src/tools/toolstate.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Ftools%2Ftoolstate.toml", "raw_url": "https://github.com/rust-lang/rust/raw/214b0f229395d4460cbcccf17d07cf687ff83b0a/src%2Ftools%2Ftoolstate.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftoolstate.toml?ref=214b0f229395d4460cbcccf17d07cf687ff83b0a", "patch": "@@ -29,7 +29,7 @@ miri = \"Broken\"\n clippy = \"Compiling\"\n \n # ping @nrc\n-rls = \"Testing\"\n+rls = \"Broken\"\n \n # ping @nrc\n-rustfmt = \"Testing\"\n+rustfmt = \"Broken\""}]}