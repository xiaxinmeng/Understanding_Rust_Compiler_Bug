{"sha": "a508a2e56b3c91be1e941eb6bd4aa7c30bd7dbfd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MDhhMmU1NmIzYzkxYmUxZTk0MWViNmJkNGFhN2MzMGJkN2RiZmQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-08-04T10:33:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-04T10:33:48Z"}, "message": "Uplift some comments to Doc comments", "tree": {"sha": "1606ff030f2d185b12544f2af00c832040febae6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1606ff030f2d185b12544f2af00c832040febae6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a508a2e56b3c91be1e941eb6bd4aa7c30bd7dbfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a508a2e56b3c91be1e941eb6bd4aa7c30bd7dbfd", "html_url": "https://github.com/rust-lang/rust/commit/a508a2e56b3c91be1e941eb6bd4aa7c30bd7dbfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a508a2e56b3c91be1e941eb6bd4aa7c30bd7dbfd/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c523b3f95498cf35a2f1a6bb8c071394ca4a6143", "url": "https://api.github.com/repos/rust-lang/rust/commits/c523b3f95498cf35a2f1a6bb8c071394ca4a6143", "html_url": "https://github.com/rust-lang/rust/commit/c523b3f95498cf35a2f1a6bb8c071394ca4a6143"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "e770f1d55dcfdcc08dd35bb96557c7ee84d23dbb", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a508a2e56b3c91be1e941eb6bd4aa7c30bd7dbfd/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a508a2e56b3c91be1e941eb6bd4aa7c30bd7dbfd/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=a508a2e56b3c91be1e941eb6bd4aa7c30bd7dbfd", "patch": "@@ -581,14 +581,14 @@ pub struct Struct {\n     pub min_size: Size,\n }\n \n-// Info required to optimize struct layout.\n+/// Info required to optimize struct layout.\n #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Debug)]\n enum StructKind {\n-    // A tuple, closure, or univariant which cannot be coerced to unsized.\n+    /// A tuple, closure, or univariant which cannot be coerced to unsized.\n     AlwaysSizedUnivariant,\n-    // A univariant, the last field of which may be coerced to unsized.\n+    /// A univariant, the last field of which may be coerced to unsized.\n     MaybeUnsizedUnivariant,\n-    // A univariant, but part of an enum.\n+    /// A univariant, but part of an enum.\n     EnumVariant,\n }\n \n@@ -1020,7 +1020,7 @@ pub enum Layout {\n     /// TyRawPtr or TyRef with a !Sized pointee.\n     FatPointer {\n         metadata: Primitive,\n-        // If true, the pointer cannot be null.\n+        /// If true, the pointer cannot be null.\n         non_zero: bool\n     },\n \n@@ -1031,8 +1031,8 @@ pub enum Layout {\n         discr: Integer,\n         signed: bool,\n         non_zero: bool,\n-        // Inclusive discriminant range.\n-        // If min > max, it represents min...u64::MAX followed by 0...max.\n+        /// Inclusive discriminant range.\n+        /// If min > max, it represents min...u64::MAX followed by 0...max.\n         // FIXME(eddyb) always use the shortest range, e.g. by finding\n         // the largest space between two consecutive discriminants and\n         // taking everything else as the (shortest) discriminant range.\n@@ -1043,7 +1043,7 @@ pub enum Layout {\n     /// Single-case enums, and structs/tuples.\n     Univariant {\n         variant: Struct,\n-        // If true, the structure is NonZero.\n+        /// If true, the structure is NonZero.\n         // FIXME(eddyb) use a newtype Layout kind for this.\n         non_zero: bool\n     },\n@@ -1084,9 +1084,9 @@ pub enum Layout {\n     StructWrappedNullablePointer {\n         nndiscr: u64,\n         nonnull: Struct,\n-        // N.B. There is a 0 at the start, for LLVM GEP through a pointer.\n+        /// N.B. There is a 0 at the start, for LLVM GEP through a pointer.\n         discrfield: FieldPath,\n-        // Like discrfield, but in source order. For debuginfo.\n+        /// Like discrfield, but in source order. For debuginfo.\n         discrfield_source: FieldPath\n     }\n }\n@@ -1944,11 +1944,11 @@ pub enum SizeSkeleton<'tcx> {\n \n     /// A potentially-fat pointer.\n     Pointer {\n-        // If true, this pointer is never null.\n+        /// If true, this pointer is never null.\n         non_zero: bool,\n-        // The type which determines the unsized metadata, if any,\n-        // of this pointer. Either a type parameter or a projection\n-        // depending on one, with regions erased.\n+        /// The type which determines the unsized metadata, if any,\n+        /// of this pointer. Either a type parameter or a projection\n+        /// depending on one, with regions erased.\n         tail: Ty<'tcx>\n     }\n }"}]}