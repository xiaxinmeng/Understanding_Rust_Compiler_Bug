{"sha": "b38953709d75178db30020c29be0cb4ff2e4be5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzODk1MzcwOWQ3NTE3OGRiMzAwMjBjMjliZTBjYjRmZjJlNGJlNWI=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-07-27T02:30:02Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-07-30T20:39:13Z"}, "message": "rustc_back/target: remove musl_base\n\nit's the same as linux_musl_base", "tree": {"sha": "212e4c6e1a2777970fb0c9b317ac5b5302f9c8bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/212e4c6e1a2777970fb0c9b317ac5b5302f9c8bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b38953709d75178db30020c29be0cb4ff2e4be5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b38953709d75178db30020c29be0cb4ff2e4be5b", "html_url": "https://github.com/rust-lang/rust/commit/b38953709d75178db30020c29be0cb4ff2e4be5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b38953709d75178db30020c29be0cb4ff2e4be5b/comments", "author": null, "committer": null, "parents": [{"sha": "f0ec906d186a87b4b4c08b71a82f0e8803a110df", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0ec906d186a87b4b4c08b71a82f0e8803a110df", "html_url": "https://github.com/rust-lang/rust/commit/f0ec906d186a87b4b4c08b71a82f0e8803a110df"}], "stats": {"total": 79, "additions": 3, "deletions": 76}, "files": [{"sha": "4bc363d0ffda1244320aaf2b174ffa3083995076", "filename": "src/librustc_back/target/arm_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b38953709d75178db30020c29be0cb4ff2e4be5b/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38953709d75178db30020c29be0cb4ff2e4be5b/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabi.rs?ref=b38953709d75178db30020c29be0cb4ff2e4be5b", "patch": "@@ -11,7 +11,7 @@\n use target::Target;\n \n pub fn target() -> Target {\n-    let mut base = super::musl_base::opts();\n+    let mut base = super::linux_musl_base::opts();\n \n     // Most of these settings are copied from the arm_unknown_linux_gnueabi\n     // target."}, {"sha": "d96f7443dd9c6a7e2f08c8f02a2dfabb11458795", "filename": "src/librustc_back/target/arm_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b38953709d75178db30020c29be0cb4ff2e4be5b/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38953709d75178db30020c29be0cb4ff2e4be5b/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_unknown_linux_musleabihf.rs?ref=b38953709d75178db30020c29be0cb4ff2e4be5b", "patch": "@@ -11,7 +11,7 @@\n use target::Target;\n \n pub fn target() -> Target {\n-    let mut base = super::musl_base::opts();\n+    let mut base = super::linux_musl_base::opts();\n \n     // Most of these settings are copied from the arm_unknown_linux_gnueabihf\n     // target."}, {"sha": "6cb75cbf04cbf2439bbd22c59a0e04876ad59bff", "filename": "src/librustc_back/target/armv7_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b38953709d75178db30020c29be0cb4ff2e4be5b/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38953709d75178db30020c29be0cb4ff2e4be5b/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farmv7_unknown_linux_musleabihf.rs?ref=b38953709d75178db30020c29be0cb4ff2e4be5b", "patch": "@@ -11,7 +11,7 @@\n use target::Target;\n \n pub fn target() -> Target {\n-    let mut base = super::musl_base::opts();\n+    let mut base = super::linux_musl_base::opts();\n \n     // Most of these settings are copied from the armv7_unknown_linux_gnueabihf\n     // target."}, {"sha": "ecfbeaca351725588e148ac3dda8c3b96d679f10", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b38953709d75178db30020c29be0cb4ff2e4be5b/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b38953709d75178db30020c29be0cb4ff2e4be5b/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=b38953709d75178db30020c29be0cb4ff2e4be5b", "patch": "@@ -59,7 +59,6 @@ mod freebsd_base;\n mod linux_base;\n mod linux_musl_base;\n mod openbsd_base;\n-mod musl_base;\n mod netbsd_base;\n mod solaris_base;\n mod windows_base;"}, {"sha": "77cf015e1d9b3f047d98be88ef06c06e4e810986", "filename": "src/librustc_back/target/musl_base.rs", "status": "removed", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/f0ec906d186a87b4b4c08b71a82f0e8803a110df/src%2Flibrustc_back%2Ftarget%2Fmusl_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0ec906d186a87b4b4c08b71a82f0e8803a110df/src%2Flibrustc_back%2Ftarget%2Fmusl_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmusl_base.rs?ref=f0ec906d186a87b4b4c08b71a82f0e8803a110df", "patch": "@@ -1,72 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use target::TargetOptions;\n-\n-pub fn opts() -> TargetOptions {\n-    let mut base = super::linux_base::opts();\n-\n-    // Make sure that the linker/gcc really don't pull in anything, including\n-    // default objects, libs, etc.\n-    base.pre_link_args.push(\"-nostdlib\".to_string());\n-    base.pre_link_args.push(\"-static\".to_string());\n-\n-    // At least when this was tested, the linker would not add the\n-    // `GNU_EH_FRAME` program header to executables generated, which is required\n-    // when unwinding to locate the unwinding information. I'm not sure why this\n-    // argument is *not* necessary for normal builds, but it can't hurt!\n-    base.pre_link_args.push(\"-Wl,--eh-frame-hdr\".to_string());\n-\n-    // There's a whole bunch of circular dependencies when dealing with MUSL\n-    // unfortunately. To put this in perspective libc is statically linked to\n-    // liblibc and libunwind is statically linked to libstd:\n-    //\n-    // * libcore depends on `fmod` which is in libc (transitively in liblibc).\n-    //   liblibc, however, depends on libcore.\n-    // * compiler-rt has personality symbols that depend on libunwind, but\n-    //   libunwind is in libstd which depends on compiler-rt.\n-    //\n-    // Recall that linkers discard libraries and object files as much as\n-    // possible, and with all the static linking and archives flying around with\n-    // MUSL the linker is super aggressively stripping out objects. For example\n-    // the first case has fmod stripped from liblibc (it's in its own object\n-    // file) so it's not there when libcore needs it. In the second example all\n-    // the unused symbols from libunwind are stripped (each is in its own object\n-    // file in libstd) before we end up linking compiler-rt which depends on\n-    // those symbols.\n-    //\n-    // To deal with these circular dependencies we just force the compiler to\n-    // link everything as a group, not stripping anything out until everything\n-    // is processed. The linker will still perform a pass to strip out object\n-    // files but it won't do so until all objects/archives have been processed.\n-    base.pre_link_args.push(\"-Wl,-(\".to_string());\n-    base.post_link_args.push(\"-Wl,-)\".to_string());\n-\n-    // When generating a statically linked executable there's generally some\n-    // small setup needed which is listed in these files. These are provided by\n-    // a musl toolchain and are linked by default by the `musl-gcc` script. Note\n-    // that `gcc` also does this by default, it just uses some different files.\n-    //\n-    // Each target directory for musl has these object files included in it so\n-    // they'll be included from there.\n-    base.pre_link_objects_exe.push(\"crt1.o\".to_string());\n-    base.pre_link_objects_exe.push(\"crti.o\".to_string());\n-    base.post_link_objects.push(\"crtn.o\".to_string());\n-\n-    // MUSL support doesn't currently include dynamic linking, so there's no\n-    // need for dylibs or rpath business. Additionally `-pie` is incompatible\n-    // with `-static`, so we can't pass `-pie`.\n-    base.dynamic_linking = false;\n-    base.has_rpath = false;\n-    base.position_independent_executables = false;\n-\n-    return base;\n-}\n-"}]}