{"sha": "1d720ec27c5bdbc377145b8a29c1d727fb7131d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNzIwZWMyN2M1YmRiYzM3NzE0NWI4YTI5YzFkNzI3ZmI3MTMxZDY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-11T10:20:33Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-11T11:11:59Z"}, "message": "Run `rustfmt --file-lines ...` for changes from previous commits.", "tree": {"sha": "b9593feed772606933ace31df9719806cafd039c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9593feed772606933ace31df9719806cafd039c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d720ec27c5bdbc377145b8a29c1d727fb7131d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d720ec27c5bdbc377145b8a29c1d727fb7131d6", "html_url": "https://github.com/rust-lang/rust/commit/1d720ec27c5bdbc377145b8a29c1d727fb7131d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d720ec27c5bdbc377145b8a29c1d727fb7131d6/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "630ec8880cc2941a3fd178a27934dff0d46b8155", "url": "https://api.github.com/repos/rust-lang/rust/commits/630ec8880cc2941a3fd178a27934dff0d46b8155", "html_url": "https://github.com/rust-lang/rust/commit/630ec8880cc2941a3fd178a27934dff0d46b8155"}], "stats": {"total": 131, "additions": 54, "deletions": 77}, "files": [{"sha": "8a59f6b69bcd690ba3506db9b3536d2ea5025f61", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d720ec27c5bdbc377145b8a29c1d727fb7131d6/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d720ec27c5bdbc377145b8a29c1d727fb7131d6/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=1d720ec27c5bdbc377145b8a29c1d727fb7131d6", "patch": "@@ -590,7 +590,8 @@ struct HirItemLike<T> {\n }\n \n impl<'hir, T> HashStable<StableHashingContext<'hir>> for HirItemLike<T>\n-    where T: HashStable<StableHashingContext<'hir>>\n+where\n+    T: HashStable<StableHashingContext<'hir>>,\n {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'hir>,"}, {"sha": "eff42efa67b92c6aaf9ddc13b765e1ea7d3cf7cf", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1d720ec27c5bdbc377145b8a29c1d727fb7131d6/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d720ec27c5bdbc377145b8a29c1d727fb7131d6/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=1d720ec27c5bdbc377145b8a29c1d727fb7131d6", "patch": "@@ -397,8 +397,9 @@ pub fn hash_stable_trait_impls<'a, W>(\n     hcx: &mut StableHashingContext<'a>,\n     hasher: &mut StableHasher<W>,\n     blanket_impls: &[DefId],\n-    non_blanket_impls: &FxHashMap<fast_reject::SimplifiedType, Vec<DefId>>)\n-    where W: StableHasherResult\n+    non_blanket_impls: &FxHashMap<fast_reject::SimplifiedType, Vec<DefId>>,\n+) where\n+    W: StableHasherResult,\n {\n     {\n         let mut blanket_impls: SmallVec<[_; 8]> = blanket_impls"}, {"sha": "89e79c56ca39d3629e190f470cbc5d2e1c953924", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1d720ec27c5bdbc377145b8a29c1d727fb7131d6/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d720ec27c5bdbc377145b8a29c1d727fb7131d6/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=1d720ec27c5bdbc377145b8a29c1d727fb7131d6", "patch": "@@ -136,7 +136,8 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for ty::BoundVar {\n }\n \n impl<'a, T> HashStable<StableHashingContext<'a>> for ty::Binder<T>\n-    where T: HashStable<StableHashingContext<'a>>\n+where\n+    T: HashStable<StableHashingContext<'a>>,\n {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n@@ -192,9 +193,7 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for region::Scope {\n     }\n }\n \n-impl<'a> HashStable<StableHashingContext<'a>>\n-for ty::TyVid\n-{\n+impl<'a> HashStable<StableHashingContext<'a>> for ty::TyVid {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           _hcx: &mut StableHashingContext<'a>,\n                                           _hasher: &mut StableHasher<W>) {\n@@ -204,9 +203,7 @@ for ty::TyVid\n     }\n }\n \n-impl<'a> HashStable<StableHashingContext<'a>>\n-for ty::IntVid\n-{\n+impl<'a> HashStable<StableHashingContext<'a>> for ty::IntVid {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           _hcx: &mut StableHashingContext<'a>,\n                                           _hasher: &mut StableHasher<W>) {\n@@ -216,9 +213,7 @@ for ty::IntVid\n     }\n }\n \n-impl<'a> HashStable<StableHashingContext<'a>>\n-for ty::FloatVid\n-{\n+impl<'a> HashStable<StableHashingContext<'a>> for ty::FloatVid {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           _hcx: &mut StableHashingContext<'a>,\n                                           _hasher: &mut StableHasher<W>) {\n@@ -228,9 +223,9 @@ for ty::FloatVid\n     }\n }\n \n-impl<'a, T> HashStable<StableHashingContext<'a>>\n-for ty::steal::Steal<T>\n-    where T: HashStable<StableHashingContext<'a>>\n+impl<'a, T> HashStable<StableHashingContext<'a>> for ty::steal::Steal<T>\n+where\n+    T: HashStable<StableHashingContext<'a>>,\n {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,"}, {"sha": "af0b51e637a36f6b93cfa98b7901b4c490139f58", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1d720ec27c5bdbc377145b8a29c1d727fb7131d6/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d720ec27c5bdbc377145b8a29c1d727fb7131d6/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=1d720ec27c5bdbc377145b8a29c1d727fb7131d6", "patch": "@@ -104,10 +104,7 @@ pub enum IntercrateAmbiguityCause {\n impl IntercrateAmbiguityCause {\n     /// Emits notes when the overlap is caused by complex intercrate ambiguities.\n     /// See #23980 for details.\n-    pub fn add_intercrate_ambiguity_hint(\n-        &self,\n-        err: &mut errors::DiagnosticBuilder<'_>,\n-    ) {\n+    pub fn add_intercrate_ambiguity_hint(&self, err: &mut errors::DiagnosticBuilder<'_>) {\n         err.note(&self.intercrate_ambiguity_hint());\n     }\n "}, {"sha": "908bbbcd1d77d1759cac3520bcdf6b982fda083f", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d720ec27c5bdbc377145b8a29c1d727fb7131d6/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d720ec27c5bdbc377145b8a29c1d727fb7131d6/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=1d720ec27c5bdbc377145b8a29c1d727fb7131d6", "patch": "@@ -155,8 +155,8 @@ impl<D: Copy + Debug + Ord + Eq + Hash> SimplifiedTypeGen<D> {\n }\n \n impl<'a, D> HashStable<StableHashingContext<'a>> for SimplifiedTypeGen<D>\n-    where D: Copy + Debug + Ord + Eq + Hash +\n-             HashStable<StableHashingContext<'a>>,\n+where\n+    D: Copy + Debug + Ord + Eq + Hash + HashStable<StableHashingContext<'a>>,\n {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,"}, {"sha": "ba42cecbe5b83fe972264141d87132da50d652f8", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d720ec27c5bdbc377145b8a29c1d727fb7131d6/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d720ec27c5bdbc377145b8a29c1d727fb7131d6/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=1d720ec27c5bdbc377145b8a29c1d727fb7131d6", "patch": "@@ -442,10 +442,10 @@ fn resolve_associated_item<'a, 'tcx>(\n     }\n }\n \n-fn needs_fn_once_adapter_shim(actual_closure_kind: ty::ClosureKind,\n-                                        trait_closure_kind: ty::ClosureKind)\n-    -> Result<bool, ()>\n-{\n+fn needs_fn_once_adapter_shim(\n+    actual_closure_kind: ty::ClosureKind,\n+    trait_closure_kind: ty::ClosureKind,\n+) -> Result<bool, ()> {\n     match (actual_closure_kind, trait_closure_kind) {\n         (ty::ClosureKind::Fn, ty::ClosureKind::Fn) |\n             (ty::ClosureKind::FnMut, ty::ClosureKind::FnMut) |"}, {"sha": "4696325275292aa4911460f17a4578d1c8fce2f6", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1d720ec27c5bdbc377145b8a29c1d727fb7131d6/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d720ec27c5bdbc377145b8a29c1d727fb7131d6/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=1d720ec27c5bdbc377145b8a29c1d727fb7131d6", "patch": "@@ -1679,9 +1679,10 @@ impl ty::query::TyCtxtAt<'a, 'tcx, '_> {\n }\n \n impl<'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n-    where C: LayoutOf<Ty = Ty<'tcx>> + HasTyCtxt<'tcx>,\n-          C::TyLayout: MaybeResult<TyLayout<'tcx>>,\n-          C: HasParamEnv<'tcx>\n+where\n+    C: LayoutOf<Ty = Ty<'tcx>> + HasTyCtxt<'tcx>,\n+    C::TyLayout: MaybeResult<TyLayout<'tcx>>,\n+    C: HasParamEnv<'tcx>,\n {\n     fn for_variant(this: TyLayout<'tcx>, cx: &C, variant_index: VariantIdx) -> TyLayout<'tcx> {\n         let details = match this.variants {"}, {"sha": "c46e9c4be366cb1c4804c436c1a74ff280664617", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d720ec27c5bdbc377145b8a29c1d727fb7131d6/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d720ec27c5bdbc377145b8a29c1d727fb7131d6/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=1d720ec27c5bdbc377145b8a29c1d727fb7131d6", "patch": "@@ -1615,7 +1615,8 @@ pub struct Placeholder<T> {\n }\n \n impl<'a, T> HashStable<StableHashingContext<'a>> for Placeholder<T>\n-    where T: HashStable<StableHashingContext<'a>>\n+where\n+    T: HashStable<StableHashingContext<'a>>,\n {\n     fn hash_stable<W: StableHasherResult>(\n         &self,"}, {"sha": "e4b82d8496669526c55e26b9ad2c9487feb3608f", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1d720ec27c5bdbc377145b8a29c1d727fb7131d6/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d720ec27c5bdbc377145b8a29c1d727fb7131d6/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=1d720ec27c5bdbc377145b8a29c1d727fb7131d6", "patch": "@@ -223,10 +223,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         }\n     }\n \n-    fn codegen_return_terminator(\n-        &mut self,\n-        mut bx: Bx,\n-    ) {\n+    fn codegen_return_terminator(&mut self, mut bx: Bx) {\n         if self.fn_ty.c_variadic {\n             match self.va_list_ref {\n                 Some(va_list) => {"}, {"sha": "809586e246a35c0350fb30bdfc73f0346cc907dd", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d720ec27c5bdbc377145b8a29c1d727fb7131d6/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d720ec27c5bdbc377145b8a29c1d727fb7131d6/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=1d720ec27c5bdbc377145b8a29c1d727fb7131d6", "patch": "@@ -202,11 +202,7 @@ fn report_bin_hex_error(\n //  - `uX` => `uY`\n //\n // No suggestion for: `isize`, `usize`.\n-fn get_type_suggestion(\n-    t: Ty<'_>,\n-    val: u128,\n-    negative: bool,\n-) -> Option<String> {\n+fn get_type_suggestion(t: Ty<'_>, val: u128, negative: bool) -> Option<String> {\n     use syntax::ast::IntTy::*;\n     use syntax::ast::UintTy::*;\n     macro_rules! find_fit {"}, {"sha": "0aabebcf9dc2c17636c086a61b7a2a4517c7ec68", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d720ec27c5bdbc377145b8a29c1d727fb7131d6/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d720ec27c5bdbc377145b8a29c1d727fb7131d6/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=1d720ec27c5bdbc377145b8a29c1d727fb7131d6", "patch": "@@ -1575,11 +1575,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n     /// Append `AscribeUserType` statements onto the end of `block`\n     /// for each ascription\n-    fn ascribe_types(\n-        &mut self,\n-        block: BasicBlock,\n-        ascriptions: &[Ascription<'tcx>],\n-    ) {\n+    fn ascribe_types(&mut self, block: BasicBlock, ascriptions: &[Ascription<'tcx>]) {\n         for ascription in ascriptions {\n             let source_info = self.source_info(ascription.span);\n "}, {"sha": "b8ce31d0adfdc37502bb997644d5ea3b8497f9ef", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 20, "deletions": 29, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1d720ec27c5bdbc377145b8a29c1d727fb7131d6/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d720ec27c5bdbc377145b8a29c1d727fb7131d6/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=1d720ec27c5bdbc377145b8a29c1d727fb7131d6", "patch": "@@ -119,7 +119,8 @@ pub fn elaborate_drop<'b, 'tcx, D>(\n }\n \n impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n-    where D: DropElaborator<'b, 'tcx>\n+where\n+    D: DropElaborator<'b, 'tcx>,\n {\n     fn place_ty(&self, place: &Place<'tcx>) -> Ty<'tcx> {\n         place.ty(self.elaborator.body(), self.tcx()).ty\n@@ -285,12 +286,12 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n     ///\n     /// NOTE: this does not clear the master drop flag, so you need\n     /// to point succ/unwind on a `drop_ladder_bottom`.\n-    fn drop_ladder(&mut self,\n-                       fields: Vec<(Place<'tcx>, Option<D::Path>)>,\n-                       succ: BasicBlock,\n-                       unwind: Unwind)\n-                       -> (BasicBlock, Unwind)\n-    {\n+    fn drop_ladder(\n+        &mut self,\n+        fields: Vec<(Place<'tcx>, Option<D::Path>)>,\n+        succ: BasicBlock,\n+        unwind: Unwind,\n+    ) -> (BasicBlock, Unwind) {\n         debug!(\"drop_ladder({:?}, {:?})\", self, fields);\n \n         let mut fields = fields;\n@@ -314,9 +315,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         (*normal_ladder.last().unwrap(), *unwind_ladder.last().unwrap())\n     }\n \n-    fn open_drop_for_tuple(&mut self, tys: &[Ty<'tcx>])\n-                               -> BasicBlock\n-    {\n+    fn open_drop_for_tuple(&mut self, tys: &[Ty<'tcx>]) -> BasicBlock {\n         debug!(\"open_drop_for_tuple({:?}, {:?})\", self, tys);\n \n         let fields = tys.iter().enumerate().map(|(i, &ty)| {\n@@ -328,9 +327,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         self.drop_ladder(fields, succ, unwind).0\n     }\n \n-    fn open_drop_for_box(&mut self, adt: &'tcx ty::AdtDef, substs: SubstsRef<'tcx>)\n-                             -> BasicBlock\n-    {\n+    fn open_drop_for_box(&mut self, adt: &'tcx ty::AdtDef, substs: SubstsRef<'tcx>) -> BasicBlock {\n         debug!(\"open_drop_for_box({:?}, {:?}, {:?})\", self, adt, substs);\n \n         let interior = self.place.clone().deref();\n@@ -346,8 +343,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         self.drop_subpath(&interior, interior_path, succ, unwind_succ)\n     }\n \n-    fn open_drop_for_adt(&mut self, adt: &'tcx ty::AdtDef, substs: SubstsRef<'tcx>)\n-                             -> BasicBlock {\n+    fn open_drop_for_adt(&mut self, adt: &'tcx ty::AdtDef, substs: SubstsRef<'tcx>) -> BasicBlock {\n         debug!(\"open_drop_for_adt({:?}, {:?}, {:?})\", self, adt, substs);\n         if adt.variants.len() == 0 {\n             return self.elaborator.patch().new_block(BasicBlockData {\n@@ -505,9 +501,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         self.drop_flag_test_block(switch_block, succ, unwind)\n     }\n \n-    fn destructor_call_block(&mut self, (succ, unwind): (BasicBlock, Unwind))\n-                                 -> BasicBlock\n-    {\n+    fn destructor_call_block(&mut self, (succ, unwind): (BasicBlock, Unwind)) -> BasicBlock {\n         debug!(\"destructor_call_block({:?}, {:?})\", self, succ);\n         let tcx = self.tcx();\n         let drop_trait = tcx.lang_items().drop_trait().unwrap();\n@@ -837,11 +831,12 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n     /// if FLAG(self.path)\n     ///     if let Some(mode) = mode: FLAG(self.path)[mode] = false\n     ///     drop(self.place)\n-    fn complete_drop(&mut self,\n-                         drop_mode: Option<DropFlagMode>,\n-                         succ: BasicBlock,\n-                         unwind: Unwind) -> BasicBlock\n-    {\n+    fn complete_drop(\n+        &mut self,\n+        drop_mode: Option<DropFlagMode>,\n+        succ: BasicBlock,\n+        unwind: Unwind,\n+    ) -> BasicBlock {\n         debug!(\"complete_drop({:?},{:?})\", self, drop_mode);\n \n         let drop_block = self.drop_block(succ, unwind);\n@@ -892,7 +887,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         adt: &'tcx ty::AdtDef,\n         substs: SubstsRef<'tcx>,\n         target: BasicBlock,\n-        unwind: Unwind\n+        unwind: Unwind,\n     ) -> BasicBlock {\n         let tcx = self.tcx();\n         let unit_temp = Place::Base(PlaceBase::Local(self.new_temp(tcx.mk_unit())));\n@@ -947,11 +942,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         }\n     }\n \n-    fn new_block(&mut self,\n-                     unwind: Unwind,\n-                     k: TerminatorKind<'tcx>)\n-                     -> BasicBlock\n-    {\n+    fn new_block(&mut self, unwind: Unwind, k: TerminatorKind<'tcx>) -> BasicBlock {\n         self.elaborator.patch().new_block(BasicBlockData {\n             statements: vec![],\n             terminator: Some(Terminator {"}, {"sha": "e952515bfe0ebf978b68d3fb0f40ec6a14cd65e4", "filename": "src/libsyntax_ext/cfg.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1d720ec27c5bdbc377145b8a29c1d727fb7131d6/src%2Flibsyntax_ext%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d720ec27c5bdbc377145b8a29c1d727fb7131d6/src%2Flibsyntax_ext%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcfg.rs?ref=1d720ec27c5bdbc377145b8a29c1d727fb7131d6", "patch": "@@ -12,10 +12,11 @@ use syntax::tokenstream;\n use syntax::parse::token;\n use syntax_pos::Span;\n \n-pub fn expand_cfg(cx: &mut ExtCtxt<'_>,\n-                       sp: Span,\n-                       tts: &[tokenstream::TokenTree])\n-                       -> Box<dyn base::MacResult + 'static> {\n+pub fn expand_cfg(\n+    cx: &mut ExtCtxt<'_>,\n+    sp: Span,\n+    tts: &[tokenstream::TokenTree],\n+) -> Box<dyn base::MacResult + 'static> {\n     let sp = sp.apply_mark(cx.current_expansion.mark);\n \n     match parse_cfg(cx, sp, tts) {"}]}