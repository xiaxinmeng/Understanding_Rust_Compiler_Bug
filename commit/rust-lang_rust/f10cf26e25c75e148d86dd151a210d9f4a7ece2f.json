{"sha": "f10cf26e25c75e148d86dd151a210d9f4a7ece2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMGNmMjZlMjVjNzVlMTQ4ZDg2ZGQxNTFhMjEwZDlmNGE3ZWNlMmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-15T21:48:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-15T21:48:55Z"}, "message": "auto merge of #5861 : catamorphism/rust/rustpkg, r=catamorphism\n\nr? @graydon\r\n\r\nPulled out tests into their own modules inside the files they test,\r\nas per the draft style guidelines.\r\n\r\nStarted a new module, path_util, for utility functions to do with\r\npaths and directories.\r\n\r\nChanged default_dest_dir to use a condition and return Path\r\ninstead of Option<Path>.", "tree": {"sha": "d5a607d1e325497e039cee73d19ba3d5449f7dcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5a607d1e325497e039cee73d19ba3d5449f7dcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f10cf26e25c75e148d86dd151a210d9f4a7ece2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f10cf26e25c75e148d86dd151a210d9f4a7ece2f", "html_url": "https://github.com/rust-lang/rust/commit/f10cf26e25c75e148d86dd151a210d9f4a7ece2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f10cf26e25c75e148d86dd151a210d9f4a7ece2f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ce689d61c61d9e02c5181abdfa673094ff4e842", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ce689d61c61d9e02c5181abdfa673094ff4e842", "html_url": "https://github.com/rust-lang/rust/commit/6ce689d61c61d9e02c5181abdfa673094ff4e842"}, {"sha": "7881bde0271ed4dd68e2a286ed456c2578e70d6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7881bde0271ed4dd68e2a286ed456c2578e70d6a", "html_url": "https://github.com/rust-lang/rust/commit/7881bde0271ed4dd68e2a286ed456c2578e70d6a"}], "stats": {"total": 201, "additions": 138, "deletions": 63}, "files": [{"sha": "353995a816e37d0bb82c5c2ac4e74c58c26a4ef1", "filename": "src/librustpkg/conditions.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f10cf26e25c75e148d86dd151a210d9f4a7ece2f/src%2Flibrustpkg%2Fconditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f10cf26e25c75e148d86dd151a210d9f4a7ece2f/src%2Flibrustpkg%2Fconditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fconditions.rs?ref=f10cf26e25c75e148d86dd151a210d9f4a7ece2f", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Useful conditions\n+\n+pub use core::path::Path;\n+\n+condition! {\n+    bad_path: (super::Path, ~str) -> super::Path;\n+}"}, {"sha": "c821281184d3bf586b8320620b00736673a69a08", "filename": "src/librustpkg/path_util.rs", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/f10cf26e25c75e148d86dd151a210d9f4a7ece2f/src%2Flibrustpkg%2Fpath_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f10cf26e25c75e148d86dd151a210d9f4a7ece2f/src%2Flibrustpkg%2Fpath_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpath_util.rs?ref=f10cf26e25c75e148d86dd151a210d9f4a7ece2f", "patch": "@@ -0,0 +1,83 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// rustpkg utilities having to do with paths and directories\n+\n+use core::path::*;\n+use core::os;\n+use util::PkgId;\n+\n+/// Returns the output directory to use.\n+/// Right now is always the default, should\n+/// support changing it.\n+pub fn dest_dir(pkgid: PkgId) -> Path {\n+    default_dest_dir(&pkgid.path)\n+}\n+\n+/// Returns the default output directory for compilation.\n+/// Creates that directory if it doesn't exist.\n+pub fn default_dest_dir(pkg_dir: &Path) -> Path {\n+    use core::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n+    use conditions::bad_path::cond;\n+\n+    // For now: assumes that pkg_dir exists and is relative\n+    // to the CWD. Change this later when we do path searching.\n+    let rslt = pkg_dir.push(\"build\");\n+    let is_dir = os::path_is_dir(&rslt);\n+    if os::path_exists(&rslt) {\n+        if is_dir {\n+            rslt\n+        }\n+        else {\n+            cond.raise((rslt, ~\"Path names a file that isn't a directory\"))\n+        }\n+    }\n+    else {\n+        // Create it\n+        if os::make_dir(&rslt, (S_IRUSR | S_IWUSR | S_IXUSR) as i32) {\n+            rslt\n+        }\n+        else {\n+            cond.raise((rslt, ~\"Could not create directory\"))\n+        }\n+    }\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use core::{os, rand};\n+    use core::path::Path;\n+    use core::rand::RngUtil;\n+    use path_util::*;\n+\n+    // Helper function to create a directory name that doesn't exist\n+    pub fn mk_nonexistent(tmpdir: &Path, suffix: &str) -> Path {\n+        let r = rand::Rng();\n+        for 1000.times {\n+            let p = tmpdir.push(r.gen_str(16) + suffix);\n+            if !os::path_exists(&p) {\n+                return p;\n+            }\n+        }\n+        fail!(~\"Couldn't compute a non-existent path name; this is worrisome\")\n+    }\n+\n+    #[test]\n+    fn default_dir_ok() {\n+        let the_path = os::tmpdir();\n+        let substitute_path = Path(\"xyzzy\");\n+        assert!(default_dest_dir(&the_path) == the_path.push(~\"build\"));\n+        let nonexistent_path = mk_nonexistent(&the_path, \"quux\");\n+        let bogus = do ::conditions::bad_path::cond.trap(|_| {\n+            substitute_path\n+        }).in { default_dest_dir(&nonexistent_path) };\n+        assert!(bogus == substitute_path);\n+    }\n+}"}, {"sha": "f8805142769c14cc98e1d57b05ef4c995d19cdde", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 5, "deletions": 46, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/f10cf26e25c75e148d86dd151a210d9f4a7ece2f/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/f10cf26e25c75e148d86dd151a210d9f4a7ece2f/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=f10cf26e25c75e148d86dd151a210d9f4a7ece2f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// rustpkg - a purely function package manager and build system\n+// rustpkg - a package manager and build system for Rust\n \n #[link(name = \"rustpkg\",\n        vers = \"0.7-pre\",\n@@ -37,8 +37,11 @@ use std::net::url;\n use std::{getopts};\n use syntax::{ast, diagnostic};\n use util::{ExitCode, Pkg, PkgId};\n+use path_util::dest_dir;\n \n+mod conditions;\n mod usage;\n+mod path_util;\n mod util;\n \n /// A PkgScript represents user-supplied custom logic for\n@@ -155,46 +158,6 @@ struct Ctx {\n     dep_cache: @mut HashMap<~str, bool>,\n }\n \n-\n-/// Returns the output directory to use.\n-/// Right now is always the default, should\n-/// support changing it.\n-fn dest_dir(pkgid: PkgId) -> Path {\n-    default_dest_dir(&pkgid.path).expect(\n-        ~\"couldn't make default dir?!\")\n-}\n-\n-/// Returns the default output directory for compilation.\n-/// Creates that directory if it doesn't exist.\n-fn default_dest_dir(pkg_dir: &Path) -> Option<Path> {\n-    use core::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n-\n-    // For now: assumes that pkg_dir exists and is relative\n-    // to the CWD. Change this later when we do path searching.\n-    let rslt = pkg_dir.push(\"build\");\n-    let is_dir = os::path_is_dir(&rslt);\n-    if os::path_exists(&rslt) {\n-        if is_dir {\n-            Some(rslt)\n-        }\n-        else {\n-            util::error(fmt!(\"%s is not a directory\", rslt.to_str()));\n-            None\n-        }\n-    }\n-    else {\n-        // Create it\n-        if os::make_dir(&rslt, (S_IRUSR | S_IWUSR | S_IXUSR) as i32) {\n-            Some(rslt)\n-        }\n-        else {\n-            util::error(fmt!(\"Could not create directory %s\",\n-                             rslt.to_str()));\n-            None // ??? should probably use conditions\n-        }\n-    }\n-}\n-\n impl Ctx {\n \n     fn run(&self, cmd: ~str, args: ~[~str]) {\n@@ -759,10 +722,6 @@ pub struct PkgSrc {\n     benchs: ~[Crate],\n }\n \n-condition! {\n-    bad_path: (super::Path, ~str) -> super::Path;\n-}\n-\n condition! {\n     build_err: (~str) -> ();\n }\n@@ -785,7 +744,7 @@ impl PkgSrc {\n \n \n     fn check_dir(&self) -> Path {\n-        use bad_path::cond;\n+        use conditions::bad_path::cond;\n \n         debug!(\"Pushing onto root: %s | %s\", self.id.path.to_str(),\n                self.root.to_str());"}, {"sha": "f594860607255eb71ddd9513ea40a9dc6f7cab78", "filename": "src/librustpkg/tests.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f10cf26e25c75e148d86dd151a210d9f4a7ece2f/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f10cf26e25c75e148d86dd151a210d9f4a7ece2f/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=f10cf26e25c75e148d86dd151a210d9f4a7ece2f", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// rustpkg unit tests"}, {"sha": "19938e8c5f178beca7153bbf6c33a13aa6a6bd45", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f10cf26e25c75e148d86dd151a210d9f4a7ece2f/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f10cf26e25c75e148d86dd151a210d9f4a7ece2f/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=f10cf26e25c75e148d86dd151a210d9f4a7ece2f", "patch": "@@ -563,21 +563,26 @@ pub fn link_exe(src: &Path, dest: &Path) -> bool {\n     }\n }\n \n-#[test]\n-fn test_is_cmd() {\n-    assert!(is_cmd(~\"build\"));\n-    assert!(is_cmd(~\"clean\"));\n-    assert!(is_cmd(~\"do\"));\n-    assert!(is_cmd(~\"info\"));\n-    assert!(is_cmd(~\"install\"));\n-    assert!(is_cmd(~\"prefer\"));\n-    assert!(is_cmd(~\"test\"));\n-    assert!(is_cmd(~\"uninstall\"));\n-    assert!(is_cmd(~\"unprefer\"));\n-}\n-\n-#[test]\n-fn test_parse_name() {\n-    assert!(parse_name(~\"org.mozilla.servo\").get() == ~\"servo\");\n-    assert!(parse_name(~\"org. mozilla.servo 2131\").is_err());\n+#[cfg(test)]\n+mod test {\n+    use super::{is_cmd, parse_name};\n+\n+    #[test]\n+    fn test_is_cmd() {\n+        assert!(is_cmd(~\"build\"));\n+        assert!(is_cmd(~\"clean\"));\n+        assert!(is_cmd(~\"do\"));\n+        assert!(is_cmd(~\"info\"));\n+        assert!(is_cmd(~\"install\"));\n+        assert!(is_cmd(~\"prefer\"));\n+        assert!(is_cmd(~\"test\"));\n+        assert!(is_cmd(~\"uninstall\"));\n+        assert!(is_cmd(~\"unprefer\"));\n+    }\n+\n+    #[test]\n+    fn test_parse_name() {\n+        assert!(parse_name(~\"org.mozilla.servo\").get() == ~\"servo\");\n+        assert!(parse_name(~\"org. mozilla.servo 2131\").is_err());\n+    }\n }"}]}