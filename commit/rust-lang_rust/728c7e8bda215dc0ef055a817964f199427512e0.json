{"sha": "728c7e8bda215dc0ef055a817964f199427512e0", "node_id": "C_kwDOAAsO6NoAKDcyOGM3ZThiZGEyMTVkYzBlZjA1NWE4MTc5NjRmMTk5NDI3NTEyZTA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-06-27T16:26:41Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-15T15:56:17Z"}, "message": "Allow destructuring opaque types, since the patterns constrain the opaque types", "tree": {"sha": "476c1bcb6d3a15591146da74e269c3ff47400966", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/476c1bcb6d3a15591146da74e269c3ff47400966"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/728c7e8bda215dc0ef055a817964f199427512e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/728c7e8bda215dc0ef055a817964f199427512e0", "html_url": "https://github.com/rust-lang/rust/commit/728c7e8bda215dc0ef055a817964f199427512e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/728c7e8bda215dc0ef055a817964f199427512e0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12457f814cffc05ece8ad588d83aa87b69d78296", "url": "https://api.github.com/repos/rust-lang/rust/commits/12457f814cffc05ece8ad588d83aa87b69d78296", "html_url": "https://github.com/rust-lang/rust/commit/12457f814cffc05ece8ad588d83aa87b69d78296"}], "stats": {"total": 147, "additions": 116, "deletions": 31}, "files": [{"sha": "6abf419dd4991bfb8347499e00e3d96e350cca26", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/728c7e8bda215dc0ef055a817964f199427512e0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728c7e8bda215dc0ef055a817964f199427512e0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=728c7e8bda215dc0ef055a817964f199427512e0", "patch": "@@ -7,6 +7,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::hir::place::Projection as HirProjection;\n use rustc_middle::hir::place::ProjectionKind as HirProjectionKind;\n use rustc_middle::middle::region;\n+use rustc_middle::mir::tcx::PlaceTy;\n use rustc_middle::mir::AssertKind::BoundsCheck;\n use rustc_middle::mir::*;\n use rustc_middle::thir::*;\n@@ -104,8 +105,9 @@ fn convert_to_hir_projections_and_truncate_for_capture<'tcx>(\n                 variant = Some(*idx);\n                 continue;\n             }\n+            // These do not affect anything, they just make sure we know the right type.\n+            ProjectionElem::OpaqueCast(_) => continue,\n             ProjectionElem::Index(..)\n-            | ProjectionElem::OpaqueCast(_)\n             | ProjectionElem::ConstantIndex { .. }\n             | ProjectionElem::Subslice { .. } => {\n                 // We don't capture array-access projections.\n@@ -297,16 +299,21 @@ fn strip_prefix<'tcx>(\n     prefix_projections: &[HirProjection<'tcx>],\n ) -> impl Iterator<Item = PlaceElem<'tcx>> {\n     let mut iter = projections.into_iter();\n+    let mut next = || match iter.next()? {\n+        // Filter out opaque casts, they are unnecessary in the prefix.\n+        ProjectionElem::OpaqueCast(..) => iter.next(),\n+        other => Some(other),\n+    };\n     for projection in prefix_projections {\n         match projection.kind {\n             HirProjectionKind::Deref => {\n-                assert!(matches!(iter.next(), Some(ProjectionElem::Deref)));\n+                assert!(matches!(next(), Some(ProjectionElem::Deref)));\n             }\n             HirProjectionKind::Field(..) => {\n                 if base_ty.is_enum() {\n-                    assert!(matches!(iter.next(), Some(ProjectionElem::Downcast(..))));\n+                    assert!(matches!(next(), Some(ProjectionElem::Downcast(..))));\n                 }\n-                assert!(matches!(iter.next(), Some(ProjectionElem::Field(..))));\n+                assert!(matches!(next(), Some(ProjectionElem::Field(..))));\n             }\n             HirProjectionKind::Index | HirProjectionKind::Subslice => {\n                 bug!(\"unexpected projection kind: {:?}\", projection);\n@@ -320,7 +327,23 @@ fn strip_prefix<'tcx>(\n impl<'tcx> PlaceBuilder<'tcx> {\n     pub(crate) fn into_place(self, cx: &Builder<'_, 'tcx>) -> Place<'tcx> {\n         if let PlaceBase::Local(local) = self.base {\n-            Place { local, projection: cx.tcx.intern_place_elems(&self.projection) }\n+            let mut projections = vec![];\n+            let mut ty = PlaceTy::from_ty(cx.local_decls[local].ty);\n+            for projection in self.projection {\n+                // Only preserve those opaque casts that actually go from an opaque type\n+                // to another type.\n+                if let ProjectionElem::OpaqueCast(t) = projection {\n+                    if let ty::Opaque(..) = ty.ty.kind() {\n+                        if t != ty.ty {\n+                            projections.push(ProjectionElem::OpaqueCast(t));\n+                        }\n+                    }\n+                } else {\n+                    projections.push(projection);\n+                }\n+                ty = ty.projection_ty(cx.tcx, projection);\n+            }\n+            Place { local, projection: cx.tcx.intern_place_elems(&projections) }\n         } else {\n             self.expect_upvars_resolved(cx).into_place(cx)\n         }"}, {"sha": "86ef666eac8d2c88c62d2b49e1b20a4e428a8bf9", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/728c7e8bda215dc0ef055a817964f199427512e0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728c7e8bda215dc0ef055a817964f199427512e0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=728c7e8bda215dc0ef055a817964f199427512e0", "patch": "@@ -867,7 +867,7 @@ impl<'tcx, 'pat> Candidate<'pat, 'tcx> {\n         Candidate {\n             span: pattern.span,\n             has_guard,\n-            match_pairs: smallvec![MatchPair { place, pattern }],\n+            match_pairs: smallvec![MatchPair::new(place, pattern)],\n             bindings: Vec::new(),\n             ascriptions: Vec::new(),\n             subcandidates: Vec::new(),"}, {"sha": "4a7edc517f4e4436a73c8e16f16709acabd8e8c3", "filename": "compiler/rustc_mir_build/src/build/matches/util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/728c7e8bda215dc0ef055a817964f199427512e0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728c7e8bda215dc0ef055a817964f199427512e0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs?ref=728c7e8bda215dc0ef055a817964f199427512e0", "patch": "@@ -98,6 +98,10 @@ impl<'pat, 'tcx> MatchPair<'pat, 'tcx> {\n         place: PlaceBuilder<'tcx>,\n         pattern: &'pat Pat<'tcx>,\n     ) -> MatchPair<'pat, 'tcx> {\n+        // Force the place type to the pattern's type.\n+        // FIXME(oli-obk): only do this when we don't already know the place type.\n+        // FIXME(oli-obk): can we use this to simplify slice/array pattern hacks?\n+        let place = place.project(ProjectionElem::OpaqueCast(pattern.ty));\n         MatchPair { place, pattern }\n     }\n }"}, {"sha": "3203f801fa03f0a469c0e9b64ce82694a9a13ef9", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/728c7e8bda215dc0ef055a817964f199427512e0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728c7e8bda215dc0ef055a817964f199427512e0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=728c7e8bda215dc0ef055a817964f199427512e0", "patch": "@@ -967,7 +967,11 @@ pub(crate) fn compute_match_usefulness<'p, 'tcx>(\n         })\n         .collect();\n \n-    let wild_pattern = cx.pattern_arena.alloc(DeconstructedPat::wildcard(scrut_ty));\n+    // In case we're matching on an opaque type in its defining scope, the patterns define the hidden type.\n+    // The wildcard pattern needs to have the same type, otherwise it will always be deemed useful, even if the\n+    // match is exhaustive for the pattern type.\n+    let wild_ty = arms.first().map_or(scrut_ty, |arm| arm.pat.ty());\n+    let wild_pattern = cx.pattern_arena.alloc(DeconstructedPat::wildcard(wild_ty));\n     let v = PatStack::from_pattern(wild_pattern);\n     let usefulness = is_useful(cx, &matrix, &v, FakeExtraWildcard, scrut_hir_id, false, true);\n     let non_exhaustiveness_witnesses = match usefulness {"}, {"sha": "9a50c0f988a568ac431906331fd54f9c624b2b32", "filename": "src/test/ui/type-alias-impl-trait/cross_inference_pattern_bug.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/728c7e8bda215dc0ef055a817964f199427512e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728c7e8bda215dc0ef055a817964f199427512e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.rs?ref=728c7e8bda215dc0ef055a817964f199427512e0", "patch": "@@ -1,8 +1,9 @@\n // compile-flags: --edition=2021\n+// check-pass\n #![feature(type_alias_impl_trait)]\n \n fn main() {\n-    type T = impl Copy; //~ ERROR unconstrained opaque type\n+    type T = impl Copy;\n     let foo: T = (1u32, 2u32);\n     let (a, b): (u32, u32) = foo;\n }"}, {"sha": "03b172e6de5706f8dcf6e1c38e289bed1df6f022", "filename": "src/test/ui/type-alias-impl-trait/cross_inference_pattern_bug.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12457f814cffc05ece8ad588d83aa87b69d78296/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12457f814cffc05ece8ad588d83aa87b69d78296/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug.stderr?ref=12457f814cffc05ece8ad588d83aa87b69d78296", "patch": "@@ -1,10 +0,0 @@\n-error: unconstrained opaque type\n-  --> $DIR/cross_inference_pattern_bug.rs:5:14\n-   |\n-LL |     type T = impl Copy;\n-   |              ^^^^^^^^^\n-   |\n-   = note: `T` must be used in combination with a concrete type within the same module\n-\n-error: aborting due to previous error\n-"}, {"sha": "b929122a6c23fccee8f2d15ea70ee4459b7885bf", "filename": "src/test/ui/type-alias-impl-trait/cross_inference_pattern_bug_no_type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/728c7e8bda215dc0ef055a817964f199427512e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug_no_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728c7e8bda215dc0ef055a817964f199427512e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug_no_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug_no_type.rs?ref=728c7e8bda215dc0ef055a817964f199427512e0", "patch": "@@ -1,13 +1,13 @@\n-// known-bug: #96572\n // compile-flags: --edition=2021 --crate-type=lib\n // rustc-env:RUST_BACKTRACE=0\n+// check-pass\n \n // tracked in https://github.com/rust-lang/rust/issues/96572\n \n #![feature(type_alias_impl_trait)]\n \n fn main() {\n-    type T = impl Copy;  // error: unconstrained opaque type\n+    type T = impl Copy;\n     let foo: T = (1u32, 2u32);\n-    let (a, b) = foo; // removing this line makes the code compile\n+    let (a, b) = foo; // this line used to make the code fail\n }"}, {"sha": "8aa1f495639951ff05e51d906d728a69dd8fd9bf", "filename": "src/test/ui/type-alias-impl-trait/cross_inference_pattern_bug_no_type.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12457f814cffc05ece8ad588d83aa87b69d78296/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug_no_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12457f814cffc05ece8ad588d83aa87b69d78296/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug_no_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug_no_type.stderr?ref=12457f814cffc05ece8ad588d83aa87b69d78296", "patch": "@@ -1,10 +0,0 @@\n-error: unconstrained opaque type\n-  --> $DIR/cross_inference_pattern_bug_no_type.rs:10:14\n-   |\n-LL |     type T = impl Copy;  // error: unconstrained opaque type\n-   |              ^^^^^^^^^\n-   |\n-   = note: `T` must be used in combination with a concrete type within the same module\n-\n-error: aborting due to previous error\n-"}, {"sha": "825710851b01f0dcab6c8bdb7cdd1f6fd9f916da", "filename": "src/test/ui/type-alias-impl-trait/issue-96572-unconstrained-mismatch.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/728c7e8bda215dc0ef055a817964f199427512e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-96572-unconstrained-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728c7e8bda215dc0ef055a817964f199427512e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-96572-unconstrained-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-96572-unconstrained-mismatch.rs?ref=728c7e8bda215dc0ef055a817964f199427512e0", "patch": "@@ -0,0 +1,10 @@\n+#![feature(type_alias_impl_trait)]\n+\n+fn main() {\n+    type T = impl Copy;\n+    let foo: T = Some((1u32, 2u32));\n+    match foo {\n+        None => (),\n+        Some((a, b, c)) => (), //~ ERROR mismatched types\n+    }\n+}"}, {"sha": "728244a1844dbe8eccb6b8143e1966218814d372", "filename": "src/test/ui/type-alias-impl-trait/issue-96572-unconstrained-mismatch.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/728c7e8bda215dc0ef055a817964f199427512e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-96572-unconstrained-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/728c7e8bda215dc0ef055a817964f199427512e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-96572-unconstrained-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-96572-unconstrained-mismatch.stderr?ref=728c7e8bda215dc0ef055a817964f199427512e0", "patch": "@@ -0,0 +1,15 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-96572-unconstrained-mismatch.rs:8:14\n+   |\n+LL |     match foo {\n+   |           --- this expression has type `T`\n+LL |         None => (),\n+LL |         Some((a, b, c)) => (),\n+   |              ^^^^^^^^^ expected a tuple with 2 elements, found one with 3 elements\n+   |\n+   = note: expected tuple `(u32, u32)`\n+              found tuple `(_, _, _)`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "3351d9bcff1f88db8113b98edae332981fb41fff", "filename": "src/test/ui/type-alias-impl-trait/issue-96572-unconstrained-struct.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/728c7e8bda215dc0ef055a817964f199427512e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-96572-unconstrained-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728c7e8bda215dc0ef055a817964f199427512e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-96572-unconstrained-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-96572-unconstrained-struct.rs?ref=728c7e8bda215dc0ef055a817964f199427512e0", "patch": "@@ -0,0 +1,11 @@\n+#![feature(type_alias_impl_trait)]\n+// check-pass\n+\n+#[derive(Copy, Clone)]\n+struct Foo((u32, u32));\n+\n+fn main() {\n+    type U = impl Copy;\n+    let foo: U = Foo((1u32, 2u32));\n+    let Foo((a, b)) = foo;\n+}"}, {"sha": "ef3279a98d199f1cd2ca4115f2e06d7e362f1b05", "filename": "src/test/ui/type-alias-impl-trait/issue-96572-unconstrained-upvar-enum.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/728c7e8bda215dc0ef055a817964f199427512e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-96572-unconstrained-upvar-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728c7e8bda215dc0ef055a817964f199427512e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-96572-unconstrained-upvar-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-96572-unconstrained-upvar-enum.rs?ref=728c7e8bda215dc0ef055a817964f199427512e0", "patch": "@@ -0,0 +1,13 @@\n+#![feature(type_alias_impl_trait)]\n+// check-pass\n+\n+fn main() {\n+    type T = impl Copy;\n+    let foo: T = Some((1u32, 2u32));\n+    let x = move || {\n+        match foo {\n+            None => (),\n+            Some((a, b)) => (),\n+        }\n+    };\n+}"}, {"sha": "bb0fc7c7534f5cec459993187a9f338378f99962", "filename": "src/test/ui/type-alias-impl-trait/issue-96572-unconstrained-upvar.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/728c7e8bda215dc0ef055a817964f199427512e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-96572-unconstrained-upvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728c7e8bda215dc0ef055a817964f199427512e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-96572-unconstrained-upvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-96572-unconstrained-upvar.rs?ref=728c7e8bda215dc0ef055a817964f199427512e0", "patch": "@@ -0,0 +1,13 @@\n+#![feature(type_alias_impl_trait)]\n+// check-pass\n+\n+#[derive(Copy, Clone)]\n+struct Foo((u32, u32));\n+\n+fn main() {\n+    type T = impl Copy;\n+    let foo: T = Foo((1u32, 2u32));\n+    let x = move || {\n+        let Foo((a, b)) = foo;\n+    };\n+}"}, {"sha": "4b9ed7f28eb3f3ca621f63dd1e98b54f48eaa8ee", "filename": "src/test/ui/type-alias-impl-trait/issue-96572-unconstrained.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/728c7e8bda215dc0ef055a817964f199427512e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-96572-unconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728c7e8bda215dc0ef055a817964f199427512e0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-96572-unconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-96572-unconstrained.rs?ref=728c7e8bda215dc0ef055a817964f199427512e0", "patch": "@@ -0,0 +1,11 @@\n+#![feature(type_alias_impl_trait)]\n+// check-pass\n+\n+fn main() {\n+    type T = impl Copy;\n+    let foo: T = Some((1u32, 2u32));\n+    match foo {\n+        None => (),\n+        Some((a, b)) => (),\n+    }\n+}"}]}