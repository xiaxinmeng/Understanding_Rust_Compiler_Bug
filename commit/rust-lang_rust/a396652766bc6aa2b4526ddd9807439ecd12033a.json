{"sha": "a396652766bc6aa2b4526ddd9807439ecd12033a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzOTY2NTI3NjZiYzZhYTJiNDUyNmRkZDk4MDc0MzllY2QxMjAzM2E=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-11T02:59:23Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-11T02:59:23Z"}, "message": "Add pat_lit to ast, and support parsing it.", "tree": {"sha": "f94cc3a6763765c6317b2b71294372fa274047f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f94cc3a6763765c6317b2b71294372fa274047f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a396652766bc6aa2b4526ddd9807439ecd12033a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a396652766bc6aa2b4526ddd9807439ecd12033a", "html_url": "https://github.com/rust-lang/rust/commit/a396652766bc6aa2b4526ddd9807439ecd12033a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a396652766bc6aa2b4526ddd9807439ecd12033a/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b59d98ccb9de56a49768586961ce745d462e0697", "url": "https://api.github.com/repos/rust-lang/rust/commits/b59d98ccb9de56a49768586961ce745d462e0697", "html_url": "https://github.com/rust-lang/rust/commit/b59d98ccb9de56a49768586961ce745d462e0697"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "6aac7b5056d806a2e5baccbab5d961f06b77ca43", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a396652766bc6aa2b4526ddd9807439ecd12033a/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a396652766bc6aa2b4526ddd9807439ecd12033a/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=a396652766bc6aa2b4526ddd9807439ecd12033a", "patch": "@@ -57,6 +57,7 @@ type pat = spanned[pat_];\n tag pat_ {\n     pat_wild(ann);\n     pat_bind(ident, def_id, ann);\n+    pat_lit(@lit, ann);\n     pat_tag(path, vec[@pat], option.t[variant_def], ann);\n }\n "}, {"sha": "2fa4afeba77ca0613d7c18c42f0940e81549ae77", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a396652766bc6aa2b4526ddd9807439ecd12033a/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a396652766bc6aa2b4526ddd9807439ecd12033a/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=a396652766bc6aa2b4526ddd9807439ecd12033a", "patch": "@@ -351,9 +351,9 @@ impure fn parse_seq[T](token.token bra,\n     ret spanned(lo, hi, v);\n }\n \n-impure fn parse_lit(parser p) -> option.t[ast.lit] {\n+impure fn parse_lit(parser p) -> ast.lit {\n     auto lo = p.get_span();\n-    let ast.lit_ lit;\n+    let ast.lit_ lit = ast.lit_nil;\n     alt (p.peek()) {\n         case (token.LIT_INT(?i)) {\n             p.bump();\n@@ -379,12 +379,11 @@ impure fn parse_lit(parser p) -> option.t[ast.lit] {\n             p.bump();\n             lit = ast.lit_str(s);\n         }\n-        case (_) {\n-            lit = ast.lit_nil;  // FIXME: typestate bug requires this\n-            ret none[ast.lit];\n+        case (?t) {\n+            unexpected(p, t);\n         }\n     }\n-    ret some(spanned(lo, lo, lit));\n+    ret spanned(lo, lo, lit);\n }\n \n fn is_ident(token.token t) -> bool {\n@@ -565,15 +564,9 @@ impure fn parse_bottom_expr(parser p) -> @ast.expr {\n         }\n \n         case (_) {\n-            alt (parse_lit(p)) {\n-                case (some[ast.lit](?lit)) {\n-                    hi = lit.span;\n-                    ex = ast.expr_lit(@lit, ast.ann_none);\n-                }\n-                case (none[ast.lit]) {\n-                    p.err(\"expecting expression\");\n-                }\n-            }\n+            auto lit = parse_lit(p);\n+            hi = lit.span;\n+            ex = ast.expr_lit(@lit, ast.ann_none);\n         }\n     }\n \n@@ -1081,17 +1074,20 @@ impure fn parse_initializer(parser p) -> option.t[@ast.expr] {\n \n impure fn parse_pat(parser p) -> @ast.pat {\n     auto lo = p.get_span();\n-\n+    auto hi = lo;\n     auto pat = ast.pat_wild(ast.ann_none);  // FIXME: typestate bug\n+\n     alt (p.peek()) {\n         case (token.UNDERSCORE) {\n+            hi = p.get_span();\n             p.bump();\n             pat = ast.pat_wild(ast.ann_none);\n         }\n         case (token.QUES) {\n             p.bump();\n             alt (p.peek()) {\n                 case (token.IDENT(?id)) {\n+                    hi = p.get_span();\n                     p.bump();\n                     pat = ast.pat_bind(id, p.next_def_id(), ast.ann_none);\n                 }\n@@ -1104,27 +1100,30 @@ impure fn parse_pat(parser p) -> @ast.pat {\n         }\n         case (token.IDENT(?id)) {\n             auto tag_path = parse_path(p, GREEDY);\n+            hi = tag_path.span;\n \n             let vec[@ast.pat] args;\n             alt (p.peek()) {\n                 case (token.LPAREN) {\n                     auto f = parse_pat;\n-                    args = parse_seq[@ast.pat](token.LPAREN, token.RPAREN,\n-                                               some(token.COMMA), f, p).node;\n+                    auto a = parse_seq[@ast.pat](token.LPAREN, token.RPAREN,\n+                                                 some(token.COMMA), f, p);\n+                    args = a.node;\n+                    hi = a.span;\n                 }\n                 case (_) { args = vec(); }\n             }\n \n             pat = ast.pat_tag(tag_path, args, none[ast.variant_def],\n                               ast.ann_none);\n         }\n-        case (?tok) {\n-            p.err(\"expected pattern but found \" + token.to_str(tok));\n-            fail;\n+        case (_) {\n+            auto lit = parse_lit(p);\n+            hi = lit.span;\n+            pat = ast.pat_lit(@lit, ast.ann_none);\n         }\n     }\n \n-    auto hi = p.get_span();\n     ret @spanned(lo, hi, pat);\n }\n "}]}