{"sha": "430b3e19606cf76288a383b89428107756d4aa61", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMGIzZTE5NjA2Y2Y3NjI4OGEzODNiODk0MjgxMDc3NTZkNGFhNjE=", "commit": {"author": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-03-04T23:57:43Z"}, "committer": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-03-04T23:57:43Z"}, "message": "remove under/overflow from next_back/next", "tree": {"sha": "52d8d22e59ea92784314871900ec0675e52fe3df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52d8d22e59ea92784314871900ec0675e52fe3df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/430b3e19606cf76288a383b89428107756d4aa61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/430b3e19606cf76288a383b89428107756d4aa61", "html_url": "https://github.com/rust-lang/rust/commit/430b3e19606cf76288a383b89428107756d4aa61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/430b3e19606cf76288a383b89428107756d4aa61/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a928c8360c14660c6eeb4bfa29d6ad54ac0029f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a928c8360c14660c6eeb4bfa29d6ad54ac0029f4", "html_url": "https://github.com/rust-lang/rust/commit/a928c8360c14660c6eeb4bfa29d6ad54ac0029f4"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "e37e52c6dc3e0a5f1c3aca0f2d3870f2e452cc00", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/430b3e19606cf76288a383b89428107756d4aa61/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430b3e19606cf76288a383b89428107756d4aa61/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=430b3e19606cf76288a383b89428107756d4aa61", "patch": "@@ -4605,8 +4605,10 @@ impl<A: Step + One> Iterator for ops::RangeInclusive<A> where\n             Empty { .. } => (None, None), // empty iterators yield no values\n \n             NonEmpty { ref mut start, ref mut end } => {\n-                let one = A::one();\n-                if start <= end {\n+                if start == end {\n+                    (Some(mem::replace(end, A::one())), Some(mem::replace(start, A::one())))\n+                } else if start < end {\n+                    let one = A::one();\n                     let mut n = &*start + &one;\n                     mem::swap(&mut n, start);\n \n@@ -4620,7 +4622,7 @@ impl<A: Step + One> Iterator for ops::RangeInclusive<A> where\n                     // ^ are we done yet?\n                     Some(n)) // < the value to output\n                 } else {\n-                    (Some(mem::replace(start, one)), None)\n+                    (Some(mem::replace(start, A::one())), None)\n                 }\n             }\n         };\n@@ -4664,15 +4666,17 @@ impl<A: Step + One> DoubleEndedIterator for ops::RangeInclusive<A> where\n             Empty { .. } => return None,\n \n             NonEmpty { ref mut start, ref mut end } => {\n-                let one = A::one();\n-                if start <= end {\n+                if start == end {\n+                    (Some(mem::replace(start, A::one())), Some(mem::replace(end, A::one())))\n+                } else if start < end {\n+                    let one = A::one();\n                     let mut n = &*end - &one;\n                     mem::swap(&mut n, end);\n \n                     (if n == *start { Some(mem::replace(start, one)) } else { None },\n                      Some(n))\n                 } else {\n-                    (Some(mem::replace(end, one)), None)\n+                    (Some(mem::replace(end, A::one())), None)\n                 }\n             }\n         };"}]}