{"sha": "c13548dccd297eb2f95d04ddc593c55b69381d8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMzU0OGRjY2QyOTdlYjJmOTVkMDRkZGM1OTNjNTViNjkzODFkOGI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-03-13T19:03:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-13T19:03:26Z"}, "message": "Rollup merge of #69809 - matthiaskrgr:lifetimes, r=eddyb\n\nremove lifetimes that can be elided (clippy::needless_lifetimes)", "tree": {"sha": "7cdd6762619ec962260893f49a5b0d5fd483a258", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cdd6762619ec962260893f49a5b0d5fd483a258"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c13548dccd297eb2f95d04ddc593c55b69381d8b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJea9j+CRBK7hj4Ov3rIwAAdHIIABN/3YRBoZSevHNldwj06J9E\nFUxGi7Y/GclJfYybK0MNwxMzfoMWcY8zvWhH1x4PKjCdvOSZhMFnxlCl6qXHR9mh\n4I3XP1Q5fm+I6O9tvsG8aLdXWxgjwWtvjUrdjloi2967k92uMscIaXHwMNjvgXj4\nI+bssZsI9J6LszcpCUvgNtzfXeM57nyUwt/uOMeg6B/fW7xeN0C6lplmj0u5PNKS\nqIV8+BlGcSMkV1a9takdY2zSwS4H8VUZWTXB3L9Gz07F/hhTB2tcY27KgHft2lnE\nBrRvyiR3HUhZrGTFOQPpfixnh6rahNX5LPnsulfyg8AWHhbbgYJUn+hDBhD4cv8=\n=iZr6\n-----END PGP SIGNATURE-----\n", "payload": "tree 7cdd6762619ec962260893f49a5b0d5fd483a258\nparent 8e17c8366c48f78f0fafe03c311cb0fd9b66ec50\nparent 7b1b08cfee6881705eed931e24b8abd4e68ef328\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1584126206 +0900\ncommitter GitHub <noreply@github.com> 1584126206 +0900\n\nRollup merge of #69809 - matthiaskrgr:lifetimes, r=eddyb\n\nremove lifetimes that can be elided (clippy::needless_lifetimes)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c13548dccd297eb2f95d04ddc593c55b69381d8b", "html_url": "https://github.com/rust-lang/rust/commit/c13548dccd297eb2f95d04ddc593c55b69381d8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c13548dccd297eb2f95d04ddc593c55b69381d8b/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "html_url": "https://github.com/rust-lang/rust/commit/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50"}, {"sha": "7b1b08cfee6881705eed931e24b8abd4e68ef328", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b1b08cfee6881705eed931e24b8abd4e68ef328", "html_url": "https://github.com/rust-lang/rust/commit/7b1b08cfee6881705eed931e24b8abd4e68ef328"}], "stats": {"total": 100, "additions": 50, "deletions": 50}, "files": [{"sha": "53d4f7239b76ea15a6e0db3b884d014c89bb650b", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -1427,7 +1427,7 @@ impl<'a, T> CursorMut<'a, T> {\n     /// `CursorMut`, which means it cannot outlive the `CursorMut` and that the\n     /// `CursorMut` is frozen for the lifetime of the `Cursor`.\n     #[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]\n-    pub fn as_cursor<'cm>(&'cm self) -> Cursor<'cm, T> {\n+    pub fn as_cursor(&self) -> Cursor<'_, T> {\n         Cursor { list: self.list, current: self.current, index: self.index }\n     }\n }"}, {"sha": "03218920ef1aa293a045a670a53ec349141d9d9f", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -179,7 +179,7 @@ macro_rules! define_dep_nodes {\n             $(\n                 #[inline(always)]\n                 #[allow(unreachable_code, non_snake_case)]\n-                pub fn $variant<'tcx>(_tcx: TyCtxt<'tcx>, $(arg: $tuple_arg_ty)*) -> DepNode {\n+                pub fn $variant(_tcx: TyCtxt<'_>, $(arg: $tuple_arg_ty)*) -> DepNode {\n                     // tuple args\n                     $({\n                         erase!($tuple_arg_ty);"}, {"sha": "ca5f9ba5ad62dbca3ae641fc51294325e2351671", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -340,7 +340,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     /// deep walking so that we walk nested items in the context of\n     /// their outer items.\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         panic!(\"`visit_nested_xxx` must be manually implemented in this visitor\");\n     }\n "}, {"sha": "f176f92434372ebff5d1189f525af698a04201c9", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -135,7 +135,7 @@ impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n impl<'a, 'hir> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n     type Map = Map<'hir>;\n \n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, Self::Map> {\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n         intravisit::NestedVisitorMap::OnlyBodies(self.hir_map)\n     }\n "}, {"sha": "a26ff2ea7aa2f2331519f775c284f3b12300d814", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -403,7 +403,7 @@ pub enum ClearCrossCrate<T> {\n }\n \n impl<T> ClearCrossCrate<T> {\n-    pub fn as_ref(&'a self) -> ClearCrossCrate<&'a T> {\n+    pub fn as_ref(&self) -> ClearCrossCrate<&T> {\n         match self {\n             ClearCrossCrate::Clear => ClearCrossCrate::Clear,\n             ClearCrossCrate::Set(v) => ClearCrossCrate::Set(v),\n@@ -2503,7 +2503,7 @@ impl UserTypeProjection {\n \n     pub(crate) fn variant(\n         mut self,\n-        adt_def: &'tcx AdtDef,\n+        adt_def: &AdtDef,\n         variant_index: VariantIdx,\n         field: Field,\n     ) -> Self {"}, {"sha": "6293d5ddd3bc0a1bce057b330c8c34e1fb8c146b", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -320,7 +320,7 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     }\n }\n \n-pub fn val_ty(v: &'ll Value) -> &'ll Type {\n+pub fn val_ty(v: &Value) -> &Type {\n     unsafe { llvm::LLVMTypeOf(v) }\n }\n \n@@ -342,6 +342,6 @@ fn hi_lo_to_u128(lo: u64, hi: u64) -> u128 {\n     ((hi as u128) << 64) | (lo as u128)\n }\n \n-fn try_as_const_integral(v: &'ll Value) -> Option<&'ll ConstantInt> {\n+fn try_as_const_integral(v: &Value) -> Option<&ConstantInt> {\n     unsafe { llvm::LLVMIsAConstantInt(v) }\n }"}, {"sha": "a083e14979c0b8dc82aad3c506de774f37d02aec", "filename": "src/librustc_codegen_llvm/llvm/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -185,12 +185,12 @@ impl Drop for SectionIter<'a> {\n     }\n }\n \n-pub fn mk_section_iter(llof: &'a ffi::ObjectFile) -> SectionIter<'a> {\n+pub fn mk_section_iter(llof: &ffi::ObjectFile) -> SectionIter<'_> {\n     unsafe { SectionIter { llsi: LLVMGetSections(llof) } }\n }\n \n /// Safe wrapper around `LLVMGetParam`, because segfaults are no fun.\n-pub fn get_param(llfn: &'a Value, index: c_uint) -> &'a Value {\n+pub fn get_param(llfn: &Value, index: c_uint) -> &Value {\n     unsafe {\n         assert!(\n             index < LLVMCountParams(llfn),\n@@ -203,7 +203,7 @@ pub fn get_param(llfn: &'a Value, index: c_uint) -> &'a Value {\n }\n \n /// Safe wrapper for `LLVMGetValueName2` into a byte slice\n-pub fn get_value_name(value: &'a Value) -> &'a [u8] {\n+pub fn get_value_name(value: &Value) -> &[u8] {\n     unsafe {\n         let mut len = 0;\n         let data = LLVMGetValueName2(value, &mut len);"}, {"sha": "5bc1475df23a7ff89a5a08a24e3dd5785d3667b8", "filename": "src/librustc_codegen_llvm/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_codegen_llvm%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -240,7 +240,7 @@ impl Type {\n         unsafe { llvm::LLVMIntTypeInContext(llcx, num_bits as c_uint) }\n     }\n \n-    pub fn i8p_llcx(llcx: &'ll llvm::Context) -> &'ll Type {\n+    pub fn i8p_llcx(llcx: &llvm::Context) -> &Type {\n         Type::i8_llcx(llcx).ptr_to()\n     }\n "}, {"sha": "7ecf3e3cb8d5dbfc23b8cac2e62fdf091775d863", "filename": "src/librustc_data_structures/graph/scc/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_data_structures%2Fgraph%2Fscc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_data_structures%2Fgraph%2Fscc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fscc%2Fmod.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -97,7 +97,7 @@ impl<N: Idx, S: Idx> GraphSuccessors<'graph> for Sccs<N, S> {\n }\n \n impl<N: Idx, S: Idx> WithSuccessors for Sccs<N, S> {\n-    fn successors<'graph>(&'graph self, node: S) -> <Self as GraphSuccessors<'graph>>::Iter {\n+    fn successors(&self, node: S) -> <Self as GraphSuccessors<'_>>::Iter {\n         self.successors(node).iter().cloned()\n     }\n }"}, {"sha": "064467174cae22f9b91812d6b9304e1d29a2d35d", "filename": "src/librustc_data_structures/graph/vec_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_data_structures%2Fgraph%2Fvec_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_data_structures%2Fgraph%2Fvec_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fgraph%2Fvec_graph%2Fmod.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -101,7 +101,7 @@ impl<N: Idx> GraphSuccessors<'graph> for VecGraph<N> {\n }\n \n impl<N: Idx> WithSuccessors for VecGraph<N> {\n-    fn successors<'graph>(&'graph self, node: N) -> <Self as GraphSuccessors<'graph>>::Iter {\n+    fn successors(&self, node: N) -> <Self as GraphSuccessors<'_>>::Iter {\n         self.successors(node).iter().cloned()\n     }\n }"}, {"sha": "65fe1fec52643f673a08738c50a13763c5934a4a", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -96,7 +96,7 @@ trait PrinterSupport: pprust::PpAnn {\n     ///\n     /// (Rust does not yet support upcasting from a trait object to\n     /// an object for one of its super-traits.)\n-    fn pp_ann<'a>(&'a self) -> &'a dyn pprust::PpAnn;\n+    fn pp_ann(&self) -> &dyn pprust::PpAnn;\n }\n \n trait HirPrinterSupport<'hir>: pprust_hir::PpAnn {\n@@ -106,13 +106,13 @@ trait HirPrinterSupport<'hir>: pprust_hir::PpAnn {\n \n     /// Provides a uniform interface for re-extracting a reference to an\n     /// `hir_map::Map` from a value that now owns it.\n-    fn hir_map<'a>(&'a self) -> Option<&'a hir_map::Map<'hir>>;\n+    fn hir_map(&self) -> Option<&hir_map::Map<'hir>>;\n \n     /// Produces the pretty-print annotation object.\n     ///\n     /// (Rust does not yet support upcasting from a trait object to\n     /// an object for one of its super-traits.)\n-    fn pp_ann<'a>(&'a self) -> &'a dyn pprust_hir::PpAnn;\n+    fn pp_ann(&self) -> &dyn pprust_hir::PpAnn;\n \n     /// Computes an user-readable representation of a path, if possible.\n     fn node_path(&self, id: hir::HirId) -> Option<String> {\n@@ -132,7 +132,7 @@ impl<'hir> PrinterSupport for NoAnn<'hir> {\n         self.sess\n     }\n \n-    fn pp_ann<'a>(&'a self) -> &'a dyn pprust::PpAnn {\n+    fn pp_ann(&self) -> &dyn pprust::PpAnn {\n         self\n     }\n }\n@@ -142,11 +142,11 @@ impl<'hir> HirPrinterSupport<'hir> for NoAnn<'hir> {\n         self.sess\n     }\n \n-    fn hir_map<'a>(&'a self) -> Option<&'a hir_map::Map<'hir>> {\n+    fn hir_map(&self) -> Option<&hir_map::Map<'hir>> {\n         self.tcx.map(|tcx| *tcx.hir())\n     }\n \n-    fn pp_ann<'a>(&'a self) -> &'a dyn pprust_hir::PpAnn {\n+    fn pp_ann(&self) -> &dyn pprust_hir::PpAnn {\n         self\n     }\n }\n@@ -170,7 +170,7 @@ impl<'hir> PrinterSupport for IdentifiedAnnotation<'hir> {\n         self.sess\n     }\n \n-    fn pp_ann<'a>(&'a self) -> &'a dyn pprust::PpAnn {\n+    fn pp_ann(&self) -> &dyn pprust::PpAnn {\n         self\n     }\n }\n@@ -216,11 +216,11 @@ impl<'hir> HirPrinterSupport<'hir> for IdentifiedAnnotation<'hir> {\n         self.sess\n     }\n \n-    fn hir_map<'a>(&'a self) -> Option<&'a hir_map::Map<'hir>> {\n+    fn hir_map(&self) -> Option<&hir_map::Map<'hir>> {\n         self.tcx.map(|tcx| *tcx.hir())\n     }\n \n-    fn pp_ann<'a>(&'a self) -> &'a dyn pprust_hir::PpAnn {\n+    fn pp_ann(&self) -> &dyn pprust_hir::PpAnn {\n         self\n     }\n }\n@@ -315,11 +315,11 @@ impl<'b, 'tcx> HirPrinterSupport<'tcx> for TypedAnnotation<'b, 'tcx> {\n         &self.tcx.sess\n     }\n \n-    fn hir_map<'a>(&'a self) -> Option<&'a hir_map::Map<'tcx>> {\n+    fn hir_map(&self) -> Option<&hir_map::Map<'tcx>> {\n         Some(&self.tcx.hir())\n     }\n \n-    fn pp_ann<'a>(&'a self) -> &'a dyn pprust_hir::PpAnn {\n+    fn pp_ann(&self) -> &dyn pprust_hir::PpAnn {\n         self\n     }\n "}, {"sha": "f8bd40d380d754a3c9e51d26d5787c64dbdb1ab2", "filename": "src/librustc_hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -284,7 +284,7 @@ pub trait Visitor<'v>: Sized {\n     /// If you use this, you probably don't want to process the\n     /// contents of nested item-like things, since the outer loop will\n     /// visit them as well.\n-    fn as_deep_visitor<'s>(&'s mut self) -> DeepVisitor<'s, Self> {\n+    fn as_deep_visitor(&mut self) -> DeepVisitor<'_, Self> {\n         DeepVisitor::new(self)\n     }\n "}, {"sha": "c2b62f9670c8bd84db80722cbdd619c12214e3e8", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -162,7 +162,7 @@ impl IfThisChanged<'tcx> {\n impl Visitor<'tcx> for IfThisChanged<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "c90b5abfe30e50944e84d89825f672d3eb0f314d", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -548,7 +548,7 @@ impl FindAllAttrs<'tcx> {\n impl intravisit::Visitor<'tcx> for FindAllAttrs<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, Self::Map> {\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n         intravisit::NestedVisitorMap::All(&self.tcx.hir())\n     }\n "}, {"sha": "22576c088ff4110b355dea6240ce6a8c7cb6b1d7", "filename": "src/librustc_infer/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -69,7 +69,7 @@ impl<'a, 'tcx> FindLocalByTypeVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for FindLocalByTypeVisitor<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.hir_map)\n     }\n "}, {"sha": "23ad93c6a21aeefc040cc492ec260549166a971d", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -93,7 +93,7 @@ struct FindNestedTypeVisitor<'tcx> {\n impl Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "5f542e7e13be5affad47c7deb52169371017ff53", "filename": "src/librustc_infer/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_infer%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_infer%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fcoherence.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -451,7 +451,7 @@ fn def_id_is_local(def_id: DefId, in_crate: InCrate) -> bool {\n     }\n }\n \n-fn ty_is_non_local_constructor<'tcx>(ty: Ty<'tcx>, in_crate: InCrate) -> Option<Ty<'tcx>> {\n+fn ty_is_non_local_constructor(ty: Ty<'_>, in_crate: InCrate) -> Option<Ty<'_>> {\n     debug!(\"ty_is_non_local_constructor({:?})\", ty);\n \n     match ty.kind {"}, {"sha": "0964dfa28998eaa6673b0c11a6aecf8b542a153f", "filename": "src/librustc_lint/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_lint%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_lint%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flate.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -33,7 +33,7 @@ use std::slice;\n \n /// Extract the `LintStore` from the query context.\n /// This function exists because we've erased `LintStore` as `dyn Any` in the context.\n-crate fn unerased_lint_store<'tcx>(tcx: TyCtxt<'tcx>) -> &'tcx LintStore {\n+crate fn unerased_lint_store(tcx: TyCtxt<'_>) -> &LintStore {\n     let store: &dyn Any = &*tcx.lint_store;\n     store.downcast_ref().unwrap()\n }\n@@ -99,7 +99,7 @@ impl<'a, 'tcx, T: LateLintPass<'a, 'tcx>> hir_visit::Visitor<'tcx>\n     /// Because lints are scoped lexically, we want to walk nested\n     /// items in the context of the outer item, so enable\n     /// deep-walking.\n-    fn nested_visit_map<'this>(&'this mut self) -> hir_visit::NestedVisitorMap<'this, Self::Map> {\n+    fn nested_visit_map(&mut self) -> hir_visit::NestedVisitorMap<'_, Self::Map> {\n         hir_visit::NestedVisitorMap::All(&self.context.tcx.hir())\n     }\n "}, {"sha": "0e85b8d2a39edf482ee0de20823b0cb16e038962", "filename": "src/librustc_lint/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -438,7 +438,7 @@ impl LintLevelMapBuilder<'_, '_> {\n impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, Self::Map> {\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n         intravisit::NestedVisitorMap::All(&self.tcx.hir())\n     }\n "}, {"sha": "605091d6c7d415b88fc8b3c602c1f96528a75b91", "filename": "src/librustc_mir/const_eval/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -43,7 +43,7 @@ pub(crate) fn const_field<'tcx>(\n     op_to_const(&ecx, field)\n }\n \n-pub(crate) fn const_caller_location<'tcx>(\n+pub(crate) fn const_caller_location(\n     tcx: TyCtxt<'tcx>,\n     (file, line, col): (Symbol, u32, u32),\n ) -> ConstValue<'tcx> {"}, {"sha": "aa9cad7ffc19fa67a886ef472633b4cb401fffcf", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -34,7 +34,7 @@ fn is_stable(place: PlaceRef<'_>) -> bool {\n }\n \n /// Determine whether this type may be a reference (or box), and thus needs retagging.\n-fn may_be_reference<'tcx>(ty: Ty<'tcx>) -> bool {\n+fn may_be_reference(ty: Ty<'tcx>) -> bool {\n     match ty.kind {\n         // Primitive types that are not references\n         ty::Bool"}, {"sha": "152a98c0c1aa2e0a93d3356da6a6aaa4764b59e7", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -453,7 +453,7 @@ struct UnusedUnsafeVisitor<'a> {\n impl<'a, 'tcx> intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'a> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, Self::Map> {\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n         intravisit::NestedVisitorMap::None\n     }\n "}, {"sha": "95e2db7508099323abe29c545da5029018ffd3a1", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -87,7 +87,7 @@ fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> &DefIdSet {\n             intravisit::walk_struct_def(self, v)\n         }\n         type Map = Map<'tcx>;\n-        fn nested_visit_map<'b>(&'b mut self) -> NestedVisitorMap<'b, Self::Map> {\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n             NestedVisitorMap::None\n         }\n     }"}, {"sha": "884499ff2dd48a5e9407f9b396e59c29dd5f8671", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -271,11 +271,11 @@ pub fn stream_to_parser<'a>(\n /// The main usage of this function is outside of rustc, for those who uses\n /// librustc_ast as a library. Please do not remove this function while refactoring\n /// just because it is not used in rustc codebase!\n-pub fn stream_to_parser_with_base_dir<'a>(\n-    sess: &'a ParseSess,\n+pub fn stream_to_parser_with_base_dir(\n+    sess: &ParseSess,\n     stream: TokenStream,\n     base_dir: Directory,\n-) -> Parser<'a> {\n+) -> Parser<'_> {\n     Parser::new(sess, stream, Some(base_dir), true, false, None)\n }\n "}, {"sha": "7ee16de52beaba743f60b1b3a3034d85fe2509ff", "filename": "src/librustc_passes/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_passes%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_passes%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_attr.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -418,7 +418,7 @@ impl CheckAttrVisitor<'tcx> {\n impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "88e92bbdba1aa00021319ae1ff8914c8e52f8b17", "filename": "src/librustc_passes/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_passes%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_passes%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flang_items.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -143,7 +143,7 @@ impl LanguageItemCollector<'tcx> {\n }\n \n /// Traverses and collects all the lang items in all crates.\n-fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> LanguageItems {\n+fn collect(tcx: TyCtxt<'_>) -> LanguageItems {\n     // Initialize the collector.\n     let mut collector = LanguageItemCollector::new(tcx);\n "}, {"sha": "6be4f130c1f96aef89214f0c02c4150984d821ee", "filename": "src/librustc_passes/upvars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_passes%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_passes%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fupvars.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -46,7 +46,7 @@ struct LocalCollector {\n impl Visitor<'tcx> for LocalCollector {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n \n@@ -75,7 +75,7 @@ impl CaptureCollector<'_, '_> {\n impl Visitor<'tcx> for CaptureCollector<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "e77bb6df8e642b0cf261dd3efda9f1d950b2b71b", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -603,7 +603,7 @@ impl ClauseDumper<'tcx> {\n impl Visitor<'tcx> for ClauseDumper<'tcx> {\n     type Map = Map<'tcx>;\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "5a87cf4c10d0d1fd25112b1d5c828f0a23f99525", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -210,7 +210,7 @@ fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n     }\n }\n \n-fn associated_items<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::AssociatedItems {\n+fn associated_items(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::AssociatedItems {\n     let items = tcx.associated_item_def_ids(def_id).iter().map(|did| tcx.associated_item(*did));\n     tcx.arena.alloc(ty::AssociatedItems::new(items))\n }"}, {"sha": "022b2e82964e0382e22da2af313908d571cece07", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -111,7 +111,7 @@ fn identity(_: Ty<'_>) -> Vec<Adjustment<'_>> {\n     vec![]\n }\n \n-fn simple<'tcx>(kind: Adjust<'tcx>) -> impl FnOnce(Ty<'tcx>) -> Vec<Adjustment<'tcx>> {\n+fn simple(kind: Adjust<'tcx>) -> impl FnOnce(Ty<'tcx>) -> Vec<Adjustment<'tcx>> {\n     move |target| vec![Adjustment { kind, target }]\n }\n "}, {"sha": "f7bbde35aa72e9e4a496e87d80ad35c3a2a424b5", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -860,7 +860,7 @@ enum Op {\n }\n \n /// Dereferences a single level of immutable referencing.\n-fn deref_ty_if_possible<'tcx>(ty: Ty<'tcx>) -> Ty<'tcx> {\n+fn deref_ty_if_possible(ty: Ty<'tcx>) -> Ty<'tcx> {\n     match ty.kind {\n         ty::Ref(_, ty, hir::Mutability::Not) => ty,\n         _ => ty,"}, {"sha": "7d7d34e45a634ab69b47f7b60a08c111b525c496", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13548dccd297eb2f95d04ddc593c55b69381d8b/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=c13548dccd297eb2f95d04ddc593c55b69381d8b", "patch": "@@ -322,7 +322,7 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: DefId) {\n     }\n }\n \n-pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUnsizedInfo {\n+pub fn coerce_unsized_info(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUnsizedInfo {\n     debug!(\"compute_coerce_unsized_info(impl_did={:?})\", impl_did);\n     let coerce_unsized_trait = tcx.lang_items().coerce_unsized_trait().unwrap();\n "}]}