{"sha": "b2de95879a8d48cc4077895376b0aaed1e972169", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZGU5NTg3OWE4ZDQ4Y2M0MDc3ODk1Mzc2YjBhYWVkMWU5NzIxNjk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-27T23:49:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-27T23:49:28Z"}, "message": "generalize location interner", "tree": {"sha": "32b7ae7146237d3f861cf58c1dac70ed0d462059", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32b7ae7146237d3f861cf58c1dac70ed0d462059"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2de95879a8d48cc4077895376b0aaed1e972169", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2de95879a8d48cc4077895376b0aaed1e972169", "html_url": "https://github.com/rust-lang/rust/commit/b2de95879a8d48cc4077895376b0aaed1e972169", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2de95879a8d48cc4077895376b0aaed1e972169/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec45dfea1e37ba40ea3e2c8c6df0991a3d49213f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec45dfea1e37ba40ea3e2c8c6df0991a3d49213f", "html_url": "https://github.com/rust-lang/rust/commit/ec45dfea1e37ba40ea3e2c8c6df0991a3d49213f"}], "stats": {"total": 150, "additions": 100, "deletions": 50}, "files": [{"sha": "e0b7afac55a20938aacaf80d6edccf78fd0bd4f1", "filename": "crates/ra_analysis/src/db.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b2de95879a8d48cc4077895376b0aaed1e972169/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2de95879a8d48cc4077895376b0aaed1e972169/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=b2de95879a8d48cc4077895376b0aaed1e972169", "patch": "@@ -8,7 +8,7 @@ use salsa::{self, Database};\n use crate::{\n     hir,\n     symbol_index,\n-    loc2id::{IdMaps},\n+    loc2id::{IdMaps, LocationIntener, DefId, DefLoc, FnId},\n     Cancelable, Canceled, FileId,\n };\n \n@@ -20,7 +20,7 @@ pub(crate) struct RootDatabase {\n     events: (),\n \n     runtime: salsa::Runtime<RootDatabase>,\n-    id_maps: IdMaps,\n+    id_maps: Arc<IdMaps>,\n }\n \n impl salsa::Database for RootDatabase {\n@@ -45,7 +45,7 @@ impl Default for RootDatabase {\n         let mut db = RootDatabase {\n             events: Default::default(),\n             runtime: salsa::Runtime::default(),\n-            id_maps: IdMaps::default(),\n+            id_maps: Default::default(),\n         };\n         db.query_mut(crate::input::SourceRootQuery)\n             .set(crate::input::WORKSPACE, Default::default());\n@@ -84,6 +84,18 @@ impl BaseDatabase for RootDatabase {\n     }\n }\n \n+impl AsRef<LocationIntener<DefLoc, DefId>> for RootDatabase {\n+    fn as_ref(&self) -> &LocationIntener<DefLoc, DefId> {\n+        &self.id_maps.defs\n+    }\n+}\n+\n+impl AsRef<LocationIntener<hir::SourceItemId, FnId>> for RootDatabase {\n+    fn as_ref(&self) -> &LocationIntener<hir::SourceItemId, FnId> {\n+        &self.id_maps.fns\n+    }\n+}\n+\n #[cfg(test)]\n impl RootDatabase {\n     pub(crate) fn log(&self, f: impl FnOnce()) -> Vec<salsa::Event<RootDatabase>> {"}, {"sha": "bf0dc393abf8c138198d20b3e036592d339c5acb", "filename": "crates/ra_analysis/src/hir/db.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b2de95879a8d48cc4077895376b0aaed1e972169/crates%2Fra_analysis%2Fsrc%2Fhir%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2de95879a8d48cc4077895376b0aaed1e972169/crates%2Fra_analysis%2Fsrc%2Fhir%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fdb.rs?ref=b2de95879a8d48cc4077895376b0aaed1e972169", "patch": "@@ -8,20 +8,24 @@ use ra_syntax::{\n use crate::{\n     FileId,\n     db::SyntaxDatabase,\n-    hir::{SourceFileItems, SourceItemId},\n-    hir::query_definitions,\n-    hir::function::{FnId, FnScopes},\n-    hir::module::{\n-        ModuleId, ModuleTree, ModuleSource,\n-        nameres::{ItemMap, InputModuleItems}\n+    hir::{\n+        SourceFileItems, SourceItemId,\n+        query_definitions,\n+        function::{FnScopes},\n+        module::{ModuleId, ModuleTree, ModuleSource,\n+        nameres::{ItemMap, InputModuleItems}},\n     },\n     input::SourceRootId,\n+    loc2id::{DefLoc, DefId, FnId, LocationIntener},\n     Cancelable,\n };\n \n salsa::query_group! {\n \n-pub(crate) trait HirDatabase: SyntaxDatabase {\n+pub(crate) trait HirDatabase: SyntaxDatabase\n+    + AsRef<LocationIntener<DefLoc, DefId>>\n+    + AsRef<LocationIntener<SourceItemId, FnId>>\n+{\n     fn fn_scopes(fn_id: FnId) -> Arc<FnScopes> {\n         type FnScopesQuery;\n         use fn query_definitions::fn_scopes;"}, {"sha": "e64a9f04530ba9dc4e56cb8b7efe07be378701ab", "filename": "crates/ra_analysis/src/hir/function/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2de95879a8d48cc4077895376b0aaed1e972169/crates%2Fra_analysis%2Fsrc%2Fhir%2Ffunction%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2de95879a8d48cc4077895376b0aaed1e972169/crates%2Fra_analysis%2Fsrc%2Fhir%2Ffunction%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Ffunction%2Fmod.rs?ref=b2de95879a8d48cc4077895376b0aaed1e972169", "patch": "@@ -23,7 +23,7 @@ impl FnId {\n         let file_items = db.file_items(file_id);\n         let item_id = file_items.id_of(fn_def.syntax());\n         let item_id = SourceItemId { file_id, item_id };\n-        db.id_maps().fn_id(item_id)\n+        FnId::from_loc(db, &item_id)\n     }\n }\n "}, {"sha": "61e6c9913efd20df2e4f1facc5bb8c7af4142e1e", "filename": "crates/ra_analysis/src/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2de95879a8d48cc4077895376b0aaed1e972169/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2de95879a8d48cc4077895376b0aaed1e972169/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmod.rs?ref=b2de95879a8d48cc4077895376b0aaed1e972169", "patch": "@@ -38,7 +38,7 @@ pub(crate) enum Def {\n \n impl DefId {\n     pub(crate) fn resolve(self, db: &impl HirDatabase) -> Cancelable<Def> {\n-        let loc = db.id_maps().def_loc(self);\n+        let loc = self.loc(db);\n         let res = match loc {\n             DefLoc::Module { id, source_root } => {\n                 let descr = Module::new(db, source_root, id)?;"}, {"sha": "893ec3a10431f642310c9d8e012c2daf70bbab56", "filename": "crates/ra_analysis/src/hir/module/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2de95879a8d48cc4077895376b0aaed1e972169/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2de95879a8d48cc4077895376b0aaed1e972169/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fmod.rs?ref=b2de95879a8d48cc4077895376b0aaed1e972169", "patch": "@@ -134,7 +134,7 @@ impl Module {\n             id: self.module_id,\n             source_root: self.source_root_id,\n         };\n-        db.id_maps().def_id(def_loc)\n+        def_loc.id(db)\n     }\n \n     /// Finds a child module with the specified name.\n@@ -167,7 +167,7 @@ impl Module {\n \n         let segments = path.segments;\n         for name in segments.iter() {\n-            let module = match db.id_maps().def_loc(curr) {\n+            let module = match curr.loc(db) {\n                 DefLoc::Module { id, source_root } => Module::new(db, source_root, id)?,\n                 _ => return Ok(None),\n             };"}, {"sha": "f48f51c8dfd10e2f71853d2d006d7a75ff4df258", "filename": "crates/ra_analysis/src/hir/module/nameres.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2de95879a8d48cc4077895376b0aaed1e972169/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2de95879a8d48cc4077895376b0aaed1e972169/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fnameres.rs?ref=b2de95879a8d48cc4077895376b0aaed1e972169", "patch": "@@ -256,7 +256,7 @@ where\n                     item_id: item.id,\n                 },\n             };\n-            let def_id = self.db.id_maps().def_id(def_loc);\n+            let def_id = def_loc.id(self.db);\n             let resolution = Resolution {\n                 def_id: Some(def_id),\n                 import: None,\n@@ -269,7 +269,7 @@ where\n                 id: mod_id,\n                 source_root: self.source_root,\n             };\n-            let def_id = self.db.id_maps().def_id(def_loc);\n+            let def_id = def_loc.id(self.db);\n             let resolution = Resolution {\n                 def_id: Some(def_id),\n                 import: None,\n@@ -318,7 +318,7 @@ where\n             };\n \n             if !is_last {\n-                curr = match self.db.id_maps().def_loc(def_id) {\n+                curr = match def_id.loc(self.db) {\n                     DefLoc::Module { id, .. } => id,\n                     _ => return,\n                 }"}, {"sha": "6570ca994b2ed520bded384ad4bb983e34e29025", "filename": "crates/ra_analysis/src/hir/query_definitions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2de95879a8d48cc4077895376b0aaed1e972169/crates%2Fra_analysis%2Fsrc%2Fhir%2Fquery_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2de95879a8d48cc4077895376b0aaed1e972169/crates%2Fra_analysis%2Fsrc%2Fhir%2Fquery_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fquery_definitions.rs?ref=b2de95879a8d48cc4077895376b0aaed1e972169", "patch": "@@ -26,7 +26,7 @@ use crate::{\n \n /// Resolve `FnId` to the corresponding `SyntaxNode`\n pub(super) fn fn_syntax(db: &impl HirDatabase, fn_id: FnId) -> FnDefNode {\n-    let item_id = db.id_maps().fn_item_id(fn_id);\n+    let item_id = fn_id.loc(db);\n     let syntax = db.file_item(item_id);\n     FnDef::cast(syntax.borrowed()).unwrap().owned()\n }"}, {"sha": "2aa1411301e386a9efe180b3a545f76d614e6211", "filename": "crates/ra_analysis/src/loc2id.rs", "status": "modified", "additions": 66, "deletions": 32, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/b2de95879a8d48cc4077895376b0aaed1e972169/crates%2Fra_analysis%2Fsrc%2Floc2id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2de95879a8d48cc4077895376b0aaed1e972169/crates%2Fra_analysis%2Fsrc%2Floc2id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Floc2id.rs?ref=b2de95879a8d48cc4077895376b0aaed1e972169", "patch": "@@ -1,9 +1,6 @@\n use parking_lot::Mutex;\n \n-use std::{\n-    hash::Hash,\n-    sync::Arc,\n-};\n+use std::hash::Hash;\n \n use rustc_hash::FxHashMap;\n \n@@ -23,19 +20,19 @@ use crate::{\n /// bidirectional mapping between positional and numeric ids, we can use compact\n /// representation wich still allows us to get the actual item\n #[derive(Debug)]\n-pub(crate) struct Loc2IdMap<L, ID>\n+struct Loc2IdMap<LOC, ID>\n where\n     ID: NumericId,\n-    L: Clone + Eq + Hash,\n+    LOC: Clone + Eq + Hash,\n {\n-    loc2id: FxHashMap<L, ID>,\n-    id2loc: FxHashMap<ID, L>,\n+    loc2id: FxHashMap<LOC, ID>,\n+    id2loc: FxHashMap<ID, LOC>,\n }\n \n-impl<L, ID> Default for Loc2IdMap<L, ID>\n+impl<LOC, ID> Default for Loc2IdMap<LOC, ID>\n where\n     ID: NumericId,\n-    L: Clone + Eq + Hash,\n+    LOC: Clone + Eq + Hash,\n {\n     fn default() -> Self {\n         Loc2IdMap {\n@@ -45,12 +42,12 @@ where\n     }\n }\n \n-impl<L, ID> Loc2IdMap<L, ID>\n+impl<LOC, ID> Loc2IdMap<LOC, ID>\n where\n     ID: NumericId,\n-    L: Clone + Eq + Hash,\n+    LOC: Clone + Eq + Hash,\n {\n-    pub fn loc2id(&mut self, loc: &L) -> ID {\n+    pub fn loc2id(&mut self, loc: &LOC) -> ID {\n         match self.loc2id.get(loc) {\n             Some(id) => return id.clone(),\n             None => (),\n@@ -63,7 +60,7 @@ where\n         id\n     }\n \n-    pub fn id2loc(&self, id: ID) -> L {\n+    pub fn id2loc(&self, id: ID) -> LOC {\n         self.id2loc[&id].clone()\n     }\n }\n@@ -90,6 +87,18 @@ macro_rules! impl_numeric_id {\n pub(crate) struct FnId(u32);\n impl_numeric_id!(FnId);\n \n+impl FnId {\n+    pub(crate) fn from_loc(\n+        db: &impl AsRef<LocationIntener<SourceItemId, FnId>>,\n+        loc: &SourceItemId,\n+    ) -> FnId {\n+        db.as_ref().loc2id(loc)\n+    }\n+    pub(crate) fn loc(self, db: &impl AsRef<LocationIntener<SourceItemId, FnId>>) -> SourceItemId {\n+        db.as_ref().id2loc(self)\n+    }\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub(crate) struct DefId(u32);\n impl_numeric_id!(DefId);\n@@ -105,29 +114,54 @@ pub(crate) enum DefLoc {\n     },\n }\n \n-#[derive(Debug, Default, Clone)]\n-pub(crate) struct IdMaps {\n-    inner: Arc<IdMapsInner>,\n+impl DefId {\n+    pub(crate) fn loc(self, db: &impl AsRef<LocationIntener<DefLoc, DefId>>) -> DefLoc {\n+        db.as_ref().id2loc(self)\n+    }\n }\n \n-impl IdMaps {\n-    pub(crate) fn fn_id(&self, item_id: SourceItemId) -> FnId {\n-        self.inner.fns.lock().loc2id(&item_id)\n-    }\n-    pub(crate) fn fn_item_id(&self, fn_id: FnId) -> SourceItemId {\n-        self.inner.fns.lock().id2loc(fn_id)\n+impl DefLoc {\n+    pub(crate) fn id(&self, db: &impl AsRef<LocationIntener<DefLoc, DefId>>) -> DefId {\n+        db.as_ref().loc2id(&self)\n     }\n+}\n \n-    pub(crate) fn def_id(&self, loc: DefLoc) -> DefId {\n-        self.inner.defs.lock().loc2id(&loc)\n-    }\n-    pub(crate) fn def_loc(&self, def_id: DefId) -> DefLoc {\n-        self.inner.defs.lock().id2loc(def_id)\n+#[derive(Debug, Default)]\n+pub(crate) struct IdMaps {\n+    pub(crate) fns: LocationIntener<SourceItemId, FnId>,\n+    pub(crate) defs: LocationIntener<DefLoc, DefId>,\n+}\n+\n+#[derive(Debug)]\n+pub(crate) struct LocationIntener<LOC, ID>\n+where\n+    ID: NumericId,\n+    LOC: Clone + Eq + Hash,\n+{\n+    map: Mutex<Loc2IdMap<LOC, ID>>,\n+}\n+\n+impl<LOC, ID> Default for LocationIntener<LOC, ID>\n+where\n+    ID: NumericId,\n+    LOC: Clone + Eq + Hash,\n+{\n+    fn default() -> Self {\n+        LocationIntener {\n+            map: Default::default(),\n+        }\n     }\n }\n \n-#[derive(Debug, Default)]\n-struct IdMapsInner {\n-    fns: Mutex<Loc2IdMap<SourceItemId, FnId>>,\n-    defs: Mutex<Loc2IdMap<DefLoc, DefId>>,\n+impl<LOC, ID> LocationIntener<LOC, ID>\n+where\n+    ID: NumericId,\n+    LOC: Clone + Eq + Hash,\n+{\n+    fn loc2id(&self, loc: &LOC) -> ID {\n+        self.map.lock().loc2id(loc)\n+    }\n+    fn id2loc(&self, id: ID) -> LOC {\n+        self.map.lock().id2loc(id)\n+    }\n }"}]}