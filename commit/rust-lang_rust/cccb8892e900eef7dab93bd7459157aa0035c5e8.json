{"sha": "cccb8892e900eef7dab93bd7459157aa0035c5e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjY2I4ODkyZTkwMGVlZjdkYWI5M2JkNzQ1OTE1N2FhMDAzNWM1ZTg=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-08-21T08:55:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-21T08:55:14Z"}, "message": "Rollup merge of #75727 - camelid:intra-doc-links-for-core-result, r=jyn514\n\nSwitch to intra-doc links in `core::result`\n\nPart of #75080.\n\n@rustbot modify labels: A-intra-doc-links T-doc T-rustdoc", "tree": {"sha": "d72700a4de705c832f619aae12f76b48dc30844a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d72700a4de705c832f619aae12f76b48dc30844a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cccb8892e900eef7dab93bd7459157aa0035c5e8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfP4vyCRBK7hj4Ov3rIwAAdHIIADS4vHtf6f1v01EYNJX/50LY\nT39Scz0jvB/bgdMzxo59HNmi4oumZqIoGSesO8qAUguK+NMPbSfJUwOapBXEFyFA\nLcLLTzrrWM0UDjOFwtvB0XQbU6EyF+W/tdAJi91AKQCTCjEqJY47tS5Bg9zpDNgc\n8PtO2djpLsG/G+JLyetnfzZ9qXyp1OLHMzCaUyKyXNBBGwhym8s6APh6slzlYTFg\nI5Heno9YAHqnsBczBxnaxsqIceQRko3THS4vGGMIRKBGf2ft7UTMRdTNX4nmwvtV\nuQH3DtXLuEotXWEDaJJIa+MhpefmFe2FJZGmEh3fhKOw4cryvwZJLLKkPHWSGyo=\n=Tj8J\n-----END PGP SIGNATURE-----\n", "payload": "tree d72700a4de705c832f619aae12f76b48dc30844a\nparent 8665b0830a90299e2aa87d6690e72ba545e80eaf\nparent 5a307cf4bbf3cb6065b43472ab99c1dd4fdc72e5\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1598000114 +0900\ncommitter GitHub <noreply@github.com> 1598000114 +0900\n\nRollup merge of #75727 - camelid:intra-doc-links-for-core-result, r=jyn514\n\nSwitch to intra-doc links in `core::result`\n\nPart of #75080.\n\n@rustbot modify labels: A-intra-doc-links T-doc T-rustdoc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cccb8892e900eef7dab93bd7459157aa0035c5e8", "html_url": "https://github.com/rust-lang/rust/commit/cccb8892e900eef7dab93bd7459157aa0035c5e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cccb8892e900eef7dab93bd7459157aa0035c5e8/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8665b0830a90299e2aa87d6690e72ba545e80eaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/8665b0830a90299e2aa87d6690e72ba545e80eaf", "html_url": "https://github.com/rust-lang/rust/commit/8665b0830a90299e2aa87d6690e72ba545e80eaf"}, {"sha": "5a307cf4bbf3cb6065b43472ab99c1dd4fdc72e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a307cf4bbf3cb6065b43472ab99c1dd4fdc72e5", "html_url": "https://github.com/rust-lang/rust/commit/5a307cf4bbf3cb6065b43472ab99c1dd4fdc72e5"}], "stats": {"total": 85, "additions": 16, "deletions": 69}, "files": [{"sha": "ade5472717dde4d9c9228321bacc8cdebba8d549", "filename": "library/core/src/result.rs", "status": "modified", "additions": 16, "deletions": 69, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/cccb8892e900eef7dab93bd7459157aa0035c5e8/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccb8892e900eef7dab93bd7459157aa0035c5e8/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=cccb8892e900eef7dab93bd7459157aa0035c5e8", "patch": "@@ -216,17 +216,14 @@\n //! [`?`] can only be used in functions that return [`Result`] because of the\n //! early return of [`Err`] that it provides.\n //!\n-//! [`expect`]: enum.Result.html#method.expect\n+//! [`expect`]: Result::expect\n //! [`Write`]: ../../std/io/trait.Write.html\n //! [`write_all`]: ../../std/io/trait.Write.html#method.write_all\n //! [`io::Result`]: ../../std/io/type.Result.html\n-//! [`?`]: ../../std/macro.try.html\n-//! [`Result`]: enum.Result.html\n-//! [`Ok(T)`]: enum.Result.html#variant.Ok\n-//! [`Err(E)`]: enum.Result.html#variant.Err\n+//! [`?`]: crate::ops::Try\n+//! [`Ok(T)`]: Ok\n+//! [`Err(E)`]: Err\n //! [`io::Error`]: ../../std/io/struct.Error.html\n-//! [`Ok`]: enum.Result.html#variant.Ok\n-//! [`Err`]: enum.Result.html#variant.Err\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -237,9 +234,6 @@ use crate::{convert, fmt};\n /// `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).\n ///\n /// See the [`std::result`](index.html) module documentation for details.\n-///\n-/// [`Ok`]: enum.Result.html#variant.Ok\n-/// [`Err`]: enum.Result.html#variant.Err\n #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n #[must_use = \"this `Result` may be an `Err` variant, which should be handled\"]\n #[rustc_diagnostic_item = \"result_type\"]\n@@ -267,8 +261,6 @@ impl<T, E> Result<T, E> {\n \n     /// Returns `true` if the result is [`Ok`].\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -290,8 +282,6 @@ impl<T, E> Result<T, E> {\n \n     /// Returns `true` if the result is [`Err`].\n     ///\n-    /// [`Err`]: enum.Result.html#variant.Err\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -378,7 +368,7 @@ impl<T, E> Result<T, E> {\n     /// Converts `self` into an [`Option<T>`], consuming `self`,\n     /// and discarding the error, if any.\n     ///\n-    /// [`Option<T>`]: ../../std/option/enum.Option.html\n+    /// [`Option<T>`]: Option\n     ///\n     /// # Examples\n     ///\n@@ -405,7 +395,7 @@ impl<T, E> Result<T, E> {\n     /// Converts `self` into an [`Option<E>`], consuming `self`,\n     /// and discarding the success value, if any.\n     ///\n-    /// [`Option<E>`]: ../../std/option/enum.Option.html\n+    /// [`Option<E>`]: Option\n     ///\n     /// # Examples\n     ///\n@@ -497,9 +487,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// This function can be used to compose the results of two functions.\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n-    ///\n     /// # Examples\n     ///\n     /// Print the numbers on each line of a string multiplied by two.\n@@ -530,9 +517,7 @@ impl<T, E> Result<T, E> {\n     /// the result of a function call, it is recommended to use [`map_or_else`],\n     /// which is lazily evaluated.\n     ///\n-    /// [`map_or_else`]: #method.map_or_else\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n+    /// [`map_or_else`]: Result::map_or_else\n     ///\n     /// # Examples\n     ///\n@@ -559,8 +544,6 @@ impl<T, E> Result<T, E> {\n     /// This function can be used to unpack a successful result\n     /// while handling an error.\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -590,8 +573,6 @@ impl<T, E> Result<T, E> {\n     /// This function can be used to pass through a successful result while handling\n     /// an error.\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -671,8 +652,6 @@ impl<T, E> Result<T, E> {\n \n     /// Returns `res` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -706,8 +685,6 @@ impl<T, E> Result<T, E> {\n \n     /// Calls `op` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// This function can be used for control flow based on `Result` values.\n     ///\n@@ -739,9 +716,7 @@ impl<T, E> Result<T, E> {\n     /// result of a function call, it is recommended to use [`or_else`], which is\n     /// lazily evaluated.\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n-    /// [`or_else`]: #method.or_else\n+    /// [`or_else`]: Result::or_else\n     ///\n     /// # Examples\n     ///\n@@ -777,8 +752,6 @@ impl<T, E> Result<T, E> {\n     ///\n     /// This function can be used for control flow based on result values.\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -808,9 +781,7 @@ impl<T, E> Result<T, E> {\n     /// the result of a function call, it is recommended to use [`unwrap_or_else`],\n     /// which is lazily evaluated.\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n-    /// [`unwrap_or_else`]: #method.unwrap_or_else\n+    /// [`unwrap_or_else`]: Result::unwrap_or_else\n     ///\n     /// # Examples\n     ///\n@@ -835,7 +806,6 @@ impl<T, E> Result<T, E> {\n \n     /// Returns the contained [`Ok`] value or computes it from a closure.\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n     ///\n     /// # Examples\n     ///\n@@ -945,8 +915,6 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     /// Panics if the value is an [`Err`], with a panic message including the\n     /// passed message, and the content of the [`Err`].\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -973,17 +941,15 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     /// case explicitly, or call [`unwrap_or`], [`unwrap_or_else`], or\n     /// [`unwrap_or_default`].\n     ///\n-    /// [`unwrap_or`]: #method.unwrap_or\n-    /// [`unwrap_or_else`]: #method.unwrap_or_else\n-    /// [`unwrap_or_default`]: #method.unwrap_or_default\n+    /// [`unwrap_or`]: Result::unwrap_or\n+    /// [`unwrap_or_else`]: Result::unwrap_or_else\n+    /// [`unwrap_or_default`]: Result::unwrap_or_default\n     ///\n     /// # Panics\n     ///\n     /// Panics if the value is an [`Err`], with a panic message provided by the\n     /// [`Err`]'s value.\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -1017,8 +983,6 @@ impl<T: fmt::Debug, E> Result<T, E> {\n     /// Panics if the value is an [`Ok`], with a panic message including the\n     /// passed message, and the content of the [`Ok`].\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///\n@@ -1045,8 +1009,6 @@ impl<T: fmt::Debug, E> Result<T, E> {\n     /// Panics if the value is an [`Ok`], with a custom panic message provided\n     /// by the [`Ok`]'s value.\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n     ///\n     ///\n     /// # Examples\n@@ -1095,10 +1057,8 @@ impl<T: Default, E> Result<T, E> {\n     /// assert_eq!(0, bad_year);\n     /// ```\n     ///\n-    /// [`parse`]: ../../std/primitive.str.html#method.parse\n-    /// [`FromStr`]: ../../std/str/trait.FromStr.html\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n+    /// [`parse`]: str::parse\n+    /// [`FromStr`]: crate::str::FromStr\n     #[inline]\n     #[stable(feature = \"result_unwrap_or_default\", since = \"1.16.0\")]\n     pub fn unwrap_or_default(self) -> T {\n@@ -1119,9 +1079,7 @@ impl<T, E: Into<!>> Result<T, E> {\n     /// to compile if the error type of the `Result` is later changed\n     /// to an error that can actually occur.\n     ///\n-    /// [`Ok`]: enum.Result.html#variant.Ok\n-    /// [`Err`]: enum.Result.html#variant.Err\n-    /// [`unwrap`]: enum.Result.html#method.unwrap\n+    /// [`unwrap`]: Result::unwrap\n     ///\n     /// # Examples\n     ///\n@@ -1343,10 +1301,6 @@ impl<'a, T, E> IntoIterator for &'a mut Result<T, E> {\n /// The iterator yields one value if the result is [`Ok`], otherwise none.\n ///\n /// Created by [`Result::iter`].\n-///\n-/// [`Ok`]: enum.Result.html#variant.Ok\n-/// [`Result`]: enum.Result.html\n-/// [`Result::iter`]: enum.Result.html#method.iter\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, T: 'a> {\n@@ -1396,10 +1350,6 @@ impl<T> Clone for Iter<'_, T> {\n /// An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].\n ///\n /// Created by [`Result::iter_mut`].\n-///\n-/// [`Ok`]: enum.Result.html#variant.Ok\n-/// [`Result`]: enum.Result.html\n-/// [`Result::iter_mut`]: enum.Result.html#method.iter_mut\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, T: 'a> {\n@@ -1445,10 +1395,7 @@ unsafe impl<A> TrustedLen for IterMut<'_, A> {}\n /// This struct is created by the [`into_iter`] method on\n /// [`Result`] (provided by the [`IntoIterator`] trait).\n ///\n-/// [`Ok`]: enum.Result.html#variant.Ok\n-/// [`Result`]: enum.Result.html\n-/// [`into_iter`]: ../iter/trait.IntoIterator.html#tymethod.into_iter\n-/// [`IntoIterator`]: ../iter/trait.IntoIterator.html\n+/// [`into_iter`]: IntoIterator::into_iter\n #[derive(Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<T> {"}]}