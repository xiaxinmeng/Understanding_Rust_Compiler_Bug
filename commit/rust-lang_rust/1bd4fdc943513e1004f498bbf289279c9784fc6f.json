{"sha": "1bd4fdc943513e1004f498bbf289279c9784fc6f", "node_id": "C_kwDOAAsO6NoAKDFiZDRmZGM5NDM1MTNlMTAwNGY0OThiYmYyODkyNzljOTc4NGZjNmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-12T17:57:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-12T17:57:50Z"}, "message": "Auto merge of #92811 - matthiaskrgr:rollup-wrctcef, r=matthiaskrgr\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #92328 (Tweak sentence in `transmute` docs)\n - #92432 (Error when selected impl is not const in constck)\n - #92506 (Document Box<T> FFI guarantee in 1.41.0 release notes)\n - #92699 (rustdoc: Display \"private fields\" instead of \"fields omitted\")\n - #92703 (RELEASES.md: Add 1.58 release note for `File::options` stabilization)\n - #92707 (Extended the note on the use of `no_run` attribute)\n - #92709 (Improve documentation for File::options to give a more likely example)\n - #92720 (Fix doc formatting for time.rs)\n - #92732 (Add note about upstream commit musl-patch-configure.diff is derived from)\n - #92742 (Add missing suffix for sidebar-items script path)\n - #92748 (Eliminate \"boxed\" wording in `std::error::Error` documentation)\n - #92754 (Update AsmArgs field visibility for rustfmt)\n - #92756 (:arrow_up: rust-analyzer)\n - #92764 (Fix rust logo style)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "98e184cf410f6f6e4a029d070014e1443e0e23cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98e184cf410f6f6e4a029d070014e1443e0e23cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bd4fdc943513e1004f498bbf289279c9784fc6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bd4fdc943513e1004f498bbf289279c9784fc6f", "html_url": "https://github.com/rust-lang/rust/commit/1bd4fdc943513e1004f498bbf289279c9784fc6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bd4fdc943513e1004f498bbf289279c9784fc6f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72e74d7b9cf1a7901650227e74650f1fcc797600", "url": "https://api.github.com/repos/rust-lang/rust/commits/72e74d7b9cf1a7901650227e74650f1fcc797600", "html_url": "https://github.com/rust-lang/rust/commit/72e74d7b9cf1a7901650227e74650f1fcc797600"}, {"sha": "05dd1e4a2b6561b6daac38395883be6c782c2de1", "url": "https://api.github.com/repos/rust-lang/rust/commits/05dd1e4a2b6561b6daac38395883be6c782c2de1", "html_url": "https://github.com/rust-lang/rust/commit/05dd1e4a2b6561b6daac38395883be6c782c2de1"}], "stats": {"total": 194, "additions": 158, "deletions": 36}, "files": [{"sha": "01c57ab917033cc922758804e348298bcf9f9e1e", "filename": "RELEASES.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1bd4fdc943513e1004f498bbf289279c9784fc6f/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/1bd4fdc943513e1004f498bbf289279c9784fc6f/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=1bd4fdc943513e1004f498bbf289279c9784fc6f", "patch": "@@ -44,6 +44,7 @@ Stabilized APIs\n - [`Result::unwrap_unchecked`]\n - [`Result::unwrap_err_unchecked`]\n - [`NonZero{unsigned}::is_power_of_two`]\n+- [`File::options`]\n \n These APIs are now usable in const contexts:\n \n@@ -141,6 +142,7 @@ and related tools.\n [`Result::unwrap_unchecked`]: https://doc.rust-lang.org/stable/std/result/enum.Result.html#method.unwrap_unchecked\n [`Result::unwrap_err_unchecked`]: https://doc.rust-lang.org/stable/std/result/enum.Result.html#method.unwrap_err_unchecked\n [`NonZero{unsigned}::is_power_of_two`]: https://doc.rust-lang.org/stable/std/num/struct.NonZeroU8.html#method.is_power_of_two\n+[`File::options`]: https://doc.rust-lang.org/stable/std/fs/struct.File.html#method.options\n [`unix::process::ExitStatusExt::core_dumped`]: https://doc.rust-lang.org/stable/std/os/unix/process/trait.ExitStatusExt.html#tymethod.core_dumped\n [`unix::process::ExitStatusExt::stopped_signal`]: https://doc.rust-lang.org/stable/std/os/unix/process/trait.ExitStatusExt.html#tymethod.stopped_signal\n [`unix::process::ExitStatusExt::continued`]: https://doc.rust-lang.org/stable/std/os/unix/process/trait.ExitStatusExt.html#tymethod.continued\n@@ -2588,6 +2590,11 @@ Language\n - [Visibility modifiers (e.g. `pub`) are now syntactically allowed on trait items and\n   enum variants.][66183] These are still rejected semantically, but\n   can be seen and parsed by procedural macros and conditional compilation.\n+- [You can now define a Rust `extern \"C\"` function with `Box<T>` and use `T*` as the corresponding\n+  type on the C side.][62514] Please see [the documentation][box-memory-layout] for more information,\n+  including the important caveat about preferring to avoid `Box<T>` in Rust signatures for functions defined in C.\n+\n+[box-memory-layout]: https://doc.rust-lang.org/std/boxed/index.html#memory-layout\n \n Compiler\n --------\n@@ -2662,6 +2669,7 @@ Compatibility Notes\n \n [54733]: https://github.com/rust-lang/rust/pull/54733/\n [61351]: https://github.com/rust-lang/rust/pull/61351/\n+[62514]: https://github.com/rust-lang/rust/pull/62514/\n [67255]: https://github.com/rust-lang/rust/pull/67255/\n [66661]: https://github.com/rust-lang/rust/pull/66661/\n [66771]: https://github.com/rust-lang/rust/pull/66771/"}, {"sha": "caf8ac77df187d1ac75bb1203c03c4153192c981", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1bd4fdc943513e1004f498bbf289279c9784fc6f/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd4fdc943513e1004f498bbf289279c9784fc6f/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=1bd4fdc943513e1004f498bbf289279c9784fc6f", "patch": "@@ -16,13 +16,13 @@ use rustc_target::asm::InlineAsmArch;\n use smallvec::smallvec;\n \n pub struct AsmArgs {\n-    templates: Vec<P<ast::Expr>>,\n-    operands: Vec<(ast::InlineAsmOperand, Span)>,\n+    pub templates: Vec<P<ast::Expr>>,\n+    pub operands: Vec<(ast::InlineAsmOperand, Span)>,\n     named_args: FxHashMap<Symbol, usize>,\n     reg_args: FxHashSet<usize>,\n-    clobber_abis: Vec<(Symbol, Span)>,\n+    pub clobber_abis: Vec<(Symbol, Span)>,\n     options: ast::InlineAsmOptions,\n-    options_spans: Vec<Span>,\n+    pub options_spans: Vec<Span>,\n }\n \n fn parse_args<'a>("}, {"sha": "de4824eb667c4cd21abd0a2c6b3b48dfc1060fbe", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1bd4fdc943513e1004f498bbf289279c9784fc6f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd4fdc943513e1004f498bbf289279c9784fc6f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=1bd4fdc943513e1004f498bbf289279c9784fc6f", "patch": "@@ -810,7 +810,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                         param_env,\n                         Binder::dummy(TraitPredicate {\n                             trait_ref,\n-                            constness: ty::BoundConstness::ConstIfConst,\n+                            constness: ty::BoundConstness::NotConst,\n                             polarity: ty::ImplPolarity::Positive,\n                         }),\n                     );\n@@ -829,6 +829,10 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                             return;\n                         }\n                         Ok(Some(ImplSource::UserDefined(data))) => {\n+                            if let hir::Constness::NotConst = tcx.impl_constness(data.impl_def_id) {\n+                                self.check_op(ops::FnCallNonConst(None));\n+                                return;\n+                            }\n                             let callee_name = tcx.item_name(callee);\n                             if let Some(&did) = tcx\n                                 .associated_item_def_ids(data.impl_def_id)"}, {"sha": "acbb612352b3659b1b8f65de385ddd9778ad56db", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bd4fdc943513e1004f498bbf289279c9784fc6f/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd4fdc943513e1004f498bbf289279c9784fc6f/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=1bd4fdc943513e1004f498bbf289279c9784fc6f", "patch": "@@ -961,7 +961,7 @@ extern \"rust-intrinsic\" {\n     /// Below are common applications of `transmute` which can be replaced with safer\n     /// constructs.\n     ///\n-    /// Turning raw bytes(`&[u8]`) to `u32`, `f64`, etc.:\n+    /// Turning raw bytes (`&[u8]`) into `u32`, `f64`, etc.:\n     ///\n     /// ```\n     /// let raw_bytes = [0x78, 0x56, 0x34, 0x12];"}, {"sha": "526a1b92b19e295f7ad7ea1bd61fc59c15da36b3", "filename": "library/std/src/error.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1bd4fdc943513e1004f498bbf289279c9784fc6f/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd4fdc943513e1004f498bbf289279c9784fc6f/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=1bd4fdc943513e1004f498bbf289279c9784fc6f", "patch": "@@ -606,21 +606,21 @@ impl Error for time::FromSecsError {}\n \n // Copied from `any.rs`.\n impl dyn Error + 'static {\n-    /// Returns `true` if the boxed type is the same as `T`\n+    /// Returns `true` if the inner type is the same as `T`.\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     #[inline]\n     pub fn is<T: Error + 'static>(&self) -> bool {\n         // Get `TypeId` of the type this function is instantiated with.\n         let t = TypeId::of::<T>();\n \n-        // Get `TypeId` of the type in the trait object.\n-        let boxed = self.type_id(private::Internal);\n+        // Get `TypeId` of the type in the trait object (`self`).\n+        let concrete = self.type_id(private::Internal);\n \n         // Compare both `TypeId`s on equality.\n-        t == boxed\n+        t == concrete\n     }\n \n-    /// Returns some reference to the boxed value if it is of type `T`, or\n+    /// Returns some reference to the inner value if it is of type `T`, or\n     /// `None` if it isn't.\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     #[inline]\n@@ -632,7 +632,7 @@ impl dyn Error + 'static {\n         }\n     }\n \n-    /// Returns some mutable reference to the boxed value if it is of type `T`, or\n+    /// Returns some mutable reference to the inner value if it is of type `T`, or\n     /// `None` if it isn't.\n     #[stable(feature = \"error_downcast\", since = \"1.3.0\")]\n     #[inline]"}, {"sha": "a00b5e1232369fd284697cc14d9b3f6206519df1", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1bd4fdc943513e1004f498bbf289279c9784fc6f/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd4fdc943513e1004f498bbf289279c9784fc6f/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=1bd4fdc943513e1004f498bbf289279c9784fc6f", "patch": "@@ -356,9 +356,10 @@ impl File {\n     /// open or create a file with specific options if `open()` or `create()`\n     /// are not appropriate.\n     ///\n-    /// It is equivalent to `OpenOptions::new()` but allows you to write more\n-    /// readable code. Instead of `OpenOptions::new().read(true).open(\"foo.txt\")`\n-    /// you can write `File::options().read(true).open(\"foo.txt\")`. This\n+    /// It is equivalent to `OpenOptions::new()`, but allows you to write more\n+    /// readable code. Instead of\n+    /// `OpenOptions::new().append(true).open(\"example.log\")`,\n+    /// you can write `File::options().append(true).open(\"example.log\")`. This\n     /// also avoids the need to import `OpenOptions`.\n     ///\n     /// See the [`OpenOptions::new`] function for more details.\n@@ -369,7 +370,7 @@ impl File {\n     /// use std::fs::File;\n     ///\n     /// fn main() -> std::io::Result<()> {\n-    ///     let mut f = File::options().read(true).open(\"foo.txt\")?;\n+    ///     let mut f = File::options().append(true).open(\"example.log\")?;\n     ///     Ok(())\n     /// }\n     /// ```"}, {"sha": "b6867e68df745c378c75204964f8371093de1c10", "filename": "library/std/src/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bd4fdc943513e1004f498bbf289279c9784fc6f/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd4fdc943513e1004f498bbf289279c9784fc6f/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=1bd4fdc943513e1004f498bbf289279c9784fc6f", "patch": "@@ -54,7 +54,7 @@ pub use core::time::FromSecsError;\n /// instant when created, and are often useful for tasks such as measuring\n /// benchmarks or timing how long an operation takes.\n ///\n-/// Note, however, that instants are not guaranteed to be **steady**. In other\n+/// Note, however, that instants are **not** guaranteed to be **steady**. In other\n /// words, each tick of the underlying clock might not be the same length (e.g.\n /// some seconds may be longer than others). An instant may jump forwards or\n /// experience time dilation (slow down or speed up), but it will never go"}, {"sha": "e358b8139d7d0c3e070dbd126e60f1b0c2c58df0", "filename": "src/ci/docker/scripts/musl-toolchain.sh", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bd4fdc943513e1004f498bbf289279c9784fc6f/src%2Fci%2Fdocker%2Fscripts%2Fmusl-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/1bd4fdc943513e1004f498bbf289279c9784fc6f/src%2Fci%2Fdocker%2Fscripts%2Fmusl-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fmusl-toolchain.sh?ref=1bd4fdc943513e1004f498bbf289279c9784fc6f", "patch": "@@ -48,7 +48,9 @@ cd musl-cross-make\n git checkout a54eb56f33f255dfca60be045f12a5cfaf5a72a9\n \n # Fix the cfi detection script in musl's configure so cfi is generated\n-# when debug info is asked for.\n+# when debug info is asked for. This patch is derived from\n+# https://git.musl-libc.org/cgit/musl/commit/?id=c4d4028dde90562f631edf559fbc42d8ec1b29de.\n+# When we upgrade to a version that includes this commit, we can remove the patch.\n mkdir patches/musl-1.1.24\n cp ../musl-patch-configure.diff patches/musl-1.1.24/0001-fix-cfi-detection.diff\n "}, {"sha": "534fd19b52eb27d5e40d73419588a5ee893c2696", "filename": "src/doc/rustdoc/src/documentation-tests.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1bd4fdc943513e1004f498bbf289279c9784fc6f/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/1bd4fdc943513e1004f498bbf289279c9784fc6f/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md?ref=1bd4fdc943513e1004f498bbf289279c9784fc6f", "patch": "@@ -335,7 +335,8 @@ panic during execution. If the code doesn't panic, the test will fail.\n The `no_run` attribute will compile your code but not run it. This is\n important for examples such as \"Here's how to retrieve a web page,\"\n which you would want to ensure compiles, but might be run in a test\n-environment that has no network access.\n+environment that has no network access. This attribute can also be\n+used to demonstrate code snippets that can cause Undefined Behavior.\n \n ```rust\n /// ```no_run"}, {"sha": "40453de84058d7718e7c5c34c20918ddd734e6ea", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bd4fdc943513e1004f498bbf289279c9784fc6f/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd4fdc943513e1004f498bbf289279c9784fc6f/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=1bd4fdc943513e1004f498bbf289279c9784fc6f", "patch": "@@ -665,7 +665,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n                 _ => unreachable!(),\n             };\n             let items = self.build_sidebar_items(module);\n-            let js_dst = self.dst.join(\"sidebar-items.js\");\n+            let js_dst = self.dst.join(&format!(\"sidebar-items{}.js\", self.shared.resource_suffix));\n             let v = format!(\"initSidebarItems({});\", serde_json::to_string(&items).unwrap());\n             scx.fs.write(js_dst, v)?;\n         }"}, {"sha": "d63df4e41307a84e423d8b890fc33ef271c3c583", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1bd4fdc943513e1004f498bbf289279c9784fc6f/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd4fdc943513e1004f498bbf289279c9784fc6f/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=1bd4fdc943513e1004f498bbf289279c9784fc6f", "patch": "@@ -1827,7 +1827,11 @@ fn print_sidebar(cx: &Context<'_>, it: &clean::Item, buffer: &mut Buffer) {\n         ty = it.type_(),\n         path = relpath\n     );\n-    write!(buffer, \"<script defer src=\\\"{}sidebar-items.js\\\"></script>\", relpath);\n+    write!(\n+        buffer,\n+        \"<script defer src=\\\"{}sidebar-items{}.js\\\"></script>\",\n+        relpath, cx.shared.resource_suffix\n+    );\n     // Closes sidebar-elems div.\n     buffer.write_str(\"</div>\");\n }"}, {"sha": "4f7bb39213bb3f3a629d4ace0daf22a78a41fda0", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1bd4fdc943513e1004f498bbf289279c9784fc6f/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd4fdc943513e1004f498bbf289279c9784fc6f/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=1bd4fdc943513e1004f498bbf289279c9784fc6f", "patch": "@@ -1557,7 +1557,7 @@ fn render_union(\n     }\n \n     if it.has_stripped_fields().unwrap() {\n-        write!(w, \"    // some fields omitted\\n{}\", tab);\n+        write!(w, \"    /* private fields */\\n{}\", tab);\n     }\n     if toggle {\n         toggle_close(w);\n@@ -1613,13 +1613,11 @@ fn render_struct(\n \n             if has_visible_fields {\n                 if it.has_stripped_fields().unwrap() {\n-                    write!(w, \"\\n{}    // some fields omitted\", tab);\n+                    write!(w, \"\\n{}    /* private fields */\", tab);\n                 }\n                 write!(w, \"\\n{}\", tab);\n             } else if it.has_stripped_fields().unwrap() {\n-                // If there are no visible fields we can just display\n-                // `{ /* fields omitted */ }` to save space.\n-                write!(w, \" /* fields omitted */ \");\n+                write!(w, \" /* private fields */ \");\n             }\n             if toggle {\n                 toggle_close(w);"}, {"sha": "23ee87a4e681d8680e9b592b50d49fb300d9bf17", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bd4fdc943513e1004f498bbf289279c9784fc6f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/1bd4fdc943513e1004f498bbf289279c9784fc6f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=1bd4fdc943513e1004f498bbf289279c9784fc6f", "patch": "@@ -61,7 +61,7 @@ pre, .rustdoc.source .example-wrap {\n \tbackground-color: #14191f;\n }\n \n-.rust-logo > img {\n+.rust-logo {\n \tfilter: drop-shadow(1px 0 0px #fff)\n \t\tdrop-shadow(0 1px 0 #fff)\n \t\tdrop-shadow(-1px 0 0 #fff)"}, {"sha": "2db725c9b4e975a966191e9f442b22d975484565", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bd4fdc943513e1004f498bbf289279c9784fc6f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/1bd4fdc943513e1004f498bbf289279c9784fc6f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=1bd4fdc943513e1004f498bbf289279c9784fc6f", "patch": "@@ -32,7 +32,7 @@ pre, .rustdoc.source .example-wrap {\n \tbackground-color: #505050;\n }\n \n-.rust-logo > img {\n+.rust-logo {\n \tfilter: drop-shadow(1px 0 0px #fff)\n \t\tdrop-shadow(0 1px 0 #fff)\n \t\tdrop-shadow(-1px 0 0 #fff)"}, {"sha": "3c8dbeb98c5b3623b20c04cfcc1bfa0ac9a5e881", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bd4fdc943513e1004f498bbf289279c9784fc6f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/1bd4fdc943513e1004f498bbf289279c9784fc6f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=1bd4fdc943513e1004f498bbf289279c9784fc6f", "patch": "@@ -43,7 +43,7 @@ pre, .rustdoc.source .example-wrap {\n \tscrollbar-color: rgba(36, 37, 39, 0.6) #d9d9d9;\n }\n \n-.rust-logo > img {\n+.rust-logo {\n \t/* No need for a border in here! */\n }\n "}, {"sha": "4a9dcf735065f6afa86772d3c96434ccd8686046", "filename": "src/test/rustdoc-gui/rust-logo.goml", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/1bd4fdc943513e1004f498bbf289279c9784fc6f/src%2Ftest%2Frustdoc-gui%2Frust-logo.goml", "raw_url": "https://github.com/rust-lang/rust/raw/1bd4fdc943513e1004f498bbf289279c9784fc6f/src%2Ftest%2Frustdoc-gui%2Frust-logo.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Frust-logo.goml?ref=1bd4fdc943513e1004f498bbf289279c9784fc6f", "patch": "@@ -0,0 +1,78 @@\n+// This test ensures that the correct style is applied to the rust logo in the sidebar.\n+goto: file://|DOC_PATH|/test_docs/index.html\n+\n+// First we start with the dark theme.\n+local-storage: {\n+    \"rustdoc-theme\": \"dark\",\n+    \"rustdoc-preferred-dark-theme\": \"dark\",\n+    \"rustdoc-use-system-theme\": \"false\",\n+}\n+reload:\n+\n+assert-css: (\n+    \".rust-logo\",\n+    {\"filter\": \"drop-shadow(rgb(255, 255, 255) 1px 0px 0px) drop-shadow(rgb(255, 255, 255) 0px 1px 0px) drop-shadow(rgb(255, 255, 255) -1px 0px 0px) drop-shadow(rgb(255, 255, 255) 0px -1px 0px)\"},\n+)\n+\n+// In the source view page now.\n+goto: file://|DOC_PATH|/src/test_docs/lib.rs.html\n+\n+local-storage: {\n+    \"rustdoc-theme\": \"dark\",\n+    \"rustdoc-preferred-dark-theme\": \"dark\",\n+    \"rustdoc-use-system-theme\": \"false\",\n+}\n+reload:\n+\n+assert-css: (\n+    \".rust-logo\",\n+    {\"filter\": \"drop-shadow(rgb(255, 255, 255) 1px 0px 0px) drop-shadow(rgb(255, 255, 255) 0px 1px 0px) drop-shadow(rgb(255, 255, 255) -1px 0px 0px) drop-shadow(rgb(255, 255, 255) 0px -1px 0px)\"},\n+)\n+\n+// Then with the ayu theme.\n+local-storage: {\n+    \"rustdoc-theme\": \"ayu\",\n+    \"rustdoc-preferred-dark-theme\": \"ayu\",\n+    \"rustdoc-use-system-theme\": \"false\",\n+}\n+reload:\n+\n+assert-css: (\n+    \".rust-logo\",\n+    {\"filter\": \"drop-shadow(rgb(255, 255, 255) 1px 0px 0px) drop-shadow(rgb(255, 255, 255) 0px 1px 0px) drop-shadow(rgb(255, 255, 255) -1px 0px 0px) drop-shadow(rgb(255, 255, 255) 0px -1px 0px)\"},\n+)\n+\n+// In the source view page now.\n+goto: file://|DOC_PATH|/src/test_docs/lib.rs.html\n+\n+local-storage: {\n+    \"rustdoc-theme\": \"ayu\",\n+    \"rustdoc-preferred-dark-theme\": \"ayu\",\n+    \"rustdoc-use-system-theme\": \"false\",\n+}\n+reload:\n+\n+assert-css: (\n+    \".rust-logo\",\n+    {\"filter\": \"drop-shadow(rgb(255, 255, 255) 1px 0px 0px) drop-shadow(rgb(255, 255, 255) 0px 1px 0px) drop-shadow(rgb(255, 255, 255) -1px 0px 0px) drop-shadow(rgb(255, 255, 255) 0px -1px 0px)\"},\n+)\n+\n+// And finally with the light theme.\n+local-storage: {\"rustdoc-theme\": \"light\", \"rustdoc-use-system-theme\": \"false\"}\n+reload:\n+\n+assert-css: (\n+    \".rust-logo\",\n+    {\"filter\": \"none\"},\n+)\n+\n+// In the source view page now.\n+goto: file://|DOC_PATH|/src/test_docs/lib.rs.html\n+\n+local-storage: {\"rustdoc-theme\": \"light\", \"rustdoc-use-system-theme\": \"false\"}\n+reload:\n+\n+assert-css: (\n+    \".rust-logo\",\n+    {\"filter\": \"none\"},\n+)"}, {"sha": "7e1cada4b9828c939d892e9e56505e1a83b9fa67", "filename": "src/test/rustdoc/structfields.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1bd4fdc943513e1004f498bbf289279c9784fc6f/src%2Ftest%2Frustdoc%2Fstructfields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd4fdc943513e1004f498bbf289279c9784fc6f/src%2Ftest%2Frustdoc%2Fstructfields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fstructfields.rs?ref=1bd4fdc943513e1004f498bbf289279c9784fc6f", "patch": "@@ -2,7 +2,7 @@\n pub struct Foo {\n     // @has - //pre \"pub a: ()\"\n     pub a: (),\n-    // @has - //pre \"// some fields omitted\"\n+    // @has - //pre \"/* private fields */\"\n     // @!has - //pre \"b: ()\"\n     b: (),\n     // @!has - //pre \"c: usize\"\n@@ -16,7 +16,7 @@ pub struct Foo {\n pub struct Bar {\n     // @has - //pre \"pub a: ()\"\n     pub a: (),\n-    // @!has - //pre \"// some fields omitted\"\n+    // @!has - //pre \"/* private fields */\"\n }\n \n // @has structfields/enum.Qux.html\n@@ -29,11 +29,11 @@ pub enum Qux {\n         b: (),\n         // @has - //pre \"c: usize\"\n         c: usize,\n-        // @has - //pre \"// some fields omitted\"\n+        // @has - //pre \"/* private fields */\"\n     },\n }\n \n-// @has structfields/struct.Baz.html //pre \"pub struct Baz { /* fields omitted */ }\"\n+// @has structfields/struct.Baz.html //pre \"pub struct Baz { /* private fields */ }\"\n pub struct Baz {\n     x: u8,\n     #[doc(hidden)]"}, {"sha": "c1df4613e3562ccd9dbc286bc2a098fcb8d36260", "filename": "src/test/rustdoc/toggle-item-contents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bd4fdc943513e1004f498bbf289279c9784fc6f/src%2Ftest%2Frustdoc%2Ftoggle-item-contents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd4fdc943513e1004f498bbf289279c9784fc6f/src%2Ftest%2Frustdoc%2Ftoggle-item-contents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftoggle-item-contents.rs?ref=1bd4fdc943513e1004f498bbf289279c9784fc6f", "patch": "@@ -55,7 +55,7 @@ pub union Union {\n \n // @has 'toggle_item_contents/struct.PrivStruct.html'\n // @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 0\n-// @has - '//div[@class=\"docblock item-decl\"]' 'fields omitted'\n+// @has - '//div[@class=\"docblock item-decl\"]' '/* private fields */'\n pub struct PrivStruct {\n     a: usize,\n     b: usize,"}, {"sha": "5a788eb1b1cae65bef324d681238905a357fa462", "filename": "src/test/rustdoc/union.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bd4fdc943513e1004f498bbf289279c9784fc6f/src%2Ftest%2Frustdoc%2Funion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd4fdc943513e1004f498bbf289279c9784fc6f/src%2Ftest%2Frustdoc%2Funion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Funion.rs?ref=1bd4fdc943513e1004f498bbf289279c9784fc6f", "patch": "@@ -2,7 +2,7 @@\n pub union U {\n     // @has - //pre \"pub a: u8\"\n     pub a: u8,\n-    // @has - //pre \"// some fields omitted\"\n+    // @has - //pre \"/* private fields */\"\n     // @!has - //pre \"b: u16\"\n     b: u16,\n }"}, {"sha": "cccb856c2f675f4c71a95ef72aafb04e11ea6926", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-same-trait-ck.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1bd4fdc943513e1004f498bbf289279c9784fc6f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd4fdc943513e1004f498bbf289279c9784fc6f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.rs?ref=1bd4fdc943513e1004f498bbf289279c9784fc6f", "patch": "@@ -0,0 +1,17 @@\n+#![feature(const_fn_trait_bound)]\n+#![feature(const_trait_impl)]\n+\n+pub trait Tr {\n+    #[default_method_body_is_const]\n+    fn a(&self) {}\n+\n+    #[default_method_body_is_const]\n+    fn b(&self) {\n+        ().a()\n+        //~^ ERROR calls in constant functions are limited\n+    }\n+}\n+\n+impl Tr for () {}\n+\n+fn main() {}"}, {"sha": "91f4d2fd4b0e847a466caea09db4627d19e2f3e7", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-same-trait-ck.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1bd4fdc943513e1004f498bbf289279c9784fc6f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bd4fdc943513e1004f498bbf289279c9784fc6f/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-same-trait-ck.stderr?ref=1bd4fdc943513e1004f498bbf289279c9784fc6f", "patch": "@@ -0,0 +1,9 @@\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/default-method-body-is-const-same-trait-ck.rs:10:9\n+   |\n+LL |         ().a()\n+   |         ^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "0f8c96c92689af8378dbe9f466c6bf15a3a27458", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=1bd4fdc943513e1004f498bbf289279c9784fc6f", "patch": "@@ -1 +1 @@\n-Subproject commit 8e9ccbf97a70259b6c6576e8fd7d77d28238737e\n+Subproject commit 0f8c96c92689af8378dbe9f466c6bf15a3a27458"}]}