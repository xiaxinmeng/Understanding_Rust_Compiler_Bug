{"sha": "ef82bd4b5508f7b55ecae7f1b12613018fbf51ae", "node_id": "C_kwDOAAsO6NoAKGVmODJiZDRiNTUwOGY3YjU1ZWNhZTdmMWIxMjYxMzAxOGZiZjUxYWU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-31T09:19:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-31T09:19:07Z"}, "message": "Rollup merge of #111975 - jyn514:normalization, r=cjgillot\n\nStop normalizing so many different prefixes\n\nPreviously, we would normalize *all* of\n- the absolute path to the repository checkout\n- the /rustc/$sha for stage1 (if `remap-debuginfo` was enabled)\n- the /rustc/$sha for download-rustc\n- the sysroot for download-rustc\n\nNow, we consistently only normalize /rustc/FAKE_PREFIX. Not only is this much simpler, but it also avoids ongoing maintenance for download-rustc and makes it much less likely that tests break by accident.\n\n- Change `tests/ui/track-diagnostics/track6.rs` to use a relative path instead of an absolute one. I am not actually sure why `track_caller` works here, but it does seem to work :shrug:\n\n- Pass `-Zsimulate-remapped-rust-src-base=/rustc/FAKE_PREFIX` to all suites, not just UI. In particular, mir-opt tests emit /rustc/ paths in their output.\n\nr? ```@cjgillot``` since you reviewed https://github.com/rust-lang/rust/pull/110699 - this is the test that it doesn't regress :)", "tree": {"sha": "6c69ab7b1fea8d21397c6af6a0ccf8375988e390", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c69ab7b1fea8d21397c6af6a0ccf8375988e390"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef82bd4b5508f7b55ecae7f1b12613018fbf51ae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkdxELCRBK7hj4Ov3rIwAALtUIAKPm8yuLQ9A1pFAGCHj5W47d\nOip0Sd9BUp/RFPWWuM4SQ0bS6cf9iASueVz5enLZdOwcT0SItC22gLr8aQOdDBnt\nH886cuQF4B7oRl5eg4MM8IYt0+t8kWFihLIBK+8Ym/SETlR7cI/yqhQx/CAQLH6S\njle0I78YLQzNq57qkFzYtsb7TcpY5s60pPt8L/PVE5WBfKsMSYzy2HpngnYf3egq\nmiLYlOH5Un5QwakFPavYR3c1eigNfL/opBPw7TD36+NtDLp4K8WzySWn4TJUIfR6\ndo36VsnM204YOSglV4MfOEgLMP8bbaiLGUTI0tlUPPfv5vFRxh3ScmmM87GABsk=\n=AGUt\n-----END PGP SIGNATURE-----\n", "payload": "tree 6c69ab7b1fea8d21397c6af6a0ccf8375988e390\nparent fd1c0d8585fa5de58fa0daa31d21aab63619a00c\nparent 157d936c31e4f5ff51cc6f20c748e16537f33b9c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1685524747 +0200\ncommitter GitHub <noreply@github.com> 1685524747 +0200\n\nRollup merge of #111975 - jyn514:normalization, r=cjgillot\n\nStop normalizing so many different prefixes\n\nPreviously, we would normalize *all* of\n- the absolute path to the repository checkout\n- the /rustc/$sha for stage1 (if `remap-debuginfo` was enabled)\n- the /rustc/$sha for download-rustc\n- the sysroot for download-rustc\n\nNow, we consistently only normalize /rustc/FAKE_PREFIX. Not only is this much simpler, but it also avoids ongoing maintenance for download-rustc and makes it much less likely that tests break by accident.\n\n- Change `tests/ui/track-diagnostics/track6.rs` to use a relative path instead of an absolute one. I am not actually sure why `track_caller` works here, but it does seem to work :shrug:\n\n- Pass `-Zsimulate-remapped-rust-src-base=/rustc/FAKE_PREFIX` to all suites, not just UI. In particular, mir-opt tests emit /rustc/ paths in their output.\n\nr? ```@cjgillot``` since you reviewed https://github.com/rust-lang/rust/pull/110699 - this is the test that it doesn't regress :)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef82bd4b5508f7b55ecae7f1b12613018fbf51ae", "html_url": "https://github.com/rust-lang/rust/commit/ef82bd4b5508f7b55ecae7f1b12613018fbf51ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef82bd4b5508f7b55ecae7f1b12613018fbf51ae/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd1c0d8585fa5de58fa0daa31d21aab63619a00c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd1c0d8585fa5de58fa0daa31d21aab63619a00c", "html_url": "https://github.com/rust-lang/rust/commit/fd1c0d8585fa5de58fa0daa31d21aab63619a00c"}, {"sha": "157d936c31e4f5ff51cc6f20c748e16537f33b9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/157d936c31e4f5ff51cc6f20c748e16537f33b9c", "html_url": "https://github.com/rust-lang/rust/commit/157d936c31e4f5ff51cc6f20c748e16537f33b9c"}], "stats": {"total": 54, "additions": 20, "deletions": 34}, "files": [{"sha": "a433e2371c9d4c4d6db56792357fe90fb2c375de", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef82bd4b5508f7b55ecae7f1b12613018fbf51ae/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef82bd4b5508f7b55ecae7f1b12613018fbf51ae/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=ef82bd4b5508f7b55ecae7f1b12613018fbf51ae", "patch": "@@ -84,6 +84,7 @@ impl SymbolGallery {\n \n /// Construct a diagnostic for a language feature error due to the given `span`.\n /// The `feature`'s `Symbol` is the one you used in `active.rs` and `rustc_span::symbols`.\n+#[track_caller]\n pub fn feature_err(\n     sess: &ParseSess,\n     feature: Symbol,"}, {"sha": "3290e6e0309c15b5b34cfe1a59e2f9ffe728daee", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef82bd4b5508f7b55ecae7f1b12613018fbf51ae/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef82bd4b5508f7b55ecae7f1b12613018fbf51ae/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=ef82bd4b5508f7b55ecae7f1b12613018fbf51ae", "patch": "@@ -1704,10 +1704,6 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n             cmd.arg(\"--git-hash\");\n         }\n \n-        if let Some(commit) = builder.config.download_rustc_commit() {\n-            cmd.env(\"FAKE_DOWNLOAD_RUSTC_PREFIX\", format!(\"/rustc/{commit}\"));\n-        }\n-\n         builder.ci_env.force_coloring_in_ci(&mut cmd);\n \n         #[cfg(feature = \"build-metrics\")]"}, {"sha": "923b2e63f2ee5f7c38fc315b917f89bb745d35d8", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 18, "deletions": 29, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ef82bd4b5508f7b55ecae7f1b12613018fbf51ae/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef82bd4b5508f7b55ecae7f1b12613018fbf51ae/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=ef82bd4b5508f7b55ecae7f1b12613018fbf51ae", "patch": "@@ -1939,6 +1939,17 @@ impl<'test> TestCx<'test> {\n         // Use a single thread for efficiency and a deterministic error message order\n         rustc.arg(\"-Zthreads=1\");\n \n+        // Hide libstd sources from ui tests to make sure we generate the stderr\n+        // output that users will see.\n+        // Without this, we may be producing good diagnostics in-tree but users\n+        // will not see half the information.\n+        //\n+        // This also has the benefit of more effectively normalizing output between different\n+        // compilers, so that we don't have to know the `/rustc/$sha` output to normalize after the\n+        // fact.\n+        rustc.arg(\"-Zsimulate-remapped-rust-src-base=/rustc/FAKE_PREFIX\");\n+        rustc.arg(\"-Ztranslate-remapped-path-to-local-path=no\");\n+\n         // Optionally prevent default --sysroot if specified in test compile-flags.\n         if !self.props.compile_flags.iter().any(|flag| flag.starts_with(\"--sysroot\")) {\n             // In stage 0, make sure we use `stage0-sysroot` instead of the bootstrap sysroot.\n@@ -2014,13 +2025,6 @@ impl<'test> TestCx<'test> {\n                 rustc.arg(\"-Ccodegen-units=1\");\n                 // Hide line numbers to reduce churn\n                 rustc.arg(\"-Zui-testing\");\n-                // Hide libstd sources from ui tests to make sure we generate the stderr\n-                // output that users will see.\n-                // Without this, we may be producing good diagnostics in-tree but users\n-                // will not see half the information.\n-                rustc.arg(\"-Zsimulate-remapped-rust-src-base=/rustc/FAKE_PREFIX\");\n-                rustc.arg(\"-Ztranslate-remapped-path-to-local-path=no\");\n-\n                 rustc.arg(\"-Zdeduplicate-diagnostics=no\");\n                 // FIXME: use this for other modes too, for perf?\n                 rustc.arg(\"-Cstrip=debuginfo\");\n@@ -3732,28 +3736,13 @@ impl<'test> TestCx<'test> {\n             normalize_path(&remapped_parent_dir, \"$DIR\");\n         }\n \n-        let source_bases = &[\n-            // Source base on the current filesystem (calculated as parent of `tests/$suite`):\n-            Some(self.config.src_base.parent().unwrap().parent().unwrap().into()),\n-            // Source base on the sysroot (from the src components downloaded by `download-rustc`):\n-            Some(self.config.sysroot_base.join(\"lib\").join(\"rustlib\").join(\"src\").join(\"rust\")),\n-            // Virtual `/rustc/$sha` remapped paths (if `remap-debuginfo` is enabled):\n-            option_env!(\"CFG_VIRTUAL_RUST_SOURCE_BASE_DIR\").map(PathBuf::from),\n-            // Virtual `/rustc/$sha` coming from download-rustc:\n-            std::env::var_os(\"FAKE_DOWNLOAD_RUSTC_PREFIX\").map(PathBuf::from),\n-            // Tests using -Zsimulate-remapped-rust-src-base should use this fake path\n-            Some(\"/rustc/FAKE_PREFIX\".into()),\n-        ];\n-        for base_dir in source_bases {\n-            if let Some(base_dir) = base_dir {\n-                // Paths into the libstd/libcore\n-                normalize_path(&base_dir.join(\"library\"), \"$SRC_DIR\");\n-                // `ui-fulldeps` tests can show paths to the compiler source when testing macros from\n-                // `rustc_macros`\n-                // eg. /home/user/rust/compiler\n-                normalize_path(&base_dir.join(\"compiler\"), \"$COMPILER_DIR\");\n-            }\n-        }\n+        let base_dir = Path::new(\"/rustc/FAKE_PREFIX\");\n+        // Paths into the libstd/libcore\n+        normalize_path(&base_dir.join(\"library\"), \"$SRC_DIR\");\n+        // `ui-fulldeps` tests can show paths to the compiler source when testing macros from\n+        // `rustc_macros`\n+        // eg. /home/user/rust/compiler\n+        normalize_path(&base_dir.join(\"compiler\"), \"$COMPILER_DIR\");\n \n         // Paths into the build directory\n         let test_build_dir = &self.config.build_base;"}, {"sha": "583b02555b4537bf55de079d5bedc3a225964202", "filename": "tests/ui/track-diagnostics/track6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef82bd4b5508f7b55ecae7f1b12613018fbf51ae/tests%2Fui%2Ftrack-diagnostics%2Ftrack6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef82bd4b5508f7b55ecae7f1b12613018fbf51ae/tests%2Fui%2Ftrack-diagnostics%2Ftrack6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrack-diagnostics%2Ftrack6.stderr?ref=ef82bd4b5508f7b55ecae7f1b12613018fbf51ae", "patch": "@@ -3,7 +3,7 @@ error[E0658]: specialization is unstable\n    |\n LL |     default fn bar() {}\n    |     ^^^^^^^^^^^^^^^^^^^\n--Ztrack-diagnostics: created at $COMPILER_DIR/rustc_session/src/parse.rs:LL:CC\n+-Ztrack-diagnostics: created at compiler/rustc_ast_passes/src/feature_gate.rs:LL:CC\n    |\n    = note: see issue #31844 <https://github.com/rust-lang/rust/issues/31844> for more information\n    = help: add `#![feature(specialization)]` to the crate attributes to enable"}]}