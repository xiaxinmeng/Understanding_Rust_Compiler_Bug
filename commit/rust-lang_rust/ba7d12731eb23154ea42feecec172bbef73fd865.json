{"sha": "ba7d12731eb23154ea42feecec172bbef73fd865", "node_id": "C_kwDOAAsO6NoAKGJhN2QxMjczMWViMjMxNTRlYTQyZmVlY2VjMTcyYmJlZjczZmQ4NjU", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2021-11-05T22:10:33Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-01-18T22:25:25Z"}, "message": "More tracing and tests", "tree": {"sha": "bca38a527b71540d2dde667d34b828d292f2030a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bca38a527b71540d2dde667d34b828d292f2030a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba7d12731eb23154ea42feecec172bbef73fd865", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba7d12731eb23154ea42feecec172bbef73fd865", "html_url": "https://github.com/rust-lang/rust/commit/ba7d12731eb23154ea42feecec172bbef73fd865", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba7d12731eb23154ea42feecec172bbef73fd865/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "457415294c57dff4b07cc06165eb284d9a14a24a", "url": "https://api.github.com/repos/rust-lang/rust/commits/457415294c57dff4b07cc06165eb284d9a14a24a", "html_url": "https://github.com/rust-lang/rust/commit/457415294c57dff4b07cc06165eb284d9a14a24a"}], "stats": {"total": 46, "additions": 32, "deletions": 14}, "files": [{"sha": "3097729301840fbf7608345c6e19fab6e43c57a4", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ba7d12731eb23154ea42feecec172bbef73fd865/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7d12731eb23154ea42feecec172bbef73fd865/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=ba7d12731eb23154ea42feecec172bbef73fd865", "patch": "@@ -773,7 +773,7 @@ impl DropRangeVisitor<'tcx> {\n             debug!(\"reinitializing {:?} at {}\", hir_id, location);\n             self.drop_range(hir_id).reinit(location)\n         } else {\n-            warn!(\"reinitializing {:?} is not supported\", expr);\n+            debug!(\"reinitializing {:?} is not supported\", expr);\n         }\n     }\n }\n@@ -899,6 +899,7 @@ impl<'tcx> Visitor<'tcx> for DropRangeVisitor<'tcx> {\n                 reinit = Some(lhs);\n             }\n             ExprKind::Loop(body, ..) => {\n+                // FIXME: we probably need to iterate this to a fixpoint.\n                 let body_drop_ranges = self.fork_drop_ranges();\n                 let old_drop_ranges = self.swap_drop_ranges(body_drop_ranges);\n \n@@ -1026,8 +1027,8 @@ impl DropRange {\n     }\n \n     fn is_dropped_at(&self, id: usize) -> bool {\n-        match self.events.iter().try_fold(false, |is_dropped, event| {\n-            if event.location() < id {\n+        let dropped = match self.events.iter().try_fold(false, |is_dropped, event| {\n+            if event.location() <= id {\n                 Ok(match event {\n                     Event::Drop(_) => true,\n                     Event::Reinit(_) => false,\n@@ -1037,7 +1038,9 @@ impl DropRange {\n             }\n         }) {\n             Ok(is_dropped) | Err(is_dropped) => is_dropped,\n-        }\n+        };\n+        trace!(\"is_dropped_at({}): events = {:?}, dropped = {}\", id, self.events, dropped);\n+        dropped\n     }\n \n     fn drop(&mut self, location: usize) {\n@@ -1052,13 +1055,14 @@ impl DropRange {\n     ///\n     /// After merging, the value will be dead at the end of the range only if it was dead\n     /// at the end of both self and other.\n+    #[tracing::instrument]\n     fn merge_with(&mut self, other: &DropRange, join_point: usize) {\n         let join_event = if self.is_dropped_at(join_point) && other.is_dropped_at(join_point) {\n             Event::Drop(join_point)\n         } else {\n             Event::Reinit(join_point)\n         };\n-        let mut events: Vec<_> = self\n+        let events: Vec<_> = self\n             .events\n             .iter()\n             .merge([join_event].iter())\n@@ -1067,11 +1071,7 @@ impl DropRange {\n             .cloned()\n             .collect();\n \n-        events.push(if self.is_dropped_at(join_point) && other.is_dropped_at(join_point) {\n-            Event::Drop(join_point)\n-        } else {\n-            Event::Reinit(join_point)\n-        });\n+        trace!(\"events after merging: {:?}\", events);\n \n         self.events = events;\n     }\n@@ -1080,13 +1080,15 @@ impl DropRange {\n     ///\n     /// Used to model branching control flow.\n     fn fork_at(&self, split_point: usize) -> Self {\n-        Self {\n+        let result = Self {\n             events: vec![if self.is_dropped_at(split_point) {\n                 Event::Drop(split_point)\n             } else {\n                 Event::Reinit(split_point)\n             }],\n-        }\n+        };\n+        trace!(\"forking at {}: {:?}; result = {:?}\", split_point, self.events, result);\n+        result\n     }\n \n     fn trimmed(&self, trim_from: usize) -> Self {\n@@ -1096,12 +1098,14 @@ impl DropRange {\n             Event::Reinit(trim_from)\n         };\n \n-        Self {\n+        let result = Self {\n             events: [start]\n                 .iter()\n                 .chain(self.events.iter().skip_while(|event| event.location() <= trim_from))\n                 .cloned()\n                 .collect(),\n-        }\n+        };\n+        trace!(\"trimmed {:?} at {}, got {:?}\", self, trim_from, result);\n+        result\n     }\n }"}, {"sha": "8f973bb94895a3e86649318bd1c4538cf9c0186f", "filename": "compiler/rustc_typeck/src/check/generator_interior/tests.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ba7d12731eb23154ea42feecec172bbef73fd865/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba7d12731eb23154ea42feecec172bbef73fd865/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Ftests.rs?ref=ba7d12731eb23154ea42feecec172bbef73fd865", "patch": "@@ -0,0 +1,14 @@\n+use super::DropRange;\n+\n+#[test]\n+fn drop_range_uses_last_event() {\n+    let mut range = DropRange::empty();\n+    range.drop(10);\n+    range.reinit(10);\n+    assert!(!range.is_dropped_at(10));\n+\n+    let mut range = DropRange::empty();\n+    range.reinit(10);\n+    range.drop(10);\n+    assert!(range.is_dropped_at(10));\n+}"}]}