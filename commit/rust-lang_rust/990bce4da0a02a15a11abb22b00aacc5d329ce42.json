{"sha": "990bce4da0a02a15a11abb22b00aacc5d329ce42", "node_id": "C_kwDOAAsO6NoAKDk5MGJjZTRkYTBhMDJhMTVhMTFhYmIyMmIwMGFhY2M1ZDMyOWNlNDI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-31T12:06:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-31T12:06:44Z"}, "message": "Rollup merge of #99974 - TaKO8Ki:suggest-removing-semicolon-and-boxing-the-expressions, r=compiler-errors\n\nSuggest removing a semicolon and boxing the expressions for if-else\n\n`InferCtxt::suggest_remove_semi_or_return_binding` was not working well, so I fixed it and added a ui test.", "tree": {"sha": "de2f60a8feb60d9b1a34b944b6fb872c6cead674", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de2f60a8feb60d9b1a34b944b6fb872c6cead674"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/990bce4da0a02a15a11abb22b00aacc5d329ce42", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi5nBUCRBK7hj4Ov3rIwAA4WYIAEEyqPxS+9AdTJp5JucCFg+w\nsDE0ENQUjduZl90AVxEo9lwysCE7jYwU+CKuIezxyELEKrmkwQkioXzXe9bIZLEu\nu8/sv9HokPVLAs/gaGgK1uOxU4W27vxv7PzsbcIKjBCp82SQVCr/vt14sx07LX/R\nasncdaDXpTWVbMmDTTa5HznO4das9kFjNtYXKTMDgjSIsbuMopt/wuXoObRT/gXd\nKcdStd+eyMEmNrWi/Xs3RXaH1pKM3AjxJ17PTR/9GGCcW9MWDR15cK+9z+1tS0eu\n//EhL4yMrvivoAhCx/SmMGflenSfS5zg23EKn4idrBVVxmGhmtn1ZbU8UFCmHF8=\n=688E\n-----END PGP SIGNATURE-----\n", "payload": "tree de2f60a8feb60d9b1a34b944b6fb872c6cead674\nparent 8b2637fd3ba839a614d578da9cad3c5897ca5aff\nparent f6908be329d2be65b4de0f36393b98757c13ecad\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1659269204 +0530\ncommitter GitHub <noreply@github.com> 1659269204 +0530\n\nRollup merge of #99974 - TaKO8Ki:suggest-removing-semicolon-and-boxing-the-expressions, r=compiler-errors\n\nSuggest removing a semicolon and boxing the expressions for if-else\n\n`InferCtxt::suggest_remove_semi_or_return_binding` was not working well, so I fixed it and added a ui test.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/990bce4da0a02a15a11abb22b00aacc5d329ce42", "html_url": "https://github.com/rust-lang/rust/commit/990bce4da0a02a15a11abb22b00aacc5d329ce42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/990bce4da0a02a15a11abb22b00aacc5d329ce42/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b2637fd3ba839a614d578da9cad3c5897ca5aff", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b2637fd3ba839a614d578da9cad3c5897ca5aff", "html_url": "https://github.com/rust-lang/rust/commit/8b2637fd3ba839a614d578da9cad3c5897ca5aff"}, {"sha": "f6908be329d2be65b4de0f36393b98757c13ecad", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6908be329d2be65b4de0f36393b98757c13ecad", "html_url": "https://github.com/rust-lang/rust/commit/f6908be329d2be65b4de0f36393b98757c13ecad"}], "stats": {"total": 216, "additions": 210, "deletions": 6}, "files": [{"sha": "20864c657ffd7b2425bebbe43f7e3cfe109dc413", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/990bce4da0a02a15a11abb22b00aacc5d329ce42/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/990bce4da0a02a15a11abb22b00aacc5d329ce42/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=990bce4da0a02a15a11abb22b00aacc5d329ce42", "patch": "@@ -712,7 +712,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 opt_suggest_box_span,\n             }) => {\n                 let then_span = self.find_block_span_from_hir_id(then_id);\n-                let else_span = self.find_block_span_from_hir_id(then_id);\n+                let else_span = self.find_block_span_from_hir_id(else_id);\n                 err.span_label(then_span, \"expected because of this\");\n                 if let Some(sp) = outer_span {\n                     err.span_label(sp, \"`if` and `else` have incompatible types\");\n@@ -760,11 +760,15 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         second_ty: Ty<'tcx>,\n         second_span: Span,\n     ) {\n-        let remove_semicolon =\n-            [(first_id, second_ty), (second_id, first_ty)].into_iter().find_map(|(id, ty)| {\n-                let hir::Node::Block(blk) = self.tcx.hir().get(id?) else { return None };\n-                self.could_remove_semicolon(blk, ty)\n-            });\n+        let remove_semicolon = [\n+            (first_id, self.resolve_vars_if_possible(second_ty)),\n+            (second_id, self.resolve_vars_if_possible(first_ty)),\n+        ]\n+        .into_iter()\n+        .find_map(|(id, ty)| {\n+            let hir::Node::Block(blk) = self.tcx.hir().get(id?) else { return None };\n+            self.could_remove_semicolon(blk, ty)\n+        });\n         match remove_semicolon {\n             Some((sp, StatementAsExpression::NeedsBoxing)) => {\n                 err.multipart_suggestion("}, {"sha": "b487f013d27068fc61adcb703dfcaf6c9efb766d", "filename": "src/test/ui/suggestions/if-then-neeing-semi.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/990bce4da0a02a15a11abb22b00aacc5d329ce42/src%2Ftest%2Fui%2Fsuggestions%2Fif-then-neeing-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/990bce4da0a02a15a11abb22b00aacc5d329ce42/src%2Ftest%2Fui%2Fsuggestions%2Fif-then-neeing-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fif-then-neeing-semi.rs?ref=990bce4da0a02a15a11abb22b00aacc5d329ce42", "patch": "@@ -0,0 +1,70 @@\n+// edition:2018\n+\n+fn dummy() -> i32 {\n+    42\n+}\n+\n+fn extra_semicolon() {\n+    let _ = if true {\n+        //~^ NOTE `if` and `else` have incompatible types\n+        dummy(); //~ NOTE expected because of this\n+        //~^ HELP consider removing this semicolon\n+    } else {\n+        dummy() //~ ERROR `if` and `else` have incompatible types\n+        //~^ NOTE expected `()`, found `i32`\n+    };\n+}\n+\n+async fn async_dummy() {} //~ NOTE checked the `Output` of this `async fn`, found opaque type\n+//~| NOTE while checking the return type of the `async fn`\n+//~| NOTE in this expansion of desugaring of `async` block or function\n+//~| NOTE checked the `Output` of this `async fn`, expected opaque type\n+//~| NOTE while checking the return type of the `async fn`\n+//~| NOTE in this expansion of desugaring of `async` block or function\n+async fn async_dummy2() {} //~ NOTE checked the `Output` of this `async fn`, found opaque type\n+//~| NOTE checked the `Output` of this `async fn`, found opaque type\n+//~| NOTE while checking the return type of the `async fn`\n+//~| NOTE in this expansion of desugaring of `async` block or function\n+//~| NOTE while checking the return type of the `async fn`\n+//~| NOTE in this expansion of desugaring of `async` block or function\n+\n+async fn async_extra_semicolon_same() {\n+    let _ = if true {\n+        //~^ NOTE `if` and `else` have incompatible types\n+        async_dummy(); //~ NOTE expected because of this\n+        //~^ HELP consider removing this semicolon\n+    } else {\n+        async_dummy() //~ ERROR `if` and `else` have incompatible types\n+        //~^ NOTE expected `()`, found opaque type\n+        //~| NOTE expected unit type `()`\n+        //~| HELP consider `await`ing on the `Future`\n+    };\n+}\n+\n+async fn async_extra_semicolon_different() {\n+    let _ = if true {\n+        //~^ NOTE `if` and `else` have incompatible types\n+        async_dummy(); //~ NOTE expected because of this\n+        //~^ HELP consider removing this semicolon\n+    } else {\n+        async_dummy2() //~ ERROR `if` and `else` have incompatible types\n+        //~^ NOTE expected `()`, found opaque type\n+        //~| NOTE expected unit type `()`\n+        //~| HELP consider `await`ing on the `Future`\n+    };\n+}\n+\n+async fn async_different_futures() {\n+    let _ = if true {\n+        //~^ NOTE `if` and `else` have incompatible types\n+        async_dummy() //~ NOTE expected because of this\n+        //~| HELP consider `await`ing on both `Future`s\n+    } else {\n+        async_dummy2() //~ ERROR `if` and `else` have incompatible types\n+        //~^ NOTE expected opaque type, found a different opaque type\n+        //~| NOTE expected opaque type `impl Future<Output = ()>`\n+        //~| NOTE distinct uses of `impl Trait` result in different opaque types\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "d7c5818abbd54b76fc7465051dc6917499f59723", "filename": "src/test/ui/suggestions/if-then-neeing-semi.stderr", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/990bce4da0a02a15a11abb22b00aacc5d329ce42/src%2Ftest%2Fui%2Fsuggestions%2Fif-then-neeing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/990bce4da0a02a15a11abb22b00aacc5d329ce42/src%2Ftest%2Fui%2Fsuggestions%2Fif-then-neeing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fif-then-neeing-semi.stderr?ref=990bce4da0a02a15a11abb22b00aacc5d329ce42", "patch": "@@ -0,0 +1,130 @@\n+error[E0308]: `if` and `else` have incompatible types\n+  --> $DIR/if-then-neeing-semi.rs:37:9\n+   |\n+LL |       let _ = if true {\n+   |  _____________-\n+LL | |\n+LL | |         async_dummy();\n+   | |         -------------- expected because of this\n+LL | |\n+LL | |     } else {\n+LL | |         async_dummy()\n+   | |         ^^^^^^^^^^^^^ expected `()`, found opaque type\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____- `if` and `else` have incompatible types\n+   |\n+note: while checking the return type of the `async fn`\n+  --> $DIR/if-then-neeing-semi.rs:18:24\n+   |\n+LL | async fn async_dummy() {}\n+   |                        ^ checked the `Output` of this `async fn`, found opaque type\n+   = note: expected unit type `()`\n+            found opaque type `impl Future<Output = ()>`\n+help: consider `await`ing on the `Future`\n+   |\n+LL |         async_dummy().await\n+   |                      ++++++\n+help: consider removing this semicolon\n+   |\n+LL -         async_dummy();\n+LL +         async_dummy()\n+   |\n+\n+error[E0308]: `if` and `else` have incompatible types\n+  --> $DIR/if-then-neeing-semi.rs:50:9\n+   |\n+LL |       let _ = if true {\n+   |  _____________-\n+LL | |\n+LL | |         async_dummy();\n+   | |         -------------- expected because of this\n+LL | |\n+LL | |     } else {\n+LL | |         async_dummy2()\n+   | |         ^^^^^^^^^^^^^^ expected `()`, found opaque type\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____- `if` and `else` have incompatible types\n+   |\n+note: while checking the return type of the `async fn`\n+  --> $DIR/if-then-neeing-semi.rs:24:25\n+   |\n+LL | async fn async_dummy2() {}\n+   |                         ^ checked the `Output` of this `async fn`, found opaque type\n+   = note: expected unit type `()`\n+            found opaque type `impl Future<Output = ()>`\n+help: consider `await`ing on the `Future`\n+   |\n+LL |         async_dummy2().await\n+   |                       ++++++\n+help: consider removing this semicolon and boxing the expressions\n+   |\n+LL ~         Box::new(async_dummy())\n+LL |\n+LL |     } else {\n+LL ~         Box::new(async_dummy2())\n+   |\n+\n+error[E0308]: `if` and `else` have incompatible types\n+  --> $DIR/if-then-neeing-semi.rs:63:9\n+   |\n+LL |       let _ = if true {\n+   |  _____________-\n+LL | |\n+LL | |         async_dummy()\n+   | |         ------------- expected because of this\n+LL | |\n+LL | |     } else {\n+LL | |         async_dummy2()\n+   | |         ^^^^^^^^^^^^^^ expected opaque type, found a different opaque type\n+...  |\n+LL | |\n+LL | |     };\n+   | |_____- `if` and `else` have incompatible types\n+   |\n+note: while checking the return type of the `async fn`\n+  --> $DIR/if-then-neeing-semi.rs:18:24\n+   |\n+LL | async fn async_dummy() {}\n+   |                        ^ checked the `Output` of this `async fn`, expected opaque type\n+note: while checking the return type of the `async fn`\n+  --> $DIR/if-then-neeing-semi.rs:24:25\n+   |\n+LL | async fn async_dummy2() {}\n+   |                         ^ checked the `Output` of this `async fn`, found opaque type\n+   = note: expected opaque type `impl Future<Output = ()>` (opaque type at <$DIR/if-then-neeing-semi.rs:18:24>)\n+              found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/if-then-neeing-semi.rs:24:25>)\n+   = note: distinct uses of `impl Trait` result in different opaque types\n+help: consider `await`ing on both `Future`s\n+   |\n+LL ~         async_dummy().await\n+LL |\n+LL |     } else {\n+LL ~         async_dummy2().await\n+   |\n+\n+error[E0308]: `if` and `else` have incompatible types\n+  --> $DIR/if-then-neeing-semi.rs:13:9\n+   |\n+LL |       let _ = if true {\n+   |  _____________-\n+LL | |\n+LL | |         dummy();\n+   | |         --------\n+   | |         |      |\n+   | |         |      help: consider removing this semicolon\n+   | |         expected because of this\n+LL | |\n+LL | |     } else {\n+LL | |         dummy()\n+   | |         ^^^^^^^ expected `()`, found `i32`\n+LL | |\n+LL | |     };\n+   | |_____- `if` and `else` have incompatible types\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}