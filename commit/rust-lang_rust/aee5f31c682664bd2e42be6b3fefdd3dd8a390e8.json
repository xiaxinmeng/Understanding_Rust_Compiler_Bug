{"sha": "aee5f31c682664bd2e42be6b3fefdd3dd8a390e8", "node_id": "C_kwDOAAsO6NoAKGFlZTVmMzFjNjgyNjY0YmQyZTQyYmU2YjNmZWZkZDNkZDhhMzkwZTg", "commit": {"author": {"name": "Jack Wrenn", "email": "jack@wrenn.fyi", "date": "2022-07-21T21:57:51Z"}, "committer": {"name": "Jack Wrenn", "email": "jack@wrenn.fyi", "date": "2022-07-27T17:33:57Z"}, "message": "safe transmute: lowercase tracing levels\n\nref: https://github.com/rust-lang/rust/pull/92268#discussion_r927095154", "tree": {"sha": "363251eb96eb070d7645877356046841a5a4d51d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/363251eb96eb070d7645877356046841a5a4d51d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aee5f31c682664bd2e42be6b3fefdd3dd8a390e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aee5f31c682664bd2e42be6b3fefdd3dd8a390e8", "html_url": "https://github.com/rust-lang/rust/commit/aee5f31c682664bd2e42be6b3fefdd3dd8a390e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aee5f31c682664bd2e42be6b3fefdd3dd8a390e8/comments", "author": {"login": "jswrenn", "id": 3820879, "node_id": "MDQ6VXNlcjM4MjA4Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3820879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jswrenn", "html_url": "https://github.com/jswrenn", "followers_url": "https://api.github.com/users/jswrenn/followers", "following_url": "https://api.github.com/users/jswrenn/following{/other_user}", "gists_url": "https://api.github.com/users/jswrenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jswrenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jswrenn/subscriptions", "organizations_url": "https://api.github.com/users/jswrenn/orgs", "repos_url": "https://api.github.com/users/jswrenn/repos", "events_url": "https://api.github.com/users/jswrenn/events{/privacy}", "received_events_url": "https://api.github.com/users/jswrenn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jswrenn", "id": 3820879, "node_id": "MDQ6VXNlcjM4MjA4Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3820879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jswrenn", "html_url": "https://github.com/jswrenn", "followers_url": "https://api.github.com/users/jswrenn/followers", "following_url": "https://api.github.com/users/jswrenn/following{/other_user}", "gists_url": "https://api.github.com/users/jswrenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jswrenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jswrenn/subscriptions", "organizations_url": "https://api.github.com/users/jswrenn/orgs", "repos_url": "https://api.github.com/users/jswrenn/repos", "events_url": "https://api.github.com/users/jswrenn/events{/privacy}", "received_events_url": "https://api.github.com/users/jswrenn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "226860304603f63440e9d097cd09dce45160bfbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/226860304603f63440e9d097cd09dce45160bfbb", "html_url": "https://github.com/rust-lang/rust/commit/226860304603f63440e9d097cd09dce45160bfbb"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "09a60cf6a626a65933bcffc529bc9a012c426342", "filename": "compiler/rustc_transmute/src/layout/dfa.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee5f31c682664bd2e42be6b3fefdd3dd8a390e8/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fdfa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee5f31c682664bd2e42be6b3fefdd3dd8a390e8/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fdfa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fdfa.rs?ref=aee5f31c682664bd2e42be6b3fefdd3dd8a390e8", "patch": "@@ -103,7 +103,7 @@ where\n         Self { transitions, start, accepting }\n     }\n \n-    #[instrument(level = \"DEBUG\")]\n+    #[instrument(level = \"debug\")]\n     #[cfg_attr(feature = \"rustc\", allow(rustc::potential_query_instability))]\n     pub(crate) fn from_nfa(nfa: Nfa<R>) -> Self {\n         let Nfa { transitions: nfa_transitions, start: nfa_start, accepting: nfa_accepting } = nfa;"}, {"sha": "076d922d1b72b4157a47dd296dc15a3007252d8b", "filename": "compiler/rustc_transmute/src/maybe_transmutable/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aee5f31c682664bd2e42be6b3fefdd3dd8a390e8/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee5f31c682664bd2e42be6b3fefdd3dd8a390e8/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fmod.rs?ref=aee5f31c682664bd2e42be6b3fefdd3dd8a390e8", "patch": "@@ -64,7 +64,7 @@ mod rustc {\n     impl<'tcx> MaybeTransmutableQuery<Ty<'tcx>, TyCtxt<'tcx>> {\n         /// This method begins by converting `src` and `dst` from `Ty`s to `Tree`s,\n         /// then computes an answer using those trees.\n-        #[instrument(level = \"DEBUG\", skip(self), fields(src = ?self.src, dst = ?self.dst))]\n+        #[instrument(level = \"debug\", skip(self), fields(src = ?self.src, dst = ?self.dst))]\n         pub fn answer(self) -> Answer<<TyCtxt<'tcx> as QueryContext>::Ref> {\n             let query_or_answer = self.map_layouts(|src, dst, scope, &context| {\n                 // Convert `src` and `dst` from their rustc representations, to `Tree`-based\n@@ -103,7 +103,7 @@ where\n     /// This method begins by de-def'ing `src` and `dst`, and prunes private paths from `dst`,\n     /// then converts `src` and `dst` to `Nfa`s, and computes an answer using those NFAs.\n     #[inline(always)]\n-    #[instrument(level = \"DEBUG\", skip(self), fields(src = ?self.src, dst = ?self.dst))]\n+    #[instrument(level = \"debug\", skip(self), fields(src = ?self.src, dst = ?self.dst))]\n     pub(crate) fn answer(self) -> Answer<<C as QueryContext>::Ref> {\n         let assume_visibility = self.assume.visibility;\n         let query_or_answer = self.map_layouts(|src, dst, scope, context| {\n@@ -152,7 +152,7 @@ where\n     ///\n     /// This method converts `src` and `dst` to DFAs, then computes an answer using those DFAs.\n     #[inline(always)]\n-    #[instrument(level = \"DEBUG\", skip(self), fields(src = ?self.src, dst = ?self.dst))]\n+    #[instrument(level = \"debug\", skip(self), fields(src = ?self.src, dst = ?self.dst))]\n     pub(crate) fn answer(self) -> Answer<<C as QueryContext>::Ref> {\n         let query_or_answer = self\n             .map_layouts(|src, dst, scope, context| Ok((Dfa::from_nfa(src), Dfa::from_nfa(dst))));\n@@ -192,7 +192,7 @@ where\n     }\n \n     #[inline(always)]\n-    #[instrument(level = \"DEBUG\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn answer_memo(\n         &self,\n         cache: &mut Map<(dfa::State, dfa::State), Answer<<C as QueryContext>::Ref>>,"}, {"sha": "9c2cf4c9a92384821dc5c356372d351982213b83", "filename": "compiler/rustc_transmute/src/maybe_transmutable/query_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aee5f31c682664bd2e42be6b3fefdd3dd8a390e8/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fquery_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aee5f31c682664bd2e42be6b3fefdd3dd8a390e8/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fquery_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fquery_context.rs?ref=aee5f31c682664bd2e42be6b3fefdd3dd8a390e8", "patch": "@@ -52,7 +52,7 @@ mod rustc {\n \n         type Scope = Ty<'tcx>;\n \n-        #[instrument(level = \"DEBUG\", skip(self))]\n+        #[instrument(level = \"debug\", skip(self))]\n         fn is_accessible_from(&self, def: Self::Def, scope: Self::Scope) -> bool {\n             use layout::rustc::Def;\n             use rustc_middle::ty;"}]}