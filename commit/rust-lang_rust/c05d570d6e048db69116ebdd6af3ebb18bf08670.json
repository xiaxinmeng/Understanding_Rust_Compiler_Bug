{"sha": "c05d570d6e048db69116ebdd6af3ebb18bf08670", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNWQ1NzBkNmUwNDhkYjY5MTE2ZWJkZDZhZjNlYmIxOGJmMDg2NzA=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-05-09T12:05:51Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-05-09T12:05:51Z"}, "message": "Update the rustc_tests crate", "tree": {"sha": "f852e06bb04f13a66a926d62381e4106b95f2818", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f852e06bb04f13a66a926d62381e4106b95f2818"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c05d570d6e048db69116ebdd6af3ebb18bf08670", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCgBKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAlry5B8sHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MATn\nPg//XzAzXC18j4WLW27OxZgczQN2gUqNUBdPHpnA7hfOGXWTXFAll8q4MGWuBwBr\nXjEY7thhdCE+Pu/XEWtdr7MOqqh/NbOYAoHLz8vtwcGmXVIKikIVB91+it/X2w8I\nGDgSt0DEeokxLjT4AKZdjIgR7/ioB94Fm7VbqVseKHpIWSzwM4j1bk442sz0ByJr\nXsNwdfzz7omGHfNLnGroy4LMmLbeNeFDTpDMkWi6/s/bblvx1ioLZjerDxsJFc2i\n63Hrb87tSAmkSfgvpjDB2oFkWStGwDUWgj2AOK82ujNpTiitsMlSTVYqQzZJ2p2t\n5dX9w8yutAR+l/0QkDp+dH2CvZlg/i1iLPstKTTQC+XeEhPdSX12xo8p+mo4Mzwu\nHMH8J+23VGzaeH5chhPuvYly9+FaIseCK0d8HABnKeanf0eevmOr1WJg5HcuvFk8\nQzyMOZVeSEd09J1qRdSJkNLycDde8tgWYJgxVVGThDEXZTVnrjzH11WBBO8RAh21\nGXzRCR4ZNYpVAny3cNHxlZdo6qaHVpYf2y0mWJUsXC2wbrUiMuxHp3zhKsoMXvnb\neVMrRLrDWBTxRWC0uqSJIRl1mpIntrI8YyvncTNaRF0EsHrW9TAlvScIDeY4C46T\ntvB/jzKX0C7m7qu2dJhwb7mv5a0Btb+qjWJlAwpZ9AVqYHo=\n=YK3X\n-----END PGP SIGNATURE-----", "payload": "tree f852e06bb04f13a66a926d62381e4106b95f2818\nparent a4fdcd29b5c4cd5f733e7f920c4e33f21c6fd15a\nauthor Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1525867551 +0200\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1525867551 +0200\n\nUpdate the rustc_tests crate\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c05d570d6e048db69116ebdd6af3ebb18bf08670", "html_url": "https://github.com/rust-lang/rust/commit/c05d570d6e048db69116ebdd6af3ebb18bf08670", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c05d570d6e048db69116ebdd6af3ebb18bf08670/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4fdcd29b5c4cd5f733e7f920c4e33f21c6fd15a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4fdcd29b5c4cd5f733e7f920c4e33f21c6fd15a", "html_url": "https://github.com/rust-lang/rust/commit/a4fdcd29b5c4cd5f733e7f920c4e33f21c6fd15a"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "77e4a3df406b74f5bc7a83fd917bd4c630f0d2c9", "filename": "rustc_tests/src/main.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c05d570d6e048db69116ebdd6af3ebb18bf08670/rustc_tests%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c05d570d6e048db69116ebdd6af3ebb18bf08670/rustc_tests%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustc_tests%2Fsrc%2Fmain.rs?ref=c05d570d6e048db69116ebdd6af3ebb18bf08670", "patch": "@@ -1,9 +1,10 @@\n-#![feature(rustc_private, i128_type)]\n+#![feature(rustc_private)]\n extern crate miri;\n extern crate getopts;\n extern crate rustc;\n extern crate rustc_driver;\n extern crate rustc_errors;\n+extern crate rustc_trans_utils;\n extern crate syntax;\n \n use std::path::{PathBuf, Path};\n@@ -18,6 +19,7 @@ use rustc_driver::{Compilation, CompilerCalls, RustcDefaultCalls};\n use rustc_driver::driver::{CompileState, CompileController};\n use rustc::session::config::{self, Input, ErrorOutputType};\n use rustc::hir::{self, itemlikevisit};\n+use rustc_trans_utils::trans_crate::TransCrate;\n use rustc::ty::TyCtxt;\n use syntax::ast;\n \n@@ -51,14 +53,15 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n     }\n     fn late_callback(\n         &mut self,\n+        trans: &TransCrate,\n         matches: &getopts::Matches,\n         sess: &Session,\n         cstore: &CrateStore,\n         input: &Input,\n         odir: &Option<PathBuf>,\n-        ofile: &Option<PathBuf>\n+        ofile: &Option<PathBuf>,\n     ) -> Compilation {\n-        self.default.late_callback(matches, sess, cstore, input, odir, ofile)\n+        self.default.late_callback(trans, matches, sess, cstore, input, odir, ofile)\n     }\n     fn build_controller(&mut self, sess: &Session, matches: &getopts::Matches) -> CompileController<'a> {\n         let mut control = self.default.build_controller(sess, matches);\n@@ -81,30 +84,29 @@ fn after_analysis<'a, 'tcx>(state: &mut CompileState<'a, 'tcx>) {\n     state.session.abort_if_errors();\n \n     let tcx = state.tcx.unwrap();\n-    let limits = Default::default();\n \n     if std::env::args().any(|arg| arg == \"--test\") {\n-        struct Visitor<'a, 'tcx: 'a>(miri::ResourceLimits, TyCtxt<'a, 'tcx, 'tcx>, &'a CompileState<'a, 'tcx>);\n+        struct Visitor<'a, 'tcx: 'a>(TyCtxt<'a, 'tcx, 'tcx>, &'a CompileState<'a, 'tcx>);\n         impl<'a, 'tcx: 'a, 'hir> itemlikevisit::ItemLikeVisitor<'hir> for Visitor<'a, 'tcx> {\n             fn visit_item(&mut self, i: &'hir hir::Item) {\n                 if let hir::Item_::ItemFn(_, _, _, _, _, body_id) = i.node {\n-                    if i.attrs.iter().any(|attr| attr.name().map_or(false, |n| n == \"test\")) {\n-                        let did = self.1.hir.body_owner_def_id(body_id);\n-                        println!(\"running test: {}\", self.1.def_path_debug_str(did));\n-                        miri::eval_main(self.1, did, None, self.0);\n-                        self.2.session.abort_if_errors();\n+                    if i.attrs.iter().any(|attr| attr.name() == \"test\") {\n+                        let did = self.0.hir.body_owner_def_id(body_id);\n+                        println!(\"running test: {}\", self.0.def_path_debug_str(did));\n+                        miri::eval_main(self.0, did, None);\n+                        self.1.session.abort_if_errors();\n                     }\n                 }\n             }\n             fn visit_trait_item(&mut self, _trait_item: &'hir hir::TraitItem) {}\n             fn visit_impl_item(&mut self, _impl_item: &'hir hir::ImplItem) {}\n         }\n-        state.hir_crate.unwrap().visit_all_item_likes(&mut Visitor(limits, tcx, state));\n-    } else if let Some((entry_node_id, _)) = *state.session.entry_fn.borrow() {\n+        state.hir_crate.unwrap().visit_all_item_likes(&mut Visitor(tcx, state));\n+    } else if let Some((entry_node_id, _, _)) = *state.session.entry_fn.borrow() {\n         let entry_def_id = tcx.hir.local_def_id(entry_node_id);\n         let start_wrapper = tcx.lang_items().start_fn().and_then(|start_fn|\n                                 if tcx.is_mir_available(start_fn) { Some(start_fn) } else { None });\n-        miri::eval_main(tcx, entry_def_id, start_wrapper, limits);\n+        miri::eval_main(tcx, entry_def_id, start_wrapper);\n \n         state.session.abort_if_errors();\n     } else {"}]}