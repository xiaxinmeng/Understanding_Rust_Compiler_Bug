{"sha": "584ede5f3034af8b1b64518385e201de4942637c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NGVkZTVmMzAzNGFmOGIxYjY0NTE4Mzg1ZTIwMWRlNDk0MjYzN2M=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-29T23:15:15Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-29T23:15:15Z"}, "message": "rustc_typeck: gate AnonConst's generics on feature(const_generics).", "tree": {"sha": "6c61bd8b940beefaa7ea04f217f81f14d7d32ecb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c61bd8b940beefaa7ea04f217f81f14d7d32ecb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/584ede5f3034af8b1b64518385e201de4942637c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/584ede5f3034af8b1b64518385e201de4942637c", "html_url": "https://github.com/rust-lang/rust/commit/584ede5f3034af8b1b64518385e201de4942637c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/584ede5f3034af8b1b64518385e201de4942637c/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de30d319761c6fed04c87a41e62828d0b275e01e", "url": "https://api.github.com/repos/rust-lang/rust/commits/de30d319761c6fed04c87a41e62828d0b275e01e", "html_url": "https://github.com/rust-lang/rust/commit/de30d319761c6fed04c87a41e62828d0b275e01e"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "301b0ff350302e4939b19c93787e304f8729a3d3", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/584ede5f3034af8b1b64518385e201de4942637c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/584ede5f3034af8b1b64518385e201de4942637c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=584ede5f3034af8b1b64518385e201de4942637c", "patch": "@@ -909,14 +909,12 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n             let parent_id = tcx.hir().get_parent_item(hir_id);\n             Some(tcx.hir().local_def_id(parent_id))\n         }\n-        // FIXME(#43408) enable this in all cases when we get lazy normalization.\n-        Node::AnonConst(&anon_const) => {\n-            // HACK(eddyb) this provides the correct generics when the workaround\n-            // for a const parameter `AnonConst` is being used elsewhere, as then\n-            // there won't be the kind of cyclic dependency blocking #43408.\n-            let expr = &tcx.hir().body(anon_const.body).value;\n-            let icx = ItemCtxt::new(tcx, def_id);\n-            if AstConv::const_param_def_id(&icx, expr).is_some() {\n+        // FIXME(#43408) enable this always when we get lazy normalization.\n+        Node::AnonConst(_) => {\n+            // HACK(eddyb) this provides the correct generics when\n+            // `feature(const_generics)` is enabled, so that const expressions\n+            // used with const generics, e.g. `Foo<{N+1}>`, can work at all.\n+            if tcx.features().const_generics {\n                 let parent_id = tcx.hir().get_parent_item(hir_id);\n                 Some(tcx.hir().local_def_id(parent_id))\n             } else {"}]}