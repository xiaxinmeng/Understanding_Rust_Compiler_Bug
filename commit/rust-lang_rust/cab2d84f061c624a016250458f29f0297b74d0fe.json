{"sha": "cab2d84f061c624a016250458f29f0297b74d0fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYjJkODRmMDYxYzYyNGEwMTYyNTA0NThmMjlmMDI5N2I3NGQwZmU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-07T22:07:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-07T22:07:34Z"}, "message": "Rollup merge of #64229 - kawa-yoiko:unreachable-call-lint, r=estebank\n\nReduce span to function name in unreachable calls\n\nAs title suggests, this might close #64103. Refer to the updated tests for expected output.\n\nThere is potential to further improve usability. In particular, is it favourable that the exact diverging expression/statement be pointed out (not only in this case, but for all unreachable code)? Certainly that would deserve another issue, but I'm interested in the opinions.", "tree": {"sha": "db5969626b36b41cecf676a6ed4e565583a01152", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db5969626b36b41cecf676a6ed4e565583a01152"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cab2d84f061c624a016250458f29f0297b74d0fe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJddComCRBK7hj4Ov3rIwAAdHIIAJpKob2lDCUugSBIN5ZVx9E7\nIVRB8SA/4qxbtQIzIJFE6fxSQ0RzLwOVdMNLt+dA62qlHZVdEq8tEkq0i6u4ijxc\nfbmTgWUCXZCSoejKvXb+I3//568RZLVC2y0E3rXP5RXc/PgPSGnkLbr568TrcG/+\nW3Q1/0Bapk8I6eoNLhrldqyVrBRI8XZ23E7BkvIIIo0FNxrpGvmbv7cjs3Phc3Sk\nOe7V1N42Y3vyFj58vKh4ZH+g9l0Qs/cLKBa9G17oJJx7nvHUEj9wZEJ4CA1cQCK7\nTPUF+u730V5PeVVvt8bL+4oxeLMQ0TpGkSEwyQjIeyxymnmEhFy+jfEzg6jZHQg=\n=0zUP\n-----END PGP SIGNATURE-----\n", "payload": "tree db5969626b36b41cecf676a6ed4e565583a01152\nparent 77e1a7c578f61572bbb4e40c5a12e2d0a74329b8\nparent e1d27eb73cc2f318157f744d8175e1ef0340ff52\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567894054 +0200\ncommitter GitHub <noreply@github.com> 1567894054 +0200\n\nRollup merge of #64229 - kawa-yoiko:unreachable-call-lint, r=estebank\n\nReduce span to function name in unreachable calls\n\nAs title suggests, this might close #64103. Refer to the updated tests for expected output.\n\nThere is potential to further improve usability. In particular, is it favourable that the exact diverging expression/statement be pointed out (not only in this case, but for all unreachable code)? Certainly that would deserve another issue, but I'm interested in the opinions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cab2d84f061c624a016250458f29f0297b74d0fe", "html_url": "https://github.com/rust-lang/rust/commit/cab2d84f061c624a016250458f29f0297b74d0fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cab2d84f061c624a016250458f29f0297b74d0fe/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77e1a7c578f61572bbb4e40c5a12e2d0a74329b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/77e1a7c578f61572bbb4e40c5a12e2d0a74329b8", "html_url": "https://github.com/rust-lang/rust/commit/77e1a7c578f61572bbb4e40c5a12e2d0a74329b8"}, {"sha": "e1d27eb73cc2f318157f744d8175e1ef0340ff52", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d27eb73cc2f318157f744d8175e1ef0340ff52", "html_url": "https://github.com/rust-lang/rust/commit/e1d27eb73cc2f318157f744d8175e1ef0340ff52"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "da72dfd1551829c1a62421a13fee279a2da0a0ce", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cab2d84f061c624a016250458f29f0297b74d0fe/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cab2d84f061c624a016250458f29f0297b74d0fe/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=cab2d84f061c624a016250458f29f0297b74d0fe", "patch": "@@ -161,6 +161,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Warn for non-block expressions with diverging children.\n         match expr.node {\n             ExprKind::Block(..) | ExprKind::Loop(..) | ExprKind::Match(..) => {},\n+            ExprKind::Call(ref callee, _) =>\n+                self.warn_if_unreachable(expr.hir_id, callee.span, \"call\"),\n+            ExprKind::MethodCall(_, ref span, _) =>\n+                self.warn_if_unreachable(expr.hir_id, *span, \"call\"),\n             _ => self.warn_if_unreachable(expr.hir_id, expr.span, \"expression\"),\n         }\n "}, {"sha": "b1b5bf03fe52abf806f9a56a0d4fcc292aec1ca5", "filename": "src/test/ui/never-assign-dead-code.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cab2d84f061c624a016250458f29f0297b74d0fe/src%2Ftest%2Fui%2Fnever-assign-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cab2d84f061c624a016250458f29f0297b74d0fe/src%2Ftest%2Fui%2Fnever-assign-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever-assign-dead-code.stderr?ref=cab2d84f061c624a016250458f29f0297b74d0fe", "patch": "@@ -11,11 +11,11 @@ LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unreachable_code)]` implied by `#[warn(unused)]`\n \n-warning: unreachable expression\n+warning: unreachable call\n   --> $DIR/never-assign-dead-code.rs:10:5\n    |\n LL |     drop(x);\n-   |     ^^^^^^^\n+   |     ^^^^\n \n warning: unused variable: `x`\n   --> $DIR/never-assign-dead-code.rs:9:9"}, {"sha": "f2db17e4dfe8e1be6ff3bdd064f3f438738f21b4", "filename": "src/test/ui/reachable/expr_call.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cab2d84f061c624a016250458f29f0297b74d0fe/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cab2d84f061c624a016250458f29f0297b74d0fe/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr?ref=cab2d84f061c624a016250458f29f0297b74d0fe", "patch": "@@ -10,11 +10,11 @@ note: lint level defined here\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n-error: unreachable expression\n+error: unreachable call\n   --> $DIR/expr_call.rs:18:5\n    |\n LL |     bar(return);\n-   |     ^^^^^^^^^^^\n+   |     ^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "947ea0fee889c9e0c50a0ad9b619f538821e5ebd", "filename": "src/test/ui/reachable/expr_method.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cab2d84f061c624a016250458f29f0297b74d0fe/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cab2d84f061c624a016250458f29f0297b74d0fe/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr?ref=cab2d84f061c624a016250458f29f0297b74d0fe", "patch": "@@ -10,11 +10,11 @@ note: lint level defined here\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n-error: unreachable expression\n-  --> $DIR/expr_method.rs:21:5\n+error: unreachable call\n+  --> $DIR/expr_method.rs:21:9\n    |\n LL |     Foo.bar(return);\n-   |     ^^^^^^^^^^^^^^^\n+   |         ^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "dd94e79f4d84c717895f8821461dc716529374be", "filename": "src/test/ui/unreachable/unreachable-in-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cab2d84f061c624a016250458f29f0297b74d0fe/src%2Ftest%2Fui%2Funreachable%2Funreachable-in-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cab2d84f061c624a016250458f29f0297b74d0fe/src%2Ftest%2Fui%2Funreachable%2Funreachable-in-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funreachable%2Funreachable-in-call.rs?ref=cab2d84f061c624a016250458f29f0297b74d0fe", "patch": "@@ -14,7 +14,7 @@ fn diverge_first() {\n          get_u8()); //~ ERROR unreachable expression\n }\n fn diverge_second() {\n-    call( //~ ERROR unreachable expression\n+    call( //~ ERROR unreachable call\n         get_u8(),\n         diverge());\n }"}, {"sha": "c740011c4a125711bfdbc4ab2314d17009ec2618", "filename": "src/test/ui/unreachable/unreachable-in-call.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cab2d84f061c624a016250458f29f0297b74d0fe/src%2Ftest%2Fui%2Funreachable%2Funreachable-in-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cab2d84f061c624a016250458f29f0297b74d0fe/src%2Ftest%2Fui%2Funreachable%2Funreachable-in-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funreachable%2Funreachable-in-call.stderr?ref=cab2d84f061c624a016250458f29f0297b74d0fe", "patch": "@@ -10,13 +10,11 @@ note: lint level defined here\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n-error: unreachable expression\n+error: unreachable call\n   --> $DIR/unreachable-in-call.rs:17:5\n    |\n-LL | /     call(\n-LL | |         get_u8(),\n-LL | |         diverge());\n-   | |__________________^\n+LL |     call(\n+   |     ^^^^\n \n error: aborting due to 2 previous errors\n "}]}