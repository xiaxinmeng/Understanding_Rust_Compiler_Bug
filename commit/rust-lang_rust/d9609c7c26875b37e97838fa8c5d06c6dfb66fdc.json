{"sha": "d9609c7c26875b37e97838fa8c5d06c6dfb66fdc", "node_id": "C_kwDOAAsO6NoAKGQ5NjA5YzdjMjY4NzViMzdlOTc4MzhmYThjNWQwNmM2ZGZiNjZmZGM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-09-09T16:32:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-09T16:32:16Z"}, "message": "Rollup merge of #101366 - ChrisDenton:unc-forward-slash, r=m-ou-se\n\nRestore old behaviour on broken UNC paths\n\nThis fixes #101358 by restoring the behaviour from previous stable Rust versions. I'm not convinced this is ultimately right but I think it's less wrong and maybe this should be backported to beta?\n\nr? libs", "tree": {"sha": "3a3d1caf3c545f90f8aa231bb39175cb3a2e18d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a3d1caf3c545f90f8aa231bb39175cb3a2e18d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9609c7c26875b37e97838fa8c5d06c6dfb66fdc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjG2qQCRBK7hj4Ov3rIwAAz8UIAKnq75ziDXHVlng0ogdxIhzw\nMpR8LErboZOxpwuljv6Ow9/6XDW7Tkw4/EO8eZNNwS5FXJeYb2ZxBEzmCLj/9fe4\nXJrCuOy76JcVKKmdieeG1Hp6ydFU8+vesziVm2tnDG34mTLD+I9BQfl2BYXYywSm\nnMveaPhFuvBOLLRIZWfsUVlbJGEYp9mude18/ZJVoRYyjHmhCQ6hbWArnCfnCos3\nXgfuZfWW9Q1nGQqJPXAsfYSjAvILHEgP+aEjwBmwmHRiALJoSkjaSlWrY/1UdyyD\n5hVLrCFrQaBNa7rrPBf7/vzVho9rBv+D4jt6gUO+fIqbutDPlzfNdHChQ0UEn4s=\n=0u6f\n-----END PGP SIGNATURE-----\n", "payload": "tree 3a3d1caf3c545f90f8aa231bb39175cb3a2e18d0\nparent 98f3001eecbe4cbd091c10ffab45b4c164bb507b\nparent 0fe54d46509abbbe54292d0ff85f8429301be002\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1662741136 +0530\ncommitter GitHub <noreply@github.com> 1662741136 +0530\n\nRollup merge of #101366 - ChrisDenton:unc-forward-slash, r=m-ou-se\n\nRestore old behaviour on broken UNC paths\n\nThis fixes #101358 by restoring the behaviour from previous stable Rust versions. I'm not convinced this is ultimately right but I think it's less wrong and maybe this should be backported to beta?\n\nr? libs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9609c7c26875b37e97838fa8c5d06c6dfb66fdc", "html_url": "https://github.com/rust-lang/rust/commit/d9609c7c26875b37e97838fa8c5d06c6dfb66fdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9609c7c26875b37e97838fa8c5d06c6dfb66fdc/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98f3001eecbe4cbd091c10ffab45b4c164bb507b", "url": "https://api.github.com/repos/rust-lang/rust/commits/98f3001eecbe4cbd091c10ffab45b4c164bb507b", "html_url": "https://github.com/rust-lang/rust/commit/98f3001eecbe4cbd091c10ffab45b4c164bb507b"}, {"sha": "0fe54d46509abbbe54292d0ff85f8429301be002", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fe54d46509abbbe54292d0ff85f8429301be002", "html_url": "https://github.com/rust-lang/rust/commit/0fe54d46509abbbe54292d0ff85f8429301be002"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "beeca1917a9af74e40516748a93c8aa26594c5ca", "filename": "library/std/src/sys/windows/path.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d9609c7c26875b37e97838fa8c5d06c6dfb66fdc/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9609c7c26875b37e97838fa8c5d06c6dfb66fdc/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpath.rs?ref=d9609c7c26875b37e97838fa8c5d06c6dfb66fdc", "patch": "@@ -198,14 +198,7 @@ fn parse_next_component(path: &OsStr, verbatim: bool) -> (&OsStr, &OsStr) {\n \n     match path.bytes().iter().position(|&x| separator(x)) {\n         Some(separator_start) => {\n-            let mut separator_end = separator_start + 1;\n-\n-            // a series of multiple separator characters is treated as a single separator,\n-            // except in verbatim paths\n-            while !verbatim && separator_end < path.len() && separator(path.bytes()[separator_end])\n-            {\n-                separator_end += 1;\n-            }\n+            let separator_end = separator_start + 1;\n \n             let component = &path.bytes()[..separator_start];\n "}, {"sha": "623c6236166da6e3ce7a6768fb66e157553dab24", "filename": "library/std/src/sys/windows/path/tests.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d9609c7c26875b37e97838fa8c5d06c6dfb66fdc/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpath%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9609c7c26875b37e97838fa8c5d06c6dfb66fdc/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpath%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpath%2Ftests.rs?ref=d9609c7c26875b37e97838fa8c5d06c6dfb66fdc", "patch": "@@ -31,16 +31,6 @@ fn test_parse_next_component() {\n         parse_next_component(OsStr::new(r\"servershare\"), false),\n         (OsStr::new(r\"servershare\"), OsStr::new(\"\"))\n     );\n-\n-    assert_eq!(\n-        parse_next_component(OsStr::new(r\"server/\\//\\/\\\\\\\\/////\\/share\"), false),\n-        (OsStr::new(r\"server\"), OsStr::new(r\"share\"))\n-    );\n-\n-    assert_eq!(\n-        parse_next_component(OsStr::new(r\"server\\\\\\\\\\\\\\\\\\\\\\\\\\\\share\"), true),\n-        (OsStr::new(r\"server\"), OsStr::new(r\"\\\\\\\\\\\\\\\\\\\\\\\\\\share\"))\n-    );\n }\n \n #[test]\n@@ -126,3 +116,22 @@ fn test_windows_prefix_components() {\n     assert_eq!(drive.as_os_str(), OsStr::new(\"C:\"));\n     assert_eq!(components.as_path(), Path::new(\"\"));\n }\n+\n+/// See #101358.\n+///\n+/// Note that the exact behaviour here may change in the future.\n+/// In which case this test will need to adjusted.\n+#[test]\n+fn broken_unc_path() {\n+    use crate::path::Component;\n+\n+    let mut components = Path::new(r\"\\\\foo\\\\bar\\\\\").components();\n+    assert_eq!(components.next(), Some(Component::RootDir));\n+    assert_eq!(components.next(), Some(Component::Normal(\"foo\".as_ref())));\n+    assert_eq!(components.next(), Some(Component::Normal(\"bar\".as_ref())));\n+\n+    let mut components = Path::new(\"//foo//bar//\").components();\n+    assert_eq!(components.next(), Some(Component::RootDir));\n+    assert_eq!(components.next(), Some(Component::Normal(\"foo\".as_ref())));\n+    assert_eq!(components.next(), Some(Component::Normal(\"bar\".as_ref())));\n+}"}]}