{"sha": "99efc51dae1dbe9d741707a7ddef84c29e654df5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZWZjNTFkYWUxZGJlOWQ3NDE3MDdhN2RkZWY4NGMyOWU2NTRkZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-14T07:01:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-14T07:01:36Z"}, "message": "Auto merge of #85020 - lrh2000:named-upvars, r=tmandry\n\nName the captured upvars for closures/generators in debuginfo\n\nPreviously, debuggers print closures as something like\n```\ny::main::closure-0 (0x7fffffffdd34)\n```\nThe pointer actually references to an upvar. It is not very obvious, especially for beginners.\n\nIt's because upvars don't have names before, as they are packed into a tuple. This PR names the upvars, so we can expect to see something like\n```\ny::main::closure-0 {_captured_ref__b: 0x[...]}\n```\n\nr? `@tmandry`\nDiscussed at https://github.com/rust-lang/rust/pull/84752#issuecomment-831639489 .", "tree": {"sha": "19a98d216296a5b00b034678949d238b62bcb004", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19a98d216296a5b00b034678949d238b62bcb004"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99efc51dae1dbe9d741707a7ddef84c29e654df5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99efc51dae1dbe9d741707a7ddef84c29e654df5", "html_url": "https://github.com/rust-lang/rust/commit/99efc51dae1dbe9d741707a7ddef84c29e654df5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99efc51dae1dbe9d741707a7ddef84c29e654df5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6094fc7b9981d755abeb8c0e866a0f6315b3ec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6094fc7b9981d755abeb8c0e866a0f6315b3ec3", "html_url": "https://github.com/rust-lang/rust/commit/c6094fc7b9981d755abeb8c0e866a0f6315b3ec3"}, {"sha": "cf5eda1b4d24d508039e96d939043268e955af6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf5eda1b4d24d508039e96d939043268e955af6f", "html_url": "https://github.com/rust-lang/rust/commit/cf5eda1b4d24d508039e96d939043268e955af6f"}], "stats": {"total": 299, "additions": 276, "deletions": 23}, "files": [{"sha": "2cb126f1a7e4de84c2b7266f683d285deb4bc8b8", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/99efc51dae1dbe9d741707a7ddef84c29e654df5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99efc51dae1dbe9d741707a7ddef84c29e654df5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=99efc51dae1dbe9d741707a7ddef84c29e654df5", "patch": "@@ -1280,6 +1280,31 @@ fn prepare_struct_metadata(\n // Tuples\n //=-----------------------------------------------------------------------------\n \n+/// Returns names of captured upvars for closures and generators.\n+///\n+/// Here are some examples:\n+///  - `name__field1__field2` when the upvar is captured by value.\n+///  - `_ref__name__field` when the upvar is captured by reference.\n+fn closure_saved_names_of_captured_variables(tcx: TyCtxt<'tcx>, def_id: DefId) -> Vec<String> {\n+    let body = tcx.optimized_mir(def_id);\n+\n+    body.var_debug_info\n+        .iter()\n+        .filter_map(|var| {\n+            let is_ref = match var.value {\n+                mir::VarDebugInfoContents::Place(place) if place.local == mir::Local::new(1) => {\n+                    // The projection is either `[.., Field, Deref]` or `[.., Field]`. It\n+                    // implies whether the variable is captured by value or by reference.\n+                    matches!(place.projection.last().unwrap(), mir::ProjectionElem::Deref)\n+                }\n+                _ => return None,\n+            };\n+            let prefix = if is_ref { \"_ref__\" } else { \"\" };\n+            Some(prefix.to_owned() + &var.name.as_str())\n+        })\n+        .collect::<Vec<_>>()\n+}\n+\n /// Creates `MemberDescription`s for the fields of a tuple.\n struct TupleMemberDescriptionFactory<'tcx> {\n     ty: Ty<'tcx>,\n@@ -1289,14 +1314,25 @@ struct TupleMemberDescriptionFactory<'tcx> {\n \n impl<'tcx> TupleMemberDescriptionFactory<'tcx> {\n     fn create_member_descriptions(&self, cx: &CodegenCx<'ll, 'tcx>) -> Vec<MemberDescription<'ll>> {\n+        let mut capture_names = match *self.ty.kind() {\n+            ty::Generator(def_id, ..) | ty::Closure(def_id, ..) => {\n+                Some(closure_saved_names_of_captured_variables(cx.tcx, def_id).into_iter())\n+            }\n+            _ => None,\n+        };\n         let layout = cx.layout_of(self.ty);\n         self.component_types\n             .iter()\n             .enumerate()\n             .map(|(i, &component_type)| {\n                 let (size, align) = cx.size_and_align_of(component_type);\n+                let name = if let Some(names) = capture_names.as_mut() {\n+                    names.next().unwrap()\n+                } else {\n+                    format!(\"__{}\", i)\n+                };\n                 MemberDescription {\n-                    name: format!(\"__{}\", i),\n+                    name,\n                     type_metadata: type_metadata(cx, component_type, self.span),\n                     offset: layout.fields.offset(i),\n                     size,"}, {"sha": "5b37556985b94e3c343499eaa56e3c3b3afb7b6e", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/99efc51dae1dbe9d741707a7ddef84c29e654df5/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99efc51dae1dbe9d741707a7ddef84c29e654df5/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=99efc51dae1dbe9d741707a7ddef84c29e654df5", "patch": "@@ -342,6 +342,16 @@ rustc_queries! {\n         }\n     }\n \n+    query symbols_for_closure_captures(\n+        key: (LocalDefId, DefId)\n+    ) -> Vec<rustc_span::Symbol> {\n+        desc {\n+            |tcx| \"symbols for captures of closure `{}` in `{}`\",\n+            tcx.def_path_str(key.1),\n+            tcx.def_path_str(key.0.to_def_id())\n+        }\n+    }\n+\n     /// MIR after our optimization passes have run. This is MIR that is ready\n     /// for codegen. This is also the only query that can fetch non-local MIR, at present.\n     query optimized_mir(key: DefId) -> &'tcx mir::Body<'tcx> {"}, {"sha": "dd6ca9bd8c8abe1eed7d6bcaa6df75a29380542d", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/99efc51dae1dbe9d741707a7ddef84c29e654df5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99efc51dae1dbe9d741707a7ddef84c29e654df5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=99efc51dae1dbe9d741707a7ddef84c29e654df5", "patch": "@@ -3,10 +3,12 @@ use crate::hir::place::{\n };\n use crate::{mir, ty};\n \n+use std::fmt::Write;\n+\n use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_span::Span;\n+use rustc_span::{Span, Symbol};\n \n use super::{Ty, TyCtxt};\n \n@@ -159,6 +161,43 @@ impl CapturedPlace<'tcx> {\n         place_to_string_for_capture(tcx, &self.place)\n     }\n \n+    /// Returns a symbol of the captured upvar, which looks like `name__field1__field2`.\n+    fn to_symbol(&self, tcx: TyCtxt<'tcx>) -> Symbol {\n+        let hir_id = match self.place.base {\n+            HirPlaceBase::Upvar(upvar_id) => upvar_id.var_path.hir_id,\n+            base => bug!(\"Expected an upvar, found {:?}\", base),\n+        };\n+        let mut symbol = tcx.hir().name(hir_id).as_str().to_string();\n+\n+        let mut ty = self.place.base_ty;\n+        for proj in self.place.projections.iter() {\n+            match proj.kind {\n+                HirProjectionKind::Field(idx, variant) => match ty.kind() {\n+                    ty::Tuple(_) => write!(&mut symbol, \"__{}\", idx).unwrap(),\n+                    ty::Adt(def, ..) => {\n+                        write!(\n+                            &mut symbol,\n+                            \"__{}\",\n+                            def.variants[variant].fields[idx as usize].ident.name.as_str(),\n+                        )\n+                        .unwrap();\n+                    }\n+                    ty => {\n+                        bug!(\"Unexpected type {:?} for `Field` projection\", ty)\n+                    }\n+                },\n+\n+                // Ignore derefs for now, as they are likely caused by\n+                // autoderefs that don't appear in the original code.\n+                HirProjectionKind::Deref => {}\n+                proj => bug!(\"Unexpected projection {:?} in captured place\", proj),\n+            }\n+            ty = proj.ty;\n+        }\n+\n+        Symbol::intern(&symbol)\n+    }\n+\n     /// Returns the hir-id of the root variable for the captured place.\n     /// e.g., if `a.b.c` was captured, would return the hir-id for `a`.\n     pub fn get_root_variable(&self) -> hir::HirId {\n@@ -209,6 +248,15 @@ impl CapturedPlace<'tcx> {\n     }\n }\n \n+fn symbols_for_closure_captures<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: (LocalDefId, DefId),\n+) -> Vec<Symbol> {\n+    let typeck_results = tcx.typeck(def_id.0);\n+    let captures = typeck_results.closure_min_captures_flattened(def_id.1);\n+    captures.into_iter().map(|captured_place| captured_place.to_symbol(tcx)).collect()\n+}\n+\n /// Return true if the `proj_possible_ancestor` represents an ancestor path\n /// to `proj_capture` or `proj_possible_ancestor` is same as `proj_capture`,\n /// assuming they both start off of the same root variable.\n@@ -392,3 +440,7 @@ impl BorrowKind {\n         }\n     }\n }\n+\n+pub fn provide(providers: &mut ty::query::Providers) {\n+    *providers = ty::query::Providers { symbols_for_closure_captures, ..*providers }\n+}"}, {"sha": "4a83b5024e777a9a814f41ab4501fca5af6e116f", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99efc51dae1dbe9d741707a7ddef84c29e654df5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99efc51dae1dbe9d741707a7ddef84c29e654df5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=99efc51dae1dbe9d741707a7ddef84c29e654df5", "patch": "@@ -16,7 +16,6 @@ pub use self::IntVarValue::*;\n pub use self::Variance::*;\n pub use adt::*;\n pub use assoc::*;\n-pub use closure::*;\n pub use generics::*;\n pub use vtable::*;\n \n@@ -55,6 +54,12 @@ pub use rustc_type_ir::*;\n \n pub use self::binding::BindingMode;\n pub use self::binding::BindingMode::*;\n+pub use self::closure::{\n+    is_ancestor_or_same_capture, place_to_string_for_capture, BorrowKind, CaptureInfo,\n+    CapturedPlace, ClosureKind, MinCaptureInformationMap, MinCaptureList,\n+    RootVariableMinCaptureList, UpvarBorrow, UpvarCapture, UpvarCaptureMap, UpvarId, UpvarListMap,\n+    UpvarPath, CAPTURE_STRUCT_LOCAL,\n+};\n pub use self::consts::{Const, ConstInt, ConstKind, InferConst, ScalarInt, Unevaluated, ValTree};\n pub use self::context::{\n     tls, CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n@@ -1980,6 +1985,7 @@ pub fn ast_uint_ty(uty: UintTy) -> ast::UintTy {\n }\n \n pub fn provide(providers: &mut ty::query::Providers) {\n+    closure::provide(providers);\n     context::provide(providers);\n     erase_regions::provide(providers);\n     layout::provide(providers);"}, {"sha": "b8c3e81aa8fdfccda13faa826625ebd40c240edd", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/99efc51dae1dbe9d741707a7ddef84c29e654df5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99efc51dae1dbe9d741707a7ddef84c29e654df5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=99efc51dae1dbe9d741707a7ddef84c29e654df5", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::mir::*;\n use rustc_middle::thir::{BindingMode, Expr, ExprId, LintLevel, PatKind, Thir};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeckResults};\n-use rustc_span::symbol::{kw, sym};\n+use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n \n@@ -902,13 +902,16 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 ty::Generator(_, substs, _) => ty::UpvarSubsts::Generator(substs),\n                 _ => span_bug!(self.fn_span, \"upvars with non-closure env ty {:?}\", closure_ty),\n             };\n+            let def_id = self.def_id.as_local().unwrap();\n+            let capture_syms = tcx.symbols_for_closure_captures((def_id, fn_def_id));\n             let capture_tys = upvar_substs.upvar_tys();\n-            let captures_with_tys =\n-                hir_typeck_results.closure_min_captures_flattened(fn_def_id).zip(capture_tys);\n+            let captures_with_tys = hir_typeck_results\n+                .closure_min_captures_flattened(fn_def_id)\n+                .zip(capture_tys.zip(capture_syms));\n \n             self.upvar_mutbls = captures_with_tys\n                 .enumerate()\n-                .map(|(i, (captured_place, ty))| {\n+                .map(|(i, (captured_place, (ty, sym)))| {\n                     let capture = captured_place.info.capture_kind;\n                     let var_id = match captured_place.place.base {\n                         HirPlaceBase::Upvar(upvar_id) => upvar_id.var_path.hir_id,\n@@ -917,14 +920,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                     let mutability = captured_place.mutability;\n \n-                    // FIXME(project-rfc-2229#8): Store more precise information\n-                    let mut name = kw::Empty;\n-                    if let Some(Node::Binding(pat)) = tcx_hir.find(var_id) {\n-                        if let hir::PatKind::Binding(_, _, ident, _) = pat.kind {\n-                            name = ident.name;\n-                        }\n-                    }\n-\n                     let mut projs = closure_env_projs.clone();\n                     projs.push(ProjectionElem::Field(Field::new(i), ty));\n                     match capture {\n@@ -935,7 +930,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     };\n \n                     self.var_debug_info.push(VarDebugInfo {\n-                        name,\n+                        name: sym,\n                         source_info: SourceInfo::outermost(tcx_hir.span(var_id)),\n                         value: VarDebugInfoContents::Place(Place {\n                             local: ty::CAPTURE_STRUCT_LOCAL,"}, {"sha": "65f9e5f532279e1770d11c0f86a1c66c5e7ac7eb", "filename": "src/test/debuginfo/captured-fields-1.rs", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/99efc51dae1dbe9d741707a7ddef84c29e654df5/src%2Ftest%2Fdebuginfo%2Fcaptured-fields-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99efc51dae1dbe9d741707a7ddef84c29e654df5/src%2Ftest%2Fdebuginfo%2Fcaptured-fields-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fcaptured-fields-1.rs?ref=99efc51dae1dbe9d741707a7ddef84c29e654df5", "patch": "@@ -0,0 +1,99 @@\n+// compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n+// gdb-command:run\n+// gdb-command:print test\n+// gdbr-check:$1 = captured_fields_1::main::{closure#0} {_ref__my_ref__my_field1: 0x[...]}\n+// gdb-command:continue\n+// gdb-command:print test\n+// gdbr-check:$2 = captured_fields_1::main::{closure#1} {_ref__my_ref__my_field2: 0x[...]}\n+// gdb-command:continue\n+// gdb-command:print test\n+// gdbr-check:$3 = captured_fields_1::main::{closure#2} {_ref__my_ref: 0x[...]}\n+// gdb-command:continue\n+// gdb-command:print test\n+// gdbr-check:$4 = captured_fields_1::main::{closure#3} {my_ref: 0x[...]}\n+// gdb-command:continue\n+// gdb-command:print test\n+// gdbr-check:$5 = captured_fields_1::main::{closure#4} {my_var__my_field2: 22}\n+// gdb-command:continue\n+// gdb-command:print test\n+// gdbr-check:$6 = captured_fields_1::main::{closure#5} {my_var: captured_fields_1::MyStruct {my_field1: 11, my_field2: 22}}\n+// gdb-command:continue\n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+// lldb-command:print test\n+// lldbg-check:(captured_fields_1::main::{closure#0}) $0 = { _ref__my_ref__my_field1 = 0x[...] }\n+// lldb-command:continue\n+// lldb-command:print test\n+// lldbg-check:(captured_fields_1::main::{closure#1}) $1 = { _ref__my_ref__my_field2 = 0x[...] }\n+// lldb-command:continue\n+// lldb-command:print test\n+// lldbg-check:(captured_fields_1::main::{closure#2}) $2 = { _ref__my_ref = 0x[...] }\n+// lldb-command:continue\n+// lldb-command:print test\n+// lldbg-check:(captured_fields_1::main::{closure#3}) $3 = { my_ref = 0x[...] }\n+// lldb-command:continue\n+// lldb-command:print test\n+// lldbg-check:(captured_fields_1::main::{closure#4}) $4 = { my_var__my_field2 = 22 }\n+// lldb-command:continue\n+// lldb-command:print test\n+// lldbg-check:(captured_fields_1::main::{closure#5}) $5 = { my_var = { my_field1 = 11 my_field2 = 22 } }\n+// lldb-command:continue\n+\n+#![feature(capture_disjoint_fields)]\n+#![allow(unused)]\n+\n+struct MyStruct {\n+    my_field1: u32,\n+    my_field2: u32,\n+}\n+\n+fn main() {\n+    let mut my_var = MyStruct {\n+        my_field1: 11,\n+        my_field2: 22,\n+    };\n+    let my_ref = &mut my_var;\n+\n+    let test = || {\n+        let a = &mut my_ref.my_field1;\n+    };\n+\n+    _zzz(); // #break\n+\n+    let test = || {\n+        let a = &my_ref.my_field2;\n+    };\n+\n+    _zzz(); // #break\n+\n+    let test = || {\n+        let a = &my_ref;\n+    };\n+\n+    _zzz(); // #break\n+\n+    let test = || {\n+        let a = my_ref;\n+    };\n+\n+    _zzz(); // #break\n+\n+    let test = move || {\n+        let a = my_var.my_field2;\n+    };\n+\n+    _zzz(); // #break\n+\n+    let test = || {\n+        let a = my_var;\n+    };\n+\n+    _zzz(); // #break\n+}\n+\n+fn _zzz() {}"}, {"sha": "c872354a92489daec52667fd46e14e6b7f781af7", "filename": "src/test/debuginfo/captured-fields-2.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/99efc51dae1dbe9d741707a7ddef84c29e654df5/src%2Ftest%2Fdebuginfo%2Fcaptured-fields-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99efc51dae1dbe9d741707a7ddef84c29e654df5/src%2Ftest%2Fdebuginfo%2Fcaptured-fields-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fcaptured-fields-2.rs?ref=99efc51dae1dbe9d741707a7ddef84c29e654df5", "patch": "@@ -0,0 +1,55 @@\n+// compile-flags:-g\n+\n+// === GDB TESTS ===================================================================================\n+\n+// gdb-command:run\n+// gdb-command:print my_ref__my_field1\n+// gdbr-check:$1 = 11\n+// gdb-command:continue\n+// gdb-command:print my_var__my_field2\n+// gdbr-check:$2 = 22\n+// gdb-command:continue\n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+// lldb-command:print my_ref__my_field1\n+// lldbg-check:(unsigned int) $0 = 11\n+// lldb-command:continue\n+// lldb-command:print my_var__my_field2\n+// lldbg-check:(unsigned int) $1 = 22\n+// lldb-command:continue\n+\n+#![feature(capture_disjoint_fields)]\n+#![allow(unused)]\n+\n+struct MyStruct {\n+    my_field1: u32,\n+    my_field2: u32,\n+}\n+\n+fn main() {\n+    let mut my_var = MyStruct {\n+        my_field1: 11,\n+        my_field2: 22,\n+    };\n+    let my_ref = &mut my_var;\n+\n+    let test = || {\n+        let a = my_ref.my_field1;\n+\n+        _zzz(); // #break\n+    };\n+\n+    test();\n+\n+    let test = move || {\n+        let a = my_var.my_field2;\n+\n+        _zzz(); // #break\n+    };\n+\n+    test();\n+}\n+\n+fn _zzz() {}"}, {"sha": "9bf33a7bb8796dc98b1357ce80856af632f469b1", "filename": "src/test/debuginfo/generator-objects.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99efc51dae1dbe9d741707a7ddef84c29e654df5/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99efc51dae1dbe9d741707a7ddef84c29e654df5/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs?ref=99efc51dae1dbe9d741707a7ddef84c29e654df5", "patch": "@@ -11,16 +11,16 @@\n \n // gdb-command:run\n // gdb-command:print b\n-// gdb-check:$1 = generator_objects::main::{generator#0}::Unresumed(0x[...])\n+// gdb-check:$1 = generator_objects::main::{generator#0}::Unresumed{_ref__a: 0x[...]}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$2 = generator_objects::main::{generator#0}::Suspend0{c: 6, d: 7, __0: 0x[...]}\n+// gdb-check:$2 = generator_objects::main::{generator#0}::Suspend0{c: 6, d: 7, _ref__a: 0x[...]}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$3 = generator_objects::main::{generator#0}::Suspend1{c: 7, d: 8, __0: 0x[...]}\n+// gdb-check:$3 = generator_objects::main::{generator#0}::Suspend1{c: 7, d: 8, _ref__a: 0x[...]}\n // gdb-command:continue\n // gdb-command:print b\n-// gdb-check:$4 = generator_objects::main::{generator#0}::Returned(0x[...])\n+// gdb-check:$4 = generator_objects::main::{generator#0}::Returned{_ref__a: 0x[...]}\n \n // === LLDB TESTS ==================================================================================\n "}, {"sha": "1a26b0a3255b7da18de8955f1e96638fc974eb54", "filename": "src/test/debuginfo/issue-57822.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99efc51dae1dbe9d741707a7ddef84c29e654df5/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99efc51dae1dbe9d741707a7ddef84c29e654df5/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs?ref=99efc51dae1dbe9d741707a7ddef84c29e654df5", "patch": "@@ -11,17 +11,17 @@\n // gdb-command:run\n \n // gdb-command:print g\n-// gdb-check:$1 = issue_57822::main::{closure#1} (issue_57822::main::{closure#0} (1))\n+// gdb-check:$1 = issue_57822::main::{closure#1} {f: issue_57822::main::{closure#0} {x: 1}}\n \n // gdb-command:print b\n-// gdb-check:$2 = issue_57822::main::{generator#3}::Unresumed(issue_57822::main::{generator#2}::Unresumed(2))\n+// gdb-check:$2 = issue_57822::main::{generator#3}::Unresumed{a: issue_57822::main::{generator#2}::Unresumed{y: 2}}\n \n // === LLDB TESTS ==================================================================================\n \n // lldb-command:run\n \n // lldb-command:print g\n-// lldbg-check:(issue_57822::main::{closure#1}) $0 = { 0 = { 0 = 1 } }\n+// lldbg-check:(issue_57822::main::{closure#1}) $0 = { f = { x = 1 } }\n \n // lldb-command:print b\n // lldbg-check:(issue_57822::main::{generator#3}) $1 ="}]}