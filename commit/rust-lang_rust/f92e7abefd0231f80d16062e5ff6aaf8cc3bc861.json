{"sha": "f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MmU3YWJlZmQwMjMxZjgwZDE2MDYyZTVmZjZhYWY4Y2MzYmM4NjE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-02T01:37:54Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-02T01:37:54Z"}, "message": "rollup merge of #23860: nikomatsakis/copy-requires-clone\n\nConflicts:\n\tsrc/test/compile-fail/coherence-impls-copy.rs", "tree": {"sha": "e8c5150252807a3b65c231c338627aaaef025f92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8c5150252807a3b65c231c338627aaaef025f92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "html_url": "https://github.com/rust-lang/rust/commit/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05654e528d9835f5b994241970bb4b6162665750", "url": "https://api.github.com/repos/rust-lang/rust/commits/05654e528d9835f5b994241970bb4b6162665750", "html_url": "https://github.com/rust-lang/rust/commit/05654e528d9835f5b994241970bb4b6162665750"}, {"sha": "449643301c1b30adf6b338174351219a58ffdb36", "url": "https://api.github.com/repos/rust-lang/rust/commits/449643301c1b30adf6b338174351219a58ffdb36", "html_url": "https://github.com/rust-lang/rust/commit/449643301c1b30adf6b338174351219a58ffdb36"}], "stats": {"total": 1207, "additions": 624, "deletions": 583}, "files": [{"sha": "cc90a69fd2ae7d2b1f1147565abdddd73f64c0d1", "filename": "src/doc/reference.md", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -1648,7 +1648,7 @@ specific type.\n Implementations are defined with the keyword `impl`.\n \n ```\n-# #[derive(Copy)]\n+# #[derive(Copy, Clone)]\n # struct Point {x: f64, y: f64};\n # type Surface = i32;\n # struct BoundingBox {x: f64, y: f64, width: f64, height: f64};\n@@ -1661,6 +1661,10 @@ struct Circle {\n \n impl Copy for Circle {}\n \n+impl Clone for Circle {\n+    fn clone(&self) -> Circle { *self }\n+}\n+\n impl Shape for Circle {\n     fn draw(&self, s: Surface) { do_draw_circle(s, *self); }\n     fn bounding_box(&self) -> BoundingBox {"}, {"sha": "3804874a650f6c065e23c78043bbfc8b1c35a168", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -30,7 +30,7 @@\n //! use std::collections::BinaryHeap;\n //! use std::usize;\n //!\n-//! #[derive(Copy, Eq, PartialEq)]\n+//! #[derive(Copy, Clone, Eq, PartialEq)]\n //! struct State {\n //!     cost: usize,\n //!     position: usize,"}, {"sha": "26c57256049cb87553ccb5a660893b81c6c8d4b1", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -526,7 +526,7 @@ impl<K: Clone, V: Clone> Clone for Node<K, V> {\n ///     println!(\"Uninitialized memory: {:?}\", handle.into_kv());\n /// }\n /// ```\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Handle<NodeRef, Type, NodeType> {\n     node: NodeRef,\n     index: usize,"}, {"sha": "0b206d381ddacde5216e2d6c99f7033b97b1ce62", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -21,7 +21,7 @@ use core::ops::{Sub, BitOr, BitAnd, BitXor};\n \n // FIXME(contentions): implement union family of methods? (general design may be wrong here)\n \n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+#[derive(PartialEq, Eq, PartialOrd, Ord, Hash)]\n /// A specialized set implementation to use enum types.\n ///\n /// It is a logic error for an item to be modified in such a way that the transformation of the\n@@ -37,6 +37,10 @@ pub struct EnumSet<E> {\n \n impl<E> Copy for EnumSet<E> {}\n \n+impl<E> Clone for EnumSet<E> {\n+    fn clone(&self) -> EnumSet<E> { *self }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<E:CLike + fmt::Debug> fmt::Debug for EnumSet<E> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "0a1eb0bcfa8879cb801191d5e6532f65fda60f40", "filename": "src/libcollectionstest/enum_set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibcollectionstest%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibcollectionstest%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fenum_set.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -14,7 +14,7 @@ use collections::enum_set::{CLike, EnumSet};\n \n use self::Foo::*;\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n #[repr(usize)]\n enum Foo {\n     A, B, C\n@@ -218,7 +218,7 @@ fn test_operators() {\n #[should_panic]\n fn test_overflow() {\n     #[allow(dead_code)]\n-    #[derive(Copy)]\n+    #[derive(Copy, Clone)]\n     #[repr(usize)]\n     enum Bar {\n         V00, V01, V02, V03, V04, V05, V06, V07, V08, V09,"}, {"sha": "ed35e095492178479acf620e9acc579018dbb0a8", "filename": "src/libcore/atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibcore%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibcore%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fatomic.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -122,7 +122,7 @@ unsafe impl<T> Sync for AtomicPtr<T> {}\n /// Rust's memory orderings are [the same as\n /// C++'s](http://gcc.gnu.org/wiki/Atomic/GCCMM/AtomicSync).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum Ordering {\n     /// No ordering constraints, only atomic operations.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "be804327663e5b058196fd268b5d20d72f5f22eb", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -14,6 +14,7 @@\n \n use cell::{Cell, RefCell, Ref, RefMut, BorrowState};\n use char::CharExt;\n+use clone::Clone;\n use iter::Iterator;\n use marker::{Copy, PhantomData, Sized};\n use mem;\n@@ -53,7 +54,7 @@ pub type Result = result::Result<(), Error>;\n /// occurred. Any extra information must be arranged to be transmitted through\n /// some other means.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub struct Error;\n \n /// A collection of methods that are required to format a message into a stream.\n@@ -140,6 +141,12 @@ pub struct ArgumentV1<'a> {\n     formatter: fn(&Void, &mut Formatter) -> Result,\n }\n \n+impl<'a> Clone for ArgumentV1<'a> {\n+    fn clone(&self) -> ArgumentV1<'a> {\n+        *self\n+    }\n+}\n+\n impl<'a> ArgumentV1<'a> {\n     #[inline(never)]\n     fn show_usize(x: &usize, f: &mut Formatter) -> Result {\n@@ -174,7 +181,7 @@ impl<'a> ArgumentV1<'a> {\n }\n \n // flags available in the v1 format of format_args\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n #[allow(dead_code)] // SignMinus isn't currently used\n enum FlagV1 { SignPlus, SignMinus, Alternate, SignAwareZeroPad, }\n \n@@ -221,7 +228,7 @@ impl<'a> Arguments<'a> {\n /// macro validates the format string at compile-time so usage of the `write`\n /// and `format` functions can be safely performed.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Arguments<'a> {\n     // Format string pieces to print.\n     pieces: &'a [&'a str],"}, {"sha": "76c975902aabb0df47a9b16b0611517b3e6b9b78", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -139,7 +139,7 @@ impl GenericRadix for Radix {\n /// A helper type for formatting radixes.\n #[unstable(feature = \"core\",\n            reason = \"may be renamed or move to a different module\")]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct RadixFmt<T, R>(T, R);\n \n /// Constructs a radix formatter in the range of `2..36`."}, {"sha": "d56ec6a74d4494b59c7d0fe758784d3f621379f0", "filename": "src/libcore/fmt/rt/v1.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -16,7 +16,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Argument {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -25,7 +25,7 @@ pub struct Argument {\n     pub format: FormatSpec,\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct FormatSpec {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -41,7 +41,7 @@ pub struct FormatSpec {\n }\n \n /// Possible alignments that can be requested as part of a formatting directive.\n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Alignment {\n     /// Indication that contents should be left-aligned.\n@@ -58,7 +58,7 @@ pub enum Alignment {\n     Unknown,\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Count {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -71,7 +71,7 @@ pub enum Count {\n     Implied,\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Position {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "619f983aee07173f3e1deadd9e1abbadc33d105c", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -76,7 +76,7 @@ pub trait Sized : MarkerTrait {\n ///\n /// ```\n /// // we can just derive a `Copy` implementation\n-/// #[derive(Debug, Copy)]\n+/// #[derive(Debug, Copy, Clone)]\n /// struct Foo;\n ///\n /// let x = Foo;\n@@ -125,7 +125,7 @@ pub trait Sized : MarkerTrait {\n /// There are two ways to implement `Copy` on your type:\n ///\n /// ```\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct MyStruct;\n /// ```\n ///\n@@ -134,6 +134,7 @@ pub trait Sized : MarkerTrait {\n /// ```\n /// struct MyStruct;\n /// impl Copy for MyStruct {}\n+/// impl Clone for MyStruct { fn clone(&self) -> MyStruct { *self } }\n /// ```\n ///\n /// There is a small difference between the two: the `derive` strategy will also place a `Copy`\n@@ -155,7 +156,7 @@ pub trait Sized : MarkerTrait {\n /// change: that second example would fail to compile if we made `Foo` non-`Copy`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang=\"copy\"]\n-pub trait Copy : MarkerTrait {\n+pub trait Copy : Clone {\n     // Empty.\n }\n "}, {"sha": "e4565c51fa8e4482f108e1983d27a3785929e537", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -2444,7 +2444,7 @@ impl_num_cast! { f32,   to_f32 }\n impl_num_cast! { f64,   to_f64 }\n \n /// Used for representing the classification of floating point numbers\n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum FpCategory {\n     /// \"Not a Number\", often obtained by dividing by zero"}, {"sha": "faf305c6a13783e6965aaf061d5f46ffb8030790", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -165,7 +165,7 @@ macro_rules! forward_ref_binop {\n /// ```\n /// use std::ops::Add;\n ///\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl Add for Foo {\n@@ -219,7 +219,7 @@ add_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n /// ```\n /// use std::ops::Sub;\n ///\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl Sub for Foo {\n@@ -273,7 +273,7 @@ sub_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n /// ```\n /// use std::ops::Mul;\n ///\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl Mul for Foo {\n@@ -327,7 +327,7 @@ mul_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n /// ```\n /// use std::ops::Div;\n ///\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl Div for Foo {\n@@ -381,7 +381,7 @@ div_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n /// ```\n /// use std::ops::Rem;\n ///\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl Rem for Foo {\n@@ -454,7 +454,7 @@ rem_float_impl! { f64, fmod }\n /// ```\n /// use std::ops::Neg;\n ///\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl Neg for Foo {\n@@ -527,7 +527,7 @@ neg_impl_numeric! { isize i8 i16 i32 i64 f32 f64 }\n /// ```\n /// use std::ops::Not;\n ///\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl Not for Foo {\n@@ -581,7 +581,7 @@ not_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n /// ```\n /// use std::ops::BitAnd;\n ///\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl BitAnd for Foo {\n@@ -635,7 +635,7 @@ bitand_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n /// ```\n /// use std::ops::BitOr;\n ///\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl BitOr for Foo {\n@@ -689,7 +689,7 @@ bitor_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n /// ```\n /// use std::ops::BitXor;\n ///\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl BitXor for Foo {\n@@ -743,7 +743,7 @@ bitxor_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n /// ```\n /// use std::ops::Shl;\n ///\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl Shl<Foo> for Foo {\n@@ -815,7 +815,7 @@ shl_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n /// ```\n /// use std::ops::Shr;\n ///\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct Foo;\n ///\n /// impl Shr<Foo> for Foo {\n@@ -887,7 +887,7 @@ shr_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n /// ```\n /// use std::ops::Index;\n ///\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct Foo;\n /// struct Bar;\n ///\n@@ -928,7 +928,7 @@ pub trait Index<Idx: ?Sized> {\n /// ```\n /// use std::ops::{Index, IndexMut};\n ///\n-/// #[derive(Copy)]\n+/// #[derive(Copy, Clone)]\n /// struct Foo;\n /// struct Bar;\n ///"}, {"sha": "ded52ff07785ebd100c3c251fda7999db367ed2c", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -18,6 +18,7 @@\n //!\n //! Their definition should always match the ABI defined in `rustc::back::abi`.\n \n+use clone::Clone;\n use marker::Copy;\n use mem;\n \n@@ -63,6 +64,9 @@ pub struct Slice<T> {\n }\n \n impl<T> Copy for Slice<T> {}\n+impl<T> Clone for Slice<T> {\n+    fn clone(&self) -> Slice<T> { *self }\n+}\n \n /// The representation of a trait object like `&SomeTrait`.\n ///\n@@ -136,7 +140,7 @@ impl<T> Copy for Slice<T> {}\n /// assert_eq!(synthesized.bar(), 457);\n /// ```\n #[repr(C)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct TraitObject {\n     pub data: *mut (),\n     pub vtable: *mut (),"}, {"sha": "7b55ba49a07f779e83766b417cc4b35861dbdafb", "filename": "src/libcore/simd.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibcore%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibcore%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsimd.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -38,7 +38,7 @@\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n #[repr(C)]\n pub struct i8x16(pub i8, pub i8, pub i8, pub i8,\n                  pub i8, pub i8, pub i8, pub i8,\n@@ -47,26 +47,26 @@ pub struct i8x16(pub i8, pub i8, pub i8, pub i8,\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n #[repr(C)]\n pub struct i16x8(pub i16, pub i16, pub i16, pub i16,\n                  pub i16, pub i16, pub i16, pub i16);\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n #[repr(C)]\n pub struct i32x4(pub i32, pub i32, pub i32, pub i32);\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n #[repr(C)]\n pub struct i64x2(pub i64, pub i64);\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n #[repr(C)]\n pub struct u8x16(pub u8, pub u8, pub u8, pub u8,\n                  pub u8, pub u8, pub u8, pub u8,\n@@ -75,31 +75,31 @@ pub struct u8x16(pub u8, pub u8, pub u8, pub u8,\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n #[repr(C)]\n pub struct u16x8(pub u16, pub u16, pub u16, pub u16,\n                  pub u16, pub u16, pub u16, pub u16);\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n #[repr(C)]\n pub struct u32x4(pub u32, pub u32, pub u32, pub u32);\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n #[repr(C)]\n pub struct u64x2(pub u64, pub u64);\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n #[repr(C)]\n pub struct f32x4(pub f32, pub f32, pub f32, pub f32);\n \n #[unstable(feature = \"core\")]\n #[simd]\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n #[repr(C)]\n pub struct f64x2(pub f64, pub f64);"}, {"sha": "dbb365c4e2357536c4ab7097ed435aedd4f3de9f", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -1105,7 +1105,7 @@ static UTF8_CHAR_WIDTH: [u8; 256] = [\n /// Struct that contains a `char` and the index of the first byte of\n /// the next `char` in a string.  This can be used as a data structure\n /// for iterating over the UTF-8 bytes of a string.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n #[unstable(feature = \"str_char\",\n            reason = \"existence of this struct is uncertain as it is frequently \\\n                      able to be replaced with char.len_utf8() and/or \\"}, {"sha": "4cf93ab2645df79a91a9087f9c77c6c9a997925c", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -40,7 +40,7 @@ use std::string;\n \n /// A piece is a portion of the format string which represents the next part\n /// to emit. These are emitted as a stream by the `Parser` class.\n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum Piece<'a> {\n     /// A literal string which should directly be emitted\n     String(&'a str),\n@@ -50,7 +50,7 @@ pub enum Piece<'a> {\n }\n \n /// Representation of an argument specification.\n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub struct Argument<'a> {\n     /// Where to find this argument\n     pub position: Position<'a>,\n@@ -59,7 +59,7 @@ pub struct Argument<'a> {\n }\n \n /// Specification for the formatting of an argument in the format string.\n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub struct FormatSpec<'a> {\n     /// Optionally specified character to fill alignment with\n     pub fill: Option<char>,\n@@ -78,7 +78,7 @@ pub struct FormatSpec<'a> {\n }\n \n /// Enum describing where an argument for a format can be located.\n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum Position<'a> {\n     /// The argument will be in the next position. This is the default.\n     ArgumentNext,\n@@ -89,7 +89,7 @@ pub enum Position<'a> {\n }\n \n /// Enum of alignments which are supported.\n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum Alignment {\n     /// The value will be aligned to the left.\n     AlignLeft,\n@@ -103,7 +103,7 @@ pub enum Alignment {\n \n /// Various flags which can be applied to format strings. The meaning of these\n /// flags is defined by the formatters themselves.\n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum Flag {\n     /// A `+` will be used to denote positive numbers.\n     FlagSignPlus,\n@@ -119,7 +119,7 @@ pub enum Flag {\n \n /// A count is used for the precision and width parameters of an integer, and\n /// can reference either an argument or a literal integer.\n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum Count<'a> {\n     /// The count is specified explicitly.\n     CountIs(usize),"}, {"sha": "5c10641e8515e288d083bc0f87a2ed56c63d5d4f", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -213,7 +213,7 @@ pub enum Fail {\n }\n \n /// The type of failure that occurred.\n-#[derive(Copy, PartialEq, Eq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n #[allow(missing_docs)]\n pub enum FailType {\n     ArgumentMissing_,\n@@ -843,18 +843,18 @@ pub fn short_usage(program_name: &str, opts: &[OptGroup]) -> String {\n     line\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum SplitWithinState {\n     A,  // leading whitespace, initial state\n     B,  // words\n     C,  // internal and trailing whitespace\n }\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum Whitespace {\n     Ws, // current char is whitespace\n     Cr  // current char is not whitespace\n }\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum LengthLimit {\n     UnderLim, // current char makes current substring still fit in limit\n     OverLim   // current char makes current substring no longer fit in limit"}, {"sha": "95b78e1cbfd039a1b4d1e5665a0e4d4b0dd12830", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -524,7 +524,7 @@ pub trait GraphWalk<'a, N, E> {\n     fn target(&'a self, edge: &E) -> N;\n }\n \n-#[derive(Copy, PartialEq, Eq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum RenderOption {\n     NoEdgeLabels,\n     NoNodeLabels,"}, {"sha": "9265a3e1c1657fe369fcf4e61c9e1b8fc35537e5", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 148, "deletions": 141, "changes": 289, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -227,7 +227,7 @@ pub mod types {\n                 pub type rlim_t = u64;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct glob_t {\n+                #[derive(Copy, Clone)] pub struct glob_t {\n                     pub gl_pathc: size_t,\n                     pub gl_pathv: *mut *mut c_char,\n                     pub gl_offs:  size_t,\n@@ -240,23 +240,23 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct timeval {\n+                #[derive(Copy, Clone)] pub struct timeval {\n                     pub tv_sec: time_t,\n                     pub tv_usec: suseconds_t,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct timespec {\n+                #[derive(Copy, Clone)] pub struct timespec {\n                     pub tv_sec: time_t,\n                     pub tv_nsec: c_long,\n                 }\n \n-                #[derive(Copy)] pub enum timezone {}\n+                pub enum timezone {}\n \n                 pub type sighandler_t = size_t;\n \n                 #[repr(C)]\n-                #[derive(Copy)]\n+                #[derive(Copy, Clone)]\n                 pub struct rlimit {\n                     pub rlim_cur: rlim_t,\n                     pub rlim_max: rlim_t,\n@@ -269,7 +269,7 @@ pub mod types {\n                 // This is also specified in POSIX 2001, but only has two fields. All implementors\n                 // implement BSD 4.3 version.\n                 #[repr(C)]\n-                #[derive(Copy)]\n+                #[derive(Copy, Clone)]\n                 pub struct rusage {\n                     pub ru_utime: timeval,\n                     pub ru_stime: timeval,\n@@ -291,6 +291,7 @@ pub mod types {\n             }\n \n             pub mod bsd44 {\n+                use core::clone::Clone;\n                 use types::common::c95::{c_void};\n                 use types::os::arch::c95::{c_char, c_int, c_uint};\n \n@@ -299,7 +300,7 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr {\n+                #[derive(Copy, Clone)] pub struct sockaddr {\n                     pub sa_family: sa_family_t,\n                     pub sa_data: [u8; 14],\n                 }\n@@ -312,41 +313,44 @@ pub mod types {\n                     #[cfg(target_pointer_width = \"64\")]\n                     pub __ss_pad2: [u8; 128 - 2 * 8],\n                 }\n+                impl Clone for sockaddr_storage {\n+                    fn clone(&self) -> sockaddr_storage { *self }\n+                }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_in {\n+                #[derive(Copy, Clone)] pub struct sockaddr_in {\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n                     pub sin_zero: [u8; 8],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct in_addr {\n+                #[derive(Copy, Clone)] pub struct in_addr {\n                     pub s_addr: in_addr_t,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_in6 {\n+                #[derive(Copy, Clone)] pub struct sockaddr_in6 {\n                     pub sin6_family: sa_family_t,\n                     pub sin6_port: in_port_t,\n                     pub sin6_flowinfo: u32,\n                     pub sin6_addr: in6_addr,\n                     pub sin6_scope_id: u32,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct in6_addr {\n+                #[derive(Copy, Clone)] pub struct in6_addr {\n                     pub s6_addr: [u16; 8]\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ip_mreq {\n+                #[derive(Copy, Clone)] pub struct ip_mreq {\n                     pub imr_multiaddr: in_addr,\n                     pub imr_interface: in_addr,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ip6_mreq {\n+                #[derive(Copy, Clone)] pub struct ip6_mreq {\n                     pub ipv6mr_multiaddr: in6_addr,\n                     pub ipv6mr_interface: c_uint,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct addrinfo {\n+                #[derive(Copy, Clone)] pub struct addrinfo {\n                     pub ai_flags: c_int,\n                     pub ai_family: c_int,\n                     pub ai_socktype: c_int,\n@@ -372,9 +376,12 @@ pub mod types {\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char; 108]\n                 }\n+                impl Clone for sockaddr_un {\n+                    fn clone(&self) -> sockaddr_un { *self }\n+                }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ifaddrs {\n+                #[derive(Copy, Clone)] pub struct ifaddrs {\n                     pub ifa_next: *mut ifaddrs,\n                     pub ifa_name: *mut c_char,\n                     pub ifa_flags: c_uint,\n@@ -465,7 +472,7 @@ pub mod types {\n                 pub type blkcnt_t = i32;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct stat {\n+                #[derive(Copy, Clone)] pub struct stat {\n                     pub st_dev: dev_t,\n                     pub __pad1: c_short,\n                     pub st_ino: ino_t,\n@@ -489,13 +496,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct utimbuf {\n+                #[derive(Copy, Clone)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct pthread_attr_t {\n+                #[derive(Copy, Clone)] pub struct pthread_attr_t {\n                     pub __size: [u32; 9]\n                 }\n             }\n@@ -510,7 +517,7 @@ pub mod types {\n                 pub type blkcnt_t = u32;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct stat {\n+                #[derive(Copy, Clone)] pub struct stat {\n                     pub st_dev: c_ulonglong,\n                     pub __pad0: [c_uchar; 4],\n                     pub __st_ino: ino_t,\n@@ -533,13 +540,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct utimbuf {\n+                #[derive(Copy, Clone)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct pthread_attr_t {\n+                #[derive(Copy, Clone)] pub struct pthread_attr_t {\n                     pub __size: [u32; 9]\n                 }\n             }\n@@ -556,7 +563,7 @@ pub mod types {\n                 pub type blkcnt_t = i32;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct stat {\n+                #[derive(Copy, Clone)] pub struct stat {\n                     pub st_dev: c_ulong,\n                     pub st_pad1: [c_long; 3],\n                     pub st_ino: ino_t,\n@@ -580,13 +587,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct utimbuf {\n+                #[derive(Copy, Clone)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct pthread_attr_t {\n+                #[derive(Copy, Clone)] pub struct pthread_attr_t {\n                     pub __size: [u32; 9]\n                 }\n             }\n@@ -595,7 +602,7 @@ pub mod types {\n             pub mod extra {\n                 use types::os::arch::c95::{c_ushort, c_int, c_uchar};\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_ll {\n+                #[derive(Copy, Clone)] pub struct sockaddr_ll {\n                     pub sll_family: c_ushort,\n                     pub sll_protocol: c_ushort,\n                     pub sll_ifindex: c_int,\n@@ -667,7 +674,7 @@ pub mod types {\n                 pub type blkcnt_t = i64;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct stat {\n+                #[derive(Copy, Clone)] pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_ino: ino_t,\n                     pub st_nlink: nlink_t,\n@@ -689,13 +696,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct utimbuf {\n+                #[derive(Copy, Clone)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct pthread_attr_t {\n+                #[derive(Copy, Clone)] pub struct pthread_attr_t {\n                     pub __size: [u64; 7]\n                 }\n             }\n@@ -711,7 +718,7 @@ pub mod types {\n                 pub type blkcnt_t = i64;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct stat {\n+                #[derive(Copy, Clone)] pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_ino: ino_t,\n                     pub st_mode: mode_t,\n@@ -734,13 +741,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct utimbuf {\n+                #[derive(Copy, Clone)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct pthread_attr_t {\n+                #[derive(Copy, Clone)] pub struct pthread_attr_t {\n                     pub __size: [u64; 8]\n                 }\n             }\n@@ -750,7 +757,7 @@ pub mod types {\n             }\n             pub mod extra {\n                 use types::os::arch::c95::{c_ushort, c_int, c_uchar};\n-                #[derive(Copy)] pub struct sockaddr_ll {\n+                #[derive(Copy, Clone)] pub struct sockaddr_ll {\n                     pub sll_family: c_ushort,\n                     pub sll_protocol: c_ushort,\n                     pub sll_ifindex: c_int,\n@@ -777,7 +784,7 @@ pub mod types {\n                 pub type rlim_t = i64;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct glob_t {\n+                #[derive(Copy, Clone)] pub struct glob_t {\n                     pub gl_pathc:  size_t,\n                     pub __unused1: size_t,\n                     pub gl_offs:   size_t,\n@@ -794,23 +801,23 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct timeval {\n+                #[derive(Copy, Clone)] pub struct timeval {\n                     pub tv_sec: time_t,\n                     pub tv_usec: suseconds_t,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct timespec {\n+                #[derive(Copy, Clone)] pub struct timespec {\n                     pub tv_sec: time_t,\n                     pub tv_nsec: c_long,\n                 }\n \n-                #[derive(Copy)] pub enum timezone {}\n+                pub enum timezone {}\n \n                 pub type sighandler_t = size_t;\n \n                 #[repr(C)]\n-                #[derive(Copy)]\n+                #[derive(Copy, Clone)]\n                 pub struct rlimit {\n                     pub rlim_cur: rlim_t,\n                     pub rlim_max: rlim_t,\n@@ -821,7 +828,7 @@ pub mod types {\n                 use types::os::common::posix01::timeval;\n                 use types::os::arch::c95::c_long;\n                 #[repr(C)]\n-                #[derive(Copy)]\n+                #[derive(Copy, Clone)]\n                 pub struct rusage {\n                     pub ru_utime: timeval,\n                     pub ru_stime: timeval,\n@@ -851,33 +858,33 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr {\n+                #[derive(Copy, Clone)] pub struct sockaddr {\n                     pub sa_len: u8,\n                     pub sa_family: sa_family_t,\n                     pub sa_data: [u8; 14],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_storage {\n+                #[derive(Copy, Clone)] pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8; 6],\n                     pub __ss_align: i64,\n                     pub __ss_pad2: [u8; 112],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_in {\n+                #[derive(Copy, Clone)] pub struct sockaddr_in {\n                     pub sin_len: u8,\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n                     pub sin_zero: [u8; 8],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct in_addr {\n+                #[derive(Copy, Clone)] pub struct in_addr {\n                     pub s_addr: in_addr_t,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_in6 {\n+                #[derive(Copy, Clone)] pub struct sockaddr_in6 {\n                     pub sin6_len: u8,\n                     pub sin6_family: sa_family_t,\n                     pub sin6_port: in_port_t,\n@@ -886,21 +893,21 @@ pub mod types {\n                     pub sin6_scope_id: u32,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct in6_addr {\n+                #[derive(Copy, Clone)] pub struct in6_addr {\n                     pub s6_addr: [u16; 8]\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ip_mreq {\n+                #[derive(Copy, Clone)] pub struct ip_mreq {\n                     pub imr_multiaddr: in_addr,\n                     pub imr_interface: in_addr,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ip6_mreq {\n+                #[derive(Copy, Clone)] pub struct ip6_mreq {\n                     pub ipv6mr_multiaddr: in6_addr,\n                     pub ipv6mr_interface: c_uint,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct addrinfo {\n+                #[derive(Copy, Clone)] pub struct addrinfo {\n                     pub ai_flags: c_int,\n                     pub ai_family: c_int,\n                     pub ai_socktype: c_int,\n@@ -911,13 +918,13 @@ pub mod types {\n                     pub ai_next: *mut addrinfo,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_un {\n+                #[derive(Copy, Clone)] pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char; 104]\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ifaddrs {\n+                #[derive(Copy, Clone)] pub struct ifaddrs {\n                     pub ifa_next: *mut ifaddrs,\n                     pub ifa_name: *mut c_char,\n                     pub ifa_flags: c_uint,\n@@ -984,7 +991,7 @@ pub mod types {\n                 pub type blkcnt_t = i64;\n                 pub type fflags_t = u32;\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct stat {\n+                #[derive(Copy, Clone)] pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_ino: ino_t,\n                     pub st_mode: mode_t,\n@@ -1010,7 +1017,7 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct utimbuf {\n+                #[derive(Copy, Clone)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n@@ -1039,7 +1046,7 @@ pub mod types {\n                 pub type rlim_t = i64;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct glob_t {\n+                #[derive(Copy, Clone)] pub struct glob_t {\n                     pub gl_pathc:  size_t,\n                     pub __unused1: size_t,\n                     pub gl_offs:   size_t,\n@@ -1056,23 +1063,23 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct timeval {\n+                #[derive(Copy, Clone)] pub struct timeval {\n                     pub tv_sec: time_t,\n                     pub tv_usec: suseconds_t,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct timespec {\n+                #[derive(Copy, Clone)] pub struct timespec {\n                     pub tv_sec: time_t,\n                     pub tv_nsec: c_long,\n                 }\n \n-                #[derive(Copy)] pub enum timezone {}\n+                pub enum timezone {}\n \n                 pub type sighandler_t = size_t;\n \n                 #[repr(C)]\n-                #[derive(Copy)]\n+                #[derive(Copy, Clone)]\n                 pub struct rlimit {\n                     pub rlim_cur: rlim_t,\n                     pub rlim_max: rlim_t,\n@@ -1083,7 +1090,7 @@ pub mod types {\n                 use types::os::common::posix01::timeval;\n                 use types::os::arch::c95::c_long;\n                 #[repr(C)]\n-                #[derive(Copy)]\n+                #[derive(Copy, Clone)]\n                 pub struct rusage {\n                     pub ru_utime: timeval,\n                     pub ru_stime: timeval,\n@@ -1113,33 +1120,33 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr {\n+                #[derive(Copy, Clone)] pub struct sockaddr {\n                     pub sa_len: u8,\n                     pub sa_family: sa_family_t,\n                     pub sa_data: [u8; 14],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_storage {\n+                #[derive(Copy, Clone)] pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8; 6],\n                     pub __ss_align: i64,\n                     pub __ss_pad2: [u8; 112],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_in {\n+                #[derive(Copy, Clone)] pub struct sockaddr_in {\n                     pub sin_len: u8,\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n                     pub sin_zero: [u8; 8],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct in_addr {\n+                #[derive(Copy, Clone)] pub struct in_addr {\n                     pub s_addr: in_addr_t,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_in6 {\n+                #[derive(Copy, Clone)] pub struct sockaddr_in6 {\n                     pub sin6_len: u8,\n                     pub sin6_family: sa_family_t,\n                     pub sin6_port: in_port_t,\n@@ -1148,21 +1155,21 @@ pub mod types {\n                     pub sin6_scope_id: u32,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct in6_addr {\n+                #[derive(Copy, Clone)] pub struct in6_addr {\n                     pub s6_addr: [u16; 8]\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ip_mreq {\n+                #[derive(Copy, Clone)] pub struct ip_mreq {\n                     pub imr_multiaddr: in_addr,\n                     pub imr_interface: in_addr,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ip6_mreq {\n+                #[derive(Copy, Clone)] pub struct ip6_mreq {\n                     pub ipv6mr_multiaddr: in6_addr,\n                     pub ipv6mr_interface: c_uint,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct addrinfo {\n+                #[derive(Copy, Clone)] pub struct addrinfo {\n                     pub ai_flags: c_int,\n                     pub ai_family: c_int,\n                     pub ai_socktype: c_int,\n@@ -1173,13 +1180,13 @@ pub mod types {\n                     pub ai_next: *mut addrinfo,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_un {\n+                #[derive(Copy, Clone)] pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char; 104]\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ifaddrs {\n+                #[derive(Copy, Clone)] pub struct ifaddrs {\n                     pub ifa_next: *mut ifaddrs,\n                     pub ifa_name: *mut c_char,\n                     pub ifa_flags: c_uint,\n@@ -1246,7 +1253,7 @@ pub mod types {\n                 pub type fflags_t = u32;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct stat {\n+                #[derive(Copy, Clone)] pub struct stat {\n                     pub st_ino: ino_t,\n                     pub st_nlink: nlink_t,\n                     pub st_dev: dev_t,\n@@ -1271,7 +1278,7 @@ pub mod types {\n                     pub st_qspare2: int64_t,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct utimbuf {\n+                #[derive(Copy, Clone)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n@@ -1301,7 +1308,7 @@ pub mod types {\n \n                 #[cfg(target_os = \"bitrig\")]\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct glob_t {\n+                #[derive(Copy, Clone)] pub struct glob_t {\n                     pub gl_pathc:  c_int,\n                     pub gl_matchc: c_int,\n                     pub gl_offs:   c_int,\n@@ -1318,7 +1325,7 @@ pub mod types {\n \n                 #[cfg(target_os = \"openbsd\")]\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct glob_t {\n+                #[derive(Copy, Clone)] pub struct glob_t {\n                     pub gl_pathc:  c_int,\n                     pub __unused1: c_int,\n                     pub gl_offs:   c_int,\n@@ -1336,23 +1343,23 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct timeval {\n+                #[derive(Copy, Clone)] pub struct timeval {\n                     pub tv_sec: time_t,\n                     pub tv_usec: suseconds_t,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct timespec {\n+                #[derive(Copy, Clone)] pub struct timespec {\n                     pub tv_sec: time_t,\n                     pub tv_nsec: c_long,\n                 }\n \n-                #[derive(Copy)] pub enum timezone {}\n+                pub enum timezone {}\n \n                 pub type sighandler_t = size_t;\n \n                 #[repr(C)]\n-                #[derive(Copy)]\n+                #[derive(Copy, Clone)]\n                 pub struct rlimit {\n                     pub rlim_cur: rlim_t,\n                     pub rlim_max: rlim_t,\n@@ -1363,7 +1370,7 @@ pub mod types {\n                 use types::os::common::posix01::timeval;\n                 use types::os::arch::c95::c_long;\n                 #[repr(C)]\n-                #[derive(Copy)]\n+                #[derive(Copy, Clone)]\n                 pub struct rusage {\n                     pub ru_utime: timeval,\n                     pub ru_stime: timeval,\n@@ -1393,33 +1400,33 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr {\n+                #[derive(Copy, Clone)] pub struct sockaddr {\n                     pub sa_len: u8,\n                     pub sa_family: sa_family_t,\n                     pub sa_data: [u8; 14],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_storage {\n+                #[derive(Copy, Clone)] pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8; 6],\n                     pub __ss_pad2: i64,\n                     pub __ss_pad3: [u8; 240],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_in {\n+                #[derive(Copy, Clone)] pub struct sockaddr_in {\n                     pub sin_len: u8,\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n                     pub sin_zero: [u8; 8],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct in_addr {\n+                #[derive(Copy, Clone)] pub struct in_addr {\n                     pub s_addr: in_addr_t,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_in6 {\n+                #[derive(Copy, Clone)] pub struct sockaddr_in6 {\n                     pub sin6_len: u8,\n                     pub sin6_family: sa_family_t,\n                     pub sin6_port: in_port_t,\n@@ -1428,21 +1435,21 @@ pub mod types {\n                     pub sin6_scope_id: u32,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct in6_addr {\n+                #[derive(Copy, Clone)] pub struct in6_addr {\n                     pub s6_addr: [u16; 8]\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ip_mreq {\n+                #[derive(Copy, Clone)] pub struct ip_mreq {\n                     pub imr_multiaddr: in_addr,\n                     pub imr_interface: in_addr,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ip6_mreq {\n+                #[derive(Copy, Clone)] pub struct ip6_mreq {\n                     pub ipv6mr_multiaddr: in6_addr,\n                     pub ipv6mr_interface: c_uint,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct addrinfo {\n+                #[derive(Copy, Clone)] pub struct addrinfo {\n                     pub ai_flags: c_int,\n                     pub ai_family: c_int,\n                     pub ai_socktype: c_int,\n@@ -1453,13 +1460,13 @@ pub mod types {\n                     pub ai_next: *mut addrinfo,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_un {\n+                #[derive(Copy, Clone)] pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char; 104]\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ifaddrs {\n+                #[derive(Copy, Clone)] pub struct ifaddrs {\n                     pub ifa_next: *mut ifaddrs,\n                     pub ifa_name: *mut c_char,\n                     pub ifa_flags: c_uint,\n@@ -1526,7 +1533,7 @@ pub mod types {\n                 pub type fflags_t = u32; // type not declared, but struct stat have u_int32_t\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct stat {\n+                #[derive(Copy, Clone)] pub struct stat {\n                     pub st_mode: mode_t,\n                     pub st_dev: dev_t,\n                     pub st_ino: ino_t,\n@@ -1549,7 +1556,7 @@ pub mod types {\n                     pub st_birthtime_nsec: c_long,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct utimbuf {\n+                #[derive(Copy, Clone)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n@@ -1576,7 +1583,7 @@ pub mod types {\n                 // pub Note: this is the struct called stat64 in Windows. Not stat,\n                 // nor stati64.\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct stat {\n+                #[derive(Copy, Clone)] pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_ino: ino_t,\n                     pub st_mode: u16,\n@@ -1592,24 +1599,24 @@ pub mod types {\n \n                 // note that this is called utimbuf64 in Windows\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct utimbuf {\n+                #[derive(Copy, Clone)] pub struct utimbuf {\n                     pub actime: time64_t,\n                     pub modtime: time64_t,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct timeval {\n+                #[derive(Copy, Clone)] pub struct timeval {\n                     pub tv_sec: c_long,\n                     pub tv_usec: c_long,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct timespec {\n+                #[derive(Copy, Clone)] pub struct timespec {\n                     pub tv_sec: time_t,\n                     pub tv_nsec: c_long,\n                 }\n \n-                #[derive(Copy)] pub enum timezone {}\n+                pub enum timezone {}\n             }\n \n             pub mod bsd44 {\n@@ -1622,52 +1629,52 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr {\n+                #[derive(Copy, Clone)] pub struct sockaddr {\n                     pub sa_family: sa_family_t,\n                     pub sa_data: [u8; 14],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_storage {\n+                #[derive(Copy, Clone)] pub struct sockaddr_storage {\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8; 6],\n                     pub __ss_align: i64,\n                     pub __ss_pad2: [u8; 112],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_in {\n+                #[derive(Copy, Clone)] pub struct sockaddr_in {\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n                     pub sin_zero: [u8; 8],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct in_addr {\n+                #[derive(Copy, Clone)] pub struct in_addr {\n                     pub s_addr: in_addr_t,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_in6 {\n+                #[derive(Copy, Clone)] pub struct sockaddr_in6 {\n                     pub sin6_family: sa_family_t,\n                     pub sin6_port: in_port_t,\n                     pub sin6_flowinfo: u32,\n                     pub sin6_addr: in6_addr,\n                     pub sin6_scope_id: u32,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct in6_addr {\n+                #[derive(Copy, Clone)] pub struct in6_addr {\n                     pub s6_addr: [u16; 8]\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ip_mreq {\n+                #[derive(Copy, Clone)] pub struct ip_mreq {\n                     pub imr_multiaddr: in_addr,\n                     pub imr_interface: in_addr,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ip6_mreq {\n+                #[derive(Copy, Clone)] pub struct ip6_mreq {\n                     pub ipv6mr_multiaddr: in6_addr,\n                     pub ipv6mr_interface: c_uint,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct addrinfo {\n+                #[derive(Copy, Clone)] pub struct addrinfo {\n                     pub ai_flags: c_int,\n                     pub ai_family: c_int,\n                     pub ai_socktype: c_int,\n@@ -1678,7 +1685,7 @@ pub mod types {\n                     pub ai_next: *mut addrinfo,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_un {\n+                #[derive(Copy, Clone)] pub struct sockaddr_un {\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char; 108]\n                 }\n@@ -1807,7 +1814,7 @@ pub mod types {\n                 pub type LPCH = *mut CHAR;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct SECURITY_ATTRIBUTES {\n+                #[derive(Copy, Clone)] pub struct SECURITY_ATTRIBUTES {\n                     pub nLength: DWORD,\n                     pub lpSecurityDescriptor: LPVOID,\n                     pub bInheritHandle: BOOL,\n@@ -1831,7 +1838,7 @@ pub mod types {\n                 pub type int64 = i64;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct STARTUPINFO {\n+                #[derive(Copy, Clone)] pub struct STARTUPINFO {\n                     pub cb: DWORD,\n                     pub lpReserved: LPWSTR,\n                     pub lpDesktop: LPWSTR,\n@@ -1854,7 +1861,7 @@ pub mod types {\n                 pub type LPSTARTUPINFO = *mut STARTUPINFO;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct PROCESS_INFORMATION {\n+                #[derive(Copy, Clone)] pub struct PROCESS_INFORMATION {\n                     pub hProcess: HANDLE,\n                     pub hThread: HANDLE,\n                     pub dwProcessId: DWORD,\n@@ -1863,7 +1870,7 @@ pub mod types {\n                 pub type LPPROCESS_INFORMATION = *mut PROCESS_INFORMATION;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct SYSTEM_INFO {\n+                #[derive(Copy, Clone)] pub struct SYSTEM_INFO {\n                     pub wProcessorArchitecture: WORD,\n                     pub wReserved: WORD,\n                     pub dwPageSize: DWORD,\n@@ -1879,7 +1886,7 @@ pub mod types {\n                 pub type LPSYSTEM_INFO = *mut SYSTEM_INFO;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct MEMORY_BASIC_INFORMATION {\n+                #[derive(Copy, Clone)] pub struct MEMORY_BASIC_INFORMATION {\n                     pub BaseAddress: LPVOID,\n                     pub AllocationBase: LPVOID,\n                     pub AllocationProtect: DWORD,\n@@ -1891,7 +1898,7 @@ pub mod types {\n                 pub type LPMEMORY_BASIC_INFORMATION = *mut MEMORY_BASIC_INFORMATION;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct OVERLAPPED {\n+                #[derive(Copy, Clone)] pub struct OVERLAPPED {\n                     pub Internal: *mut c_ulong,\n                     pub InternalHigh: *mut c_ulong,\n                     pub Offset: DWORD,\n@@ -1902,31 +1909,31 @@ pub mod types {\n                 pub type LPOVERLAPPED = *mut OVERLAPPED;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct FILETIME {\n+                #[derive(Copy, Clone)] pub struct FILETIME {\n                     pub dwLowDateTime: DWORD,\n                     pub dwHighDateTime: DWORD,\n                 }\n \n                 pub type LPFILETIME = *mut FILETIME;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct GUID {\n+                #[derive(Copy, Clone)] pub struct GUID {\n                     pub Data1: DWORD,\n                     pub Data2: WORD,\n                     pub Data3: WORD,\n                     pub Data4: [BYTE; 8],\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct WSAPROTOCOLCHAIN {\n+                #[derive(Copy, Clone)] pub struct WSAPROTOCOLCHAIN {\n                     pub ChainLen: c_int,\n                     pub ChainEntries: [DWORD; MAX_PROTOCOL_CHAIN as usize],\n                 }\n \n                 pub type LPWSAPROTOCOLCHAIN = *mut WSAPROTOCOLCHAIN;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct WSAPROTOCOL_INFO {\n+                #[derive(Copy, Clone)] pub struct WSAPROTOCOL_INFO {\n                     pub dwServiceFlags1: DWORD,\n                     pub dwServiceFlags2: DWORD,\n                     pub dwServiceFlags3: DWORD,\n@@ -1954,7 +1961,7 @@ pub mod types {\n                 pub type GROUP = c_uint;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct WIN32_FIND_DATAW {\n+                #[derive(Copy, Clone)] pub struct WIN32_FIND_DATAW {\n                     pub dwFileAttributes: DWORD,\n                     pub ftCreationTime: FILETIME,\n                     pub ftLastAccessTime: FILETIME,\n@@ -1985,7 +1992,7 @@ pub mod types {\n                 pub type rlim_t = u64;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct glob_t {\n+                #[derive(Copy, Clone)] pub struct glob_t {\n                     pub gl_pathc:  size_t,\n                     pub __unused1: c_int,\n                     pub gl_offs:   size_t,\n@@ -2002,23 +2009,23 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct timeval {\n+                #[derive(Copy, Clone)] pub struct timeval {\n                     pub tv_sec: time_t,\n                     pub tv_usec: suseconds_t,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct timespec {\n+                #[derive(Copy, Clone)] pub struct timespec {\n                     pub tv_sec: time_t,\n                     pub tv_nsec: c_long,\n                 }\n \n-                #[derive(Copy)] pub enum timezone {}\n+                pub enum timezone {}\n \n                 pub type sighandler_t = size_t;\n \n                 #[repr(C)]\n-                #[derive(Copy)]\n+                #[derive(Copy, Clone)]\n                 pub struct rlimit {\n                     pub rlim_cur: rlim_t,\n                     pub rlim_max: rlim_t,\n@@ -2029,7 +2036,7 @@ pub mod types {\n                 use types::os::common::posix01::timeval;\n                 use types::os::arch::c95::c_long;\n                 #[repr(C)]\n-                #[derive(Copy)]\n+                #[derive(Copy, Clone)]\n                 pub struct rusage {\n                     pub ru_utime: timeval,\n                     pub ru_stime: timeval,\n@@ -2059,14 +2066,14 @@ pub mod types {\n                 pub type in_port_t = u16;\n                 pub type in_addr_t = u32;\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr {\n+                #[derive(Copy, Clone)] pub struct sockaddr {\n                     pub sa_len: u8,\n                     pub sa_family: sa_family_t,\n                     pub sa_data: [u8; 14],\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_storage {\n+                #[derive(Copy, Clone)] pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8; 6],\n@@ -2075,7 +2082,7 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_in {\n+                #[derive(Copy, Clone)] pub struct sockaddr_in {\n                     pub sin_len: u8,\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n@@ -2084,12 +2091,12 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct in_addr {\n+                #[derive(Copy, Clone)] pub struct in_addr {\n                     pub s_addr: in_addr_t,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_in6 {\n+                #[derive(Copy, Clone)] pub struct sockaddr_in6 {\n                     pub sin6_len: u8,\n                     pub sin6_family: sa_family_t,\n                     pub sin6_port: in_port_t,\n@@ -2099,24 +2106,24 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct in6_addr {\n+                #[derive(Copy, Clone)] pub struct in6_addr {\n                     pub s6_addr: [u16; 8]\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ip_mreq {\n+                #[derive(Copy, Clone)] pub struct ip_mreq {\n                     pub imr_multiaddr: in_addr,\n                     pub imr_interface: in_addr,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ip6_mreq {\n+                #[derive(Copy, Clone)] pub struct ip6_mreq {\n                     pub ipv6mr_multiaddr: in6_addr,\n                     pub ipv6mr_interface: c_uint,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct addrinfo {\n+                #[derive(Copy, Clone)] pub struct addrinfo {\n                     pub ai_flags: c_int,\n                     pub ai_family: c_int,\n                     pub ai_socktype: c_int,\n@@ -2128,14 +2135,14 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct sockaddr_un {\n+                #[derive(Copy, Clone)] pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char; 104]\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct ifaddrs {\n+                #[derive(Copy, Clone)] pub struct ifaddrs {\n                     pub ifa_next: *mut ifaddrs,\n                     pub ifa_name: *mut c_char,\n                     pub ifa_flags: c_uint,\n@@ -2200,7 +2207,7 @@ pub mod types {\n                 pub type blkcnt_t = i64;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct stat {\n+                #[derive(Copy, Clone)] pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_mode: mode_t,\n                     pub st_nlink: nlink_t,\n@@ -2226,13 +2233,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct utimbuf {\n+                #[derive(Copy, Clone)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct pthread_attr_t {\n+                #[derive(Copy, Clone)] pub struct pthread_attr_t {\n                     pub __sig: c_long,\n                     pub __opaque: [c_char; 36]\n                 }\n@@ -2243,7 +2250,7 @@ pub mod types {\n             }\n             pub mod extra {\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct mach_timebase_info {\n+                #[derive(Copy, Clone)] pub struct mach_timebase_info {\n                     pub numer: u32,\n                     pub denom: u32,\n                 }\n@@ -2306,7 +2313,7 @@ pub mod types {\n                 pub type blkcnt_t = i64;\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct stat {\n+                #[derive(Copy, Clone)] pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_mode: mode_t,\n                     pub st_nlink: nlink_t,\n@@ -2332,13 +2339,13 @@ pub mod types {\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct utimbuf {\n+                #[derive(Copy, Clone)] pub struct utimbuf {\n                     pub actime: time_t,\n                     pub modtime: time_t,\n                 }\n \n                 #[repr(C)]\n-                #[derive(Copy)] pub struct pthread_attr_t {\n+                #[derive(Copy, Clone)] pub struct pthread_attr_t {\n                     pub __sig: c_long,\n                     pub __opaque: [c_char; 56]\n                 }\n@@ -2349,7 +2356,7 @@ pub mod types {\n             }\n             pub mod extra {\n                 #[repr(C)]\n-                #[derive(Copy)] pub struct mach_timebase_info {\n+                #[derive(Copy, Clone)] pub struct mach_timebase_info {\n                     pub numer: u32,\n                     pub denom: u32,\n                 }"}, {"sha": "453d087196b1318c57b95e19c202c2f3e2dc7b56", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -239,7 +239,7 @@ pub trait Logger {\n struct DefaultLogger { handle: Stderr }\n \n /// Wraps the log level with fmt implementations.\n-#[derive(Copy, PartialEq, PartialOrd, Debug)]\n+#[derive(Copy, Clone, PartialEq, PartialOrd, Debug)]\n pub struct LogLevel(pub u32);\n \n impl fmt::Display for LogLevel {\n@@ -355,7 +355,7 @@ pub struct LogRecord<'a> {\n }\n \n #[doc(hidden)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct LogLocation {\n     pub module_path: &'static str,\n     pub file: &'static str,"}, {"sha": "2ba3164e1b0617125244ad53d3d60baacda3b697", "filename": "src/librand/distributions/exponential.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fexponential.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -29,7 +29,7 @@ use distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n /// Generate Normal Random\n /// Samples*](http://www.doornik.com/research/ziggurat.pdf). Nuffield\n /// College, Oxford\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Exp1(pub f64);\n \n // This could be done via `-rng.gen::<f64>().ln()` but that is slower.\n@@ -68,7 +68,7 @@ impl Rand for Exp1 {\n /// let v = exp.ind_sample(&mut rand::thread_rng());\n /// println!(\"{} is from a Exp(2) distribution\", v);\n /// ```\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Exp {\n     /// `lambda` stored as `1/lambda`, since this is what we scale by.\n     lambda_inverse: f64"}, {"sha": "fa41c3edfe5ac4e49655f7119ad985c375950ac6", "filename": "src/librand/distributions/normal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fnormal.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -28,7 +28,7 @@ use distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n /// Generate Normal Random\n /// Samples*](http://www.doornik.com/research/ziggurat.pdf). Nuffield\n /// College, Oxford\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct StandardNormal(pub f64);\n \n impl Rand for StandardNormal {\n@@ -85,7 +85,7 @@ impl Rand for StandardNormal {\n /// let v = normal.ind_sample(&mut rand::thread_rng());\n /// println!(\"{} is from a N(2, 9) distribution\", v)\n /// ```\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Normal {\n     mean: f64,\n     std_dev: f64,\n@@ -134,7 +134,7 @@ impl IndependentSample<f64> for Normal {\n /// let v = log_normal.ind_sample(&mut rand::thread_rng());\n /// println!(\"{} is from an ln N(2, 9) distribution\", v)\n /// ```\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct LogNormal {\n     norm: Normal\n }"}, {"sha": "98d1bbf5af9da0b54ccdceac90c230fc30722e07", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -134,7 +134,7 @@ pub trait Reseeder<R> {\n \n /// Reseed an RNG using a `Default` instance. This reseeds by\n /// replacing the RNG with the result of a `Default::default` call.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct ReseedWithDefault;\n \n impl<R: Rng + Default> Reseeder<R> for ReseedWithDefault {"}, {"sha": "e2875ac8ca529479ab904f06a0c843375c880b6e", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -175,7 +175,7 @@ pub struct TaggedDoc<'a> {\n     pub doc: Doc<'a>,\n }\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum EbmlEncoderTag {\n     // tags 00..1f are reserved for auto-serialization.\n     // first NUM_IMPLICIT_TAGS tags are implicitly sized and lengths are not encoded.\n@@ -265,7 +265,7 @@ pub mod reader {\n         )\n     }\n \n-    #[derive(Copy)]\n+    #[derive(Copy, Clone)]\n     pub struct Res {\n         pub val: usize,\n         pub next: usize"}, {"sha": "495044f9459494f738fa501c229b69de93f22da3", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -113,7 +113,7 @@ declare_lint! {\n }\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct HardwiredLints;\n \n impl LintPass for HardwiredLints {"}, {"sha": "498b2ce518c16dc6055166053e19ed7ac5cb8b20", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -41,7 +41,7 @@ pub use lint::context::{Context, LintStore, raw_emit_lint, check_crate, gather_a\n                         GatherNodeLevels};\n \n /// Specification of a single lint.\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub struct Lint {\n     /// A string identifier for the lint.\n     ///"}, {"sha": "cda0084768644a599a98b438b52539d184758109", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -116,7 +116,7 @@ pub const tag_items_data_item_reexport_def_id: usize = 0x47;\n pub const tag_items_data_item_reexport_name: usize = 0x48;\n \n // used to encode crate_ctxt side tables\n-#[derive(Copy, PartialEq, FromPrimitive)]\n+#[derive(Copy, Clone, PartialEq, FromPrimitive)]\n #[repr(usize)]\n pub enum astencode_tag { // Reserves 0x50 -- 0x6f\n     tag_ast = 0x50,"}, {"sha": "d528e38d341cfe099a80acf0f37d039e9bc3c107", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -29,7 +29,7 @@ use syntax::parse::token;\n \n use std::collections::hash_map::HashMap;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct MethodInfo {\n     pub name: ast::Name,\n     pub def_id: ast::DefId,"}, {"sha": "1567f4b99475cb1fe345e0f1983f487cb695e12b", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -21,7 +21,7 @@ use std::path::{Path, PathBuf};\n use util::fs as myfs;\n use session::search_paths::{SearchPaths, PathKind};\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum FileMatch {\n     FileMatches,\n     FileDoesntMatch,"}, {"sha": "3fb128b1881f5b949bed0c91cc9c73b7ba1ba365", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -43,7 +43,7 @@ use syntax::parse::token;\n // def-id will depend on where it originated from.  Therefore, the conversion\n // function is given an indicator of the source of the def-id.  See\n // astencode.rs for more information.\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum DefIdSource {\n     // Identifies a struct, trait, enum, etc.\n     NominalType,"}, {"sha": "cbc2ef1535ea6794b5705bfe15c0d27fbb16dce1", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -25,7 +25,7 @@ struct CFGBuilder<'a, 'tcx: 'a> {\n     loop_scopes: Vec<LoopScope>,\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct LoopScope {\n     loop_id: ast::NodeId,     // id of loop/while node\n     continue_index: CFGIndex, // where to go on a `loop`"}, {"sha": "ad4fdcd7b834ef2e5b0bc427820d2ce5f522d9eb", "filename": "src/librustc/middle/cfg/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fmod.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -24,7 +24,7 @@ pub struct CFG {\n     pub exit: CFGIndex,\n }\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum CFGNodeData {\n     AST(ast::NodeId),\n     Entry,"}, {"sha": "ce011f2561b79f661744aa78f613fff58e023a23", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -76,7 +76,7 @@ bitflags! {\n     }\n }\n \n-#[derive(Copy, Eq, PartialEq)]\n+#[derive(Copy, Clone, Eq, PartialEq)]\n enum Mode {\n     Const,\n     Static,"}, {"sha": "bf6829d96765058feea270ec09378d460ecfad1a", "filename": "src/librustc/middle/check_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -21,7 +21,7 @@ enum Context {\n     Normal, Loop, Closure\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct CheckLoopVisitor<'a> {\n     sess: &'a Session,\n     cx: Context"}, {"sha": "79f4d62b45e75fb41740fada747d1a5274163cc4", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -128,7 +128,7 @@ enum Usefulness {\n     NotUseful\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum WitnessPreference {\n     ConstructWitness,\n     LeaveOutWitness"}, {"sha": "f69ac030520922a471d9212d1c90922c9daf25c6", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -28,7 +28,7 @@ use syntax::visit;\n use syntax::print::{pp, pprust};\n use util::nodemap::NodeMap;\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum EntryOrExit {\n     Entry,\n     Exit,"}, {"sha": "6707a4d3fd775454ca0d9a109469a08c6cf3c9a9", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -104,7 +104,7 @@ pub type DefMap = RefCell<NodeMap<PathResolution>>;\n // within.\n pub type ExportMap = NodeMap<Vec<Export>>;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Export {\n     pub name: ast::Name,    // The name of the target.\n     pub def_id: ast::DefId, // The definition of the target."}, {"sha": "814492cbef1dd3fca1dd8d3d92d3f7c46fcd2303", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -22,7 +22,7 @@ use syntax::codemap::Span;\n use syntax::visit;\n use syntax::visit::Visitor;\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n enum UnsafeContext {\n     SafeContext,\n     UnsafeFn,"}, {"sha": "2fa9c7c8fbebb0a7e8ceb794b5926ace6f818259", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -94,7 +94,7 @@ pub trait Delegate<'tcx> {\n               mode: MutateMode);\n }\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum LoanCause {\n     ClosureCapture(Span),\n     AddrOf,\n@@ -106,28 +106,28 @@ pub enum LoanCause {\n     MatchDiscriminant\n }\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum ConsumeMode {\n     Copy,                // reference to x where x has a type that copies\n     Move(MoveReason),    // reference to x where x has a type that moves\n }\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum MoveReason {\n     DirectRefMove,\n     PatBindingMove,\n     CaptureMove,\n }\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum MatchMode {\n     NonBindingMatch,\n     BorrowingMatch,\n     CopyingMatch,\n     MovingMatch,\n }\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n enum TrackMatchMode {\n     Unknown,\n     Definite(MatchMode),\n@@ -194,14 +194,14 @@ impl TrackMatchMode {\n     }\n }\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum MutateMode {\n     Init,\n     JustWrite,    // x = y\n     WriteAndRead, // x += y\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum OverloadedCallType {\n     FnOverloadedCall,\n     FnMutOverloadedCall,"}, {"sha": "a9ac61b49eca8bd247ffd8a7ce06e0275db5521b", "filename": "src/librustc/middle/graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fgraph.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -66,13 +66,13 @@ pub struct NodeIndex(pub usize);\n #[allow(non_upper_case_globals)]\n pub const InvalidNodeIndex: NodeIndex = NodeIndex(usize::MAX);\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub struct EdgeIndex(pub usize);\n #[allow(non_upper_case_globals)]\n pub const InvalidEdgeIndex: EdgeIndex = EdgeIndex(usize::MAX);\n \n // Use a private field here to guarantee no more instances are created:\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub struct Direction { repr: usize }\n #[allow(non_upper_case_globals)]\n pub const Outgoing: Direction = Direction { repr: 0 };"}, {"sha": "b11e25c059d08ffafc1af1184063aeef34f9982e", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -290,7 +290,7 @@ pub enum RegionVariableOrigin {\n     BoundRegionInCoherence(ast::Name),\n }\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum fixup_err {\n     unresolved_int_ty(IntVid),\n     unresolved_float_ty(FloatVid),"}, {"sha": "d41fdc5f09acd4a03a8959ef94524f84a8dda44c", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -74,13 +74,13 @@ pub enum GenericKind<'tcx> {\n     Projection(ty::ProjectionTy<'tcx>),\n }\n \n-#[derive(Copy, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n pub struct TwoRegions {\n     a: Region,\n     b: Region,\n }\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum UndoLogEntry {\n     OpenSnapshot,\n     CommitedSnapshot,\n@@ -91,7 +91,7 @@ pub enum UndoLogEntry {\n     AddCombination(CombineMapType, TwoRegions)\n }\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum CombineMapType {\n     Lub, Glb\n }\n@@ -951,10 +951,10 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n \n // ______________________________________________________________________\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n enum Classification { Expanding, Contracting }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum VarValue { NoValue, Value(Region), ErrorValue }\n \n struct VarData {"}, {"sha": "03612a6c1ae5bc2401e5ddc3ca4b82e1ed0a48f3", "filename": "src/librustc/middle/infer/type_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ftype_variable.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -47,7 +47,7 @@ struct Delegate<'tcx>(PhantomData<&'tcx ()>);\n \n type Relation = (RelationDir, ty::TyVid);\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum RelationDir {\n     SubtypeOf, SupertypeOf, EqTo, BiTo\n }"}, {"sha": "4bbced1d75caf970924f990f25bd9ee2ae7fc336", "filename": "src/librustc/middle/infer/unify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Funify.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -84,7 +84,7 @@ pub struct Node<K:UnifyKey> {\n     pub rank: usize,\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Delegate<K>(PhantomData<K>);\n \n // We can't use V:LatticeValue, much as I would like to,"}, {"sha": "a08de58f909d3a5f177161d4a074be53b10700e0", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -46,7 +46,7 @@ macro_rules! lets_do_this {\n         $( $variant:ident, $name:expr, $method:ident; )*\n     ) => {\n \n-#[derive(Copy, FromPrimitive, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, FromPrimitive, PartialEq, Eq, Hash)]\n pub enum LangItem {\n     $($variant),*\n }"}, {"sha": "d7161607b61eb9c3e9a1ea032db5e76b42894166", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -139,7 +139,7 @@ enum LoopKind<'a> {\n     WhileLoop(&'a Expr),\n }\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n struct Variable(usize);\n \n #[derive(Copy, PartialEq)]\n@@ -159,7 +159,7 @@ impl Clone for LiveNode {\n     }\n }\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n enum LiveNodeKind {\n     FreeVarNode(Span),\n     ExprNode(Span),\n@@ -245,13 +245,13 @@ struct CaptureInfo {\n     var_nid: NodeId\n }\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n struct LocalInfo {\n     id: NodeId,\n     ident: ast::Ident\n }\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n enum VarKind {\n     Arg(NodeId, ast::Ident),\n     Local(LocalInfo),\n@@ -534,7 +534,7 @@ fn invalid_users() -> Users {\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Specials {\n     exit_ln: LiveNode,\n     fallthrough_ln: LiveNode,"}, {"sha": "85255d04df4329adc0033d8451fa3940f62379cb", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -199,7 +199,7 @@ pub type cmt<'tcx> = Rc<cmt_<'tcx>>;\n \n // We pun on *T to mean both actual deref of a ptr as well\n // as accessing of components:\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum deref_kind {\n     deref_ptr(PointerKind),\n     deref_interior(InteriorKind),\n@@ -263,6 +263,9 @@ pub struct MemCategorizationContext<'t,TYPER:'t> {\n }\n \n impl<'t,TYPER:'t> Copy for MemCategorizationContext<'t,TYPER> {}\n+impl<'t,TYPER:'t> Clone for MemCategorizationContext<'t,TYPER> {\n+    fn clone(&self) -> MemCategorizationContext<'t,TYPER> { *self }\n+}\n \n pub type McResult<T> = Result<T, ()>;\n "}, {"sha": "652f661325206fdf89ba15fc839c8e3780fc21c7", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -271,7 +271,7 @@ pub struct RegionMaps {\n /// Carries the node id for the innermost block or match expression,\n /// for building up the `var_map` which maps ids to the blocks in\n /// which they were declared.\n-#[derive(PartialEq, Eq, Debug, Copy)]\n+#[derive(PartialEq, Eq, Debug, Copy, Clone)]\n enum InnermostDeclaringBlock {\n     None,\n     Block(ast::NodeId),\n@@ -296,7 +296,7 @@ impl InnermostDeclaringBlock {\n /// Contextual information for declarations introduced by a statement\n /// (i.e. `let`). It carries node-id's for statement and enclosing\n /// block both, as well as the statement's index within the block.\n-#[derive(PartialEq, Eq, Debug, Copy)]\n+#[derive(PartialEq, Eq, Debug, Copy, Clone)]\n struct DeclaringStatementContext {\n     stmt_id: ast::NodeId,\n     block_id: ast::NodeId,\n@@ -312,7 +312,7 @@ impl DeclaringStatementContext {\n     }\n }\n \n-#[derive(PartialEq, Eq, Debug, Copy)]\n+#[derive(PartialEq, Eq, Debug, Copy, Clone)]\n enum InnermostEnclosingExpr {\n     None,\n     Some(ast::NodeId),\n@@ -334,7 +334,7 @@ impl InnermostEnclosingExpr {\n     }\n }\n \n-#[derive(Debug, Copy)]\n+#[derive(Debug, Copy, Clone)]\n pub struct Context {\n     /// the root of the current region tree. This is typically the id\n     /// of the innermost fn body. Each fn forms its own disjoint tree"}, {"sha": "f7e7d071f8ca4b7c81d5373e5aa576c26e70cece", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -99,7 +99,7 @@ pub enum MethodMatchResult {\n     MethodDidNotMatch,\n }\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum MethodMatchedData {\n     // In the case of a precise match, we don't really need to store\n     // how the match was found. So don't."}, {"sha": "1123c9236312a70a9bd069445a5ef25d6b5ca0fe", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -262,7 +262,7 @@ pub struct field_ty {\n \n // Contains information needed to resolve types and (in the future) look up\n // the types of AST nodes.\n-#[derive(Copy, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n pub struct creader_cache_key {\n     pub cnum: CrateNum,\n     pub pos: usize,\n@@ -596,7 +596,7 @@ pub type ObjectCastMap<'tcx> = RefCell<NodeMap<ty::PolyTraitRef<'tcx>>>;\n /// will push one or more such restriction into the\n /// `transmute_restrictions` vector during `intrinsicck`. They are\n /// then checked during `trans` by the fn `check_intrinsics`.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct TransmuteRestriction<'tcx> {\n     /// The span whence the restriction comes.\n     pub span: Span,\n@@ -886,7 +886,7 @@ macro_rules! sty_debug_print {\n         // variable names.\n         mod inner {\n             use middle::ty;\n-            #[derive(Copy)]\n+            #[derive(Copy, Clone)]\n             struct DebugStat {\n                 total: usize,\n                 region_infer: usize,\n@@ -4003,7 +4003,7 @@ pub fn is_instantiable<'tcx>(cx: &ctxt<'tcx>, r_ty: Ty<'tcx>) -> bool {\n ///\n /// The ordering of the cases is significant. They are sorted so that cmp::max\n /// will keep the \"more erroneous\" of two values.\n-#[derive(Copy, PartialOrd, Ord, Eq, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialOrd, Ord, Eq, PartialEq, Debug)]\n pub enum Representability {\n     Representable,\n     ContainsRecursive,\n@@ -4734,7 +4734,7 @@ pub fn expr_is_lval(tcx: &ctxt, e: &ast::Expr) -> bool {\n /// two kinds of rvalues is an artifact of trans which reflects how we will\n /// generate code for that kind of expression.  See trans/expr.rs for more\n /// information.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum ExprKind {\n     LvalueExpr,\n     RvalueDpsExpr,\n@@ -5430,7 +5430,7 @@ pub fn item_path_str(cx: &ctxt, id: ast::DefId) -> String {\n     with_path(cx, id, |path| ast_map::path_to_string(path)).to_string()\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum DtorKind {\n     NoDtor,\n     TraitDtor(DefId, bool)\n@@ -7154,7 +7154,7 @@ pub fn make_substs_for_receiver_types<'tcx>(tcx: &ty::ctxt<'tcx>,\n     trait_ref.substs.clone().with_method(meth_tps, meth_regions)\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum CopyImplementationError {\n     FieldDoesNotImplementCopy(ast::Name),\n     VariantDoesNotImplementCopy(ast::Name),"}, {"sha": "a7d608d2c879c960df0158c2e09fe6a20f9d7d48", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -247,7 +247,7 @@ pub fn basic_options() -> Options {\n // users can have their own entry\n // functions that don't start a\n // scheduler\n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum EntryFnType {\n     EntryMain,\n     EntryStart,"}, {"sha": "7dcd6ba6cd11f9fae652f40f996aa23d88ba43c8", "filename": "src/librustc_back/target/apple_ios_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -15,7 +15,7 @@ use target::TargetOptions;\n use self::Arch::*;\n \n #[allow(non_camel_case_types)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum Arch {\n     Armv7,\n     Armv7s,"}, {"sha": "f8da075e4bdc239929212106049be19c7bf0beca", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -334,7 +334,7 @@ impl ToInteriorKind for mc::InteriorKind {\n     }\n }\n \n-#[derive(Copy, PartialEq, Eq, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub enum LoanPathElem {\n     LpDeref(mc::PointerKind),    // `*LV` in README.md\n     LpInterior(InteriorKind),    // `LV.f` in README.md\n@@ -500,13 +500,13 @@ pub struct BckError<'tcx> {\n     code: bckerr_code\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum AliasableViolationKind {\n     MutabilityViolation,\n     BorrowViolation(euv::LoanCause)\n }\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum MovedValueUseKind {\n     MovedInUse,\n     MovedInCapture,"}, {"sha": "2d1b57243d1cccd192b7037d2a79134835b39d32", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -94,7 +94,7 @@ impl Clone for MovePathIndex {\n const InvalidMovePathIndex: MovePathIndex = MovePathIndex(usize::MAX);\n \n /// Index into `MoveData.moves`, used like a pointer\n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub struct MoveIndex(usize);\n \n impl MoveIndex {\n@@ -125,15 +125,15 @@ pub struct MovePath<'tcx> {\n     pub next_sibling: MovePathIndex,\n }\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum MoveKind {\n     Declared,   // When declared, variables start out \"moved\".\n     MoveExpr,   // Expression or binding that moves a variable\n     MovePat,    // By-move binding\n     Captured    // Closure creation that moves a value\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Move {\n     /// Path being moved.\n     pub path: MovePathIndex,\n@@ -148,7 +148,7 @@ pub struct Move {\n     pub next_move: MoveIndex\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Assignment {\n     /// Path being assigned.\n     pub path: MovePathIndex,\n@@ -160,7 +160,7 @@ pub struct Assignment {\n     pub span: Span,\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct VariantMatch {\n     /// downcast to the variant.\n     pub path: MovePathIndex,"}, {"sha": "ade52bfde35e6cac3cb3425429849f8a0756e7ad", "filename": "src/librustc_borrowck/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_borrowck%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_borrowck%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fgraphviz.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -26,7 +26,7 @@ use rustc::middle::dataflow;\n use std::rc::Rc;\n use std::borrow::IntoCow;\n \n-#[derive(Debug, Copy)]\n+#[derive(Debug, Copy, Clone)]\n pub enum Variant {\n     Loans,\n     Moves,"}, {"sha": "b32c6829a221ba481d87a8e5f865fc50e1ba69e1", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -182,7 +182,7 @@ fn make_input(free_matches: &[String]) -> Option<(Input, Option<PathBuf>)> {\n }\n \n // Whether to stop or continue compilation.\n-#[derive(Copy, Debug, Eq, PartialEq)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub enum Compilation {\n     Stop,\n     Continue,\n@@ -265,7 +265,7 @@ pub trait CompilerCalls<'a> {\n }\n \n // CompilerCalls instance for a regular rustc build.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct RustcDefaultCalls;\n \n impl<'a> CompilerCalls<'a> for RustcDefaultCalls {"}, {"sha": "410f31e0900c4cabd7776454291e4f95b7d28785", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -44,7 +44,7 @@ use std::option;\n use std::path::PathBuf;\n use std::str::FromStr;\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum PpSourceMode {\n     PpmNormal,\n     PpmEveryBodyLoops,\n@@ -56,7 +56,7 @@ pub enum PpSourceMode {\n }\n \n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum PpFlowGraphMode {\n     Default,\n     /// Drops the labels from the edges in the flowgraph output. This\n@@ -65,7 +65,7 @@ pub enum PpFlowGraphMode {\n     /// have become a pain to maintain.\n     UnlabelledEdges,\n }\n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum PpMode {\n     PpmSource(PpSourceMode),\n     PpmFlowGraph(PpFlowGraphMode),"}, {"sha": "3bb737ddc1279787b7c3de8fbf82a0eeb4db0259", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -63,7 +63,7 @@ declare_lint! {\n     \"suggest using `loop { }` instead of `while true { }`\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct WhileTrue;\n \n impl LintPass for WhileTrue {\n@@ -107,7 +107,7 @@ declare_lint! {\n     \"shift exceeds the type's number of bits\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct TypeLimits {\n     /// Id of the last visited negated expression\n     negated_expr_id: ast::NodeId,\n@@ -431,7 +431,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ImproperCTypesVisitor<'a, 'tcx> {\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct ImproperCTypes;\n \n impl LintPass for ImproperCTypes {\n@@ -474,7 +474,7 @@ declare_lint! {\n     \"use of owned (Box type) heap memory\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct BoxPointers;\n \n impl BoxPointers {\n@@ -621,7 +621,7 @@ declare_lint! {\n     \"detects attributes that were not used by the compiler\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct UnusedAttributes;\n \n impl LintPass for UnusedAttributes {\n@@ -662,7 +662,7 @@ declare_lint! {\n     \"path statements with no effect\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct PathStatements;\n \n impl LintPass for PathStatements {\n@@ -696,7 +696,7 @@ declare_lint! {\n     \"unused result of an expression in a statement\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct UnusedResults;\n \n impl LintPass for UnusedResults {\n@@ -764,7 +764,7 @@ declare_lint! {\n     \"types, variants, traits and type parameters should have camel case names\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct NonCamelCaseTypes;\n \n impl NonCamelCaseTypes {\n@@ -874,7 +874,7 @@ declare_lint! {\n     \"methods, functions, lifetime parameters and modules should have snake case names\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct NonSnakeCase;\n \n impl NonSnakeCase {\n@@ -1014,7 +1014,7 @@ declare_lint! {\n     \"static constants should have uppercase identifiers\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct NonUpperCaseGlobals;\n \n impl NonUpperCaseGlobals {\n@@ -1072,7 +1072,7 @@ declare_lint! {\n     \"`if`, `match`, `while` and `return` do not need parentheses\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct UnusedParens;\n \n impl UnusedParens {\n@@ -1166,7 +1166,7 @@ declare_lint! {\n     \"unnecessary braces around an imported item\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct UnusedImportBraces;\n \n impl LintPass for UnusedImportBraces {\n@@ -1196,7 +1196,7 @@ declare_lint! {\n     \"using `Struct { x: x }` instead of `Struct { x }`\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct NonShorthandFieldPatterns;\n \n impl LintPass for NonShorthandFieldPatterns {\n@@ -1233,7 +1233,7 @@ declare_lint! {\n     \"unnecessary use of an `unsafe` block\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct UnusedUnsafe;\n \n impl LintPass for UnusedUnsafe {\n@@ -1258,7 +1258,7 @@ declare_lint! {\n     \"usage of `unsafe` code\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct UnsafeCode;\n \n impl LintPass for UnsafeCode {\n@@ -1319,7 +1319,7 @@ declare_lint! {\n     \"detect mut variables which don't need to be mutable\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct UnusedMut;\n \n impl UnusedMut {\n@@ -1388,7 +1388,7 @@ declare_lint! {\n     \"detects unnecessary allocations that can be eliminated\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct UnusedAllocation;\n \n impl LintPass for UnusedAllocation {\n@@ -1625,7 +1625,7 @@ declare_lint! {\n     \"detects potentially-forgotten implementations of `Copy`\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct MissingCopyImplementations;\n \n impl LintPass for MissingCopyImplementations {\n@@ -1740,7 +1740,7 @@ declare_lint! {\n }\n \n /// Checks for use of items with `#[deprecated]` attributes\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Stability;\n \n impl Stability {\n@@ -1800,7 +1800,7 @@ declare_lint! {\n     \"functions that cannot return without calling themselves\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct UnconditionalRecursion;\n \n \n@@ -1991,7 +1991,7 @@ declare_lint! {\n     \"compiler plugin used as ordinary library in non-plugin crate\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct PluginAsLibrary;\n \n impl LintPass for PluginAsLibrary {\n@@ -2045,7 +2045,7 @@ declare_lint! {\n     \"const items will not have their symbols exported\"\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct InvalidNoMangleItems;\n \n impl LintPass for InvalidNoMangleItems {\n@@ -2088,7 +2088,7 @@ impl LintPass for InvalidNoMangleItems {\n }\n \n /// Forbids using the `#[feature(...)]` attribute\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct UnstableFeatures;\n \n declare_lint! {"}, {"sha": "e6350ae44d43f924d7ff2b12ea46435b6d551230", "filename": "src/librustc_llvm/diagnostic.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_llvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_llvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fdiagnostic.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -18,7 +18,7 @@ use std::ptr;\n \n use {ValueRef, TwineRef, DebugLocRef, DiagnosticInfoRef};\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum OptimizationDiagnosticKind {\n     OptimizationRemark,\n     OptimizationMissed,\n@@ -38,7 +38,7 @@ impl OptimizationDiagnosticKind {\n }\n \n #[allow(raw_pointer_derive)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct OptimizationDiagnostic {\n     pub kind: OptimizationDiagnosticKind,\n     pub pass_name: *const c_char,\n@@ -69,14 +69,13 @@ impl OptimizationDiagnostic {\n     }\n }\n \n+#[derive(Copy, Clone)]\n pub struct InlineAsmDiagnostic {\n     pub cookie: c_uint,\n     pub message: TwineRef,\n     pub instruction: ValueRef,\n }\n \n-impl Copy for InlineAsmDiagnostic {}\n-\n impl InlineAsmDiagnostic {\n     unsafe fn unpack(di: DiagnosticInfoRef)\n             -> InlineAsmDiagnostic {\n@@ -96,7 +95,7 @@ impl InlineAsmDiagnostic {\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum Diagnostic {\n     Optimization(OptimizationDiagnostic),\n     InlineAsm(InlineAsmDiagnostic),"}, {"sha": "9b0ae2e9ef858e852aa2c17788cb1f68636bcda4", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -76,7 +76,7 @@ pub const False: Bool = 0 as Bool;\n \n // Consts for the LLVM CallConv type, pre-cast to usize.\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum CallConv {\n     CCallConv = 0,\n     FastCallConv = 8,\n@@ -86,7 +86,7 @@ pub enum CallConv {\n     X86_64_Win64 = 79,\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum Visibility {\n     LLVMDefaultVisibility = 0,\n     HiddenVisibility = 1,\n@@ -97,7 +97,7 @@ pub enum Visibility {\n // DLLExportLinkage, GhostLinkage and LinkOnceODRAutoHideLinkage.\n // LinkerPrivateLinkage and LinkerPrivateWeakLinkage are not included either;\n // they've been removed in upstream LLVM commit r203866.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum Linkage {\n     ExternalLinkage = 0,\n     AvailableExternallyLinkage = 1,\n@@ -113,7 +113,7 @@ pub enum Linkage {\n }\n \n #[repr(C)]\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum DiagnosticSeverity {\n     Error,\n     Warning,\n@@ -154,7 +154,7 @@ bitflags! {\n \n \n #[repr(u64)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum OtherAttribute {\n     // The following are not really exposed in\n     // the LLVM c api so instead to add these\n@@ -175,13 +175,13 @@ pub enum OtherAttribute {\n     NonNullAttribute = 1 << 44,\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum SpecialAttribute {\n     DereferenceableAttribute(u64)\n }\n \n #[repr(C)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum AttributeSet {\n     ReturnIndex = 0,\n     FunctionIndex = !0\n@@ -273,7 +273,7 @@ impl AttrBuilder {\n }\n \n // enum for the LLVM IntPredicate type\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum IntPredicate {\n     IntEQ = 32,\n     IntNE = 33,\n@@ -288,7 +288,7 @@ pub enum IntPredicate {\n }\n \n // enum for the LLVM RealPredicate type\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum RealPredicate {\n     RealPredicateFalse = 0,\n     RealOEQ = 1,\n@@ -310,7 +310,7 @@ pub enum RealPredicate {\n \n // The LLVM TypeKind type - must stay in sync with the def of\n // LLVMTypeKind in llvm/include/llvm-c/Core.h\n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n #[repr(C)]\n pub enum TypeKind {\n     Void      = 0,\n@@ -332,7 +332,7 @@ pub enum TypeKind {\n }\n \n #[repr(C)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum AtomicBinOp {\n     AtomicXchg = 0,\n     AtomicAdd  = 1,\n@@ -348,7 +348,7 @@ pub enum AtomicBinOp {\n }\n \n #[repr(C)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum AtomicOrdering {\n     NotAtomic = 0,\n     Unordered = 1,\n@@ -362,13 +362,13 @@ pub enum AtomicOrdering {\n \n // Consts for the LLVMCodeGenFileType type (in include/llvm/c/TargetMachine.h)\n #[repr(C)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum FileType {\n     AssemblyFileType = 0,\n     ObjectFileType = 1\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum MetadataType {\n     MD_dbg = 0,\n     MD_tbaa = 1,\n@@ -385,13 +385,13 @@ pub enum MetadataType {\n }\n \n // Inline Asm Dialect\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum AsmDialect {\n     AD_ATT   = 0,\n     AD_Intel = 1\n }\n \n-#[derive(Copy, PartialEq, Clone)]\n+#[derive(Copy, Clone, PartialEq)]\n #[repr(C)]\n pub enum CodeGenOptLevel {\n     CodeGenLevelNone = 0,\n@@ -400,7 +400,7 @@ pub enum CodeGenOptLevel {\n     CodeGenLevelAggressive = 3,\n }\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n #[repr(C)]\n pub enum RelocMode {\n     RelocDefault = 0,\n@@ -410,7 +410,7 @@ pub enum RelocMode {\n }\n \n #[repr(C)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum CodeGenModel {\n     CodeModelDefault = 0,\n     CodeModelJITDefault = 1,\n@@ -421,7 +421,7 @@ pub enum CodeGenModel {\n }\n \n #[repr(C)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum DiagnosticKind {\n     DK_InlineAsm = 0,\n     DK_StackSize,\n@@ -533,7 +533,7 @@ pub mod debuginfo {\n     pub type DIEnumerator = DIDescriptor;\n     pub type DITemplateTypeParameter = DIDescriptor;\n \n-    #[derive(Copy)]\n+    #[derive(Copy, Clone)]\n     pub enum DIDescriptorFlags {\n       FlagPrivate            = 1 << 0,\n       FlagProtected          = 1 << 1,"}, {"sha": "52db6013f4d5df0b54f01abe3c47a026fc486b5d", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -61,7 +61,7 @@ use std::rc::Rc;\n \n // Specifies how duplicates should be handled when adding a child item if\n // another item exists with the same name in some namespace.\n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n enum DuplicateCheckingMode {\n     ForbidDuplicateModules,\n     ForbidDuplicateTypesAndModules,\n@@ -70,7 +70,7 @@ enum DuplicateCheckingMode {\n     OverwriteDuplicates\n }\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n enum NamespaceError {\n     NoError,\n     ModuleError,"}, {"sha": "045320e4fa42565e3782bd682d76757d03631911", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -107,7 +107,7 @@ mod record_exports;\n mod build_reduced_graph;\n mod resolve_imports;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct BindingInfo {\n     span: Span,\n     binding_mode: BindingMode,\n@@ -116,14 +116,14 @@ struct BindingInfo {\n // Map from the name in a pattern to its binding mode.\n type BindingMap = HashMap<Name, BindingInfo>;\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n enum PatternBindingMode {\n     RefutableMode,\n     LocalIrrefutableMode,\n     ArgumentIrrefutableMode,\n }\n \n-#[derive(Copy, PartialEq, Eq, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n enum Namespace {\n     TypeNS,\n     ValueNS\n@@ -280,7 +280,7 @@ enum FallbackSuggestion {\n     TraitMethod(String),\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum TypeParameters<'a> {\n     NoTypeParameters,\n     HasTypeParameters(\n@@ -297,7 +297,7 @@ enum TypeParameters<'a> {\n \n // The rib kind controls the translation of local\n // definitions (`DefLocal`) to upvars (`DefUpvar`).\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n enum RibKind {\n     // No translation needs to be applied.\n     NormalRibKind,\n@@ -319,7 +319,7 @@ enum RibKind {\n     ConstantItemRibKind\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum UseLexicalScopeFlag {\n     DontUseLexicalScope,\n     UseLexicalScope\n@@ -330,7 +330,7 @@ enum ModulePrefixResult {\n     PrefixFound(Rc<Module>, usize)\n }\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n enum NameSearchType {\n     /// We're doing a name search in order to resolve a `use` directive.\n     ImportSearch,\n@@ -340,7 +340,7 @@ enum NameSearchType {\n     PathSearch,\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum BareIdentifierPatternResolution {\n     FoundStructOrEnumVariant(Def, LastPrivate),\n     FoundConst(Def, LastPrivate),\n@@ -372,7 +372,7 @@ enum ParentLink {\n }\n \n /// The type of module this is.\n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n enum ModuleKind {\n     NormalModuleKind,\n     TraitModuleKind,\n@@ -3527,7 +3527,7 @@ pub struct CrateMap {\n     pub glob_map: Option<GlobMap>\n }\n \n-#[derive(PartialEq,Copy)]\n+#[derive(PartialEq,Copy, Clone)]\n pub enum MakeGlobMap {\n     Yes,\n     No"}, {"sha": "f1a8507b1781197cc6683163bbf2b466978a2687", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -37,7 +37,7 @@ use std::rc::Rc;\n \n \n /// Contains data for specific types of import directives.\n-#[derive(Copy,Debug)]\n+#[derive(Copy, Clone,Debug)]\n pub enum ImportDirectiveSubclass {\n     SingleImport(Name /* target */, Name /* source */),\n     GlobImport"}, {"sha": "db724b0ef6b650b5eac3238af14bfc607add3b11", "filename": "src/librustc_trans/save/recorder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Frecorder.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -62,7 +62,7 @@ macro_rules! svec {\n     })\n }\n \n-#[derive(Copy, Debug, Eq, PartialEq)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub enum Row {\n     Variable,\n     Enum,"}, {"sha": "ef599a01e7c40fc5b8697ced0b52811c936bea3c", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -228,7 +228,7 @@ use syntax::codemap::Span;\n use syntax::fold::Folder;\n use syntax::ptr::P;\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n struct ConstantExpr<'a>(&'a ast::Expr);\n \n impl<'a> ConstantExpr<'a> {\n@@ -311,7 +311,7 @@ impl<'a, 'tcx> Opt<'a, 'tcx> {\n     }\n }\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum BranchKind {\n     NoBranch,\n     Single,"}, {"sha": "05c366a645e76daaec0816d2d4187d436d1ee565", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -2112,7 +2112,7 @@ pub fn llvm_linkage_by_name(name: &str) -> Option<Linkage> {\n \n \n /// Enum describing the origin of an LLVM `Value`, for linkage purposes.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum ValueOrigin {\n     /// The LLVM `Value` is in this context because the corresponding item was\n     /// assigned to the current compilation unit."}, {"sha": "d3d055cda120293d172413158976fef590039b96", "filename": "src/librustc_trans/trans/basic_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_trans%2Ftrans%2Fbasic_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_trans%2Ftrans%2Fbasic_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbasic_block.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -13,7 +13,7 @@ use llvm::BasicBlockRef;\n use trans::value::{Users, Value};\n use std::iter::{Filter, Map};\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct BasicBlock(pub BasicBlockRef);\n \n pub type Preds = Map<Filter<Users, fn(&Value) -> bool>, fn(Value) -> BasicBlock>;"}, {"sha": "9eb46d3ff549a80bd33a7ef06295fc67f8a676a8", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -60,7 +60,7 @@ use syntax::ast;\n use syntax::ast_map;\n use syntax::ptr::P;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct MethodData {\n     pub llfn: ValueRef,\n     pub llself: ValueRef,\n@@ -1110,7 +1110,7 @@ pub fn trans_args<'a, 'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n     bcx\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum AutorefArg {\n     DontAutorefArg,\n     DoAutorefArg(ast::NodeId)"}, {"sha": "19891e9307229fa52ee380c21b743b0f67fe9d5b", "filename": "src/librustc_trans/trans/cleanup.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -153,7 +153,7 @@ pub struct CleanupScope<'blk, 'tcx: 'blk> {\n     cached_landing_pad: Option<BasicBlockRef>,\n }\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub struct CustomScopeIndex {\n     index: usize\n }\n@@ -184,14 +184,14 @@ impl<'blk, 'tcx: 'blk> fmt::Debug for CleanupScopeKind<'blk, 'tcx> {\n     }\n }\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum EarlyExitLabel {\n     UnwindExit,\n     ReturnExit,\n     LoopExit(ast::NodeId, usize)\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct CachedEarlyExit {\n     label: EarlyExitLabel,\n     cleanup_block: BasicBlockRef,\n@@ -209,7 +209,7 @@ pub trait Cleanup<'tcx> {\n \n pub type CleanupObj<'tcx> = Box<Cleanup<'tcx>+'tcx>;\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum ScopeId {\n     AstScope(ast::NodeId),\n     CustomScope(CustomScopeIndex)\n@@ -982,7 +982,7 @@ impl EarlyExitLabel {\n ///////////////////////////////////////////////////////////////////////////\n // Cleanup types\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct DropValue<'tcx> {\n     is_immediate: bool,\n     must_unwind: bool,\n@@ -1021,12 +1021,12 @@ impl<'tcx> Cleanup<'tcx> for DropValue<'tcx> {\n     }\n }\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum Heap {\n     HeapExchange\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct FreeValue<'tcx> {\n     ptr: ValueRef,\n     heap: Heap,\n@@ -1061,7 +1061,7 @@ impl<'tcx> Cleanup<'tcx> for FreeValue<'tcx> {\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct FreeSlice {\n     ptr: ValueRef,\n     size: ValueRef,\n@@ -1098,7 +1098,7 @@ impl<'tcx> Cleanup<'tcx> for FreeSlice {\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct LifetimeEnd {\n     ptr: ValueRef,\n }"}, {"sha": "c5985e930e97b98b72fc9e3ffdb72a3c6e1af935", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -343,7 +343,7 @@ pub fn gensym_name(name: &str) -> PathElem {\n *\n */\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct NodeIdAndSpan {\n     pub id: ast::NodeId,\n     pub span: Span,\n@@ -1225,7 +1225,7 @@ pub fn drain_fulfillment_cx<'a,'tcx,T>(infcx: &infer::InferCtxt<'a,'tcx>,\n }\n \n // Key used to lookup values supplied for type parameters in an expr.\n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum ExprOrMethodCall {\n     // Type parameters for a path like `None::<int>`\n     ExprId(ast::NodeId),"}, {"sha": "a736a9fe88a1408de7da76457766aa7ca8fa8f52", "filename": "src/librustc_trans/trans/datum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -172,7 +172,7 @@ impl Drop for Rvalue {\n     fn drop(&mut self) { }\n }\n \n-#[derive(Copy, PartialEq, Eq, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub enum RvalueMode {\n     /// `val` is a pointer to the actual value (and thus has type *T)\n     ByRef,"}, {"sha": "2747288b60755c9245156bb496e4278d859e1aef", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -2382,7 +2382,7 @@ impl<'tcx> VariantMemberDescriptionFactory<'tcx> {\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum EnumDiscriminantInfo {\n     RegularDiscriminant(DIType),\n     OptimizedDiscriminant,\n@@ -3106,7 +3106,7 @@ impl MetadataCreationResult {\n     }\n }\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n enum InternalDebugLocation {\n     KnownLocation { scope: DIScope, line: usize, col: usize },\n     UnknownLocation"}, {"sha": "5a79aa35bfae175b1eee83da494f2a9ae2563a39", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -94,7 +94,7 @@ use std::rc::Rc;\n // These are passed around by the code generating functions to track the\n // destination of a computation's value.\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum Dest {\n     SaveIn(ValueRef),\n     Ignore,\n@@ -2038,7 +2038,7 @@ fn float_cast(bcx: Block,\n     } else { llsrc };\n }\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum cast_kind {\n     cast_pointer,\n     cast_integral,"}, {"sha": "c7857d6a775f3f3163c81b191b5b5033f25b605e", "filename": "src/librustc_trans/trans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmod.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -57,7 +57,7 @@ mod basic_block;\n mod llrepr;\n mod cleanup;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct ModuleTranslation {\n     pub llcx: ContextRef,\n     pub llmod: ModuleRef,"}, {"sha": "791b58d88a93e97d84e934371ad2df617c49c3f2", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -33,7 +33,7 @@ use util::ppaux::ty_to_string;\n use syntax::ast;\n use syntax::parse::token::InternedString;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct VecTypes<'tcx> {\n     unit_ty: Ty<'tcx>,\n     llunit_ty: Type"}, {"sha": "bc71278c157434988a59da92ab11681d4b141976", "filename": "src/librustc_trans/trans/value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -14,7 +14,7 @@ use trans::basic_block::BasicBlock;\n use trans::common::Block;\n use libc::c_uint;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Value(pub ValueRef);\n \n macro_rules! opt_val { ($e:expr) => (\n@@ -125,7 +125,7 @@ impl Value {\n }\n \n /// Wrapper for LLVM UseRef\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Use(UseRef);\n \n impl Use {"}, {"sha": "677ab56852434802541e68a64f1014b2548085e8", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -52,7 +52,7 @@ pub enum MethodError {\n \n // A pared down enum describing just the places from which a method\n // candidate can arise. Used for error reporting only.\n-#[derive(Copy, PartialOrd, Ord, PartialEq, Eq)]\n+#[derive(Copy, Clone, PartialOrd, Ord, PartialEq, Eq)]\n pub enum CandidateSource {\n     ImplSource(ast::DefId),\n     TraitSource(/* trait id */ ast::DefId),"}, {"sha": "41eae88158905f3ebc6e0180e351e71e6f9c97a2", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -109,7 +109,7 @@ pub enum PickAdjustment {\n     AutoRef(ast::Mutability, Box<PickAdjustment>),\n }\n \n-#[derive(PartialEq, Eq, Copy)]\n+#[derive(PartialEq, Eq, Copy, Clone)]\n pub enum Mode {\n     // An expression of the form `receiver.method_name(...)`.\n     // Autoderefs are performed on `receiver`, lookup is done based on the"}, {"sha": "c5ff8a14bc1cf33be1a294297b2fc5cbddc8b800", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -266,7 +266,7 @@ fn type_derefs_to_local<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     }).2.is_some()\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct TraitInfo {\n     pub def_id: ast::DefId,\n }"}, {"sha": "156fbfede9c98aebf51b120086f56b005bbdd28c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -205,7 +205,7 @@ struct CastCheck<'tcx> {\n \n /// When type-checking an expression, we propagate downward\n /// whatever type hint we are able in the form of an `Expectation`.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum Expectation<'tcx> {\n     /// We know nothing about what type this expression should have.\n     NoExpectation,\n@@ -1952,14 +1952,14 @@ impl<'a, 'tcx> RegionScope for FnCtxt<'a, 'tcx> {\n     }\n }\n \n-#[derive(Copy, Debug, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub enum LvaluePreference {\n     PreferMutLvalue,\n     NoPreference\n }\n \n /// Whether `autoderef` requires types to resolve.\n-#[derive(Copy, Debug, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub enum UnresolvedTypeAction {\n     /// Produce an error and return `ty_err` whenever a type cannot\n     /// be resolved (i.e. it is `ty_infer`)."}, {"sha": "a86e2b17c93b839775dc3f13457033c5a215d283", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -249,11 +249,6 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n                                                         &fcx.inh.param_env.free_substs,\n                                                         &trait_ref);\n \n-            if fcx.tcx().lang_items.copy_trait() == Some(trait_ref.def_id) {\n-                // This is checked in coherence.\n-                return\n-            }\n-\n             // We are stricter on the trait-ref in an impl than the\n             // self-type.  In particular, we enforce region\n             // relationships. The reason for this is that (at least"}, {"sha": "37f43252483aae2fe2ffbad0d43f2f045613ade1", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -350,7 +350,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // Resolution reason.\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum ResolveReason {\n     ResolvingExpr(Span),\n     ResolvingLocal(Span),"}, {"sha": "8f1b8bf109215d6caa2825ce2dc7eac907ef89ed", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -135,7 +135,7 @@ struct ItemCtxt<'a,'tcx:'a> {\n     param_bounds: &'a (GetTypeParameterBounds<'tcx>+'a),\n }\n \n-#[derive(Copy, PartialEq, Eq)]\n+#[derive(Copy, Clone, PartialEq, Eq)]\n enum AstConvRequest {\n     GetItemTypeScheme(ast::DefId),\n     GetTraitDef(ast::DefId),"}, {"sha": "c908e21626e56eaa33c616f1ed044210a3ebdc3d", "filename": "src/librustc_typeck/rscope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_typeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_typeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Frscope.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -40,7 +40,7 @@ pub trait RegionScope {\n \n // A scope in which all regions must be explicitly named. This is used\n // for types that appear in structs and so on.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct ExplicitRscope;\n \n impl RegionScope for ExplicitRscope {"}, {"sha": "b83d8fc6af7fafe60871137dc864d67a66b91e7d", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -295,10 +295,10 @@ pub fn infer_variance(tcx: &ty::ctxt) {\n \n type VarianceTermPtr<'a> = &'a VarianceTerm<'a>;\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n struct InferredIndex(usize);\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum VarianceTerm<'a> {\n     ConstantTerm(ty::Variance),\n     TransformTerm(VarianceTermPtr<'a>, VarianceTermPtr<'a>),\n@@ -336,7 +336,7 @@ struct TermsContext<'a, 'tcx: 'a> {\n     inferred_infos: Vec<InferredInfo<'a>> ,\n }\n \n-#[derive(Copy, Debug, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq)]\n enum ParamKind {\n     TypeParam,\n     RegionParam,\n@@ -560,7 +560,7 @@ struct ConstraintContext<'a, 'tcx: 'a> {\n \n /// Declares that the variable `decl_id` appears in a location with\n /// variance `variance`.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Constraint<'a> {\n     inferred: InferredIndex,\n     variance: &'a VarianceTerm<'a>,"}, {"sha": "ed37b973f787ec16e4d9f9497f89732351789657", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -30,19 +30,19 @@ use html::render::{cache, CURRENT_LOCATION_KEY};\n \n /// Helper to render an optional visibility with a space after it (if the\n /// visibility is preset)\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct VisSpace(pub Option<ast::Visibility>);\n /// Similarly to VisSpace, this structure is used to render a function style with a\n /// space after it.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct UnsafetySpace(pub ast::Unsafety);\n /// Wrapper struct for properly emitting a method declaration.\n pub struct Method<'a>(pub &'a clean::SelfTy, pub &'a clean::FnDecl);\n /// Similar to VisSpace, but used for mutability\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct MutableSpace(pub clean::Mutability);\n /// Similar to VisSpace, but used for mutability\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct RawMutableSpace(pub clean::Mutability);\n /// Wrapper struct for properly emitting the stability level.\n pub struct Stability<'a>(pub &'a Option<clean::Stability>);"}, {"sha": "ac097d051b28673aad0bf492abf01a75a4a05778", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -225,7 +225,7 @@ struct Source<'a>(&'a str);\n // Helper structs for rendering items/sidebars and carrying along contextual\n // information\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Item<'a> {\n     cx: &'a Context,\n     item: &'a clean::Item,"}, {"sha": "3e4f6896ee68db2181121dd351b79ae33ee65ed2", "filename": "src/librustdoc/stability_summary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustdoc%2Fstability_summary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibrustdoc%2Fstability_summary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fstability_summary.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -27,7 +27,7 @@ use html::render::cache;\n \n #[derive(RustcEncodable, RustcDecodable, PartialEq, Eq)]\n /// The counts for each stability level.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Counts {\n     pub deprecated: u64,\n     pub unstable: u64,"}, {"sha": "0676edf81696f5647048681cccddb38ad175c81c", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -62,7 +62,7 @@ pub trait FromHex {\n }\n \n /// Errors that can occur when decoding a hex encoded string\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum FromHexError {\n     /// The input contained a character not part of the hex format\n     InvalidHexCharacter(char, usize),"}, {"sha": "5890bdec8c1bcdbcc66524c324095a7ceb91fd77", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -278,7 +278,7 @@ pub enum DecoderError {\n     ApplicationError(string::String)\n }\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum EncoderError {\n     FmtError(fmt::Error),\n     BadHashmapKey,"}, {"sha": "dec6d1e2209ad9b982f695ce6f06b2efb50ecd32", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -87,6 +87,9 @@ struct RawBucket<K, V> {\n }\n \n impl<K,V> Copy for RawBucket<K,V> {}\n+impl<K,V> Clone for RawBucket<K,V> {\n+    fn clone(&self) -> RawBucket<K, V> { *self }\n+}\n \n pub struct Bucket<K, V, M> {\n     raw:   RawBucket<K, V>,\n@@ -95,6 +98,9 @@ pub struct Bucket<K, V, M> {\n }\n \n impl<K,V,M:Copy> Copy for Bucket<K,V,M> {}\n+impl<K,V,M:Copy> Clone for Bucket<K,V,M> {\n+    fn clone(&self) -> Bucket<K,V,M> { *self }\n+}\n \n pub struct EmptyBucket<K, V, M> {\n     raw:   RawBucket<K, V>,\n@@ -129,7 +135,7 @@ struct GapThenFull<K, V, M> {\n \n /// A hash that is not zero, since we use a hash of zero to represent empty\n /// buckets.\n-#[derive(PartialEq, Copy)]\n+#[derive(PartialEq, Copy, Clone)]\n pub struct SafeHash {\n     hash: u64,\n }"}, {"sha": "ea869ebae100a9ca15294e1ed3da6d0d0b32f482", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -25,7 +25,7 @@ use string::String;\n use vec::Vec;\n \n /// A flag that specifies whether to use exponential (scientific) notation.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum ExponentFormat {\n     /// Do not use exponential notation.\n     ExpNone,\n@@ -40,7 +40,7 @@ pub enum ExponentFormat {\n \n /// The number of digits used for emitting the fractional part of a number, if\n /// any.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum SignificantDigits {\n     /// All calculable digits will be printed.\n     ///\n@@ -57,7 +57,7 @@ pub enum SignificantDigits {\n }\n \n /// How to emit the sign of a number.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum SignFormat {\n     /// No sign will be printed. The exponent sign will also be emitted.\n     SignNone,"}, {"sha": "98ff6e82c6f7f1437014d2968f8d19389fd73fac", "filename": "src/libstd/old_io/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibstd%2Fold_io%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibstd%2Fold_io%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmod.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -391,7 +391,7 @@ impl Error for IoError {\n }\n \n /// A list specifying general categories of I/O error.\n-#[derive(Copy, PartialEq, Eq, Clone, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum IoErrorKind {\n     /// Any I/O error not part of this list.\n     OtherIoError,\n@@ -1553,7 +1553,7 @@ impl<T: Buffer> BufferPrelude for T {\n \n /// When seeking, the resulting cursor is offset from a base by the offset given\n /// to the `seek` function. The base used is specified by this enumeration.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum SeekStyle {\n     /// Seek from the beginning of the stream\n     SeekSet,\n@@ -1744,7 +1744,7 @@ pub enum FileType {\n ///\n /// println!(\"byte size: {}\", info.size);\n /// ```\n-#[derive(Copy, Hash)]\n+#[derive(Copy, Clone, Hash)]\n pub struct FileStat {\n     /// The size of the file, in bytes\n     pub size: u64,\n@@ -1783,7 +1783,7 @@ pub struct FileStat {\n /// structure. This information is not necessarily platform independent, and may\n /// have different meanings or no meaning at all on some platforms.\n #[unstable(feature = \"io\")]\n-#[derive(Copy, Hash)]\n+#[derive(Copy, Clone, Hash)]\n pub struct UnstableFileStat {\n     /// The ID of the device containing the file.\n     pub device: u64,"}, {"sha": "c5fa775ab4e6f11a5f49103de549fa6db5fc2e00", "filename": "src/libstd/old_io/net/addrinfo.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibstd%2Fold_io%2Fnet%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibstd%2Fold_io%2Fnet%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Faddrinfo.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -29,7 +29,7 @@ use sys;\n use vec::Vec;\n \n /// Hints to the types of sockets that are desired when looking up hosts\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum SocketType {\n     Stream, Datagram, Raw\n }\n@@ -38,7 +38,7 @@ pub enum SocketType {\n /// to manipulate how a query is performed.\n ///\n /// The meaning of each of these flags can be found with `man -s 3 getaddrinfo`\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum Flag {\n     AddrConfig,\n     All,\n@@ -51,7 +51,7 @@ pub enum Flag {\n \n /// A transport protocol associated with either a hint or a return value of\n /// `lookup`\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum Protocol {\n     TCP, UDP\n }\n@@ -61,15 +61,15 @@ pub enum Protocol {\n ///\n /// For details on these fields, see their corresponding definitions via\n /// `man -s 3 getaddrinfo`\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub struct Hint {\n     pub family: usize,\n     pub socktype: Option<SocketType>,\n     pub protocol: Option<Protocol>,\n     pub flags: usize,\n }\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub struct Info {\n     pub address: SocketAddr,\n     pub family: usize,"}, {"sha": "818c8e76d6087aff50dbe3ae3e3675159bc5b0dd", "filename": "src/libstd/old_io/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibstd%2Fold_io%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibstd%2Fold_io%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Futil.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -90,7 +90,7 @@ impl<R: Buffer> Buffer for LimitReader<R> {\n }\n \n /// A `Writer` which ignores bytes written to it, like /dev/null.\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n #[deprecated(since = \"1.0.0\", reason = \"use std::io::sink() instead\")]\n #[unstable(feature = \"old_io\")]\n pub struct NullWriter;\n@@ -103,7 +103,7 @@ impl Writer for NullWriter {\n }\n \n /// A `Reader` which returns an infinite stream of 0 bytes, like /dev/zero.\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n #[deprecated(since = \"1.0.0\", reason = \"use std::io::repeat(0) instead\")]\n #[unstable(feature = \"old_io\")]\n pub struct ZeroReader;\n@@ -130,7 +130,7 @@ impl Buffer for ZeroReader {\n }\n \n /// A `Reader` which is always at EOF, like /dev/null.\n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n #[deprecated(since = \"1.0.0\", reason = \"use std::io::empty() instead\")]\n #[unstable(feature = \"old_io\")]\n pub struct NullReader;"}, {"sha": "4b754bd5f589f22ac3d957986a6fcc536769d9bf", "filename": "src/libstd/rt/libunwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibstd%2Frt%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibstd%2Frt%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flibunwind.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -25,7 +25,7 @@ use libc;\n \n #[cfg(any(not(target_arch = \"arm\"), target_os = \"ios\"))]\n #[repr(C)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum _Unwind_Action {\n     _UA_SEARCH_PHASE = 1,\n     _UA_CLEANUP_PHASE = 2,"}, {"sha": "acd6970f113731a95dd79b8c7d662bee55e50010", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -197,7 +197,7 @@ macro_rules! __thread_local_inner {\n /// Indicator of the state of a thread local storage key.\n #[unstable(feature = \"std_misc\",\n            reason = \"state querying was recently added\")]\n-#[derive(Eq, PartialEq, Copy)]\n+#[derive(Eq, PartialEq, Copy, Clone)]\n pub enum LocalKeyState {\n     /// All keys are in this state whenever a thread starts. Keys will\n     /// transition to the `Valid` state once the first call to `with` happens"}, {"sha": "27e331893e5d7fcd642113988baf2123092ef15a", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -15,7 +15,7 @@ pub use self::AbiArchitecture::*;\n \n use std::fmt;\n \n-#[derive(Copy, PartialEq, Eq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum Os {\n     OsWindows,\n     OsMacos,\n@@ -49,7 +49,7 @@ pub enum Abi {\n }\n \n #[allow(non_camel_case_types)]\n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum Architecture {\n     X86,\n     X86_64,\n@@ -58,15 +58,15 @@ pub enum Architecture {\n     Mipsel\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct AbiData {\n     abi: Abi,\n \n     // Name of this ABI as we like it called.\n     name: &'static str,\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum AbiArchitecture {\n     /// Not a real ABI (e.g., intrinsic)\n     RustArch,"}, {"sha": "475970ac30a75c972aaaa029adf92edcd1166dd5", "filename": "src/libsyntax/ast_map/blocks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fblocks.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -40,7 +40,7 @@ use visit;\n ///   - The default implementation for a trait method.\n ///\n /// To construct one, use the `Code::from_node` function.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct FnLikeNode<'a> { node: ast_map::Node<'a> }\n \n /// MaybeFnLike wraps a method that indicates if an object\n@@ -80,7 +80,7 @@ impl MaybeFnLike for ast::Expr {\n /// Carries either an FnLikeNode or a Block, as these are the two\n /// constructs that correspond to \"code\" (as in, something from which\n /// we can construct a control-flow graph).\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum Code<'a> {\n     FnLikeCode(FnLikeNode<'a>),\n     BlockCode(&'a Block),"}, {"sha": "2a9a609ecd1e9dcbc89278eb04806f1c88dd77c0", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -101,7 +101,7 @@ pub fn path_to_string<PI: Iterator<Item=PathElem>>(path: PI) -> String {\n     })\n }\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum Node<'ast> {\n     NodeItem(&'ast Item),\n     NodeForeignItem(&'ast ForeignItem),"}, {"sha": "c4c2249d029596b2af15a845bb8823d18bdd4d29", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -291,7 +291,7 @@ pub fn empty_generics() -> Generics {\n // ______________________________________________________________________\n // Enumerating the IDs which appear in an AST\n \n-#[derive(RustcEncodable, RustcDecodable, Debug, Copy)]\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct IdRange {\n     pub min: NodeId,\n     pub max: NodeId,"}, {"sha": "06e447bb12af4b076c8dad9c8c9cb0d0031478d0", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -282,7 +282,7 @@ pub fn find_crate_name(attrs: &[Attribute]) -> Option<InternedString> {\n     first_attr_value_str_by_name(attrs, \"crate_name\")\n }\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum InlineAttr {\n     None,\n     Hint,\n@@ -571,7 +571,7 @@ fn int_type_of_word(s: &str) -> Option<IntType> {\n     }\n }\n \n-#[derive(PartialEq, Debug, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(PartialEq, Debug, RustcEncodable, RustcDecodable, Copy, Clone)]\n pub enum ReprAttr {\n     ReprAny,\n     ReprInt(Span, IntType),\n@@ -590,7 +590,7 @@ impl ReprAttr {\n     }\n }\n \n-#[derive(Eq, Hash, PartialEq, Debug, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(Eq, Hash, PartialEq, Debug, RustcEncodable, RustcDecodable, Copy, Clone)]\n pub enum IntType {\n     SignedInt(ast::IntTy),\n     UnsignedInt(ast::UintTy)"}, {"sha": "b563a5e7d6e841f017c94eb0cc9e134985fd77d4", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -47,7 +47,7 @@ pub struct BytePos(pub u32);\n /// A character offset. Because of multibyte utf8 characters, a byte offset\n /// is not equivalent to a character offset. The CodeMap will convert BytePos\n /// values to CharPos values as necessary.\n-#[derive(Copy, PartialEq, Hash, PartialOrd, Debug)]\n+#[derive(Copy, Clone, PartialEq, Hash, PartialOrd, Debug)]\n pub struct CharPos(pub usize);\n \n // FIXME: Lots of boilerplate in these impls, but so far my attempts to fix\n@@ -305,7 +305,7 @@ pub struct FileLines {\n }\n \n /// Identifies an offset of a multi-byte character in a FileMap\n-#[derive(Copy, RustcEncodable, RustcDecodable, Eq, PartialEq)]\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Eq, PartialEq)]\n pub struct MultiByteChar {\n     /// The absolute offset of the character in the CodeMap\n     pub pos: BytePos,"}, {"sha": "c4690b9716c99c306fd5f2117177c3dfe64631ee", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -71,12 +71,12 @@ pub trait Emitter {\n /// This structure is used to signify that a task has panicked with a fatal error\n /// from the diagnostics. You can use this with the `Any` trait to figure out\n /// how a rustc task died (if so desired).\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct FatalError;\n \n /// Signifies that the compiler died with an explicit call to `.bug`\n /// or `.span_bug` rather than a failed assertion, etc.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct ExplicitBug;\n \n /// A span-handler is like a handler but also"}, {"sha": "71fba789ff83509fcdaa2d82d95b128ce05b7793", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -318,7 +318,7 @@ impl MacResult for MacEager {\n \n /// Fill-in macro expansion result, to allow compilation to continue\n /// after hitting errors.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct DummyResult {\n     expr_only: bool,\n     span: Span"}, {"sha": "8ecd172b2f0d836899bcd067d1047283a9bd1d30", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -84,7 +84,7 @@ pub fn expand_deriving_ord<F>(cx: &mut ExtCtxt,\n     trait_def.expand(cx, mitem, item, push)\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum OrderingOp {\n     PartialCmpOp, LtOp, LeOp, GtOp, GeOp,\n }"}, {"sha": "f514f72d565487d26df304dd52a8144a9a01f3a8", "filename": "src/libsyntax/ext/mtwt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fext%2Fmtwt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fext%2Fmtwt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmtwt.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -38,7 +38,7 @@ pub struct SCTable {\n     rename_memo: RefCell<HashMap<(SyntaxContext,Ident,Name),SyntaxContext>>,\n }\n \n-#[derive(PartialEq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(PartialEq, RustcEncodable, RustcDecodable, Hash, Debug, Copy, Clone)]\n pub enum SyntaxContext_ {\n     EmptyCtxt,\n     Mark (Mrk,SyntaxContext),"}, {"sha": "dbddd9dd44d0ebf9d296900bb7fdc4c9286f9e16", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -295,7 +295,7 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n     (\"recursion_limit\", CrateLevel),\n ];\n \n-#[derive(PartialEq, Copy, Debug)]\n+#[derive(PartialEq, Copy, Clone, Debug)]\n pub enum AttributeType {\n     /// Normal, builtin attribute that is consumed\n     /// by the compiler before the unused_attribute check"}, {"sha": "f120dde8e1cb6fc12225f1887fc4a290d58772b1", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -20,7 +20,7 @@ use parse::token;\n use ptr::P;\n \n /// The specific types of unsupported syntax\n-#[derive(Copy, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n pub enum ObsoleteSyntax {\n     ClosureKind,\n     ExternCrateString,"}, {"sha": "c721624323923e18a999552bcb6b825af5af48d9", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -96,7 +96,7 @@ type ItemInfo = (Ident, Item_, Option<Vec<Attribute> >);\n \n /// How to parse a path. There are four different kinds of paths, all of which\n /// are parsed somewhat differently.\n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum PathParsingMode {\n     /// A path with no type parameters; e.g. `foo::bar::Baz`\n     NoTypesAllowed,\n@@ -109,7 +109,7 @@ pub enum PathParsingMode {\n }\n \n /// How to parse a bound, whether to allow bound modifiers such as `?`.\n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum BoundParsingMode {\n     Bare,\n     Modified,"}, {"sha": "ebfd970f3dbfc3c3e3d0634924bc90352ff11908", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -147,13 +147,13 @@ pub fn buf_str(toks: &[Token],\n     s\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum PrintStackBreak {\n     Fits,\n     Broken(Breaks),\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct PrintStackElem {\n     offset: isize,\n     pbreak: PrintStackBreak"}, {"sha": "46d196d13fa72f4c9191c872835e0f89ba681dfa", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -47,12 +47,12 @@ pub trait PpAnn {\n     fn post(&self, _state: &mut State, _node: AnnNode) -> io::Result<()> { Ok(()) }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct NoAnn;\n \n impl PpAnn for NoAnn {}\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct CurrentCommentAndLiteral {\n     cur_cmnt: usize,\n     cur_lit: usize,"}, {"sha": "5c345c75642b8eb39ff81a692f052c694b5e07e1", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -32,7 +32,7 @@ use codemap::Span;\n use ptr::P;\n use owned_slice::OwnedSlice;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum FnKind<'a> {\n     /// fn foo() or extern \"Abi\" fn foo()\n     FkItemFn(Ident, &'a Generics, Unsafety, Abi),"}, {"sha": "74ec3406f73bc3a735f640dfdb9375a9566acd25", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -184,7 +184,7 @@ pub mod attr {\n     /// Most attributes can only be turned on and must be turned off with term.reset().\n     /// The ones that can be turned off explicitly take a boolean value.\n     /// Color is also represented as an attribute for convenience.\n-    #[derive(Copy)]\n+    #[derive(Copy, Clone)]\n     pub enum Attr {\n         /// Bold (or possibly bright) mode\n         Bold,"}, {"sha": "01586b8f36ed0b35467b446c35fa01d19a1234d5", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -18,7 +18,7 @@ use std::ascii::OwnedAsciiExt;\n use std::mem::replace;\n use std::iter::repeat;\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n enum States {\n     Nothing,\n     Percent,\n@@ -35,7 +35,7 @@ enum States {\n     SeekIfEndPercent(isize)\n }\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n enum FormatState {\n     FormatStateFlags,\n     FormatStateWidth,\n@@ -444,7 +444,7 @@ pub fn expand(cap: &[u8], params: &[Param], vars: &mut Variables)\n     Ok(output)\n }\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n struct Flags {\n     width: usize,\n     precision: usize,\n@@ -461,7 +461,7 @@ impl Flags {\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum FormatOp {\n     FormatDigit,\n     FormatOctal,"}, {"sha": "8d329367972d19a5b13ff142621aae6cbe564285", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -194,7 +194,7 @@ impl fmt::Debug for TestFn {\n /// This is fed into functions marked with `#[bench]` to allow for\n /// set-up & tear-down before running a piece of code repeatedly via a\n /// call to `iter`.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Bencher {\n     iterations: u64,\n     dur: Duration,\n@@ -281,7 +281,7 @@ pub fn test_main_static(args: env::Args, tests: &[TestDescAndFn]) {\n     test_main(&args, owned_tests)\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum ColorConfig {\n     AutoColor,\n     AlwaysColor,"}, {"sha": "32af6d9255e5bd959ff36375cee78111ee38a514", "filename": "src/test/auxiliary/issue-14422.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fauxiliary%2Fissue-14422.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fauxiliary%2Fissue-14422.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-14422.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -23,7 +23,7 @@ mod src {\n     pub mod hidden_core {\n         use super::aliases::B;\n \n-        #[derive(Copy)]\n+        #[derive(Copy, Clone)]\n         pub struct A;\n \n         pub fn make() -> B { A }"}, {"sha": "d0566a1e0914bff0230151abd5be41fdf5953419", "filename": "src/test/auxiliary/issue13213aux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fauxiliary%2Fissue13213aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fauxiliary%2Fissue13213aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue13213aux.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -13,13 +13,13 @@\n \n pub use private::P;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct S {\n     p: P,\n }\n \n mod private {\n-    #[derive(Copy)]\n+    #[derive(Copy, Clone)]\n     pub struct P {\n         p: i32,\n     }"}, {"sha": "348b71faf0cdbd39632ff5ab9c98a677571b6d6c", "filename": "src/test/auxiliary/method_self_arg1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fauxiliary%2Fmethod_self_arg1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fauxiliary%2Fmethod_self_arg1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmethod_self_arg1.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -17,7 +17,7 @@ static mut COUNT: u64 = 1;\n \n pub fn get_count() -> u64 { unsafe { COUNT } }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Foo;\n \n impl Foo {"}, {"sha": "b67ec1b9bfc655e8014e923abbacc7f28d0df50d", "filename": "src/test/auxiliary/method_self_arg2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fauxiliary%2Fmethod_self_arg2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fauxiliary%2Fmethod_self_arg2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmethod_self_arg2.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -17,7 +17,7 @@ static mut COUNT: u64 = 1;\n \n pub fn get_count() -> u64 { unsafe { COUNT } }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Foo;\n \n impl Foo {"}, {"sha": "201f028b6b658acc981dbb5eca0f04ac44f75854", "filename": "src/test/auxiliary/struct_variant_xc_aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fauxiliary%2Fstruct_variant_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fauxiliary%2Fstruct_variant_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstruct_variant_xc_aux.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -11,7 +11,7 @@\n #![crate_name=\"struct_variant_xc_aux\"]\n #![crate_type = \"lib\"]\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum Enum {\n     Variant(u8),\n     StructVariant { arg: u8 }"}, {"sha": "7a69be2b06c7cf2438a8f3c61fd2013871a76845", "filename": "src/test/auxiliary/xcrate_unit_struct.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fauxiliary%2Fxcrate_unit_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fauxiliary%2Fxcrate_unit_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fxcrate_unit_struct.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -12,26 +12,26 @@\n \n // used by the rpass test\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Struct;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum Unit {\n     UnitVariant,\n     Argument(Struct)\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct TupleStruct(pub usize, pub &'static str);\n \n // used by the cfail test\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct StructWithFields {\n     foo: isize,\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum EnumWithVariants {\n     EnumVariant,\n     EnumVariantArg(isize)"}, {"sha": "83c39b3f3faf6c9e5b68d474b6b96464da7914c2", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -18,7 +18,7 @@ use std::f32::consts::PI;\n use std::num::Float;\n use std::rand::{Rng, StdRng};\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Vec2 {\n     x: f32,\n     y: f32,"}, {"sha": "72f3464cdb72d165d101cc5460845ac6bfda880d", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -54,7 +54,7 @@ fn print_complements() {\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum Color {\n     Red,\n     Yellow,\n@@ -72,7 +72,7 @@ impl fmt::Debug for Color {\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct CreatureInfo {\n     name: usize,\n     color: Color"}, {"sha": "4489a124abe0f3cb50e8d699acca7f981b308848", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -63,12 +63,12 @@ fn next_permutation(perm: &mut [i32], count: &mut [i32]) {\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct P {\n     p: [i32; 16],\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Perm {\n     cnt: [i32; 16],\n     fact: [u32; 16],"}, {"sha": "effdd67027a44b8a32b230a494451fbc2d8738cc", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -105,7 +105,7 @@ fn sum_and_scale(a: &'static [AminoAcid]) -> Vec<AminoAcid> {\n     result\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct AminoAcid {\n     c: u8,\n     p: f32,"}, {"sha": "db131bcfdc354e55c7e14922d89a59db92151db8", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -64,7 +64,7 @@ static OCCURRENCES: [&'static str;5] = [\n \n // Code implementation\n \n-#[derive(Copy, PartialEq, PartialOrd, Ord, Eq)]\n+#[derive(Copy, Clone, PartialEq, PartialOrd, Ord, Eq)]\n struct Code(u64);\n \n impl Code {"}, {"sha": "669a0e86f1e659406f8f9b232532f27ec1b32780", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -96,7 +96,7 @@ static BODIES: [Planet;N_BODIES] = [\n     },\n ];\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Planet {\n     x: f64, y: f64, z: f64,\n     vx: f64, vy: f64, vz: f64,"}, {"sha": "e5091a92581b45e613d792ee8057b16941309922", "filename": "src/test/compile-fail/borrowck-borrow-from-owned-ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-owned-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-owned-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-owned-ptr.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -9,13 +9,13 @@\n // except according to those terms.\n \n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Foo {\n   bar1: Bar,\n   bar2: Bar\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Bar {\n   int1: isize,\n   int2: isize,"}, {"sha": "440be93dfdca18fea34311aa6aa08a007c22eeb8", "filename": "src/test/compile-fail/borrowck-borrow-from-stack-variable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-stack-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-stack-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-stack-variable.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Foo {\n   bar1: Bar,\n   bar2: Bar\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Bar {\n   int1: isize,\n   int2: isize,"}, {"sha": "cce55b6c941b90e019add2efc7d328489a341a77", "filename": "src/test/compile-fail/borrowck-loan-rcvr-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -10,7 +10,7 @@\n \n use std::ops::Add;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Point {\n     x: isize,\n     y: isize,"}, {"sha": "c11e58651aa76a1f7979bafda0f0e12cd8100c1a", "filename": "src/test/compile-fail/borrowck-use-mut-borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fcompile-fail%2Fborrowck-use-mut-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fcompile-fail%2Fborrowck-use-mut-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-use-mut-borrow.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(box_syntax)]\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct A { a: isize, b: isize }\n \n struct B { a: isize, b: Box<isize> }"}, {"sha": "f1a04a8ea5736bcc6a15ae493b43b1c74f1f666e", "filename": "src/test/compile-fail/coherence-impls-copy.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-copy.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -22,10 +22,13 @@ struct NotSync;\n impl !Sync for NotSync {}\n \n impl Copy for TestE {}\n+impl Clone for TestE { fn clone(&self) -> Self { *self } }\n+\n impl Copy for MyType {}\n \n impl Copy for &'static mut MyType {}\n //~^ ERROR E0206\n+impl Clone for MyType { fn clone(&self) -> Self { *self } }\n \n impl Copy for (MyType, MyType) {}\n //~^ ERROR E0206\n@@ -37,6 +40,8 @@ impl Copy for &'static NotSync {}\n impl Copy for [MyType] {}\n //~^ ERROR E0206\n //~| ERROR E0117\n+//~| ERROR E0277\n+//~| ERROR E0277\n \n impl Copy for &'static [NotSync] {}\n //~^ ERROR E0206"}, {"sha": "c52458934bd1c90b378e9f15813201a8bc1e4378", "filename": "src/test/compile-fail/dst-index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fcompile-fail%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fcompile-fail%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-index.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -14,7 +14,7 @@\n use std::ops::Index;\n use std::fmt::Debug;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct S;\n \n impl Index<usize> for S {\n@@ -25,7 +25,7 @@ impl Index<usize> for S {\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct T;\n \n impl Index<usize> for T {"}, {"sha": "460c396750ff0b6fda97337e1d46c12824a46822", "filename": "src/test/compile-fail/exclusive-drop-and-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fcompile-fail%2Fexclusive-drop-and-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fcompile-fail%2Fexclusive-drop-and-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexclusive-drop-and-copy.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -12,14 +12,14 @@\n \n // issue #20126\n \n-#[derive(Copy)] //~ ERROR the trait `Copy` may not be implemented\n+#[derive(Copy, Clone)] //~ ERROR the trait `Copy` may not be implemented\n struct Foo;\n \n impl Drop for Foo {\n     fn drop(&mut self) {}\n }\n \n-#[derive(Copy)] //~ ERROR the trait `Copy` may not be implemented\n+#[derive(Copy, Clone)] //~ ERROR the trait `Copy` may not be implemented\n struct Bar<T>(::std::marker::PhantomData<T>);\n \n #[unsafe_destructor]"}, {"sha": "dcd7a0ded812fcd7176d7143fe207ecfc34fb438", "filename": "src/test/compile-fail/feature-gate-simd-ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fcompile-fail%2Ffeature-gate-simd-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fcompile-fail%2Ffeature-gate-simd-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-simd-ffi.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -13,7 +13,7 @@\n \n use std::simd::f32x4;\n \n-#[simd] #[derive(Copy)] #[repr(C)] struct LocalSimd(u8, u8);\n+#[simd] #[derive(Copy, Clone)] #[repr(C)] struct LocalSimd(u8, u8);\n \n extern {\n     fn foo() -> f32x4; //~ ERROR use of SIMD type"}, {"sha": "883e1be04b22893e4b3b9f93171365e973e8f7c3", "filename": "src/test/compile-fail/gated-simd-ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fcompile-fail%2Fgated-simd-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fcompile-fail%2Fgated-simd-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-simd-ffi.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -13,7 +13,7 @@\n #![feature(simd)]\n \n #[repr(C)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n #[simd]\n pub struct f32x4(f32, f32, f32, f32);\n "}, {"sha": "1925caf6870eef80aab0daa80651683ffbbe46d8", "filename": "src/test/compile-fail/kindck-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -17,7 +17,7 @@ fn assert_copy<T:Copy>() { }\n \n trait Dummy : MarkerTrait { }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct MyStruct {\n     x: isize,\n     y: isize,"}, {"sha": "066590252a54ad769fcb599e94f616d25770b598", "filename": "src/test/compile-fail/kindck-inherited-copy-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -25,13 +25,13 @@ fn take_param<T:Foo>(foo: &T) { }\n \n fn a() {\n     let x: Box<_> = box 3;\n-    take_param(&x); //~ ERROR `core::marker::Copy` is not implemented\n+    take_param(&x); //~ ERROR E0277\n }\n \n fn b() {\n     let x: Box<_> = box 3;\n     let y = &x;\n-    let z = &x as &Foo; //~ ERROR `core::marker::Copy` is not implemented\n+    let z = &x as &Foo; //~ ERROR E0038\n }\n \n fn main() { }"}, {"sha": "be321b6290354197c03dfcd2c5b0447e271b0cc2", "filename": "src/test/compile-fail/opt-in-copy.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fcompile-fail%2Fopt-in-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fcompile-fail%2Fopt-in-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fopt-in-copy.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -16,6 +16,7 @@ struct IWantToCopyThis {\n \n impl Copy for IWantToCopyThis {}\n //~^ ERROR the trait `Copy` may not be implemented for this type\n+//~| ERROR E0277\n \n enum CantCopyThisEither {\n     A,\n@@ -28,5 +29,6 @@ enum IWantToCopyThisToo {\n \n impl Copy for IWantToCopyThisToo {}\n //~^ ERROR the trait `Copy` may not be implemented for this type\n+//~| ERROR E0277\n \n fn main() {}"}, {"sha": "198fa5b9aca0bf4009c238cc2ed2651278b86a15", "filename": "src/test/compile-fail/pub-method-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fcompile-fail%2Fpub-method-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fcompile-fail%2Fpub-method-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpub-method-macro.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -20,7 +20,7 @@ mod bleh {\n         )\n     }\n \n-    #[derive(Copy)]\n+    #[derive(Copy, Clone)]\n     pub struct S;\n \n     impl S {"}, {"sha": "3024ca0fe69834142d101a102f98f220876f6228", "filename": "src/test/debuginfo/c-style-enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -105,21 +105,21 @@ use self::AutoDiscriminant::{One, Two, Three};\n use self::ManualDiscriminant::{OneHundred, OneThousand, OneMillion};\n use self::SingleVariant::TheOnlyVariant;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum AutoDiscriminant {\n     One,\n     Two,\n     Three\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum ManualDiscriminant {\n     OneHundred = 100,\n     OneThousand = 1000,\n     OneMillion = 1000000\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum SingleVariant {\n     TheOnlyVariant\n }"}, {"sha": "fc9ef8e3a98ed01ae87b7621a896a80a6662d7c3", "filename": "src/test/debuginfo/generic-method-on-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -114,7 +114,7 @@\n #![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Struct<T> {\n     x: T\n }"}, {"sha": "6468a36f8c61c703c39fe5b0a421d6a5f4770355", "filename": "src/test/debuginfo/method-on-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -115,7 +115,7 @@\n #![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum Enum {\n     Variant1 { x: u16, y: u16 },\n     Variant2 (u32)"}, {"sha": "975668baa12852163c2008a7cf88e1f8f229f6f4", "filename": "src/test/debuginfo/method-on-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -115,7 +115,7 @@\n #![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Struct<T> {\n     x: T\n }"}, {"sha": "28885d0ad9b79828bd10b5638242babaef775081", "filename": "src/test/debuginfo/method-on-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -115,7 +115,7 @@\n #![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Struct {\n     x: isize\n }"}, {"sha": "b69a3856736c4521d8677d5331fc1230462487a3", "filename": "src/test/debuginfo/method-on-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -115,7 +115,7 @@\n #![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Struct {\n     x: isize\n }"}, {"sha": "97d4496cce12b3d34a78aa520e50bd9434746fac", "filename": "src/test/debuginfo/method-on-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -115,7 +115,7 @@\n #![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct TupleStruct(isize, f64);\n \n impl TupleStruct {"}, {"sha": "f16f236a0cb0612750600331e838bb786e0d03d1", "filename": "src/test/debuginfo/self-in-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -114,7 +114,7 @@\n #![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Struct {\n     x: isize\n }"}, {"sha": "56de877016deebdb3d42b22de9abe7b872c199be", "filename": "src/test/debuginfo/self-in-generic-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -114,7 +114,7 @@\n #![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Struct {\n     x: isize\n }"}, {"sha": "3d5e6e78deaf15e4a601312396fd787217664a7e", "filename": "src/test/pretty/block-disambig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-disambig.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -19,7 +19,7 @@ fn test1() { let val = &0; { } *val; }\n \n fn test2() -> isize { let val = &0; { } *val }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct S { eax: isize }\n \n fn test3() {"}, {"sha": "a9e18f5a8f1e6b0dade592613e8579396a091dcd", "filename": "src/test/run-make/allow-non-lint-warnings-cmdline/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-make%2Fallow-non-lint-warnings-cmdline%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-make%2Fallow-non-lint-warnings-cmdline%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fallow-non-lint-warnings-cmdline%2Ffoo.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #[derive()]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Foo;\n \n pub fn main() { }"}, {"sha": "c0f55893a3abe4370e0a779081591bd56a3cdc71", "filename": "src/test/run-make/extern-fn-with-packed-struct/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2Ftest.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #[repr(packed)]\n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n struct Foo {\n     a: i8,\n     b: i16,"}, {"sha": "9d1ab00359dd955e28a36f7eb93f73c255b5aebf", "filename": "src/test/run-make/save-analysis/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -179,7 +179,7 @@ enum SomeEnum<'a> {\n     MyTypes(MyType, MyType)\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum SomeOtherEnum {\n     SomeConst1,\n     SomeConst2,"}, {"sha": "3dffae99292c61b1c487c8c7d8e1f4d1e18dbffb", "filename": "src/test/run-pass/associated-types-normalize-unifield-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-unifield-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-unifield-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-unifield-struct.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -20,10 +20,10 @@ pub trait Offset {\n     fn dummy(&self) { }\n }\n \n-#[derive(Copy)] pub struct X;\n+#[derive(Copy, Clone)] pub struct X;\n impl Offset for X { type State = Y; }\n \n-#[derive(Copy)] pub struct Y;\n+#[derive(Copy, Clone)] pub struct Y;\n impl OffsetState for Y {}\n \n pub fn now() -> DateTime<X> { from_utc(Y) }"}, {"sha": "da7a3ae684c57aac9ca5c970d64cc2ad05d597f3", "filename": "src/test/run-pass/binops-issue-22743.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fbinops-issue-22743.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fbinops-issue-22743.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops-issue-22743.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -10,7 +10,7 @@\n \n use std::ops::Mul;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Foo {\n     x: f64,\n }"}, {"sha": "a5c68c5ecf97671d4f8584a5daa810da87de61ef", "filename": "src/test/run-pass/borrowck-univariant-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -13,7 +13,7 @@\n \n use std::cell::Cell;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum newtype {\n     newvar(isize)\n }"}, {"sha": "c026ffc6d318d76e1bcbedef18c823fb4464c47a", "filename": "src/test/run-pass/builtin-superkinds-in-metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -20,7 +20,7 @@ use trait_superkinds_in_metadata::{RequiresRequiresShareAndSend, RequiresShare};\n use trait_superkinds_in_metadata::RequiresCopy;\n use std::marker;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct X<T>(T);\n \n impl<T:Sync> RequiresShare for X<T> { }"}, {"sha": "4c494293b517edbf83ca7de7439ebf42347a4844", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -11,7 +11,7 @@\n \n use std::cmp;\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n enum cat_type { tuxedo, tabby, tortoiseshell }\n \n impl cmp::PartialEq for cat_type {"}, {"sha": "b0630b516407b60f3490ce6d3f2bb920c9bff545", "filename": "src/test/run-pass/coherence-impl-in-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -11,7 +11,7 @@\n // pretty-expanded FIXME #23616\n \n pub fn main() {\n-    #[derive(Copy)]\n+    #[derive(Copy, Clone)]\n     enum x { foo }\n     impl ::std::cmp::PartialEq for x {\n         fn eq(&self, other: &x) -> bool {"}, {"sha": "51926ececc2b1ff654334608cd8018bcace33459", "filename": "src/test/run-pass/const-nullary-univariant-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum Foo {\n     Bar = 0xDEADBEE\n }"}, {"sha": "5c5765454d457adefd99ef00949d845a7302099d", "filename": "src/test/run-pass/copy-out-of-array-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fcopy-out-of-array-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fcopy-out-of-array-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcopy-out-of-array-1.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -14,10 +14,9 @@\n \n // pretty-expanded FIXME #23616\n \n+#[derive(Copy, Clone)]\n struct C { _x: u8 }\n \n-impl Copy for C { }\n-\n fn main() {\n     fn d() -> C { C { _x: 0 } }\n "}, {"sha": "4204d9b5c3eaeb3006c3358e7b5ec6c6a31c2f89", "filename": "src/test/run-pass/deriving-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fderiving-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fderiving-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-bounds.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Test;\n \n pub fn main() {}"}, {"sha": "9bf286c434219ba504b4d51f1b37f46ec1401a53", "filename": "src/test/run-pass/dst-struct-sole.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -32,7 +32,7 @@ fn foo2<T:ToBar>(x: &Fat<[T]>) {\n     assert!(x.ptr[1].to_bar() == bar);\n }\n \n-#[derive(Copy, PartialEq, Eq)]\n+#[derive(Copy, Clone, PartialEq, Eq)]\n struct Bar;\n \n trait ToBar {"}, {"sha": "5198dd43d6db83380b0463ecd0c8bca4ce553d74", "filename": "src/test/run-pass/dst-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -51,7 +51,7 @@ fn foo3(x: &Fat<Fat<[isize]>>) {\n }\n \n \n-#[derive(Copy, PartialEq, Eq)]\n+#[derive(Copy, Clone, PartialEq, Eq)]\n struct Bar;\n \n trait ToBar {"}, {"sha": "370bc2882271f5681d5a035af2db7daac2ea931c", "filename": "src/test/run-pass/dst-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-trait.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -19,10 +19,10 @@ struct Fat<T: ?Sized> {\n     ptr: T\n }\n \n-#[derive(Copy, PartialEq, Eq)]\n+#[derive(Copy, Clone, PartialEq, Eq)]\n struct Bar;\n \n-#[derive(Copy, PartialEq, Eq)]\n+#[derive(Copy, Clone, PartialEq, Eq)]\n struct Bar1 {\n     f: isize\n }"}, {"sha": "e60cd02ce9994524f192f7392c8576c0452c7b7a", "filename": "src/test/run-pass/empty-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fempty-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fempty-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-tag.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n enum chan { chan_t, }\n \n impl PartialEq for chan {"}, {"sha": "46238c4572080837d90148a0c0962e0729088869", "filename": "src/test/run-pass/enum-discrim-width-stuff.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -12,7 +12,7 @@ macro_rules! check {\n     ($m:ident, $t:ty, $v:expr) => {{\n         mod $m {\n             use std::mem::size_of;\n-            #[derive(Copy, Debug)]\n+            #[derive(Copy, Clone, Debug)]\n             enum E {\n                 V = $v,\n                 A = 0"}, {"sha": "ee50d3bdf0ee8334278373fde4acf2d29ef30031", "filename": "src/test/run-pass/explicit-self-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -13,7 +13,7 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct LM { resize_at: usize, size: usize }\n \n enum HashMap<K,V> {"}, {"sha": "ca394f991f29b76f30b9259bf465a5cc779870a1", "filename": "src/test/run-pass/expr-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fexpr-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fexpr-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-copy.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -15,7 +15,7 @@ fn f(arg: &mut A) {\n     arg.a = 100;\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct A { a: isize }\n \n pub fn main() {"}, {"sha": "e79daed4c33d7bd9ea9df42ed5e496e59052bf12", "filename": "src/test/run-pass/expr-if-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -14,15 +14,15 @@\n \n // Tests for if as expressions returning nominal types\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct I { i: isize }\n \n fn test_rec() {\n     let rs = if true { I {i: 100} } else { I {i: 101} };\n     assert_eq!(rs.i, 100);\n }\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n enum mood { happy, sad, }\n \n impl PartialEq for mood {"}, {"sha": "2dcb0f833e4b327bf384c90654e59bc17be003b6", "filename": "src/test/run-pass/expr-match-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fexpr-match-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fexpr-match-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-struct.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -13,15 +13,15 @@\n \n \n // Tests for match as expressions resulting in struct types\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct R { i: isize }\n \n fn test_rec() {\n     let rs = match true { true => R {i: 100}, _ => panic!() };\n     assert_eq!(rs.i, 100);\n }\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n enum mood { happy, sad, }\n \n impl PartialEq for mood {"}, {"sha": "9a039e8bc3539e40dfff5eeabf1abb853a401735", "filename": "src/test/run-pass/exterior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fexterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fexterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexterior.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -13,7 +13,7 @@\n \n use std::cell::Cell;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Point {x: isize, y: isize, z: isize}\n \n fn f(p: &Cell<Point>) {"}, {"sha": "9d304ea9e10b64c8b927a17d7e676a58b89b68d2", "filename": "src/test/run-pass/extern-pass-TwoU16s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -11,7 +11,7 @@\n // Test a foreign function that accepts and returns a struct\n // by value.\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub struct TwoU16s {\n     one: u16, two: u16\n }"}, {"sha": "8dae0473fd5ed64b203a585c701c297820a4031b", "filename": "src/test/run-pass/extern-pass-TwoU32s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -11,7 +11,7 @@\n // Test a foreign function that accepts and returns a struct\n // by value.\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub struct TwoU32s {\n     one: u32, two: u32\n }"}, {"sha": "14aeea34657985a3773149c9fb9f1a20876a0d8f", "filename": "src/test/run-pass/extern-pass-TwoU64s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -11,7 +11,7 @@\n // Test a foreign function that accepts and returns a struct\n // by value.\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub struct TwoU64s {\n     one: u64, two: u64\n }"}, {"sha": "75a109e442911c9b3d33893e74f03414b2f8828e", "filename": "src/test/run-pass/extern-pass-TwoU8s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -11,7 +11,7 @@\n // Test a foreign function that accepts and returns a struct\n // by value.\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub struct TwoU8s {\n     one: u8, two: u8\n }"}, {"sha": "7883c22f909ddb40860c164be07fa3572b5615a3", "filename": "src/test/run-pass/foreign-fn-with-byval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fforeign-fn-with-byval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fforeign-fn-with-byval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-with-byval.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct S {\n     x: u64,\n     y: u64,"}, {"sha": "0ba0ed4bf7f979cae9cea0e8198c253757649d39", "filename": "src/test/run-pass/generic-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -12,7 +12,7 @@\n \n fn id<T>(x: T) -> T { return x; }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Triple {x: isize, y: isize, z: isize}\n \n pub fn main() {"}, {"sha": "f5f80914937d3cf51140c2aba67dceb1b64d6479", "filename": "src/test/run-pass/guards-not-exhaustive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fguards-not-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fguards-not-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fguards-not-exhaustive.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum Q { R(Option<usize>) }\n \n fn xyzzy(q: Q) -> usize {"}, {"sha": "11c67b8af8107e11451e336d54f208052f4bb437", "filename": "src/test/run-pass/guards.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fguards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fguards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fguards.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Pair { x: isize, y: isize }\n \n pub fn main() {"}, {"sha": "b40f4d27a9c4d63a86e0b6d953fb37122682d2dc", "filename": "src/test/run-pass/hrtb-opt-in-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fhrtb-opt-in-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fhrtb-opt-in-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-opt-in-copy.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -22,7 +22,7 @@\n \n use std::marker::PhantomData;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Foo<T> { x: T }\n \n type Ty<'tcx> = &'tcx TyS<'tcx>;\n@@ -31,7 +31,7 @@ enum TyS<'tcx> {\n     Boop(PhantomData<*mut &'tcx ()>)\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum Bar<'tcx> {\n     Baz(Foo<Ty<'tcx>>)\n }"}, {"sha": "dddfb9bacf9e211e016d5c31de5c1c9f0aa9a4c9", "filename": "src/test/run-pass/issue-12860.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fissue-12860.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fissue-12860.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12860.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -16,7 +16,7 @@ extern crate collections;\n \n use std::collections::HashSet;\n \n-#[derive(Copy, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n struct XYZ {\n     x: isize,\n     y: isize,"}, {"sha": "7acabf31c85a17587ed16823161e47b8545becf3", "filename": "src/test/run-pass/issue-13264.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fissue-13264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fissue-13264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13264.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -24,7 +24,7 @@ impl Deref for Root {\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct JSRef {\n     node: *const Node\n }"}, {"sha": "0fd4b4394dc271ab32e2df0e7b40deecbde298d7", "filename": "src/test/run-pass/issue-19100.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fissue-19100.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fissue-19100.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19100.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum Foo {\n     Bar,\n     Baz"}, {"sha": "8b5e6f837d852f070591e1591ba25f302c6cb866", "filename": "src/test/run-pass/issue-20797.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fissue-20797.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fissue-20797.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20797.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -34,7 +34,7 @@ pub trait Strategy {\n }\n \n /// The basic fully-recursive strategy. Nothing is pruned.\n-#[derive(Copy, Default)]\n+#[derive(Copy, Clone, Default)]\n pub struct Recursive;\n \n impl Strategy for Recursive {"}, {"sha": "5e2ac61caa216e239291bd01c63eafd014cefd35", "filename": "src/test/run-pass/issue-21296.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fissue-21296.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fissue-21296.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21296.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -14,4 +14,8 @@\n #[derive(Copy)]\n struct Test(*const i32);\n \n+impl Clone for Test {\n+    fn clone(&self) -> Test { *self }\n+}\n+\n fn main() {}"}, {"sha": "8a0f04a2cf0e413fd366ef3869a2da13d722cd17", "filename": "src/test/run-pass/issue-22536-copy-mustnt-zero.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fissue-22536-copy-mustnt-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fissue-22536-copy-mustnt-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-22536-copy-mustnt-zero.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -22,12 +22,14 @@ struct BufferHandle<R: Resources> {\n     raw: <R as Resources>::Buffer,\n }\n impl<R: Resources> Copy for BufferHandle<R> {}\n+impl<R: Resources> Clone for BufferHandle<R> {\n+    fn clone(&self) -> BufferHandle<R> { *self }\n+}\n \n enum Res {}\n impl Resources for Res {\n     type Buffer = u32;\n }\n-impl Copy for Res { }\n \n fn main() {\n     let b: BufferHandle<Res> = BufferHandle { raw: 1 };"}, {"sha": "d16655a68554a2b654999f19ddda31c7e3efc848", "filename": "src/test/run-pass/issue-2288.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2288.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -17,7 +17,7 @@ trait clam<A> {\n   fn chowder(&self, y: A);\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct foo<A> {\n   x: A,\n }"}, {"sha": "9b5ca23565e0d7710edf2d28806bae2809d750a3", "filename": "src/test/run-pass/issue-23550.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fissue-23550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fissue-23550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23550.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -13,7 +13,7 @@\n \n use std::intrinsics;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Wrap(i64);\n \n // These volatile and atomic intrinsics used to cause an ICE"}, {"sha": "5841a9ec176cdc6c13690250852145acdd7a2a86", "filename": "src/test/run-pass/issue-2633.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2633.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct cat {\n     meow: extern \"Rust\" fn(),\n }\n@@ -23,7 +23,7 @@ fn cat() -> cat {\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct KittyInfo {kitty: cat}\n \n // Code compiles and runs successfully if we add a + before the first arg"}, {"sha": "777e5bf7a6dedfe37f1cbd02b7ddad32eb11a3dc", "filename": "src/test/run-pass/issue-3121.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fissue-3121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fissue-3121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3121.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -13,11 +13,11 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum side { mayo, catsup, vinegar }\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum order { hamburger, fries(side), shake }\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum meal { to_go(order), for_here(order) }\n \n fn foo(m: Box<meal>, cond: bool) {"}, {"sha": "cfdc54a362274e91c926e5b8b740909ecaba2558", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -29,21 +29,21 @@ use std::iter::repeat;\n use std::slice;\n \n // Represents a position on a canvas.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Point {\n     x: isize,\n     y: isize,\n }\n \n // Represents an offset on a canvas. (This has the same structure as a Point.\n // but different semantics).\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Size {\n     width: isize,\n     height: isize,\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Rect {\n     top_left: Point,\n     size: Size,"}, {"sha": "cd62c04a32581ea28e9bf35799d938a75df36d11", "filename": "src/test/run-pass/issue-3743.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3743.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -13,7 +13,7 @@\n \n use std::ops::Mul;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Vec2 {\n     x: f64,\n     y: f64"}, {"sha": "e81025d8464507b1cd5ffc55b89d781062a3ca4f", "filename": "src/test/run-pass/issue-3753.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fissue-3753.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fissue-3753.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3753.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -16,13 +16,13 @@\n \n use std::f64;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Point {\n     x: f64,\n     y: f64\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum Shape {\n     Circle(Point, f64),\n     Rectangle(Point, Point)"}, {"sha": "88ff103723c73265a9dcdc9fbe32f282e13146bc", "filename": "src/test/run-pass/issue-5688.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fissue-5688.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fissue-5688.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5688.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -17,7 +17,7 @@ with the representation of [isize; n] and [isize] somehow, or at least\n failed to typecheck correctly.\n */\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct X { vec: &'static [isize] }\n \n static V: &'static [X] = &[X { vec: &[1, 2, 3] }];"}, {"sha": "1b4dfb869d413dfb857aee0c1baa8412140f10d7", "filename": "src/test/run-pass/match-arm-statics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fmatch-arm-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fmatch-arm-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-arm-statics.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -38,7 +38,7 @@ const VARIANT2_NORTH: EnumWithStructVariants = EnumWithStructVariants::Variant2\n     dir: Direction::North };\n \n pub mod glfw {\n-    #[derive(Copy)]\n+    #[derive(Copy, Clone)]\n     pub struct InputState(usize);\n \n     pub const RELEASE  : InputState = InputState(0);"}, {"sha": "f0ca0a70acc96a4f828b835e99d4cb25b19d817f", "filename": "src/test/run-pass/method-self-arg-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -17,7 +17,7 @@\n \n static mut COUNT: u64 = 1;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Foo;\n \n trait Bar : Sized {"}, {"sha": "dfc121192228d4a21fa27bf8087d44c464c3d06d", "filename": "src/test/run-pass/method-self-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -17,7 +17,7 @@\n \n static mut COUNT: usize = 1;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Foo;\n \n impl Foo {"}, {"sha": "00e97ebc24e7ba5f5f1fa4b6a616a2cec0d6bc55", "filename": "src/test/run-pass/monomorphize-abi-alignment.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fmonomorphize-abi-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fmonomorphize-abi-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonomorphize-abi-alignment.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -18,7 +18,7 @@\n  * and apply the wrong instance of the method `unwrap`.\n  */\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct S<T> { i:u8, t:T }\n \n impl<T> S<T> {\n@@ -27,10 +27,10 @@ impl<T> S<T> {\n     }\n }\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n struct A((u32, u32));\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n struct B(u64);\n \n pub fn main() {"}, {"sha": "fdf9f95b274d44fd61c4716188a693c4559797c1", "filename": "src/test/run-pass/multidispatch1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fmultidispatch1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fmultidispatch1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmultidispatch1.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -16,7 +16,7 @@ trait MyTrait<T> {\n     fn get(&self) -> T;\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct MyType {\n     dummy: usize\n }"}, {"sha": "75c6c5ac7d16543338cf0f3484f41000afb45584", "filename": "src/test/run-pass/multidispatch2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fmultidispatch2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fmultidispatch2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmultidispatch2.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -25,7 +25,7 @@ impl<T> MyTrait<T> for T\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct MyType {\n     dummy: usize\n }"}, {"sha": "818ea4c9f23262429aec69bc932fbad5d7cbce87", "filename": "src/test/run-pass/newtype.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fnewtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fnewtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct mytype(Mytype);\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Mytype {\n     compute: fn(mytype) -> isize,\n     val: isize,"}, {"sha": "045af79189acd36cb74f4200a8011bfd76b055de", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -13,7 +13,7 @@\n use std::cmp;\n use std::ops;\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n struct Point {\n     x: isize,\n     y: isize"}, {"sha": "0a58411041e640df28eb16c58b2134e7e8124123", "filename": "src/test/run-pass/out-pointer-aliasing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fout-pointer-aliasing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fout-pointer-aliasing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-pointer-aliasing.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Foo {\n     f1: isize,\n     _f2: isize,"}, {"sha": "6880032e69f66f5f2909a7ab25fd9c26ffedbeb4", "filename": "src/test/run-pass/overloaded-autoderef-order.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -13,7 +13,7 @@\n use std::rc::Rc;\n use std::ops::Deref;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct DerefWrapper<X, Y> {\n     x: X,\n     y: Y\n@@ -36,7 +36,7 @@ impl<X, Y> Deref for DerefWrapper<X, Y> {\n mod priv_test {\n     use std::ops::Deref;\n \n-    #[derive(Copy)]\n+    #[derive(Copy, Clone)]\n     pub struct DerefWrapperHideX<X, Y> {\n         x: X,\n         pub y: Y"}, {"sha": "9a327eb567266bf0da01211ba00f160c4ebb0af1", "filename": "src/test/run-pass/packed-struct-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -13,7 +13,7 @@\n use std::mem;\n \n #[repr(packed)]\n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n struct Foo {\n     bar: u8,\n     baz: u64"}, {"sha": "1644a1694269adb77b86a1b46ad4be717498a1fa", "filename": "src/test/run-pass/rec-tup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Frec-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Frec-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-tup.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Point {x: isize, y: isize}\n \n type rect = (Point, Point);"}, {"sha": "a422aaba84b30677c7848ee57fa7930f40ecc290", "filename": "src/test/run-pass/rec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Frec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Frec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Rect {x: isize, y: isize, w: isize, h: isize}\n \n fn f(r: Rect, x: isize, y: isize, w: isize, h: isize) {"}, {"sha": "123806a4d9d175d21fa0a7f70e29d77d4a204cb5", "filename": "src/test/run-pass/regions-dependent-addr-of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -30,7 +30,7 @@ struct B {\n     v6: Option<C>\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct C {\n     f: isize\n }"}, {"sha": "6ad89951238893ea8fdbcf90ffbdd11e7b738d81", "filename": "src/test/run-pass/regions-early-bound-used-in-bound-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-bound-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-bound-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-bound-method.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -17,7 +17,7 @@ trait GetRef<'a> {\n     fn get(&self) -> &'a isize;\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Box<'a> {\n     t: &'a isize\n }"}, {"sha": "6ab95d6e497bc9455f313b08c7c90170da423421", "filename": "src/test/run-pass/regions-early-bound-used-in-bound.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-bound.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -17,12 +17,11 @@ trait GetRef<'a, T> {\n     fn get(&self) -> &'a T;\n }\n \n+#[derive(Copy, Clone)]\n struct Box<'a, T:'a> {\n     t: &'a T\n }\n \n-impl<'a,T:'a> Copy for Box<'a,T> {}\n-\n impl<'a,T:Clone> GetRef<'a,T> for Box<'a,T> {\n     fn get(&self) -> &'a T {\n         self.t"}, {"sha": "dc991e9493fe46cf569b3c1f4b596c3229b84413", "filename": "src/test/run-pass/regions-early-bound-used-in-type-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-type-param.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -17,7 +17,7 @@ trait Get<T> {\n     fn get(&self) -> T;\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Box<T> {\n     t: T\n }"}, {"sha": "ed3cec465eff894ce54233eb78676666030b8150", "filename": "src/test/run-pass/regions-mock-tcx.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -29,7 +29,7 @@ use std::mem;\n \n type Type<'tcx> = &'tcx TypeStructure<'tcx>;\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n enum TypeStructure<'tcx> {\n     TypeInt,\n     TypeFunction(Type<'tcx>, Type<'tcx>),\n@@ -94,20 +94,20 @@ impl<'tcx,'ast> TypeContext<'tcx, 'ast> {\n     }\n }\n \n-#[derive(Copy, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n struct NodeId {\n     id: usize\n }\n \n type Ast<'ast> = &'ast AstStructure<'ast>;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct AstStructure<'ast> {\n     id: NodeId,\n     kind: AstKind<'ast>\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum AstKind<'ast> {\n     ExprInt,\n     ExprVar(usize),"}, {"sha": "fa9ad9f6517a609c6ddff771ad0141bf60a6ed43", "filename": "src/test/run-pass/self-in-mut-slot-immediate-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-immediate-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-immediate-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-immediate-value.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -13,7 +13,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Value {\n     n: isize\n }"}, {"sha": "867f028a3fb3c14aa977bca9dee19fbfa4f00025", "filename": "src/test/run-pass/simd-generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fsimd-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fsimd-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-generics.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -16,7 +16,7 @@\n use std::ops;\n \n #[simd]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct f32x4(f32, f32, f32, f32);\n \n fn add<T: ops::Add<Output=T>>(lhs: T, rhs: T) -> T {"}, {"sha": "9515da6fcbc8d2207add789f4c3172cec508a5b2", "filename": "src/test/run-pass/small-enum-range-edge.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fsmall-enum-range-edge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fsmall-enum-range-edge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsmall-enum-range-edge.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -18,14 +18,14 @@\n  */\n \n #[repr(u8)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum Eu { Lu = 0, Hu = 255 }\n \n static CLu: Eu = Eu::Lu;\n static CHu: Eu = Eu::Hu;\n \n #[repr(i8)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum Es { Ls = -128, Hs = 127 }\n \n static CLs: Es = Es::Ls;"}, {"sha": "1ff13d4eaeacb1c2129beb4835fb40ed722f0dbe", "filename": "src/test/run-pass/struct-return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-return.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -10,10 +10,10 @@\n //\n // ignore-lexer-test FIXME #15883\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Quad { a: u64, b: u64, c: u64, d: u64 }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Floats { a: f64, b: u8, c: f64 }\n \n mod rustrt {"}, {"sha": "7974366c395fc922f0c4b2e728322a2e576f7d8d", "filename": "src/test/run-pass/structured-compare.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fstructured-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fstructured-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructured-compare.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -10,7 +10,7 @@\n \n \n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n enum foo { large, small, }\n \n impl PartialEq for foo {"}, {"sha": "447b4de450bf1097e046d90761b2c287bcd50d5b", "filename": "src/test/run-pass/sync-send-iterators-in-libcollections.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcollections.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -77,7 +77,7 @@ fn main() {\n \n     all_sync_send!(LinkedList::<usize>::new(), iter, iter_mut, into_iter);\n \n-    #[derive(Copy)]\n+    #[derive(Copy, Clone)]\n     #[repr(usize)]\n     #[allow(dead_code)]\n     enum Foo { A, B, C }"}, {"sha": "a063801032e3decc613f8f016e4143780d6f6892", "filename": "src/test/run-pass/tag-variant-disr-val.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -11,7 +11,7 @@\n \n use color::{red, green, blue, black, white, imaginary, purple, orange};\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum color {\n     red = 0xff0000,\n     green = 0x00ff00,"}, {"sha": "f9a22d5ccec6d07a867ae5a24c27e5492f31a8e2", "filename": "src/test/run-pass/trait-coercion-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Ftrait-coercion-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Ftrait-coercion-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-coercion-generic.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -12,7 +12,7 @@ trait Trait<T> {\n     fn f(&self, x: T);\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Struct {\n     x: isize,\n     y: isize,"}, {"sha": "fa31d9891aaf7c9a1b14e9e2377ba69a6e94b3aa", "filename": "src/test/run-pass/trait-coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -17,7 +17,7 @@ trait Trait {\n     fn f(&self);\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Struct {\n     x: isize,\n     y: isize,"}, {"sha": "bd09a311b70fb24d0fec3bc1669d0c3e87816311", "filename": "src/test/run-pass/ufcs-explicit-self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fufcs-explicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92e7abefd0231f80d16062e5ff6aaf8cc3bc861/src%2Ftest%2Frun-pass%2Fufcs-explicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fufcs-explicit-self.rs?ref=f92e7abefd0231f80d16062e5ff6aaf8cc3bc861", "patch": "@@ -11,7 +11,7 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Foo {\n     f: isize,\n }\n@@ -28,7 +28,7 @@ impl Foo {\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Bar<T> {\n     f: T,\n }"}]}