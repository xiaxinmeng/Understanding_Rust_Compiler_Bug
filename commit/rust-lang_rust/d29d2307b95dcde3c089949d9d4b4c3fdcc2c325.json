{"sha": "d29d2307b95dcde3c089949d9d4b4c3fdcc2c325", "node_id": "C_kwDOAAsO6NoAKGQyOWQyMzA3Yjk1ZGNkZTNjMDg5OTQ5ZDlkNGI0YzNmZGNjMmMzMjU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-06T19:01:01Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-03-06T19:01:01Z"}, "message": "CTFE engine: expose misc_cast to Miri", "tree": {"sha": "557082f31dcf1c2336ba1337af869e841ffe4d13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/557082f31dcf1c2336ba1337af869e841ffe4d13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d29d2307b95dcde3c089949d9d4b4c3fdcc2c325", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d29d2307b95dcde3c089949d9d4b4c3fdcc2c325", "html_url": "https://github.com/rust-lang/rust/commit/d29d2307b95dcde3c089949d9d4b4c3fdcc2c325", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d29d2307b95dcde3c089949d9d4b4c3fdcc2c325/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c274e4969f058b1c644243181ece9f829efa7594", "url": "https://api.github.com/repos/rust-lang/rust/commits/c274e4969f058b1c644243181ece9f829efa7594", "html_url": "https://github.com/rust-lang/rust/commit/c274e4969f058b1c644243181ece9f829efa7594"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "5be0a183cf6b40300685b951120cf339abee7cca", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d29d2307b95dcde3c089949d9d4b4c3fdcc2c325/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29d2307b95dcde3c089949d9d4b4c3fdcc2c325/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=d29d2307b95dcde3c089949d9d4b4c3fdcc2c325", "patch": "@@ -97,7 +97,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(())\n     }\n \n-    fn misc_cast(\n+    pub fn misc_cast(\n         &self,\n         src: &ImmTy<'tcx, M::PointerTag>,\n         cast_ty: Ty<'tcx>,\n@@ -139,7 +139,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 if let Some(discr) = src.layout.ty.discriminant_for_variant(*self.tcx, index) {\n                     assert!(src.layout.is_zst());\n                     let discr_layout = self.layout_of(discr.ty)?;\n-                    return Ok(self.cast_from_scalar(discr.val, discr_layout, cast_ty).into());\n+                    return Ok(self.cast_from_int_like(discr.val, discr_layout, cast_ty).into());\n                 }\n             }\n             Variants::Multiple { .. } => {}\n@@ -169,17 +169,17 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n         }\n \n-        // # The remaining source values are scalar.\n+        // # The remaining source values are scalar and \"int-like\".\n \n         // For all remaining casts, we either\n         // (a) cast a raw ptr to usize, or\n         // (b) cast from an integer-like (including bool, char, enums).\n         // In both cases we want the bits.\n         let bits = src.to_scalar()?.to_bits(src.layout.size)?;\n-        Ok(self.cast_from_scalar(bits, src.layout, cast_ty).into())\n+        Ok(self.cast_from_int_like(bits, src.layout, cast_ty).into())\n     }\n \n-    pub(super) fn cast_from_scalar(\n+    fn cast_from_int_like(\n         &self,\n         v: u128, // raw bits (there is no ScalarTy so we separate data+layout)\n         src_layout: TyAndLayout<'tcx>,"}, {"sha": "fb4fe41bdbc4c31981b3007ab59cd9faf8c7a02d", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d29d2307b95dcde3c089949d9d4b4c3fdcc2c325/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d29d2307b95dcde3c089949d9d4b4c3fdcc2c325/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=d29d2307b95dcde3c089949d9d4b4c3fdcc2c325", "patch": "@@ -681,18 +681,22 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let tag_val = self.read_immediate(&self.operand_field(op, tag_field)?)?;\n         assert_eq!(tag_layout.size, tag_val.layout.size);\n         assert_eq!(tag_layout.abi.is_signed(), tag_val.layout.abi.is_signed());\n-        let tag_val = tag_val.to_scalar()?;\n-        trace!(\"tag value: {:?}\", tag_val);\n+        trace!(\"tag value: {}\", tag_val);\n \n         // Figure out which discriminant and variant this corresponds to.\n         Ok(match *tag_encoding {\n             TagEncoding::Direct => {\n+                // Generate a specific error if `tag_val` is not an integer.\n+                // (`tag_bits` itself is only used for error messages below.)\n                 let tag_bits = tag_val\n+                    .to_scalar()?\n                     .try_to_int()\n                     .map_err(|dbg_val| err_ub!(InvalidTag(dbg_val)))?\n                     .assert_bits(tag_layout.size);\n                 // Cast bits from tag layout to discriminant layout.\n-                let discr_val = self.cast_from_scalar(tag_bits, tag_layout, discr_layout.ty);\n+                // After the checks we did above, this cannot fail.\n+                let discr_val =\n+                    self.misc_cast(&tag_val, discr_layout.ty).unwrap().to_scalar().unwrap();\n                 let discr_bits = discr_val.assert_bits(discr_layout.size);\n                 // Convert discriminant to variant index, and catch invalid discriminants.\n                 let index = match *op.layout.ty.kind() {\n@@ -712,6 +716,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 (discr_val, index.0)\n             }\n             TagEncoding::Niche { dataful_variant, ref niche_variants, niche_start } => {\n+                let tag_val = tag_val.to_scalar()?;\n                 // Compute the variant this niche value/\"tag\" corresponds to. With niche layout,\n                 // discriminant (encoded in niche/tag) and variant index are the same.\n                 let variants_start = niche_variants.start().as_u32();"}]}