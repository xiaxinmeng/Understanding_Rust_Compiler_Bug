{"sha": "b23d910d570b392b1740ef1bb888f04194fe82c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyM2Q5MTBkNTcwYjM5MmIxNzQwZWYxYmI4ODhmMDQxOTRmZTgyYzE=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-01-29T07:20:27Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-08T03:41:10Z"}, "message": "Skip `Drop` terminators for enum variants without drop glue\n\nWhen doing drop elaboration for an `enum` that may or may not be moved\nout of (an open drop), we check the discriminant of the `enum` to\nsee whether the live variant has any drop flags and then check the drop flags\nto see whether we need to drop each field. Sometimes, however, the live\nvariant has no move paths. In this case, we still emit a drop terminator\nfor the entire enum after checking the enum discriminant.\n\nThis commit skips emitting the drop terminator when the \"otherwise\"\nvariants, those without move paths, have no drop glue. This was\nfrequently the case with `Option`, as the `None` variant has no drop\nglue and no move path.", "tree": {"sha": "1821fe15483d43fbf1eacb5ac2bce15f066fad64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1821fe15483d43fbf1eacb5ac2bce15f066fad64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b23d910d570b392b1740ef1bb888f04194fe82c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b23d910d570b392b1740ef1bb888f04194fe82c1", "html_url": "https://github.com/rust-lang/rust/commit/b23d910d570b392b1740ef1bb888f04194fe82c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b23d910d570b392b1740ef1bb888f04194fe82c1/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a29424a2265411dda7d7446516ac5fd7499e2b55", "url": "https://api.github.com/repos/rust-lang/rust/commits/a29424a2265411dda7d7446516ac5fd7499e2b55", "html_url": "https://github.com/rust-lang/rust/commit/a29424a2265411dda7d7446516ac5fd7499e2b55"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "67679dd12e91efde98aa38081ae85f3bf7ebc531", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b23d910d570b392b1740ef1bb888f04194fe82c1/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b23d910d570b392b1740ef1bb888f04194fe82c1/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=b23d910d570b392b1740ef1bb888f04194fe82c1", "patch": "@@ -153,9 +153,9 @@ where\n     // FIXME: I think we should just control the flags externally,\n     // and then we do not need this machinery.\n     pub fn elaborate_drop(&mut self, bb: BasicBlock) {\n-        debug!(\"elaborate_drop({:?})\", self);\n+        debug!(\"elaborate_drop({:?}, {:?})\", bb, self);\n         let style = self.elaborator.drop_style(self.path, DropFlagMode::Deep);\n-        debug!(\"elaborate_drop({:?}): live - {:?}\", self, style);\n+        debug!(\"elaborate_drop({:?}, {:?}): live - {:?}\", bb, self, style);\n         match style {\n             DropStyle::Dead => {\n                 self.elaborator\n@@ -426,25 +426,21 @@ where\n         let mut unwind_blocks =\n             if unwind.is_cleanup() { None } else { Some(Vec::with_capacity(adt.variants.len())) };\n \n+        let mut have_otherwise_with_drop_glue = false;\n         let mut have_otherwise = false;\n         let tcx = self.tcx();\n \n         for (variant_index, discr) in adt.discriminants(tcx) {\n+            let variant = &adt.variants[variant_index];\n             let subpath = self.elaborator.downcast_subpath(self.path, variant_index);\n+\n             if let Some(variant_path) = subpath {\n                 let base_place = tcx.mk_place_elem(\n                     self.place.clone(),\n-                    ProjectionElem::Downcast(\n-                        Some(adt.variants[variant_index].ident.name),\n-                        variant_index,\n-                    ),\n-                );\n-                let fields = self.move_paths_for_fields(\n-                    &base_place,\n-                    variant_path,\n-                    &adt.variants[variant_index],\n-                    substs,\n+                    ProjectionElem::Downcast(Some(variant.ident.name), variant_index),\n                 );\n+                let fields =\n+                    self.move_paths_for_fields(&base_place, variant_path, &variant, substs);\n                 values.push(discr.val);\n                 if let Unwind::To(unwind) = unwind {\n                     // We can't use the half-ladder from the original\n@@ -474,16 +470,30 @@ where\n                 normal_blocks.push(normal);\n             } else {\n                 have_otherwise = true;\n+\n+                let param_env = self.elaborator.param_env();\n+                let have_field_with_drop_glue = variant\n+                    .fields\n+                    .iter()\n+                    .any(|field| field.ty(tcx, substs).needs_drop(tcx, param_env));\n+                if have_field_with_drop_glue {\n+                    have_otherwise_with_drop_glue = true;\n+                }\n             }\n         }\n \n-        if have_otherwise {\n+        if !have_otherwise {\n+            values.pop();\n+        } else if !have_otherwise_with_drop_glue {\n+            normal_blocks.push(self.goto_block(succ, unwind));\n+            if let Unwind::To(unwind) = unwind {\n+                unwind_blocks.as_mut().unwrap().push(self.goto_block(unwind, Unwind::InCleanup));\n+            }\n+        } else {\n             normal_blocks.push(self.drop_block(succ, unwind));\n             if let Unwind::To(unwind) = unwind {\n                 unwind_blocks.as_mut().unwrap().push(self.drop_block(unwind, Unwind::InCleanup));\n             }\n-        } else {\n-            values.pop();\n         }\n \n         (\n@@ -929,6 +939,11 @@ where\n         self.new_block(unwind, block)\n     }\n \n+    fn goto_block(&mut self, target: BasicBlock, unwind: Unwind) -> BasicBlock {\n+        let block = TerminatorKind::Goto { target };\n+        self.new_block(unwind, block)\n+    }\n+\n     fn drop_flag_test_block(\n         &mut self,\n         on_set: BasicBlock,"}]}