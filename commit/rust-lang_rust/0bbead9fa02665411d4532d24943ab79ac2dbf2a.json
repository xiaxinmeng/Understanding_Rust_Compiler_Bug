{"sha": "0bbead9fa02665411d4532d24943ab79ac2dbf2a", "node_id": "C_kwDOAAsO6NoAKDBiYmVhZDlmYTAyNjY1NDExZDQ1MzJkMjQ5NDNhYjc5YWMyZGJmMmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-10T20:03:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-10T20:03:29Z"}, "message": "Auto merge of #12473 - yue4u:fix/no-enum-parens-in-use, r=Veykril\n\nfix: avoid adding enum parens in use path\n\nclose #12420", "tree": {"sha": "496ec6c69e6e96b1c7d83bbe51db6ff5d67a077c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/496ec6c69e6e96b1c7d83bbe51db6ff5d67a077c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bbead9fa02665411d4532d24943ab79ac2dbf2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bbead9fa02665411d4532d24943ab79ac2dbf2a", "html_url": "https://github.com/rust-lang/rust/commit/0bbead9fa02665411d4532d24943ab79ac2dbf2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bbead9fa02665411d4532d24943ab79ac2dbf2a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9d3fe04844a8f335dec4e40f3ed8e5c4af90c32", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9d3fe04844a8f335dec4e40f3ed8e5c4af90c32", "html_url": "https://github.com/rust-lang/rust/commit/e9d3fe04844a8f335dec4e40f3ed8e5c4af90c32"}, {"sha": "11693dad88fec48de802b936b792a4776064fc1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/11693dad88fec48de802b936b792a4776064fc1d", "html_url": "https://github.com/rust-lang/rust/commit/11693dad88fec48de802b936b792a4776064fc1d"}], "stats": {"total": 53, "additions": 43, "deletions": 10}, "files": [{"sha": "fd76dedad06545eb360f55bb4ef57204a04e3d19", "filename": "crates/ide-completion/src/render/literal.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0bbead9fa02665411d4532d24943ab79ac2dbf2a/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bbead9fa02665411d4532d24943ab79ac2dbf2a/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs?ref=0bbead9fa02665411d4532d24943ab79ac2dbf2a", "patch": "@@ -4,7 +4,7 @@ use hir::{db::HirDatabase, Documentation, HasAttrs, StructKind};\n use ide_db::SymbolKind;\n \n use crate::{\n-    context::{CompletionContext, PathCompletionCtx},\n+    context::{CompletionContext, PathCompletionCtx, PathKind},\n     item::{Builder, CompletionItem},\n     render::{\n         compute_ref_match, compute_type_match,\n@@ -50,9 +50,15 @@ fn render(\n     path: Option<hir::ModPath>,\n ) -> Option<Builder> {\n     let db = completion.db;\n-    let kind = thing.kind(db);\n-    let has_call_parens =\n-        matches!(completion.path_context(), Some(PathCompletionCtx { has_call_parens: true, .. }));\n+    let mut kind = thing.kind(db);\n+    let should_add_parens = match completion.path_context() {\n+        Some(PathCompletionCtx { has_call_parens: true, .. }) => false,\n+        Some(PathCompletionCtx { kind: PathKind::Use | PathKind::Type { .. }, .. }) => {\n+            cov_mark::hit!(no_parens_in_use_item);\n+            false\n+        }\n+        _ => true,\n+    };\n \n     let fields = thing.fields(completion)?;\n     let (qualified_name, short_qualified_name, qualified) = match path {\n@@ -69,10 +75,10 @@ fn render(\n     let snippet_cap = ctx.snippet_cap();\n \n     let mut rendered = match kind {\n-        StructKind::Tuple if !has_call_parens => {\n+        StructKind::Tuple if should_add_parens => {\n             render_tuple_lit(db, snippet_cap, &fields, &qualified_name)\n         }\n-        StructKind::Record if !has_call_parens => {\n+        StructKind::Record if should_add_parens => {\n             render_record_lit(db, snippet_cap, &fields, &qualified_name)\n         }\n         _ => RenderedLiteral { literal: qualified_name.clone(), detail: qualified_name.clone() },\n@@ -82,6 +88,11 @@ fn render(\n         rendered.literal.push_str(\"$0\");\n     }\n \n+    // only show name in label if not adding parens\n+    if !should_add_parens {\n+        kind = StructKind::Unit;\n+    }\n+\n     let mut item = CompletionItem::new(\n         CompletionItemKind::SymbolKind(thing.symbol_kind()),\n         ctx.source_range(),"}, {"sha": "c05a7ad9fa5d0e7910f6e5f4efb1a4cc16b227f0", "filename": "crates/ide-completion/src/tests/expression.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0bbead9fa02665411d4532d24943ab79ac2dbf2a/crates%2Fide-completion%2Fsrc%2Ftests%2Fexpression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bbead9fa02665411d4532d24943ab79ac2dbf2a/crates%2Fide-completion%2Fsrc%2Ftests%2Fexpression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fexpression.rs?ref=0bbead9fa02665411d4532d24943ab79ac2dbf2a", "patch": "@@ -600,8 +600,8 @@ fn func() {\n }\n \"#,\n         expect![[r#\"\n-            fn variant    fn() -> Enum\n-            ev Variant(\u2026) Variant\n+            fn variant fn() -> Enum\n+            ev Variant Variant\n         \"#]],\n     );\n }"}, {"sha": "d21f62f4adbc28051214bcbfd6bad7b8ea2273c8", "filename": "crates/ide-completion/src/tests/pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0bbead9fa02665411d4532d24943ab79ac2dbf2a/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bbead9fa02665411d4532d24943ab79ac2dbf2a/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs?ref=0bbead9fa02665411d4532d24943ab79ac2dbf2a", "patch": "@@ -435,7 +435,7 @@ fn foo() {\n }\n \"#,\n         expect![[r#\"\n-            ev TupleVariant(\u2026) TupleVariant\n+            ev TupleVariant TupleVariant\n         \"#]],\n     );\n     check_empty(\n@@ -450,7 +450,7 @@ fn foo() {\n }\n \"#,\n         expect![[r#\"\n-            ev RecordVariant {\u2026} RecordVariant\n+            ev RecordVariant RecordVariant\n         \"#]],\n     );\n }"}, {"sha": "2d2ec864d373fa2fb9eaec898a5e32f04b1fc32e", "filename": "crates/ide-completion/src/tests/use_tree.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0bbead9fa02665411d4532d24943ab79ac2dbf2a/crates%2Fide-completion%2Fsrc%2Ftests%2Fuse_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bbead9fa02665411d4532d24943ab79ac2dbf2a/crates%2Fide-completion%2Fsrc%2Ftests%2Fuse_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fuse_tree.rs?ref=0bbead9fa02665411d4532d24943ab79ac2dbf2a", "patch": "@@ -172,6 +172,28 @@ impl Foo {\n     );\n }\n \n+#[test]\n+fn enum_no_parens_in_qualified_use_tree() {\n+    cov_mark::check!(no_parens_in_use_item);\n+    cov_mark::check!(enum_plain_qualified_use_tree);\n+    check(\n+        r#\"\n+use Foo::$0\n+\n+enum Foo {\n+    UnitVariant,\n+    TupleVariant(),\n+    RecordVariant {},\n+}\n+\"#,\n+        expect![[r#\"\n+            ev RecordVariant RecordVariant\n+            ev TupleVariant  TupleVariant\n+            ev UnitVariant   UnitVariant\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn self_qualified_use_tree() {\n     check("}]}