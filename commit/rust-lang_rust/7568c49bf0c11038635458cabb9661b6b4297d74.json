{"sha": "7568c49bf0c11038635458cabb9661b6b4297d74", "node_id": "C_kwDOAAsO6NoAKDc1NjhjNDliZjBjMTEwMzg2MzU0NThjYWJiOTY2MWI2YjQyOTdkNzQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-06T20:26:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-06T20:26:09Z"}, "message": "Rollup merge of #106287 - Nilstrieb:its-bugging-me-how-we-dont-have-docs, r=jyn514\n\nAdd some docs to `bug`, `span_bug` and `delay_span_bug`\n\ncc `@mejrs` as you wanted me to do this, does this look good and understandable?", "tree": {"sha": "00445f1fd865644b54f0969b5759ef0973d07a5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00445f1fd865644b54f0969b5759ef0973d07a5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7568c49bf0c11038635458cabb9661b6b4297d74", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjuIPhCRBK7hj4Ov3rIwAAwh0IAG8kL1ZkEtV5ujWcUsHR60x+\nsl4+u+h7wN8ArUx3PXyLnJpL0ocJZfVm5zHf5SvEXgf0lzzupXt/xr17tp/rn2yk\n3XONyF2UqLNKN0/9cTJORI8ei+8Z9oyCyAZG60Nnp+uSjou0PAMMJKDreMjTX0p/\nFvoMflo5H8E6rT6jVWVy2bkgG/+SJX0RU2NfEzkKJ6aGgye93v7nMeRTV/bX3Ss7\nXDT13AqgJbfnasN9uULhYioC3dMjZj9Jy2yKM/w7owbh1XJENk7x2Vz/ZSppxaaJ\nHPrdcG0vGptrPi09vckLyzgLwyM4VRICYg2Ea/mP7AEqoudlyY56O11jgCIX0YE=\n=mh0Y\n-----END PGP SIGNATURE-----\n", "payload": "tree 00445f1fd865644b54f0969b5759ef0973d07a5a\nparent afe8c4537c9009a251a31e8f022b7795fc305d4f\nparent 0047e250909dd4739fcd20e77a49685f45490987\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1673036769 +0100\ncommitter GitHub <noreply@github.com> 1673036769 +0100\n\nRollup merge of #106287 - Nilstrieb:its-bugging-me-how-we-dont-have-docs, r=jyn514\n\nAdd some docs to `bug`, `span_bug` and `delay_span_bug`\n\ncc `@mejrs` as you wanted me to do this, does this look good and understandable?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7568c49bf0c11038635458cabb9661b6b4297d74", "html_url": "https://github.com/rust-lang/rust/commit/7568c49bf0c11038635458cabb9661b6b4297d74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7568c49bf0c11038635458cabb9661b6b4297d74/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afe8c4537c9009a251a31e8f022b7795fc305d4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/afe8c4537c9009a251a31e8f022b7795fc305d4f", "html_url": "https://github.com/rust-lang/rust/commit/afe8c4537c9009a251a31e8f022b7795fc305d4f"}, {"sha": "0047e250909dd4739fcd20e77a49685f45490987", "url": "https://api.github.com/repos/rust-lang/rust/commits/0047e250909dd4739fcd20e77a49685f45490987", "html_url": "https://github.com/rust-lang/rust/commit/0047e250909dd4739fcd20e77a49685f45490987"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "621704335e432226e01e8f3ae5ae44873e0b98ad", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7568c49bf0c11038635458cabb9661b6b4297d74/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7568c49bf0c11038635458cabb9661b6b4297d74/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=7568c49bf0c11038635458cabb9661b6b4297d74", "patch": "@@ -978,6 +978,7 @@ impl Handler {\n         self.inner.borrow_mut().span_bug(span, msg)\n     }\n \n+    /// For documentation on this, see `Session::delay_span_bug`.\n     #[track_caller]\n     pub fn delay_span_bug(\n         &self,\n@@ -1529,6 +1530,7 @@ impl HandlerInner {\n         self.emit_diagnostic(diag.set_span(sp));\n     }\n \n+    /// For documentation on this, see `Session::delay_span_bug`.\n     #[track_caller]\n     fn delay_span_bug(\n         &mut self,"}, {"sha": "5ca4d260179ceff29f982033a0a3cb4e171e089d", "filename": "compiler/rustc_middle/src/macros.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7568c49bf0c11038635458cabb9661b6b4297d74/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7568c49bf0c11038635458cabb9661b6b4297d74/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs?ref=7568c49bf0c11038635458cabb9661b6b4297d74", "patch": "@@ -1,3 +1,13 @@\n+/// A macro for triggering an ICE.\n+/// Calling `bug` instead of panicking will result in a nicer error message and should\n+/// therefore be prefered over `panic`/`unreachable` or others.\n+///\n+/// If you have a span available, you should use [`span_bug`] instead.\n+///\n+/// If the bug should only be emitted when compilation didn't fail, [`Session::delay_span_bug`] may be useful.\n+///\n+/// [`Session::delay_span_bug`]: rustc_session::Session::delay_span_bug\n+/// [`span_bug`]: crate::span_bug\n #[macro_export]\n macro_rules! bug {\n     () => ( $crate::bug!(\"impossible case reached\") );\n@@ -8,6 +18,14 @@ macro_rules! bug {\n     });\n }\n \n+/// A macro for triggering an ICE with a span.\n+/// Calling `span_bug!` instead of panicking will result in a nicer error message and point\n+/// at the code the compiler was compiling when it ICEd. This is the preferred way to trigger\n+/// ICEs.\n+///\n+/// If the bug should only be emitted when compilation didn't fail, [`Session::delay_span_bug`] may be useful.\n+///\n+/// [`Session::delay_span_bug`]: rustc_session::Session::delay_span_bug\n #[macro_export]\n macro_rules! span_bug {\n     ($span:expr, $msg:expr) => ({ $crate::util::bug::span_bug_fmt($span, ::std::format_args!($msg)) });"}, {"sha": "b73ae593905353a8d99c97dff746f4db9c375870", "filename": "compiler/rustc_middle/src/util/bug.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7568c49bf0c11038635458cabb9661b6b4297d74/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7568c49bf0c11038635458cabb9661b6b4297d74/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Futil%2Fbug.rs?ref=7568c49bf0c11038635458cabb9661b6b4297d74", "patch": "@@ -35,8 +35,7 @@ fn opt_span_bug_fmt<S: Into<MultiSpan>>(\n             (Some(tcx), None) => tcx.sess.diagnostic().bug(&msg),\n             (None, _) => panic_any(msg),\n         }\n-    });\n-    unreachable!();\n+    })\n }\n \n /// A query to trigger a `delay_span_bug`. Clearly, if one has a `tcx` one can already trigger a"}, {"sha": "1b2e8d9dc707bdd60673f4b2d859057899227588", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7568c49bf0c11038635458cabb9661b6b4297d74/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7568c49bf0c11038635458cabb9661b6b4297d74/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=7568c49bf0c11038635458cabb9661b6b4297d74", "patch": "@@ -590,7 +590,19 @@ impl Session {\n     pub fn warn(&self, msg: impl Into<DiagnosticMessage>) {\n         self.diagnostic().warn(msg)\n     }\n-    /// Delay a span_bug() call until abort_if_errors()\n+\n+    /// Ensures that compilation cannot succeed.\n+    ///\n+    /// If this function has been called but no errors have been emitted and\n+    /// compilation succeeds, it will cause an internal compiler error (ICE).\n+    ///\n+    /// This can be used in code paths that should never run on successful compilations.\n+    /// For example, it can be used to create an [`ErrorGuaranteed`]\n+    /// (but you should prefer threading through the [`ErrorGuaranteed`] from an error emission directly).\n+    ///\n+    /// If no span is available, use [`DUMMY_SP`].\n+    ///\n+    /// [`DUMMY_SP`]: rustc_span::DUMMY_SP\n     #[track_caller]\n     pub fn delay_span_bug<S: Into<MultiSpan>>(\n         &self,"}]}