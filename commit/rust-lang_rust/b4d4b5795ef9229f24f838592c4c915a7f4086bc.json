{"sha": "b4d4b5795ef9229f24f838592c4c915a7f4086bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZDRiNTc5NWVmOTIyOWYyNGY4Mzg1OTJjNGM5MTVhN2Y0MDg2YmM=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2019-03-24T22:54:52Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2019-03-24T22:54:52Z"}, "message": "Use BTreeMap to guarantee consistent ordering", "tree": {"sha": "d7636dc5f8490ced7d9b944b41f0e2e113460c6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7636dc5f8490ced7d9b944b41f0e2e113460c6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4d4b5795ef9229f24f838592c4c915a7f4086bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4d4b5795ef9229f24f838592c4c915a7f4086bc", "html_url": "https://github.com/rust-lang/rust/commit/b4d4b5795ef9229f24f838592c4c915a7f4086bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4d4b5795ef9229f24f838592c4c915a7f4086bc/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f1f5aac0564e80700785abea20e8255837e6d48", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f1f5aac0564e80700785abea20e8255837e6d48", "html_url": "https://github.com/rust-lang/rust/commit/5f1f5aac0564e80700785abea20e8255837e6d48"}], "stats": {"total": 44, "additions": 28, "deletions": 16}, "files": [{"sha": "a686e91b6947ced8501523d038ff75e07c7e2181", "filename": "src/cargo-fmt/main.rs", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b4d4b5795ef9229f24f838592c4c915a7f4086bc/src%2Fcargo-fmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d4b5795ef9229f24f838592c4c915a7f4086bc/src%2Fcargo-fmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo-fmt%2Fmain.rs?ref=b4d4b5795ef9229f24f838592c4c915a7f4086bc", "patch": "@@ -6,7 +6,8 @@\n use cargo_metadata;\n use getopts;\n \n-use std::collections::{HashMap, HashSet};\n+use std::cmp::Ordering;\n+use std::collections::{BTreeMap, BTreeSet};\n use std::env;\n use std::fs;\n use std::hash::{Hash, Hasher};\n@@ -122,7 +123,7 @@ fn handle_command_status(status: Result<i32, io::Error>, opts: &getopts::Options\n }\n \n fn get_version(verbosity: Verbosity) -> Result<i32, io::Error> {\n-    run_rustfmt(&HashSet::new(), &[String::from(\"--version\")], verbosity)\n+    run_rustfmt(&BTreeSet::new(), &[String::from(\"--version\")], verbosity)\n }\n \n fn format_crate(verbosity: Verbosity, strategy: &CargoFmtStrategy) -> Result<i32, io::Error> {\n@@ -131,7 +132,7 @@ fn format_crate(verbosity: Verbosity, strategy: &CargoFmtStrategy) -> Result<i32\n         .iter()\n         .any(|s| [\"--print-config\", \"-h\", \"--help\", \"-V\", \"--version\"].contains(&s.as_str()))\n     {\n-        HashSet::new()\n+        BTreeSet::new()\n     } else {\n         get_targets(strategy)?\n     };\n@@ -175,6 +176,18 @@ impl PartialEq for Target {\n     }\n }\n \n+impl PartialOrd for Target {\n+    fn partial_cmp(&self, other: &Target) -> Option<Ordering> {\n+        Some(self.path.cmp(&other.path))\n+    }\n+}\n+\n+impl Ord for Target {\n+    fn cmp(&self, other: &Target) -> Ordering {\n+        self.path.cmp(&other.path)\n+    }\n+}\n+\n impl Eq for Target {}\n \n impl Hash for Target {\n@@ -204,12 +217,12 @@ impl CargoFmtStrategy {\n }\n \n /// Based on the specified `CargoFmtStrategy`, returns a set of main source files.\n-fn get_targets(strategy: &CargoFmtStrategy) -> Result<HashSet<Target>, io::Error> {\n-    let mut targets = HashSet::new();\n+fn get_targets(strategy: &CargoFmtStrategy) -> Result<BTreeSet<Target>, io::Error> {\n+    let mut targets = BTreeSet::new();\n \n     match *strategy {\n         CargoFmtStrategy::Root => get_targets_root_only(&mut targets)?,\n-        CargoFmtStrategy::All => get_targets_recursive(None, &mut targets, &mut HashSet::new())?,\n+        CargoFmtStrategy::All => get_targets_recursive(None, &mut targets, &mut BTreeSet::new())?,\n         CargoFmtStrategy::Some(ref hitlist) => get_targets_with_hitlist(hitlist, &mut targets)?,\n     }\n \n@@ -223,7 +236,7 @@ fn get_targets(strategy: &CargoFmtStrategy) -> Result<HashSet<Target>, io::Error\n     }\n }\n \n-fn get_targets_root_only(targets: &mut HashSet<Target>) -> Result<(), io::Error> {\n+fn get_targets_root_only(targets: &mut BTreeSet<Target>) -> Result<(), io::Error> {\n     let metadata = get_cargo_metadata(None)?;\n     let current_dir = env::current_dir()?.canonicalize()?;\n     let current_dir_manifest = current_dir.join(\"Cargo.toml\");\n@@ -243,8 +256,8 @@ fn get_targets_root_only(targets: &mut HashSet<Target>) -> Result<(), io::Error>\n \n fn get_targets_recursive(\n     manifest_path: Option<&Path>,\n-    mut targets: &mut HashSet<Target>,\n-    visited: &mut HashSet<String>,\n+    mut targets: &mut BTreeSet<Target>,\n+    visited: &mut BTreeSet<String>,\n ) -> Result<(), io::Error> {\n     let metadata = get_cargo_metadata(manifest_path)?;\n \n@@ -275,11 +288,11 @@ fn get_targets_recursive(\n \n fn get_targets_with_hitlist(\n     hitlist: &[String],\n-    targets: &mut HashSet<Target>,\n+    targets: &mut BTreeSet<Target>,\n ) -> Result<(), io::Error> {\n     let metadata = get_cargo_metadata(None)?;\n \n-    let mut workspace_hitlist: HashSet<&String> = HashSet::from_iter(hitlist);\n+    let mut workspace_hitlist: BTreeSet<&String> = BTreeSet::from_iter(hitlist);\n \n     for package in metadata.packages {\n         if workspace_hitlist.remove(&package.name) {\n@@ -300,14 +313,14 @@ fn get_targets_with_hitlist(\n     }\n }\n \n-fn add_targets(target_paths: &[cargo_metadata::Target], targets: &mut HashSet<Target>) {\n+fn add_targets(target_paths: &[cargo_metadata::Target], targets: &mut BTreeSet<Target>) {\n     for target in target_paths {\n         targets.insert(Target::from_target(target));\n     }\n }\n \n fn run_rustfmt(\n-    targets: &HashSet<Target>,\n+    targets: &BTreeSet<Target>,\n     fmt_args: &[String],\n     verbosity: Verbosity,\n ) -> Result<i32, io::Error> {\n@@ -318,9 +331,8 @@ fn run_rustfmt(\n                 println!(\"[{} ({})] {:?}\", t.kind, t.edition, t.path)\n             }\n         })\n-        .map(|t| (&t.edition, &t.path))\n-        .fold(HashMap::new(), |mut h, t| {\n-            h.entry(t.0).or_insert_with(Vec::new).push(t.1);\n+        .fold(BTreeMap::new(), |mut h, t| {\n+            h.entry(&t.edition).or_insert_with(Vec::new).push(&t.path);\n             h\n         });\n "}]}