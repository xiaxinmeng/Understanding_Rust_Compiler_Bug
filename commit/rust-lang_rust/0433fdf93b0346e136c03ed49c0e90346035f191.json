{"sha": "0433fdf93b0346e136c03ed49c0e90346035f191", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MzNmZGY5M2IwMzQ2ZTEzNmMwM2VkNDljMGU5MDM0NjAzNWYxOTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-21T08:20:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-21T08:20:38Z"}, "message": "Auto merge of #76843 - kornelski:longtypetofile, r=ecstatic-morse\n\nLet user see the full type of type-length limit error\n\nSeeing the full type of the error is sometimes essential to diagnosing the problem, but the type itself is too long to be displayed in the terminal in a useful fashion. This change solves this dilemma by writing the full offending type name to a file, and displays this filename as a note.\n\n> note: the full type name been written to '$TEST_BUILD_DIR/issues/issue-22638/issue-22638.long-type.txt'\n\nCloses #76777", "tree": {"sha": "7b4a9c6fc8b3e17d0cab3e2dc4e2aff81b5669ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b4a9c6fc8b3e17d0cab3e2dc4e2aff81b5669ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0433fdf93b0346e136c03ed49c0e90346035f191", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0433fdf93b0346e136c03ed49c0e90346035f191", "html_url": "https://github.com/rust-lang/rust/commit/0433fdf93b0346e136c03ed49c0e90346035f191", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0433fdf93b0346e136c03ed49c0e90346035f191/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a409a233e02b1864d1b76495a1f946bb56c7aeb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a409a233e02b1864d1b76495a1f946bb56c7aeb2", "html_url": "https://github.com/rust-lang/rust/commit/a409a233e02b1864d1b76495a1f946bb56c7aeb2"}, {"sha": "34d3c7df80dc687e184d8bfa456e851cad9839de", "url": "https://api.github.com/repos/rust-lang/rust/commits/34d3c7df80dc687e184d8bfa456e851cad9839de", "html_url": "https://github.com/rust-lang/rust/commit/34d3c7df80dc687e184d8bfa456e851cad9839de"}], "stats": {"total": 111, "additions": 71, "deletions": 40}, "files": [{"sha": "7e12cc9176ee169844b12e46d0abf2e7a2823761", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 40, "deletions": 26, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/0433fdf93b0346e136c03ed49c0e90346035f191/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0433fdf93b0346e136c03ed49c0e90346035f191/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=0433fdf93b0346e136c03ed49c0e90346035f191", "patch": "@@ -197,6 +197,7 @@ use rustc_session::config::EntryFnType;\n use rustc_span::source_map::{dummy_spanned, respan, Span, Spanned, DUMMY_SP};\n use smallvec::SmallVec;\n use std::iter;\n+use std::path::PathBuf;\n \n #[derive(PartialEq)]\n pub enum MonoItemCollectionMode {\n@@ -420,27 +421,38 @@ fn record_accesses<'a, 'tcx: 'a>(\n     inlining_map.lock_mut().record_accesses(caller, &accesses);\n }\n \n-// Shrinks string by keeping prefix and suffix of given sizes.\n-fn shrink(s: String, before: usize, after: usize) -> String {\n-    // An iterator of all byte positions including the end of the string.\n-    let positions = || s.char_indices().map(|(i, _)| i).chain(iter::once(s.len()));\n-\n-    let shrunk = format!(\n-        \"{before}...{after}\",\n-        before = &s[..positions().nth(before).unwrap_or(s.len())],\n-        after = &s[positions().rev().nth(after).unwrap_or(0)..],\n-    );\n+/// Format instance name that is already known to be too long for rustc.\n+/// Show only the first and last 32 characters to avoid blasting\n+/// the user's terminal with thousands of lines of type-name.\n+///\n+/// If the type name is longer than before+after, it will be written to a file.\n+fn shrunk_instance_name(\n+    tcx: TyCtxt<'tcx>,\n+    instance: &Instance<'tcx>,\n+    before: usize,\n+    after: usize,\n+) -> (String, Option<PathBuf>) {\n+    let s = instance.to_string();\n \n     // Only use the shrunk version if it's really shorter.\n     // This also avoids the case where before and after slices overlap.\n-    if shrunk.len() < s.len() { shrunk } else { s }\n-}\n+    if s.chars().nth(before + after + 1).is_some() {\n+        // An iterator of all byte positions including the end of the string.\n+        let positions = || s.char_indices().map(|(i, _)| i).chain(iter::once(s.len()));\n+\n+        let shrunk = format!(\n+            \"{before}...{after}\",\n+            before = &s[..positions().nth(before).unwrap_or(s.len())],\n+            after = &s[positions().rev().nth(after).unwrap_or(0)..],\n+        );\n+\n+        let path = tcx.output_filenames(LOCAL_CRATE).temp_path_ext(\"long-type.txt\", None);\n+        let written_to_path = std::fs::write(&path, s).ok().map(|_| path);\n \n-// Format instance name that is already known to be too long for rustc.\n-// Show only the first and last 32 characters to avoid blasting\n-// the user's terminal with thousands of lines of type-name.\n-fn shrunk_instance_name(instance: &Instance<'tcx>) -> String {\n-    shrink(instance.to_string(), 32, 32)\n+        (shrunk, written_to_path)\n+    } else {\n+        (s, None)\n+    }\n }\n \n fn check_recursion_limit<'tcx>(\n@@ -465,15 +477,16 @@ fn check_recursion_limit<'tcx>(\n     // more than the recursion limit is assumed to be causing an\n     // infinite expansion.\n     if !tcx.sess.recursion_limit().value_within_limit(adjusted_recursion_depth) {\n-        let error = format!(\n-            \"reached the recursion limit while instantiating `{}`\",\n-            shrunk_instance_name(&instance),\n-        );\n+        let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance, 32, 32);\n+        let error = format!(\"reached the recursion limit while instantiating `{}`\", shrunk);\n         let mut err = tcx.sess.struct_span_fatal(span, &error);\n         err.span_note(\n             tcx.def_span(def_id),\n             &format!(\"`{}` defined here\", tcx.def_path_str(def_id)),\n         );\n+        if let Some(path) = written_to_path {\n+            err.note(&format!(\"the full type name has been written to '{}'\", path.display()));\n+        }\n         err.emit();\n         FatalError.raise();\n     }\n@@ -502,12 +515,13 @@ fn check_type_length_limit<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) {\n     //\n     // Bail out in these cases to avoid that bad user experience.\n     if !tcx.sess.type_length_limit().value_within_limit(type_length) {\n-        let msg = format!(\n-            \"reached the type-length limit while instantiating `{}`\",\n-            shrunk_instance_name(&instance),\n-        );\n+        let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance, 32, 32);\n+        let msg = format!(\"reached the type-length limit while instantiating `{}`\", shrunk);\n         let mut diag = tcx.sess.struct_span_fatal(tcx.def_span(instance.def_id()), &msg);\n-        diag.note(&format!(\n+        if let Some(path) = written_to_path {\n+            diag.note(&format!(\"the full type name has been written to '{}'\", path.display()));\n+        }\n+        diag.help(&format!(\n             \"consider adding a `#![type_length_limit=\\\"{}\\\"]` attribute to your crate\",\n             type_length\n         ));"}, {"sha": "9b9f332ca86deb92c4b31a088da5f815a6075769", "filename": "src/test/ui/infinite/infinite-instantiation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.rs?ref=0433fdf93b0346e136c03ed49c0e90346035f191", "patch": "@@ -1,4 +1,5 @@\n // build-fail\n+// normalize-stderr-test: \".nll/\" -> \"/\"\n \n trait ToOpt: Sized {\n     fn to_option(&self) -> Option<Self>;"}, {"sha": "52f5781349e1650996fae4ffb94bd0ac8df21ff9", "filename": "src/test/ui/infinite/infinite-instantiation.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.stderr?ref=0433fdf93b0346e136c03ed49c0e90346035f191", "patch": "@@ -1,14 +1,15 @@\n error: reached the recursion limit while instantiating `function::<Option<Option<Option<...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n-  --> $DIR/infinite-instantiation.rs:21:9\n+  --> $DIR/infinite-instantiation.rs:22:9\n    |\n LL |         function(counter - 1, t.to_option());\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: `function` defined here\n-  --> $DIR/infinite-instantiation.rs:19:1\n+  --> $DIR/infinite-instantiation.rs:20:1\n    |\n LL | fn function<T:ToOpt + Clone>(counter: usize, t: T) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/infinite/infinite-instantiation/infinite-instantiation.long-type.txt'\n \n error: aborting due to previous error\n "}, {"sha": "198ceccc2c33cd95cc9f884e60afac413a8465e2", "filename": "src/test/ui/issues/issue-22638.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Fissues%2Fissue-22638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Fissues%2Fissue-22638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22638.rs?ref=0433fdf93b0346e136c03ed49c0e90346035f191", "patch": "@@ -1,5 +1,6 @@\n // build-fail\n // normalize-stderr-test: \"<\\[closure@.+`\" -> \"$$CLOSURE`\"\n+// normalize-stderr-test: \".nll/\" -> \"/\"\n \n #![allow(unused)]\n "}, {"sha": "1354ec8e899c09c09f17f68c9c42e4062cd37471", "filename": "src/test/ui/issues/issue-22638.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr?ref=0433fdf93b0346e136c03ed49c0e90346035f191", "patch": "@@ -1,14 +1,15 @@\n error: reached the recursion limit while instantiating `A::matches::$CLOSURE`\n-  --> $DIR/issue-22638.rs:55:9\n+  --> $DIR/issue-22638.rs:56:9\n    |\n LL |         a.matches(f)\n    |         ^^^^^^^^^^^^\n    |\n note: `A::matches` defined here\n-  --> $DIR/issue-22638.rs:14:5\n+  --> $DIR/issue-22638.rs:15:5\n    |\n LL |     pub fn matches<F: Fn()>(&self, f: &F) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-22638/issue-22638.long-type.txt'\n \n error: aborting due to previous error\n "}, {"sha": "50d1f166c98650a09b562e5c47b0e3975dfc3406", "filename": "src/test/ui/issues/issue-37311-type-length-limit/issue-37311.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.rs?ref=0433fdf93b0346e136c03ed49c0e90346035f191", "patch": "@@ -1,4 +1,5 @@\n // build-fail\n+// normalize-stderr-test: \".nll/\" -> \"/\"\n \n trait Mirror {\n     type Image;"}, {"sha": "93aeb89469d4a3dbe9702dca34d3e66ce03a31a0", "filename": "src/test/ui/issues/issue-37311-type-length-limit/issue-37311.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr?ref=0433fdf93b0346e136c03ed49c0e90346035f191", "patch": "@@ -1,14 +1,15 @@\n error: reached the recursion limit while instantiating `<(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(.....), ...), ...) as Foo>::recurse`\n-  --> $DIR/issue-37311.rs:16:9\n+  --> $DIR/issue-37311.rs:17:9\n    |\n LL |         (self, self).recurse();\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: `<T as Foo>::recurse` defined here\n-  --> $DIR/issue-37311.rs:15:5\n+  --> $DIR/issue-37311.rs:16:5\n    |\n LL |     fn recurse(&self) {\n    |     ^^^^^^^^^^^^^^^^^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-37311-type-length-limit/issue-37311/issue-37311.long-type.txt'\n \n error: aborting due to previous error\n "}, {"sha": "98192dae20da878fe90dfe2e086a1aae324f37b6", "filename": "src/test/ui/issues/issue-67552.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Fissues%2Fissue-67552.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Fissues%2Fissue-67552.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67552.rs?ref=0433fdf93b0346e136c03ed49c0e90346035f191", "patch": "@@ -1,4 +1,5 @@\n // build-fail\n+// normalize-stderr-test: \".nll/\" -> \"/\"\n \n fn main() {\n     rec(Empty);"}, {"sha": "cf05a72e921e01c987f23b19c0ba494f05ca1181", "filename": "src/test/ui/issues/issue-67552.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr?ref=0433fdf93b0346e136c03ed49c0e90346035f191", "patch": "@@ -1,16 +1,17 @@\n error: reached the recursion limit while instantiating `rec::<&mut &mut &mut &mut &mut &... &mut &mut &mut &mut &mut Empty>`\n-  --> $DIR/issue-67552.rs:27:9\n+  --> $DIR/issue-67552.rs:28:9\n    |\n LL |         rec(identity(&mut it))\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: `rec` defined here\n-  --> $DIR/issue-67552.rs:20:1\n+  --> $DIR/issue-67552.rs:21:1\n    |\n LL | / fn rec<T>(mut it: T)\n LL | | where\n LL | |     T: Iterator,\n    | |________________^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-67552/issue-67552.long-type.txt'\n \n error: aborting due to previous error\n "}, {"sha": "a9b8126618fe5e4d504d31307823686d75b9b1a6", "filename": "src/test/ui/issues/issue-8727.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Fissues%2Fissue-8727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Fissues%2Fissue-8727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8727.rs?ref=0433fdf93b0346e136c03ed49c0e90346035f191", "patch": "@@ -2,6 +2,7 @@\n // recursions.\n \n // build-fail\n+// normalize-stderr-test: \".nll/\" -> \"/\"\n \n fn generic<T>() { //~ WARN function cannot return without recursing\n     generic::<Option<T>>();"}, {"sha": "10daba5ef3dd5d2475d1eaada272aa2997619f3a", "filename": "src/test/ui/issues/issue-8727.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr?ref=0433fdf93b0346e136c03ed49c0e90346035f191", "patch": "@@ -1,5 +1,5 @@\n warning: function cannot return without recursing\n-  --> $DIR/issue-8727.rs:6:1\n+  --> $DIR/issue-8727.rs:7:1\n    |\n LL | fn generic<T>() {\n    | ^^^^^^^^^^^^^^^ cannot return without recursing\n@@ -10,16 +10,17 @@ LL |     generic::<Option<T>>();\n    = help: a `loop` may express intention better if this is on purpose\n \n error: reached the recursion limit while instantiating `generic::<Option<Option<Option<O...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n-  --> $DIR/issue-8727.rs:7:5\n+  --> $DIR/issue-8727.rs:8:5\n    |\n LL |     generic::<Option<T>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: `generic` defined here\n-  --> $DIR/issue-8727.rs:6:1\n+  --> $DIR/issue-8727.rs:7:1\n    |\n LL | fn generic<T>() {\n    | ^^^^^^^^^^^^^^^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-8727/issue-8727.long-type.txt'\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "658def0ad5a72d7515efdfa65ae9606db7481cfd", "filename": "src/test/ui/recursion/issue-38591-non-regular-dropck-recursion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.rs?ref=0433fdf93b0346e136c03ed49c0e90346035f191", "patch": "@@ -2,7 +2,9 @@\n // no free regions or type parameters.\n // Codegen however, has to error for the infinitely many `drop_in_place`\n // functions it has been asked to create.\n+\n // build-fail\n+// normalize-stderr-test: \".nll/\" -> \"/\"\n \n struct S<T> {\n     t: T,"}, {"sha": "3efe13b3de3d0f9e93aa411111f9b7a8eef7e59e", "filename": "src/test/ui/recursion/issue-38591-non-regular-dropck-recursion.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.stderr?ref=0433fdf93b0346e136c03ed49c0e90346035f191", "patch": "@@ -21,6 +21,7 @@ LL | |     // SAFETY: see comment above\n LL | |     unsafe { drop_in_place(to_drop) }\n LL | | }\n    | |_^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/recursion/issue-38591-non-regular-dropck-recursion/issue-38591-non-regular-dropck-recursion.long-type.txt'\n \n error: aborting due to previous error\n "}, {"sha": "b3ba0ec3a2a01e9680f5aa5f622af6368f05808f", "filename": "src/test/ui/recursion/recursion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Frecursion%2Frecursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Frecursion%2Frecursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursion.rs?ref=0433fdf93b0346e136c03ed49c0e90346035f191", "patch": "@@ -1,5 +1,6 @@\n // build-fail\n // compile-flags:-C overflow-checks=off\n+// normalize-stderr-test: \".nll/\" -> \"/\"\n \n enum Nil {NilValue}\n struct Cons<T> {head:isize, tail:T}"}, {"sha": "d2844d0e6d9f026f04fb6c10a7d35fc6f98721ec", "filename": "src/test/ui/recursion/recursion.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Frecursion%2Frecursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Frecursion%2Frecursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursion.stderr?ref=0433fdf93b0346e136c03ed49c0e90346035f191", "patch": "@@ -1,14 +1,15 @@\n error: reached the recursion limit while instantiating `test::<Cons<Cons<Cons<Cons<Cons<...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n-  --> $DIR/recursion.rs:17:11\n+  --> $DIR/recursion.rs:18:11\n    |\n LL |     _ => {test (n-1, i+1, Cons {head:2*i+1, tail:first}, Cons{head:i*i, tail:second})}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: `test` defined here\n-  --> $DIR/recursion.rs:15:1\n+  --> $DIR/recursion.rs:16:1\n    |\n LL | fn test<T:Dot> (n:isize, i:isize, first:T, second:T) ->isize {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/recursion/recursion/recursion.long-type.txt'\n \n error: aborting due to previous error\n "}, {"sha": "c1f3acbecf95fab10c3f676cb6b4ce4e9e8f355a", "filename": "src/test/ui/type_length_limit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Ftype_length_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Ftype_length_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype_length_limit.rs?ref=0433fdf93b0346e136c03ed49c0e90346035f191", "patch": "@@ -1,5 +1,6 @@\n // build-fail\n // error-pattern: reached the type-length limit while instantiating\n+// normalize-stderr-test: \".nll/\" -> \"/\"\n \n // Test that the type length limit can be changed.\n "}, {"sha": "1c0a596a64cb9fa04828a34b5a57fa7d22c62b20", "filename": "src/test/ui/type_length_limit.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Ftype_length_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0433fdf93b0346e136c03ed49c0e90346035f191/src%2Ftest%2Fui%2Ftype_length_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype_length_limit.stderr?ref=0433fdf93b0346e136c03ed49c0e90346035f191", "patch": "@@ -4,7 +4,8 @@ error: reached the type-length limit while instantiating `std::mem::drop::<Optio\n LL | pub fn drop<T>(_x: T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: consider adding a `#![type_length_limit=\"8\"]` attribute to your crate\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/type_length_limit/type_length_limit.long-type.txt'\n+   = help: consider adding a `#![type_length_limit=\"8\"]` attribute to your crate\n \n error: aborting due to previous error\n "}]}