{"sha": "f6eb44cd9e2a27d2004386c71fb6c72f79ba83b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZWI0NGNkOWUyYTI3ZDIwMDQzODZjNzFmYjZjNzJmNzliYTgzYjM=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-26T18:25:57Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-27T16:59:21Z"}, "message": "Use type information from the turbofish", "tree": {"sha": "7d8b00f84f2ccf53983f7a40f9c93e2a6820fafd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d8b00f84f2ccf53983f7a40f9c93e2a6820fafd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6eb44cd9e2a27d2004386c71fb6c72f79ba83b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6eb44cd9e2a27d2004386c71fb6c72f79ba83b3", "html_url": "https://github.com/rust-lang/rust/commit/f6eb44cd9e2a27d2004386c71fb6c72f79ba83b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6eb44cd9e2a27d2004386c71fb6c72f79ba83b3/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0da1e8b2f8709cbdb20912664878121d979a5213", "url": "https://api.github.com/repos/rust-lang/rust/commits/0da1e8b2f8709cbdb20912664878121d979a5213", "html_url": "https://github.com/rust-lang/rust/commit/0da1e8b2f8709cbdb20912664878121d979a5213"}], "stats": {"total": 52, "additions": 40, "deletions": 12}, "files": [{"sha": "00a71a42f5ecbc85cfba9fe9f9be8a6b6ad1e414", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f6eb44cd9e2a27d2004386c71fb6c72f79ba83b3/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6eb44cd9e2a27d2004386c71fb6c72f79ba83b3/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=f6eb44cd9e2a27d2004386c71fb6c72f79ba83b3", "patch": "@@ -1157,6 +1157,32 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         let typable = typable?;\n         let ty = self.db.type_for_def(typable);\n         let ty = self.insert_type_vars(ty);\n+\n+        // try to get generic parameters from the path and add them to the\n+        // function type substitutions\n+        if let Ty::FnDef { ref def, .. } = ty {\n+            let last_seg_bindings = path\n+                .segments\n+                .last()\n+                .and_then(|segment| segment.args_and_bindings.as_ref());\n+            if let Some(generic_args) = last_seg_bindings {\n+                let generic_params = def.generic_params(self.db);\n+                if generic_args.args.len() == generic_params.params.len() {\n+                    let substs = Ty::substs_from_path(\n+                        self.db,\n+                        &self.module,\n+                        self.impl_block.as_ref(),\n+                        &generic_params,\n+                        path,\n+                        (*def).into(),\n+                    );\n+                    return Some(ty.apply_substs(substs));\n+                } else {\n+                    // ERROR: incorrect number of type params\n+                }\n+            }\n+        }\n+\n         Some(ty)\n     }\n \n@@ -1387,9 +1413,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let callee_ty = self.infer_expr(*callee, &Expectation::none());\n                 let (param_tys, ret_ty) = match &callee_ty {\n                     Ty::FnPtr(sig) => (sig.input.clone(), sig.output.clone()),\n-                    Ty::FnDef {\n-                        def, substs, sig, ..\n-                    } => {\n+                    Ty::FnDef { substs, sig, .. } => {\n                         let ret_ty = sig.output.clone().subst(&substs);\n                         let param_tys = sig\n                             .input\n@@ -1437,9 +1461,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                             (Ty::Unknown, Vec::new(), sig.output.clone())\n                         }\n                     }\n-                    Ty::FnDef {\n-                        def, substs, sig, ..\n-                    } => {\n+                    Ty::FnDef { substs, sig, .. } => {\n                         let ret_ty = sig.output.clone().subst(&substs);\n \n                         if sig.input.len() > 0 {"}, {"sha": "85aeefa0c139841a5250e7d5452fcd7eeb59964c", "filename": "crates/ra_hir/src/ty/snapshots/tests__generic_fn.snap", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f6eb44cd9e2a27d2004386c71fb6c72f79ba83b3/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__generic_fn.snap", "raw_url": "https://github.com/rust-lang/rust/raw/f6eb44cd9e2a27d2004386c71fb6c72f79ba83b3/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__generic_fn.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__generic_fn.snap?ref=f6eb44cd9e2a27d2004386c71fb6c72f79ba83b3", "patch": "@@ -1,5 +1,5 @@\n ---\n-created: \"2019-01-26T17:46:03.963745056+00:00\"\n+created: \"2019-01-26T18:16:16.568375+00:00\"\n creator: insta@0.5.2\n expression: \"&result\"\n source: crates/ra_hir/src/ty/tests.rs\n@@ -10,7 +10,7 @@ source: crates/ra_hir/src/ty/tests.rs\n [44; 45) 'x': &[unknown]\n [56; 65) '{     x }': &[unknown]\n [62; 63) 'x': &[unknown]\n-[77; 138) '{     ...(z); }': ()\n+[77; 197) '{     ...(1); }': ()\n [87; 88) 'y': u32\n [91; 96) '10u32': u32\n [102; 104) 'id': fn id<u32>(T) -> T\n@@ -20,4 +20,7 @@ source: crates/ra_hir/src/ty/tests.rs\n [127; 132) 'clone': fn clone<bool>(&T) -> T\n [127; 135) 'clone(z)': bool\n [133; 134) 'z': &bool\n+[173; 191) 'id::<i...tring>': fn id<i32>(T) -> T\n+[173; 194) 'id::<i...ng>(1)': i32\n+[192; 193) '1': i32\n "}, {"sha": "8ff6e55a6b6638de04395514085998836eed1123", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_function_generics.snap", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6eb44cd9e2a27d2004386c71fb6c72f79ba83b3/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_function_generics.snap", "raw_url": "https://github.com/rust-lang/rust/raw/f6eb44cd9e2a27d2004386c71fb6c72f79ba83b3/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_function_generics.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_function_generics.snap?ref=f6eb44cd9e2a27d2004386c71fb6c72f79ba83b3", "patch": "@@ -1,5 +1,5 @@\n ---\n-created: \"2019-01-26T17:46:03.856278205+00:00\"\n+created: \"2019-01-26T18:16:16.530712344+00:00\"\n creator: insta@0.5.2\n expression: \"&result\"\n source: crates/ra_hir/src/ty/tests.rs\n@@ -11,9 +11,9 @@ source: crates/ra_hir/src/ty/tests.rs\n [44; 46) 'id': fn id<u32>(T) -> T\n [44; 52) 'id(1u32)': u32\n [47; 51) '1u32': u32\n-[58; 68) 'id::<i128>': fn id<i32>(T) -> T\n-[58; 71) 'id::<i128>(1)': i32\n-[69; 70) '1': i32\n+[58; 68) 'id::<i128>': fn id<i128>(T) -> T\n+[58; 71) 'id::<i128>(1)': i128\n+[69; 70) '1': i128\n [81; 82) 'x': u64\n [90; 92) 'id': fn id<u64>(T) -> T\n [90; 95) 'id(1)': u64"}, {"sha": "fac56662649617c3639b6916643b43c9d9523194", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f6eb44cd9e2a27d2004386c71fb6c72f79ba83b3/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6eb44cd9e2a27d2004386c71fb6c72f79ba83b3/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=f6eb44cd9e2a27d2004386c71fb6c72f79ba83b3", "patch": "@@ -611,6 +611,9 @@ fn test() {\n     let y = 10u32;\n     id(y);\n     let x: bool = clone(z);\n+\n+    // bad turbofish - ignore!\n+    id::<i128, String>(1);\n }\n \"#,\n     );"}]}