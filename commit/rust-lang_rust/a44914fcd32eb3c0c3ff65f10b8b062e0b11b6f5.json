{"sha": "a44914fcd32eb3c0c3ff65f10b8b062e0b11b6f5", "node_id": "C_kwDOAAsO6NoAKGE0NDkxNGZjZDMyZWIzYzBjM2ZmNjVmMTBiOGIwNjJlMGIxMWI2ZjU", "commit": {"author": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2022-10-03T23:10:00Z"}, "committer": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2022-10-03T23:10:00Z"}, "message": "Dogfood", "tree": {"sha": "413c48f7534306a7450f76446405c97a490e7569", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/413c48f7534306a7450f76446405c97a490e7569"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a44914fcd32eb3c0c3ff65f10b8b062e0b11b6f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a44914fcd32eb3c0c3ff65f10b8b062e0b11b6f5", "html_url": "https://github.com/rust-lang/rust/commit/a44914fcd32eb3c0c3ff65f10b8b062e0b11b6f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a44914fcd32eb3c0c3ff65f10b8b062e0b11b6f5/comments", "author": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "committer": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a6a98f95be4d630bac368b0bbd622749e999eb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a6a98f95be4d630bac368b0bbd622749e999eb3", "html_url": "https://github.com/rust-lang/rust/commit/2a6a98f95be4d630bac368b0bbd622749e999eb3"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "8827daaa3ee7c37760d54ad43ada2dc2d369c83d", "filename": "clippy_lints/src/operators/arithmetic_side_effects.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a44914fcd32eb3c0c3ff65f10b8b062e0b11b6f5/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a44914fcd32eb3c0c3ff65f10b8b062e0b11b6f5/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs?ref=a44914fcd32eb3c0c3ff65f10b8b062e0b11b6f5", "patch": "@@ -45,10 +45,10 @@ impl ArithmeticSideEffects {\n             let ast::LitKind::Int(value, _) = lit.node\n         {\n             match (&op.node, value) {\n-                (hir::BinOpKind::Add | hir::BinOpKind::Sub, 0) |\n-                (hir::BinOpKind::Mul, 0 | 1) => true,\n                 (hir::BinOpKind::Div | hir::BinOpKind::Rem, 0) => false,\n-                (hir::BinOpKind::Div | hir::BinOpKind::Rem, _) => true,\n+                (hir::BinOpKind::Add | hir::BinOpKind::Sub, 0)\n+                    | (hir::BinOpKind::Div | hir::BinOpKind::Rem, _)\n+                    | (hir::BinOpKind::Mul, 0 | 1) => true,\n                 _ => false,\n             }\n         } else {\n@@ -74,7 +74,7 @@ impl ArithmeticSideEffects {\n         self.expr_span = Some(expr.span);\n     }\n \n-    /// If `expr` does not match any variant of [LiteralIntegerTy], returns `None`.\n+    /// If `expr` does not match any variant of `LiteralIntegerTy`, returns `None`.\n     fn literal_integer<'expr, 'tcx>(expr: &'expr hir::Expr<'tcx>) -> Option<LiteralIntegerTy<'expr, 'tcx>> {\n         if matches!(expr.kind, hir::ExprKind::Lit(_)) {\n             return Some(LiteralIntegerTy::Value(expr));\n@@ -118,11 +118,9 @@ impl ArithmeticSideEffects {\n         }\n         let has_valid_op = if Self::is_integral(lhs_ty) && Self::is_integral(rhs_ty) {\n             match (Self::literal_integer(lhs), Self::literal_integer(rhs)) {\n-                (None, None) => false,\n-                (None, Some(lit_int_ty)) => Self::has_valid_op(op, lit_int_ty.into()),\n-                (Some(lit_int_ty), None) => Self::has_valid_op(op, lit_int_ty.into()),\n+                (None, Some(lit_int_ty)) | (Some(lit_int_ty), None) => Self::has_valid_op(op, lit_int_ty.into()),\n                 (Some(LiteralIntegerTy::Value(_)), Some(LiteralIntegerTy::Value(_))) => true,\n-                (Some(_), Some(_)) => false,\n+                (None, None) | (Some(_), Some(_)) => false,\n             }\n         } else {\n             false\n@@ -180,9 +178,9 @@ impl<'tcx> LateLintPass<'tcx> for ArithmeticSideEffects {\n     }\n }\n \n-/// Tells if an expression is a integer passed by value or by reference.\n+/// Tells if an expression is a integer declared by value or by reference.\n ///\n-/// If [LiteralIntegerTy::Ref], then the contained value will be `hir::ExprKind::Lit` rather\n+/// If `LiteralIntegerTy::Ref`, then the contained value will be `hir::ExprKind::Lit` rather\n /// than `hirExprKind::Addr`.\n enum LiteralIntegerTy<'expr, 'tcx> {\n     /// For example, `&199`\n@@ -194,8 +192,7 @@ enum LiteralIntegerTy<'expr, 'tcx> {\n impl<'expr, 'tcx> From<LiteralIntegerTy<'expr, 'tcx>> for &'expr hir::Expr<'tcx> {\n     fn from(from: LiteralIntegerTy<'expr, 'tcx>) -> Self {\n         match from {\n-            LiteralIntegerTy::Ref(elem) => elem,\n-            LiteralIntegerTy::Value(elem) => elem,\n+            LiteralIntegerTy::Ref(elem) | LiteralIntegerTy::Value(elem) => elem,\n         }\n     }\n }"}]}