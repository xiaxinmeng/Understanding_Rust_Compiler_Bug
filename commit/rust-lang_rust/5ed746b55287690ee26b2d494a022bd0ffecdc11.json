{"sha": "5ed746b55287690ee26b2d494a022bd0ffecdc11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlZDc0NmI1NTI4NzY5MGVlMjZiMmQ0OTRhMDIyYmQwZmZlY2RjMTE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-25T01:48:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-25T01:48:30Z"}, "message": "Rollup merge of #64746 - estebank:elide-impl-trait-obligations-on-err, r=cramertj\n\nRemove blanket silencing of \"type annotation needed\" errors\n\nRemove blanket check for existence of other errors before emitting \"type annotation needed\" errors, and add some eager checks to avoid adding obligations when they refer to types that reference `[type error]` in order to reduce unneeded errors.\n\nFix #64084.", "tree": {"sha": "badda5e570773e0a75aa2e3df6c1d5c6cf9c7725", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/badda5e570773e0a75aa2e3df6c1d5c6cf9c7725"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ed746b55287690ee26b2d494a022bd0ffecdc11", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdisdvCRBK7hj4Ov3rIwAAdHIIAHce7zg0nWjM+wU6eJ8A1hiN\nFHcdq9ooHCv/8Njm7/brV0ZxUWxl1enfuPJkPtDIFaJGwIKFnPwmXnGRRrfND4i/\nePF8iZe5UtMGckHaMpJ6KUvfcEIP6xoO25M8HpAqulLCr2CwRvFUNe1EECWDIQ8m\nHiRdjCfy8cCNQ83pqk0DqEtQhNZqJTrbsou/d0gUAsVFdFQu6b84hdlGrp897HB2\n6x1KF93USg7QEnLeXGM3RzZD9nsIbLvszpwiINCj40SckBpEriQlqluiZXoeZp7H\nC8DgSsEdmcsrs1gIy0p39KBsHwCnmd3muLPsgnMseDf4/HtpxGfzoV5fJRZ0oEs=\n=43wI\n-----END PGP SIGNATURE-----\n", "payload": "tree badda5e570773e0a75aa2e3df6c1d5c6cf9c7725\nparent 66ca0eb79acb3b7e56afb61e3f5722cd870274e1\nparent b7ca1c5a1e349edebae2ca4a2525dc6ecf04f17d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1569376110 +0200\ncommitter GitHub <noreply@github.com> 1569376110 +0200\n\nRollup merge of #64746 - estebank:elide-impl-trait-obligations-on-err, r=cramertj\n\nRemove blanket silencing of \"type annotation needed\" errors\n\nRemove blanket check for existence of other errors before emitting \"type annotation needed\" errors, and add some eager checks to avoid adding obligations when they refer to types that reference `[type error]` in order to reduce unneeded errors.\n\nFix #64084.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ed746b55287690ee26b2d494a022bd0ffecdc11", "html_url": "https://github.com/rust-lang/rust/commit/5ed746b55287690ee26b2d494a022bd0ffecdc11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ed746b55287690ee26b2d494a022bd0ffecdc11/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66ca0eb79acb3b7e56afb61e3f5722cd870274e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/66ca0eb79acb3b7e56afb61e3f5722cd870274e1", "html_url": "https://github.com/rust-lang/rust/commit/66ca0eb79acb3b7e56afb61e3f5722cd870274e1"}, {"sha": "b7ca1c5a1e349edebae2ca4a2525dc6ecf04f17d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7ca1c5a1e349edebae2ca4a2525dc6ecf04f17d", "html_url": "https://github.com/rust-lang/rust/commit/b7ca1c5a1e349edebae2ca4a2525dc6ecf04f17d"}], "stats": {"total": 490, "additions": 297, "deletions": 193}, "files": [{"sha": "1e05018007a8dd577271a24831fdd79fb1561168", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -2184,9 +2184,7 @@ impl<'a> LoweringContext<'a> {\n             match decl.output {\n                 FunctionRetTy::Ty(ref ty) => match in_band_ty_params {\n                     Some((def_id, _)) if impl_trait_return_allow => {\n-                        hir::Return(self.lower_ty(ty,\n-                            ImplTraitContext::OpaqueTy(Some(def_id))\n-                        ))\n+                        hir::Return(self.lower_ty(ty, ImplTraitContext::OpaqueTy(Some(def_id))))\n                     }\n                     _ => {\n                         hir::Return(self.lower_ty(ty, ImplTraitContext::disallowed()))"}, {"sha": "129cfc8bcb23f76d7b4b82608d30f3fc0914e487", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -988,7 +988,9 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n         value.fold_with(&mut BottomUpFolder {\n             tcx,\n             ty_op: |ty| {\n-                if let ty::Opaque(def_id, substs) = ty.sty {\n+                if ty.references_error() {\n+                    return tcx.types.err;\n+                } else if let ty::Opaque(def_id, substs) = ty.sty {\n                     // Check that this is `impl Trait` type is\n                     // declared by `parent_def_id` -- i.e., one whose\n                     // value we are inferring.  At present, this is\n@@ -1155,6 +1157,15 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n         );\n         debug!(\"instantiate_opaque_types: ty_var={:?}\", ty_var);\n \n+        for predicate in &bounds.predicates {\n+            if let ty::Predicate::Projection(projection) = &predicate {\n+                if projection.skip_binder().ty.references_error() {\n+                    // No point on adding these obligations since there's a type error involved.\n+                    return ty_var;\n+                }\n+            }\n+        }\n+\n         self.obligations.reserve(bounds.predicates.len());\n         for predicate in bounds.predicates {\n             // Change the predicate to refer to the type variable,"}, {"sha": "08fea757399787c06f62cedb731cf0d6e02b1a54", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 42, "deletions": 29, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -1432,8 +1432,11 @@ impl<'tcx> TyCtxt<'tcx> {\n }\n \n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n-    fn maybe_report_ambiguity(&self, obligation: &PredicateObligation<'tcx>,\n-                              body_id: Option<hir::BodyId>) {\n+    fn maybe_report_ambiguity(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        body_id: Option<hir::BodyId>,\n+    ) {\n         // Unable to successfully determine, probably means\n         // insufficient type information, but could mean\n         // ambiguous impls. The latter *ought* to be a\n@@ -1442,9 +1445,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let predicate = self.resolve_vars_if_possible(&obligation.predicate);\n         let span = obligation.cause.span;\n \n-        debug!(\"maybe_report_ambiguity(predicate={:?}, obligation={:?})\",\n-               predicate,\n-               obligation);\n+        debug!(\n+            \"maybe_report_ambiguity(predicate={:?}, obligation={:?} body_id={:?}, code={:?})\",\n+            predicate,\n+            obligation,\n+            body_id,\n+            obligation.cause.code,\n+        );\n \n         // Ambiguity errors are often caused as fallout from earlier\n         // errors. So just ignore them if this infcx is tainted.\n@@ -1456,6 +1463,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             ty::Predicate::Trait(ref data) => {\n                 let trait_ref = data.to_poly_trait_ref();\n                 let self_ty = trait_ref.self_ty();\n+                debug!(\"self_ty {:?} {:?} trait_ref {:?}\", self_ty, self_ty.sty, trait_ref);\n+\n                 if predicate.references_error() {\n                     return;\n                 }\n@@ -1480,24 +1489,25 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 // be ignoring the fact that we don't KNOW the type works\n                 // out. Though even that would probably be harmless, given that\n                 // we're only talking about builtin traits, which are known to be\n-                // inhabited. But in any case I just threw in this check for\n-                // has_errors() to be sure that compilation isn't happening\n-                // anyway. In that case, why inundate the user.\n-                if !self.tcx.sess.has_errors() {\n-                    if\n-                        self.tcx.lang_items().sized_trait()\n-                        .map_or(false, |sized_id| sized_id == trait_ref.def_id())\n-                    {\n-                        self.need_type_info_err(body_id, span, self_ty).emit();\n-                    } else {\n-                        let mut err = struct_span_err!(self.tcx.sess,\n-                                                       span, E0283,\n-                                                       \"type annotations required: \\\n-                                                        cannot resolve `{}`\",\n-                                                       predicate);\n-                        self.note_obligation_cause(&mut err, obligation);\n-                        err.emit();\n-                    }\n+                // inhabited. We used to check for `self.tcx.sess.has_errors()` to\n+                // avoid inundating the user with unnecessary errors, but we now\n+                // check upstream for type errors and dont add the obligations to\n+                // begin with in those cases.\n+                if\n+                    self.tcx.lang_items().sized_trait()\n+                    .map_or(false, |sized_id| sized_id == trait_ref.def_id())\n+                {\n+                    self.need_type_info_err(body_id, span, self_ty).emit();\n+                } else {\n+                    let mut err = struct_span_err!(\n+                        self.tcx.sess,\n+                        span,\n+                        E0283,\n+                        \"type annotations needed: cannot resolve `{}`\",\n+                        predicate,\n+                    );\n+                    self.note_obligation_cause(&mut err, obligation);\n+                    err.emit();\n                 }\n             }\n \n@@ -1524,11 +1534,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n             _ => {\n                 if !self.tcx.sess.has_errors() {\n-                    let mut err = struct_span_err!(self.tcx.sess,\n-                                                   obligation.cause.span, E0284,\n-                                                   \"type annotations required: \\\n-                                                    cannot resolve `{}`\",\n-                                                   predicate);\n+                    let mut err = struct_span_err!(\n+                        self.tcx.sess,\n+                        obligation.cause.span,\n+                        E0284,\n+                        \"type annotations needed: cannot resolve `{}`\",\n+                        predicate,\n+                    );\n                     self.note_obligation_cause(&mut err, obligation);\n                     err.emit();\n                 }\n@@ -1766,7 +1778,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                               but not on the corresponding trait method\",\n                              predicate));\n             }\n-            ObligationCauseCode::ReturnType(_) |\n+            ObligationCauseCode::ReturnType |\n+            ObligationCauseCode::ReturnValue(_) |\n             ObligationCauseCode::BlockTailExpression(_) => (),\n             ObligationCauseCode::TrivialBound => {\n                 err.help(\"see issue #48214\");"}, {"sha": "accbbe3643ea188102cca472eea76535bab70741", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -212,14 +212,14 @@ pub enum ObligationCauseCode<'tcx> {\n     /// Constant expressions must be sized.\n     ConstSized,\n \n-    /// static items must have `Sync` type\n+    /// Static items must have `Sync` type\n     SharedStatic,\n \n     BuiltinDerivedObligation(DerivedObligationCause<'tcx>),\n \n     ImplDerivedObligation(DerivedObligationCause<'tcx>),\n \n-    /// error derived when matching traits/impls; see ObligationCause for more details\n+    /// Error derived when matching traits/impls; see ObligationCause for more details\n     CompareImplMethodObligation {\n         item_name: ast::Name,\n         impl_item_def_id: DefId,\n@@ -248,17 +248,20 @@ pub enum ObligationCauseCode<'tcx> {\n     /// `start` has wrong type\n     StartFunctionType,\n \n-    /// intrinsic has wrong type\n+    /// Intrinsic has wrong type\n     IntrinsicType,\n \n-    /// method receiver\n+    /// Method receiver\n     MethodReceiver,\n \n     /// `return` with no expression\n     ReturnNoExpression,\n \n     /// `return` with an expression\n-    ReturnType(hir::HirId),\n+    ReturnValue(hir::HirId),\n+\n+    /// Return type of this function\n+    ReturnType,\n \n     /// Block implicit return\n     BlockTailExpression(hir::HirId),"}, {"sha": "386a5677f5f177edbb6cceb8bc8856a760723aba", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -214,7 +214,7 @@ pub struct SelectionCache<'tcx> {\n /// of type variables - it just means the obligation isn't sufficiently\n /// elaborated. In that case we report an ambiguity, and the caller can\n /// try again after more type information has been gathered or report a\n-/// \"type annotations required\" error.\n+/// \"type annotations needed\" error.\n ///\n /// However, with type parameters, this can be a real problem - type\n /// parameters don't unify with regular types, but they *can* unify"}, {"sha": "c0d8230999dd8d8a52481506f22857dde8d57d98", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -485,7 +485,8 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::TupleInitializerSized => Some(super::TupleInitializerSized),\n             super::StructInitializerSized => Some(super::StructInitializerSized),\n             super::VariableType(id) => Some(super::VariableType(id)),\n-            super::ReturnType(id) => Some(super::ReturnType(id)),\n+            super::ReturnValue(id) => Some(super::ReturnValue(id)),\n+            super::ReturnType => Some(super::ReturnType),\n             super::SizedArgumentType => Some(super::SizedArgumentType),\n             super::SizedReturnType => Some(super::SizedReturnType),\n             super::SizedYieldType => Some(super::SizedYieldType),"}, {"sha": "ef8bdfb583edf66a38337b648fcbd06a8a04fc75", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -438,19 +438,19 @@ bitflags! {\n \n         /// `true` if there are \"names\" of types and regions and so forth\n         /// that are local to a particular fn\n-        const HAS_FREE_LOCAL_NAMES    = 1 << 9;\n+        const HAS_FREE_LOCAL_NAMES = 1 << 9;\n \n         /// Present if the type belongs in a local type context.\n         /// Only set for Infer other than Fresh.\n         const KEEP_IN_LOCAL_TCX  = 1 << 10;\n \n         /// Does this have any `ReLateBound` regions? Used to check\n         /// if a global bound is safe to evaluate.\n-        const HAS_RE_LATE_BOUND = 1 << 11;\n+        const HAS_RE_LATE_BOUND  = 1 << 11;\n \n         const HAS_TY_PLACEHOLDER = 1 << 12;\n \n-        const HAS_CT_INFER = 1 << 13;\n+        const HAS_CT_INFER       = 1 << 13;\n         const HAS_CT_PLACEHOLDER = 1 << 14;\n \n         const NEEDS_SUBST        = TypeFlags::HAS_PARAMS.bits |"}, {"sha": "dc536329251ca0371872a6cbc17c42d2cb953261", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -1253,7 +1253,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                             expression.map(|expr| (expr, blk_id)),\n                         );\n                     }\n-                    ObligationCauseCode::ReturnType(id) => {\n+                    ObligationCauseCode::ReturnValue(id) => {\n                         db = self.report_return_mismatched_types(\n                             cause, expected, found, err, fcx, id, None);\n                     }"}, {"sha": "6b694bfc8da25eaa78970dc94fec2c8407231035", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -664,12 +664,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let ret_ty = ret_coercion.borrow().expected_ty();\n         let return_expr_ty = self.check_expr_with_hint(return_expr, ret_ty.clone());\n-        ret_coercion.borrow_mut()\n-                    .coerce(self,\n-                            &self.cause(return_expr.span,\n-                                        ObligationCauseCode::ReturnType(return_expr.hir_id)),\n-                            return_expr,\n-                            return_expr_ty);\n+        ret_coercion.borrow_mut().coerce(\n+            self,\n+            &self.cause(return_expr.span, ObligationCauseCode::ReturnValue(return_expr.hir_id)),\n+            return_expr,\n+            return_expr_ty,\n+        );\n     }\n \n     /// Type check assignment expression `expr` of form `lhs = rhs`."}, {"sha": "02f4f2a3744c6666ceddc7e7377c625fc4eeac5d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 47, "deletions": 35, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -2698,30 +2698,39 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             traits::ObligationCause::new(span, self.body_id, code));\n     }\n \n-    pub fn require_type_is_sized(&self,\n-                                 ty: Ty<'tcx>,\n-                                 span: Span,\n-                                 code: traits::ObligationCauseCode<'tcx>)\n-    {\n-        let lang_item = self.tcx.require_lang_item(lang_items::SizedTraitLangItem, None);\n-        self.require_type_meets(ty, span, code, lang_item);\n+    pub fn require_type_is_sized(\n+        &self,\n+        ty: Ty<'tcx>,\n+        span: Span,\n+        code: traits::ObligationCauseCode<'tcx>,\n+    ) {\n+        if !ty.references_error() {\n+            let lang_item = self.tcx.require_lang_item(lang_items::SizedTraitLangItem, None);\n+            self.require_type_meets(ty, span, code, lang_item);\n+        }\n     }\n \n-    pub fn require_type_is_sized_deferred(&self,\n-                                          ty: Ty<'tcx>,\n-                                          span: Span,\n-                                          code: traits::ObligationCauseCode<'tcx>)\n-    {\n-        self.deferred_sized_obligations.borrow_mut().push((ty, span, code));\n+    pub fn require_type_is_sized_deferred(\n+        &self,\n+        ty: Ty<'tcx>,\n+        span: Span,\n+        code: traits::ObligationCauseCode<'tcx>,\n+    ) {\n+        if !ty.references_error() {\n+            self.deferred_sized_obligations.borrow_mut().push((ty, span, code));\n+        }\n     }\n \n-    pub fn register_bound(&self,\n-                          ty: Ty<'tcx>,\n-                          def_id: DefId,\n-                          cause: traits::ObligationCause<'tcx>)\n-    {\n-        self.fulfillment_cx.borrow_mut()\n-                           .register_bound(self, self.param_env, ty, def_id, cause);\n+    pub fn register_bound(\n+        &self,\n+        ty: Ty<'tcx>,\n+        def_id: DefId,\n+        cause: traits::ObligationCause<'tcx>,\n+    ) {\n+        if !ty.references_error() {\n+            self.fulfillment_cx.borrow_mut()\n+                .register_bound(self, self.param_env, ty, def_id, cause);\n+        }\n     }\n \n     pub fn to_ty(&self, ast_t: &hir::Ty) -> Ty<'tcx> {\n@@ -2780,22 +2789,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     /// Registers an obligation for checking later, during regionck, that the type `ty` must\n     /// outlive the region `r`.\n-    pub fn register_wf_obligation(&self,\n-                                  ty: Ty<'tcx>,\n-                                  span: Span,\n-                                  code: traits::ObligationCauseCode<'tcx>)\n-    {\n+    pub fn register_wf_obligation(\n+        &self,\n+        ty: Ty<'tcx>,\n+        span: Span,\n+        code: traits::ObligationCauseCode<'tcx>,\n+    ) {\n         // WF obligations never themselves fail, so no real need to give a detailed cause:\n         let cause = traits::ObligationCause::new(span, self.body_id, code);\n-        self.register_predicate(traits::Obligation::new(cause,\n-                                                        self.param_env,\n-                                                        ty::Predicate::WellFormed(ty)));\n+        self.register_predicate(\n+            traits::Obligation::new(cause, self.param_env, ty::Predicate::WellFormed(ty)),\n+        );\n     }\n \n     /// Registers obligations that all types appearing in `substs` are well-formed.\n     pub fn add_wf_bounds(&self, substs: SubstsRef<'tcx>, expr: &hir::Expr) {\n         for ty in substs.types() {\n-            self.register_wf_obligation(ty, expr.span, traits::MiscObligation);\n+            if !ty.references_error() {\n+                self.register_wf_obligation(ty, expr.span, traits::MiscObligation);\n+            }\n         }\n     }\n \n@@ -2834,12 +2846,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     // FIXME(arielb1): use this instead of field.ty everywhere\n     // Only for fields! Returns <none> for methods>\n     // Indifferent to privacy flags\n-    pub fn field_ty(&self,\n-                    span: Span,\n-                    field: &'tcx ty::FieldDef,\n-                    substs: SubstsRef<'tcx>)\n-                    -> Ty<'tcx>\n-    {\n+    pub fn field_ty(\n+        &self,\n+        span: Span,\n+        field: &'tcx ty::FieldDef,\n+        substs: SubstsRef<'tcx>,\n+    ) -> Ty<'tcx> {\n         self.normalize_associated_types_in(span, &field.ty(self.tcx, substs))\n     }\n "}, {"sha": "265d0676fa8d1690a43b3db2a7a1c204ec46b6fc", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -596,7 +596,7 @@ fn check_fn_or_method<'fcx, 'tcx>(\n     }\n     implied_bounds.extend(sig.inputs());\n \n-    fcx.register_wf_obligation(sig.output(), span, ObligationCauseCode::MiscObligation);\n+    fcx.register_wf_obligation(sig.output(), span, ObligationCauseCode::ReturnType);\n \n     // FIXME(#25759) return types should not be implied bounds\n     implied_bounds.push(sig.output());"}, {"sha": "9a64a06c31badaefaf7408e686f9754d063ea68a", "filename": "src/test/ui/associated-types/associated-types-overridden-binding.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -1,10 +1,10 @@\n #![feature(trait_alias)]\n \n trait Foo: Iterator<Item = i32> {}\n-trait Bar: Foo<Item = u32> {} //~ ERROR type annotations required\n+trait Bar: Foo<Item = u32> {} //~ ERROR type annotations needed\n \n trait I32Iterator = Iterator<Item = i32>;\n-trait U32Iterator = I32Iterator<Item = u32>;\n+trait U32Iterator = I32Iterator<Item = u32>; //~ ERROR type annotations needed\n \n fn main() {\n     let _: &dyn I32Iterator<Item = u32>;"}, {"sha": "5ef1b23cbcd213b94e036e3328a5f5d6bdccacef", "filename": "src/test/ui/associated-types/associated-types-overridden-binding.stderr", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -1,11 +1,18 @@\n-error[E0284]: type annotations required: cannot resolve `<Self as std::iter::Iterator>::Item == i32`\n+error[E0284]: type annotations needed: cannot resolve `<Self as std::iter::Iterator>::Item == i32`\n   --> $DIR/associated-types-overridden-binding.rs:4:1\n    |\n LL | trait Foo: Iterator<Item = i32> {}\n    | ------------------------------- required by `Foo`\n LL | trait Bar: Foo<Item = u32> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0282]: type annotations needed\n+  --> $DIR/associated-types-overridden-binding.rs:7:1\n+   |\n+LL | trait U32Iterator = I32Iterator<Item = u32>;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0284`.\n+Some errors have detailed explanations: E0282, E0284.\n+For more information about an error, try `rustc --explain E0282`."}, {"sha": "b97d4af184f92f5c48887d3a19a9c01538e18637", "filename": "src/test/ui/associated-types/associated-types-unconstrained.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -12,5 +12,5 @@ impl Foo for isize {\n \n pub fn main() {\n     let x: isize = Foo::bar();\n-    //~^ ERROR type annotations required\n+    //~^ ERROR type annotations needed\n }"}, {"sha": "4e9e54d36880596e36abd9b91f090c4ac1821f4d", "filename": "src/test/ui/associated-types/associated-types-unconstrained.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unconstrained.stderr?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -1,4 +1,4 @@\n-error[E0284]: type annotations required: cannot resolve `<_ as Foo>::A == _`\n+error[E0284]: type annotations needed: cannot resolve `<_ as Foo>::A == _`\n   --> $DIR/associated-types-unconstrained.rs:14:20\n    |\n LL |     let x: isize = Foo::bar();"}, {"sha": "aba649d83ec0175ea908837e54f7003d9fd38ad6", "filename": "src/test/ui/error-codes/E0283.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -1,4 +1,4 @@\n-error[E0283]: type annotations required: cannot resolve `_: Generator`\n+error[E0283]: type annotations needed: cannot resolve `_: Generator`\n   --> $DIR/E0283.rs:18:21\n    |\n LL |     fn create() -> u32;"}, {"sha": "c30e5f47188715df6f6d9d083e4f552ce5095205", "filename": "src/test/ui/error-codes/E0401.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Ferror-codes%2FE0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Ferror-codes%2FE0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0401.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -8,7 +8,7 @@ fn foo<T>(x: T) {\n            W: Fn()>\n            (y: T) { //~ ERROR E0401\n     }\n-    bfnr(x);\n+    bfnr(x); //~ ERROR type annotations needed\n }\n \n "}, {"sha": "485b76a09a3c43729c4b32f4bc9f6b31f9b68700", "filename": "src/test/ui/error-codes/E0401.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -32,6 +32,13 @@ LL |         fn helper(sel: &Self) -> u8 {\n    |                         use of generic parameter from outer function\n    |                         use a type here instead\n \n-error: aborting due to 3 previous errors\n+error[E0282]: type annotations needed\n+  --> $DIR/E0401.rs:11:5\n+   |\n+LL |     bfnr(x);\n+   |     ^^^^ cannot infer type for `U`\n+\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0401`.\n+Some errors have detailed explanations: E0282, E0401.\n+For more information about an error, try `rustc --explain E0282`."}, {"sha": "5ac0c415ae1b27e5265ec35f3298d5a9072a9384", "filename": "src/test/ui/error-codes/E0661.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Ferror-codes%2FE0661.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Ferror-codes%2FE0661.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0661.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -3,7 +3,7 @@\n #![feature(asm)]\n \n fn main() {\n-    let a;\n+    let a; //~ ERROR type annotations needed\n     asm!(\"nop\" : \"r\"(a));\n     //~^ ERROR E0661\n }"}, {"sha": "3537e0bc3a4c61515a93f71b9613ec83dd72c65d", "filename": "src/test/ui/error-codes/E0661.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Ferror-codes%2FE0661.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Ferror-codes%2FE0661.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0661.stderr?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -4,5 +4,12 @@ error[E0661]: output operand constraint lacks '=' or '+'\n LL |     asm!(\"nop\" : \"r\"(a));\n    |                  ^^^\n \n-error: aborting due to previous error\n+error[E0282]: type annotations needed\n+  --> $DIR/E0661.rs:6:9\n+   |\n+LL |     let a;\n+   |         ^ consider giving `a` a type\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "65c4b78bf6a400f34a16dfdfb6924f13018eb977", "filename": "src/test/ui/impl-trait/where-allowed.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -11,8 +11,9 @@ fn in_return() -> impl Debug { panic!() }\n // Allowed\n fn in_adt_in_parameters(_: Vec<impl Debug>) { panic!() }\n \n-// Allowed\n+// Disallowed\n fn in_adt_in_return() -> Vec<impl Debug> { panic!() }\n+//~^ ERROR type annotations needed\n \n // Disallowed\n fn in_fn_parameter_in_parameters(_: fn(impl Debug)) { panic!() }\n@@ -58,7 +59,8 @@ fn in_impl_Fn_return_in_parameters(_: &impl Fn() -> impl Debug) { panic!() }\n // Disallowed\n fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n-//~^^ ERROR nested `impl Trait` is not allowed\n+//~| ERROR nested `impl Trait` is not allowed\n+//~| ERROR type annotations needed\n \n // Disallowed\n fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }"}, {"sha": "dfb6e6524d9a5844c0ac6631729b0a619c1d2d9b", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 56, "deletions": 44, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -1,5 +1,5 @@\n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/where-allowed.rs:50:51\n+  --> $DIR/where-allowed.rs:51:51\n    |\n LL | fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n    |                                           --------^^^^^^^^^^-\n@@ -8,7 +8,7 @@ LL | fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n    |                                           outer `impl Trait`\n \n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/where-allowed.rs:59:57\n+  --> $DIR/where-allowed.rs:60:57\n    |\n LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n    |                                                 --------^^^^^^^^^^-\n@@ -17,7 +17,7 @@ LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic\n    |                                                 outer `impl Trait`\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:122:5\n+  --> $DIR/where-allowed.rs:124:5\n    |\n LL |     type Out = impl Debug;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |     type Out = impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: `impl Trait` in type aliases is unstable\n-  --> $DIR/where-allowed.rs:158:1\n+  --> $DIR/where-allowed.rs:160:1\n    |\n LL | type InTypeAlias<R> = impl Debug;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -35,230 +35,242 @@ LL | type InTypeAlias<R> = impl Debug;\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:18:40\n+  --> $DIR/where-allowed.rs:19:40\n    |\n LL | fn in_fn_parameter_in_parameters(_: fn(impl Debug)) { panic!() }\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:22:42\n+  --> $DIR/where-allowed.rs:23:42\n    |\n LL | fn in_fn_return_in_parameters(_: fn() -> impl Debug) { panic!() }\n    |                                          ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:26:38\n+  --> $DIR/where-allowed.rs:27:38\n    |\n LL | fn in_fn_parameter_in_return() -> fn(impl Debug) { panic!() }\n    |                                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:30:40\n+  --> $DIR/where-allowed.rs:31:40\n    |\n LL | fn in_fn_return_in_return() -> fn() -> impl Debug { panic!() }\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:34:49\n+  --> $DIR/where-allowed.rs:35:49\n    |\n LL | fn in_dyn_Fn_parameter_in_parameters(_: &dyn Fn(impl Debug)) { panic!() }\n    |                                                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:38:51\n+  --> $DIR/where-allowed.rs:39:51\n    |\n LL | fn in_dyn_Fn_return_in_parameters(_: &dyn Fn() -> impl Debug) { panic!() }\n    |                                                   ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:42:55\n+  --> $DIR/where-allowed.rs:43:55\n    |\n LL | fn in_dyn_Fn_parameter_in_return() -> &'static dyn Fn(impl Debug) { panic!() }\n    |                                                       ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:46:57\n+  --> $DIR/where-allowed.rs:47:57\n    |\n LL | fn in_dyn_Fn_return_in_return() -> &'static dyn Fn() -> impl Debug { panic!() }\n    |                                                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:50:51\n+  --> $DIR/where-allowed.rs:51:51\n    |\n LL | fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n    |                                                   ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:55:53\n+  --> $DIR/where-allowed.rs:56:53\n    |\n LL | fn in_impl_Fn_return_in_parameters(_: &impl Fn() -> impl Debug) { panic!() }\n    |                                                     ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:59:57\n+  --> $DIR/where-allowed.rs:60:57\n    |\n LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n    |                                                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:64:59\n+  --> $DIR/where-allowed.rs:66:59\n    |\n LL | fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }\n    |                                                           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:68:38\n+  --> $DIR/where-allowed.rs:70:38\n    |\n LL | fn in_Fn_parameter_in_generics<F: Fn(impl Debug)> (_: F) { panic!() }\n    |                                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:72:40\n+  --> $DIR/where-allowed.rs:74:40\n    |\n LL | fn in_Fn_return_in_generics<F: Fn() -> impl Debug> (_: F) { panic!() }\n    |                                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:85:32\n+  --> $DIR/where-allowed.rs:87:32\n    |\n LL | struct InBraceStructField { x: impl Debug }\n    |                                ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:89:41\n+  --> $DIR/where-allowed.rs:91:41\n    |\n LL | struct InAdtInBraceStructField { x: Vec<impl Debug> }\n    |                                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:93:27\n+  --> $DIR/where-allowed.rs:95:27\n    |\n LL | struct InTupleStructField(impl Debug);\n    |                           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:98:25\n+  --> $DIR/where-allowed.rs:100:25\n    |\n LL |     InBraceVariant { x: impl Debug },\n    |                         ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:100:20\n+  --> $DIR/where-allowed.rs:102:20\n    |\n LL |     InTupleVariant(impl Debug),\n    |                    ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:111:23\n+  --> $DIR/where-allowed.rs:113:23\n    |\n LL |     fn in_return() -> impl Debug;\n    |                       ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:129:34\n+  --> $DIR/where-allowed.rs:131:34\n    |\n LL |     fn in_trait_impl_return() -> impl Debug { () }\n    |                                  ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:142:33\n+  --> $DIR/where-allowed.rs:144:33\n    |\n LL |     fn in_foreign_parameters(_: impl Debug);\n    |                                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:145:31\n+  --> $DIR/where-allowed.rs:147:31\n    |\n LL |     fn in_foreign_return() -> impl Debug;\n    |                               ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:162:39\n+  --> $DIR/where-allowed.rs:164:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:166:16\n+  --> $DIR/where-allowed.rs:168:16\n    |\n LL | impl PartialEq<impl Debug> for () {\n    |                ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:171:24\n+  --> $DIR/where-allowed.rs:173:24\n    |\n LL | impl PartialEq<()> for impl Debug {\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:176:6\n+  --> $DIR/where-allowed.rs:178:6\n    |\n LL | impl impl Debug {\n    |      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:182:24\n+  --> $DIR/where-allowed.rs:184:24\n    |\n LL | impl InInherentImplAdt<impl Debug> {\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:188:11\n+  --> $DIR/where-allowed.rs:190:11\n    |\n LL |     where impl Debug: Debug\n    |           ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:195:15\n+  --> $DIR/where-allowed.rs:197:15\n    |\n LL |     where Vec<impl Debug>: Debug\n    |               ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:202:24\n+  --> $DIR/where-allowed.rs:204:24\n    |\n LL |     where T: PartialEq<impl Debug>\n    |                        ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:209:17\n+  --> $DIR/where-allowed.rs:211:17\n    |\n LL |     where T: Fn(impl Debug)\n    |                 ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:216:22\n+  --> $DIR/where-allowed.rs:218:22\n    |\n LL |     where T: Fn() -> impl Debug\n    |                      ^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:222:29\n+  --> $DIR/where-allowed.rs:224:29\n    |\n LL |     let _in_local_variable: impl Fn() = || {};\n    |                             ^^^^^^^^^\n    |\n    = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/where-allowed.rs:224:46\n+  --> $DIR/where-allowed.rs:226:46\n    |\n LL |     let _in_return_in_local_variable = || -> impl Fn() { || {} };\n    |                                              ^^^^^^^^^\n \n+error[E0282]: type annotations needed\n+  --> $DIR/where-allowed.rs:15:30\n+   |\n+LL | fn in_adt_in_return() -> Vec<impl Debug> { panic!() }\n+   |                              ^^^^^^^^^^ cannot infer type\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/where-allowed.rs:60:49\n+   |\n+LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n+   |                                                 ^^^^^^^^^^^^^^^^^^^ cannot infer type\n+\n error: could not find defining uses\n-  --> $DIR/where-allowed.rs:158:1\n+  --> $DIR/where-allowed.rs:160:1\n    |\n LL | type InTypeAlias<R> = impl Debug;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: could not find defining uses\n-  --> $DIR/where-allowed.rs:122:5\n+  --> $DIR/where-allowed.rs:124:5\n    |\n LL |     type Out = impl Debug;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 41 previous errors\n+error: aborting due to 43 previous errors\n \n-Some errors have detailed explanations: E0562, E0658.\n-For more information about an error, try `rustc --explain E0562`.\n+Some errors have detailed explanations: E0282, E0562, E0658.\n+For more information about an error, try `rustc --explain E0282`."}, {"sha": "7503766ff2084c78e66864ac2f24dbf990d1a00e", "filename": "src/test/ui/issues/issue-12028.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fissues%2Fissue-12028.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fissues%2Fissue-12028.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12028.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -24,7 +24,7 @@ trait StreamHash<H: StreamHasher>: Hash<H> {\n impl<H: StreamHasher> Hash<H> for u8 {\n     fn hash2(&self, hasher: &H) -> u64 {\n         let mut stream = hasher.stream();\n-        self.input_stream(&mut stream); //~ ERROR type annotations required\n+        self.input_stream(&mut stream); //~ ERROR type annotations needed\n         Stream::result(&stream)\n     }\n }"}, {"sha": "ff92d01a69ed2aef9abc045ff2e7742c778430a5", "filename": "src/test/ui/issues/issue-12028.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -1,4 +1,4 @@\n-error[E0284]: type annotations required: cannot resolve `<_ as StreamHasher>::S == <H as StreamHasher>::S`\n+error[E0284]: type annotations needed: cannot resolve `<_ as StreamHasher>::S == <H as StreamHasher>::S`\n   --> $DIR/issue-12028.rs:27:14\n    |\n LL |         self.input_stream(&mut stream);"}, {"sha": "0cbe38d6ec0b6b4b4d18a65a4b19c5fb990943e0", "filename": "src/test/ui/issues/issue-21974.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fissues%2Fissue-21974.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fissues%2Fissue-21974.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21974.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -7,7 +7,7 @@ trait Foo {\n     fn foo(self);\n }\n \n-fn foo<'a,'b,T>(x: &'a T, y: &'b T) //~ ERROR type annotations required\n+fn foo<'a,'b,T>(x: &'a T, y: &'b T) //~ ERROR type annotations needed\n     where &'a T : Foo,\n           &'b T : Foo\n {"}, {"sha": "7ceb2bd23f6cd5799fafd8d87fdb8d11e5bd453e", "filename": "src/test/ui/issues/issue-21974.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -1,4 +1,4 @@\n-error[E0283]: type annotations required: cannot resolve `&'a T: Foo`\n+error[E0283]: type annotations needed: cannot resolve `&'a T: Foo`\n   --> $DIR/issue-21974.rs:10:1\n    |\n LL |   trait Foo {"}, {"sha": "9b74cd1230e8a9a500790a0ae67162cf6156f820", "filename": "src/test/ui/issues/issue-24424.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fissues%2Fissue-24424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fissues%2Fissue-24424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24424.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -2,6 +2,6 @@ trait Trait1<'l0, T0> {}\n trait Trait0<'l0>  {}\n \n impl <'l0, 'l1, T0> Trait1<'l0, T0> for bool where T0 : Trait0<'l0>, T0 : Trait0<'l1> {}\n-//~^ ERROR type annotations required: cannot resolve `T0: Trait0<'l0>`\n+//~^ ERROR type annotations needed: cannot resolve `T0: Trait0<'l0>`\n \n fn main() {}"}, {"sha": "8c539f7cedd19e555151ac774f3c2fc1fb645373", "filename": "src/test/ui/issues/issue-24424.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -1,4 +1,4 @@\n-error[E0283]: type annotations required: cannot resolve `T0: Trait0<'l0>`\n+error[E0283]: type annotations needed: cannot resolve `T0: Trait0<'l0>`\n   --> $DIR/issue-24424.rs:4:1\n    |\n LL | trait Trait0<'l0>  {}"}, {"sha": "c9dd92fca7dc8cf59745bb2eea3f9d2111c31909", "filename": "src/test/ui/issues/issue-29147.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -1,4 +1,4 @@\n-error[E0283]: type annotations required: cannot resolve `S5<_>: Foo`\n+error[E0283]: type annotations needed: cannot resolve `S5<_>: Foo`\n   --> $DIR/issue-29147.rs:21:13\n    |\n LL | trait Foo { fn xxx(&self); }"}, {"sha": "9e9f92ed9ace5c970589bf4ddada78efdd975a26", "filename": "src/test/ui/issues/issue-54954.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fissues%2Fissue-54954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fissues%2Fissue-54954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54954.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -1,7 +1,7 @@\n #![feature(const_fn)]\n \n const ARR_LEN: usize = Tt::const_val::<[i8; 123]>();\n-//~^ ERROR constant contains unimplemented expression type\n+//~^ ERROR type annotations needed\n \n trait Tt {\n     const fn const_val<T: Sized>() -> usize {\n@@ -11,6 +11,8 @@ trait Tt {\n }\n \n fn f(z: [f32; ARR_LEN]) -> [f32; ARR_LEN] {\n+    //~^ ERROR evaluation of constant value failed\n+    //~| ERROR evaluation of constant value failed\n     z\n }\n "}, {"sha": "56ccdaf7aac4064b2e0131228bfe8c245b5e9589", "filename": "src/test/ui/issues/issue-54954.stderr", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -4,13 +4,28 @@ error[E0379]: trait fns cannot be declared const\n LL |     const fn const_val<T: Sized>() -> usize {\n    |     ^^^^^ trait fns cannot be const\n \n-error[E0019]: constant contains unimplemented expression type\n+error[E0283]: type annotations needed: cannot resolve `_: Tt`\n   --> $DIR/issue-54954.rs:3:24\n    |\n LL | const ARR_LEN: usize = Tt::const_val::<[i8; 123]>();\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     const fn const_val<T: Sized>() -> usize {\n+   |              --------- - required by this bound in `Tt::const_val`\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-54954.rs:13:15\n+   |\n+LL | fn f(z: [f32; ARR_LEN]) -> [f32; ARR_LEN] {\n+   |               ^^^^^^^ referenced constant has errors\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-54954.rs:13:34\n+   |\n+LL | fn f(z: [f32; ARR_LEN]) -> [f32; ARR_LEN] {\n+   |                                  ^^^^^^^ referenced constant has errors\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0019, E0379.\n-For more information about an error, try `rustc --explain E0019`.\n+Some errors have detailed explanations: E0080, E0283, E0379.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "49fe7d1324ca8ea9433fc95caacc767d953dd82d", "filename": "src/test/ui/methods/method-ambig-one-trait-unknown-int-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -15,7 +15,7 @@ impl Foo for Vec<isize> {\n }\n \n // This is very hokey: we have heuristics to suppress messages about\n-// type annotations required. But placing these two bits of code into\n+// type annotations needed. But placing these two bits of code into\n // distinct functions, in this order, causes us to print out both\n // errors I'd like to see.\n "}, {"sha": "a0c9e24c235d6598495527da0354df3244a11d09", "filename": "src/test/ui/parser/raw/raw-literal-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-self.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n-    let r#self;\n+    let r#self: ();\n     //~^ ERROR `self` cannot be a raw identifier\n }"}, {"sha": "2a40dfe200cde937ab0bd941735dc7a26b6fc531", "filename": "src/test/ui/parser/raw/raw-literal-self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-self.stderr?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -1,7 +1,7 @@\n error: `self` cannot be a raw identifier\n   --> $DIR/raw-literal-self.rs:2:9\n    |\n-LL |     let r#self;\n+LL |     let r#self: ();\n    |         ^^^^^^\n \n error: aborting due to previous error"}, {"sha": "a9d9e13a9d9ec9d8d4d3b99a551145bc625bdbab", "filename": "src/test/ui/parser/raw/raw-literal-underscore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-underscore.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n-    let r#_;\n+    let r#_: ();\n     //~^ ERROR `_` cannot be a raw identifier\n }"}, {"sha": "d7a364d8579efa17e0891a8feee9edd75d5a0720", "filename": "src/test/ui/parser/raw/raw-literal-underscore.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-literal-underscore.stderr?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -1,7 +1,7 @@\n error: `_` cannot be a raw identifier\n   --> $DIR/raw-literal-underscore.rs:2:9\n    |\n-LL |     let r#_;\n+LL |     let r#_: ();\n    |         ^^^\n \n error: aborting due to previous error"}, {"sha": "31620216e82e1f19973da1169569adb0a6d6690c", "filename": "src/test/ui/pattern/rest-pat-semantic-disallowed.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -31,6 +31,7 @@ fn rest_patterns() {\n \n     // Ident patterns:\n     let x @ ..; //~ ERROR `..` patterns are not allowed here\n+    //~^ ERROR type annotations needed\n     let ref x @ ..; //~ ERROR `..` patterns are not allowed here\n     let ref mut x @ ..; //~ ERROR `..` patterns are not allowed here\n "}, {"sha": "be484e3a4d417694e15c7ef798e7b0cee9bfdc37", "filename": "src/test/ui/pattern/rest-pat-semantic-disallowed.stderr", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.stderr?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -58,31 +58,31 @@ LL |     let x @ ..;\n    = note: only allowed in tuple, tuple struct, and slice patterns\n \n error: `..` patterns are not allowed here\n-  --> $DIR/rest-pat-semantic-disallowed.rs:34:17\n+  --> $DIR/rest-pat-semantic-disallowed.rs:35:17\n    |\n LL |     let ref x @ ..;\n    |                 ^^\n    |\n    = note: only allowed in tuple, tuple struct, and slice patterns\n \n error: `..` patterns are not allowed here\n-  --> $DIR/rest-pat-semantic-disallowed.rs:35:21\n+  --> $DIR/rest-pat-semantic-disallowed.rs:36:21\n    |\n LL |     let ref mut x @ ..;\n    |                     ^^\n    |\n    = note: only allowed in tuple, tuple struct, and slice patterns\n \n error: `..` can only be used once per tuple pattern\n-  --> $DIR/rest-pat-semantic-disallowed.rs:42:9\n+  --> $DIR/rest-pat-semantic-disallowed.rs:43:9\n    |\n LL |         ..,\n    |         -- previously used here\n LL |         ..,\n    |         ^^ can only be used once per tuple pattern\n \n error: `..` can only be used once per tuple pattern\n-  --> $DIR/rest-pat-semantic-disallowed.rs:43:9\n+  --> $DIR/rest-pat-semantic-disallowed.rs:44:9\n    |\n LL |         ..,\n    |         -- previously used here\n@@ -91,7 +91,7 @@ LL |         ..\n    |         ^^ can only be used once per tuple pattern\n \n error: `..` can only be used once per tuple pattern\n-  --> $DIR/rest-pat-semantic-disallowed.rs:48:9\n+  --> $DIR/rest-pat-semantic-disallowed.rs:49:9\n    |\n LL |         ..,\n    |         -- previously used here\n@@ -100,15 +100,15 @@ LL |         ..\n    |         ^^ can only be used once per tuple pattern\n \n error: `..` can only be used once per tuple struct pattern\n-  --> $DIR/rest-pat-semantic-disallowed.rs:58:9\n+  --> $DIR/rest-pat-semantic-disallowed.rs:59:9\n    |\n LL |         ..,\n    |         -- previously used here\n LL |         ..,\n    |         ^^ can only be used once per tuple struct pattern\n \n error: `..` can only be used once per tuple struct pattern\n-  --> $DIR/rest-pat-semantic-disallowed.rs:59:9\n+  --> $DIR/rest-pat-semantic-disallowed.rs:60:9\n    |\n LL |         ..,\n    |         -- previously used here\n@@ -117,7 +117,7 @@ LL |         ..\n    |         ^^ can only be used once per tuple struct pattern\n \n error: `..` can only be used once per tuple struct pattern\n-  --> $DIR/rest-pat-semantic-disallowed.rs:64:9\n+  --> $DIR/rest-pat-semantic-disallowed.rs:65:9\n    |\n LL |         ..,\n    |         -- previously used here\n@@ -126,15 +126,15 @@ LL |         ..\n    |         ^^ can only be used once per tuple struct pattern\n \n error: `..` can only be used once per slice pattern\n-  --> $DIR/rest-pat-semantic-disallowed.rs:72:9\n+  --> $DIR/rest-pat-semantic-disallowed.rs:73:9\n    |\n LL |         ..,\n    |         -- previously used here\n LL |         ..,\n    |         ^^ can only be used once per slice pattern\n \n error: `..` can only be used once per slice pattern\n-  --> $DIR/rest-pat-semantic-disallowed.rs:73:9\n+  --> $DIR/rest-pat-semantic-disallowed.rs:74:9\n    |\n LL |         ..,\n    |         -- previously used here\n@@ -143,15 +143,15 @@ LL |         ..\n    |         ^^ can only be used once per slice pattern\n \n error: `..` can only be used once per slice pattern\n-  --> $DIR/rest-pat-semantic-disallowed.rs:77:17\n+  --> $DIR/rest-pat-semantic-disallowed.rs:78:17\n    |\n LL |         ..,\n    |         -- previously used here\n LL |         ref x @ ..,\n    |                 ^^ can only be used once per slice pattern\n \n error: `..` can only be used once per slice pattern\n-  --> $DIR/rest-pat-semantic-disallowed.rs:78:21\n+  --> $DIR/rest-pat-semantic-disallowed.rs:79:21\n    |\n LL |         ..,\n    |         -- previously used here\n@@ -160,15 +160,15 @@ LL |         ref mut y @ ..,\n    |                     ^^ can only be used once per slice pattern\n \n error: `..` patterns are not allowed here\n-  --> $DIR/rest-pat-semantic-disallowed.rs:79:18\n+  --> $DIR/rest-pat-semantic-disallowed.rs:80:18\n    |\n LL |         (ref z @ ..),\n    |                  ^^\n    |\n    = note: only allowed in tuple, tuple struct, and slice patterns\n \n error: `..` can only be used once per slice pattern\n-  --> $DIR/rest-pat-semantic-disallowed.rs:80:9\n+  --> $DIR/rest-pat-semantic-disallowed.rs:81:9\n    |\n LL |         ..,\n    |         -- previously used here\n@@ -184,5 +184,12 @@ LL |     fn foo(..: u8) {}\n    |\n    = note: only allowed in tuple, tuple struct, and slice patterns\n \n-error: aborting due to 22 previous errors\n+error[E0282]: type annotations needed\n+  --> $DIR/rest-pat-semantic-disallowed.rs:33:9\n+   |\n+LL |     let x @ ..;\n+   |         ^^^^^^ consider giving this pattern a type\n+\n+error: aborting due to 23 previous errors\n \n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "95ee01a70ceadddf48da9af731211c3c53f5d0e0", "filename": "src/test/ui/question-mark-type-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fquestion-mark-type-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fquestion-mark-type-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fquestion-mark-type-infer.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -9,7 +9,7 @@ fn f(x: &i32) -> Result<i32, ()> {\n \n fn g() -> Result<Vec<i32>, ()> {\n     let l = [1, 2, 3, 4];\n-    l.iter().map(f).collect()? //~ ERROR type annotations required: cannot resolve\n+    l.iter().map(f).collect()? //~ ERROR type annotations needed: cannot resolve\n }\n \n fn main() {"}, {"sha": "53a170e7d431ce40e7653787e467337db320c212", "filename": "src/test/ui/question-mark-type-infer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -1,4 +1,4 @@\n-error[E0284]: type annotations required: cannot resolve `<_ as std::ops::Try>::Ok == _`\n+error[E0284]: type annotations needed: cannot resolve `<_ as std::ops::Try>::Ok == _`\n   --> $DIR/question-mark-type-infer.rs:12:5\n    |\n LL |     l.iter().map(f).collect()?"}, {"sha": "e2680446f851a891664e1b3631864707372f67c8", "filename": "src/test/ui/rfc-2565-param-attrs/proc-macro-cannot-be-used.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -20,7 +20,7 @@ type Alias = extern \"C\" fn(#[id] u8, #[id] ...);\n \n fn free(#[id] arg1: u8) {\n     //~^ ERROR expected an inert attribute, found an attribute macro\n-    let lam = |#[id] W(x), #[id] y| ();\n+    let lam = |#[id] W(x), #[id] y: usize| ();\n     //~^ ERROR expected an inert attribute, found an attribute macro\n     //~| ERROR expected an inert attribute, found an attribute macro\n }"}, {"sha": "4654dc1b496f2c8801bc3196eb111174001e72fc", "filename": "src/test/ui/rfc-2565-param-attrs/proc-macro-cannot-be-used.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -37,13 +37,13 @@ LL | fn free(#[id] arg1: u8) {\n error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-cannot-be-used.rs:23:16\n    |\n-LL |     let lam = |#[id] W(x), #[id] y| ();\n+LL |     let lam = |#[id] W(x), #[id] y: usize| ();\n    |                ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n   --> $DIR/proc-macro-cannot-be-used.rs:23:28\n    |\n-LL |     let lam = |#[id] W(x), #[id] y| ();\n+LL |     let lam = |#[id] W(x), #[id] y: usize| ();\n    |                            ^^^^^\n \n error: expected an inert attribute, found an attribute macro"}, {"sha": "759416d1901db95207023c70b06f1c871ef2da64", "filename": "src/test/ui/traits/trait-static-method-generic-inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Ftraits%2Ftrait-static-method-generic-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Ftraits%2Ftrait-static-method-generic-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-static-method-generic-inference.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -22,7 +22,7 @@ mod base {\n \n pub fn foo() {\n     let _f: base::Foo = base::HasNew::new();\n-    //~^ ERROR type annotations required\n+    //~^ ERROR type annotations needed\n }\n \n fn main() { }"}, {"sha": "22931c5ba32e9bcb34d4540c34a7fc362e399407", "filename": "src/test/ui/traits/trait-static-method-generic-inference.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Ftraits%2Ftrait-static-method-generic-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Ftraits%2Ftrait-static-method-generic-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-static-method-generic-inference.stderr?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -1,4 +1,4 @@\n-error[E0283]: type annotations required: cannot resolve `_: base::HasNew<base::Foo>`\n+error[E0283]: type annotations needed: cannot resolve `_: base::HasNew<base::Foo>`\n   --> $DIR/trait-static-method-generic-inference.rs:24:25\n    |\n LL |         fn new() -> T;"}, {"sha": "3b1521d5c028b387f4cd4aff36de98863206d82e", "filename": "src/test/ui/type/type-annotation-needed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -4,5 +4,5 @@ fn foo<T: Into<String>>(x: i32) {}\n \n fn main() {\n     foo(42);\n-    //~^ ERROR type annotations required\n+    //~^ ERROR type annotations needed\n }"}, {"sha": "460bbe9dbc4f95f0af5494c339c685480a7fc0dd", "filename": "src/test/ui/type/type-annotation-needed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -1,4 +1,4 @@\n-error[E0283]: type annotations required: cannot resolve `_: std::convert::Into<std::string::String>`\n+error[E0283]: type annotations needed: cannot resolve `_: std::convert::Into<std::string::String>`\n   --> $DIR/type-annotation-needed.rs:6:5\n    |\n LL | fn foo<T: Into<String>>(x: i32) {}"}, {"sha": "7e6429ccfbe30fccfbab2826b38f267869e4f454", "filename": "src/test/ui/type/type-check/issue-40294.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -2,7 +2,7 @@ trait Foo: Sized {\n     fn foo(self);\n }\n \n-fn foo<'a,'b,T>(x: &'a T, y: &'b T) //~ ERROR type annotations required\n+fn foo<'a,'b,T>(x: &'a T, y: &'b T) //~ ERROR type annotations needed\n     where &'a T : Foo,\n           &'b T : Foo\n {"}, {"sha": "508783aaf2b0ebf87364f02f6c4e053a9ccda39f", "filename": "src/test/ui/type/type-check/issue-40294.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -1,4 +1,4 @@\n-error[E0283]: type annotations required: cannot resolve `&'a T: Foo`\n+error[E0283]: type annotations needed: cannot resolve `&'a T: Foo`\n   --> $DIR/issue-40294.rs:5:1\n    |\n LL |   trait Foo: Sized {"}, {"sha": "15adfebb334006d4b3c94670e3160691d4954dc4", "filename": "src/test/ui/type/type-path-err-node-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Ftype%2Ftype-path-err-node-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Ftype%2Ftype-path-err-node-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-path-err-node-types.rs?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -20,7 +20,7 @@ fn method() {\n }\n \n fn closure() {\n-    let _ = |a, b: _| -> _ { 0 }; // OK\n+    let _ = |a, b: _| -> _ { 0 }; //~ ERROR type annotations needed\n }\n \n fn main() {}"}, {"sha": "cd93525c762192e970bdd929589b62de428a5f57", "filename": "src/test/ui/type/type-path-err-node-types.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Ftype%2Ftype-path-err-node-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ed746b55287690ee26b2d494a022bd0ffecdc11/src%2Ftest%2Fui%2Ftype%2Ftype-path-err-node-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-path-err-node-types.stderr?ref=5ed746b55287690ee26b2d494a022bd0ffecdc11", "patch": "@@ -22,7 +22,13 @@ error[E0425]: cannot find value `nonexistent` in this scope\n LL |     nonexistent.nonexistent::<u8>();\n    |     ^^^^^^^^^^^ not found in this scope\n \n-error: aborting due to 4 previous errors\n+error[E0282]: type annotations needed\n+  --> $DIR/type-path-err-node-types.rs:23:14\n+   |\n+LL |     let _ = |a, b: _| -> _ { 0 };\n+   |              ^ consider giving this closure parameter a type\n+\n+error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0412, E0425, E0433.\n-For more information about an error, try `rustc --explain E0412`.\n+Some errors have detailed explanations: E0282, E0412, E0425, E0433.\n+For more information about an error, try `rustc --explain E0282`."}]}