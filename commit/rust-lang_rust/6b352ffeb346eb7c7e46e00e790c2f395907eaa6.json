{"sha": "6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMzUyZmZlYjM0NmViN2M3ZTQ2ZTAwZTc5MGMyZjM5NTkwN2VhYTY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-07-20T09:59:10Z"}, "committer": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-07-20T09:59:10Z"}, "message": "Merge #1560\n\n1560: move debug_dump to fmt::Debug r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "f19271365126259a7975dda9ee3e1e1496a299dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f19271365126259a7975dda9ee3e1e1496a299dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "html_url": "https://github.com/rust-lang/rust/commit/6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "2830d1376b05794c7bf1467fe52ad3bc0eb4ca41", "url": "https://api.github.com/repos/rust-lang/rust/commits/2830d1376b05794c7bf1467fe52ad3bc0eb4ca41", "html_url": "https://github.com/rust-lang/rust/commit/2830d1376b05794c7bf1467fe52ad3bc0eb4ca41"}, {"sha": "f3bdbec1b68fa0e20f0b7b6c6ef64e1507970b0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3bdbec1b68fa0e20f0b7b6c6ef64e1507970b0d", "html_url": "https://github.com/rust-lang/rust/commit/f3bdbec1b68fa0e20f0b7b6c6ef64e1507970b0d"}], "stats": {"total": 501, "additions": 260, "deletions": 241}, "files": [{"sha": "9c88644df483cd062b0c6fc7032167b14020bbf1", "filename": "crates/ra_assists/src/add_derive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Fadd_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Fadd_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_derive.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -22,9 +22,9 @@ pub(crate) fn add_derive(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist>\n                 edit.insert(node_start, \"#[derive()]\\n\");\n                 node_start + TextUnit::of_str(\"#[derive(\")\n             }\n-            Some(tt) => tt.syntax().range().end() - TextUnit::of_char(')'),\n+            Some(tt) => tt.syntax().text_range().end() - TextUnit::of_char(')'),\n         };\n-        edit.target(nominal.syntax().range());\n+        edit.target(nominal.syntax().text_range());\n         edit.set_cursor(offset)\n     });\n \n@@ -37,7 +37,7 @@ fn derive_insertion_offset(nominal: &ast::NominalDef) -> Option<TextUnit> {\n         .syntax()\n         .children_with_tokens()\n         .find(|it| it.kind() != COMMENT && it.kind() != WHITESPACE)?;\n-    Some(non_ws_child.range().start())\n+    Some(non_ws_child.text_range().start())\n }\n \n #[cfg(test)]"}, {"sha": "88970929ffc19452a949595ed1970037cb3ba75a", "filename": "crates/ra_assists/src/add_explicit_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_explicit_type.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -16,10 +16,10 @@ pub(crate) fn add_explicit_type(mut ctx: AssistCtx<impl HirDatabase>) -> Option<\n         PatKind::BindPat(bind_pat) => bind_pat,\n         _ => return None,\n     };\n-    let pat_range = pat.syntax().range();\n+    let pat_range = pat.syntax().text_range();\n     // The binding must have a name\n     let name = pat.name()?;\n-    let name_range = name.syntax().range();\n+    let name_range = name.syntax().text_range();\n     // Assist not applicable if the type has already been specified\n     if stmt.syntax().children_with_tokens().any(|child| child.kind() == T![:]) {\n         return None;"}, {"sha": "9a0cfb4e7fd292b0608a67205f7f55910420d0f5", "filename": "crates/ra_assists/src/add_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Fadd_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Fadd_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_impl.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -11,9 +11,9 @@ pub(crate) fn add_impl(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let nominal = ctx.node_at_offset::<ast::NominalDef>()?;\n     let name = nominal.name()?;\n     ctx.add_action(AssistId(\"add_impl\"), \"add impl\", |edit| {\n-        edit.target(nominal.syntax().range());\n+        edit.target(nominal.syntax().text_range());\n         let type_params = nominal.type_param_list();\n-        let start_offset = nominal.syntax().range().end();\n+        let start_offset = nominal.syntax().text_range().end();\n         let mut buf = String::new();\n         buf.push_str(\"\\n\\nimpl\");\n         if let Some(type_params) = &type_params {"}, {"sha": "995e44d5eedfa25027c9ece1bc71ffa742e9f0b9", "filename": "crates/ra_assists/src/add_missing_impl_members.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -43,7 +43,7 @@ fn add_missing_impl_members_inner(\n \n     let trait_def = {\n         let file_id = ctx.frange.file_id;\n-        let position = FilePosition { file_id, offset: impl_node.syntax().range().start() };\n+        let position = FilePosition { file_id, offset: impl_node.syntax().text_range().start() };\n         let analyzer = hir::SourceAnalyzer::new(ctx.db, position.file_id, impl_node.syntax(), None);\n \n         resolve_target_trait_def(ctx.db, &analyzer, &impl_node)?\n@@ -87,7 +87,7 @@ fn add_missing_impl_members_inner(\n         ast_editor.append_items(items);\n \n         let first_new_item = ast_editor.ast().impl_items().nth(n_existing_items).unwrap();\n-        let cursor_position = first_new_item.syntax().range().start();\n+        let cursor_position = first_new_item.syntax().text_range().start();\n         ast_editor.into_text_edit(edit.text_edit_builder());\n \n         edit.set_cursor(cursor_position);"}, {"sha": "4d5a76de673cb53e91ef430b5b9af78fec6c3dd5", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -141,7 +141,7 @@ impl AssistBuilder {\n         if let Some(indent) = leading_indent(node) {\n             replace_with = reindent(&replace_with, &indent)\n         }\n-        self.replace(node.range(), replace_with)\n+        self.replace(node.text_range(), replace_with)\n     }\n \n     pub(crate) fn set_edit_builder(&mut self, edit: TextEditBuilder) {"}, {"sha": "36235eb137f6dd87e189bfd991fc95d560cb0058", "filename": "crates/ra_assists/src/ast_editor.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_editor.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -22,7 +22,10 @@ impl<N: AstNode> AstEditor<N> {\n         // FIXME: compute a more fine-grained diff here.\n         // If *you* know a nice algorithm to compute diff between two syntax\n         // tree, tell me about it!\n-        builder.replace(self.original_ast.syntax().range(), self.ast().syntax().text().to_string());\n+        builder.replace(\n+            self.original_ast.syntax().text_range(),\n+            self.ast().syntax().text().to_string(),\n+        );\n     }\n \n     pub fn ast(&self) -> &N {"}, {"sha": "43e75eee1876ba758f2d154248c65b30a7852ccc", "filename": "crates/ra_assists/src/auto_import.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fauto_import.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -356,7 +356,7 @@ fn best_action_for_target(\n             // todo: we should include even whitespace blocks as anchor candidates\n             let anchor = container\n                 .children()\n-                .find(|n| n.range().start() < anchor.range().start())\n+                .find(|n| n.text_range().start() < anchor.text_range().start())\n                 .or_else(|| Some(anchor));\n \n             ImportAction::add_new_use(anchor, false)\n@@ -418,7 +418,7 @@ fn make_assist_add_new_use(\n                 buf.push_str(&spaces);\n             }\n         }\n-        let position = if after { anchor.range().end() } else { anchor.range().start() };\n+        let position = if after { anchor.text_range().end() } else { anchor.text_range().start() };\n         edit.insert(position, buf);\n     }\n }\n@@ -434,10 +434,10 @@ fn make_assist_add_in_tree_list(\n         let mut buf = String::new();\n         let comma = last.syntax().siblings(Direction::Next).find(|n| n.kind() == T![,]);\n         let offset = if let Some(comma) = comma {\n-            comma.range().end()\n+            comma.text_range().end()\n         } else {\n             buf.push_str(\",\");\n-            last.syntax().range().end()\n+            last.syntax().text_range().end()\n         };\n         if add_self {\n             buf.push_str(\" self\")\n@@ -462,11 +462,11 @@ fn make_assist_add_nested_import(\n     if let Some(use_tree) = use_tree {\n         let (start, add_colon_colon) = if let Some(first_segment_to_split) = first_segment_to_split\n         {\n-            (first_segment_to_split.syntax().range().start(), false)\n+            (first_segment_to_split.syntax().text_range().start(), false)\n         } else {\n-            (use_tree.syntax().range().end(), true)\n+            (use_tree.syntax().text_range().end(), true)\n         };\n-        let end = use_tree.syntax().range().end();\n+        let end = use_tree.syntax().text_range().end();\n \n         let mut buf = String::new();\n         if add_colon_colon {\n@@ -497,8 +497,8 @@ fn apply_auto_import(\n         // Here we are assuming the assist will provide a  correct use statement\n         // so we can delete the path qualifier\n         edit.delete(TextRange::from_to(\n-            path.syntax().range().start(),\n-            last.syntax().range().start(),\n+            path.syntax().text_range().start(),\n+            last.syntax().text_range().start(),\n         ));\n     }\n }"}, {"sha": "d28cdd07bf64072662abaf76d3850838f414d5cb", "filename": "crates/ra_assists/src/change_visibility.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fchange_visibility.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -35,14 +35,15 @@ fn add_vis(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n         if parent.children().any(|child| child.kind() == VISIBILITY) {\n             return None;\n         }\n-        (vis_offset(&parent), keyword.range())\n+        (vis_offset(&parent), keyword.text_range())\n     } else {\n         let ident = ctx.token_at_offset().find(|leaf| leaf.kind() == IDENT)?;\n         let field = ident.parent().ancestors().find_map(ast::NamedFieldDef::cast)?;\n-        if field.name()?.syntax().range() != ident.range() && field.visibility().is_some() {\n+        if field.name()?.syntax().text_range() != ident.text_range() && field.visibility().is_some()\n+        {\n             return None;\n         }\n-        (vis_offset(field.syntax()), ident.range())\n+        (vis_offset(field.syntax()), ident.text_range())\n     };\n \n     ctx.add_action(AssistId(\"change_visibility\"), \"make pub(crate)\", |edit| {\n@@ -61,25 +62,25 @@ fn vis_offset(node: &SyntaxNode) -> TextUnit {\n             _ => false,\n         })\n         .next()\n-        .map(|it| it.range().start())\n-        .unwrap_or_else(|| node.range().start())\n+        .map(|it| it.text_range().start())\n+        .unwrap_or_else(|| node.text_range().start())\n }\n \n fn change_vis(mut ctx: AssistCtx<impl HirDatabase>, vis: ast::Visibility) -> Option<Assist> {\n     if vis.syntax().text() == \"pub\" {\n         ctx.add_action(AssistId(\"change_visibility\"), \"change to pub(crate)\", |edit| {\n-            edit.target(vis.syntax().range());\n-            edit.replace(vis.syntax().range(), \"pub(crate)\");\n-            edit.set_cursor(vis.syntax().range().start())\n+            edit.target(vis.syntax().text_range());\n+            edit.replace(vis.syntax().text_range(), \"pub(crate)\");\n+            edit.set_cursor(vis.syntax().text_range().start())\n         });\n \n         return ctx.build();\n     }\n     if vis.syntax().text() == \"pub(crate)\" {\n         ctx.add_action(AssistId(\"change_visibility\"), \"change to pub\", |edit| {\n-            edit.target(vis.syntax().range());\n-            edit.replace(vis.syntax().range(), \"pub\");\n-            edit.set_cursor(vis.syntax().range().start());\n+            edit.target(vis.syntax().text_range());\n+            edit.replace(vis.syntax().text_range(), \"pub\");\n+            edit.set_cursor(vis.syntax().text_range().start());\n         });\n \n         return ctx.build();"}, {"sha": "939429892661ea09baf06f1667194428f3738e16", "filename": "crates/ra_assists/src/fill_match_arms.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -84,8 +84,8 @@ pub(crate) fn fill_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<As\n             buf.push_str(\" => (),\\n\");\n         }\n         buf.push_str(\"}\");\n-        edit.target(match_expr.syntax().range());\n-        edit.set_cursor(expr.syntax().range().start());\n+        edit.target(match_expr.syntax().text_range());\n+        edit.set_cursor(expr.syntax().text_range().start());\n         edit.replace_node_and_indent(match_expr.syntax(), buf);\n     });\n "}, {"sha": "b55b36a8edb1071e92673c4ae6f76fa3ba326ba3", "filename": "crates/ra_assists/src/flip_binexpr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Fflip_binexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Fflip_binexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fflip_binexpr.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -8,7 +8,7 @@ pub(crate) fn flip_binexpr(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assis\n     let expr = ctx.node_at_offset::<BinExpr>()?;\n     let lhs = expr.lhs()?.syntax().clone();\n     let rhs = expr.rhs()?.syntax().clone();\n-    let op_range = expr.op_token()?.range();\n+    let op_range = expr.op_token()?.text_range();\n     // The assist should be applied only if the cursor is on the operator\n     let cursor_in_range = ctx.frange.range.is_subrange(&op_range);\n     if !cursor_in_range {\n@@ -25,8 +25,8 @@ pub(crate) fn flip_binexpr(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assis\n         if let FlipAction::FlipAndReplaceOp(new_op) = action {\n             edit.replace(op_range, new_op);\n         }\n-        edit.replace(lhs.range(), rhs.text());\n-        edit.replace(rhs.range(), lhs.text());\n+        edit.replace(lhs.text_range(), rhs.text());\n+        edit.replace(rhs.text_range(), lhs.text());\n     });\n \n     ctx.build()"}, {"sha": "34489329cb2954104d77a9d3521d14b8e088302d", "filename": "crates/ra_assists/src/flip_comma.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Fflip_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Fflip_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fflip_comma.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -8,9 +8,9 @@ pub(crate) fn flip_comma(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist>\n     let prev = non_trivia_sibling(comma.clone().into(), Direction::Prev)?;\n     let next = non_trivia_sibling(comma.clone().into(), Direction::Next)?;\n     ctx.add_action(AssistId(\"flip_comma\"), \"flip comma\", |edit| {\n-        edit.target(comma.range());\n-        edit.replace(prev.range(), next.to_string());\n-        edit.replace(next.range(), prev.to_string());\n+        edit.target(comma.text_range());\n+        edit.replace(prev.text_range(), next.to_string());\n+        edit.replace(next.text_range(), prev.to_string());\n     });\n \n     ctx.build()"}, {"sha": "82c4d54b0c6f08406ac4617fac5e17b879c98f03", "filename": "crates/ra_assists/src/inline_local_variable.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Finline_local_variable.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -22,9 +22,12 @@ pub(crate) fn inline_local_varialbe(mut ctx: AssistCtx<impl HirDatabase>) -> Opt\n         .next_sibling_or_token()\n         .and_then(|it| ast::Whitespace::cast(it.as_token()?.clone()))\n     {\n-        TextRange::from_to(let_stmt.syntax().range().start(), whitespace.syntax().range().end())\n+        TextRange::from_to(\n+            let_stmt.syntax().text_range().start(),\n+            whitespace.syntax().text_range().end(),\n+        )\n     } else {\n-        let_stmt.syntax().range()\n+        let_stmt.syntax().text_range()\n     };\n     let analyzer = hir::SourceAnalyzer::new(ctx.db, ctx.frange.file_id, bind_pat.syntax(), None);\n     let refs = analyzer.find_all_refs(&bind_pat);"}, {"sha": "df6c5898992e6d896ec984c02c3ea52dd176d0b1", "filename": "crates/ra_assists/src/introduce_variable.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fintroduce_variable.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -48,7 +48,7 @@ pub(crate) fn introduce_variable(mut ctx: AssistCtx<impl HirDatabase>) -> Option\n             if !full_stmt.unwrap().has_semi() {\n                 buf.push_str(\";\");\n             }\n-            edit.replace(expr.syntax().range(), buf);\n+            edit.replace(expr.syntax().text_range(), buf);\n         } else {\n             buf.push_str(\";\");\n \n@@ -66,14 +66,14 @@ pub(crate) fn introduce_variable(mut ctx: AssistCtx<impl HirDatabase>) -> Option\n                 buf.push_str(text);\n             }\n \n-            edit.target(expr.syntax().range());\n-            edit.replace(expr.syntax().range(), \"var_name\".to_string());\n-            edit.insert(anchor_stmt.range().start(), buf);\n+            edit.target(expr.syntax().text_range());\n+            edit.replace(expr.syntax().text_range(), \"var_name\".to_string());\n+            edit.insert(anchor_stmt.text_range().start(), buf);\n             if wrap_in_block {\n-                edit.insert(anchor_stmt.range().end(), \" }\");\n+                edit.insert(anchor_stmt.text_range().end(), \" }\");\n             }\n         }\n-        edit.set_cursor(anchor_stmt.range().start() + cursor_offset);\n+        edit.set_cursor(anchor_stmt.text_range().start() + cursor_offset);\n     });\n \n     ctx.build()"}, {"sha": "0f3cdbe5335016b072e3e2299ca567e2ee59ba2e", "filename": "crates/ra_assists/src/move_guard.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fmove_guard.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -17,11 +17,11 @@ pub(crate) fn move_guard_to_arm_body(mut ctx: AssistCtx<impl HirDatabase>) -> Op\n     let buf = format!(\"if {} {{ {} }}\", guard_conditions.syntax().text(), arm_expr.syntax().text());\n \n     ctx.add_action(AssistId(\"move_guard_to_arm_body\"), \"move guard to arm body\", |edit| {\n-        edit.target(guard.syntax().range());\n+        edit.target(guard.syntax().text_range());\n         let offseting_amount = match &space_before_guard {\n             Some(SyntaxElement::Token(tok)) => {\n                 if let Some(_) = ast::Whitespace::cast(tok.clone()) {\n-                    let ele = space_before_guard.unwrap().range();\n+                    let ele = space_before_guard.unwrap().text_range();\n                     edit.delete(ele);\n                     ele.len()\n                 } else {\n@@ -31,9 +31,11 @@ pub(crate) fn move_guard_to_arm_body(mut ctx: AssistCtx<impl HirDatabase>) -> Op\n             _ => TextUnit::from(0),\n         };\n \n-        edit.delete(guard.syntax().range());\n+        edit.delete(guard.syntax().text_range());\n         edit.replace_node_and_indent(arm_expr.syntax(), buf);\n-        edit.set_cursor(arm_expr.syntax().range().start() + TextUnit::from(3) - offseting_amount);\n+        edit.set_cursor(\n+            arm_expr.syntax().text_range().start() + TextUnit::from(3) - offseting_amount,\n+        );\n     });\n     ctx.build()\n }\n@@ -62,18 +64,18 @@ pub(crate) fn move_arm_cond_to_match_guard(mut ctx: AssistCtx<impl HirDatabase>)\n         AssistId(\"move_arm_cond_to_match_guard\"),\n         \"move condition to match guard\",\n         |edit| {\n-            edit.target(if_expr.syntax().range());\n+            edit.target(if_expr.syntax().text_range());\n             let then_only_expr = then_block.statements().next().is_none();\n \n             match &then_block.expr() {\n                 Some(then_expr) if then_only_expr => {\n-                    edit.replace(if_expr.syntax().range(), then_expr.syntax().text())\n+                    edit.replace(if_expr.syntax().text_range(), then_expr.syntax().text())\n                 }\n-                _ => edit.replace(if_expr.syntax().range(), then_block.syntax().text()),\n+                _ => edit.replace(if_expr.syntax().text_range(), then_block.syntax().text()),\n             }\n \n-            edit.insert(last_match_pat.syntax().range().end(), buf);\n-            edit.set_cursor(last_match_pat.syntax().range().end() + TextUnit::from(1));\n+            edit.insert(last_match_pat.syntax().text_range().end(), buf);\n+            edit.set_cursor(last_match_pat.syntax().text_range().end() + TextUnit::from(1));\n         },\n     );\n     ctx.build()"}, {"sha": "870133fda07619a60cc0f21afa3b748e12891fa5", "filename": "crates/ra_assists/src/remove_dbg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fremove_dbg.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -12,7 +12,7 @@ pub(crate) fn remove_dbg(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist>\n         return None;\n     }\n \n-    let macro_range = macro_call.syntax().range();\n+    let macro_range = macro_call.syntax().text_range();\n \n     // If the cursor is inside the macro call, we'll try to maintain the cursor\n     // position by subtracting the length of dbg!( from the start of the file\n@@ -43,7 +43,7 @@ pub(crate) fn remove_dbg(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist>\n     };\n \n     ctx.add_action(AssistId(\"remove_dbg\"), \"remove dbg!()\", |edit| {\n-        edit.target(macro_call.syntax().range());\n+        edit.target(macro_call.syntax().text_range());\n         edit.replace(macro_range, macro_content);\n         edit.set_cursor(cursor_pos);\n     });"}, {"sha": "c0bf6d23512936a4bd1ee123f16e6bbd0135d606", "filename": "crates/ra_assists/src/replace_if_let_with_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Freplace_if_let_with_match.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -17,9 +17,9 @@ pub(crate) fn replace_if_let_with_match(mut ctx: AssistCtx<impl HirDatabase>) ->\n \n     ctx.add_action(AssistId(\"replace_if_let_with_match\"), \"replace with match\", |edit| {\n         let match_expr = build_match_expr(expr, pat, then_block, else_block);\n-        edit.target(if_expr.syntax().range());\n+        edit.target(if_expr.syntax().text_range());\n         edit.replace_node_and_indent(if_expr.syntax(), match_expr);\n-        edit.set_cursor(if_expr.syntax().range().start())\n+        edit.set_cursor(if_expr.syntax().text_range().start())\n     });\n \n     ctx.build()"}, {"sha": "2c1edddb90dd654854715678358e0be6f33f63c2", "filename": "crates/ra_assists/src/split_import.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_assists%2Fsrc%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fsplit_import.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -15,14 +15,14 @@ pub(crate) fn split_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assis\n         return None;\n     }\n \n-    let l_curly = colon_colon.range().end();\n+    let l_curly = colon_colon.text_range().end();\n     let r_curly = match top_path.syntax().parent().and_then(ast::UseTree::cast) {\n-        Some(tree) => tree.syntax().range().end(),\n-        None => top_path.syntax().range().end(),\n+        Some(tree) => tree.syntax().text_range().end(),\n+        None => top_path.syntax().text_range().end(),\n     };\n \n     ctx.add_action(AssistId(\"split_import\"), \"split import\", |edit| {\n-        edit.target(colon_colon.range());\n+        edit.target(colon_colon.text_range());\n         edit.insert(l_curly, \"{\");\n         edit.insert(r_curly, \"}\");\n         edit.set_cursor(l_curly + TextUnit::of_str(\"{\"));"}, {"sha": "403aab352601ed1004b2537f3ff4a608d935fc0c", "filename": "crates/ra_cli/src/analysis_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -70,7 +70,7 @@ pub fn run(verbose: bool, memory_usage: bool, path: &Path, only: Option<&str>) -\n             let src = f.source(db);\n             let original_file = src.file_id.original_file(db);\n             let path = db.file_relative_path(original_file);\n-            let syntax_range = src.ast.syntax().range();\n+            let syntax_range = src.ast.syntax().text_range();\n             write!(msg, \" ({:?} {})\", path, syntax_range).unwrap();\n         }\n         bar.set_message(&msg);"}, {"sha": "de8191ca316b66b003b972bb430f6413648950c3", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -55,7 +55,7 @@ fn main() -> Result<()> {\n             let _p = profile(\"parsing\");\n             let file = file()?;\n             if !matches.is_present(\"no-dump\") {\n-                println!(\"{}\", file.syntax().debug_dump());\n+                println!(\"{:#?}\", file.syntax());\n             }\n             std::mem::forget(file);\n         }"}, {"sha": "6eed67f50c11bc853021f320de45b78efcf7e840", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -843,7 +843,7 @@ where\n                         let file_id = call_id.as_file(MacroFileKind::Expr);\n                         if let Some(node) = self.db.parse_or_expand(file_id) {\n                             if let Some(expr) = ast::Expr::cast(node) {\n-                                log::debug!(\"macro expansion {}\", expr.syntax().debug_dump());\n+                                log::debug!(\"macro expansion {:#?}\", expr.syntax());\n                                 let old_file_id =\n                                     std::mem::replace(&mut self.current_file_id, file_id);\n                                 let id = self.collect_expr(expr);"}, {"sha": "79e1857f9365185f6bac5395e34cb42b67605e99", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -296,7 +296,7 @@ mod tests {\n         let local_name_entry = analyzer.resolve_local_name(&name_ref).unwrap();\n         let local_name =\n             local_name_entry.ptr().either(|it| it.syntax_node_ptr(), |it| it.syntax_node_ptr());\n-        assert_eq!(local_name.range(), expected_name.syntax().range());\n+        assert_eq!(local_name.range(), expected_name.syntax().text_range());\n     }\n \n     #[test]"}, {"sha": "4c173a4f73be8892f6f683c08ce910e87e0e58d4", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -361,7 +361,7 @@ impl SourceAnalyzer {\n             })\n             .map(|name_ref| ReferenceDescriptor {\n                 name: name_ref.text().to_string(),\n-                range: name_ref.syntax().range(),\n+                range: name_ref.syntax().text_range(),\n             })\n             .collect()\n     }"}, {"sha": "7b2bdeb3f62d50227f51d35be429189aedf12977", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -3127,7 +3127,7 @@ fn infer(content: &str) -> String {\n         for (syntax_ptr, ty) in &types {\n             let node = syntax_ptr.to_node(source_file.syntax());\n             let (range, text) = if let Some(self_param) = ast::SelfParam::cast(node.clone()) {\n-                (self_param.self_kw_token().range(), \"self\".to_string())\n+                (self_param.self_kw_token().text_range(), \"self\".to_string())\n             } else {\n                 (syntax_ptr.range(), node.text().to_string().replace(\"\\n\", \" \"))\n             };"}, {"sha": "212448d413b05524834f466e4570eeb155184353", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -47,7 +47,7 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n             // Number of arguments specified at the call site\n             let num_args_at_callsite = arg_list.args().count();\n \n-            let arg_list_range = arg_list.syntax().range();\n+            let arg_list_range = arg_list.syntax().text_range();\n             if !arg_list_range.contains_inclusive(position.offset) {\n                 tested_by!(call_info_bad_offset);\n                 return None;\n@@ -57,7 +57,7 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n                 num_args_at_callsite,\n                 arg_list\n                     .args()\n-                    .take_while(|arg| arg.syntax().range().end() < position.offset)\n+                    .take_while(|arg| arg.syntax().text_range().end() < position.offset)\n                     .count(),\n             );\n "}, {"sha": "18c1839dcc51d3ad443272bbfa3a412c5f648381", "filename": "crates/ra_ide_api/src/completion/complete_keyword.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -88,7 +88,7 @@ fn is_in_loop_body(leaf: &SyntaxToken) -> bool {\n             .visit::<ast::LoopExpr, _>(|it| it.loop_body())\n             .accept(&node);\n         if let Some(Some(body)) = loop_body {\n-            if leaf.range().is_subrange(&body.syntax().range()) {\n+            if leaf.text_range().is_subrange(&body.syntax().text_range()) {\n                 return true;\n             }\n         }"}, {"sha": "5fd41eeb35ce9566266c86264e131cb3a058d722", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -26,7 +26,7 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n                 if Some(module) == ctx.module {\n                     if let Some(import) = res.import {\n                         if let Either::A(use_tree) = module.import_source(ctx.db, import) {\n-                            if use_tree.syntax().range().contains_inclusive(ctx.offset) {\n+                            if use_tree.syntax().text_range().contains_inclusive(ctx.offset) {\n                                 // for `use self::foo<|>`, don't suggest `foo` as a completion\n                                 tested_by!(dont_complete_current_use);\n                                 continue;"}, {"sha": "6d834f6cec4abe0900660d20e0fdc40b4f2a122b", "filename": "crates/ra_ide_api/src/completion/complete_postfix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -12,7 +12,7 @@ use ra_text_edit::TextEditBuilder;\n fn postfix_snippet(ctx: &CompletionContext, label: &str, detail: &str, snippet: &str) -> Builder {\n     let edit = {\n         let receiver_range =\n-            ctx.dot_receiver.as_ref().expect(\"no receiver available\").syntax().range();\n+            ctx.dot_receiver.as_ref().expect(\"no receiver available\").syntax().text_range();\n         let delete_range = TextRange::from_to(receiver_range.start(), ctx.source_range().end());\n         let mut builder = TextEditBuilder::default();\n         builder.replace(delete_range, snippet.to_string());"}, {"sha": "2f78d5409c6276b3325375eec0346c1d9d5f6514", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -78,7 +78,7 @@ impl<'a> CompletionContext<'a> {\n     pub(crate) fn source_range(&self) -> TextRange {\n         match self.token.kind() {\n             // workaroud when completion is triggered by trigger characters.\n-            IDENT => self.token.range(),\n+            IDENT => self.token.text_range(),\n             _ => TextRange::offset_len(self.offset, 0.into()),\n         }\n     }\n@@ -123,13 +123,17 @@ impl<'a> CompletionContext<'a> {\n     }\n \n     fn classify_name_ref(&mut self, original_file: SourceFile, name_ref: ast::NameRef) {\n-        let name_range = name_ref.syntax().range();\n+        let name_range = name_ref.syntax().text_range();\n         if name_ref.syntax().parent().and_then(ast::NamedField::cast).is_some() {\n             self.struct_lit_syntax = find_node_at_offset(original_file.syntax(), self.offset);\n         }\n \n-        let top_node =\n-            name_ref.syntax().ancestors().take_while(|it| it.range() == name_range).last().unwrap();\n+        let top_node = name_ref\n+            .syntax()\n+            .ancestors()\n+            .take_while(|it| it.text_range() == name_range)\n+            .last()\n+            .unwrap();\n \n         match top_node.parent().map(|it| it.kind()) {\n             Some(SOURCE_FILE) | Some(ITEM_LIST) => {\n@@ -180,23 +184,27 @@ impl<'a> CompletionContext<'a> {\n                     .ancestors()\n                     .find_map(|node| {\n                         if let Some(stmt) = ast::ExprStmt::cast(node.clone()) {\n-                            return Some(stmt.syntax().range() == name_ref.syntax().range());\n+                            return Some(\n+                                stmt.syntax().text_range() == name_ref.syntax().text_range(),\n+                            );\n                         }\n                         if let Some(block) = ast::Block::cast(node) {\n                             return Some(\n-                                block.expr().map(|e| e.syntax().range())\n-                                    == Some(name_ref.syntax().range()),\n+                                block.expr().map(|e| e.syntax().text_range())\n+                                    == Some(name_ref.syntax().text_range()),\n                             );\n                         }\n                         None\n                     })\n                     .unwrap_or(false);\n \n-                if let Some(off) = name_ref.syntax().range().start().checked_sub(2.into()) {\n+                if let Some(off) = name_ref.syntax().text_range().start().checked_sub(2.into()) {\n                     if let Some(if_expr) =\n                         find_node_at_offset::<ast::IfExpr>(original_file.syntax(), off)\n                     {\n-                        if if_expr.syntax().range().end() < name_ref.syntax().range().start() {\n+                        if if_expr.syntax().text_range().end()\n+                            < name_ref.syntax().text_range().start()\n+                        {\n                             self.after_if = true;\n                         }\n                     }\n@@ -208,14 +216,14 @@ impl<'a> CompletionContext<'a> {\n             // ident, so it should have the same range in the non-modified file\n             self.dot_receiver = field_expr\n                 .expr()\n-                .map(|e| e.syntax().range())\n+                .map(|e| e.syntax().text_range())\n                 .and_then(|r| find_node_with_range(original_file.syntax(), r));\n         }\n         if let Some(method_call_expr) = ast::MethodCallExpr::cast(parent) {\n             // As above\n             self.dot_receiver = method_call_expr\n                 .expr()\n-                .map(|e| e.syntax().range())\n+                .map(|e| e.syntax().text_range())\n                 .and_then(|r| find_node_with_range(original_file.syntax(), r));\n             self.is_call = true;\n         }\n@@ -229,6 +237,6 @@ fn find_node_with_range<N: AstNode>(syntax: &SyntaxNode, range: TextRange) -> Op\n fn is_node<N: AstNode>(node: &SyntaxNode) -> bool {\n     match node.ancestors().filter_map(N::cast).next() {\n         None => false,\n-        Some(n) => n.syntax().range() == node.range(),\n+        Some(n) => n.syntax().text_range() == node.text_range(),\n     }\n }"}, {"sha": "028dc3d4fab7b686039f048c4062494013ea5193", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -96,7 +96,7 @@ fn check_unnecessary_braces_in_use_statement(\n ) -> Option<()> {\n     let use_tree_list = ast::UseTreeList::cast(node.clone())?;\n     if let Some((single_use_tree,)) = use_tree_list.use_trees().collect_tuple() {\n-        let range = use_tree_list.syntax().range();\n+        let range = use_tree_list.syntax().text_range();\n         let edit =\n             text_edit_for_remove_unnecessary_braces_with_self_in_use_statement(&single_use_tree)\n                 .unwrap_or_else(|| {\n@@ -126,8 +126,8 @@ fn text_edit_for_remove_unnecessary_braces_with_self_in_use_statement(\n ) -> Option<TextEdit> {\n     let use_tree_list_node = single_use_tree.syntax().parent()?;\n     if single_use_tree.path()?.segment()?.syntax().first_child_or_token()?.kind() == T![self] {\n-        let start = use_tree_list_node.prev_sibling_or_token()?.range().start();\n-        let end = use_tree_list_node.range().end();\n+        let start = use_tree_list_node.prev_sibling_or_token()?.text_range().start();\n+        let end = use_tree_list_node.text_range().end();\n         let range = TextRange::from_to(start, end);\n         let mut edit_builder = TextEditBuilder::default();\n         edit_builder.delete(range);\n@@ -149,12 +149,12 @@ fn check_struct_shorthand_initialization(\n             let field_expr = expr.syntax().text().to_string();\n             if field_name == field_expr {\n                 let mut edit_builder = TextEditBuilder::default();\n-                edit_builder.delete(named_field.syntax().range());\n-                edit_builder.insert(named_field.syntax().range().start(), field_name);\n+                edit_builder.delete(named_field.syntax().text_range());\n+                edit_builder.insert(named_field.syntax().text_range().start(), field_name);\n                 let edit = edit_builder.finish();\n \n                 acc.push(Diagnostic {\n-                    range: named_field.syntax().range(),\n+                    range: named_field.syntax().text_range(),\n                     message: \"Shorthand struct initialization\".to_string(),\n                     severity: Severity::WeakWarning,\n                     fix: Some(SourceChange::source_file_edit("}, {"sha": "84fabdb9e1738304cbfe3c3f25fa1c2f063b2626", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -233,7 +233,7 @@ impl NavigationTarget {\n \n     pub(crate) fn from_macro_def(db: &RootDatabase, macro_call: hir::MacroDef) -> NavigationTarget {\n         let src = macro_call.source(db);\n-        log::debug!(\"nav target {}\", src.ast.syntax().debug_dump());\n+        log::debug!(\"nav target {:#?}\", src.ast.syntax());\n         NavigationTarget::from_named(\n             src.file_id.original_file(db),\n             &src.ast,\n@@ -275,7 +275,7 @@ impl NavigationTarget {\n     ) -> NavigationTarget {\n         //FIXME: use `_` instead of empty string\n         let name = node.name().map(|it| it.text().clone()).unwrap_or_default();\n-        let focus_range = node.name().map(|it| it.syntax().range());\n+        let focus_range = node.name().map(|it| it.syntax().text_range());\n         NavigationTarget::from_syntax(file_id, name, focus_range, node.syntax(), docs, description)\n     }\n \n@@ -291,7 +291,7 @@ impl NavigationTarget {\n             file_id,\n             name,\n             kind: node.kind(),\n-            full_range: node.range(),\n+            full_range: node.text_range(),\n             focus_range,\n             // ptr: Some(LocalSyntaxPtr::new(node)),\n             container_name: None,"}, {"sha": "2ba10b2ef349ca32091d6d029e1ee0b88cc056dc", "filename": "crates/ra_ide_api/src/display/structure.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -73,8 +73,8 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n         Some(StructureNode {\n             parent: None,\n             label: name.text().to_string(),\n-            navigation_range: name.syntax().range(),\n-            node_range: node.syntax().range(),\n+            navigation_range: name.syntax().text_range(),\n+            node_range: node.syntax().text_range(),\n             kind: node.syntax().kind(),\n             detail,\n             deprecated: node.attrs().filter_map(|x| x.as_named()).any(|x| x == \"deprecated\"),\n@@ -140,8 +140,8 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n             let node = StructureNode {\n                 parent: None,\n                 label,\n-                navigation_range: target_type.syntax().range(),\n-                node_range: im.syntax().range(),\n+                navigation_range: target_type.syntax().text_range(),\n+                node_range: im.syntax().text_range(),\n                 kind: im.syntax().kind(),\n                 detail: None,\n                 deprecated: false,"}, {"sha": "140820df6c81c0644e0a0a8f328d66a104937005", "filename": "crates/ra_ide_api/src/extend_selection.rs", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -42,19 +42,20 @@ fn try_extend_selection(root: &SyntaxNode, range: TextRange) -> Option<TextRange\n             TokenAtOffset::None => return None,\n             TokenAtOffset::Single(l) => {\n                 if string_kinds.contains(&l.kind()) {\n-                    extend_single_word_in_comment_or_string(&l, offset).unwrap_or_else(|| l.range())\n+                    extend_single_word_in_comment_or_string(&l, offset)\n+                        .unwrap_or_else(|| l.text_range())\n                 } else {\n-                    l.range()\n+                    l.text_range()\n                 }\n             }\n-            TokenAtOffset::Between(l, r) => pick_best(l, r).range(),\n+            TokenAtOffset::Between(l, r) => pick_best(l, r).text_range(),\n         };\n         return Some(leaf_range);\n     };\n     let node = match find_covering_element(root, range) {\n         SyntaxElement::Token(token) => {\n-            if token.range() != range {\n-                return Some(token.range());\n+            if token.text_range() != range {\n+                return Some(token.text_range());\n             }\n             if let Some(comment) = ast::Comment::cast(token.clone()) {\n                 if let Some(range) = extend_comments(comment) {\n@@ -65,28 +66,28 @@ fn try_extend_selection(root: &SyntaxNode, range: TextRange) -> Option<TextRange\n         }\n         SyntaxElement::Node(node) => node,\n     };\n-    if node.range() != range {\n-        return Some(node.range());\n+    if node.text_range() != range {\n+        return Some(node.text_range());\n     }\n \n     // Using shallowest node with same range allows us to traverse siblings.\n-    let node = node.ancestors().take_while(|n| n.range() == node.range()).last().unwrap();\n+    let node = node.ancestors().take_while(|n| n.text_range() == node.text_range()).last().unwrap();\n \n     if node.parent().map(|n| list_kinds.contains(&n.kind())) == Some(true) {\n         if let Some(range) = extend_list_item(&node) {\n             return Some(range);\n         }\n     }\n \n-    node.parent().map(|it| it.range())\n+    node.parent().map(|it| it.text_range())\n }\n \n fn extend_single_word_in_comment_or_string(\n     leaf: &SyntaxToken,\n     offset: TextUnit,\n ) -> Option<TextRange> {\n     let text: &str = leaf.text();\n-    let cursor_position: u32 = (offset - leaf.range().start()).into();\n+    let cursor_position: u32 = (offset - leaf.text_range().start()).into();\n \n     let (before, after) = text.split_at(cursor_position as usize);\n \n@@ -104,31 +105,31 @@ fn extend_single_word_in_comment_or_string(\n     if range.is_empty() {\n         None\n     } else {\n-        Some(range + leaf.range().start())\n+        Some(range + leaf.text_range().start())\n     }\n }\n \n fn extend_ws(root: &SyntaxNode, ws: SyntaxToken, offset: TextUnit) -> TextRange {\n     let ws_text = ws.text();\n-    let suffix = TextRange::from_to(offset, ws.range().end()) - ws.range().start();\n-    let prefix = TextRange::from_to(ws.range().start(), offset) - ws.range().start();\n+    let suffix = TextRange::from_to(offset, ws.text_range().end()) - ws.text_range().start();\n+    let prefix = TextRange::from_to(ws.text_range().start(), offset) - ws.text_range().start();\n     let ws_suffix = &ws_text.as_str()[suffix];\n     let ws_prefix = &ws_text.as_str()[prefix];\n     if ws_text.contains('\\n') && !ws_suffix.contains('\\n') {\n         if let Some(node) = ws.next_sibling_or_token() {\n             let start = match ws_prefix.rfind('\\n') {\n-                Some(idx) => ws.range().start() + TextUnit::from((idx + 1) as u32),\n-                None => node.range().start(),\n+                Some(idx) => ws.text_range().start() + TextUnit::from((idx + 1) as u32),\n+                None => node.text_range().start(),\n             };\n-            let end = if root.text().char_at(node.range().end()) == Some('\\n') {\n-                node.range().end() + TextUnit::of_char('\\n')\n+            let end = if root.text().char_at(node.text_range().end()) == Some('\\n') {\n+                node.text_range().end() + TextUnit::of_char('\\n')\n             } else {\n-                node.range().end()\n+                node.text_range().end()\n             };\n             return TextRange::from_to(start, end);\n         }\n     }\n-    ws.range()\n+    ws.text_range()\n }\n \n fn pick_best<'a>(l: SyntaxToken, r: SyntaxToken) -> SyntaxToken {\n@@ -161,7 +162,7 @@ fn extend_list_item(node: &SyntaxNode) -> Option<TextRange> {\n     }\n \n     if let Some(comma_node) = nearby_comma(node, Direction::Prev) {\n-        return Some(TextRange::from_to(comma_node.range().start(), node.range().end()));\n+        return Some(TextRange::from_to(comma_node.text_range().start(), node.text_range().end()));\n     }\n     if let Some(comma_node) = nearby_comma(node, Direction::Next) {\n         // Include any following whitespace when comma if after list item.\n@@ -171,7 +172,7 @@ fn extend_list_item(node: &SyntaxNode) -> Option<TextRange> {\n             .filter(|node| is_single_line_ws(node))\n             .unwrap_or(comma_node);\n \n-        return Some(TextRange::from_to(node.range().start(), final_node.range().end()));\n+        return Some(TextRange::from_to(node.text_range().start(), final_node.text_range().end()));\n     }\n \n     None\n@@ -181,7 +182,10 @@ fn extend_comments(comment: ast::Comment) -> Option<TextRange> {\n     let prev = adj_comments(&comment, Direction::Prev);\n     let next = adj_comments(&comment, Direction::Next);\n     if prev != next {\n-        Some(TextRange::from_to(prev.syntax().range().start(), next.syntax().range().end()))\n+        Some(TextRange::from_to(\n+            prev.syntax().text_range().start(),\n+            next.syntax().text_range().end(),\n+        ))\n     } else {\n         None\n     }"}, {"sha": "9699000dbb1845055a999769b89b1dafcda4e73b", "filename": "crates/ra_ide_api/src/folding_ranges.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ffolding_ranges.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -35,7 +35,7 @@ pub(crate) fn folding_ranges(file: &SourceFile) -> Vec<Fold> {\n                 SyntaxElement::Token(token) => token.text().contains('\\n'),\n             };\n             if is_multiline {\n-                res.push(Fold { range: element.range(), kind });\n+                res.push(Fold { range: element.text_range(), kind });\n                 continue;\n             }\n         }\n@@ -132,7 +132,7 @@ fn contiguous_range_for_group_unless(\n     }\n \n     if first != &last {\n-        Some(TextRange::from_to(first.range().start(), last.range().end()))\n+        Some(TextRange::from_to(first.text_range().start(), last.text_range().end()))\n     } else {\n         // The group consists of only one element, therefore it cannot be folded\n         None\n@@ -178,7 +178,10 @@ fn contiguous_range_for_comment(\n     }\n \n     if first != last {\n-        Some(TextRange::from_to(first.syntax().range().start(), last.syntax().range().end()))\n+        Some(TextRange::from_to(\n+            first.syntax().text_range().start(),\n+            last.syntax().text_range().end(),\n+        ))\n     } else {\n         // The group consists of only one element, therefore it cannot be folded\n         None"}, {"sha": "ddd55a9c1581fc4b2a150c5dbb55ee9cc4551bc9", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -23,11 +23,11 @@ pub(crate) fn goto_definition(\n     let syntax = parse.tree().syntax().clone();\n     if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(&syntax, position.offset) {\n         let navs = reference_definition(db, position.file_id, &name_ref).to_vec();\n-        return Some(RangeInfo::new(name_ref.syntax().range(), navs.to_vec()));\n+        return Some(RangeInfo::new(name_ref.syntax().text_range(), navs.to_vec()));\n     }\n     if let Some(name) = find_node_at_offset::<ast::Name>(&syntax, position.offset) {\n         let navs = name_definition(db, position.file_id, &name)?;\n-        return Some(RangeInfo::new(name.syntax().range(), navs));\n+        return Some(RangeInfo::new(name.syntax().text_range(), navs));\n     }\n     None\n }"}, {"sha": "007259d9ea25933dbf7be84a52f5dc0588c8e2e5", "filename": "crates/ra_ide_api/src/goto_type_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -32,7 +32,7 @@ pub(crate) fn goto_type_definition(\n     let adt_def = analyzer.autoderef(db, ty).find_map(|ty| ty.as_adt().map(|adt| adt.0))?;\n \n     let nav = NavigationTarget::from_adt_def(db, adt_def);\n-    Some(RangeInfo::new(node.range(), vec![nav]))\n+    Some(RangeInfo::new(node.text_range(), vec![nav]))\n }\n \n #[cfg(test)]"}, {"sha": "2a5ac782152b6f00c72e5137fb06d5962b6543af", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -172,7 +172,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n         }\n \n         if !res.is_empty() {\n-            range = Some(name_ref.syntax().range())\n+            range = Some(name_ref.syntax().text_range())\n         }\n     } else if let Some(name) = find_node_at_offset::<ast::Name>(file.syntax(), position.offset) {\n         if let Some(parent) = name.syntax().parent() {\n@@ -210,17 +210,17 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n         }\n \n         if !res.is_empty() && range.is_none() {\n-            range = Some(name.syntax().range());\n+            range = Some(name.syntax().text_range());\n         }\n     }\n \n     if range.is_none() {\n         let node = ancestors_at_offset(file.syntax(), position.offset).find(|n| {\n             ast::Expr::cast(n.clone()).is_some() || ast::Pat::cast(n.clone()).is_some()\n         })?;\n-        let frange = FileRange { file_id: position.file_id, range: node.range() };\n+        let frange = FileRange { file_id: position.file_id, range: node.text_range() };\n         res.extend(type_of(db, frange).map(rust_code_markup));\n-        range = Some(node.range());\n+        range = Some(node.text_range());\n     }\n \n     let range = range?;\n@@ -246,7 +246,7 @@ pub(crate) fn type_of(db: &RootDatabase, frange: FileRange) -> Option<String> {\n     // if we picked identifier, expand to pattern/expression\n     let node = leaf_node\n         .ancestors()\n-        .take_while(|it| it.range() == leaf_node.range())\n+        .take_while(|it| it.text_range() == leaf_node.text_range())\n         .find(|it| ast::Expr::cast(it.clone()).is_some() || ast::Pat::cast(it.clone()).is_some())?;\n     let analyzer = hir::SourceAnalyzer::new(db, frange.file_id, &node, None);\n     let ty = if let Some(ty) = ast::Expr::cast(node.clone()).and_then(|e| analyzer.type_of(db, &e))"}, {"sha": "f5b6ffd6162b207461b9555ef4b20a091c8dc2f2", "filename": "crates/ra_ide_api/src/impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -15,12 +15,12 @@ pub(crate) fn goto_implementation(\n \n     if let Some(nominal_def) = find_node_at_offset::<ast::NominalDef>(&syntax, position.offset) {\n         return Some(RangeInfo::new(\n-            nominal_def.syntax().range(),\n+            nominal_def.syntax().text_range(),\n             impls_for_def(db, &nominal_def, module)?,\n         ));\n     } else if let Some(trait_def) = find_node_at_offset::<ast::TraitDef>(&syntax, position.offset) {\n         return Some(RangeInfo::new(\n-            trait_def.syntax().range(),\n+            trait_def.syntax().text_range(),\n             impls_for_trait(db, &trait_def, module)?,\n         ));\n     }"}, {"sha": "fa998ebe1e9211f855e16dafd1d059b1dc5e5aa5", "filename": "crates/ra_ide_api/src/join_lines.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -28,14 +28,14 @@ pub fn join_lines(file: &SourceFile, range: TextRange) -> TextEdit {\n     };\n     let mut edit = TextEditBuilder::default();\n     for token in node.descendants_with_tokens().filter_map(|it| it.into_token()) {\n-        let range = match range.intersection(&token.range()) {\n+        let range = match range.intersection(&token.text_range()) {\n             Some(range) => range,\n             None => continue,\n-        } - token.range().start();\n+        } - token.text_range().start();\n         let text = token.text();\n         for (pos, _) in text[range].bytes().enumerate().filter(|&(_, b)| b == b'\\n') {\n             let pos: TextUnit = (pos as u32).into();\n-            let off = token.range().start() + range.start() + pos;\n+            let off = token.text_range().start() + range.start() + pos;\n             if !edit.invalidates_offset(off) {\n                 remove_newline(&mut edit, &token, off);\n             }\n@@ -49,7 +49,7 @@ fn remove_newline(edit: &mut TextEditBuilder, token: &SyntaxToken, offset: TextU\n     if token.kind() != WHITESPACE || token.text().bytes().filter(|&b| b == b'\\n').count() != 1 {\n         // The node is either the first or the last in the file\n         let suff = &token.text()[TextRange::from_to(\n-            offset - token.range().start() + TextUnit::of_char('\\n'),\n+            offset - token.text_range().start() + TextUnit::of_char('\\n'),\n             TextUnit::of_str(token.text()),\n         )];\n         let spaces = suff.bytes().take_while(|&b| b == b' ').count();\n@@ -86,7 +86,7 @@ fn remove_newline(edit: &mut TextEditBuilder, token: &SyntaxToken, offset: TextU\n     let next = token.next_sibling_or_token().unwrap();\n     if is_trailing_comma(prev.kind(), next.kind()) {\n         // Removes: trailing comma, newline (incl. surrounding whitespace)\n-        edit.delete(TextRange::from_to(prev.range().start(), token.range().end()));\n+        edit.delete(TextRange::from_to(prev.text_range().start(), token.text_range().end()));\n     } else if prev.kind() == T![,] && next.kind() == T!['}'] {\n         // Removes: comma, newline (incl. surrounding whitespace)\n         let space = if let Some(left) = prev.prev_sibling_or_token() {\n@@ -95,7 +95,7 @@ fn remove_newline(edit: &mut TextEditBuilder, token: &SyntaxToken, offset: TextU\n             \" \"\n         };\n         edit.replace(\n-            TextRange::from_to(prev.range().start(), token.range().end()),\n+            TextRange::from_to(prev.text_range().start(), token.text_range().end()),\n             space.to_string(),\n         );\n     } else if let (Some(_), Some(next)) = (\n@@ -104,12 +104,12 @@ fn remove_newline(edit: &mut TextEditBuilder, token: &SyntaxToken, offset: TextU\n     ) {\n         // Removes: newline (incl. surrounding whitespace), start of the next comment\n         edit.delete(TextRange::from_to(\n-            token.range().start(),\n-            next.syntax().range().start() + TextUnit::of_str(next.prefix()),\n+            token.text_range().start(),\n+            next.syntax().text_range().start() + TextUnit::of_str(next.prefix()),\n         ));\n     } else {\n         // Remove newline but add a computed amount of whitespace characters\n-        edit.replace(token.range(), compute_ws(prev.kind(), next.kind()).to_string());\n+        edit.replace(token.text_range(), compute_ws(prev.kind(), next.kind()).to_string());\n     }\n }\n \n@@ -125,7 +125,7 @@ fn join_single_expr_block(edit: &mut TextEditBuilder, token: &SyntaxToken) -> Op\n     let block_expr = ast::BlockExpr::cast(block.syntax().parent()?)?;\n     let expr = extract_trivial_expression(&block)?;\n \n-    let block_range = block_expr.syntax().range();\n+    let block_range = block_expr.syntax().text_range();\n     let mut buf = expr.syntax().text().to_string();\n \n     // Match block needs to have a comma after the block\n@@ -143,7 +143,7 @@ fn join_single_expr_block(edit: &mut TextEditBuilder, token: &SyntaxToken) -> Op\n fn join_single_use_tree(edit: &mut TextEditBuilder, token: &SyntaxToken) -> Option<()> {\n     let use_tree_list = ast::UseTreeList::cast(token.parent())?;\n     let (tree,) = use_tree_list.use_trees().collect_tuple()?;\n-    edit.replace(use_tree_list.syntax().range(), tree.syntax().text().to_string());\n+    edit.replace(use_tree_list.syntax().text_range(), tree.syntax().text().to_string());\n     Some(())\n }\n "}, {"sha": "1e2fac8485abb663f9bc7c5b0842fd4864909788", "filename": "crates/ra_ide_api/src/matching_brace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fmatching_brace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fmatching_brace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fmatching_brace.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -12,7 +12,7 @@ pub fn matching_brace(file: &SourceFile, offset: TextUnit) -> Option<TextUnit> {\n     let parent = brace_node.parent();\n     let matching_kind = BRACES[brace_idx ^ 1];\n     let matching_node = parent.children_with_tokens().find(|node| node.kind() == matching_kind)?;\n-    Some(matching_node.range().start())\n+    Some(matching_node.text_range().start())\n }\n \n #[cfg(test)]"}, {"sha": "5c74d3e363e068a56ac5dc0967692331b339b892", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -166,7 +166,7 @@ fn rename_mod(\n         file_id: position.file_id,\n         edit: {\n             let mut builder = ra_text_edit::TextEditBuilder::default();\n-            builder.replace(ast_name.syntax().range(), new_name.into());\n+            builder.replace(ast_name.syntax().text_range(), new_name.into());\n             builder.finish()\n         },\n     };"}, {"sha": "07412a9efd9998ff4fec9f98c7176a8bb1df79ca", "filename": "crates/ra_ide_api/src/runnables.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -47,7 +47,7 @@ fn runnable_fn(fn_def: ast::FnDef) -> Option<Runnable> {\n     } else {\n         return None;\n     };\n-    Some(Runnable { range: fn_def.syntax().range(), kind })\n+    Some(Runnable { range: fn_def.syntax().text_range(), kind })\n }\n \n fn runnable_mod(db: &RootDatabase, file_id: FileId, module: ast::Module) -> Option<Runnable> {\n@@ -62,7 +62,7 @@ fn runnable_mod(db: &RootDatabase, file_id: FileId, module: ast::Module) -> Opti\n     if !has_test_function {\n         return None;\n     }\n-    let range = module.syntax().range();\n+    let range = module.syntax().text_range();\n     let module = hir::source_binder::module_from_child_node(db, file_id, module.syntax())?;\n \n     let path = module.path_to_root(db).into_iter().rev().filter_map(|it| it.name(db)).join(\"::\");"}, {"sha": "d4afddab4a818896561c3f1a88f26bee6cc3c485", "filename": "crates/ra_ide_api/src/symbol_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -271,7 +271,7 @@ fn source_file_to_file_symbols(source_file: &SourceFile, file_id: FileId) -> Vec\n fn to_symbol(node: &SyntaxNode) -> Option<(SmolStr, SyntaxNodePtr, TextRange)> {\n     fn decl<N: NameOwner>(node: N) -> Option<(SmolStr, SyntaxNodePtr, TextRange)> {\n         let name = node.name()?;\n-        let name_range = name.syntax().range();\n+        let name_range = name.syntax().text_range();\n         let name = name.text().clone();\n         let ptr = SyntaxNodePtr::new(node.syntax());\n "}, {"sha": "878a94f061fb27d46cfc5a396b7445a3de70846e", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -189,11 +189,11 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                         if let Some(segment) = path.segment() {\n                             if let Some(name_ref) = segment.name_ref() {\n                                 highlighted.insert(name_ref.syntax().clone().into());\n-                                let range_start = name_ref.syntax().range().start();\n-                                let mut range_end = name_ref.syntax().range().end();\n+                                let range_start = name_ref.syntax().text_range().start();\n+                                let mut range_end = name_ref.syntax().text_range().end();\n                                 for sibling in path.syntax().siblings_with_tokens(Direction::Next) {\n                                     match sibling.kind() {\n-                                        T![!] | IDENT => range_end = sibling.range().end(),\n+                                        T![!] | IDENT => range_end = sibling.text_range().end(),\n                                         _ => (),\n                                     }\n                                 }\n@@ -209,7 +209,7 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                 continue;\n             }\n         };\n-        res.push(HighlightedRange { range: node.range(), tag, binding_hash })\n+        res.push(HighlightedRange { range: node.text_range(), tag, binding_hash })\n     }\n     res\n }\n@@ -239,9 +239,9 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n     buf.push_str(\"<pre><code>\");\n     let tokens = parse.tree().syntax().descendants_with_tokens().filter_map(|it| it.into_token());\n     for token in tokens {\n-        could_intersect.retain(|it| token.range().start() <= it.range.end());\n+        could_intersect.retain(|it| token.text_range().start() <= it.range.end());\n         while let Some(r) = ranges.get(frontier) {\n-            if r.range.start() <= token.range().end() {\n+            if r.range.start() <= token.text_range().end() {\n                 could_intersect.push(r);\n                 frontier += 1;\n             } else {\n@@ -251,7 +251,7 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n         let text = html_escape(&token.text());\n         let ranges = could_intersect\n             .iter()\n-            .filter(|it| token.range().is_subrange(&it.range))\n+            .filter(|it| token.text_range().is_subrange(&it.range))\n             .collect::<Vec<_>>();\n         if ranges.is_empty() {\n             buf.push_str(&text);"}, {"sha": "76c50f6d6ca0f7f720657fe70d93734560810325", "filename": "crates/ra_ide_api/src/syntax_tree.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_tree.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -25,9 +25,9 @@ pub(crate) fn syntax_tree(\n             }\r\n         };\r\n \r\n-        node.debug_dump()\r\n+        format!(\"{:#?}\", node)\r\n     } else {\r\n-        parse.tree().syntax().debug_dump()\r\n+        format!(\"{:#?}\", parse.tree().syntax())\r\n     }\r\n }\r\n \r\n@@ -45,7 +45,7 @@ fn syntax_tree_for_string(token: &SyntaxToken, text_range: TextRange) -> Option<\n \r\n fn syntax_tree_for_token(node: &SyntaxToken, text_range: TextRange) -> Option<String> {\r\n     // Range of the full node\r\n-    let node_range = node.range();\r\n+    let node_range = node.text_range();\r\n     let text = node.text().to_string();\r\n \r\n     // We start at some point inside the node\r\n@@ -85,7 +85,7 @@ fn syntax_tree_for_token(node: &SyntaxToken, text_range: TextRange) -> Option<St\n     // If the \"file\" parsed without errors,\r\n     // return its syntax\r\n     if parsed.errors().is_empty() {\r\n-        return Some(parsed.tree().syntax().debug_dump());\r\n+        return Some(format!(\"{:#?}\", parsed.tree().syntax()));\r\n     }\r\n \r\n     None\r"}, {"sha": "1747a529ecb20b9c88c90c1ac6ba5baa467a41ed", "filename": "crates/ra_ide_api/src/typing.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Ftyping.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -24,7 +24,7 @@ pub(crate) fn on_enter(db: &RootDatabase, position: FilePosition) -> Option<Sour\n \n     let prefix = comment.prefix();\n     if position.offset\n-        < comment.syntax().range().start() + TextUnit::of_str(prefix) + TextUnit::from(1)\n+        < comment.syntax().text_range().start() + TextUnit::of_str(prefix) + TextUnit::from(1)\n     {\n         return None;\n     }\n@@ -45,7 +45,7 @@ pub(crate) fn on_enter(db: &RootDatabase, position: FilePosition) -> Option<Sour\n }\n \n fn node_indent(file: &SourceFile, token: &SyntaxToken) -> Option<SmolStr> {\n-    let ws = match find_token_at_offset(file.syntax(), token.range().start()) {\n+    let ws = match find_token_at_offset(file.syntax(), token.text_range().start()) {\n         TokenAtOffset::Between(l, r) => {\n             assert!(r == *token);\n             l\n@@ -71,7 +71,7 @@ pub fn on_eq_typed(file: &SourceFile, eq_offset: TextUnit) -> Option<TextEdit> {\n         return None;\n     }\n     if let Some(expr) = let_stmt.initializer() {\n-        let expr_range = expr.syntax().range();\n+        let expr_range = expr.syntax().text_range();\n         if expr_range.contains(eq_offset) && eq_offset != expr_range.start() {\n             return None;\n         }\n@@ -81,7 +81,7 @@ pub fn on_eq_typed(file: &SourceFile, eq_offset: TextUnit) -> Option<TextEdit> {\n     } else {\n         return None;\n     }\n-    let offset = let_stmt.syntax().range().end();\n+    let offset = let_stmt.syntax().text_range().end();\n     let mut edit = TextEditBuilder::default();\n     edit.insert(offset, \";\".to_string());\n     Some(edit.finish())"}, {"sha": "7ff0fc47205e7a41f2f68e58125c1dd4c6a6b0e6", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -19,15 +19,15 @@ pub struct TokenMap {\n pub fn ast_to_token_tree(ast: &ast::TokenTree) -> Option<(tt::Subtree, TokenMap)> {\n     let mut token_map = TokenMap::default();\n     let node = ast.syntax();\n-    let tt = convert_tt(&mut token_map, node.range().start(), node)?;\n+    let tt = convert_tt(&mut token_map, node.text_range().start(), node)?;\n     Some((tt, token_map))\n }\n \n /// Convert the syntax node to a `TokenTree` (what macro\n /// will consume).\n pub fn syntax_node_to_token_tree(node: &SyntaxNode) -> Option<(tt::Subtree, TokenMap)> {\n     let mut token_map = TokenMap::default();\n-    let tt = convert_tt(&mut token_map, node.range().start(), node)?;\n+    let tt = convert_tt(&mut token_map, node.text_range().start(), node)?;\n     Some((tt, token_map))\n }\n \n@@ -229,7 +229,7 @@ fn convert_tt(\n                             || token.kind() == IDENT\n                             || token.kind() == LIFETIME\n                         {\n-                            let relative_range = token.range() - global_offset;\n+                            let relative_range = token.text_range() - global_offset;\n                             let id = token_map.alloc(relative_range);\n                             let text = token.text().clone();\n                             tt::Leaf::from(tt::Ident { text, id }).into()"}, {"sha": "9151b6ecdf03fc13703610e086fe62a37ea45d10", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -412,7 +412,7 @@ fn test_expand_to_item_list() {\n     let expansion = expand(&rules, \"structs!(Foo, Bar);\");\n     let tree = token_tree_to_macro_items(&expansion).unwrap().tree();\n     assert_eq!(\n-        tree.syntax().debug_dump().trim(),\n+        format!(\"{:#?}\", tree.syntax()).trim(),\n         r#\"\n MACRO_ITEMS@[0; 40)\n   STRUCT_DEF@[0; 20)\n@@ -531,7 +531,7 @@ fn test_tt_to_stmts() {\n     let stmts = token_tree_to_macro_stmts(&expanded).unwrap().tree();\n \n     assert_eq!(\n-        stmts.syntax().debug_dump().trim(),\n+        format!(\"{:#?}\", stmts.syntax()).trim(),\n         r#\"MACRO_STMTS@[0; 15)\n   LET_STMT@[0; 7)\n     LET_KW@[0; 3) \"let\"\n@@ -669,7 +669,7 @@ fn test_expr_order() {\n     );\n \n     assert_eq!(\n-        expand_to_items(&rules, \"foo! { 1 + 1  }\").syntax().debug_dump().trim(),\n+        format!(\"{:#?}\", expand_to_items(&rules, \"foo! { 1 + 1  }\").syntax()).trim(),\n         r#\"MACRO_ITEMS@[0; 15)\n   FN_DEF@[0; 15)\n     FN_KW@[0; 2) \"fn\"\n@@ -1013,7 +1013,7 @@ fn test_vec() {\n     );\n \n     assert_eq!(\n-        expand_to_expr(&rules, r#\"vec![1u32,2];\"#).syntax().debug_dump().trim(),\n+        format!(\"{:#?}\", expand_to_expr(&rules, r#\"vec![1u32,2];\"#).syntax()).trim(),\n         r#\"BLOCK_EXPR@[0; 45)\n   BLOCK@[0; 45)\n     L_CURLY@[0; 1) \"{\""}, {"sha": "f47e11e66dbb8f23646631109d97029d9339ea50", "filename": "crates/ra_syntax/src/algo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Falgo.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -25,7 +25,7 @@ pub fn ancestors_at_offset(\n ) -> impl Iterator<Item = SyntaxNode> {\n     find_token_at_offset(node, offset)\n         .map(|token| token.parent().ancestors())\n-        .kmerge_by(|node1, node2| node1.range().len() < node2.range().len())\n+        .kmerge_by(|node1, node2| node1.text_range().len() < node2.text_range().len())\n }\n \n /// Finds a node of specific Ast type at offset. Note that this is slightly"}, {"sha": "698a624ecce49cfc979212f95503892bebd1138a", "filename": "crates/ra_syntax/src/fuzz.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -51,10 +51,10 @@ impl CheckReparse {\n         for (a, b) in\n             new_parse.tree().syntax().descendants().zip(full_reparse.tree().syntax().descendants())\n         {\n-            if (a.kind(), a.range()) != (b.kind(), b.range()) {\n-                eprint!(\"original:\\n{}\", parse.tree().syntax().debug_dump());\n-                eprint!(\"reparsed:\\n{}\", new_parse.tree().syntax().debug_dump());\n-                eprint!(\"full reparse:\\n{}\", full_reparse.tree().syntax().debug_dump());\n+            if (a.kind(), a.text_range()) != (b.kind(), b.text_range()) {\n+                eprint!(\"original:\\n{:#?}\", parse.tree().syntax());\n+                eprint!(\"reparsed:\\n{:#?}\", new_parse.tree().syntax());\n+                eprint!(\"full reparse:\\n{:#?}\", full_reparse.tree().syntax());\n                 assert_eq!(\n                     format!(\"{:?}\", a),\n                     format!(\"{:?}\", b),"}, {"sha": "8af04c1362386455af8654cde8d53ab1cd5ef8d7", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -114,7 +114,7 @@ impl Parse<SyntaxNode> {\n \n impl Parse<SourceFile> {\n     pub fn debug_dump(&self) -> String {\n-        let mut buf = self.tree().syntax().debug_dump();\n+        let mut buf = format!(\"{:#?}\", self.tree().syntax());\n         for err in self.errors.iter() {\n             writeln!(buf, \"error {:?}: {}\", err.location(), err.kind()).unwrap();\n         }\n@@ -234,7 +234,7 @@ fn api_walkthrough() {\n     assert_eq!(expr_syntax.kind(), SyntaxKind::BIN_EXPR);\n \n     // And text range:\n-    assert_eq!(expr_syntax.range(), TextRange::from_to(32.into(), 37.into()));\n+    assert_eq!(expr_syntax.text_range(), TextRange::from_to(32.into(), 37.into()));\n \n     // You can get node's text as a `SyntaxText` object, which will traverse the\n     // tree collecting token's text:"}, {"sha": "2f388bdfe6e687d8900f986d4788ec0c033290d1", "filename": "crates/ra_syntax/src/parsing/reparsing.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -46,7 +46,8 @@ fn reparse_token<'node>(\n         WHITESPACE | COMMENT | IDENT | STRING | RAW_STRING => {\n             if token.kind() == WHITESPACE || token.kind() == COMMENT {\n                 // removing a new line may extends previous token\n-                if token.text().to_string()[edit.delete - token.range().start()].contains('\\n') {\n+                if token.text().to_string()[edit.delete - token.text_range().start()].contains('\\n')\n+                {\n                     return None;\n                 }\n             }\n@@ -62,15 +63,15 @@ fn reparse_token<'node>(\n                 return None;\n             }\n \n-            if let Some(next_char) = root.text().char_at(token.range().end()) {\n+            if let Some(next_char) = root.text().char_at(token.text_range().end()) {\n                 let tokens_with_next_char = tokenize(&format!(\"{}{}\", text, next_char));\n                 if tokens_with_next_char.len() == 1 {\n                     return None;\n                 }\n             }\n \n             let new_token = GreenToken::new(rowan::SyntaxKind(token.kind().into()), text.into());\n-            Some((token.replace_with(new_token), token.range()))\n+            Some((token.replace_with(new_token), token.text_range()))\n         }\n         _ => None,\n     }\n@@ -90,11 +91,12 @@ fn reparse_block<'node>(\n     let mut tree_sink = TextTreeSink::new(&text, &tokens);\n     reparser.parse(&mut token_source, &mut tree_sink);\n     let (green, new_errors) = tree_sink.finish();\n-    Some((node.replace_with(green), new_errors, node.range()))\n+    Some((node.replace_with(green), new_errors, node.text_range()))\n }\n \n fn get_text_after_edit(element: SyntaxElement, edit: &AtomTextEdit) -> String {\n-    let edit = AtomTextEdit::replace(edit.delete - element.range().start(), edit.insert.clone());\n+    let edit =\n+        AtomTextEdit::replace(edit.delete - element.text_range().start(), edit.insert.clone());\n     let text = match element {\n         SyntaxElement::Token(token) => token.text().to_string(),\n         SyntaxElement::Node(node) => node.text().to_string(),\n@@ -188,8 +190,8 @@ mod tests {\n         };\n \n         assert_eq_text!(\n-            &fully_reparsed.tree().syntax().debug_dump(),\n-            &incrementally_reparsed.tree().syntax().debug_dump(),\n+            &format!(\"{:#?}\", fully_reparsed.tree().syntax()),\n+            &format!(\"{:#?}\", incrementally_reparsed.tree().syntax()),\n         );\n     }\n "}, {"sha": "8665c8976a5d47806a3a186c3b17a401480048a1", "filename": "crates/ra_syntax/src/ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fptr.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -12,15 +12,15 @@ pub struct SyntaxNodePtr {\n \n impl SyntaxNodePtr {\n     pub fn new(node: &SyntaxNode) -> SyntaxNodePtr {\n-        SyntaxNodePtr { range: node.range(), kind: node.kind() }\n+        SyntaxNodePtr { range: node.text_range(), kind: node.kind() }\n     }\n \n     pub fn to_node(self, root: &SyntaxNode) -> SyntaxNode {\n         assert!(root.parent().is_none());\n         successors(Some(root.clone()), |node| {\n-            node.children().find(|it| self.range.is_subrange(&it.range()))\n+            node.children().find(|it| self.range.is_subrange(&it.text_range()))\n         })\n-        .find(|it| it.range() == self.range && it.kind() == self.kind)\n+        .find(|it| it.text_range() == self.range && it.kind() == self.kind)\n         .unwrap_or_else(|| panic!(\"can't resolve local ptr to SyntaxNode: {:?}\", self))\n     }\n "}, {"sha": "c42045d77ac0d1d291119c735dae0382b05849b0", "filename": "crates/ra_syntax/src/syntax_node.rs", "status": "modified", "additions": 30, "deletions": 38, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -6,11 +6,7 @@\n //! The *real* implementation is in the (language-agnostic) `rowan` crate, this\n //! modules just wraps its API.\n \n-use std::{\n-    fmt::{self, Write},\n-    iter::successors,\n-    ops::RangeInclusive,\n-};\n+use std::{fmt, iter::successors, ops::RangeInclusive};\n \n use ra_parser::ParseError;\n use rowan::GreenNodeBuilder;\n@@ -36,8 +32,29 @@ pub enum InsertPosition<T> {\n pub struct SyntaxNode(pub(crate) rowan::cursor::SyntaxNode);\n \n impl fmt::Debug for SyntaxNode {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        write!(fmt, \"{:?}@{:?}\", self.kind(), self.range())\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        if f.alternate() {\n+            let mut level = 0;\n+            for event in self.preorder_with_tokens() {\n+                match event {\n+                    WalkEvent::Enter(element) => {\n+                        for _ in 0..level {\n+                            write!(f, \"  \")?;\n+                        }\n+                        match element {\n+                            SyntaxElement::Node(node) => writeln!(f, \"{:?}\", node)?,\n+                            SyntaxElement::Token(token) => writeln!(f, \"{:?}\", token)?,\n+                        }\n+                        level += 1;\n+                    }\n+                    WalkEvent::Leave(_) => level -= 1,\n+                }\n+            }\n+            assert_eq!(level, 0);\n+            Ok(())\n+        } else {\n+            write!(f, \"{:?}@{:?}\", self.kind(), self.text_range())\n+        }\n     }\n }\n \n@@ -63,7 +80,7 @@ impl SyntaxNode {\n         self.0.kind().0.into()\n     }\n \n-    pub fn range(&self) -> TextRange {\n+    pub fn text_range(&self) -> TextRange {\n         self.0.text_range()\n     }\n \n@@ -173,31 +190,6 @@ impl SyntaxNode {\n         })\n     }\n \n-    pub fn debug_dump(&self) -> String {\n-        let mut level = 0;\n-        let mut buf = String::new();\n-\n-        for event in self.preorder_with_tokens() {\n-            match event {\n-                WalkEvent::Enter(element) => {\n-                    for _ in 0..level {\n-                        buf.push_str(\"  \");\n-                    }\n-                    match element {\n-                        SyntaxElement::Node(node) => writeln!(buf, \"{:?}\", node).unwrap(),\n-                        SyntaxElement::Token(token) => writeln!(buf, \"{:?}\", token).unwrap(),\n-                    }\n-                    level += 1;\n-                }\n-                WalkEvent::Leave(_) => level -= 1,\n-            }\n-        }\n-\n-        assert_eq!(level, 0);\n-\n-        buf\n-    }\n-\n     pub(crate) fn replace_with(&self, replacement: GreenNode) -> GreenNode {\n         self.0.replace_with(replacement)\n     }\n@@ -299,7 +291,7 @@ pub struct SyntaxToken(pub(crate) rowan::cursor::SyntaxToken);\n \n impl fmt::Debug for SyntaxToken {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        write!(fmt, \"{:?}@{:?}\", self.kind(), self.range())?;\n+        write!(fmt, \"{:?}@{:?}\", self.kind(), self.text_range())?;\n         if self.text().len() < 25 {\n             return write!(fmt, \" {:?}\", self.text());\n         }\n@@ -329,7 +321,7 @@ impl SyntaxToken {\n         self.0.text()\n     }\n \n-    pub fn range(&self) -> TextRange {\n+    pub fn text_range(&self) -> TextRange {\n         self.0.text_range()\n     }\n \n@@ -461,10 +453,10 @@ impl SyntaxElement {\n         .ancestors()\n     }\n \n-    pub fn range(&self) -> TextRange {\n+    pub fn text_range(&self) -> TextRange {\n         match self {\n-            SyntaxElement::Node(it) => it.range(),\n-            SyntaxElement::Token(it) => it.range(),\n+            SyntaxElement::Node(it) => it.text_range(),\n+            SyntaxElement::Token(it) => it.text_range(),\n         }\n     }\n "}, {"sha": "f8ddff48e9aef68394ac8d8f7a44b8815dbf2b51", "filename": "crates/ra_syntax/src/syntax_text.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_syntax%2Fsrc%2Fsyntax_text.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_syntax%2Fsrc%2Fsyntax_text.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_text.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -13,7 +13,7 @@ pub struct SyntaxText {\n \n impl SyntaxText {\n     pub(crate) fn new(node: SyntaxNode) -> SyntaxText {\n-        let range = node.range();\n+        let range = node.text_range();\n         SyntaxText { node, range }\n     }\n \n@@ -24,14 +24,14 @@ impl SyntaxText {\n         self.node.descendants_with_tokens().try_fold(init, move |acc, element| {\n             let res = match element {\n                 SyntaxElement::Token(token) => {\n-                    let range = match self.range.intersection(&token.range()) {\n+                    let range = match self.range.intersection(&token.text_range()) {\n                         None => return Ok(acc),\n                         Some(it) => it,\n                     };\n-                    let slice = if range == token.range() {\n+                    let slice = if range == token.text_range() {\n                         token.text()\n                     } else {\n-                        let range = range - token.range().start();\n+                        let range = range - token.text_range().start();\n                         &token.text()[range]\n                     };\n                     f(acc, slice)?"}, {"sha": "19bdafef2277ca29b1155e032281faa0ac5904f1", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -33,7 +33,7 @@ fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n             if let Some(end) = text.rfind('\\'') {\n                 if let Some(without_quotes) = text.get(2..end) {\n                     if let Err((off, err)) = unescape::unescape_byte(without_quotes) {\n-                        let off = token.range().start() + TextUnit::from_usize(off + 2);\n+                        let off = token.text_range().start() + TextUnit::from_usize(off + 2);\n                         acc.push(SyntaxError::new(err.into(), off))\n                     }\n                 }\n@@ -43,7 +43,7 @@ fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n             if let Some(end) = text.rfind('\\'') {\n                 if let Some(without_quotes) = text.get(1..end) {\n                     if let Err((off, err)) = unescape::unescape_char(without_quotes) {\n-                        let off = token.range().start() + TextUnit::from_usize(off + 1);\n+                        let off = token.text_range().start() + TextUnit::from_usize(off + 1);\n                         acc.push(SyntaxError::new(err.into(), off))\n                     }\n                 }\n@@ -55,7 +55,7 @@ fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n                     unescape::unescape_byte_str(without_quotes, &mut |range, char| {\n                         if let Err(err) = char {\n                             let off = range.start;\n-                            let off = token.range().start() + TextUnit::from_usize(off + 2);\n+                            let off = token.text_range().start() + TextUnit::from_usize(off + 2);\n                             acc.push(SyntaxError::new(err.into(), off))\n                         }\n                     })\n@@ -68,7 +68,7 @@ fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n                     unescape::unescape_str(without_quotes, &mut |range, char| {\n                         if let Err(err) = char {\n                             let off = range.start;\n-                            let off = token.range().start() + TextUnit::from_usize(off + 1);\n+                            let off = token.text_range().start() + TextUnit::from_usize(off + 1);\n                             acc.push(SyntaxError::new(err.into(), off))\n                         }\n                     })\n@@ -89,9 +89,9 @@ pub(crate) fn validate_block_structure(root: &SyntaxNode) {\n                     assert_eq!(\n                         node.parent(),\n                         pair.parent(),\n-                        \"\\nunpaired curleys:\\n{}\\n{}\\n\",\n+                        \"\\nunpaired curleys:\\n{}\\n{:#?}\\n\",\n                         root.text(),\n-                        root.debug_dump(),\n+                        root,\n                     );\n                     assert!(\n                         node.next_sibling().is_none() && pair.prev_sibling().is_none(),"}, {"sha": "c5588658d8877f5e36d0ed82e56c188543ea34c5", "filename": "crates/ra_syntax/src/validation/block.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Fblock.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -16,6 +16,7 @@ pub(crate) fn validate_block_node(node: ast::Block, errors: &mut Vec<SyntaxError\n             _ => {}\n         }\n     }\n-    errors\n-        .extend(node.attrs().map(|attr| SyntaxError::new(InvalidBlockAttr, attr.syntax().range())))\n+    errors.extend(\n+        node.attrs().map(|attr| SyntaxError::new(InvalidBlockAttr, attr.syntax().text_range())),\n+    )\n }"}, {"sha": "004f199fd537733529488c256cc8d5e741ea8138", "filename": "crates/ra_syntax/src/validation/field_expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Ffield_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b352ffeb346eb7c7e46e00e790c2f395907eaa6/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Ffield_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Ffield_expr.rs?ref=6b352ffeb346eb7c7e46e00e790c2f395907eaa6", "patch": "@@ -7,7 +7,7 @@ use crate::{\n pub(crate) fn validate_field_expr_node(node: ast::FieldExpr, errors: &mut Vec<SyntaxError>) {\r\n     if let Some(FieldKind::Index(idx)) = node.field_access() {\r\n         if idx.text().chars().any(|c| c < '0' || c > '9') {\r\n-            errors.push(SyntaxError::new(InvalidTupleIndexFormat, idx.range()));\r\n+            errors.push(SyntaxError::new(InvalidTupleIndexFormat, idx.text_range()));\r\n         }\r\n     }\r\n }\r"}]}