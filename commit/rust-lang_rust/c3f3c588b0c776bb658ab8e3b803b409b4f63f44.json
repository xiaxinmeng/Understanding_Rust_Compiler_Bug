{"sha": "c3f3c588b0c776bb658ab8e3b803b409b4f63f44", "node_id": "C_kwDOAAsO6NoAKGMzZjNjNTg4YjBjNzc2YmI2NThhYjhlM2I4MDNiNDA5YjRmNjNmNDQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-09T13:56:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-09T13:56:53Z"}, "message": "Auto merge of #8805 - Alexendoo:let-chain-docs, r=flip1995\n\nRecommend let chains over if_chain in docs\n\nSwitches over bit_mask.rs to let chains in order to create a nice example\n\nWhile the rustfmt thing isn't resolved yet, my rust-analyzer isn't a fan of large `if_chains!`s, it stops giving me hover info and such after some number of if statements\n\nchangelog: none", "tree": {"sha": "acd9b0f02e7b69c89abba08ef313b5efa8e14b6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acd9b0f02e7b69c89abba08ef313b5efa8e14b6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3f3c588b0c776bb658ab8e3b803b409b4f63f44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3f3c588b0c776bb658ab8e3b803b409b4f63f44", "html_url": "https://github.com/rust-lang/rust/commit/c3f3c588b0c776bb658ab8e3b803b409b4f63f44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3f3c588b0c776bb658ab8e3b803b409b4f63f44/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4667198d4f6a0fd4c2cccd0ddec4e5afbe291401", "url": "https://api.github.com/repos/rust-lang/rust/commits/4667198d4f6a0fd4c2cccd0ddec4e5afbe291401", "html_url": "https://github.com/rust-lang/rust/commit/4667198d4f6a0fd4c2cccd0ddec4e5afbe291401"}, {"sha": "c9d88ef962a5a9ae3ef6a9b111533e831dcd145c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9d88ef962a5a9ae3ef6a9b111533e831dcd145c", "html_url": "https://github.com/rust-lang/rust/commit/c9d88ef962a5a9ae3ef6a9b111533e831dcd145c"}], "stats": {"total": 78, "additions": 37, "deletions": 41}, "files": [{"sha": "6ab2bd59137fa0ef56e13933b9b001ca06fe1bfa", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3f3c588b0c776bb658ab8e3b803b409b4f63f44/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/c3f3c588b0c776bb658ab8e3b803b409b4f63f44/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=c3f3c588b0c776bb658ab8e3b803b409b4f63f44", "patch": "@@ -69,7 +69,7 @@ and resolved paths.\n To figure out how this syntax structure is encoded in the AST, it is recommended to run\n `rustc -Z unpretty=ast-tree` on an example of the structure and compare with the [nodes in the AST docs].\n Usually the lint will end up to be a nested series of matches and ifs, [like so][deep-nesting].\n-But we can make it nest-less by using [if_chain] macro, [like this][nest-less].\n+But we can make it nest-less by using [let chains], [like this][nest-less].\n \n [`E-medium`] issues are generally pretty easy too, though it's recommended you work on an [`good-first-issue`]\n first. Sometimes they are only somewhat involved code wise, but not difficult per-se.\n@@ -87,9 +87,9 @@ an AST expression). `match_def_path()` in Clippy's `utils` module can also be us\n [`E-medium`]: https://github.com/rust-lang/rust-clippy/labels/E-medium\n [`ty`]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty\n [nodes in the AST docs]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/\n-[deep-nesting]: https://github.com/rust-lang/rust-clippy/blob/557f6848bd5b7183f55c1e1522a326e9e1df6030/clippy_lints/src/mem_forget.rs#L29-L43\n-[if_chain]: https://docs.rs/if_chain/*/if_chain\n-[nest-less]: https://github.com/rust-lang/rust-clippy/blob/557f6848bd5b7183f55c1e1522a326e9e1df6030/clippy_lints/src/bit_mask.rs#L124-L150\n+[deep-nesting]: https://github.com/rust-lang/rust-clippy/blob/5e4f0922911536f80d9591180fa604229ac13939/clippy_lints/src/mem_forget.rs#L31-L45\n+[let chains]: https://github.com/rust-lang/rust/pull/94927\n+[nest-less]: https://github.com/rust-lang/rust-clippy/blob/5e4f0922911536f80d9591180fa604229ac13939/clippy_lints/src/bit_mask.rs#L133-L159\n \n ## Writing code\n "}, {"sha": "dc7e400fdc28156ed88bea412dcc8b92158ef654", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c3f3c588b0c776bb658ab8e3b803b409b4f63f44/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3f3c588b0c776bb658ab8e3b803b409b4f63f44/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=c3f3c588b0c776bb658ab8e3b803b409b4f63f44", "patch": "@@ -1,7 +1,6 @@\n use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n use clippy_utils::sugg::Sugg;\n-use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n@@ -130,32 +129,33 @@ impl<'tcx> LateLintPass<'tcx> for BitMask {\n                 }\n             }\n         }\n-        if_chain! {\n-            if let ExprKind::Binary(op, left, right) = &e.kind;\n-            if BinOpKind::Eq == op.node;\n-            if let ExprKind::Binary(op1, left1, right1) = &left.kind;\n-            if BinOpKind::BitAnd == op1.node;\n-            if let ExprKind::Lit(lit) = &right1.kind;\n-            if let LitKind::Int(n, _) = lit.node;\n-            if let ExprKind::Lit(lit1) = &right.kind;\n-            if let LitKind::Int(0, _) = lit1.node;\n-            if n.leading_zeros() == n.count_zeros();\n-            if n > u128::from(self.verbose_bit_mask_threshold);\n-            then {\n-                span_lint_and_then(cx,\n-                                   VERBOSE_BIT_MASK,\n-                                   e.span,\n-                                   \"bit mask could be simplified with a call to `trailing_zeros`\",\n-                                   |diag| {\n+\n+        if let ExprKind::Binary(op, left, right) = &e.kind\n+            && BinOpKind::Eq == op.node\n+            && let ExprKind::Binary(op1, left1, right1) = &left.kind\n+            && BinOpKind::BitAnd == op1.node\n+            && let ExprKind::Lit(lit) = &right1.kind\n+            && let LitKind::Int(n, _) = lit.node\n+            && let ExprKind::Lit(lit1) = &right.kind\n+            && let LitKind::Int(0, _) = lit1.node\n+            && n.leading_zeros() == n.count_zeros()\n+            && n > u128::from(self.verbose_bit_mask_threshold)\n+        {\n+            span_lint_and_then(\n+                cx,\n+                VERBOSE_BIT_MASK,\n+                e.span,\n+                \"bit mask could be simplified with a call to `trailing_zeros`\",\n+                |diag| {\n                     let sugg = Sugg::hir(cx, left1, \"...\").maybe_par();\n                     diag.span_suggestion(\n                         e.span,\n                         \"try\",\n                         format!(\"{}.trailing_zeros() >= {}\", sugg, n.count_ones()),\n                         Applicability::MaybeIncorrect,\n                     );\n-                });\n-            }\n+                },\n+            );\n         }\n     }\n }"}, {"sha": "4dc94d9f5a5b746c823eea518f178553229ec9c5", "filename": "doc/adding_lints.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3f3c588b0c776bb658ab8e3b803b409b4f63f44/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/c3f3c588b0c776bb658ab8e3b803b409b4f63f44/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=c3f3c588b0c776bb658ab8e3b803b409b4f63f44", "patch": "@@ -656,7 +656,7 @@ Here are some pointers to things you are likely going to need for every lint:\n * [Clippy utils][utils] - Various helper functions. Maybe the function you need\n   is already in here ([`is_type_diagnostic_item`], [`implements_trait`], [`snippet`], etc)\n * [Clippy diagnostics][diagnostics]\n-* [The `if_chain` macro][if_chain]\n+* [Let chains][let-chains]\n * [`from_expansion`][from_expansion] and [`in_external_macro`][in_external_macro]\n * [`Span`][span]\n * [`Applicability`][applicability]\n@@ -684,7 +684,7 @@ don't hesitate to ask on [Zulip] or in the issue/PR.\n [`is_type_diagnostic_item`]: https://doc.rust-lang.org/nightly/nightly-rustc/clippy_utils/ty/fn.is_type_diagnostic_item.html\n [`implements_trait`]: https://doc.rust-lang.org/nightly/nightly-rustc/clippy_utils/ty/fn.implements_trait.html\n [`snippet`]: https://doc.rust-lang.org/nightly/nightly-rustc/clippy_utils/source/fn.snippet.html\n-[if_chain]: https://docs.rs/if_chain/*/if_chain/\n+[let-chains]: https://github.com/rust-lang/rust/pull/94927\n [from_expansion]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/struct.Span.html#method.from_expansion\n [in_external_macro]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/lint/fn.in_external_macro.html\n [span]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/struct.Span.html"}, {"sha": "131ac3c3611e83ffcb74678f2712ee69e3babeae", "filename": "doc/common_tools_writing_lints.md", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c3f3c588b0c776bb658ab8e3b803b409b4f63f44/doc%2Fcommon_tools_writing_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/c3f3c588b0c776bb658ab8e3b803b409b4f63f44/doc%2Fcommon_tools_writing_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fcommon_tools_writing_lints.md?ref=c3f3c588b0c776bb658ab8e3b803b409b4f63f44", "patch": "@@ -62,16 +62,14 @@ Starting with an `expr`, you can check whether it is calling a specific method `\n ```rust\n impl<'tcx> LateLintPass<'tcx> for MyStructLint {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n-        if_chain! {\n-            // Check our expr is calling a method\n-            if let hir::ExprKind::MethodCall(path, _, [_self_arg, ..]) = &expr.kind;\n+        // Check our expr is calling a method\n+        if let hir::ExprKind::MethodCall(path, _, [_self_arg, ..]) = &expr.kind\n             // Check the name of this method is `some_method`\n-            if path.ident.name == sym!(some_method);\n+            && path.ident.name == sym!(some_method)\n             // Optionally, check the type of the self argument.\n             // - See \"Checking for a specific type\"\n-            then {\n+        {\n                 // ...\n-            }\n         }\n     }\n }\n@@ -165,18 +163,16 @@ use clippy_utils::{is_type_diagnostic_item, return_ty};\n \n impl<'tcx> LateLintPass<'tcx> for MyTypeImpl {\n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx ImplItem<'_>) {\n-        if_chain! {\n-            // Check if item is a method/function\n-            if let ImplItemKind::Fn(ref signature, _) = impl_item.kind;\n+        // Check if item is a method/function\n+        if let ImplItemKind::Fn(ref signature, _) = impl_item.kind\n             // Check the method is named `some_method`\n-            if impl_item.ident.name == sym!(some_method);\n+            && impl_item.ident.name == sym!(some_method)\n             // We can also check it has a parameter `self`\n-            if signature.decl.implicit_self.has_implicit_self();\n+            && signature.decl.implicit_self.has_implicit_self()\n             // We can go further and even check if its return type is `String`\n-            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id), sym!(string_type));\n-            then {\n-                // ...\n-            }\n+            && is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id), sym!(string_type))\n+        {\n+            // ...\n         }\n     }\n }"}]}