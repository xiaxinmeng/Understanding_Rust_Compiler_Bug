{"sha": "6571ae28a81e899aeb3eae81ee26c3cf31fddd1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NzFhZTI4YTgxZTg5OWFlYjNlYWU4MWVlMjZjM2NmMzFmZGRkMWM=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-02-09T21:58:59Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-02-09T21:58:59Z"}, "message": "Rollup merge of #31514 - cgar:spelling, r=alexcrichton", "tree": {"sha": "abd0ca2173c4b034961d3a8e3b13eb2d604def4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abd0ca2173c4b034961d3a8e3b13eb2d604def4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c", "html_url": "https://github.com/rust-lang/rust/commit/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3bf4a74272c2072ad9567c5201c6514b9aff0fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3bf4a74272c2072ad9567c5201c6514b9aff0fc", "html_url": "https://github.com/rust-lang/rust/commit/e3bf4a74272c2072ad9567c5201c6514b9aff0fc"}, {"sha": "02aa0aff2f0b42368dd871186510493fa60d785a", "url": "https://api.github.com/repos/rust-lang/rust/commits/02aa0aff2f0b42368dd871186510493fa60d785a", "html_url": "https://github.com/rust-lang/rust/commit/02aa0aff2f0b42368dd871186510493fa60d785a"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "11086af10bd3daca6cecf3eafdc6071d7da8a72d", "filename": "src/doc/book/error-handling.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Fdoc%2Fbook%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Fdoc%2Fbook%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ferror-handling.md?ref=6571ae28a81e899aeb3eae81ee26c3cf31fddd1c", "patch": "@@ -265,7 +265,7 @@ fn map<F, T, A>(option: Option<T>, f: F) -> Option<A> where F: FnOnce(T) -> A {\n ```\n \n Indeed, `map` is [defined as a method][2] on `Option<T>` in the standard library.\n-As a method, it has a slighly different signature: methods take `self`, `&self`,\n+As a method, it has a slightly different signature: methods take `self`, `&self`,\n or `&mut self` as their first argument.\n \n Armed with our new combinator, we can rewrite our `extension_explicit` method"}, {"sha": "4087dd729175082d6e00f7371b4fbab18236aa78", "filename": "src/libbacktrace/ansidecl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibbacktrace%2Fansidecl.h", "raw_url": "https://github.com/rust-lang/rust/raw/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibbacktrace%2Fansidecl.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibbacktrace%2Fansidecl.h?ref=6571ae28a81e899aeb3eae81ee26c3cf31fddd1c", "patch": "@@ -1,4 +1,4 @@\n-/* ANSI and traditional C compatability macros\n+/* ANSI and traditional C compatibility macros\n    Copyright (C) 1991-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n "}, {"sha": "8ae23a646e48855caa7ed93019d42d6e8bcc060b", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=6571ae28a81e899aeb3eae81ee26c3cf31fddd1c", "patch": "@@ -28,7 +28,7 @@\n // }\n // ```\n //\n-// Since Rust doesn't acutally have dependent types and polymorphic recursion,\n+// Since Rust doesn't actually have dependent types and polymorphic recursion,\n // we make do with lots of unsafety.\n \n use alloc::heap;"}, {"sha": "89b5e5b30755c11c11a531a626231398478b8a53", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=6571ae28a81e899aeb3eae81ee26c3cf31fddd1c", "patch": "@@ -1808,7 +1808,7 @@ impl str {\n                 // \u03a3 maps to \u03c3, except at the end of a word where it maps to \u03c2.\n                 // This is the only conditional (contextual) but language-independent mapping\n                 // in `SpecialCasing.txt`,\n-                // so hard-code it rather than have a generic \"condition\" mechanim.\n+                // so hard-code it rather than have a generic \"condition\" mechanism.\n                 // See https://github.com/rust-lang/rust/issues/26035\n                 map_uppercase_sigma(self, i, &mut s)\n             } else {"}, {"sha": "7137fdde97e2f09ae4ffc4154d95a5cb93ded134", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=6571ae28a81e899aeb3eae81ee26c3cf31fddd1c", "patch": "@@ -193,7 +193,7 @@ use boxed::Box;\n /// mem::forget(story);\n ///\n /// // We can re-build a String out of ptr, len, and capacity. This is all\n-/// // unsafe becuase we are responsible for making sure the components are\n+/// // unsafe because we are responsible for making sure the components are\n /// // valid:\n /// let s = unsafe { String::from_raw_parts(ptr as *mut _, len, capacity) } ;\n ///"}, {"sha": "b4ac020795c3804b01453c70baf82b253ebfa466", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=6571ae28a81e899aeb3eae81ee26c3cf31fddd1c", "patch": "@@ -19,7 +19,7 @@\n //!\n //! - Impl the `As*` traits for reference-to-reference conversions\n //! - Impl the `Into` trait when you want to consume the value in the conversion\n-//! - The `From` trait is the most flexible, usefull for values _and_ references conversions\n+//! - The `From` trait is the most flexible, useful for values _and_ references conversions\n //!\n //! As a library writer, you should prefer implementing `From<T>` rather than\n //! `Into<U>`, as `From` provides greater flexibility and offer the equivalent `Into`"}, {"sha": "fa169416a1081ab6042fe2327ae8f71e99b8cb54", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=6571ae28a81e899aeb3eae81ee26c3cf31fddd1c", "patch": "@@ -1740,7 +1740,7 @@ impl StrExt for str {\n         let mut matcher = pat.into_searcher(self);\n         if let Some((a, b)) = matcher.next_reject() {\n             i = a;\n-            j = b; // Rember earliest known match, correct it below if\n+            j = b; // Remember earliest known match, correct it below if\n                    // last match is different\n         }\n         if let Some((_, b)) = matcher.next_reject_back() {"}, {"sha": "1727fa2a0d34ad382876850dd0d55ccd28ff7099", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=6571ae28a81e899aeb3eae81ee26c3cf31fddd1c", "patch": "@@ -107,7 +107,7 @@\n //!\n //! - `Opaque` (`17`): An opaque, custom-format tag.\n //!   Used to wrap ordinary custom tags or data in the auto-serialized context.\n-//!   Rustc typically uses this to encode type informations.\n+//!   Rustc typically uses this to encode type information.\n //!\n //! First 0x20 tags are reserved by RBML; custom tags start at 0x20.\n "}, {"sha": "8181e7d798c126a3953eab2176e546d156dc21bd", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=6571ae28a81e899aeb3eae81ee26c3cf31fddd1c", "patch": "@@ -153,7 +153,7 @@ pub fn pat_contains_bindings(dm: &DefMap, pat: &hir::Pat) -> bool {\n }\n \n /// Checks if the pattern contains any `ref` or `ref mut` bindings,\n-/// and if yes wether its containing mutable ones or just immutables ones.\n+/// and if yes whether its containing mutable ones or just immutables ones.\n pub fn pat_contains_ref_binding(dm: &RefCell<DefMap>, pat: &hir::Pat) -> Option<hir::Mutability> {\n     let mut result = None;\n     pat_bindings(dm, pat, |mode, _, _, _| {\n@@ -172,7 +172,7 @@ pub fn pat_contains_ref_binding(dm: &RefCell<DefMap>, pat: &hir::Pat) -> Option<\n }\n \n /// Checks if the patterns for this arm contain any `ref` or `ref mut`\n-/// bindings, and if yes wether its containing mutable ones or just immutables ones.\n+/// bindings, and if yes whether its containing mutable ones or just immutables ones.\n pub fn arm_contains_ref_binding(dm: &RefCell<DefMap>, arm: &hir::Arm) -> Option<hir::Mutability> {\n     arm.pats.iter()\n             .filter_map(|pat| pat_contains_ref_binding(dm, pat))"}, {"sha": "e3357aabd5dd568aa2a739874859288e4c9e5e84", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=6571ae28a81e899aeb3eae81ee26c3cf31fddd1c", "patch": "@@ -2236,7 +2236,7 @@ impl<'tcx> ctxt<'tcx> {\n     /// Given the did of an ADT, return a reference to its definition.\n     pub fn lookup_adt_def(&self, did: DefId) -> AdtDef<'tcx> {\n         // when reverse-variance goes away, a transmute::<AdtDefMaster,AdtDef>\n-        // woud be needed here.\n+        // would be needed here.\n         self.lookup_adt_def_master(did)\n     }\n "}, {"sha": "5e3c6e028a32524159aad94610b58b2494561767", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=6571ae28a81e899aeb3eae81ee26c3cf31fddd1c", "patch": "@@ -92,7 +92,7 @@ macro_rules! make_mir_visitor {\n             }\n \n             // The `super_xxx` methods comprise the default behavior and are\n-            // not meant to be overidden.\n+            // not meant to be overridden.\n \n             fn super_mir(&mut self,\n                          mir: & $($mutability)* Mir<'tcx>) {"}, {"sha": "1269c266c7c10ade2bcab46130bbd5924d83ff1e", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=6571ae28a81e899aeb3eae81ee26c3cf31fddd1c", "patch": "@@ -541,7 +541,7 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n     }\n \n     // Returns a ValueRef of the \"eh_unwind_resume\" lang item if one is defined,\n-    // otherwise declares it as an external funtion.\n+    // otherwise declares it as an external function.\n     pub fn eh_unwind_resume(&self) -> ValueRef {\n         use trans::attributes;\n         assert!(self.ccx.sess().target.target.options.custom_unwind_resume);"}, {"sha": "a476f9e1a8060d4fe3db42ad8773468a7f931bd8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6571ae28a81e899aeb3eae81ee26c3cf31fddd1c", "patch": "@@ -1809,7 +1809,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             debug!(\"select_all_obligations_and_apply_defaults: defaults={:?}\", default_map);\n \n             // We loop over the unsolved variables, resolving them and if they are\n-            // and unconstrainted numberic type we add them to the set of unbound\n+            // and unconstrainted numeric type we add them to the set of unbound\n             // variables. We do this so we only apply literal fallback to type\n             // variables without defaults.\n             for ty in &unsolved_variables {"}, {"sha": "d42b948918049ba2291048438e8eb82dad97252a", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=6571ae28a81e899aeb3eae81ee26c3cf31fddd1c", "patch": "@@ -521,7 +521,7 @@ impl OpenOptions {\n     /// No file is allowed to exist at the target location, also no (dangling)\n     /// symlink.\n     ///\n-    /// This option is usefull because it as atomic. Otherwise between checking\n+    /// This option is useful because it as atomic. Otherwise between checking\n     /// whether a file exists and creating a new one, the file may have been\n     /// created by another process (a TOCTOU race condition / attack).\n     ///"}, {"sha": "1d97611eabb2671261826c8abfa2a090dcc2f886", "filename": "src/libstd/memchr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibstd%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibstd%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmemchr.rs?ref=6571ae28a81e899aeb3eae81ee26c3cf31fddd1c", "patch": "@@ -150,7 +150,7 @@ mod fallback {\n         // Scan for a single byte value by reading two `usize` words at a time.\n         //\n         // Split `text` in three parts\n-        // - unaligned inital part, before the first word aligned address in text\n+        // - unaligned initial part, before the first word aligned address in text\n         // - body, scan by 2 words at a time\n         // - the last remaining part, < 2 word size\n         let len = text.len();"}, {"sha": "83df54f1830146da666602c1efa109a4cad7fe6e", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=6571ae28a81e899aeb3eae81ee26c3cf31fddd1c", "patch": "@@ -84,7 +84,7 @@ pub use panicking::{take_handler, set_handler, PanicInfo, Location};\n /// recover safe. The general idea is that any mutable state which can be shared\n /// across `recover` is not recover safe by default. This is because it is very\n /// easy to witness a broken invariant outside of `recover` as the data is\n-/// simply accesed as usual.\n+/// simply accessed as usual.\n ///\n /// Types like `&Mutex<T>`, however, are recover safe because they implement\n /// poisoning by default. They still allow witnessing a broken invariant, but"}, {"sha": "2b4d0dc339bf0da0b4ada1f5a5dcdadb084bc40e", "filename": "src/test/compile-fail/issue-30438-c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Ftest%2Fcompile-fail%2Fissue-30438-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Ftest%2Fcompile-fail%2Fissue-30438-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-30438-c.rs?ref=6571ae28a81e899aeb3eae81ee26c3cf31fddd1c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Simplfied regression test for #30438, inspired by arielb1.\n+// Simplified regression test for #30438, inspired by arielb1.\n \n trait Trait { type Out; }\n "}, {"sha": "ec8db996600d1478520f5e4bc50b9b3f68ae66af", "filename": "src/test/compile-fail/traits-inductive-overflow-supertrait-oibit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-supertrait-oibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-supertrait-oibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-supertrait-oibit.rs?ref=6571ae28a81e899aeb3eae81ee26c3cf31fddd1c", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // OIBIT-based version of #29859, supertrait version. Test that using\n-// a simple OIBIT `..` impl alone still doesn't allow arbitary bounds\n+// a simple OIBIT `..` impl alone still doesn't allow arbitrary bounds\n // to be synthesized.\n \n #![feature(optin_builtin_traits)]"}, {"sha": "fc45fbf72784036a78b85d384c1469c7e2bd6bed", "filename": "src/test/run-pass/mir_trans_calls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6571ae28a81e899aeb3eae81ee26c3cf31fddd1c/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs?ref=6571ae28a81e899aeb3eae81ee26c3cf31fddd1c", "patch": "@@ -113,7 +113,7 @@ fn test_fn_object(f: &Fn(i32, i32) -> i32, x: i32, y: i32) -> i32 {\n fn test_fn_impl(f: &&Fn(i32, i32) -> i32, x: i32, y: i32) -> i32 {\n     // This call goes through the Fn implementation for &Fn provided in\n     // core::ops::impls. It expands to a static Fn::call() that calls the\n-    // Fn::call() implemenation of the object shim underneath.\n+    // Fn::call() implementation of the object shim underneath.\n     f(x, y)\n }\n "}]}