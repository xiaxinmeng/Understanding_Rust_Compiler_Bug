{"sha": "b8e6d6a60674c84b1507383407cf6a88cd4200d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ZTZkNmE2MDY3NGM4NGIxNTA3MzgzNDA3Y2Y2YTg4Y2Q0MjAwZDY=", "commit": {"author": {"name": "Chetan Khilosiya", "email": "chetan.khilosiya@gmail.com", "date": "2021-03-04T18:26:18Z"}, "committer": {"name": "Chetan Khilosiya", "email": "chetan.khilosiya@gmail.com", "date": "2021-03-06T19:19:03Z"}, "message": "7708: Added the logic to check is default impl is already present.\n\nAlso added test cases for code present within module.", "tree": {"sha": "fe0a25ff47f1a4dc0b86e094b4b1006372a85f57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe0a25ff47f1a4dc0b86e094b4b1006372a85f57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8e6d6a60674c84b1507383407cf6a88cd4200d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8e6d6a60674c84b1507383407cf6a88cd4200d6", "html_url": "https://github.com/rust-lang/rust/commit/b8e6d6a60674c84b1507383407cf6a88cd4200d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8e6d6a60674c84b1507383407cf6a88cd4200d6/comments", "author": {"login": "chetankhilosiya", "id": 1639535, "node_id": "MDQ6VXNlcjE2Mzk1MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1639535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chetankhilosiya", "html_url": "https://github.com/chetankhilosiya", "followers_url": "https://api.github.com/users/chetankhilosiya/followers", "following_url": "https://api.github.com/users/chetankhilosiya/following{/other_user}", "gists_url": "https://api.github.com/users/chetankhilosiya/gists{/gist_id}", "starred_url": "https://api.github.com/users/chetankhilosiya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chetankhilosiya/subscriptions", "organizations_url": "https://api.github.com/users/chetankhilosiya/orgs", "repos_url": "https://api.github.com/users/chetankhilosiya/repos", "events_url": "https://api.github.com/users/chetankhilosiya/events{/privacy}", "received_events_url": "https://api.github.com/users/chetankhilosiya/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chetankhilosiya", "id": 1639535, "node_id": "MDQ6VXNlcjE2Mzk1MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1639535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chetankhilosiya", "html_url": "https://github.com/chetankhilosiya", "followers_url": "https://api.github.com/users/chetankhilosiya/followers", "following_url": "https://api.github.com/users/chetankhilosiya/following{/other_user}", "gists_url": "https://api.github.com/users/chetankhilosiya/gists{/gist_id}", "starred_url": "https://api.github.com/users/chetankhilosiya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chetankhilosiya/subscriptions", "organizations_url": "https://api.github.com/users/chetankhilosiya/orgs", "repos_url": "https://api.github.com/users/chetankhilosiya/repos", "events_url": "https://api.github.com/users/chetankhilosiya/events{/privacy}", "received_events_url": "https://api.github.com/users/chetankhilosiya/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a59a97ae04224b1de719d0f4d505f46e5e4ecb96", "url": "https://api.github.com/repos/rust-lang/rust/commits/a59a97ae04224b1de719d0f4d505f46e5e4ecb96", "html_url": "https://github.com/rust-lang/rust/commit/a59a97ae04224b1de719d0f4d505f46e5e4ecb96"}], "stats": {"total": 115, "additions": 97, "deletions": 18}, "files": [{"sha": "2df5adc857e32002433bf993e820b750361d7454", "filename": "crates/ide_assists/src/handlers/generate_default_from_new.rs", "status": "modified", "additions": 97, "deletions": 18, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/b8e6d6a60674c84b1507383407cf6a88cd4200d6/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8e6d6a60674c84b1507383407cf6a88cd4200d6/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs?ref=b8e6d6a60674c84b1507383407cf6a88cd4200d6", "patch": "@@ -2,6 +2,7 @@ use crate::{\n     assist_context::{AssistContext, Assists},\n     AssistId,\n };\n+use hir::TypeRef;\n use syntax::{\n     ast::{self, Impl, NameOwner},\n     AstNode,\n@@ -52,6 +53,9 @@ pub(crate) fn generate_default_from_new(acc: &mut Assists, ctx: &AssistContext)\n     }\n \n     let impl_ = fn_node.syntax().ancestors().into_iter().find_map(ast::Impl::cast)?;\n+    if is_default_implemented(ctx, &impl_).is_some() {\n+        return None;\n+    }\n \n     let insert_location = impl_.syntax().text_range();\n \n@@ -79,6 +83,21 @@ impl Default for {} {{\n     )\n }\n \n+fn is_default_implemented(ctx: &AssistContext, impl_: &Impl) -> Option<bool> {\n+    let db = ctx.sema.db;\n+    let module = impl_.syntax().parent()?;\n+    let sema_scope = ctx.sema.scope(&module);\n+    let impls = sema_scope.module()?.impl_defs(db);\n+    let mut name = None;\n+    for i in impls {\n+        if let Some(TypeRef::Path(p)) = i.target_trait(db) {\n+            name = p.segments().iter().map(|s| s.name.to_string()).find(|n| n == \"Default\");\n+        }\n+    }\n+\n+    name.map(|n| !n.is_empty())\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable};\n@@ -186,26 +205,27 @@ impl Exmaple {\n         );\n     }\n \n-    //     #[test]\n-    //     fn default_block_is_already_present() {\n-    //         check_assist_not_applicable(generate_default_from_new,\n-    //         r#\"\n-    // struct Example { _inner: () }\n+    #[test]\n+    fn default_block_is_already_present() {\n+        check_assist_not_applicable(\n+            generate_default_from_new,\n+            r#\"\n+struct Example { _inner: () }\n \n-    // impl Exmaple {\n-    //     pub fn n$0ew() -> Self {\n-    //         Self { _inner: () }\n-    //     }\n-    // }\n+impl Exmaple {\n+    pub fn n$0ew() -> Self {\n+        Self { _inner: () }\n+    }\n+}\n \n-    // impl Default for Example {\n-    //     fn default() -> Self {\n-    //         Self::new()\n-    //     }\n-    // }\n-    // \"#,\n-    //         );\n-    //     }\n+impl Default for Example {\n+    fn default() -> Self {\n+        Self::new()\n+    }\n+}\n+\"#,\n+        );\n+    }\n \n     #[test]\n     fn standalone_new_function() {\n@@ -279,6 +299,65 @@ impl Default for Example {\n }\n \n struct Example { _inner: () }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn struct_in_module() {\n+        check_assist(\n+            generate_default_from_new,\n+            r#\"\n+mod test {\n+    struct Example { _inner: () }\n+\n+    impl Example {\n+        pub fn n$0ew() -> Self {\n+            Self { _inner: () }\n+        }\n+    }\n+}\n+\"#,\n+            r#\"\n+mod test {\n+    struct Example { _inner: () }\n+\n+    impl Example {\n+        pub fn new() -> Self {\n+            Self { _inner: () }\n+        }\n+    }\n+\n+impl Default for Example {\n+    fn default() -> Self {\n+        Self::new()\n+    }\n+}\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn struct_in_module_with_default() {\n+        check_assist_not_applicable(\n+            generate_default_from_new,\n+            r#\"\n+mod test {\n+    struct Example { _inner: () }\n+\n+    impl Example {\n+        pub fn n$0ew() -> Self {\n+            Self { _inner: () }\n+        }\n+    }\n+\n+    impl Default for Example {\n+        fn default() -> Self {\n+            Self::new()\n+        }\n+    }\n+}\n \"#,\n         );\n     }"}]}