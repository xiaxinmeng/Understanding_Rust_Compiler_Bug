{"sha": "079e9fe49645fab8cb20a8cfb2da81915f018b04", "node_id": "C_kwDOAAsO6NoAKDA3OWU5ZmU0OTY0NWZhYjhjYjIwYThjZmIyZGE4MTkxNWYwMThiMDQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-10T13:52:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-10T13:52:45Z"}, "message": "Merge #10512\n\n10512: internal: add integrated test for token censoring r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "6eba928aae9282a79c4731ef53abc494751e39af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6eba928aae9282a79c4731ef53abc494751e39af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/079e9fe49645fab8cb20a8cfb2da81915f018b04", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhYvAtCRBK7hj4Ov3rIwAAdPwIALJ6AGlZGnuBJfE5s9kvRxM/\nqYa28akj46fV+DLAw1b0Ok+X+ekozRuwIx7JwjqIRVesW67Du+Pw9zLNiQwRKcso\nWOsSyzp0uYkYtaPHXs2wlF35HLjqDp2JY62sLLUthgjFW/oSf/V5lRC/mSgI/J+7\nVOXEA2Xbt1RyIw+StUBl7Si/C2AreoAeVIP5bFmzlKsmNaAt7+5vZx9CWHnWgsNV\nJIR06uKHDwz9f+u6b/tlBJFknVbLsv3/MVNFz7phcV5oZNDD1iCh2nKUL7G7Z8kT\nvFXKE6bWbczSA1IkLri4JAddNjmzL5erUE5+HigWK8fU2gHNyjjjV+f5+03l3tc=\n=t6a6\n-----END PGP SIGNATURE-----\n", "payload": "tree 6eba928aae9282a79c4731ef53abc494751e39af\nparent e9be41e395b9b97b880f7c573710479ece7c8214\nparent 634f047d9083ec4f69ca77b564fafa866f102280\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1633873965 +0000\ncommitter GitHub <noreply@github.com> 1633873965 +0000\n\nMerge #10512\n\n10512: internal: add integrated test for token censoring r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/079e9fe49645fab8cb20a8cfb2da81915f018b04", "html_url": "https://github.com/rust-lang/rust/commit/079e9fe49645fab8cb20a8cfb2da81915f018b04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/079e9fe49645fab8cb20a8cfb2da81915f018b04/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9be41e395b9b97b880f7c573710479ece7c8214", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9be41e395b9b97b880f7c573710479ece7c8214", "html_url": "https://github.com/rust-lang/rust/commit/e9be41e395b9b97b880f7c573710479ece7c8214"}, {"sha": "634f047d9083ec4f69ca77b564fafa866f102280", "url": "https://api.github.com/repos/rust-lang/rust/commits/634f047d9083ec4f69ca77b564fafa866f102280", "html_url": "https://github.com/rust-lang/rust/commit/634f047d9083ec4f69ca77b564fafa866f102280"}], "stats": {"total": 176, "additions": 105, "deletions": 71}, "files": [{"sha": "58b55e48c1beef8de3887d90fe9dc274bc2b46d1", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/079e9fe49645fab8cb20a8cfb2da81915f018b04/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/079e9fe49645fab8cb20a8cfb2da81915f018b04/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=079e9fe49645fab8cb20a8cfb2da81915f018b04", "patch": "@@ -270,6 +270,10 @@ fn test_proc_macros(proc_macros: &[String]) -> (Vec<ProcMacro>, String) {\n pub fn identity(_attr: TokenStream, item: TokenStream) -> TokenStream {\n     item\n }\n+#[proc_macro_derive(derive_identity)]\n+pub fn derive_identity(item: TokenStream) -> TokenStream {\n+    item\n+}\n #[proc_macro_attribute]\n pub fn input_replace(attr: TokenStream, _item: TokenStream) -> TokenStream {\n     attr\n@@ -285,6 +289,11 @@ pub fn mirror(input: TokenStream) -> TokenStream {\n             kind: crate::ProcMacroKind::Attr,\n             expander: Arc::new(IdentityProcMacroExpander),\n         },\n+        ProcMacro {\n+            name: \"derive_identity\".into(),\n+            kind: crate::ProcMacroKind::CustomDerive,\n+            expander: Arc::new(IdentityProcMacroExpander),\n+        },\n         ProcMacro {\n             name: \"input_replace\".into(),\n             kind: crate::ProcMacroKind::Attr,"}, {"sha": "036d9147a08bdd9a115028014832f4b0ede2ae7c", "filename": "crates/hir_def/src/macro_expansion_tests.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/079e9fe49645fab8cb20a8cfb2da81915f018b04/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/079e9fe49645fab8cb20a8cfb2da81915f018b04/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs?ref=079e9fe49645fab8cb20a8cfb2da81915f018b04", "patch": "@@ -12,6 +12,7 @@\n mod mbe;\n mod builtin_fn_macro;\n mod builtin_derive_macro;\n+mod proc_macros;\n \n use std::{iter, ops::Range};\n \n@@ -28,7 +29,7 @@ use syntax::{\n \n use crate::{\n     db::DefDatabase, nameres::ModuleSource, resolver::HasResolver, src::HasSource, test_db::TestDB,\n-    AsMacroCall, Lookup,\n+    AdtId, AsMacroCall, Lookup, ModuleDefId,\n };\n \n #[track_caller]\n@@ -124,6 +125,16 @@ fn check(ra_fixture: &str, mut expect: Expect) {\n         expanded_text.replace_range(range, &expn_text)\n     }\n \n+    for decl_id in def_map[local_id].scope.declarations() {\n+        if let ModuleDefId::AdtId(AdtId::StructId(struct_id)) = decl_id {\n+            let src = struct_id.lookup(&db).source(&db);\n+            if src.file_id.is_attr_macro(&db) || src.file_id.is_custom_derive(&db) {\n+                let pp = pretty_print_macro_expansion(src.value.syntax().clone());\n+                format_to!(expanded_text, \"\\n{}\", pp)\n+            }\n+        }\n+    }\n+\n     for impl_id in def_map[local_id].scope.impls() {\n         let src = impl_id.lookup(&db).source(&db);\n         if src.file_id.is_builtin_derive(&db).is_some() {"}, {"sha": "ef8dc3e3b042ce036320822bb1ad273c7122171c", "filename": "crates/hir_def/src/macro_expansion_tests/proc_macros.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/079e9fe49645fab8cb20a8cfb2da81915f018b04/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fproc_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/079e9fe49645fab8cb20a8cfb2da81915f018b04/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fproc_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fproc_macros.rs?ref=079e9fe49645fab8cb20a8cfb2da81915f018b04", "patch": "@@ -0,0 +1,53 @@\n+//! Tests for user-defined procedural macros.\n+//!\n+//! Note `//- proc_macros: identity` fixture metas in tests -- we don't use real\n+//! proc-macros here, as that would be slow. Instead, we use several hard-coded\n+//! in-memory macros.\n+use expect_test::expect;\n+\n+use crate::macro_expansion_tests::check;\n+\n+#[test]\n+fn attribute_macro_attr_censoring() {\n+    cov_mark::check!(attribute_macro_attr_censoring);\n+    check(\n+        r#\"\n+//- proc_macros: identity\n+#[attr1] #[proc_macros::identity] #[attr2]\n+struct S;\n+\"#,\n+        expect![[r##\"\n+#[attr1] #[proc_macros::identity] #[attr2]\n+struct S;\n+\n+#[attr1]\n+#[attr2] struct S;\"##]],\n+    );\n+}\n+\n+#[test]\n+fn derive_censoring() {\n+    cov_mark::check!(derive_censoring);\n+    check(\n+        r#\"\n+//- proc_macros: derive_identity\n+#[attr1]\n+#[derive(Foo)]\n+#[derive(proc_macros::derive_identity)]\n+#[derive(Bar)]\n+#[attr2]\n+struct S;\n+\"#,\n+        expect![[r##\"\n+#[attr1]\n+#[derive(Foo)]\n+#[derive(proc_macros::derive_identity)]\n+#[derive(Bar)]\n+#[attr2]\n+struct S;\n+\n+#[attr1]\n+#[derive(Bar)]\n+#[attr2] struct S;\"##]],\n+    );\n+}"}, {"sha": "c87fb6a17d2efccf96f7e2ed1c80026315b7d18f", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/079e9fe49645fab8cb20a8cfb2da81915f018b04/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/079e9fe49645fab8cb20a8cfb2da81915f018b04/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=079e9fe49645fab8cb20a8cfb2da81915f018b04", "patch": "@@ -319,18 +319,24 @@ fn censor_for_macro_input(loc: &MacroCallLoc, node: &SyntaxNode) -> FxHashSet<Sy\n     (|| {\n         let censor = match loc.kind {\n             MacroCallKind::FnLike { .. } => return None,\n-            MacroCallKind::Derive { derive_attr_index, .. } => ast::Item::cast(node.clone())?\n-                .attrs()\n-                .take(derive_attr_index as usize + 1)\n-                .filter(|attr| attr.simple_name().as_deref() == Some(\"derive\"))\n-                .map(|it| it.syntax().clone())\n-                .collect(),\n-            MacroCallKind::Attr { invoc_attr_index, .. } => ast::Item::cast(node.clone())?\n-                .attrs()\n-                .nth(invoc_attr_index as usize)\n-                .map(|attr| attr.syntax().clone())\n-                .into_iter()\n-                .collect(),\n+            MacroCallKind::Derive { derive_attr_index, .. } => {\n+                cov_mark::hit!(derive_censoring);\n+                ast::Item::cast(node.clone())?\n+                    .attrs()\n+                    .take(derive_attr_index as usize + 1)\n+                    .filter(|attr| attr.simple_name().as_deref() == Some(\"derive\"))\n+                    .map(|it| it.syntax().clone())\n+                    .collect()\n+            }\n+            MacroCallKind::Attr { invoc_attr_index, .. } => {\n+                cov_mark::hit!(attribute_macro_attr_censoring);\n+                ast::Item::cast(node.clone())?\n+                    .attrs()\n+                    .nth(invoc_attr_index as usize)\n+                    .map(|attr| attr.syntax().clone())\n+                    .into_iter()\n+                    .collect()\n+            }\n         };\n         Some(censor)\n     })()"}, {"sha": "1fc74cb3b0c5890844e29d6b583bd0c4fdcb85b7", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/079e9fe49645fab8cb20a8cfb2da81915f018b04/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/079e9fe49645fab8cb20a8cfb2da81915f018b04/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=079e9fe49645fab8cb20a8cfb2da81915f018b04", "patch": "@@ -175,6 +175,19 @@ impl HirFileId {\n         }\n     }\n \n+    pub fn is_custom_derive(&self, db: &dyn db::AstDatabase) -> bool {\n+        match self.0 {\n+            HirFileIdRepr::FileId(_) => false,\n+            HirFileIdRepr::MacroFile(macro_file) => {\n+                let loc: MacroCallLoc = db.lookup_intern_macro(macro_file.macro_call_id);\n+                match loc.def.kind {\n+                    MacroDefKind::ProcMacro(_, ProcMacroKind::CustomDerive, _) => true,\n+                    _ => false,\n+                }\n+            }\n+        }\n+    }\n+\n     /// Return whether this file is an include macro\n     pub fn is_include_macro(&self, db: &dyn db::AstDatabase) -> bool {\n         match self.0 {"}, {"sha": "6cd084eaeab6be3c7858f77d72828ff2106b4635", "filename": "crates/mbe/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/079e9fe49645fab8cb20a8cfb2da81915f018b04/crates%2Fmbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/079e9fe49645fab8cb20a8cfb2da81915f018b04/crates%2Fmbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Flib.rs?ref=079e9fe49645fab8cb20a8cfb2da81915f018b04", "patch": "@@ -12,9 +12,6 @@ mod syntax_bridge;\n mod tt_iter;\n mod subtree_source;\n \n-#[cfg(test)]\n-mod tests;\n-\n #[cfg(test)]\n mod benchmark;\n mod token_map;"}, {"sha": "f4d7e60595939d319e574986c31dd13beca88417", "filename": "crates/mbe/src/tests.rs", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/e9be41e395b9b97b880f7c573710479ece7c8214/crates%2Fmbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9be41e395b9b97b880f7c573710479ece7c8214/crates%2Fmbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests.rs?ref=e9be41e395b9b97b880f7c573710479ece7c8214", "patch": "@@ -1,55 +0,0 @@\n-use std::iter;\n-\n-use syntax::{ast, AstNode};\n-\n-use super::*;\n-\n-#[test]\n-fn test_node_to_tt_censor() {\n-    use syntax::ast::{HasAttrs, HasModuleItem};\n-\n-    let source = r##\"\n-#[attr0]\n-#[attr1]\n-#[attr2]\n-struct Struct {\n-    field: ()\n-}\n-\"##;\n-    let source_file = ast::SourceFile::parse(source).ok().unwrap();\n-    let item = source_file.items().next().unwrap();\n-    let attr = item.attrs().nth(1).unwrap();\n-\n-    let (tt, _) = syntax_node_to_token_tree_censored(\n-        item.syntax(),\n-        &iter::once(attr.syntax().clone()).collect(),\n-    );\n-    expect_test::expect![[r##\"# [attr0] # [attr2] struct Struct {field : ()}\"##]]\n-        .assert_eq(&tt.to_string());\n-\n-    let source = r##\"\n-#[attr0]\n-#[derive(Derive0)]\n-#[attr1]\n-#[derive(Derive1)]\n-#[attr2]\n-#[derive(Derive2)]\n-#[attr3]\n-struct Struct {\n-    field: ()\n-}\n-\"##;\n-    let source_file = ast::SourceFile::parse(source).ok().unwrap();\n-    let item = source_file.items().next().unwrap();\n-    let derive_attr_index = 3;\n-    let censor = item\n-        .attrs()\n-        .take(derive_attr_index as usize + 1)\n-        .filter(|attr| attr.simple_name().as_deref() == Some(\"derive\"))\n-        .map(|it| it.syntax().clone())\n-        .collect();\n-\n-    let (tt, _) = syntax_node_to_token_tree_censored(item.syntax(), &censor);\n-    expect_test::expect![[r##\"# [attr0] # [attr1] # [attr2] # [derive (Derive2)] # [attr3] struct Struct {field : ()}\"##]]\n-        .assert_eq(&tt.to_string());\n-}"}]}