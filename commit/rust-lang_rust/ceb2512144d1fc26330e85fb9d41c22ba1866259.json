{"sha": "ceb2512144d1fc26330e85fb9d41c22ba1866259", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlYjI1MTIxNDRkMWZjMjYzMzBlODVmYjlkNDFjMjJiYTE4NjYyNTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-16T15:01:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-16T15:01:20Z"}, "message": "Auto merge of #57321 - petrochenkov:atokens, r=nikomatsakis\n\nImplement basic input validation for built-in attributes\n\nCorrect top-level shape (`#[attr]` vs `#[attr(...)]` vs `#[attr = ...]`) is enforced for built-in attributes, built-in attributes must also fit into the \"meta-item\" syntax (aka the \"classic attribute syntax\").\n\nFor some subset of attributes (found by crater run), errors are lowered to deprecation warnings.\n\nNOTE: This PR previously included https://github.com/rust-lang/rust/pull/57367 as well.", "tree": {"sha": "698f2e468d5964e3e7368af3c48e706d035df6da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/698f2e468d5964e3e7368af3c48e706d035df6da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ceb2512144d1fc26330e85fb9d41c22ba1866259", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ceb2512144d1fc26330e85fb9d41c22ba1866259", "html_url": "https://github.com/rust-lang/rust/commit/ceb2512144d1fc26330e85fb9d41c22ba1866259", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ceb2512144d1fc26330e85fb9d41c22ba1866259/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cccaf9a8c69219c8267e406f92fef895fbba80f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cccaf9a8c69219c8267e406f92fef895fbba80f2", "html_url": "https://github.com/rust-lang/rust/commit/cccaf9a8c69219c8267e406f92fef895fbba80f2"}, {"sha": "d3411d3ee8a350e2b8ec202a4a493e69c827245c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3411d3ee8a350e2b8ec202a4a493e69c827245c", "html_url": "https://github.com/rust-lang/rust/commit/d3411d3ee8a350e2b8ec202a4a493e69c827245c"}], "stats": {"total": 3023, "additions": 1398, "deletions": 1625}, "files": [{"sha": "287a45a21eadf33ddc1da8c57372bfc47774539b", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 35, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1180,27 +1180,6 @@ fn main() {\n ```\n \"##,\n \n-E0296: r##\"\n-This error indicates that the given recursion limit could not be parsed. Ensure\n-that the value provided is a positive integer between quotes.\n-\n-Erroneous code example:\n-\n-```compile_fail,E0296\n-#![recursion_limit]\n-\n-fn main() {}\n-```\n-\n-And a working example:\n-\n-```\n-#![recursion_limit=\"1000\"]\n-\n-fn main() {}\n-```\n-\"##,\n-\n E0308: r##\"\n This error occurs when the compiler was unable to infer the concrete type of a\n variable. It can occur for several cases, the most common of which is a\n@@ -2093,20 +2072,6 @@ trait Foo { }\n ```\n \"##,\n \n-E0702: r##\"\n-This error indicates that a `#[non_exhaustive]` attribute had a value. The\n-`#[non_exhaustive]` should be empty.\n-\n-Examples of erroneous code:\n-\n-```compile_fail,E0702\n-# #![feature(non_exhaustive)]\n-\n-#[non_exhaustive(anything)]\n-struct Foo;\n-```\n-\"##,\n-\n E0718: r##\"\n This error indicates that a `#[lang = \"..\"]` attribute was placed\n on the wrong type of item.\n@@ -2138,6 +2103,7 @@ register_diagnostics! {\n     E0280, // requirement is not satisfied\n     E0284, // cannot resolve type\n //  E0285, // overflow evaluation builtin bounds\n+//  E0296, // replaced with a generic attribute input check\n //  E0300, // unexpanded macro\n //  E0304, // expected signed integer constant\n //  E0305, // expected constant\n@@ -2180,4 +2146,5 @@ register_diagnostics! {\n     E0709, // multiple different lifetimes used in arguments of `async fn`\n     E0710, // an unknown tool name found in scoped lint\n     E0711, // a feature has been declared with conflicting stability attributes\n+//  E0702, // replaced with a generic attribute input check\n }"}, {"sha": "b4a00715c0f22b6903556d81d214ba6b0f648df0", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -142,15 +142,6 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n                 return;\n             }\n         }\n-\n-        if attr.meta_item_list().is_some() || attr.value_str().is_some() {\n-            struct_span_err!(self.tcx.sess,\n-                             attr.span,\n-                             E0702,\n-                             \"attribute should be empty\")\n-                .span_label(item.span, \"not empty\")\n-                .emit();\n-        }\n     }\n \n     /// Check if the `#[marker]` attribute on an `item` is valid.\n@@ -165,12 +156,6 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n                 return;\n             }\n         }\n-\n-        if !attr.is_word() {\n-            self.tcx.sess\n-                .struct_span_err(attr.span, \"attribute should be empty\")\n-                .emit();\n-        }\n     }\n \n     /// Check if the `#[repr]` attributes on `item` are valid."}, {"sha": "c8d137a42b2e8339dbe06c3e3bed6d377644c5c1", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -204,12 +204,6 @@ declare_lint! {\n     \"trait-object types were treated as different depending on marker-trait order\"\n }\n \n-declare_lint! {\n-    pub BAD_REPR,\n-    Warn,\n-    \"detects incorrect use of `repr` attribute\"\n-}\n-\n declare_lint! {\n     pub DEPRECATED,\n     Warn,\n@@ -359,6 +353,12 @@ pub mod parser {\n         Allow,\n         \"detects the use of `?` as a macro separator\"\n     }\n+\n+    declare_lint! {\n+        pub ILL_FORMED_ATTRIBUTE_INPUT,\n+        Warn,\n+        \"ill-formed attribute inputs that were previously accepted and used in practice\"\n+    }\n }\n \n declare_lint! {\n@@ -431,6 +431,7 @@ impl LintPass for HardwiredLints {\n             MACRO_USE_EXTERN_CRATE,\n             MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS,\n             parser::QUESTION_MARK_MACRO_SEP,\n+            parser::ILL_FORMED_ATTRIBUTE_INPUT,\n             DEPRECATED_IN_FUTURE,\n         )\n     }"}, {"sha": "8b45a5a1504b5b5236bc299782bf4b382b0c8c38", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -204,8 +204,6 @@ impl<'a> LintLevelsBuilder<'a> {\n             let mut metas = if let Some(metas) = meta.meta_item_list() {\n                 metas\n             } else {\n-                let mut err = bad_attr(meta.span);\n-                err.emit();\n                 continue;\n             };\n "}, {"sha": "730ce919bd295ba65cdef8f9511e81c4f5045470", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -28,7 +28,7 @@ use hir::def_id::{CrateNum, LOCAL_CRATE};\n use hir::intravisit;\n use hir;\n use lint::builtin::BuiltinLintDiagnostics;\n-use lint::builtin::parser::QUESTION_MARK_MACRO_SEP;\n+use lint::builtin::parser::{QUESTION_MARK_MACRO_SEP, ILL_FORMED_ATTRIBUTE_INPUT};\n use session::{Session, DiagnosticMessageId};\n use std::{hash, ptr};\n use syntax::ast;\n@@ -82,6 +82,7 @@ impl Lint {\n     pub fn from_parser_lint_id(lint_id: BufferedEarlyLintId) -> &'static Self {\n         match lint_id {\n             BufferedEarlyLintId::QuestionMarkMacroSep => QUESTION_MARK_MACRO_SEP,\n+            BufferedEarlyLintId::IllFormedAttributeInput => ILL_FORMED_ATTRIBUTE_INPUT,\n         }\n     }\n "}, {"sha": "1eabd7f59e689647bb4b57dd9e1976df75fa8e2d", "filename": "src/librustc/middle/recursion_limit.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -11,14 +11,11 @@ use syntax::ast;\n use rustc_data_structures::sync::Once;\n \n pub fn update_limits(sess: &Session, krate: &ast::Crate) {\n-    update_limit(sess, krate, &sess.recursion_limit, \"recursion_limit\",\n-                 \"recursion limit\", 64);\n-    update_limit(sess, krate, &sess.type_length_limit, \"type_length_limit\",\n-                 \"type length limit\", 1048576);\n+    update_limit(krate, &sess.recursion_limit, \"recursion_limit\", 64);\n+    update_limit(krate, &sess.type_length_limit, \"type_length_limit\", 1048576);\n }\n \n-fn update_limit(sess: &Session, krate: &ast::Crate, limit: &Once<usize>,\n-                name: &str, description: &str, default: usize) {\n+fn update_limit(krate: &ast::Crate, limit: &Once<usize>, name: &str, default: usize) {\n     for attr in &krate.attrs {\n         if !attr.check_name(name) {\n             continue;\n@@ -30,10 +27,6 @@ fn update_limit(sess: &Session, krate: &ast::Crate, limit: &Once<usize>,\n                 return;\n             }\n         }\n-\n-        span_err!(sess, attr.span, E0296,\n-                  \"malformed {} attribute, expected #![{}=\\\"N\\\"]\",\n-                  description, name);\n     }\n     limit.set(default);\n }"}, {"sha": "3ec901f50e4ccf2c4d4ac18a15feceeceecb1391", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -157,10 +157,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n                 note: None,\n             }))\n         } else {\n-            return Err(parse_error(tcx, attr.span,\n-                                   \"`#[rustc_on_unimplemented]` requires a value\",\n-                                   \"value required here\",\n-                                   Some(r#\"eg `#[rustc_on_unimplemented(message=\"foo\")]`\"#)));\n+            return Err(ErrorReported);\n         };\n         debug!(\"of_item({:?}/{:?}) = {:?}\", trait_def_id, impl_def_id, result);\n         result"}, {"sha": "af22ec1425c7396ff85afb1629c2d15d2f18c3e0", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1070,15 +1070,6 @@ where\n         )\n     });\n \n-    // Add all buffered lints from the `ParseSess` to the `Session`.\n-    sess.parse_sess.buffered_lints.with_lock(|buffered_lints| {\n-        info!(\"{} parse sess buffered_lints\", buffered_lints.len());\n-        for BufferedEarlyLint{id, span, msg, lint_id} in buffered_lints.drain(..) {\n-            let lint = lint::Lint::from_parser_lint_id(lint_id);\n-            sess.buffer_lint(lint, id, span, &msg);\n-        }\n-    });\n-\n     // Done with macro expansion!\n \n     after_expand(&krate)?;\n@@ -1114,6 +1105,15 @@ where\n         );\n     });\n \n+    // Add all buffered lints from the `ParseSess` to the `Session`.\n+    sess.parse_sess.buffered_lints.with_lock(|buffered_lints| {\n+        info!(\"{} parse sess buffered_lints\", buffered_lints.len());\n+        for BufferedEarlyLint{id, span, msg, lint_id} in buffered_lints.drain(..) {\n+            let lint = lint::Lint::from_parser_lint_id(lint_id);\n+            sess.buffer_lint(lint, id, span, &msg);\n+        }\n+    });\n+\n     // Lower ast -> hir.\n     // First, we need to collect the dep_graph.\n     let dep_graph = match future_dep_graph {\n@@ -1530,13 +1530,7 @@ pub fn collect_crate_types(session: &Session, attrs: &[ast::Attribute]) -> Vec<c\n                         }\n                         None\n                     }\n-                    None => {\n-                        session\n-                            .struct_span_err(a.span, \"`crate_type` requires a value\")\n-                            .note(\"for example: `#![crate_type=\\\"lib\\\"]`\")\n-                            .emit();\n-                        None\n-                    }\n+                    None => None\n                 }\n             } else {\n                 None"}, {"sha": "f895542e43adac2e8768ea9b3f996f8b6f9829c1", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 77, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -35,7 +35,8 @@ use syntax::ast::Expr;\n use syntax::attr;\n use syntax::source_map::Spanned;\n use syntax::edition::Edition;\n-use syntax::feature_gate::{AttributeGate, AttributeType, Stability, deprecated_attributes};\n+use syntax::feature_gate::{AttributeGate, AttributeTemplate, AttributeType};\n+use syntax::feature_gate::{Stability, deprecated_attributes};\n use syntax_pos::{BytePos, Span, SyntaxContext};\n use syntax::symbol::keywords;\n use syntax::errors::{Applicability, DiagnosticBuilder};\n@@ -689,86 +690,12 @@ impl EarlyLintPass for AnonymousParameters {\n     }\n }\n \n-/// Checks for incorrect use of `repr` attributes.\n-#[derive(Clone)]\n-pub struct BadRepr;\n-\n-impl LintPass for BadRepr {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!()\n-    }\n-}\n-\n-impl EarlyLintPass for BadRepr {\n-    fn check_attribute(&mut self, cx: &EarlyContext, attr: &ast::Attribute) {\n-        if attr.name() == \"repr\" {\n-            let list = attr.meta_item_list();\n-\n-            let repr_str = |lit: &str| { format!(\"#[repr({})]\", lit) };\n-\n-            // Emit warnings with `repr` either has a literal assignment (`#[repr = \"C\"]`) or\n-            // no hints (``#[repr]`)\n-            let has_hints = list.as_ref().map(|ref list| !list.is_empty()).unwrap_or(false);\n-            if !has_hints {\n-                let mut suggested = false;\n-                let mut warn = if let Some(ref lit) = attr.value_str() {\n-                    // avoid warning about empty `repr` on `#[repr = \"foo\"]`\n-                    let mut warn = cx.struct_span_lint(\n-                        BAD_REPR,\n-                        attr.span,\n-                        \"`repr` attribute isn't configurable with a literal\",\n-                    );\n-                    match lit.to_string().as_ref() {\n-                        | \"C\" | \"packed\" | \"rust\" | \"transparent\"\n-                        | \"u8\" | \"u16\" | \"u32\" | \"u64\" | \"u128\" | \"usize\"\n-                        | \"i8\" | \"i16\" | \"i32\" | \"i64\" | \"i128\" | \"isize\" => {\n-                            // if the literal could have been a valid `repr` arg,\n-                            // suggest the correct syntax\n-                            warn.span_suggestion_with_applicability(\n-                                attr.span,\n-                                \"give `repr` a hint\",\n-                                repr_str(&lit.as_str()),\n-                                Applicability::MachineApplicable\n-                            );\n-                            suggested = true;\n-                        }\n-                        _ => {  // the literal wasn't a valid `repr` arg\n-                            warn.span_label(attr.span, \"needs a hint\");\n-                        }\n-                    };\n-                    warn\n-                } else {\n-                    let mut warn = cx.struct_span_lint(\n-                        BAD_REPR,\n-                        attr.span,\n-                        \"`repr` attribute must have a hint\",\n-                    );\n-                    warn.span_label(attr.span, \"needs a hint\");\n-                    warn\n-                };\n-                if !suggested {\n-                    warn.help(&format!(\n-                        \"valid hints include `{}`, `{}`, `{}` and `{}`\",\n-                        repr_str(\"C\"),\n-                        repr_str(\"packed\"),\n-                        repr_str(\"rust\"),\n-                        repr_str(\"transparent\"),\n-                    ));\n-                    warn.note(\"for more information, visit \\\n-                               <https://doc.rust-lang.org/reference/type-layout.html>\");\n-                }\n-                warn.emit();\n-            }\n-        }\n-    }\n-}\n-\n /// Checks for use of attributes which have been deprecated.\n #[derive(Clone)]\n pub struct DeprecatedAttr {\n     // This is not free to compute, so we want to keep it around, rather than\n     // compute it for every attribute.\n-    depr_attrs: Vec<&'static (&'static str, AttributeType, AttributeGate)>,\n+    depr_attrs: Vec<&'static (&'static str, AttributeType, AttributeTemplate, AttributeGate)>,\n }\n \n impl DeprecatedAttr {\n@@ -787,7 +714,7 @@ impl LintPass for DeprecatedAttr {\n \n impl EarlyLintPass for DeprecatedAttr {\n     fn check_attribute(&mut self, cx: &EarlyContext, attr: &ast::Attribute) {\n-        for &&(n, _, ref g) in &self.depr_attrs {\n+        for &&(n, _, _, ref g) in &self.depr_attrs {\n             if attr.name() == n {\n                 if let &AttributeGate::Gated(Stability::Deprecated(link, suggestion),\n                                              ref name,"}, {"sha": "2d764d11c66aa0c9b13ef5b899100fabdd4860ed", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -48,7 +48,8 @@ use rustc::lint::builtin::{\n     INTRA_DOC_LINK_RESOLUTION_FAILURE,\n     MISSING_DOC_CODE_EXAMPLES,\n     PRIVATE_DOC_TESTS,\n-    parser::QUESTION_MARK_MACRO_SEP\n+    parser::QUESTION_MARK_MACRO_SEP,\n+    parser::ILL_FORMED_ATTRIBUTE_INPUT,\n };\n use rustc::session;\n use rustc::util;\n@@ -114,7 +115,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                        UnsafeCode,\n                        AnonymousParameters,\n                        UnusedDocComment,\n-                       BadRepr,\n                        EllipsisInclusiveRangePatterns,\n                        NonCamelCaseTypes,\n                        );\n@@ -336,6 +336,11 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             reference: \"issue #52234 <https://github.com/rust-lang/rust/issues/52234>\",\n             edition: None,\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(ILL_FORMED_ATTRIBUTE_INPUT),\n+            reference: \"issue #57571 <https://github.com/rust-lang/rust/issues/57571>\",\n+            edition: None,\n+        },\n         ]);\n \n     // Register renamed and removed lints.\n@@ -385,4 +390,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         \"no longer a warning, #[no_mangle] functions always exported\");\n     store.register_removed(\"private_no_mangle_statics\",\n         \"no longer a warning, #[no_mangle] statics always exported\");\n+    store.register_removed(\"bad_repr\",\n+        \"replaced with a generic attribute input check\");\n }"}, {"sha": "bc29020e79f2a380322734ce36e18e16f09b3c50", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -232,7 +232,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedAttributes {\n     fn check_attribute(&mut self, cx: &LateContext, attr: &ast::Attribute) {\n         debug!(\"checking attribute: {:?}\", attr);\n         // Note that check_name() marks the attribute as used if it matches.\n-        for &(ref name, ty, _) in BUILTIN_ATTRIBUTES {\n+        for &(name, ty, ..) in BUILTIN_ATTRIBUTES {\n             match ty {\n                 AttributeType::Whitelisted if attr.check_name(name) => {\n                     debug!(\"{:?} is Whitelisted\", name);\n@@ -256,7 +256,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedAttributes {\n             cx.span_lint(UNUSED_ATTRIBUTES, attr.span, \"unused attribute\");\n             // Is it a builtin attribute that must be used at the crate level?\n             let known_crate = BUILTIN_ATTRIBUTES.iter()\n-                .find(|&&(builtin, ty, _)| name == builtin && ty == AttributeType::CrateLevel)\n+                .find(|&&(builtin, ty, ..)| name == builtin && ty == AttributeType::CrateLevel)\n                 .is_some();\n \n             // Has a plugin registered this attribute as one that must be used at"}, {"sha": "39f580420cf0354fcf9a37bf9ae03fea1d57547f", "filename": "src/librustc_plugin/load.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibrustc_plugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibrustc_plugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fload.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -50,10 +50,7 @@ pub fn load_plugins(sess: &Session,\n \n             let plugins = match attr.meta_item_list() {\n                 Some(xs) => xs,\n-                None => {\n-                    call_malformed_plugin_attribute(sess, attr.span);\n-                    continue;\n-                }\n+                None => continue,\n             };\n \n             for plugin in plugins {"}, {"sha": "3a546f84469e60343a4c0689b034db5e743cc3a5", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -2144,12 +2144,7 @@ fn from_target_feature(\n ) {\n     let list = match attr.meta_item_list() {\n         Some(list) => list,\n-        None => {\n-            let msg = \"#[target_feature] attribute must be of the form \\\n-                       #[target_feature(..)]\";\n-            tcx.sess.span_err(attr.span, &msg);\n-            return;\n-        }\n+        None => return,\n     };\n     let rust_features = tcx.features();\n     for item in list {\n@@ -2347,14 +2342,6 @@ fn codegen_fn_attrs<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefId) -> Codegen\n                     ).emit();\n                 }\n                 codegen_fn_attrs.export_name = Some(s);\n-            } else {\n-                struct_span_err!(\n-                    tcx.sess,\n-                    attr.span,\n-                    E0558,\n-                    \"`export_name` attribute has invalid format\"\n-                ).span_label(attr.span, \"did you mean #[export_name=\\\"*\\\"]?\")\n-                 .emit();\n             }\n         } else if attr.check_name(\"target_feature\") {\n             if tcx.fn_sig(id).unsafety() == Unsafety::Normal {"}, {"sha": "4e3ea5ca9cf543ff16cf62895e80a58f1f47fba6", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -3611,29 +3611,6 @@ For more information about the inline attribute, https:\n read://doc.rust-lang.org/reference.html#inline-attributes\n \"##,\n \n-E0558: r##\"\n-The `export_name` attribute was malformed.\n-\n-Erroneous code example:\n-\n-```ignore (error-emitted-at-codegen-which-cannot-be-handled-by-compile_fail)\n-#[export_name] // error: `export_name` attribute has invalid format\n-pub fn something() {}\n-\n-fn main() {}\n-```\n-\n-The `export_name` attribute expects a string in order to determine the name of\n-the exported symbol. Example:\n-\n-```\n-#[export_name = \"some_function\"] // ok!\n-pub fn something() {}\n-\n-fn main() {}\n-```\n-\"##,\n-\n E0559: r##\"\n An unknown field was specified into an enum's structure variant.\n \n@@ -4722,6 +4699,7 @@ register_diagnostics! {\n //  E0372, // coherence not object safe\n     E0377, // the trait `CoerceUnsized` may only be implemented for a coercion\n            // between structures with the same definition\n+//  E0558, // replaced with a generic attribute input check\n     E0533, // `{}` does not name a unit variant, unit struct or a constant\n //  E0563, // cannot determine a type for this `impl Trait`: {} // removed in 6383de15\n     E0564, // only named lifetimes are allowed in `impl Trait`,"}, {"sha": "15e480496f7a8a5f1a87761e5611f273518cc902", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -436,9 +436,6 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                 }\n                 _ => unreachable!()\n             }\n-        } else {\n-            span_err!(diagnostic, attr.span(), E0548, \"incorrect stability attribute type\");\n-            continue\n         }\n     }\n "}, {"sha": "f83c1ec1455239e6bb973ee84fc1c15bc704421f", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -481,28 +481,33 @@ impl MetaItem {\n     {\n         // FIXME: Share code with `parse_path`.\n         let ident = match tokens.next() {\n-            Some(TokenTree::Token(span, Token::Ident(ident, _))) => {\n-                if let Some(TokenTree::Token(_, Token::ModSep)) = tokens.peek() {\n-                    let mut segments = vec![PathSegment::from_ident(ident.with_span_pos(span))];\n-                    tokens.next();\n-                    loop {\n-                        if let Some(TokenTree::Token(span,\n-                                                     Token::Ident(ident, _))) = tokens.next() {\n-                            segments.push(PathSegment::from_ident(ident.with_span_pos(span)));\n-                        } else {\n-                            return None;\n-                        }\n-                        if let Some(TokenTree::Token(_, Token::ModSep)) = tokens.peek() {\n-                            tokens.next();\n-                        } else {\n-                            break;\n-                        }\n+            Some(TokenTree::Token(span, token @ Token::Ident(..))) |\n+            Some(TokenTree::Token(span, token @ Token::ModSep)) => 'arm: {\n+                let mut segments = if let Token::Ident(ident, _) = token {\n+                    if let Some(TokenTree::Token(_, Token::ModSep)) = tokens.peek() {\n+                        tokens.next();\n+                        vec![PathSegment::from_ident(ident.with_span_pos(span))]\n+                    } else {\n+                        break 'arm Path::from_ident(ident.with_span_pos(span));\n                     }\n-                    let span = span.with_hi(segments.last().unwrap().ident.span.hi());\n-                    Path { span, segments }\n                 } else {\n-                    Path::from_ident(ident.with_span_pos(span))\n+                    vec![PathSegment::path_root(span)]\n+                };\n+                loop {\n+                    if let Some(TokenTree::Token(span,\n+                                                    Token::Ident(ident, _))) = tokens.next() {\n+                        segments.push(PathSegment::from_ident(ident.with_span_pos(span)));\n+                    } else {\n+                        return None;\n+                    }\n+                    if let Some(TokenTree::Token(_, Token::ModSep)) = tokens.peek() {\n+                        tokens.next();\n+                    } else {\n+                        break;\n+                    }\n                 }\n+                let span = span.with_hi(segments.last().unwrap().ident.span.hi());\n+                Path { span, segments }\n             }\n             Some(TokenTree::Token(_, Token::Interpolated(ref nt))) => match nt.0 {\n                 token::Nonterminal::NtIdent(ident, _) => Path::from_ident(ident),"}, {"sha": "50e0056f3b9f1ebca653cd7fedd65ded9ca85264", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -166,12 +166,9 @@ impl<'a> StripUnconfigured<'a> {\n                 true\n             };\n \n-            let meta_item = if let Some(meta_item) = attr.meta() {\n-                meta_item\n-            } else {\n-                // Not a well-formed meta-item. Why? We don't know.\n-                return error(attr.span, \"`cfg` is not a well-formed meta-item\",\n-                                        \"#[cfg(/* predicate */)]\");\n+            let meta_item = match attr.parse_meta(self.sess) {\n+                Ok(meta_item) => meta_item,\n+                Err(mut err) => { err.emit(); return true; }\n             };\n             let nested_meta_items = if let Some(nested_meta_items) = meta_item.meta_item_list() {\n                 nested_meta_items"}, {"sha": "2c367f1f402423e4f8f651da70be6b72410c229e", "filename": "src/libsyntax/diagnostic_list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibsyntax%2Fdiagnostic_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibsyntax%2Fdiagnostic_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic_list.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -389,12 +389,12 @@ register_diagnostics! {\n     E0545, // incorrect 'issue'\n     E0546, // missing 'feature'\n     E0547, // missing 'issue'\n-    E0548, // incorrect stability attribute type\n+//  E0548, // replaced with a generic attribute input check\n     E0549, // rustc_deprecated attribute must be paired with either stable or unstable attribute\n     E0550, // multiple deprecated attributes\n     E0551, // incorrect meta item\n     E0553, // multiple rustc_const_unstable attributes\n-    E0555, // malformed feature attribute, expected #![feature(...)]\n+//  E0555, // replaced with a generic attribute input check\n     E0556, // malformed feature, expected just one word\n     E0584, // file for module `..` found at both .. and ..\n     E0629, // missing 'feature' (rustc_const_unstable)"}, {"sha": "cf9671a14b38d883c11791bb2c2e44c5bedfc6f1", "filename": "src/libsyntax/early_buffered_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibsyntax%2Fearly_buffered_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibsyntax%2Fearly_buffered_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fearly_buffered_lints.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -11,6 +11,7 @@ use syntax_pos::MultiSpan;\n pub enum BufferedEarlyLintId {\n     /// Usage of `?` as a macro separator is deprecated.\n     QuestionMarkMacroSep,\n+    IllFormedAttributeInput,\n }\n \n /// Stores buffered lint info which can later be passed to `librustc`."}, {"sha": "7ef09ce5fbd4063bcd3881885fcb7b80ccf8f049", "filename": "src/libsyntax/ext/derive.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibsyntax%2Fext%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibsyntax%2Fext%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderive.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -15,6 +15,11 @@ pub fn collect_derives(cx: &mut ExtCtxt, attrs: &mut Vec<ast::Attribute>) -> Vec\n         if attr.path != \"derive\" {\n             return true;\n         }\n+        if !attr.is_meta_item_list() {\n+            cx.span_err(attr.span,\n+                        \"attribute must be of the form `#[derive(Trait1, Trait2, ...)]`\");\n+            return false;\n+        }\n \n         match attr.parse_list(cx.parse_sess,\n                               |parser| parser.parse_path_allowing_meta(PathStyle::Mod)) {"}, {"sha": "9b54e8f9c1f2c33ccc0802e3e7372bb207ccbe3c", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 242, "deletions": 143, "changes": 385, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -19,6 +19,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_target::spec::abi::Abi;\n use ast::{self, NodeId, PatKind, RangeEnd};\n use attr;\n+use early_buffered_lints::BufferedEarlyLintId;\n use source_map::Spanned;\n use edition::{ALL_EDITIONS, Edition};\n use syntax_pos::{Span, DUMMY_SP};\n@@ -715,6 +716,47 @@ pub enum AttributeGate {\n     Ungated,\n }\n \n+/// A template that the attribute input must match.\n+/// Only top-level shape (`#[attr]` vs `#[attr(...)]` vs `#[attr = ...]`) is considered now.\n+#[derive(Clone, Copy)]\n+pub struct AttributeTemplate {\n+    word: bool,\n+    list: Option<&'static str>,\n+    name_value_str: Option<&'static str>,\n+}\n+\n+impl AttributeTemplate {\n+    /// Check that the given meta-item is compatible with this template.\n+    fn compatible(&self, meta_item_kind: &ast::MetaItemKind) -> bool {\n+        match meta_item_kind {\n+            ast::MetaItemKind::Word => self.word,\n+            ast::MetaItemKind::List(..) => self.list.is_some(),\n+            ast::MetaItemKind::NameValue(lit) if lit.node.is_str() => self.name_value_str.is_some(),\n+            ast::MetaItemKind::NameValue(..) => false,\n+        }\n+    }\n+}\n+\n+/// A convenience macro for constructing attribute templates.\n+/// E.g. `template!(Word, List: \"description\")` means that the attribute\n+/// supports forms `#[attr]` and `#[attr(description)]`.\n+macro_rules! template {\n+    (Word) => { template!(@ true, None, None) };\n+    (List: $descr: expr) => { template!(@ false, Some($descr), None) };\n+    (NameValueStr: $descr: expr) => { template!(@ false, None, Some($descr)) };\n+    (Word, List: $descr: expr) => { template!(@ true, Some($descr), None) };\n+    (Word, NameValueStr: $descr: expr) => { template!(@ true, None, Some($descr)) };\n+    (List: $descr1: expr, NameValueStr: $descr2: expr) => {\n+        template!(@ false, Some($descr1), Some($descr2))\n+    };\n+    (Word, List: $descr1: expr, NameValueStr: $descr2: expr) => {\n+        template!(@ true, Some($descr1), Some($descr2))\n+    };\n+    (@ $word: expr, $list: expr, $name_value_str: expr) => { AttributeTemplate {\n+        word: $word, list: $list, name_value_str: $name_value_str\n+    } };\n+}\n+\n impl AttributeGate {\n     fn is_deprecated(&self) -> bool {\n         match *self {\n@@ -752,225 +794,241 @@ macro_rules! cfg_fn {\n     }}\n }\n \n-pub fn deprecated_attributes() -> Vec<&'static (&'static str, AttributeType, AttributeGate)> {\n-    BUILTIN_ATTRIBUTES.iter().filter(|a| a.2.is_deprecated()).collect()\n+pub fn deprecated_attributes() -> Vec<&'static (&'static str, AttributeType,\n+                                                AttributeTemplate, AttributeGate)> {\n+    BUILTIN_ATTRIBUTES.iter().filter(|(.., gate)| gate.is_deprecated()).collect()\n }\n \n pub fn is_builtin_attr_name(name: ast::Name) -> bool {\n-    BUILTIN_ATTRIBUTES.iter().any(|&(builtin_name, _, _)| name == builtin_name)\n+    BUILTIN_ATTRIBUTES.iter().any(|&(builtin_name, ..)| name == builtin_name)\n }\n \n pub fn is_builtin_attr(attr: &ast::Attribute) -> bool {\n-    BUILTIN_ATTRIBUTES.iter().any(|&(builtin_name, _, _)| attr.path == builtin_name)\n+    BUILTIN_ATTRIBUTES.iter().any(|&(builtin_name, ..)| attr.path == builtin_name)\n }\n \n // Attributes that have a special meaning to rustc or rustdoc\n-pub const BUILTIN_ATTRIBUTES: &[(&str, AttributeType, AttributeGate)] = &[\n+pub const BUILTIN_ATTRIBUTES: &[(&str, AttributeType, AttributeTemplate, AttributeGate)] = &[\n     // Normal attributes\n \n-    (\"warn\", Normal, Ungated),\n-    (\"allow\", Normal, Ungated),\n-    (\"forbid\", Normal, Ungated),\n-    (\"deny\", Normal, Ungated),\n-\n-    (\"macro_use\", Normal, Ungated),\n-    (\"macro_export\", Normal, Ungated),\n-    (\"plugin_registrar\", Normal, Ungated),\n-\n-    (\"cfg\", Normal, Ungated),\n-    (\"cfg_attr\", Normal, Ungated),\n-    (\"main\", Normal, Ungated),\n-    (\"start\", Normal, Ungated),\n-    (\"repr\", Normal, Ungated),\n-    (\"path\", Normal, Ungated),\n-    (\"abi\", Normal, Ungated),\n-    (\"automatically_derived\", Normal, Ungated),\n-    (\"no_mangle\", Normal, Ungated),\n-    (\"no_link\", Normal, Ungated),\n-    (\"derive\", Normal, Ungated),\n-    (\"should_panic\", Normal, Ungated),\n-    (\"ignore\", Normal, Ungated),\n-    (\"no_implicit_prelude\", Normal, Ungated),\n-    (\"reexport_test_harness_main\", Normal, Ungated),\n-    (\"link_args\", Normal, Gated(Stability::Unstable,\n+    (\"warn\", Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), Ungated),\n+    (\"allow\", Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), Ungated),\n+    (\"forbid\", Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), Ungated),\n+    (\"deny\", Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), Ungated),\n+\n+    (\"macro_use\", Normal, template!(Word, List: \"name1, name2, ...\"), Ungated),\n+    (\"macro_export\", Normal, template!(Word, List: \"local_inner_macros\"), Ungated),\n+    (\"plugin_registrar\", Normal, template!(Word), Ungated),\n+\n+    (\"cfg\", Normal, template!(List: \"predicate\"), Ungated),\n+    (\"cfg_attr\", Normal, template!(List: \"predicate, attr1, attr2, ...\"), Ungated),\n+    (\"main\", Normal, template!(Word), Ungated),\n+    (\"start\", Normal, template!(Word), Ungated),\n+    (\"repr\", Normal, template!(List: \"C, packed, ...\"), Ungated),\n+    (\"path\", Normal, template!(NameValueStr: \"file\"), Ungated),\n+    (\"automatically_derived\", Normal, template!(Word), Ungated),\n+    (\"no_mangle\", Normal, template!(Word), Ungated),\n+    (\"no_link\", Normal, template!(Word), Ungated),\n+    (\"derive\", Normal, template!(List: \"Trait1, Trait2, ...\"), Ungated),\n+    (\"should_panic\", Normal, template!(Word, List: r#\"expected = \"reason\"#, NameValueStr: \"reason\"),\n+                                Ungated),\n+    (\"ignore\", Normal, template!(Word, NameValueStr: \"reason\"), Ungated),\n+    (\"no_implicit_prelude\", Normal, template!(Word), Ungated),\n+    (\"reexport_test_harness_main\", Normal, template!(NameValueStr: \"name\"), Ungated),\n+    (\"link_args\", Normal, template!(NameValueStr: \"args\"), Gated(Stability::Unstable,\n                                 \"link_args\",\n                                 \"the `link_args` attribute is experimental and not \\\n                                  portable across platforms, it is recommended to \\\n                                  use `#[link(name = \\\"foo\\\")] instead\",\n                                 cfg_fn!(link_args))),\n-    (\"macro_escape\", Normal, Ungated),\n+    (\"macro_escape\", Normal, template!(Word), Ungated),\n \n     // RFC #1445.\n-    (\"structural_match\", Whitelisted, Gated(Stability::Unstable,\n+    (\"structural_match\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                             \"structural_match\",\n                                             \"the semantics of constant patterns is \\\n                                              not yet settled\",\n                                             cfg_fn!(structural_match))),\n \n     // RFC #2008\n-    (\"non_exhaustive\", Whitelisted, Gated(Stability::Unstable,\n+    (\"non_exhaustive\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                           \"non_exhaustive\",\n                                           \"non exhaustive is an experimental feature\",\n                                           cfg_fn!(non_exhaustive))),\n \n     // RFC #1268\n-    (\"marker\", Normal, Gated(Stability::Unstable,\n+    (\"marker\", Normal, template!(Word), Gated(Stability::Unstable,\n                              \"marker_trait_attr\",\n                              \"marker traits is an experimental feature\",\n                              cfg_fn!(marker_trait_attr))),\n \n-    (\"plugin\", CrateLevel, Gated(Stability::Unstable,\n+    (\"plugin\", CrateLevel, template!(List: \"name|name(args)\"), Gated(Stability::Unstable,\n                                  \"plugin\",\n                                  \"compiler plugins are experimental \\\n                                   and possibly buggy\",\n                                  cfg_fn!(plugin))),\n \n-    (\"no_std\", CrateLevel, Ungated),\n-    (\"no_core\", CrateLevel, Gated(Stability::Unstable,\n+    (\"no_std\", CrateLevel, template!(Word), Ungated),\n+    (\"no_core\", CrateLevel, template!(Word), Gated(Stability::Unstable,\n                                   \"no_core\",\n                                   \"no_core is experimental\",\n                                   cfg_fn!(no_core))),\n-    (\"lang\", Normal, Gated(Stability::Unstable,\n+    (\"lang\", Normal, template!(NameValueStr: \"name\"), Gated(Stability::Unstable,\n                            \"lang_items\",\n                            \"language items are subject to change\",\n                            cfg_fn!(lang_items))),\n-    (\"linkage\", Whitelisted, Gated(Stability::Unstable,\n+    (\"linkage\", Whitelisted, template!(NameValueStr: \"external|internal|...\"),\n+                                   Gated(Stability::Unstable,\n                                    \"linkage\",\n                                    \"the `linkage` attribute is experimental \\\n                                     and not portable across platforms\",\n                                    cfg_fn!(linkage))),\n-    (\"thread_local\", Whitelisted, Gated(Stability::Unstable,\n+    (\"thread_local\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                         \"thread_local\",\n                                         \"`#[thread_local]` is an experimental feature, and does \\\n                                          not currently handle destructors.\",\n                                         cfg_fn!(thread_local))),\n \n-    (\"rustc_on_unimplemented\", Normal, Gated(Stability::Unstable,\n+    (\"rustc_on_unimplemented\", Normal, template!(List:\n+                          r#\"/*opt*/ message = \"...\", /*opt*/ label = \"...\", /*opt*/ note = \"...\"\"#,\n+                          NameValueStr: \"message\"),\n+                                             Gated(Stability::Unstable,\n                                              \"on_unimplemented\",\n                                              \"the `#[rustc_on_unimplemented]` attribute \\\n                                               is an experimental feature\",\n                                              cfg_fn!(on_unimplemented))),\n-    (\"rustc_const_unstable\", Normal, Gated(Stability::Unstable,\n+    (\"rustc_const_unstable\", Normal, template!(List: r#\"feature = \"name\"\"#),\n+                                             Gated(Stability::Unstable,\n                                              \"rustc_const_unstable\",\n                                              \"the `#[rustc_const_unstable]` attribute \\\n                                               is an internal feature\",\n                                              cfg_fn!(rustc_const_unstable))),\n-    (\"global_allocator\", Normal, Ungated),\n-    (\"default_lib_allocator\", Whitelisted, Gated(Stability::Unstable,\n+    (\"global_allocator\", Normal, template!(Word), Ungated),\n+    (\"default_lib_allocator\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                             \"allocator_internals\",\n                                             \"the `#[default_lib_allocator]` \\\n                                              attribute is an experimental feature\",\n                                             cfg_fn!(allocator_internals))),\n-    (\"needs_allocator\", Normal, Gated(Stability::Unstable,\n+    (\"needs_allocator\", Normal, template!(Word), Gated(Stability::Unstable,\n                                       \"allocator_internals\",\n                                       \"the `#[needs_allocator]` \\\n                                        attribute is an experimental \\\n                                        feature\",\n                                       cfg_fn!(allocator_internals))),\n-    (\"panic_runtime\", Whitelisted, Gated(Stability::Unstable,\n+    (\"panic_runtime\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                          \"panic_runtime\",\n                                          \"the `#[panic_runtime]` attribute is \\\n                                           an experimental feature\",\n                                          cfg_fn!(panic_runtime))),\n-    (\"needs_panic_runtime\", Whitelisted, Gated(Stability::Unstable,\n+    (\"needs_panic_runtime\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                                \"needs_panic_runtime\",\n                                                \"the `#[needs_panic_runtime]` \\\n                                                 attribute is an experimental \\\n                                                 feature\",\n                                                cfg_fn!(needs_panic_runtime))),\n-    (\"rustc_outlives\", Normal, Gated(Stability::Unstable,\n+    (\"rustc_outlives\", Normal, template!(Word), Gated(Stability::Unstable,\n                                      \"rustc_attrs\",\n                                      \"the `#[rustc_outlives]` attribute \\\n                                       is just used for rustc unit tests \\\n                                       and will never be stable\",\n                                      cfg_fn!(rustc_attrs))),\n-    (\"rustc_variance\", Normal, Gated(Stability::Unstable,\n+    (\"rustc_variance\", Normal, template!(Word), Gated(Stability::Unstable,\n                                      \"rustc_attrs\",\n                                      \"the `#[rustc_variance]` attribute \\\n                                       is just used for rustc unit tests \\\n                                       and will never be stable\",\n                                      cfg_fn!(rustc_attrs))),\n-    (\"rustc_regions\", Normal, Gated(Stability::Unstable,\n+    (\"rustc_regions\", Normal, template!(Word), Gated(Stability::Unstable,\n                                     \"rustc_attrs\",\n                                     \"the `#[rustc_regions]` attribute \\\n                                      is just used for rustc unit tests \\\n                                      and will never be stable\",\n                                     cfg_fn!(rustc_attrs))),\n-    (\"rustc_error\", Whitelisted, Gated(Stability::Unstable,\n+    (\"rustc_error\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                        \"rustc_attrs\",\n                                        \"the `#[rustc_error]` attribute \\\n                                         is just used for rustc unit tests \\\n                                         and will never be stable\",\n                                        cfg_fn!(rustc_attrs))),\n-    (\"rustc_dump_user_substs\", Whitelisted, Gated(Stability::Unstable,\n+    (\"rustc_dump_user_substs\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                        \"rustc_attrs\",\n                                        \"this attribute \\\n                                         is just used for rustc unit tests \\\n                                         and will never be stable\",\n                                        cfg_fn!(rustc_attrs))),\n-    (\"rustc_if_this_changed\", Whitelisted, Gated(Stability::Unstable,\n+    (\"rustc_if_this_changed\", Whitelisted, template!(Word, List: \"DepNode\"),\n+                                                 Gated(Stability::Unstable,\n                                                  \"rustc_attrs\",\n                                                  \"the `#[rustc_if_this_changed]` attribute \\\n                                                   is just used for rustc unit tests \\\n                                                   and will never be stable\",\n                                                  cfg_fn!(rustc_attrs))),\n-    (\"rustc_then_this_would_need\", Whitelisted, Gated(Stability::Unstable,\n+    (\"rustc_then_this_would_need\", Whitelisted, template!(List: \"DepNode\"),\n+                                                      Gated(Stability::Unstable,\n                                                       \"rustc_attrs\",\n                                                       \"the `#[rustc_if_this_changed]` attribute \\\n                                                        is just used for rustc unit tests \\\n                                                        and will never be stable\",\n                                                       cfg_fn!(rustc_attrs))),\n-    (\"rustc_dirty\", Whitelisted, Gated(Stability::Unstable,\n+    (\"rustc_dirty\", Whitelisted, template!(List: r#\"cfg = \"...\", /*opt*/ label = \"...\",\n+                                                    /*opt*/ except = \"...\"\"#),\n+                                       Gated(Stability::Unstable,\n                                        \"rustc_attrs\",\n                                        \"the `#[rustc_dirty]` attribute \\\n                                         is just used for rustc unit tests \\\n                                         and will never be stable\",\n                                        cfg_fn!(rustc_attrs))),\n-    (\"rustc_clean\", Whitelisted, Gated(Stability::Unstable,\n+    (\"rustc_clean\", Whitelisted, template!(List: r#\"cfg = \"...\", /*opt*/ label = \"...\",\n+                                                    /*opt*/ except = \"...\"\"#),\n+                                       Gated(Stability::Unstable,\n                                        \"rustc_attrs\",\n                                        \"the `#[rustc_clean]` attribute \\\n                                         is just used for rustc unit tests \\\n                                         and will never be stable\",\n                                        cfg_fn!(rustc_attrs))),\n-    (\"rustc_partition_reused\", Whitelisted, Gated(Stability::Unstable,\n+    (\"rustc_partition_reused\", Whitelisted, template!(List: r#\"cfg = \"...\", module = \"...\"\"#),\n+                                                  Gated(Stability::Unstable,\n                                                   \"rustc_attrs\",\n                                                   \"this attribute \\\n                                                    is just used for rustc unit tests \\\n                                                    and will never be stable\",\n                                                   cfg_fn!(rustc_attrs))),\n-    (\"rustc_partition_codegened\", Whitelisted, Gated(Stability::Unstable,\n+    (\"rustc_partition_codegened\", Whitelisted, template!(List: r#\"cfg = \"...\", module = \"...\"\"#),\n+                                                      Gated(Stability::Unstable,\n                                                       \"rustc_attrs\",\n                                                       \"this attribute \\\n                                                        is just used for rustc unit tests \\\n                                                        and will never be stable\",\n                                                       cfg_fn!(rustc_attrs))),\n-    (\"rustc_expected_cgu_reuse\", Whitelisted, Gated(Stability::Unstable,\n+    (\"rustc_expected_cgu_reuse\", Whitelisted, template!(List: r#\"cfg = \"...\", module = \"...\",\n+                                                              kind = \"...\"\"#),\n+                                                    Gated(Stability::Unstable,\n                                                     \"rustc_attrs\",\n                                                     \"this attribute \\\n                                                      is just used for rustc unit tests \\\n                                                      and will never be stable\",\n                                                     cfg_fn!(rustc_attrs))),\n-    (\"rustc_synthetic\", Whitelisted, Gated(Stability::Unstable,\n+    (\"rustc_synthetic\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                                       \"rustc_attrs\",\n                                                       \"this attribute \\\n                                                        is just used for rustc unit tests \\\n                                                        and will never be stable\",\n                                                       cfg_fn!(rustc_attrs))),\n-    (\"rustc_symbol_name\", Whitelisted, Gated(Stability::Unstable,\n+    (\"rustc_symbol_name\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                              \"rustc_attrs\",\n                                              \"internal rustc attributes will never be stable\",\n                                              cfg_fn!(rustc_attrs))),\n-    (\"rustc_item_path\", Whitelisted, Gated(Stability::Unstable,\n+    (\"rustc_item_path\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                            \"rustc_attrs\",\n                                            \"internal rustc attributes will never be stable\",\n                                            cfg_fn!(rustc_attrs))),\n-    (\"rustc_mir\", Whitelisted, Gated(Stability::Unstable,\n+    (\"rustc_mir\", Whitelisted, template!(List: \"arg1, arg2, ...\"), Gated(Stability::Unstable,\n                                      \"rustc_attrs\",\n                                      \"the `#[rustc_mir]` attribute \\\n                                       is just used for rustc unit tests \\\n                                       and will never be stable\",\n                                      cfg_fn!(rustc_attrs))),\n-    (\"rustc_inherit_overflow_checks\", Whitelisted, Gated(Stability::Unstable,\n+    (\"rustc_inherit_overflow_checks\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                                          \"rustc_attrs\",\n                                                          \"the `#[rustc_inherit_overflow_checks]` \\\n                                                           attribute is just used to control \\\n@@ -979,104 +1037,102 @@ pub const BUILTIN_ATTRIBUTES: &[(&str, AttributeType, AttributeGate)] = &[\n                                                           across crates and will never be stable\",\n                                                           cfg_fn!(rustc_attrs))),\n \n-    (\"rustc_dump_program_clauses\", Whitelisted, Gated(Stability::Unstable,\n+    (\"rustc_dump_program_clauses\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                                      \"rustc_attrs\",\n                                                      \"the `#[rustc_dump_program_clauses]` \\\n                                                       attribute is just used for rustc unit \\\n                                                       tests and will never be stable\",\n                                                      cfg_fn!(rustc_attrs))),\n-    (\"rustc_test_marker\", Normal, Gated(Stability::Unstable,\n+    (\"rustc_test_marker\", Normal, template!(Word), Gated(Stability::Unstable,\n                                      \"rustc_attrs\",\n                                      \"the `#[rustc_test_marker]` attribute \\\n                                       is used internally to track tests\",\n                                      cfg_fn!(rustc_attrs))),\n-    (\"rustc_transparent_macro\", Whitelisted, Gated(Stability::Unstable,\n+    (\"rustc_transparent_macro\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                                    \"rustc_attrs\",\n                                                    \"used internally for testing macro hygiene\",\n                                                     cfg_fn!(rustc_attrs))),\n-\n-    // RFC #2094\n-    (\"nll\", Whitelisted, Gated(Stability::Unstable,\n-                               \"nll\",\n-                               \"Non lexical lifetimes\",\n-                               cfg_fn!(nll))),\n-    (\"compiler_builtins\", Whitelisted, Gated(Stability::Unstable,\n+    (\"compiler_builtins\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                              \"compiler_builtins\",\n                                              \"the `#[compiler_builtins]` attribute is used to \\\n                                               identify the `compiler_builtins` crate which \\\n                                               contains compiler-rt intrinsics and will never be \\\n                                               stable\",\n                                           cfg_fn!(compiler_builtins))),\n-    (\"sanitizer_runtime\", Whitelisted, Gated(Stability::Unstable,\n+    (\"sanitizer_runtime\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                              \"sanitizer_runtime\",\n                                              \"the `#[sanitizer_runtime]` attribute is used to \\\n                                               identify crates that contain the runtime of a \\\n                                               sanitizer and will never be stable\",\n                                              cfg_fn!(sanitizer_runtime))),\n-    (\"profiler_runtime\", Whitelisted, Gated(Stability::Unstable,\n+    (\"profiler_runtime\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                              \"profiler_runtime\",\n                                              \"the `#[profiler_runtime]` attribute is used to \\\n                                               identify the `profiler_builtins` crate which \\\n                                               contains the profiler runtime and will never be \\\n                                               stable\",\n                                              cfg_fn!(profiler_runtime))),\n \n-    (\"allow_internal_unstable\", Normal, Gated(Stability::Unstable,\n+    (\"allow_internal_unstable\", Normal, template!(Word), Gated(Stability::Unstable,\n                                               \"allow_internal_unstable\",\n                                               EXPLAIN_ALLOW_INTERNAL_UNSTABLE,\n                                               cfg_fn!(allow_internal_unstable))),\n \n-    (\"allow_internal_unsafe\", Normal, Gated(Stability::Unstable,\n+    (\"allow_internal_unsafe\", Normal, template!(Word), Gated(Stability::Unstable,\n                                             \"allow_internal_unsafe\",\n                                             EXPLAIN_ALLOW_INTERNAL_UNSAFE,\n                                             cfg_fn!(allow_internal_unsafe))),\n \n-    (\"fundamental\", Whitelisted, Gated(Stability::Unstable,\n+    (\"fundamental\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                        \"fundamental\",\n                                        \"the `#[fundamental]` attribute \\\n                                         is an experimental feature\",\n                                        cfg_fn!(fundamental))),\n \n-    (\"proc_macro_derive\", Normal, Ungated),\n+    (\"proc_macro_derive\", Normal, template!(List: \"TraitName, \\\n+                                                   /*opt*/ attributes(name1, name2, ...)\"),\n+                                       Ungated),\n \n-    (\"rustc_copy_clone_marker\", Whitelisted, Gated(Stability::Unstable,\n+    (\"rustc_copy_clone_marker\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                                    \"rustc_attrs\",\n                                                    \"internal implementation detail\",\n                                                    cfg_fn!(rustc_attrs))),\n \n     // FIXME: #14408 whitelist docs since rustdoc looks at them\n-    (\"doc\", Whitelisted, Ungated),\n+    (\"doc\", Whitelisted, template!(List: \"hidden|inline|...\", NameValueStr: \"string\"), Ungated),\n \n     // FIXME: #14406 these are processed in codegen, which happens after the\n     // lint pass\n-    (\"cold\", Whitelisted, Ungated),\n-    (\"naked\", Whitelisted, Gated(Stability::Unstable,\n+    (\"cold\", Whitelisted, template!(Word), Ungated),\n+    (\"naked\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                  \"naked_functions\",\n                                  \"the `#[naked]` attribute \\\n                                   is an experimental feature\",\n                                  cfg_fn!(naked_functions))),\n-    (\"target_feature\", Whitelisted, Ungated),\n-    (\"export_name\", Whitelisted, Ungated),\n-    (\"inline\", Whitelisted, Ungated),\n-    (\"link\", Whitelisted, Ungated),\n-    (\"link_name\", Whitelisted, Ungated),\n-    (\"link_section\", Whitelisted, Ungated),\n-    (\"no_builtins\", Whitelisted, Ungated),\n-    (\"no_mangle\", Whitelisted, Ungated),\n-    (\"no_debug\", Whitelisted, Gated(\n+    (\"target_feature\", Whitelisted, template!(List: r#\"enable = \"name\"\"#), Ungated),\n+    (\"export_name\", Whitelisted, template!(NameValueStr: \"name\"), Ungated),\n+    (\"inline\", Whitelisted, template!(Word, List: \"always|never\"), Ungated),\n+    (\"link\", Whitelisted, template!(List: r#\"name = \"...\", /*opt*/ kind = \"dylib|static|...\",\n+                                             /*opt*/ cfg = \"...\"\"#), Ungated),\n+    (\"link_name\", Whitelisted, template!(NameValueStr: \"name\"), Ungated),\n+    (\"link_section\", Whitelisted, template!(NameValueStr: \"name\"), Ungated),\n+    (\"no_builtins\", Whitelisted, template!(Word), Ungated),\n+    (\"no_mangle\", Whitelisted, template!(Word), Ungated),\n+    (\"no_debug\", Whitelisted, template!(Word), Gated(\n         Stability::Deprecated(\"https://github.com/rust-lang/rust/issues/29721\", None),\n         \"no_debug\",\n         \"the `#[no_debug]` attribute was an experimental feature that has been \\\n          deprecated due to lack of demand\",\n         cfg_fn!(no_debug))),\n-    (\"omit_gdb_pretty_printer_section\", Whitelisted, Gated(Stability::Unstable,\n+    (\"omit_gdb_pretty_printer_section\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                                        \"omit_gdb_pretty_printer_section\",\n                                                        \"the `#[omit_gdb_pretty_printer_section]` \\\n                                                         attribute is just used for the Rust test \\\n                                                         suite\",\n                                                        cfg_fn!(omit_gdb_pretty_printer_section))),\n     (\"unsafe_destructor_blind_to_params\",\n      Normal,\n+     template!(Word),\n      Gated(Stability::Deprecated(\"https://github.com/rust-lang/rust/issues/34761\",\n                                  Some(\"replace this attribute with `#[may_dangle]`\")),\n            \"dropck_parametricity\",\n@@ -1085,93 +1141,91 @@ pub const BUILTIN_ATTRIBUTES: &[(&str, AttributeType, AttributeGate)] = &[\n            cfg_fn!(dropck_parametricity))),\n     (\"may_dangle\",\n      Normal,\n+     template!(Word),\n      Gated(Stability::Unstable,\n            \"dropck_eyepatch\",\n            \"may_dangle has unstable semantics and may be removed in the future\",\n            cfg_fn!(dropck_eyepatch))),\n-    (\"unwind\", Whitelisted, Gated(Stability::Unstable,\n+    (\"unwind\", Whitelisted, template!(List: \"allowed\"), Gated(Stability::Unstable,\n                                   \"unwind_attributes\",\n                                   \"#[unwind] is experimental\",\n                                   cfg_fn!(unwind_attributes))),\n-    (\"used\", Whitelisted, Ungated),\n+    (\"used\", Whitelisted, template!(Word), Ungated),\n \n     // used in resolve\n-    (\"prelude_import\", Whitelisted, Gated(Stability::Unstable,\n+    (\"prelude_import\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                           \"prelude_import\",\n                                           \"`#[prelude_import]` is for use by rustc only\",\n                                           cfg_fn!(prelude_import))),\n \n     // FIXME: #14407 these are only looked at on-demand so we can't\n     // guarantee they'll have already been checked\n-    (\"rustc_deprecated\", Whitelisted, Ungated),\n-    (\"must_use\", Whitelisted, Ungated),\n-    (\"stable\", Whitelisted, Ungated),\n-    (\"unstable\", Whitelisted, Ungated),\n-    (\"deprecated\", Normal, Ungated),\n-\n-    (\"rustc_paren_sugar\", Normal, Gated(Stability::Unstable,\n+    (\"rustc_deprecated\", Whitelisted, template!(List: r#\"since = \"version\", reason = \"...\"\"#),\n+                                        Ungated),\n+    (\"must_use\", Whitelisted, template!(Word, NameValueStr: \"reason\"), Ungated),\n+    (\"stable\", Whitelisted, template!(List: r#\"feature = \"name\", since = \"version\"\"#), Ungated),\n+    (\"unstable\", Whitelisted, template!(List: r#\"feature = \"name\", reason = \"...\", issue = \"N\"\"#),\n+                                        Ungated),\n+    (\"deprecated\", Normal, template!(Word, List: r#\"/*opt*/ since = \"version\",\n+                                                    /*opt*/ note = \"reason\"#,\n+                                                    NameValueStr: \"reason\"), Ungated),\n+\n+    (\"rustc_paren_sugar\", Normal, template!(Word), Gated(Stability::Unstable,\n                                         \"unboxed_closures\",\n                                         \"unboxed_closures are still evolving\",\n                                         cfg_fn!(unboxed_closures))),\n \n-    (\"windows_subsystem\", Whitelisted, Ungated),\n+    (\"windows_subsystem\", Whitelisted, template!(NameValueStr: \"windows|console\"), Ungated),\n \n-    (\"proc_macro_attribute\", Normal, Ungated),\n-    (\"proc_macro\", Normal, Ungated),\n+    (\"proc_macro_attribute\", Normal, template!(Word), Ungated),\n+    (\"proc_macro\", Normal, template!(Word), Ungated),\n \n-    (\"rustc_proc_macro_decls\", Normal, Gated(Stability::Unstable,\n+    (\"rustc_proc_macro_decls\", Normal, template!(Word), Gated(Stability::Unstable,\n                                              \"rustc_proc_macro_decls\",\n                                              \"used internally by rustc\",\n                                              cfg_fn!(rustc_attrs))),\n \n-    (\"allow_fail\", Normal, Gated(Stability::Unstable,\n+    (\"allow_fail\", Normal, template!(Word), Gated(Stability::Unstable,\n                                  \"allow_fail\",\n                                  \"allow_fail attribute is currently unstable\",\n                                  cfg_fn!(allow_fail))),\n \n-    (\"rustc_std_internal_symbol\", Whitelisted, Gated(Stability::Unstable,\n+    (\"rustc_std_internal_symbol\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                      \"rustc_attrs\",\n                                      \"this is an internal attribute that will \\\n                                       never be stable\",\n                                      cfg_fn!(rustc_attrs))),\n \n     // whitelists \"identity-like\" conversion methods to suggest on type mismatch\n-    (\"rustc_conversion_suggestion\", Whitelisted, Gated(Stability::Unstable,\n+    (\"rustc_conversion_suggestion\", Whitelisted, template!(Word), Gated(Stability::Unstable,\n                                                        \"rustc_attrs\",\n                                                        \"this is an internal attribute that will \\\n                                                         never be stable\",\n                                                        cfg_fn!(rustc_attrs))),\n \n-    (\"rustc_args_required_const\", Whitelisted, Gated(Stability::Unstable,\n+    (\"rustc_args_required_const\", Whitelisted, template!(List: \"N\"), Gated(Stability::Unstable,\n                                  \"rustc_attrs\",\n                                  \"never will be stable\",\n                                  cfg_fn!(rustc_attrs))),\n-\n-    // RFC #2093\n-    (\"infer_static_outlives_requirements\", Normal, Gated(Stability::Unstable,\n-                                   \"infer_static_outlives_requirements\",\n-                                   \"infer 'static lifetime requirements\",\n-                                   cfg_fn!(infer_static_outlives_requirements))),\n-\n     // RFC 2070\n-    (\"panic_handler\", Normal, Ungated),\n+    (\"panic_handler\", Normal, template!(Word), Ungated),\n \n-    (\"alloc_error_handler\", Normal, Gated(Stability::Unstable,\n+    (\"alloc_error_handler\", Normal, template!(Word), Gated(Stability::Unstable,\n                            \"alloc_error_handler\",\n                            \"#[alloc_error_handler] is an unstable feature\",\n                            cfg_fn!(alloc_error_handler))),\n \n     // Crate level attributes\n-    (\"crate_name\", CrateLevel, Ungated),\n-    (\"crate_type\", CrateLevel, Ungated),\n-    (\"crate_id\", CrateLevel, Ungated),\n-    (\"feature\", CrateLevel, Ungated),\n-    (\"no_start\", CrateLevel, Ungated),\n-    (\"no_main\", CrateLevel, Ungated),\n-    (\"no_builtins\", CrateLevel, Ungated),\n-    (\"recursion_limit\", CrateLevel, Ungated),\n-    (\"type_length_limit\", CrateLevel, Ungated),\n-    (\"test_runner\", CrateLevel, Gated(Stability::Unstable,\n+    (\"crate_name\", CrateLevel, template!(NameValueStr: \"name\"), Ungated),\n+    (\"crate_type\", CrateLevel, template!(NameValueStr: \"bin|lib|...\"), Ungated),\n+    (\"crate_id\", CrateLevel, template!(NameValueStr: \"ignored\"), Ungated),\n+    (\"feature\", CrateLevel, template!(List: \"name1, name1, ...\"), Ungated),\n+    (\"no_start\", CrateLevel, template!(Word), Ungated),\n+    (\"no_main\", CrateLevel, template!(Word), Ungated),\n+    (\"no_builtins\", CrateLevel, template!(Word), Ungated),\n+    (\"recursion_limit\", CrateLevel, template!(NameValueStr: \"N\"), Ungated),\n+    (\"type_length_limit\", CrateLevel, template!(NameValueStr: \"N\"), Ungated),\n+    (\"test_runner\", CrateLevel, template!(List: \"path\"), Gated(Stability::Unstable,\n                     \"custom_test_frameworks\",\n                     EXPLAIN_CUSTOM_TEST_FRAMEWORKS,\n                     cfg_fn!(custom_test_frameworks))),\n@@ -1247,7 +1301,7 @@ impl<'a> Context<'a> {\n     fn check_attribute(&self, attr: &ast::Attribute, is_macro: bool) {\n         debug!(\"check_attribute(attr = {:?})\", attr);\n         let name = attr.name().as_str();\n-        for &(n, ty, ref gateage) in BUILTIN_ATTRIBUTES {\n+        for &(n, ty, _template, ref gateage) in BUILTIN_ATTRIBUTES {\n             if name == n {\n                 if let Gated(_, name, desc, ref has_feature) = *gateage {\n                     gate_feature_fn!(self, has_feature, attr.span, name, desc, GateStrength::Hard);\n@@ -1482,6 +1536,52 @@ impl<'a> PostExpansionVisitor<'a> {\n             Abi::System => {}\n         }\n     }\n+\n+    fn check_builtin_attribute(&mut self, attr: &ast::Attribute, name: &str,\n+                               template: AttributeTemplate) {\n+        // Some special attributes like `cfg` must be checked\n+        // before the generic check, so we skip them here.\n+        let should_skip = |name| name == \"cfg\";\n+        // Some of previously accepted forms were used in practice,\n+        // report them as warnings for now.\n+        let should_warn = |name| name == \"doc\" || name == \"ignore\" ||\n+                                 name == \"inline\" || name == \"link\";\n+\n+        match attr.parse_meta(self.context.parse_sess) {\n+            Ok(meta) => if !should_skip(name) && !template.compatible(&meta.node) {\n+                let mut msg = \"attribute must be of the form \".to_owned();\n+                let mut first = true;\n+                if template.word {\n+                    first = false;\n+                    msg.push_str(&format!(\"`#[{}{}]`\", name, \"\"));\n+                }\n+                if let Some(descr) = template.list {\n+                    if !first {\n+                        msg.push_str(\" or \");\n+                    }\n+                    first = false;\n+                    msg.push_str(&format!(\"`#[{}({})]`\", name, descr));\n+                }\n+                if let Some(descr) = template.name_value_str {\n+                    if !first {\n+                        msg.push_str(\" or \");\n+                    }\n+                    msg.push_str(&format!(\"`#[{} = \\\"{}\\\"]`\", name, descr));\n+                }\n+                if should_warn(name) {\n+                    self.context.parse_sess.buffer_lint(\n+                        BufferedEarlyLintId::IllFormedAttributeInput,\n+                        meta.span,\n+                        ast::CRATE_NODE_ID,\n+                        &msg,\n+                    );\n+                } else {\n+                    self.context.parse_sess.span_diagnostic.span_err(meta.span, &msg);\n+                }\n+            }\n+            Err(mut err) => err.emit(),\n+        }\n+    }\n }\n \n impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n@@ -1517,12 +1617,15 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             }\n         }\n \n-        if !self.context.features.unrestricted_attribute_tokens {\n-            // Unfortunately, `parse_meta` cannot be called speculatively\n-            // because it can report errors by itself, so we have to call it\n-            // only if the feature is disabled.\n-            if let Err(mut err) = attr.parse_meta(self.context.parse_sess) {\n-                err.help(\"try enabling `#![feature(unrestricted_attribute_tokens)]`\").emit()\n+        match BUILTIN_ATTRIBUTES.iter().find(|(name, ..)| attr.path == name) {\n+            Some(&(name, _, template, _)) => self.check_builtin_attribute(attr, name, template),\n+            None => if !self.context.features.unrestricted_attribute_tokens {\n+                // Unfortunately, `parse_meta` cannot be called speculatively\n+                // because it can report errors by itself, so we have to call it\n+                // only if the feature is disabled.\n+                if let Err(mut err) = attr.parse_meta(self.context.parse_sess) {\n+                    err.help(\"try enabling `#![feature(unrestricted_attribute_tokens)]`\").emit()\n+                }\n             }\n         }\n     }\n@@ -1926,11 +2029,7 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n \n         let list = match attr.meta_item_list() {\n             Some(list) => list,\n-            None => {\n-                span_err!(span_handler, attr.span, E0555,\n-                          \"malformed feature attribute, expected #![feature(...)]\");\n-                continue\n-            }\n+            None => continue,\n         };\n \n         for mi in list {"}, {"sha": "df22dacce1a755ef4b399e4f1b62e25243cecb1b", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -10,6 +10,7 @@\n        test(attr(deny(warnings))))]\n \n #![feature(crate_visibility_modifier)]\n+#![feature(label_break_value)]\n #![feature(nll)]\n #![feature(rustc_attrs)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "b352486e39a64656405d1a9834fee5d021432f94", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -428,14 +428,11 @@ fn is_test_case(i: &ast::Item) -> bool {\n \n fn get_test_runner(sd: &errors::Handler, krate: &ast::Crate) -> Option<ast::Path> {\n     let test_attr = attr::find_by_name(&krate.attrs, \"test_runner\")?;\n-    if let Some(meta_list) = test_attr.meta_item_list() {\n+    test_attr.meta_item_list().map(|meta_list| {\n         if meta_list.len() != 1 {\n             sd.span_fatal(test_attr.span(),\n                 \"#![test_runner(..)] accepts exactly 1 argument\").raise()\n         }\n-        Some(meta_list[0].word().as_ref().unwrap().ident.clone())\n-    } else {\n-        sd.span_fatal(test_attr.span(),\n-            \"test_runner must be of the form #[test_runner(..)]\").raise()\n-    }\n+        meta_list[0].word().as_ref().unwrap().ident.clone()\n+    })\n }"}, {"sha": "1d272712cacc86b121b9a6418c6c99b8b51439e2", "filename": "src/libsyntax_ext/proc_macro_decls.rs", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_decls.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -105,12 +105,7 @@ impl<'a> CollectProcMacros<'a> {\n         // `#[proc_macro_derive(Foo, attributes(A, ..))]`\n         let list = match attr.meta_item_list() {\n             Some(list) => list,\n-            None => {\n-                self.handler.span_err(attr.span(),\n-                                      \"attribute must be of form: \\\n-                                       #[proc_macro_derive(TraitName)]\");\n-                return\n-            }\n+            None => return,\n         };\n         if list.len() != 1 && list.len() != 2 {\n             self.handler.span_err(attr.span(),\n@@ -182,13 +177,7 @@ impl<'a> CollectProcMacros<'a> {\n         }\n     }\n \n-    fn collect_attr_proc_macro(&mut self, item: &'a ast::Item, attr: &'a ast::Attribute) {\n-        if !attr.is_word() {\n-            self.handler.span_err(attr.span, \"`#[proc_macro_attribute]` attribute \\\n-                does not take any arguments\");\n-            return;\n-        }\n-\n+    fn collect_attr_proc_macro(&mut self, item: &'a ast::Item) {\n         if self.in_root && item.vis.node.is_pub() {\n             self.attr_macros.push(ProcMacroDef {\n                 span: item.span,\n@@ -205,13 +194,7 @@ impl<'a> CollectProcMacros<'a> {\n         }\n     }\n \n-    fn collect_bang_proc_macro(&mut self, item: &'a ast::Item, attr: &'a ast::Attribute) {\n-        if !attr.is_word() {\n-            self.handler.span_err(attr.span, \"`#[proc_macro]` attribute \\\n-                does not take any arguments\");\n-            return;\n-        }\n-\n+    fn collect_bang_proc_macro(&mut self, item: &'a ast::Item) {\n         if self.in_root && item.vis.node.is_pub() {\n             self.bang_macros.push(ProcMacroDef {\n                 span: item.span,\n@@ -308,9 +291,9 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n         if attr.check_name(\"proc_macro_derive\") {\n             self.collect_custom_derive(item, attr);\n         } else if attr.check_name(\"proc_macro_attribute\") {\n-            self.collect_attr_proc_macro(item, attr);\n+            self.collect_attr_proc_macro(item);\n         } else if attr.check_name(\"proc_macro\") {\n-            self.collect_bang_proc_macro(item, attr);\n+            self.collect_bang_proc_macro(item);\n         };\n \n         let prev_in_root = mem::replace(&mut self.in_root, false);"}, {"sha": "11c734b299c1e84f0b28c06fc984ea7d6f1fe544", "filename": "src/libsyntax_ext/test.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibsyntax_ext%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibsyntax_ext%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -214,20 +214,8 @@ fn should_panic(cx: &ExtCtxt, i: &ast::Item) -> ShouldPanic {\n     match attr::find_by_name(&i.attrs, \"should_panic\") {\n         Some(attr) => {\n             let ref sd = cx.parse_sess.span_diagnostic;\n-            if attr.is_value_str() {\n-                sd.struct_span_warn(\n-                    attr.span(),\n-                    \"attribute must be of the form: \\\n-                     `#[should_panic]` or \\\n-                     `#[should_panic(expected = \\\"error message\\\")]`\"\n-                ).note(\"Errors in this attribute were erroneously allowed \\\n-                        and will become a hard error in a future release.\")\n-                .emit();\n-                return ShouldPanic::Yes(None);\n-            }\n+\n             match attr.meta_item_list() {\n-                // Handle #[should_panic]\n-                None => ShouldPanic::Yes(None),\n                 // Handle #[should_panic(expected = \"foo\")]\n                 Some(list) => {\n                     let msg = list.iter()\n@@ -247,6 +235,8 @@ fn should_panic(cx: &ExtCtxt, i: &ast::Item) -> ShouldPanic {\n                         ShouldPanic::Yes(msg)\n                     }\n                 },\n+                // Handle #[should_panic] and #[should_panic = \"expected\"]\n+                None => ShouldPanic::Yes(attr.value_str())\n             }\n         }\n         None => ShouldPanic::No,"}, {"sha": "a9e2626a57e5dacc1646e48fa26f2af54f9260e6", "filename": "src/libterm/terminfo/searcher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fsearcher.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -66,7 +66,7 @@ pub fn get_dbpath_for_term(term: &str) -> Option<PathBuf> {\n }\n \n #[test]\n-#[ignore(reason = \"buildbots don't have ncurses installed and I can't mock everything I need\")]\n+#[ignore = \"buildbots don't have ncurses installed and I can't mock everything I need\"]\n fn test_get_dbpath_for_term() {\n     // woefully inadequate test coverage\n     // note: current tests won't work with non-standard terminfo hierarchies (e.g., macOS's)"}, {"sha": "c5aa903f9491f26261b0391c3ba032da5db6b8e7", "filename": "src/test/ui/conditional-compilation/cfg-attr-syntax-validation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -27,7 +27,8 @@ struct S9;\n \n macro_rules! generate_s10 {\n     ($expr: expr) => {\n-        #[cfg(feature = $expr)] //~ ERROR `cfg` is not a well-formed meta-item\n+        #[cfg(feature = $expr)]\n+        //~^ ERROR expected unsuffixed literal or identifier, found concat!(\"nonexistent\")\n         struct S10;\n     }\n }"}, {"sha": "bcf13ead2f4f7eb7783d11394bb30e4396aadb8a", "filename": "src/test/ui/conditional-compilation/cfg-attr-syntax-validation.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -52,11 +52,11 @@ error[E0565]: literal in `cfg` predicate value must be a string\n LL | #[cfg(a = b\"hi\")]  //~ ERROR literal in `cfg` predicate value must be a string\n    |           ^^^^^ help: consider removing the prefix: `\"hi\"`\n \n-error: `cfg` is not a well-formed meta-item\n-  --> $DIR/cfg-attr-syntax-validation.rs:30:9\n+error: expected unsuffixed literal or identifier, found concat!(\"nonexistent\")\n+  --> $DIR/cfg-attr-syntax-validation.rs:30:15\n    |\n-LL |         #[cfg(feature = $expr)] //~ ERROR `cfg` is not a well-formed meta-item\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^ help: expected syntax is: `#[cfg(/* predicate */)]`\n+LL |         #[cfg(feature = $expr)]\n+   |               ^^^^^^^\n ...\n LL | generate_s10!(concat!(\"nonexistent\"));\n    | -------------------------------------- in this macro invocation"}, {"sha": "882484146152da358edf97d419aa5d4d7387020a", "filename": "src/test/ui/derives/deriving-meta-empty-trait-list.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-empty-trait-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-empty-trait-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-empty-trait-list.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,9 +1,4 @@\n-// run-pass\n-\n-#![allow(dead_code)]\n-\n-#[derive]   //~ WARNING empty trait list in `derive`\n-struct Foo;\n+// compile-pass\n \n #[derive()] //~ WARNING empty trait list in `derive`\n struct Bar;"}, {"sha": "191bb780f7e1fc3433d79a60becceadab34a7400", "filename": "src/test/ui/derives/deriving-meta-empty-trait-list.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-empty-trait-list.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-empty-trait-list.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-meta-empty-trait-list.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,11 +1,5 @@\n warning: empty trait list in `derive`\n-  --> $DIR/deriving-meta-empty-trait-list.rs:5:1\n-   |\n-LL | #[derive]   //~ WARNING empty trait list in `derive`\n-   | ^^^^^^^^^\n-\n-warning: empty trait list in `derive`\n-  --> $DIR/deriving-meta-empty-trait-list.rs:8:1\n+  --> $DIR/deriving-meta-empty-trait-list.rs:3:1\n    |\n LL | #[derive()] //~ WARNING empty trait list in `derive`\n    | ^^^^^^^^^^^"}, {"sha": "8e8062436d6e599cfeff183486a66b6a00e1dcb6", "filename": "src/test/ui/error-codes/E0232.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cccaf9a8c69219c8267e406f92fef895fbba80f2/src%2Ftest%2Fui%2Ferror-codes%2FE0232.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccaf9a8c69219c8267e406f92fef895fbba80f2/src%2Ftest%2Fui%2Ferror-codes%2FE0232.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0232.rs?ref=cccaf9a8c69219c8267e406f92fef895fbba80f2", "patch": "@@ -1,8 +0,0 @@\n-#![feature(on_unimplemented)]\n-\n-#[rustc_on_unimplemented]\n-//~^ ERROR E0232\n-trait Bar {}\n-\n-fn main() {\n-}"}, {"sha": "9e9155b1d323c13590058ff73c7a8a7f8c07bc7f", "filename": "src/test/ui/error-codes/E0232.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cccaf9a8c69219c8267e406f92fef895fbba80f2/src%2Ftest%2Fui%2Ferror-codes%2FE0232.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cccaf9a8c69219c8267e406f92fef895fbba80f2/src%2Ftest%2Fui%2Ferror-codes%2FE0232.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0232.stderr?ref=cccaf9a8c69219c8267e406f92fef895fbba80f2", "patch": "@@ -1,11 +0,0 @@\n-error[E0232]: `#[rustc_on_unimplemented]` requires a value\n-  --> $DIR/E0232.rs:3:1\n-   |\n-LL | #[rustc_on_unimplemented]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ value required here\n-   |\n-   = note: eg `#[rustc_on_unimplemented(message=\"foo\")]`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0232`."}, {"sha": "a1a86574465fb3b163ec6d0ab48e4e36f1789275", "filename": "src/test/ui/error-codes/E0296.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cccaf9a8c69219c8267e406f92fef895fbba80f2/src%2Ftest%2Fui%2Ferror-codes%2FE0296.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccaf9a8c69219c8267e406f92fef895fbba80f2/src%2Ftest%2Fui%2Ferror-codes%2FE0296.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0296.rs?ref=cccaf9a8c69219c8267e406f92fef895fbba80f2", "patch": "@@ -1,3 +0,0 @@\n-#![recursion_limit] //~ ERROR E0296\n-\n-fn main() {}"}, {"sha": "41e9f7ea7f9fbfbc41b02c75c2c59b211e20466f", "filename": "src/test/ui/error-codes/E0296.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cccaf9a8c69219c8267e406f92fef895fbba80f2/src%2Ftest%2Fui%2Ferror-codes%2FE0296.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cccaf9a8c69219c8267e406f92fef895fbba80f2/src%2Ftest%2Fui%2Ferror-codes%2FE0296.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0296.stderr?ref=cccaf9a8c69219c8267e406f92fef895fbba80f2", "patch": "@@ -1,9 +0,0 @@\n-error[E0296]: malformed recursion limit attribute, expected #![recursion_limit=\"N\"]\n-  --> $DIR/E0296.rs:1:1\n-   |\n-LL | #![recursion_limit] //~ ERROR E0296\n-   | ^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0296`."}, {"sha": "26d16f685a0476c9eb9f829b50e1e0dfc803e2ee", "filename": "src/test/ui/error-codes/E0558.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cccaf9a8c69219c8267e406f92fef895fbba80f2/src%2Ftest%2Fui%2Ferror-codes%2FE0558.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccaf9a8c69219c8267e406f92fef895fbba80f2/src%2Ftest%2Fui%2Ferror-codes%2FE0558.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0558.rs?ref=cccaf9a8c69219c8267e406f92fef895fbba80f2", "patch": "@@ -1,6 +0,0 @@\n-#[export_name]\n-//~^ ERROR E0558\n-\n-pub fn something() {}\n-\n-fn main() {}"}, {"sha": "95bd9a1a828f299c7da31fc6d97d0a54334f1cb4", "filename": "src/test/ui/error-codes/E0558.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cccaf9a8c69219c8267e406f92fef895fbba80f2/src%2Ftest%2Fui%2Ferror-codes%2FE0558.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cccaf9a8c69219c8267e406f92fef895fbba80f2/src%2Ftest%2Fui%2Ferror-codes%2FE0558.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0558.stderr?ref=cccaf9a8c69219c8267e406f92fef895fbba80f2", "patch": "@@ -1,9 +0,0 @@\n-error[E0558]: `export_name` attribute has invalid format\n-  --> $DIR/E0558.rs:1:1\n-   |\n-LL | #[export_name]\n-   | ^^^^^^^^^^^^^^ did you mean #[export_name=\"*\"]?\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0558`."}, {"sha": "b1a8cba1676bd8dcd9ac00e57728214eadd5f058", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 145, "deletions": 186, "changes": 331, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -30,75 +30,71 @@\n // inputs are handled by each, and (2.) to ease searching for related\n // occurrences in the source text.\n \n-// skip-codegen\n #![warn(unused_attributes, unknown_lints)]\n-#![allow(dead_code)]\n #![allow(stable_features)]\n \n // UNGATED WHITE-LISTED BUILT-IN ATTRIBUTES\n \n-#![warn                        (x5400)] //~ WARN unknown lint: `x5400`\n-#![allow                       (x5300)] //~ WARN unknown lint: `x5300`\n-#![forbid                      (x5200)] //~ WARN unknown lint: `x5200`\n-#![deny                        (x5100)] //~ WARN unknown lint: `x5100`\n+#![warn(x5400)] //~ WARN unknown lint: `x5400`\n+#![allow(x5300)] //~ WARN unknown lint: `x5300`\n+#![forbid(x5200)] //~ WARN unknown lint: `x5200`\n+#![deny(x5100)] //~ WARN unknown lint: `x5100`\n #![macro_use] // (allowed if no argument; see issue-43160-gating-of-macro_use.rs)\n-#![macro_export               = \"4800\"] //~ WARN unused attribute\n-#![plugin_registrar           = \"4700\"] //~ WARN unused attribute\n+#![macro_export] //~ WARN unused attribute\n+#![plugin_registrar] //~ WARN unused attribute\n // skipping testing of cfg\n // skipping testing of cfg_attr\n-#![main                      = \"x4400\"] //~ WARN unused attribute\n-#![start                     = \"x4300\"] //~ WARN unused attribute\n+#![main] //~ WARN unused attribute\n+#![start] //~ WARN unused attribute\n // see issue-43106-gating-of-test.rs for crate-level; but non crate-level is below at \"4200\"\n // see issue-43106-gating-of-bench.rs for crate-level; but non crate-level is below at \"4100\"\n-#![repr                       = \"3900\"]\n+#![repr()]\n //~^ WARN unused attribute\n-//~| WARN `repr` attribute isn't configurable with a literal\n-#![path                       = \"3800\"] //~ WARN unused attribute\n-#![abi                        = \"3700\"] //~ WARN unused attribute\n-#![automatically_derived      = \"3600\"] //~ WARN unused attribute\n-#![no_mangle                  = \"3500\"]\n-#![no_link                    = \"3400\"] //~ WARN unused attribute\n+#![path = \"3800\"] //~ WARN unused attribute\n+#![automatically_derived] //~ WARN unused attribute\n+#![no_mangle]\n+#![no_link] //~ WARN unused attribute\n // see issue-43106-gating-of-derive.rs\n-#![should_panic               = \"3200\"] //~ WARN unused attribute\n-#![ignore                     = \"3100\"] //~ WARN unused attribute\n-#![no_implicit_prelude        = \"3000\"]\n+#![should_panic] //~ WARN unused attribute\n+#![ignore] //~ WARN unused attribute\n+#![no_implicit_prelude]\n #![reexport_test_harness_main = \"2900\"]\n // see gated-link-args.rs\n // see issue-43106-gating-of-macro_escape.rs for crate-level; but non crate-level is below at \"2700\"\n // (cannot easily test gating of crate-level #[no_std]; but non crate-level is below at \"2600\")\n-#![proc_macro_derive          = \"2500\"] //~ WARN unused attribute\n-#![doc                        = \"2400\"]\n-#![cold                       = \"2300\"]\n-#![export_name                = \"2200\"]\n+#![proc_macro_derive()] //~ WARN unused attribute\n+#![doc = \"2400\"]\n+#![cold]\n+#![export_name = \"2200\"]\n // see issue-43106-gating-of-inline.rs\n-#![link                       = \"2000\"]\n-#![link_name                  = \"1900\"]\n-#![link_section               = \"1800\"]\n-#![no_builtins                = \"1700\"] // Yikes, dupe'd on BUILTIN_ATTRIBUTES list (see \"0300\")\n-#![no_mangle                  = \"1600\"] // Yikes, dupe'd on BUILTIN_ATTRIBUTES list (see \"3500\")\n+#![link()]\n+#![link_name = \"1900\"]\n+#![link_section = \"1800\"]\n+#![no_builtins] // Yikes, dupe'd on BUILTIN_ATTRIBUTES list (see \"0300\")\n+#![no_mangle] // Yikes, dupe'd on BUILTIN_ATTRIBUTES list (see \"3500\")\n // see issue-43106-gating-of-rustc_deprecated.rs\n-#![must_use                   = \"1400\"]\n+#![must_use]\n // see issue-43106-gating-of-stable.rs\n // see issue-43106-gating-of-unstable.rs\n // see issue-43106-gating-of-deprecated.rs\n-#![windows_subsystem          = \"1000\"]\n+#![windows_subsystem = \"1000\"]\n \n // UNGATED CRATE-LEVEL BUILT-IN ATTRIBUTES\n \n-#![crate_name                 = \"0900\"]\n-#![crate_type                 = \"bin\"] // cannot pass \"0800\" here\n+#![crate_name = \"0900\"]\n+#![crate_type = \"bin\"] // cannot pass \"0800\" here\n \n // For #![crate_id], see issue #43142. (I cannot bear to enshrine current behavior in a test)\n \n // FIXME(#44232) we should warn that this isn't used.\n-#![feature                    ( rust1)]\n+#![feature(rust1)]\n \n // For #![no_start], see issue #43144. (I cannot bear to enshrine current behavior in a test)\n \n // (cannot easily gating state of crate-level #[no_main]; but non crate-level is below at \"0400\")\n-#![no_builtins                = \"0300\"]\n-#![recursion_limit            = \"0200\"]\n-#![type_length_limit          = \"0100\"]\n+#![no_builtins]\n+#![recursion_limit = \"0200\"]\n+#![type_length_limit = \"0100\"]\n \n // USES OF BUILT-IN ATTRIBUTES IN OTHER (\"UNUSUAL\") PLACES\n \n@@ -195,84 +191,84 @@ mod macro_use {\n     //~^ WARN unused attribute\n }\n \n-#[macro_export = \"4800\"]\n+#[macro_export]\n //~^ WARN unused attribute\n mod macro_export {\n-    mod inner { #![macro_export=\"4800\"] }\n+    mod inner { #![macro_export] }\n     //~^ WARN unused attribute\n \n-    #[macro_export = \"4800\"] fn f() { }\n+    #[macro_export] fn f() { }\n     //~^ WARN unused attribute\n \n-    #[macro_export = \"4800\"] struct S;\n+    #[macro_export] struct S;\n     //~^ WARN unused attribute\n \n-    #[macro_export = \"4800\"] type T = S;\n+    #[macro_export] type T = S;\n     //~^ WARN unused attribute\n \n-    #[macro_export = \"4800\"] impl S { }\n+    #[macro_export] impl S { }\n     //~^ WARN unused attribute\n }\n \n-#[plugin_registrar = \"4700\"]\n+#[plugin_registrar]\n //~^ WARN unused attribute\n mod plugin_registrar {\n-    mod inner { #![plugin_registrar=\"4700\"] }\n+    mod inner { #![plugin_registrar] }\n     //~^ WARN unused attribute\n \n     // for `fn f()` case, see gated-plugin_registrar.rs\n \n-    #[plugin_registrar = \"4700\"] struct S;\n+    #[plugin_registrar] struct S;\n     //~^ WARN unused attribute\n \n-    #[plugin_registrar = \"4700\"] type T = S;\n+    #[plugin_registrar] type T = S;\n     //~^ WARN unused attribute\n \n-    #[plugin_registrar = \"4700\"] impl S { }\n+    #[plugin_registrar] impl S { }\n     //~^ WARN unused attribute\n }\n \n-#[main = \"4400\"]\n+#[main]\n //~^ WARN unused attribute\n mod main {\n-    mod inner { #![main=\"4300\"] }\n+    mod inner { #![main] }\n     //~^ WARN unused attribute\n \n     // for `fn f()` case, see feature-gate-main.rs\n \n-    #[main = \"4400\"] struct S;\n+    #[main] struct S;\n     //~^ WARN unused attribute\n \n-    #[main = \"4400\"] type T = S;\n+    #[main] type T = S;\n     //~^ WARN unused attribute\n \n-    #[main = \"4400\"] impl S { }\n+    #[main] impl S { }\n     //~^ WARN unused attribute\n }\n \n-#[start = \"4300\"]\n+#[start]\n //~^ WARN unused attribute\n mod start {\n-    mod inner { #![start=\"4300\"] }\n+    mod inner { #![start] }\n     //~^ WARN unused attribute\n \n     // for `fn f()` case, see feature-gate-start.rs\n \n-    #[start = \"4300\"] struct S;\n+    #[start] struct S;\n     //~^ WARN unused attribute\n \n-    #[start = \"4300\"] type T = S;\n+    #[start] type T = S;\n     //~^ WARN unused attribute\n \n-    #[start = \"4300\"] impl S { }\n+    #[start] impl S { }\n     //~^ WARN unused attribute\n }\n \n // At time of unit test authorship, if compiling without `--test` then\n // non-crate-level #[test] attributes seem to be ignored.\n \n-#[test = \"4200\"]\n-mod test { mod inner { #![test=\"4200\"] }\n+#[test]\n+mod test { mod inner { #![test] }\n \n     fn f() { }\n \n@@ -286,41 +282,31 @@ mod test { mod inner { #![test=\"4200\"] }\n // At time of unit test authorship, if compiling without `--test` then\n // non-crate-level #[bench] attributes seem to be ignored.\n \n-#[bench = \"4100\"]\n+#[bench]\n mod bench {\n-    mod inner { #![bench=\"4100\"] }\n+    mod inner { #![bench] }\n \n-    #[bench = \"4100\"]\n+    #[bench]\n     struct S;\n \n-    #[bench = \"4100\"]\n+    #[bench]\n     type T = S;\n \n-    #[bench = \"4100\"]\n+    #[bench]\n     impl S { }\n }\n \n-#[repr = \"3900\"]\n-//~^ WARN unused attribute\n-//~| WARN `repr` attribute isn't configurable with a literal\n+#[repr()]\n mod repr {\n-    mod inner { #![repr=\"3900\"] }\n-    //~^ WARN unused attribute\n-    //~| WARN `repr` attribute isn't configurable with a literal\n+    mod inner { #![repr()] }\n \n-    #[repr = \"3900\"] fn f() { }\n-    //~^ WARN unused attribute\n-    //~| WARN `repr` attribute isn't configurable with a literal\n+    #[repr()] fn f() { }\n \n     struct S;\n \n-    #[repr = \"3900\"] type T = S;\n-    //~^ WARN unused attribute\n-    //~| WARN `repr` attribute isn't configurable with a literal\n+    #[repr()] type T = S;\n \n-    #[repr = \"3900\"] impl S { }\n-    //~^ WARN unused attribute\n-    //~| WARN `repr` attribute isn't configurable with a literal\n+    #[repr()] impl S { }\n }\n \n #[path = \"3800\"]\n@@ -340,130 +326,111 @@ mod path {\n     //~^ WARN unused attribute\n }\n \n-#[abi = \"3700\"]\n-//~^ WARN unused attribute\n-mod abi {\n-    mod inner { #![abi=\"3700\"] }\n-    //~^ WARN unused attribute\n-\n-    #[abi = \"3700\"] fn f() { }\n-    //~^ WARN unused attribute\n-\n-    #[abi = \"3700\"] struct S;\n-    //~^ WARN unused attribute\n-\n-    #[abi = \"3700\"] type T = S;\n-    //~^ WARN unused attribute\n-\n-    #[abi = \"3700\"] impl S { }\n-    //~^ WARN unused attribute\n-}\n-\n-#[automatically_derived = \"3600\"]\n+#[automatically_derived]\n //~^ WARN unused attribute\n mod automatically_derived {\n-    mod inner { #![automatically_derived=\"3600\"] }\n+    mod inner { #![automatically_derived] }\n     //~^ WARN unused attribute\n \n-    #[automatically_derived = \"3600\"] fn f() { }\n+    #[automatically_derived] fn f() { }\n     //~^ WARN unused attribute\n \n-    #[automatically_derived = \"3600\"] struct S;\n+    #[automatically_derived] struct S;\n     //~^ WARN unused attribute\n \n-    #[automatically_derived = \"3600\"] type T = S;\n+    #[automatically_derived] type T = S;\n     //~^ WARN unused attribute\n \n-    #[automatically_derived = \"3600\"] impl S { }\n+    #[automatically_derived] impl S { }\n     //~^ WARN unused attribute\n }\n \n-#[no_mangle = \"3500\"]\n+#[no_mangle]\n mod no_mangle {\n-    mod inner { #![no_mangle=\"3500\"] }\n+    mod inner { #![no_mangle] }\n \n-    #[no_mangle = \"3500\"] fn f() { }\n+    #[no_mangle] fn f() { }\n \n-    #[no_mangle = \"3500\"] struct S;\n+    #[no_mangle] struct S;\n \n-    #[no_mangle = \"3500\"] type T = S;\n+    #[no_mangle] type T = S;\n \n-    #[no_mangle = \"3500\"] impl S { }\n+    #[no_mangle] impl S { }\n }\n \n-#[no_link = \"3400\"]\n+#[no_link]\n //~^ WARN unused attribute\n mod no_link {\n-    mod inner { #![no_link=\"3400\"] }\n+    mod inner { #![no_link] }\n     //~^ WARN unused attribute\n \n-    #[no_link = \"3400\"] fn f() { }\n+    #[no_link] fn f() { }\n     //~^ WARN unused attribute\n \n-    #[no_link = \"3400\"] struct S;\n+    #[no_link] struct S;\n     //~^ WARN unused attribute\n \n-    #[no_link = \"3400\"]type T = S;\n+    #[no_link]type T = S;\n     //~^ WARN unused attribute\n \n-    #[no_link = \"3400\"] impl S { }\n+    #[no_link] impl S { }\n     //~^ WARN unused attribute\n }\n \n-#[should_panic = \"3200\"]\n+#[should_panic]\n //~^ WARN unused attribute\n mod should_panic {\n-    mod inner { #![should_panic=\"3200\"] }\n+    mod inner { #![should_panic] }\n     //~^ WARN unused attribute\n \n-    #[should_panic = \"3200\"] fn f() { }\n+    #[should_panic] fn f() { }\n     //~^ WARN unused attribute\n \n-    #[should_panic = \"3200\"] struct S;\n+    #[should_panic] struct S;\n     //~^ WARN unused attribute\n \n-    #[should_panic = \"3200\"] type T = S;\n+    #[should_panic] type T = S;\n     //~^ WARN unused attribute\n \n-    #[should_panic = \"3200\"] impl S { }\n+    #[should_panic] impl S { }\n     //~^ WARN unused attribute\n }\n \n-#[ignore = \"3100\"]\n+#[ignore]\n //~^ WARN unused attribute\n mod ignore {\n-    mod inner { #![ignore=\"3100\"] }\n+    mod inner { #![ignore] }\n     //~^ WARN unused attribute\n \n-    #[ignore = \"3100\"] fn f() { }\n+    #[ignore] fn f() { }\n     //~^ WARN unused attribute\n \n-    #[ignore = \"3100\"] struct S;\n+    #[ignore] struct S;\n     //~^ WARN unused attribute\n \n-    #[ignore = \"3100\"] type T = S;\n+    #[ignore] type T = S;\n     //~^ WARN unused attribute\n \n-    #[ignore = \"3100\"] impl S { }\n+    #[ignore] impl S { }\n     //~^ WARN unused attribute\n }\n \n-#[no_implicit_prelude = \"3000\"]\n+#[no_implicit_prelude]\n //~^ WARN unused attribute\n mod no_implicit_prelude {\n-    mod inner { #![no_implicit_prelude=\"3000\"] }\n+    mod inner { #![no_implicit_prelude] }\n     //~^ WARN unused attribute\n \n-    #[no_implicit_prelude = \"3000\"] fn f() { }\n+    #[no_implicit_prelude] fn f() { }\n     //~^ WARN unused attribute\n \n-    #[no_implicit_prelude = \"3000\"] struct S;\n+    #[no_implicit_prelude] struct S;\n     //~^ WARN unused attribute\n \n-    #[no_implicit_prelude = \"3000\"] type T = S;\n+    #[no_implicit_prelude] type T = S;\n     //~^ WARN unused attribute\n \n-    #[no_implicit_prelude = \"3000\"] impl S { }\n+    #[no_implicit_prelude] impl S { }\n     //~^ WARN unused attribute\n }\n \n@@ -506,27 +473,27 @@ mod macro_escape {\n     //~^ WARN unused attribute\n }\n \n-#[no_std = \"2600\"]\n+#[no_std]\n //~^ WARN unused attribute\n //~| WARN crate-level attribute should be an inner attribute\n mod no_std {\n-    mod inner { #![no_std=\"2600\"] }\n+    mod inner { #![no_std] }\n     //~^ WARN unused attribute\n     //~| WARN crate-level attribute should be in the root module\n \n-    #[no_std = \"2600\"] fn f() { }\n+    #[no_std] fn f() { }\n     //~^ WARN unused attribute\n     //~| WARN crate-level attribute should be an inner attribute\n \n-    #[no_std = \"2600\"] struct S;\n+    #[no_std] struct S;\n     //~^ WARN unused attribute\n     //~| WARN crate-level attribute should be an inner attribute\n \n-    #[no_std = \"2600\"] type T = S;\n+    #[no_std] type T = S;\n     //~^ WARN unused attribute\n     //~| WARN crate-level attribute should be an inner attribute\n \n-    #[no_std = \"2600\"] impl S { }\n+    #[no_std] impl S { }\n     //~^ WARN unused attribute\n     //~| WARN crate-level attribute should be an inner attribute\n }\n@@ -548,17 +515,17 @@ mod doc {\n     #[doc = \"2400\"] impl S { }\n }\n \n-#[cold = \"2300\"]\n+#[cold]\n mod cold {\n-    mod inner { #![cold=\"2300\"] }\n+    mod inner { #![cold] }\n \n-    #[cold = \"2300\"] fn f() { }\n+    #[cold] fn f() { }\n \n-    #[cold = \"2300\"] struct S;\n+    #[cold] struct S;\n \n-    #[cold = \"2300\"] type T = S;\n+    #[cold] type T = S;\n \n-    #[cold = \"2300\"] impl S { }\n+    #[cold] impl S { }\n }\n \n #[export_name = \"2200\"]\n@@ -579,17 +546,17 @@ mod export_name {\n // out that we allow them at non-crate-level (though I do not know\n // whether they have the same effect here as at crate-level).\n \n-#[link = \"2000\"]\n+#[link()]\n mod link {\n-    mod inner { #![link=\"2000\"] }\n+    mod inner { #![link()] }\n \n-    #[link = \"2000\"] fn f() { }\n+    #[link()] fn f() { }\n \n-    #[link = \"2000\"] struct S;\n+    #[link()] struct S;\n \n-    #[link = \"2000\"] type T = S;\n+    #[link()] type T = S;\n \n-    #[link = \"2000\"] impl S { }\n+    #[link()] impl S { }\n }\n \n #[link_name = \"1900\"]\n@@ -620,30 +587,30 @@ mod link_section {\n \n struct StructForDeprecated;\n \n-#[deprecated = \"1500\"]\n+#[deprecated]\n mod deprecated {\n-    mod inner { #![deprecated=\"1500\"] }\n+    mod inner { #![deprecated] }\n \n-    #[deprecated = \"1500\"] fn f() { }\n+    #[deprecated] fn f() { }\n \n-    #[deprecated = \"1500\"] struct S1;\n+    #[deprecated] struct S1;\n \n-    #[deprecated = \"1500\"] type T = super::StructForDeprecated;\n+    #[deprecated] type T = super::StructForDeprecated;\n \n-    #[deprecated = \"1500\"] impl super::StructForDeprecated { }\n+    #[deprecated] impl super::StructForDeprecated { }\n }\n \n-#[must_use = \"1400\"]\n+#[must_use]\n mod must_use {\n-    mod inner { #![must_use=\"1400\"] }\n+    mod inner { #![must_use] }\n \n-    #[must_use = \"1400\"] fn f() { }\n+    #[must_use] fn f() { }\n \n-    #[must_use = \"1400\"] struct S;\n+    #[must_use] struct S;\n \n-    #[must_use = \"1400\"] type T = S;\n+    #[must_use] type T = S;\n \n-    #[must_use = \"1400\"] impl S { }\n+    #[must_use] impl S { }\n }\n \n #[windows_subsystem = \"1000\"]\n@@ -737,42 +704,42 @@ mod feature {\n }\n \n \n-#[no_main = \"0400\"]\n+#[no_main]\n //~^ WARN unused attribute\n //~| WARN crate-level attribute should be an inner attribute\n mod no_main_1 {\n-    mod inner { #![no_main=\"0400\"] }\n+    mod inner { #![no_main] }\n     //~^ WARN unused attribute\n     //~| WARN crate-level attribute should be in the root module\n \n-    #[no_main = \"0400\"] fn f() { }\n+    #[no_main] fn f() { }\n     //~^ WARN unused attribute\n     //~| WARN crate-level attribute should be an inner attribute\n \n-    #[no_main = \"0400\"] struct S;\n+    #[no_main] struct S;\n     //~^ WARN unused attribute\n     //~| WARN crate-level attribute should be an inner attribute\n \n-    #[no_main = \"0400\"] type T = S;\n+    #[no_main] type T = S;\n     //~^ WARN unused attribute\n     //~| WARN crate-level attribute should be an inner attribute\n \n-    #[no_main = \"0400\"] impl S { }\n+    #[no_main] impl S { }\n     //~^ WARN unused attribute\n     //~| WARN crate-level attribute should be an inner attribute\n }\n \n-#[no_builtins = \"0300\"]\n+#[no_builtins]\n mod no_builtins {\n-    mod inner { #![no_builtins=\"0200\"] }\n+    mod inner { #![no_builtins] }\n \n-    #[no_builtins = \"0300\"] fn f() { }\n+    #[no_builtins] fn f() { }\n \n-    #[no_builtins = \"0300\"] struct S;\n+    #[no_builtins] struct S;\n \n-    #[no_builtins = \"0300\"] type T = S;\n+    #[no_builtins] type T = S;\n \n-    #[no_builtins = \"0300\"] impl S { }\n+    #[no_builtins] impl S { }\n }\n \n #[recursion_limit=\"0200\"]\n@@ -825,12 +792,4 @@ mod type_length_limit {\n     //~| WARN crate-level attribute should be an inner attribute\n }\n \n-\n-\n-\n-\n-\n-\n-fn main() {\n-    println!(\"Hello World\");\n-}\n+fn main() {}"}, {"sha": "4d15ccb300a8747532cd73b5c383b3ce62ac5227", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 376, "deletions": 503, "changes": 879, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,1307 +1,1180 @@\n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:40:33\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:38:9\n    |\n-LL | #![warn                        (x5400)] //~ WARN unknown lint: `x5400`\n-   |                                 ^^^^^\n+LL | #![warn(x5400)] //~ WARN unknown lint: `x5400`\n+   |         ^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:34:28\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:33:28\n    |\n LL | #![warn(unused_attributes, unknown_lints)]\n    |                            ^^^^^^^^^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:41:33\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:39:10\n    |\n-LL | #![allow                       (x5300)] //~ WARN unknown lint: `x5300`\n-   |                                 ^^^^^\n+LL | #![allow(x5300)] //~ WARN unknown lint: `x5300`\n+   |          ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:42:33\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:40:11\n    |\n-LL | #![forbid                      (x5200)] //~ WARN unknown lint: `x5200`\n-   |                                 ^^^^^\n+LL | #![forbid(x5200)] //~ WARN unknown lint: `x5200`\n+   |           ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:43:33\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:41:9\n    |\n-LL | #![deny                        (x5100)] //~ WARN unknown lint: `x5100`\n-   |                                 ^^^^^\n+LL | #![deny(x5100)] //~ WARN unknown lint: `x5100`\n+   |         ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:105:8\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:101:8\n    |\n LL | #[warn(x5400)]\n    |        ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:108:25\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:104:25\n    |\n LL |     mod inner { #![warn(x5400)] }\n    |                         ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:111:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:107:12\n    |\n LL |     #[warn(x5400)] fn f() { }\n    |            ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:114:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:110:12\n    |\n LL |     #[warn(x5400)] struct S;\n    |            ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:117:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:113:12\n    |\n LL |     #[warn(x5400)] type T = S;\n    |            ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:120:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:116:12\n    |\n LL |     #[warn(x5400)] impl S { }\n    |            ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:124:9\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:120:9\n    |\n LL | #[allow(x5300)]\n    |         ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:127:26\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:123:26\n    |\n LL |     mod inner { #![allow(x5300)] }\n    |                          ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:130:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:126:13\n    |\n LL |     #[allow(x5300)] fn f() { }\n    |             ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:133:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:129:13\n    |\n LL |     #[allow(x5300)] struct S;\n    |             ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:136:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:132:13\n    |\n LL |     #[allow(x5300)] type T = S;\n    |             ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:139:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:135:13\n    |\n LL |     #[allow(x5300)] impl S { }\n    |             ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:143:10\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:139:10\n    |\n LL | #[forbid(x5200)]\n    |          ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:146:27\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:142:27\n    |\n LL |     mod inner { #![forbid(x5200)] }\n    |                           ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:149:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:145:14\n    |\n LL |     #[forbid(x5200)] fn f() { }\n    |              ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:152:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:148:14\n    |\n LL |     #[forbid(x5200)] struct S;\n    |              ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:155:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:151:14\n    |\n LL |     #[forbid(x5200)] type T = S;\n    |              ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:158:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:154:14\n    |\n LL |     #[forbid(x5200)] impl S { }\n    |              ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:162:8\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:158:8\n    |\n LL | #[deny(x5100)]\n    |        ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:165:25\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:161:25\n    |\n LL |     mod inner { #![deny(x5100)] }\n    |                         ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:168:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:164:12\n    |\n LL |     #[deny(x5100)] fn f() { }\n    |            ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:171:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:167:12\n    |\n LL |     #[deny(x5100)] struct S;\n    |            ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:174:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:170:12\n    |\n LL |     #[deny(x5100)] type T = S;\n    |            ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:177:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:173:12\n    |\n LL |     #[deny(x5100)] impl S { }\n    |            ^^^^^\n \n warning: macro_escape is a deprecated synonym for macro_use\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:490:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:457:1\n    |\n LL | #[macro_escape]\n    | ^^^^^^^^^^^^^^^\n \n warning: macro_escape is a deprecated synonym for macro_use\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:493:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:460:17\n    |\n LL |     mod inner { #![macro_escape] }\n    |                 ^^^^^^^^^^^^^^^^\n    |\n    = help: consider an outer attribute, #[macro_use] mod ...\n \n-warning: `repr` attribute isn't configurable with a literal\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:307:17\n-   |\n-LL |     mod inner { #![repr=\"3900\"] }\n-   |                 ^^^^^^^^^^^^^^^ needs a hint\n-   |\n-   = note: #[warn(bad_repr)] on by default\n-   = help: valid hints include `#[repr(C)]`, `#[repr(packed)]`, `#[repr(rust)]` and `#[repr(transparent)]`\n-   = note: for more information, visit <https://doc.rust-lang.org/reference/type-layout.html>\n-\n-warning: `repr` attribute isn't configurable with a literal\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:311:5\n-   |\n-LL |     #[repr = \"3900\"] fn f() { }\n-   |     ^^^^^^^^^^^^^^^^ needs a hint\n-   |\n-   = help: valid hints include `#[repr(C)]`, `#[repr(packed)]`, `#[repr(rust)]` and `#[repr(transparent)]`\n-   = note: for more information, visit <https://doc.rust-lang.org/reference/type-layout.html>\n-\n-warning: `repr` attribute isn't configurable with a literal\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:317:5\n-   |\n-LL |     #[repr = \"3900\"] type T = S;\n-   |     ^^^^^^^^^^^^^^^^ needs a hint\n-   |\n-   = help: valid hints include `#[repr(C)]`, `#[repr(packed)]`, `#[repr(rust)]` and `#[repr(transparent)]`\n-   = note: for more information, visit <https://doc.rust-lang.org/reference/type-layout.html>\n-\n-warning: `repr` attribute isn't configurable with a literal\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:321:5\n-   |\n-LL |     #[repr = \"3900\"] impl S { }\n-   |     ^^^^^^^^^^^^^^^^ needs a hint\n-   |\n-   = help: valid hints include `#[repr(C)]`, `#[repr(packed)]`, `#[repr(rust)]` and `#[repr(transparent)]`\n-   = note: for more information, visit <https://doc.rust-lang.org/reference/type-layout.html>\n-\n-warning: `repr` attribute isn't configurable with a literal\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:303:1\n-   |\n-LL | #[repr = \"3900\"]\n-   | ^^^^^^^^^^^^^^^^ needs a hint\n-   |\n-   = help: valid hints include `#[repr(C)]`, `#[repr(packed)]`, `#[repr(rust)]` and `#[repr(transparent)]`\n-   = note: for more information, visit <https://doc.rust-lang.org/reference/type-layout.html>\n-\n-warning: `repr` attribute isn't configurable with a literal\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:53:1\n-   |\n-LL | #![repr                       = \"3900\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ needs a hint\n-   |\n-   = help: valid hints include `#[repr(C)]`, `#[repr(packed)]`, `#[repr(rust)]` and `#[repr(transparent)]`\n-   = note: for more information, visit <https://doc.rust-lang.org/reference/type-layout.html>\n-\n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:185:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:181:5\n    |\n LL |     #[macro_use] fn f() { }\n    |     ^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:34:9\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:33:9\n    |\n LL | #![warn(unused_attributes, unknown_lints)]\n    |         ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:188:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:184:5\n    |\n LL |     #[macro_use] struct S;\n    |     ^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:191:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:187:5\n    |\n LL |     #[macro_use] type T = S;\n    |     ^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:194:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:190:5\n    |\n LL |     #[macro_use] impl S { }\n    |     ^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:201:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:197:17\n    |\n-LL |     mod inner { #![macro_export=\"4800\"] }\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:204:5\n-   |\n-LL |     #[macro_export = \"4800\"] fn f() { }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:207:5\n-   |\n-LL |     #[macro_export = \"4800\"] struct S;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:210:5\n-   |\n-LL |     #[macro_export = \"4800\"] type T = S;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:213:5\n-   |\n-LL |     #[macro_export = \"4800\"] impl S { }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:198:1\n-   |\n-LL | #[macro_export = \"4800\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     mod inner { #![macro_export] }\n+   |                 ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:220:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:200:5\n    |\n-LL |     mod inner { #![plugin_registrar=\"4700\"] }\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[macro_export] fn f() { }\n+   |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:225:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:203:5\n    |\n-LL |     #[plugin_registrar = \"4700\"] struct S;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[macro_export] struct S;\n+   |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:228:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:206:5\n    |\n-LL |     #[plugin_registrar = \"4700\"] type T = S;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[macro_export] type T = S;\n+   |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:231:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:209:5\n    |\n-LL |     #[plugin_registrar = \"4700\"] impl S { }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[macro_export] impl S { }\n+   |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:217:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:194:1\n    |\n-LL | #[plugin_registrar = \"4700\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[macro_export]\n+   | ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:238:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:216:17\n    |\n-LL |     mod inner { #![main=\"4300\"] }\n-   |                 ^^^^^^^^^^^^^^^\n+LL |     mod inner { #![plugin_registrar] }\n+   |                 ^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:243:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:221:5\n    |\n-LL |     #[main = \"4400\"] struct S;\n-   |     ^^^^^^^^^^^^^^^^\n+LL |     #[plugin_registrar] struct S;\n+   |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:246:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:224:5\n    |\n-LL |     #[main = \"4400\"] type T = S;\n-   |     ^^^^^^^^^^^^^^^^\n+LL |     #[plugin_registrar] type T = S;\n+   |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:249:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:227:5\n    |\n-LL |     #[main = \"4400\"] impl S { }\n-   |     ^^^^^^^^^^^^^^^^\n+LL |     #[plugin_registrar] impl S { }\n+   |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:235:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:213:1\n    |\n-LL | #[main = \"4400\"]\n-   | ^^^^^^^^^^^^^^^^\n+LL | #[plugin_registrar]\n+   | ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:256:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:234:17\n    |\n-LL |     mod inner { #![start=\"4300\"] }\n-   |                 ^^^^^^^^^^^^^^^^\n+LL |     mod inner { #![main] }\n+   |                 ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:261:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:239:5\n    |\n-LL |     #[start = \"4300\"] struct S;\n-   |     ^^^^^^^^^^^^^^^^^\n+LL |     #[main] struct S;\n+   |     ^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:264:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:242:5\n    |\n-LL |     #[start = \"4300\"] type T = S;\n-   |     ^^^^^^^^^^^^^^^^^\n+LL |     #[main] type T = S;\n+   |     ^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:267:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:245:5\n    |\n-LL |     #[start = \"4300\"] impl S { }\n-   |     ^^^^^^^^^^^^^^^^^\n+LL |     #[main] impl S { }\n+   |     ^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:253:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:231:1\n    |\n-LL | #[start = \"4300\"]\n-   | ^^^^^^^^^^^^^^^^^\n+LL | #[main]\n+   | ^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:307:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:252:17\n    |\n-LL |     mod inner { #![repr=\"3900\"] }\n-   |                 ^^^^^^^^^^^^^^^\n+LL |     mod inner { #![start] }\n+   |                 ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:311:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:257:5\n    |\n-LL |     #[repr = \"3900\"] fn f() { }\n-   |     ^^^^^^^^^^^^^^^^\n+LL |     #[start] struct S;\n+   |     ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:317:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:260:5\n    |\n-LL |     #[repr = \"3900\"] type T = S;\n-   |     ^^^^^^^^^^^^^^^^\n+LL |     #[start] type T = S;\n+   |     ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:321:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:263:5\n    |\n-LL |     #[repr = \"3900\"] impl S { }\n-   |     ^^^^^^^^^^^^^^^^\n+LL |     #[start] impl S { }\n+   |     ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:303:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:249:1\n    |\n-LL | #[repr = \"3900\"]\n-   | ^^^^^^^^^^^^^^^^\n+LL | #[start]\n+   | ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:330:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:316:5\n    |\n LL |     #[path = \"3800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:333:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:319:5\n    |\n LL |     #[path = \"3800\"]  struct S;\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:336:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:322:5\n    |\n LL |     #[path = \"3800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:339:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:325:5\n    |\n LL |     #[path = \"3800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:346:17\n-   |\n-LL |     mod inner { #![abi=\"3700\"] }\n-   |                 ^^^^^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:349:5\n-   |\n-LL |     #[abi = \"3700\"] fn f() { }\n-   |     ^^^^^^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:352:5\n-   |\n-LL |     #[abi = \"3700\"] struct S;\n-   |     ^^^^^^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:355:5\n-   |\n-LL |     #[abi = \"3700\"] type T = S;\n-   |     ^^^^^^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:358:5\n-   |\n-LL |     #[abi = \"3700\"] impl S { }\n-   |     ^^^^^^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:343:1\n-   |\n-LL | #[abi = \"3700\"]\n-   | ^^^^^^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:365:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:332:17\n    |\n-LL |     mod inner { #![automatically_derived=\"3600\"] }\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     mod inner { #![automatically_derived] }\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:368:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:335:5\n    |\n-LL |     #[automatically_derived = \"3600\"] fn f() { }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[automatically_derived] fn f() { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:371:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:338:5\n    |\n-LL |     #[automatically_derived = \"3600\"] struct S;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[automatically_derived] struct S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:374:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:341:5\n    |\n-LL |     #[automatically_derived = \"3600\"] type T = S;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[automatically_derived] type T = S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:377:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:344:5\n    |\n-LL |     #[automatically_derived = \"3600\"] impl S { }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[automatically_derived] impl S { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:362:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:329:1\n    |\n-LL | #[automatically_derived = \"3600\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[automatically_derived]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:397:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:364:17\n    |\n-LL |     mod inner { #![no_link=\"3400\"] }\n-   |                 ^^^^^^^^^^^^^^^^^^\n+LL |     mod inner { #![no_link] }\n+   |                 ^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:400:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:367:5\n    |\n-LL |     #[no_link = \"3400\"] fn f() { }\n-   |     ^^^^^^^^^^^^^^^^^^^\n+LL |     #[no_link] fn f() { }\n+   |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:403:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:370:5\n    |\n-LL |     #[no_link = \"3400\"] struct S;\n-   |     ^^^^^^^^^^^^^^^^^^^\n+LL |     #[no_link] struct S;\n+   |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:406:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:373:5\n    |\n-LL |     #[no_link = \"3400\"]type T = S;\n-   |     ^^^^^^^^^^^^^^^^^^^\n+LL |     #[no_link]type T = S;\n+   |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:409:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:376:5\n    |\n-LL |     #[no_link = \"3400\"] impl S { }\n-   |     ^^^^^^^^^^^^^^^^^^^\n+LL |     #[no_link] impl S { }\n+   |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:394:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:361:1\n    |\n-LL | #[no_link = \"3400\"]\n-   | ^^^^^^^^^^^^^^^^^^^\n+LL | #[no_link]\n+   | ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:416:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:383:17\n    |\n-LL |     mod inner { #![should_panic=\"3200\"] }\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     mod inner { #![should_panic] }\n+   |                 ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:419:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:386:5\n    |\n-LL |     #[should_panic = \"3200\"] fn f() { }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[should_panic] fn f() { }\n+   |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:422:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:389:5\n    |\n-LL |     #[should_panic = \"3200\"] struct S;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[should_panic] struct S;\n+   |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:425:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:392:5\n    |\n-LL |     #[should_panic = \"3200\"] type T = S;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[should_panic] type T = S;\n+   |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:428:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:395:5\n    |\n-LL |     #[should_panic = \"3200\"] impl S { }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[should_panic] impl S { }\n+   |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:413:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:380:1\n    |\n-LL | #[should_panic = \"3200\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[should_panic]\n+   | ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:435:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:402:17\n    |\n-LL |     mod inner { #![ignore=\"3100\"] }\n-   |                 ^^^^^^^^^^^^^^^^^\n+LL |     mod inner { #![ignore] }\n+   |                 ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:438:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:405:5\n    |\n-LL |     #[ignore = \"3100\"] fn f() { }\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     #[ignore] fn f() { }\n+   |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:441:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:408:5\n    |\n-LL |     #[ignore = \"3100\"] struct S;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     #[ignore] struct S;\n+   |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:444:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:411:5\n    |\n-LL |     #[ignore = \"3100\"] type T = S;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     #[ignore] type T = S;\n+   |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:447:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:414:5\n    |\n-LL |     #[ignore = \"3100\"] impl S { }\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     #[ignore] impl S { }\n+   |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:432:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:399:1\n    |\n-LL | #[ignore = \"3100\"]\n-   | ^^^^^^^^^^^^^^^^^^\n+LL | #[ignore]\n+   | ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:454:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:421:17\n    |\n-LL |     mod inner { #![no_implicit_prelude=\"3000\"] }\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     mod inner { #![no_implicit_prelude] }\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:457:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:424:5\n    |\n-LL |     #[no_implicit_prelude = \"3000\"] fn f() { }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[no_implicit_prelude] fn f() { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:460:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:427:5\n    |\n-LL |     #[no_implicit_prelude = \"3000\"] struct S;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[no_implicit_prelude] struct S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:463:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:430:5\n    |\n-LL |     #[no_implicit_prelude = \"3000\"] type T = S;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[no_implicit_prelude] type T = S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:466:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:433:5\n    |\n-LL |     #[no_implicit_prelude = \"3000\"] impl S { }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[no_implicit_prelude] impl S { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:451:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:418:1\n    |\n-LL | #[no_implicit_prelude = \"3000\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[no_implicit_prelude]\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:473:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:440:17\n    |\n LL |     mod inner { #![reexport_test_harness_main=\"2900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:476:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:443:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:479:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:446:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:482:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:449:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:485:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:452:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:470:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:437:1\n    |\n LL | #[reexport_test_harness_main = \"2900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:496:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:463:5\n    |\n LL |     #[macro_escape] fn f() { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:499:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:466:5\n    |\n LL |     #[macro_escape] struct S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:502:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:469:5\n    |\n LL |     #[macro_escape] type T = S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:505:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:472:5\n    |\n LL |     #[macro_escape] impl S { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:513:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:480:17\n    |\n-LL |     mod inner { #![no_std=\"2600\"] }\n-   |                 ^^^^^^^^^^^^^^^^^\n+LL |     mod inner { #![no_std] }\n+   |                 ^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:513:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:480:17\n    |\n-LL |     mod inner { #![no_std=\"2600\"] }\n-   |                 ^^^^^^^^^^^^^^^^^\n+LL |     mod inner { #![no_std] }\n+   |                 ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:517:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:484:5\n    |\n-LL |     #[no_std = \"2600\"] fn f() { }\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     #[no_std] fn f() { }\n+   |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:517:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:484:5\n    |\n-LL |     #[no_std = \"2600\"] fn f() { }\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     #[no_std] fn f() { }\n+   |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:521:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:488:5\n    |\n-LL |     #[no_std = \"2600\"] struct S;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     #[no_std] struct S;\n+   |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:521:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:488:5\n    |\n-LL |     #[no_std = \"2600\"] struct S;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     #[no_std] struct S;\n+   |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:525:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:492:5\n    |\n-LL |     #[no_std = \"2600\"] type T = S;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     #[no_std] type T = S;\n+   |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:525:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:492:5\n    |\n-LL |     #[no_std = \"2600\"] type T = S;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     #[no_std] type T = S;\n+   |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:529:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:496:5\n    |\n-LL |     #[no_std = \"2600\"] impl S { }\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     #[no_std] impl S { }\n+   |     ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:529:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:496:5\n    |\n-LL |     #[no_std = \"2600\"] impl S { }\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     #[no_std] impl S { }\n+   |     ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:509:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:476:1\n    |\n-LL | #[no_std = \"2600\"]\n-   | ^^^^^^^^^^^^^^^^^^\n+LL | #[no_std]\n+   | ^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:509:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:476:1\n    |\n-LL | #[no_std = \"2600\"]\n-   | ^^^^^^^^^^^^^^^^^^\n+LL | #[no_std]\n+   | ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:668:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:635:17\n    |\n LL |     mod inner { #![crate_name=\"0900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:668:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:635:17\n    |\n LL |     mod inner { #![crate_name=\"0900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:672:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:639:5\n    |\n LL |     #[crate_name = \"0900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:672:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:639:5\n    |\n LL |     #[crate_name = \"0900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:676:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:643:5\n    |\n LL |     #[crate_name = \"0900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:676:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:643:5\n    |\n LL |     #[crate_name = \"0900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:680:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:647:5\n    |\n LL |     #[crate_name = \"0900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:680:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:647:5\n    |\n LL |     #[crate_name = \"0900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:684:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:651:5\n    |\n LL |     #[crate_name = \"0900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:684:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:651:5\n    |\n LL |     #[crate_name = \"0900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:664:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:631:1\n    |\n LL | #[crate_name = \"0900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:664:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:631:1\n    |\n LL | #[crate_name = \"0900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:693:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:660:17\n    |\n LL |     mod inner { #![crate_type=\"0800\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:693:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:660:17\n    |\n LL |     mod inner { #![crate_type=\"0800\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:697:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:664:5\n    |\n LL |     #[crate_type = \"0800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:697:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:664:5\n    |\n LL |     #[crate_type = \"0800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:701:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:668:5\n    |\n LL |     #[crate_type = \"0800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:701:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:668:5\n    |\n LL |     #[crate_type = \"0800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:705:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:672:5\n    |\n LL |     #[crate_type = \"0800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:705:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:672:5\n    |\n LL |     #[crate_type = \"0800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:709:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:676:5\n    |\n LL |     #[crate_type = \"0800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:709:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:676:5\n    |\n LL |     #[crate_type = \"0800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:689:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:656:1\n    |\n LL | #[crate_type = \"0800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:689:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:656:1\n    |\n LL | #[crate_type = \"0800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:718:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:685:17\n    |\n LL |     mod inner { #![feature(x0600)] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:718:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:685:17\n    |\n LL |     mod inner { #![feature(x0600)] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:722:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:689:5\n    |\n LL |     #[feature(x0600)] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:722:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:689:5\n    |\n LL |     #[feature(x0600)] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:726:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:693:5\n    |\n LL |     #[feature(x0600)] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:726:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:693:5\n    |\n LL |     #[feature(x0600)] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:730:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:697:5\n    |\n LL |     #[feature(x0600)] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:730:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:697:5\n    |\n LL |     #[feature(x0600)] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:734:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:701:5\n    |\n LL |     #[feature(x0600)] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:734:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:701:5\n    |\n LL |     #[feature(x0600)] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:714:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:681:1\n    |\n LL | #[feature(x0600)]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:714:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:681:1\n    |\n LL | #[feature(x0600)]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:744:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:711:17\n    |\n-LL |     mod inner { #![no_main=\"0400\"] }\n-   |                 ^^^^^^^^^^^^^^^^^^\n+LL |     mod inner { #![no_main] }\n+   |                 ^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:744:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:711:17\n    |\n-LL |     mod inner { #![no_main=\"0400\"] }\n-   |                 ^^^^^^^^^^^^^^^^^^\n+LL |     mod inner { #![no_main] }\n+   |                 ^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:748:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:715:5\n    |\n-LL |     #[no_main = \"0400\"] fn f() { }\n-   |     ^^^^^^^^^^^^^^^^^^^\n+LL |     #[no_main] fn f() { }\n+   |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:748:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:715:5\n    |\n-LL |     #[no_main = \"0400\"] fn f() { }\n-   |     ^^^^^^^^^^^^^^^^^^^\n+LL |     #[no_main] fn f() { }\n+   |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:752:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:719:5\n    |\n-LL |     #[no_main = \"0400\"] struct S;\n-   |     ^^^^^^^^^^^^^^^^^^^\n+LL |     #[no_main] struct S;\n+   |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:752:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:719:5\n    |\n-LL |     #[no_main = \"0400\"] struct S;\n-   |     ^^^^^^^^^^^^^^^^^^^\n+LL |     #[no_main] struct S;\n+   |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:756:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:723:5\n    |\n-LL |     #[no_main = \"0400\"] type T = S;\n-   |     ^^^^^^^^^^^^^^^^^^^\n+LL |     #[no_main] type T = S;\n+   |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:756:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:723:5\n    |\n-LL |     #[no_main = \"0400\"] type T = S;\n-   |     ^^^^^^^^^^^^^^^^^^^\n+LL |     #[no_main] type T = S;\n+   |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:760:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:727:5\n    |\n-LL |     #[no_main = \"0400\"] impl S { }\n-   |     ^^^^^^^^^^^^^^^^^^^\n+LL |     #[no_main] impl S { }\n+   |     ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:760:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:727:5\n    |\n-LL |     #[no_main = \"0400\"] impl S { }\n-   |     ^^^^^^^^^^^^^^^^^^^\n+LL |     #[no_main] impl S { }\n+   |     ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:740:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:707:1\n    |\n-LL | #[no_main = \"0400\"]\n-   | ^^^^^^^^^^^^^^^^^^^\n+LL | #[no_main]\n+   | ^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:740:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:707:1\n    |\n-LL | #[no_main = \"0400\"]\n-   | ^^^^^^^^^^^^^^^^^^^\n+LL | #[no_main]\n+   | ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:782:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:749:17\n    |\n LL |     mod inner { #![recursion_limit=\"0200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:782:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:749:17\n    |\n LL |     mod inner { #![recursion_limit=\"0200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:786:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:753:5\n    |\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:786:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:753:5\n    |\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:790:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:757:5\n    |\n LL |     #[recursion_limit=\"0200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:790:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:757:5\n    |\n LL |     #[recursion_limit=\"0200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:794:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:761:5\n    |\n LL |     #[recursion_limit=\"0200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:794:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:761:5\n    |\n LL |     #[recursion_limit=\"0200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:798:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:765:5\n    |\n LL |     #[recursion_limit=\"0200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:798:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:765:5\n    |\n LL |     #[recursion_limit=\"0200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:778:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:745:1\n    |\n LL | #[recursion_limit=\"0200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:778:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:745:1\n    |\n LL | #[recursion_limit=\"0200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:807:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:774:17\n    |\n LL |     mod inner { #![type_length_limit=\"0100\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:807:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:774:17\n    |\n LL |     mod inner { #![type_length_limit=\"0100\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:811:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:778:5\n    |\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:811:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:778:5\n    |\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:815:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:782:5\n    |\n LL |     #[type_length_limit=\"0100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:815:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:782:5\n    |\n LL |     #[type_length_limit=\"0100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:819:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:786:5\n    |\n LL |     #[type_length_limit=\"0100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:819:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:786:5\n    |\n LL |     #[type_length_limit=\"0100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:823:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:790:5\n    |\n LL |     #[type_length_limit=\"0100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:823:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:790:5\n    |\n LL |     #[type_length_limit=\"0100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:803:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:770:1\n    |\n LL | #[type_length_limit=\"0100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:803:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:770:1\n    |\n LL | #[type_length_limit=\"0100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:45:1\n-   |\n-LL | #![macro_export               = \"4800\"] //~ WARN unused attribute\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:46:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:43:1\n    |\n-LL | #![plugin_registrar           = \"4700\"] //~ WARN unused attribute\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![macro_export] //~ WARN unused attribute\n+   | ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:49:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:44:1\n    |\n-LL | #![main                      = \"x4400\"] //~ WARN unused attribute\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![plugin_registrar] //~ WARN unused attribute\n+   | ^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:50:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:47:1\n    |\n-LL | #![start                     = \"x4300\"] //~ WARN unused attribute\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![main] //~ WARN unused attribute\n+   | ^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:53:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:48:1\n    |\n-LL | #![repr                       = \"3900\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![start] //~ WARN unused attribute\n+   | ^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:56:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:51:1\n    |\n-LL | #![path                       = \"3800\"] //~ WARN unused attribute\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![repr()]\n+   | ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:57:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:53:1\n    |\n-LL | #![abi                        = \"3700\"] //~ WARN unused attribute\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![path = \"3800\"] //~ WARN unused attribute\n+   | ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:58:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:54:1\n    |\n-LL | #![automatically_derived      = \"3600\"] //~ WARN unused attribute\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![automatically_derived] //~ WARN unused attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:60:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:56:1\n    |\n-LL | #![no_link                    = \"3400\"] //~ WARN unused attribute\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![no_link] //~ WARN unused attribute\n+   | ^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:62:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:58:1\n    |\n-LL | #![should_panic               = \"3200\"] //~ WARN unused attribute\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![should_panic] //~ WARN unused attribute\n+   | ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:63:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:59:1\n    |\n-LL | #![ignore                     = \"3100\"] //~ WARN unused attribute\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![ignore] //~ WARN unused attribute\n+   | ^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:69:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:65:1\n    |\n-LL | #![proc_macro_derive          = \"2500\"] //~ WARN unused attribute\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![proc_macro_derive()] //~ WARN unused attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: invalid windows subsystem `1000`, only `windows` and `console` are allowed\n "}, {"sha": "360d570b65061bae8210be51de5f5cde06288fa3", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-deprecated.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-deprecated.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -7,15 +7,7 @@\n \n // compile-pass\n // skip-codegen\n-#![allow(dead_code)]\n-#![deprecated           = \"1100\"]\n \n-// Since we expect for the mix of attributes used here to compile\n-// successfully, and we are just testing for the expected warnings of\n-// various (mis)uses of attributes, we use the `rustc_error` attribute\n-// on the `fn main()`.\n+#![deprecated]\n \n-\n-fn main() {\n-    println!(\"Hello World\");\n-}\n+fn main() {}"}, {"sha": "bb9e6d4ca83b0172ee6743989fcedbc29bf95074", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-inline.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -6,23 +6,25 @@\n // issue-43106-gating-of-builtin-attrs.rs)\n \n // Crate-level is accepted, though it is almost certainly unused?\n-#![inline                     = \"2100\"]\n+#![inline]\n \n-#[inline = \"2100\"]\n+#[inline]\n //~^ ERROR attribute should be applied to function or closure\n mod inline {\n-    mod inner { #![inline=\"2100\"] }\n+    mod inner { #![inline] }\n     //~^ ERROR attribute should be applied to function or closure\n \n     #[inline = \"2100\"] fn f() { }\n+    //~^ WARN attribute must be of the form\n+    //~| WARN this was previously accepted\n \n-    #[inline = \"2100\"] struct S;\n+    #[inline] struct S;\n     //~^ ERROR attribute should be applied to function or closure\n \n-    #[inline = \"2100\"] type T = S;\n+    #[inline] type T = S;\n     //~^ ERROR attribute should be applied to function or closure\n \n-    #[inline = \"2100\"] impl S { }\n+    #[inline] impl S { }\n     //~^ ERROR attribute should be applied to function or closure\n }\n "}, {"sha": "71e8f11ff078df7f744a81b614cd6bab6cf3b71e", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-inline.stderr", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,11 +1,21 @@\n+warning: attribute must be of the form `#[inline]` or `#[inline(always|never)]`\n+  --> $DIR/issue-43106-gating-of-inline.rs:17:5\n+   |\n+LL |     #[inline = \"2100\"] fn f() { }\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(ill_formed_attribute_input)] on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n+\n error[E0518]: attribute should be applied to function or closure\n   --> $DIR/issue-43106-gating-of-inline.rs:11:1\n    |\n-LL |   #[inline = \"2100\"]\n-   |   ^^^^^^^^^^^^^^^^^^\n+LL |   #[inline]\n+   |   ^^^^^^^^^\n LL |   //~^ ERROR attribute should be applied to function or closure\n LL | / mod inline {\n-LL | |     mod inner { #![inline=\"2100\"] }\n+LL | |     mod inner { #![inline] }\n LL | |     //~^ ERROR attribute should be applied to function or closure\n LL | |\n ...  |\n@@ -16,26 +26,26 @@ LL | | }\n error[E0518]: attribute should be applied to function or closure\n   --> $DIR/issue-43106-gating-of-inline.rs:14:17\n    |\n-LL |     mod inner { #![inline=\"2100\"] }\n-   |     ------------^^^^^^^^^^^^^^^^^-- not a function or closure\n+LL |     mod inner { #![inline] }\n+   |     ------------^^^^^^^^^^-- not a function or closure\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/issue-43106-gating-of-inline.rs:19:5\n+  --> $DIR/issue-43106-gating-of-inline.rs:21:5\n    |\n-LL |     #[inline = \"2100\"] struct S;\n-   |     ^^^^^^^^^^^^^^^^^^ --------- not a function or closure\n+LL |     #[inline] struct S;\n+   |     ^^^^^^^^^ --------- not a function or closure\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/issue-43106-gating-of-inline.rs:22:5\n+  --> $DIR/issue-43106-gating-of-inline.rs:24:5\n    |\n-LL |     #[inline = \"2100\"] type T = S;\n-   |     ^^^^^^^^^^^^^^^^^^ ----------- not a function or closure\n+LL |     #[inline] type T = S;\n+   |     ^^^^^^^^^ ----------- not a function or closure\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/issue-43106-gating-of-inline.rs:25:5\n+  --> $DIR/issue-43106-gating-of-inline.rs:27:5\n    |\n-LL |     #[inline = \"2100\"] impl S { }\n-   |     ^^^^^^^^^^^^^^^^^^ ---------- not a function or closure\n+LL |     #[inline] impl S { }\n+   |     ^^^^^^^^^ ---------- not a function or closure\n \n error: aborting due to 5 previous errors\n "}, {"sha": "725f2e0b9d008425028e5351648eaa90c00ea18c", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-macro_use.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -3,21 +3,23 @@\n // corresponds to cases where the attribute is currently unused, so we\n // get that warning; see issue-43106-gating-of-builtin-attrs.rs\n \n-#![macro_use                  = \"4900\"] //~ ERROR arguments to macro_use are not allowed here\n+#![macro_use(my_macro)]\n+//~^ ERROR arguments to macro_use are not allowed here\n \n-#[macro_use = \"2700\"]\n+#[macro_use(my_macro)]\n //~^ ERROR arguments to macro_use are not allowed here\n mod macro_escape {\n-    mod inner { #![macro_use=\"2700\"] }\n+    mod inner { #![macro_use(my_macro)] }\n     //~^ ERROR arguments to macro_use are not allowed here\n \n-    #[macro_use = \"2700\"] fn f() { }\n-\n     #[macro_use = \"2700\"] struct S;\n+    //~^ ERROR attribute must be of the form\n+\n+    #[macro_use] fn f() { }\n \n-    #[macro_use = \"2700\"] type T = S;\n+    #[macro_use] type T = S;\n \n-    #[macro_use = \"2700\"] impl S { }\n+    #[macro_use] impl S { }\n }\n \n fn main() { }"}, {"sha": "8074528c0e060cf99b6e93542f3b5e52c2a20472", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-macro_use.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,20 +1,26 @@\n error: arguments to macro_use are not allowed here\n   --> $DIR/issue-43106-gating-of-macro_use.rs:6:1\n    |\n-LL | #![macro_use                  = \"4900\"] //~ ERROR arguments to macro_use are not allowed here\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![macro_use(my_macro)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: arguments to macro_use are not allowed here\n-  --> $DIR/issue-43106-gating-of-macro_use.rs:8:1\n+  --> $DIR/issue-43106-gating-of-macro_use.rs:9:1\n    |\n-LL | #[macro_use = \"2700\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+LL | #[macro_use(my_macro)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n \n error: arguments to macro_use are not allowed here\n-  --> $DIR/issue-43106-gating-of-macro_use.rs:11:17\n+  --> $DIR/issue-43106-gating-of-macro_use.rs:12:17\n    |\n-LL |     mod inner { #![macro_use=\"2700\"] }\n-   |                 ^^^^^^^^^^^^^^^^^^^^\n+LL |     mod inner { #![macro_use(my_macro)] }\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: attribute must be of the form `#[macro_use]` or `#[macro_use(name1, name2, ...)]`\n+  --> $DIR/issue-43106-gating-of-macro_use.rs:15:5\n+   |\n+LL |     #[macro_use = \"2700\"] struct S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "a94ffd602efbfb27cd24df45c7450996185a8a71", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-proc_macro_derive.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-proc_macro_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-proc_macro_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-proc_macro_derive.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -7,27 +7,27 @@\n // signal errors, making it incompatible with the \"warnings only\"\n // nature of issue-43106-gating-of-builtin-attrs.rs\n \n-#[proc_macro_derive = \"2500\"]\n+#[proc_macro_derive()]\n //~^ ERROR the `#[proc_macro_derive]` attribute may only be used on bare functions\n mod proc_macro_derive1 {\n-    mod inner { #![proc_macro_derive=\"2500\"] }\n+    mod inner { #![proc_macro_derive()] }\n     // (no error issued here if there was one on outer module)\n }\n \n mod proc_macro_derive2 {\n-    mod inner { #![proc_macro_derive=\"2500\"] }\n+    mod inner { #![proc_macro_derive()] }\n     //~^ ERROR the `#[proc_macro_derive]` attribute may only be used on bare functions\n \n-    #[proc_macro_derive = \"2500\"] fn f() { }\n+    #[proc_macro_derive()] fn f() { }\n     //~^ ERROR the `#[proc_macro_derive]` attribute is only usable with crates of the `proc-macro`\n \n-    #[proc_macro_derive = \"2500\"] struct S;\n+    #[proc_macro_derive()] struct S;\n     //~^ ERROR the `#[proc_macro_derive]` attribute may only be used on bare functions\n \n-    #[proc_macro_derive = \"2500\"] type T = S;\n+    #[proc_macro_derive()] type T = S;\n     //~^ ERROR the `#[proc_macro_derive]` attribute may only be used on bare functions\n \n-    #[proc_macro_derive = \"2500\"] impl S { }\n+    #[proc_macro_derive()] impl S { }\n     //~^ ERROR the `#[proc_macro_derive]` attribute may only be used on bare functions\n }\n "}, {"sha": "e202b472d9cae91edcd0229386be67e1dee9e9b6", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-proc_macro_derive.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-proc_macro_derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-proc_macro_derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-proc_macro_derive.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,38 +1,38 @@\n error: the `#[proc_macro_derive]` attribute may only be used on bare functions\n   --> $DIR/issue-43106-gating-of-proc_macro_derive.rs:10:1\n    |\n-LL | #[proc_macro_derive = \"2500\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[proc_macro_derive()]\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n \n error: the `#[proc_macro_derive]` attribute may only be used on bare functions\n   --> $DIR/issue-43106-gating-of-proc_macro_derive.rs:18:17\n    |\n-LL |     mod inner { #![proc_macro_derive=\"2500\"] }\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     mod inner { #![proc_macro_derive()] }\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the `#[proc_macro_derive]` attribute is only usable with crates of the `proc-macro` crate type\n   --> $DIR/issue-43106-gating-of-proc_macro_derive.rs:21:5\n    |\n-LL |     #[proc_macro_derive = \"2500\"] fn f() { }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[proc_macro_derive()] fn f() { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: the `#[proc_macro_derive]` attribute may only be used on bare functions\n   --> $DIR/issue-43106-gating-of-proc_macro_derive.rs:24:5\n    |\n-LL |     #[proc_macro_derive = \"2500\"] struct S;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[proc_macro_derive()] struct S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: the `#[proc_macro_derive]` attribute may only be used on bare functions\n   --> $DIR/issue-43106-gating-of-proc_macro_derive.rs:27:5\n    |\n-LL |     #[proc_macro_derive = \"2500\"] type T = S;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[proc_macro_derive()] type T = S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: the `#[proc_macro_derive]` attribute may only be used on bare functions\n   --> $DIR/issue-43106-gating-of-proc_macro_derive.rs:30:5\n    |\n-LL |     #[proc_macro_derive = \"2500\"] impl S { }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[proc_macro_derive()] impl S { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "60873f9cc7581c7ae64b01e03568a86588d241be", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-rustc_deprecated.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -4,25 +4,25 @@\n // this test incompatible with the \"warnings only\" nature of\n // issue-43106-gating-of-builtin-attrs.rs\n \n-#![rustc_deprecated           = \"1500\"]\n+#![rustc_deprecated()]\n //~^ ERROR stability attributes may not be used outside of the standard library\n \n-#[rustc_deprecated = \"1500\"]\n+#[rustc_deprecated()]\n //~^ ERROR stability attributes may not be used outside of the standard library\n mod rustc_deprecated {\n-    mod inner { #![rustc_deprecated=\"1500\"] }\n+    mod inner { #![rustc_deprecated()] }\n     //~^ ERROR stability attributes may not be used outside of the standard library\n \n-    #[rustc_deprecated = \"1500\"] fn f() { }\n+    #[rustc_deprecated()] fn f() { }\n     //~^ ERROR stability attributes may not be used outside of the standard library\n \n-    #[rustc_deprecated = \"1500\"] struct S;\n+    #[rustc_deprecated()] struct S;\n     //~^ ERROR stability attributes may not be used outside of the standard library\n \n-    #[rustc_deprecated = \"1500\"] type T = S;\n+    #[rustc_deprecated()] type T = S;\n     //~^ ERROR stability attributes may not be used outside of the standard library\n \n-    #[rustc_deprecated = \"1500\"] impl S { }\n+    #[rustc_deprecated()] impl S { }\n     //~^ ERROR stability attributes may not be used outside of the standard library\n }\n "}, {"sha": "4eead3691035637b9a5d41ca02d626e068750529", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-rustc_deprecated.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,44 +1,44 @@\n error: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:7:1\n    |\n-LL | #![rustc_deprecated           = \"1500\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![rustc_deprecated()]\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n \n error: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:10:1\n    |\n-LL | #[rustc_deprecated = \"1500\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[rustc_deprecated()]\n+   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:13:17\n    |\n-LL |     mod inner { #![rustc_deprecated=\"1500\"] }\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     mod inner { #![rustc_deprecated()] }\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^\n \n error: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:16:5\n    |\n-LL |     #[rustc_deprecated = \"1500\"] fn f() { }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[rustc_deprecated()] fn f() { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:19:5\n    |\n-LL |     #[rustc_deprecated = \"1500\"] struct S;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[rustc_deprecated()] struct S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:22:5\n    |\n-LL |     #[rustc_deprecated = \"1500\"] type T = S;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[rustc_deprecated()] type T = S;\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:25:5\n    |\n-LL |     #[rustc_deprecated = \"1500\"] impl S { }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[rustc_deprecated()] impl S { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n "}, {"sha": "e3ac2749306ab164e6293581647e2bb1c12da297", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-stable.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-stable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-stable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-stable.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -4,25 +4,25 @@\n // this test incompatible with the \"warnings only\" nature of\n // issue-43106-gating-of-builtin-attrs.rs\n \n-#![stable                     = \"1300\"]\n+#![stable()]\n //~^ ERROR stability attributes may not be used outside of the standard library\n \n-#[stable = \"1300\"]\n+#[stable()]\n //~^ ERROR stability attributes may not be used outside of the standard library\n mod stable {\n-    mod inner { #![stable=\"1300\"] }\n+    mod inner { #![stable()] }\n     //~^ ERROR stability attributes may not be used outside of the standard library\n \n-    #[stable = \"1300\"] fn f() { }\n+    #[stable()] fn f() { }\n     //~^ ERROR stability attributes may not be used outside of the standard library\n \n-    #[stable = \"1300\"] struct S;\n+    #[stable()] struct S;\n     //~^ ERROR stability attributes may not be used outside of the standard library\n \n-    #[stable = \"1300\"] type T = S;\n+    #[stable()] type T = S;\n     //~^ ERROR stability attributes may not be used outside of the standard library\n \n-    #[stable = \"1300\"] impl S { }\n+    #[stable()] impl S { }\n     //~^ ERROR stability attributes may not be used outside of the standard library\n }\n "}, {"sha": "03410eabe365220509f77d56f992a804ab156955", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-stable.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-stable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-stable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-stable.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,44 +1,44 @@\n error: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-stable.rs:7:1\n    |\n-LL | #![stable                     = \"1300\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![stable()]\n+   | ^^^^^^^^^^^^\n \n error: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-stable.rs:10:1\n    |\n-LL | #[stable = \"1300\"]\n-   | ^^^^^^^^^^^^^^^^^^\n+LL | #[stable()]\n+   | ^^^^^^^^^^^\n \n error: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-stable.rs:13:17\n    |\n-LL |     mod inner { #![stable=\"1300\"] }\n-   |                 ^^^^^^^^^^^^^^^^^\n+LL |     mod inner { #![stable()] }\n+   |                 ^^^^^^^^^^^^\n \n error: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-stable.rs:16:5\n    |\n-LL |     #[stable = \"1300\"] fn f() { }\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     #[stable()] fn f() { }\n+   |     ^^^^^^^^^^^\n \n error: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-stable.rs:19:5\n    |\n-LL |     #[stable = \"1300\"] struct S;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     #[stable()] struct S;\n+   |     ^^^^^^^^^^^\n \n error: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-stable.rs:22:5\n    |\n-LL |     #[stable = \"1300\"] type T = S;\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     #[stable()] type T = S;\n+   |     ^^^^^^^^^^^\n \n error: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-stable.rs:25:5\n    |\n-LL |     #[stable = \"1300\"] impl S { }\n-   |     ^^^^^^^^^^^^^^^^^^\n+LL |     #[stable()] impl S { }\n+   |     ^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n "}, {"sha": "8d519c3106c5ec068d6511c597ee8278b233bfef", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-unstable.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-unstable.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -4,25 +4,25 @@\n // this test incompatible with the \"warnings only\" nature of\n // issue-43106-gating-of-builtin-attrs.rs\n \n-#![unstable                   = \"1200\"]\n+#![unstable()]\n //~^ ERROR stability attributes may not be used outside of the standard library\n \n-#[unstable = \"1200\"]\n+#[unstable()]\n //~^ ERROR stability attributes may not be used outside of the standard library\n mod unstable {\n-    mod inner { #![unstable=\"1200\"] }\n+    mod inner { #![unstable()] }\n     //~^ ERROR stability attributes may not be used outside of the standard library\n \n-    #[unstable = \"1200\"] fn f() { }\n+    #[unstable()] fn f() { }\n     //~^ ERROR stability attributes may not be used outside of the standard library\n \n-    #[unstable = \"1200\"] struct S;\n+    #[unstable()] struct S;\n     //~^ ERROR stability attributes may not be used outside of the standard library\n \n-    #[unstable = \"1200\"] type T = S;\n+    #[unstable()] type T = S;\n     //~^ ERROR stability attributes may not be used outside of the standard library\n \n-    #[unstable = \"1200\"] impl S { }\n+    #[unstable()] impl S { }\n     //~^ ERROR stability attributes may not be used outside of the standard library\n }\n "}, {"sha": "5952b3836aac84aca295d1291341345aa68d86ed", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-unstable.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-unstable.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,44 +1,44 @@\n error: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-unstable.rs:7:1\n    |\n-LL | #![unstable                   = \"1200\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![unstable()]\n+   | ^^^^^^^^^^^^^^\n \n error: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-unstable.rs:10:1\n    |\n-LL | #[unstable = \"1200\"]\n-   | ^^^^^^^^^^^^^^^^^^^^\n+LL | #[unstable()]\n+   | ^^^^^^^^^^^^^\n \n error: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-unstable.rs:13:17\n    |\n-LL |     mod inner { #![unstable=\"1200\"] }\n-   |                 ^^^^^^^^^^^^^^^^^^^\n+LL |     mod inner { #![unstable()] }\n+   |                 ^^^^^^^^^^^^^^\n \n error: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-unstable.rs:16:5\n    |\n-LL |     #[unstable = \"1200\"] fn f() { }\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+LL |     #[unstable()] fn f() { }\n+   |     ^^^^^^^^^^^^^\n \n error: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-unstable.rs:19:5\n    |\n-LL |     #[unstable = \"1200\"] struct S;\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+LL |     #[unstable()] struct S;\n+   |     ^^^^^^^^^^^^^\n \n error: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-unstable.rs:22:5\n    |\n-LL |     #[unstable = \"1200\"] type T = S;\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+LL |     #[unstable()] type T = S;\n+   |     ^^^^^^^^^^^^^\n \n error: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-unstable.rs:25:5\n    |\n-LL |     #[unstable = \"1200\"] impl S { }\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+LL |     #[unstable()] impl S { }\n+   |     ^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n "}, {"sha": "e0cb9c882192b7ef6f1206916611c456209b61e6", "filename": "src/test/ui/feature-gates/feature-gate-unwind-attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unwind-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unwind-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unwind-attributes.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -8,7 +8,7 @@ extern {\n     fn extern_fn();\n // CHECK-NOT: Function Attrs: nounwind\n // CHECK: declare void @unwinding_extern_fn\n-    #[unwind] //~ ERROR #[unwind] is experimental\n+    #[unwind(allowed)] //~ ERROR #[unwind] is experimental\n     fn unwinding_extern_fn();\n }\n "}, {"sha": "918d40d681bb4c1838264d042e59f16ebff98b3b", "filename": "src/test/ui/feature-gates/feature-gate-unwind-attributes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unwind-attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unwind-attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unwind-attributes.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: #[unwind] is experimental\n   --> $DIR/feature-gate-unwind-attributes.rs:11:5\n    |\n-LL |     #[unwind] //~ ERROR #[unwind] is experimental\n-   |     ^^^^^^^^^\n+LL |     #[unwind(allowed)] //~ ERROR #[unwind] is experimental\n+   |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(unwind_attributes)] to the crate attributes to enable\n "}, {"sha": "fb4cc94f779fe7242a5bc7a59d159595b2dbe2a4", "filename": "src/test/ui/gated-bad-feature.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fgated-bad-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fgated-bad-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgated-bad-feature.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -6,8 +6,8 @@\n //~^^^ ERROR: malformed feature\n //~^^^ ERROR: malformed feature\n \n-#![feature] //~ ERROR: malformed feature\n-#![feature = \"foo\"] //~ ERROR: malformed feature\n+#![feature] //~ ERROR: attribute must be of the form\n+#![feature = \"foo\"] //~ ERROR: attribute must be of the form\n \n #![feature(test_removed_feature)] //~ ERROR: feature has been removed\n "}, {"sha": "141c51609b7c59d8bf771423203c4591f5b06b02", "filename": "src/test/ui/gated-bad-feature.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fgated-bad-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fgated-bad-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgated-bad-feature.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -10,25 +10,25 @@ error[E0556]: malformed feature, expected just one word\n LL |     foo = \"baz\"\n    |     ^^^^^^^^^^^\n \n-error[E0555]: malformed feature attribute, expected #![feature(...)]\n+error[E0557]: feature has been removed\n+  --> $DIR/gated-bad-feature.rs:12:12\n+   |\n+LL | #![feature(test_removed_feature)] //~ ERROR: feature has been removed\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+\n+error: attribute must be of the form `#[feature(name1, name1, ...)]`\n   --> $DIR/gated-bad-feature.rs:9:1\n    |\n-LL | #![feature] //~ ERROR: malformed feature\n+LL | #![feature] //~ ERROR: attribute must be of the form\n    | ^^^^^^^^^^^\n \n-error[E0555]: malformed feature attribute, expected #![feature(...)]\n+error: attribute must be of the form `#[feature(name1, name1, ...)]`\n   --> $DIR/gated-bad-feature.rs:10:1\n    |\n-LL | #![feature = \"foo\"] //~ ERROR: malformed feature\n+LL | #![feature = \"foo\"] //~ ERROR: attribute must be of the form\n    | ^^^^^^^^^^^^^^^^^^^\n \n-error[E0557]: feature has been removed\n-  --> $DIR/gated-bad-feature.rs:12:12\n-   |\n-LL | #![feature(test_removed_feature)] //~ ERROR: feature has been removed\n-   |            ^^^^^^^^^^^^^^^^^^^^\n-\n error: aborting due to 5 previous errors\n \n-Some errors occurred: E0555, E0556, E0557.\n-For more information about an error, try `rustc --explain E0555`.\n+Some errors occurred: E0556, E0557.\n+For more information about an error, try `rustc --explain E0556`."}, {"sha": "8157ccdcbf0b95e87c8ee1a6d53b5a9e640a16ed", "filename": "src/test/ui/invalid_crate_type_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Finvalid_crate_type_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Finvalid_crate_type_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid_crate_type_syntax.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,5 +1,5 @@\n // regression test for issue 16974\n-#![crate_type(lib)]  //~ ERROR `crate_type` requires a value\n+#![crate_type(lib)]  //~ ERROR attribute must be of the form\n \n fn my_lib_fn() {}\n "}, {"sha": "8d6948b583c51f692e23935752f211f572459ccb", "filename": "src/test/ui/invalid_crate_type_syntax.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Finvalid_crate_type_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Finvalid_crate_type_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid_crate_type_syntax.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,10 +1,8 @@\n-error: `crate_type` requires a value\n+error: attribute must be of the form `#[crate_type = \"bin|lib|...\"]`\n   --> $DIR/invalid_crate_type_syntax.rs:2:1\n    |\n-LL | #![crate_type(lib)]  //~ ERROR `crate_type` requires a value\n+LL | #![crate_type(lib)]  //~ ERROR attribute must be of the form\n    | ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for example: `#![crate_type=\"lib\"]`\n \n error: aborting due to previous error\n "}, {"sha": "74667d74334cc20cb50b3316d0f6670ef15f6088", "filename": "src/test/ui/issues/issue-43988.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fissues%2Fissue-43988.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fissues%2Fissue-43988.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43988.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -24,8 +24,7 @@ fn main() {\n     #[repr]\n     let _y = \"123\";\n     //~^^ ERROR attribute should not be applied to a statement\n-    //~| WARN `repr` attribute must have a hint\n-\n+    //~| ERROR attribute must be of the form\n \n     fn foo() {}\n \n@@ -35,5 +34,5 @@ fn main() {\n \n     let _z = #[repr] 1;\n     //~^ ERROR attribute should not be applied to an expression\n-    //~| WARN `repr` attribute must have a hint\n+    //~| ERROR attribute must be of the form\n }"}, {"sha": "6fe41a3de29b4f0718aede48dcd399c55e53d352", "filename": "src/test/ui/issues/issue-43988.stderr", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fissues%2Fissue-43988.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fissues%2Fissue-43988.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43988.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,21 +1,14 @@\n-warning: `repr` attribute must have a hint\n+error: attribute must be of the form `#[repr(C, packed, ...)]`\n   --> $DIR/issue-43988.rs:24:5\n    |\n LL |     #[repr]\n-   |     ^^^^^^^ needs a hint\n-   |\n-   = note: #[warn(bad_repr)] on by default\n-   = help: valid hints include `#[repr(C)]`, `#[repr(packed)]`, `#[repr(rust)]` and `#[repr(transparent)]`\n-   = note: for more information, visit <https://doc.rust-lang.org/reference/type-layout.html>\n+   |     ^^^^^^^\n \n-warning: `repr` attribute must have a hint\n-  --> $DIR/issue-43988.rs:36:14\n+error: attribute must be of the form `#[repr(C, packed, ...)]`\n+  --> $DIR/issue-43988.rs:35:14\n    |\n LL |     let _z = #[repr] 1;\n-   |              ^^^^^^^ needs a hint\n-   |\n-   = help: valid hints include `#[repr(C)]`, `#[repr(packed)]`, `#[repr(rust)]` and `#[repr(transparent)]`\n-   = note: for more information, visit <https://doc.rust-lang.org/reference/type-layout.html>\n+   |              ^^^^^^^\n \n error[E0518]: attribute should be applied to function or closure\n   --> $DIR/issue-43988.rs:5:5\n@@ -60,20 +53,20 @@ LL |     let _y = \"123\";\n    |     --------------- not a struct, enum or union\n \n error[E0518]: attribute should be applied to function or closure\n-  --> $DIR/issue-43988.rs:32:5\n+  --> $DIR/issue-43988.rs:31:5\n    |\n LL |     #[inline(ABC)]\n    |     ^^^^^^^^^^^^^^\n LL |     foo();\n    |     ----- not a function or closure\n \n error[E0517]: attribute should not be applied to an expression\n-  --> $DIR/issue-43988.rs:36:14\n+  --> $DIR/issue-43988.rs:35:14\n    |\n LL |     let _z = #[repr] 1;\n    |              ^^^^^^^ - not defining a struct, enum or union\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 9 previous errors\n \n Some errors occurred: E0517, E0518.\n For more information about an error, try `rustc --explain E0517`."}, {"sha": "c97a4320f1d2092907e5e0e87e68b5f8c35a9dad", "filename": "src/test/ui/lint/lint-malformed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Flint%2Flint-malformed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Flint%2Flint-malformed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-malformed.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,4 +1,4 @@\n-#![deny = \"foo\"] //~ ERROR malformed lint attribute\n+#![deny = \"foo\"] //~ ERROR attribute must be of the form\n #![allow(bar = \"baz\")] //~ ERROR malformed lint attribute\n \n fn main() { }"}, {"sha": "98a7cecc2bb2d1ffffeacb6dac928ee072351ee2", "filename": "src/test/ui/lint/lint-malformed.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Flint%2Flint-malformed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Flint%2Flint-malformed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-malformed.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,15 +1,15 @@\n-error[E0452]: malformed lint attribute\n-  --> $DIR/lint-malformed.rs:1:1\n-   |\n-LL | #![deny = \"foo\"] //~ ERROR malformed lint attribute\n-   | ^^^^^^^^^^^^^^^^\n-\n error[E0452]: malformed lint attribute\n   --> $DIR/lint-malformed.rs:2:10\n    |\n LL | #![allow(bar = \"baz\")] //~ ERROR malformed lint attribute\n    |          ^^^^^^^^^^^\n \n+error: attribute must be of the form `#[deny(lint1, lint2, ..., /*opt*/ reason = \"...\")]`\n+  --> $DIR/lint-malformed.rs:1:1\n+   |\n+LL | #![deny = \"foo\"] //~ ERROR attribute must be of the form\n+   | ^^^^^^^^^^^^^^^^\n+\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0452`."}, {"sha": "14d23be059c87d18fd9049debd5dc2dafefd7b70", "filename": "src/test/ui/macros/meta-item-absolute-path.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fmacros%2Fmeta-item-absolute-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fmacros%2Fmeta-item-absolute-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmeta-item-absolute-path.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -0,0 +1,4 @@\n+#[derive(::Absolute)] //~ ERROR failed to resolve\n+struct S;\n+\n+fn main() {}"}, {"sha": "31b0a27bbc8da35ef0e1e558a0b2566349af8b87", "filename": "src/test/ui/macros/meta-item-absolute-path.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fmacros%2Fmeta-item-absolute-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fmacros%2Fmeta-item-absolute-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmeta-item-absolute-path.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -0,0 +1,9 @@\n+error[E0433]: failed to resolve: maybe a missing `extern crate Absolute;`?\n+  --> $DIR/meta-item-absolute-path.rs:1:12\n+   |\n+LL | #[derive(::Absolute)] //~ ERROR failed to resolve\n+   |            ^^^^^^^^ maybe a missing `extern crate Absolute;`?\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "74d22102c664df426763d75cdc0cbe2e07e0e7e6", "filename": "src/test/ui/malformed/malformed-derive-entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -11,7 +11,7 @@ struct Test2;\n struct Test3;\n \n #[derive]\n-//~^ WARNING empty trait list\n+//~^ ERROR attribute must be of the form\n struct Test4;\n \n fn main() {}"}, {"sha": "f546f74220a1c699b522a8f84dec080c2177e930", "filename": "src/test/ui/malformed/malformed-derive-entry.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -16,11 +16,11 @@ warning: empty trait list in `derive`\n LL | #[derive()]\n    | ^^^^^^^^^^^\n \n-warning: empty trait list in `derive`\n+error: attribute must be of the form `#[derive(Trait1, Trait2, ...)]`\n   --> $DIR/malformed-derive-entry.rs:13:1\n    |\n LL | #[derive]\n    | ^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "16e7a952ef2d072885230cc58b083f7b2fd34421", "filename": "src/test/ui/malformed/malformed-plugin-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,4 +1,4 @@\n #![feature(plugin)]\n-#![plugin] //~ ERROR malformed plugin attribute\n+#![plugin] //~ ERROR attribute must be of the form\n \n fn main() {}"}, {"sha": "f42e66e2b32f34caea20df8569d235e31c91fa5a", "filename": "src/test/ui/malformed/malformed-plugin-1.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,9 +1,8 @@\n-error[E0498]: malformed plugin attribute\n+error: attribute must be of the form `#[plugin(name|name(args))]`\n   --> $DIR/malformed-plugin-1.rs:2:1\n    |\n-LL | #![plugin] //~ ERROR malformed plugin attribute\n+LL | #![plugin] //~ ERROR attribute must be of the form\n    | ^^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0498`."}, {"sha": "70a1d7f85e8b6907c4b32e5ef3230094d5137435", "filename": "src/test/ui/malformed/malformed-plugin-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,4 +1,4 @@\n #![feature(plugin)]\n-#![plugin=\"bleh\"] //~ ERROR malformed plugin attribute\n+#![plugin=\"bleh\"] //~ ERROR attribute must be of the form\n \n fn main() {}"}, {"sha": "923cbc188607e694c1ae884f1379d41d92a804e8", "filename": "src/test/ui/malformed/malformed-plugin-2.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,9 +1,8 @@\n-error[E0498]: malformed plugin attribute\n+error: attribute must be of the form `#[plugin(name|name(args))]`\n   --> $DIR/malformed-plugin-2.rs:2:1\n    |\n-LL | #![plugin=\"bleh\"] //~ ERROR malformed plugin attribute\n+LL | #![plugin=\"bleh\"] //~ ERROR attribute must be of the form\n    | ^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0498`."}, {"sha": "b5c992440d4dc65e803e7e8d4f42b8b7af559a95", "filename": "src/test/ui/malformed/malformed-regressions.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-regressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-regressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-regressions.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -0,0 +1,8 @@\n+// compile-pass\n+\n+#[doc] //~ WARN attribute must be of the form\n+#[ignore()] //~ WARN attribute must be of the form\n+#[inline = \"\"] //~ WARN attribute must be of the form\n+#[link] //~ WARN attribute must be of the form\n+#[link = \"\"] //~ WARN attribute must be of the form\n+fn main() {}"}, {"sha": "a3b2bda07f6259941387db4987d90a76476aa010", "filename": "src/test/ui/malformed/malformed-regressions.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-regressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-regressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-regressions.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -0,0 +1,48 @@\n+warning: attribute must be of the form `#[doc(hidden|inline|...)]` or `#[doc = \"string\"]`\n+  --> $DIR/malformed-regressions.rs:3:1\n+   |\n+LL | #[doc] //~ WARN attribute must be of the form\n+   | ^^^^^^\n+   |\n+   = note: #[warn(ill_formed_attribute_input)] on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n+\n+warning: attribute must be of the form `#[ignore]` or `#[ignore = \"reason\"]`\n+  --> $DIR/malformed-regressions.rs:4:1\n+   |\n+LL | #[ignore()] //~ WARN attribute must be of the form\n+   | ^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n+\n+warning: attribute must be of the form `#[inline]` or `#[inline(always|never)]`\n+  --> $DIR/malformed-regressions.rs:5:1\n+   |\n+LL | #[inline = \"\"] //~ WARN attribute must be of the form\n+   | ^^^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n+\n+warning: attribute must be of the form `#[link(name = \"...\", /*opt*/ kind = \"dylib|static|...\",\n+                                             /*opt*/ cfg = \"...\")]`\n+  --> $DIR/malformed-regressions.rs:6:1\n+   |\n+LL | #[link] //~ WARN attribute must be of the form\n+   | ^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n+\n+warning: attribute must be of the form `#[link(name = \"...\", /*opt*/ kind = \"dylib|static|...\",\n+                                             /*opt*/ cfg = \"...\")]`\n+  --> $DIR/malformed-regressions.rs:7:1\n+   |\n+LL | #[link = \"\"] //~ WARN attribute must be of the form\n+   | ^^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #57571 <https://github.com/rust-lang/rust/issues/57571>\n+"}, {"sha": "f91c6bedb2b2130b8b76049f0afe9bc7c957d4bc", "filename": "src/test/ui/malformed/malformed-special-attrs.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-special-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-special-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-special-attrs.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -0,0 +1,13 @@\n+#[cfg_attr] //~ ERROR expected `(`, found `<eof>`\n+struct S1;\n+\n+#[cfg_attr = \"\"] //~ ERROR expected `(`, found `=`\n+struct S2;\n+\n+#[derive] //~ ERROR attribute must be of the form\n+struct S3;\n+\n+#[derive = \"\"] //~ ERROR attribute must be of the form\n+struct S4;\n+\n+fn main() {}"}, {"sha": "1653aa150d5786114069dd74799dc18a1dda7dc1", "filename": "src/test/ui/malformed/malformed-special-attrs.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-special-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-special-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-special-attrs.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -0,0 +1,25 @@\n+error: expected `(`, found `<eof>`\n+\n+error: expected `(`, found `=`\n+  --> $DIR/malformed-special-attrs.rs:4:12\n+   |\n+LL | #[cfg_attr] //~ ERROR expected `(`, found `<eof>`\n+   | - expected `(`\n+...\n+LL | #[cfg_attr = \"\"] //~ ERROR expected `(`, found `=`\n+   |            ^ unexpected token\n+\n+error: attribute must be of the form `#[derive(Trait1, Trait2, ...)]`\n+  --> $DIR/malformed-special-attrs.rs:7:1\n+   |\n+LL | #[derive] //~ ERROR attribute must be of the form\n+   | ^^^^^^^^^\n+\n+error: attribute must be of the form `#[derive(Trait1, Trait2, ...)]`\n+  --> $DIR/malformed-special-attrs.rs:10:1\n+   |\n+LL | #[derive = \"\"] //~ ERROR attribute must be of the form\n+   | ^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "ea356d574f6222bec551e9f1016cf65cb53dd150", "filename": "src/test/ui/marker_trait_attr/marker-attribute-with-values.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-with-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-with-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-with-values.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -3,14 +3,14 @@\n \n #[marker(always)]\n trait Marker1 {}\n-//~^^ ERROR attribute should be empty\n+//~^^ ERROR attribute must be of the form\n \n #[marker(\"never\")]\n trait Marker2 {}\n-//~^^ ERROR attribute should be empty\n+//~^^ ERROR attribute must be of the form\n \n #[marker(key = value)]\n trait Marker3 {}\n-//~^^ ERROR attribute should be empty\n+//~^^ ERROR expected unsuffixed literal or identifier, found value\n \n fn main() {}"}, {"sha": "c683b393d84e9f22c7d2c23c14a06686bf60969e", "filename": "src/test/ui/marker_trait_attr/marker-attribute-with-values.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-with-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-with-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fmarker-attribute-with-values.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,20 +1,20 @@\n-error: attribute should be empty\n+error: attribute must be of the form `#[marker]`\n   --> $DIR/marker-attribute-with-values.rs:4:1\n    |\n LL | #[marker(always)]\n    | ^^^^^^^^^^^^^^^^^\n \n-error: attribute should be empty\n+error: attribute must be of the form `#[marker]`\n   --> $DIR/marker-attribute-with-values.rs:8:1\n    |\n LL | #[marker(\"never\")]\n    | ^^^^^^^^^^^^^^^^^^\n \n-error: attribute should be empty\n-  --> $DIR/marker-attribute-with-values.rs:12:1\n+error: expected unsuffixed literal or identifier, found value\n+  --> $DIR/marker-attribute-with-values.rs:12:10\n    |\n LL | #[marker(key = value)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n+   |          ^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e0af2e67e1836f4f9a874fa3d1aa306b1cc3bea8", "filename": "src/test/ui/nll/user-annotations/normalization.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -2,7 +2,6 @@\n // after normalization.\n \n #![feature(nll)]\n-#![ignore(unused)]\n \n trait Foo { type Out; }\n impl Foo for () { type Out = &'static u32; }"}, {"sha": "71bf8507a735f48c923aea0995db3fa0b1157ef7", "filename": "src/test/ui/nll/user-annotations/normalization.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `a` does not live long enough\n-  --> $DIR/normalization.rs:12:31\n+  --> $DIR/normalization.rs:11:31\n    |\n LL |     let b: <() as Foo>::Out = &a; //~ ERROR\n    |            ----------------   ^^ borrowed value does not live long enough"}, {"sha": "392c6fd0dfa13ef0385a856b2a522a37e8ec1cdd", "filename": "src/test/ui/no_crate_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fno_crate_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fno_crate_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_crate_type.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,5 +1,5 @@\n // regression test for issue 11256\n-#![crate_type]  //~ ERROR `crate_type` requires a value\n+#![crate_type]  //~ ERROR attribute must be of the form\n \n fn main() {\n     return"}, {"sha": "6b76ab68658cde56a16daf4e45991e1bf74a3821", "filename": "src/test/ui/no_crate_type.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fno_crate_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fno_crate_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_crate_type.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,10 +1,8 @@\n-error: `crate_type` requires a value\n+error: attribute must be of the form `#[crate_type = \"bin|lib|...\"]`\n   --> $DIR/no_crate_type.rs:2:1\n    |\n-LL | #![crate_type]  //~ ERROR `crate_type` requires a value\n+LL | #![crate_type]  //~ ERROR attribute must be of the form\n    | ^^^^^^^^^^^^^^\n-   |\n-   = note: for example: `#![crate_type=\"lib\"]`\n \n error: aborting due to previous error\n "}, {"sha": "6843c4bfa998a3256f23c81ade1bbfe8dc89184b", "filename": "src/test/ui/on-unimplemented/bad-annotation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -14,7 +14,8 @@ trait MyFromIterator<A> {\n     fn my_from_iter<T: Iterator<Item=A>>(iterator: T) -> Self;\n }\n \n-#[rustc_on_unimplemented] //~ ERROR `#[rustc_on_unimplemented]` requires a value\n+#[rustc_on_unimplemented]\n+//~^ ERROR attribute must be of the form\n trait BadAnnotation1\n {}\n "}, {"sha": "31b626e0ff4c55a8769ae0ec81088ba6883813a4", "filename": "src/test/ui/on-unimplemented/bad-annotation.stderr", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,71 +1,69 @@\n-error[E0232]: `#[rustc_on_unimplemented]` requires a value\n+error: attribute must be of the form `#[rustc_on_unimplemented(/*opt*/ message = \"...\", /*opt*/ label = \"...\", /*opt*/ note = \"...\")]` or `#[rustc_on_unimplemented = \"message\"]`\n   --> $DIR/bad-annotation.rs:17:1\n    |\n-LL | #[rustc_on_unimplemented] //~ ERROR `#[rustc_on_unimplemented]` requires a value\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ value required here\n-   |\n-   = note: eg `#[rustc_on_unimplemented(message=\"foo\")]`\n+LL | #[rustc_on_unimplemented]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0230]: there is no parameter `C` on trait `BadAnnotation2`\n-  --> $DIR/bad-annotation.rs:21:1\n+  --> $DIR/bad-annotation.rs:22:1\n    |\n LL | #[rustc_on_unimplemented = \"Unimplemented trait error on `{Self}` with params `<{A},{B},{C}>`\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0231]: only named substitution parameters are allowed\n-  --> $DIR/bad-annotation.rs:26:1\n+  --> $DIR/bad-annotation.rs:27:1\n    |\n LL | #[rustc_on_unimplemented = \"Unimplemented trait error on `{Self}` with params `<{A},{B},{}>`\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0232]: this attribute must have a valid value\n-  --> $DIR/bad-annotation.rs:31:26\n+  --> $DIR/bad-annotation.rs:32:26\n    |\n LL | #[rustc_on_unimplemented(lorem=\"\")]\n    |                          ^^^^^^^^ expected value here\n    |\n    = note: eg `#[rustc_on_unimplemented(message=\"foo\")]`\n \n error[E0232]: this attribute must have a valid value\n-  --> $DIR/bad-annotation.rs:35:26\n+  --> $DIR/bad-annotation.rs:36:26\n    |\n LL | #[rustc_on_unimplemented(lorem(ipsum(dolor)))]\n    |                          ^^^^^^^^^^^^^^^^^^^ expected value here\n    |\n    = note: eg `#[rustc_on_unimplemented(message=\"foo\")]`\n \n error[E0232]: this attribute must have a valid value\n-  --> $DIR/bad-annotation.rs:39:39\n+  --> $DIR/bad-annotation.rs:40:39\n    |\n LL | #[rustc_on_unimplemented(message=\"x\", message=\"y\")]\n    |                                       ^^^^^^^^^^^ expected value here\n    |\n    = note: eg `#[rustc_on_unimplemented(message=\"foo\")]`\n \n error[E0232]: this attribute must have a valid value\n-  --> $DIR/bad-annotation.rs:43:39\n+  --> $DIR/bad-annotation.rs:44:39\n    |\n LL | #[rustc_on_unimplemented(message=\"x\", on(desugared, message=\"y\"))]\n    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected value here\n    |\n    = note: eg `#[rustc_on_unimplemented(message=\"foo\")]`\n \n error[E0232]: empty `on`-clause in `#[rustc_on_unimplemented]`\n-  --> $DIR/bad-annotation.rs:47:26\n+  --> $DIR/bad-annotation.rs:48:26\n    |\n LL | #[rustc_on_unimplemented(on(), message=\"y\")]\n    |                          ^^^^ empty on-clause here\n \n error[E0232]: this attribute must have a valid value\n-  --> $DIR/bad-annotation.rs:51:26\n+  --> $DIR/bad-annotation.rs:52:26\n    |\n LL | #[rustc_on_unimplemented(on=\"x\", message=\"y\")]\n    |                          ^^^^^^ expected value here\n    |\n    = note: eg `#[rustc_on_unimplemented(message=\"foo\")]`\n \n error[E0232]: this attribute must have a valid value\n-  --> $DIR/bad-annotation.rs:58:40\n+  --> $DIR/bad-annotation.rs:59:40\n    |\n LL | #[rustc_on_unimplemented(on(desugared, on(desugared, message=\"x\")), message=\"y\")]\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected value here"}, {"sha": "d8717f360e9d23a7829b64d59eb266f5d8353d34", "filename": "src/test/ui/on-unimplemented/expected-comma-found-token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -4,7 +4,7 @@\n \n #![feature(on_unimplemented)]\n \n-#[rustc_on_unimplemented( //~ ERROR `#[rustc_on_unimplemented]` requires a value\n+#[rustc_on_unimplemented(\n     message=\"the message\"\n     label=\"the label\" //~ ERROR expected one of `)` or `,`, found `label`\n )]"}, {"sha": "1e0808e1d8408eb1c3ea5dcfc2f9a0e20ee85ebe", "filename": "src/test/ui/on-unimplemented/expected-comma-found-token.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -6,17 +6,5 @@ LL |     message=\"the message\"\n LL |     label=\"the label\" //~ ERROR expected one of `)` or `,`, found `label`\n    |     ^^^^^ unexpected token\n \n-error[E0232]: `#[rustc_on_unimplemented]` requires a value\n-  --> $DIR/expected-comma-found-token.rs:7:1\n-   |\n-LL | / #[rustc_on_unimplemented( //~ ERROR `#[rustc_on_unimplemented]` requires a value\n-LL | |     message=\"the message\"\n-LL | |     label=\"the label\" //~ ERROR expected one of `)` or `,`, found `label`\n-LL | | )]\n-   | |__^ value required here\n-   |\n-   = note: eg `#[rustc_on_unimplemented(message=\"foo\")]`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0232`."}, {"sha": "91a4abbd03860f1f1c051af930f33da7448ad0ce", "filename": "src/test/ui/parser/attr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -2,5 +2,6 @@\n \n fn main() {}\n \n-#![lang(foo)] //~ ERROR an inner attribute is not permitted in this context\n+#![lang = \"foo\"] //~ ERROR an inner attribute is not permitted in this context\n+                 //~| ERROR definition of an unknown language item: `foo`\n fn foo() {}"}, {"sha": "8151bd7cdd7b17c5530c4dc4dc614f755f79ada7", "filename": "src/test/ui/parser/attr.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fparser%2Fattr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fparser%2Fattr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,10 +1,17 @@\n error: an inner attribute is not permitted in this context\n   --> $DIR/attr.rs:5:3\n    |\n-LL | #![lang(foo)] //~ ERROR an inner attribute is not permitted in this context\n+LL | #![lang = \"foo\"] //~ ERROR an inner attribute is not permitted in this context\n    |   ^\n    |\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n-error: aborting due to previous error\n+error[E0522]: definition of an unknown language item: `foo`\n+  --> $DIR/attr.rs:5:1\n+   |\n+LL | #![lang = \"foo\"] //~ ERROR an inner attribute is not permitted in this context\n+   | ^^^^^^^^^^^^^^^^ definition of unknown language item `foo`\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0522`."}, {"sha": "a0b982d75f5194f84e0d58fd4fbcf8acf2aacc1a", "filename": "src/test/ui/proc-macro/attribute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fproc-macro%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fproc-macro%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -6,13 +6,13 @@\n extern crate proc_macro;\n \n #[proc_macro_derive]\n-//~^ ERROR: attribute must be of form: #[proc_macro_derive(TraitName)]\n+//~^ ERROR: attribute must be of the form\n pub fn foo1(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n     input\n }\n \n #[proc_macro_derive = \"foo\"]\n-//~^ ERROR: attribute must be of form: #[proc_macro_derive(TraitName)]\n+//~^ ERROR: attribute must be of the form\n pub fn foo2(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n     input\n }"}, {"sha": "231eb1f10689842c97c5c5a785caab94ea175cef", "filename": "src/test/ui/proc-macro/attribute.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fproc-macro%2Fattribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fproc-macro%2Fattribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,15 +1,3 @@\n-error: attribute must be of form: #[proc_macro_derive(TraitName)]\n-  --> $DIR/attribute.rs:8:1\n-   |\n-LL | #[proc_macro_derive]\n-   | ^^^^^^^^^^^^^^^^^^^^\n-\n-error: attribute must be of form: #[proc_macro_derive(TraitName)]\n-  --> $DIR/attribute.rs:14:1\n-   |\n-LL | #[proc_macro_derive = \"foo\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: must only be one word\n   --> $DIR/attribute.rs:21:5\n    |\n@@ -46,5 +34,17 @@ error: attribute must have either one or two arguments\n LL | #[proc_macro_derive(l, attributes(m), n)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: attribute must be of the form `#[proc_macro_derive(TraitName, /*opt*/ attributes(name1, name2, ...))]`\n+  --> $DIR/attribute.rs:8:1\n+   |\n+LL | #[proc_macro_derive]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: attribute must be of the form `#[proc_macro_derive(TraitName, /*opt*/ attributes(name1, name2, ...))]`\n+  --> $DIR/attribute.rs:14:1\n+   |\n+LL | #[proc_macro_derive = \"foo\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: aborting due to 8 previous errors\n "}, {"sha": "c5ec4925e4310891f9794698a74b54ef6d7a80a7", "filename": "src/test/ui/proc-macro/invalid-attributes.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-attributes.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -7,20 +7,20 @@ extern crate proc_macro;\n \n use proc_macro::TokenStream;\n \n-#[proc_macro = \"test\"] //~ ERROR: does not take any arguments\n+#[proc_macro = \"test\"] //~ ERROR attribute must be of the form\n pub fn a(a: TokenStream) -> TokenStream { a }\n \n-#[proc_macro()] //~ ERROR: does not take any arguments\n+#[proc_macro()] //~ ERROR attribute must be of the form\n pub fn c(a: TokenStream) -> TokenStream { a }\n \n-#[proc_macro(x)] //~ ERROR: does not take any arguments\n+#[proc_macro(x)] //~ ERROR attribute must be of the form\n pub fn d(a: TokenStream) -> TokenStream { a }\n \n-#[proc_macro_attribute = \"test\"] //~ ERROR: does not take any arguments\n+#[proc_macro_attribute = \"test\"] //~ ERROR attribute must be of the form\n pub fn e(_: TokenStream, a: TokenStream) -> TokenStream { a }\n \n-#[proc_macro_attribute()] //~ ERROR: does not take any arguments\n+#[proc_macro_attribute()] //~ ERROR attribute must be of the form\n pub fn g(_: TokenStream, a: TokenStream) -> TokenStream { a }\n \n-#[proc_macro_attribute(x)] //~ ERROR: does not take any arguments\n+#[proc_macro_attribute(x)] //~ ERROR attribute must be of the form\n pub fn h(_: TokenStream, a: TokenStream) -> TokenStream { a }"}, {"sha": "06a7ef2b206c7c87f32d3f3e68a75b8154ffe014", "filename": "src/test/ui/proc-macro/invalid-attributes.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-attributes.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,37 +1,37 @@\n-error: `#[proc_macro]` attribute does not take any arguments\n+error: attribute must be of the form `#[proc_macro]`\n   --> $DIR/invalid-attributes.rs:10:1\n    |\n-LL | #[proc_macro = \"test\"] //~ ERROR: does not take any arguments\n+LL | #[proc_macro = \"test\"] //~ ERROR attribute must be of the form\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: `#[proc_macro]` attribute does not take any arguments\n+error: attribute must be of the form `#[proc_macro]`\n   --> $DIR/invalid-attributes.rs:13:1\n    |\n-LL | #[proc_macro()] //~ ERROR: does not take any arguments\n+LL | #[proc_macro()] //~ ERROR attribute must be of the form\n    | ^^^^^^^^^^^^^^^\n \n-error: `#[proc_macro]` attribute does not take any arguments\n+error: attribute must be of the form `#[proc_macro]`\n   --> $DIR/invalid-attributes.rs:16:1\n    |\n-LL | #[proc_macro(x)] //~ ERROR: does not take any arguments\n+LL | #[proc_macro(x)] //~ ERROR attribute must be of the form\n    | ^^^^^^^^^^^^^^^^\n \n-error: `#[proc_macro_attribute]` attribute does not take any arguments\n+error: attribute must be of the form `#[proc_macro_attribute]`\n   --> $DIR/invalid-attributes.rs:19:1\n    |\n-LL | #[proc_macro_attribute = \"test\"] //~ ERROR: does not take any arguments\n+LL | #[proc_macro_attribute = \"test\"] //~ ERROR attribute must be of the form\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: `#[proc_macro_attribute]` attribute does not take any arguments\n+error: attribute must be of the form `#[proc_macro_attribute]`\n   --> $DIR/invalid-attributes.rs:22:1\n    |\n-LL | #[proc_macro_attribute()] //~ ERROR: does not take any arguments\n+LL | #[proc_macro_attribute()] //~ ERROR attribute must be of the form\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: `#[proc_macro_attribute]` attribute does not take any arguments\n+error: attribute must be of the form `#[proc_macro_attribute]`\n   --> $DIR/invalid-attributes.rs:25:1\n    |\n-LL | #[proc_macro_attribute(x)] //~ ERROR: does not take any arguments\n+LL | #[proc_macro_attribute(x)] //~ ERROR attribute must be of the form\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors"}, {"sha": "9d844745f4299e336d9a84b02e7019f7d03ce737", "filename": "src/test/ui/repr.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,15 +1,13 @@\n-// compile-pass\n-\n #[repr]\n-//^ WARN `repr` attribute must have a hint\n+//~^ ERROR attribute must be of the form\n struct _A {}\n \n #[repr = \"B\"]\n-//^ WARN `repr` attribute isn't configurable with a literal\n+//~^ ERROR attribute must be of the form\n struct _B {}\n \n #[repr = \"C\"]\n-//^ WARN `repr` attribute isn't configurable with a literal\n+//~^ ERROR attribute must be of the form\n struct _C {}\n \n #[repr(C)]"}, {"sha": "7ebfe083ddd01b77f4c2536c27e5d8631a1bc085", "filename": "src/test/ui/repr.stderr", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Frepr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Frepr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,25 +1,20 @@\n-warning: `repr` attribute must have a hint\n-  --> $DIR/repr.rs:3:1\n+error: attribute must be of the form `#[repr(C, packed, ...)]`\n+  --> $DIR/repr.rs:1:1\n    |\n LL | #[repr]\n-   | ^^^^^^^ needs a hint\n-   |\n-   = note: #[warn(bad_repr)] on by default\n-   = help: valid hints include `#[repr(C)]`, `#[repr(packed)]`, `#[repr(rust)]` and `#[repr(transparent)]`\n-   = note: for more information, visit <https://doc.rust-lang.org/reference/type-layout.html>\n+   | ^^^^^^^\n \n-warning: `repr` attribute isn't configurable with a literal\n-  --> $DIR/repr.rs:7:1\n+error: attribute must be of the form `#[repr(C, packed, ...)]`\n+  --> $DIR/repr.rs:5:1\n    |\n LL | #[repr = \"B\"]\n-   | ^^^^^^^^^^^^^ needs a hint\n-   |\n-   = help: valid hints include `#[repr(C)]`, `#[repr(packed)]`, `#[repr(rust)]` and `#[repr(transparent)]`\n-   = note: for more information, visit <https://doc.rust-lang.org/reference/type-layout.html>\n+   | ^^^^^^^^^^^^^\n \n-warning: `repr` attribute isn't configurable with a literal\n-  --> $DIR/repr.rs:11:1\n+error: attribute must be of the form `#[repr(C, packed, ...)]`\n+  --> $DIR/repr.rs:9:1\n    |\n LL | #[repr = \"C\"]\n-   | ^^^^^^^^^^^^^ help: give `repr` a hint: `#[repr(C)]`\n+   | ^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "3375210fc59ebd105cfe7adda4e3a79ab09a646f", "filename": "src/test/ui/rfc-2008-non-exhaustive/invalid-attribute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Finvalid-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Finvalid-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Finvalid-attribute.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,7 +1,7 @@\n #![feature(non_exhaustive)]\n \n #[non_exhaustive(anything)]\n-//~^ ERROR attribute should be empty [E0702]\n+//~^ ERROR attribute must be of the form\n struct Foo;\n \n #[non_exhaustive]"}, {"sha": "1d055fe8d4cb8c3a5e9a91289712904154b67869", "filename": "src/test/ui/rfc-2008-non-exhaustive/invalid-attribute.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Finvalid-attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Finvalid-attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Finvalid-attribute.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,11 +1,8 @@\n-error[E0702]: attribute should be empty\n+error: attribute must be of the form `#[non_exhaustive]`\n   --> $DIR/invalid-attribute.rs:3:1\n    |\n LL | #[non_exhaustive(anything)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-LL | //~^ ERROR attribute should be empty [E0702]\n-LL | struct Foo;\n-   | ----------- not empty\n \n error[E0701]: attribute can only be applied to a struct or enum\n   --> $DIR/invalid-attribute.rs:7:1\n@@ -30,5 +27,4 @@ LL | | }\n \n error: aborting due to 3 previous errors\n \n-Some errors occurred: E0701, E0702.\n-For more information about an error, try `rustc --explain E0701`.\n+For more information about this error, try `rustc --explain E0701`."}, {"sha": "1f0a7a8f8a5e6e816de626710dbc2d6ac150885b", "filename": "src/test/ui/stability-attribute/stability-attribute-non-staged-force-unstable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged-force-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged-force-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged-force-unstable.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,6 +1,6 @@\n // compile-flags:-Zforce-unstable-if-unmarked\n \n-#[unstable] //~ ERROR: stability attributes may not be used\n-#[stable] //~ ERROR: stability attributes may not be used\n-#[rustc_deprecated] //~ ERROR: stability attributes may not be used\n+#[unstable()] //~ ERROR: stability attributes may not be used\n+#[stable()] //~ ERROR: stability attributes may not be used\n+#[rustc_deprecated()] //~ ERROR: stability attributes may not be used\n fn main() { }"}, {"sha": "cd8ea921d30368c5a5a8c691a6d01e534128f235", "filename": "src/test/ui/stability-attribute/stability-attribute-non-staged-force-unstable.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged-force-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged-force-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged-force-unstable.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,20 +1,20 @@\n error: stability attributes may not be used outside of the standard library\n   --> $DIR/stability-attribute-non-staged-force-unstable.rs:3:1\n    |\n-LL | #[unstable] //~ ERROR: stability attributes may not be used\n-   | ^^^^^^^^^^^\n+LL | #[unstable()] //~ ERROR: stability attributes may not be used\n+   | ^^^^^^^^^^^^^\n \n error: stability attributes may not be used outside of the standard library\n   --> $DIR/stability-attribute-non-staged-force-unstable.rs:4:1\n    |\n-LL | #[stable] //~ ERROR: stability attributes may not be used\n-   | ^^^^^^^^^\n+LL | #[stable()] //~ ERROR: stability attributes may not be used\n+   | ^^^^^^^^^^^\n \n error: stability attributes may not be used outside of the standard library\n   --> $DIR/stability-attribute-non-staged-force-unstable.rs:5:1\n    |\n-LL | #[rustc_deprecated] //~ ERROR: stability attributes may not be used\n-   | ^^^^^^^^^^^^^^^^^^^\n+LL | #[rustc_deprecated()] //~ ERROR: stability attributes may not be used\n+   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "fc2c2b587fead19bda22cd7ece39b3b61e0f2971", "filename": "src/test/ui/stability-attribute/stability-attribute-non-staged.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,4 +1,4 @@\n-#[unstable] //~ ERROR: stability attributes may not be used\n-#[stable] //~ ERROR: stability attributes may not be used\n-#[rustc_deprecated] //~ ERROR: stability attributes may not be used\n+#[unstable()] //~ ERROR: stability attributes may not be used\n+#[stable()] //~ ERROR: stability attributes may not be used\n+#[rustc_deprecated()] //~ ERROR: stability attributes may not be used\n fn main() { }"}, {"sha": "67f6ef857f1799a6a1bb4a15776387f02c3bc813", "filename": "src/test/ui/stability-attribute/stability-attribute-non-staged.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-non-staged.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,20 +1,20 @@\n error: stability attributes may not be used outside of the standard library\n   --> $DIR/stability-attribute-non-staged.rs:1:1\n    |\n-LL | #[unstable] //~ ERROR: stability attributes may not be used\n-   | ^^^^^^^^^^^\n+LL | #[unstable()] //~ ERROR: stability attributes may not be used\n+   | ^^^^^^^^^^^^^\n \n error: stability attributes may not be used outside of the standard library\n   --> $DIR/stability-attribute-non-staged.rs:2:1\n    |\n-LL | #[stable] //~ ERROR: stability attributes may not be used\n-   | ^^^^^^^^^\n+LL | #[stable()] //~ ERROR: stability attributes may not be used\n+   | ^^^^^^^^^^^\n \n error: stability attributes may not be used outside of the standard library\n   --> $DIR/stability-attribute-non-staged.rs:3:1\n    |\n-LL | #[rustc_deprecated] //~ ERROR: stability attributes may not be used\n-   | ^^^^^^^^^^^^^^^^^^^\n+LL | #[rustc_deprecated()] //~ ERROR: stability attributes may not be used\n+   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "3fd54bc02e41748bc2629a7bbe0c12c21eb5bfdb", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity-4.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-4.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -0,0 +1,29 @@\n+// Various checks that stability attributes are used correctly, per RFC 507\n+\n+#![feature(staged_api)]\n+\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n+mod bogus_attribute_types_2 {\n+    #[unstable] //~ ERROR attribute must be of the form\n+    fn f1() { }\n+\n+    #[unstable = \"b\"] //~ ERROR attribute must be of the form\n+    fn f2() { }\n+\n+    #[stable] //~ ERROR attribute must be of the form\n+    fn f3() { }\n+\n+    #[stable = \"a\"] //~ ERROR attribute must be of the form\n+    fn f4() { }\n+\n+    #[stable(feature = \"a\", since = \"b\")]\n+    #[rustc_deprecated] //~ ERROR attribute must be of the form\n+    fn f5() { }\n+\n+    #[stable(feature = \"a\", since = \"b\")]\n+    #[rustc_deprecated = \"a\"] //~ ERROR attribute must be of the form\n+    fn f6() { }\n+}\n+\n+fn main() { }"}, {"sha": "4b4efe9d8caddfe662e5f2b41df162f85e70855a", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity-4.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity-4.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -0,0 +1,38 @@\n+error: attribute must be of the form `#[unstable(feature = \"name\", reason = \"...\", issue = \"N\")]`\n+  --> $DIR/stability-attribute-sanity-4.rs:8:5\n+   |\n+LL |     #[unstable] //~ ERROR attribute must be of the form\n+   |     ^^^^^^^^^^^\n+\n+error: attribute must be of the form `#[unstable(feature = \"name\", reason = \"...\", issue = \"N\")]`\n+  --> $DIR/stability-attribute-sanity-4.rs:11:5\n+   |\n+LL |     #[unstable = \"b\"] //~ ERROR attribute must be of the form\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: attribute must be of the form `#[stable(feature = \"name\", since = \"version\")]`\n+  --> $DIR/stability-attribute-sanity-4.rs:14:5\n+   |\n+LL |     #[stable] //~ ERROR attribute must be of the form\n+   |     ^^^^^^^^^\n+\n+error: attribute must be of the form `#[stable(feature = \"name\", since = \"version\")]`\n+  --> $DIR/stability-attribute-sanity-4.rs:17:5\n+   |\n+LL |     #[stable = \"a\"] //~ ERROR attribute must be of the form\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: attribute must be of the form `#[rustc_deprecated(since = \"version\", reason = \"...\")]`\n+  --> $DIR/stability-attribute-sanity-4.rs:21:5\n+   |\n+LL |     #[rustc_deprecated] //~ ERROR attribute must be of the form\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: attribute must be of the form `#[rustc_deprecated(since = \"version\", reason = \"...\")]`\n+  --> $DIR/stability-attribute-sanity-4.rs:25:5\n+   |\n+LL |     #[rustc_deprecated = \"a\"] //~ ERROR attribute must be of the form\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "aebdb3bdbf571f8c34333225e966938bff4497ec", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -21,28 +21,6 @@ mod bogus_attribute_types_1 {\n     fn f6() { }\n }\n \n-mod bogus_attribute_types_2 {\n-    #[unstable] //~ ERROR incorrect stability attribute type [E0548]\n-    fn f1() { }\n-\n-    #[unstable = \"b\"] //~ ERROR incorrect stability attribute type [E0548]\n-    fn f2() { }\n-\n-    #[stable] //~ ERROR incorrect stability attribute type [E0548]\n-    fn f3() { }\n-\n-    #[stable = \"a\"] //~ ERROR incorrect stability attribute type [E0548]\n-    fn f4() { }\n-\n-    #[stable(feature = \"a\", since = \"b\")]\n-    #[rustc_deprecated] //~ ERROR incorrect stability attribute type [E0548]\n-    fn f5() { }\n-\n-    #[stable(feature = \"a\", since = \"b\")]\n-    #[rustc_deprecated = \"a\"] //~ ERROR incorrect stability attribute type [E0548]\n-    fn f6() { }\n-}\n-\n mod missing_feature_names {\n     #[unstable(issue = \"0\")] //~ ERROR missing 'feature' [E0546]\n     fn f1() { }"}, {"sha": "74c1bbfed6f70fa8e54f7ec4fc3d30414e8a1571", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.stderr", "status": "modified", "additions": 14, "deletions": 50, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -28,115 +28,79 @@ error[E0539]: incorrect meta item\n LL |     #[stable(feature(b), since = \"a\")] //~ ERROR incorrect meta item [E0539]\n    |              ^^^^^^^^^^\n \n-error[E0548]: incorrect stability attribute type\n-  --> $DIR/stability-attribute-sanity.rs:25:5\n-   |\n-LL |     #[unstable] //~ ERROR incorrect stability attribute type [E0548]\n-   |     ^^^^^^^^^^^\n-\n-error[E0548]: incorrect stability attribute type\n-  --> $DIR/stability-attribute-sanity.rs:28:5\n-   |\n-LL |     #[unstable = \"b\"] //~ ERROR incorrect stability attribute type [E0548]\n-   |     ^^^^^^^^^^^^^^^^^\n-\n-error[E0548]: incorrect stability attribute type\n-  --> $DIR/stability-attribute-sanity.rs:31:5\n-   |\n-LL |     #[stable] //~ ERROR incorrect stability attribute type [E0548]\n-   |     ^^^^^^^^^\n-\n-error[E0548]: incorrect stability attribute type\n-  --> $DIR/stability-attribute-sanity.rs:34:5\n-   |\n-LL |     #[stable = \"a\"] //~ ERROR incorrect stability attribute type [E0548]\n-   |     ^^^^^^^^^^^^^^^\n-\n-error[E0548]: incorrect stability attribute type\n-  --> $DIR/stability-attribute-sanity.rs:38:5\n-   |\n-LL |     #[rustc_deprecated] //~ ERROR incorrect stability attribute type [E0548]\n-   |     ^^^^^^^^^^^^^^^^^^^\n-\n-error[E0548]: incorrect stability attribute type\n-  --> $DIR/stability-attribute-sanity.rs:42:5\n-   |\n-LL |     #[rustc_deprecated = \"a\"] //~ ERROR incorrect stability attribute type [E0548]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0546]: missing 'feature'\n-  --> $DIR/stability-attribute-sanity.rs:47:5\n+  --> $DIR/stability-attribute-sanity.rs:25:5\n    |\n LL |     #[unstable(issue = \"0\")] //~ ERROR missing 'feature' [E0546]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0547]: missing 'issue'\n-  --> $DIR/stability-attribute-sanity.rs:50:5\n+  --> $DIR/stability-attribute-sanity.rs:28:5\n    |\n LL |     #[unstable(feature = \"b\")] //~ ERROR missing 'issue' [E0547]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0546]: missing 'feature'\n-  --> $DIR/stability-attribute-sanity.rs:53:5\n+  --> $DIR/stability-attribute-sanity.rs:31:5\n    |\n LL |     #[stable(since = \"a\")] //~ ERROR missing 'feature' [E0546]\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0542]: missing 'since'\n-  --> $DIR/stability-attribute-sanity.rs:58:5\n+  --> $DIR/stability-attribute-sanity.rs:36:5\n    |\n LL |     #[stable(feature = \"a\")] //~ ERROR missing 'since' [E0542]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0542]: missing 'since'\n-  --> $DIR/stability-attribute-sanity.rs:62:5\n+  --> $DIR/stability-attribute-sanity.rs:40:5\n    |\n LL |     #[rustc_deprecated(reason = \"a\")] //~ ERROR missing 'since' [E0542]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0544]: multiple stability levels\n-  --> $DIR/stability-attribute-sanity.rs:67:1\n+  --> $DIR/stability-attribute-sanity.rs:45:1\n    |\n LL | #[stable(feature = \"a\", since = \"b\")] //~ ERROR multiple stability levels [E0544]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0544]: multiple stability levels\n-  --> $DIR/stability-attribute-sanity.rs:71:1\n+  --> $DIR/stability-attribute-sanity.rs:49:1\n    |\n LL | #[unstable(feature = \"b\", issue = \"0\")] //~ ERROR multiple stability levels [E0544]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0544]: multiple stability levels\n-  --> $DIR/stability-attribute-sanity.rs:75:1\n+  --> $DIR/stability-attribute-sanity.rs:53:1\n    |\n LL | #[stable(feature = \"a\", since = \"b\")] //~ ERROR multiple stability levels [E0544]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0540]: multiple rustc_deprecated attributes\n-  --> $DIR/stability-attribute-sanity.rs:83:1\n+  --> $DIR/stability-attribute-sanity.rs:61:1\n    |\n LL | pub const fn multiple4() { } //~ ERROR multiple rustc_deprecated attributes [E0540]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0553]: multiple rustc_const_unstable attributes\n-  --> $DIR/stability-attribute-sanity.rs:83:1\n+  --> $DIR/stability-attribute-sanity.rs:61:1\n    |\n LL | pub const fn multiple4() { } //~ ERROR multiple rustc_deprecated attributes [E0540]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: Invalid stability or deprecation version found\n-  --> $DIR/stability-attribute-sanity.rs:83:1\n+  --> $DIR/stability-attribute-sanity.rs:61:1\n    |\n LL | pub const fn multiple4() { } //~ ERROR multiple rustc_deprecated attributes [E0540]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0549]: rustc_deprecated attribute must be paired with either stable or unstable attribute\n-  --> $DIR/stability-attribute-sanity.rs:88:1\n+  --> $DIR/stability-attribute-sanity.rs:66:1\n    |\n LL | fn deprecated_without_unstable_or_stable() { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 23 previous errors\n+error: aborting due to 17 previous errors\n \n-Some errors occurred: E0539, E0540, E0541, E0542, E0544, E0546, E0547, E0548, E0549...\n+Some errors occurred: E0539, E0540, E0541, E0542, E0544, E0546, E0547, E0549, E0553.\n For more information about an error, try `rustc --explain E0539`."}, {"sha": "bd2d6623d910435d1f6093ee552a4f22b73e8b31", "filename": "src/test/ui/suffixed-literal-meta.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fsuffixed-literal-meta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fsuffixed-literal-meta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuffixed-literal-meta.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,13 +1,15 @@\n-#[path = 1usize] //~ ERROR: suffixed literals are not allowed in attributes\n-#[path = 1u8] //~ ERROR: suffixed literals are not allowed in attributes\n-#[path = 1u16] //~ ERROR: suffixed literals are not allowed in attributes\n-#[path = 1u32] //~ ERROR: suffixed literals are not allowed in attributes\n-#[path = 1u64] //~ ERROR: suffixed literals are not allowed in attributes\n-#[path = 1isize] //~ ERROR: suffixed literals are not allowed in attributes\n-#[path = 1i8] //~ ERROR: suffixed literals are not allowed in attributes\n-#[path = 1i16] //~ ERROR: suffixed literals are not allowed in attributes\n-#[path = 1i32] //~ ERROR: suffixed literals are not allowed in attributes\n-#[path = 1i64] //~ ERROR: suffixed literals are not allowed in attributes\n-#[path = 1.0f32] //~ ERROR: suffixed literals are not allowed in attributes\n-#[path = 1.0f64] //~ ERROR: suffixed literals are not allowed in attributes\n+#![feature(custom_attribute)]\n+\n+#[my_attr = 1usize] //~ ERROR: suffixed literals are not allowed in attributes\n+#[my_attr = 1u8] //~ ERROR: suffixed literals are not allowed in attributes\n+#[my_attr = 1u16] //~ ERROR: suffixed literals are not allowed in attributes\n+#[my_attr = 1u32] //~ ERROR: suffixed literals are not allowed in attributes\n+#[my_attr = 1u64] //~ ERROR: suffixed literals are not allowed in attributes\n+#[my_attr = 1isize] //~ ERROR: suffixed literals are not allowed in attributes\n+#[my_attr = 1i8] //~ ERROR: suffixed literals are not allowed in attributes\n+#[my_attr = 1i16] //~ ERROR: suffixed literals are not allowed in attributes\n+#[my_attr = 1i32] //~ ERROR: suffixed literals are not allowed in attributes\n+#[my_attr = 1i64] //~ ERROR: suffixed literals are not allowed in attributes\n+#[my_attr = 1.0f32] //~ ERROR: suffixed literals are not allowed in attributes\n+#[my_attr = 1.0f64] //~ ERROR: suffixed literals are not allowed in attributes\n fn main() { }"}, {"sha": "265aa78d53f129baa30fe1a68a85ed45a1f0e165", "filename": "src/test/ui/suffixed-literal-meta.stderr", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fsuffixed-literal-meta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Fsuffixed-literal-meta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuffixed-literal-meta.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,96 +1,96 @@\n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:1:10\n+  --> $DIR/suffixed-literal-meta.rs:3:13\n    |\n-LL | #[path = 1usize] //~ ERROR: suffixed literals are not allowed in attributes\n-   |          ^^^^^^\n+LL | #[my_attr = 1usize] //~ ERROR: suffixed literals are not allowed in attributes\n+   |             ^^^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:2:10\n+  --> $DIR/suffixed-literal-meta.rs:4:13\n    |\n-LL | #[path = 1u8] //~ ERROR: suffixed literals are not allowed in attributes\n-   |          ^^^\n+LL | #[my_attr = 1u8] //~ ERROR: suffixed literals are not allowed in attributes\n+   |             ^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:3:10\n+  --> $DIR/suffixed-literal-meta.rs:5:13\n    |\n-LL | #[path = 1u16] //~ ERROR: suffixed literals are not allowed in attributes\n-   |          ^^^^\n+LL | #[my_attr = 1u16] //~ ERROR: suffixed literals are not allowed in attributes\n+   |             ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:4:10\n+  --> $DIR/suffixed-literal-meta.rs:6:13\n    |\n-LL | #[path = 1u32] //~ ERROR: suffixed literals are not allowed in attributes\n-   |          ^^^^\n+LL | #[my_attr = 1u32] //~ ERROR: suffixed literals are not allowed in attributes\n+   |             ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:5:10\n+  --> $DIR/suffixed-literal-meta.rs:7:13\n    |\n-LL | #[path = 1u64] //~ ERROR: suffixed literals are not allowed in attributes\n-   |          ^^^^\n+LL | #[my_attr = 1u64] //~ ERROR: suffixed literals are not allowed in attributes\n+   |             ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:6:10\n+  --> $DIR/suffixed-literal-meta.rs:8:13\n    |\n-LL | #[path = 1isize] //~ ERROR: suffixed literals are not allowed in attributes\n-   |          ^^^^^^\n+LL | #[my_attr = 1isize] //~ ERROR: suffixed literals are not allowed in attributes\n+   |             ^^^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:7:10\n+  --> $DIR/suffixed-literal-meta.rs:9:13\n    |\n-LL | #[path = 1i8] //~ ERROR: suffixed literals are not allowed in attributes\n-   |          ^^^\n+LL | #[my_attr = 1i8] //~ ERROR: suffixed literals are not allowed in attributes\n+   |             ^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:8:10\n+  --> $DIR/suffixed-literal-meta.rs:10:13\n    |\n-LL | #[path = 1i16] //~ ERROR: suffixed literals are not allowed in attributes\n-   |          ^^^^\n+LL | #[my_attr = 1i16] //~ ERROR: suffixed literals are not allowed in attributes\n+   |             ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:9:10\n+  --> $DIR/suffixed-literal-meta.rs:11:13\n    |\n-LL | #[path = 1i32] //~ ERROR: suffixed literals are not allowed in attributes\n-   |          ^^^^\n+LL | #[my_attr = 1i32] //~ ERROR: suffixed literals are not allowed in attributes\n+   |             ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:10:10\n+  --> $DIR/suffixed-literal-meta.rs:12:13\n    |\n-LL | #[path = 1i64] //~ ERROR: suffixed literals are not allowed in attributes\n-   |          ^^^^\n+LL | #[my_attr = 1i64] //~ ERROR: suffixed literals are not allowed in attributes\n+   |             ^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:11:10\n+  --> $DIR/suffixed-literal-meta.rs:13:13\n    |\n-LL | #[path = 1.0f32] //~ ERROR: suffixed literals are not allowed in attributes\n-   |          ^^^^^^\n+LL | #[my_attr = 1.0f32] //~ ERROR: suffixed literals are not allowed in attributes\n+   |             ^^^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n \n error: suffixed literals are not allowed in attributes\n-  --> $DIR/suffixed-literal-meta.rs:12:10\n+  --> $DIR/suffixed-literal-meta.rs:14:13\n    |\n-LL | #[path = 1.0f64] //~ ERROR: suffixed literals are not allowed in attributes\n-   |          ^^^^^^\n+LL | #[my_attr = 1.0f64] //~ ERROR: suffixed literals are not allowed in attributes\n+   |             ^^^^^^\n    |\n    = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n "}, {"sha": "236f5c4afec39903c12e4b358d533f5e772664da", "filename": "src/test/ui/target-feature-wrong.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-wrong.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,4 +1,4 @@\n-error: #[target_feature] attribute must be of the form #[target_feature(..)]\n+error: attribute must be of the form `#[target_feature(enable = \"name\")]`\n   --> $DIR/target-feature-wrong.rs:16:1\n    |\n LL | #[target_feature = \"+sse2\"]"}, {"sha": "f936dd5758747f8d05f0babbbcfa4b6dce1bfb4e", "filename": "src/test/ui/test-should-panic-attr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ftest-should-panic-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ftest-should-panic-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-should-panic-attr.rs?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,9 +1,8 @@\n-// run-pass\n+// compile-pass\n // compile-flags: --test\n \n #[test]\n #[should_panic = \"foo\"]\n-//~^ WARN: attribute must be of the form:\n fn test1() {\n     panic!();\n }"}, {"sha": "4b032eba5f8d577e0d25634858b9e8d2253cad41", "filename": "src/test/ui/test-should-panic-attr.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ftest-should-panic-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceb2512144d1fc26330e85fb9d41c22ba1866259/src%2Ftest%2Fui%2Ftest-should-panic-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-should-panic-attr.stderr?ref=ceb2512144d1fc26330e85fb9d41c22ba1866259", "patch": "@@ -1,37 +1,29 @@\n-warning: attribute must be of the form: `#[should_panic]` or `#[should_panic(expected = \"error message\")]`\n-  --> $DIR/test-should-panic-attr.rs:5:1\n-   |\n-LL | #[should_panic = \"foo\"]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: Errors in this attribute were erroneously allowed and will become a hard error in a future release.\n-\n warning: argument must be of the form: `expected = \"error message\"`\n-  --> $DIR/test-should-panic-attr.rs:12:1\n+  --> $DIR/test-should-panic-attr.rs:11:1\n    |\n LL | #[should_panic(expected)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: Errors in this attribute were erroneously allowed and will become a hard error in a future release.\n \n warning: argument must be of the form: `expected = \"error message\"`\n-  --> $DIR/test-should-panic-attr.rs:19:1\n+  --> $DIR/test-should-panic-attr.rs:18:1\n    |\n LL | #[should_panic(expect)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: Errors in this attribute were erroneously allowed and will become a hard error in a future release.\n \n warning: argument must be of the form: `expected = \"error message\"`\n-  --> $DIR/test-should-panic-attr.rs:26:1\n+  --> $DIR/test-should-panic-attr.rs:25:1\n    |\n LL | #[should_panic(expected(foo, bar))]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: Errors in this attribute were erroneously allowed and will become a hard error in a future release.\n \n warning: argument must be of the form: `expected = \"error message\"`\n-  --> $DIR/test-should-panic-attr.rs:33:1\n+  --> $DIR/test-should-panic-attr.rs:32:1\n    |\n LL | #[should_panic(expected = \"foo\", bar)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}