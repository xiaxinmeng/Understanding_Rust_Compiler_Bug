{"sha": "8c843d1dac0151e9251cddd2b36e940b5b1c7661", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjODQzZDFkYWMwMTUxZTkyNTFjZGRkMmIzNmU5NDBiNWIxYzc2NjE=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2021-01-24T15:04:47Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2021-01-25T14:46:03Z"}, "message": "Add the ability to wait for a debugger.", "tree": {"sha": "86cb39845e8b2b634869aa70d44d662c0a411054", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86cb39845e8b2b634869aa70d44d662c0a411054"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c843d1dac0151e9251cddd2b36e940b5b1c7661", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c843d1dac0151e9251cddd2b36e940b5b1c7661", "html_url": "https://github.com/rust-lang/rust/commit/8c843d1dac0151e9251cddd2b36e940b5b1c7661", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c843d1dac0151e9251cddd2b36e940b5b1c7661/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98d7512e93ea66f1a259623f9f534bee4a922a81", "url": "https://api.github.com/repos/rust-lang/rust/commits/98d7512e93ea66f1a259623f9f534bee4a922a81", "html_url": "https://github.com/rust-lang/rust/commit/98d7512e93ea66f1a259623f9f534bee4a922a81"}], "stats": {"total": 52, "additions": 45, "deletions": 7}, "files": [{"sha": "abc00d03bb6fed32de140ccc6f8e4bdc844fe2e1", "filename": "crates/rust-analyzer/src/bin/args.rs", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8c843d1dac0151e9251cddd2b36e940b5b1c7661/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c843d1dac0151e9251cddd2b36e940b5b1c7661/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs?ref=8c843d1dac0151e9251cddd2b36e940b5b1c7661", "patch": "@@ -16,6 +16,7 @@ pub(crate) struct Args {\n     pub(crate) log_file: Option<PathBuf>,\n     pub(crate) no_buffering: bool,\n     pub(crate) command: Command,\n+    pub(crate) wait_dbg: bool,\n }\n \n pub(crate) enum Command {\n@@ -51,6 +52,8 @@ FLAGS:\n     --log-file <PATH> Log to the specified file instead of stderr\n     --no-buffering    Flush log records to the file immediately\n \n+    --wait-dbg        Wait until a debugger is attached to\n+\n ENVIRONMENTAL VARIABLES:\n     RA_LOG            Set log filter in env_logger format\n     RA_PROFILE        Enable hierarchical profiler\n@@ -117,6 +120,7 @@ impl Args {\n                 log_file: None,\n                 command: Command::Version,\n                 no_buffering: false,\n+                wait_dbg: false,\n             });\n         }\n \n@@ -134,21 +138,40 @@ impl Args {\n         };\n         let log_file = matches.opt_value_from_str(\"--log-file\")?;\n         let no_buffering = matches.contains(\"--no-buffering\");\n+        let wait_dbg = matches.contains(\"--wait-dbg\");\n \n         if matches.contains([\"-h\", \"--help\"]) {\n             eprintln!(\"{}\", HELP);\n-            return Ok(Args { verbosity, log_file: None, command: Command::Help, no_buffering });\n+            return Ok(Args {\n+                verbosity,\n+                log_file: None,\n+                command: Command::Help,\n+                no_buffering,\n+                wait_dbg,\n+            });\n         }\n \n         if matches.contains(\"--print-config-schema\") {\n-            return Ok(Args { verbosity, log_file, command: Command::PrintConfigSchema, no_buffering }, );\n+            return Ok(Args {\n+                verbosity,\n+                log_file,\n+                command: Command::PrintConfigSchema,\n+                no_buffering,\n+                wait_dbg,\n+            });\n         }\n \n         let subcommand = match matches.subcommand()? {\n             Some(it) => it,\n             None => {\n                 finish_args(matches)?;\n-                return Ok(Args { verbosity, log_file, command: Command::RunServer, no_buffering });\n+                return Ok(Args {\n+                    verbosity,\n+                    log_file,\n+                    command: Command::RunServer,\n+                    no_buffering,\n+                    wait_dbg,\n+                });\n             }\n         };\n         let command = match subcommand.as_str() {\n@@ -223,11 +246,17 @@ impl Args {\n             },\n             _ => {\n                 eprintln!(\"{}\", HELP);\n-                return Ok(Args { verbosity, log_file: None, command: Command::Help, no_buffering });\n+                return Ok(Args {\n+                    verbosity,\n+                    log_file: None,\n+                    command: Command::Help,\n+                    no_buffering,\n+                    wait_dbg,\n+                });\n             }\n         };\n         finish_args(matches)?;\n-        Ok(Args { verbosity, log_file, command, no_buffering })\n+        Ok(Args { verbosity, log_file, command, no_buffering, wait_dbg })\n     }\n }\n "}, {"sha": "0cddfecb57b333f4e010db46384e21666097f4c8", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8c843d1dac0151e9251cddd2b36e940b5b1c7661/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c843d1dac0151e9251cddd2b36e940b5b1c7661/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=8c843d1dac0151e9251cddd2b36e940b5b1c7661", "patch": "@@ -21,13 +21,22 @@ static ALLOC: jemallocator::Jemalloc = jemallocator::Jemalloc;\n \n fn main() {\n     if let Err(err) = try_main() {\n+        log::error!(\"Unexpected error: {}\", err);\n         eprintln!(\"{}\", err);\n         process::exit(101);\n     }\n }\n \n fn try_main() -> Result<()> {\n     let args = args::Args::parse()?;\n+    if args.wait_dbg {\n+        #[allow(unused_mut)]\n+        let mut d = 4;\n+        while d == 4 {\n+            d = 4;\n+        }\n+    }\n+\n     setup_logging(args.log_file, args.no_buffering)?;\n     match args.command {\n         args::Command::RunServer => run_server()?,\n@@ -56,7 +65,7 @@ fn try_main() -> Result<()> {\n     Ok(())\n }\n \n-fn setup_logging(log_file: Option<PathBuf>, flush_file: bool) -> Result<()> {\n+fn setup_logging(log_file: Option<PathBuf>, no_buffering: bool) -> Result<()> {\n     env::set_var(\"RUST_BACKTRACE\", \"short\");\n \n     let log_file = match log_file {\n@@ -69,7 +78,7 @@ fn setup_logging(log_file: Option<PathBuf>, flush_file: bool) -> Result<()> {\n         None => None,\n     };\n     let filter = env::var(\"RA_LOG\").ok();\n-    logger::Logger::new(log_file, flush_file, filter.as_deref()).install();\n+    logger::Logger::new(log_file, no_buffering, filter.as_deref()).install();\n \n     tracing_setup::setup_tracing()?;\n "}]}