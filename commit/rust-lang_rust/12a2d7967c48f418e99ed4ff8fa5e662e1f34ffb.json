{"sha": "12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "node_id": "C_kwDOAAsO6NoAKDEyYTJkNzk2N2M0OGY0MThlOTllZDRmZjhmYTVlNjYyZTFmMzRmZmI", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-21T19:14:11Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-22T19:21:27Z"}, "message": "Use revisions for NLL in various directories", "tree": {"sha": "2925e43d05f17e8a4c825fc22260dc0b4a7dda35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2925e43d05f17e8a4c825fc22260dc0b4a7dda35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "html_url": "https://github.com/rust-lang/rust/commit/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99daba2a4a17c733f4edf781fde6fa8cb30975a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/99daba2a4a17c733f4edf781fde6fa8cb30975a0", "html_url": "https://github.com/rust-lang/rust/commit/99daba2a4a17c733f4edf781fde6fa8cb30975a0"}], "stats": {"total": 300, "additions": 180, "deletions": 120}, "files": [{"sha": "b4437069cd745ae0449f8993af68a5b1cce2cb8d", "filename": "src/test/ui/associated-type-bounds/implied-region-constraints.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.base.stderr?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/implied-region-constraints.rs:17:64\n+  --> $DIR/implied-region-constraints.rs:21:64\n    |\n LL | fn _bad_st<'a, 'b, T>(x: St<'a, 'b, T>)\n    |                          ------------- this type is declared with multiple lifetimes...\n@@ -8,7 +8,7 @@ LL |     let _failure_proves_not_implied_outlives_region_b: &'b T = &x.f0;\n    |                                                                ^^^^^ ...but data with one lifetime flows into the other here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/implied-region-constraints.rs:38:72\n+  --> $DIR/implied-region-constraints.rs:43:72\n    |\n LL | fn _bad_en7<'a, 'b, T>(x: En7<'a, 'b, T>)\n    |                           -------------- this type is declared with multiple lifetimes...", "previous_filename": "src/test/ui/associated-type-bounds/implied-region-constraints.stderr"}, {"sha": "bf9fecf06a478358e410506bb696984b03e49f6f", "filename": "src/test/ui/associated-type-bounds/implied-region-constraints.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.nll.stderr?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/implied-region-constraints.rs:17:56\n+  --> $DIR/implied-region-constraints.rs:21:56\n    |\n LL | fn _bad_st<'a, 'b, T>(x: St<'a, 'b, T>)\n    |            --  -- lifetime `'b` defined here\n@@ -12,7 +12,7 @@ LL |     let _failure_proves_not_implied_outlives_region_b: &'b T = &x.f0;\n    = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n-  --> $DIR/implied-region-constraints.rs:38:64\n+  --> $DIR/implied-region-constraints.rs:43:64\n    |\n LL | fn _bad_en7<'a, 'b, T>(x: En7<'a, 'b, T>)\n    |             --  -- lifetime `'b` defined here"}, {"sha": "a41c764343086bbbf198134e9702e5ed55b4a08c", "filename": "src/test/ui/associated-type-bounds/implied-region-constraints.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.rs?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n #![feature(associated_type_bounds)]\n \n trait Tr1 { type As1; }\n@@ -15,7 +19,8 @@ where\n {\n     // This should fail because `T: 'b` is not implied from `WF(St<'a, 'b, T>)`.\n     let _failure_proves_not_implied_outlives_region_b: &'b T = &x.f0;\n-    //~^ ERROR lifetime mismatch [E0623]\n+    //[base]~^ ERROR lifetime mismatch [E0623]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n enum En7<'a, 'b, T> // `<T::As1 as Tr2>::As2: 'a` is implied.\n@@ -36,7 +41,8 @@ where\n         En7::V0(x) => {\n             // Also fails for the same reason as above:\n             let _failure_proves_not_implied_outlives_region_b: &'b T = &x;\n-            //~^ ERROR lifetime mismatch [E0623]\n+            //[base]~^ ERROR lifetime mismatch [E0623]\n+            //[nll]~^^ ERROR lifetime may not live long enough\n         },\n         En7::V1(_) => {},\n     }"}, {"sha": "c3efe16e251baf06dc0569570012aa4fb9269711", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.base.stderr", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.base.stderr?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,43 +1,43 @@\n error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:16:52\n+  --> $DIR/expect-fn-supply-fn.rs:20:52\n    |\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                    ^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected fn pointer `fn(&u32)`\n               found fn pointer `fn(&'x u32)`\n note: the anonymous lifetime #1 defined here...\n-  --> $DIR/expect-fn-supply-fn.rs:16:48\n+  --> $DIR/expect-fn-supply-fn.rs:20:48\n    |\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^\n note: ...does not necessarily outlive the lifetime `'x` as defined here\n-  --> $DIR/expect-fn-supply-fn.rs:13:36\n+  --> $DIR/expect-fn-supply-fn.rs:17:36\n    |\n LL | fn expect_free_supply_free_from_fn<'x>(x: &'x u32) {\n    |                                    ^^\n \n error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:16:52\n+  --> $DIR/expect-fn-supply-fn.rs:20:52\n    |\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                    ^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected fn pointer `fn(&u32)`\n               found fn pointer `fn(&'x u32)`\n note: the lifetime `'x` as defined here...\n-  --> $DIR/expect-fn-supply-fn.rs:13:36\n+  --> $DIR/expect-fn-supply-fn.rs:17:36\n    |\n LL | fn expect_free_supply_free_from_fn<'x>(x: &'x u32) {\n    |                                    ^^\n note: ...does not necessarily outlive the anonymous lifetime #1 defined here\n-  --> $DIR/expect-fn-supply-fn.rs:16:48\n+  --> $DIR/expect-fn-supply-fn.rs:20:48\n    |\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:32:52\n+  --> $DIR/expect-fn-supply-fn.rs:38:52\n    |\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n    |                                                    ^^^^^^^^ one type is more general than the other\n@@ -46,7 +46,7 @@ LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n               found fn pointer `for<'r> fn(&'r u32)`\n \n error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:39:53\n+  --> $DIR/expect-fn-supply-fn.rs:45:53\n    |\n LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n    |                                                     ^^^^^^^^^^^ one type is more general than the other\n@@ -55,7 +55,7 @@ LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n               found fn pointer `fn(&'x u32)`\n \n error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:48:53\n+  --> $DIR/expect-fn-supply-fn.rs:54:53\n    |\n LL |     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n    |                                                     ^^^^^^^ one type is more general than the other", "previous_filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.stderr"}, {"sha": "52e2898d2bb1a7ed0b4876f2c33547f1edc0017c", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/expect-fn-supply-fn.rs:16:49\n+  --> $DIR/expect-fn-supply-fn.rs:20:49\n    |\n LL | fn expect_free_supply_free_from_fn<'x>(x: &'x u32) {\n    |                                    -- lifetime `'x` defined here\n@@ -11,7 +11,7 @@ LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                 requires that `'1` must outlive `'x`\n \n error: lifetime may not live long enough\n-  --> $DIR/expect-fn-supply-fn.rs:16:49\n+  --> $DIR/expect-fn-supply-fn.rs:20:49\n    |\n LL | fn expect_free_supply_free_from_fn<'x>(x: &'x u32) {\n    |                                    -- lifetime `'x` defined here\n@@ -20,7 +20,7 @@ LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n    |                                                 ^ requires that `'x` must outlive `'static`\n \n error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:32:49\n+  --> $DIR/expect-fn-supply-fn.rs:38:49\n    |\n LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n    |                                                 ^ one type is more general than the other\n@@ -29,7 +29,7 @@ LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n               found fn pointer `fn(&u32)`\n \n error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:39:50\n+  --> $DIR/expect-fn-supply-fn.rs:45:50\n    |\n LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n    |                                                  ^ one type is more general than the other\n@@ -38,7 +38,7 @@ LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n               found fn pointer `for<'r> fn(&'r u32)`\n \n error[E0308]: mismatched types\n-  --> $DIR/expect-fn-supply-fn.rs:48:50\n+  --> $DIR/expect-fn-supply-fn.rs:54:50\n    |\n LL |     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n    |                                                  ^ one type is more general than the other"}, {"sha": "1715f56ff63ceac1587798db7cf72990f9ee2f2d", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.rs?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn with_closure_expecting_fn_with_free_region<F>(_: F)\n where\n     F: for<'a> FnOnce(fn(&'a u32), &i32),\n@@ -14,8 +18,10 @@ fn expect_free_supply_free_from_fn<'x>(x: &'x u32) {\n     // Here, the type given for `'x` \"obscures\" a region from the\n     // expected signature that is bound at closure level.\n     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n-    //~^ ERROR mismatched types\n-    //~| ERROR mismatched types\n+    //[base]~^ ERROR mismatched types\n+    //[base]~| ERROR mismatched types\n+    //[nll]~^^^ ERROR lifetime may not live long enough\n+    //[nll]~| ERROR lifetime may not live long enough\n }\n \n fn expect_free_supply_free_from_closure() {"}, {"sha": "5cb62e19ccf483e5826d082c7ea4162d63b9c2d1", "filename": "src/test/ui/error-codes/E0490.base.stderr", "status": "renamed", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Ferror-codes%2FE0490.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Ferror-codes%2FE0490.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0490.base.stderr?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,72 +1,72 @@\n error[E0490]: a value of type `&'b ()` is borrowed for too long\n-  --> $DIR/E0490.rs:2:20\n+  --> $DIR/E0490.rs:6:20\n    |\n LL |     let x: &'a _ = &y;\n    |                    ^^\n    |\n note: the type is valid for the lifetime `'a` as defined here\n-  --> $DIR/E0490.rs:1:6\n+  --> $DIR/E0490.rs:5:6\n    |\n LL | fn f<'a, 'b>(y: &'b ()) {\n    |      ^^\n note: but the borrow lasts for the lifetime `'b` as defined here\n-  --> $DIR/E0490.rs:1:10\n+  --> $DIR/E0490.rs:5:10\n    |\n LL | fn f<'a, 'b>(y: &'b ()) {\n    |          ^^\n \n error[E0495]: cannot infer an appropriate lifetime for borrow expression due to conflicting requirements\n-  --> $DIR/E0490.rs:2:20\n+  --> $DIR/E0490.rs:6:20\n    |\n LL |     let x: &'a _ = &y;\n    |                    ^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'b` as defined here...\n-  --> $DIR/E0490.rs:1:10\n+  --> $DIR/E0490.rs:5:10\n    |\n LL | fn f<'a, 'b>(y: &'b ()) {\n    |          ^^\n note: ...so that the type `&'b ()` is not borrowed for too long\n-  --> $DIR/E0490.rs:2:20\n+  --> $DIR/E0490.rs:6:20\n    |\n LL |     let x: &'a _ = &y;\n    |                    ^^\n note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/E0490.rs:1:6\n+  --> $DIR/E0490.rs:5:6\n    |\n LL | fn f<'a, 'b>(y: &'b ()) {\n    |      ^^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/E0490.rs:2:20\n+  --> $DIR/E0490.rs:6:20\n    |\n LL |     let x: &'a _ = &y;\n    |                    ^^\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/E0490.rs:2:20\n+  --> $DIR/E0490.rs:6:20\n    |\n LL |     let x: &'a _ = &y;\n    |                    ^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'b` as defined here...\n-  --> $DIR/E0490.rs:1:10\n+  --> $DIR/E0490.rs:5:10\n    |\n LL | fn f<'a, 'b>(y: &'b ()) {\n    |          ^^\n note: ...so that the expression is assignable\n-  --> $DIR/E0490.rs:2:20\n+  --> $DIR/E0490.rs:6:20\n    |\n LL |     let x: &'a _ = &y;\n    |                    ^^\n    = note: expected `&'a &()`\n               found `&'a &'b ()`\n note: but, the lifetime must be valid for the lifetime `'a` as defined here...\n-  --> $DIR/E0490.rs:1:6\n+  --> $DIR/E0490.rs:5:6\n    |\n LL | fn f<'a, 'b>(y: &'b ()) {\n    |      ^^\n note: ...so that the reference type `&'a &()` does not outlive the data it points at\n-  --> $DIR/E0490.rs:2:12\n+  --> $DIR/E0490.rs:6:12\n    |\n LL |     let x: &'a _ = &y;\n    |            ^^^^^", "previous_filename": "src/test/ui/error-codes/E0490.stderr"}, {"sha": "80bf076e2bd6be182c41d1968487750e87acf04c", "filename": "src/test/ui/error-codes/E0490.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Ferror-codes%2FE0490.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Ferror-codes%2FE0490.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0490.nll.stderr?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/E0490.rs:2:12\n+  --> $DIR/E0490.rs:6:12\n    |\n LL | fn f<'a, 'b>(y: &'b ()) {\n    |      --  -- lifetime `'b` defined here\n@@ -11,7 +11,7 @@ LL |     let x: &'a _ = &y;\n    = help: consider adding the following bound: `'b: 'a`\n \n error[E0597]: `y` does not live long enough\n-  --> $DIR/E0490.rs:2:20\n+  --> $DIR/E0490.rs:6:20\n    |\n LL | fn f<'a, 'b>(y: &'b ()) {\n    |      -- lifetime `'a` defined here"}, {"sha": "304548215dc25d0964e57435de7d2b242a6ebb00", "filename": "src/test/ui/error-codes/E0490.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Ferror-codes%2FE0490.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Ferror-codes%2FE0490.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0490.rs?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,8 +1,14 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn f<'a, 'b>(y: &'b ()) {\n     let x: &'a _ = &y;\n-    //~^ E0490\n-    //~| E0495\n-    //~| E0495\n+    //[base]~^ E0490\n+    //[base]~| E0495\n+    //[base]~| E0495\n+    //[nll]~^^^^ lifetime may not live long enough\n+    //[nll]~| E0597\n }\n \n fn main() {}"}, {"sha": "6f0ea1af0579b5adfc5cd2a250f7fd6bfe4cb9f2", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.base.stderr?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/implied-bounds-unnorm-associated-type.rs:14:5\n+  --> $DIR/implied-bounds-unnorm-associated-type.rs:18:5\n    |\n LL | fn f<'a, 'b>(s: &'b str, _: <&'a &'b () as Trait>::Type) -> &'a str {\n    |                 -------      ----------", "previous_filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type.stderr"}, {"sha": "a7a91f3e685faa69bfd4eddcf0f22b8b84875883", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.nll.stderr?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/implied-bounds-unnorm-associated-type.rs:14:5\n+  --> $DIR/implied-bounds-unnorm-associated-type.rs:18:5\n    |\n LL | fn f<'a, 'b>(s: &'b str, _: <&'a &'b () as Trait>::Type) -> &'a str {\n    |      --  -- lifetime `'b` defined here"}, {"sha": "30bd042009b6e1147cc9ca3a61ed3ce003c1f0ed", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.rs?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n // check-fail\n // See issue #91068. Types in the substs of an associated type can't be implied\n // to be WF, since they don't actually have to be constructed.\n@@ -11,7 +15,9 @@ impl<T> Trait for T {\n }\n \n fn f<'a, 'b>(s: &'b str, _: <&'a &'b () as Trait>::Type) -> &'a str {\n-    s //~ ERROR lifetime mismatch [E0623]\n+    s\n+    //[base]~^ ERROR lifetime mismatch [E0623]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "a01560e70e311cae445050e5bb32a60adc28188e", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.base.stderr?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,13 +1,13 @@\n error[E0759]: `x` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/dyn-trait.rs:20:16\n+  --> $DIR/dyn-trait.rs:24:16\n    |\n LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n    |                                 ------------------- this data with lifetime `'a`...\n LL |     static_val(x);\n    |                ^ ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/dyn-trait.rs:20:5\n+  --> $DIR/dyn-trait.rs:24:5\n    |\n LL |     static_val(x);\n    |     ^^^^^^^^^^", "previous_filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.stderr"}, {"sha": "762698c4fc141b7753a41ff12635ba51b42b5409", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,5 +1,5 @@\n error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/dyn-trait.rs:20:5\n+  --> $DIR/dyn-trait.rs:24:5\n    |\n LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n    |                          --  - `x` is a reference that is only valid in the function body"}, {"sha": "a103034a53765c2ad52eef8f53a1225b29c036d9", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.rs?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n // Test that `impl MyTrait<'_> for &i32` is equivalent to `impl<'a,\n // 'b> MyTrait<'a> for &'b i32`.\n \n@@ -17,7 +21,9 @@ fn static_val<T: StaticTrait>(_: T) {\n }\n \n fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n-    static_val(x); //~ ERROR E0759\n+    static_val(x);\n+    //[base]~^ ERROR E0759\n+    //[nll]~^^ ERROR borrowed data escapes outside of function\n }\n \n fn not_static_val<T: NotStaticTrait>(_: T) {"}, {"sha": "2fa8993b71afec16baded1aec6c6b1a06363d216", "filename": "src/test/ui/kindck/kindck-impl-type-params.base.stderr", "status": "renamed", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.base.stderr?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: `T` cannot be sent between threads safely\n-  --> $DIR/kindck-impl-type-params.rs:18:13\n+  --> $DIR/kindck-impl-type-params.rs:20:13\n    |\n LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ `T` cannot be sent between threads safely\n    |\n note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n-  --> $DIR/kindck-impl-type-params.rs:14:32\n+  --> $DIR/kindck-impl-type-params.rs:16:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n@@ -16,13 +16,13 @@ LL | fn f<T: std::marker::Send>(val: T) {\n    |       +++++++++++++++++++\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/kindck-impl-type-params.rs:18:13\n+  --> $DIR/kindck-impl-type-params.rs:20:13\n    |\n LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ the trait `Copy` is not implemented for `T`\n    |\n note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n-  --> $DIR/kindck-impl-type-params.rs:14:32\n+  --> $DIR/kindck-impl-type-params.rs:16:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n@@ -33,13 +33,13 @@ LL | fn f<T: std::marker::Copy>(val: T) {\n    |       +++++++++++++++++++\n \n error[E0277]: `T` cannot be sent between threads safely\n-  --> $DIR/kindck-impl-type-params.rs:25:31\n+  --> $DIR/kindck-impl-type-params.rs:27:31\n    |\n LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ `T` cannot be sent between threads safely\n    |\n note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n-  --> $DIR/kindck-impl-type-params.rs:14:32\n+  --> $DIR/kindck-impl-type-params.rs:16:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n@@ -50,13 +50,13 @@ LL | fn g<T: std::marker::Send>(val: T) {\n    |       +++++++++++++++++++\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/kindck-impl-type-params.rs:25:31\n+  --> $DIR/kindck-impl-type-params.rs:27:31\n    |\n LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ the trait `Copy` is not implemented for `T`\n    |\n note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n-  --> $DIR/kindck-impl-type-params.rs:14:32\n+  --> $DIR/kindck-impl-type-params.rs:16:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n@@ -67,36 +67,36 @@ LL | fn g<T: std::marker::Copy>(val: T) {\n    |       +++++++++++++++++++\n \n error[E0477]: the type `&'a isize` does not fulfill the required lifetime\n-  --> $DIR/kindck-impl-type-params.rs:32:13\n+  --> $DIR/kindck-impl-type-params.rs:34:13\n    |\n LL |     let a = &t as &dyn Gettable<&'a isize>;\n    |             ^^\n    |\n    = note: type must satisfy the static lifetime\n \n error[E0277]: the trait bound `String: Copy` is not satisfied\n-  --> $DIR/kindck-impl-type-params.rs:38:13\n+  --> $DIR/kindck-impl-type-params.rs:40:13\n    |\n LL |     let a = t as Box<dyn Gettable<String>>;\n    |             ^ the trait `Copy` is not implemented for `String`\n    |\n    = help: the trait `Gettable<T>` is implemented for `S<T>`\n note: required because of the requirements on the impl of `Gettable<String>` for `S<String>`\n-  --> $DIR/kindck-impl-type-params.rs:14:32\n+  --> $DIR/kindck-impl-type-params.rs:16:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n    = note: required for the cast to the object type `dyn Gettable<String>`\n \n error[E0277]: the trait bound `Foo: Copy` is not satisfied\n-  --> $DIR/kindck-impl-type-params.rs:46:37\n+  --> $DIR/kindck-impl-type-params.rs:48:37\n    |\n LL |     let a: Box<dyn Gettable<Foo>> = t;\n    |                                     ^ the trait `Copy` is not implemented for `Foo`\n    |\n    = help: the trait `Gettable<T>` is implemented for `S<T>`\n note: required because of the requirements on the impl of `Gettable<Foo>` for `S<Foo>`\n-  --> $DIR/kindck-impl-type-params.rs:14:32\n+  --> $DIR/kindck-impl-type-params.rs:16:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^", "previous_filename": "src/test/ui/kindck/kindck-impl-type-params.stderr"}, {"sha": "c6f5e17fb6971df3d02987d2ae9daa6ec5354c49", "filename": "src/test/ui/kindck/kindck-impl-type-params.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: `T` cannot be sent between threads safely\n-  --> $DIR/kindck-impl-type-params.rs:18:13\n+  --> $DIR/kindck-impl-type-params.rs:20:13\n    |\n LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ `T` cannot be sent between threads safely\n    |\n note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n-  --> $DIR/kindck-impl-type-params.rs:14:32\n+  --> $DIR/kindck-impl-type-params.rs:16:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n@@ -16,13 +16,13 @@ LL | fn f<T: std::marker::Send>(val: T) {\n    |       +++++++++++++++++++\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/kindck-impl-type-params.rs:18:13\n+  --> $DIR/kindck-impl-type-params.rs:20:13\n    |\n LL |     let a = &t as &dyn Gettable<T>;\n    |             ^^ the trait `Copy` is not implemented for `T`\n    |\n note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n-  --> $DIR/kindck-impl-type-params.rs:14:32\n+  --> $DIR/kindck-impl-type-params.rs:16:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n@@ -33,13 +33,13 @@ LL | fn f<T: std::marker::Copy>(val: T) {\n    |       +++++++++++++++++++\n \n error[E0277]: `T` cannot be sent between threads safely\n-  --> $DIR/kindck-impl-type-params.rs:25:31\n+  --> $DIR/kindck-impl-type-params.rs:27:31\n    |\n LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ `T` cannot be sent between threads safely\n    |\n note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n-  --> $DIR/kindck-impl-type-params.rs:14:32\n+  --> $DIR/kindck-impl-type-params.rs:16:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n@@ -50,13 +50,13 @@ LL | fn g<T: std::marker::Send>(val: T) {\n    |       +++++++++++++++++++\n \n error[E0277]: the trait bound `T: Copy` is not satisfied\n-  --> $DIR/kindck-impl-type-params.rs:25:31\n+  --> $DIR/kindck-impl-type-params.rs:27:31\n    |\n LL |     let a: &dyn Gettable<T> = &t;\n    |                               ^^ the trait `Copy` is not implemented for `T`\n    |\n note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n-  --> $DIR/kindck-impl-type-params.rs:14:32\n+  --> $DIR/kindck-impl-type-params.rs:16:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n@@ -67,28 +67,28 @@ LL | fn g<T: std::marker::Copy>(val: T) {\n    |       +++++++++++++++++++\n \n error[E0277]: the trait bound `String: Copy` is not satisfied\n-  --> $DIR/kindck-impl-type-params.rs:38:13\n+  --> $DIR/kindck-impl-type-params.rs:40:13\n    |\n LL |     let a = t as Box<dyn Gettable<String>>;\n    |             ^ the trait `Copy` is not implemented for `String`\n    |\n    = help: the trait `Gettable<T>` is implemented for `S<T>`\n note: required because of the requirements on the impl of `Gettable<String>` for `S<String>`\n-  --> $DIR/kindck-impl-type-params.rs:14:32\n+  --> $DIR/kindck-impl-type-params.rs:16:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^\n    = note: required for the cast to the object type `dyn Gettable<String>`\n \n error[E0277]: the trait bound `Foo: Copy` is not satisfied\n-  --> $DIR/kindck-impl-type-params.rs:46:37\n+  --> $DIR/kindck-impl-type-params.rs:48:37\n    |\n LL |     let a: Box<dyn Gettable<Foo>> = t;\n    |                                     ^ the trait `Copy` is not implemented for `Foo`\n    |\n    = help: the trait `Gettable<T>` is implemented for `S<T>`\n note: required because of the requirements on the impl of `Gettable<Foo>` for `S<Foo>`\n-  --> $DIR/kindck-impl-type-params.rs:14:32\n+  --> $DIR/kindck-impl-type-params.rs:16:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    |                                ^^^^^^^^^^^     ^^^^"}, {"sha": "1a56387258579c78611aab4281672b6f8de7c9c9", "filename": "src/test/ui/kindck/kindck-impl-type-params.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.rs?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,8 +1,10 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n // Issue #14061: tests the interaction between generic implementation\n // parameter bounds and trait objects.\n \n-\n-\n use std::marker;\n \n struct S<T>(marker::PhantomData<T>);\n@@ -30,7 +32,7 @@ fn g<T>(val: T) {\n fn foo<'a>() {\n     let t: S<&'a isize> = S(marker::PhantomData);\n     let a = &t as &dyn Gettable<&'a isize>;\n-    //~^ ERROR does not fulfill\n+    //[base]~^ ERROR does not fulfill\n }\n \n fn foo2<'a>() {"}, {"sha": "5976c7119c7e6f31dbe7f77b6958924e91206cc3", "filename": "src/test/ui/kindck/kindck-send-object1.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.base.stderr?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,31 +1,31 @@\n error[E0277]: `(dyn Dummy + 'a)` cannot be shared between threads safely\n-  --> $DIR/kindck-send-object1.rs:10:5\n+  --> $DIR/kindck-send-object1.rs:14:5\n    |\n LL |     assert_send::<&'a dyn Dummy>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Dummy + 'a)`\n    = note: required because of the requirements on the impl of `Send` for `&'a (dyn Dummy + 'a)`\n note: required by a bound in `assert_send`\n-  --> $DIR/kindck-send-object1.rs:5:18\n+  --> $DIR/kindck-send-object1.rs:9:18\n    |\n LL | fn assert_send<T:Send+'static>() { }\n    |                  ^^^^ required by this bound in `assert_send`\n \n error[E0477]: the type `&'a (dyn Dummy + Sync + 'a)` does not fulfill the required lifetime\n-  --> $DIR/kindck-send-object1.rs:14:5\n+  --> $DIR/kindck-send-object1.rs:18:5\n    |\n LL |     assert_send::<&'a (dyn Dummy + Sync)>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: type must satisfy the static lifetime as required by this binding\n-  --> $DIR/kindck-send-object1.rs:5:23\n+  --> $DIR/kindck-send-object1.rs:9:23\n    |\n LL | fn assert_send<T:Send+'static>() { }\n    |                       ^^^^^^^\n \n error[E0277]: `(dyn Dummy + 'a)` cannot be sent between threads safely\n-  --> $DIR/kindck-send-object1.rs:29:5\n+  --> $DIR/kindck-send-object1.rs:33:5\n    |\n LL |     assert_send::<Box<dyn Dummy + 'a>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be sent between threads safely\n@@ -34,7 +34,7 @@ LL |     assert_send::<Box<dyn Dummy + 'a>>();\n    = note: required because of the requirements on the impl of `Send` for `Unique<(dyn Dummy + 'a)>`\n    = note: required because it appears within the type `Box<(dyn Dummy + 'a)>`\n note: required by a bound in `assert_send`\n-  --> $DIR/kindck-send-object1.rs:5:18\n+  --> $DIR/kindck-send-object1.rs:9:18\n    |\n LL | fn assert_send<T:Send+'static>() { }\n    |                  ^^^^ required by this bound in `assert_send`", "previous_filename": "src/test/ui/kindck/kindck-send-object1.stderr"}, {"sha": "f34374dcc542dca0f37d8fb30ac2f1fd5fc1781b", "filename": "src/test/ui/kindck/kindck-send-object1.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,19 +1,19 @@\n error[E0277]: `(dyn Dummy + 'a)` cannot be shared between threads safely\n-  --> $DIR/kindck-send-object1.rs:10:5\n+  --> $DIR/kindck-send-object1.rs:14:5\n    |\n LL |     assert_send::<&'a dyn Dummy>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Dummy + 'a)`\n    = note: required because of the requirements on the impl of `Send` for `&'a (dyn Dummy + 'a)`\n note: required by a bound in `assert_send`\n-  --> $DIR/kindck-send-object1.rs:5:18\n+  --> $DIR/kindck-send-object1.rs:9:18\n    |\n LL | fn assert_send<T:Send+'static>() { }\n    |                  ^^^^ required by this bound in `assert_send`\n \n error[E0277]: `(dyn Dummy + 'a)` cannot be sent between threads safely\n-  --> $DIR/kindck-send-object1.rs:29:5\n+  --> $DIR/kindck-send-object1.rs:33:5\n    |\n LL |     assert_send::<Box<dyn Dummy + 'a>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be sent between threads safely\n@@ -22,7 +22,7 @@ LL |     assert_send::<Box<dyn Dummy + 'a>>();\n    = note: required because of the requirements on the impl of `Send` for `Unique<(dyn Dummy + 'a)>`\n    = note: required because it appears within the type `Box<(dyn Dummy + 'a)>`\n note: required by a bound in `assert_send`\n-  --> $DIR/kindck-send-object1.rs:5:18\n+  --> $DIR/kindck-send-object1.rs:9:18\n    |\n LL | fn assert_send<T:Send+'static>() { }\n    |                  ^^^^ required by this bound in `assert_send`"}, {"sha": "26894dc2ce4a624deb96ef68aa460f498280538e", "filename": "src/test/ui/kindck/kindck-send-object1.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.rs?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n // Test which object types are considered sendable. This test\n // is broken into two parts because some errors occur in distinct\n // phases in the compiler. See kindck-send-object2.rs as well!\n@@ -12,7 +16,7 @@ fn test51<'a>() {\n }\n fn test52<'a>() {\n     assert_send::<&'a (dyn Dummy + Sync)>();\n-    //~^ ERROR does not fulfill the required lifetime\n+    //[base]~^ ERROR does not fulfill the required lifetime\n }\n \n // ...unless they are properly bounded"}, {"sha": "da98483906f15989593e294a0f12db93557b22df", "filename": "src/test/ui/lub-glb/old-lub-glb-object.base.stderr", "status": "renamed", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.base.stderr?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,11 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/old-lub-glb-object.rs:7:13\n+  --> $DIR/old-lub-glb-object.rs:11:13\n    |\n LL |       let z = match 22 {\n    |  _____________^\n LL | |\n LL | |         0 => x,\n LL | |         _ => y,\n+LL | |\n+LL | |\n LL | |     };\n    | |_____^ one type is more general than the other\n    |", "previous_filename": "src/test/ui/lub-glb/old-lub-glb-object.stderr"}, {"sha": "8f19133be4475a555553f53327967ba4fd03d486", "filename": "src/test/ui/lub-glb/old-lub-glb-object.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.nll.stderr?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/old-lub-glb-object.rs:10:14\n+  --> $DIR/old-lub-glb-object.rs:14:14\n    |\n LL |         _ => y,\n    |              ^ one type is more general than the other\n@@ -8,7 +8,7 @@ LL |         _ => y,\n               found trait object `dyn for<'a> Foo<&'a u8, &'a u8>`\n \n error[E0308]: mismatched types\n-  --> $DIR/old-lub-glb-object.rs:10:14\n+  --> $DIR/old-lub-glb-object.rs:14:14\n    |\n LL |         _ => y,\n    |              ^ one type is more general than the other"}, {"sha": "b4dbb0caae6c9f0aa3b6b4762d53a5045018ec54", "filename": "src/test/ui/lub-glb/old-lub-glb-object.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.rs?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,13 +1,19 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n // Test that we give a note when the old LUB/GLB algorithm would have\n // succeeded but the new code (which is stricter) gives an error.\n \n trait Foo<T, U> {}\n \n fn foo(x: &dyn for<'a, 'b> Foo<&'a u8, &'b u8>, y: &dyn for<'a> Foo<&'a u8, &'a u8>) {\n     let z = match 22 {\n-        //~^ ERROR mismatched types\n+        //[base]~^ ERROR mismatched types\n         0 => x,\n         _ => y,\n+        //[nll]~^ ERROR mismatched types\n+        //[nll]~| ERROR mismatched types\n     };\n }\n "}, {"sha": "dfc6ef567f0fa4b42aa68acfe757fd369b195af1", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.base.stderr", "status": "renamed", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.base.stderr?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,5 +1,5 @@\n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/closure-arg-type-mismatch.rs:3:14\n+  --> $DIR/closure-arg-type-mismatch.rs:7:14\n    |\n LL |     a.iter().map(|_: (u32, u32)| 45);\n    |              ^^^ ------------------ found signature of `fn((u32, u32)) -> _`\n@@ -13,7 +13,7 @@ LL |         F: FnMut(Self::Item) -> B,\n    |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/closure-arg-type-mismatch.rs:4:14\n+  --> $DIR/closure-arg-type-mismatch.rs:8:14\n    |\n LL |     a.iter().map(|_: &(u16, u16)| 45);\n    |              ^^^ ------------------- found signature of `for<'r> fn(&'r (u16, u16)) -> _`\n@@ -27,7 +27,7 @@ LL |         F: FnMut(Self::Item) -> B,\n    |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/closure-arg-type-mismatch.rs:5:14\n+  --> $DIR/closure-arg-type-mismatch.rs:9:14\n    |\n LL |     a.iter().map(|_: (u16, u16)| 45);\n    |              ^^^ ------------------ found signature of `fn((u16, u16)) -> _`\n@@ -41,26 +41,26 @@ LL |         F: FnMut(Self::Item) -> B,\n    |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n \n error[E0308]: mismatched types\n-  --> $DIR/closure-arg-type-mismatch.rs:10:5\n+  --> $DIR/closure-arg-type-mismatch.rs:14:5\n    |\n LL |     baz(f);\n    |     ^^^ lifetime mismatch\n    |\n    = note: expected type `for<'r> Fn<(*mut &'r u32,)>`\n               found type `Fn<(*mut &'a u32,)>`\n note: the required lifetime does not necessarily outlive the lifetime `'a` as defined here\n-  --> $DIR/closure-arg-type-mismatch.rs:9:10\n+  --> $DIR/closure-arg-type-mismatch.rs:13:10\n    |\n LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n    |          ^^\n note: the lifetime requirement is introduced here\n-  --> $DIR/closure-arg-type-mismatch.rs:8:11\n+  --> $DIR/closure-arg-type-mismatch.rs:12:11\n    |\n LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n    |           ^^^^^^^^^^^^^\n \n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/closure-arg-type-mismatch.rs:10:5\n+  --> $DIR/closure-arg-type-mismatch.rs:14:5\n    |\n LL |     baz(f);\n    |     ^^^ implementation of `FnOnce` is not general enough\n@@ -69,26 +69,26 @@ LL |     baz(f);\n    = note: ...but it actually implements `FnOnce<(*mut &'a u32,)>`\n \n error[E0308]: mismatched types\n-  --> $DIR/closure-arg-type-mismatch.rs:10:5\n+  --> $DIR/closure-arg-type-mismatch.rs:14:5\n    |\n LL |     baz(f);\n    |     ^^^ lifetime mismatch\n    |\n    = note: expected type `for<'r> Fn<(*mut &'r u32,)>`\n               found type `Fn<(*mut &'a u32,)>`\n note: the lifetime `'a` as defined here doesn't meet the lifetime requirements\n-  --> $DIR/closure-arg-type-mismatch.rs:9:10\n+  --> $DIR/closure-arg-type-mismatch.rs:13:10\n    |\n LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n    |          ^^\n note: the lifetime requirement is introduced here\n-  --> $DIR/closure-arg-type-mismatch.rs:8:11\n+  --> $DIR/closure-arg-type-mismatch.rs:12:11\n    |\n LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n    |           ^^^^^^^^^^^^^\n \n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/closure-arg-type-mismatch.rs:10:5\n+  --> $DIR/closure-arg-type-mismatch.rs:14:5\n    |\n LL |     baz(f);\n    |     ^^^ implementation of `FnOnce` is not general enough", "previous_filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr"}, {"sha": "314000e88483dc7b6911cbe8a66b68f69d35a465", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.nll.stderr?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,5 +1,5 @@\n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/closure-arg-type-mismatch.rs:3:14\n+  --> $DIR/closure-arg-type-mismatch.rs:7:14\n    |\n LL |     a.iter().map(|_: (u32, u32)| 45);\n    |              ^^^ ------------------ found signature of `fn((u32, u32)) -> _`\n@@ -13,7 +13,7 @@ LL |         F: FnMut(Self::Item) -> B,\n    |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/closure-arg-type-mismatch.rs:4:14\n+  --> $DIR/closure-arg-type-mismatch.rs:8:14\n    |\n LL |     a.iter().map(|_: &(u16, u16)| 45);\n    |              ^^^ ------------------- found signature of `for<'r> fn(&'r (u16, u16)) -> _`\n@@ -27,7 +27,7 @@ LL |         F: FnMut(Self::Item) -> B,\n    |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n \n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/closure-arg-type-mismatch.rs:5:14\n+  --> $DIR/closure-arg-type-mismatch.rs:9:14\n    |\n LL |     a.iter().map(|_: (u16, u16)| 45);\n    |              ^^^ ------------------ found signature of `fn((u16, u16)) -> _`"}, {"sha": "da8011cc92b622dab3bbdefbb08b698a2e443edc", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.rs?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n fn main() {\n     let a = [(1u32, 2u32)];\n     a.iter().map(|_: (u32, u32)| 45); //~ ERROR type mismatch\n@@ -8,8 +12,8 @@ fn main() {\n fn baz<F: Fn(*mut &u32)>(_: F) {}\n fn _test<'a>(f: fn(*mut &'a u32)) {\n     baz(f);\n-    //~^ ERROR implementation of `FnOnce` is not general enough\n-    //~| ERROR implementation of `FnOnce` is not general enough\n-    //~| ERROR mismatched types\n-    //~| ERROR mismatched types\n+    //[base]~^ ERROR implementation of `FnOnce` is not general enough\n+    //[base]~| ERROR implementation of `FnOnce` is not general enough\n+    //[base]~| ERROR mismatched types\n+    //[base]~| ERROR mismatched types\n }"}, {"sha": "7c81ebdf4907817235135fd9d0c6d6d39f6f5f0e", "filename": "src/test/ui/mismatched_types/closure-mismatch.base.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.base.stderr?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,18 +1,18 @@\n error[E0308]: mismatched types\n-  --> $DIR/closure-mismatch.rs:8:5\n+  --> $DIR/closure-mismatch.rs:12:5\n    |\n LL |     baz(|_| ());\n    |     ^^^ lifetime mismatch\n    |\n    = note: expected type `for<'r> Fn<(&'r (),)>`\n               found type `Fn<(&(),)>`\n note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/closure-mismatch.rs:8:9\n+  --> $DIR/closure-mismatch.rs:12:9\n    |\n LL |     baz(|_| ());\n    |         ^^^^^^\n note: the lifetime requirement is introduced here\n-  --> $DIR/closure-mismatch.rs:5:11\n+  --> $DIR/closure-mismatch.rs:9:11\n    |\n LL | fn baz<T: Foo>(_: T) {}\n    |           ^^^", "previous_filename": "src/test/ui/mismatched_types/closure-mismatch.stderr"}, {"sha": "9508fc8a9be2392b333ba395c3ee61e52f7c51b7", "filename": "src/test/ui/mismatched_types/closure-mismatch.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.nll.stderr?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `FnOnce` is not general enough\n-  --> $DIR/closure-mismatch.rs:8:5\n+  --> $DIR/closure-mismatch.rs:12:5\n    |\n LL |     baz(|_| ());\n    |     ^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n@@ -8,20 +8,20 @@ LL |     baz(|_| ());\n    = note: ...but it actually implements `FnOnce<(&'2 (),)>`, for some specific lifetime `'2`\n \n error[E0308]: mismatched types\n-  --> $DIR/closure-mismatch.rs:8:5\n+  --> $DIR/closure-mismatch.rs:12:5\n    |\n LL |     baz(|_| ());\n    |     ^^^^^^^^^^^ one type is more general than the other\n    |\n    = note: expected type `for<'r> Fn<(&'r (),)>`\n               found type `Fn<(&(),)>`\n note: this closure does not fulfill the lifetime requirements\n-  --> $DIR/closure-mismatch.rs:8:9\n+  --> $DIR/closure-mismatch.rs:12:9\n    |\n LL |     baz(|_| ());\n    |         ^^^^^^\n note: the lifetime requirement is introduced here\n-  --> $DIR/closure-mismatch.rs:5:11\n+  --> $DIR/closure-mismatch.rs:9:11\n    |\n LL | fn baz<T: Foo>(_: T) {}\n    |           ^^^"}, {"sha": "5bf3aef9bb07aa0aa12d1afb3284cadd3b80361b", "filename": "src/test/ui/mismatched_types/closure-mismatch.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.rs?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,9 +1,16 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n trait Foo {}\n \n impl<T: Fn(&())> Foo for T {}\n \n fn baz<T: Foo>(_: T) {}\n \n fn main() {\n-    baz(|_| ()); //~ ERROR mismatched types\n+    baz(|_| ());\n+    //[base]~^ ERROR mismatched types\n+    //[nll]~^^ ERROR implementation of `FnOnce` is not general enough\n+    //[nll]~| ERROR mismatched types\n }"}, {"sha": "8d1ef324c817a281a5f5cdde1a7602b3088aeed9", "filename": "src/test/ui/traits/object/supertrait-lifetime-bound.base.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsupertrait-lifetime-bound.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsupertrait-lifetime-bound.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsupertrait-lifetime-bound.base.stderr?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,11 +1,11 @@\n error[E0477]: the type `(dyn Bar<&'a u32> + 'static)` does not fulfill the required lifetime\n-  --> $DIR/supertrait-lifetime-bound.rs:10:5\n+  --> $DIR/supertrait-lifetime-bound.rs:14:5\n    |\n LL |     test1::<dyn Bar<&'a u32>, _>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: type must satisfy the static lifetime as required by this binding\n-  --> $DIR/supertrait-lifetime-bound.rs:5:22\n+  --> $DIR/supertrait-lifetime-bound.rs:9:22\n    |\n LL | fn test1<T: ?Sized + Bar<S>, S>() { }\n    |                      ^^^^^^", "previous_filename": "src/test/ui/traits/object/supertrait-lifetime-bound.stderr"}, {"sha": "271c6a10998b7f2249724e64dc5363357024e1cc", "filename": "src/test/ui/traits/object/supertrait-lifetime-bound.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsupertrait-lifetime-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsupertrait-lifetime-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsupertrait-lifetime-bound.nll.stderr?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/supertrait-lifetime-bound.rs:10:5\n+  --> $DIR/supertrait-lifetime-bound.rs:14:5\n    |\n LL | fn test2<'a>() {\n    |          -- lifetime `'a` defined here"}, {"sha": "a57151853e0038cf88cd3c4ef5936467097e6a08", "filename": "src/test/ui/traits/object/supertrait-lifetime-bound.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsupertrait-lifetime-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsupertrait-lifetime-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fsupertrait-lifetime-bound.rs?ref=12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n trait Foo: 'static { }\n \n trait Bar<T>: Foo { }\n@@ -8,7 +12,8 @@ fn test2<'a>() {\n     // Here: the type `dyn Bar<&'a u32>` references `'a`,\n     // and so it does not outlive `'static`.\n     test1::<dyn Bar<&'a u32>, _>();\n-    //~^ ERROR the type `(dyn Bar<&'a u32> + 'static)` does not fulfill the required lifetime\n+    //[base]~^ ERROR the type `(dyn Bar<&'a u32> + 'static)` does not fulfill the required lifetime\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}]}