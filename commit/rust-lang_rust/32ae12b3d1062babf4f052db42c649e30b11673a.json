{"sha": "32ae12b3d1062babf4f052db42c649e30b11673a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyYWUxMmIzZDEwNjJiYWJmNGYwNTJkYjQyYzY0OWUzMGIxMTY3M2E=", "commit": {"author": {"name": "Lee Bousfield", "email": "ljbousfield@gmail.com", "date": "2017-07-10T23:26:11Z"}, "committer": {"name": "Lee Bousfield", "email": "ljbousfield@gmail.com", "date": "2017-07-10T23:26:11Z"}, "message": "Add LocalKey::try_with as an alternative to state", "tree": {"sha": "682061b739399c2e0efd62dbdbf300cc5611af21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/682061b739399c2e0efd62dbdbf300cc5611af21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32ae12b3d1062babf4f052db42c649e30b11673a", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE4PWe0/2fDR3tomkkxB9lBMEWQgkFAllkDcEACgkQxB9lBMEW\nQgkkAQf/Vp8PZjqUARJyPJjJsIFOtgGN/8ycE0TCDQgOSnfElGC18P59/FOBv1cA\n1NjWfysbvE3pH0Tn9/ic+h/IWt4zhfp/Qr6l5nx3k0OoyNdLLi5fclW6jlYN4ZZY\nC+kEqrFGY4twPz99qLT698DnwMzdd1p2SGWB2MZFCnYs13F9TrFCrN1EQDegYBOU\nKkH/CayPBi7Aw0po9OG1Kjhkxc2kQWgYSCI9LthdF8meFj79JzqYtppwTQgcJyLA\ntNs47ePAO3vogNB7se0sYZEhimrG8q505j+wMD3AbyRrfoV7DsPBx/HAUKg8vu4H\n7mNnlGTeH2zgYgV13w6mZTFawl1PoA==\n=XOra\n-----END PGP SIGNATURE-----", "payload": "tree 682061b739399c2e0efd62dbdbf300cc5611af21\nparent eb9dfb8bd9444d01fc129bfaac180b913299486b\nauthor Lee Bousfield <ljbousfield@gmail.com> 1499729171 -0400\ncommitter Lee Bousfield <ljbousfield@gmail.com> 1499729171 -0400\n\nAdd LocalKey::try_with as an alternative to state\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32ae12b3d1062babf4f052db42c649e30b11673a", "html_url": "https://github.com/rust-lang/rust/commit/32ae12b3d1062babf4f052db42c649e30b11673a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32ae12b3d1062babf4f052db42c649e30b11673a/comments", "author": {"login": "PlasmaPower", "id": 6006498, "node_id": "MDQ6VXNlcjYwMDY0OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6006498?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PlasmaPower", "html_url": "https://github.com/PlasmaPower", "followers_url": "https://api.github.com/users/PlasmaPower/followers", "following_url": "https://api.github.com/users/PlasmaPower/following{/other_user}", "gists_url": "https://api.github.com/users/PlasmaPower/gists{/gist_id}", "starred_url": "https://api.github.com/users/PlasmaPower/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PlasmaPower/subscriptions", "organizations_url": "https://api.github.com/users/PlasmaPower/orgs", "repos_url": "https://api.github.com/users/PlasmaPower/repos", "events_url": "https://api.github.com/users/PlasmaPower/events{/privacy}", "received_events_url": "https://api.github.com/users/PlasmaPower/received_events", "type": "User", "site_admin": false}, "committer": {"login": "PlasmaPower", "id": 6006498, "node_id": "MDQ6VXNlcjYwMDY0OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6006498?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PlasmaPower", "html_url": "https://github.com/PlasmaPower", "followers_url": "https://api.github.com/users/PlasmaPower/followers", "following_url": "https://api.github.com/users/PlasmaPower/following{/other_user}", "gists_url": "https://api.github.com/users/PlasmaPower/gists{/gist_id}", "starred_url": "https://api.github.com/users/PlasmaPower/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PlasmaPower/subscriptions", "organizations_url": "https://api.github.com/users/PlasmaPower/orgs", "repos_url": "https://api.github.com/users/PlasmaPower/repos", "events_url": "https://api.github.com/users/PlasmaPower/events{/privacy}", "received_events_url": "https://api.github.com/users/PlasmaPower/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb9dfb8bd9444d01fc129bfaac180b913299486b", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb9dfb8bd9444d01fc129bfaac180b913299486b", "html_url": "https://github.com/rust-lang/rust/commit/eb9dfb8bd9444d01fc129bfaac180b913299486b"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "18979fbbdbeeac461d0e31a4e61b757da26003fc", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/32ae12b3d1062babf4f052db42c649e30b11673a/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32ae12b3d1062babf4f052db42c649e30b11673a/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=32ae12b3d1062babf4f052db42c649e30b11673a", "patch": "@@ -232,6 +232,32 @@ pub enum LocalKeyState {\n     Destroyed,\n }\n \n+/// An error returned by [`LocalKey::try_with`](struct.LocalKey.html#method.try_with).\n+#[unstable(feature = \"thread_local_state\",\n+           reason = \"state querying was recently added\",\n+           issue = \"27716\")]\n+pub struct AccessError {\n+    _private: (),\n+}\n+\n+#[unstable(feature = \"thread_local_state\",\n+           reason = \"state querying was recently added\",\n+           issue = \"27716\")]\n+impl fmt::Debug for AccessError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"AccessError\").finish()\n+    }\n+}\n+\n+#[unstable(feature = \"thread_local_state\",\n+           reason = \"state querying was recently added\",\n+           issue = \"27716\")]\n+impl fmt::Display for AccessError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Display::fmt(\"already destroyed\", f)\n+    }\n+}\n+\n impl<T: 'static> LocalKey<T> {\n     #[doc(hidden)]\n     #[unstable(feature = \"thread_local_internals\",\n@@ -331,6 +357,32 @@ impl<T: 'static> LocalKey<T> {\n             }\n         }\n     }\n+\n+    /// Acquires a reference to the value in this TLS key.\n+    ///\n+    /// This will lazily initialize the value if this thread has not referenced\n+    /// this key yet. If the key has been destroyed (which may happen if this is called\n+    /// in a destructor), this function will return a ThreadLocalError.\n+    ///\n+    /// # Panics\n+    ///\n+    /// This function will still `panic!()` if the key is uninitialized and the\n+    /// key's initializer panics.\n+    #[unstable(feature = \"thread_local_state\",\n+               reason = \"state querying was recently added\",\n+               issue = \"27716\")]\n+    pub fn try_with<F, R>(&'static self, f: F) -> Result<R, AccessError>\n+                      where F: FnOnce(&T) -> R {\n+        unsafe {\n+            let slot = (self.inner)().ok_or(AccessError {\n+                _private: (),\n+            })?;\n+            Ok(f(match *slot.get() {\n+                Some(ref inner) => inner,\n+                None => self.init(slot),\n+            }))\n+        }\n+    }\n }\n \n #[doc(hidden)]"}, {"sha": "09d7dbd66eb0d8b69a87e3e9397b18c98587deda", "filename": "src/test/run-pass/tls-try-with.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/32ae12b3d1062babf4f052db42c649e30b11673a/src%2Ftest%2Frun-pass%2Ftls-try-with.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32ae12b3d1062babf4f052db42c649e30b11673a/src%2Ftest%2Frun-pass%2Ftls-try-with.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftls-try-with.rs?ref=32ae12b3d1062babf4f052db42c649e30b11673a", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-emscripten no threads support\n+\n+#![feature(thread_local_state)]\n+\n+use std::thread;\n+\n+struct Foo;\n+\n+thread_local!(static FOO: Foo = Foo {});\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {\n+        assert!(FOO.try_with(|_| panic!(\"`try_with` closure run\")).is_err());\n+    }\n+}\n+\n+fn main() {\n+    thread::spawn(|| {\n+        assert_eq!(FOO.try_with(|_| {\n+            132\n+        }).expect(\"`try_with` failed\"), 132);\n+    }).join().unwrap();\n+}"}]}