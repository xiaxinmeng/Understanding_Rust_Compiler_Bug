{"sha": "0630bbabfc19126be5fa47933c5ea03d48030582", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MzBiYmFiZmMxOTEyNmJlNWZhNDc5MzNjNWVhMDNkNDgwMzA1ODI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-21T13:32:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-21T13:32:40Z"}, "message": "Merge #2338\n\n2338: Remove old hir::generics module r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "d7e8fc2fc2234c4bd28c2274bdc761f74a78940a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7e8fc2fc2234c4bd28c2274bdc761f74a78940a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0630bbabfc19126be5fa47933c5ea03d48030582", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd1pH4CRBK7hj4Ov3rIwAAdHIIAEt3SOyNpG+euOMp8Gp1Emrh\nIzge0rFr+brnvjozJf9NNxVXHjhwPAg7ZH9VXfKTLGpXURyr0hii2OdwnJcnRDuf\nmtXat32b9XIHYRyufloZdj/u5zgrrlHbPleSdmh/jdWi4ZJbHoUzOWaVQ8jMlqEt\noWtZbcqEkz3sNvxvjj6rLMaRH6i4CPQPJStRNEQnnQAuHZF1otNd+mv2MH33iyzy\n4qHQN5HTl8sBa3xrcktFtgiCuSNiv5dXPb969JT2RytE++bJoYAbHidT/GGx6qj/\nMmpw4spzefrnhEgeTupn93dQ6sqOO2S4athiblGf09BpFaaDnhTdypchGJjj3MY=\n=kYpD\n-----END PGP SIGNATURE-----\n", "payload": "tree d7e8fc2fc2234c4bd28c2274bdc761f74a78940a\nparent 1f61915bde4c5d8d4fe2e9b8dfa9445008730b79\nparent 952405cb4180993af0f5c939d5276dbdf2a19152\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574343160 +0000\ncommitter GitHub <noreply@github.com> 1574343160 +0000\n\nMerge #2338\n\n2338: Remove old hir::generics module r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0630bbabfc19126be5fa47933c5ea03d48030582", "html_url": "https://github.com/rust-lang/rust/commit/0630bbabfc19126be5fa47933c5ea03d48030582", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0630bbabfc19126be5fa47933c5ea03d48030582/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f61915bde4c5d8d4fe2e9b8dfa9445008730b79", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f61915bde4c5d8d4fe2e9b8dfa9445008730b79", "html_url": "https://github.com/rust-lang/rust/commit/1f61915bde4c5d8d4fe2e9b8dfa9445008730b79"}, {"sha": "952405cb4180993af0f5c939d5276dbdf2a19152", "url": "https://api.github.com/repos/rust-lang/rust/commits/952405cb4180993af0f5c939d5276dbdf2a19152", "html_url": "https://github.com/rust-lang/rust/commit/952405cb4180993af0f5c939d5276dbdf2a19152"}], "stats": {"total": 320, "additions": 139, "deletions": 181}, "files": [{"sha": "5690040a757753d1b7d28ddc0c295983d9bb5a3d", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 34, "deletions": 12, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0630bbabfc19126be5fa47933c5ea03d48030582/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0630bbabfc19126be5fa47933c5ea03d48030582/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=0630bbabfc19126be5fa47933c5ea03d48030582", "patch": "@@ -27,7 +27,6 @@ use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     expr::{BindingAnnotation, Body, BodySourceMap, ExprValidator, Pat, PatId},\n-    generics::{GenericDef, HasGenericParams},\n     ids::{\n         AstItemDef, ConstId, EnumId, FunctionId, MacroDefId, StaticId, StructId, TraitId,\n         TypeAliasId,\n@@ -835,7 +834,7 @@ impl Trait {\n         // lifetime problems, but since there usually shouldn't be more than a\n         // few direct traits this should be fine (we could even use some kind of\n         // SmallVec if performance is a concern)\n-        self.generic_params(db)\n+        db.generic_params(self.id.into())\n             .where_predicates\n             .iter()\n             .filter_map(|pred| match &pred.type_ref {\n@@ -975,16 +974,6 @@ pub enum AssocItem {\n // casting them, and somehow making the constructors private, which would be annoying.\n impl_froms!(AssocItem: Function, Const, TypeAlias);\n \n-impl From<AssocItem> for crate::generics::GenericDef {\n-    fn from(item: AssocItem) -> Self {\n-        match item {\n-            AssocItem::Function(f) => f.into(),\n-            AssocItem::Const(c) => c.into(),\n-            AssocItem::TypeAlias(t) => t.into(),\n-        }\n-    }\n-}\n-\n impl AssocItem {\n     pub fn module(self, db: &impl DefDatabase) -> Module {\n         match self {\n@@ -1004,6 +993,39 @@ impl AssocItem {\n     }\n }\n \n+#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]\n+pub enum GenericDef {\n+    Function(Function),\n+    Adt(Adt),\n+    Trait(Trait),\n+    TypeAlias(TypeAlias),\n+    ImplBlock(ImplBlock),\n+    // enum variants cannot have generics themselves, but their parent enums\n+    // can, and this makes some code easier to write\n+    EnumVariant(EnumVariant),\n+    // consts can have type parameters from their parents (i.e. associated consts of traits)\n+    Const(Const),\n+}\n+impl_froms!(\n+    GenericDef: Function,\n+    Adt(Struct, Enum, Union),\n+    Trait,\n+    TypeAlias,\n+    ImplBlock,\n+    EnumVariant,\n+    Const\n+);\n+\n+impl From<AssocItem> for GenericDef {\n+    fn from(item: AssocItem) -> Self {\n+        match item {\n+            AssocItem::Function(f) => f.into(),\n+            AssocItem::Const(c) => c.into(),\n+            AssocItem::TypeAlias(t) => t.into(),\n+        }\n+    }\n+}\n+\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub struct Local {\n     pub(crate) parent: DefWithBody,"}, {"sha": "ed0d680011e97286d59a941ad45908603fc94377", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0630bbabfc19126be5fa47933c5ea03d48030582/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0630bbabfc19126be5fa47933c5ea03d48030582/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=0630bbabfc19126be5fa47933c5ea03d48030582", "patch": "@@ -8,7 +8,6 @@ use ra_syntax::SmolStr;\n \n use crate::{\n     debug::HirDebugDatabase,\n-    generics::GenericDef,\n     ids,\n     lang_item::{LangItemTarget, LangItems},\n     ty::{\n@@ -18,8 +17,8 @@ use crate::{\n         TypeCtor,\n     },\n     type_alias::TypeAliasData,\n-    Const, ConstData, Crate, DefWithBody, FnData, Function, ImplBlock, Module, Static, StructField,\n-    Trait, TypeAlias,\n+    Const, ConstData, Crate, DefWithBody, FnData, Function, GenericDef, ImplBlock, Module, Static,\n+    StructField, Trait, TypeAlias,\n };\n \n pub use hir_def::db::{"}, {"sha": "e8ed04056a7deafb5f7038727aa0b319b9b10893", "filename": "crates/ra_hir/src/from_id.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0630bbabfc19126be5fa47933c5ea03d48030582/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0630bbabfc19126be5fa47933c5ea03d48030582/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs?ref=0630bbabfc19126be5fa47933c5ea03d48030582", "patch": "@@ -9,8 +9,9 @@ use hir_def::{\n };\n \n use crate::{\n-    ty::TypableDef, Adt, AssocItem, Const, Crate, DefWithBody, EnumVariant, Function, GenericDef,\n-    ModuleDef, Static, TypeAlias,\n+    ty::{CallableDef, TypableDef},\n+    Adt, AssocItem, Const, Crate, DefWithBody, EnumVariant, Function, GenericDef, ModuleDef,\n+    Static, TypeAlias,\n };\n \n impl From<ra_db::CrateId> for Crate {\n@@ -206,3 +207,15 @@ impl From<Adt> for GenericDefId {\n         }\n     }\n }\n+\n+impl From<CallableDef> for GenericDefId {\n+    fn from(def: CallableDef) -> Self {\n+        match def {\n+            CallableDef::Function(it) => it.id.into(),\n+            CallableDef::Struct(it) => it.id.into(),\n+            CallableDef::EnumVariant(it) => {\n+                EnumVariantId { parent: it.parent.id, local_id: it.id }.into()\n+            }\n+        }\n+    }\n+}"}, {"sha": "f1bf2ee9d19b823ad677142e48366324e5bc6599", "filename": "crates/ra_hir/src/generics.rs", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1f61915bde4c5d8d4fe2e9b8dfa9445008730b79/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f61915bde4c5d8d4fe2e9b8dfa9445008730b79/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=1f61915bde4c5d8d4fe2e9b8dfa9445008730b79", "patch": "@@ -1,54 +0,0 @@\n-//! Temp module to wrap hir_def::generics\n-use std::sync::Arc;\n-\n-use crate::{\n-    db::DefDatabase, Adt, Const, Container, Enum, EnumVariant, Function, ImplBlock, Struct, Trait,\n-    TypeAlias, Union,\n-};\n-\n-pub use hir_def::generics::{GenericParam, GenericParams, WherePredicate};\n-\n-#[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]\n-pub enum GenericDef {\n-    Function(Function),\n-    Adt(Adt),\n-    Trait(Trait),\n-    TypeAlias(TypeAlias),\n-    ImplBlock(ImplBlock),\n-    // enum variants cannot have generics themselves, but their parent enums\n-    // can, and this makes some code easier to write\n-    EnumVariant(EnumVariant),\n-    // consts can have type parameters from their parents (i.e. associated consts of traits)\n-    Const(Const),\n-}\n-impl_froms!(\n-    GenericDef: Function,\n-    Adt(Struct, Enum, Union),\n-    Trait,\n-    TypeAlias,\n-    ImplBlock,\n-    EnumVariant,\n-    Const\n-);\n-\n-impl From<Container> for GenericDef {\n-    fn from(c: Container) -> Self {\n-        match c {\n-            Container::Trait(trait_) => trait_.into(),\n-            Container::ImplBlock(impl_block) => impl_block.into(),\n-        }\n-    }\n-}\n-\n-pub trait HasGenericParams: Copy {\n-    fn generic_params(self, db: &impl DefDatabase) -> Arc<GenericParams>;\n-}\n-\n-impl<T> HasGenericParams for T\n-where\n-    T: Into<GenericDef> + Copy,\n-{\n-    fn generic_params(self, db: &impl DefDatabase) -> Arc<GenericParams> {\n-        db.generic_params(self.into().into())\n-    }\n-}"}, {"sha": "8c6834392df40a9dc03709e738da240e1ab4a676", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0630bbabfc19126be5fa47933c5ea03d48030582/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0630bbabfc19126be5fa47933c5ea03d48030582/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=0630bbabfc19126be5fa47933c5ea03d48030582", "patch": "@@ -37,7 +37,6 @@ mod ty;\n mod impl_block;\n mod expr;\n mod lang_item;\n-pub mod generics;\n pub mod diagnostics;\n mod util;\n \n@@ -57,13 +56,12 @@ pub use crate::{\n         docs::{DocDef, Docs, Documentation},\n         src::{HasBodySource, HasSource},\n         Adt, AssocItem, Const, ConstData, Container, Crate, CrateDependency, DefWithBody, Enum,\n-        EnumVariant, FieldSource, FnData, Function, GenericParam, HasBody, ImplBlock, Local,\n-        MacroDef, Module, ModuleDef, ModuleSource, ScopeDef, Static, Struct, StructField, Trait,\n-        TypeAlias, Union, VariantDef,\n+        EnumVariant, FieldSource, FnData, Function, GenericDef, GenericParam, HasBody, ImplBlock,\n+        Local, MacroDef, Module, ModuleDef, ModuleSource, ScopeDef, Static, Struct, StructField,\n+        Trait, TypeAlias, Union, VariantDef,\n     },\n     expr::ExprScopes,\n     from_source::FromSource,\n-    generics::GenericDef,\n     ids::{HirFileId, MacroCallId, MacroCallLoc, MacroDefId, MacroFile},\n     source_binder::{PathResolution, ScopeEntryWithSyntax, SourceAnalyzer},\n     ty::{"}, {"sha": "95b8df18105de35e6d8574c10c76aa4508245308", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0630bbabfc19126be5fa47933c5ea03d48030582/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0630bbabfc19126be5fa47933c5ea03d48030582/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=0630bbabfc19126be5fa47933c5ea03d48030582", "patch": "@@ -17,12 +17,11 @@ use std::ops::Deref;\n use std::sync::Arc;\n use std::{fmt, iter, mem};\n \n+use hir_def::{generics::GenericParams, AdtId};\n+\n use crate::{\n-    db::HirDatabase,\n-    expr::ExprId,\n-    generics::{GenericParams, HasGenericParams},\n-    util::make_mut_slice,\n-    Adt, Crate, DefWithBody, FloatTy, IntTy, Mutability, Name, Trait, TypeAlias, Uncertain,\n+    db::HirDatabase, expr::ExprId, util::make_mut_slice, Adt, Crate, DefWithBody, FloatTy,\n+    GenericDef, IntTy, Mutability, Name, Trait, TypeAlias, Uncertain,\n };\n use display::{HirDisplay, HirFormatter};\n \n@@ -131,15 +130,15 @@ impl TypeCtor {\n             | TypeCtor::Closure { .. } // 1 param representing the signature of the closure\n             => 1,\n             TypeCtor::Adt(adt) => {\n-                let generic_params = adt.generic_params(db);\n+                let generic_params = db.generic_params(AdtId::from(adt).into());\n                 generic_params.count_params_including_parent()\n             }\n             TypeCtor::FnDef(callable) => {\n-                let generic_params = callable.generic_params(db);\n+                let generic_params = db.generic_params(callable.into());\n                 generic_params.count_params_including_parent()\n             }\n             TypeCtor::AssociatedType(type_alias) => {\n-                let generic_params = type_alias.generic_params(db);\n+                let generic_params = db.generic_params(type_alias.id.into());\n                 generic_params.count_params_including_parent()\n             }\n             TypeCtor::FnPtr { num_args } => num_args as usize + 1,\n@@ -168,7 +167,7 @@ impl TypeCtor {\n         }\n     }\n \n-    pub fn as_generic_def(self) -> Option<crate::generics::GenericDef> {\n+    pub fn as_generic_def(self) -> Option<crate::GenericDef> {\n         match self {\n             TypeCtor::Bool\n             | TypeCtor::Char\n@@ -348,8 +347,9 @@ impl Substs {\n         )\n     }\n \n-    pub fn build_for_def(db: &impl HirDatabase, def: impl HasGenericParams) -> SubstsBuilder {\n-        let params = def.generic_params(db);\n+    pub fn build_for_def(db: &impl HirDatabase, def: impl Into<GenericDef>) -> SubstsBuilder {\n+        let def = def.into();\n+        let params = db.generic_params(def.into());\n         let param_count = params.count_params_including_parent();\n         Substs::builder(param_count)\n     }"}, {"sha": "b60e4bb311904cc51ce78dfdb99157f66066043a", "filename": "crates/ra_hir/src/ty/autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0630bbabfc19126be5fa47933c5ea03d48030582/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0630bbabfc19126be5fa47933c5ea03d48030582/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fautoderef.rs?ref=0630bbabfc19126be5fa47933c5ea03d48030582", "patch": "@@ -10,7 +10,7 @@ use hir_expand::name;\n use log::{info, warn};\n \n use super::{traits::Solution, Canonical, Substs, Ty, TypeWalk};\n-use crate::{db::HirDatabase, generics::HasGenericParams};\n+use crate::db::HirDatabase;\n \n const AUTODEREF_RECURSION_LIMIT: usize = 10;\n \n@@ -46,7 +46,7 @@ fn deref_by_trait(\n     };\n     let target = deref_trait.associated_type_by_name(db, &name::TARGET_TYPE)?;\n \n-    let generic_params = target.generic_params(db);\n+    let generic_params = db.generic_params(target.id.into());\n     if generic_params.count_params_including_parent() != 1 {\n         // the Target type + Deref trait should only have one generic parameter,\n         // namely Deref's Self type"}, {"sha": "20a7e93525e1f07981be320dd17d8d69ca2cd5cc", "filename": "crates/ra_hir/src/ty/infer/expr.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0630bbabfc19126be5fa47933c5ea03d48030582/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0630bbabfc19126be5fa47933c5ea03d48030582/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs?ref=0630bbabfc19126be5fa47933c5ea03d48030582", "patch": "@@ -5,6 +5,7 @@ use std::sync::Arc;\n \n use hir_def::{\n     builtin_type::Signedness,\n+    generics::GenericParams,\n     path::{GenericArg, GenericArgs},\n     resolver::resolver_for_expr,\n };\n@@ -13,7 +14,6 @@ use hir_expand::name;\n use crate::{\n     db::HirDatabase,\n     expr::{Array, BinaryOp, Expr, ExprId, Literal, Statement, UnaryOp},\n-    generics::{GenericParams, HasGenericParams},\n     ty::{\n         autoderef, method_resolution, op, CallableDef, InferTy, IntTy, Mutability, Namespace,\n         Obligation, ProjectionPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor, TypeWalk,\n@@ -534,7 +534,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 (\n                     ty,\n                     self.db.type_for_def(func.into(), Namespace::Values),\n-                    Some(func.generic_params(self.db)),\n+                    Some(self.db.generic_params(func.id.into())),\n                 )\n             }\n             None => (receiver_ty, Ty::Unknown, None),\n@@ -645,7 +645,9 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                         if let Some(trait_) = f.parent_trait(self.db) {\n                             // construct a TraitDef\n                             let substs = a_ty.parameters.prefix(\n-                                trait_.generic_params(self.db).count_params_including_parent(),\n+                                self.db\n+                                    .generic_params(trait_.id.into())\n+                                    .count_params_including_parent(),\n                             );\n                             self.obligations.push(Obligation::Trait(TraitRef { trait_, substs }));\n                         }"}, {"sha": "ee54d8217380324b25a4fcf3e37e06d7fb9c94fc", "filename": "crates/ra_hir/src/ty/infer/path.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0630bbabfc19126be5fa47933c5ea03d48030582/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0630bbabfc19126be5fa47933c5ea03d48030582/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs?ref=0630bbabfc19126be5fa47933c5ea03d48030582", "patch": "@@ -7,7 +7,6 @@ use hir_def::{\n \n use crate::{\n     db::HirDatabase,\n-    generics::HasGenericParams,\n     ty::{method_resolution, Namespace, Substs, Ty, TypableDef, TypeWalk},\n     AssocItem, Container, Function, Name, Path,\n };\n@@ -230,7 +229,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         if let ValueNs::FunctionId(func) = def {\n             let func = Function::from(*func);\n             // We only do the infer if parent has generic params\n-            let gen = func.generic_params(self.db);\n+            let gen = self.db.generic_params(func.id.into());\n             if gen.count_parent_params() == 0 {\n                 return None;\n             }"}, {"sha": "75c55256929a84f6831427628067030ca841e0c5", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0630bbabfc19126be5fa47933c5ea03d48030582/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0630bbabfc19126be5fa47933c5ea03d48030582/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=0630bbabfc19126be5fa47933c5ea03d48030582", "patch": "@@ -10,10 +10,11 @@ use std::sync::Arc;\n \n use hir_def::{\n     builtin_type::{BuiltinFloat, BuiltinInt, BuiltinType},\n+    generics::WherePredicate,\n     path::{GenericArg, PathSegment},\n     resolver::{HasResolver, Resolver, TypeNs},\n     type_ref::{TypeBound, TypeRef},\n-    GenericDefId,\n+    AdtId, GenericDefId,\n };\n \n use super::{\n@@ -22,15 +23,13 @@ use super::{\n };\n use crate::{\n     db::HirDatabase,\n-    generics::HasGenericParams,\n-    generics::{GenericDef, WherePredicate},\n     ty::{\n         primitive::{FloatTy, IntTy, Uncertain},\n         Adt,\n     },\n     util::make_mut_slice,\n-    Const, Enum, EnumVariant, Function, ImplBlock, ModuleDef, Path, Static, Struct, StructField,\n-    Trait, TypeAlias, Union, VariantDef,\n+    Const, Enum, EnumVariant, Function, GenericDef, ImplBlock, ModuleDef, Path, Static, Struct,\n+    StructField, Trait, TypeAlias, Union, VariantDef,\n };\n \n // FIXME: this is only really used in `type_for_def`, which contains a bunch of\n@@ -342,7 +341,7 @@ pub(super) fn substs_from_path_segment(\n     add_self_param: bool,\n ) -> Substs {\n     let mut substs = Vec::new();\n-    let def_generics = def_generic.map(|def| def.generic_params(db));\n+    let def_generics = def_generic.map(|def| db.generic_params(def.into()));\n \n     let (parent_param_count, param_count) =\n         def_generics.map_or((0, 0), |g| (g.count_parent_params(), g.params.len()));\n@@ -443,7 +442,7 @@ impl TraitRef {\n     }\n \n     pub(crate) fn for_trait(db: &impl HirDatabase, trait_: Trait) -> TraitRef {\n-        let substs = Substs::identity(&trait_.generic_params(db));\n+        let substs = Substs::identity(&db.generic_params(trait_.id.into()));\n         TraitRef { trait_, substs }\n     }\n \n@@ -611,7 +610,7 @@ pub(crate) fn generic_predicates_query(\n /// Resolve the default type params from generics\n pub(crate) fn generic_defaults_query(db: &impl HirDatabase, def: GenericDef) -> Substs {\n     let resolver = GenericDefId::from(def).resolver(db);\n-    let generic_params = def.generic_params(db);\n+    let generic_params = db.generic_params(def.into());\n \n     let defaults = generic_params\n         .params_including_parent()\n@@ -633,7 +632,7 @@ fn fn_sig_for_fn(db: &impl HirDatabase, def: Function) -> FnSig {\n /// Build the declared type of a function. This should not need to look at the\n /// function body.\n fn type_for_fn(db: &impl HirDatabase, def: Function) -> Ty {\n-    let generics = def.generic_params(db);\n+    let generics = db.generic_params(def.id.into());\n     let substs = Substs::identity(&generics);\n     Ty::apply(TypeCtor::FnDef(def.into()), substs)\n }\n@@ -716,7 +715,7 @@ fn type_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> Ty {\n     if struct_data.variant_data.fields().is_none() {\n         return type_for_adt(db, def); // Unit struct\n     }\n-    let generics = def.generic_params(db);\n+    let generics = db.generic_params(def.id.into());\n     let substs = Substs::identity(&generics);\n     Ty::apply(TypeCtor::FnDef(def.into()), substs)\n }\n@@ -732,7 +731,7 @@ fn fn_sig_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariant)\n         .iter()\n         .map(|(_, field)| Ty::from_hir(db, &resolver, &field.type_ref))\n         .collect::<Vec<_>>();\n-    let generics = def.parent_enum(db).generic_params(db);\n+    let generics = db.generic_params(def.parent_enum(db).id.into());\n     let substs = Substs::identity(&generics);\n     let ret = type_for_adt(db, def.parent_enum(db)).subst(&substs);\n     FnSig::from_params_and_return(params, ret)\n@@ -744,18 +743,20 @@ fn type_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariant) ->\n     if var_data.fields().is_none() {\n         return type_for_adt(db, def.parent_enum(db)); // Unit variant\n     }\n-    let generics = def.parent_enum(db).generic_params(db);\n+    let generics = db.generic_params(def.parent_enum(db).id.into());\n     let substs = Substs::identity(&generics);\n     Ty::apply(TypeCtor::FnDef(def.into()), substs)\n }\n \n-fn type_for_adt(db: &impl HirDatabase, adt: impl Into<Adt> + HasGenericParams) -> Ty {\n-    let generics = adt.generic_params(db);\n-    Ty::apply(TypeCtor::Adt(adt.into()), Substs::identity(&generics))\n+fn type_for_adt(db: &impl HirDatabase, adt: impl Into<Adt>) -> Ty {\n+    let adt = adt.into();\n+    let adt_id: AdtId = adt.into();\n+    let generics = db.generic_params(adt_id.into());\n+    Ty::apply(TypeCtor::Adt(adt), Substs::identity(&generics))\n }\n \n fn type_for_type_alias(db: &impl HirDatabase, t: TypeAlias) -> Ty {\n-    let generics = t.generic_params(db);\n+    let generics = db.generic_params(t.id.into());\n     let resolver = t.id.resolver(db);\n     let type_ref = t.type_ref(db);\n     let substs = Substs::identity(&generics);"}, {"sha": "88785f3050322535ce71721dd54bb324e4ab99ec", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0630bbabfc19126be5fa47933c5ea03d48030582/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0630bbabfc19126be5fa47933c5ea03d48030582/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=0630bbabfc19126be5fa47933c5ea03d48030582", "patch": "@@ -16,10 +16,9 @@ use ra_db::salsa::{InternId, InternKey};\n use super::{AssocTyValue, Canonical, ChalkContext, Impl, Obligation};\n use crate::{\n     db::HirDatabase,\n-    generics::{GenericDef, HasGenericParams},\n     ty::display::HirDisplay,\n     ty::{ApplicationTy, GenericPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor, TypeWalk},\n-    Crate, HasBody, ImplBlock, Trait, TypeAlias,\n+    Crate, GenericDef, HasBody, ImplBlock, Trait, TypeAlias,\n };\n \n /// This represents a trait whose name we could not resolve.\n@@ -509,7 +508,7 @@ pub(crate) fn associated_ty_data_query(\n         Some(crate::Container::Trait(t)) => t,\n         _ => panic!(\"associated type not in trait\"),\n     };\n-    let generic_params = type_alias.generic_params(db);\n+    let generic_params = db.generic_params(type_alias.id.into());\n     let bound_data = chalk_rust_ir::AssociatedTyDatumBound {\n         // FIXME add bounds and where clauses\n         bounds: vec![],\n@@ -550,7 +549,7 @@ pub(crate) fn trait_datum_query(\n     }\n     let trait_: Trait = from_chalk(db, trait_id);\n     debug!(\"trait {:?} = {:?}\", trait_id, trait_.name(db));\n-    let generic_params = trait_.generic_params(db);\n+    let generic_params = db.generic_params(trait_.id.into());\n     let bound_vars = Substs::bound_vars(&generic_params);\n     let flags = chalk_rust_ir::TraitFlags {\n         auto: trait_.is_auto(db),\n@@ -594,7 +593,7 @@ pub(crate) fn struct_datum_query(\n     let where_clauses = type_ctor\n         .as_generic_def()\n         .map(|generic_def| {\n-            let generic_params = generic_def.generic_params(db);\n+            let generic_params = db.generic_params(generic_def.into());\n             let bound_vars = Substs::bound_vars(&generic_params);\n             convert_where_clauses(db, generic_def, &bound_vars)\n         })\n@@ -634,7 +633,7 @@ fn impl_block_datum(\n     impl_id: ImplId,\n     impl_block: ImplBlock,\n ) -> Option<Arc<ImplDatum<ChalkIr>>> {\n-    let generic_params = impl_block.generic_params(db);\n+    let generic_params = db.generic_params(impl_block.id.into());\n     let bound_vars = Substs::bound_vars(&generic_params);\n     let trait_ref = impl_block.target_trait_ref(db)?.subst(&bound_vars);\n     let trait_ = trait_ref.trait_;\n@@ -786,7 +785,7 @@ fn type_alias_associated_ty_value(\n     let assoc_ty = trait_\n         .associated_type_by_name(db, &type_alias.name(db))\n         .expect(\"assoc ty value should not exist\"); // validated when building the impl data as well\n-    let generic_params = impl_block.generic_params(db);\n+    let generic_params = db.generic_params(impl_block.id.into());\n     let bound_vars = Substs::bound_vars(&generic_params);\n     let ty = db.type_for_def(type_alias.into(), crate::ty::Namespace::Types).subst(&bound_vars);\n     let value_bound = chalk_rust_ir::AssociatedTyValueBound { ty: ty.to_chalk(db) };"}, {"sha": "7b5c3ec0618267a597c44a83c52049d48dde0757", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 43, "deletions": 64, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/0630bbabfc19126be5fa47933c5ea03d48030582/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0630bbabfc19126be5fa47933c5ea03d48030582/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=0630bbabfc19126be5fa47933c5ea03d48030582", "patch": "@@ -18,7 +18,7 @@ use crate::{\n     path::{Path, PathKind},\n     AdtId, AstItemDef, ConstId, ContainerId, CrateModuleId, DefWithBodyId, EnumId, EnumVariantId,\n     FunctionId, GenericDefId, ImplId, Lookup, ModuleDefId, ModuleId, StaticId, StructId, TraitId,\n-    TypeAliasId, UnionId,\n+    TypeAliasId,\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -369,47 +369,6 @@ impl Resolver {\n     }\n }\n \n-impl Resolver {\n-    pub(crate) fn push_scope(mut self, scope: Scope) -> Resolver {\n-        self.scopes.push(scope);\n-        self\n-    }\n-\n-    pub(crate) fn push_generic_params_scope(\n-        self,\n-        db: &impl DefDatabase2,\n-        def: GenericDefId,\n-    ) -> Resolver {\n-        let params = db.generic_params(def);\n-        if params.params.is_empty() {\n-            self\n-        } else {\n-            self.push_scope(Scope::GenericParams { def, params })\n-        }\n-    }\n-\n-    pub(crate) fn push_impl_block_scope(self, impl_block: ImplId) -> Resolver {\n-        self.push_scope(Scope::ImplBlockScope(impl_block))\n-    }\n-\n-    pub(crate) fn push_module_scope(\n-        self,\n-        crate_def_map: Arc<CrateDefMap>,\n-        module_id: CrateModuleId,\n-    ) -> Resolver {\n-        self.push_scope(Scope::ModuleScope(ModuleItemMap { crate_def_map, module_id }))\n-    }\n-\n-    pub(crate) fn push_expr_scope(\n-        self,\n-        owner: DefWithBodyId,\n-        expr_scopes: Arc<ExprScopes>,\n-        scope_id: ScopeId,\n-    ) -> Resolver {\n-        self.push_scope(Scope::ExprScope(ExprScope { owner, expr_scopes, scope_id }))\n-    }\n-}\n-\n pub enum ScopeDef {\n     PerNs(PerNs),\n     ImplSelfType(ImplId),\n@@ -489,6 +448,43 @@ pub fn resolver_for_scope(\n     r\n }\n \n+impl Resolver {\n+    fn push_scope(mut self, scope: Scope) -> Resolver {\n+        self.scopes.push(scope);\n+        self\n+    }\n+\n+    fn push_generic_params_scope(self, db: &impl DefDatabase2, def: GenericDefId) -> Resolver {\n+        let params = db.generic_params(def);\n+        if params.params.is_empty() {\n+            self\n+        } else {\n+            self.push_scope(Scope::GenericParams { def, params })\n+        }\n+    }\n+\n+    fn push_impl_block_scope(self, impl_block: ImplId) -> Resolver {\n+        self.push_scope(Scope::ImplBlockScope(impl_block))\n+    }\n+\n+    fn push_module_scope(\n+        self,\n+        crate_def_map: Arc<CrateDefMap>,\n+        module_id: CrateModuleId,\n+    ) -> Resolver {\n+        self.push_scope(Scope::ModuleScope(ModuleItemMap { crate_def_map, module_id }))\n+    }\n+\n+    fn push_expr_scope(\n+        self,\n+        owner: DefWithBodyId,\n+        expr_scopes: Arc<ExprScopes>,\n+        scope_id: ScopeId,\n+    ) -> Resolver {\n+        self.push_scope(Scope::ExprScope(ExprScope { owner, expr_scopes, scope_id }))\n+    }\n+}\n+\n pub trait HasResolver {\n     /// Builds a resolver for type references inside this def.\n     fn resolver(self, db: &impl DefDatabase2) -> Resolver;\n@@ -507,36 +503,19 @@ impl HasResolver for TraitId {\n     }\n }\n \n-impl HasResolver for AdtId {\n+impl<T: Into<AdtId>> HasResolver for T {\n     fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n-        let module = match self {\n+        let def = self.into();\n+        let module = match def {\n             AdtId::StructId(it) => it.0.module(db),\n             AdtId::UnionId(it) => it.0.module(db),\n             AdtId::EnumId(it) => it.module(db),\n         };\n \n         module\n             .resolver(db)\n-            .push_generic_params_scope(db, self.into())\n-            .push_scope(Scope::AdtScope(self.into()))\n-    }\n-}\n-\n-impl HasResolver for StructId {\n-    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n-        AdtId::from(self).resolver(db)\n-    }\n-}\n-\n-impl HasResolver for UnionId {\n-    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n-        AdtId::from(self).resolver(db)\n-    }\n-}\n-\n-impl HasResolver for EnumId {\n-    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n-        AdtId::from(self).resolver(db)\n+            .push_generic_params_scope(db, def.into())\n+            .push_scope(Scope::AdtScope(def))\n     }\n }\n "}]}