{"sha": "c0ffc422abaf6a55ebcd8da59c12f05834219caa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZmZjNDIyYWJhZjZhNTVlYmNkOGRhNTljMTJmMDU4MzQyMTljYWE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-03-23T12:06:35Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-04-10T15:56:44Z"}, "message": "Print message when reaching trap", "tree": {"sha": "28eb7feaa0bdff4fe16abcadec78cbafab138049", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28eb7feaa0bdff4fe16abcadec78cbafab138049"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0ffc422abaf6a55ebcd8da59c12f05834219caa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0ffc422abaf6a55ebcd8da59c12f05834219caa", "html_url": "https://github.com/rust-lang/rust/commit/c0ffc422abaf6a55ebcd8da59c12f05834219caa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0ffc422abaf6a55ebcd8da59c12f05834219caa/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "970d164089f0cc2dc90dafeb3eedb681d505dc81", "url": "https://api.github.com/repos/rust-lang/rust/commits/970d164089f0cc2dc90dafeb3eedb681d505dc81", "html_url": "https://github.com/rust-lang/rust/commit/970d164089f0cc2dc90dafeb3eedb681d505dc81"}], "stats": {"total": 100, "additions": 78, "deletions": 22}, "files": [{"sha": "531e4f063af31e113ad02a86d56bfdf787e8f5c1", "filename": "src/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0ffc422abaf6a55ebcd8da59c12f05834219caa/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ffc422abaf6a55ebcd8da59c12f05834219caa/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=c0ffc422abaf6a55ebcd8da59c12f05834219caa", "patch": "@@ -590,7 +590,7 @@ pub fn codegen_terminator_call<'a, 'tcx: 'a>(\n         let ret_ebb = fx.get_ebb(dest);\n         fx.bcx.ins().jump(ret_ebb, &[]);\n     } else {\n-        trap_unreachable(&mut fx.bcx);\n+        trap_unreachable(fx, \"[corruption] Diverging function returned\");\n     }\n }\n "}, {"sha": "3f9fef329c3a86283cc7b3f03b4c9844bacbc5db", "filename": "src/base.rs", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c0ffc422abaf6a55ebcd8da59c12f05834219caa/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ffc422abaf6a55ebcd8da59c12f05834219caa/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=c0ffc422abaf6a55ebcd8da59c12f05834219caa", "patch": "@@ -108,9 +108,28 @@ fn trans_fn<'a, 'clif, 'tcx: 'a, B: Backend + 'static>(\n             let start_ebb = bcx.create_ebb();\n             bcx.append_ebb_params_for_function_params(start_ebb);\n             bcx.switch_to_block(start_ebb);\n-            crate::trap::trap_unreachable(&mut bcx);\n-            bcx.seal_all_blocks();\n-            bcx.finalize();\n+\n+            let mut fx = FunctionCx {\n+                tcx,\n+                module: cx.module,\n+                pointer_type: pointer_ty(tcx),\n+\n+                instance,\n+                mir,\n+\n+                bcx,\n+                ebb_map: HashMap::new(),\n+                local_map: HashMap::new(),\n+\n+                clif_comments: crate::pretty_clif::CommentWriter::new(tcx, instance),\n+                constants: &mut cx.ccx,\n+                caches: &mut cx.caches,\n+                source_info_set: indexmap::IndexSet::new(),\n+            };\n+\n+            crate::trap::trap_unreachable(&mut fx, \"[unimplemented] Called function with u128 or i128 as argument.\");\n+            fx.bcx.seal_all_blocks();\n+            fx.bcx.finalize();\n \n             // Step 2b3. Define function\n             cx.caches.context.func = func;\n@@ -254,7 +273,7 @@ fn codegen_fn_content<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>)\n             TerminatorKind::Assert {\n                 cond,\n                 expected,\n-                msg: _,\n+                msg,\n                 target,\n                 cleanup: _,\n             } => {\n@@ -267,7 +286,7 @@ fn codegen_fn_content<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>)\n                 } else {\n                     fx.bcx.ins().brz(cond, target, &[]);\n                 };\n-                trap_panic(&mut fx.bcx);\n+                trap_panic(fx, format!(\"[panic] Assert {:?} failed.\", msg));\n             }\n \n             TerminatorKind::SwitchInt {\n@@ -294,8 +313,11 @@ fn codegen_fn_content<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>)\n             } => {\n                 crate::abi::codegen_terminator_call(fx, func, args, destination);\n             }\n-            TerminatorKind::Resume | TerminatorKind::Abort | TerminatorKind::Unreachable => {\n-                trap_unreachable(&mut fx.bcx);\n+            TerminatorKind::Resume | TerminatorKind::Abort => {\n+                trap_unreachable(fx, \"[corruption] Unwinding bb reached.\");\n+            }\n+            TerminatorKind::Unreachable => {\n+                trap_unreachable(fx, \"[corruption] Hit unreachable code.\");\n             }\n             TerminatorKind::Yield { .. }\n             | TerminatorKind::FalseEdges { .. }\n@@ -742,7 +764,7 @@ pub fn trans_get_discriminant<'a, 'tcx: 'a>(\n     let layout = place.layout();\n \n     if layout.abi == layout::Abi::Uninhabited {\n-        return trap_unreachable_ret_value(fx, dest_layout);\n+        return trap_unreachable_ret_value(fx, dest_layout, \"[panic] Tried to get discriminant for uninhabited type.\");\n     }\n \n     let (discr_scalar, discr_kind) = match &layout.variants {"}, {"sha": "738349275b8fe7530b7d7a2782d8590ed1292b86", "filename": "src/constant.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0ffc422abaf6a55ebcd8da59c12f05834219caa/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ffc422abaf6a55ebcd8da59c12f05834219caa/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=c0ffc422abaf6a55ebcd8da59c12f05834219caa", "patch": "@@ -69,7 +69,13 @@ pub fn trans_promoted<'a, 'tcx: 'a>(\n             debug_assert_eq!(cplace.layout(), fx.layout_of(dest_ty));\n             cplace\n         }\n-        Err(_) => crate::trap::trap_unreachable_ret_place(fx, fx.layout_of(dest_ty)),\n+        Err(_) => {\n+            crate::trap::trap_unreachable_ret_place(\n+                fx,\n+                fx.layout_of(dest_ty),\n+                \"[panic] Tried to get value of promoted value with errored during const eval.\",\n+            )\n+        }\n     }\n }\n "}, {"sha": "22a527f0ab3542bc53b4a43fa4e885eaaea05e75", "filename": "src/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0ffc422abaf6a55ebcd8da59c12f05834219caa/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ffc422abaf6a55ebcd8da59c12f05834219caa/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=c0ffc422abaf6a55ebcd8da59c12f05834219caa", "patch": "@@ -103,10 +103,10 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             // Insert non returning intrinsics here\n             match intrinsic {\n                 \"abort\" => {\n-                    trap_panic(&mut fx.bcx);\n+                    trap_panic(fx, \"Called intrinisc::abort.\");\n                 }\n                 \"unreachable\" => {\n-                    trap_unreachable(&mut fx.bcx);\n+                    trap_unreachable(fx, \"[corruption] Called intrinsic::unreachable.\");\n                 }\n                 _ => unimplemented!(\"unsupported instrinsic {}\", intrinsic),\n             }\n@@ -339,7 +339,7 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n         };\n         init, () {\n             if ret.layout().abi == Abi::Uninhabited {\n-                crate::trap::trap_panic(&mut fx.bcx);\n+                crate::trap::trap_panic(fx, \"[panic] Called intrinsic::init for uninhabited type.\");\n                 return;\n             }\n \n@@ -377,7 +377,7 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n         };\n         uninit, <T> () {\n             if ret.layout().abi == Abi::Uninhabited {\n-                crate::trap::trap_panic(&mut fx.bcx);\n+                crate::trap::trap_panic(fx, \"[panic] Called intrinsic::uninit for uninhabited type.\");\n                 return;\n             }\n \n@@ -412,7 +412,7 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n         };\n         panic_if_uninhabited, <T> () {\n             if fx.layout_of(T).abi.is_uninhabited() {\n-                crate::trap::trap_panic(&mut fx.bcx);\n+                crate::trap::trap_panic(fx, \"[panic] Called intrinsic::panic_if_uninhabited for uninhabited type.\");\n                 return;\n             }\n         };\n@@ -492,6 +492,6 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n         let ret_ebb = fx.get_ebb(dest);\n         fx.bcx.ins().jump(ret_ebb, &[]);\n     } else {\n-        trap_unreachable(&mut fx.bcx);\n+        trap_unreachable(fx, \"[corruption] Diverging intrinsic returned.\");\n     }\n }"}, {"sha": "f492bcf4b1ebd1d86d93d79a2427c1f0ef3e19fc", "filename": "src/trap.rs", "status": "modified", "additions": 34, "deletions": 6, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c0ffc422abaf6a55ebcd8da59c12f05834219caa/src%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0ffc422abaf6a55ebcd8da59c12f05834219caa/src%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftrap.rs?ref=c0ffc422abaf6a55ebcd8da59c12f05834219caa", "patch": "@@ -1,23 +1,51 @@\n use crate::prelude::*;\n \n+fn codegen_print(fx: &mut FunctionCx<'_, '_, impl cranelift_module::Backend>, msg: &str) {\n+    let puts = fx.module.declare_function(\"puts\", Linkage::Import, &Signature {\n+        call_conv: CallConv::SystemV,\n+        params: vec![AbiParam::new(pointer_ty(fx.tcx))],\n+        returns: vec![],\n+    }).unwrap();\n+    let puts = fx.module.declare_func_in_func(puts, &mut fx.bcx.func);\n+\n+    let symbol_name = fx.tcx.symbol_name(fx.instance);\n+    let msg_bytes = format!(\"trap at {:?} ({}): {}\\0\", fx.instance, symbol_name, msg).into_bytes().into_boxed_slice();\n+    let mut data_ctx = DataContext::new();\n+    data_ctx.define(msg_bytes);\n+    let msg_id = fx.module.declare_data(&(symbol_name.as_str().to_string() + msg), Linkage::Local, false).unwrap();\n+\n+    // Ignore DuplicateDefinition error, as the data will be the same\n+    let _ = fx.module.define_data(msg_id, &data_ctx);\n+\n+    let local_msg_id = fx.module.declare_data_in_func(msg_id, fx.bcx.func);\n+    let msg_ptr = fx.bcx.ins().global_value(pointer_ty(fx.tcx), local_msg_id);\n+    fx.bcx.ins().call(puts, &[msg_ptr]);\n+}\n+\n /// Trap code: user0\n-pub fn trap_panic(bcx: &mut FunctionBuilder) {\n-    bcx.ins().trap(TrapCode::User(0));\n+pub fn trap_panic(fx: &mut FunctionCx<'_, '_, impl cranelift_module::Backend>, msg: impl AsRef<str>) {\n+    codegen_print(fx, msg.as_ref());\n+    fx.bcx.ins().trap(TrapCode::User(0));\n }\n \n /// Trap code: user65535\n-pub fn trap_unreachable(bcx: &mut FunctionBuilder) {\n-    bcx.ins().trap(TrapCode::User(!0));\n+pub fn trap_unreachable(fx: &mut FunctionCx<'_, '_, impl cranelift_module::Backend>, msg: impl AsRef<str>) {\n+    codegen_print(fx, msg.as_ref());\n+    fx.bcx.ins().trap(TrapCode::User(!0));\n }\n \n-pub fn trap_unreachable_ret_value<'tcx>(fx: &mut FunctionCx<'_, 'tcx, impl cranelift_module::Backend>, dest_layout: TyLayout<'tcx>) -> CValue<'tcx> {\n+/// Trap code: user65535\n+pub fn trap_unreachable_ret_value<'tcx>(fx: &mut FunctionCx<'_, 'tcx, impl cranelift_module::Backend>, dest_layout: TyLayout<'tcx>, msg: impl AsRef<str>) -> CValue<'tcx> {\n+    codegen_print(fx, msg.as_ref());\n     let true_ = fx.bcx.ins().iconst(types::I32, 1);\n     fx.bcx.ins().trapnz(true_, TrapCode::User(!0));\n     let zero = fx.bcx.ins().iconst(fx.pointer_type, 0);\n     CValue::ByRef(zero, dest_layout)\n }\n \n-pub fn trap_unreachable_ret_place<'tcx>(fx: &mut FunctionCx<'_, 'tcx, impl cranelift_module::Backend>, dest_layout: TyLayout<'tcx>) -> CPlace<'tcx> {\n+/// Trap code: user65535\n+pub fn trap_unreachable_ret_place<'tcx>(fx: &mut FunctionCx<'_, 'tcx, impl cranelift_module::Backend>, dest_layout: TyLayout<'tcx>, msg: impl AsRef<str>) -> CPlace<'tcx> {\n+    codegen_print(fx, msg.as_ref());\n     let true_ = fx.bcx.ins().iconst(types::I32, 1);\n     fx.bcx.ins().trapnz(true_, TrapCode::User(!0));\n     let zero = fx.bcx.ins().iconst(fx.pointer_type, 0);"}]}