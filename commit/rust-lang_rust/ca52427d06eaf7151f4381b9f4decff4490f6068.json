{"sha": "ca52427d06eaf7151f4381b9f4decff4490f6068", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhNTI0MjdkMDZlYWY3MTUxZjQzODFiOWY0ZGVjZmY0NDkwZjYwNjg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-10T18:56:24Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-15T20:05:31Z"}, "message": "make `TypeRelating` take an infcx again\n\nAt some point, I had thought to use this code to handle equality\ncomparisons for the `IfEq` verify bounds; at that point, we might not\nhave had an infcx to talk about. But we wound up doing \"SCC\nrepresentatives\" instead, so that's fine.", "tree": {"sha": "b86ae270cdc2b656ed065e2689a27ee1e022e6b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b86ae270cdc2b656ed065e2689a27ee1e022e6b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca52427d06eaf7151f4381b9f4decff4490f6068", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca52427d06eaf7151f4381b9f4decff4490f6068", "html_url": "https://github.com/rust-lang/rust/commit/ca52427d06eaf7151f4381b9f4decff4490f6068", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca52427d06eaf7151f4381b9f4decff4490f6068/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24bee005b646692b265af026cf863acf9a322460", "url": "https://api.github.com/repos/rust-lang/rust/commits/24bee005b646692b265af026cf863acf9a322460", "html_url": "https://github.com/rust-lang/rust/commit/24bee005b646692b265af026cf863acf9a322460"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "d4e047673d888142806377280f6cbb1f3ab21093", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ca52427d06eaf7151f4381b9f4decff4490f6068/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca52427d06eaf7151f4381b9f4decff4490f6068/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=ca52427d06eaf7151f4381b9f4decff4490f6068", "patch": "@@ -32,7 +32,7 @@ pub(super) fn sub_types<'tcx>(\n ) -> Fallible<()> {\n     debug!(\"sub_types(a={:?}, b={:?}, locations={:?})\", a, b, locations);\n     TypeRelating::new(\n-        infcx.tcx,\n+        infcx,\n         NllTypeRelatingDelegate::new(infcx, borrowck_context, locations, category),\n         ty::Variance::Covariant,\n         ty::List::empty(),\n@@ -51,7 +51,7 @@ pub(super) fn eq_types<'tcx>(\n ) -> Fallible<()> {\n     debug!(\"eq_types(a={:?}, b={:?}, locations={:?})\", a, b, locations);\n     TypeRelating::new(\n-        infcx.tcx,\n+        infcx,\n         NllTypeRelatingDelegate::new(infcx, borrowck_context, locations, category),\n         ty::Variance::Invariant,\n         ty::List::empty(),\n@@ -86,7 +86,7 @@ pub(super) fn relate_type_and_user_type<'tcx>(\n     let v1 = ty::Contravariant.xform(v);\n \n     let mut type_relating = TypeRelating::new(\n-        infcx.tcx,\n+        infcx,\n         NllTypeRelatingDelegate::new(infcx, borrowck_context, locations, category),\n         v1,\n         b_variables,\n@@ -109,7 +109,7 @@ struct TypeRelating<'me, 'gcx: 'tcx, 'tcx: 'me, D>\n where\n     D: TypeRelatingDelegate<'tcx>,\n {\n-    tcx: TyCtxt<'me, 'gcx, 'tcx>,\n+    infcx: &'me InferCtxt<'me, 'gcx, 'tcx>,\n \n     /// Callback to use when we deduce an outlives relationship\n     delegate: D,\n@@ -276,14 +276,14 @@ where\n     D: TypeRelatingDelegate<'tcx>,\n {\n     fn new(\n-        tcx: TyCtxt<'me, 'gcx, 'tcx>,\n+        infcx: &'me InferCtxt<'me, 'gcx, 'tcx>,\n         delegate: D,\n         ambient_variance: ty::Variance,\n         canonical_var_infos: CanonicalVarInfos<'tcx>,\n     ) -> Self {\n         let canonical_var_values = IndexVec::from_elem_n(None, canonical_var_infos.len());\n         Self {\n-            tcx,\n+            infcx,\n             delegate,\n             ambient_variance,\n             canonical_var_values,\n@@ -432,7 +432,7 @@ where\n \n     fn generalize_value(&mut self, kind: Kind<'tcx>) -> Kind<'tcx> {\n         TypeGeneralizer {\n-            tcx: self.tcx,\n+            tcx: self.infcx.tcx,\n             delegate: &mut self.delegate,\n             first_free_index: ty::INNERMOST,\n             ambient_variance: self.ambient_variance,\n@@ -450,7 +450,7 @@ where\n     D: TypeRelatingDelegate<'tcx>,\n {\n     fn tcx(&self) -> TyCtxt<'me, 'gcx, 'tcx> {\n-        self.tcx\n+        self.infcx.tcx\n     }\n \n     fn tag(&self) -> &'static str {"}]}