{"sha": "3e96ac1178f2350dc35b8d601d3667c6496bf801", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlOTZhYzExNzhmMjM1MGRjMzViOGQ2MDFkMzY2N2M2NDk2YmY4MDE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-07-21T10:24:55Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-07-22T19:02:44Z"}, "message": "Cleanup", "tree": {"sha": "7005498acbe0b82245e2fc1479a1cb3d593f62fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7005498acbe0b82245e2fc1479a1cb3d593f62fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e96ac1178f2350dc35b8d601d3667c6496bf801", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e96ac1178f2350dc35b8d601d3667c6496bf801", "html_url": "https://github.com/rust-lang/rust/commit/3e96ac1178f2350dc35b8d601d3667c6496bf801", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e96ac1178f2350dc35b8d601d3667c6496bf801/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bc7c03af6166ceecb2d0037e30c558f6892c7d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc7c03af6166ceecb2d0037e30c558f6892c7d3", "html_url": "https://github.com/rust-lang/rust/commit/2bc7c03af6166ceecb2d0037e30c558f6892c7d3"}], "stats": {"total": 66, "additions": 1, "deletions": 65}, "files": [{"sha": "ea25ac5c6826314174337677061a9e44f4fa6d81", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 59, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/3e96ac1178f2350dc35b8d601d3667c6496bf801/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e96ac1178f2350dc35b8d601d3667c6496bf801/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=3e96ac1178f2350dc35b8d601d3667c6496bf801", "patch": "@@ -109,13 +109,6 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n         if self.cx.crate_name != Some(\"core\".to_string()) {\n             if let ty::TyAdt(_adt, _) = ty.sty {\n                 let param_env = self.cx.tcx.param_env(def_id);\n-                /*let print = match _adt.adt_kind() {\n-                    AdtKind::Struct => {\n-                        //println!(\"|||||> {}\", self.cx.tcx.item_name(def_id).to_string());\n-                        true\n-                    }\n-                    _ => false,\n-                };*/\n                 for &trait_def_id in self.cx.all_traits.iter() {\n                     if traits.get(&trait_def_id).is_some() ||\n                        !self.cx.access_levels.borrow().is_doc_reachable(trait_def_id) {\n@@ -125,22 +118,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                     self.cx.tcx.for_each_relevant_impl(trait_def_id, ty, |impl_def_id| {\n                         self.cx.tcx.infer_ctxt().enter(|infcx| {\n                             let generics = infcx.tcx.generics_of(impl_def_id);\n-\n-                            /*if generics.count() == 0 {\n-                                return;\n-                            }*/\n                             let trait_ref = infcx.tcx.impl_trait_ref(impl_def_id).unwrap();\n-                            /*if !trait_ref.substs.iter().any(|x| match x.unpack() {\n-                                ::rustc::ty::subst::UnpackedKind::Type(ref t) => {\n-                                    match t.sty {\n-                                        ::rustc::ty::TypeVariants::TyParam(_) => true,\n-                                        _ => false,\n-                                    }\n-                                }\n-                                _ => false,\n-                            }) {\n-                                return;\n-                            }*/\n \n                             if !match infcx.tcx.type_of(impl_def_id).sty {\n                                 ::rustc::ty::TypeVariants::TyParam(_) => true,\n@@ -169,22 +147,8 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                                     param_env,\n                                     trait_ref.to_predicate(),\n                                 ));\n-                                /*if print {\n-                                    println!(\"==> {}\", infcx.tcx.item_name(trait_def_id).to_string());\n-                                }*/\n                                 if may_apply {\n-                                    // FIXME: add crate's id before the name to avoid removing a\n-                                    // trait which doesn't exist.\n                                     if traits.get(&trait_def_id).is_none() {\n-                                        if self.cx.crate_name == Some(\"std\".to_string()) {\n-                                            println!(\"visibility: ({} {}) [{} {:?}] [{} {:?}]\",\n-                                                     self.cx.tcx.item_name(def_id).to_string(), t_name,\n-                                                     impl_def_id.krate, impl_def_id.index,\n-                                                     trait_def_id.krate, trait_def_id.index);\n-                                            println!(\"{:?}\", infcx.tcx.visibility(impl_def_id));\n-                                            println!(\"{:?}\", infcx.tcx.visibility(trait_def_id));\n-                                        }\n-\n                                         let trait_ = hir::TraitRef {\n                                             path: get_path_for_type(infcx.tcx, trait_def_id, hir::def::Def::Trait),\n                                             ref_id: ast::DUMMY_NODE_ID,\n@@ -213,27 +177,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                                                 synthetic: true,\n                                             }),\n                                         });\n-\n-                                        /*use ::clean::{self, inline::*};\n-\n-                                        let mut ret = Vec::with_capacity(2);\n-                                        record_extern_fqn(self.cx, trait_def_id, clean::TypeKind::Trait);\n-                                        ret.extend(build_impls(self.cx, trait_def_id, false));\n-                                        let inner = clean::TraitItem(build_external_trait(self.cx, trait_def_id));\n-                                        let cx = self.cx;\n-                                        ret.push(clean::Item {\n-                                            source: infcx.tcx.def_span(trait_def_id).clean(cx),\n-                                            name: Some(infcx.tcx.item_name(trait_def_id).to_string()),\n-                                            attrs: load_attrs(cx, trait_def_id),\n-                                            inner,\n-                                            visibility: Some(clean::Public),\n-                                            stability: cx.tcx.lookup_stability(trait_def_id).clean(cx),\n-                                            deprecation: cx.tcx.lookup_deprecation(trait_def_id).clean(cx),\n-                                            def_id: trait_def_id,\n-                                        });\n-                                        traits.insert(trait_def_id, ret);*/\n                                     }\n-                                    //println!(\"=> {}\", infcx.tcx.item_name(trait_def_id).to_string());\n                                 }\n                                 debug!(\"{:?} => {}\", trait_ref, may_apply);\n                             }\n@@ -242,8 +186,6 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                 }\n             }\n         }\n-        //let res = self.cx.tcx.trait_impls_of(def_id);\n-        //println!(\"=> {:?} {:?}\", res.blanket_impls.len(), res.non_blanket_impls.len());\n \n         debug!(\n             \"get_auto_trait_impls(def_id={:?}, def_ctor=..., generics={:?}\",\n@@ -267,7 +209,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                 def_ctor,\n                 tcx.require_lang_item(lang_items::SyncTraitLangItem),\n             ).into_iter())\n-            .chain(traits.into_iter().map(|(_, v)| v))//.flat_map(|(_, v)| v.into_iter()))\n+            .chain(traits.into_iter().map(|(_, v)| v))\n             .collect();\n \n         debug!("}, {"sha": "214f2da212eefb1a0660852667382d6b077964f5", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e96ac1178f2350dc35b8d601d3667c6496bf801/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e96ac1178f2350dc35b8d601d3667c6496bf801/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=3e96ac1178f2350dc35b8d601d3667c6496bf801", "patch": "@@ -3585,12 +3585,6 @@ fn render_assoc_items(w: &mut fmt::Formatter,\n         None => return Ok(()),\n     };\n     let (non_trait, traits): (Vec<_>, _) = v.iter().partition(|i| {\n-        /*if let Some(ref t) = i.inner_impl().trait_ {\n-            println!(\"++++++> {:?}\", t);\n-        }*/\n-        /*if i.inner_impl().trait_.is_some() {\n-            println!(\"++++++> {:?}\", i.name);\n-        }*/\n         i.inner_impl().trait_.is_none()\n     });\n     if !non_trait.is_empty() {"}]}