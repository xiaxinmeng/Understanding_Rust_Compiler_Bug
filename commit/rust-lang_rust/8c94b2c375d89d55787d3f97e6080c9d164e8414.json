{"sha": "8c94b2c375d89d55787d3f97e6080c9d164e8414", "node_id": "C_kwDOAAsO6NoAKDhjOTRiMmMzNzVkODlkNTU3ODdkM2Y5N2U2MDgwYzlkMTY0ZTg0MTQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-09T04:08:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-09T04:08:33Z"}, "message": "Rollup merge of #91634 - terrarier2111:fix-recover-from-variant-ice, r=nagisa\n\nDo not attempt to suggest help for overly malformed struct/function call\n\nThis fixes: https://github.com/rust-lang/rust/issues/91461", "tree": {"sha": "7fbeaba9a727e9cb3b168b4818622cf7b99949fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fbeaba9a727e9cb3b168b4818622cf7b99949fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c94b2c375d89d55787d3f97e6080c9d164e8414", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhsYFCCRBK7hj4Ov3rIwAAV7oIADRSahNmbzRwvr/b33hihDiS\n6Db+RWCwHjiBwtGyWDbmWkbSJCB9oU9H4mPexiJNMXRM6r77v3zbDLpnEGW0wH/N\nrJ/gXS4MzoWtAuIVhjyH7iWJyv6+oEV/bkGBWfFKlx1/t+aNzMNGjaqdDYEB5Mf1\nOVi1LaVpngRDG3Q9t8CRiJpCsib9pi5cFREYkBQYpq3aVRbcdc5UfDuTRDIWC6dZ\n5Hv3cR/GQ8qO1c3iKRdYWrdIyhfouoz1kHEIn0BKmeFvg6bETBgKWxKPnHO99srB\niLSjHZ+DzZBm+aj1w+BvLJCPqChNStNESi+C4O5kfS2HhaLzHM8fDDnxo9fPIl8=\n=9sHw\n-----END PGP SIGNATURE-----\n", "payload": "tree 7fbeaba9a727e9cb3b168b4818622cf7b99949fc\nparent 876f9ffde6f14f34e9d1d3a60540e688558d7780\nparent b4c4bc09dde2a6f6ce2978e00fb57b083ea4accc\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639022913 +0100\ncommitter GitHub <noreply@github.com> 1639022913 +0100\n\nRollup merge of #91634 - terrarier2111:fix-recover-from-variant-ice, r=nagisa\n\nDo not attempt to suggest help for overly malformed struct/function call\n\nThis fixes: https://github.com/rust-lang/rust/issues/91461\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c94b2c375d89d55787d3f97e6080c9d164e8414", "html_url": "https://github.com/rust-lang/rust/commit/8c94b2c375d89d55787d3f97e6080c9d164e8414", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c94b2c375d89d55787d3f97e6080c9d164e8414/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "876f9ffde6f14f34e9d1d3a60540e688558d7780", "url": "https://api.github.com/repos/rust-lang/rust/commits/876f9ffde6f14f34e9d1d3a60540e688558d7780", "html_url": "https://github.com/rust-lang/rust/commit/876f9ffde6f14f34e9d1d3a60540e688558d7780"}, {"sha": "b4c4bc09dde2a6f6ce2978e00fb57b083ea4accc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4c4bc09dde2a6f6ce2978e00fb57b083ea4accc", "html_url": "https://github.com/rust-lang/rust/commit/b4c4bc09dde2a6f6ce2978e00fb57b083ea4accc"}], "stats": {"total": 84, "additions": 64, "deletions": 20}, "files": [{"sha": "0f8c0e1b8cff85c36fabc3678c1c4c90bcf66273", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 27, "deletions": 20, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8c94b2c375d89d55787d3f97e6080c9d164e8414/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c94b2c375d89d55787d3f97e6080c9d164e8414/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=8c94b2c375d89d55787d3f97e6080c9d164e8414", "patch": "@@ -1100,30 +1100,37 @@ impl<'a> Parser<'a> {\n                 snapshot.bump(); // `(`\n                 match snapshot.parse_struct_fields(path, false, token::Paren) {\n                     Ok((fields, ..)) if snapshot.eat(&token::CloseDelim(token::Paren)) => {\n-                        // We have are certain we have `Enum::Foo(a: 3, b: 4)`, suggest\n+                        // We are certain we have `Enum::Foo(a: 3, b: 4)`, suggest\n                         // `Enum::Foo { a: 3, b: 4 }` or `Enum::Foo(3, 4)`.\n                         *self = snapshot;\n                         let close_paren = self.prev_token.span;\n                         let span = lo.to(self.prev_token.span);\n-                        err.cancel();\n-                        self.struct_span_err(\n-                            span,\n-                            \"invalid `struct` delimiters or `fn` call arguments\",\n-                        )\n-                        .multipart_suggestion(\n-                            &format!(\"if `{}` is a struct, use braces as delimiters\", name),\n-                            vec![(open_paren, \" { \".to_string()), (close_paren, \" }\".to_string())],\n-                            Applicability::MaybeIncorrect,\n-                        )\n-                        .multipart_suggestion(\n-                            &format!(\"if `{}` is a function, use the arguments directly\", name),\n-                            fields\n-                                .into_iter()\n-                                .map(|field| (field.span.until(field.expr.span), String::new()))\n-                                .collect(),\n-                            Applicability::MaybeIncorrect,\n-                        )\n-                        .emit();\n+                        if !fields.is_empty() {\n+                            err.cancel();\n+                            let mut err = self.struct_span_err(\n+                                span,\n+                                \"invalid `struct` delimiters or `fn` call arguments\",\n+                            );\n+                            err.multipart_suggestion(\n+                                &format!(\"if `{}` is a struct, use braces as delimiters\", name),\n+                                vec![\n+                                    (open_paren, \" { \".to_string()),\n+                                    (close_paren, \" }\".to_string()),\n+                                ],\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                            err.multipart_suggestion(\n+                                &format!(\"if `{}` is a function, use the arguments directly\", name),\n+                                fields\n+                                    .into_iter()\n+                                    .map(|field| (field.span.until(field.expr.span), String::new()))\n+                                    .collect(),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                            err.emit();\n+                        } else {\n+                            err.emit();\n+                        }\n                         return Some(self.mk_expr_err(span));\n                     }\n                     Ok(_) => {}"}, {"sha": "3e3c411c478ab27bf8134e9472042de04c5512e5", "filename": "src/test/ui/parser/issues/issue-91461.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8c94b2c375d89d55787d3f97e6080c9d164e8414/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-91461.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c94b2c375d89d55787d3f97e6080c9d164e8414/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-91461.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-91461.rs?ref=8c94b2c375d89d55787d3f97e6080c9d164e8414", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    a(_:b:,)\n+    //~^ ERROR: expected identifier, found reserved identifier `_`\n+    //~| ERROR: expected type, found `,`\n+    //~| ERROR: expected type, found `,`\n+}"}, {"sha": "94fcf1721d8c13222af0318f84adb55b63df076d", "filename": "src/test/ui/parser/issues/issue-91461.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8c94b2c375d89d55787d3f97e6080c9d164e8414/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-91461.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c94b2c375d89d55787d3f97e6080c9d164e8414/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-91461.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-91461.stderr?ref=8c94b2c375d89d55787d3f97e6080c9d164e8414", "patch": "@@ -0,0 +1,31 @@\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/issue-91461.rs:2:7\n+   |\n+LL |     a(_:b:,)\n+   |       ^ expected identifier, found reserved identifier\n+\n+error: expected type, found `,`\n+  --> $DIR/issue-91461.rs:2:11\n+   |\n+LL |     a(_:b:,)\n+   |     -    -^ expected type\n+   |     |    |\n+   |     |    tried to parse a type due to this type ascription\n+   |     while parsing this struct\n+   |\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n+\n+error: expected type, found `,`\n+  --> $DIR/issue-91461.rs:2:11\n+   |\n+LL |     a(_:b:,)\n+   |          -^ expected type\n+   |          |\n+   |          tried to parse a type due to this type ascription\n+   |\n+   = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: see issue #23416 <https://github.com/rust-lang/rust/issues/23416> for more information\n+\n+error: aborting due to 3 previous errors\n+"}]}