{"sha": "72bc62047f7fd9219bcd884d399c98463f2978ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyYmM2MjA0N2Y3ZmQ5MjE5YmNkODg0ZDM5OWM5ODQ2M2YyOTc4YWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-20T15:06:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-20T15:06:15Z"}, "message": "Auto merge of #59987 - saleemjaffer:refactor_adjust_castkinds, r=oli-obk\n\nRefactor Adjust and CastKind\n\nfixes rust-lang#59588", "tree": {"sha": "7c2b62a1479e043eb2bb0de65acbe36a52ac47ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c2b62a1479e043eb2bb0de65acbe36a52ac47ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72bc62047f7fd9219bcd884d399c98463f2978ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72bc62047f7fd9219bcd884d399c98463f2978ae", "html_url": "https://github.com/rust-lang/rust/commit/72bc62047f7fd9219bcd884d399c98463f2978ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72bc62047f7fd9219bcd884d399c98463f2978ae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d1732212fb5f6c6653a776a0ce46bc73ce77ebb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d1732212fb5f6c6653a776a0ce46bc73ce77ebb", "html_url": "https://github.com/rust-lang/rust/commit/0d1732212fb5f6c6653a776a0ce46bc73ce77ebb"}, {"sha": "a2f8269d0c2cdf05aa86d6ef478073f6f634d838", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f8269d0c2cdf05aa86d6ef478073f6f634d838", "html_url": "https://github.com/rust-lang/rust/commit/a2f8269d0c2cdf05aa86d6ef478073f6f634d838"}], "stats": {"total": 380, "additions": 161, "deletions": 219}, "files": [{"sha": "217af7eea96854852b380a29f626e50f47fef0dc", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=72bc62047f7fd9219bcd884d399c98463f2978ae", "patch": "@@ -705,11 +705,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n             debug!(\"walk_adjustment expr={:?} adj={:?}\", expr, adjustment);\n             match adjustment.kind {\n                 adjustment::Adjust::NeverToAny |\n-                adjustment::Adjust::ReifyFnPointer |\n-                adjustment::Adjust::UnsafeFnPointer |\n-                adjustment::Adjust::ClosureFnPointer(_) |\n-                adjustment::Adjust::MutToConstPointer |\n-                adjustment::Adjust::Unsize => {\n+                adjustment::Adjust::Pointer(_)  => {\n                     // Creating a closure/fn-pointer or unsizing consumes\n                     // the input and stores it into the resulting rvalue.\n                     self.delegate_consume(expr.hir_id, expr.span, &cmt);"}, {"sha": "9240cb2a411e28c2acdbf150f44e07c63eb2ae3b", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=72bc62047f7fd9219bcd884d399c98463f2978ae", "patch": "@@ -619,12 +619,8 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             }\n \n             adjustment::Adjust::NeverToAny |\n-            adjustment::Adjust::ReifyFnPointer |\n-            adjustment::Adjust::UnsafeFnPointer |\n-            adjustment::Adjust::ClosureFnPointer(_) |\n-            adjustment::Adjust::MutToConstPointer |\n-            adjustment::Adjust::Borrow(_) |\n-            adjustment::Adjust::Unsize => {\n+            adjustment::Adjust::Pointer(_) |\n+            adjustment::Adjust::Borrow(_) => {\n                 // Result is an rvalue.\n                 Ok(self.cat_rvalue_node(expr.hir_id, expr.span, target))\n             }"}, {"sha": "555374a138c433818150ddb38683fd2b1be7c869", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=72bc62047f7fd9219bcd884d399c98463f2978ae", "patch": "@@ -36,6 +36,7 @@ use crate::ty::{\n     UserTypeAnnotationIndex,\n };\n use crate::ty::print::{FmtPrinter, Printer};\n+use crate::ty::adjustment::{PointerCast};\n \n pub use crate::mir::interpret::AssertMessage;\n \n@@ -2342,29 +2343,11 @@ pub enum Rvalue<'tcx> {\n     Aggregate(Box<AggregateKind<'tcx>>, Vec<Operand<'tcx>>),\n }\n \n+\n #[derive(Clone, Copy, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]\n pub enum CastKind {\n     Misc,\n-\n-    /// Converts unique, zero-sized type for a fn to fn()\n-    ReifyFnPointer,\n-\n-    /// Converts non capturing closure to fn() or unsafe fn().\n-    /// It cannot convert a closure that requires unsafe.\n-    ClosureFnPointer(hir::Unsafety),\n-\n-    /// Converts safe fn() to unsafe fn()\n-    UnsafeFnPointer,\n-\n-    /// Coerces *mut T to *const T, preserving T.\n-    MutToConstPointer,\n-\n-    /// \"Unsize\" -- convert a thin-or-fat pointer to a fat pointer.\n-    /// codegen must figure out the details once full monomorphization\n-    /// is known. For example, this could be used to cast from a\n-    /// `&[i32;N]` to a `&[i32]`, or a `Box<T>` to a `Box<dyn Trait>`\n-    /// (presuming `T: Trait`).\n-    Unsize,\n+    Pointer(PointerCast),\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]"}, {"sha": "0843a3a55fc4103a2f0ac8be4cdb48a58f742b83", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=72bc62047f7fd9219bcd884d399c98463f2978ae", "patch": "@@ -5,6 +5,34 @@ use crate::ty::subst::SubstsRef;\n use rustc_macros::HashStable;\n \n \n+#[derive(Clone, Copy, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]\n+pub enum PointerCast {\n+    /// Go from a fn-item type to a fn-pointer type.\n+    ReifyFnPointer,\n+\n+    /// Go from a safe fn pointer to an unsafe fn pointer.\n+    UnsafeFnPointer,\n+\n+    /// Go from a non-capturing closure to an fn pointer or an unsafe fn pointer.\n+    /// It cannot convert a closure that requires unsafe.\n+    ClosureFnPointer(hir::Unsafety),\n+\n+    /// Go from a mut raw pointer to a const raw pointer.\n+    MutToConstPointer,\n+\n+    /// Unsize a pointer/reference value, e.g., `&[T; n]` to\n+    /// `&[T]`. Note that the source could be a thin or fat pointer.\n+    /// This will do things like convert thin pointers to fat\n+    /// pointers, or convert structs containing thin pointers to\n+    /// structs containing fat pointers, or convert between fat\n+    /// pointers. We don't store the details of how the transform is\n+    /// done (in fact, we don't know that, because it might depend on\n+    /// the precise type parameters). We just store the target\n+    /// type. Codegen backends and miri figure out what has to be done\n+    /// based on the precise source/target type at hand.\n+    Unsize,\n+}\n+\n /// Represents coercing a value to a different type of value.\n ///\n /// We transform values by following a number of `Adjust` steps in order.\n@@ -56,36 +84,13 @@ pub enum Adjust<'tcx> {\n     /// Go from ! to any type.\n     NeverToAny,\n \n-    /// Go from a fn-item type to a fn-pointer type.\n-    ReifyFnPointer,\n-\n-    /// Go from a safe fn pointer to an unsafe fn pointer.\n-    UnsafeFnPointer,\n-\n-    /// Go from a non-capturing closure to an fn pointer or an unsafe fn pointer.\n-    /// It cannot convert a closure that requires unsafe.\n-    ClosureFnPointer(hir::Unsafety),\n-\n-    /// Go from a mut raw pointer to a const raw pointer.\n-    MutToConstPointer,\n-\n     /// Dereference once, producing a place.\n     Deref(Option<OverloadedDeref<'tcx>>),\n \n     /// Take the address and produce either a `&` or `*` pointer.\n     Borrow(AutoBorrow<'tcx>),\n \n-    /// Unsize a pointer/reference value, e.g., `&[T; n]` to\n-    /// `&[T]`. Note that the source could be a thin or fat pointer.\n-    /// This will do things like convert thin pointers to fat\n-    /// pointers, or convert structs containing thin pointers to\n-    /// structs containing fat pointers, or convert between fat\n-    /// pointers. We don't store the details of how the transform is\n-    /// done (in fact, we don't know that, because it might depend on\n-    /// the precise type parameters). We just store the target\n-    /// type. Codegen backends and miri figure out what has to be done\n-    /// based on the precise source/target type at hand.\n-    Unsize,\n+    Pointer(PointerCast),\n }\n \n /// An overloaded autoderef step, representing a `Deref(Mut)::deref(_mut)`"}, {"sha": "9aaff33e933391960fddcd76fadc353568747dfd", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=72bc62047f7fd9219bcd884d399c98463f2978ae", "patch": "@@ -326,6 +326,7 @@ CloneTypeFoldableAndLiftImpls! {\n     crate::ty::IntVarValue,\n     crate::ty::ParamConst,\n     crate::ty::ParamTy,\n+    crate::ty::adjustment::PointerCast,\n     crate::ty::RegionVid,\n     crate::ty::UniverseIndex,\n     crate::ty::Variance,\n@@ -626,16 +627,8 @@ impl<'a, 'tcx> Lift<'tcx> for ty::adjustment::Adjust<'a> {\n         match *self {\n             ty::adjustment::Adjust::NeverToAny =>\n                 Some(ty::adjustment::Adjust::NeverToAny),\n-            ty::adjustment::Adjust::ReifyFnPointer =>\n-                Some(ty::adjustment::Adjust::ReifyFnPointer),\n-            ty::adjustment::Adjust::UnsafeFnPointer =>\n-                Some(ty::adjustment::Adjust::UnsafeFnPointer),\n-            ty::adjustment::Adjust::ClosureFnPointer(unsafety) =>\n-                Some(ty::adjustment::Adjust::ClosureFnPointer(unsafety)),\n-            ty::adjustment::Adjust::MutToConstPointer =>\n-                Some(ty::adjustment::Adjust::MutToConstPointer),\n-            ty::adjustment::Adjust::Unsize =>\n-                Some(ty::adjustment::Adjust::Unsize),\n+            ty::adjustment::Adjust::Pointer(ptr) =>\n+                Some(ty::adjustment::Adjust::Pointer(ptr)),\n             ty::adjustment::Adjust::Deref(ref overloaded) => {\n                 tcx.lift(overloaded).map(ty::adjustment::Adjust::Deref)\n             }\n@@ -1185,11 +1178,7 @@ BraceStructTypeFoldableImpl! {\n EnumTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for ty::adjustment::Adjust<'tcx> {\n         (ty::adjustment::Adjust::NeverToAny),\n-        (ty::adjustment::Adjust::ReifyFnPointer),\n-        (ty::adjustment::Adjust::UnsafeFnPointer),\n-        (ty::adjustment::Adjust::ClosureFnPointer)(a),\n-        (ty::adjustment::Adjust::MutToConstPointer),\n-        (ty::adjustment::Adjust::Unsize),\n+        (ty::adjustment::Adjust::Pointer)(a),\n         (ty::adjustment::Adjust::Deref)(a),\n         (ty::adjustment::Adjust::Borrow)(a),\n     }"}, {"sha": "35e9d918aa6f975cbc0df7d4464c92bab7680e24", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=72bc62047f7fd9219bcd884d399c98463f2978ae", "patch": "@@ -1,4 +1,4 @@\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, adjustment::{PointerCast}};\n use rustc::ty::cast::{CastTy, IntTy};\n use rustc::ty::layout::{self, LayoutOf, HasTyCtxt};\n use rustc::mir;\n@@ -37,7 +37,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                bx\n            }\n \n-            mir::Rvalue::Cast(mir::CastKind::Unsize, ref source, _) => {\n+            mir::Rvalue::Cast(mir::CastKind::Pointer(PointerCast::Unsize), ref source, _) => {\n                 // The destination necessarily contains a fat pointer, so if\n                 // it's a scalar pair, it's a fat pointer or newtype thereof.\n                 if bx.cx().is_backend_scalar_pair(dest.layout) {\n@@ -178,7 +178,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let cast = bx.cx().layout_of(self.monomorphize(&mir_cast_ty));\n \n                 let val = match *kind {\n-                    mir::CastKind::ReifyFnPointer => {\n+                    mir::CastKind::Pointer(PointerCast::ReifyFnPointer) => {\n                         match operand.layout.ty.sty {\n                             ty::FnDef(def_id, substs) => {\n                                 if bx.cx().tcx().has_attr(def_id, \"rustc_args_required_const\") {\n@@ -193,7 +193,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                             }\n                         }\n                     }\n-                    mir::CastKind::ClosureFnPointer(_) => {\n+                    mir::CastKind::Pointer(PointerCast::ClosureFnPointer(_)) => {\n                         match operand.layout.ty.sty {\n                             ty::Closure(def_id, substs) => {\n                                 let instance = monomorphize::resolve_closure(\n@@ -205,11 +205,11 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                             }\n                         }\n                     }\n-                    mir::CastKind::UnsafeFnPointer => {\n+                    mir::CastKind::Pointer(PointerCast::UnsafeFnPointer) => {\n                         // this is a no-op at the LLVM level\n                         operand.val\n                     }\n-                    mir::CastKind::Unsize => {\n+                    mir::CastKind::Pointer(PointerCast::Unsize) => {\n                         assert!(bx.cx().is_backend_scalar_pair(cast));\n                         match operand.val {\n                             OperandValue::Pair(lldata, llextra) => {\n@@ -236,7 +236,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                             }\n                         }\n                     }\n-                    mir::CastKind::MutToConstPointer\n+                    mir::CastKind::Pointer(PointerCast::MutToConstPointer)\n                     | mir::CastKind::Misc if bx.cx().is_backend_scalar_pair(operand.layout) => {\n                         if let OperandValue::Pair(data_ptr, meta) = operand.val {\n                             if bx.cx().is_backend_scalar_pair(cast) {\n@@ -254,7 +254,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                             bug!(\"Unexpected non-Pair operand\")\n                         }\n                     }\n-                    mir::CastKind::MutToConstPointer\n+                    mir::CastKind::Pointer(PointerCast::MutToConstPointer)\n                     | mir::CastKind::Misc => {\n                         assert!(bx.cx().is_backend_immediate(cast));\n                         let ll_t_out = bx.cx().immediate_backend_type(cast);"}, {"sha": "5ad54080c5a6122ecb4eb67de048c4eea9422c35", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=72bc62047f7fd9219bcd884d399c98463f2978ae", "patch": "@@ -10,6 +10,7 @@ use rustc::mir::{\n     Projection, ProjectionElem, Rvalue, Statement, StatementKind, TerminatorKind,\n };\n use rustc::ty::{self, TyCtxt};\n+use rustc::ty::adjustment::{PointerCast};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::DiagnosticBuilder;\n use syntax_pos::Span;\n@@ -580,7 +581,9 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         },\n                         // If we see a unsized cast, then if it is our data we should check\n                         // whether it is being cast to a trait object.\n-                        Rvalue::Cast(CastKind::Unsize, operand, ty) => match operand {\n+                        Rvalue::Cast(\n+                            CastKind::Pointer(PointerCast::Unsize), operand, ty\n+                        ) => match operand {\n                             Operand::Copy(Place::Base(PlaceBase::Local(from)))\n                             | Operand::Move(Place::Base(PlaceBase::Local(from)))\n                                 if *from == target =>"}, {"sha": "d123f3e405936542aac55a38364c6e7b84f81301", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=72bc62047f7fd9219bcd884d399c98463f2978ae", "patch": "@@ -36,6 +36,7 @@ use rustc::traits::query::type_op;\n use rustc::traits::query::type_op::custom::CustomTypeOp;\n use rustc::traits::query::{Fallible, NoSolution};\n use rustc::traits::{ObligationCause, PredicateObligations};\n+use rustc::ty::adjustment::{PointerCast};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::{Subst, SubstsRef, UnpackedKind, UserSubsts};\n use rustc::ty::{\n@@ -1972,7 +1973,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n \n             Rvalue::Cast(cast_kind, op, ty) => {\n                 match cast_kind {\n-                    CastKind::ReifyFnPointer => {\n+                    CastKind::Pointer(PointerCast::ReifyFnPointer) => {\n                         let fn_sig = op.ty(mir, tcx).fn_sig(tcx);\n \n                         // The type that we see in the fcx is like\n@@ -2001,7 +2002,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                         }\n                     }\n \n-                    CastKind::ClosureFnPointer(unsafety) => {\n+                    CastKind::Pointer(PointerCast::ClosureFnPointer(unsafety)) => {\n                         let sig = match op.ty(mir, tcx).sty {\n                             ty::Closure(def_id, substs) => {\n                                 substs.closure_sig_ty(def_id, tcx).fn_sig(tcx)\n@@ -2027,7 +2028,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                         }\n                     }\n \n-                    CastKind::UnsafeFnPointer => {\n+                    CastKind::Pointer(PointerCast::UnsafeFnPointer) => {\n                         let fn_sig = op.ty(mir, tcx).fn_sig(tcx);\n \n                         // The type that we see in the fcx is like\n@@ -2056,7 +2057,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                         }\n                     }\n \n-                    CastKind::Unsize => {\n+                    CastKind::Pointer(PointerCast::Unsize) => {\n                         let &ty = ty;\n                         let trait_ref = ty::TraitRef {\n                             def_id: tcx.lang_items().coerce_unsized_trait().unwrap(),\n@@ -2070,7 +2071,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                         );\n                     }\n \n-                    CastKind::MutToConstPointer => {\n+                    CastKind::Pointer(PointerCast::MutToConstPointer) => {\n                         let ty_from = match op.ty(mir, tcx).sty {\n                             ty::RawPtr(ty::TypeAndMut {\n                                 ty: ty_from,"}, {"sha": "b500060684f81fbcb7e395147858408b1bd4f3fc", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=72bc62047f7fd9219bcd884d399c98463f2978ae", "patch": "@@ -193,11 +193,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             | ExprKind::Cast { .. }\n             | ExprKind::Use { .. }\n             | ExprKind::NeverToAny { .. }\n-            | ExprKind::ReifyFnPointer { .. }\n-            | ExprKind::ClosureFnPointer { .. }\n-            | ExprKind::UnsafeFnPointer { .. }\n-            | ExprKind::MutToConstPointer { .. }\n-            | ExprKind::Unsize { .. }\n+            | ExprKind::Pointer { .. }\n             | ExprKind::Repeat { .. }\n             | ExprKind::Borrow { .. }\n             | ExprKind::If { .. }"}, {"sha": "b9fec22da63ca380ca46fb517da99ef63276156c", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=72bc62047f7fd9219bcd884d399c98463f2978ae", "patch": "@@ -154,25 +154,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 let source = unpack!(block = this.as_operand(block, scope, source));\n                 block.and(Rvalue::Use(source))\n             }\n-            ExprKind::ReifyFnPointer { source } => {\n+            ExprKind::Pointer { cast, source } => {\n                 let source = unpack!(block = this.as_operand(block, scope, source));\n-                block.and(Rvalue::Cast(CastKind::ReifyFnPointer, source, expr.ty))\n-            }\n-            ExprKind::UnsafeFnPointer { source } => {\n-                let source = unpack!(block = this.as_operand(block, scope, source));\n-                block.and(Rvalue::Cast(CastKind::UnsafeFnPointer, source, expr.ty))\n-            }\n-            ExprKind::ClosureFnPointer { source, unsafety } => {\n-                let source = unpack!(block = this.as_operand(block, scope, source));\n-                block.and(Rvalue::Cast(CastKind::ClosureFnPointer(unsafety), source, expr.ty))\n-            }\n-            ExprKind::MutToConstPointer { source } => {\n-                let source = unpack!(block = this.as_operand(block, scope, source));\n-                block.and(Rvalue::Cast(CastKind::MutToConstPointer, source, expr.ty))\n-            }\n-            ExprKind::Unsize { source } => {\n-                let source = unpack!(block = this.as_operand(block, scope, source));\n-                block.and(Rvalue::Cast(CastKind::Unsize, source, expr.ty))\n+                block.and(Rvalue::Cast(CastKind::Pointer(cast), source, expr.ty))\n             }\n             ExprKind::Array { fields } => {\n                 // (*) We would (maybe) be closer to codegen if we"}, {"sha": "52f1d0eca5e3c732f7b1e774fb247acee95338e0", "filename": "src/librustc_mir/build/expr/category.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs?ref=72bc62047f7fd9219bcd884d399c98463f2978ae", "patch": "@@ -59,11 +59,7 @@ impl Category {\n             | ExprKind::Box { .. }\n             | ExprKind::Cast { .. }\n             | ExprKind::Use { .. }\n-            | ExprKind::ReifyFnPointer { .. }\n-            | ExprKind::ClosureFnPointer { .. }\n-            | ExprKind::UnsafeFnPointer { .. }\n-            | ExprKind::MutToConstPointer { .. }\n-            | ExprKind::Unsize { .. }\n+            | ExprKind::Pointer { .. }\n             | ExprKind::Repeat { .. }\n             | ExprKind::Borrow { .. }\n             | ExprKind::Assign { .. }"}, {"sha": "8967572ea8f64b0aeca118d8c6db618dc9dfadec", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=72bc62047f7fd9219bcd884d399c98463f2978ae", "patch": "@@ -380,11 +380,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             | ExprKind::Box { .. }\n             | ExprKind::Cast { .. }\n             | ExprKind::Use { .. }\n-            | ExprKind::ReifyFnPointer { .. }\n-            | ExprKind::ClosureFnPointer { .. }\n-            | ExprKind::UnsafeFnPointer { .. }\n-            | ExprKind::MutToConstPointer { .. }\n-            | ExprKind::Unsize { .. }\n+            | ExprKind::Pointer { .. }\n             | ExprKind::Repeat { .. }\n             | ExprKind::Borrow { .. }\n             | ExprKind::Array { .. }"}, {"sha": "1eaf3d7ba99822ad7e49b61d000b5b04ed7a25c4", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=72bc62047f7fd9219bcd884d399c98463f2978ae", "patch": "@@ -11,7 +11,7 @@ use crate::hair::*;\n use crate::hair::pattern::compare_const_vals;\n use rustc_data_structures::bit_set::BitSet;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, adjustment::{PointerCast}};\n use rustc::ty::util::IntTypeExt;\n use rustc::ty::layout::VariantIdx;\n use rustc::mir::*;\n@@ -280,8 +280,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             ty = tcx.mk_imm_ref(region, tcx.mk_slice(elem_ty));\n                             if opt_ref_ty.is_some() {\n                                 place = self.temp(ty, test.span);\n-                                self.cfg.push_assign(block, source_info, &place,\n-                                                    Rvalue::Cast(CastKind::Unsize, val, ty));\n+                                self.cfg.push_assign(\n+                                    block, source_info, &place, Rvalue::Cast(\n+                                        CastKind::Pointer(PointerCast::Unsize), val, ty\n+                                    )\n+                                );\n                             }\n                             if opt_ref_test_ty.is_some() {\n                                 let array = self.literal_operand(\n@@ -291,8 +294,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                 );\n \n                                 let slice = self.temp(ty, test.span);\n-                                self.cfg.push_assign(block, source_info, &slice,\n-                                                    Rvalue::Cast(CastKind::Unsize, array, ty));\n+                                self.cfg.push_assign(\n+                                    block, source_info, &slice, Rvalue::Cast(\n+                                        CastKind::Pointer(PointerCast::Unsize), array, ty\n+                                    )\n+                                );\n                                 expect = Operand::Move(slice);\n                             }\n                         },"}, {"sha": "b62afc47dea3cb30f496b14d3b6e10b4655f47a5", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 29, "deletions": 40, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=72bc62047f7fd9219bcd884d399c98463f2978ae", "patch": "@@ -7,7 +7,7 @@ use rustc_data_structures::indexed_vec::Idx;\n use rustc::hir::def::{CtorOf, Def, CtorKind};\n use rustc::mir::interpret::{GlobalId, ErrorHandled, ConstValue};\n use rustc::ty::{self, AdtKind, Ty};\n-use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow, AutoBorrowMutability};\n+use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow, AutoBorrowMutability, PointerCast};\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::hir;\n use rustc::hir::def_id::LocalDefId;\n@@ -74,45 +74,44 @@ fn apply_adjustment<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                     adjustment: &Adjustment<'tcx>)\n                                     -> Expr<'tcx> {\n     let Expr { temp_lifetime, mut span, .. } = expr;\n-    let kind = match adjustment.kind {\n-        Adjust::ReifyFnPointer => {\n-            ExprKind::ReifyFnPointer { source: expr.to_ref() }\n+\n+    // Adjust the span from the block, to the last expression of the\n+    // block. This is a better span when returning a mutable reference\n+    // with too short a lifetime. The error message will use the span\n+    // from the assignment to the return place, which should only point\n+    // at the returned value, not the entire function body.\n+    //\n+    // fn return_short_lived<'a>(x: &'a mut i32) -> &'static mut i32 {\n+    //      x\n+    //   // ^ error message points at this expression.\n+    // }\n+    let mut adjust_span = |expr: &mut Expr<'tcx>| {\n+        if let ExprKind::Block { body } = expr.kind {\n+            if let Some(ref last_expr) = body.expr {\n+                span = last_expr.span;\n+                expr.span = span;\n+            }\n         }\n-        Adjust::UnsafeFnPointer => {\n-            ExprKind::UnsafeFnPointer { source: expr.to_ref() }\n+    };\n+\n+    let kind = match adjustment.kind {\n+        Adjust::Pointer(PointerCast::Unsize) => {\n+            adjust_span(&mut expr);\n+            ExprKind::Pointer { cast: PointerCast::Unsize, source: expr.to_ref() }\n         }\n-        Adjust::ClosureFnPointer(unsafety) => {\n-            ExprKind::ClosureFnPointer { source: expr.to_ref(), unsafety }\n+        Adjust::Pointer(cast) => {\n+            ExprKind::Pointer { cast, source: expr.to_ref() }\n         }\n         Adjust::NeverToAny => {\n             ExprKind::NeverToAny { source: expr.to_ref() }\n         }\n-        Adjust::MutToConstPointer => {\n-            ExprKind::MutToConstPointer { source: expr.to_ref() }\n-        }\n         Adjust::Deref(None) => {\n-            // Adjust the span from the block, to the last expression of the\n-            // block. This is a better span when returning a mutable reference\n-            // with too short a lifetime. The error message will use the span\n-            // from the assignment to the return place, which should only point\n-            // at the returned value, not the entire function body.\n-            //\n-            // fn return_short_lived<'a>(x: &'a mut i32) -> &'static mut i32 {\n-            //      x\n-            //   // ^ error message points at this expression.\n-            // }\n-            //\n-            // We don't need to do this adjustment in the next match arm since\n-            // deref coercions always start with a built-in deref.\n-            if let ExprKind::Block { body } = expr.kind {\n-                if let Some(ref last_expr) = body.expr {\n-                    span = last_expr.span;\n-                    expr.span = span;\n-                }\n-            }\n+            adjust_span(&mut expr);\n             ExprKind::Deref { arg: expr.to_ref() }\n         }\n         Adjust::Deref(Some(deref)) => {\n+            // We don't need to do call adjust_span here since\n+            // deref coercions always start with a built-in deref.\n             let call = deref.method_call(cx.tcx(), expr.ty);\n \n             expr = Expr {\n@@ -187,16 +186,6 @@ fn apply_adjustment<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             // since they get rid of a borrow implicitly.\n             ExprKind::Use { source: cast_expr.to_ref() }\n         }\n-        Adjust::Unsize => {\n-            // See the above comment for Adjust::Deref\n-            if let ExprKind::Block { body } = expr.kind {\n-                if let Some(ref last_expr) = body.expr {\n-                    span = last_expr.span;\n-                    expr.span = span;\n-                }\n-            }\n-            ExprKind::Unsize { source: expr.to_ref() }\n-        }\n     };\n \n     Expr {"}, {"sha": "2e53bee3f3d7ff2e30f4174a1119142d41a06da2", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=72bc62047f7fd9219bcd884d399c98463f2978ae", "patch": "@@ -10,6 +10,7 @@ use rustc::infer::canonical::Canonical;\n use rustc::middle::region;\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{AdtDef, UpvarSubsts, Ty, Const, UserType};\n+use rustc::ty::adjustment::{PointerCast};\n use rustc::ty::layout::VariantIdx;\n use rustc::hir;\n use syntax_pos::Span;\n@@ -180,20 +181,8 @@ pub enum ExprKind<'tcx> {\n     NeverToAny {\n         source: ExprRef<'tcx>,\n     },\n-    ReifyFnPointer {\n-        source: ExprRef<'tcx>,\n-    },\n-    ClosureFnPointer {\n-        source: ExprRef<'tcx>,\n-        unsafety: hir::Unsafety,\n-    },\n-    UnsafeFnPointer {\n-        source: ExprRef<'tcx>,\n-    },\n-    MutToConstPointer {\n-        source: ExprRef<'tcx>,\n-    },\n-    Unsize {\n+    Pointer {\n+        cast: PointerCast,\n         source: ExprRef<'tcx>,\n     },\n     If {"}, {"sha": "32f218d49cea2bc7859f5eb96568a7865da27648", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=72bc62047f7fd9219bcd884d399c98463f2978ae", "patch": "@@ -1,5 +1,6 @@\n use rustc::ty::{self, Ty, TypeAndMut};\n use rustc::ty::layout::{self, TyLayout, Size};\n+use rustc::ty::adjustment::{PointerCast};\n use syntax::ast::{FloatTy, IntTy, UintTy};\n \n use rustc_apfloat::ieee::{Single, Double};\n@@ -29,11 +30,11 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n     ) -> EvalResult<'tcx> {\n         use rustc::mir::CastKind::*;\n         match kind {\n-            Unsize => {\n+            Pointer(PointerCast::Unsize) => {\n                 self.unsize_into(src, dest)?;\n             }\n \n-            Misc | MutToConstPointer => {\n+            Misc | Pointer(PointerCast::MutToConstPointer) => {\n                 let src = self.read_immediate(src)?;\n \n                 if self.type_is_fat_ptr(src.layout.ty) {\n@@ -72,7 +73,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                 }\n             }\n \n-            ReifyFnPointer => {\n+            Pointer(PointerCast::ReifyFnPointer) => {\n                 // The src operand does not matter, just its type\n                 match src.layout.ty.sty {\n                     ty::FnDef(def_id, substs) => {\n@@ -93,7 +94,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                 }\n             }\n \n-            UnsafeFnPointer => {\n+            Pointer(PointerCast::UnsafeFnPointer) => {\n                 let src = self.read_immediate(src)?;\n                 match dest.layout.ty.sty {\n                     ty::FnPtr(_) => {\n@@ -104,7 +105,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                 }\n             }\n \n-            ClosureFnPointer(_) => {\n+            Pointer(PointerCast::ClosureFnPointer(_)) => {\n                 // The src operand does not matter, just its type\n                 match src.layout.ty.sty {\n                     ty::Closure(def_id, substs) => {"}, {"sha": "47fe136e0e451a0c4251108f669926adb41a23d3", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=72bc62047f7fd9219bcd884d399c98463f2978ae", "patch": "@@ -182,7 +182,7 @@ use rustc::mir::interpret::{AllocId, ConstValue};\n use rustc::middle::lang_items::{ExchangeMallocFnLangItem, StartFnLangItem};\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::ty::{self, TypeFoldable, Ty, TyCtxt, GenericParamDefKind};\n-use rustc::ty::adjustment::CustomCoerceUnsized;\n+use rustc::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n use rustc::session::config::EntryFnType;\n use rustc::mir::{self, Location, Place, PlaceBase, Promoted, Static, StaticKind};\n use rustc::mir::visit::Visitor as MirVisitor;\n@@ -531,7 +531,9 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             // When doing an cast from a regular pointer to a fat pointer, we\n             // have to instantiate all methods of the trait being cast to, so we\n             // can build the appropriate vtable.\n-            mir::Rvalue::Cast(mir::CastKind::Unsize, ref operand, target_ty) => {\n+            mir::Rvalue::Cast(\n+                mir::CastKind::Pointer(PointerCast::Unsize), ref operand, target_ty\n+            ) => {\n                 let target_ty = self.tcx.subst_and_normalize_erasing_regions(\n                     self.param_substs,\n                     ty::ParamEnv::reveal_all(),\n@@ -556,7 +558,9 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                                                          self.output);\n                 }\n             }\n-            mir::Rvalue::Cast(mir::CastKind::ReifyFnPointer, ref operand, _) => {\n+            mir::Rvalue::Cast(\n+                mir::CastKind::Pointer(PointerCast::ReifyFnPointer), ref operand, _\n+            ) => {\n                 let fn_ty = operand.ty(self.mir, self.tcx);\n                 let fn_ty = self.tcx.subst_and_normalize_erasing_regions(\n                     self.param_substs,\n@@ -565,7 +569,9 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 );\n                 visit_fn_use(self.tcx, fn_ty, false, &mut self.output);\n             }\n-            mir::Rvalue::Cast(mir::CastKind::ClosureFnPointer(_), ref operand, _) => {\n+            mir::Rvalue::Cast(\n+                mir::CastKind::Pointer(PointerCast::ClosureFnPointer(_)), ref operand, _\n+            ) => {\n                 let source_ty = operand.ty(self.mir, self.tcx);\n                 let source_ty = self.tcx.subst_and_normalize_erasing_regions(\n                     self.param_substs,"}, {"sha": "88a9566cfd3b9c5303db10a00634bb9f18eef5fd", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=72bc62047f7fd9219bcd884d399c98463f2978ae", "patch": "@@ -1108,11 +1108,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n             Rvalue::UnaryOp(UnOp::Not, _) |\n             Rvalue::NullaryOp(NullOp::SizeOf, _) |\n             Rvalue::CheckedBinaryOp(..) |\n-            Rvalue::Cast(CastKind::ReifyFnPointer, ..) |\n-            Rvalue::Cast(CastKind::UnsafeFnPointer, ..) |\n-            Rvalue::Cast(CastKind::ClosureFnPointer(_), ..) |\n-            Rvalue::Cast(CastKind::Unsize, ..) |\n-            Rvalue::Cast(CastKind::MutToConstPointer, ..) |\n+            Rvalue::Cast(CastKind::Pointer(_), ..) |\n             Rvalue::Discriminant(..) |\n             Rvalue::Len(_) |\n             Rvalue::Ref(..) |"}, {"sha": "776985ab798020bd2af1e24f18e3cf733d4c021c", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=72bc62047f7fd9219bcd884d399c98463f2978ae", "patch": "@@ -1,7 +1,7 @@\n use rustc::hir::def_id::DefId;\n use rustc::hir;\n use rustc::mir::*;\n-use rustc::ty::{self, Predicate, TyCtxt};\n+use rustc::ty::{self, Predicate, TyCtxt, adjustment::{PointerCast}};\n use rustc_target::spec::abi;\n use std::borrow::Cow;\n use syntax_pos::Span;\n@@ -152,16 +152,16 @@ fn check_rvalue(\n                 _ => check_operand(tcx, mir, operand, span),\n             }\n         }\n-        Rvalue::Cast(CastKind::MutToConstPointer, operand, _) => {\n+        Rvalue::Cast(CastKind::Pointer(PointerCast::MutToConstPointer), operand, _) => {\n             check_operand(tcx, mir, operand, span)\n         }\n-        Rvalue::Cast(CastKind::UnsafeFnPointer, _, _) |\n-        Rvalue::Cast(CastKind::ClosureFnPointer(_), _, _) |\n-        Rvalue::Cast(CastKind::ReifyFnPointer, _, _) => Err((\n+        Rvalue::Cast(CastKind::Pointer(PointerCast::UnsafeFnPointer), _, _) |\n+        Rvalue::Cast(CastKind::Pointer(PointerCast::ClosureFnPointer(_)), _, _) |\n+        Rvalue::Cast(CastKind::Pointer(PointerCast::ReifyFnPointer), _, _) => Err((\n             span,\n             \"function pointer casts are not allowed in const fn\".into(),\n         )),\n-        Rvalue::Cast(CastKind::Unsize, _, _) => Err((\n+        Rvalue::Cast(CastKind::Pointer(PointerCast::Unsize), _, _) => Err((\n             span,\n             \"unsizing casts are not allowed in const fn\".into(),\n         )),"}, {"sha": "ba60fdc0273129e886649160a911feb673b09403", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=72bc62047f7fd9219bcd884d399c98463f2978ae", "patch": "@@ -584,12 +584,8 @@ fn check_adjustments<'a, 'tcx>(\n     while let Some(adjustment) = adjustments.next() {\n         match adjustment.kind {\n             Adjust::NeverToAny |\n-            Adjust::ReifyFnPointer |\n-            Adjust::UnsafeFnPointer |\n-            Adjust::ClosureFnPointer(_) |\n-            Adjust::MutToConstPointer |\n-            Adjust::Borrow(_) |\n-            Adjust::Unsize => {}\n+            Adjust::Pointer(_) |\n+            Adjust::Borrow(_) => {}\n \n             Adjust::Deref(_) => {\n                 if let Some(next_adjustment) = adjustments.peek() {"}, {"sha": "85eb0f9d499669fd27424fd81ccb24cd6352d736", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=72bc62047f7fd9219bcd884d399c98463f2978ae", "patch": "@@ -57,7 +57,9 @@ use rustc::hir::def_id::DefId;\n use rustc::infer::{Coercion, InferResult, InferOk};\n use rustc::infer::type_variable::TypeVariableOrigin;\n use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n-use rustc::ty::adjustment::{Adjustment, Adjust, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n+use rustc::ty::adjustment::{\n+    Adjustment, Adjust, AllowTwoPhase, AutoBorrow, AutoBorrowMutability, PointerCast\n+};\n use rustc::ty::{self, TypeAndMut, Ty, ClosureSubsts};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::error::TypeError;\n@@ -512,7 +514,7 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n         let coerce_target = self.next_ty_var(origin);\n         let mut coercion = self.unify_and(coerce_target, target, |target| {\n             let unsize = Adjustment {\n-                kind: Adjust::Unsize,\n+                kind: Adjust::Pointer(PointerCast::Unsize),\n                 target\n             };\n             match reborrow {\n@@ -661,7 +663,7 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n         debug!(\"coerce_from_fn_pointer(a={:?}, b={:?})\", a, b);\n \n         self.coerce_from_safe_fn(a, fn_ty_a, b,\n-            simple(Adjust::UnsafeFnPointer), identity)\n+            simple(Adjust::Pointer(PointerCast::UnsafeFnPointer)), identity)\n     }\n \n     fn coerce_from_fn_item(&self,\n@@ -687,11 +689,17 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n                     b,\n                     |unsafe_ty| {\n                         vec![\n-                            Adjustment { kind: Adjust::ReifyFnPointer, target: a_fn_pointer },\n-                            Adjustment { kind: Adjust::UnsafeFnPointer, target: unsafe_ty },\n+                            Adjustment {\n+                                kind: Adjust::Pointer(PointerCast::ReifyFnPointer),\n+                                target: a_fn_pointer\n+                            },\n+                            Adjustment {\n+                                kind: Adjust::Pointer(PointerCast::UnsafeFnPointer),\n+                                target: unsafe_ty\n+                            },\n                         ]\n                     },\n-                    simple(Adjust::ReifyFnPointer)\n+                    simple(Adjust::Pointer(PointerCast::ReifyFnPointer))\n                 )?;\n \n                 obligations.extend(o2);\n@@ -727,7 +735,9 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n                 let pointer_ty = self.tcx.coerce_closure_fn_ty(sig, unsafety);\n                 debug!(\"coerce_closure_to_fn(a={:?}, b={:?}, pty={:?})\",\n                        a, b, pointer_ty);\n-                self.unify_and(pointer_ty, b, simple(Adjust::ClosureFnPointer(unsafety)))\n+                self.unify_and(pointer_ty, b, simple(\n+                    Adjust::Pointer(PointerCast::ClosureFnPointer(unsafety))\n+                ))\n             }\n             _ => self.unify_and(a, b, identity),\n         }\n@@ -766,7 +776,9 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n                 }]\n             })\n         } else if mt_a.mutbl != mutbl_b {\n-            self.unify_and(a_unsafe, b, simple(Adjust::MutToConstPointer))\n+            self.unify_and(\n+                a_unsafe, b, simple(Adjust::Pointer(PointerCast::MutToConstPointer))\n+            )\n         } else {\n             self.unify_and(a_unsafe, b, identity)\n         }\n@@ -857,7 +869,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // The only adjustment that can produce an fn item is\n                 // `NeverToAny`, so this should always be valid.\n                 self.apply_adjustments(expr, vec![Adjustment {\n-                    kind: Adjust::ReifyFnPointer,\n+                    kind: Adjust::Pointer(PointerCast::ReifyFnPointer),\n                     target: fn_ptr\n                 }]);\n             }"}, {"sha": "f93d5449e8b7892e0895cf3a93a1cb57685b540d", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=72bc62047f7fd9219bcd884d399c98463f2978ae", "patch": "@@ -7,7 +7,7 @@ use crate::hir::def_id::DefId;\n use rustc::ty::subst::{Subst, SubstsRef};\n use rustc::traits;\n use rustc::ty::{self, Ty, GenericParamDefKind};\n-use rustc::ty::adjustment::{Adjustment, Adjust, OverloadedDeref};\n+use rustc::ty::adjustment::{Adjustment, Adjust, OverloadedDeref, PointerCast};\n use rustc::ty::adjustment::{AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::fold::TypeFoldable;\n use rustc::infer::{self, InferOk};\n@@ -179,7 +179,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n                     ty: unsize_target\n                 });\n                 adjustments.push(Adjustment {\n-                    kind: Adjust::Unsize,\n+                    kind: Adjust::Pointer(PointerCast::Unsize),\n                     target\n                 });\n             }\n@@ -565,7 +565,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n             // If we have an autoref followed by unsizing at the end, fix the unsize target.\n             match adjustments[..] {\n                 [.., Adjustment { kind: Adjust::Borrow(AutoBorrow::Ref(..)), .. },\n-                 Adjustment { kind: Adjust::Unsize, ref mut target }] => {\n+                 Adjustment { kind: Adjust::Pointer(PointerCast::Unsize), ref mut target }] => {\n                     *target = method.sig.inputs()[0];\n                 }\n                 _ => {}"}, {"sha": "15190f569655f640402fad7eefc142e376e5cc9a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=72bc62047f7fd9219bcd884d399c98463f2978ae", "patch": "@@ -106,7 +106,9 @@ use rustc::ty::{\n     self, AdtKind, CanonicalUserType, Ty, TyCtxt, GenericParamDefKind, Visibility,\n     ToPolyTraitRef, ToPredicate, RegionKind, UserType\n };\n-use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n+use rustc::ty::adjustment::{\n+    Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability, PointerCast\n+};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::query::Providers;\n use rustc::ty::subst::{UnpackedKind, Subst, InternalSubsts, SubstsRef, UserSelfTy, UserSubsts};\n@@ -2664,7 +2666,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n                 if unsize {\n                     adjustments.push(Adjustment {\n-                        kind: Adjust::Unsize,\n+                        kind: Adjust::Pointer(PointerCast::Unsize),\n                         target: method.sig.inputs()[0]\n                     });\n                 }"}, {"sha": "d9df4672f14782a3f513f870d81831de034747dc", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=72bc62047f7fd9219bcd884d399c98463f2978ae", "patch": "@@ -8,7 +8,7 @@ use rustc::hir;\n use rustc::hir::def_id::{DefId, DefIndex};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::infer::InferCtxt;\n-use rustc::ty::adjustment::{Adjust, Adjustment};\n+use rustc::ty::adjustment::{Adjust, Adjustment, PointerCast};\n use rustc::ty::fold::{BottomUpFolder, TypeFoldable, TypeFolder};\n use rustc::ty::subst::UnpackedKind;\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -197,7 +197,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n                             // Since this is \"after\" the other adjustment to be\n                             // discarded, we do an extra `pop()`\n                             Some(Adjustment {\n-                                kind: Adjust::Unsize,\n+                                kind: Adjust::Pointer(PointerCast::Unsize),\n                                 ..\n                             }) => {\n                                 // So the borrow discard actually happens here"}, {"sha": "10f00cf8b0c32869aa294faec4e8f9af3e79c81c", "filename": "src/test/mir-opt/storage_live_dead_in_statics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bc62047f7fd9219bcd884d399c98463f2978ae/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.rs?ref=72bc62047f7fd9219bcd884d399c98463f2978ae", "patch": "@@ -178,7 +178,7 @@ fn main() {\n //        _6 = [move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20, move _21, move _22, move _23, move _24, move _25, move _26, move _27, move _28, move _29, move _30, move _31, move _32, move _33, move _34, move _35, move _36, move _37, move _38, move _39, move _40, move _41, move _42, move _43, move _44, move _45, move _46, move _47, move _48];\n //        _5 = &_6;\n //        _4 = &(*_5);\n-//        _3 = move _4 as &'static [(u32, u32)] (Unsize);\n+//        _3 = move _4 as &'static [(u32, u32)] (Pointer(Unsize));\n //        _2 = Foo { tup: const \"hi\", data: move _3 };\n //        _1 = &_2;\n //        _0 = &(*_1);"}]}