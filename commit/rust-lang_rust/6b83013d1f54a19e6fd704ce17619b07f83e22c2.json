{"sha": "6b83013d1f54a19e6fd704ce17619b07f83e22c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiODMwMTNkMWY1NGExOWU2ZmQ3MDRjZTE3NjE5YjA3ZjgzZTIyYzI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-12-17T10:36:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-17T10:36:47Z"}, "message": "Rollup merge of #80006 - ssomers:btree_cleanup_6, r=Mark-Simulacrum\n\nBTreeMap: more expressive local variables in merge\n\nr? ```````@Mark-Simulacrum```````", "tree": {"sha": "1ce3ae0992e2e28e430524da55674b9b65f8ac5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ce3ae0992e2e28e430524da55674b9b65f8ac5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b83013d1f54a19e6fd704ce17619b07f83e22c2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf2zS/CRBK7hj4Ov3rIwAAdHIIAFMxKGwEWvPumTShkx8cF5T3\nwti8j2LDXznSdNQCHDp85Wpy1++o7EsZeb2O9W1aPK8hpJ9pOqCPMp/DQqtLtce0\n49AkOhJPPB/MXxEETC7GOdEeCZuBjqCDNP6d4yAC2vn1e6wu22Rhl4aT9Z41bbjx\nAWz1pvzGv5CtuLZ5r+4gAm1v6FiI4NWXSvncvr+nb3oN1FVDKXwprFowc68OtFhD\nLXRg121hTZaZXIBQsyGVuAU6nRiR5AM+qbs1gwpy05t7Ml04bOCzi+9rKD2g6SbJ\nEYo8RpYlvZutP5m8ZzGUvWtmUqM8kbnQM3PpKc3HAyeJIXjOR38K0BuOEGnl26g=\n=wT1L\n-----END PGP SIGNATURE-----\n", "payload": "tree 1ce3ae0992e2e28e430524da55674b9b65f8ac5e\nparent bdd0a78582efd17f588b35e3e227a65617d5afec\nparent 94fd1d325c2f36b12b8d62d8a7b06a431375e55e\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1608201407 +0100\ncommitter GitHub <noreply@github.com> 1608201407 +0100\n\nRollup merge of #80006 - ssomers:btree_cleanup_6, r=Mark-Simulacrum\n\nBTreeMap: more expressive local variables in merge\n\nr? ```````@Mark-Simulacrum```````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b83013d1f54a19e6fd704ce17619b07f83e22c2", "html_url": "https://github.com/rust-lang/rust/commit/6b83013d1f54a19e6fd704ce17619b07f83e22c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b83013d1f54a19e6fd704ce17619b07f83e22c2/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdd0a78582efd17f588b35e3e227a65617d5afec", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdd0a78582efd17f588b35e3e227a65617d5afec", "html_url": "https://github.com/rust-lang/rust/commit/bdd0a78582efd17f588b35e3e227a65617d5afec"}, {"sha": "94fd1d325c2f36b12b8d62d8a7b06a431375e55e", "url": "https://api.github.com/repos/rust-lang/rust/commits/94fd1d325c2f36b12b8d62d8a7b06a431375e55e", "html_url": "https://github.com/rust-lang/rust/commit/94fd1d325c2f36b12b8d62d8a7b06a431375e55e"}], "stats": {"total": 55, "additions": 27, "deletions": 28}, "files": [{"sha": "22e179af4a93289f7537c243d63e9fa195f0e1e3", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/6b83013d1f54a19e6fd704ce17619b07f83e22c2/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b83013d1f54a19e6fd704ce17619b07f83e22c2/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=6b83013d1f54a19e6fd704ce17619b07f83e22c2", "patch": "@@ -1355,66 +1355,65 @@ impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {\n     ///\n     /// Panics unless we `.can_merge()`.\n     pub fn merge(\n-        mut self,\n+        self,\n         track_edge_idx: Option<LeftOrRight<usize>>,\n     ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::Edge> {\n+        let Handle { node: mut parent_node, idx: parent_idx, _marker } = self.parent;\n+        let old_parent_len = parent_node.len();\n         let mut left_node = self.left_child;\n-        let left_len = left_node.len();\n+        let old_left_len = left_node.len();\n         let right_node = self.right_child;\n         let right_len = right_node.len();\n+        let new_left_len = old_left_len + 1 + right_len;\n \n-        assert!(left_len + right_len < CAPACITY);\n+        assert!(new_left_len <= CAPACITY);\n         assert!(match track_edge_idx {\n             None => true,\n-            Some(LeftOrRight::Left(idx)) => idx <= left_len,\n+            Some(LeftOrRight::Left(idx)) => idx <= old_left_len,\n             Some(LeftOrRight::Right(idx)) => idx <= right_len,\n         });\n \n         unsafe {\n-            *left_node.reborrow_mut().into_len_mut() += right_len as u16 + 1;\n+            *left_node.reborrow_mut().into_len_mut() = new_left_len as u16;\n \n-            let parent_key = slice_remove(\n-                self.parent.node.reborrow_mut().into_key_area_slice(),\n-                self.parent.idx,\n-            );\n-            left_node.reborrow_mut().into_key_area_mut_at(left_len).write(parent_key);\n+            let parent_key =\n+                slice_remove(parent_node.reborrow_mut().into_key_area_slice(), parent_idx);\n+            left_node.reborrow_mut().into_key_area_mut_at(old_left_len).write(parent_key);\n             ptr::copy_nonoverlapping(\n                 right_node.reborrow().key_area().as_ptr(),\n-                left_node.reborrow_mut().into_key_area_slice().as_mut_ptr().add(left_len + 1),\n+                left_node.reborrow_mut().into_key_area_slice().as_mut_ptr().add(old_left_len + 1),\n                 right_len,\n             );\n \n-            let parent_val = slice_remove(\n-                self.parent.node.reborrow_mut().into_val_area_slice(),\n-                self.parent.idx,\n-            );\n-            left_node.reborrow_mut().into_val_area_mut_at(left_len).write(parent_val);\n+            let parent_val =\n+                slice_remove(parent_node.reborrow_mut().into_val_area_slice(), parent_idx);\n+            left_node.reborrow_mut().into_val_area_mut_at(old_left_len).write(parent_val);\n             ptr::copy_nonoverlapping(\n                 right_node.reborrow().val_area().as_ptr(),\n-                left_node.reborrow_mut().into_val_area_slice().as_mut_ptr().add(left_len + 1),\n+                left_node.reborrow_mut().into_val_area_slice().as_mut_ptr().add(old_left_len + 1),\n                 right_len,\n             );\n \n-            slice_remove(\n-                &mut self.parent.node.reborrow_mut().into_edge_area_slice(),\n-                self.parent.idx + 1,\n-            );\n-            let parent_old_len = self.parent.node.len();\n-            self.parent.node.correct_childrens_parent_links(self.parent.idx + 1..parent_old_len);\n-            *self.parent.node.reborrow_mut().into_len_mut() -= 1;\n+            slice_remove(&mut parent_node.reborrow_mut().into_edge_area_slice(), parent_idx + 1);\n+            parent_node.correct_childrens_parent_links(parent_idx + 1..old_parent_len);\n+            *parent_node.reborrow_mut().into_len_mut() -= 1;\n \n-            if self.parent.node.height > 1 {\n+            if parent_node.height > 1 {\n                 // SAFETY: the height of the nodes being merged is one below the height\n                 // of the node of this edge, thus above zero, so they are internal.\n                 let mut left_node = left_node.reborrow_mut().cast_to_internal_unchecked();\n                 let right_node = right_node.cast_to_internal_unchecked();\n                 ptr::copy_nonoverlapping(\n                     right_node.reborrow().edge_area().as_ptr(),\n-                    left_node.reborrow_mut().into_edge_area_slice().as_mut_ptr().add(left_len + 1),\n+                    left_node\n+                        .reborrow_mut()\n+                        .into_edge_area_slice()\n+                        .as_mut_ptr()\n+                        .add(old_left_len + 1),\n                     right_len + 1,\n                 );\n \n-                left_node.correct_childrens_parent_links(left_len + 1..=left_len + 1 + right_len);\n+                left_node.correct_childrens_parent_links(old_left_len + 1..new_left_len + 1);\n \n                 Global.deallocate(right_node.node.cast(), Layout::new::<InternalNode<K, V>>());\n             } else {\n@@ -1424,7 +1423,7 @@ impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {\n             let new_idx = match track_edge_idx {\n                 None => 0,\n                 Some(LeftOrRight::Left(idx)) => idx,\n-                Some(LeftOrRight::Right(idx)) => left_len + 1 + idx,\n+                Some(LeftOrRight::Right(idx)) => old_left_len + 1 + idx,\n             };\n             Handle::new_edge(left_node, new_idx)\n         }"}]}