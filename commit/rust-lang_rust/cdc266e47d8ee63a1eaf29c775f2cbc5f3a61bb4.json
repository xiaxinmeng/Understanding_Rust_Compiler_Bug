{"sha": "cdc266e47d8ee63a1eaf29c775f2cbc5f3a61bb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYzI2NmU0N2Q4ZWU2M2ExZWFmMjljNzc1ZjJjYmM1ZjNhNjFiYjQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-05-03T20:02:24Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-05-10T06:46:19Z"}, "message": "Fix deriving(IterBytes) to use the new for-loop protocol", "tree": {"sha": "f4026e338d57414ed517ff2ca45fce5efe997976", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4026e338d57414ed517ff2ca45fce5efe997976"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdc266e47d8ee63a1eaf29c775f2cbc5f3a61bb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdc266e47d8ee63a1eaf29c775f2cbc5f3a61bb4", "html_url": "https://github.com/rust-lang/rust/commit/cdc266e47d8ee63a1eaf29c775f2cbc5f3a61bb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdc266e47d8ee63a1eaf29c775f2cbc5f3a61bb4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b01a40d45930f97e83753150dc1b39b26b3b398f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b01a40d45930f97e83753150dc1b39b26b3b398f", "html_url": "https://github.com/rust-lang/rust/commit/b01a40d45930f97e83753150dc1b39b26b3b398f"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "9eb246ffe2228815ba3c9dba23956f92b2d1abab", "filename": "src/libsyntax/ext/deriving/iter_bytes.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cdc266e47d8ee63a1eaf29c775f2cbc5f3a61bb4/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdc266e47d8ee63a1eaf29c775f2cbc5f3a61bb4/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs?ref=cdc266e47d8ee63a1eaf29c775f2cbc5f3a61bb4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast::{meta_item, item, expr};\n+use ast::{meta_item, item, expr, and};\n use codemap::span;\n use ext::base::ext_ctxt;\n use ext::build;\n@@ -31,7 +31,7 @@ pub fn expand_deriving_iter_bytes(cx: @ext_ctxt,\n                     Literal(Path::new(~[~\"bool\"])),\n                     Literal(Path::new(~[~\"core\", ~\"to_bytes\", ~\"Cb\"]))\n                 ],\n-                ret_ty: nil_ty(),\n+                ret_ty: Literal(Path::new(~[~\"bool\"])),\n                 const_nonmatching: false,\n                 combine_substructure: iter_bytes_substructure\n             }\n@@ -58,13 +58,11 @@ fn iter_bytes_substructure(cx: @ext_ctxt, span: span, substr: &Substructure) ->\n     };\n     let iter_bytes_ident = substr.method_ident;\n     let call_iterbytes = |thing_expr| {\n-        build::mk_stmt(\n-            cx, span,\n-            build::mk_method_call(cx, span,\n-                                  thing_expr, iter_bytes_ident,\n-                                  copy lsb0_f))\n+        build::mk_method_call(cx, span,\n+                              thing_expr, iter_bytes_ident,\n+                              copy lsb0_f)\n     };\n-    let mut stmts = ~[];\n+    let mut exprs = ~[];\n     let fields;\n     match *substr.fields {\n         Struct(ref fs) => {\n@@ -78,16 +76,22 @@ fn iter_bytes_substructure(cx: @ext_ctxt, span: span, substr: &Substructure) ->\n                 None => build::mk_uint(cx, span, index)\n             };\n \n-            stmts.push(call_iterbytes(discriminant));\n+            exprs.push(call_iterbytes(discriminant));\n \n             fields = fs;\n         }\n         _ => cx.span_bug(span, \"Impossible substructure in `deriving(IterBytes)`\")\n     }\n \n     for fields.each |&(_, field, _)| {\n-        stmts.push(call_iterbytes(field));\n+        exprs.push(call_iterbytes(field));\n     }\n \n-    build::mk_block(cx, span, ~[], stmts, None)\n+    if exprs.len() == 0 {\n+        cx.span_bug(span, \"#[deriving(IterBytes)] needs at least one field\");\n+    }\n+\n+    do vec::foldl(exprs[0], exprs.slice(1, exprs.len())) |prev, me| {\n+        build::mk_binary(cx, span, and, prev, *me)\n+    }\n }"}]}