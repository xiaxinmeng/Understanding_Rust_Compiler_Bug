{"sha": "49b06a2b60d07ad8b10554bcc700d1e1df014104", "node_id": "C_kwDOAAsO6NoAKDQ5YjA2YTJiNjBkMDdhZDhiMTA1NTRiY2M3MDBkMWUxZGYwMTQxMDQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-10-08T17:53:41Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2021-10-08T17:53:41Z"}, "message": "Directly call relate_types function instead of having a method wrapper", "tree": {"sha": "d7d75d8230177e5ebf0264c06ea1b91c1f4e1d8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7d75d8230177e5ebf0264c06ea1b91c1f4e1d8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49b06a2b60d07ad8b10554bcc700d1e1df014104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49b06a2b60d07ad8b10554bcc700d1e1df014104", "html_url": "https://github.com/rust-lang/rust/commit/49b06a2b60d07ad8b10554bcc700d1e1df014104", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49b06a2b60d07ad8b10554bcc700d1e1df014104/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "597090ee147b957aae81383ec68b33880b6050da", "url": "https://api.github.com/repos/rust-lang/rust/commits/597090ee147b957aae81383ec68b33880b6050da", "html_url": "https://github.com/rust-lang/rust/commit/597090ee147b957aae81383ec68b33880b6050da"}], "stats": {"total": 63, "additions": 26, "deletions": 37}, "files": [{"sha": "07eadce17738e90847b3a2eb9e8056580187998e", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/49b06a2b60d07ad8b10554bcc700d1e1df014104/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b06a2b60d07ad8b10554bcc700d1e1df014104/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=49b06a2b60d07ad8b10554bcc700d1e1df014104", "patch": "@@ -1153,19 +1153,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         .convert_all(data);\n     }\n \n-    /// Convenient wrapper around `relate_tys::relate_types` -- see\n-    /// that fn for docs.\n-    fn relate_types(\n-        &mut self,\n-        a: Ty<'tcx>,\n-        v: ty::Variance,\n-        b: Ty<'tcx>,\n-        locations: Locations,\n-        category: ConstraintCategory,\n-    ) -> Fallible<()> {\n-        relate_tys::relate_types(self, a, v, b, locations, category)\n-    }\n-\n     /// Try to relate `sub <: sup`\n     fn sub_types(\n         &mut self,"}, {"sha": "415d1abaa8b089fdeb453251f99242f4563587a5", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/49b06a2b60d07ad8b10554bcc700d1e1df014104/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b06a2b60d07ad8b10554bcc700d1e1df014104/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=49b06a2b60d07ad8b10554bcc700d1e1df014104", "patch": "@@ -9,30 +9,32 @@ use crate::constraints::OutlivesConstraint;\n use crate::diagnostics::UniverseInfo;\n use crate::type_check::{Locations, TypeChecker};\n \n-/// Adds sufficient constraints to ensure that `a R b` where `R` depends on `v`:\n-///\n-/// - \"Covariant\" `a <: b`\n-/// - \"Invariant\" `a == b`\n-/// - \"Contravariant\" `a :> b`\n-///\n-/// N.B., the type `a` is permitted to have unresolved inference\n-/// variables, but not the type `b`.\n-#[instrument(skip(type_checker), level = \"debug\")]\n-pub(super) fn relate_types<'tcx>(\n-    type_checker: &mut TypeChecker<'_, 'tcx>,\n-    a: Ty<'tcx>,\n-    v: ty::Variance,\n-    b: Ty<'tcx>,\n-    locations: Locations,\n-    category: ConstraintCategory,\n-) -> Fallible<()> {\n-    TypeRelating::new(\n-        type_checker.infcx,\n-        NllTypeRelatingDelegate::new(type_checker, locations, category, UniverseInfo::relate(a, b)),\n-        v,\n-    )\n-    .relate(a, b)?;\n-    Ok(())\n+impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n+    /// Adds sufficient constraints to ensure that `a R b` where `R` depends on `v`:\n+    ///\n+    /// - \"Covariant\" `a <: b`\n+    /// - \"Invariant\" `a == b`\n+    /// - \"Contravariant\" `a :> b`\n+    ///\n+    /// N.B., the type `a` is permitted to have unresolved inference\n+    /// variables, but not the type `b`.\n+    #[instrument(skip(self), level = \"debug\")]\n+    pub(super) fn relate_types(\n+        &mut self,\n+        a: Ty<'tcx>,\n+        v: ty::Variance,\n+        b: Ty<'tcx>,\n+        locations: Locations,\n+        category: ConstraintCategory,\n+    ) -> Fallible<()> {\n+        TypeRelating::new(\n+            self.infcx,\n+            NllTypeRelatingDelegate::new(self, locations, category, UniverseInfo::relate(a, b)),\n+            v,\n+        )\n+        .relate(a, b)?;\n+        Ok(())\n+    }\n }\n \n struct NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {"}]}