{"sha": "7a05f1db7cb85ead062d6a7dde566f6e3010f2f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMDVmMWRiN2NiODVlYWQwNjJkNmE3ZGRlNTY2ZjZlMzAxMGYyZjI=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-01T22:17:34Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-01T22:19:55Z"}, "message": "Fix closures over dynamically-sized polymorphic values.", "tree": {"sha": "ceae8d45f7d86109f7e6dc238bd11ef9d13f0542", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ceae8d45f7d86109f7e6dc238bd11ef9d13f0542"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a05f1db7cb85ead062d6a7dde566f6e3010f2f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a05f1db7cb85ead062d6a7dde566f6e3010f2f2", "html_url": "https://github.com/rust-lang/rust/commit/7a05f1db7cb85ead062d6a7dde566f6e3010f2f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a05f1db7cb85ead062d6a7dde566f6e3010f2f2/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "601c299d5267b4fc6d470240eb7e323955e288d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/601c299d5267b4fc6d470240eb7e323955e288d0", "html_url": "https://github.com/rust-lang/rust/commit/601c299d5267b4fc6d470240eb7e323955e288d0"}], "stats": {"total": 61, "additions": 44, "deletions": 17}, "files": [{"sha": "a7f7d0c220fed62d3f170a8046b9bc3f8ce4a4ba", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 44, "deletions": 17, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/7a05f1db7cb85ead062d6a7dde566f6e3010f2f2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a05f1db7cb85ead062d6a7dde566f6e3010f2f2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=7a05f1db7cb85ead062d6a7dde566f6e3010f2f2", "patch": "@@ -809,7 +809,6 @@ fn GEP_tag(cx: @block_ctxt, llblobptr: ValueRef, tag_id: &ast::def_id,\n     ret rslt(rs.bcx, val);\n }\n \n-\n // trans_raw_malloc: expects a type indicating which pointer type we want and\n // a size indicating how much space we want malloc'd.\n fn trans_raw_malloc(cx: &@block_ctxt, llptr_ty: TypeRef, llsize: ValueRef) ->\n@@ -3813,6 +3812,36 @@ fn build_environment(cx: &@block_ctxt, upvars: &@ast::node_id[]) ->\n     ret {ptr: llenvptr, ptrty: llenvptrty};\n }\n \n+// Return a pointer to the stored typarams in a closure.\n+// This is awful. Since the size of the bindings stored in the closure might\n+// be dynamically sized, we can't skip past them to get to the tydescs until\n+// we have loaded the tydescs. Thus we use the stored size of the bindings\n+// in the tydesc for the closure to skip over them. Ugh.\n+fn find_environment_tydescs(bcx: &@block_ctxt, envty: &ty::t,\n+                            closure: ValueRef) -> ValueRef {\n+    ret if !ty::type_has_dynamic_size(bcx_tcx(bcx), envty) {\n+        // If we can find the typarams statically, do it\n+        GEPi(bcx, closure,\n+             ~[0, abi::box_rc_field_body, abi::closure_elt_ty_params])\n+    } else {\n+        // Ugh. We need to load the size of the bindings out of the\n+        // closure's tydesc and use that to skip over the bindings.\n+        let descsty =\n+            ty::get_element_type(bcx_tcx(bcx), envty,\n+                                 abi::closure_elt_ty_params as uint);\n+        let llenv = GEPi(bcx, closure, ~[0, abi::box_rc_field_body]);\n+        // Load the tydesc and find the size of the body\n+        let lldesc =\n+            bcx.build.Load(GEPi(bcx, llenv, ~[0, abi::closure_elt_tydesc]));\n+        let llsz = bcx.build.Load(\n+            GEPi(bcx, lldesc, ~[0, abi::tydesc_field_size]));\n+\n+        // Get the bindings pointer and add the size to it\n+        let llbinds = GEPi(bcx, llenv, ~[0, abi::closure_elt_bindings]);\n+        bump_ptr(bcx, descsty, llbinds, llsz)\n+    }\n+}\n+\n fn load_environment_heap(enclosing_cx: &@block_ctxt, fcx: &@fn_ctxt,\n                          envty: &ty::t, upvars: &@ast::node_id[]) {\n     let bcx = new_raw_block_ctxt(fcx, fcx.llcopyargs);\n@@ -3821,31 +3850,29 @@ fn load_environment_heap(enclosing_cx: &@block_ctxt, fcx: &@fn_ctxt,\n     let llty = type_of(bcx_ccx(bcx), bcx.sp, ty);\n     let llclosure = bcx.build.PointerCast(fcx.llenv, llty);\n \n-    let path = ~[0, abi::box_rc_field_body];\n+    // Populate the type parameters from the environment. We need to\n+    // do this first because the tydescs are needed to index into\n+    // the bindings if they are dynamically sized.\n+    let tydesc_count = std::ivec::len(enclosing_cx.fcx.lltydescs);\n+    let lltydescs = find_environment_tydescs(bcx, envty, llclosure);\n+    let i = 0u;\n+    while i < tydesc_count {\n+        let lltydescptr = GEPi(bcx, lltydescs, ~[0, i as int]);\n+        fcx.lltydescs += ~[bcx.build.Load(lltydescptr)];\n+        i += 1u;\n+    }\n \n     // Populate the upvars from the environment.\n-    let bindings_path = path + ~[abi::closure_elt_bindings];\n-    let i = 0u;\n+    let path = ~[0, abi::box_rc_field_body, abi::closure_elt_bindings];\n+    i = 0u;\n     for upvar_id: ast::node_id  in *upvars {\n         let llupvarptr =\n-            GEP_tup_like(bcx, ty, llclosure, bindings_path + ~[i as int]);\n+            GEP_tup_like(bcx, ty, llclosure, path + ~[i as int]);\n         bcx = llupvarptr.bcx;\n         let def_id = ast::def_id_of_def(bcx_tcx(bcx).def_map.get(upvar_id));\n         fcx.llupvars.insert(def_id.node, llupvarptr.val);\n         i += 1u;\n     }\n-\n-    // Populate the type parameters from the environment.\n-    let tydesc_count = std::ivec::len(enclosing_cx.fcx.lltydescs);\n-    let tydesc_path = path + ~[abi::closure_elt_ty_params];\n-    i = 0u;\n-    while i < tydesc_count {\n-        let lltydescptr =\n-            GEP_tup_like(bcx, ty, llclosure, tydesc_path + ~[i as int]);\n-        bcx = lltydescptr.bcx;\n-        fcx.lltydescs += ~[bcx.build.Load(lltydescptr.val)];\n-        i += 1u;\n-    }\n }\n \n "}]}