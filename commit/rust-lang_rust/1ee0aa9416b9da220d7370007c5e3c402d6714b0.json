{"sha": "1ee0aa9416b9da220d7370007c5e3c402d6714b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZTBhYTk0MTZiOWRhMjIwZDczNzAwMDdjNWUzYzQwMmQ2NzE0YjA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-07T09:02:54Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-07T09:02:54Z"}, "message": "Move BackendConfig to config.rs", "tree": {"sha": "293a6214983de86bbc3002dc22710d4b8f1c864c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/293a6214983de86bbc3002dc22710d4b8f1c864c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ee0aa9416b9da220d7370007c5e3c402d6714b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ee0aa9416b9da220d7370007c5e3c402d6714b0", "html_url": "https://github.com/rust-lang/rust/commit/1ee0aa9416b9da220d7370007c5e3c402d6714b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ee0aa9416b9da220d7370007c5e3c402d6714b0/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d7d08f338354f25cf8f3384376bd5db0c3104f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d7d08f338354f25cf8f3384376bd5db0c3104f9", "html_url": "https://github.com/rust-lang/rust/commit/3d7d08f338354f25cf8f3384376bd5db0c3104f9"}], "stats": {"total": 99, "additions": 51, "deletions": 48}, "files": [{"sha": "9b3259b622ea200f3c03c9069a716ee80f0368f4", "filename": "src/config.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0aa9416b9da220d7370007c5e3c402d6714b0/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0aa9416b9da220d7370007c5e3c402d6714b0/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=1ee0aa9416b9da220d7370007c5e3c402d6714b0", "patch": "@@ -0,0 +1,49 @@\n+use std::str::FromStr;\n+\n+#[derive(Copy, Clone, Debug)]\n+pub enum CodegenMode {\n+    Aot,\n+    Jit,\n+    JitLazy,\n+}\n+\n+impl Default for CodegenMode {\n+    fn default() -> Self {\n+        CodegenMode::Aot\n+    }\n+}\n+\n+impl FromStr for CodegenMode {\n+    type Err = String;\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        match s {\n+            \"aot\" => Ok(CodegenMode::Aot),\n+            \"jit\" => Ok(CodegenMode::Jit),\n+            \"jit-lazy\" => Ok(CodegenMode::JitLazy),\n+            _ => Err(format!(\"Unknown codegen mode `{}`\", s)),\n+        }\n+    }\n+}\n+\n+#[derive(Copy, Clone, Debug, Default)]\n+pub struct BackendConfig {\n+    pub codegen_mode: CodegenMode,\n+}\n+\n+impl BackendConfig {\n+    pub fn from_opts(opts: &[String]) -> Result<Self, String> {\n+        let mut config = BackendConfig::default();\n+        for opt in opts {\n+            if let Some((name, value)) = opt.split_once('=') {\n+                match name {\n+                    \"mode\" => config.codegen_mode = value.parse()?,\n+                    _ => return Err(format!(\"Unknown option `{}`\", name)),\n+                }\n+            } else {\n+                return Err(format!(\"Invalid option `{}`\", opt));\n+            }\n+        }\n+        Ok(config)\n+    }\n+}"}, {"sha": "77c6247e1576673aa0f0f51fb0d976399118e739", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 48, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0aa9416b9da220d7370007c5e3c402d6714b0/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0aa9416b9da220d7370007c5e3c402d6714b0/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1ee0aa9416b9da220d7370007c5e3c402d6714b0", "patch": "@@ -23,7 +23,6 @@ extern crate rustc_target;\n extern crate rustc_driver;\n \n use std::any::Any;\n-use std::str::FromStr;\n \n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_codegen_ssa::CodegenResults;\n@@ -36,6 +35,7 @@ use rustc_session::Session;\n \n use cranelift_codegen::settings::{self, Configurable};\n \n+pub use crate::config::*;\n use crate::constant::ConstantCx;\n use crate::prelude::*;\n \n@@ -49,6 +49,7 @@ mod cast;\n mod codegen_i128;\n mod common;\n mod compiler_builtins;\n+mod config;\n mod constant;\n mod debuginfo;\n mod discriminant;\n@@ -161,53 +162,6 @@ impl<'m, 'tcx> CodegenCx<'m, 'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug)]\n-pub enum CodegenMode {\n-    Aot,\n-    Jit,\n-    JitLazy,\n-}\n-\n-impl Default for CodegenMode {\n-    fn default() -> Self {\n-        CodegenMode::Aot\n-    }\n-}\n-\n-impl FromStr for CodegenMode {\n-    type Err = String;\n-\n-    fn from_str(s: &str) -> Result<Self, Self::Err> {\n-        match s {\n-            \"aot\" => Ok(CodegenMode::Aot),\n-            \"jit\" => Ok(CodegenMode::Jit),\n-            \"jit-lazy\" => Ok(CodegenMode::JitLazy),\n-            _ => Err(format!(\"Unknown codegen mode `{}`\", s)),\n-        }\n-    }\n-}\n-\n-#[derive(Copy, Clone, Debug, Default)]\n-pub struct BackendConfig {\n-    pub codegen_mode: CodegenMode,\n-}\n-\n-impl BackendConfig {\n-    fn from_opts(opts: &[String]) -> Result<Self, String> {\n-        let mut config = BackendConfig::default();\n-        for opt in opts {\n-            if let Some((name, value)) = opt.split_once('=') {\n-                match name {\n-                    \"mode\" => config.codegen_mode = value.parse()?,\n-                    _ => return Err(format!(\"Unknown option `{}`\", name)),\n-                }\n-            } else {\n-                return Err(format!(\"Invalid option `{}`\", opt));\n-            }\n-        }\n-        Ok(config)\n-    }\n-}\n \n pub struct CraneliftCodegenBackend {\n     pub config: Option<BackendConfig>,"}]}