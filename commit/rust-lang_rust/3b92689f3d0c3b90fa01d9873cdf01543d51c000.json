{"sha": "3b92689f3d0c3b90fa01d9873cdf01543d51c000", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiOTI2ODlmM2QwYzNiOTBmYTAxZDk4NzNjZGYwMTU0M2Q1MWMwMDA=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-12-26T18:54:33Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-12-26T18:55:17Z"}, "message": "Relax bounds on HashMap to match hashbrown\n\nNo functional changes are made, and all APIs are moved to strictly less\nrestrictive bounds.\n\nThese APIs changed from the old bound listed to no trait bounds:\n\nK: Hash + Eq\n* new\n* with_capacity\n\nK: Eq + Hash, S: BuildHasher\n* with_hasher\n* with_capacity_and_hasher\n* hasher\n\nK: Eq + Hash + Debug -> K: Debug\nS: BuildHasher -> S\n<HashMap as Debug>\n\nK: Eq + Hash -> K\nS: BuildHasher + Default -> S: Default\n<HashMap as Default>", "tree": {"sha": "214d4c563b557f79aa115299ba8e94f29c55ec0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/214d4c563b557f79aa115299ba8e94f29c55ec0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b92689f3d0c3b90fa01d9873cdf01543d51c000", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b92689f3d0c3b90fa01d9873cdf01543d51c000", "html_url": "https://github.com/rust-lang/rust/commit/3b92689f3d0c3b90fa01d9873cdf01543d51c000", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b92689f3d0c3b90fa01d9873cdf01543d51c000/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ac40b69c75929dac5115b6a49eb4f1ecc352416", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ac40b69c75929dac5115b6a49eb4f1ecc352416", "html_url": "https://github.com/rust-lang/rust/commit/3ac40b69c75929dac5115b6a49eb4f1ecc352416"}], "stats": {"total": 126, "additions": 62, "deletions": 64}, "files": [{"sha": "84e1cee5d66b92b883aa33e6558d4c03c62ff9bf", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 62, "deletions": 64, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/3b92689f3d0c3b90fa01d9873cdf01543d51c000/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b92689f3d0c3b90fa01d9873cdf01543d51c000/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=3b92689f3d0c3b90fa01d9873cdf01543d51c000", "patch": "@@ -203,7 +203,7 @@ pub struct HashMap<K, V, S = RandomState> {\n     base: base::HashMap<K, V, S>,\n }\n \n-impl<K: Hash + Eq, V> HashMap<K, V, RandomState> {\n+impl<K, V> HashMap<K, V, RandomState> {\n     /// Creates an empty `HashMap`.\n     ///\n     /// The hash map is initially created with a capacity of 0, so it will not allocate until it\n@@ -240,6 +240,59 @@ impl<K: Hash + Eq, V> HashMap<K, V, RandomState> {\n }\n \n impl<K, V, S> HashMap<K, V, S> {\n+    /// Creates an empty `HashMap` which will use the given hash builder to hash\n+    /// keys.\n+    ///\n+    /// The created map has the default initial capacity.\n+    ///\n+    /// Warning: `hash_builder` is normally randomly generated, and\n+    /// is designed to allow HashMaps to be resistant to attacks that\n+    /// cause many collisions and very poor performance. Setting it\n+    /// manually using this function can expose a DoS attack vector.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashMap;\n+    /// use std::collections::hash_map::RandomState;\n+    ///\n+    /// let s = RandomState::new();\n+    /// let mut map = HashMap::with_hasher(s);\n+    /// map.insert(1, 2);\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"hashmap_build_hasher\", since = \"1.7.0\")]\n+    pub fn with_hasher(hash_builder: S) -> HashMap<K, V, S> {\n+        HashMap { base: base::HashMap::with_hasher(hash_builder) }\n+    }\n+\n+    /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`\n+    /// to hash the keys.\n+    ///\n+    /// The hash map will be able to hold at least `capacity` elements without\n+    /// reallocating. If `capacity` is 0, the hash map will not allocate.\n+    ///\n+    /// Warning: `hash_builder` is normally randomly generated, and\n+    /// is designed to allow HashMaps to be resistant to attacks that\n+    /// cause many collisions and very poor performance. Setting it\n+    /// manually using this function can expose a DoS attack vector.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashMap;\n+    /// use std::collections::hash_map::RandomState;\n+    ///\n+    /// let s = RandomState::new();\n+    /// let mut map = HashMap::with_capacity_and_hasher(10, s);\n+    /// map.insert(1, 2);\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"hashmap_build_hasher\", since = \"1.7.0\")]\n+    pub fn with_capacity_and_hasher(capacity: usize, hash_builder: S) -> HashMap<K, V, S> {\n+        HashMap { base: base::HashMap::with_capacity_and_hasher(capacity, hash_builder) }\n+    }\n+\n     /// Returns the number of elements the map can hold without reallocating.\n     ///\n     /// This number is a lower bound; the `HashMap<K, V>` might be able to hold\n@@ -457,65 +510,6 @@ impl<K, V, S> HashMap<K, V, S> {\n     pub fn clear(&mut self) {\n         self.base.clear();\n     }\n-}\n-\n-impl<K, V, S> HashMap<K, V, S>\n-where\n-    K: Eq + Hash,\n-    S: BuildHasher,\n-{\n-    /// Creates an empty `HashMap` which will use the given hash builder to hash\n-    /// keys.\n-    ///\n-    /// The created map has the default initial capacity.\n-    ///\n-    /// Warning: `hash_builder` is normally randomly generated, and\n-    /// is designed to allow HashMaps to be resistant to attacks that\n-    /// cause many collisions and very poor performance. Setting it\n-    /// manually using this function can expose a DoS attack vector.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::HashMap;\n-    /// use std::collections::hash_map::RandomState;\n-    ///\n-    /// let s = RandomState::new();\n-    /// let mut map = HashMap::with_hasher(s);\n-    /// map.insert(1, 2);\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"hashmap_build_hasher\", since = \"1.7.0\")]\n-    pub fn with_hasher(hash_builder: S) -> HashMap<K, V, S> {\n-        HashMap { base: base::HashMap::with_hasher(hash_builder) }\n-    }\n-\n-    /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`\n-    /// to hash the keys.\n-    ///\n-    /// The hash map will be able to hold at least `capacity` elements without\n-    /// reallocating. If `capacity` is 0, the hash map will not allocate.\n-    ///\n-    /// Warning: `hash_builder` is normally randomly generated, and\n-    /// is designed to allow HashMaps to be resistant to attacks that\n-    /// cause many collisions and very poor performance. Setting it\n-    /// manually using this function can expose a DoS attack vector.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::HashMap;\n-    /// use std::collections::hash_map::RandomState;\n-    ///\n-    /// let s = RandomState::new();\n-    /// let mut map = HashMap::with_capacity_and_hasher(10, s);\n-    /// map.insert(1, 2);\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"hashmap_build_hasher\", since = \"1.7.0\")]\n-    pub fn with_capacity_and_hasher(capacity: usize, hash_builder: S) -> HashMap<K, V, S> {\n-        HashMap { base: base::HashMap::with_capacity_and_hasher(capacity, hash_builder) }\n-    }\n \n     /// Returns a reference to the map's [`BuildHasher`].\n     ///\n@@ -536,7 +530,13 @@ where\n     pub fn hasher(&self) -> &S {\n         self.base.hasher()\n     }\n+}\n \n+impl<K, V, S> HashMap<K, V, S>\n+where\n+    K: Eq + Hash,\n+    S: BuildHasher,\n+{\n     /// Reserves capacity for at least `additional` more elements to be inserted\n     /// in the `HashMap`. The collection may reserve more space to avoid\n     /// frequent reallocations.\n@@ -984,9 +984,8 @@ where\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K, V, S> Debug for HashMap<K, V, S>\n where\n-    K: Eq + Hash + Debug,\n+    K: Debug,\n     V: Debug,\n-    S: BuildHasher,\n {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_map().entries(self.iter()).finish()\n@@ -996,8 +995,7 @@ where\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K, V, S> Default for HashMap<K, V, S>\n where\n-    K: Eq + Hash,\n-    S: BuildHasher + Default,\n+    S: Default,\n {\n     /// Creates an empty `HashMap<K, V, S>`, with the `Default` value for the hasher.\n     #[inline]"}]}