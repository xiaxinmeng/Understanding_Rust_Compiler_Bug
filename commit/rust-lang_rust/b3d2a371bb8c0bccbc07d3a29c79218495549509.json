{"sha": "b3d2a371bb8c0bccbc07d3a29c79218495549509", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzZDJhMzcxYmI4YzBiY2NiYzA3ZDNhMjljNzkyMTg0OTU1NDk1MDk=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-02-21T22:35:15Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-06T03:39:08Z"}, "message": "rustdoc: Make a bunch of fields private\n\nAlso create issue for removing shared mutable state.", "tree": {"sha": "fe23864976580028c9f9b09a8494745ec5eeb53b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe23864976580028c9f9b09a8494745ec5eeb53b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3d2a371bb8c0bccbc07d3a29c79218495549509", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3d2a371bb8c0bccbc07d3a29c79218495549509", "html_url": "https://github.com/rust-lang/rust/commit/b3d2a371bb8c0bccbc07d3a29c79218495549509", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3d2a371bb8c0bccbc07d3a29c79218495549509/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4bb66c2842cdd433ad6dbe1168726ff1ca148d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4bb66c2842cdd433ad6dbe1168726ff1ca148d3", "html_url": "https://github.com/rust-lang/rust/commit/c4bb66c2842cdd433ad6dbe1168726ff1ca148d3"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "e8d323b9af18f17441be11352842f55c404efba0", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b3d2a371bb8c0bccbc07d3a29c79218495549509/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d2a371bb8c0bccbc07d3a29c79218495549509/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=b3d2a371bb8c0bccbc07d3a29c79218495549509", "patch": "@@ -44,15 +44,20 @@ use crate::html::{layout, sources};\n crate struct Context<'tcx> {\n     /// Current hierarchy of components leading down to what's currently being\n     /// rendered\n-    crate current: Vec<String>,\n+    pub(super) current: Vec<String>,\n     /// The current destination folder of where HTML artifacts should be placed.\n     /// This changes as the context descends into the module hierarchy.\n-    crate dst: PathBuf,\n+    pub(super) dst: PathBuf,\n     /// A flag, which when `true`, will render pages which redirect to the\n     /// real location of an item. This is used to allow external links to\n     /// publicly reused items to redirect to the right location.\n-    crate render_redirect_pages: bool,\n-    crate shared: Rc<SharedContext<'tcx>>,\n+    pub(super) render_redirect_pages: bool,\n+    /// Shared mutable state.\n+    ///\n+    /// Issue for improving the situation: [#82381][]\n+    ///\n+    /// [#82381]: https://github.com/rust-lang/rust/issues/82381\n+    pub(super) shared: Rc<SharedContext<'tcx>>,\n     /// The [`Cache`] used during rendering.\n     ///\n     /// Ideally the cache would be in [`SharedContext`], but it's mutated\n@@ -62,7 +67,7 @@ crate struct Context<'tcx> {\n     /// It's immutable once in `Context`, so it's not as bad that it's not in\n     /// `SharedContext`.\n     // FIXME: move `cache` to `SharedContext`\n-    crate cache: Rc<Cache>,\n+    pub(super) cache: Rc<Cache>,\n }\n \n impl<'tcx> Context<'tcx> {"}, {"sha": "c074b789e7433751191ab4be7c217d59935d4f7f", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b3d2a371bb8c0bccbc07d3a29c79218495549509/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3d2a371bb8c0bccbc07d3a29c79218495549509/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=b3d2a371bb8c0bccbc07d3a29c79218495549509", "patch": "@@ -81,6 +81,7 @@ crate fn ensure_trailing_slash(v: &str) -> impl fmt::Display + '_ {\n     })\n }\n \n+/// Shared mutable state used in [`Context`] and elsewhere.\n crate struct SharedContext<'tcx> {\n     crate tcx: TyCtxt<'tcx>,\n     /// The path to the crate root source minus the file name.\n@@ -96,16 +97,16 @@ crate struct SharedContext<'tcx> {\n     /// The local file sources we've emitted and their respective url-paths.\n     crate local_sources: FxHashMap<PathBuf, String>,\n     /// Whether the collapsed pass ran\n-    crate collapsed: bool,\n+    collapsed: bool,\n     /// The base-URL of the issue tracker for when an item has been tagged with\n     /// an issue number.\n-    crate issue_tracker_base_url: Option<String>,\n+    issue_tracker_base_url: Option<String>,\n     /// The directories that have already been created in this doc run. Used to reduce the number\n     /// of spurious `create_dir_all` calls.\n-    crate created_dirs: RefCell<FxHashSet<PathBuf>>,\n+    created_dirs: RefCell<FxHashSet<PathBuf>>,\n     /// This flag indicates whether listings of modules (in the side bar and documentation itself)\n     /// should be ordered alphabetically or in order of appearance (in the source code).\n-    crate sort_modules_alphabetically: bool,\n+    sort_modules_alphabetically: bool,\n     /// Additional CSS files to be added to the generated docs.\n     crate style_files: Vec<StylePath>,\n     /// Suffix to be added on resource files (if suffix is \"-v2\" then \"light.css\" becomes\n@@ -118,7 +119,7 @@ crate struct SharedContext<'tcx> {\n     crate fs: DocFS,\n     /// The default edition used to parse doctests.\n     crate edition: Edition,\n-    crate codes: ErrorCodes,\n+    codes: ErrorCodes,\n     playground: Option<markdown::Playground>,\n     /// The map used to ensure all generated 'id=' attributes are unique.\n     id_map: RefCell<IdMap>,\n@@ -128,11 +129,11 @@ crate struct SharedContext<'tcx> {\n     all: RefCell<AllTypes>,\n     /// Storage for the errors produced while generating documentation so they\n     /// can be printed together at the end.\n-    crate errors: Receiver<String>,\n+    errors: Receiver<String>,\n     /// `None` by default, depends on the `generate-redirect-map` option flag. If this field is set\n     /// to `Some(...)`, it'll store redirections and then generate a JSON file at the top level of\n     /// the crate.\n-    crate redirections: Option<RefCell<FxHashMap<String, String>>>,\n+    redirections: Option<RefCell<FxHashMap<String, String>>>,\n }\n \n impl SharedContext<'_> {"}]}