{"sha": "c603b9043fd530c11d3001eb62b1315c5aa1afe0", "node_id": "C_kwDOAAsO6NoAKGM2MDNiOTA0M2ZkNTMwYzExZDMwMDFlYjYyYjEzMTVjNWFhMWFmZTA", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-11-27T17:50:07Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-05T12:32:39Z"}, "message": "feat: make hightlighting linear\n\nIn https://youtu.be/qvIZZf5dmTE, we've noticed that AstIdMap does a\nlinear lookup when going from SyntaxNode to Id. This leads to\naccidentally quadratic overall performance. Replace linear lookup with a\nO(1) hashmap lookup.\n\nFuture work: don't duplicate `SyntaxNodePtr` in `AstIdMap` and switch to\n\"call site dependency injection\" style storage (eg, store a\n`HashSet<ErasedFileAstId>`).\n\nSee the explanation of the work here on YouTube\nhttps://youtu.be/wvEgymUm7cY :-)", "tree": {"sha": "776f0196c5fb5eaff1b9ad2e9bf5cea0f5b89d8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/776f0196c5fb5eaff1b9ad2e9bf5cea0f5b89d8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c603b9043fd530c11d3001eb62b1315c5aa1afe0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c603b9043fd530c11d3001eb62b1315c5aa1afe0", "html_url": "https://github.com/rust-lang/rust/commit/c603b9043fd530c11d3001eb62b1315c5aa1afe0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c603b9043fd530c11d3001eb62b1315c5aa1afe0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b519a179b456c24dc8bcb675c2af6c0fd0733c29", "url": "https://api.github.com/repos/rust-lang/rust/commits/b519a179b456c24dc8bcb675c2af6c0fd0733c29", "html_url": "https://github.com/rust-lang/rust/commit/b519a179b456c24dc8bcb675c2af6c0fd0733c29"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "64387b8148207e2c1b88795dd8717d43fab0e7ed", "filename": "crates/hir_expand/src/ast_id_map.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c603b9043fd530c11d3001eb62b1315c5aa1afe0/crates%2Fhir_expand%2Fsrc%2Fast_id_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c603b9043fd530c11d3001eb62b1315c5aa1afe0/crates%2Fhir_expand%2Fsrc%2Fast_id_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fast_id_map.rs?ref=c603b9043fd530c11d3001eb62b1315c5aa1afe0", "patch": "@@ -14,6 +14,7 @@ use std::{\n \n use la_arena::{Arena, Idx};\n use profile::Count;\n+use rustc_hash::FxHashMap;\n use syntax::{ast, match_ast, AstNode, AstPtr, SyntaxNode, SyntaxNodePtr};\n \n /// `AstId` points to an AST node in a specific file.\n@@ -63,6 +64,7 @@ type ErasedFileAstId = Idx<SyntaxNodePtr>;\n #[derive(Debug, PartialEq, Eq, Default)]\n pub struct AstIdMap {\n     arena: Arena<SyntaxNodePtr>,\n+    map: FxHashMap<SyntaxNodePtr, ErasedFileAstId>,\n     _c: Count<Self>,\n }\n \n@@ -89,23 +91,24 @@ impl AstIdMap {\n                 }\n             }\n         });\n+        res.map.extend(res.arena.iter().map(|(idx, ptr)| (ptr.clone(), idx)));\n         res\n     }\n \n     pub fn ast_id<N: AstNode>(&self, item: &N) -> FileAstId<N> {\n         let raw = self.erased_ast_id(item.syntax());\n         FileAstId { raw, _ty: PhantomData }\n     }\n+\n     fn erased_ast_id(&self, item: &SyntaxNode) -> ErasedFileAstId {\n         let ptr = SyntaxNodePtr::new(item);\n-        match self.arena.iter().find(|(_id, i)| **i == ptr) {\n-            Some((it, _)) => it,\n-            None => panic!(\n+        *self.map.get(&ptr).unwrap_or_else(|| {\n+            panic!(\n                 \"Can't find {:?} in AstIdMap:\\n{:?}\",\n                 item,\n                 self.arena.iter().map(|(_id, i)| i).collect::<Vec<_>>(),\n-            ),\n-        }\n+            )\n+        })\n     }\n \n     pub fn get<N: AstNode>(&self, id: FileAstId<N>) -> AstPtr<N> {"}]}