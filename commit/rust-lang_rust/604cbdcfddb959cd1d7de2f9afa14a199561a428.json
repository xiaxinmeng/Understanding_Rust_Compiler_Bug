{"sha": "604cbdcfddb959cd1d7de2f9afa14a199561a428", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNGNiZGNmZGRiOTU5Y2QxZDdkZTJmOWFmYTE0YTE5OTU2MWE0Mjg=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-12-16T04:00:19Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-01-29T20:37:42Z"}, "message": "Fix unused 'mut' warning for capture's root variable", "tree": {"sha": "f711c27d880cc8c09ccfd6b7f7a5546b9c289539", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f711c27d880cc8c09ccfd6b7f7a5546b9c289539"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/604cbdcfddb959cd1d7de2f9afa14a199561a428", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/604cbdcfddb959cd1d7de2f9afa14a199561a428", "html_url": "https://github.com/rust-lang/rust/commit/604cbdcfddb959cd1d7de2f9afa14a199561a428", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/604cbdcfddb959cd1d7de2f9afa14a199561a428/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0897db56098dd8e8355017f4364bc88f1e4f26c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0897db56098dd8e8355017f4364bc88f1e4f26c0", "html_url": "https://github.com/rust-lang/rust/commit/0897db56098dd8e8355017f4364bc88f1e4f26c0"}], "stats": {"total": 96, "additions": 75, "deletions": 21}, "files": [{"sha": "6e1e5c65aea6dd1a6a220d98dc84a2ac82489643", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/604cbdcfddb959cd1d7de2f9afa14a199561a428/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604cbdcfddb959cd1d7de2f9afa14a199561a428/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=604cbdcfddb959cd1d7de2f9afa14a199561a428", "patch": "@@ -1369,13 +1369,38 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n     fn propagate_closure_used_mut_upvar(&mut self, operand: &Operand<'tcx>) {\n         let propagate_closure_used_mut_place = |this: &mut Self, place: Place<'tcx>| {\n-            if !place.projection.is_empty() {\n-                if let Some(field) = this.is_upvar_field_projection(place.as_ref()) {\n+            // We have three possiblities here:\n+            // a. We are modifying something through a mut-ref\n+            // b. We are modifying something that is local to our parent\n+            // c. Current body is a nested clsoure, and we are modifying path starting from\n+            //    a Place captured by our parent closure.\n+\n+            // Handle (c), the path being modified is exactly the path captured by our parent\n+            if let Some(field) = this.is_upvar_field_projection(place.as_ref()) {\n+                this.used_mut_upvars.push(field);\n+                return;\n+            }\n+\n+            for (place_ref, proj) in place.iter_projections().rev() {\n+                // Handle (a)\n+                if proj == ProjectionElem::Deref {\n+                    match place_ref.ty(this.body(), this.infcx.tcx).ty.kind() {\n+                        // We aren't modifying a variable directly\n+                        ty::Ref(_, _, hir::Mutability::Mut) => return,\n+\n+                        _ => {}\n+                    }\n+                }\n+\n+                // Handle (c)\n+                if let Some(field) = this.is_upvar_field_projection(place_ref) {\n                     this.used_mut_upvars.push(field);\n+                    return;\n                 }\n-            } else {\n-                this.used_mut.insert(place.local);\n             }\n+\n+            // Handle(b)\n+            this.used_mut.insert(place.local);\n         };\n \n         // This relies on the current way that by-value"}, {"sha": "4007a5a48aaecb4d94efedec5dc465996653a36c", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/move_closure.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/604cbdcfddb959cd1d7de2f9afa14a199561a428/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmove_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604cbdcfddb959cd1d7de2f9afa14a199561a428/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmove_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmove_closure.rs?ref=604cbdcfddb959cd1d7de2f9afa14a199561a428", "patch": "@@ -29,19 +29,36 @@ fn struct_contains_ref_to_another_struct() {\n     c();\n }\n \n-fn no_ref() {\n-    struct S(String);\n-    struct T(S);\n+#[derive(Debug)]\n+struct S(String);\n \n-    let t = T(S(\"s\".into()));\n+#[derive(Debug)]\n+struct T(S);\n+\n+fn no_ref() {\n+    let mut t = T(S(\"s\".into()));\n     let mut c = move || {\n         t.0.0 = \"new S\".into();\n     };\n     c();\n }\n \n+fn no_ref_nested() {\n+    let mut t = T(S(\"s\".into()));\n+    let c = || {\n+        println!(\"{:?}\", t.0);\n+        let mut c = move || {\n+            t.0.0 = \"new S\".into();\n+            println!(\"{:?}\", t.0.0);\n+        };\n+        c();\n+    };\n+    c();\n+}\n+\n fn main() {\n     simple_ref();\n     struct_contains_ref_to_another_struct();\n     no_ref();\n+    no_ref_nested();\n }"}, {"sha": "c1d8ba575d6fd0bcbf428d25ac4f6525a55c7683", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/move_closure.stderr", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/604cbdcfddb959cd1d7de2f9afa14a199561a428/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmove_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/604cbdcfddb959cd1d7de2f9afa14a199561a428/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmove_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmove_closure.stderr?ref=604cbdcfddb959cd1d7de2f9afa14a199561a428", "patch": "@@ -7,15 +7,5 @@ LL | #![feature(capture_disjoint_fields)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #53488 <https://github.com/rust-lang/rust/issues/53488> for more information\n \n-warning: variable does not need to be mutable\n-  --> $DIR/move_closure.rs:36:9\n-   |\n-LL |     let mut t = T(S(\"s\".into()));\n-   |         ----^\n-   |         |\n-   |         help: remove this `mut`\n-   |\n-   = note: `#[warn(unused_mut)]` on by default\n-\n-warning: 2 warnings emitted\n+warning: 1 warning emitted\n "}, {"sha": "2dba923647a2e6f4044a08ad8f467af054e77b98", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/mut_ref_struct_mem.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/604cbdcfddb959cd1d7de2f9afa14a199561a428/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref_struct_mem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604cbdcfddb959cd1d7de2f9afa14a199561a428/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref_struct_mem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fmut_ref_struct_mem.rs?ref=604cbdcfddb959cd1d7de2f9afa14a199561a428", "patch": "@@ -2,14 +2,14 @@\n \n // Test that we can mutate a place through a mut-borrow\n // that is captured by the closure\n-//\n+\n // More specifically we test that the if the mutable reference isn't root variable of a capture\n // but rather accessed while acessing the precise capture.\n \n #![feature(capture_disjoint_fields)]\n //~^ WARNING: the feature `capture_disjoint_fields` is incomplete\n \n-fn main() {\n+fn mut_tuple() {\n     let mut t = (10, 10);\n \n     let t1 = (&mut t, 10);\n@@ -21,3 +21,25 @@ fn main() {\n \n     c();\n }\n+\n+fn mut_tuple_nested() {\n+    let mut t = (10, 10);\n+\n+    let t1 = (&mut t, 10);\n+\n+    let mut c = || {\n+        let mut c = || {\n+            // Mutable because (*t.0) is mutable\n+            t1.0.0 += 10;\n+        };\n+\n+        c();\n+    };\n+\n+    c();\n+}\n+\n+fn main() {\n+    mut_tuple();\n+    mut_tuple_nested();\n+}"}]}