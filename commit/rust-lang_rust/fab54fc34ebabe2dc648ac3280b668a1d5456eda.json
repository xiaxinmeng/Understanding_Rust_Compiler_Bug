{"sha": "fab54fc34ebabe2dc648ac3280b668a1d5456eda", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhYjU0ZmMzNGViYWJlMmRjNjQ4YWMzMjgwYjY2OGExZDU0NTZlZGE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-03T20:26:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-03T20:26:10Z"}, "message": "Rollup merge of #69565 - RalfJung:assert, r=eddyb\n\nmiri engine: turn some debug_assert into assert\n\n@eddyb said to avoid debug assertions in rustc. These checks here look like they are probably not too expensive. Cc @oli-obk", "tree": {"sha": "ed78056428bb1e2f79acabfd4a6f88874c272a99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed78056428bb1e2f79acabfd4a6f88874c272a99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fab54fc34ebabe2dc648ac3280b668a1d5456eda", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeXr1iCRBK7hj4Ov3rIwAAdHIIAHfH7rntwk+o2AYTQP2W47es\nQRcUPVAsMLLRGo9uQ3mb2Jk8CwoJ7TCepMpQ2DPv9m2h6/wPY4zzIy+GbnoN7/EB\nCIpfiuazDMKmNnb921uEnjT5Hp8vY37XLicbX8kOFsXqctxyX9HLPg3fPnFdzygN\nCRc9O9KvxOc9jmD95gp2Q7XY1VltS71kOAINjdJjnvKFzKgBwJQeC3iX3QNJ5YUE\n78h1/+muFnkbK5MSdB4/tL4gkfyoX1zTKtRBfCCdBkosZNyBTsZKCq/AVE8n34L8\nd8kgzNa34adYcQCkkAP3pzYiAnvIpn2I6L8yjYvOuYt7aJUnTqjolFhVBWMSfg4=\n=3dPR\n-----END PGP SIGNATURE-----\n", "payload": "tree ed78056428bb1e2f79acabfd4a6f88874c272a99\nparent 3c5b1b7d63f55ac96fc7cd06df01e0f0e4f49d47\nparent 5982e9d3ca679866a0533d69a41224c333a5348a\nauthor Dylan DPC <dylan.dpc@gmail.com> 1583267170 +0100\ncommitter GitHub <noreply@github.com> 1583267170 +0100\n\nRollup merge of #69565 - RalfJung:assert, r=eddyb\n\nmiri engine: turn some debug_assert into assert\n\n@eddyb said to avoid debug assertions in rustc. These checks here look like they are probably not too expensive. Cc @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fab54fc34ebabe2dc648ac3280b668a1d5456eda", "html_url": "https://github.com/rust-lang/rust/commit/fab54fc34ebabe2dc648ac3280b668a1d5456eda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fab54fc34ebabe2dc648ac3280b668a1d5456eda/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c5b1b7d63f55ac96fc7cd06df01e0f0e4f49d47", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c5b1b7d63f55ac96fc7cd06df01e0f0e4f49d47", "html_url": "https://github.com/rust-lang/rust/commit/3c5b1b7d63f55ac96fc7cd06df01e0f0e4f49d47"}, {"sha": "5982e9d3ca679866a0533d69a41224c333a5348a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5982e9d3ca679866a0533d69a41224c333a5348a", "html_url": "https://github.com/rust-lang/rust/commit/5982e9d3ca679866a0533d69a41224c333a5348a"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "3cbb0667ff3923f051c45ac051c2eb995b5e0254", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fab54fc34ebabe2dc648ac3280b668a1d5456eda/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab54fc34ebabe2dc648ac3280b668a1d5456eda/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=fab54fc34ebabe2dc648ac3280b668a1d5456eda", "patch": "@@ -202,7 +202,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n             Char => {\n                 // `u8` to `char` cast\n-                debug_assert_eq!(v as u8 as u128, v);\n+                assert_eq!(v as u8 as u128, v);\n                 Ok(Scalar::from_uint(v, Size::from_bytes(4)))\n             }\n "}, {"sha": "f2ee5e047a88e5b3366f93dcbcd2cec366c094d2", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fab54fc34ebabe2dc648ac3280b668a1d5456eda/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab54fc34ebabe2dc648ac3280b668a1d5456eda/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=fab54fc34ebabe2dc648ac3280b668a1d5456eda", "patch": "@@ -234,7 +234,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             BitXor => (Scalar::from_uint(l ^ r, size), left_layout.ty),\n \n             Add | Sub | Mul | Rem | Div => {\n-                debug_assert!(!left_layout.abi.is_signed());\n+                assert!(!left_layout.abi.is_signed());\n                 let op: fn(u128, u128) -> (u128, bool) = match bin_op {\n                     Add => u128::overflowing_add,\n                     Sub => u128::overflowing_sub,"}, {"sha": "f298a6677d6dcada8beb1a87844ac8c0497b98fd", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fab54fc34ebabe2dc648ac3280b668a1d5456eda/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab54fc34ebabe2dc648ac3280b668a1d5456eda/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=fab54fc34ebabe2dc648ac3280b668a1d5456eda", "patch": "@@ -287,7 +287,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         self.eval_terminator(terminator)?;\n         if !self.stack.is_empty() {\n             // This should change *something*\n-            debug_assert!(self.cur_frame() != old_stack || self.frame().block != old_bb);\n+            assert!(self.cur_frame() != old_stack || self.frame().block != old_bb);\n             if let Some(block) = self.frame().block {\n                 info!(\"// executing {:?}\", block);\n             }"}, {"sha": "08d4ae34afbfa3dc8a65b045d4ebc003599d259d", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fab54fc34ebabe2dc648ac3280b668a1d5456eda/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab54fc34ebabe2dc648ac3280b668a1d5456eda/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=fab54fc34ebabe2dc648ac3280b668a1d5456eda", "patch": "@@ -172,7 +172,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n         let caller_arg = caller_arg.next().ok_or_else(|| err_unsup!(FunctionArgCountMismatch))?;\n         if rust_abi {\n-            debug_assert!(!caller_arg.layout.is_zst(), \"ZSTs must have been already filtered out\");\n+            assert!(!caller_arg.layout.is_zst(), \"ZSTs must have been already filtered out\");\n         }\n         // Now, check\n         if !Self::check_argument_compat(rust_abi, caller_arg.layout, callee_arg.layout) {"}, {"sha": "50ba3e938957a8145b594dfdd029f1520f966977", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fab54fc34ebabe2dc648ac3280b668a1d5456eda/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab54fc34ebabe2dc648ac3280b668a1d5456eda/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=fab54fc34ebabe2dc648ac3280b668a1d5456eda", "patch": "@@ -144,16 +144,16 @@ fn wrapping_range_contains(r: &RangeInclusive<u128>, test: u128) -> bool {\n // \"expected something <in the given range>\" makes sense.\n fn wrapping_range_format(r: &RangeInclusive<u128>, max_hi: u128) -> String {\n     let (lo, hi) = r.clone().into_inner();\n-    debug_assert!(hi <= max_hi);\n+    assert!(hi <= max_hi);\n     if lo > hi {\n         format!(\"less or equal to {}, or greater or equal to {}\", hi, lo)\n     } else if lo == hi {\n         format!(\"equal to {}\", lo)\n     } else if lo == 0 {\n-        debug_assert!(hi < max_hi, \"should not be printing if the range covers everything\");\n+        assert!(hi < max_hi, \"should not be printing if the range covers everything\");\n         format!(\"less or equal to {}\", hi)\n     } else if hi == max_hi {\n-        debug_assert!(lo > 0, \"should not be printing if the range covers everything\");\n+        assert!(lo > 0, \"should not be printing if the range covers everything\");\n         format!(\"greater or equal to {}\", lo)\n     } else {\n         format!(\"in the range {:?}\", r)"}]}