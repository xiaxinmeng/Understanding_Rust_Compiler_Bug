{"sha": "21641d6d2ce6e7f8c81817c1848499ddc635440b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNjQxZDZkMmNlNmU3ZjhjODE4MTdjMTg0ODQ5OWRkYzYzNTQ0MGI=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-03-26T22:19:25Z"}, "committer": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-04-03T12:31:45Z"}, "message": "Refactor inner function into closure.\n\nSo we can cut some params by using stuff from the environment.", "tree": {"sha": "5dbcf35a3384d9f2875b7b6d144fc596a8919d8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dbcf35a3384d9f2875b7b6d144fc596a8919d8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21641d6d2ce6e7f8c81817c1848499ddc635440b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21641d6d2ce6e7f8c81817c1848499ddc635440b", "html_url": "https://github.com/rust-lang/rust/commit/21641d6d2ce6e7f8c81817c1848499ddc635440b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21641d6d2ce6e7f8c81817c1848499ddc635440b/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b12af86a776364f01f65e3bd551e2641b4fac4ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/b12af86a776364f01f65e3bd551e2641b4fac4ec", "html_url": "https://github.com/rust-lang/rust/commit/b12af86a776364f01f65e3bd551e2641b4fac4ec"}], "stats": {"total": 32, "additions": 13, "deletions": 19}, "files": [{"sha": "3c41e4042b952529c629935062671f0ba7d26946", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/21641d6d2ce6e7f8c81817c1848499ddc635440b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21641d6d2ce6e7f8c81817c1848499ddc635440b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=21641d6d2ce6e7f8c81817c1848499ddc635440b", "patch": "@@ -2531,16 +2531,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let mut expected_arg_tys = expected_arg_tys;\n         let expected_arg_count = fn_inputs.len();\n \n-        fn parameter_count_error<'tcx>(sess: &Session,\n-                                       sp: Span,\n-                                       expr_sp: Span,\n-                                       expected_count: usize,\n-                                       arg_count: usize,\n-                                       error_code: &str,\n-                                       variadic: bool,\n-                                       def_span: Option<Span>,\n-                                       sugg_unit: bool) {\n-            let mut err = sess.struct_span_err_with_code(sp,\n+        let param_count_error = |expected_count: usize,\n+                                arg_count: usize,\n+                                error_code: &str,\n+                                variadic: bool,\n+                                sugg_unit: bool| {\n+            let mut err = tcx.sess.struct_span_err_with_code(sp,\n                 &format!(\"this function takes {}{} parameter{} but {} parameter{} supplied\",\n                     if variadic {\"at least \"} else {\"\"},\n                     expected_count,\n@@ -2549,11 +2545,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     if arg_count == 1 {\" was\"} else {\"s were\"}),\n                 DiagnosticId::Error(error_code.to_owned()));\n \n-            if let Some(def_s) = def_span.map(|sp| sess.codemap().def_span(sp)) {\n+            if let Some(def_s) = def_span.map(|sp| tcx.sess.codemap().def_span(sp)) {\n                 err.span_label(def_s, \"defined here\");\n             }\n             if sugg_unit {\n-                let sugg_span = sess.codemap().end_point(expr_sp);\n+                let sugg_span = tcx.sess.codemap().end_point(expr_sp);\n                 // remove closing `)` from the span\n                 let sugg_span = sugg_span.shrink_to_lo();\n                 err.span_suggestion(\n@@ -2567,14 +2563,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                             if expected_count == 1 {\"\"} else {\"s\"}));\n             }\n             err.emit();\n-        }\n+        };\n \n         let formal_tys = if tuple_arguments == TupleArguments {\n             let tuple_type = self.structurally_resolved_type(sp, fn_inputs[0]);\n             match tuple_type.sty {\n                 ty::TyTuple(arg_types) if arg_types.len() != args.len() => {\n-                    parameter_count_error(tcx.sess, sp, expr_sp, arg_types.len(), args.len(),\n-                                          \"E0057\", false, def_span, false);\n+                    param_count_error(arg_types.len(), args.len(), \"E0057\", false, false);\n                     expected_arg_tys = &[];\n                     self.err_args(args.len())\n                 }\n@@ -2602,8 +2597,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             if supplied_arg_count >= expected_arg_count {\n                 fn_inputs.to_vec()\n             } else {\n-                parameter_count_error(tcx.sess, sp, expr_sp, expected_arg_count,\n-                                      supplied_arg_count, \"E0060\", true, def_span, false);\n+                param_count_error(expected_arg_count, supplied_arg_count, \"E0060\", true, false);\n                 expected_arg_tys = &[];\n                 self.err_args(supplied_arg_count)\n             }\n@@ -2616,8 +2610,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             } else {\n                 false\n             };\n-            parameter_count_error(tcx.sess, sp, expr_sp, expected_arg_count,\n-                                  supplied_arg_count, \"E0061\", false, def_span, sugg_unit);\n+            param_count_error(expected_arg_count, supplied_arg_count, \"E0061\", false, sugg_unit);\n+\n             expected_arg_tys = &[];\n             self.err_args(supplied_arg_count)\n         };"}]}