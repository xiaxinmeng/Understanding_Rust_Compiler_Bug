{"sha": "2ed258ba423788e95885d43724bb9fc1761cc776", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlZDI1OGJhNDIzNzg4ZTk1ODg1ZDQzNzI0YmI5ZmMxNzYxY2M3NzY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-10T15:02:02Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-10T15:02:02Z"}, "message": "Fix progress token is already registered crash\n\nAfter we started reporting progress when running cargo check during\nloading, it is possible to crash the client with two identical progress\ntokens.\n\nThis points to a deeper issue: we might be running several cargo checks\nconcurrently, which doesn't make sense.\n\nThis commit linearizes all workspace fetches, making sure no updates are\nlost.\n\nAs an additional touch, it also normalizes progress & result reporting,\nto make sure they stand in sync.", "tree": {"sha": "b4f099cf99710feb2fc6684002813fb8682726c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4f099cf99710feb2fc6684002813fb8682726c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ed258ba423788e95885d43724bb9fc1761cc776", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ed258ba423788e95885d43724bb9fc1761cc776", "html_url": "https://github.com/rust-lang/rust/commit/2ed258ba423788e95885d43724bb9fc1761cc776", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ed258ba423788e95885d43724bb9fc1761cc776/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77362c71735a8b5ab4b5cd9f396fa657fbffe2cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb", "html_url": "https://github.com/rust-lang/rust/commit/77362c71735a8b5ab4b5cd9f396fa657fbffe2cb"}], "stats": {"total": 69, "additions": 57, "deletions": 12}, "files": [{"sha": "442fbd14c6eb118237633b09102f111a5516df7d", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2ed258ba423788e95885d43724bb9fc1761cc776/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed258ba423788e95885d43724bb9fc1761cc776/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=2ed258ba423788e95885d43724bb9fc1761cc776", "patch": "@@ -22,6 +22,7 @@ use crate::{\n     from_proto,\n     line_endings::LineEndings,\n     main_loop::Task,\n+    op_queue::OpQueue,\n     reload::SourceRootConfig,\n     request_metrics::{LatestRequests, RequestMetrics},\n     thread_pool::TaskPool,\n@@ -78,6 +79,7 @@ pub(crate) struct GlobalState {\n     pub(crate) source_root_config: SourceRootConfig,\n     pub(crate) proc_macro_client: Option<ProcMacroClient>,\n     pub(crate) workspaces: Arc<Vec<ProjectWorkspace>>,\n+    pub(crate) fetch_workspaces_queue: OpQueue,\n     latest_requests: Arc<RwLock<LatestRequests>>,\n }\n \n@@ -130,6 +132,7 @@ impl GlobalState {\n             source_root_config: SourceRootConfig::default(),\n             proc_macro_client: None,\n             workspaces: Arc::new(Vec::new()),\n+            fetch_workspaces_queue: OpQueue::default(),\n             latest_requests: Default::default(),\n         }\n     }"}, {"sha": "2207b9a87544486888e6366ea2e890082d631e8d", "filename": "crates/rust-analyzer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2ed258ba423788e95885d43724bb9fc1761cc776/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed258ba423788e95885d43724bb9fc1761cc776/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flib.rs?ref=2ed258ba423788e95885d43724bb9fc1761cc776", "patch": "@@ -35,6 +35,7 @@ mod lsp_utils;\n mod thread_pool;\n mod document;\n mod diff;\n+mod op_queue;\n pub mod lsp_ext;\n pub mod config;\n "}, {"sha": "51fb2eb746ff48d17de000468a7a23a0ad033fe2", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2ed258ba423788e95885d43724bb9fc1761cc776/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed258ba423788e95885d43724bb9fc1761cc776/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=2ed258ba423788e95885d43724bb9fc1761cc776", "patch": "@@ -11,7 +11,6 @@ use ide::{Canceled, FileId};\n use ide_db::base_db::VfsPath;\n use lsp_server::{Connection, Notification, Request, Response};\n use lsp_types::notification::Notification as _;\n-use project_model::ProjectWorkspace;\n use vfs::ChangeKind;\n \n use crate::{\n@@ -62,7 +61,6 @@ enum Event {\n pub(crate) enum Task {\n     Response(Response),\n     Diagnostics(Vec<(FileId, Vec<lsp_types::Diagnostic>)>),\n-    Workspaces(Vec<anyhow::Result<ProjectWorkspace>>),\n     PrimeCaches(PrimeCachesProgress),\n     FetchWorkspace(ProjectWorkspaceProgress),\n }\n@@ -143,7 +141,8 @@ impl GlobalState {\n             |_, _| (),\n         );\n \n-        self.fetch_workspaces();\n+        self.fetch_workspaces_request();\n+        self.fetch_workspaces_if_needed();\n \n         while let Some(event) = self.next_event(&inbox) {\n             if let Event::Lsp(lsp_server::Message::Notification(not)) = &event {\n@@ -204,7 +203,6 @@ impl GlobalState {\n                                 self.diagnostics.set_native_diagnostics(file_id, diagnostics)\n                             }\n                         }\n-                        Task::Workspaces(workspaces) => self.switch_workspaces(workspaces),\n                         Task::PrimeCaches(progress) => match progress {\n                             PrimeCachesProgress::Started => prime_caches_progress.push(progress),\n                             PrimeCachesProgress::StartedOnCrate { .. } => {\n@@ -224,7 +222,11 @@ impl GlobalState {\n                                 ProjectWorkspaceProgress::Report(msg) => {\n                                     (Progress::Report, Some(msg))\n                                 }\n-                                ProjectWorkspaceProgress::End => (Progress::End, None),\n+                                ProjectWorkspaceProgress::End(workspaces) => {\n+                                    self.fetch_workspaces_completed();\n+                                    self.switch_workspaces(workspaces);\n+                                    (Progress::End, None)\n+                                }\n                             };\n                             self.report_progress(\"fetching\", state, msg, None);\n                         }\n@@ -403,6 +405,8 @@ impl GlobalState {\n             }\n         }\n \n+        self.fetch_workspaces_if_needed();\n+\n         let loop_duration = loop_start.elapsed();\n         if loop_duration > Duration::from_millis(100) {\n             log::warn!(\"overly long loop turn: {:?}\", loop_duration);\n@@ -440,7 +444,7 @@ impl GlobalState {\n         }\n \n         RequestDispatcher { req: Some(req), global_state: self }\n-            .on_sync::<lsp_ext::ReloadWorkspace>(|s, ()| Ok(s.fetch_workspaces()))?\n+            .on_sync::<lsp_ext::ReloadWorkspace>(|s, ()| Ok(s.fetch_workspaces_request()))?\n             .on_sync::<lsp_ext::JoinLines>(|s, p| handlers::handle_join_lines(s.snapshot(), p))?\n             .on_sync::<lsp_ext::OnEnter>(|s, p| handlers::handle_on_enter(s.snapshot(), p))?\n             .on_sync::<lsp_types::request::Shutdown>(|s, ()| {"}, {"sha": "51d66f4b37723ab17999ced30fbd04cf0e8614de", "filename": "crates/rust-analyzer/src/op_queue.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2ed258ba423788e95885d43724bb9fc1761cc776/crates%2Frust-analyzer%2Fsrc%2Fop_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed258ba423788e95885d43724bb9fc1761cc776/crates%2Frust-analyzer%2Fsrc%2Fop_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fop_queue.rs?ref=2ed258ba423788e95885d43724bb9fc1761cc776", "patch": "@@ -0,0 +1,25 @@\n+//! Bookkeeping to make sure only one long-running operation is executed.\n+\n+#[derive(Default)]\n+pub(crate) struct OpQueue {\n+    op_scheduled: bool,\n+    op_in_progress: bool,\n+}\n+\n+impl OpQueue {\n+    pub(crate) fn request_op(&mut self) {\n+        self.op_scheduled = true;\n+    }\n+    pub(crate) fn should_start_op(&mut self) -> bool {\n+        if !self.op_in_progress && self.op_scheduled {\n+            self.op_in_progress = true;\n+            self.op_scheduled = false;\n+            return true;\n+        }\n+        false\n+    }\n+    pub(crate) fn op_completed(&mut self) {\n+        assert!(self.op_in_progress);\n+        self.op_in_progress = false;\n+    }\n+}"}, {"sha": "accf2ef8c4c98d972d91af677c1322c66d61dcac", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2ed258ba423788e95885d43724bb9fc1761cc776/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed258ba423788e95885d43724bb9fc1761cc776/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=2ed258ba423788e95885d43724bb9fc1761cc776", "patch": "@@ -19,7 +19,7 @@ use lsp_ext::StatusParams;\n pub(crate) enum ProjectWorkspaceProgress {\n     Begin,\n     Report(String),\n-    End,\n+    End(Vec<anyhow::Result<ProjectWorkspace>>),\n }\n \n impl GlobalState {\n@@ -30,7 +30,7 @@ impl GlobalState {\n             self.analysis_host.update_lru_capacity(self.config.lru_capacity());\n         }\n         if self.config.linked_projects() != old_config.linked_projects() {\n-            self.fetch_workspaces()\n+            self.fetch_workspaces_request()\n         } else if self.config.flycheck() != old_config.flycheck() {\n             self.reload_flycheck();\n         }\n@@ -44,7 +44,7 @@ impl GlobalState {\n             Status::Ready | Status::Invalid => (),\n         }\n         if self.config.cargo_autoreload() {\n-            self.fetch_workspaces();\n+            self.fetch_workspaces_request();\n         } else {\n             self.transition(Status::NeedsReload);\n         }\n@@ -98,8 +98,15 @@ impl GlobalState {\n             });\n         }\n     }\n-    pub(crate) fn fetch_workspaces(&mut self) {\n+\n+    pub(crate) fn fetch_workspaces_request(&mut self) {\n+        self.fetch_workspaces_queue.request_op()\n+    }\n+    pub(crate) fn fetch_workspaces_if_needed(&mut self) {\n         log::info!(\"will fetch workspaces\");\n+        if !self.fetch_workspaces_queue.should_start_op() {\n+            return;\n+        }\n \n         self.task_pool.handle.spawn_with_sender({\n             let linked_projects = self.config.linked_projects();\n@@ -133,12 +140,17 @@ impl GlobalState {\n                     })\n                     .collect::<Vec<_>>();\n \n-                sender.send(Task::FetchWorkspace(ProjectWorkspaceProgress::End)).unwrap();\n                 log::info!(\"did fetch workspaces {:?}\", workspaces);\n-                sender.send(Task::Workspaces(workspaces)).unwrap()\n+                sender\n+                    .send(Task::FetchWorkspace(ProjectWorkspaceProgress::End(workspaces)))\n+                    .unwrap();\n             }\n         });\n     }\n+    pub(crate) fn fetch_workspaces_completed(&mut self) {\n+        self.fetch_workspaces_queue.op_completed()\n+    }\n+\n     pub(crate) fn switch_workspaces(&mut self, workspaces: Vec<anyhow::Result<ProjectWorkspace>>) {\n         let _p = profile::span(\"GlobalState::switch_workspaces\");\n         log::info!(\"will switch workspaces: {:?}\", workspaces);"}]}