{"sha": "9342f293e91fa3d8fa8ad456770ee7de2a914e66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNDJmMjkzZTkxZmEzZDhmYThhZDQ1Njc3MGVlN2RlMmE5MTRlNjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-08T00:52:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-08T00:52:36Z"}, "message": "Auto merge of #51590 - bjorn3:codegen_llvm_extract, r=alexcrichton\n\nMostly fix metadata_only backend and extract some code out of rustc_codegen_llvm\n\nRemoves dependency on the `ar` crate and removes the `llvm.enabled` config option in favour of setting `rust.codegen-backends` to `[]`.", "tree": {"sha": "229232348ae491b1984b7ac22b17da0f8943d946", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/229232348ae491b1984b7ac22b17da0f8943d946"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9342f293e91fa3d8fa8ad456770ee7de2a914e66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9342f293e91fa3d8fa8ad456770ee7de2a914e66", "html_url": "https://github.com/rust-lang/rust/commit/9342f293e91fa3d8fa8ad456770ee7de2a914e66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9342f293e91fa3d8fa8ad456770ee7de2a914e66/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fd3d7899a444fe110ae9277542b306844ecf0c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fd3d7899a444fe110ae9277542b306844ecf0c4", "html_url": "https://github.com/rust-lang/rust/commit/9fd3d7899a444fe110ae9277542b306844ecf0c4"}, {"sha": "23c0b3b75c865f18e452e42680247502961778b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/23c0b3b75c865f18e452e42680247502961778b9", "html_url": "https://github.com/rust-lang/rust/commit/23c0b3b75c865f18e452e42680247502961778b9"}], "stats": {"total": 140, "additions": 30, "deletions": 110}, "files": [{"sha": "d91a165e5373ca033b9b32adca39c30055f3ec34", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=9342f293e91fa3d8fa8ad456770ee7de2a914e66", "patch": "@@ -57,11 +57,6 @@ dependencies = [\n  \"winapi 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"ar\"\n-version = \"0.3.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"arena\"\n version = \"0.0.0\"\n@@ -2031,7 +2026,6 @@ dependencies = [\n name = \"rustc_codegen_utils\"\n version = \"0.0.0\"\n dependencies = [\n- \"ar 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n@@ -2072,7 +2066,6 @@ dependencies = [\n name = \"rustc_driver\"\n version = \"0.0.0\"\n dependencies = [\n- \"ar 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"arena 0.0.0\",\n  \"env_logger 0.5.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"graphviz 0.0.0\",\n@@ -3077,7 +3070,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum aho-corasick 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f0ba20154ea1f47ce2793322f049c5646cc6d0fa9759d5f333f286e507bf8080\"\n \"checksum ammonia 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fd4c682378117e4186a492b2252b9537990e1617f44aed9788b9a1149de45477\"\n \"checksum ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n-\"checksum ar 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"35c7a5669cb64f085739387e1308b74e6d44022464b7f1b63bbd4ceb6379ec31\"\n \"checksum arrayvec 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1e964f9e24d588183fcb43503abda40d288c8657dfc27311516ce2f05675aef\"\n \"checksum assert_cli 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"98589b0e465a6c510d95fceebd365bb79bedece7f6e18a480897f2015f85ec51\"\n \"checksum atty 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2fc4a1aa4c24c0718a250f0681885c1af91419d242f29eb8f2ab28502d80dbd1\""}, {"sha": "8050522d06643912f56b31d6d05ca3ecad828363", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=9342f293e91fa3d8fa8ad456770ee7de2a914e66", "patch": "@@ -162,6 +162,7 @@ pub mod util {\n     pub mod ppaux;\n     pub mod nodemap;\n     pub mod fs;\n+    pub mod time_graph;\n }\n \n // A private module so that macro-expanded idents like"}, {"sha": "a8502682a806b718f93c6e5b7c9943d86cba759a", "filename": "src/librustc/util/time_graph.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2Flibrustc%2Futil%2Ftime_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2Flibrustc%2Futil%2Ftime_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Ftime_graph.rs?ref=9342f293e91fa3d8fa8ad456770ee7de2a914e66", "previous_filename": "src/librustc_codegen_llvm/time_graph.rs"}, {"sha": "f9d8431943378225d7cc25aa3099ff8861da899b", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=9342f293e91fa3d8fa8ad456770ee7de2a914e66", "patch": "@@ -56,6 +56,7 @@ use builder::{Builder, MemFlags};\n use callee;\n use common::{C_bool, C_bytes_in_context, C_i32, C_usize};\n use rustc_mir::monomorphize::collector::{self, MonoItemCollectionMode};\n+use rustc_mir::monomorphize::item::DefPathBasedNames;\n use common::{self, C_struct_in_context, C_array, val_ty};\n use consts;\n use context::{self, CodegenCx};\n@@ -67,7 +68,7 @@ use monomorphize::Instance;\n use monomorphize::partitioning::{self, PartitioningStrategy, CodegenUnit, CodegenUnitExt};\n use rustc_codegen_utils::symbol_names_test;\n use time_graph;\n-use mono_item::{MonoItem, BaseMonoItemExt, MonoItemExt, DefPathBasedNames};\n+use mono_item::{MonoItem, BaseMonoItemExt, MonoItemExt};\n use type_::Type;\n use type_of::LayoutLlvmExt;\n use rustc::util::nodemap::{FxHashMap, FxHashSet, DefIdSet};\n@@ -92,7 +93,7 @@ use syntax::ast;\n \n use mir::operand::OperandValue;\n \n-pub use rustc_codegen_utils::check_for_rustc_errors_attr;\n+use rustc_codegen_utils::check_for_rustc_errors_attr;\n \n pub struct StatRecorder<'a, 'tcx: 'a> {\n     cx: &'a CodegenCx<'a, 'tcx>,"}, {"sha": "93d9ce1e98a4dfbb40c8bf1c7bfdbd6d1f7bed9d", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=9342f293e91fa3d8fa8ad456770ee7de2a914e66", "patch": "@@ -76,6 +76,7 @@ use rustc::middle::lang_items::LangItem;\n use rustc::session::{Session, CompileIncomplete};\n use rustc::session::config::{OutputFilenames, OutputType, PrintRequest};\n use rustc::ty::{self, TyCtxt};\n+use rustc::util::time_graph;\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n use rustc_mir::monomorphize;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n@@ -114,7 +115,6 @@ mod llvm_util;\n mod metadata;\n mod meth;\n mod mir;\n-mod time_graph;\n mod mono_item;\n mod type_;\n mod type_of;\n@@ -368,7 +368,7 @@ struct CodegenResults {\n     crate_info: CrateInfo,\n }\n \n-// Misc info we load from metadata to persist beyond the tcx\n+/// Misc info we load from metadata to persist beyond the tcx\n struct CrateInfo {\n     panic_runtime: Option<CrateNum>,\n     compiler_builtins: Option<CrateNum>,"}, {"sha": "2f7b27b85afefc8f32450a456f45f2651a414303", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=9342f293e91fa3d8fa8ad456770ee7de2a914e66", "patch": "@@ -33,7 +33,6 @@ use std::fmt;\n \n pub use rustc::mir::mono::MonoItem;\n \n-pub use rustc_mir::monomorphize::item::*;\n pub use rustc_mir::monomorphize::item::MonoItemExt as BaseMonoItemExt;\n \n pub trait MonoItemExt<'a, 'tcx>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {"}, {"sha": "bfabf65dfd850976feda8a1798137181bb3be246", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=9342f293e91fa3d8fa8ad456770ee7de2a914e66", "patch": "@@ -16,7 +16,7 @@ use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::layout::{self, Align, LayoutOf, Size, TyLayout};\n use rustc_target::spec::PanicStrategy;\n use rustc_target::abi::FloatTy;\n-use mono_item::DefPathBasedNames;\n+use rustc_mir::monomorphize::item::DefPathBasedNames;\n use type_::Type;\n \n use std::fmt::Write;"}, {"sha": "30f533285ddfdc809e3f54a7a323a8120541578e", "filename": "src/librustc_codegen_utils/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2Flibrustc_codegen_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2Flibrustc_codegen_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2FCargo.toml?ref=9342f293e91fa3d8fa8ad456770ee7de2a914e66", "patch": "@@ -10,7 +10,6 @@ crate-type = [\"dylib\"]\n test = false\n \n [dependencies]\n-ar = \"0.3.0\"\n flate2 = \"1.0\"\n log = \"0.4\"\n "}, {"sha": "3cbf176d98bc9d38b331dbfae48feefc30025929", "filename": "src/librustc_codegen_utils/codegen_backend.rs", "status": "modified", "additions": 19, "deletions": 84, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs?ref=9342f293e91fa3d8fa8ad456770ee7de2a914e66", "patch": "@@ -22,15 +22,13 @@\n #![feature(box_syntax)]\n \n use std::any::Any;\n-use std::io::prelude::*;\n-use std::io::{self, Cursor};\n+use std::io::{self, Write};\n use std::fs::File;\n use std::path::Path;\n-use std::sync::mpsc;\n+use std::sync::{mpsc, Arc};\n \n use rustc_data_structures::owning_ref::OwningRef;\n use rustc_data_structures::sync::Lrc;\n-use ar::{Archive, Builder, Header};\n use flate2::Compression;\n use flate2::write::DeflateEncoder;\n \n@@ -81,89 +79,21 @@ pub trait CodegenBackend {\n     ) -> Result<(), CompileIncomplete>;\n }\n \n-pub struct DummyCodegenBackend;\n-\n-impl CodegenBackend for DummyCodegenBackend {\n-    fn metadata_loader(&self) -> Box<MetadataLoader + Sync> {\n-        box DummyMetadataLoader(())\n-    }\n-\n-    fn provide(&self, _providers: &mut Providers) {\n-        bug!(\"DummyCodegenBackend::provide\");\n-    }\n-\n-    fn provide_extern(&self, _providers: &mut Providers) {\n-        bug!(\"DummyCodegenBackend::provide_extern\");\n-    }\n-\n-    fn codegen_crate<'a, 'tcx>(\n-        &self,\n-        _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-        _rx: mpsc::Receiver<Box<Any + Send>>\n-    ) -> Box<Any> {\n-        bug!(\"DummyCodegenBackend::codegen_backend\");\n-    }\n-\n-    fn join_codegen_and_link(\n-        &self,\n-        _ongoing_codegen: Box<Any>,\n-        _sess: &Session,\n-        _dep_graph: &DepGraph,\n-        _outputs: &OutputFilenames,\n-    ) -> Result<(), CompileIncomplete> {\n-        bug!(\"DummyCodegenBackend::join_codegen_and_link\");\n-    }\n-}\n-\n-pub struct DummyMetadataLoader(());\n-\n-impl MetadataLoader for DummyMetadataLoader {\n-    fn get_rlib_metadata(\n-        &self,\n-        _target: &Target,\n-        _filename: &Path\n-    ) -> Result<MetadataRef, String> {\n-        bug!(\"DummyMetadataLoader::get_rlib_metadata\");\n-    }\n-\n-    fn get_dylib_metadata(\n-        &self,\n-        _target: &Target,\n-        _filename: &Path\n-    ) -> Result<MetadataRef, String> {\n-        bug!(\"DummyMetadataLoader::get_dylib_metadata\");\n-    }\n-}\n-\n pub struct NoLlvmMetadataLoader;\n \n impl MetadataLoader for NoLlvmMetadataLoader {\n     fn get_rlib_metadata(&self, _: &Target, filename: &Path) -> Result<MetadataRef, String> {\n-        let file = File::open(filename)\n+        let mut file = File::open(filename)\n             .map_err(|e| format!(\"metadata file open err: {:?}\", e))?;\n-        let mut archive = Archive::new(file);\n-\n-        while let Some(entry_result) = archive.next_entry() {\n-            let mut entry = entry_result\n-                .map_err(|e| format!(\"metadata section read err: {:?}\", e))?;\n-            if entry.header().identifier() == \"rust.metadata.bin\" {\n-                let mut buf = Vec::new();\n-                io::copy(&mut entry, &mut buf).unwrap();\n-                let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf).into();\n-                return Ok(rustc_erase_owner!(buf.map_owner_box()));\n-            }\n-        }\n \n-        Err(\"Couldn't find metadata section\".to_string())\n+        let mut buf = Vec::new();\n+        io::copy(&mut file, &mut buf).unwrap();\n+        let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf).into();\n+        return Ok(rustc_erase_owner!(buf.map_owner_box()));\n     }\n \n-    fn get_dylib_metadata(\n-        &self,\n-        _target: &Target,\n-        _filename: &Path,\n-    ) -> Result<MetadataRef, String> {\n-        // FIXME: Support reading dylibs from llvm enabled rustc\n-        self.get_rlib_metadata(_target, _filename)\n+    fn get_dylib_metadata(&self, target: &Target, filename: &Path) -> Result<MetadataRef, String> {\n+        self.get_rlib_metadata(target, filename)\n     }\n }\n \n@@ -205,8 +135,13 @@ impl CodegenBackend for MetadataOnlyCodegenBackend {\n         providers.target_features_whitelist = |_tcx, _cnum| {\n             Lrc::new(FxHashMap()) // Just a dummy\n         };\n+        providers.is_reachable_non_generic = |_tcx, _defid| true;\n+        providers.exported_symbols = |_tcx, _crate| Arc::new(Vec::new());\n+        providers.wasm_custom_sections = |_tcx, _crate| Lrc::new(Vec::new());\n+    }\n+    fn provide_extern(&self, providers: &mut Providers) {\n+        providers.is_reachable_non_generic = |_tcx, _defid| true;\n     }\n-    fn provide_extern(&self, _providers: &mut Providers) {}\n \n     fn codegen_crate<'a, 'tcx>(\n         &self,\n@@ -225,7 +160,8 @@ impl CodegenBackend for MetadataOnlyCodegenBackend {\n                 collector::MonoItemCollectionMode::Eager\n             ).0.iter()\n         );\n-        ::rustc::middle::dependency_format::calculate(tcx);\n+        // FIXME: Fix this\n+        // ::rustc::middle::dependency_format::calculate(tcx);\n         let _ = tcx.link_args(LOCAL_CRATE);\n         let _ = tcx.native_libraries(LOCAL_CRATE);\n         for mono_item in\n@@ -280,9 +216,8 @@ impl CodegenBackend for MetadataOnlyCodegenBackend {\n             } else {\n                 &ongoing_codegen.metadata.raw_data\n             };\n-            let mut builder = Builder::new(File::create(&output_name).unwrap());\n-            let header = Header::new(\"rust.metadata.bin\".to_string(), metadata.len() as u64);\n-            builder.append(&header, Cursor::new(metadata)).unwrap();\n+            let mut file = File::create(&output_name).unwrap();\n+            file.write_all(metadata).unwrap();\n         }\n \n         sess.abort_if_errors();"}, {"sha": "f59cf5832fcb4eb7a423364ca8d9059626332c0e", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=9342f293e91fa3d8fa8ad456770ee7de2a914e66", "patch": "@@ -25,7 +25,6 @@\n \n #![recursion_limit=\"256\"]\n \n-extern crate ar;\n extern crate flate2;\n #[macro_use]\n extern crate log;\n@@ -39,8 +38,6 @@ extern crate syntax;\n extern crate syntax_pos;\n #[macro_use] extern crate rustc_data_structures;\n \n-pub extern crate rustc as __rustc;\n-\n use rustc::ty::TyCtxt;\n \n pub mod link;"}, {"sha": "7a020f331e50b1119c8e3830c56a2edca361ce3b", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=9342f293e91fa3d8fa8ad456770ee7de2a914e66", "patch": "@@ -37,5 +37,3 @@ serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_ext = { path = \"../libsyntax_ext\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-\n-ar = \"0.3.0\""}, {"sha": "e203ec2737fc7f2cb67465461145e921cb61be7b", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2FMakefile?ref=9342f293e91fa3d8fa8ad456770ee7de2a914e66", "patch": "@@ -4,6 +4,6 @@ all:\n \t/bin/echo || exit 0 # This test requires /bin/echo to exist\n \t$(RUSTC) the_backend.rs --crate-name the_backend --crate-type dylib \\\n \t\t-o $(TMPDIR)/the_backend.dylib\n-\t$(RUSTC) some_crate.rs --crate-name some_crate --crate-type bin -o $(TMPDIR)/some_crate \\\n+\t$(RUSTC) some_crate.rs --crate-name some_crate --crate-type lib -o $(TMPDIR)/some_crate \\\n \t\t-Z codegen-backend=$(TMPDIR)/the_backend.dylib -Z unstable-options\n \tgrep -x \"This has been \\\"compiled\\\" successfully.\" $(TMPDIR)/some_crate"}, {"sha": "bfa8b6b3ef69a24af26f7f1bd216b9276dc68b83", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/some_crate.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fsome_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fsome_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fsome_crate.rs?ref=9342f293e91fa3d8fa8ad456770ee7de2a914e66", "patch": "@@ -8,6 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n-    ::std::process::exit(1);\n-}\n+#![feature(no_core)]\n+#![no_core]"}, {"sha": "a3cd033f86382ed00a78ddcffa21806e6e716c19", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=9342f293e91fa3d8fa8ad456770ee7de2a914e66", "patch": "@@ -63,7 +63,7 @@ impl CodegenBackend for TheBackend {\n         let crate_name = ongoing_codegen.downcast::<Symbol>()\n             .expect(\"in join_codegen_and_link: ongoing_codegen is not a Symbol\");\n         for &crate_type in sess.opts.crate_types.iter() {\n-            if crate_type != CrateType::CrateTypeExecutable {\n+            if crate_type != CrateType::CrateTypeRlib {\n                 sess.fatal(&format!(\"Crate type is {:?}\", crate_type));\n             }\n             let output_name ="}, {"sha": "942d27202ecd56f794ee5cf83b618391a33cd87a", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9342f293e91fa3d8fa8ad456770ee7de2a914e66/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=9342f293e91fa3d8fa8ad456770ee7de2a914e66", "patch": "@@ -59,7 +59,6 @@ static WHITELIST_CRATES: &'static [CrateVersion] = &[\n /// Whitelist of crates rustc is allowed to depend on. Avoid adding to the list if possible.\n static WHITELIST: &'static [Crate] = &[\n     Crate(\"aho-corasick\"),\n-    Crate(\"ar\"),\n     Crate(\"arrayvec\"),\n     Crate(\"atty\"),\n     Crate(\"backtrace\"),"}]}