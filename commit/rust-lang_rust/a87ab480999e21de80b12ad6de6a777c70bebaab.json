{"sha": "a87ab480999e21de80b12ad6de6a777c70bebaab", "node_id": "C_kwDOAAsO6NoAKGE4N2FiNDgwOTk5ZTIxZGU4MGIxMmFkNmRlNmE3NzdjNzBiZWJhYWI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-12-04T23:07:21Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-28T22:02:49Z"}, "message": "Ban non-static in const generics in AST.", "tree": {"sha": "975929178a1241c5d1b240246c718fce6a6ff0c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/975929178a1241c5d1b240246c718fce6a6ff0c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a87ab480999e21de80b12ad6de6a777c70bebaab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a87ab480999e21de80b12ad6de6a777c70bebaab", "html_url": "https://github.com/rust-lang/rust/commit/a87ab480999e21de80b12ad6de6a777c70bebaab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a87ab480999e21de80b12ad6de6a777c70bebaab/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e85edd9a844b523a02dbd89f3c02cd13e4c9fe46", "url": "https://api.github.com/repos/rust-lang/rust/commits/e85edd9a844b523a02dbd89f3c02cd13e4c9fe46", "html_url": "https://github.com/rust-lang/rust/commit/e85edd9a844b523a02dbd89f3c02cd13e4c9fe46"}], "stats": {"total": 67, "additions": 34, "deletions": 33}, "files": [{"sha": "f5e8eca8fcb2e9516a9fee6876c7e81a89ffa3aa", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a87ab480999e21de80b12ad6de6a777c70bebaab/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87ab480999e21de80b12ad6de6a777c70bebaab/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=a87ab480999e21de80b12ad6de6a777c70bebaab", "patch": "@@ -199,6 +199,11 @@ enum LifetimeRibKind {\n     /// This rib declares generic parameters.\n     Generics { parent: NodeId, span: Span, kind: LifetimeBinderKind },\n \n+    /// FIXME(const_generics): This patches over an ICE caused by non-'static lifetimes in const\n+    /// generics. We are disallowing this until we can decide on how we want to handle non-'static\n+    /// lifetimes in const generics. See issue #74052 for discussion.\n+    ConstGeneric,\n+\n     /// For **Modern** cases, create a new anonymous region parameter\n     /// and reference that.\n     ///\n@@ -1102,14 +1107,18 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n                         this.ribs[TypeNS].push(Rib::new(ConstParamTyRibKind));\n                         this.ribs[ValueNS].push(Rib::new(ConstParamTyRibKind));\n-                        this.visit_ty(ty);\n+                        this.with_lifetime_rib(LifetimeRibKind::ConstGeneric, |this| {\n+                            this.visit_ty(ty)\n+                        });\n                         this.ribs[TypeNS].pop().unwrap();\n                         this.ribs[ValueNS].pop().unwrap();\n \n                         if let Some(ref expr) = default {\n                             this.ribs[TypeNS].push(forward_ty_ban_rib);\n                             this.ribs[ValueNS].push(forward_const_ban_rib);\n-                            this.visit_anon_const(expr);\n+                            this.with_lifetime_rib(LifetimeRibKind::ConstGeneric, |this| {\n+                                this.visit_anon_const(expr)\n+                            });\n                             forward_const_ban_rib = this.ribs[ValueNS].pop().unwrap();\n                             forward_ty_ban_rib = this.ribs[TypeNS].pop().unwrap();\n                         }\n@@ -1158,8 +1167,14 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 return;\n             }\n \n-            if let LifetimeRibKind::Item = rib.kind {\n-                break;\n+            match rib.kind {\n+                LifetimeRibKind::Item => break,\n+                LifetimeRibKind::ConstGeneric => {\n+                    self.emit_non_static_lt_in_const_generic_error(lifetime);\n+                    self.r.lifetimes_res_map.insert(lifetime.id, LifetimeRes::Error);\n+                    return;\n+                }\n+                _ => {}\n             }\n         }\n "}, {"sha": "b153c9f95267fd27ebce63b9a8649c5820022b4b", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a87ab480999e21de80b12ad6de6a777c70bebaab/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87ab480999e21de80b12ad6de6a777c70bebaab/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=a87ab480999e21de80b12ad6de6a777c70bebaab", "patch": "@@ -1886,6 +1886,21 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n         err.emit();\n     }\n+\n+    crate fn emit_non_static_lt_in_const_generic_error(&self, lifetime_ref: &ast::Lifetime) {\n+        struct_span_err!(\n+            self.r.session,\n+            lifetime_ref.ident.span,\n+            E0771,\n+            \"use of non-static lifetime `{}` in const generic\",\n+            lifetime_ref.ident\n+        )\n+        .note(\n+            \"for more information, see issue #74052 \\\n+            <https://github.com/rust-lang/rust/issues/74052>\",\n+        )\n+        .emit();\n+    }\n }\n \n impl<'tcx> LifetimeContext<'_, 'tcx> {\n@@ -1982,24 +1997,6 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n         }\n     }\n \n-    // FIXME(const_generics): This patches over an ICE caused by non-'static lifetimes in const\n-    // generics. We are disallowing this until we can decide on how we want to handle non-'static\n-    // lifetimes in const generics. See issue #74052 for discussion.\n-    crate fn emit_non_static_lt_in_const_generic_error(&self, lifetime_ref: &hir::Lifetime) {\n-        let mut err = struct_span_err!(\n-            self.tcx.sess,\n-            lifetime_ref.span,\n-            E0771,\n-            \"use of non-static lifetime `{}` in const generic\",\n-            lifetime_ref\n-        );\n-        err.note(\n-            \"for more information, see issue #74052 \\\n-            <https://github.com/rust-lang/rust/issues/74052>\",\n-        );\n-        err.emit();\n-    }\n-\n     crate fn is_trait_ref_fn_scope(&mut self, trait_ref: &'tcx hir::PolyTraitRef<'tcx>) -> bool {\n         if let def::Res::Def(_, did) = trait_ref.trait_ref.path.res {\n             if ["}, {"sha": "6bb0c3b5e6b594110efa6edca2dad3e0ef20602a", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a87ab480999e21de80b12ad6de6a777c70bebaab/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87ab480999e21de80b12ad6de6a777c70bebaab/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=a87ab480999e21de80b12ad6de6a777c70bebaab", "patch": "@@ -164,8 +164,6 @@ crate struct LifetimeContext<'a, 'tcx> {\n     map: &'a mut NamedRegionMap,\n     scope: ScopeRef<'a>,\n \n-    is_in_const_generic: bool,\n-\n     /// Indicates that we only care about the definition of a trait. This should\n     /// be false if the `Item` we are resolving lifetimes for is not a trait or\n     /// we eventually need lifetimes resolve for trait items.\n@@ -452,7 +450,6 @@ fn do_resolve(\n         tcx,\n         map: &mut named_region_map,\n         scope: ROOT_SCOPE,\n-        is_in_const_generic: false,\n         trait_definition_only,\n         labels_in_fn: vec![],\n         xcrate_object_lifetime_defaults: Default::default(),\n@@ -1266,10 +1263,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             self.insert_lifetime(lifetime_ref, Region::Static);\n             return;\n         }\n-        if self.is_in_const_generic && lifetime_ref.name != LifetimeName::Error {\n-            self.emit_non_static_lt_in_const_generic_error(lifetime_ref);\n-            return;\n-        }\n         self.resolve_lifetime_ref(lifetime_ref);\n     }\n \n@@ -1341,14 +1334,11 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         }\n                     }\n                     GenericParamKind::Const { ref ty, default } => {\n-                        let was_in_const_generic = this.is_in_const_generic;\n-                        this.is_in_const_generic = true;\n                         walk_list!(this, visit_param_bound, param.bounds);\n                         this.visit_ty(&ty);\n                         if let Some(default) = default {\n                             this.visit_body(this.tcx.hir().body(default.body));\n                         }\n-                        this.is_in_const_generic = was_in_const_generic;\n                     }\n                 }\n             }\n@@ -1798,7 +1788,6 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             tcx: *tcx,\n             map,\n             scope: &wrap_scope,\n-            is_in_const_generic: self.is_in_const_generic,\n             trait_definition_only: self.trait_definition_only,\n             labels_in_fn,\n             xcrate_object_lifetime_defaults,"}]}