{"sha": "a63b5d3c846b74b917b8029aa00cb448faba409f", "node_id": "C_kwDOAAsO6NoAKGE2M2I1ZDNjODQ2Yjc0YjkxN2I4MDI5YWEwMGNiNDQ4ZmFiYTQwOWY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-18T18:30:07Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-18T18:30:58Z"}, "message": "feat: Only flycheck workspace that belongs to saved file", "tree": {"sha": "b958289e2e759d3d01f4de2e5dfe9f31cb99dc2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b958289e2e759d3d01f4de2e5dfe9f31cb99dc2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a63b5d3c846b74b917b8029aa00cb448faba409f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a63b5d3c846b74b917b8029aa00cb448faba409f", "html_url": "https://github.com/rust-lang/rust/commit/a63b5d3c846b74b917b8029aa00cb448faba409f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a63b5d3c846b74b917b8029aa00cb448faba409f/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea416175d5401b85a3774a6b2c1e03281dac40c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea416175d5401b85a3774a6b2c1e03281dac40c3", "html_url": "https://github.com/rust-lang/rust/commit/ea416175d5401b85a3774a6b2c1e03281dac40c3"}], "stats": {"total": 77, "additions": 70, "deletions": 7}, "files": [{"sha": "973f2a53c1ad6a43ee510701a2be75809a908825", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a63b5d3c846b74b917b8029aa00cb448faba409f/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63b5d3c846b74b917b8029aa00cb448faba409f/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=a63b5d3c846b74b917b8029aa00cb448faba409f", "patch": "@@ -55,6 +55,7 @@ pub struct FlycheckHandle {\n     // XXX: drop order is significant\n     sender: Sender<Restart>,\n     _thread: jod_thread::JoinHandle,\n+    id: usize,\n }\n \n impl FlycheckHandle {\n@@ -70,13 +71,17 @@ impl FlycheckHandle {\n             .name(\"Flycheck\".to_owned())\n             .spawn(move || actor.run(receiver))\n             .expect(\"failed to spawn thread\");\n-        FlycheckHandle { sender, _thread: thread }\n+        FlycheckHandle { id, sender, _thread: thread }\n     }\n \n     /// Schedule a re-start of the cargo check worker.\n     pub fn update(&self) {\n         self.sender.send(Restart).unwrap();\n     }\n+\n+    pub fn id(&self) -> usize {\n+        self.id\n+    }\n }\n \n pub enum Message {"}, {"sha": "cf06bf0c27b848a99f7739f51ead7fe21659704e", "filename": "crates/paths/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a63b5d3c846b74b917b8029aa00cb448faba409f/crates%2Fpaths%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63b5d3c846b74b917b8029aa00cb448faba409f/crates%2Fpaths%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fpaths%2Fsrc%2Flib.rs?ref=a63b5d3c846b74b917b8029aa00cb448faba409f", "patch": "@@ -103,6 +103,14 @@ impl AsRef<Path> for AbsPath {\n     }\n }\n \n+impl ToOwned for AbsPath {\n+    type Owned = AbsPathBuf;\n+\n+    fn to_owned(&self) -> Self::Owned {\n+        AbsPathBuf(self.0.to_owned())\n+    }\n+}\n+\n impl<'a> TryFrom<&'a Path> for &'a AbsPath {\n     type Error = &'a Path;\n     fn try_from(path: &'a Path) -> Result<&'a AbsPath, &'a Path> {"}, {"sha": "262c30f132c1b09bcd0a6845180253844a213f2b", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 56, "deletions": 6, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/a63b5d3c846b74b917b8029aa00cb448faba409f/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63b5d3c846b74b917b8029aa00cb448faba409f/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=a63b5d3c846b74b917b8029aa00cb448faba409f", "patch": "@@ -2,6 +2,7 @@\n //! requests/replies and notifications back to the client.\n use std::{\n     fmt,\n+    ops::Deref,\n     sync::Arc,\n     time::{Duration, Instant},\n };\n@@ -720,13 +721,62 @@ impl GlobalState {\n                 Ok(())\n             })?\n             .on::<lsp_types::notification::DidSaveTextDocument>(|this, params| {\n-                for flycheck in &this.flycheck {\n-                    flycheck.update();\n+                let mut updated = false;\n+                if let Ok(vfs_path) = from_proto::vfs_path(&params.text_document.uri) {\n+                    let (vfs, _) = &*this.vfs.read();\n+                    if let Some(file_id) = vfs.file_id(&vfs_path) {\n+                        let analysis = this.analysis_host.analysis();\n+                        let crate_ids = analysis.crate_for(file_id)?;\n+\n+                        let paths: Vec<_> = crate_ids\n+                            .iter()\n+                            .filter_map(|&crate_id| {\n+                                analysis\n+                                    .crate_root(crate_id)\n+                                    .map(|file_id| {\n+                                        vfs.file_path(file_id).as_path().map(ToOwned::to_owned)\n+                                    })\n+                                    .transpose()\n+                            })\n+                            .collect::<ide::Cancellable<_>>()?;\n+                        let paths: Vec<_> = paths.iter().map(Deref::deref).collect();\n+\n+                        let workspace_ids =\n+                            this.workspaces.iter().enumerate().filter(|(_, ws)| match ws {\n+                                project_model::ProjectWorkspace::Cargo { cargo, .. } => {\n+                                    cargo.packages().filter(|&pkg| cargo[pkg].is_member).any(\n+                                        |pkg| {\n+                                            cargo[pkg].targets.iter().any(|&it| {\n+                                                paths.contains(&cargo[it].root.as_path())\n+                                            })\n+                                        },\n+                                    )\n+                                }\n+                                project_model::ProjectWorkspace::Json { project, .. } => project\n+                                    .crates()\n+                                    .any(|(c, _)| crate_ids.iter().any(|&crate_id| crate_id == c)),\n+                                project_model::ProjectWorkspace::DetachedFiles { .. } => false,\n+                            });\n+                        'workspace: for (id, _) in workspace_ids {\n+                            for flycheck in &this.flycheck {\n+                                if id == flycheck.id() {\n+                                    updated = true;\n+                                    flycheck.update();\n+                                    continue 'workspace;\n+                                }\n+                            }\n+                        }\n+                    }\n+                    if let Some(abs_path) = vfs_path.as_path() {\n+                        if reload::should_refresh_for_change(&abs_path, ChangeKind::Modify) {\n+                            this.fetch_workspaces_queue\n+                                .request_op(format!(\"DidSaveTextDocument {}\", abs_path.display()));\n+                        }\n+                    }\n                 }\n-                if let Ok(abs_path) = from_proto::abs_path(&params.text_document.uri) {\n-                    if reload::should_refresh_for_change(&abs_path, ChangeKind::Modify) {\n-                        this.fetch_workspaces_queue\n-                            .request_op(format!(\"DidSaveTextDocument {}\", abs_path.display()));\n+                if !updated {\n+                    for flycheck in &this.flycheck {\n+                        flycheck.update();\n                     }\n                 }\n                 Ok(())"}]}