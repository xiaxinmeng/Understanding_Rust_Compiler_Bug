{"sha": "d4ecc4fb5cd82a9298956538c6d6574f7792810f", "node_id": "C_kwDOAAsO6NoAKGQ0ZWNjNGZiNWNkODJhOTI5ODk1NjUzOGM2ZDY1NzRmNzc5MjgxMGY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-01T07:35:42Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-04T08:32:43Z"}, "message": "Add 0-variant and 1-variant enums to the `deriving-all-codegen.rs` test.\n\nBecause they are interesting cases with their own code generation paths.", "tree": {"sha": "af82852ccd0cf61323cf7688e7aae2b531621f0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af82852ccd0cf61323cf7688e7aae2b531621f0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4ecc4fb5cd82a9298956538c6d6574f7792810f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4ecc4fb5cd82a9298956538c6d6574f7792810f", "html_url": "https://github.com/rust-lang/rust/commit/d4ecc4fb5cd82a9298956538c6d6574f7792810f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4ecc4fb5cd82a9298956538c6d6574f7792810f/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d38c45a11e7d0faf2f62d88eaf8b6312bd6cb4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d38c45a11e7d0faf2f62d88eaf8b6312bd6cb4a", "html_url": "https://github.com/rust-lang/rust/commit/9d38c45a11e7d0faf2f62d88eaf8b6312bd6cb4a"}], "stats": {"total": 176, "additions": 176, "deletions": 0}, "files": [{"sha": "1a651b2074c59ee1292a03e2a74f51566b250a0d", "filename": "src/test/ui/deriving/deriving-all-codegen.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4ecc4fb5cd82a9298956538c6d6574f7792810f/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ecc4fb5cd82a9298956538c6d6574f7792810f/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.rs?ref=d4ecc4fb5cd82a9298956538c6d6574f7792810f", "patch": "@@ -39,6 +39,16 @@ struct Big {\n #[repr(packed)]\n struct Packed(u32);\n \n+// An empty enum.\n+#[derive(Clone, Copy, Debug, Hash, PartialEq, Eq, PartialOrd, Ord)]\n+enum Enum0 {}\n+\n+// A single-variant enum.\n+#[derive(Clone, Debug, Hash, PartialEq, Eq, PartialOrd, Ord)]\n+enum Enum1 {\n+    Single { x: u32 }\n+}\n+\n // A C-like, fieldless enum.\n #[derive(Clone, Copy, Debug, Default, Hash, PartialEq, Eq, PartialOrd, Ord)]\n enum Fieldless {"}, {"sha": "decf9ec332a7ff1be9e83c8b4d5729e1b1bfef08", "filename": "src/test/ui/deriving/deriving-all-codegen.stdout", "status": "modified", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/d4ecc4fb5cd82a9298956538c6d6574f7792810f/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d4ecc4fb5cd82a9298956538c6d6574f7792810f/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-all-codegen.stdout?ref=d4ecc4fb5cd82a9298956538c6d6574f7792810f", "patch": "@@ -515,6 +515,172 @@ impl ::core::cmp::Ord for Packed {\n     }\n }\n \n+// An empty enum.\n+enum Enum0 {}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::clone::Clone for Enum0 {\n+    #[inline]\n+    fn clone(&self) -> Enum0 { { *self } }\n+}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::marker::Copy for Enum0 { }\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::fmt::Debug for Enum0 {\n+    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n+        unsafe { ::core::intrinsics::unreachable() }\n+    }\n+}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::hash::Hash for Enum0 {\n+    fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n+        unsafe { ::core::intrinsics::unreachable() }\n+    }\n+}\n+impl ::core::marker::StructuralPartialEq for Enum0 {}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::cmp::PartialEq for Enum0 {\n+    #[inline]\n+    fn eq(&self, other: &Enum0) -> bool {\n+        unsafe { ::core::intrinsics::unreachable() }\n+    }\n+}\n+impl ::core::marker::StructuralEq for Enum0 {}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::cmp::Eq for Enum0 {\n+    #[inline]\n+    #[doc(hidden)]\n+    #[no_coverage]\n+    fn assert_receiver_is_total_eq(&self) -> () { {} }\n+}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::cmp::PartialOrd for Enum0 {\n+    #[inline]\n+    fn partial_cmp(&self, other: &Enum0)\n+        -> ::core::option::Option<::core::cmp::Ordering> {\n+        unsafe { ::core::intrinsics::unreachable() }\n+    }\n+}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::cmp::Ord for Enum0 {\n+    #[inline]\n+    fn cmp(&self, other: &Enum0) -> ::core::cmp::Ordering {\n+        unsafe { ::core::intrinsics::unreachable() }\n+    }\n+}\n+\n+// A single-variant enum.\n+enum Enum1 {\n+    Single {\n+        x: u32,\n+    },\n+}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::clone::Clone for Enum1 {\n+    #[inline]\n+    fn clone(&self) -> Enum1 {\n+        match (&*self,) {\n+            (&Enum1::Single { x: ref __self_0 },) =>\n+                Enum1::Single { x: ::core::clone::Clone::clone(&*__self_0) },\n+        }\n+    }\n+}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::fmt::Debug for Enum1 {\n+    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {\n+        match (&*self,) {\n+            (&Enum1::Single { x: ref __self_0 },) =>\n+                ::core::fmt::Formatter::debug_struct_field1_finish(f,\n+                    \"Single\", \"x\", &&*__self_0),\n+        }\n+    }\n+}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::hash::Hash for Enum1 {\n+    fn hash<__H: ::core::hash::Hasher>(&self, state: &mut __H) -> () {\n+        match (&*self,) {\n+            (&Enum1::Single { x: ref __self_0 },) => {\n+                ::core::hash::Hash::hash(&*__self_0, state)\n+            }\n+        }\n+    }\n+}\n+impl ::core::marker::StructuralPartialEq for Enum1 {}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::cmp::PartialEq for Enum1 {\n+    #[inline]\n+    fn eq(&self, other: &Enum1) -> bool {\n+        match (&*self, &*other) {\n+            (&Enum1::Single { x: ref __self_0 }, &Enum1::Single {\n+                x: ref __arg_1_0 }) => *__self_0 == *__arg_1_0,\n+        }\n+    }\n+    #[inline]\n+    fn ne(&self, other: &Enum1) -> bool {\n+        match (&*self, &*other) {\n+            (&Enum1::Single { x: ref __self_0 }, &Enum1::Single {\n+                x: ref __arg_1_0 }) => *__self_0 != *__arg_1_0,\n+        }\n+    }\n+}\n+impl ::core::marker::StructuralEq for Enum1 {}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::cmp::Eq for Enum1 {\n+    #[inline]\n+    #[doc(hidden)]\n+    #[no_coverage]\n+    fn assert_receiver_is_total_eq(&self) -> () {\n+        { let _: ::core::cmp::AssertParamIsEq<u32>; }\n+    }\n+}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::cmp::PartialOrd for Enum1 {\n+    #[inline]\n+    fn partial_cmp(&self, other: &Enum1)\n+        -> ::core::option::Option<::core::cmp::Ordering> {\n+        match (&*self, &*other) {\n+            (&Enum1::Single { x: ref __self_0 }, &Enum1::Single {\n+                x: ref __arg_1_0 }) =>\n+                match ::core::cmp::PartialOrd::partial_cmp(&*__self_0,\n+                        &*__arg_1_0) {\n+                    ::core::option::Option::Some(::core::cmp::Ordering::Equal)\n+                        =>\n+                        ::core::option::Option::Some(::core::cmp::Ordering::Equal),\n+                    cmp => cmp,\n+                },\n+        }\n+    }\n+}\n+#[automatically_derived]\n+#[allow(unused_qualifications)]\n+impl ::core::cmp::Ord for Enum1 {\n+    #[inline]\n+    fn cmp(&self, other: &Enum1) -> ::core::cmp::Ordering {\n+        match (&*self, &*other) {\n+            (&Enum1::Single { x: ref __self_0 }, &Enum1::Single {\n+                x: ref __arg_1_0 }) =>\n+                match ::core::cmp::Ord::cmp(&*__self_0, &*__arg_1_0) {\n+                    ::core::cmp::Ordering::Equal =>\n+                        ::core::cmp::Ordering::Equal,\n+                    cmp => cmp,\n+                },\n+        }\n+    }\n+}\n+\n // A C-like, fieldless enum.\n enum Fieldless {\n "}]}