{"sha": "bdfea1c095d0a98e759eeb680d34d2d6da51132c", "node_id": "C_kwDOAAsO6NoAKGJkZmVhMWMwOTVkMGE5OGU3NTllZWI2ODBkMzRkMmQ2ZGE1MTEzMmM", "commit": {"author": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2022-05-08T11:13:14Z"}, "committer": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2022-05-08T11:13:14Z"}, "message": "Pass msrvs by copy", "tree": {"sha": "460e0a078f3be67e0b089a1674ec1c9eea7a2c48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/460e0a078f3be67e0b089a1674ec1c9eea7a2c48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdfea1c095d0a98e759eeb680d34d2d6da51132c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdfea1c095d0a98e759eeb680d34d2d6da51132c", "html_url": "https://github.com/rust-lang/rust/commit/bdfea1c095d0a98e759eeb680d34d2d6da51132c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdfea1c095d0a98e759eeb680d34d2d6da51132c/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c78883fdf5ccdeef833bc99095a18dcf6312d0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c78883fdf5ccdeef833bc99095a18dcf6312d0b", "html_url": "https://github.com/rust-lang/rust/commit/9c78883fdf5ccdeef833bc99095a18dcf6312d0b"}], "stats": {"total": 142, "additions": 70, "deletions": 72}, "files": [{"sha": "da1b646f4777a006ee434094d0b9c0e113782508", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -87,9 +87,7 @@ impl ApproxConstant {\n         let s = s.as_str();\n         if s.parse::<f64>().is_ok() {\n             for &(constant, name, min_digits, msrv) in &KNOWN_CONSTS {\n-                if is_approx_const(constant, s, min_digits)\n-                    && msrv.as_ref().map_or(true, |msrv| meets_msrv(self.msrv.as_ref(), msrv))\n-                {\n+                if is_approx_const(constant, s, min_digits) && msrv.map_or(true, |msrv| meets_msrv(self.msrv, msrv)) {\n                     span_lint_and_help(\n                         cx,\n                         APPROX_CONSTANT,"}, {"sha": "3de91f3d24a9147ef7cbdfc89f05c020cdfac5c3", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -613,7 +613,7 @@ fn check_empty_line_after_outer_attr(cx: &EarlyContext<'_>, item: &rustc_ast::It\n \n fn check_deprecated_cfg_attr(cx: &EarlyContext<'_>, attr: &Attribute, msrv: Option<RustcVersion>) {\n     if_chain! {\n-        if meets_msrv(msrv.as_ref(), &msrvs::TOOL_ATTRIBUTES);\n+        if meets_msrv(msrv, msrvs::TOOL_ATTRIBUTES);\n         // check cfg_attr\n         if attr.has_name(sym::cfg_attr);\n         if let Some(items) = attr.meta_item_list();"}, {"sha": "0993adbae2e6bfdb37c27b85335549c83c773dc9", "filename": "clippy_lints/src/borrow_as_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fborrow_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fborrow_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fborrow_as_ptr.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -57,7 +57,7 @@ impl BorrowAsPtr {\n \n impl<'tcx> LateLintPass<'tcx> for BorrowAsPtr {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if !meets_msrv(self.msrv.as_ref(), &msrvs::BORROW_AS_PTR) {\n+        if !meets_msrv(self.msrv, msrvs::BORROW_AS_PTR) {\n             return;\n         }\n "}, {"sha": "6bac6bf83f8e5480e735854a695c5c0dbbafc98d", "filename": "clippy_lints/src/casts/cast_abs_to_unsigned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fcasts%2Fcast_abs_to_unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fcasts%2Fcast_abs_to_unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_abs_to_unsigned.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -16,10 +16,10 @@ pub(super) fn check(\n     cast_expr: &Expr<'_>,\n     cast_from: Ty<'_>,\n     cast_to: Ty<'_>,\n-    msrv: &Option<RustcVersion>,\n+    msrv: Option<RustcVersion>,\n ) {\n     if_chain! {\n-        if meets_msrv(msrv.as_ref(), &msrvs::UNSIGNED_ABS);\n+        if meets_msrv(msrv, msrvs::UNSIGNED_ABS);\n         if cast_from.is_integral();\n         if cast_to.is_integral();\n         if cast_from.is_signed();"}, {"sha": "938458e30cadc6082697568ebdd7a9a413ebfa4d", "filename": "clippy_lints/src/casts/cast_lossless.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -16,7 +16,7 @@ pub(super) fn check(\n     cast_op: &Expr<'_>,\n     cast_from: Ty<'_>,\n     cast_to: Ty<'_>,\n-    msrv: &Option<RustcVersion>,\n+    msrv: Option<RustcVersion>,\n ) {\n     if !should_lint(cx, expr, cast_from, cast_to, msrv) {\n         return;\n@@ -68,7 +68,7 @@ fn should_lint(\n     expr: &Expr<'_>,\n     cast_from: Ty<'_>,\n     cast_to: Ty<'_>,\n-    msrv: &Option<RustcVersion>,\n+    msrv: Option<RustcVersion>,\n ) -> bool {\n     // Do not suggest using From in consts/statics until it is valid to do so (see #2267).\n     if in_constant(cx, expr.hir_id) {\n@@ -95,7 +95,7 @@ fn should_lint(\n             };\n             !is_isize_or_usize(cast_from) && from_nbits < to_nbits\n         },\n-        (false, true) if matches!(cast_from.kind(), ty::Bool) && meets_msrv(msrv.as_ref(), &msrvs::FROM_BOOL) => true,\n+        (false, true) if matches!(cast_from.kind(), ty::Bool) && meets_msrv(msrv, msrvs::FROM_BOOL) => true,\n         (_, _) => {\n             matches!(cast_from.kind(), ty::Float(FloatTy::F32)) && matches!(cast_to.kind(), ty::Float(FloatTy::F64))\n         },"}, {"sha": "bb09a6708a0161ab4b46099b8dbc0c06ba46759e", "filename": "clippy_lints/src/casts/cast_slice_different_sizes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -8,9 +8,9 @@ use rustc_semver::RustcVersion;\n \n use super::CAST_SLICE_DIFFERENT_SIZES;\n \n-pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>, msrv: &Option<RustcVersion>) {\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>, msrv: Option<RustcVersion>) {\n     // suggestion is invalid if `ptr::slice_from_raw_parts` does not exist\n-    if !meets_msrv(msrv.as_ref(), &msrvs::PTR_SLICE_RAW_PARTS) {\n+    if !meets_msrv(msrv, msrvs::PTR_SLICE_RAW_PARTS) {\n         return;\n     }\n "}, {"sha": "108e119c1041c5e4c9dba0611101335ff2ccd341", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -532,7 +532,7 @@ impl_lint_pass!(Casts => [\n impl<'tcx> LateLintPass<'tcx> for Casts {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if !in_external_macro(cx.sess(), expr.span) {\n-            ptr_as_ptr::check(cx, expr, &self.msrv);\n+            ptr_as_ptr::check(cx, expr, self.msrv);\n         }\n \n         if expr.span.from_expansion() {\n@@ -562,18 +562,18 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n                     cast_possible_wrap::check(cx, expr, cast_from, cast_to);\n                     cast_precision_loss::check(cx, expr, cast_from, cast_to);\n                     cast_sign_loss::check(cx, expr, cast_expr, cast_from, cast_to);\n-                    cast_abs_to_unsigned::check(cx, expr, cast_expr, cast_from, cast_to, &self.msrv);\n+                    cast_abs_to_unsigned::check(cx, expr, cast_expr, cast_from, cast_to, self.msrv);\n                 }\n-                cast_lossless::check(cx, expr, cast_expr, cast_from, cast_to, &self.msrv);\n+                cast_lossless::check(cx, expr, cast_expr, cast_from, cast_to, self.msrv);\n                 cast_enum_constructor::check(cx, expr, cast_expr, cast_from);\n             }\n         }\n \n         cast_ref_to_mut::check(cx, expr);\n         cast_ptr_alignment::check(cx, expr);\n         char_lit_as_u8::check(cx, expr);\n-        ptr_as_ptr::check(cx, expr, &self.msrv);\n-        cast_slice_different_sizes::check(cx, expr, &self.msrv);\n+        ptr_as_ptr::check(cx, expr, self.msrv);\n+        cast_slice_different_sizes::check(cx, expr, self.msrv);\n     }\n \n     extract_msrv_attr!(LateContext);"}, {"sha": "46d45d09661ae6d220eeebe2ab2d1c276a423deb", "filename": "clippy_lints/src/casts/ptr_as_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -12,8 +12,8 @@ use rustc_semver::RustcVersion;\n \n use super::PTR_AS_PTR;\n \n-pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, msrv: &Option<RustcVersion>) {\n-    if !meets_msrv(msrv.as_ref(), &msrvs::POINTER_CAST) {\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, msrv: Option<RustcVersion>) {\n+    if !meets_msrv(msrv, msrvs::POINTER_CAST) {\n         return;\n     }\n "}, {"sha": "e23428e216d09b03457f65ea5d262bd1c6c3fe9d", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -57,7 +57,7 @@ impl_lint_pass!(CheckedConversions => [CHECKED_CONVERSIONS]);\n \n impl<'tcx> LateLintPass<'tcx> for CheckedConversions {\n     fn check_expr(&mut self, cx: &LateContext<'_>, item: &Expr<'_>) {\n-        if !meets_msrv(self.msrv.as_ref(), &msrvs::TRY_FROM) {\n+        if !meets_msrv(self.msrv, msrvs::TRY_FROM) {\n             return;\n         }\n "}, {"sha": "5d25c1d06341f5bb57ccdd5e32b485226f61d30e", "filename": "clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -55,7 +55,7 @@ impl_lint_pass!(FromOverInto => [FROM_OVER_INTO]);\n \n impl<'tcx> LateLintPass<'tcx> for FromOverInto {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n-        if !meets_msrv(self.msrv.as_ref(), &msrvs::RE_REBALANCING_COHERENCE) {\n+        if !meets_msrv(self.msrv, msrvs::RE_REBALANCING_COHERENCE) {\n             return;\n         }\n "}, {"sha": "b8d227855d97616c1f4171dcd4e0b621068e328f", "filename": "clippy_lints/src/if_then_some_else_none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -57,7 +57,7 @@ impl_lint_pass!(IfThenSomeElseNone => [IF_THEN_SOME_ELSE_NONE]);\n \n impl<'tcx> LateLintPass<'tcx> for IfThenSomeElseNone {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'tcx Expr<'_>) {\n-        if !meets_msrv(self.msrv.as_ref(), &msrvs::BOOL_THEN) {\n+        if !meets_msrv(self.msrv, msrvs::BOOL_THEN) {\n             return;\n         }\n "}, {"sha": "07b0604f78d7569c6d39d5f3727312c0af165f3b", "filename": "clippy_lints/src/index_refutable_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findex_refutable_slice.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -75,7 +75,7 @@ impl<'tcx> LateLintPass<'tcx> for IndexRefutableSlice {\n             if !expr.span.from_expansion() || is_expn_of(expr.span, \"if_chain\").is_some();\n             if let Some(IfLet {let_pat, if_then, ..}) = IfLet::hir(cx, expr);\n             if !is_lint_allowed(cx, INDEX_REFUTABLE_SLICE, expr.hir_id);\n-            if meets_msrv(self.msrv.as_ref(), &msrvs::SLICE_PATTERNS);\n+            if meets_msrv(self.msrv, msrvs::SLICE_PATTERNS);\n \n             let found_slices = find_slice_values(cx, let_pat);\n             if !found_slices.is_empty();"}, {"sha": "60bbcde4f1de566b2ab100acc675130691ba61cd", "filename": "clippy_lints/src/manual_bits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmanual_bits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmanual_bits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_bits.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -48,7 +48,7 @@ impl_lint_pass!(ManualBits => [MANUAL_BITS]);\n \n impl<'tcx> LateLintPass<'tcx> for ManualBits {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if !meets_msrv(self.msrv.as_ref(), &msrvs::MANUAL_BITS) {\n+        if !meets_msrv(self.msrv, msrvs::MANUAL_BITS) {\n             return;\n         }\n "}, {"sha": "14f39067299c8a28cd2579d1462046e87973ede3", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -98,7 +98,7 @@ impl_lint_pass!(ManualNonExhaustiveEnum => [MANUAL_NON_EXHAUSTIVE]);\n \n impl EarlyLintPass for ManualNonExhaustiveStruct {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &ast::Item) {\n-        if !meets_msrv(self.msrv.as_ref(), &msrvs::NON_EXHAUSTIVE) {\n+        if !meets_msrv(self.msrv, msrvs::NON_EXHAUSTIVE) {\n             return;\n         }\n \n@@ -150,7 +150,7 @@ impl EarlyLintPass for ManualNonExhaustiveStruct {\n \n impl<'tcx> LateLintPass<'tcx> for ManualNonExhaustiveEnum {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n-        if !meets_msrv(self.msrv.as_ref(), &msrvs::NON_EXHAUSTIVE) {\n+        if !meets_msrv(self.msrv, msrvs::NON_EXHAUSTIVE) {\n             return;\n         }\n "}, {"sha": "dfb3efc4e28b65c246e3fe67b3be4b74ac12c8e0", "filename": "clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_strip.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -68,7 +68,7 @@ enum StripKind {\n \n impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if !meets_msrv(self.msrv.as_ref(), &msrvs::STR_STRIP_PREFIX) {\n+        if !meets_msrv(self.msrv, msrvs::STR_STRIP_PREFIX) {\n             return;\n         }\n "}, {"sha": "a13d191375bfa02ad4df4afaf56dbb107da67f46", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -144,7 +144,7 @@ impl MapClone {\n     fn lint_explicit_closure(&self, cx: &LateContext<'_>, replace: Span, root: Span, is_copy: bool) {\n         let mut applicability = Applicability::MachineApplicable;\n \n-        let (message, sugg_method) = if is_copy && meets_msrv(self.msrv.as_ref(), &msrvs::ITERATOR_COPIED) {\n+        let (message, sugg_method) = if is_copy && meets_msrv(self.msrv, msrvs::ITERATOR_COPIED) {\n             (\"you are using an explicit closure for copying elements\", \"copied\")\n         } else {\n             (\"you are using an explicit closure for cloning elements\", \"cloned\")"}, {"sha": "3d8391bce2b28ff49a7c0e87fa20bec7f9700684", "filename": "clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -658,7 +658,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n             }\n             if !contains_cfg_arm(cx, expr, ex, arms) {\n                 if source == MatchSource::Normal {\n-                    if !(meets_msrv(self.msrv.as_ref(), &msrvs::MATCHES_MACRO)\n+                    if !(meets_msrv(self.msrv, msrvs::MATCHES_MACRO)\n                         && match_like_matches::check_match(cx, expr, ex, arms))\n                     {\n                         match_same_arms::check(cx, arms);\n@@ -685,7 +685,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n             match_wild_err_arm::check(cx, ex, arms);\n             wild_in_or_pats::check(cx, arms);\n         } else {\n-            if meets_msrv(self.msrv.as_ref(), &msrvs::MATCHES_MACRO) {\n+            if meets_msrv(self.msrv, msrvs::MATCHES_MACRO) {\n                 match_like_matches::check(cx, expr);\n             }\n             redundant_pattern_match::check(cx, expr);"}, {"sha": "41073d40f3d79052530e6afc063eeeb9ed44f970", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -254,7 +254,7 @@ impl<'tcx> LateLintPass<'tcx> for MemReplace {\n             then {\n                 check_replace_option_with_none(cx, src, dest, expr.span);\n                 check_replace_with_uninit(cx, src, dest, expr.span);\n-                if meets_msrv(self.msrv.as_ref(), &msrvs::MEM_TAKE) {\n+                if meets_msrv(self.msrv, msrvs::MEM_TAKE) {\n                     check_replace_with_default(cx, src, dest, expr.span);\n                 }\n             }"}, {"sha": "e9aeab2d5b62e37180d67dc5bc64b75b12fa8666", "filename": "clippy_lints/src/methods/cloned_instead_of_copied.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -10,16 +10,16 @@ use rustc_span::{sym, Span};\n \n use super::CLONED_INSTEAD_OF_COPIED;\n \n-pub fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, span: Span, msrv: Option<&RustcVersion>) {\n+pub fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, span: Span, msrv: Option<RustcVersion>) {\n     let recv_ty = cx.typeck_results().expr_ty_adjusted(recv);\n     let inner_ty = match recv_ty.kind() {\n         // `Option<T>` -> `T`\n         ty::Adt(adt, subst)\n-            if cx.tcx.is_diagnostic_item(sym::Option, adt.did()) && meets_msrv(msrv, &msrvs::OPTION_COPIED) =>\n+            if cx.tcx.is_diagnostic_item(sym::Option, adt.did()) && meets_msrv(msrv, msrvs::OPTION_COPIED) =>\n         {\n             subst.type_at(0)\n         },\n-        _ if is_trait_method(cx, expr, sym::Iterator) && meets_msrv(msrv, &msrvs::ITERATOR_COPIED) => {\n+        _ if is_trait_method(cx, expr, sym::Iterator) && meets_msrv(msrv, msrvs::ITERATOR_COPIED) => {\n             match get_iterator_item_ty(cx, recv_ty) {\n                 // <T as Iterator>::Item\n                 Some(ty) => ty,"}, {"sha": "570a1b87358ddb042699df7a3b3b778c7f125a46", "filename": "clippy_lints/src/methods/err_expect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmethods%2Ferr_expect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmethods%2Ferr_expect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ferr_expect.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -13,15 +13,15 @@ pub(super) fn check(\n     cx: &LateContext<'_>,\n     _expr: &rustc_hir::Expr<'_>,\n     recv: &rustc_hir::Expr<'_>,\n-    msrv: Option<&RustcVersion>,\n+    msrv: Option<RustcVersion>,\n     expect_span: Span,\n     err_span: Span,\n ) {\n     if_chain! {\n         if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Result);\n         // Test the version to make sure the lint can be showed (expect_err has been\n         // introduced in rust 1.17.0 : https://github.com/rust-lang/rust/pull/38982)\n-        if meets_msrv(msrv, &msrvs::EXPECT_ERR);\n+        if meets_msrv(msrv, msrvs::EXPECT_ERR);\n \n         // Grabs the `Result<T, E>` type\n         let result_type = cx.typeck_results().expr_ty(recv);"}, {"sha": "38ec4d8e3ab8fb9ea62e50d3b45e5473041b9279", "filename": "clippy_lints/src/methods/filter_map_next.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -14,10 +14,10 @@ pub(super) fn check<'tcx>(\n     expr: &'tcx hir::Expr<'_>,\n     recv: &'tcx hir::Expr<'_>,\n     arg: &'tcx hir::Expr<'_>,\n-    msrv: Option<&RustcVersion>,\n+    msrv: Option<RustcVersion>,\n ) {\n     if is_trait_method(cx, expr, sym::Iterator) {\n-        if !meets_msrv(msrv, &msrvs::ITERATOR_FIND_MAP) {\n+        if !meets_msrv(msrv, msrvs::ITERATOR_FIND_MAP) {\n             return;\n         }\n "}, {"sha": "aa176dcc8b4af2016da9584758306e610129aa64", "filename": "clippy_lints/src/methods/is_digit_ascii_radix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmethods%2Fis_digit_ascii_radix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmethods%2Fis_digit_ascii_radix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fis_digit_ascii_radix.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -15,9 +15,9 @@ pub(super) fn check<'tcx>(\n     expr: &'tcx Expr<'_>,\n     self_arg: &'tcx Expr<'_>,\n     radix: &'tcx Expr<'_>,\n-    msrv: Option<&RustcVersion>,\n+    msrv: Option<RustcVersion>,\n ) {\n-    if !meets_msrv(msrv, &msrvs::IS_ASCII_DIGIT) {\n+    if !meets_msrv(msrv, msrvs::IS_ASCII_DIGIT) {\n         return;\n     }\n "}, {"sha": "4a8e7ce4ddbbd3d9dc171e2732f93e55b99f85ae", "filename": "clippy_lints/src/methods/map_unwrap_or.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -19,13 +19,13 @@ pub(super) fn check<'tcx>(\n     recv: &'tcx hir::Expr<'_>,\n     map_arg: &'tcx hir::Expr<'_>,\n     unwrap_arg: &'tcx hir::Expr<'_>,\n-    msrv: Option<&RustcVersion>,\n+    msrv: Option<RustcVersion>,\n ) -> bool {\n     // lint if the caller of `map()` is an `Option`\n     let is_option = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Option);\n     let is_result = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Result);\n \n-    if is_result && !meets_msrv(msrv, &msrvs::RESULT_MAP_OR_ELSE) {\n+    if is_result && !meets_msrv(msrv, msrvs::RESULT_MAP_OR_ELSE) {\n         return false;\n     }\n "}, {"sha": "5b073f6f3b8f928d644b96578d60269f41bb50a7", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -2306,7 +2306,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             return;\n         }\n \n-        check_methods(cx, expr, self.msrv.as_ref());\n+        check_methods(cx, expr, self.msrv);\n \n         match expr.kind {\n             hir::ExprKind::Call(func, args) => {\n@@ -2322,7 +2322,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 single_char_add_str::check(cx, expr, args);\n                 into_iter_on_ref::check(cx, expr, method_span, method_call.ident.name, args);\n                 single_char_pattern::check(cx, expr, method_call.ident.name, args);\n-                unnecessary_to_owned::check(cx, expr, method_call.ident.name, args, self.msrv.as_ref());\n+                unnecessary_to_owned::check(cx, expr, method_call.ident.name, args, self.msrv);\n             },\n             hir::ExprKind::Binary(op, lhs, rhs) if op.node == hir::BinOpKind::Eq || op.node == hir::BinOpKind::Ne => {\n                 let mut info = BinaryExprInfo {\n@@ -2506,7 +2506,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n }\n \n #[allow(clippy::too_many_lines)]\n-fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Option<&RustcVersion>) {\n+fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Option<RustcVersion>) {\n     if let Some((name, [recv, args @ ..], span)) = method_call(expr) {\n         match (name, args) {\n             (\"add\" | \"offset\" | \"sub\" | \"wrapping_offset\" | \"wrapping_add\" | \"wrapping_sub\", [_arg]) => {\n@@ -2534,7 +2534,7 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                     map_collect_result_unit::check(cx, expr, m_recv, m_arg, recv);\n                 },\n                 Some((\"take\", [take_self_arg, take_arg], _)) => {\n-                    if meets_msrv(msrv, &msrvs::STR_REPEAT) {\n+                    if meets_msrv(msrv, msrvs::STR_REPEAT) {\n                         manual_str_repeat::check(cx, expr, recv, take_self_arg, take_arg);\n                     }\n                 },"}, {"sha": "b50a173d8359b83ab361506f2737be370bc432af", "filename": "clippy_lints/src/methods/option_as_ref_deref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -19,9 +19,9 @@ pub(super) fn check<'tcx>(\n     as_ref_recv: &hir::Expr<'_>,\n     map_arg: &hir::Expr<'_>,\n     is_mut: bool,\n-    msrv: Option<&RustcVersion>,\n+    msrv: Option<RustcVersion>,\n ) {\n-    if !meets_msrv(msrv, &msrvs::OPTION_AS_DEREF) {\n+    if !meets_msrv(msrv, msrvs::OPTION_AS_DEREF) {\n         return;\n     }\n "}, {"sha": "fc375763542ab77926ae141e4082fcb7400eb89f", "filename": "clippy_lints/src/methods/str_splitn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -24,7 +24,7 @@ pub(super) fn check(\n     self_arg: &Expr<'_>,\n     pat_arg: &Expr<'_>,\n     count: u128,\n-    msrv: Option<&RustcVersion>,\n+    msrv: Option<RustcVersion>,\n ) {\n     if count < 2 || !cx.typeck_results().expr_ty_adjusted(self_arg).peel_refs().is_str() {\n         return;\n@@ -34,7 +34,7 @@ pub(super) fn check(\n         IterUsageKind::Nth(n) => count > n + 1,\n         IterUsageKind::NextTuple => count > 2,\n     };\n-    let manual = count == 2 && meets_msrv(msrv, &msrvs::STR_SPLIT_ONCE);\n+    let manual = count == 2 && meets_msrv(msrv, msrvs::STR_SPLIT_ONCE);\n \n     match parse_iter_usage(cx, expr.span.ctxt(), cx.tcx.hir().parent_iter(expr.hir_id)) {\n         Some(usage) if needless(usage.kind) => lint_needless(cx, method_name, expr, self_arg, pat_arg),"}, {"sha": "97c4feb3122a08fbaf684b56cd6d994bbf81f844", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -26,7 +26,7 @@ pub fn check<'tcx>(\n     expr: &'tcx Expr<'tcx>,\n     method_name: Symbol,\n     args: &'tcx [Expr<'tcx>],\n-    msrv: Option<&RustcVersion>,\n+    msrv: Option<RustcVersion>,\n ) {\n     if_chain! {\n         if let Some(method_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n@@ -198,7 +198,7 @@ fn check_into_iter_call_arg(\n     expr: &Expr<'_>,\n     method_name: Symbol,\n     receiver: &Expr<'_>,\n-    msrv: Option<&RustcVersion>,\n+    msrv: Option<RustcVersion>,\n ) -> bool {\n     if_chain! {\n         if let Some(parent) = get_parent_expr(cx, expr);\n@@ -213,7 +213,7 @@ fn check_into_iter_call_arg(\n             if unnecessary_iter_cloned::check_for_loop_iter(cx, parent, method_name, receiver, true) {\n                 return true;\n             }\n-            let cloned_or_copied = if is_copy(cx, item_ty) && meets_msrv(msrv, &msrvs::ITERATOR_COPIED) {\n+            let cloned_or_copied = if is_copy(cx, item_ty) && meets_msrv(msrv, msrvs::ITERATOR_COPIED) {\n                 \"copied\"\n             } else {\n                 \"cloned\""}, {"sha": "16d65966c10096622166221906219d1fdba863b1", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -93,7 +93,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n         span: Span,\n         hir_id: HirId,\n     ) {\n-        if !meets_msrv(self.msrv.as_ref(), &msrvs::CONST_IF_MATCH) {\n+        if !meets_msrv(self.msrv, msrvs::CONST_IF_MATCH) {\n             return;\n         }\n \n@@ -146,7 +146,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n \n         let mir = cx.tcx.optimized_mir(def_id);\n \n-        if let Err((span, err)) = is_min_const_fn(cx.tcx, mir, self.msrv.as_ref()) {\n+        if let Err((span, err)) = is_min_const_fn(cx.tcx, mir, self.msrv) {\n             if cx.tcx.is_const_fn_raw(def_id.to_def_id()) {\n                 cx.tcx.sess.span_err(span, err.as_ref());\n             }"}, {"sha": "a47dc26f60347c71f291ade56959825849020700", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -193,7 +193,7 @@ impl<'tcx> LateLintPass<'tcx> for Ranges {\n                 check_range_zip_with_len(cx, path, args, expr.span);\n             },\n             ExprKind::Binary(ref op, l, r) => {\n-                if meets_msrv(self.msrv.as_ref(), &msrvs::RANGE_CONTAINS) {\n+                if meets_msrv(self.msrv, msrvs::RANGE_CONTAINS) {\n                     check_possible_range_contains(cx, op.node, l, r, expr);\n                 }\n             },"}, {"sha": "40b03068f6c772059167ff6814824d1d0846e33e", "filename": "clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -51,7 +51,7 @@ impl_lint_pass!(RedundantFieldNames => [REDUNDANT_FIELD_NAMES]);\n \n impl EarlyLintPass for RedundantFieldNames {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if !meets_msrv(self.msrv.as_ref(), &msrvs::FIELD_INIT_SHORTHAND) {\n+        if !meets_msrv(self.msrv, msrvs::FIELD_INIT_SHORTHAND) {\n             return;\n         }\n "}, {"sha": "2d26c49252fa5d9db9231d70ecb6cda32c80c966", "filename": "clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -99,7 +99,7 @@ impl RedundantStaticLifetimes {\n \n impl EarlyLintPass for RedundantStaticLifetimes {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n-        if !meets_msrv(self.msrv.as_ref(), &msrvs::STATIC_IN_CONST) {\n+        if !meets_msrv(self.msrv, msrvs::STATIC_IN_CONST) {\n             return;\n         }\n "}, {"sha": "04e2f301bfd888399efbae51888f2b8366c96e89", "filename": "clippy_lints/src/unnested_or_patterns.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnested_or_patterns.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -61,27 +61,27 @@ impl_lint_pass!(UnnestedOrPatterns => [UNNESTED_OR_PATTERNS]);\n \n impl EarlyLintPass for UnnestedOrPatterns {\n     fn check_arm(&mut self, cx: &EarlyContext<'_>, a: &ast::Arm) {\n-        if meets_msrv(self.msrv.as_ref(), &msrvs::OR_PATTERNS) {\n+        if meets_msrv(self.msrv, msrvs::OR_PATTERNS) {\n             lint_unnested_or_patterns(cx, &a.pat);\n         }\n     }\n \n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n-        if meets_msrv(self.msrv.as_ref(), &msrvs::OR_PATTERNS) {\n+        if meets_msrv(self.msrv, msrvs::OR_PATTERNS) {\n             if let ast::ExprKind::Let(pat, _, _) = &e.kind {\n                 lint_unnested_or_patterns(cx, pat);\n             }\n         }\n     }\n \n     fn check_param(&mut self, cx: &EarlyContext<'_>, p: &ast::Param) {\n-        if meets_msrv(self.msrv.as_ref(), &msrvs::OR_PATTERNS) {\n+        if meets_msrv(self.msrv, msrvs::OR_PATTERNS) {\n             lint_unnested_or_patterns(cx, &p.pat);\n         }\n     }\n \n     fn check_local(&mut self, cx: &EarlyContext<'_>, l: &ast::Local) {\n-        if meets_msrv(self.msrv.as_ref(), &msrvs::OR_PATTERNS) {\n+        if meets_msrv(self.msrv, msrvs::OR_PATTERNS) {\n             lint_unnested_or_patterns(cx, &l.pat);\n         }\n     }"}, {"sha": "66f7748e9e0898bef526b132360aed58781ed396", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -198,7 +198,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n     fn check_ty(&mut self, cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>) {\n         if_chain! {\n             if !hir_ty.span.from_expansion();\n-            if meets_msrv(self.msrv.as_ref(), &msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n+            if meets_msrv(self.msrv, msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n             if let Some(&StackItem::Check {\n                 impl_id,\n                 in_body,\n@@ -225,7 +225,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n         if_chain! {\n             if !expr.span.from_expansion();\n-            if meets_msrv(self.msrv.as_ref(), &msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n+            if meets_msrv(self.msrv, msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n             if let Some(&StackItem::Check { impl_id, .. }) = self.stack.last();\n             if cx.typeck_results().expr_ty(expr) == cx.tcx.type_of(impl_id);\n             then {} else { return; }\n@@ -256,7 +256,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n     fn check_pat(&mut self, cx: &LateContext<'_>, pat: &Pat<'_>) {\n         if_chain! {\n             if !pat.span.from_expansion();\n-            if meets_msrv(self.msrv.as_ref(), &msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n+            if meets_msrv(self.msrv, msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n             if let Some(&StackItem::Check { impl_id, .. }) = self.stack.last();\n             if let PatKind::Path(QPath::Resolved(_, path)) = pat.kind;\n             if !matches!(path.res, Res::SelfTy { .. } | Res::Def(DefKind::TyParam, _));"}, {"sha": "ed511004ea07af35da8ebc80e3773ce6b9a0c218", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -117,8 +117,8 @@ pub fn parse_msrv(msrv: &str, sess: Option<&Session>, span: Option<Span>) -> Opt\n     None\n }\n \n-pub fn meets_msrv(msrv: Option<&RustcVersion>, lint_msrv: &RustcVersion) -> bool {\n-    msrv.map_or(true, |msrv| msrv.meets(*lint_msrv))\n+pub fn meets_msrv(msrv: Option<RustcVersion>, lint_msrv: RustcVersion) -> bool {\n+    msrv.map_or(true, |msrv| msrv.meets(lint_msrv))\n }\n \n #[macro_export]"}, {"sha": "6a8ed4e7bd73ffe6d08dbe83ad6e69994c92d81f", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -19,7 +19,7 @@ use std::borrow::Cow;\n \n type McfResult = Result<(), (Span, Cow<'static, str>)>;\n \n-pub fn is_min_const_fn<'a, 'tcx>(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, msrv: Option<&RustcVersion>) -> McfResult {\n+pub fn is_min_const_fn<'a, 'tcx>(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, msrv: Option<RustcVersion>) -> McfResult {\n     let def_id = body.source.def_id();\n     let mut current = def_id;\n     loop {\n@@ -269,7 +269,7 @@ fn check_terminator<'a, 'tcx>(\n     tcx: TyCtxt<'tcx>,\n     body: &'a Body<'tcx>,\n     terminator: &Terminator<'tcx>,\n-    msrv: Option<&RustcVersion>,\n+    msrv: Option<RustcVersion>,\n ) -> McfResult {\n     let span = terminator.source_info.span;\n     match &terminator.kind {\n@@ -353,7 +353,7 @@ fn check_terminator<'a, 'tcx>(\n     }\n }\n \n-fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<&RustcVersion>) -> bool {\n+fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<RustcVersion>) -> bool {\n     tcx.is_const_fn(def_id)\n         && tcx.lookup_const_stability(def_id).map_or(true, |const_stab| {\n             if let rustc_attr::StabilityLevel::Stable { since } = const_stab.level {\n@@ -362,7 +362,7 @@ fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<&RustcVersion>) -> b\n                 // as a part of an unimplemented MSRV check https://github.com/rust-lang/rust/issues/65262.\n                 crate::meets_msrv(\n                     msrv,\n-                    &RustcVersion::parse(since.as_str())\n+                    RustcVersion::parse(since.as_str())\n                         .expect(\"`rustc_attr::StabilityLevel::Stable::since` is ill-formatted\"),\n                 )\n             } else {"}, {"sha": "5607e2264a653c663e0d57b135a1121d4db88a97", "filename": "doc/adding_lints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdfea1c095d0a98e759eeb680d34d2d6da51132c/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/bdfea1c095d0a98e759eeb680d34d2d6da51132c/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=bdfea1c095d0a98e759eeb680d34d2d6da51132c", "patch": "@@ -432,7 +432,7 @@ The project's MSRV can then be matched against the feature MSRV in the LintPass\n using the `meets_msrv` utility function.\n \n ``` rust\n-if !meets_msrv(self.msrv.as_ref(), &msrvs::STR_STRIP_PREFIX) {\n+if !meets_msrv(self.msrv, msrvs::STR_STRIP_PREFIX) {\n     return;\n }\n ```"}]}