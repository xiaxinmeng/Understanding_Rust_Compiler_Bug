{"sha": "35ef09c38b3887a1880ad80874868afb41d28dd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZWYwOWMzOGIzODg3YTE4ODBhZDgwODc0ODY4YWZiNDFkMjhkZDM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-03-06T12:54:44Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-05-26T08:11:58Z"}, "message": "Replace pat_adjust_pos with an iterator adapter", "tree": {"sha": "48fc471ba74400b6aaffe52d078b92ec690aa101", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48fc471ba74400b6aaffe52d078b92ec690aa101"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35ef09c38b3887a1880ad80874868afb41d28dd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35ef09c38b3887a1880ad80874868afb41d28dd3", "html_url": "https://github.com/rust-lang/rust/commit/35ef09c38b3887a1880ad80874868afb41d28dd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35ef09c38b3887a1880ad80874868afb41d28dd3/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c038b454239a30cb8a734bcb2ff8a7e5e543939a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c038b454239a30cb8a734bcb2ff8a7e5e543939a", "html_url": "https://github.com/rust-lang/rust/commit/c038b454239a30cb8a734bcb2ff8a7e5e543939a"}], "stats": {"total": 127, "additions": 61, "deletions": 66}, "files": [{"sha": "1008ba7a6e6a037b7fda5c239cd9698f7e632baf", "filename": "src/librustc/hir/pat_util.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/35ef09c38b3887a1880ad80874868afb41d28dd3/src%2Flibrustc%2Fhir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef09c38b3887a1880ad80874868afb41d28dd3/src%2Flibrustc%2Fhir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fpat_util.rs?ref=35ef09c38b3887a1880ad80874868afb41d28dd3", "patch": "@@ -18,28 +18,40 @@ use hir::{self, PatKind};\n use syntax::codemap::{respan, Span, Spanned, DUMMY_SP};\n \n use std::cell::RefCell;\n+use std::iter::{Enumerate, ExactSizeIterator};\n \n pub type PatIdMap = FnvHashMap<ast::Name, ast::NodeId>;\n \n-#[derive(Clone, Copy)]\n-pub struct AdjustPos {\n+pub struct EnumerateAndAdjust<I> {\n+    enumerate: Enumerate<I>,\n     gap_pos: usize,\n     gap_len: usize,\n }\n \n-impl FnOnce<(usize,)> for AdjustPos {\n-    type Output = usize;\n-    extern \"rust-call\" fn call_once(self, (i,): (usize,)) -> usize {\n-        if i < self.gap_pos { i } else { i + self.gap_len }\n+impl<I> Iterator for EnumerateAndAdjust<I> where I: Iterator {\n+    type Item = (usize, <I as Iterator>::Item);\n+\n+    fn next(&mut self) -> Option<(usize, <I as Iterator>::Item)> {\n+        self.enumerate.next().map(|(i, elem)| {\n+            (if i < self.gap_pos { i } else { i + self.gap_len }, elem)\n+        })\n     }\n }\n \n-// Returns a functional object used to adjust tuple pattern indexes. Example: for 5-tuple and\n-// pattern (a, b, .., c) expected_len is 5, actual_len is 3 and gap_pos is Some(2).\n-pub fn pat_adjust_pos(expected_len: usize, actual_len: usize, gap_pos: Option<usize>) -> AdjustPos {\n-    AdjustPos {\n-        gap_pos: if let Some(gap_pos) = gap_pos { gap_pos } else { expected_len },\n-        gap_len: expected_len - actual_len,\n+pub trait EnumerateAndAdjustIterator {\n+    fn enumerate_and_adjust(self, expected_len: usize, gap_pos: Option<usize>)\n+        -> EnumerateAndAdjust<Self> where Self: Sized;\n+}\n+\n+impl<T: ExactSizeIterator> EnumerateAndAdjustIterator for T {\n+    fn enumerate_and_adjust(self, expected_len: usize, gap_pos: Option<usize>)\n+            -> EnumerateAndAdjust<Self> where Self: Sized {\n+        let actual_len = self.len();\n+        EnumerateAndAdjust {\n+            enumerate: self.enumerate(),\n+            gap_pos: if let Some(gap_pos) = gap_pos { gap_pos } else { expected_len },\n+            gap_len: expected_len - actual_len,\n+        }\n     }\n }\n "}, {"sha": "e1fb701e641bf1da7e977c3793da271588d08e5c", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35ef09c38b3887a1880ad80874868afb41d28dd3/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef09c38b3887a1880ad80874868afb41d28dd3/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=35ef09c38b3887a1880ad80874868afb41d28dd3", "patch": "@@ -29,7 +29,6 @@\n #![feature(collections)]\n #![feature(const_fn)]\n #![feature(enumset)]\n-#![feature(fn_traits)]\n #![feature(iter_arith)]\n #![feature(libc)]\n #![feature(nonzero)]\n@@ -39,7 +38,6 @@\n #![feature(slice_patterns)]\n #![feature(staged_api)]\n #![feature(question_mark)]\n-#![feature(unboxed_closures)]\n #![cfg_attr(test, feature(test))]\n \n extern crate arena;"}, {"sha": "e933b22f60799cb759137dd84f83154b77524fdf", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/35ef09c38b3887a1880ad80874868afb41d28dd3/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef09c38b3887a1880ad80874868afb41d28dd3/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=35ef09c38b3887a1880ad80874868afb41d28dd3", "patch": "@@ -80,7 +80,7 @@ use ty::adjustment;\n use ty::{self, Ty, TyCtxt};\n \n use hir::{MutImmutable, MutMutable, PatKind};\n-use hir::pat_util::pat_adjust_pos;\n+use hir::pat_util::EnumerateAndAdjustIterator;\n use hir;\n use syntax::ast;\n use syntax::codemap::Span;\n@@ -1230,15 +1230,15 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             match opt_def {\n                 Some(Def::Variant(enum_def, def_id)) => {\n                     // variant(x, y, z)\n-                    let variant = self.tcx().lookup_adt_def(enum_def).variant_with_id(def_id);\n-                    let adjust = pat_adjust_pos(variant.fields.len(), subpats.len(), ddpos);\n-                    for (i, subpat) in subpats.iter().enumerate() {\n+                    let expected_len = self.tcx().lookup_adt_def(enum_def)\n+                                                 .variant_with_id(def_id).fields.len();\n+                    for (i, subpat) in subpats.iter().enumerate_and_adjust(expected_len, ddpos) {\n                         let subpat_ty = self.pat_ty(&subpat)?; // see (*2)\n \n                         let subcmt =\n                             self.cat_imm_interior(\n                                 pat, cmt.clone(), subpat_ty,\n-                                InteriorField(PositionalField(adjust(i))));\n+                                InteriorField(PositionalField(i)));\n \n                         self.cat_pattern_(subcmt, &subpat, op)?;\n                     }\n@@ -1253,13 +1253,12 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                         }\n                     };\n \n-                    let adjust = pat_adjust_pos(expected_len, subpats.len(), ddpos);\n-                    for (i, subpat) in subpats.iter().enumerate() {\n+                    for (i, subpat) in subpats.iter().enumerate_and_adjust(expected_len, ddpos) {\n                         let subpat_ty = self.pat_ty(&subpat)?; // see (*2)\n                         let cmt_field =\n                             self.cat_imm_interior(\n                                 pat, cmt.clone(), subpat_ty,\n-                                InteriorField(PositionalField(adjust(i))));\n+                                InteriorField(PositionalField(i)));\n                         self.cat_pattern_(cmt_field, &subpat, op)?;\n                     }\n                 }\n@@ -1300,13 +1299,12 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                 Ok(&ty::TyS{sty: ty::TyTuple(ref tys), ..}) => tys.len(),\n                 ref ty => span_bug!(pat.span, \"tuple pattern unexpected type {:?}\", ty),\n             };\n-            let adjust = pat_adjust_pos(expected_len, subpats.len(), ddpos);\n-            for (i, subpat) in subpats.iter().enumerate() {\n+            for (i, subpat) in subpats.iter().enumerate_and_adjust(expected_len, ddpos) {\n                 let subpat_ty = self.pat_ty(&subpat)?; // see (*2)\n                 let subcmt =\n                     self.cat_imm_interior(\n                         pat, cmt.clone(), subpat_ty,\n-                        InteriorField(PositionalField(adjust(i))));\n+                        InteriorField(PositionalField(i)));\n                 self.cat_pattern_(subcmt, &subpat, op)?;\n             }\n           }"}, {"sha": "fcb03aba6d12cb6434c413789954f88caa1cf431", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/35ef09c38b3887a1880ad80874868afb41d28dd3/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef09c38b3887a1880ad80874868afb41d28dd3/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=35ef09c38b3887a1880ad80874868afb41d28dd3", "patch": "@@ -33,7 +33,7 @@ use util::nodemap::{DefIdMap, FnvHashSet, FnvHashMap};\n use hir;\n use hir::{Item, Generics, StructField, Variant, PatKind};\n use hir::intravisit::{self, Visitor};\n-use hir::pat_util::pat_adjust_pos;\n+use hir::pat_util::EnumerateAndAdjustIterator;\n \n use std::mem::replace;\n use std::cmp::Ordering;\n@@ -616,9 +616,8 @@ pub fn check_pat<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, pat: &hir::Pat,\n     match pat.node {\n         // Foo(a, b, c)\n         PatKind::TupleStruct(_, ref pat_fields, ddpos) => {\n-            let adjust = pat_adjust_pos(v.fields.len(), pat_fields.len(), ddpos);\n-            for (i, field) in pat_fields.iter().enumerate() {\n-                maybe_do_stability_check(tcx, v.fields[adjust(i)].did, field.span, cb)\n+            for (i, field) in pat_fields.iter().enumerate_and_adjust(v.fields.len(), ddpos) {\n+                maybe_do_stability_check(tcx, v.fields[i].did, field.span, cb)\n             }\n         }\n         // Foo { a, b, c }"}, {"sha": "16b61534ee9abb4bb3fcc1d73c1a5c987354f8cf", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35ef09c38b3887a1880ad80874868afb41d28dd3/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef09c38b3887a1880ad80874868afb41d28dd3/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=35ef09c38b3887a1880ad80874868afb41d28dd3", "patch": "@@ -924,7 +924,7 @@ pub fn specialize<'a>(cx: &MatchCheckCtxt, r: &[&'a Pat],\n                 Def::Variant(..) | Def::Struct(..) => {\n                     match ddpos {\n                         Some(ddpos) => {\n-                            let mut pats = args[..ddpos].iter().map(|p| &**p).collect(): Vec<_>;\n+                            let mut pats: Vec<_> = args[..ddpos].iter().map(|p| &**p).collect();\n                             pats.extend(repeat(DUMMY_WILD_PAT).take(arity - args.len()));\n                             pats.extend(args[ddpos..].iter().map(|p| &**p));\n                             Some(pats)\n@@ -958,7 +958,7 @@ pub fn specialize<'a>(cx: &MatchCheckCtxt, r: &[&'a Pat],\n         }\n \n         PatKind::Tuple(ref args, Some(ddpos)) => {\n-            let mut pats = args[..ddpos].iter().map(|p| &**p).collect(): Vec<_>;\n+            let mut pats: Vec<_> = args[..ddpos].iter().map(|p| &**p).collect();\n             pats.extend(repeat(DUMMY_WILD_PAT).take(arity - args.len()));\n             pats.extend(args[ddpos..].iter().map(|p| &**p));\n             Some(pats)"}, {"sha": "9ab6a437a5ab24418dfcac4a3071c5b59580581a", "filename": "src/librustc_const_eval/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35ef09c38b3887a1880ad80874868afb41d28dd3/src%2Flibrustc_const_eval%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef09c38b3887a1880ad80874868afb41d28dd3/src%2Flibrustc_const_eval%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Flib.rs?ref=35ef09c38b3887a1880ad80874868afb41d28dd3", "patch": "@@ -31,7 +31,6 @@\n #![feature(question_mark)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n-#![feature(type_ascription)]\n \n #[macro_use] extern crate syntax;\n #[macro_use] extern crate log;"}, {"sha": "b9ba860e8d0aad4ca909bf30a3f0315ebc263f8a", "filename": "src/librustc_mir/hair/cx/pattern.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/35ef09c38b3887a1880ad80874868afb41d28dd3/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef09c38b3887a1880ad80874868afb41d28dd3/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs?ref=35ef09c38b3887a1880ad80874868afb41d28dd3", "patch": "@@ -13,7 +13,7 @@ use hair::cx::Cx;\n use rustc_data_structures::fnv::FnvHashMap;\n use rustc_const_eval as const_eval;\n use rustc::hir::def::Def;\n-use rustc::hir::pat_util::{pat_adjust_pos, pat_is_resolved_const, pat_is_binding};\n+use rustc::hir::pat_util::{EnumerateAndAdjustIterator, pat_is_resolved_const, pat_is_binding};\n use rustc::ty::{self, Ty};\n use rustc::mir::repr::*;\n use rustc::hir::{self, PatKind};\n@@ -151,12 +151,11 @@ impl<'patcx, 'cx, 'gcx, 'tcx> PatCx<'patcx, 'cx, 'gcx, 'tcx> {\n             PatKind::Tuple(ref subpatterns, ddpos) => {\n                 match self.cx.tcx.node_id_to_type(pat.id).sty {\n                     ty::TyTuple(ref tys) => {\n-                        let adjust = pat_adjust_pos(tys.len(), subpatterns.len(), ddpos);\n                         let subpatterns =\n                             subpatterns.iter()\n-                                       .enumerate()\n+                                       .enumerate_and_adjust(tys.len(), ddpos)\n                                        .map(|(i, subpattern)| FieldPattern {\n-                                            field: Field::new(adjust(i)),\n+                                            field: Field::new(i),\n                                             pattern: self.to_pattern(subpattern),\n                                        })\n                                        .collect();\n@@ -224,12 +223,11 @@ impl<'patcx, 'cx, 'gcx, 'tcx> PatCx<'patcx, 'cx, 'gcx, 'tcx> {\n                 let def = self.cx.tcx.def_map.borrow().get(&pat.id).unwrap().full_def();\n                 let variant_def = adt_def.variant_of_def(def);\n \n-                let adjust = pat_adjust_pos(variant_def.fields.len(), subpatterns.len(), ddpos);\n                 let subpatterns =\n                         subpatterns.iter()\n-                                   .enumerate()\n+                                   .enumerate_and_adjust(variant_def.fields.len(), ddpos)\n                                    .map(|(i, field)| FieldPattern {\n-                                       field: Field::new(adjust(i)),\n+                                       field: Field::new(i),\n                                        pattern: self.to_pattern(field),\n                                    })\n                                    .collect();"}, {"sha": "c90d152e3c314fe726f875fd76529993acabb087", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/35ef09c38b3887a1880ad80874868afb41d28dd3/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef09c38b3887a1880ad80874868afb41d28dd3/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=35ef09c38b3887a1880ad80874868afb41d28dd3", "patch": "@@ -31,7 +31,7 @@ use std::mem::replace;\n \n use rustc::hir::{self, PatKind};\n use rustc::hir::intravisit::{self, Visitor};\n-use rustc::hir::pat_util::pat_adjust_pos;\n+use rustc::hir::pat_util::EnumerateAndAdjustIterator;\n use rustc::dep_graph::DepNode;\n use rustc::lint;\n use rustc::hir::def::{self, Def};\n@@ -491,14 +491,12 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n             PatKind::TupleStruct(_, ref fields, ddpos) => {\n                 match self.tcx.pat_ty(pattern).sty {\n                     ty::TyStruct(def, _) => {\n-                        let adjust = pat_adjust_pos(def.struct_variant().fields.len(),\n-                                                    fields.len(), ddpos);\n-                        for (i, field) in fields.iter().enumerate() {\n+                        let expected_len = def.struct_variant().fields.len();\n+                        for (i, field) in fields.iter().enumerate_and_adjust(expected_len, ddpos) {\n                             if let PatKind::Wild = field.node {\n                                 continue\n                             }\n-                            self.check_field(field.span, def,\n-                                             &def.struct_variant().fields[adjust(i)]);\n+                            self.check_field(field.span, def, &def.struct_variant().fields[i]);\n                         }\n                     }\n                     ty::TyEnum(..) => {"}, {"sha": "4b22e410f4c227993a1ccba465753104341b7261", "filename": "src/librustc_trans/_match.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/35ef09c38b3887a1880ad80874868afb41d28dd3/src%2Flibrustc_trans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef09c38b3887a1880ad80874868afb41d28dd3/src%2Flibrustc_trans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2F_match.rs?ref=35ef09c38b3887a1880ad80874868afb41d28dd3", "patch": "@@ -1843,12 +1843,12 @@ pub fn bind_irrefutable_pat<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                                     &repr,\n                                                     Disr::from(vinfo.disr_val),\n                                                     val);\n-                    let adjust = pat_adjust_pos(vinfo.fields.len(), sub_pats.len(), ddpos);\n-                    for (i, subpat) in sub_pats.iter().enumerate() {\n+                    for (i, subpat) in sub_pats.iter()\n+                                               .enumerate_and_adjust(vinfo.fields.len(), ddpos) {\n                         bcx = bind_irrefutable_pat(\n                             bcx,\n                             subpat,\n-                            MatchInput::from_val(args.vals[adjust(i)]),\n+                            MatchInput::from_val(args.vals[i]),\n                             cleanup_scope);\n                     }\n                 }\n@@ -1862,12 +1862,10 @@ pub fn bind_irrefutable_pat<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                         }\n                     };\n \n-                    let adjust = pat_adjust_pos(expected_len, sub_pats.len(), ddpos);\n                     let repr = adt::represent_node(bcx, pat.id);\n                     let val = adt::MaybeSizedValue::sized(val.val);\n-                    for (i, elem) in sub_pats.iter().enumerate() {\n-                        let fldptr = adt::trans_field_ptr(bcx, &repr,\n-                                                          val, Disr(0), adjust(i));\n+                    for (i, elem) in sub_pats.iter().enumerate_and_adjust(expected_len, ddpos) {\n+                        let fldptr = adt::trans_field_ptr(bcx, &repr, val, Disr(0), i);\n                         bcx = bind_irrefutable_pat(\n                             bcx,\n                             &elem,\n@@ -1923,11 +1921,10 @@ pub fn bind_irrefutable_pat<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         PatKind::Tuple(ref elems, ddpos) => {\n             match tcx.node_id_to_type(pat.id).sty {\n                 ty::TyTuple(ref tys) => {\n-                    let adjust = pat_adjust_pos(tys.len(), elems.len(), ddpos);\n                     let repr = adt::represent_node(bcx, pat.id);\n                     let val = adt::MaybeSizedValue::sized(val.val);\n-                    for (i, elem) in elems.iter().enumerate() {\n-                        let fldptr = adt::trans_field_ptr(bcx, &repr, val, Disr(0), adjust(i));\n+                    for (i, elem) in elems.iter().enumerate_and_adjust(tys.len(), ddpos) {\n+                        let fldptr = adt::trans_field_ptr(bcx, &repr, val, Disr(0), i);\n                         bcx = bind_irrefutable_pat(\n                             bcx,\n                             &elem,"}, {"sha": "693703c7236e79a0975c43c676e7936eeb0670a6", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/35ef09c38b3887a1880ad80874868afb41d28dd3/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef09c38b3887a1880ad80874868afb41d28dd3/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=35ef09c38b3887a1880ad80874868afb41d28dd3", "patch": "@@ -11,7 +11,7 @@\n use hir::def::{self, Def};\n use rustc::infer::{self, InferOk, TypeOrigin};\n use hir::pat_util::{PatIdMap, pat_id_map, pat_is_binding};\n-use hir::pat_util::{pat_adjust_pos, pat_is_resolved_const};\n+use hir::pat_util::{EnumerateAndAdjustIterator, pat_is_resolved_const};\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TypeFoldable, LvaluePreference};\n use check::{FnCtxt, Expectation};\n@@ -271,13 +271,12 @@ impl<'a, 'gcx, 'tcx> PatCtxt<'a, 'gcx, 'tcx> {\n                 }\n                 let max_len = cmp::max(expected_len, elements.len());\n \n-                let element_tys = (0 .. max_len).map(|_| self.next_ty_var()).collect(): Vec<_>;\n+                let element_tys: Vec<_> = (0 .. max_len).map(|_| self.next_ty_var()).collect();\n                 let pat_ty = tcx.mk_tup(element_tys.clone());\n                 self.write_ty(pat.id, pat_ty);\n                 self.demand_eqtype(pat.span, expected, pat_ty);\n-                let adjust = pat_adjust_pos(expected_len, elements.len(), ddpos);\n-                for i in 0 .. elements.len() {\n-                    self.check_pat(&elements[i], &element_tys[adjust(i)]);\n+                for (i, elem) in elements.iter().enumerate_and_adjust(expected_len, ddpos) {\n+                    self.check_pat(elem, &element_tys[i]);\n                 }\n             }\n             PatKind::Box(ref inner) => {\n@@ -734,12 +733,10 @@ impl<'a, 'gcx, 'tcx> PatCtxt<'a, 'gcx, 'tcx> {\n             _ => {}\n         }\n \n-        let adjust = pat_adjust_pos(variant.fields.len(), subpats.len(), ddpos);\n         if subpats.len() == variant.fields.len() ||\n                 subpats.len() < variant.fields.len() && ddpos.is_some() {\n-            for (i, subpat) in subpats.iter().enumerate() {\n-                let field_ty = self.field_ty(subpat.span,\n-                                    &variant.fields[adjust(i)], expected_substs);\n+            for (i, subpat) in subpats.iter().enumerate_and_adjust(variant.fields.len(), ddpos) {\n+                let field_ty = self.field_ty(subpat.span, &variant.fields[i], expected_substs);\n                 self.check_pat(&subpat, field_ty);\n             }\n         } else {"}, {"sha": "0b23951db36612b53a35541fae408c6ae322f210", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/35ef09c38b3887a1880ad80874868afb41d28dd3/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ef09c38b3887a1880ad80874868afb41d28dd3/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=35ef09c38b3887a1880ad80874868afb41d28dd3", "patch": "@@ -77,12 +77,11 @@ This API is completely unstable and subject to change.\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(iter_arith)]\n-#![feature(question_mark)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n-#![feature(type_ascription)]\n+#![feature(question_mark)]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}]}