{"sha": "70692ce27953c91800549d6929b24e32b003c4f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNjkyY2UyNzk1M2M5MTgwMDU0OWQ2OTI5YjI0ZTMyYjAwM2M0ZjA=", "commit": {"author": {"name": "Vincent Esche", "email": "regexident@gmail.com", "date": "2016-01-21T19:52:11Z"}, "committer": {"name": "Vincent Esche", "email": "regexident@gmail.com", "date": "2016-01-21T21:33:27Z"}, "message": "Refined error message to truncate at 3 and hint at number of hidden patterns for excessive cases.", "tree": {"sha": "7647216b367ee57da9aa66ce56d2af2ae9145ddf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7647216b367ee57da9aa66ce56d2af2ae9145ddf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70692ce27953c91800549d6929b24e32b003c4f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70692ce27953c91800549d6929b24e32b003c4f0", "html_url": "https://github.com/rust-lang/rust/commit/70692ce27953c91800549d6929b24e32b003c4f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70692ce27953c91800549d6929b24e32b003c4f0/comments", "author": {"login": "regexident", "id": 138017, "node_id": "MDQ6VXNlcjEzODAxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/138017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regexident", "html_url": "https://github.com/regexident", "followers_url": "https://api.github.com/users/regexident/followers", "following_url": "https://api.github.com/users/regexident/following{/other_user}", "gists_url": "https://api.github.com/users/regexident/gists{/gist_id}", "starred_url": "https://api.github.com/users/regexident/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regexident/subscriptions", "organizations_url": "https://api.github.com/users/regexident/orgs", "repos_url": "https://api.github.com/users/regexident/repos", "events_url": "https://api.github.com/users/regexident/events{/privacy}", "received_events_url": "https://api.github.com/users/regexident/received_events", "type": "User", "site_admin": false}, "committer": {"login": "regexident", "id": 138017, "node_id": "MDQ6VXNlcjEzODAxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/138017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regexident", "html_url": "https://github.com/regexident", "followers_url": "https://api.github.com/users/regexident/followers", "following_url": "https://api.github.com/users/regexident/following{/other_user}", "gists_url": "https://api.github.com/users/regexident/gists{/gist_id}", "starred_url": "https://api.github.com/users/regexident/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regexident/subscriptions", "organizations_url": "https://api.github.com/users/regexident/orgs", "repos_url": "https://api.github.com/users/regexident/repos", "events_url": "https://api.github.com/users/regexident/events{/privacy}", "received_events_url": "https://api.github.com/users/regexident/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48e83268930e2d21ff8894dc2eb65767d5b858fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/48e83268930e2d21ff8894dc2eb65767d5b858fe", "html_url": "https://github.com/rust-lang/rust/commit/48e83268930e2d21ff8894dc2eb65767d5b858fe"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "6ed576d209f2f8c87ea2135e212069325aa528cf", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/70692ce27953c91800549d6929b24e32b003c4f0/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70692ce27953c91800549d6929b24e32b003c4f0/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=70692ce27953c91800549d6929b24e32b003c4f0", "patch": "@@ -392,19 +392,21 @@ fn check_exhaustive(cx: &MatchCheckCtxt, sp: Span, matrix: &Matrix, source: hir:\n                     let pattern_strings: Vec<_> = witnesses.iter().map(|w| {\n                         pat_to_string(w)\n                     }).collect();\n-                    let (tail, head) = pattern_strings.split_last().unwrap();\n-                    const HEAD_LIMIT: usize = 9;\n-                    let joined_patterns = match head.len() {\n-                        0 => tail.clone(),\n-                        1...HEAD_LIMIT => head.join(\"`, `\") + \"` and `\" + tail,\n+                    const LIMIT: usize = 3;\n+                    let joined_patterns = match pattern_strings.len() {\n+                        0 => unreachable!(),\n+                        1 => format!(\"`{}`\", pattern_strings[0]),\n+                        2...LIMIT => {\n+                            let (tail, head) = pattern_strings.split_last().unwrap();\n+                            format!(\"`{}`\", head.join(\"`, `\") + \"` and `\" + tail)\n+                        },\n                         _ => {\n-                            let head_iter = head.to_owned().into_iter();\n-                            let truncated_head: Vec<_> = head_iter.take(HEAD_LIMIT).collect();\n-                            truncated_head.join(\"`, `\") + \"`, \u2026 and `\" + tail\n+                            let (head, tail) = pattern_strings.split_at(LIMIT);\n+                            format!(\"`{}` and {} more\", head.join(\"`, `\"), tail.len())\n                         }\n                     };\n                     span_err!(cx.tcx.sess, sp, E0004,\n-                        \"non-exhaustive patterns: `{}` not covered\",\n+                        \"non-exhaustive patterns: {} not covered\",\n                         joined_patterns\n                     );\n                 },"}, {"sha": "b986878f78396ae823bf9e3fac40e93486dd65f2", "filename": "src/test/compile-fail/non-exhaustive-pattern-witness.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/70692ce27953c91800549d6929b24e32b003c4f0/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70692ce27953c91800549d6929b24e32b003c4f0/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs?ref=70692ce27953c91800549d6929b24e32b003c4f0", "patch": "@@ -32,18 +32,19 @@ enum Color {\n     CustomRGBA { a: bool, r: u8, g: u8, b: u8 }\n }\n \n-fn enum_with_two_missing_variants() {\n+fn enum_with_single_missing_variant() {\n     match Color::Red {\n-    //~^ ERROR non-exhaustive patterns: `Red` and `Green` not covered\n-        Color::CustomRGBA { .. } => ()\n+    //~^ ERROR non-exhaustive patterns: `Red` not covered\n+        Color::CustomRGBA { .. } => (),\n+        Color::Green => ()\n     }\n }\n \n enum Direction {\n     North, East, South, West\n }\n \n-fn enum_with_three_or_more_missing_variants() {\n+fn enum_with_multiple_missing_variants() {\n     match Direction::North {\n     //~^ ERROR non-exhaustive patterns: `East`, `South` and `West` not covered\n         Direction::North => ()\n@@ -56,7 +57,7 @@ enum ExcessiveEnum {\n \n fn enum_with_excessive_missing_variants() {\n     match ExcessiveEnum::First {\n-    //~^ ERROR `Sixth`, `Seventh`, `Eighth`, `Ninth`, `Tenth`, \u2026 and `Twelfth` not covered\n+    //~^ ERROR `Second`, `Third`, `Fourth` and 8 more not covered\n \n         ExcessiveEnum::First => ()\n     }"}]}