{"sha": "1e303cc03530e265ad22c7885c28915a86ea85d4", "node_id": "C_kwDOAAsO6NoAKDFlMzAzY2MwMzUzMGUyNjVhZDIyYzc4ODVjMjg5MTVhODZlYTg1ZDQ", "commit": {"author": {"name": "Anton Firszov", "email": "antonfir@gmail.com", "date": "2021-10-15T10:15:52Z"}, "committer": {"name": "Anton Firszov", "email": "antonfir@gmail.com", "date": "2021-10-15T10:15:52Z"}, "message": "cursor_inside_simple_match_arm_list -- tests", "tree": {"sha": "6af2a0183badf8990c12d08ec0f232e63caa5996", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6af2a0183badf8990c12d08ec0f232e63caa5996"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e303cc03530e265ad22c7885c28915a86ea85d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e303cc03530e265ad22c7885c28915a86ea85d4", "html_url": "https://github.com/rust-lang/rust/commit/1e303cc03530e265ad22c7885c28915a86ea85d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e303cc03530e265ad22c7885c28915a86ea85d4/comments", "author": {"login": "antonfirsov", "id": 6835152, "node_id": "MDQ6VXNlcjY4MzUxNTI=", "avatar_url": "https://avatars.githubusercontent.com/u/6835152?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antonfirsov", "html_url": "https://github.com/antonfirsov", "followers_url": "https://api.github.com/users/antonfirsov/followers", "following_url": "https://api.github.com/users/antonfirsov/following{/other_user}", "gists_url": "https://api.github.com/users/antonfirsov/gists{/gist_id}", "starred_url": "https://api.github.com/users/antonfirsov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antonfirsov/subscriptions", "organizations_url": "https://api.github.com/users/antonfirsov/orgs", "repos_url": "https://api.github.com/users/antonfirsov/repos", "events_url": "https://api.github.com/users/antonfirsov/events{/privacy}", "received_events_url": "https://api.github.com/users/antonfirsov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antonfirsov", "id": 6835152, "node_id": "MDQ6VXNlcjY4MzUxNTI=", "avatar_url": "https://avatars.githubusercontent.com/u/6835152?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antonfirsov", "html_url": "https://github.com/antonfirsov", "followers_url": "https://api.github.com/users/antonfirsov/followers", "following_url": "https://api.github.com/users/antonfirsov/following{/other_user}", "gists_url": "https://api.github.com/users/antonfirsov/gists{/gist_id}", "starred_url": "https://api.github.com/users/antonfirsov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antonfirsov/subscriptions", "organizations_url": "https://api.github.com/users/antonfirsov/orgs", "repos_url": "https://api.github.com/users/antonfirsov/repos", "events_url": "https://api.github.com/users/antonfirsov/events{/privacy}", "received_events_url": "https://api.github.com/users/antonfirsov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68a50150d674dc9736e07e7befa46827d2323d63", "url": "https://api.github.com/repos/rust-lang/rust/commits/68a50150d674dc9736e07e7befa46827d2323d63", "html_url": "https://github.com/rust-lang/rust/commit/68a50150d674dc9736e07e7befa46827d2323d63"}], "stats": {"total": 69, "additions": 47, "deletions": 22}, "files": [{"sha": "7c67c596159d967dbfb396ecad4c6af1e45435f3", "filename": "crates/ide_assists/src/handlers/add_missing_match_arms.rs", "status": "modified", "additions": 47, "deletions": 22, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/1e303cc03530e265ad22c7885c28915a86ea85d4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e303cc03530e265ad22c7885c28915a86ea85d4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs?ref=1e303cc03530e265ad22c7885c28915a86ea85d4", "patch": "@@ -5,7 +5,7 @@ use hir::{Adt, HasSource, ModuleDef, Semantics};\n use ide_db::helpers::{mod_path_to_ast, FamousDefs};\n use ide_db::RootDatabase;\n use itertools::Itertools;\n-use syntax::ast::{self, make, AstNode, HasName, MatchArm, Pat};\n+use syntax::ast::{self, AstNode, HasName, MatchArm, MatchArmList, MatchExpr, Pat, make};\n use syntax::TextRange;\n \n use crate::{\n@@ -39,15 +39,21 @@ use crate::{\n pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let match_expr = ctx.find_node_at_offset_with_descend::<ast::MatchExpr>()?;\n     let match_arm_list = match_expr.match_arm_list()?;\n+    let target_range : TextRange;\n \n-    let available_range = TextRange::new(\n-        ctx.sema.original_range(match_expr.syntax()).range.start(),\n-        ctx.sema.original_range(match_arm_list.syntax()).range.start(),\n-    );\n+    if !cursor_inside_simple_match_arm_list(&ctx, &match_expr, &match_arm_list) {\n+        target_range = TextRange::new(\n+            ctx.sema.original_range(match_expr.syntax()).range.start(),\n+            ctx.sema.original_range(match_arm_list.syntax()).range.start(),\n+        );\n \n-    let cursor_in_range = available_range.contains_range(ctx.selection_trimmed());\n-    if !cursor_in_range {\n-        return None;\n+        let cursor_in_range = target_range.contains_range(ctx.selection_trimmed());\n+        if !cursor_in_range {\n+            return None;\n+        }\n+    }\n+    else {\n+        target_range = ctx.sema.original_range(match_expr.syntax()).range;\n     }\n \n     let expr = match_expr.expr()?;\n@@ -134,7 +140,7 @@ pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext) ->\n     acc.add(\n         AssistId(\"add_missing_match_arms\", AssistKind::QuickFix),\n         \"Fill match arms\",\n-        available_range,\n+        target_range,\n         |builder| {\n             let new_match_arm_list = match_arm_list.clone_for_update();\n             let missing_arms = missing_pats\n@@ -186,6 +192,14 @@ pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext) ->\n     )\n }\n \n+fn cursor_inside_simple_match_arm_list(ctx: &AssistContext, match_expr : &MatchExpr, match_arm_list : &MatchArmList) -> bool {\n+    // println!(\"---\\n{:#?}\\n{:#?}\\n---\", match_expr, match_arm_list);\n+    if match_arm_list.arms().next() == None {\n+        return true;\n+    }\n+    false\n+}\n+\n fn is_variant_missing(existing_pats: &[Pat], var: &Pat) -> bool {\n     !existing_pats.iter().any(|pat| does_pat_match_variant(pat, var))\n }\n@@ -320,10 +334,7 @@ fn main() {\n         check_assist_not_applicable(\n             add_missing_match_arms,\n             r#\"\n-enum A {\n-    X,\n-    Y\n-}\n+enum A { X, Y }\n \n fn foo(a: A) {\n     $0 match a {\n@@ -339,10 +350,7 @@ fn foo(a: A) {\n         check_assist_not_applicable(\n             add_missing_match_arms,\n             r#\"\n-enum A {\n-    X,\n-    Y\n-}\n+enum A { X, Y }\n \n fn foo(a: A) {\n     match a {$0\n@@ -637,7 +645,7 @@ enum A { As, Bs, Cs(String), Ds(String, String), Es { x: usize, y: usize } }\n \n fn main() {\n     let a = A::As;\n-    match a$0 {}\n+    match a {$0}\n }\n \"#,\n             r#\"\n@@ -900,7 +908,7 @@ fn foo(a: &mut A) {\n     }\n \n     #[test]\n-    fn add_missing_match_arms_target() {\n+    fn add_missing_match_arms_target_simple() {\n         check_assist_target(\n             add_missing_match_arms,\n             r#\"\n@@ -909,6 +917,23 @@ enum E { X, Y }\n fn main() {\n     match E::X$0 {}\n }\n+\"#,\n+            \"match E::X {}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn add_missing_match_arms_target_complex() {\n+        check_assist_target(\n+            add_missing_match_arms,\n+            r#\"\n+enum E { X, Y }\n+\n+fn main() {\n+    match E::X$0 {\n+        E::X => {}\n+    }\n+}\n \"#,\n             \"match E::X \",\n         );\n@@ -922,16 +947,16 @@ fn main() {\n enum E { X, Y }\n \n fn main() {\n-    match E::X $0 {\n-        _ => {}\n+    match E::X {\n+        $0_ => {}\n     }\n }\n \"#,\n             r#\"\n enum E { X, Y }\n \n fn main() {\n-    match E::X  {\n+    match E::X {\n         $0E::X => todo!(),\n         E::Y => todo!(),\n     }"}]}