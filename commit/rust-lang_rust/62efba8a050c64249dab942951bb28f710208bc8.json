{"sha": "62efba8a050c64249dab942951bb28f710208bc8", "node_id": "C_kwDOAAsO6NoAKDYyZWZiYThhMDUwYzY0MjQ5ZGFiOTQyOTUxYmIyOGY3MTAyMDhiYzg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-11T09:13:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-11T09:13:22Z"}, "message": "Auto merge of #90755 - scottmcm:spec-array-clone, r=jackh726\n\nSpecialize array cloning for Copy types\n\nBecause after PR 86041, the optimizer no longer load-merges at the LLVM IR level, which might be part of the perf loss.  (I'll run perf and see if this makes a difference.)\n\nAlso I added a codegen test so this hopefully won't regress in future -- it passes on stable and with my change here, but not on the 2021-11-09 nightly.\n\nExample on current nightly: <https://play.rust-lang.org/?version=nightly&mode=release&edition=2021&gist=1f52d46fb8fc3ca3ac9f097390085ffa>\n```rust\ntype T = u8;\nconst N: usize = 3;\n\npub fn demo_clone(x: &[T; N]) -> [T; N] {\n    x.clone()\n}\n\npub fn demo_copy(x: &[T; N]) -> [T; N] {\n    *x\n}\n```\n```llvm-ir\n; playground::demo_clone\n; Function Attrs: mustprogress nofree nosync nounwind nonlazybind uwtable willreturn\ndefine i24 `@_ZN10playground10demo_clone17h98a4f11453d1a753E([3` x i8]* noalias nocapture readonly align 1 dereferenceable(3) %x) unnamed_addr #0 personality i32 (i32, i32, i64, %\"unwind::libunwind::_Unwind_Exception\"*, %\"unwind::libunwind::_Unwind_Context\"*)* `@rust_eh_personality` {\nstart:\n  %0 = getelementptr [3 x i8], [3 x i8]* %x, i64 0, i64 0\n  %1 = getelementptr inbounds [3 x i8], [3 x i8]* %x, i64 0, i64 1\n  %.val.i.i.i.i.i.i.i.i.i = load i8, i8* %0, align 1, !alias.scope !2, !noalias !9\n  %2 = getelementptr inbounds [3 x i8], [3 x i8]* %x, i64 0, i64 2\n  %.val.i.i.i.i.i.1.i.i.i.i = load i8, i8* %1, align 1, !alias.scope !2, !noalias !20\n  %.val.i.i.i.i.i.2.i.i.i.i = load i8, i8* %2, align 1, !alias.scope !2, !noalias !23\n  %array.sroa.6.0.insert.ext.i.i.i.i = zext i8 %.val.i.i.i.i.i.2.i.i.i.i to i32\n  %array.sroa.6.0.insert.shift.i.i.i.i = shl nuw nsw i32 %array.sroa.6.0.insert.ext.i.i.i.i, 16\n  %array.sroa.5.0.insert.ext.i.i.i.i = zext i8 %.val.i.i.i.i.i.1.i.i.i.i to i32\n  %array.sroa.5.0.insert.shift.i.i.i.i = shl nuw nsw i32 %array.sroa.5.0.insert.ext.i.i.i.i, 8\n  %array.sroa.0.0.insert.ext.i.i.i.i = zext i8 %.val.i.i.i.i.i.i.i.i.i to i32\n  %array.sroa.5.0.insert.insert.i.i.i.i = or i32 %array.sroa.5.0.insert.shift.i.i.i.i, %array.sroa.0.0.insert.ext.i.i.i.i\n  %array.sroa.0.0.insert.insert.i.i.i.i = or i32 %array.sroa.5.0.insert.insert.i.i.i.i, %array.sroa.6.0.insert.shift.i.i.i.i\n  %.sroa.4.0.extract.trunc.i.i.i.i = trunc i32 %array.sroa.0.0.insert.insert.i.i.i.i to i24\n  ret i24 %.sroa.4.0.extract.trunc.i.i.i.i\n}\n\n; playground::demo_copy\n; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind readonly uwtable willreturn\ndefine i24 `@_ZN10playground9demo_copy17h7817453f9291d746E([3` x i8]* noalias nocapture readonly align 1 dereferenceable(3) %x) unnamed_addr #1 {\nstart:\n  %.sroa.0.0..sroa_cast = bitcast [3 x i8]* %x to i24*\n  %.sroa.0.0.copyload = load i24, i24* %.sroa.0.0..sroa_cast, align 1\n  ret i24 %.sroa.0.0.copyload\n}\n```", "tree": {"sha": "7c82fb540c251a5495feb58954789fcab2ffbf95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c82fb540c251a5495feb58954789fcab2ffbf95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62efba8a050c64249dab942951bb28f710208bc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62efba8a050c64249dab942951bb28f710208bc8", "html_url": "https://github.com/rust-lang/rust/commit/62efba8a050c64249dab942951bb28f710208bc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62efba8a050c64249dab942951bb28f710208bc8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d34cb4efccb6ec47c2eb478e4cc900936dfe387", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d34cb4efccb6ec47c2eb478e4cc900936dfe387", "html_url": "https://github.com/rust-lang/rust/commit/1d34cb4efccb6ec47c2eb478e4cc900936dfe387"}, {"sha": "5b115fcb6839b94a14fb77acdd738281b4bb3fae", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b115fcb6839b94a14fb77acdd738281b4bb3fae", "html_url": "https://github.com/rust-lang/rust/commit/5b115fcb6839b94a14fb77acdd738281b4bb3fae"}], "stats": {"total": 42, "additions": 39, "deletions": 3}, "files": [{"sha": "09bb4519170dae3a4891a55182104cd72610952e", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/62efba8a050c64249dab942951bb28f710208bc8/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62efba8a050c64249dab942951bb28f710208bc8/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=62efba8a050c64249dab942951bb28f710208bc8", "patch": "@@ -339,9 +339,7 @@ impl<T: Copy, const N: usize> Copy for [T; N] {}\n impl<T: Clone, const N: usize> Clone for [T; N] {\n     #[inline]\n     fn clone(&self) -> Self {\n-        // SAFETY: we know for certain that this iterator will yield exactly `N`\n-        // items.\n-        unsafe { collect_into_array_unchecked(&mut self.iter().cloned()) }\n+        SpecArrayClone::clone(self)\n     }\n \n     #[inline]\n@@ -350,6 +348,29 @@ impl<T: Clone, const N: usize> Clone for [T; N] {\n     }\n }\n \n+#[cfg(not(bootstrap))]\n+trait SpecArrayClone: Clone {\n+    fn clone<const N: usize>(array: &[Self; N]) -> [Self; N];\n+}\n+\n+#[cfg(not(bootstrap))]\n+impl<T: Clone> SpecArrayClone for T {\n+    #[inline]\n+    default fn clone<const N: usize>(array: &[T; N]) -> [T; N] {\n+        // SAFETY: we know for certain that this iterator will yield exactly `N`\n+        // items.\n+        unsafe { collect_into_array_unchecked(&mut array.iter().cloned()) }\n+    }\n+}\n+\n+#[cfg(not(bootstrap))]\n+impl<T: Copy> SpecArrayClone for T {\n+    #[inline]\n+    fn clone<const N: usize>(array: &[T; N]) -> [T; N] {\n+        *array\n+    }\n+}\n+\n // The Default impls cannot be done with const generics because `[T; 0]` doesn't\n // require Default to be implemented, and having different impl blocks for\n // different numbers isn't supported yet."}, {"sha": "0d42963bcd2ceaba9b2d6dd426716cde6ff987e6", "filename": "src/test/codegen/array-clone.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/62efba8a050c64249dab942951bb28f710208bc8/src%2Ftest%2Fcodegen%2Farray-clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62efba8a050c64249dab942951bb28f710208bc8/src%2Ftest%2Fcodegen%2Farray-clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Farray-clone.rs?ref=62efba8a050c64249dab942951bb28f710208bc8", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags: -O\n+\n+#![crate_type = \"lib\"]\n+\n+// CHECK-LABEL: @array_clone\n+#[no_mangle]\n+pub fn array_clone(a: &[u8; 2]) -> [u8; 2] {\n+    // CHECK-NOT: getelementptr\n+    // CHECK-NOT: load i8\n+    // CHECK-NOT: zext\n+    // CHECK-NOT: shl\n+    // CHECK: load i16\n+    // CHECK-NEXT: ret i16\n+    a.clone()\n+}"}]}