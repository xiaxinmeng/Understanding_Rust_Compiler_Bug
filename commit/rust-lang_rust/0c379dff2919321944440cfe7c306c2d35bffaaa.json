{"sha": "0c379dff2919321944440cfe7c306c2d35bffaaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMzc5ZGZmMjkxOTMyMTk0NDQ0MGNmZTdjMzA2YzJkMzViZmZhYWE=", "commit": {"author": {"name": "Nathan", "email": "nathan.whitaker01@gmail.com", "date": "2019-08-22T23:02:13Z"}, "committer": {"name": "Nathan", "email": "nathan.whitaker01@gmail.com", "date": "2019-08-22T23:06:23Z"}, "message": "Extract loading and comparison of compiletest outputs to new fn\n\nMoved into ```fn load_compare_outputs(&self, proc_res: &ProcRes, explicit_format: bool) -> usize```", "tree": {"sha": "32b2c5ec1e10284a59f619bca52bc08bc389db3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32b2c5ec1e10284a59f619bca52bc08bc389db3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c379dff2919321944440cfe7c306c2d35bffaaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c379dff2919321944440cfe7c306c2d35bffaaa", "html_url": "https://github.com/rust-lang/rust/commit/0c379dff2919321944440cfe7c306c2d35bffaaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c379dff2919321944440cfe7c306c2d35bffaaa/comments", "author": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54f80a5b7c254d1df302680eac6552665b4c8945", "url": "https://api.github.com/repos/rust-lang/rust/commits/54f80a5b7c254d1df302680eac6552665b4c8945", "html_url": "https://github.com/rust-lang/rust/commit/54f80a5b7c254d1df302680eac6552665b4c8945"}], "stats": {"total": 35, "additions": 20, "deletions": 15}, "files": [{"sha": "86c5e4ac89dd625b42192b309b62135bbf491f68", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0c379dff2919321944440cfe7c306c2d35bffaaa/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c379dff2919321944440cfe7c306c2d35bffaaa/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=0c379dff2919321944440cfe7c306c2d35bffaaa", "patch": "@@ -2934,44 +2934,49 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n-    fn run_ui_test(&self) {\n-        // if the user specified a format in the ui test\n-        // print the output to the stderr file, otherwise extract\n-        // the rendered error messages from json and print them\n-        let explicit = self\n-            .props\n-            .compile_flags\n-            .iter()\n-            .any(|s| s.contains(\"--error-format\"));\n-        let proc_res = self.compile_test();\n-        self.check_if_test_should_compile(&proc_res);\n-\n+    fn load_compare_outputs(&self, proc_res: &ProcRes, explicit_format: bool) -> usize {\n         let expected_stderr = self.load_expected_output(UI_STDERR);\n         let expected_stdout = self.load_expected_output(UI_STDOUT);\n-        let expected_fixed = self.load_expected_output(UI_FIXED);\n \n         let normalized_stdout =\n             self.normalize_output(&proc_res.stdout, &self.props.normalize_stdout);\n \n-        let stderr = if explicit {\n+        let stderr = if explicit_format {\n             proc_res.stderr.clone()\n         } else {\n             json::extract_rendered(&proc_res.stderr)\n         };\n \n         let normalized_stderr = self.normalize_output(&stderr, &self.props.normalize_stderr);\n-\n         let mut errors = 0;\n         if !self.props.dont_check_compiler_stdout {\n             errors += self.compare_output(\"stdout\", &normalized_stdout, &expected_stdout);\n         }\n         if !self.props.dont_check_compiler_stderr {\n             errors += self.compare_output(\"stderr\", &normalized_stderr, &expected_stderr);\n         }\n+        errors\n+    }\n+\n+    fn run_ui_test(&self) {\n+        // if the user specified a format in the ui test\n+        // print the output to the stderr file, otherwise extract\n+        // the rendered error messages from json and print them\n+        let explicit = self\n+            .props\n+            .compile_flags\n+            .iter()\n+            .any(|s| s.contains(\"--error-format\"));\n+        let proc_res = self.compile_test();\n+        self.check_if_test_should_compile(&proc_res);\n+\n+        let expected_fixed = self.load_expected_output(UI_FIXED);\n \n         let modes_to_prune = vec![CompareMode::Nll];\n         self.prune_duplicate_outputs(&modes_to_prune);\n \n+        let mut errors = self.load_compare_outputs(&proc_res, explicit);\n+\n         if self.config.compare_mode.is_some() {\n             // don't test rustfix with nll right now\n         } else if self.config.rustfix_coverage {"}]}