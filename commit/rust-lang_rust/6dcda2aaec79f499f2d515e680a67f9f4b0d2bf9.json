{"sha": "6dcda2aaec79f499f2d515e680a67f9f4b0d2bf9", "node_id": "C_kwDOAAsO6NoAKDZkY2RhMmFhZWM3OWY0OTlmMmQ1MTVlNjgwYTY3ZjlmNGIwZDJiZjk", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-02-03T22:36:17Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-02-03T23:55:32Z"}, "message": "Clean up `find_library_crate`.\n\nBy introducing prefix and suffix variables for all file types, and\nrenaming some variables.", "tree": {"sha": "f75280caddb0e71a5447c80ed88e305065d71545", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f75280caddb0e71a5447c80ed88e305065d71545"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dcda2aaec79f499f2d515e680a67f9f4b0d2bf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dcda2aaec79f499f2d515e680a67f9f4b0d2bf9", "html_url": "https://github.com/rust-lang/rust/commit/6dcda2aaec79f499f2d515e680a67f9f4b0d2bf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dcda2aaec79f499f2d515e680a67f9f4b0d2bf9/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ba47f32160d4c51717b4da6449f40079a5eb317", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ba47f32160d4c51717b4da6449f40079a5eb317", "html_url": "https://github.com/rust-lang/rust/commit/0ba47f32160d4c51717b4da6449f40079a5eb317"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "69725b1377ce74c2c605692c44de0e7740dc74d6", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6dcda2aaec79f499f2d515e680a67f9f4b0d2bf9/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dcda2aaec79f499f2d515e680a67f9f4b0d2bf9/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=6dcda2aaec79f499f2d515e680a67f9f4b0d2bf9", "patch": "@@ -371,11 +371,17 @@ impl<'a> CrateLocator<'a> {\n         extra_prefix: &str,\n         seen_paths: &mut FxHashSet<PathBuf>,\n     ) -> Result<Option<Library>, CrateError> {\n-        // want: crate_name.dir_part() + prefix + crate_name.file_part + \"-\"\n-        let dylib_prefix = format!(\"{}{}{}\", self.target.dll_prefix, self.crate_name, extra_prefix);\n-        let rlib_prefix = format!(\"lib{}{}\", self.crate_name, extra_prefix);\n+        let rmeta_prefix = &format!(\"lib{}{}\", self.crate_name, extra_prefix);\n+        let rlib_prefix = rmeta_prefix;\n+        let dylib_prefix =\n+            &format!(\"{}{}{}\", self.target.dll_prefix, self.crate_name, extra_prefix);\n         let staticlib_prefix =\n-            format!(\"{}{}{}\", self.target.staticlib_prefix, self.crate_name, extra_prefix);\n+            &format!(\"{}{}{}\", self.target.staticlib_prefix, self.crate_name, extra_prefix);\n+\n+        let rmeta_suffix = \".rmeta\";\n+        let rlib_suffix = \".rlib\";\n+        let dylib_suffix = &self.target.dll_suffix;\n+        let staticlib_suffix = &self.target.staticlib_suffix;\n \n         let mut candidates: FxHashMap<_, (FxHashMap<_, _>, FxHashMap<_, _>, FxHashMap<_, _>)> =\n             Default::default();\n@@ -399,23 +405,15 @@ impl<'a> CrateLocator<'a> {\n             for spf in search_path.files.iter() {\n                 debug!(\"testing {}\", spf.path.display());\n \n-                let file = &spf.file_name_str;\n-                let (hash, found_kind) = if file.starts_with(&rlib_prefix)\n-                    && file.ends_with(\".rlib\")\n-                {\n-                    (&file[(rlib_prefix.len())..(file.len() - \".rlib\".len())], CrateFlavor::Rlib)\n-                } else if file.starts_with(&rlib_prefix) && file.ends_with(\".rmeta\") {\n-                    (&file[(rlib_prefix.len())..(file.len() - \".rmeta\".len())], CrateFlavor::Rmeta)\n-                } else if file.starts_with(&dylib_prefix) && file.ends_with(&self.target.dll_suffix)\n-                {\n-                    (\n-                        &file[(dylib_prefix.len())..(file.len() - self.target.dll_suffix.len())],\n-                        CrateFlavor::Dylib,\n-                    )\n+                let f = &spf.file_name_str;\n+                let (hash, kind) = if f.starts_with(rlib_prefix) && f.ends_with(rlib_suffix) {\n+                    (&f[rlib_prefix.len()..(f.len() - rlib_suffix.len())], CrateFlavor::Rlib)\n+                } else if f.starts_with(rmeta_prefix) && f.ends_with(rmeta_suffix) {\n+                    (&f[rmeta_prefix.len()..(f.len() - rmeta_suffix.len())], CrateFlavor::Rmeta)\n+                } else if f.starts_with(dylib_prefix) && f.ends_with(dylib_suffix) {\n+                    (&f[dylib_prefix.len()..(f.len() - dylib_suffix.len())], CrateFlavor::Dylib)\n                 } else {\n-                    if file.starts_with(&staticlib_prefix)\n-                        && file.ends_with(&self.target.staticlib_suffix)\n-                    {\n+                    if f.starts_with(staticlib_prefix) && f.ends_with(staticlib_suffix) {\n                         staticlibs.push(CrateMismatch {\n                             path: spf.path.clone(),\n                             got: \"static\".to_string(),\n@@ -432,7 +430,7 @@ impl<'a> CrateLocator<'a> {\n                     continue;\n                 };\n                 seen_paths.insert(path.clone());\n-                match found_kind {\n+                match kind {\n                     CrateFlavor::Rlib => rlibs.insert(path, search_path.kind),\n                     CrateFlavor::Rmeta => rmetas.insert(path, search_path.kind),\n                     CrateFlavor::Dylib => dylibs.insert(path, search_path.kind),"}]}