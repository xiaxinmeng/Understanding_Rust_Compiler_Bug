{"sha": "e96a0a8681998caf78093b65e746bfd967cb87e9", "node_id": "C_kwDOAAsO6NoAKGU5NmEwYTg2ODE5OThjYWY3ODA5M2I2NWU3NDZiZmQ5NjdjYjg3ZTk", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-10-15T23:04:52Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-11-05T21:49:26Z"}, "message": "Revert \"Do not call getpid wrapper after fork in tests\"\n\nThis reverts commit 12fbabd27f700a59d0e7031f0839b220c3514bcb.\n\nIt was only needed because of using raw `clone3` instead of `fork`, but\nwe only do that now when a pidfd is requested.", "tree": {"sha": "d5d2721a1c02b69c1a82bf1c9d10370dbf252aa6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5d2721a1c02b69c1a82bf1c9d10370dbf252aa6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e96a0a8681998caf78093b65e746bfd967cb87e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e96a0a8681998caf78093b65e746bfd967cb87e9", "html_url": "https://github.com/rust-lang/rust/commit/e96a0a8681998caf78093b65e746bfd967cb87e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e96a0a8681998caf78093b65e746bfd967cb87e9/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6edaaa6db80a1d35a9ecb48a3a9b32551b91dc5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6edaaa6db80a1d35a9ecb48a3a9b32551b91dc5d", "html_url": "https://github.com/rust-lang/rust/commit/6edaaa6db80a1d35a9ecb48a3a9b32551b91dc5d"}], "stats": {"total": 42, "additions": 7, "deletions": 35}, "files": [{"sha": "61914e2293070459c03ee0a6c66edf2975e7829a", "filename": "src/test/ui/command/command-pre-exec.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e96a0a8681998caf78093b65e746bfd967cb87e9/src%2Ftest%2Fui%2Fcommand%2Fcommand-pre-exec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96a0a8681998caf78093b65e746bfd967cb87e9/src%2Ftest%2Fui%2Fcommand%2Fcommand-pre-exec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand%2Fcommand-pre-exec.rs?ref=e96a0a8681998caf78093b65e746bfd967cb87e9", "patch": "@@ -8,30 +8,15 @@\n // ignore-sgx no processes\n #![feature(process_exec, rustc_private)]\n \n+extern crate libc;\n+\n use std::env;\n use std::io::Error;\n use std::os::unix::process::CommandExt;\n use std::process::Command;\n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::sync::Arc;\n \n-#[cfg(not(target_os = \"linux\"))]\n-fn getpid() -> u32 {\n-    use std::process;\n-    process::id()\n-}\n-\n-/// We need to directly use the getpid syscall instead of using `process::id()`\n-/// because the libc wrapper might return incorrect values after a process was\n-/// forked.\n-#[cfg(target_os = \"linux\")]\n-fn getpid() -> u32 {\n-    extern crate libc;\n-    unsafe {\n-        libc::syscall(libc::SYS_getpid) as _\n-    }\n-}\n-\n fn main() {\n     if let Some(arg) = env::args().nth(1) {\n         match &arg[..] {\n@@ -83,12 +68,14 @@ fn main() {\n     };\n     assert_eq!(output.raw_os_error(), Some(102));\n \n-    let pid = getpid();\n+    let pid = unsafe { libc::getpid() };\n+    assert!(pid >= 0);\n     let output = unsafe {\n         Command::new(&me)\n             .arg(\"empty\")\n             .pre_exec(move || {\n-                let child = getpid();\n+                let child = libc::getpid();\n+                assert!(child >= 0);\n                 assert!(pid != child);\n                 Ok(())\n             })"}, {"sha": "1ccf6bb051c20593c0e4d6f90f04669fbe8673e3", "filename": "src/test/ui/process/process-panic-after-fork.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e96a0a8681998caf78093b65e746bfd967cb87e9/src%2Ftest%2Fui%2Fprocess%2Fprocess-panic-after-fork.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96a0a8681998caf78093b65e746bfd967cb87e9/src%2Ftest%2Fui%2Fprocess%2Fprocess-panic-after-fork.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprocess%2Fprocess-panic-after-fork.rs?ref=e96a0a8681998caf78093b65e746bfd967cb87e9", "patch": "@@ -23,21 +23,6 @@ use std::sync::atomic::{AtomicU32, Ordering};\n \n use libc::c_int;\n \n-#[cfg(not(target_os = \"linux\"))]\n-fn getpid() -> u32 {\n-    process::id()\n-}\n-\n-/// We need to directly use the getpid syscall instead of using `process::id()`\n-/// because the libc wrapper might return incorrect values after a process was\n-/// forked.\n-#[cfg(target_os = \"linux\")]\n-fn getpid() -> u32 {\n-    unsafe {\n-        libc::syscall(libc::SYS_getpid) as _\n-    }\n-}\n-\n /// This stunt allocator allows us to spot heap allocations in the child.\n struct PidChecking<A> {\n     parent: A,\n@@ -59,7 +44,7 @@ impl<A> PidChecking<A> {\n     fn check(&self) {\n         let require_pid = self.require_pid.load(Ordering::Acquire);\n         if require_pid != 0 {\n-            let actual_pid = getpid();\n+            let actual_pid = process::id();\n             if require_pid != actual_pid {\n                 unsafe {\n                     libc::raise(libc::SIGUSR1);"}]}