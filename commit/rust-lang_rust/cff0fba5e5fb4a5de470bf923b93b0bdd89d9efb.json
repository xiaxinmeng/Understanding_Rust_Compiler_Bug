{"sha": "cff0fba5e5fb4a5de470bf923b93b0bdd89d9efb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmZjBmYmE1ZTVmYjRhNWRlNDcwYmY5MjNiOTNiMGJkZDg5ZDllZmI=", "commit": {"author": {"name": "Dmitry", "email": "mamhigtt@gmail.com", "date": "2020-08-09T16:47:02Z"}, "committer": {"name": "Dmitry", "email": "mamhigtt@gmail.com", "date": "2020-08-09T16:47:02Z"}, "message": "apply format", "tree": {"sha": "6203f06dd105aa0d3a70282e9f3f4978d48bcc38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6203f06dd105aa0d3a70282e9f3f4978d48bcc38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cff0fba5e5fb4a5de470bf923b93b0bdd89d9efb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cff0fba5e5fb4a5de470bf923b93b0bdd89d9efb", "html_url": "https://github.com/rust-lang/rust/commit/cff0fba5e5fb4a5de470bf923b93b0bdd89d9efb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cff0fba5e5fb4a5de470bf923b93b0bdd89d9efb/comments", "author": {"login": "godcodehunter", "id": 22272886, "node_id": "MDQ6VXNlcjIyMjcyODg2", "avatar_url": "https://avatars.githubusercontent.com/u/22272886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/godcodehunter", "html_url": "https://github.com/godcodehunter", "followers_url": "https://api.github.com/users/godcodehunter/followers", "following_url": "https://api.github.com/users/godcodehunter/following{/other_user}", "gists_url": "https://api.github.com/users/godcodehunter/gists{/gist_id}", "starred_url": "https://api.github.com/users/godcodehunter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/godcodehunter/subscriptions", "organizations_url": "https://api.github.com/users/godcodehunter/orgs", "repos_url": "https://api.github.com/users/godcodehunter/repos", "events_url": "https://api.github.com/users/godcodehunter/events{/privacy}", "received_events_url": "https://api.github.com/users/godcodehunter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "godcodehunter", "id": 22272886, "node_id": "MDQ6VXNlcjIyMjcyODg2", "avatar_url": "https://avatars.githubusercontent.com/u/22272886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/godcodehunter", "html_url": "https://github.com/godcodehunter", "followers_url": "https://api.github.com/users/godcodehunter/followers", "following_url": "https://api.github.com/users/godcodehunter/following{/other_user}", "gists_url": "https://api.github.com/users/godcodehunter/gists{/gist_id}", "starred_url": "https://api.github.com/users/godcodehunter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/godcodehunter/subscriptions", "organizations_url": "https://api.github.com/users/godcodehunter/orgs", "repos_url": "https://api.github.com/users/godcodehunter/repos", "events_url": "https://api.github.com/users/godcodehunter/events{/privacy}", "received_events_url": "https://api.github.com/users/godcodehunter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f71ae8d73ea2a2203897703324e11c2096706fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f71ae8d73ea2a2203897703324e11c2096706fa", "html_url": "https://github.com/rust-lang/rust/commit/7f71ae8d73ea2a2203897703324e11c2096706fa"}], "stats": {"total": 65, "additions": 39, "deletions": 26}, "files": [{"sha": "a537b68b1f15a72c74be8f2cd6a8cf582b7af077", "filename": "crates/ra_ide/src/completion.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cff0fba5e5fb4a5de470bf923b93b0bdd89d9efb/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff0fba5e5fb4a5de470bf923b93b0bdd89d9efb/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion.rs?ref=cff0fba5e5fb4a5de470bf923b93b0bdd89d9efb", "patch": "@@ -21,12 +21,13 @@ mod complete_trait_impl;\n mod unstable_feature_descriptor;\n use ra_ide_db::RootDatabase;\n \n+#[rustfmt::skip]\n use crate::{\n     completion::{\n         completion_context::CompletionContext,\n         completion_item::{CompletionKind, Completions},\n \n-        //TODO: rework \n+        //TODO: cyclic imports caused by xtask generation, this should be better\n         unstable_feature_descriptor::UNSTABLE_FEATURE_DESCRIPTOR,\n         complete_attribute::LintCompletion,\n     },"}, {"sha": "2161cdfd211dc8de90df51a870c8376586189ec3", "filename": "crates/ra_ide/src/completion/complete_attribute.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cff0fba5e5fb4a5de470bf923b93b0bdd89d9efb/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff0fba5e5fb4a5de470bf923b93b0bdd89d9efb/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_attribute.rs?ref=cff0fba5e5fb4a5de470bf923b93b0bdd89d9efb", "patch": "@@ -19,9 +19,7 @@ pub(super) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext)\n         (Some(path), Some(token_tree)) if path.to_string() == \"derive\" => {\n             complete_derive(acc, ctx, token_tree)\n         }\n-        (Some(path), Some(token_tree))\n-            if path.to_string() == \"feature\" =>\n-        {\n+        (Some(path), Some(token_tree)) if path.to_string() == \"feature\" => {\n             complete_lint(acc, ctx, token_tree, UNSTABLE_FEATURE_DESCRIPTOR);\n         }\n         (Some(path), Some(token_tree))\n@@ -169,7 +167,12 @@ fn complete_derive(acc: &mut Completions, ctx: &CompletionContext, derive_input:\n     }\n }\n \n-fn complete_lint(acc: &mut Completions, ctx: &CompletionContext, derive_input: ast::TokenTree, lints_completions: &[LintCompletion]) {\n+fn complete_lint(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    derive_input: ast::TokenTree,\n+    lints_completions: &[LintCompletion],\n+) {\n     if let Ok(existing_lints) = parse_comma_sep_input(derive_input) {\n         for lint_completion in lints_completions\n             .into_iter()"}, {"sha": "c7cac50fe88a004b5ae690fb2875081cdd396d2e", "filename": "xtask/src/codegen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cff0fba5e5fb4a5de470bf923b93b0bdd89d9efb/xtask%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff0fba5e5fb4a5de470bf923b93b0bdd89d9efb/xtask%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen.rs?ref=cff0fba5e5fb4a5de470bf923b93b0bdd89d9efb", "patch": "@@ -26,7 +26,7 @@ pub use self::{\n     gen_unstable_future_descriptor::generate_unstable_future_descriptor,\n };\n \n-// Directory used by xtask \n+// Directory used by xtask\n const STORAGE: &str = \".xtask\";\n \n const GRAMMAR_DIR: &str = \"crates/ra_parser/src/grammar\";"}, {"sha": "75b603d7df5e5c6efb4ecfc6269edd5f8a9fe724", "filename": "xtask/src/codegen/gen_unstable_future_descriptor.rs", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/cff0fba5e5fb4a5de470bf923b93b0bdd89d9efb/xtask%2Fsrc%2Fcodegen%2Fgen_unstable_future_descriptor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cff0fba5e5fb4a5de470bf923b93b0bdd89d9efb/xtask%2Fsrc%2Fcodegen%2Fgen_unstable_future_descriptor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_unstable_future_descriptor.rs?ref=cff0fba5e5fb4a5de470bf923b93b0bdd89d9efb", "patch": "@@ -1,23 +1,27 @@\n //! Generates descriptors structure for unstable feature from Unstable Book\n \n-use crate::{\n-    codegen::{self, project_root, Mode, Result},\n-};\n-use std::process::Command;\n+use crate::codegen::update;\n+use crate::codegen::{self, project_root, Mode, Result};\n+use quote::quote;\n use std::fs;\n+use std::process::Command;\n use walkdir::WalkDir;\n-use quote::quote;\n-use crate::codegen::update;\n \n pub fn generate_unstable_future_descriptor(mode: Mode) -> Result<()> {\n     let path = project_root().join(codegen::STORAGE);\n     fs::create_dir_all(path.clone())?;\n \n     Command::new(\"git\").current_dir(path.clone()).arg(\"init\").output()?;\n-    Command::new(\"git\").current_dir(path.clone()).args(&[\"remote\", \"add\", \"-f\", \"origin\", codegen::REPOSITORY_URL]).output()?;\n-    Command::new(\"git\").current_dir(path.clone()).args(&[\"sparse-checkout\", \"set\", \"/src/doc/unstable-book/src/\"]).output()?;\n+    Command::new(\"git\")\n+        .current_dir(path.clone())\n+        .args(&[\"remote\", \"add\", \"-f\", \"origin\", codegen::REPOSITORY_URL])\n+        .output()?;\n+    Command::new(\"git\")\n+        .current_dir(path.clone())\n+        .args(&[\"sparse-checkout\", \"set\", \"/src/doc/unstable-book/src/\"])\n+        .output()?;\n     Command::new(\"git\").current_dir(path.clone()).args(&[\"pull\", \"origin\", \"master\"]).output()?;\n-    //TODO: check git, and do pull \n+    //TODO: check git, and do pull\n \n     let src_dir = path.join(\"src/doc/unstable-book/src\");\n     let files = WalkDir::new(src_dir.join(\"language-features\"))\n@@ -26,29 +30,34 @@ pub fn generate_unstable_future_descriptor(mode: Mode) -> Result<()> {\n         .filter_map(|e| e.ok())\n         .filter(|entry| {\n             // Get all `.md ` files\n-            entry.file_type().is_file() && entry.path().extension().map(|ext| ext == \"md\").unwrap_or(false)\n+            entry.file_type().is_file()\n+                && entry.path().extension().map(|ext| ext == \"md\").unwrap_or(false)\n+        })\n+        .collect::<Vec<_>>();\n+\n+    let definitions = files\n+        .iter()\n+        .map(|entry| {\n+            let path = entry.path();\n+            let feature_ident =\n+                format!(\"{}\", path.file_stem().unwrap().to_str().unwrap().replace(\"-\", \"_\"));\n+            let doc = format!(\"{}\", std::fs::read_to_string(path).unwrap());\n+\n+            quote! { LintCompletion { label: #feature_ident, description: #doc } }\n         })\n         .collect::<Vec<_>>();\n \n-    let definitions = files.iter().map(|entry| {\n-        let path = entry.path();\n-        let feature_ident = format!(\"{}\", path.file_stem().unwrap().to_str().unwrap().replace(\"-\", \"_\"));\n-        let doc = format!(\"{}\", std::fs::read_to_string(path).unwrap() );\n-       \n-        quote!{ LintCompletion { label: #feature_ident, description: #doc } }\n-    }).collect::<Vec<_>>();\n-    \n     let ts = quote! {\n         use crate::completion::LintCompletion;\n \n         pub const UNSTABLE_FEATURE_DESCRIPTOR:  &[LintCompletion] = &[\n             #(#definitions),*\n         ];\n     };\n-    \n+\n     let destination = project_root().join(codegen::UNSTABLE_FEATURE);\n     let contents = crate::reformat(ts.to_string())?;\n     update(destination.as_path(), &contents, mode)?;\n \n     Ok(())\n-}\n\\ No newline at end of file\n+}"}]}