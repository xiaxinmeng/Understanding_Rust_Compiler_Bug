{"sha": "a25aee19575d59709e51b5c214fe49af7090e69d", "node_id": "C_kwDOAAsO6NoAKGEyNWFlZTE5NTc1ZDU5NzA5ZTUxYjVjMjE0ZmU0OWFmNzA5MGU2OWQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-25T17:48:19Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-27T04:13:44Z"}, "message": "Perform MIR type ops locally in new solver", "tree": {"sha": "c8d456057846b78c1443daf18797cbb5cdcdfad6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8d456057846b78c1443daf18797cbb5cdcdfad6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a25aee19575d59709e51b5c214fe49af7090e69d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a25aee19575d59709e51b5c214fe49af7090e69d", "html_url": "https://github.com/rust-lang/rust/commit/a25aee19575d59709e51b5c214fe49af7090e69d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a25aee19575d59709e51b5c214fe49af7090e69d/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19ed0aade60e1c1038fe40554bcd9d01b717effa", "url": "https://api.github.com/repos/rust-lang/rust/commits/19ed0aade60e1c1038fe40554bcd9d01b717effa", "html_url": "https://github.com/rust-lang/rust/commit/19ed0aade60e1c1038fe40554bcd9d01b717effa"}], "stats": {"total": 95, "additions": 94, "deletions": 1}, "files": [{"sha": "a2cfdeefd6f300d2f1d1303a91c9a13bc0dc37f8", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/ascribe_user_type.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a25aee19575d59709e51b5c214fe49af7090e69d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a25aee19575d59709e51b5c214fe49af7090e69d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs?ref=a25aee19575d59709e51b5c214fe49af7090e69d", "patch": "@@ -1,4 +1,5 @@\n use crate::infer::canonical::{Canonical, CanonicalQueryResponse};\n+use crate::traits::ObligationCtxt;\n use rustc_middle::traits::query::NoSolution;\n use rustc_middle::ty::{ParamEnvAnd, TyCtxt};\n \n@@ -20,4 +21,11 @@ impl<'tcx> super::QueryTypeOp<'tcx> for AscribeUserType<'tcx> {\n     ) -> Result<CanonicalQueryResponse<'tcx, ()>, NoSolution> {\n         tcx.type_op_ascribe_user_type(canonicalized)\n     }\n+\n+    fn perform_locally_in_new_solver(\n+        _ocx: &ObligationCtxt<'_, 'tcx>,\n+        _key: ParamEnvAnd<'tcx, Self>,\n+    ) -> Result<Self::QueryResponse, NoSolution> {\n+        todo!()\n+    }\n }"}, {"sha": "f65893088066ef057bb11f7cc5585540a69c0089", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/eq.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a25aee19575d59709e51b5c214fe49af7090e69d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a25aee19575d59709e51b5c214fe49af7090e69d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs?ref=a25aee19575d59709e51b5c214fe49af7090e69d", "patch": "@@ -1,5 +1,7 @@\n use crate::infer::canonical::{Canonical, CanonicalQueryResponse};\n+use crate::traits::ObligationCtxt;\n use rustc_middle::traits::query::NoSolution;\n+use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::{ParamEnvAnd, TyCtxt};\n \n pub use rustc_middle::traits::query::type_op::Eq;\n@@ -20,4 +22,12 @@ impl<'tcx> super::QueryTypeOp<'tcx> for Eq<'tcx> {\n     ) -> Result<CanonicalQueryResponse<'tcx, ()>, NoSolution> {\n         tcx.type_op_eq(canonicalized)\n     }\n+\n+    fn perform_locally_in_new_solver(\n+        ocx: &ObligationCtxt<'_, 'tcx>,\n+        key: ParamEnvAnd<'tcx, Self>,\n+    ) -> Result<Self::QueryResponse, NoSolution> {\n+        ocx.eq(&ObligationCause::dummy(), key.param_env, key.value.a, key.value.b)?;\n+        Ok(())\n+    }\n }"}, {"sha": "9054bafc4a67aeba6722a998c773dfb9624b200a", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/implied_outlives_bounds.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a25aee19575d59709e51b5c214fe49af7090e69d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a25aee19575d59709e51b5c214fe49af7090e69d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs?ref=a25aee19575d59709e51b5c214fe49af7090e69d", "patch": "@@ -1,4 +1,5 @@\n use crate::infer::canonical::{Canonical, CanonicalQueryResponse};\n+use crate::traits::ObligationCtxt;\n use rustc_infer::traits::query::OutlivesBound;\n use rustc_middle::traits::query::NoSolution;\n use rustc_middle::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n@@ -39,4 +40,11 @@ impl<'tcx> super::QueryTypeOp<'tcx> for ImpliedOutlivesBounds<'tcx> {\n \n         tcx.implied_outlives_bounds(canonicalized)\n     }\n+\n+    fn perform_locally_in_new_solver(\n+        _ocx: &ObligationCtxt<'_, 'tcx>,\n+        _key: ParamEnvAnd<'tcx, Self>,\n+    ) -> Result<Self::QueryResponse, NoSolution> {\n+        todo!()\n+    }\n }"}, {"sha": "642fdec2d9ae33278c92f8f15a7b0a4409dca5d4", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/mod.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a25aee19575d59709e51b5c214fe49af7090e69d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a25aee19575d59709e51b5c214fe49af7090e69d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=a25aee19575d59709e51b5c214fe49af7090e69d", "patch": "@@ -2,7 +2,7 @@ use crate::infer::canonical::{\n     Canonical, CanonicalQueryResponse, OriginalQueryValues, QueryRegionConstraints,\n };\n use crate::infer::{InferCtxt, InferOk};\n-use crate::traits::ObligationCause;\n+use crate::traits::{ObligationCause, ObligationCtxt};\n use rustc_errors::ErrorGuaranteed;\n use rustc_infer::infer::canonical::Certainty;\n use rustc_infer::traits::PredicateObligations;\n@@ -23,6 +23,8 @@ pub mod subtype;\n \n pub use rustc_middle::traits::query::type_op::*;\n \n+use self::custom::scrape_region_constraints;\n+\n /// \"Type ops\" are used in NLL to perform some particular action and\n /// extract out the resulting region constraints (or an error if it\n /// cannot be completed).\n@@ -81,6 +83,17 @@ pub trait QueryTypeOp<'tcx>: fmt::Debug + Copy + TypeFoldable<TyCtxt<'tcx>> + 't\n         canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Self>>,\n     ) -> Result<CanonicalQueryResponse<'tcx, Self::QueryResponse>, NoSolution>;\n \n+    /// In the new trait solver, we already do caching in the solver itself,\n+    /// so there's no need to canonicalize and cache via the query system.\n+    /// Additionally, even if we were to canonicalize, we'd still need to\n+    /// make sure to feed it predefined opaque types and the defining anchor\n+    /// and that would require duplicating all of the tcx queries. Instead,\n+    /// just perform these ops locally.\n+    fn perform_locally_in_new_solver(\n+        ocx: &ObligationCtxt<'_, 'tcx>,\n+        key: ParamEnvAnd<'tcx, Self>,\n+    ) -> Result<Self::QueryResponse, NoSolution>;\n+\n     fn fully_perform_into(\n         query_key: ParamEnvAnd<'tcx, Self>,\n         infcx: &InferCtxt<'tcx>,\n@@ -133,6 +146,16 @@ where\n         infcx: &InferCtxt<'tcx>,\n         span: Span,\n     ) -> Result<TypeOpOutput<'tcx, Self>, ErrorGuaranteed> {\n+        if infcx.tcx.trait_solver_next() {\n+            return Ok(scrape_region_constraints(\n+                infcx,\n+                |ocx| QueryTypeOp::perform_locally_in_new_solver(ocx, self),\n+                \"query type op\",\n+                span,\n+            )?\n+            .0);\n+        }\n+\n         let mut region_constraints = QueryRegionConstraints::default();\n         let (output, error_info, mut obligations, _) =\n             Q::fully_perform_into(self, infcx, &mut region_constraints).map_err(|_| {"}, {"sha": "57ca14aa492ffb036f5b4a5daf08ac8662bfbf78", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/normalize.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a25aee19575d59709e51b5c214fe49af7090e69d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a25aee19575d59709e51b5c214fe49af7090e69d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fnormalize.rs?ref=a25aee19575d59709e51b5c214fe49af7090e69d", "patch": "@@ -1,5 +1,7 @@\n use crate::infer::canonical::{Canonical, CanonicalQueryResponse};\n+use crate::traits::ObligationCtxt;\n use rustc_middle::traits::query::NoSolution;\n+use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::{self, Lift, ParamEnvAnd, Ty, TyCtxt, TypeVisitableExt};\n use std::fmt;\n@@ -22,6 +24,14 @@ where\n     ) -> Result<CanonicalQueryResponse<'tcx, Self::QueryResponse>, NoSolution> {\n         T::type_op_method(tcx, canonicalized)\n     }\n+\n+    fn perform_locally_in_new_solver(\n+        ocx: &ObligationCtxt<'_, 'tcx>,\n+        key: ParamEnvAnd<'tcx, Self>,\n+    ) -> Result<Self::QueryResponse, NoSolution> {\n+        // FIXME(-Ztrait-solver=next): shouldn't be using old normalizer\n+        Ok(ocx.normalize(&ObligationCause::dummy(), key.param_env, key.value.value))\n+    }\n }\n \n pub trait Normalizable<'tcx>: fmt::Debug + TypeFoldable<TyCtxt<'tcx>> + Lift<'tcx> + Copy {"}, {"sha": "8b3a20a88f03e36d72fdc50a5b9014eacfe3daf6", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/outlives.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a25aee19575d59709e51b5c214fe49af7090e69d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a25aee19575d59709e51b5c214fe49af7090e69d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs?ref=a25aee19575d59709e51b5c214fe49af7090e69d", "patch": "@@ -1,5 +1,6 @@\n use crate::infer::canonical::{Canonical, CanonicalQueryResponse};\n use crate::traits::query::dropck_outlives::{trivial_dropck_outlives, DropckOutlivesResult};\n+use crate::traits::ObligationCtxt;\n use rustc_middle::traits::query::NoSolution;\n use rustc_middle::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n@@ -48,4 +49,11 @@ impl<'tcx> super::QueryTypeOp<'tcx> for DropckOutlives<'tcx> {\n \n         tcx.dropck_outlives(canonicalized)\n     }\n+\n+    fn perform_locally_in_new_solver(\n+        _ocx: &ObligationCtxt<'_, 'tcx>,\n+        _key: ParamEnvAnd<'tcx, Self>,\n+    ) -> Result<Self::QueryResponse, NoSolution> {\n+        todo!()\n+    }\n }"}, {"sha": "47850bc330dab295c977225059c403728264dfe3", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/prove_predicate.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a25aee19575d59709e51b5c214fe49af7090e69d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a25aee19575d59709e51b5c214fe49af7090e69d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs?ref=a25aee19575d59709e51b5c214fe49af7090e69d", "patch": "@@ -1,5 +1,8 @@\n use crate::infer::canonical::{Canonical, CanonicalQueryResponse};\n+use crate::traits::ObligationCtxt;\n+use rustc_infer::traits::Obligation;\n use rustc_middle::traits::query::NoSolution;\n+use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::{self, ParamEnvAnd, TyCtxt};\n \n pub use rustc_middle::traits::query::type_op::ProvePredicate;\n@@ -36,4 +39,17 @@ impl<'tcx> super::QueryTypeOp<'tcx> for ProvePredicate<'tcx> {\n     ) -> Result<CanonicalQueryResponse<'tcx, ()>, NoSolution> {\n         tcx.type_op_prove_predicate(canonicalized)\n     }\n+\n+    fn perform_locally_in_new_solver(\n+        ocx: &ObligationCtxt<'_, 'tcx>,\n+        key: ParamEnvAnd<'tcx, Self>,\n+    ) -> Result<Self::QueryResponse, NoSolution> {\n+        ocx.register_obligation(Obligation::new(\n+            ocx.infcx.tcx,\n+            ObligationCause::dummy(),\n+            key.param_env,\n+            key.value.predicate,\n+        ));\n+        Ok(())\n+    }\n }"}, {"sha": "10976d5cd71625a7433eb195b3f3684886426ce1", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/subtype.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a25aee19575d59709e51b5c214fe49af7090e69d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a25aee19575d59709e51b5c214fe49af7090e69d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fsubtype.rs?ref=a25aee19575d59709e51b5c214fe49af7090e69d", "patch": "@@ -1,5 +1,7 @@\n use crate::infer::canonical::{Canonical, CanonicalQueryResponse};\n+use crate::traits::ObligationCtxt;\n use rustc_middle::traits::query::NoSolution;\n+use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::{ParamEnvAnd, TyCtxt};\n \n pub use rustc_middle::traits::query::type_op::Subtype;\n@@ -17,4 +19,12 @@ impl<'tcx> super::QueryTypeOp<'tcx> for Subtype<'tcx> {\n     ) -> Result<CanonicalQueryResponse<'tcx, ()>, NoSolution> {\n         tcx.type_op_subtype(canonicalized)\n     }\n+\n+    fn perform_locally_in_new_solver(\n+        ocx: &ObligationCtxt<'_, 'tcx>,\n+        key: ParamEnvAnd<'tcx, Self>,\n+    ) -> Result<Self::QueryResponse, NoSolution> {\n+        ocx.sub(&ObligationCause::dummy(), key.param_env, key.value.sub, key.value.sup)?;\n+        Ok(())\n+    }\n }"}]}