{"sha": "8f3238f898163f09726c3d2b2cc9bafb09da26f3", "node_id": "C_kwDOAAsO6NoAKDhmMzIzOGY4OTgxNjNmMDk3MjZjM2QyYjJjYzliYWZiMDlkYTI2ZjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-02T15:49:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-02T15:49:23Z"}, "message": "Auto merge of #90128 - joshtriplett:stabilize-symbol-mangling-version, r=wesleywiser\n\nStabilize -Z symbol-mangling-version=v0 as -C symbol-mangling-version=v0\n\nThis allows selecting `v0` symbol-mangling without an unstable option. Selecting `legacy` still requires -Z unstable-options.\n\nThis does not change the default symbol-mangling-version. See https://github.com/rust-lang/rust/pull/89917 for a pull request changing the default. Rationale, from #89917:\n\nRust's current mangling scheme depends on compiler internals; loses information about generic parameters (and other things) which makes for a worse experience when using external tools that need to interact with Rust symbol names; is inconsistent; and can contain . characters which aren't universally supported. Therefore, Rust has defined its own symbol mangling scheme which is defined in terms of the Rust language, not the compiler implementation; encodes information about generic parameters in a reversible way; has a consistent definition; and generates symbols that only use the characters A-Z, a-z, 0-9, and _.\n\nSupport for the new Rust symbol mangling scheme has been added to upstream tools that will need to interact with Rust symbols (e.g. debuggers).\n\nThis pull request allows enabling the new v0 symbol-mangling-version.\n\nSee #89917 for references to the implementation of v0, and for references to the tool changes to decode Rust symbols.", "tree": {"sha": "417bdb60d3e22106f6a1a0b570d643cf4ee1e32c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/417bdb60d3e22106f6a1a0b570d643cf4ee1e32c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f3238f898163f09726c3d2b2cc9bafb09da26f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f3238f898163f09726c3d2b2cc9bafb09da26f3", "html_url": "https://github.com/rust-lang/rust/commit/8f3238f898163f09726c3d2b2cc9bafb09da26f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f3238f898163f09726c3d2b2cc9bafb09da26f3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03360be6b77a37947e6ef6c54777b7b96728de69", "url": "https://api.github.com/repos/rust-lang/rust/commits/03360be6b77a37947e6ef6c54777b7b96728de69", "html_url": "https://github.com/rust-lang/rust/commit/03360be6b77a37947e6ef6c54777b7b96728de69"}, {"sha": "ff94b3b12b30d1a52d594cb48f80efa39a6029a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff94b3b12b30d1a52d594cb48f80efa39a6029a6", "html_url": "https://github.com/rust-lang/rust/commit/ff94b3b12b30d1a52d594cb48f80efa39a6029a6"}], "stats": {"total": 122, "additions": 76, "deletions": 46}, "files": [{"sha": "a932c1c8372b488dc479bbba4d8fd85f864d14f5", "filename": "compiler/rustc_codegen_gcc/config.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f3238f898163f09726c3d2b2cc9bafb09da26f3/compiler%2Frustc_codegen_gcc%2Fconfig.sh", "raw_url": "https://github.com/rust-lang/rust/raw/8f3238f898163f09726c3d2b2cc9bafb09da26f3/compiler%2Frustc_codegen_gcc%2Fconfig.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fconfig.sh?ref=8f3238f898163f09726c3d2b2cc9bafb09da26f3", "patch": "@@ -38,7 +38,7 @@ if [[ \"$HOST_TRIPLE\" != \"$TARGET_TRIPLE\" ]]; then\n    fi\n fi\n \n-export RUSTFLAGS=\"$linker -Cpanic=abort -Zsymbol-mangling-version=v0 -Cdebuginfo=2 -Clto=off -Zpanic-abort-tests -Zcodegen-backend=$(pwd)/target/${CHANNEL:-debug}/librustc_codegen_gcc.$dylib_ext --sysroot $(pwd)/build_sysroot/sysroot\"\n+export RUSTFLAGS=\"$linker -Cpanic=abort -Csymbol-mangling-version=v0 -Cdebuginfo=2 -Clto=off -Zpanic-abort-tests -Zcodegen-backend=$(pwd)/target/${CHANNEL:-debug}/librustc_codegen_gcc.$dylib_ext --sysroot $(pwd)/build_sysroot/sysroot\"\n \n # FIXME(antoyo): remove once the atomic shim is gone\n if [[ `uname` == 'Darwin' ]]; then"}, {"sha": "b9aeee795504780d4a1355019eeee0bfa5832243", "filename": "compiler/rustc_codegen_gcc/test.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f3238f898163f09726c3d2b2cc9bafb09da26f3/compiler%2Frustc_codegen_gcc%2Ftest.sh", "raw_url": "https://github.com/rust-lang/rust/raw/8f3238f898163f09726c3d2b2cc9bafb09da26f3/compiler%2Frustc_codegen_gcc%2Ftest.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Ftest.sh?ref=8f3238f898163f09726c3d2b2cc9bafb09da26f3", "patch": "@@ -183,7 +183,7 @@ EOF\n     git checkout src/test/ui/type-alias-impl-trait/auxiliary/cross_crate_ice2.rs\n     rm src/test/ui/llvm-asm/llvm-asm-in-out-operand.rs || true # TODO(antoyo): Enable back this test if I ever implement the llvm_asm! macro.\n \n-    RUSTC_ARGS=\"-Zpanic-abort-tests -Zsymbol-mangling-version=v0 -Zcodegen-backend=\"$(pwd)\"/../target/\"$CHANNEL\"/librustc_codegen_gcc.\"$dylib_ext\" --sysroot \"$(pwd)\"/../build_sysroot/sysroot -Cpanic=abort\"\n+    RUSTC_ARGS=\"-Zpanic-abort-tests -Csymbol-mangling-version=v0 -Zcodegen-backend=\"$(pwd)\"/../target/\"$CHANNEL\"/librustc_codegen_gcc.\"$dylib_ext\" --sysroot \"$(pwd)\"/../build_sysroot/sysroot -Cpanic=abort\"\n \n     echo \"[TEST] rustc test suite\"\n     COMPILETEST_FORCE_STAGE0=1 ./x.py test --run always --stage 0 src/test/ui/ --rustc-args \"$RUSTC_ARGS\""}, {"sha": "816e770f01252ed97e1b5f4aa0ec81839d1ee8af", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f3238f898163f09726c3d2b2cc9bafb09da26f3/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3238f898163f09726c3d2b2cc9bafb09da26f3/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=8f3238f898163f09726c3d2b2cc9bafb09da26f3", "patch": "@@ -594,6 +594,7 @@ fn test_codegen_options_tracking_hash() {\n     tracked!(relocation_model, Some(RelocModel::Pic));\n     tracked!(soft_float, true);\n     tracked!(split_debuginfo, Some(SplitDebuginfo::Packed));\n+    tracked!(symbol_mangling_version, Some(SymbolManglingVersion::V0));\n     tracked!(target_cpu, Some(String::from(\"abc\")));\n     tracked!(target_feature, String::from(\"all the features, all of them\"));\n }"}, {"sha": "3942846e79df069b6151648f79d4036db093551b", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f3238f898163f09726c3d2b2cc9bafb09da26f3/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3238f898163f09726c3d2b2cc9bafb09da26f3/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=8f3238f898163f09726c3d2b2cc9bafb09da26f3", "patch": "@@ -721,7 +721,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             no_builtins: tcx.sess.contains_name(&attrs, sym::no_builtins),\n             panic_runtime: tcx.sess.contains_name(&attrs, sym::panic_runtime),\n             profiler_runtime: tcx.sess.contains_name(&attrs, sym::profiler_runtime),\n-            symbol_mangling_version: tcx.sess.opts.debugging_opts.get_symbol_mangling_version(),\n+            symbol_mangling_version: tcx.sess.opts.get_symbol_mangling_version(),\n \n             crate_deps,\n             dylib_dependency_formats,"}, {"sha": "f2c7959ddb6e3212248166b52643d6e6dc87978c", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8f3238f898163f09726c3d2b2cc9bafb09da26f3/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3238f898163f09726c3d2b2cc9bafb09da26f3/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=8f3238f898163f09726c3d2b2cc9bafb09da26f3", "patch": "@@ -781,6 +781,10 @@ impl Options {\n             },\n         }\n     }\n+\n+    pub fn get_symbol_mangling_version(&self) -> SymbolManglingVersion {\n+        self.cg.symbol_mangling_version.unwrap_or(SymbolManglingVersion::Legacy)\n+    }\n }\n \n impl DebuggingOptions {\n@@ -794,10 +798,6 @@ impl DebuggingOptions {\n             deduplicate_diagnostics: self.deduplicate_diagnostics,\n         }\n     }\n-\n-    pub fn get_symbol_mangling_version(&self) -> SymbolManglingVersion {\n-        self.symbol_mangling_version.unwrap_or(SymbolManglingVersion::Legacy)\n-    }\n }\n \n // The type of entry function, so users can have their own entry functions\n@@ -2116,6 +2116,34 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         );\n     }\n \n+    // Handle both `-Z symbol-mangling-version` and `-C symbol-mangling-version`; the latter takes\n+    // precedence.\n+    match (cg.symbol_mangling_version, debugging_opts.symbol_mangling_version) {\n+        (Some(smv_c), Some(smv_z)) if smv_c != smv_z => {\n+            early_error(\n+                error_format,\n+                \"incompatible values passed for `-C symbol-mangling-version` \\\n+                and `-Z symbol-mangling-version`\",\n+            );\n+        }\n+        (Some(SymbolManglingVersion::V0), _) => {}\n+        (Some(_), _) if !debugging_opts.unstable_options => {\n+            early_error(\n+                error_format,\n+                \"`-C symbol-mangling-version=legacy` requires `-Z unstable-options`\",\n+            );\n+        }\n+        (None, None) => {}\n+        (None, smv) => {\n+            early_warn(\n+                error_format,\n+                \"`-Z symbol-mangling-version` is deprecated; use `-C symbol-mangling-version`\",\n+            );\n+            cg.symbol_mangling_version = smv;\n+        }\n+        _ => {}\n+    }\n+\n     if debugging_opts.instrument_coverage.is_some()\n         && debugging_opts.instrument_coverage != Some(InstrumentCoverage::Off)\n     {\n@@ -2127,19 +2155,17 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             );\n         }\n \n-        // `-Z instrument-coverage` implies `-Z symbol-mangling-version=v0` - to ensure consistent\n+        // `-Z instrument-coverage` implies `-C symbol-mangling-version=v0` - to ensure consistent\n         // and reversible name mangling. Note, LLVM coverage tools can analyze coverage over\n         // multiple runs, including some changes to source code; so mangled names must be consistent\n         // across compilations.\n-        match debugging_opts.symbol_mangling_version {\n-            None => {\n-                debugging_opts.symbol_mangling_version = Some(SymbolManglingVersion::V0);\n-            }\n+        match cg.symbol_mangling_version {\n+            None => cg.symbol_mangling_version = Some(SymbolManglingVersion::V0),\n             Some(SymbolManglingVersion::Legacy) => {\n                 early_warn(\n                     error_format,\n                     \"-Z instrument-coverage requires symbol mangling version `v0`, \\\n-                    but `-Z symbol-mangling-version=legacy` was specified\",\n+                    but `-C symbol-mangling-version=legacy` was specified\",\n                 );\n             }\n             Some(SymbolManglingVersion::V0) => {}"}, {"sha": "c8adc9f00a1b93e96ee8c33619eafa25a270af62", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8f3238f898163f09726c3d2b2cc9bafb09da26f3/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3238f898163f09726c3d2b2cc9bafb09da26f3/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=8f3238f898163f09726c3d2b2cc9bafb09da26f3", "patch": "@@ -1083,6 +1083,9 @@ options! {\n         \"how to handle split-debuginfo, a platform-specific option\"),\n     strip: Strip = (Strip::None, parse_strip, [UNTRACKED],\n         \"tell the linker which information to strip (`none` (default), `debuginfo` or `symbols`)\"),\n+    symbol_mangling_version: Option<SymbolManglingVersion> = (None,\n+        parse_symbol_mangling_version, [TRACKED],\n+        \"which mangling version to use for symbol names ('legacy' (default) or 'v0')\"),\n     target_cpu: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"select target processor (`rustc --print target-cpus` for details)\"),\n     target_feature: String = (String::new(), parse_target_feature, [TRACKED],\n@@ -1227,7 +1230,7 @@ options! {\n     instrument_coverage: Option<InstrumentCoverage> = (None, parse_instrument_coverage, [TRACKED],\n         \"instrument the generated code to support LLVM source-based code coverage \\\n         reports (note, the compiler build config must include `profiler = true`); \\\n-        implies `-Z symbol-mangling-version=v0`. Optional values are:\n+        implies `-C symbol-mangling-version=v0`. Optional values are:\n         `=all` (implicit value)\n         `=except-unused-generics`\n         `=except-unused-functions`"}, {"sha": "1f38240ee41461b4832d92b2156ae01112b0a584", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f3238f898163f09726c3d2b2cc9bafb09da26f3/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3238f898163f09726c3d2b2cc9bafb09da26f3/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=8f3238f898163f09726c3d2b2cc9bafb09da26f3", "patch": "@@ -237,15 +237,15 @@ fn compute_symbol_name<'tcx>(\n \n     // Pick the crate responsible for the symbol mangling version, which has to:\n     // 1. be stable for each instance, whether it's being defined or imported\n-    // 2. obey each crate's own `-Z symbol-mangling-version`, as much as possible\n+    // 2. obey each crate's own `-C symbol-mangling-version`, as much as possible\n     // We solve these as follows:\n     // 1. because symbol names depend on both `def_id` and `instantiating_crate`,\n     // both their `CrateNum`s are stable for any given instance, so we can pick\n     // either and have a stable choice of symbol mangling version\n     // 2. we favor `instantiating_crate` where possible (i.e. when `Some`)\n     let mangling_version_crate = instantiating_crate.unwrap_or(def_id.krate);\n     let mangling_version = if mangling_version_crate == LOCAL_CRATE {\n-        tcx.sess.opts.debugging_opts.get_symbol_mangling_version()\n+        tcx.sess.opts.get_symbol_mangling_version()\n     } else {\n         tcx.symbol_mangling_version(mangling_version_crate)\n     };"}, {"sha": "39eb407269c1180931a07d1d10054aec8502bada", "filename": "src/doc/unstable-book/src/compiler-flags/instrument-coverage.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Finstrument-coverage.md", "raw_url": "https://github.com/rust-lang/rust/raw/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Finstrument-coverage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Finstrument-coverage.md?ref=8f3238f898163f09726c3d2b2cc9bafb09da26f3", "patch": "@@ -27,7 +27,7 @@ When running a coverage-instrumented program, the counter values are written to\n [`llvm.instrprof.increment`]: https://llvm.org/docs/LangRef.html#llvm-instrprof-increment-intrinsic\n [llvm code coverage mapping format]: https://llvm.org/docs/CoverageMappingFormat.html\n \n-> **Note**: `-Z instrument-coverage` also automatically enables `-Z symbol-mangling-version=v0` (tracking issue [#60705]). The `v0` symbol mangler is strongly recommended, but be aware that this demangler is also experimental. The `v0` demangler can be overridden by explicitly adding `-Z symbol-mangling-version=legacy`.\n+> **Note**: `-Z instrument-coverage` also automatically enables `-C symbol-mangling-version=v0` (tracking issue [#60705]). The `v0` symbol mangler is strongly recommended, but be aware that this demangler is also experimental. The `v0` demangler can be overridden by explicitly adding `-Z unstable-options -C symbol-mangling-version=legacy`.\n \n [#60705]: https://github.com/rust-lang/rust/issues/60705\n "}, {"sha": "ad41badf38169036d03b02a6a1fb599e0f86d583", "filename": "src/test/codegen/inline-hint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fcodegen%2Finline-hint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fcodegen%2Finline-hint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Finline-hint.rs?ref=8f3238f898163f09726c3d2b2cc9bafb09da26f3", "patch": "@@ -1,7 +1,7 @@\n // Checks that closures, constructors, and shims except\n // for a drop glue receive inline hint by default.\n //\n-// compile-flags: -Cno-prepopulate-passes -Zsymbol-mangling-version=v0\n+// compile-flags: -Cno-prepopulate-passes -Csymbol-mangling-version=v0\n #![crate_type = \"lib\"]\n \n pub fn f() {"}, {"sha": "4a9b3d70933e4980345c6429dcf84d821a1fd0b6", "filename": "src/test/run-make-fulldeps/a-b-a-linker-guard/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Frun-make-fulldeps%2Fa-b-a-linker-guard%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Frun-make-fulldeps%2Fa-b-a-linker-guard%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fa-b-a-linker-guard%2FMakefile?ref=8f3238f898163f09726c3d2b2cc9bafb09da26f3", "patch": "@@ -8,8 +8,8 @@\n # and will probably get removed once `legacy` is gone.\n \n all:\n-\t$(RUSTC) a.rs --cfg x -C prefer-dynamic -Z symbol-mangling-version=legacy\n-\t$(RUSTC) b.rs -C prefer-dynamic -Z symbol-mangling-version=legacy\n+\t$(RUSTC) a.rs --cfg x -C prefer-dynamic -Z unstable-options -C symbol-mangling-version=legacy\n+\t$(RUSTC) b.rs -C prefer-dynamic -Z unstable-options -C symbol-mangling-version=legacy\n \t$(call RUN,b)\n-\t$(RUSTC) a.rs --cfg y -C prefer-dynamic -Z symbol-mangling-version=legacy\n+\t$(RUSTC) a.rs --cfg y -C prefer-dynamic -Z unstable-options -C symbol-mangling-version=legacy\n \t$(call FAIL,b)"}, {"sha": "282cb2461f69a7b494f987af2fb7ab893e059dcb", "filename": "src/test/run-make-fulldeps/share-generics-dylib/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Frun-make-fulldeps%2Fshare-generics-dylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Frun-make-fulldeps%2Fshare-generics-dylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fshare-generics-dylib%2FMakefile?ref=8f3238f898163f09726c3d2b2cc9bafb09da26f3", "patch": "@@ -11,7 +11,7 @@\n \n -include ../../run-make-fulldeps/tools.mk\n \n-COMMON_ARGS=-Cprefer-dynamic -Zshare-generics=yes -Ccodegen-units=1 -Zsymbol-mangling-version=v0\n+COMMON_ARGS=-Cprefer-dynamic -Zshare-generics=yes -Ccodegen-units=1 -Csymbol-mangling-version=v0\n \n all:\n \t$(RUSTC) instance_provider_a.rs $(COMMON_ARGS) --crate-type=rlib"}, {"sha": "b315ef05190719647ef94a7014e147bbb4366391", "filename": "src/test/ui/lifetimes/issue-84604.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Flifetimes%2Fissue-84604.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Flifetimes%2Fissue-84604.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-84604.rs?ref=8f3238f898163f09726c3d2b2cc9bafb09da26f3", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// compile-flags: -Zsymbol-mangling-version=v0\n+// compile-flags: -Csymbol-mangling-version=v0\n \n pub fn f<T: ?Sized>() {}\n pub trait Frob<T: ?Sized> {}"}, {"sha": "c34e00bab7cdd8ec23bf823e16d416822a0a16a5", "filename": "src/test/ui/panics/issue-47429-short-backtraces.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fpanics%2Fissue-47429-short-backtraces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fpanics%2Fissue-47429-short-backtraces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fissue-47429-short-backtraces.rs?ref=8f3238f898163f09726c3d2b2cc9bafb09da26f3", "patch": "@@ -14,8 +14,8 @@\n \n // NOTE(eddyb) output differs between symbol mangling schemes\n // revisions: legacy v0\n-// [legacy] compile-flags: -Zsymbol-mangling-version=legacy\n-//     [v0] compile-flags: -Zsymbol-mangling-version=v0\n+// [legacy] compile-flags: -Zunstable-options -Csymbol-mangling-version=legacy\n+//     [v0] compile-flags: -Csymbol-mangling-version=v0\n \n fn main() {\n     panic!()"}, {"sha": "e1030858814e0978786c1c3329d17e1c3d4601f5", "filename": "src/test/ui/polymorphization/closure_in_upvar/fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fpolymorphization%2Fclosure_in_upvar%2Ffn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fpolymorphization%2Fclosure_in_upvar%2Ffn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fclosure_in_upvar%2Ffn.rs?ref=8f3238f898163f09726c3d2b2cc9bafb09da26f3", "patch": "@@ -1,5 +1,5 @@\n // build-pass\n-// compile-flags:-Zpolymorphize=on -Zsymbol-mangling-version=v0\n+// compile-flags:-Zpolymorphize=on -Csymbol-mangling-version=v0\n \n fn foo(f: impl Fn()) {\n     let x = |_: ()| ();"}, {"sha": "62164ff94850814edb44e2dab8de115fae01142e", "filename": "src/test/ui/polymorphization/closure_in_upvar/fnmut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fpolymorphization%2Fclosure_in_upvar%2Ffnmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fpolymorphization%2Fclosure_in_upvar%2Ffnmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fclosure_in_upvar%2Ffnmut.rs?ref=8f3238f898163f09726c3d2b2cc9bafb09da26f3", "patch": "@@ -1,5 +1,5 @@\n // build-pass\n-// compile-flags:-Zpolymorphize=on -Zsymbol-mangling-version=v0\n+// compile-flags:-Zpolymorphize=on -Csymbol-mangling-version=v0\n \n fn foo(f: impl Fn()) {\n     // Mutate an upvar from `x` so that it implements `FnMut`."}, {"sha": "7a364882fb8fd5d56afddb878037679624199703", "filename": "src/test/ui/polymorphization/closure_in_upvar/fnonce.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fpolymorphization%2Fclosure_in_upvar%2Ffnonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fpolymorphization%2Fclosure_in_upvar%2Ffnonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fclosure_in_upvar%2Ffnonce.rs?ref=8f3238f898163f09726c3d2b2cc9bafb09da26f3", "patch": "@@ -1,5 +1,5 @@\n // build-pass\n-// compile-flags:-Zpolymorphize=on -Zsymbol-mangling-version=v0\n+// compile-flags:-Zpolymorphize=on -Csymbol-mangling-version=v0\n \n fn foo(f: impl Fn()) {\n     // Move a non-copy type into `x` so that it implements `FnOnce`."}, {"sha": "27d59ec8899800cf9c3861eb734cfd2fed847f27", "filename": "src/test/ui/polymorphization/closure_in_upvar/other.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fpolymorphization%2Fclosure_in_upvar%2Fother.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fpolymorphization%2Fclosure_in_upvar%2Fother.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fclosure_in_upvar%2Fother.rs?ref=8f3238f898163f09726c3d2b2cc9bafb09da26f3", "patch": "@@ -1,5 +1,5 @@\n // build-pass\n-// compile-flags:-Zpolymorphize=on -Zsymbol-mangling-version=v0\n+// compile-flags:-Zpolymorphize=on -Csymbol-mangling-version=v0\n \n fn y_uses_f(f: impl Fn()) {\n     let x = |_: ()| ();"}, {"sha": "6277a902fa213c9d2fe10567a4d279f32bd1d6af", "filename": "src/test/ui/polymorphization/symbol-ambiguity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fpolymorphization%2Fsymbol-ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fpolymorphization%2Fsymbol-ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fsymbol-ambiguity.rs?ref=8f3238f898163f09726c3d2b2cc9bafb09da26f3", "patch": "@@ -1,5 +1,5 @@\n // build-pass\n-// compile-flags: -Zpolymorphize=on -Zsymbol-mangling-version=v0\n+// compile-flags: -Zpolymorphize=on -Csymbol-mangling-version=v0\n \n pub(crate) struct Foo<'a, I, E>(I, &'a E);\n "}, {"sha": "65a63262810feadb45b9da166693f60a4ce545e6", "filename": "src/test/ui/symbol-names/basic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.rs?ref=8f3238f898163f09726c3d2b2cc9bafb09da26f3", "patch": "@@ -1,7 +1,7 @@\n // build-fail\n // revisions: legacy v0\n-//[legacy]compile-flags: -Z symbol-mangling-version=legacy\n-    //[v0]compile-flags: -Z symbol-mangling-version=v0\n+//[legacy]compile-flags: -Z unstable-options -C symbol-mangling-version=legacy\n+    //[v0]compile-flags: -C symbol-mangling-version=v0\n \n #![feature(rustc_attrs)]\n "}, {"sha": "5c40c391a9e0b621bac86c75fb113e52d2280fd4", "filename": "src/test/ui/symbol-names/const-generics-demangling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.rs?ref=8f3238f898163f09726c3d2b2cc9bafb09da26f3", "patch": "@@ -1,5 +1,5 @@\n // build-fail\n-// compile-flags: -Z symbol-mangling-version=v0 --crate-name=c\n+// compile-flags: -C symbol-mangling-version=v0 --crate-name=c\n // normalize-stderr-test: \"c\\[.*?\\]\" -> \"c[HASH]\"\n #![feature(rustc_attrs)]\n "}, {"sha": "619b34f2559a80040db39929bdc65a21c5ad0c92", "filename": "src/test/ui/symbol-names/const-generics-str-demangling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-str-demangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-str-demangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-str-demangling.rs?ref=8f3238f898163f09726c3d2b2cc9bafb09da26f3", "patch": "@@ -1,5 +1,5 @@\n // build-fail\n-// compile-flags: -Z symbol-mangling-version=v0 --crate-name=c\n+// compile-flags: -C symbol-mangling-version=v0 --crate-name=c\n // normalize-stderr-test: \"c\\[.*?\\]\" -> \"c[HASH]\"\n #![feature(adt_const_params, rustc_attrs)]\n #![allow(incomplete_features)]"}, {"sha": "df09ba494a74f76ebaef9f2be76998e345d82103", "filename": "src/test/ui/symbol-names/const-generics-structural-demangling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.rs?ref=8f3238f898163f09726c3d2b2cc9bafb09da26f3", "patch": "@@ -1,5 +1,5 @@\n // build-fail\n-// compile-flags: -Z symbol-mangling-version=v0 --crate-name=c\n+// compile-flags: -C symbol-mangling-version=v0 --crate-name=c\n \n // NOTE(eddyb) we need `core` for `core::option::Option`, normalize away its\n // disambiguator hash, which can/should change (including between stage{1,2})."}, {"sha": "1242126e0cceee01cc897bf72e969b761c2b113e", "filename": "src/test/ui/symbol-names/const-generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics.rs?ref=8f3238f898163f09726c3d2b2cc9bafb09da26f3", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n // revisions: legacy v0\n-//[legacy]compile-flags: -Z symbol-mangling-version=legacy --crate-type=lib\n-//[v0]compile-flags: -Z symbol-mangling-version=v0 --crate-type=lib\n+//[legacy]compile-flags: -Z unstable-options -C symbol-mangling-version=legacy --crate-type=lib\n+//[v0]compile-flags: -C symbol-mangling-version=v0 --crate-type=lib\n \n // `char`\n pub struct Char<const F: char>;"}, {"sha": "86f0a8b0bef4dfc8c47c9d198c2aa7e1abde2336", "filename": "src/test/ui/symbol-names/impl1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs?ref=8f3238f898163f09726c3d2b2cc9bafb09da26f3", "patch": "@@ -1,7 +1,7 @@\n // build-fail\n // revisions: legacy v0\n-//[legacy]compile-flags: -Z symbol-mangling-version=legacy\n-    //[v0]compile-flags: -Z symbol-mangling-version=v0\n+//[legacy]compile-flags: -Z unstable-options -C symbol-mangling-version=legacy\n+    //[v0]compile-flags: -C symbol-mangling-version=v0\n //[legacy]normalize-stderr-test: \"h[\\w]{16}E?\\)\" -> \"<SYMBOL_HASH>)\"\n \n #![feature(auto_traits, rustc_attrs)]"}, {"sha": "ab0a3a7df1d15ec1ca717defcf8133e86387b940", "filename": "src/test/ui/symbol-names/issue-60925.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.rs?ref=8f3238f898163f09726c3d2b2cc9bafb09da26f3", "patch": "@@ -1,7 +1,7 @@\n // build-fail\n // revisions: legacy v0\n-//[legacy]compile-flags: -Z symbol-mangling-version=legacy\n-    //[v0]compile-flags: -Z symbol-mangling-version=v0\n+//[legacy]compile-flags: -Z unstable-options -C symbol-mangling-version=legacy\n+    //[v0]compile-flags: -C symbol-mangling-version=v0\n \n #![feature(rustc_attrs)]\n "}, {"sha": "4a1f5a21263dd309fc1a6cd7b5c111f1c59206bf", "filename": "src/test/ui/symbol-names/issue-75326.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.rs?ref=8f3238f898163f09726c3d2b2cc9bafb09da26f3", "patch": "@@ -1,7 +1,7 @@\n // build-fail\n // revisions: legacy v0\n-//[legacy]compile-flags: -Z symbol-mangling-version=legacy\n-//[v0]compile-flags: -Z symbol-mangling-version=v0\n+//[legacy]compile-flags: -Z unstable-options -C symbol-mangling-version=legacy\n+//[v0]compile-flags: -C symbol-mangling-version=v0\n //[legacy]normalize-stderr-test: \"h[\\w{16}]+\" -> \"SYMBOL_HASH\"\n \n #![feature(rustc_attrs)]"}, {"sha": "932057b659081e53602983322fb3b4bf00b5319e", "filename": "src/test/ui/symbol-names/issue-76365.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-76365.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-76365.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-76365.rs?ref=8f3238f898163f09726c3d2b2cc9bafb09da26f3", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n // revisions: legacy v0\n-//[legacy]compile-flags: -Z symbol-mangling-version=legacy --crate-type=lib\n-//[v0]compile-flags: -Z symbol-mangling-version=v0 --crate-type=lib\n+//[legacy]compile-flags: -Z unstable-options -C symbol-mangling-version=legacy --crate-type=lib\n+//[v0]compile-flags: -C symbol-mangling-version=v0 --crate-type=lib\n \n \n pub struct Bar<const F: bool>;"}, {"sha": "5bcbc08413fe10b83cf5c364bf2cc9cbc0e19823", "filename": "src/test/ui/symbol-names/trait-objects.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f3238f898163f09726c3d2b2cc9bafb09da26f3/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.rs?ref=8f3238f898163f09726c3d2b2cc9bafb09da26f3", "patch": "@@ -2,7 +2,7 @@\n \n // build-fail\n // revisions: v0\n-//[v0]compile-flags: -Z symbol-mangling-version=v0\n+//[v0]compile-flags: -C symbol-mangling-version=v0\n //[v0]normalize-stderr-test: \"core\\[.*?\\]\" -> \"core[HASH]\"\n \n #![feature(rustc_attrs)]"}]}