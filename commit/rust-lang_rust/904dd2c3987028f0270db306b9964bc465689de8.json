{"sha": "904dd2c3987028f0270db306b9964bc465689de8", "node_id": "C_kwDOAAsO6NoAKDkwNGRkMmMzOTg3MDI4ZjAyNzBkYjMwNmI5OTY0YmM0NjU2ODlkZTg", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-03-23T11:12:03Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-03-27T18:58:07Z"}, "message": "Bless tidy", "tree": {"sha": "f80a80251939c2406e322770e507b57f0765ef4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f80a80251939c2406e322770e507b57f0765ef4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/904dd2c3987028f0270db306b9964bc465689de8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/904dd2c3987028f0270db306b9964bc465689de8", "html_url": "https://github.com/rust-lang/rust/commit/904dd2c3987028f0270db306b9964bc465689de8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/904dd2c3987028f0270db306b9964bc465689de8/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8af42f695d493ed868098e3d1c02318f631998e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8af42f695d493ed868098e3d1c02318f631998e4", "html_url": "https://github.com/rust-lang/rust/commit/8af42f695d493ed868098e3d1c02318f631998e4"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "cb217be66547663af86c1a27f5421d08b3390392", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/904dd2c3987028f0270db306b9964bc465689de8/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/904dd2c3987028f0270db306b9964bc465689de8/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=904dd2c3987028f0270db306b9964bc465689de8", "patch": "@@ -227,7 +227,7 @@ impl UnstableReason {\n }\n \n /// Collects stability info from `stable`/`unstable`/`rustc_allowed_through_unstable_modules`\n-/// attributes in `attrs`.  Returns `None` if no stability attributes are found.\n+/// attributes in `attrs`. Returns `None` if no stability attributes are found.\n pub fn find_stability(\n     sess: &Session,\n     attrs: &[Attribute],\n@@ -281,7 +281,7 @@ pub fn find_stability(\n }\n \n /// Collects stability info from `rustc_const_stable`/`rustc_const_unstable`/`rustc_promotable`\n-/// attributes in `attrs`.  Returns `None` if no stability attributes are found.\n+/// attributes in `attrs`. Returns `None` if no stability attributes are found.\n pub fn find_const_stability(\n     sess: &Session,\n     attrs: &[Attribute],"}, {"sha": "69bb00f804d3cda155b50ba84fa908a47a86d604", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/904dd2c3987028f0270db306b9964bc465689de8/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/904dd2c3987028f0270db306b9964bc465689de8/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=904dd2c3987028f0270db306b9964bc465689de8", "patch": "@@ -1621,7 +1621,7 @@ impl<'a> Linker for AixLinker<'a> {\n         let path = tmpdir.join(\"list.exp\");\n         let res: io::Result<()> = try {\n             let mut f = BufWriter::new(File::create(&path)?);\n-            // TODO: use llvm-nm to generate export list.\n+            // FIXME: use llvm-nm to generate export list.\n             for symbol in symbols {\n                 debug!(\"  _{}\", symbol);\n                 writeln!(f, \"  {}\", symbol)?;"}, {"sha": "c05324a5a2ccbc5c472634cfceb8a4567821c9ce", "filename": "compiler/rustc_error_codes/src/error_codes/E0080.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/904dd2c3987028f0270db306b9964bc465689de8/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0080.md", "raw_url": "https://github.com/rust-lang/rust/raw/904dd2c3987028f0270db306b9964bc465689de8/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0080.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0080.md?ref=904dd2c3987028f0270db306b9964bc465689de8", "patch": "@@ -16,7 +16,8 @@ or causing an integer overflow are two ways to induce this error.\n Ensure that the expressions given can be evaluated as the desired integer type.\n \n See the [Discriminants] section of the Reference for more information about\n-setting custom integer types on enums using the [`repr` attribute][repr-attribute].\n+setting custom integer types on enums using the\n+[`repr` attribute][repr-attribute].\n \n [discriminants]: https://doc.rust-lang.org/reference/items/enumerations.html#discriminants\n [repr-attribute]: https://doc.rust-lang.org/reference/type-layout.html#representations"}, {"sha": "c8f73de95a214c74ba609cd1e6ce427bd6be5efe", "filename": "compiler/rustc_error_codes/src/error_codes/E0794.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/904dd2c3987028f0270db306b9964bc465689de8/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0794.md", "raw_url": "https://github.com/rust-lang/rust/raw/904dd2c3987028f0270db306b9964bc465689de8/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0794.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0794.md?ref=904dd2c3987028f0270db306b9964bc465689de8", "patch": "@@ -59,6 +59,6 @@ In the definition of `bar`, the lifetime parameter `'a` is late-bound, while\n where `'a` is universally quantified and `'b` is substituted by a specific\n lifetime. It is not allowed to explicitly specify early-bound lifetime\n arguments when late-bound lifetime parameters are present (as for `bar_fn2`,\n-see [issue #42868](https://github.com/rust-lang/rust/issues/42868)), although the\n-types that are constrained by early-bound parameters can be specified (as for\n-`bar_fn3`).\n+see [issue #42868](https://github.com/rust-lang/rust/issues/42868)), although\n+the types that are constrained by early-bound parameters can be specified (as\n+for `bar_fn3`)."}, {"sha": "7fff801b1692d81bab23ebdd99dfd018435dcebb", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/904dd2c3987028f0270db306b9964bc465689de8/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/904dd2c3987028f0270db306b9964bc465689de8/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=904dd2c3987028f0270db306b9964bc465689de8", "patch": "@@ -568,7 +568,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             BinOp::Shl | BinOp::Shr if self.check_overflow && ty.is_integral() => {\n                 // For an unsigned RHS, the shift is in-range for `rhs < bits`.\n                 // For a signed RHS, `IntToInt` cast to the equivalent unsigned\n-                // type and do that same comparison.  Because the type is the\n+                // type and do that same comparison. Because the type is the\n                 // same size, there's no negative shift amount that ends up\n                 // overlapping with valid ones, thus it catches negatives too.\n                 let (lhs_size, _) = ty.int_size_and_signed(self.tcx);"}, {"sha": "b55348b7889c520fcb1545708739e7e3004e2338", "filename": "src/doc/unstable-book/src/compiler-flags/sanitizer.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/904dd2c3987028f0270db306b9964bc465689de8/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/904dd2c3987028f0270db306b9964bc465689de8/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fsanitizer.md?ref=904dd2c3987028f0270db306b9964bc465689de8", "patch": "@@ -213,7 +213,7 @@ See the [Clang ControlFlowIntegrity documentation][clang-cfi] for more details.\n \n ## Example\n \n-```rust,ignore\n+```rust,ignore (making doc tests pass cross-platform is hard)\n #![feature(naked_functions)]\n \n use std::arch::asm;"}, {"sha": "9c36d0d71c4bccdca8f7aed5f7a46f109f3c777d", "filename": "tests/rustdoc/issue-108925.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/904dd2c3987028f0270db306b9964bc465689de8/tests%2Frustdoc%2Fissue-108925.rs", "raw_url": "https://github.com/rust-lang/rust/raw/904dd2c3987028f0270db306b9964bc465689de8/tests%2Frustdoc%2Fissue-108925.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-108925.rs?ref=904dd2c3987028f0270db306b9964bc465689de8", "patch": "@@ -8,4 +8,3 @@ pub enum MyThing {\n     #[doc(hidden)]\n     NotShown,\n }\n-"}, {"sha": "85345d65c4af42b94a2da0268736bccfdc385ecd", "filename": "tests/ui/const-generics/generic_const_exprs/typeid-equality-by-subtyping.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/904dd2c3987028f0270db306b9964bc465689de8/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ftypeid-equality-by-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/904dd2c3987028f0270db306b9964bc465689de8/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ftypeid-equality-by-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ftypeid-equality-by-subtyping.rs?ref=904dd2c3987028f0270db306b9964bc465689de8", "patch": "@@ -17,7 +17,7 @@ const fn to_usize<T: 'static>() -> usize {\n     match TypeId::of::<T>() {\n         WHAT_A_TYPE => 0,\n         _ => 1000,\n-    } \n+    }\n }\n impl<T: 'static> AssocCt for T {\n     const ASSOC: usize = to_usize::<T>();"}]}