{"sha": "f08b036cc78ca225a8d3e25fc138ed3a210c611f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwOGIwMzZjYzc4Y2EyMjVhOGQzZTI1ZmMxMzhlZDNhMjEwYzYxMWY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-14T16:34:09Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-21T18:56:20Z"}, "message": "Introduce `term-size` dependency and consider term width when trimming", "tree": {"sha": "9882551bfa7c739d43d1692b47a1dec71fc12c85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9882551bfa7c739d43d1692b47a1dec71fc12c85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f08b036cc78ca225a8d3e25fc138ed3a210c611f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f08b036cc78ca225a8d3e25fc138ed3a210c611f", "html_url": "https://github.com/rust-lang/rust/commit/f08b036cc78ca225a8d3e25fc138ed3a210c611f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f08b036cc78ca225a8d3e25fc138ed3a210c611f/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "266b878334cecce3a0636ddbb95318f7a5669f45", "url": "https://api.github.com/repos/rust-lang/rust/commits/266b878334cecce3a0636ddbb95318f7a5669f45", "html_url": "https://github.com/rust-lang/rust/commit/266b878334cecce3a0636ddbb95318f7a5669f45"}], "stats": {"total": 398, "additions": 277, "deletions": 121}, "files": [{"sha": "16baa7436cb816b6ce905c7f9c5d45f39c8c83e4", "filename": "Cargo.lock", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f08b036cc78ca225a8d3e25fc138ed3a210c611f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f08b036cc78ca225a8d3e25fc138ed3a210c611f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f08b036cc78ca225a8d3e25fc138ed3a210c611f", "patch": "@@ -3219,6 +3219,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"serialize\",\n  \"syntax_pos\",\n+ \"term_size\",\n  \"termcolor\",\n  \"unicode-width\",\n ]\n@@ -4090,6 +4091,17 @@ dependencies = [\n  \"winapi 0.3.6\",\n ]\n \n+[[package]]\n+name = \"term_size\"\n+version = \"0.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9e5b9a66db815dcfd2da92db471106457082577c3c278d4138ab3e3b4e189327\"\n+dependencies = [\n+ \"kernel32-sys\",\n+ \"libc\",\n+ \"winapi 0.2.8\",\n+]\n+\n [[package]]\n name = \"termcolor\"\n version = \"1.0.4\""}, {"sha": "1541845bb55f62f5a39a577e34e053967bee8d53", "filename": "src/librustc_errors/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Flibrustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Flibrustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2FCargo.toml?ref=f08b036cc78ca225a8d3e25fc138ed3a210c611f", "patch": "@@ -18,3 +18,4 @@ unicode-width = \"0.1.4\"\n atty = \"0.2\"\n termcolor = \"1.0\"\n annotate-snippets = \"0.6.1\"\n+term_size = \"0.3.1\""}, {"sha": "6bb151d19b32bbe2ab4d44aab345a6934ac65c66", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 159, "deletions": 93, "changes": 252, "blob_url": "https://github.com/rust-lang/rust/blob/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=f08b036cc78ca225a8d3e25fc138ed3a210c611f", "patch": "@@ -24,7 +24,7 @@ use rustc_data_structures::sync::Lrc;\n use std::borrow::Cow;\n use std::io::prelude::*;\n use std::io;\n-use std::cmp::{min, Reverse};\n+use std::cmp::{min, max, Reverse};\n use std::path::Path;\n use termcolor::{StandardStream, ColorChoice, ColorSpec, BufferWriter, Ansi};\n use termcolor::{WriteColor, Color, Buffer};\n@@ -59,13 +59,20 @@ impl HumanReadableErrorType {\n \n #[derive(Clone, Copy, Debug)]\n struct Margin {\n+    /// The available whitespace in the left that can be consumed when centering.\n     pub whitespace_left: usize,\n+    /// The column of the beginning of left-most span.\n     pub span_left: usize,\n+    /// The column of the end of right-most span.\n     pub span_right: usize,\n-    pub line_len: usize,\n+    /// The beginning of the line to be displayed.\n     pub computed_left: usize,\n+    /// The end of the line to be displayed.\n     pub computed_right: usize,\n+    /// The current width of the terminal. 140 by default and in tests.\n     pub column_width: usize,\n+    /// The end column of a span label, including the span. Doesn't account for labels not in the\n+    /// same line as the span.\n     pub label_right: usize,\n }\n \n@@ -75,59 +82,92 @@ impl Margin {\n         span_left: usize,\n         span_right: usize,\n         label_right: usize,\n+        column_width: usize,\n+        max_line_len: usize,\n     ) -> Self {\n-        Margin {\n-            whitespace_left,\n-            span_left,\n-            span_right,\n-            line_len: 0,\n+        // The 6 is padding to give a bit of room for `...` when displaying:\n+        // ```\n+        // error: message\n+        //   --> file.rs:16:58\n+        //    |\n+        // 16 | ... fn foo(self) -> Self::Bar {\n+        //    |                     ^^^^^^^^^\n+        // ```\n+\n+        let mut m = Margin {\n+            whitespace_left: if whitespace_left >= 6 { whitespace_left - 6 } else { 0 },\n+            span_left: if span_left >= 6 { span_left - 6 } else { 0 },\n+            span_right: span_right + 6,\n             computed_left: 0,\n             computed_right: 0,\n-            column_width: 140,\n-            label_right,\n-        }\n+            column_width,\n+            label_right: label_right + 6,\n+        };\n+        m.compute(max_line_len);\n+        m\n     }\n \n     fn was_cut_left(&self) -> bool {\n         self.computed_left > 0\n     }\n \n-    fn was_cut_right(&self) -> bool {\n-        self.computed_right < self.line_len\n+    fn was_cut_right(&self, line_len: usize) -> bool {\n+        let right = if self.computed_right == self.span_right ||\n+            self.computed_right == self.label_right\n+        {\n+            // Account for the \"...\" padding given above. Otherwise we end up with code lines that\n+            // do fit but end in \"...\" as if they were trimmed.\n+            self.computed_right - 6\n+        } else {\n+            self.computed_right\n+        };\n+        right < line_len && line_len > self.computed_left + self.column_width\n     }\n \n-    fn compute(&mut self) {\n+    fn compute(&mut self, max_line_len: usize) {\n+        // When there's a lot of whitespace (>20), we want to trim it as it is useless.\n         self.computed_left = if self.whitespace_left > 20 {\n             self.whitespace_left - 16 // We want some padding.\n         } else {\n             0\n         };\n-        self.computed_right = self.column_width + self.computed_left;\n+        // We want to show as much as possible, max_line_len is the right-most boundary for the\n+        // relevant code.\n+        self.computed_right = max(max_line_len, self.computed_left);\n \n         if self.computed_right - self.computed_left > self.column_width {\n             // Trimming only whitespace isn't enough, let's get craftier.\n             if self.label_right - self.whitespace_left <= self.column_width {\n+                // Attempt to fit the code window only trimming whitespace.\n                 self.computed_left = self.whitespace_left;\n                 self.computed_right = self.computed_left + self.column_width;\n-            } else if self.label_right - self.span_left - 20 <= self.column_width {\n-                self.computed_left = self.span_left - 20;\n-                self.computed_right = self.computed_left + self.column_width;\n             } else if self.label_right - self.span_left <= self.column_width {\n+                // Attempt to fit the code window considering only the spans and labels.\n                 self.computed_left = self.span_left;\n                 self.computed_right = self.computed_left + self.column_width;\n             } else if self.span_right - self.span_left <= self.column_width {\n+                // Attempt to fit the code window considering the spans and labels plus padding.\n                 self.computed_left = self.span_left;\n                 self.computed_right = self.computed_left + self.column_width;\n-            } else { // mostly give up but still don't show the full line\n+            } else { // Mostly give up but still don't show the full line.\n                 self.computed_left = self.span_left;\n                 self.computed_right = self.span_right;\n             }\n         }\n-        self.computed_left = std::cmp::min(self.computed_left, self.line_len);\n-        if self.computed_right > self.line_len {\n-            self.computed_right = self.line_len;\n+    }\n+\n+    fn left(&self, line_len: usize) -> usize {\n+        min(self.computed_left, line_len)\n+    }\n+\n+    fn right(&self, line_len: usize) -> usize {\n+        if max(line_len, self.computed_left) - self.computed_left <= self.column_width {\n+            line_len\n+        } else if self.computed_right > line_len {\n+            line_len\n+        } else {\n+            self.computed_right\n         }\n-        self.computed_right = std::cmp::min(self.computed_right, self.line_len);\n     }\n }\n \n@@ -308,14 +348,50 @@ impl EmitterWriter {\n         }\n     }\n \n+    fn draw_line(\n+        &self,\n+        buffer: &mut StyledBuffer,\n+        source_string: &str,\n+        line_index: usize,\n+        line_offset: usize,\n+        width_offset: usize,\n+        code_offset: usize,\n+        margin: Margin,\n+    ) {\n+        let line_len = source_string.len();\n+        // Create the source line we will highlight.\n+        buffer.puts(\n+            line_offset,\n+            code_offset,\n+            // On long lines, we strip the source line\n+            &source_string[margin.left(line_len)..margin.right(line_len)],\n+            Style::Quotation,\n+        );\n+        if margin.was_cut_left() { // We have stripped some code/whitespace from the beginning, make it clear.\n+            buffer.puts(line_offset, code_offset, \"...\", Style::LineNumber);\n+        }\n+        if margin.was_cut_right(line_len) {\n+            // We have stripped some code after the right-most span end, make it clear we did so.\n+            buffer.puts(\n+                line_offset,\n+                margin.right(line_len) - margin.left(line_len) + code_offset - 3,\n+                \"...\",\n+                Style::LineNumber,\n+            );\n+        }\n+        buffer.puts(line_offset, 0, &self.maybe_anonymized(line_index), Style::LineNumber);\n+\n+        draw_col_separator(buffer, line_offset, width_offset - 2);\n+    }\n+\n     fn render_source_line(\n         &self,\n         buffer: &mut StyledBuffer,\n         file: Lrc<SourceFile>,\n         line: &Line,\n         width_offset: usize,\n         code_offset: usize,\n-        mut margin: Margin,\n+        margin: Margin,\n     ) -> Vec<(usize, Style)> {\n         // Draw:\n         //\n@@ -342,31 +418,15 @@ impl EmitterWriter {\n \n         let line_offset = buffer.num_lines();\n \n-        margin.line_len = source_string.len();\n-        margin.compute();\n-        // Create the source line we will highlight.\n-        buffer.puts(\n+        self.draw_line(\n+            buffer,\n+            &source_string,\n+            line.line_index,\n             line_offset,\n+            width_offset,\n             code_offset,\n-            // On long lines, we strip the source line\n-            &source_string[margin.computed_left..margin.computed_right],\n-            Style::Quotation,\n+            margin,\n         );\n-        if margin.was_cut_left() { // We have stripped some code/whitespace from the beginning, make it clear.\n-            buffer.puts(line_offset, code_offset, \"...\", Style::LineNumber);\n-        }\n-        if margin.was_cut_right() {\n-            // We have stripped some code after the right-most span end, make it clear we did so.\n-            buffer.puts(\n-                line_offset,\n-                margin.computed_right - margin.computed_left + code_offset,\n-                \"...\",\n-                Style::LineNumber,\n-            );\n-        }\n-        buffer.puts(line_offset, 0, &self.maybe_anonymized(line.line_index), Style::LineNumber);\n-\n-        draw_col_separator(buffer, line_offset, width_offset - 2);\n \n         // Special case when there's only one annotation involved, it is the start of a multiline\n         // span and there's no text at the beginning of the code line. Instead of doing the whole\n@@ -614,19 +674,23 @@ impl EmitterWriter {\n             match annotation.annotation_type {\n                 AnnotationType::MultilineStart(depth) |\n                 AnnotationType::MultilineEnd(depth) => {\n-                    draw_range(buffer,\n-                               '_',\n-                               line_offset + pos,\n-                               width_offset + depth,\n-                               code_offset + annotation.start_col - margin.computed_left,\n-                               style);\n+                    draw_range(\n+                        buffer,\n+                        '_',\n+                        line_offset + pos,\n+                        width_offset + depth,\n+                        code_offset + annotation.start_col - margin.computed_left,\n+                        style,\n+                    );\n                 }\n                 _ if self.teach => {\n-                    buffer.set_style_range(line_offset,\n-                                           code_offset + annotation.start_col - margin.computed_left,\n-                                           code_offset + annotation.end_col - margin.computed_left,\n-                                           style,\n-                                           annotation.is_primary);\n+                    buffer.set_style_range(\n+                        line_offset,\n+                        code_offset + annotation.start_col - margin.computed_left,\n+                        code_offset + annotation.end_col - margin.computed_left,\n+                        style,\n+                        annotation.is_primary,\n+                    );\n                 }\n                 _ => {}\n             }\n@@ -1159,7 +1223,7 @@ impl EmitterWriter {\n                             .take_while(|c| c.is_whitespace())\n                             .count();\n                         if source_string.chars().any(|c| !c.is_whitespace()) {\n-                            whitespace_margin = std::cmp::min(\n+                            whitespace_margin = min(\n                                 whitespace_margin,\n                                 leading_whitespace,\n                             );\n@@ -1174,8 +1238,8 @@ impl EmitterWriter {\n                 let mut span_left_margin = std::usize::MAX;\n                 for line in &annotated_file.lines {\n                     for ann in &line.annotations {\n-                        span_left_margin = std::cmp::min(span_left_margin, ann.start_col);\n-                        span_left_margin = std::cmp::min(span_left_margin, ann.end_col);\n+                        span_left_margin = min(span_left_margin, ann.start_col);\n+                        span_left_margin = min(span_left_margin, ann.end_col);\n                     }\n                 }\n                 if span_left_margin == std::usize::MAX {\n@@ -1185,35 +1249,49 @@ impl EmitterWriter {\n                 // Right-most column any visible span points at.\n                 let mut span_right_margin = 0;\n                 let mut label_right_margin = 0;\n+                let mut max_line_len = 0;\n                 for line in &annotated_file.lines {\n+                    max_line_len = max(\n+                        max_line_len,\n+                        annotated_file.file.get_line(line.line_index - 1).map(|s| s.len()).unwrap_or(0),\n+                    );\n                     for ann in &line.annotations {\n-                        span_right_margin = std::cmp::max(span_right_margin, ann.start_col);\n-                        span_right_margin = std::cmp::max(span_right_margin, ann.end_col);\n-                        label_right_margin = std::cmp::max(\n+                        span_right_margin = max(span_right_margin, ann.start_col);\n+                        span_right_margin = max(span_right_margin, ann.end_col);\n+                        label_right_margin = max(\n                             label_right_margin,\n                             // TODO: account for labels not in the same line\n                             ann.end_col + ann.label.as_ref().map(|l| l.len() + 1).unwrap_or(0),\n                         );\n                     }\n                 }\n+\n+                let width_offset = 3 + max_line_num_len;\n+                let code_offset = if annotated_file.multiline_depth == 0 {\n+                    width_offset\n+                } else {\n+                    width_offset + annotated_file.multiline_depth + 1\n+                };\n+\n+                let column_width = if self.ui_testing {\n+                    140\n+                } else {\n+                    term_size::dimensions().map(|(w, _)| w - code_offset).unwrap_or(140)\n+                };\n+\n                 let margin = Margin::new(\n                     whitespace_margin,\n                     span_left_margin,\n                     span_right_margin,\n                     label_right_margin,\n+                    column_width,\n+                    max_line_len,\n                 );\n \n                 // Next, output the annotate source for this file\n                 for line_idx in 0..annotated_file.lines.len() {\n                     let previous_buffer_line = buffer.num_lines();\n \n-                    let width_offset = 3 + max_line_num_len;\n-                    let code_offset = if annotated_file.multiline_depth == 0 {\n-                        width_offset\n-                    } else {\n-                        width_offset + annotated_file.multiline_depth + 1\n-                    };\n-\n                     let depths = self.render_source_line(\n                         &mut buffer,\n                         annotated_file.file.clone(),\n@@ -1268,36 +1346,24 @@ impl EmitterWriter {\n \n                             let last_buffer_line_num = buffer.num_lines();\n \n-                            buffer.puts(\n-                                last_buffer_line_num,\n-                                0,\n-                                &self.maybe_anonymized(\n-                                    annotated_file.lines[line_idx + 1].line_index - 1,\n-                                ),\n-                                Style::LineNumber,\n-                            );\n-                            draw_col_separator(\n+                            self.draw_line(\n                                 &mut buffer,\n+                                &unannotated_line,\n+                                annotated_file.lines[line_idx + 1].line_index - 1,\n                                 last_buffer_line_num,\n-                                1 + max_line_num_len,\n-                            );\n-\n-                            let mut margin = margin;\n-                            margin.line_len = unannotated_line.len();\n-                            margin.compute();\n-                            buffer.puts(\n-                                last_buffer_line_num,\n+                                width_offset,\n                                 code_offset,\n-                                &unannotated_line[margin.computed_left..margin.computed_right],\n-                                Style::Quotation,\n+                                margin,\n                             );\n \n                             for (depth, style) in &multilines {\n-                                draw_multiline_line(&mut buffer,\n-                                                    last_buffer_line_num,\n-                                                    width_offset,\n-                                                    *depth,\n-                                                    *style);\n+                                draw_multiline_line(\n+                                    &mut buffer,\n+                                    last_buffer_line_num,\n+                                    width_offset,\n+                                    *depth,\n+                                    *style,\n+                                );\n                             }\n                         }\n                     }"}, {"sha": "55523bad6c5076d9020534e0eb9de3471308126f", "filename": "src/test/ui/inline-asm-bad-operand.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Ftest%2Fui%2Finline-asm-bad-operand.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Ftest%2Fui%2Finline-asm-bad-operand.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-asm-bad-operand.stderr?ref=f08b036cc78ca225a8d3e25fc138ed3a210c611f", "patch": "@@ -37,8 +37,8 @@ LL |         asm!(\"mov sp, $0\"::\"r\"(addr),\n error[E0669]: invalid value for constraint in inline assembly\n   --> $DIR/inline-asm-bad-operand.rs:56:32\n    |\n-LL | ...             \"r\"(\"hello e0669\"));\n-   |                     ^^^^^^^^^^^^^\n+LL | ...                   \"r\"(\"hello e0669\"));\n+   |                           ^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n "}, {"sha": "a0b34d220c8d930f1e44f94580f02a8d8b00086c", "filename": "src/test/ui/lint/issue-47390-unused-variable-in-struct-pattern.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr?ref=f08b036cc78ca225a8d3e25fc138ed3a210c611f", "patch": "@@ -38,8 +38,8 @@ LL |     if let SoulHistory { corridors_of_light,\n warning: variable `hours_are_suns` is assigned to, but never used\n   --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:38:30\n    |\n-LL | ...             mut hours_are_suns,\n-   |                     ^^^^^^^^^^^^^^\n+LL |                          mut hours_are_suns,\n+   |                              ^^^^^^^^^^^^^^\n    |\n    = note: consider using `_hours_are_suns` instead\n "}, {"sha": "62380135b333b029475fd057433ab0074960ba74", "filename": "src/test/ui/lint/lint-stability-deprecated.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.stderr?ref=f08b036cc78ca225a8d3e25fc138ed3a210c611f", "patch": "@@ -67,14 +67,14 @@ LL |         deprecated_unstable_text();\n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable_text': text\n   --> $DIR/lint-stability-deprecated.rs:57:9\n    |\n-LL |         Trait::trait_deprecated_unstable_text(&foo);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | ...   Trait::trait_deprecated_unstable_text(&foo);\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable_text': text\n   --> $DIR/lint-stability-deprecated.rs:59:9\n    |\n-LL |         <Foo as Trait>::trait_deprecated_unstable_text(&foo);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | ...   <Foo as Trait>::trait_deprecated_unstable_text(&foo);\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::DeprecatedStruct': text\n   --> $DIR/lint-stability-deprecated.rs:106:17\n@@ -181,14 +181,14 @@ LL |         <Foo as Trait>::trait_deprecated_unstable(&foo);\n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable_text': text\n   --> $DIR/lint-stability-deprecated.rs:155:9\n    |\n-LL |         Trait::trait_deprecated_unstable_text(&foo);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | ...   Trait::trait_deprecated_unstable_text(&foo);\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable_text': text\n   --> $DIR/lint-stability-deprecated.rs:157:9\n    |\n-LL |         <Foo as Trait>::trait_deprecated_unstable_text(&foo);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | ...   <Foo as Trait>::trait_deprecated_unstable_text(&foo);\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::DeprecatedTrait': text\n   --> $DIR/lint-stability-deprecated.rs:185:10\n@@ -421,20 +421,20 @@ LL |         <Foo>::trait_deprecated_unstable(&foo);\n warning: use of deprecated item 'lint_stability::MethodTester::method_deprecated_unstable_text': text\n   --> $DIR/lint-stability-deprecated.rs:53:13\n    |\n-LL |         foo.method_deprecated_unstable_text();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | ...   foo.method_deprecated_unstable_text();\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::MethodTester::method_deprecated_unstable_text': text\n   --> $DIR/lint-stability-deprecated.rs:54:9\n    |\n-LL |         Foo::method_deprecated_unstable_text(&foo);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | ...   Foo::method_deprecated_unstable_text(&foo);\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::MethodTester::method_deprecated_unstable_text': text\n   --> $DIR/lint-stability-deprecated.rs:55:9\n    |\n-LL |         <Foo>::method_deprecated_unstable_text(&foo);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | ...   <Foo>::method_deprecated_unstable_text(&foo);\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable_text': text\n   --> $DIR/lint-stability-deprecated.rs:56:13\n@@ -445,8 +445,8 @@ LL |         foo.trait_deprecated_unstable_text();\n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable_text': text\n   --> $DIR/lint-stability-deprecated.rs:58:9\n    |\n-LL |         <Foo>::trait_deprecated_unstable_text(&foo);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | ...   <Foo>::trait_deprecated_unstable_text(&foo);\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::DeprecatedStruct::i': text\n   --> $DIR/lint-stability-deprecated.rs:107:13\n@@ -505,8 +505,8 @@ LL |         foo.trait_deprecated_unstable_text();\n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated_unstable_text': text\n   --> $DIR/lint-stability-deprecated.rs:156:9\n    |\n-LL |         <Foo>::trait_deprecated_unstable_text(&foo);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | ...   <Foo>::trait_deprecated_unstable_text(&foo);\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'lint_stability::Trait::trait_deprecated': text\n   --> $DIR/lint-stability-deprecated.rs:173:13"}, {"sha": "3ab5f66a0c3f62d89ab0a0bcc46fa73bb099b059", "filename": "src/test/ui/methods/method-missing-call.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Ftest%2Fui%2Fmethods%2Fmethod-missing-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Ftest%2Fui%2Fmethods%2Fmethod-missing-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-missing-call.stderr?ref=f08b036cc78ca225a8d3e25fc138ed3a210c611f", "patch": "@@ -1,8 +1,8 @@\n error[E0615]: attempted to take value of method `get_x` on type `Point`\n   --> $DIR/method-missing-call.rs:22:26\n    |\n-LL | ...             .get_x;\n-   |                  ^^^^^ help: use parentheses to call the method: `get_x()`\n+LL |                         .get_x;\n+   |                          ^^^^^ help: use parentheses to call the method: `get_x()`\n \n error[E0615]: attempted to take value of method `filter_map` on type `std::iter::Filter<std::iter::Map<std::slice::Iter<'_, {integer}>, [closure@$DIR/method-missing-call.rs:27:20: 27:25]>, [closure@$DIR/method-missing-call.rs:28:23: 28:35]>`\n   --> $DIR/method-missing-call.rs:29:16"}, {"sha": "5f6a48a35f3683f7fff41efda7b6fab478d3e913", "filename": "src/test/ui/regions/regions-name-undeclared.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-name-undeclared.stderr?ref=f08b036cc78ca225a8d3e25fc138ed3a210c611f", "patch": "@@ -49,14 +49,14 @@ LL | fn fn_types(a: &'a isize,\n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/regions-name-undeclared.rs:42:36\n    |\n-LL | ...             &'b isize,\n-   |                  ^^ undeclared lifetime\n+LL | ...                   &'b isize,\n+   |                        ^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/regions-name-undeclared.rs:45:36\n    |\n-LL | ...             &'b isize)>,\n-   |                  ^^ undeclared lifetime\n+LL | ...                   &'b isize)>,\n+   |                        ^^ undeclared lifetime\n \n error[E0261]: use of undeclared lifetime name `'a`\n   --> $DIR/regions-name-undeclared.rs:46:17"}, {"sha": "31e979702ffd4e896c17734c7d70965ac793242e", "filename": "src/test/ui/terminal-width/non-whitespace-trimming-2.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-2.rs?ref=f08b036cc78ca225a8d3e25fc138ed3a210c611f", "patch": "@@ -0,0 +1,6 @@\n+// ignore-tidy-length \n+\n+fn main() {\n+    let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = 42; let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = ();\n+//~^ ERROR mismatched types\n+}"}, {"sha": "3821d86e23a84ca34e535d6be0254ff2ebb644f5", "filename": "src/test/ui/terminal-width/non-whitespace-trimming-2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming-2.stderr?ref=f08b036cc78ca225a8d3e25fc138ed3a210c611f", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/non-whitespace-trimming-2.rs:4:241\n+   |\n+LL | ... = 42; let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = ();...\n+   |       ^^ expected (), found integer\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "791e8a592d1abde8f72339235e87996e1044a227", "filename": "src/test/ui/terminal-width/non-whitespace-trimming.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming.rs?ref=f08b036cc78ca225a8d3e25fc138ed3a210c611f", "patch": "@@ -0,0 +1,6 @@\n+// ignore-tidy-length \n+\n+fn main() {\n+    let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = 42; let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = ();\n+//~^ ERROR mismatched types\n+}"}, {"sha": "36e6d8045a8b68d3c0959dfffa093fe45f3909e5", "filename": "src/test/ui/terminal-width/non-whitespace-trimming.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-whitespace-trimming.stderr?ref=f08b036cc78ca225a8d3e25fc138ed3a210c611f", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/non-whitespace-trimming.rs:4:241\n+   |\n+LL | ... = 42; let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = (); let _: () = ();\n+   |       ^^ expected (), found integer\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "bc02c685dc9509b3208ea7fa8e471e8079ddcd0d", "filename": "src/test/ui/terminal-width/whitespace-trimming-2.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming-2.rs?ref=f08b036cc78ca225a8d3e25fc138ed3a210c611f", "patch": "@@ -0,0 +1,8 @@\n+// ignore-tidy-length \n+\n+fn foo() -> usize {\n+                                                                                                                                                                                          ()\n+//~^ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "38df5a9e9a01f4b4739e2cf1205e49b0f1f3699d", "filename": "src/test/ui/terminal-width/whitespace-trimming-2.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming-2.stderr?ref=f08b036cc78ca225a8d3e25fc138ed3a210c611f", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/whitespace-trimming-2.rs:4:187\n+   |\n+LL | ...-> usize {\n+   |       ----- expected `usize` because of return type\n+LL | ...                                                                                                                                                                                 ()\n+   |                                                                                                                                                                                     ^^ expected usize, found ()\n+   |\n+   = note: expected type `usize`\n+              found type `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "427ed1e72e48ae6776339332ed81fe3da614ce35", "filename": "src/test/ui/terminal-width/whitespace-trimming.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming.rs?ref=f08b036cc78ca225a8d3e25fc138ed3a210c611f", "patch": "@@ -0,0 +1,6 @@\n+// ignore-tidy-length \n+\n+fn main() {\n+                                                                                                                                                                                    let _: () = 42;\n+//~^ ERROR mismatched types\n+}"}, {"sha": "45a804b9f6a46b97866bb51cf096c43be2aa0b21", "filename": "src/test/ui/terminal-width/whitespace-trimming.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fwhitespace-trimming.stderr?ref=f08b036cc78ca225a8d3e25fc138ed3a210c611f", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/whitespace-trimming.rs:4:193\n+   |\n+LL | ...                   let _: () = 42;\n+   |                                   ^^ expected (), found integer\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "92f60b2ddab73afabd29731cf194d0cd5f1ff827", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08b036cc78ca225a8d3e25fc138ed3a210c611f/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=f08b036cc78ca225a8d3e25fc138ed3a210c611f", "patch": "@@ -159,6 +159,7 @@ const WHITELIST: &[Crate<'_>] = &[\n     Crate(\"termcolor\"),\n     Crate(\"terminon\"),\n     Crate(\"termion\"),\n+    Crate(\"term_size\"),\n     Crate(\"thread_local\"),\n     Crate(\"ucd-util\"),\n     Crate(\"unicode-width\"),"}]}