{"sha": "a918d8b55bd7ec9bbec0c01c1362e842342d7729", "node_id": "C_kwDOAAsO6NoAKGE5MThkOGI1NWJkN2VjOWJiZWMwYzAxYzEzNjJlODQyMzQyZDc3Mjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-15T03:56:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-15T03:56:33Z"}, "message": "Auto merge of #94584 - pnkfelix:inject-use-suggestion-sites, r=ekuber\n\nMore robust fallback for `use` suggestion\n\nOur old way to suggest where to add `use`s would first look for pre-existing `use`s in the relevant crate/module, and if there are *no* uses, it would fallback on trying to use another item as the basis for the suggestion.\n\nBut this was fragile, as illustrated in issue #87613\n\nThis PR instead identifies span of the first token after any inner attributes, and uses *that* as the fallback for the `use` suggestion.\n\nFix #87613", "tree": {"sha": "344d4d73c9e9be6631956f25ce229216d19b33df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/344d4d73c9e9be6631956f25ce229216d19b33df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a918d8b55bd7ec9bbec0c01c1362e842342d7729", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a918d8b55bd7ec9bbec0c01c1362e842342d7729", "html_url": "https://github.com/rust-lang/rust/commit/a918d8b55bd7ec9bbec0c01c1362e842342d7729", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a918d8b55bd7ec9bbec0c01c1362e842342d7729/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a2dae6d25bb84b56842e0423836210d81a6c402", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a2dae6d25bb84b56842e0423836210d81a6c402", "html_url": "https://github.com/rust-lang/rust/commit/6a2dae6d25bb84b56842e0423836210d81a6c402"}, {"sha": "003eaf8fe270cb8f6915ed03ad23f4af0212d607", "url": "https://api.github.com/repos/rust-lang/rust/commits/003eaf8fe270cb8f6915ed03ad23f4af0212d607", "html_url": "https://github.com/rust-lang/rust/commit/003eaf8fe270cb8f6915ed03ad23f4af0212d607"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "64d96a5c6a6e4c7ef3186209e2eceefe2748f80b", "filename": "src/modules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a918d8b55bd7ec9bbec0c01c1362e842342d7729/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a918d8b55bd7ec9bbec0c01c1362e842342d7729/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=a918d8b55bd7ec9bbec0c01c1362e842342d7729", "patch": "@@ -124,7 +124,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n         mut self,\n         krate: &'ast ast::Crate,\n     ) -> Result<FileModMap<'ast>, ModuleResolutionError> {\n-        let root_filename = self.parse_sess.span_to_filename(krate.span);\n+        let root_filename = self.parse_sess.span_to_filename(krate.spans.inner_span);\n         self.directory.path = match root_filename {\n             FileName::Real(ref p) => p.parent().unwrap_or(Path::new(\"\")).to_path_buf(),\n             _ => PathBuf::new(),\n@@ -135,7 +135,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n             self.visit_mod_from_ast(&krate.items)?;\n         }\n \n-        let snippet_provider = self.parse_sess.snippet_provider(krate.span);\n+        let snippet_provider = self.parse_sess.snippet_provider(krate.spans.inner_span);\n \n         self.file_map.insert(\n             root_filename,"}, {"sha": "268c72649a65a9c93155429dd76e71facc761f2c", "filename": "src/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a918d8b55bd7ec9bbec0c01c1362e842342d7729/src%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a918d8b55bd7ec9bbec0c01c1362e842342d7729/src%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparse%2Fparser.rs?ref=a918d8b55bd7ec9bbec0c01c1362e842342d7729", "patch": "@@ -113,7 +113,7 @@ impl<'a> Parser<'a> {\n         let result = catch_unwind(AssertUnwindSafe(|| {\n             let mut parser = new_parser_from_file(sess.inner(), path, Some(span));\n             match parser.parse_mod(&TokenKind::Eof) {\n-                Ok(result) => Some(result),\n+                Ok((a, i, spans)) => Some((a, i, spans.inner_span)),\n                 Err(mut e) => {\n                     e.emit();\n                     if sess.can_reset_errors() {"}, {"sha": "3ebfa551d1cbc2e17ca5eac859328fdddb8e3421", "filename": "src/visitor.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a918d8b55bd7ec9bbec0c01c1362e842342d7729/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a918d8b55bd7ec9bbec0c01c1362e842342d7729/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=a918d8b55bd7ec9bbec0c01c1362e842342d7729", "patch": "@@ -915,7 +915,11 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         let ident_str = rewrite_ident(&self.get_context(), ident).to_owned();\n         self.push_str(&ident_str);\n \n-        if let ast::ModKind::Loaded(ref items, ast::Inline::Yes, inner_span) = mod_kind {\n+        if let ast::ModKind::Loaded(ref items, ast::Inline::Yes, ref spans) = mod_kind {\n+            let ast::ModSpans {\n+                inner_span,\n+                inject_use_span: _,\n+            } = *spans;\n             match self.config.brace_style() {\n                 BraceStyle::AlwaysNextLine => {\n                     let indent_str = self.block_indent.to_string_with_newline(self.config);"}]}