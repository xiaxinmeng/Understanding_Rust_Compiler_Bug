{"sha": "f3df50f67f2aa6dbdc3e4c35d6eb2ba8e6b37eed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZGY1MGY2N2YyYWE2ZGJkYzNlNGMzNWQ2ZWIyYmE4ZTZiMzdlZWQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-20T23:33:59Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-21T00:50:46Z"}, "message": "Parse and report obsolete fixed-length vector syntax", "tree": {"sha": "3217f87f731e90da0628f30171777d06204ba913", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3217f87f731e90da0628f30171777d06204ba913"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3df50f67f2aa6dbdc3e4c35d6eb2ba8e6b37eed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3df50f67f2aa6dbdc3e4c35d6eb2ba8e6b37eed", "html_url": "https://github.com/rust-lang/rust/commit/f3df50f67f2aa6dbdc3e4c35d6eb2ba8e6b37eed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3df50f67f2aa6dbdc3e4c35d6eb2ba8e6b37eed/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41c37d9d0f4bd8ee7f711d47d93e08e5687de3b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/41c37d9d0f4bd8ee7f711d47d93e08e5687de3b4", "html_url": "https://github.com/rust-lang/rust/commit/41c37d9d0f4bd8ee7f711d47d93e08e5687de3b4"}], "stats": {"total": 91, "additions": 88, "deletions": 3}, "files": [{"sha": "1f607d849d9653cdcf4df1115865e7b31b15bd2d", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/f3df50f67f2aa6dbdc3e4c35d6eb2ba8e6b37eed/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3df50f67f2aa6dbdc3e4c35d6eb2ba8e6b37eed/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=f3df50f67f2aa6dbdc3e4c35d6eb2ba8e6b37eed", "patch": "@@ -23,7 +23,8 @@ pub enum ObsoleteSyntax {\n     ObsoleteClassTraits,\n     ObsoletePrivSection,\n     ObsoleteModeInFnType,\n-    ObsoleteByMutRefMode\n+    ObsoleteByMutRefMode,\n+    ObsoleteFixedLengthVec,\n }\n \n impl ObsoleteSyntax : cmp::Eq {\n@@ -99,6 +100,11 @@ impl Parser : ObsoleteReporter {\n                 \"by-mutable-reference mode\",\n                 \"Declare an argument of type &mut T instead\"\n             ),\n+            ObsoleteFixedLengthVec => (\n+                \"fixed-length vector\",\n+                \"Fixed-length types are now written `[T * N]`, and instances \\\n+                 are type-inferred\"\n+            )\n         };\n \n         self.report(sp, kind, kind_str, desc);\n@@ -183,5 +189,66 @@ impl Parser : ObsoleteReporter {\n             false\n         }\n     }\n+\n+    fn try_parse_obsolete_fixed_vstore() -> Option<Option<uint>> {\n+        if self.token == token::BINOP(token::SLASH) {\n+            self.bump();\n+            match copy self.token {\n+                token::UNDERSCORE => {\n+                    self.obsolete(copy self.last_span,\n+                                  ObsoleteFixedLengthVec);\n+                    self.bump(); Some(None)\n+                }\n+                token::LIT_INT_UNSUFFIXED(i) if i >= 0i64 => {\n+                    self.obsolete(copy self.last_span,\n+                                  ObsoleteFixedLengthVec);\n+                    self.bump(); Some(Some(i as uint))\n+                }\n+                _ => None\n+            }\n+        } else {\n+            None\n+        }\n+    }\n+\n+    fn try_convert_ty_to_obsolete_fixed_length_vstore(sp: span, t: ast::ty_)\n+        -> ast::ty_ {\n+        match self.try_parse_obsolete_fixed_vstore() {\n+            // Consider a fixed length vstore suffix (/N or /_)\n+            None => t,\n+            Some(v) => {\n+                ast::ty_fixed_length(\n+                    @{id: self.get_id(), node: t, span: sp}, v)\n+            }\n+        }\n+    }\n+\n+    fn try_convert_expr_to_obsolete_fixed_length_vstore(\n+        lo: uint, hi: uint, ex: ast::expr_\n+    ) -> (uint, ast::expr_) {\n+\n+        let mut hi = hi;\n+        let mut ex = ex;\n+\n+        // Vstore is legal following expr_lit(lit_str(...)) and expr_vec(...)\n+        // only.\n+        match ex {\n+            ast::expr_lit(@{node: ast::lit_str(_), span: _}) |\n+            ast::expr_vec(_, _)  => {\n+                match self.try_parse_obsolete_fixed_vstore() {\n+                    None => (),\n+                    Some(v) => {\n+                        hi = self.span.hi;\n+                        ex = ast::expr_vstore(self.mk_expr(lo, hi, ex),\n+                                              ast::expr_vstore_fixed(v));\n+                    }\n+                }\n+            }\n+            _ => ()\n+        }\n+\n+        return (hi, ex);\n+    }\n+\n }\n "}, {"sha": "1ee683bdd088782f03036d6143e9e0827d3ff6f2", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f3df50f67f2aa6dbdc3e4c35d6eb2ba8e6b37eed/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3df50f67f2aa6dbdc3e4c35d6eb2ba8e6b37eed/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f3df50f67f2aa6dbdc3e4c35d6eb2ba8e6b37eed", "patch": "@@ -553,9 +553,13 @@ impl Parser {\n         } else { self.fatal(~\"expected type\"); };\n \n         let sp = mk_sp(lo, self.last_span.hi);\n-        return @{id: self.get_id(),\n-              node: t,\n+        return {\n+            let node =\n+                self.try_convert_ty_to_obsolete_fixed_length_vstore(sp, t);\n+            @{id: self.get_id(),\n+              node: node,\n               span: sp}\n+        };\n     }\n \n     fn parse_arg_mode() -> mode {\n@@ -1061,6 +1065,9 @@ impl Parser {\n             ex = expr_lit(@lit);\n         }\n \n+        let (hi, ex) =\n+            self.try_convert_expr_to_obsolete_fixed_length_vstore(lo, hi, ex);\n+\n         return self.mk_pexpr(lo, hi, ex);\n     }\n "}, {"sha": "c8a8bd859615f96fce990df40f40d011d804ac31", "filename": "src/test/compile-fail/obsolete-syntax.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f3df50f67f2aa6dbdc3e4c35d6eb2ba8e6b37eed/src%2Ftest%2Fcompile-fail%2Fobsolete-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3df50f67f2aa6dbdc3e4c35d6eb2ba8e6b37eed/src%2Ftest%2Fcompile-fail%2Fobsolete-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobsolete-syntax.rs?ref=f3df50f67f2aa6dbdc3e4c35d6eb2ba8e6b37eed", "patch": "@@ -56,4 +56,15 @@ fn obsolete_with() {\n     //~^ ERROR obsolete syntax: with\n }\n \n+fn obsolete_fixed_length_vec() {\n+    let foo: [int]/1;\n+    //~^ ERROR obsolete syntax: fixed-length vector\n+    foo = [1]/_;\n+    //~^ ERROR obsolete syntax: fixed-length vector\n+    let foo: [int]/1;\n+    //~^ ERROR obsolete syntax: fixed-length vector\n+    foo = [1]/1;\n+    //~^ ERROR obsolete syntax: fixed-length vector\n+}\n+\n fn main() { }"}]}