{"sha": "7145b877511e2a38fbdea32a375e398371d1980b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxNDViODc3NTExZTJhMzhmYmRlYTMyYTM3NWUzOTgzNzFkMTk4MGI=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-05-21T01:03:33Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-06-08T21:55:34Z"}, "message": "Remove the `reserve_in_place` calls in `{Typed,Dropless}Arena::grow`.\n\nThey are pointless. No reasonable allocator will be able to satisfy a\n`reserve_in_place` request that *doubles* the size of an allocation when\ndealing with allocations that are 4 KiB and larger.\n\nJust to be sure, I confirmed on Linux that the `reserve_in_place` calls\nnever succeed.\n\n(Note however that the `reserve_in_place` call for `DroplessArena::grow`\ndid occasionally succeed prior to the off-by-one fix in the previous\ncommit, because we would sometimes do a `reserve_in_place` request for\nthe chunk's current size, which would trivially succeed!)", "tree": {"sha": "9212eecc1bd4c40fb4563faff7b8a99279595e43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9212eecc1bd4c40fb4563faff7b8a99279595e43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7145b877511e2a38fbdea32a375e398371d1980b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7145b877511e2a38fbdea32a375e398371d1980b", "html_url": "https://github.com/rust-lang/rust/commit/7145b877511e2a38fbdea32a375e398371d1980b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7145b877511e2a38fbdea32a375e398371d1980b/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ceff6b96af9a21e044545b9e064433feccaf659", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ceff6b96af9a21e044545b9e064433feccaf659", "html_url": "https://github.com/rust-lang/rust/commit/5ceff6b96af9a21e044545b9e064433feccaf659"}], "stats": {"total": 52, "additions": 22, "deletions": 30}, "files": [{"sha": "fbf68a5ca353140e01761199936818ae62d369aa", "filename": "src/librustc_arena/lib.rs", "status": "modified", "additions": 22, "deletions": 30, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7145b877511e2a38fbdea32a375e398371d1980b/src%2Flibrustc_arena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7145b877511e2a38fbdea32a375e398371d1980b/src%2Flibrustc_arena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_arena%2Flib.rs?ref=7145b877511e2a38fbdea32a375e398371d1980b", "patch": "@@ -216,34 +216,29 @@ impl<T> TypedArena<T> {\n     #[cold]\n     fn grow(&self, n: usize) {\n         unsafe {\n-            // We need the element size in to convert chunk sizes (ranging from\n+            // We need the element size to convert chunk sizes (ranging from\n             // PAGE to HUGE_PAGE bytes) to element counts.\n             let elem_size = cmp::max(1, mem::size_of::<T>());\n             let mut chunks = self.chunks.borrow_mut();\n-            let (chunk, mut new_capacity);\n+            let mut new_capacity;\n             if let Some(last_chunk) = chunks.last_mut() {\n                 let used_bytes = self.ptr.get() as usize - last_chunk.start() as usize;\n-                let currently_used_cap = used_bytes / mem::size_of::<T>();\n-                last_chunk.entries = currently_used_cap;\n-                if last_chunk.storage.reserve_in_place(currently_used_cap, n) {\n-                    self.end.set(last_chunk.end());\n-                    return;\n-                } else {\n-                    // If the previous chunk's capacity is less than HUGE_PAGE\n-                    // bytes, then this chunk will be least double the previous\n-                    // chunk's size.\n-                    new_capacity = last_chunk.storage.capacity();\n-                    if new_capacity < HUGE_PAGE / elem_size {\n-                        new_capacity = new_capacity.checked_mul(2).unwrap();\n-                    }\n+                last_chunk.entries = used_bytes / mem::size_of::<T>();\n+\n+                // If the previous chunk's capacity is less than HUGE_PAGE\n+                // bytes, then this chunk will be least double the previous\n+                // chunk's size.\n+                new_capacity = last_chunk.storage.capacity();\n+                if new_capacity < HUGE_PAGE / elem_size {\n+                    new_capacity = new_capacity.checked_mul(2).unwrap();\n                 }\n             } else {\n                 new_capacity = PAGE / elem_size;\n             }\n             // Also ensure that this chunk can fit `n`.\n             new_capacity = cmp::max(n, new_capacity);\n \n-            chunk = TypedArenaChunk::<T>::new(new_capacity);\n+            let chunk = TypedArenaChunk::<T>::new(new_capacity);\n             self.ptr.set(chunk.start());\n             self.end.set(chunk.end());\n             chunks.push(chunk);\n@@ -350,28 +345,25 @@ impl DroplessArena {\n     fn grow(&self, needed_bytes: usize) {\n         unsafe {\n             let mut chunks = self.chunks.borrow_mut();\n-            let (chunk, mut new_capacity);\n+            let mut new_capacity;\n             if let Some(last_chunk) = chunks.last_mut() {\n-                let used_bytes = self.ptr.get() as usize - last_chunk.start() as usize;\n-                if last_chunk.storage.reserve_in_place(used_bytes, needed_bytes) {\n-                    self.end.set(last_chunk.end());\n-                    return;\n-                } else {\n-                    // If the previous chunk's capacity is less than HUGE_PAGE\n-                    // bytes, then this chunk will be least double the previous\n-                    // chunk's size.\n-                    new_capacity = last_chunk.storage.capacity();\n-                    if new_capacity < HUGE_PAGE {\n-                        new_capacity = new_capacity.checked_mul(2).unwrap();\n-                    }\n+                // There is no need to update `last_chunk.entries` because that\n+                // field isn't used by `DroplessArena`.\n+\n+                // If the previous chunk's capacity is less than HUGE_PAGE\n+                // bytes, then this chunk will be least double the previous\n+                // chunk's size.\n+                new_capacity = last_chunk.storage.capacity();\n+                if new_capacity < HUGE_PAGE {\n+                    new_capacity = new_capacity.checked_mul(2).unwrap();\n                 }\n             } else {\n                 new_capacity = PAGE;\n             }\n             // Also ensure that this chunk can fit `needed_bytes`.\n             new_capacity = cmp::max(needed_bytes, new_capacity);\n \n-            chunk = TypedArenaChunk::<u8>::new(new_capacity);\n+            let chunk = TypedArenaChunk::<u8>::new(new_capacity);\n             self.ptr.set(chunk.start());\n             self.end.set(chunk.end());\n             chunks.push(chunk);"}]}