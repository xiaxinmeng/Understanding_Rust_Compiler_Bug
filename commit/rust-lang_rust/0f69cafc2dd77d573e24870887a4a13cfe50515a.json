{"sha": "0f69cafc2dd77d573e24870887a4a13cfe50515a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNjljYWZjMmRkNzdkNTczZTI0ODcwODg3YTRhMTNjZmU1MDUxNWE=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-02-17T17:10:59Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-05-31T16:50:31Z"}, "message": "Rework suggestion generation and use multipart_suggestion again", "tree": {"sha": "63cf5361194bf97ca8f72fd6a9edf1c9c6e42365", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63cf5361194bf97ca8f72fd6a9edf1c9c6e42365"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f69cafc2dd77d573e24870887a4a13cfe50515a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl7T4FgACgkQaTCGhp1Q\nZjciYxAAioVc9EQjom80KiwOc0aj/gNLSqjKkK648iuOInC7dbCi3uyqtEDImnXZ\n+Lq21l/aw2QCa3i/hG1dedV2dAyM2QkjFyQaY53NZpfmd6PA+dVFkvczbdTBGXoI\n1ypBCP4B+xMr8/4okLfx6cocWGFqALfWF1OcZQ38zpTzJgPyInjTNQCASBC9WUk4\nlebEUiKQ6RgqgXtwrgzzWh5vM9vuFQtj9GSt/6y7bzsLRT/c/HDERBNo+ZWjei9O\ntv2kMXBd9+8a5go4mPNPKLuT0GuXyH9kBAudqiyszc7crjeg998p6wnB5HLylEW0\nKWeu99rUSrp1NAz2Yv/DvMu4JQMKiZVsisl+gJVtiKtqQ/jyfjpZDq8l8tVmXG9n\nvChKR95wMZQAPtpW7KAbf5KdO0V5RCcOyAkiW6AG2UY52bPyssCOec08pBJsXRBs\nT97W7efu3w4wwoNxeyM+QzCDofB7DfsT2PKG6b1CH2oiKOiMnyjwqD2sOveKMtFg\nkrXlI6vOdTP0J/2fTB4G5j0PZOjfCG5HB2mPLtcyMG5JF3ijM54KrS4IQPnENRFy\ntaixJ0eWRKWC9JnCruuBsebgNG0yTRHPAJ/V9n2w703h1yzBRkXZLaj9J39hyqjU\nnNFwssmX6uOTEFCgtS+DsP3MpAROUMffn6BV3pIJFF1kU9sl6r4=\n=MaOW\n-----END PGP SIGNATURE-----", "payload": "tree 63cf5361194bf97ca8f72fd6a9edf1c9c6e42365\nparent a1a1a4b82a35b810570dbf7d2ee7f00896bee232\nauthor flip1995 <hello@philkrones.com> 1581959459 +0100\ncommitter flip1995 <hello@philkrones.com> 1590943831 +0200\n\nRework suggestion generation and use multipart_suggestion again\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f69cafc2dd77d573e24870887a4a13cfe50515a", "html_url": "https://github.com/rust-lang/rust/commit/0f69cafc2dd77d573e24870887a4a13cfe50515a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f69cafc2dd77d573e24870887a4a13cfe50515a/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1a1a4b82a35b810570dbf7d2ee7f00896bee232", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1a1a4b82a35b810570dbf7d2ee7f00896bee232", "html_url": "https://github.com/rust-lang/rust/commit/a1a1a4b82a35b810570dbf7d2ee7f00896bee232"}], "stats": {"total": 55, "additions": 33, "deletions": 22}, "files": [{"sha": "c95bd5d72bcd611a09cc6595c320e68e19b3037f", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 33, "deletions": 22, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/0f69cafc2dd77d573e24870887a4a13cfe50515a/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f69cafc2dd77d573e24870887a4a13cfe50515a/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=0f69cafc2dd77d573e24870887a4a13cfe50515a", "patch": "@@ -794,32 +794,43 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitArg {\n                 if !args_to_recover.is_empty() {\n                     let mut applicability = Applicability::MachineApplicable;\n                     span_lint_and_then(cx, UNIT_ARG, expr.span, \"passing a unit value to a function\", |db| {\n+                        let sugg = args_to_recover\n+                            .iter()\n+                            .enumerate()\n+                            .map(|(i, arg)| {\n+                                let indent = if i == 0 {\n+                                    0\n+                                } else {\n+                                    indent_of(cx, expr.span).unwrap_or(0)\n+                                };\n+                                format!(\n+                                    \"{}{};\",\n+                                    \" \".repeat(indent),\n+                                    snippet_block_with_applicability(\n+                                        cx,\n+                                        arg.span,\n+                                        \"..\",\n+                                        Some(expr.span),\n+                                        &mut applicability\n+                                    )\n+                                )\n+                            })\n+                            .collect::<Vec<String>>()\n+                            .join(\"\\n\");\n                         db.span_suggestion(\n                             expr.span.with_hi(expr.span.lo()),\n-                            \"move the expressions in front of the call...\",\n-                            format!(\n-                                \"{} \",\n-                                args_to_recover\n-                                    .iter()\n-                                    .map(|arg| {\n-                                        format!(\n-                                            \"{};\",\n-                                            snippet_with_applicability(cx, arg.span, \"..\", &mut applicability)\n-                                        )\n-                                    })\n-                                    .collect::<Vec<String>>()\n-                                    .join(\" \")\n-                            ),\n+                            &format!(\"{}move the expressions in front of the call...\", or),\n+                            format!(\"{}\\n\", sugg),\n+                            applicability,\n+                        );\n+                        db.multipart_suggestion(\n+                            \"...and use unit literals instead\",\n+                            args_to_recover\n+                                .iter()\n+                                .map(|arg| (arg.span, \"()\".to_string()))\n+                                .collect::<Vec<_>>(),\n                             applicability,\n                         );\n-                        for arg in args_to_recover {\n-                            db.span_suggestion(\n-                                arg.span,\n-                                \"...and use unit literals instead\",\n-                                \"()\".to_string(),\n-                                applicability,\n-                            );\n-                        }\n                     });\n                 }\n             },"}]}