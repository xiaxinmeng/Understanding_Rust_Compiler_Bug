{"sha": "ae8a8020857080ea527cc1d0e57a592d6e587a64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlOGE4MDIwODU3MDgwZWE1MjdjYzFkMGU1N2E1OTJkNmU1ODdhNjQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-12-13T10:34:44Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-12-13T10:34:44Z"}, "message": "Ignore lifetime params in substitutions", "tree": {"sha": "81bc716b34669495f3a30a2624b3f9433dfbace8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81bc716b34669495f3a30a2624b3f9433dfbace8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae8a8020857080ea527cc1d0e57a592d6e587a64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae8a8020857080ea527cc1d0e57a592d6e587a64", "html_url": "https://github.com/rust-lang/rust/commit/ae8a8020857080ea527cc1d0e57a592d6e587a64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae8a8020857080ea527cc1d0e57a592d6e587a64/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10f633283180d513138d0d969eceba96e3ce9f96", "url": "https://api.github.com/repos/rust-lang/rust/commits/10f633283180d513138d0d969eceba96e3ce9f96", "html_url": "https://github.com/rust-lang/rust/commit/10f633283180d513138d0d969eceba96e3ce9f96"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "b08167281d96dc95bad99fac2d59b7ee86afbf87", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a8020857080ea527cc1d0e57a592d6e587a64/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a8020857080ea527cc1d0e57a592d6e587a64/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=ae8a8020857080ea527cc1d0e57a592d6e587a64", "patch": "@@ -246,7 +246,10 @@ struct GenericParamsStorage {\n \n impl GenericParamsStorage {\n     fn alloc(&mut self, params: GenericParams) -> GenericParamsId {\n-        if params.types.is_empty() && params.where_predicates.is_empty() {\n+        if params.types.is_empty()\n+            && params.lifetimes.is_empty()\n+            && params.where_predicates.is_empty()\n+        {\n             return GenericParamsId::EMPTY;\n         }\n "}, {"sha": "2cdce2cefcee0dbc65c82a07085069f39dd9fb87", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a8020857080ea527cc1d0e57a592d6e587a64/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a8020857080ea527cc1d0e57a592d6e587a64/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=ae8a8020857080ea527cc1d0e57a592d6e587a64", "patch": "@@ -856,7 +856,12 @@ impl<'a> InferenceContext<'a> {\n         // handle provided type arguments\n         if let Some(generic_args) = generic_args {\n             // if args are provided, it should be all of them, but we can't rely on that\n-            for arg in generic_args.args.iter().take(type_params) {\n+            for arg in generic_args\n+                .args\n+                .iter()\n+                .filter(|arg| matches!(arg, GenericArg::Type(_)))\n+                .take(type_params)\n+            {\n                 match arg {\n                     GenericArg::Type(type_ref) => {\n                         let ty = self.make_ty(type_ref);"}, {"sha": "8392cb770658652db6bc1238157af30d86091de8", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ae8a8020857080ea527cc1d0e57a592d6e587a64/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae8a8020857080ea527cc1d0e57a592d6e587a64/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=ae8a8020857080ea527cc1d0e57a592d6e587a64", "patch": "@@ -565,7 +565,13 @@ fn substs_from_path_segment(\n             if generic_args.has_self_type { self_params + type_params } else { type_params };\n         let skip = if generic_args.has_self_type && self_params == 0 { 1 } else { 0 };\n         // if args are provided, it should be all of them, but we can't rely on that\n-        for arg in generic_args.args.iter().skip(skip).take(expected_num) {\n+        for arg in generic_args\n+            .args\n+            .iter()\n+            .filter(|arg| matches!(arg, GenericArg::Type(_)))\n+            .skip(skip)\n+            .take(expected_num)\n+        {\n             match arg {\n                 GenericArg::Type(type_ref) => {\n                     had_explicit_type_args = true;"}]}