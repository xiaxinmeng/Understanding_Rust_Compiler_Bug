{"sha": "283a130ddafa01537123b0650f869abc14886911", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4M2ExMzBkZGFmYTAxNTM3MTIzYjA2NTBmODY5YWJjMTQ4ODY5MTE=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-20T22:40:21Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-20T22:40:21Z"}, "message": "Add docs for the new helper functions", "tree": {"sha": "6f5aea5c1a5144e9ec2aa89035eca1dfb995753e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f5aea5c1a5144e9ec2aa89035eca1dfb995753e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/283a130ddafa01537123b0650f869abc14886911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/283a130ddafa01537123b0650f869abc14886911", "html_url": "https://github.com/rust-lang/rust/commit/283a130ddafa01537123b0650f869abc14886911", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/283a130ddafa01537123b0650f869abc14886911/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7c6e0efbe11343562c713dce1d28e2d141dcb89", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7c6e0efbe11343562c713dce1d28e2d141dcb89", "html_url": "https://github.com/rust-lang/rust/commit/f7c6e0efbe11343562c713dce1d28e2d141dcb89"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "4d84106dbe86f7f75413c7e4d92116e9aba3ed59", "filename": "src/helpers.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/283a130ddafa01537123b0650f869abc14886911/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/283a130ddafa01537123b0650f869abc14886911/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=283a130ddafa01537123b0650f869abc14886911", "patch": "@@ -346,11 +346,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(())\n     }\n \n+    /// Helper function to read an OsString from a null-terminated sequence of bytes, which is what\n+    /// the Unix APIs usually handle.\n     fn read_os_string_from_c_string(&mut self, scalar: Scalar<Tag>) -> InterpResult<'tcx, OsString> {\n         let bytes = self.eval_context_mut().memory.read_c_str(scalar)?;\n         Ok(bytes_to_os_str(bytes)?.into())\n     }\n \n+    /// Helper function to write an OsStr as a null-terminated sequence of bytes, which is what\n+    /// the Unix APIs usually handle.\n     fn write_os_str_to_c_string(&mut self, os_str: &OsStr, ptr: Pointer<Tag>, size: u64) -> InterpResult<'tcx> {\n         let bytes = os_str_to_bytes(os_str)?;\n         let len = bytes.len();"}]}