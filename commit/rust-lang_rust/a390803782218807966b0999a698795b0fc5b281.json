{"sha": "a390803782218807966b0999a698795b0fc5b281", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzOTA4MDM3ODIyMTg4MDc5NjZiMDk5OWE2OTg3OTViMGZjNWIyODE=", "commit": {"author": {"name": "Tom Karpiniec", "email": "tom@ditto.live", "date": "2020-05-07T05:34:31Z"}, "committer": {"name": "Tom Karpiniec", "email": "tom@ditto.live", "date": "2020-05-07T05:35:56Z"}, "message": "Provide configurable LLVM cmdline section via target spec\n\nThe App Store performs certain sanity checks on bitcode, including that\nan acceptable set of command line arguments was used when compiling a\ngiven module. For Rust code to be distributed on the app store with\nbitcode rustc must pretend to have the same command line arguments.", "tree": {"sha": "186e9b4878140a0053062d63ccc312556f66e4d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/186e9b4878140a0053062d63ccc312556f66e4d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a390803782218807966b0999a698795b0fc5b281", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a390803782218807966b0999a698795b0fc5b281", "html_url": "https://github.com/rust-lang/rust/commit/a390803782218807966b0999a698795b0fc5b281", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a390803782218807966b0999a698795b0fc5b281/comments", "author": {"login": "thombles", "id": 5511175, "node_id": "MDQ6VXNlcjU1MTExNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5511175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thombles", "html_url": "https://github.com/thombles", "followers_url": "https://api.github.com/users/thombles/followers", "following_url": "https://api.github.com/users/thombles/following{/other_user}", "gists_url": "https://api.github.com/users/thombles/gists{/gist_id}", "starred_url": "https://api.github.com/users/thombles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thombles/subscriptions", "organizations_url": "https://api.github.com/users/thombles/orgs", "repos_url": "https://api.github.com/users/thombles/repos", "events_url": "https://api.github.com/users/thombles/events{/privacy}", "received_events_url": "https://api.github.com/users/thombles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thombles", "id": 5511175, "node_id": "MDQ6VXNlcjU1MTExNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5511175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thombles", "html_url": "https://github.com/thombles", "followers_url": "https://api.github.com/users/thombles/followers", "following_url": "https://api.github.com/users/thombles/following{/other_user}", "gists_url": "https://api.github.com/users/thombles/gists{/gist_id}", "starred_url": "https://api.github.com/users/thombles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thombles/subscriptions", "organizations_url": "https://api.github.com/users/thombles/orgs", "repos_url": "https://api.github.com/users/thombles/repos", "events_url": "https://api.github.com/users/thombles/events{/privacy}", "received_events_url": "https://api.github.com/users/thombles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "342aad1d1b88a37361bf3a704750217b4fb4039d", "url": "https://api.github.com/repos/rust-lang/rust/commits/342aad1d1b88a37361bf3a704750217b4fb4039d", "html_url": "https://github.com/rust-lang/rust/commit/342aad1d1b88a37361bf3a704750217b4fb4039d"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "d8faa82a8944d63452f8974c711c8e3105f912e5", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a390803782218807966b0999a698795b0fc5b281/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a390803782218807966b0999a698795b0fc5b281/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=a390803782218807966b0999a698795b0fc5b281", "patch": "@@ -651,10 +651,10 @@ pub(crate) unsafe fn codegen(\n                     \"LLVM_module_codegen_embed_bitcode\",\n                     &module.name[..],\n                 );\n-                embed_bitcode(cgcx, llcx, llmod, Some(data));\n+                embed_bitcode(cgcx, llcx, llmod, &config.bc_cmdline, Some(data));\n             }\n         } else if config.emit_obj == EmitObj::ObjectCode(BitcodeSection::Marker) {\n-            embed_bitcode(cgcx, llcx, llmod, None);\n+            embed_bitcode(cgcx, llcx, llmod, &config.bc_cmdline, None);\n         }\n \n         if config.emit_ir {\n@@ -777,8 +777,8 @@ pub(crate) unsafe fn codegen(\n /// * __LLVM,__cmdline\n ///\n /// It appears *both* of these sections are necessary to get the linker to\n-/// recognize what's going on. For us though we just always throw in an empty\n-/// cmdline section.\n+/// recognize what's going on. A suitable cmdline value is taken from the\n+/// target spec.\n ///\n /// Furthermore debug/O1 builds don't actually embed bitcode but rather just\n /// embed an empty section.\n@@ -789,6 +789,7 @@ unsafe fn embed_bitcode(\n     cgcx: &CodegenContext<LlvmCodegenBackend>,\n     llcx: &llvm::Context,\n     llmod: &llvm::Module,\n+    cmdline: &str,\n     bitcode: Option<&[u8]>,\n ) {\n     let llconst = common::bytes_in_context(llcx, bitcode.unwrap_or(&[]));\n@@ -800,14 +801,15 @@ unsafe fn embed_bitcode(\n     llvm::LLVMSetInitializer(llglobal, llconst);\n \n     let is_apple = cgcx.opts.target_triple.triple().contains(\"-ios\")\n-        || cgcx.opts.target_triple.triple().contains(\"-darwin\");\n+        || cgcx.opts.target_triple.triple().contains(\"-darwin\")\n+        || cgcx.opts.target_triple.triple().contains(\"-tvos\");\n \n     let section = if is_apple { \"__LLVM,__bitcode\\0\" } else { \".llvmbc\\0\" };\n     llvm::LLVMSetSection(llglobal, section.as_ptr().cast());\n     llvm::LLVMRustSetLinkage(llglobal, llvm::Linkage::PrivateLinkage);\n     llvm::LLVMSetGlobalConstant(llglobal, llvm::True);\n \n-    let llconst = common::bytes_in_context(llcx, &[]);\n+    let llconst = common::bytes_in_context(llcx, cmdline.as_bytes());\n     let llglobal = llvm::LLVMAddGlobal(\n         llmod,\n         common::val_ty(llconst),"}, {"sha": "cae99f630c35baee5ad4a5685470e1629464305e", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a390803782218807966b0999a698795b0fc5b281/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a390803782218807966b0999a698795b0fc5b281/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=a390803782218807966b0999a698795b0fc5b281", "patch": "@@ -101,6 +101,7 @@ pub struct ModuleConfig {\n     pub emit_ir: bool,\n     pub emit_asm: bool,\n     pub emit_obj: EmitObj,\n+    pub bc_cmdline: String,\n \n     // Miscellaneous flags.  These are mostly copied from command-line\n     // options.\n@@ -213,6 +214,7 @@ impl ModuleConfig {\n                 false\n             ),\n             emit_obj,\n+            bc_cmdline: sess.target.target.options.bitcode_llvm_cmdline.clone(),\n \n             verify_llvm_ir: sess.verify_llvm_ir(),\n             no_prepopulate_passes: sess.opts.cg.no_prepopulate_passes,"}, {"sha": "eac2c3e6aa40c672c7dae945756ce667b434f53d", "filename": "src/librustc_target/spec/aarch64_apple_ios.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a390803782218807966b0999a698795b0fc5b281/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a390803782218807966b0999a698795b0fc5b281/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_apple_ios.rs?ref=a390803782218807966b0999a698795b0fc5b281", "patch": "@@ -20,6 +20,17 @@ pub fn target() -> TargetResult {\n             max_atomic_width: Some(128),\n             abi_blacklist: super::arm_base::abi_blacklist(),\n             forces_embed_bitcode: true,\n+            // Taken from a clang build on Xcode 11.4.1.\n+            // These arguments are not actually invoked - they just have\n+            // to look right to pass App Store validation.\n+            bitcode_llvm_cmdline: \"-triple\\0\\\n+                arm64-apple-ios11.0.0\\0\\\n+                -emit-obj\\0\\\n+                -disable-llvm-passes\\0\\\n+                -target-abi\\0\\\n+                darwinpcs\\0\\\n+                -Os\\0\"\n+                .to_string(),\n             ..base\n         },\n     })"}, {"sha": "51dce9e144caa359f2c294b9aa0aa481473b4f04", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a390803782218807966b0999a698795b0fc5b281/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a390803782218807966b0999a698795b0fc5b281/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=a390803782218807966b0999a698795b0fc5b281", "patch": "@@ -785,6 +785,8 @@ pub struct TargetOptions {\n     pub obj_is_bitcode: bool,\n     /// Whether the target requires that emitted object code includes bitcode.\n     pub forces_embed_bitcode: bool,\n+    /// Content of the LLVM cmdline section associated with embedded bitcode.\n+    pub bitcode_llvm_cmdline: String,\n \n     /// Don't use this field; instead use the `.min_atomic_width()` method.\n     pub min_atomic_width: Option<u64>,\n@@ -942,6 +944,7 @@ impl Default for TargetOptions {\n             has_elf_tls: false,\n             obj_is_bitcode: false,\n             forces_embed_bitcode: false,\n+            bitcode_llvm_cmdline: String::new(),\n             min_atomic_width: None,\n             max_atomic_width: None,\n             atomic_cas: true,\n@@ -1282,6 +1285,7 @@ impl Target {\n         key!(has_elf_tls, bool);\n         key!(obj_is_bitcode, bool);\n         key!(forces_embed_bitcode, bool);\n+        key!(bitcode_llvm_cmdline);\n         key!(max_atomic_width, Option<u64>);\n         key!(min_atomic_width, Option<u64>);\n         key!(atomic_cas, bool);\n@@ -1510,6 +1514,7 @@ impl ToJson for Target {\n         target_option_val!(has_elf_tls);\n         target_option_val!(obj_is_bitcode);\n         target_option_val!(forces_embed_bitcode);\n+        target_option_val!(bitcode_llvm_cmdline);\n         target_option_val!(min_atomic_width);\n         target_option_val!(max_atomic_width);\n         target_option_val!(atomic_cas);"}]}