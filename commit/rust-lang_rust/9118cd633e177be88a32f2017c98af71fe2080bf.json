{"sha": "9118cd633e177be88a32f2017c98af71fe2080bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMThjZDYzM2UxNzdiZTg4YTMyZjIwMTdjOThhZjcxZmUyMDgwYmY=", "commit": {"author": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2018-05-29T05:12:42Z"}, "committer": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2018-05-29T16:18:49Z"}, "message": "Simplify lifetime-differences-only detection\n\nNow instead of reinventing the wheel with differ_only_in_lifetimes(), we\nuse TyCtxt's erase_regions()", "tree": {"sha": "d78dcc02e02d79f50dae54e44b59a6c49827798a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d78dcc02e02d79f50dae54e44b59a6c49827798a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9118cd633e177be88a32f2017c98af71fe2080bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9118cd633e177be88a32f2017c98af71fe2080bf", "html_url": "https://github.com/rust-lang/rust/commit/9118cd633e177be88a32f2017c98af71fe2080bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9118cd633e177be88a32f2017c98af71fe2080bf/comments", "author": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8134863c13c13d790a30bc9998693d3f3ea7f23d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8134863c13c13d790a30bc9998693d3f3ea7f23d", "html_url": "https://github.com/rust-lang/rust/commit/8134863c13c13d790a30bc9998693d3f3ea7f23d"}], "stats": {"total": 47, "additions": 2, "deletions": 45}, "files": [{"sha": "21debc347d05116e224d465240b35e7cbd319cab", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 2, "deletions": 45, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9118cd633e177be88a32f2017c98af71fe2080bf/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9118cd633e177be88a32f2017c98af71fe2080bf/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=9118cd633e177be88a32f2017c98af71fe2080bf", "patch": "@@ -1,8 +1,7 @@\n use rustc::lint::*;\n-use rustc::ty::{self, Ty, walk::TypeWalker};\n+use rustc::ty::{self, Ty};\n use rustc::hir::*;\n use std::borrow::Cow;\n-use std::mem;\n use syntax::ast;\n use utils::{last_path_segment, match_def_path, paths, snippet, span_lint, span_lint_and_then};\n use utils::{opt_def_id, sugg};\n@@ -364,7 +363,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                                             }\n                                         )\n                                     } else {\n-                                        if !differ_only_in_lifetime_params(from_ty, to_ty) {\n+                                        if cx.tcx.erase_regions(&from_ty) != cx.tcx.erase_regions(&to_ty) {\n                                             span_lint_and_then(\n                                                 cx,\n                                                 TRANSMUTE_PTR_TO_PTR,\n@@ -448,48 +447,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n     }\n }\n \n-/// Returns true if `type1` and `type2` are the same type except for their lifetime parameters\n-fn differ_only_in_lifetime_params(type1: Ty, type2: Ty) -> bool {\n-    use rustc::ty::TypeVariants::*;\n-    if TypeWalker::new(type1).count() != TypeWalker::new(type2).count() {\n-        return false;\n-    }\n-    TypeWalker::new(type1)\n-        .zip(TypeWalker::new(type2))\n-        .all(|(t1, t2)| {\n-            match (&t1.sty, &t2.sty) {\n-                // types with generic parameters which can contain lifetimes\n-                (TyAdt(_, sub1), TyAdt(_, sub2))\n-                | (TyFnDef(_, sub1), TyFnDef(_, sub2))\n-                | (TyAnon(_, sub1), TyAnon(_, sub2))\n-                => {\n-                    // Iterate over generic parameters, which are either Lifetimes or Types.\n-                    // Here we only need to check that they are the same type of thing, because\n-                    // if they are both Lifetimes then we don't care about their equality, and if\n-                    // they are both Types, we will check their equality later in the type walk.\n-                    sub1.iter().count() == sub2.iter().count()\n-                    && sub1.iter().zip(sub2.iter()).all(|(k1, k2)| {\n-                        mem::discriminant(&k1.unpack()) == mem::discriminant(&k2.unpack())\n-                    })\n-                }\n-                // types without subtypes: check that the types are equal\n-                (TyBool, TyBool)\n-                | (TyChar, TyChar)\n-                | (TyInt(_), TyInt(_))\n-                | (TyUint(_), TyUint(_))\n-                | (TyFloat(_), TyFloat(_))\n-                | (TyForeign(_), TyForeign(_))\n-                | (TyStr, TyStr)\n-                | (TyNever, TyNever)\n-                | (TyInfer(_), TyInfer(_))\n-                => t1.sty == t2.sty,\n-                // types with subtypes: return true for now if they are the same sort of type.\n-                // we will check their subtypes later\n-                (sty1, sty2) => mem::discriminant(sty1) == mem::discriminant(sty2)\n-            }\n-        })\n-}\n-\n /// Get the snippet of `Bar` in `\u2026::transmute<Foo, &Bar>`. If that snippet is\n /// not available , use\n /// the type's `ToString` implementation. In weird cases it could lead to types"}]}