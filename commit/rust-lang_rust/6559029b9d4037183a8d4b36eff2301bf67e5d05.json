{"sha": "6559029b9d4037183a8d4b36eff2301bf67e5d05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NTkwMjliOWQ0MDM3MTgzYThkNGIzNmVmZjIzMDFiZjY3ZTVkMDU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-19T18:17:25Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-24T10:25:11Z"}, "message": "Use rustc_codegen_ssa::CodegenResults", "tree": {"sha": "d91aa98102193bce25d1762578b2b24d96f3a9c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d91aa98102193bce25d1762578b2b24d96f3a9c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6559029b9d4037183a8d4b36eff2301bf67e5d05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6559029b9d4037183a8d4b36eff2301bf67e5d05", "html_url": "https://github.com/rust-lang/rust/commit/6559029b9d4037183a8d4b36eff2301bf67e5d05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6559029b9d4037183a8d4b36eff2301bf67e5d05/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e28d80a3db694e6e17d89988f74d36c316470a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e28d80a3db694e6e17d89988f74d36c316470a2", "html_url": "https://github.com/rust-lang/rust/commit/8e28d80a3db694e6e17d89988f74d36c316470a2"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "dbe3536ecfe5b7d22feda54020622cb1b5adbccd", "filename": "src/lib.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6559029b9d4037183a8d4b36eff2301bf67e5d05/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6559029b9d4037183a8d4b36eff2301bf67e5d05/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=6559029b9d4037183a8d4b36eff2301bf67e5d05", "patch": "@@ -22,8 +22,6 @@ use std::any::Any;\n use std::fs::File;\n use std::sync::mpsc;\n \n-use syntax::symbol::Symbol;\n-\n use rustc::dep_graph::DepGraph;\n use rustc::middle::cstore::MetadataLoader;\n use rustc::session::{\n@@ -78,7 +76,7 @@ mod prelude {\n         self, subst::Substs, FnSig, Instance, InstanceDef, ParamEnv, PolyFnSig, Ty, TyCtxt,\n         TypeAndMut, TypeFoldable,\n     };\n-    pub use rustc_codegen_ssa::{CompiledModule, ModuleKind};\n+    pub use rustc_codegen_ssa::{CodegenResults, CompiledModule, ModuleKind};\n     pub use rustc_data_structures::{\n         fx::{FxHashMap, FxHashSet},\n         indexed_vec::Idx,\n@@ -100,7 +98,7 @@ mod prelude {\n     pub use crate::common::*;\n     pub use crate::trap::*;\n     pub use crate::unimpl::{unimpl, with_unimpl_span};\n-    pub use crate::{Caches, CodegenResults};\n+    pub use crate::Caches;\n }\n \n pub struct Caches<'tcx> {\n@@ -119,15 +117,6 @@ impl<'tcx> Caches<'tcx> {\n \n struct CraneliftCodegenBackend;\n \n-pub struct CodegenResults {\n-    modules: Vec<CompiledModule>,\n-    allocator_module: Option<CompiledModule>,\n-    metadata: Vec<u8>,\n-    crate_name: Symbol,\n-    crate_info: CrateInfo,\n-    linker_info: LinkerInfo,\n-}\n-\n impl CodegenBackend for CraneliftCodegenBackend {\n     fn init(&self, sess: &Session) {\n         for cty in sess.opts.crate_types.iter() {\n@@ -280,10 +269,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             std::fs::write(&tmp_file, obj).unwrap();\n \n             return Box::new(CodegenResults {\n-                metadata: metadata.raw_data,\n                 crate_name: tcx.crate_name(LOCAL_CRATE),\n-                crate_info: CrateInfo::new(tcx),\n-                linker_info: LinkerInfo::new(tcx),\n                 modules: vec![CompiledModule {\n                     name: \"dummy_name\".to_string(),\n                     kind: ModuleKind::Regular,\n@@ -292,6 +278,18 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                     bytecode_compressed: None,\n                 }],\n                 allocator_module: None,\n+                metadata_module: CompiledModule {\n+                    name: \"dummy_metadata\".to_string(),\n+                    kind: ModuleKind::Metadata,\n+                    object: None,\n+                    bytecode: None,\n+                    bytecode_compressed: None,\n+                },\n+                crate_hash: tcx.crate_hash(LOCAL_CRATE),\n+                metadata,\n+                windows_subsystem: None, // Windows is not yet supported\n+                linker_info: LinkerInfo::new(tcx),\n+                crate_info: CrateInfo::new(tcx),\n             });\n         }\n     }"}, {"sha": "42e4b55f803afe0b6be6c9b7b55af19b38b02d0c", "filename": "src/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6559029b9d4037183a8d4b36eff2301bf67e5d05/src%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6559029b9d4037183a8d4b36eff2301bf67e5d05/src%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flink.rs?ref=6559029b9d4037183a8d4b36eff2301bf67e5d05", "patch": "@@ -42,9 +42,9 @@ pub(crate) fn link_rlib(sess: &Session, res: &CodegenResults, output_name: PathB\n         .append(\n             &ar::Header::new(\n                 crate::metadata::METADATA_FILENAME.as_bytes().to_vec(),\n-                res.metadata.len() as u64,\n+                res.metadata.raw_data.len() as u64,\n             ),\n-            ::std::io::Cursor::new(res.metadata.clone()),\n+            ::std::io::Cursor::new(res.metadata.raw_data.clone()),\n         )\n         .unwrap();\n "}]}