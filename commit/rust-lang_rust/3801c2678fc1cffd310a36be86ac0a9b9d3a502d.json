{"sha": "3801c2678fc1cffd310a36be86ac0a9b9d3a502d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MDFjMjY3OGZjMWNmZmQzMTBhMzZiZTg2YWMwYTliOWQzYTUwMmQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-30T00:36:12Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-30T00:36:12Z"}, "message": "rollup merge of #20231: fhahn/issue-20226-eexist\n\nI've created a patch for #20226, which maps `EEXIST` to the `PathAlreadyExists` error on Unix. To test this, I use `mkdir`, which raises `EEXIST` if the directory already exists.\n\nOn Windows, I map `ERROR_ALREADY_EXISTS` to `PathAlreadyExist`, but I am note sure if `mkdir` on Windows raises `ERROR_ALREADY_EXISTS` and do not have a Windows installation handy for testing.\n\nAnd I noticed another thing. No error seems to map to `IoErrorKind::PathDoesntExist` and I am wondering what the difference to `FileNotFound` is?", "tree": {"sha": "9817b35aea7c21c047c395f35c0c9e8f791d6da9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9817b35aea7c21c047c395f35c0c9e8f791d6da9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3801c2678fc1cffd310a36be86ac0a9b9d3a502d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3801c2678fc1cffd310a36be86ac0a9b9d3a502d", "html_url": "https://github.com/rust-lang/rust/commit/3801c2678fc1cffd310a36be86ac0a9b9d3a502d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3801c2678fc1cffd310a36be86ac0a9b9d3a502d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcd3b1685ab8f0ed1ef2e78a9bc89afbdc5913eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcd3b1685ab8f0ed1ef2e78a9bc89afbdc5913eb", "html_url": "https://github.com/rust-lang/rust/commit/bcd3b1685ab8f0ed1ef2e78a9bc89afbdc5913eb"}, {"sha": "eb4b20288e6e8e704f5248c56601149dbf856599", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb4b20288e6e8e704f5248c56601149dbf856599", "html_url": "https://github.com/rust-lang/rust/commit/eb4b20288e6e8e704f5248c56601149dbf856599"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "caa6590bb28212bd7cb8dc192d1c4bed0bbc0c56", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3801c2678fc1cffd310a36be86ac0a9b9d3a502d/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3801c2678fc1cffd310a36be86ac0a9b9d3a502d/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=3801c2678fc1cffd310a36be86ac0a9b9d3a502d", "patch": "@@ -1148,6 +1148,19 @@ mod test {\n         check!(rmdir_recursive(dir));\n     }\n \n+    #[test]\n+    fn mkdir_path_already_exists_error() {\n+        use io::{IoError, PathAlreadyExists};\n+\n+        let tmpdir = tmpdir();\n+        let dir = &tmpdir.join(\"mkdir_error_twice\");\n+        check!(mkdir(dir, io::USER_RWX));\n+        match mkdir(dir, io::USER_RWX) {\n+            Err(IoError{kind:PathAlreadyExists,..}) => (),\n+            _ => assert!(false)\n+        };\n+    }\n+\n     #[test]\n     fn recursive_mkdir() {\n         let tmpdir = tmpdir();"}, {"sha": "4b7ac8ff4d3a962e3f3c33dce1e784f0cd1e93d6", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3801c2678fc1cffd310a36be86ac0a9b9d3a502d/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3801c2678fc1cffd310a36be86ac0a9b9d3a502d/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=3801c2678fc1cffd310a36be86ac0a9b9d3a502d", "patch": "@@ -109,6 +109,8 @@ pub fn decode_error(errno: i32) -> IoError {\n              \"file descriptor is not a TTY\"),\n         libc::ETIMEDOUT => (io::TimedOut, \"operation timed out\"),\n         libc::ECANCELED => (io::TimedOut, \"operation aborted\"),\n+        libc::consts::os::posix88::EEXIST =>\n+            (io::PathAlreadyExists, \"path already exists\"),\n \n         // These two constants can have the same value on some systems,\n         // but different values on others, so we can't use a match"}, {"sha": "aee98e22836be89280114a9260ebb6376e8955c3", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3801c2678fc1cffd310a36be86ac0a9b9d3a502d/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3801c2678fc1cffd310a36be86ac0a9b9d3a502d/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=3801c2678fc1cffd310a36be86ac0a9b9d3a502d", "patch": "@@ -121,6 +121,8 @@ pub fn decode_error(errno: i32) -> IoError {\n              \"invalid handle provided to function\"),\n         libc::ERROR_NOTHING_TO_TERMINATE =>\n             (io::InvalidInput, \"no process to kill\"),\n+        libc::ERROR_ALREADY_EXISTS =>\n+            (io::PathAlreadyExists, \"path already exists\"),\n \n         // libuv maps this error code to EISDIR. we do too. if it is found\n         // to be incorrect, we can add in some more machinery to only"}]}