{"sha": "11a6d19c5966a0fd1be226be705f3f50cde1b20d", "node_id": "C_kwDOAAsO6NoAKDExYTZkMTljNTk2NmEwZmQxYmUyMjZiZTcwNWYzZjUwY2RlMWIyMGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-02T15:13:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-02T15:13:32Z"}, "message": "Auto merge of #9479 - kraktus:manual_assert2, r=llogiq\n\n[`manual_assert`]: Preserve comments in the suggestion\n\nclose https://github.com/rust-lang/rust-clippy/issues/7730\n\nchangelog: [`manual_assert`]: Preserve comments in the suggestion", "tree": {"sha": "1db2f487d32c21916ee1ab28288f9a0629efae94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1db2f487d32c21916ee1ab28288f9a0629efae94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11a6d19c5966a0fd1be226be705f3f50cde1b20d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11a6d19c5966a0fd1be226be705f3f50cde1b20d", "html_url": "https://github.com/rust-lang/rust/commit/11a6d19c5966a0fd1be226be705f3f50cde1b20d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11a6d19c5966a0fd1be226be705f3f50cde1b20d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac12011315e0447cf7294102a342793c1d8c7cb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac12011315e0447cf7294102a342793c1d8c7cb8", "html_url": "https://github.com/rust-lang/rust/commit/ac12011315e0447cf7294102a342793c1d8c7cb8"}, {"sha": "3ab02aa3596567292406fb6e44e650dedcb25297", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ab02aa3596567292406fb6e44e650dedcb25297", "html_url": "https://github.com/rust-lang/rust/commit/3ab02aa3596567292406fb6e44e650dedcb25297"}], "stats": {"total": 240, "additions": 213, "deletions": 27}, "files": [{"sha": "825ec84b4a81241be619e8d8b5c4e64689b09ed5", "filename": "clippy_lints/src/manual_assert.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/11a6d19c5966a0fd1be226be705f3f50cde1b20d/clippy_lints%2Fsrc%2Fmanual_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a6d19c5966a0fd1be226be705f3f50cde1b20d/clippy_lints%2Fsrc%2Fmanual_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_assert.rs?ref=11a6d19c5966a0fd1be226be705f3f50cde1b20d", "patch": "@@ -1,7 +1,8 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n+use crate::rustc_lint::LintContext;\n+use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::macros::{root_macro_call, FormatArgsExpn};\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{peel_blocks_with_stmt, sugg};\n+use clippy_utils::{peel_blocks_with_stmt, span_extract_comment, sugg};\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -50,20 +51,36 @@ impl<'tcx> LateLintPass<'tcx> for ManualAssert {\n                 let mut applicability = Applicability::MachineApplicable;\n                 let format_args_snip = snippet_with_applicability(cx, format_args.inputs_span(), \"..\", &mut applicability);\n                 let cond = cond.peel_drop_temps();\n+                let mut comments = span_extract_comment(cx.sess().source_map(), expr.span);\n+                if !comments.is_empty() {\n+                    comments += \"\\n\";\n+                }\n                 let (cond, not) = match cond.kind {\n                     ExprKind::Unary(UnOp::Not, e) => (e, \"\"),\n                     _ => (cond, \"!\"),\n                 };\n                 let cond_sugg = sugg::Sugg::hir_with_applicability(cx, cond, \"..\", &mut applicability).maybe_par();\n                 let sugg = format!(\"assert!({not}{cond_sugg}, {format_args_snip});\");\n-                span_lint_and_sugg(\n+                // we show to the user the suggestion without the comments, but when applicating the fix, include the comments in the block\n+                span_lint_and_then(\n                     cx,\n                     MANUAL_ASSERT,\n                     expr.span,\n                     \"only a `panic!` in `if`-then statement\",\n-                    \"try\",\n-                    sugg,\n-                    Applicability::MachineApplicable,\n+                    |diag| {\n+                        // comments can be noisy, do not show them to the user\n+                        diag.tool_only_span_suggestion(\n+                                    expr.span.shrink_to_lo(),\n+                                    \"add comments back\",\n+                                    comments,\n+                                    applicability);\n+                        diag.span_suggestion(\n+                                    expr.span,\n+                                    \"try instead\",\n+                                    sugg,\n+                                    applicability);\n+                                     }\n+\n                 );\n             }\n         }"}, {"sha": "d67ceaec0358aed13ccd0aeb6384ec919e5792f9", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/11a6d19c5966a0fd1be226be705f3f50cde1b20d/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a6d19c5966a0fd1be226be705f3f50cde1b20d/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=11a6d19c5966a0fd1be226be705f3f50cde1b20d", "patch": "@@ -2295,6 +2295,29 @@ pub fn span_contains_comment(sm: &SourceMap, span: Span) -> bool {\n     });\n }\n \n+/// Return all the comments a given span contains\n+/// Comments are returned wrapped with their relevant delimiters\n+pub fn span_extract_comment(sm: &SourceMap, span: Span) -> String {\n+    let snippet = sm.span_to_snippet(span).unwrap_or_default();\n+    let mut comments_buf: Vec<String> = Vec::new();\n+    let mut index: usize = 0;\n+\n+    for token in tokenize(&snippet) {\n+        let token_range = index..(index + token.len as usize);\n+        index += token.len as usize;\n+        match token.kind {\n+            TokenKind::BlockComment { .. } | TokenKind::LineComment { .. } => {\n+                if let Some(comment) = snippet.get(token_range) {\n+                    comments_buf.push(comment.to_string());\n+                }\n+            },\n+            _ => (),\n+        }\n+    }\n+\n+    comments_buf.join(\"\\n\")\n+}\n+\n macro_rules! op_utils {\n     ($($name:ident $assign:ident)*) => {\n         /// Binary operation traits like `LangItem::Add`"}, {"sha": "84f6855f3387bc232c9cc8c10b1e6d6eff57e067", "filename": "tests/ui/manual_assert.edition2018.fixed", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/11a6d19c5966a0fd1be226be705f3f50cde1b20d/tests%2Fui%2Fmanual_assert.edition2018.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11a6d19c5966a0fd1be226be705f3f50cde1b20d/tests%2Fui%2Fmanual_assert.edition2018.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2018.fixed?ref=11a6d19c5966a0fd1be226be705f3f50cde1b20d", "patch": "@@ -4,7 +4,7 @@\n // run-rustfix\n \n #![warn(clippy::manual_assert)]\n-#![allow(clippy::nonminimal_bool)]\n+#![allow(dead_code, unused_doc_comments, clippy::nonminimal_bool)]\n \n macro_rules! one {\n     () => {\n@@ -50,3 +50,14 @@ fn main() {\n     assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");\n     assert!(!a.is_empty(), \"with expansion {}\", one!());\n }\n+\n+fn issue7730(a: u8) {\n+    // Suggestion should preserve comment\n+    // comment\n+/* this is a\n+        multiline\n+        comment */\n+/// Doc comment\n+// comment after `panic!`\n+assert!(!(a > 2), \"panic with comment\");\n+}"}, {"sha": "dbd21be2da9e181b9f153927e312a27b8232c230", "filename": "tests/ui/manual_assert.edition2018.stderr", "status": "modified", "additions": 65, "deletions": 9, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/11a6d19c5966a0fd1be226be705f3f50cde1b20d/tests%2Fui%2Fmanual_assert.edition2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11a6d19c5966a0fd1be226be705f3f50cde1b20d/tests%2Fui%2Fmanual_assert.edition2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2018.stderr?ref=11a6d19c5966a0fd1be226be705f3f50cde1b20d", "patch": "@@ -4,65 +4,121 @@ error: only a `panic!` in `if`-then statement\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qaqaq{:?}\", a);\n LL | |     }\n-   | |_____^ help: try: `assert!(a.is_empty(), \"qaqaq{:?}\", a);`\n+   | |_____^\n    |\n    = note: `-D clippy::manual-assert` implied by `-D warnings`\n+help: try instead\n+   |\n+LL |     assert!(a.is_empty(), \"qaqaq{:?}\", a);\n+   |\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:33:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qwqwq\");\n LL | |     }\n-   | |_____^ help: try: `assert!(a.is_empty(), \"qwqwq\");`\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(a.is_empty(), \"qwqwq\");\n+   |\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:50:5\n    |\n LL | /     if b.is_empty() {\n LL | |         panic!(\"panic1\");\n LL | |     }\n-   | |_____^ help: try: `assert!(!b.is_empty(), \"panic1\");`\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!b.is_empty(), \"panic1\");\n+   |\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:53:5\n    |\n LL | /     if b.is_empty() && a.is_empty() {\n LL | |         panic!(\"panic2\");\n LL | |     }\n-   | |_____^ help: try: `assert!(!(b.is_empty() && a.is_empty()), \"panic2\");`\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!(b.is_empty() && a.is_empty()), \"panic2\");\n+   |\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:56:5\n    |\n LL | /     if a.is_empty() && !b.is_empty() {\n LL | |         panic!(\"panic3\");\n LL | |     }\n-   | |_____^ help: try: `assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");`\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");\n+   |\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:59:5\n    |\n LL | /     if b.is_empty() || a.is_empty() {\n LL | |         panic!(\"panic4\");\n LL | |     }\n-   | |_____^ help: try: `assert!(!(b.is_empty() || a.is_empty()), \"panic4\");`\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!(b.is_empty() || a.is_empty()), \"panic4\");\n+   |\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:62:5\n    |\n LL | /     if a.is_empty() || !b.is_empty() {\n LL | |         panic!(\"panic5\");\n LL | |     }\n-   | |_____^ help: try: `assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");`\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");\n+   |\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:65:5\n    |\n LL | /     if a.is_empty() {\n LL | |         panic!(\"with expansion {}\", one!())\n LL | |     }\n-   | |_____^ help: try: `assert!(!a.is_empty(), \"with expansion {}\", one!());`\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!a.is_empty(), \"with expansion {}\", one!());\n+   |\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:72:5\n+   |\n+LL | /     if a > 2 {\n+LL | |         // comment\n+LL | |         /* this is a\n+LL | |         multiline\n+...  |\n+LL | |         panic!(\"panic with comment\") // comment after `panic!`\n+LL | |     }\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!(a > 2), \"panic with comment\");\n+   |\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "84f6855f3387bc232c9cc8c10b1e6d6eff57e067", "filename": "tests/ui/manual_assert.edition2021.fixed", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/11a6d19c5966a0fd1be226be705f3f50cde1b20d/tests%2Fui%2Fmanual_assert.edition2021.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/11a6d19c5966a0fd1be226be705f3f50cde1b20d/tests%2Fui%2Fmanual_assert.edition2021.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2021.fixed?ref=11a6d19c5966a0fd1be226be705f3f50cde1b20d", "patch": "@@ -4,7 +4,7 @@\n // run-rustfix\n \n #![warn(clippy::manual_assert)]\n-#![allow(clippy::nonminimal_bool)]\n+#![allow(dead_code, unused_doc_comments, clippy::nonminimal_bool)]\n \n macro_rules! one {\n     () => {\n@@ -50,3 +50,14 @@ fn main() {\n     assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");\n     assert!(!a.is_empty(), \"with expansion {}\", one!());\n }\n+\n+fn issue7730(a: u8) {\n+    // Suggestion should preserve comment\n+    // comment\n+/* this is a\n+        multiline\n+        comment */\n+/// Doc comment\n+// comment after `panic!`\n+assert!(!(a > 2), \"panic with comment\");\n+}"}, {"sha": "dbd21be2da9e181b9f153927e312a27b8232c230", "filename": "tests/ui/manual_assert.edition2021.stderr", "status": "modified", "additions": 65, "deletions": 9, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/11a6d19c5966a0fd1be226be705f3f50cde1b20d/tests%2Fui%2Fmanual_assert.edition2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11a6d19c5966a0fd1be226be705f3f50cde1b20d/tests%2Fui%2Fmanual_assert.edition2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.edition2021.stderr?ref=11a6d19c5966a0fd1be226be705f3f50cde1b20d", "patch": "@@ -4,65 +4,121 @@ error: only a `panic!` in `if`-then statement\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qaqaq{:?}\", a);\n LL | |     }\n-   | |_____^ help: try: `assert!(a.is_empty(), \"qaqaq{:?}\", a);`\n+   | |_____^\n    |\n    = note: `-D clippy::manual-assert` implied by `-D warnings`\n+help: try instead\n+   |\n+LL |     assert!(a.is_empty(), \"qaqaq{:?}\", a);\n+   |\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:33:5\n    |\n LL | /     if !a.is_empty() {\n LL | |         panic!(\"qwqwq\");\n LL | |     }\n-   | |_____^ help: try: `assert!(a.is_empty(), \"qwqwq\");`\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(a.is_empty(), \"qwqwq\");\n+   |\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:50:5\n    |\n LL | /     if b.is_empty() {\n LL | |         panic!(\"panic1\");\n LL | |     }\n-   | |_____^ help: try: `assert!(!b.is_empty(), \"panic1\");`\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!b.is_empty(), \"panic1\");\n+   |\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:53:5\n    |\n LL | /     if b.is_empty() && a.is_empty() {\n LL | |         panic!(\"panic2\");\n LL | |     }\n-   | |_____^ help: try: `assert!(!(b.is_empty() && a.is_empty()), \"panic2\");`\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!(b.is_empty() && a.is_empty()), \"panic2\");\n+   |\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:56:5\n    |\n LL | /     if a.is_empty() && !b.is_empty() {\n LL | |         panic!(\"panic3\");\n LL | |     }\n-   | |_____^ help: try: `assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");`\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!(a.is_empty() && !b.is_empty()), \"panic3\");\n+   |\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:59:5\n    |\n LL | /     if b.is_empty() || a.is_empty() {\n LL | |         panic!(\"panic4\");\n LL | |     }\n-   | |_____^ help: try: `assert!(!(b.is_empty() || a.is_empty()), \"panic4\");`\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!(b.is_empty() || a.is_empty()), \"panic4\");\n+   |\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:62:5\n    |\n LL | /     if a.is_empty() || !b.is_empty() {\n LL | |         panic!(\"panic5\");\n LL | |     }\n-   | |_____^ help: try: `assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");`\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!(a.is_empty() || !b.is_empty()), \"panic5\");\n+   |\n \n error: only a `panic!` in `if`-then statement\n   --> $DIR/manual_assert.rs:65:5\n    |\n LL | /     if a.is_empty() {\n LL | |         panic!(\"with expansion {}\", one!())\n LL | |     }\n-   | |_____^ help: try: `assert!(!a.is_empty(), \"with expansion {}\", one!());`\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!a.is_empty(), \"with expansion {}\", one!());\n+   |\n+\n+error: only a `panic!` in `if`-then statement\n+  --> $DIR/manual_assert.rs:72:5\n+   |\n+LL | /     if a > 2 {\n+LL | |         // comment\n+LL | |         /* this is a\n+LL | |         multiline\n+...  |\n+LL | |         panic!(\"panic with comment\") // comment after `panic!`\n+LL | |     }\n+   | |_____^\n+   |\n+help: try instead\n+   |\n+LL |     assert!(!(a > 2), \"panic with comment\");\n+   |\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "14abf94965af03529a42eec35237d66c759af7fc", "filename": "tests/ui/manual_assert.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11a6d19c5966a0fd1be226be705f3f50cde1b20d/tests%2Fui%2Fmanual_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a6d19c5966a0fd1be226be705f3f50cde1b20d/tests%2Fui%2Fmanual_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_assert.rs?ref=11a6d19c5966a0fd1be226be705f3f50cde1b20d", "patch": "@@ -4,7 +4,7 @@\n // run-rustfix\n \n #![warn(clippy::manual_assert)]\n-#![allow(clippy::nonminimal_bool)]\n+#![allow(dead_code, unused_doc_comments, clippy::nonminimal_bool)]\n \n macro_rules! one {\n     () => {\n@@ -66,3 +66,15 @@ fn main() {\n         panic!(\"with expansion {}\", one!())\n     }\n }\n+\n+fn issue7730(a: u8) {\n+    // Suggestion should preserve comment\n+    if a > 2 {\n+        // comment\n+        /* this is a\n+        multiline\n+        comment */\n+        /// Doc comment\n+        panic!(\"panic with comment\") // comment after `panic!`\n+    }\n+}"}]}