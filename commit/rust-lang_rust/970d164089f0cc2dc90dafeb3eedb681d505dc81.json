{"sha": "970d164089f0cc2dc90dafeb3eedb681d505dc81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MGQxNjQwODlmMGNjMmRjOTBkYWZlYjNlZWRiNjgxZDUwNWRjODE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-24T15:46:11Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-04-10T15:25:57Z"}, "message": "Fix and optimize init intrinsic", "tree": {"sha": "a340199be12c8e664db05b76df4952529289176b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a340199be12c8e664db05b76df4952529289176b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/970d164089f0cc2dc90dafeb3eedb681d505dc81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/970d164089f0cc2dc90dafeb3eedb681d505dc81", "html_url": "https://github.com/rust-lang/rust/commit/970d164089f0cc2dc90dafeb3eedb681d505dc81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/970d164089f0cc2dc90dafeb3eedb681d505dc81/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16f41266567b16924cd0dff66122db041cc613a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/16f41266567b16924cd0dff66122db041cc613a5", "html_url": "https://github.com/rust-lang/rust/commit/16f41266567b16924cd0dff66122db041cc613a5"}], "stats": {"total": 67, "additions": 58, "deletions": 9}, "files": [{"sha": "dd42257b1946f47341c44967d44612973f91069a", "filename": "example/mini_core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/970d164089f0cc2dc90dafeb3eedb681d505dc81/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970d164089f0cc2dc90dafeb3eedb681d505dc81/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=970d164089f0cc2dc90dafeb3eedb681d505dc81", "patch": "@@ -371,6 +371,7 @@ pub mod intrinsics {\n         pub fn copy<T>(src: *const T, dst: *mut T, count: usize);\n         pub fn transmute<T, U>(e: T) -> U;\n         pub fn uninit<T>() -> T;\n+        pub fn init<T>() -> T;\n         pub fn ctlz_nonzero<T>(x: T) -> T;\n         pub fn needs_drop<T>() -> bool;\n         pub fn bitreverse<T>(x: T) -> T;"}, {"sha": "fdd26f8791d6650f45fd611bd57368c5aa109c33", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/970d164089f0cc2dc90dafeb3eedb681d505dc81/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970d164089f0cc2dc90dafeb3eedb681d505dc81/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=970d164089f0cc2dc90dafeb3eedb681d505dc81", "patch": "@@ -165,6 +165,29 @@ fn main() {\n         struct MyDst<T: ?Sized>(T);\n \n         intrinsics::size_of_val(&MyDst([0u8; 4]) as &MyDst<[u8]>);\n+\n+        struct Foo {\n+            x: u8,\n+            y: !,\n+        }\n+\n+        unsafe fn zeroed<T>() -> T {\n+            intrinsics::init::<T>()\n+        }\n+\n+        unsafe fn uninitialized<T>() -> T {\n+            intrinsics::uninit::<T>()\n+        }\n+\n+        #[allow(unreachable_code)]\n+        {\n+            if false {\n+                zeroed::<!>();\n+                zeroed::<Foo>();\n+                zeroed::<(u8, u8)>();\n+                uninitialized::<Foo>();\n+            }\n+        }\n     }\n \n     let _ = box NoisyDrop {"}, {"sha": "34b58c5b40735f511c1e35f69761c33aed338c6d", "filename": "src/intrinsics.rs", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/970d164089f0cc2dc90dafeb3eedb681d505dc81/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970d164089f0cc2dc90dafeb3eedb681d505dc81/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=970d164089f0cc2dc90dafeb3eedb681d505dc81", "patch": "@@ -337,16 +337,36 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             let dst_layout = fx.layout_of(dst_ty);\n             ret.write_cvalue(fx, CValue::ByRef(addr, dst_layout))\n         };\n-        init, <T> () {\n-            let layout = fx.layout_of(T);\n-            let inited_place = CPlace::new_stack_slot(fx, T);\n-            let addr = inited_place.to_addr(fx);\n-            let zero_val = fx.bcx.ins().iconst(types::I8, 0);\n-            let len_val = fx.bcx.ins().iconst(pointer_ty(fx.tcx), layout.size.bytes() as i64);\n-            fx.bcx.call_memset(fx.module.target_config(), addr, zero_val, len_val);\n+        init, () {\n+            if ret.layout().abi == Abi::Uninhabited {\n+                crate::trap::trap_panic(&mut fx.bcx);\n+                return;\n+            }\n \n-            let inited_val = inited_place.to_cvalue(fx);\n-            ret.write_cvalue(fx, inited_val);\n+            match ret {\n+                CPlace::NoPlace(_layout) => {}\n+                CPlace::Var(var, layout) => {\n+                    let clif_ty = fx.clif_type(layout.ty).unwrap();\n+                    let val = match clif_ty {\n+                        types::I8 | types::I16 | types::I32 | types::I64 => fx.bcx.ins().iconst(clif_ty, 0),\n+                        types::F32 => {\n+                            let zero = fx.bcx.ins().iconst(types::I32, 0);\n+                            fx.bcx.ins().bitcast(types::F32, zero)\n+                        }\n+                        types::F64 => {\n+                            let zero = fx.bcx.ins().iconst(types::I64, 0);\n+                            fx.bcx.ins().bitcast(types::F64, zero)\n+                        }\n+                        _ => panic!(\"clif_type returned {}\", clif_ty),\n+                    };\n+                    fx.bcx.def_var(mir_var(var), val);\n+                }\n+                _ => {\n+                    let addr = ret.to_addr(fx);\n+                    let layout = ret.layout();\n+                    fx.bcx.emit_small_memset(fx.module.target_config(), addr, 0, layout.size.bytes(), 1);\n+                }\n+            }\n         };\n         write_bytes, (c dst, v val, v count) {\n             let pointee_ty = dst.layout().ty.builtin_deref(true).unwrap().ty;\n@@ -356,6 +376,11 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             fx.bcx.call_memset(fx.module.target_config(), dst_ptr, val, count);\n         };\n         uninit, <T> () {\n+            if ret.layout().abi == Abi::Uninhabited {\n+                crate::trap::trap_panic(&mut fx.bcx);\n+                return;\n+            }\n+\n             let uninit_place = CPlace::new_stack_slot(fx, T);\n             let uninit_val = uninit_place.to_cvalue(fx);\n             ret.write_cvalue(fx, uninit_val);"}]}