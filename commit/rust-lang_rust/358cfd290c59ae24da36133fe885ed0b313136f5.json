{"sha": "358cfd290c59ae24da36133fe885ed0b313136f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1OGNmZDI5MGM1OWFlMjRkYTM2MTMzZmU4ODVlZDBiMzEzMTM2ZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-16T08:17:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-16T08:17:57Z"}, "message": "Auto merge of #996 - christianpoveda:unsup-wo-isolation, r=RalfJung\n\nAdd function to error with enabled isolation\n\nFixes https://github.com/rust-lang/miri/issues/986\nr? @RalfJung", "tree": {"sha": "b620a2c3ce23a38b168f4a2abda2486c7905b476", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b620a2c3ce23a38b168f4a2abda2486c7905b476"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/358cfd290c59ae24da36133fe885ed0b313136f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/358cfd290c59ae24da36133fe885ed0b313136f5", "html_url": "https://github.com/rust-lang/rust/commit/358cfd290c59ae24da36133fe885ed0b313136f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/358cfd290c59ae24da36133fe885ed0b313136f5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49cab51ac3c53ba3fd1f54b0390ed023361f6a07", "url": "https://api.github.com/repos/rust-lang/rust/commits/49cab51ac3c53ba3fd1f54b0390ed023361f6a07", "html_url": "https://github.com/rust-lang/rust/commit/49cab51ac3c53ba3fd1f54b0390ed023361f6a07"}, {"sha": "78311a713218b9923cd5ab73b62a9fe2485c7d22", "url": "https://api.github.com/repos/rust-lang/rust/commits/78311a713218b9923cd5ab73b62a9fe2485c7d22", "html_url": "https://github.com/rust-lang/rust/commit/78311a713218b9923cd5ab73b62a9fe2485c7d22"}], "stats": {"total": 49, "additions": 19, "deletions": 30}, "files": [{"sha": "e3f818414da3d9a79fdf64b8193b5b08a57b8508", "filename": "src/helpers.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/358cfd290c59ae24da36133fe885ed0b313136f5/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/358cfd290c59ae24da36133fe885ed0b313136f5/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=358cfd290c59ae24da36133fe885ed0b313136f5", "patch": "@@ -336,7 +336,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             )?;\n             offset += imm.layout.size;\n         }\n+        Ok(())\n+    }\n \n+    /// Helper function used inside the shims of foreign functions to check that isolation is\n+    /// disabled. It returns an error using the `name` of the foreign function if this is not the\n+    /// case.\n+    fn check_no_isolation(&mut self, name: &str) -> InterpResult<'tcx> {\n+        if !self.eval_context_mut().machine.communicate {\n+            throw_unsup_format!(\"`{}` not available when isolation is enabled. Pass the flag `-Zmiri-disable-isolation` to disable it.\", name)\n+        }\n         Ok(())\n     }\n }"}, {"sha": "ae800c2315fe110e87d6c4079521ae52296bbead", "filename": "src/shims/env.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/358cfd290c59ae24da36133fe885ed0b313136f5/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/358cfd290c59ae24da36133fe885ed0b313136f5/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=358cfd290c59ae24da36133fe885ed0b313136f5", "patch": "@@ -120,9 +120,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, Scalar<Tag>> {\n         let this = self.eval_context_mut();\n \n-        if !this.machine.communicate {\n-            throw_unsup_format!(\"`getcwd` not available when isolation is enabled\")\n-        }\n+        this.check_no_isolation(\"getcwd\")?;\n \n         let tcx = &{ this.tcx.tcx };\n \n@@ -158,9 +156,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn chdir(&mut self, path_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        if !this.machine.communicate {\n-            throw_unsup_format!(\"`chdir` not available when isolation is enabled\")\n-        }\n+        this.check_no_isolation(\"chdir\")?;\n \n         let path_bytes = this\n             .memory()"}, {"sha": "445c98fd9fa4d7f78b9497c6b117238e28b8185c", "filename": "src/shims/fs.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/358cfd290c59ae24da36133fe885ed0b313136f5/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/358cfd290c59ae24da36133fe885ed0b313136f5/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=358cfd290c59ae24da36133fe885ed0b313136f5", "patch": "@@ -35,9 +35,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        if !this.machine.communicate {\n-            throw_unsup_format!(\"`open` not available when isolation is enabled\")\n-        }\n+        this.check_no_isolation(\"open\")?;\n \n         let flag = this.read_scalar(flag_op)?.to_i32()?;\n \n@@ -120,9 +118,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        if !this.machine.communicate {\n-            throw_unsup_format!(\"`fcntl` not available when isolation is enabled\")\n-        }\n+        this.check_no_isolation(\"fcntl\")?;\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n         let cmd = this.read_scalar(cmd_op)?.to_i32()?;\n@@ -142,9 +138,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn close(&mut self, fd_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        if !this.machine.communicate {\n-            throw_unsup_format!(\"`close` not available when isolation is enabled\")\n-        }\n+        this.check_no_isolation(\"close\")?;\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n \n@@ -161,9 +155,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i64> {\n         let this = self.eval_context_mut();\n \n-        if !this.machine.communicate {\n-            throw_unsup_format!(\"`read` not available when isolation is enabled\")\n-        }\n+        this.check_no_isolation(\"read\")?;\n \n         let tcx = &{ this.tcx.tcx };\n \n@@ -198,9 +190,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i64> {\n         let this = self.eval_context_mut();\n \n-        if !this.machine.communicate {\n-            throw_unsup_format!(\"`write` not available when isolation is enabled\")\n-        }\n+        this.check_no_isolation(\"write\")?;\n \n         let tcx = &{ this.tcx.tcx };\n \n@@ -226,9 +216,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn unlink( &mut self, path_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        if !this.machine.communicate {\n-            throw_unsup_format!(\"`write` not available when isolation is enabled\")\n-        }\n+        this.check_no_isolation(\"unlink\")?;\n \n         let path_bytes = this\n             .memory()"}, {"sha": "d75cb7bad38455cd0da130112a7a3beb94c8f2cd", "filename": "src/shims/time.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/358cfd290c59ae24da36133fe885ed0b313136f5/src%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/358cfd290c59ae24da36133fe885ed0b313136f5/src%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftime.rs?ref=358cfd290c59ae24da36133fe885ed0b313136f5", "patch": "@@ -41,9 +41,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        if !this.machine.communicate {\n-            throw_unsup_format!(\"`clock_gettime` not available when isolation is enabled\")\n-        }\n+        this.check_no_isolation(\"clock_gettime\")?;\n \n         let clk_id = this.read_scalar(clk_id_op)?.to_i32()?;\n         if clk_id != this.eval_libc_i32(\"CLOCK_REALTIME\")? {\n@@ -75,9 +73,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        if !this.machine.communicate {\n-            throw_unsup_format!(\"`gettimeofday` not available when isolation is enabled\")\n-        }\n+        this.check_no_isolation(\"gettimeofday\")?;\n         // Using tz is obsolete and should always be null\n         let tz = this.read_scalar(tz_op)?.not_undef()?;\n         if !this.is_null(tz)? {"}]}