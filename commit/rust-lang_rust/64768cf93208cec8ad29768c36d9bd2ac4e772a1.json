{"sha": "64768cf93208cec8ad29768c36d9bd2ac4e772a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NzY4Y2Y5MzIwOGNlYzhhZDI5NzY4YzM2ZDliZDJhYzRlNzcyYTE=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-05-21T14:19:26Z"}, "committer": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-05-21T14:37:55Z"}, "message": "fix label prefix", "tree": {"sha": "bb19b58e78259a9879fcb4fabe62183be24aaea3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb19b58e78259a9879fcb4fabe62183be24aaea3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64768cf93208cec8ad29768c36d9bd2ac4e772a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64768cf93208cec8ad29768c36d9bd2ac4e772a1", "html_url": "https://github.com/rust-lang/rust/commit/64768cf93208cec8ad29768c36d9bd2ac4e772a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64768cf93208cec8ad29768c36d9bd2ac4e772a1/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "150765d755fdfcab5d6f2949be7ad9df37e36e86", "url": "https://api.github.com/repos/rust-lang/rust/commits/150765d755fdfcab5d6f2949be7ad9df37e36e86", "html_url": "https://github.com/rust-lang/rust/commit/150765d755fdfcab5d6f2949be7ad9df37e36e86"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "ea3ac5f58f28e61372bb879a06c632c7e95c8a02", "filename": "src/expr.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/64768cf93208cec8ad29768c36d9bd2ac4e772a1/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64768cf93208cec8ad29768c36d9bd2ac4e772a1/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=64768cf93208cec8ad29768c36d9bd2ac4e772a1", "patch": "@@ -122,27 +122,28 @@ pub fn format_expr(\n             match expr_type {\n                 ExprType::Statement => {\n                     if is_unsafe_block(block) {\n-                        rewrite_block(block, Some(&expr.attrs), context, shape)\n+                        rewrite_block(block, Some(&expr.attrs), opt_label, context, shape)\n                     } else if let rw @ Some(_) =\n                         rewrite_empty_block(context, block, Some(&expr.attrs), \"\", shape)\n                     {\n                         // Rewrite block without trying to put it in a single line.\n                         rw\n                     } else {\n                         let prefix = block_prefix(context, block, shape)?;\n-                        let label_string = rewrite_label(opt_label);\n \n                         rewrite_block_with_visitor(\n                             context,\n-                            &format!(\"{}{}\", &prefix, &label_string),\n+                            &prefix,\n                             block,\n                             Some(&expr.attrs),\n                             shape,\n                             true,\n                         )\n                     }\n                 }\n-                ExprType::SubExpression => rewrite_block(block, Some(&expr.attrs), context, shape),\n+                ExprType::SubExpression => {\n+                    rewrite_block(block, Some(&expr.attrs), opt_label, context, shape)\n+                }\n             }\n         }\n         ast::ExprKind::Match(ref cond, ref arms) => {\n@@ -328,6 +329,7 @@ pub fn format_expr(\n                     rewrite_block(\n                         block,\n                         Some(&expr.attrs),\n+                        None,\n                         context,\n                         Shape::legacy(budget, shape.indent)\n                     )?\n@@ -645,17 +647,20 @@ pub fn rewrite_block_with_visitor(\n \n impl Rewrite for ast::Block {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        rewrite_block(self, None, context, shape)\n+        rewrite_block(self, None, None, context, shape)\n     }\n }\n \n fn rewrite_block(\n     block: &ast::Block,\n     attrs: Option<&[ast::Attribute]>,\n+    label: Option<ast::Label>,\n     context: &RewriteContext,\n     shape: Shape,\n ) -> Option<String> {\n-    let prefix = block_prefix(context, block, shape)?;\n+    let unsafe_string = block_prefix(context, block, shape)?;\n+    let label_string = rewrite_label(label);\n+    let prefix = format!(\"{}{}\", unsafe_string, label_string);\n \n     // shape.width is used only for the single line case: either the empty block `{}`,\n     // or an unsafe expression `unsafe { e }`."}, {"sha": "2c79fd35e70caa51af16f8bae8932c5669baa181", "filename": "tests/source/label_break.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/64768cf93208cec8ad29768c36d9bd2ac4e772a1/tests%2Fsource%2Flabel_break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64768cf93208cec8ad29768c36d9bd2ac4e772a1/tests%2Fsource%2Flabel_break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Flabel_break.rs?ref=64768cf93208cec8ad29768c36d9bd2ac4e772a1", "patch": "@@ -3,10 +3,22 @@ fn main() {\n \n 'empty_block: {}\n \n+'block: {\n+    do_thing();\n+    if condition_not_met() {\n+        break 'block;\n+    }\n+    do_next_thing();\n+    if condition_not_met() {\n+        break 'block;\n+    }\n+    do_last_thing();\n+}\n+\n let result = 'block: {\n     if foo() {\n         // comment\n-        break 'block 1;\n+        break 'block       1;\n     }\n     if bar() { /* comment */\n         break 'block      2;"}, {"sha": "afbd8e6fcdf077b88389bac9b70787212e126160", "filename": "tests/target/label_break.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/64768cf93208cec8ad29768c36d9bd2ac4e772a1/tests%2Ftarget%2Flabel_break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64768cf93208cec8ad29768c36d9bd2ac4e772a1/tests%2Ftarget%2Flabel_break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Flabel_break.rs?ref=64768cf93208cec8ad29768c36d9bd2ac4e772a1", "patch": "@@ -2,7 +2,19 @@\n fn main() {\n     {}\n \n-    let result = {\n+    {\n+        do_thing();\n+        if condition_not_met() {\n+            break 'block;\n+        }\n+        do_next_thing();\n+        if condition_not_met() {\n+            break 'block;\n+        }\n+        do_last_thing();\n+    }\n+\n+    let result = 'block: {\n         if foo() {\n             // comment\n             break 'block 1;"}]}