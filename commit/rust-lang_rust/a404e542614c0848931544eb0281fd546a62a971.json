{"sha": "a404e542614c0848931544eb0281fd546a62a971", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MDRlNTQyNjE0YzA4NDg5MzE1NDRlYjAyODFmZDU0NmE2MmE5NzE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-10T01:49:20Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-10T01:50:31Z"}, "message": "Teach rustc about const tag value, begin work on trans_copy_ty, make uint's to_str routine less clever and thereby resist overflow.", "tree": {"sha": "9b6437fbbc6632d9b68c80df69d74a0e589e9297", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b6437fbbc6632d9b68c80df69d74a0e589e9297"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a404e542614c0848931544eb0281fd546a62a971", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a404e542614c0848931544eb0281fd546a62a971", "html_url": "https://github.com/rust-lang/rust/commit/a404e542614c0848931544eb0281fd546a62a971", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a404e542614c0848931544eb0281fd546a62a971/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e482d5f69ffb56f0503e783b50599ec0d873dec", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e482d5f69ffb56f0503e783b50599ec0d873dec", "html_url": "https://github.com/rust-lang/rust/commit/3e482d5f69ffb56f0503e783b50599ec0d873dec"}], "stats": {"total": 109, "additions": 84, "deletions": 25}, "files": [{"sha": "d6926f34ebd342abcbf5a4b6b2838fcad67fbf45", "filename": "src/comp/back/abi.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a404e542614c0848931544eb0281fd546a62a971/src%2Fcomp%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a404e542614c0848931544eb0281fd546a62a971/src%2Fcomp%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fabi.rs?ref=a404e542614c0848931544eb0281fd546a62a971", "patch": "@@ -1,6 +1,9 @@\n \n const int rc_base_field_refcnt = 0;\n \n+// FIXME: import from std.dbg when imported consts work.\n+const uint const_refcount = 0x7bad_face_u;\n+\n const int task_field_refcnt = 0;\n const int task_field_stk = 2;\n const int task_field_runtime_sp = 3;"}, {"sha": "65dd29385c2e03c6a03737481469eae9a3ae4fdb", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 72, "deletions": 6, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/a404e542614c0848931544eb0281fd546a62a971/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a404e542614c0848931544eb0281fd546a62a971/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=a404e542614c0848931544eb0281fd546a62a971", "patch": "@@ -394,27 +394,92 @@ fn trans_non_gc_free(@block_ctxt cx, ValueRef v) -> result {\n                                             C_int(0)));\n }\n \n+fn incr_refcnt(@block_ctxt cx, ValueRef box_ptr) -> result {\n+    auto rc_ptr = cx.build.GEP(box_ptr, vec(C_int(0),\n+                                            C_int(abi.box_rc_field_refcnt)));\n+    auto rc = cx.build.Load(rc_ptr);\n+\n+    auto next_cx = new_extension_block_ctxt(cx);\n+    auto rc_adj_cx = new_empty_block_ctxt(cx.fcx);\n+\n+    auto const_test = cx.build.ICmp(lib.llvm.LLVMIntEQ,\n+                                    C_int(abi.const_refcount as int), rc);\n+    cx.build.CondBr(const_test, next_cx.llbb, rc_adj_cx.llbb);\n+\n+    rc = rc_adj_cx.build.Add(rc, C_int(1));\n+    rc_adj_cx.build.Store(rc, rc_ptr);\n+    rc_adj_cx.build.Br(next_cx.llbb);\n+\n+    ret res(next_cx, C_nil());\n+}\n+\n fn decr_refcnt_and_if_zero(@block_ctxt cx,\n                            ValueRef box_ptr,\n                            fn(@block_ctxt cx) -> result inner,\n                            TypeRef t_else, ValueRef v_else) -> result {\n     auto rc_ptr = cx.build.GEP(box_ptr, vec(C_int(0),\n                                             C_int(abi.box_rc_field_refcnt)));\n     auto rc = cx.build.Load(rc_ptr);\n-    rc = cx.build.Sub(rc, C_int(1));\n-    cx.build.Store(rc, rc_ptr);\n-    auto test = cx.build.ICmp(lib.llvm.LLVMIntEQ, C_int(0), rc);\n+\n+    auto rc_adj_cx = new_empty_block_ctxt(cx.fcx);\n     auto next_cx = new_extension_block_ctxt(cx);\n+\n+    auto const_test = cx.build.ICmp(lib.llvm.LLVMIntEQ,\n+                                    C_int(abi.const_refcount as int), rc);\n+    cx.build.CondBr(const_test, next_cx.llbb, rc_adj_cx.llbb);\n+\n+    rc = rc_adj_cx.build.Sub(rc, C_int(1));\n+    rc_adj_cx.build.Store(rc, rc_ptr);\n+\n+    auto zero_test = rc_adj_cx.build.ICmp(lib.llvm.LLVMIntEQ, C_int(0), rc);\n+\n     auto then_cx = new_empty_block_ctxt(cx.fcx);\n     auto then_res = inner(then_cx);\n     then_res.bcx.build.Br(next_cx.llbb);\n-    cx.build.CondBr(test, then_res.bcx.llbb, next_cx.llbb);\n+    rc_adj_cx.build.CondBr(zero_test, then_res.bcx.llbb, next_cx.llbb);\n     auto phi = next_cx.build.Phi(t_else,\n-                                 vec(v_else, then_res.val),\n-                                 vec(cx.llbb, then_res.bcx.llbb));\n+                                 vec(v_else, v_else, then_res.val),\n+                                 vec(cx.llbb,\n+                                     rc_adj_cx.llbb,\n+                                     then_res.bcx.llbb));\n     ret res(next_cx, phi);\n }\n \n+fn type_is_scalar(@ast.ty t) -> bool {\n+    alt (t.node) {\n+        case (ast.ty_nil) { ret true; }\n+        case (ast.ty_bool) { ret true; }\n+        case (ast.ty_int) { ret true; }\n+        case (ast.ty_uint) { ret true; }\n+        case (ast.ty_machine(_)) { ret true; }\n+        case (ast.ty_char) { ret true; }\n+    }\n+    ret false;\n+}\n+\n+fn trans_copy_ty(@block_ctxt cx,\n+                 bool is_init,\n+                 ValueRef dst,\n+                 ValueRef src,\n+                 @ast.ty t) -> result {\n+    if (type_is_scalar(t)) {\n+        ret res(cx, cx.build.Store(src, dst));\n+    }\n+\n+    alt (t.node) {\n+        case (ast.ty_str) {\n+            let result r = res(cx, C_nil());\n+            if (is_init) {\n+                r = trans_drop_str(cx, dst);\n+            }\n+            r = incr_refcnt(r.bcx, src);\n+            ret res(r.bcx, r.bcx.build.Store(src, dst));\n+        }\n+    }\n+    cx.fcx.tcx.sess.unimpl(\"ty variant in trans_copy_ty\");\n+    fail;\n+}\n+\n fn trans_drop_str(@block_ctxt cx, ValueRef v) -> result {\n     ret decr_refcnt_and_if_zero(cx, v,\n                                 bind trans_non_gc_free(_, v),\n@@ -825,6 +890,7 @@ impure fn trans_expr(@block_ctxt cx, &ast.expr e) -> result {\n             auto lhs_res = trans_lval(cx, *dst);\n             check (lhs_res._1);\n             auto rhs_res = trans_expr(lhs_res._0.bcx, *src);\n+            // FIXME: call trans_copy_ty once we have a ty here.\n             ret res(rhs_res.bcx,\n                     rhs_res.bcx.build.Store(rhs_res.val, lhs_res._0.val));\n         }"}, {"sha": "7fa4ea021ac4746d14a3e41409524b098775f8f2", "filename": "src/lib/_uint.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a404e542614c0848931544eb0281fd546a62a971/src%2Flib%2F_uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a404e542614c0848931544eb0281fd546a62a971/src%2Flib%2F_uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_uint.rs?ref=a404e542614c0848931544eb0281fd546a62a971", "patch": "@@ -59,30 +59,20 @@ fn to_str(mutable uint n, uint radix) -> str\n \n     if (n == 0u) { ret \"0\"; }\n \n-    let uint r = 1u;\n-    if (n > r) {\n-        while ((r*radix) <= n) {\n-            r *= radix;\n-        }\n-    }\n-\n     let str s = \"\";\n-    while (n > 0u) {\n-\n-        auto i = n/r;\n-\n-        n -= (i * r);\n-        r /= radix;\n-\n-        s += digit(i) as u8;\n+    while (n != 0u) {\n+        s += digit(n % radix) as u8;\n+        n /= radix;\n     }\n \n-    while (r > 0u) {\n-        s += '0' as u8;\n-        r /= radix;\n+    let str s1 = \"\";\n+    let uint len = _str.byte_len(s);\n+    while (len != 0u) {\n+        len -= 1u;\n+        s1 += s.(len);\n     }\n+    ret s1;\n \n-    ret s;\n }\n \n // Local Variables:"}]}