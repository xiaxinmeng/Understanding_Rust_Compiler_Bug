{"sha": "09d495cc15e3ef3e80fc36f0c217c08c5bfb34de", "node_id": "C_kwDOAAsO6NoAKDA5ZDQ5NWNjMTVlM2VmM2U4MGZjMzZmMGMyMTdjMDhjNWJmYjM0ZGU", "commit": {"author": {"name": "finalchild", "email": "finalchild2@gmail.com", "date": "2022-08-21T16:24:47Z"}, "committer": {"name": "finalchild", "email": "finalchild2@gmail.com", "date": "2022-08-21T16:24:47Z"}, "message": "Replace #[error(..)] etc. to #[diag(..)]", "tree": {"sha": "41df2459af013c93df3016241924693a70d8e0a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41df2459af013c93df3016241924693a70d8e0a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09d495cc15e3ef3e80fc36f0c217c08c5bfb34de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09d495cc15e3ef3e80fc36f0c217c08c5bfb34de", "html_url": "https://github.com/rust-lang/rust/commit/09d495cc15e3ef3e80fc36f0c217c08c5bfb34de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09d495cc15e3ef3e80fc36f0c217c08c5bfb34de/comments", "author": {"login": "finalchild", "id": 8557044, "node_id": "MDQ6VXNlcjg1NTcwNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8557044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/finalchild", "html_url": "https://github.com/finalchild", "followers_url": "https://api.github.com/users/finalchild/followers", "following_url": "https://api.github.com/users/finalchild/following{/other_user}", "gists_url": "https://api.github.com/users/finalchild/gists{/gist_id}", "starred_url": "https://api.github.com/users/finalchild/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/finalchild/subscriptions", "organizations_url": "https://api.github.com/users/finalchild/orgs", "repos_url": "https://api.github.com/users/finalchild/repos", "events_url": "https://api.github.com/users/finalchild/events{/privacy}", "received_events_url": "https://api.github.com/users/finalchild/received_events", "type": "User", "site_admin": false}, "committer": {"login": "finalchild", "id": 8557044, "node_id": "MDQ6VXNlcjg1NTcwNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8557044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/finalchild", "html_url": "https://github.com/finalchild", "followers_url": "https://api.github.com/users/finalchild/followers", "following_url": "https://api.github.com/users/finalchild/following{/other_user}", "gists_url": "https://api.github.com/users/finalchild/gists{/gist_id}", "starred_url": "https://api.github.com/users/finalchild/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/finalchild/subscriptions", "organizations_url": "https://api.github.com/users/finalchild/orgs", "repos_url": "https://api.github.com/users/finalchild/repos", "events_url": "https://api.github.com/users/finalchild/events{/privacy}", "received_events_url": "https://api.github.com/users/finalchild/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70e0af632d0e3903616693dbe834da752ba26d4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/70e0af632d0e3903616693dbe834da752ba26d4c", "html_url": "https://github.com/rust-lang/rust/commit/70e0af632d0e3903616693dbe834da752ba26d4c"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "16ba14e9092168fda7ddcc2d768f1d9dbb176dff", "filename": "compiler/rustc_ast_passes/src/errors.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/09d495cc15e3ef3e80fc36f0c217c08c5bfb34de/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d495cc15e3ef3e80fc36f0c217c08c5bfb34de/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs?ref=09d495cc15e3ef3e80fc36f0c217c08c5bfb34de", "patch": "@@ -7,7 +7,7 @@ use rustc_span::{Span, Symbol};\n use crate::ast_validation::ForbiddenLetReason;\n \n #[derive(SessionDiagnostic)]\n-#[error(ast_passes::forbidden_let)]\n+#[diag(ast_passes::forbidden_let)]\n #[note]\n pub struct ForbiddenLet {\n     #[primary_span]\n@@ -31,29 +31,29 @@ impl AddSubdiagnostic for ForbiddenLetReason {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(ast_passes::forbidden_assoc_constraint)]\n+#[diag(ast_passes::forbidden_assoc_constraint)]\n pub struct ForbiddenAssocConstraint {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(ast_passes::keyword_lifetime)]\n+#[diag(ast_passes::keyword_lifetime)]\n pub struct KeywordLifetime {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(ast_passes::invalid_label)]\n+#[diag(ast_passes::invalid_label)]\n pub struct InvalidLabel {\n     #[primary_span]\n     pub span: Span,\n     pub name: Symbol,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(ast_passes::invalid_visibility, code = \"E0449\")]\n+#[diag(ast_passes::invalid_visibility, code = \"E0449\")]\n pub struct InvalidVisibility {\n     #[primary_span]\n     pub span: Span,\n@@ -72,7 +72,7 @@ pub enum InvalidVisibilityNote {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(ast_passes::trait_fn_async, code = \"E0706\")]\n+#[diag(ast_passes::trait_fn_async, code = \"E0706\")]\n #[note]\n #[note(ast_passes::note2)]\n pub struct TraitFnAsync {\n@@ -83,66 +83,66 @@ pub struct TraitFnAsync {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(ast_passes::trait_fn_const, code = \"E0379\")]\n+#[diag(ast_passes::trait_fn_const, code = \"E0379\")]\n pub struct TraitFnConst {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(ast_passes::forbidden_lifetime_bound)]\n+#[diag(ast_passes::forbidden_lifetime_bound)]\n pub struct ForbiddenLifetimeBound {\n     #[primary_span]\n     pub spans: Vec<Span>,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(ast_passes::forbidden_non_lifetime_param)]\n+#[diag(ast_passes::forbidden_non_lifetime_param)]\n pub struct ForbiddenNonLifetimeParam {\n     #[primary_span]\n     pub spans: Vec<Span>,\n }\n \n #[derive(SessionDiagnostic)]\n-#[fatal(ast_passes::fn_param_too_many)]\n+#[diag(ast_passes::fn_param_too_many)]\n pub struct FnParamTooMany {\n     #[primary_span]\n     pub span: Span,\n     pub max_num_args: usize,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(ast_passes::fn_param_c_var_args_only)]\n+#[diag(ast_passes::fn_param_c_var_args_only)]\n pub struct FnParamCVarArgsOnly {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(ast_passes::fn_param_c_var_args_not_last)]\n+#[diag(ast_passes::fn_param_c_var_args_not_last)]\n pub struct FnParamCVarArgsNotLast {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(ast_passes::fn_param_doc_comment)]\n+#[diag(ast_passes::fn_param_doc_comment)]\n pub struct FnParamDocComment {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(ast_passes::fn_param_forbidden_attr)]\n+#[diag(ast_passes::fn_param_forbidden_attr)]\n pub struct FnParamForbiddenAttr {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(ast_passes::fn_param_forbidden_self)]\n+#[diag(ast_passes::fn_param_forbidden_self)]\n #[note]\n pub struct FnParamForbiddenSelf {\n     #[primary_span]\n@@ -151,7 +151,7 @@ pub struct FnParamForbiddenSelf {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(ast_passes::forbidden_default)]\n+#[diag(ast_passes::forbidden_default)]\n pub struct ForbiddenDefault {\n     #[primary_span]\n     pub span: Span,\n@@ -160,7 +160,7 @@ pub struct ForbiddenDefault {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(ast_passes::assoc_const_without_body)]\n+#[diag(ast_passes::assoc_const_without_body)]\n pub struct AssocConstWithoutBody {\n     #[primary_span]\n     pub span: Span,\n@@ -169,7 +169,7 @@ pub struct AssocConstWithoutBody {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(ast_passes::assoc_fn_without_body)]\n+#[diag(ast_passes::assoc_fn_without_body)]\n pub struct AssocFnWithoutBody {\n     #[primary_span]\n     pub span: Span,\n@@ -178,7 +178,7 @@ pub struct AssocFnWithoutBody {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(ast_passes::assoc_type_without_body)]\n+#[diag(ast_passes::assoc_type_without_body)]\n pub struct AssocTypeWithoutBody {\n     #[primary_span]\n     pub span: Span,\n@@ -187,7 +187,7 @@ pub struct AssocTypeWithoutBody {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(ast_passes::const_without_body)]\n+#[diag(ast_passes::const_without_body)]\n pub struct ConstWithoutBody {\n     #[primary_span]\n     pub span: Span,\n@@ -196,7 +196,7 @@ pub struct ConstWithoutBody {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(ast_passes::static_without_body)]\n+#[diag(ast_passes::static_without_body)]\n pub struct StaticWithoutBody {\n     #[primary_span]\n     pub span: Span,\n@@ -205,7 +205,7 @@ pub struct StaticWithoutBody {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(ast_passes::ty_alias_without_body)]\n+#[diag(ast_passes::ty_alias_without_body)]\n pub struct TyAliasWithoutBody {\n     #[primary_span]\n     pub span: Span,\n@@ -214,7 +214,7 @@ pub struct TyAliasWithoutBody {\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(ast_passes::fn_without_body)]\n+#[diag(ast_passes::fn_without_body)]\n pub struct FnWithoutBody {\n     #[primary_span]\n     pub span: Span,"}]}