{"sha": "affa038c293a1b2b38cc8d323a652c1c279b9391", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZmEwMzhjMjkzYTFiMmIzOGNjOGQzMjNhNjUyYzFjMjc5YjkzOTE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-24T18:28:30Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-24T18:31:14Z"}, "message": "clean up, push silencing logic to more relevant places", "tree": {"sha": "ced6f2f761ee966b8f79301cde040eafdfafd35c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ced6f2f761ee966b8f79301cde040eafdfafd35c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/affa038c293a1b2b38cc8d323a652c1c279b9391", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/affa038c293a1b2b38cc8d323a652c1c279b9391", "html_url": "https://github.com/rust-lang/rust/commit/affa038c293a1b2b38cc8d323a652c1c279b9391", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/affa038c293a1b2b38cc8d323a652c1c279b9391/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9ab4ff9a3746c8663278f7338cfb4aabf96a9bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9ab4ff9a3746c8663278f7338cfb4aabf96a9bb", "html_url": "https://github.com/rust-lang/rust/commit/d9ab4ff9a3746c8663278f7338cfb4aabf96a9bb"}], "stats": {"total": 90, "additions": 49, "deletions": 41}, "files": [{"sha": "6b694bfc8da25eaa78970dc94fec2c8407231035", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/affa038c293a1b2b38cc8d323a652c1c279b9391/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affa038c293a1b2b38cc8d323a652c1c279b9391/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=affa038c293a1b2b38cc8d323a652c1c279b9391", "patch": "@@ -498,9 +498,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 expr.span,\n                 infer::LateBoundRegionConversionTime::FnCall,\n                 &fn_sig.output()).0;\n-            if !fn_sig.output().references_error() {\n-                self.require_type_is_sized_deferred(output, expr.span, traits::SizedReturnType);\n-            }\n+            self.require_type_is_sized_deferred(output, expr.span, traits::SizedReturnType);\n         }\n \n         // We always require that the type provided as the value for"}, {"sha": "02f4f2a3744c6666ceddc7e7377c625fc4eeac5d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 48, "deletions": 38, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/affa038c293a1b2b38cc8d323a652c1c279b9391/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/affa038c293a1b2b38cc8d323a652c1c279b9391/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=affa038c293a1b2b38cc8d323a652c1c279b9391", "patch": "@@ -1097,9 +1097,7 @@ fn check_fn<'a, 'tcx>(\n     *fcx.ps.borrow_mut() = UnsafetyState::function(fn_sig.unsafety, fn_id);\n \n     let declared_ret_ty = fn_sig.output();\n-    if !declared_ret_ty.references_error() {\n-        fcx.require_type_is_sized(declared_ret_ty, decl.output.span(), traits::SizedReturnType);\n-    }\n+    fcx.require_type_is_sized(declared_ret_ty, decl.output.span(), traits::SizedReturnType);\n     let revealed_ret_ty = fcx.instantiate_opaque_types_from_value(\n         fn_id,\n         &declared_ret_ty,\n@@ -2700,30 +2698,39 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             traits::ObligationCause::new(span, self.body_id, code));\n     }\n \n-    pub fn require_type_is_sized(&self,\n-                                 ty: Ty<'tcx>,\n-                                 span: Span,\n-                                 code: traits::ObligationCauseCode<'tcx>)\n-    {\n-        let lang_item = self.tcx.require_lang_item(lang_items::SizedTraitLangItem, None);\n-        self.require_type_meets(ty, span, code, lang_item);\n+    pub fn require_type_is_sized(\n+        &self,\n+        ty: Ty<'tcx>,\n+        span: Span,\n+        code: traits::ObligationCauseCode<'tcx>,\n+    ) {\n+        if !ty.references_error() {\n+            let lang_item = self.tcx.require_lang_item(lang_items::SizedTraitLangItem, None);\n+            self.require_type_meets(ty, span, code, lang_item);\n+        }\n     }\n \n-    pub fn require_type_is_sized_deferred(&self,\n-                                          ty: Ty<'tcx>,\n-                                          span: Span,\n-                                          code: traits::ObligationCauseCode<'tcx>)\n-    {\n-        self.deferred_sized_obligations.borrow_mut().push((ty, span, code));\n+    pub fn require_type_is_sized_deferred(\n+        &self,\n+        ty: Ty<'tcx>,\n+        span: Span,\n+        code: traits::ObligationCauseCode<'tcx>,\n+    ) {\n+        if !ty.references_error() {\n+            self.deferred_sized_obligations.borrow_mut().push((ty, span, code));\n+        }\n     }\n \n-    pub fn register_bound(&self,\n-                          ty: Ty<'tcx>,\n-                          def_id: DefId,\n-                          cause: traits::ObligationCause<'tcx>)\n-    {\n-        self.fulfillment_cx.borrow_mut()\n-                           .register_bound(self, self.param_env, ty, def_id, cause);\n+    pub fn register_bound(\n+        &self,\n+        ty: Ty<'tcx>,\n+        def_id: DefId,\n+        cause: traits::ObligationCause<'tcx>,\n+    ) {\n+        if !ty.references_error() {\n+            self.fulfillment_cx.borrow_mut()\n+                .register_bound(self, self.param_env, ty, def_id, cause);\n+        }\n     }\n \n     pub fn to_ty(&self, ast_t: &hir::Ty) -> Ty<'tcx> {\n@@ -2782,22 +2789,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     /// Registers an obligation for checking later, during regionck, that the type `ty` must\n     /// outlive the region `r`.\n-    pub fn register_wf_obligation(&self,\n-                                  ty: Ty<'tcx>,\n-                                  span: Span,\n-                                  code: traits::ObligationCauseCode<'tcx>)\n-    {\n+    pub fn register_wf_obligation(\n+        &self,\n+        ty: Ty<'tcx>,\n+        span: Span,\n+        code: traits::ObligationCauseCode<'tcx>,\n+    ) {\n         // WF obligations never themselves fail, so no real need to give a detailed cause:\n         let cause = traits::ObligationCause::new(span, self.body_id, code);\n-        self.register_predicate(traits::Obligation::new(cause,\n-                                                        self.param_env,\n-                                                        ty::Predicate::WellFormed(ty)));\n+        self.register_predicate(\n+            traits::Obligation::new(cause, self.param_env, ty::Predicate::WellFormed(ty)),\n+        );\n     }\n \n     /// Registers obligations that all types appearing in `substs` are well-formed.\n     pub fn add_wf_bounds(&self, substs: SubstsRef<'tcx>, expr: &hir::Expr) {\n         for ty in substs.types() {\n-            self.register_wf_obligation(ty, expr.span, traits::MiscObligation);\n+            if !ty.references_error() {\n+                self.register_wf_obligation(ty, expr.span, traits::MiscObligation);\n+            }\n         }\n     }\n \n@@ -2836,12 +2846,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     // FIXME(arielb1): use this instead of field.ty everywhere\n     // Only for fields! Returns <none> for methods>\n     // Indifferent to privacy flags\n-    pub fn field_ty(&self,\n-                    span: Span,\n-                    field: &'tcx ty::FieldDef,\n-                    substs: SubstsRef<'tcx>)\n-                    -> Ty<'tcx>\n-    {\n+    pub fn field_ty(\n+        &self,\n+        span: Span,\n+        field: &'tcx ty::FieldDef,\n+        substs: SubstsRef<'tcx>,\n+    ) -> Ty<'tcx> {\n         self.normalize_associated_types_in(span, &field.ty(self.tcx, substs))\n     }\n "}]}