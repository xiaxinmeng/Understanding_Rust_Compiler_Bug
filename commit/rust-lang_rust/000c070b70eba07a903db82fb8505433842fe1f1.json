{"sha": "000c070b70eba07a903db82fb8505433842fe1f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMGMwNzBiNzBlYmEwN2E5MDNkYjgyZmI4NTA1NDMzODQyZmUxZjE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-07-22T08:42:36Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-08-06T19:13:11Z"}, "message": "rustc_ast/comments: Modernize some enum reexports", "tree": {"sha": "657436dd67e079ff2abeef5a34dd2578841c6ebb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/657436dd67e079ff2abeef5a34dd2578841c6ebb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/000c070b70eba07a903db82fb8505433842fe1f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/000c070b70eba07a903db82fb8505433842fe1f1", "html_url": "https://github.com/rust-lang/rust/commit/000c070b70eba07a903db82fb8505433842fe1f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/000c070b70eba07a903db82fb8505433842fe1f1/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46f48d31fed06295a83f7695b74159ff58a0943c", "url": "https://api.github.com/repos/rust-lang/rust/commits/46f48d31fed06295a83f7695b74159ff58a0943c", "html_url": "https://github.com/rust-lang/rust/commit/46f48d31fed06295a83f7695b74159ff58a0943c"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "20d44d5a6a73977d3f214082806747c3d219a4a7", "filename": "src/librustc_ast/util/comments.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/000c070b70eba07a903db82fb8505433842fe1f1/src%2Flibrustc_ast%2Futil%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000c070b70eba07a903db82fb8505433842fe1f1/src%2Flibrustc_ast%2Futil%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Futil%2Fcomments.rs?ref=000c070b70eba07a903db82fb8505433842fe1f1", "patch": "@@ -1,5 +1,3 @@\n-pub use CommentStyle::*;\n-\n use crate::ast::AttrStyle;\n use crate::token::CommentKind;\n use rustc_span::source_map::SourceMap;\n@@ -198,7 +196,7 @@ pub fn gather_comments(sm: &SourceMap, path: FileName, src: String) -> Vec<Comme\n \n     if let Some(shebang_len) = rustc_lexer::strip_shebang(text) {\n         comments.push(Comment {\n-            style: Isolated,\n+            style: CommentStyle::Isolated,\n             lines: vec![text[..shebang_len].to_string()],\n             pos: start_bpos,\n         });\n@@ -214,7 +212,7 @@ pub fn gather_comments(sm: &SourceMap, path: FileName, src: String) -> Vec<Comme\n                     while let Some(next_newline) = &token_text[idx + 1..].find('\\n') {\n                         idx = idx + 1 + next_newline;\n                         comments.push(Comment {\n-                            style: BlankLine,\n+                            style: CommentStyle::BlankLine,\n                             lines: vec![],\n                             pos: start_bpos + BytePos((pos + idx) as u32),\n                         });\n@@ -228,9 +226,9 @@ pub fn gather_comments(sm: &SourceMap, path: FileName, src: String) -> Vec<Comme\n                         _ => true,\n                     };\n                     let style = match (code_to_the_left, code_to_the_right) {\n-                        (_, true) => Mixed,\n-                        (false, false) => Isolated,\n-                        (true, false) => Trailing,\n+                        (_, true) => CommentStyle::Mixed,\n+                        (false, false) => CommentStyle::Isolated,\n+                        (true, false) => CommentStyle::Trailing,\n                     };\n \n                     // Count the number of chars since the start of the line by rescanning.\n@@ -246,7 +244,11 @@ pub fn gather_comments(sm: &SourceMap, path: FileName, src: String) -> Vec<Comme\n             rustc_lexer::TokenKind::LineComment => {\n                 if line_doc_comment_style(token_text).is_none() {\n                     comments.push(Comment {\n-                        style: if code_to_the_left { Trailing } else { Isolated },\n+                        style: if code_to_the_left {\n+                            CommentStyle::Trailing\n+                        } else {\n+                            CommentStyle::Isolated\n+                        },\n                         lines: vec![token_text.to_string()],\n                         pos: start_bpos + BytePos(pos as u32),\n                     })"}, {"sha": "9d9ca78de558890520e6ffd931e22a53fbe8a603", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/000c070b70eba07a903db82fb8505433842fe1f1/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000c070b70eba07a903db82fb8505433842fe1f1/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=000c070b70eba07a903db82fb8505433842fe1f1", "patch": "@@ -10,8 +10,9 @@ use rustc_ast::attr;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, BinOpToken, CommentKind, DelimToken, Nonterminal, Token, TokenKind};\n use rustc_ast::tokenstream::{TokenStream, TokenTree};\n+use rustc_ast::util::classify;\n+use rustc_ast::util::comments::{gather_comments, Comment, CommentStyle};\n use rustc_ast::util::parser::{self, AssocOp, Fixity};\n-use rustc_ast::util::{classify, comments};\n use rustc_span::edition::Edition;\n use rustc_span::source_map::{SourceMap, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, IdentPrinter, Symbol};\n@@ -50,27 +51,27 @@ impl PpAnn for NoAnn {}\n \n pub struct Comments<'a> {\n     sm: &'a SourceMap,\n-    comments: Vec<comments::Comment>,\n+    comments: Vec<Comment>,\n     current: usize,\n }\n \n impl<'a> Comments<'a> {\n     pub fn new(sm: &'a SourceMap, filename: FileName, input: String) -> Comments<'a> {\n-        let comments = comments::gather_comments(sm, filename, input);\n+        let comments = gather_comments(sm, filename, input);\n         Comments { sm, comments, current: 0 }\n     }\n \n-    pub fn next(&self) -> Option<comments::Comment> {\n+    pub fn next(&self) -> Option<Comment> {\n         self.comments.get(self.current).cloned()\n     }\n \n     pub fn trailing_comment(\n         &mut self,\n         span: rustc_span::Span,\n         next_pos: Option<BytePos>,\n-    ) -> Option<comments::Comment> {\n+    ) -> Option<Comment> {\n         if let Some(cmnt) = self.next() {\n-            if cmnt.style != comments::Trailing {\n+            if cmnt.style != CommentStyle::Trailing {\n                 return None;\n             }\n             let span_line = self.sm.lookup_char_pos(span.hi());\n@@ -462,9 +463,9 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n         }\n     }\n \n-    fn print_comment(&mut self, cmnt: &comments::Comment) {\n+    fn print_comment(&mut self, cmnt: &Comment) {\n         match cmnt.style {\n-            comments::Mixed => {\n+            CommentStyle::Mixed => {\n                 if !self.is_beginning_of_line() {\n                     self.zerobreak();\n                 }\n@@ -483,7 +484,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n                 }\n                 self.zerobreak()\n             }\n-            comments::Isolated => {\n+            CommentStyle::Isolated => {\n                 self.hardbreak_if_not_bol();\n                 for line in &cmnt.lines {\n                     // Don't print empty lines because they will end up as trailing\n@@ -494,7 +495,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n                     self.hardbreak();\n                 }\n             }\n-            comments::Trailing => {\n+            CommentStyle::Trailing => {\n                 if !self.is_beginning_of_line() {\n                     self.word(\" \");\n                 }\n@@ -512,7 +513,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n                     self.end();\n                 }\n             }\n-            comments::BlankLine => {\n+            CommentStyle::BlankLine => {\n                 // We need to do at least one, possibly two hardbreaks.\n                 let twice = match self.last_token() {\n                     pp::Token::String(s) => \";\" == s,\n@@ -531,7 +532,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n         }\n     }\n \n-    fn next_comment(&mut self) -> Option<comments::Comment> {\n+    fn next_comment(&mut self) -> Option<Comment> {\n         self.comments().as_mut().and_then(|c| c.next())\n     }\n "}]}