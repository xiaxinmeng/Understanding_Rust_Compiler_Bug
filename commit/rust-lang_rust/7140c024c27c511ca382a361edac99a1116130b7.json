{"sha": "7140c024c27c511ca382a361edac99a1116130b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxNDBjMDI0YzI3YzUxMWNhMzgyYTM2MWVkYWM5OWExMTE2MTMwYjc=", "commit": {"author": {"name": "Dan Aloni", "email": "dan@kernelim.com", "date": "2019-10-11T14:38:20Z"}, "committer": {"name": "Dan Aloni", "email": "dan@kernelim.com", "date": "2019-10-11T15:09:23Z"}, "message": "resolve: fix error title regarding private constructors\n\nThe constructor is private, not the type.\n\nIdea credit to @petrochenkov, discussed at #65153", "tree": {"sha": "a3e814302f24c43d5de869a9f484cfae53789aa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3e814302f24c43d5de869a9f484cfae53789aa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7140c024c27c511ca382a361edac99a1116130b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7140c024c27c511ca382a361edac99a1116130b7", "html_url": "https://github.com/rust-lang/rust/commit/7140c024c27c511ca382a361edac99a1116130b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7140c024c27c511ca382a361edac99a1116130b7/comments", "author": {"login": "da-x", "id": 321273, "node_id": "MDQ6VXNlcjMyMTI3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/321273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/da-x", "html_url": "https://github.com/da-x", "followers_url": "https://api.github.com/users/da-x/followers", "following_url": "https://api.github.com/users/da-x/following{/other_user}", "gists_url": "https://api.github.com/users/da-x/gists{/gist_id}", "starred_url": "https://api.github.com/users/da-x/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/da-x/subscriptions", "organizations_url": "https://api.github.com/users/da-x/orgs", "repos_url": "https://api.github.com/users/da-x/repos", "events_url": "https://api.github.com/users/da-x/events{/privacy}", "received_events_url": "https://api.github.com/users/da-x/received_events", "type": "User", "site_admin": false}, "committer": {"login": "da-x", "id": 321273, "node_id": "MDQ6VXNlcjMyMTI3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/321273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/da-x", "html_url": "https://github.com/da-x", "followers_url": "https://api.github.com/users/da-x/followers", "following_url": "https://api.github.com/users/da-x/following{/other_user}", "gists_url": "https://api.github.com/users/da-x/gists{/gist_id}", "starred_url": "https://api.github.com/users/da-x/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/da-x/subscriptions", "organizations_url": "https://api.github.com/users/da-x/orgs", "repos_url": "https://api.github.com/users/da-x/repos", "events_url": "https://api.github.com/users/da-x/events{/privacy}", "received_events_url": "https://api.github.com/users/da-x/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "000d90b11f7be70ffb7812680f7abc6deb52ec88", "url": "https://api.github.com/repos/rust-lang/rust/commits/000d90b11f7be70ffb7812680f7abc6deb52ec88", "html_url": "https://github.com/rust-lang/rust/commit/000d90b11f7be70ffb7812680f7abc6deb52ec88"}], "stats": {"total": 268, "additions": 140, "deletions": 128}, "files": [{"sha": "b7c24a2f36ae930c8c9011f077faf3f8ec70c3c7", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7140c024c27c511ca382a361edac99a1116130b7/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7140c024c27c511ca382a361edac99a1116130b7/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=7140c024c27c511ca382a361edac99a1116130b7", "patch": "@@ -2379,26 +2379,38 @@ impl<'a> Resolver<'a> {\n         let mut reported_spans = FxHashSet::default();\n         for &PrivacyError(dedup_span, ident, binding) in &self.privacy_errors {\n             if reported_spans.insert(dedup_span) {\n-                let mut err = struct_span_err!(\n-                    self.session,\n-                    ident.span,\n-                    E0603,\n-                    \"{} `{}` is private\",\n-                    binding.res().descr(),\n-                    ident.name,\n-                );\n-                if let NameBindingKind::Res(\n+                let session = &self.session;\n+                let mk_struct_span_error = |is_constructor| {\n+                    struct_span_err!(\n+                        session,\n+                        ident.span,\n+                        E0603,\n+                        \"{}{} `{}` is private\",\n+                        binding.res().descr(),\n+                        if is_constructor { \" constructor\"} else { \"\" },\n+                        ident.name,\n+                    )\n+                };\n+\n+                let mut err = if let NameBindingKind::Res(\n                     Res::Def(DefKind::Ctor(CtorOf::Struct, CtorKind::Fn), ctor_def_id), _\n                 ) = binding.kind {\n                     let def_id = (&*self).parent(ctor_def_id).expect(\"no parent for a constructor\");\n                     if let Some(fields) = self.field_names.get(&def_id) {\n+                        let mut err = mk_struct_span_error(true);\n                         let first_field = fields.first().expect(\"empty field list in the map\");\n                         err.span_label(\n                             fields.iter().fold(first_field.span, |acc, field| acc.to(field.span)),\n                             \"a tuple struct constructor is private if any of its fields is private\",\n                         );\n+                        err\n+                    } else {\n+                        mk_struct_span_error(false)\n                     }\n-                }\n+                } else {\n+                    mk_struct_span_error(false)\n+                };\n+\n                 err.emit();\n             }\n         }"}, {"sha": "3dc26b1955cd7fbea53ce1efe05319920bfea83f", "filename": "src/test/ui/privacy/privacy5.rs", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/7140c024c27c511ca382a361edac99a1116130b7/src%2Ftest%2Fui%2Fprivacy%2Fprivacy5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7140c024c27c511ca382a361edac99a1116130b7/src%2Ftest%2Fui%2Fprivacy%2Fprivacy5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy5.rs?ref=7140c024c27c511ca382a361edac99a1116130b7", "patch": "@@ -48,80 +48,80 @@ mod a {\n }\n \n fn this_crate() {\n-    let a = a::A(()); //~ ERROR tuple struct `A` is private\n-    let b = a::B(2); //~ ERROR tuple struct `B` is private\n-    let c = a::C(2, 3); //~ ERROR tuple struct `C` is private\n+    let a = a::A(()); //~ ERROR tuple struct constructor `A` is private\n+    let b = a::B(2); //~ ERROR tuple struct constructor `B` is private\n+    let c = a::C(2, 3); //~ ERROR tuple struct constructor `C` is private\n     let d = a::D(4);\n \n-    let a::A(()) = a; //~ ERROR tuple struct `A` is private\n-    let a::A(_) = a; //~ ERROR tuple struct `A` is private\n-    match a { a::A(()) => {} } //~ ERROR tuple struct `A` is private\n-    match a { a::A(_) => {} } //~ ERROR tuple struct `A` is private\n-\n-    let a::B(_) = b; //~ ERROR tuple struct `B` is private\n-    let a::B(_b) = b; //~ ERROR tuple struct `B` is private\n-    match b { a::B(_) => {} } //~ ERROR tuple struct `B` is private\n-    match b { a::B(_b) => {} } //~ ERROR tuple struct `B` is private\n-    match b { a::B(1) => {} a::B(_) => {} } //~ ERROR tuple struct `B` is private\n-                                            //~^ ERROR tuple struct `B` is private\n-\n-    let a::C(_, _) = c; //~ ERROR tuple struct `C` is private\n-    let a::C(_a, _) = c; //~ ERROR tuple struct `C` is private\n-    let a::C(_, _b) = c; //~ ERROR tuple struct `C` is private\n-    let a::C(_a, _b) = c; //~ ERROR tuple struct `C` is private\n-    match c { a::C(_, _) => {} } //~ ERROR tuple struct `C` is private\n-    match c { a::C(_a, _) => {} } //~ ERROR tuple struct `C` is private\n-    match c { a::C(_, _b) => {} } //~ ERROR tuple struct `C` is private\n-    match c { a::C(_a, _b) => {} } //~ ERROR tuple struct `C` is private\n+    let a::A(()) = a; //~ ERROR tuple struct constructor `A` is private\n+    let a::A(_) = a; //~ ERROR tuple struct constructor `A` is private\n+    match a { a::A(()) => {} } //~ ERROR tuple struct constructor `A` is private\n+    match a { a::A(_) => {} } //~ ERROR tuple struct constructor `A` is private\n+\n+    let a::B(_) = b; //~ ERROR tuple struct constructor `B` is private\n+    let a::B(_b) = b; //~ ERROR tuple struct constructor `B` is private\n+    match b { a::B(_) => {} } //~ ERROR tuple struct constructor `B` is private\n+    match b { a::B(_b) => {} } //~ ERROR tuple struct constructor `B` is private\n+    match b { a::B(1) => {} a::B(_) => {} } //~ ERROR tuple struct constructor `B` is private\n+                                            //~^ ERROR tuple struct constructor `B` is private\n+\n+    let a::C(_, _) = c; //~ ERROR tuple struct constructor `C` is private\n+    let a::C(_a, _) = c; //~ ERROR tuple struct constructor `C` is private\n+    let a::C(_, _b) = c; //~ ERROR tuple struct constructor `C` is private\n+    let a::C(_a, _b) = c; //~ ERROR tuple struct constructor `C` is private\n+    match c { a::C(_, _) => {} } //~ ERROR tuple struct constructor `C` is private\n+    match c { a::C(_a, _) => {} } //~ ERROR tuple struct constructor `C` is private\n+    match c { a::C(_, _b) => {} } //~ ERROR tuple struct constructor `C` is private\n+    match c { a::C(_a, _b) => {} } //~ ERROR tuple struct constructor `C` is private\n \n     let a::D(_) = d;\n     let a::D(_d) = d;\n     match d { a::D(_) => {} }\n     match d { a::D(_d) => {} }\n     match d { a::D(1) => {} a::D(_) => {} }\n \n-    let a2 = a::A; //~ ERROR tuple struct `A` is private\n-    let b2 = a::B; //~ ERROR tuple struct `B` is private\n-    let c2 = a::C; //~ ERROR tuple struct `C` is private\n+    let a2 = a::A; //~ ERROR tuple struct constructor `A` is private\n+    let b2 = a::B; //~ ERROR tuple struct constructor `B` is private\n+    let c2 = a::C; //~ ERROR tuple struct constructor `C` is private\n     let d2 = a::D;\n }\n \n fn xcrate() {\n-    let a = other::A(()); //~ ERROR tuple struct `A` is private\n-    let b = other::B(2); //~ ERROR tuple struct `B` is private\n-    let c = other::C(2, 3); //~ ERROR tuple struct `C` is private\n+    let a = other::A(()); //~ ERROR tuple struct constructor `A` is private\n+    let b = other::B(2); //~ ERROR tuple struct constructor `B` is private\n+    let c = other::C(2, 3); //~ ERROR tuple struct constructor `C` is private\n     let d = other::D(4);\n \n-    let other::A(()) = a; //~ ERROR tuple struct `A` is private\n-    let other::A(_) = a; //~ ERROR tuple struct `A` is private\n-    match a { other::A(()) => {} } //~ ERROR tuple struct `A` is private\n-    match a { other::A(_) => {} } //~ ERROR tuple struct `A` is private\n-\n-    let other::B(_) = b; //~ ERROR tuple struct `B` is private\n-    let other::B(_b) = b; //~ ERROR tuple struct `B` is private\n-    match b { other::B(_) => {} } //~ ERROR tuple struct `B` is private\n-    match b { other::B(_b) => {} } //~ ERROR tuple struct `B` is private\n-    match b { other::B(1) => {} other::B(_) => {} } //~ ERROR tuple struct `B` is private\n-                                                    //~^ ERROR tuple struct `B` is private\n-\n-    let other::C(_, _) = c; //~ ERROR tuple struct `C` is private\n-    let other::C(_a, _) = c; //~ ERROR tuple struct `C` is private\n-    let other::C(_, _b) = c; //~ ERROR tuple struct `C` is private\n-    let other::C(_a, _b) = c; //~ ERROR tuple struct `C` is private\n-    match c { other::C(_, _) => {} } //~ ERROR tuple struct `C` is private\n-    match c { other::C(_a, _) => {} } //~ ERROR tuple struct `C` is private\n-    match c { other::C(_, _b) => {} } //~ ERROR tuple struct `C` is private\n-    match c { other::C(_a, _b) => {} } //~ ERROR tuple struct `C` is private\n+    let other::A(()) = a; //~ ERROR tuple struct constructor `A` is private\n+    let other::A(_) = a; //~ ERROR tuple struct constructor `A` is private\n+    match a { other::A(()) => {} } //~ ERROR tuple struct constructor `A` is private\n+    match a { other::A(_) => {} } //~ ERROR tuple struct constructor `A` is private\n+\n+    let other::B(_) = b; //~ ERROR tuple struct constructor `B` is private\n+    let other::B(_b) = b; //~ ERROR tuple struct constructor `B` is private\n+    match b { other::B(_) => {} } //~ ERROR tuple struct constructor `B` is private\n+    match b { other::B(_b) => {} } //~ ERROR tuple struct constructor `B` is private\n+    match b { other::B(1) => {}//~ ERROR tuple struct constructor `B` is private\n+        other::B(_) => {} }    //~ ERROR tuple struct constructor `B` is private\n+\n+    let other::C(_, _) = c; //~ ERROR tuple struct constructor `C` is private\n+    let other::C(_a, _) = c; //~ ERROR tuple struct constructor `C` is private\n+    let other::C(_, _b) = c; //~ ERROR tuple struct constructor `C` is private\n+    let other::C(_a, _b) = c; //~ ERROR tuple struct constructor `C` is private\n+    match c { other::C(_, _) => {} } //~ ERROR tuple struct constructor `C` is private\n+    match c { other::C(_a, _) => {} } //~ ERROR tuple struct constructor `C` is private\n+    match c { other::C(_, _b) => {} } //~ ERROR tuple struct constructor `C` is private\n+    match c { other::C(_a, _b) => {} } //~ ERROR tuple struct constructor `C` is private\n \n     let other::D(_) = d;\n     let other::D(_d) = d;\n     match d { other::D(_) => {} }\n     match d { other::D(_d) => {} }\n     match d { other::D(1) => {} other::D(_) => {} }\n \n-    let a2 = other::A; //~ ERROR tuple struct `A` is private\n-    let b2 = other::B; //~ ERROR tuple struct `B` is private\n-    let c2 = other::C; //~ ERROR tuple struct `C` is private\n+    let a2 = other::A; //~ ERROR tuple struct constructor `A` is private\n+    let b2 = other::B; //~ ERROR tuple struct constructor `B` is private\n+    let c2 = other::C; //~ ERROR tuple struct constructor `C` is private\n     let d2 = other::D;\n }\n "}, {"sha": "23e7536444b5cd998126de7a70f01d9593f0ba2b", "filename": "src/test/ui/privacy/privacy5.stderr", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/7140c024c27c511ca382a361edac99a1116130b7/src%2Ftest%2Fui%2Fprivacy%2Fprivacy5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7140c024c27c511ca382a361edac99a1116130b7/src%2Ftest%2Fui%2Fprivacy%2Fprivacy5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy5.stderr?ref=7140c024c27c511ca382a361edac99a1116130b7", "patch": "@@ -1,4 +1,4 @@\n-error[E0603]: tuple struct `A` is private\n+error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:51:16\n    |\n LL |     pub struct A(());\n@@ -7,7 +7,7 @@ LL |     pub struct A(());\n LL |     let a = a::A(());\n    |                ^\n \n-error[E0603]: tuple struct `B` is private\n+error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:52:16\n    |\n LL |     pub struct B(isize);\n@@ -16,7 +16,7 @@ LL |     pub struct B(isize);\n LL |     let b = a::B(2);\n    |                ^\n \n-error[E0603]: tuple struct `C` is private\n+error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:53:16\n    |\n LL |     pub struct C(pub isize, isize);\n@@ -25,7 +25,7 @@ LL |     pub struct C(pub isize, isize);\n LL |     let c = a::C(2, 3);\n    |                ^\n \n-error[E0603]: tuple struct `A` is private\n+error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:56:12\n    |\n LL |     pub struct A(());\n@@ -34,7 +34,7 @@ LL |     pub struct A(());\n LL |     let a::A(()) = a;\n    |            ^\n \n-error[E0603]: tuple struct `A` is private\n+error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:57:12\n    |\n LL |     pub struct A(());\n@@ -43,7 +43,7 @@ LL |     pub struct A(());\n LL |     let a::A(_) = a;\n    |            ^\n \n-error[E0603]: tuple struct `A` is private\n+error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:58:18\n    |\n LL |     pub struct A(());\n@@ -52,7 +52,7 @@ LL |     pub struct A(());\n LL |     match a { a::A(()) => {} }\n    |                  ^\n \n-error[E0603]: tuple struct `A` is private\n+error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:59:18\n    |\n LL |     pub struct A(());\n@@ -61,7 +61,7 @@ LL |     pub struct A(());\n LL |     match a { a::A(_) => {} }\n    |                  ^\n \n-error[E0603]: tuple struct `B` is private\n+error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:61:12\n    |\n LL |     pub struct B(isize);\n@@ -70,7 +70,7 @@ LL |     pub struct B(isize);\n LL |     let a::B(_) = b;\n    |            ^\n \n-error[E0603]: tuple struct `B` is private\n+error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:62:12\n    |\n LL |     pub struct B(isize);\n@@ -79,7 +79,7 @@ LL |     pub struct B(isize);\n LL |     let a::B(_b) = b;\n    |            ^\n \n-error[E0603]: tuple struct `B` is private\n+error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:63:18\n    |\n LL |     pub struct B(isize);\n@@ -88,7 +88,7 @@ LL |     pub struct B(isize);\n LL |     match b { a::B(_) => {} }\n    |                  ^\n \n-error[E0603]: tuple struct `B` is private\n+error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:64:18\n    |\n LL |     pub struct B(isize);\n@@ -97,7 +97,7 @@ LL |     pub struct B(isize);\n LL |     match b { a::B(_b) => {} }\n    |                  ^\n \n-error[E0603]: tuple struct `B` is private\n+error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:65:18\n    |\n LL |     pub struct B(isize);\n@@ -106,7 +106,7 @@ LL |     pub struct B(isize);\n LL |     match b { a::B(1) => {} a::B(_) => {} }\n    |                  ^\n \n-error[E0603]: tuple struct `B` is private\n+error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:65:32\n    |\n LL |     pub struct B(isize);\n@@ -115,7 +115,7 @@ LL |     pub struct B(isize);\n LL |     match b { a::B(1) => {} a::B(_) => {} }\n    |                                ^\n \n-error[E0603]: tuple struct `C` is private\n+error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:68:12\n    |\n LL |     pub struct C(pub isize, isize);\n@@ -124,7 +124,7 @@ LL |     pub struct C(pub isize, isize);\n LL |     let a::C(_, _) = c;\n    |            ^\n \n-error[E0603]: tuple struct `C` is private\n+error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:69:12\n    |\n LL |     pub struct C(pub isize, isize);\n@@ -133,7 +133,7 @@ LL |     pub struct C(pub isize, isize);\n LL |     let a::C(_a, _) = c;\n    |            ^\n \n-error[E0603]: tuple struct `C` is private\n+error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:70:12\n    |\n LL |     pub struct C(pub isize, isize);\n@@ -142,7 +142,7 @@ LL |     pub struct C(pub isize, isize);\n LL |     let a::C(_, _b) = c;\n    |            ^\n \n-error[E0603]: tuple struct `C` is private\n+error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:71:12\n    |\n LL |     pub struct C(pub isize, isize);\n@@ -151,7 +151,7 @@ LL |     pub struct C(pub isize, isize);\n LL |     let a::C(_a, _b) = c;\n    |            ^\n \n-error[E0603]: tuple struct `C` is private\n+error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:72:18\n    |\n LL |     pub struct C(pub isize, isize);\n@@ -160,7 +160,7 @@ LL |     pub struct C(pub isize, isize);\n LL |     match c { a::C(_, _) => {} }\n    |                  ^\n \n-error[E0603]: tuple struct `C` is private\n+error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:73:18\n    |\n LL |     pub struct C(pub isize, isize);\n@@ -169,7 +169,7 @@ LL |     pub struct C(pub isize, isize);\n LL |     match c { a::C(_a, _) => {} }\n    |                  ^\n \n-error[E0603]: tuple struct `C` is private\n+error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:74:18\n    |\n LL |     pub struct C(pub isize, isize);\n@@ -178,7 +178,7 @@ LL |     pub struct C(pub isize, isize);\n LL |     match c { a::C(_, _b) => {} }\n    |                  ^\n \n-error[E0603]: tuple struct `C` is private\n+error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:75:18\n    |\n LL |     pub struct C(pub isize, isize);\n@@ -187,7 +187,7 @@ LL |     pub struct C(pub isize, isize);\n LL |     match c { a::C(_a, _b) => {} }\n    |                  ^\n \n-error[E0603]: tuple struct `A` is private\n+error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:83:17\n    |\n LL |     pub struct A(());\n@@ -196,7 +196,7 @@ LL |     pub struct A(());\n LL |     let a2 = a::A;\n    |                 ^\n \n-error[E0603]: tuple struct `B` is private\n+error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:84:17\n    |\n LL |     pub struct B(isize);\n@@ -205,7 +205,7 @@ LL |     pub struct B(isize);\n LL |     let b2 = a::B;\n    |                 ^\n \n-error[E0603]: tuple struct `C` is private\n+error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:85:17\n    |\n LL |     pub struct C(pub isize, isize);\n@@ -214,7 +214,7 @@ LL |     pub struct C(pub isize, isize);\n LL |     let c2 = a::C;\n    |                 ^\n \n-error[E0603]: tuple struct `A` is private\n+error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:90:20\n    |\n LL |     let a = other::A(());\n@@ -225,7 +225,7 @@ LL |     let a = other::A(());\n LL | pub struct A(());\n    |              -- a tuple struct constructor is private if any of its fields is private\n \n-error[E0603]: tuple struct `B` is private\n+error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:91:20\n    |\n LL |     let b = other::B(2);\n@@ -236,7 +236,7 @@ LL |     let b = other::B(2);\n LL | pub struct B(isize);\n    |              ----- a tuple struct constructor is private if any of its fields is private\n \n-error[E0603]: tuple struct `C` is private\n+error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:92:20\n    |\n LL |     let c = other::C(2, 3);\n@@ -247,7 +247,7 @@ LL |     let c = other::C(2, 3);\n LL | pub struct C(pub isize, isize);\n    |              ---------------- a tuple struct constructor is private if any of its fields is private\n \n-error[E0603]: tuple struct `A` is private\n+error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:95:16\n    |\n LL |     let other::A(()) = a;\n@@ -258,7 +258,7 @@ LL |     let other::A(()) = a;\n LL | pub struct A(());\n    |              -- a tuple struct constructor is private if any of its fields is private\n \n-error[E0603]: tuple struct `A` is private\n+error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:96:16\n    |\n LL |     let other::A(_) = a;\n@@ -269,7 +269,7 @@ LL |     let other::A(_) = a;\n LL | pub struct A(());\n    |              -- a tuple struct constructor is private if any of its fields is private\n \n-error[E0603]: tuple struct `A` is private\n+error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:97:22\n    |\n LL |     match a { other::A(()) => {} }\n@@ -280,7 +280,7 @@ LL |     match a { other::A(()) => {} }\n LL | pub struct A(());\n    |              -- a tuple struct constructor is private if any of its fields is private\n \n-error[E0603]: tuple struct `A` is private\n+error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:98:22\n    |\n LL |     match a { other::A(_) => {} }\n@@ -291,7 +291,7 @@ LL |     match a { other::A(_) => {} }\n LL | pub struct A(());\n    |              -- a tuple struct constructor is private if any of its fields is private\n \n-error[E0603]: tuple struct `B` is private\n+error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:100:16\n    |\n LL |     let other::B(_) = b;\n@@ -302,7 +302,7 @@ LL |     let other::B(_) = b;\n LL | pub struct B(isize);\n    |              ----- a tuple struct constructor is private if any of its fields is private\n \n-error[E0603]: tuple struct `B` is private\n+error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:101:16\n    |\n LL |     let other::B(_b) = b;\n@@ -313,7 +313,7 @@ LL |     let other::B(_b) = b;\n LL | pub struct B(isize);\n    |              ----- a tuple struct constructor is private if any of its fields is private\n \n-error[E0603]: tuple struct `B` is private\n+error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:102:22\n    |\n LL |     match b { other::B(_) => {} }\n@@ -324,7 +324,7 @@ LL |     match b { other::B(_) => {} }\n LL | pub struct B(isize);\n    |              ----- a tuple struct constructor is private if any of its fields is private\n \n-error[E0603]: tuple struct `B` is private\n+error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:103:22\n    |\n LL |     match b { other::B(_b) => {} }\n@@ -335,29 +335,29 @@ LL |     match b { other::B(_b) => {} }\n LL | pub struct B(isize);\n    |              ----- a tuple struct constructor is private if any of its fields is private\n \n-error[E0603]: tuple struct `B` is private\n+error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:104:22\n    |\n-LL |     match b { other::B(1) => {} other::B(_) => {} }\n+LL |     match b { other::B(1) => {}\n    |                      ^\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n LL | pub struct B(isize);\n    |              ----- a tuple struct constructor is private if any of its fields is private\n \n-error[E0603]: tuple struct `B` is private\n-  --> $DIR/privacy5.rs:104:40\n+error[E0603]: tuple struct constructor `B` is private\n+  --> $DIR/privacy5.rs:105:16\n    |\n-LL |     match b { other::B(1) => {} other::B(_) => {} }\n-   |                                        ^\n+LL |         other::B(_) => {} }\n+   |                ^\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n LL | pub struct B(isize);\n    |              ----- a tuple struct constructor is private if any of its fields is private\n \n-error[E0603]: tuple struct `C` is private\n+error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:107:16\n    |\n LL |     let other::C(_, _) = c;\n@@ -368,7 +368,7 @@ LL |     let other::C(_, _) = c;\n LL | pub struct C(pub isize, isize);\n    |              ---------------- a tuple struct constructor is private if any of its fields is private\n \n-error[E0603]: tuple struct `C` is private\n+error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:108:16\n    |\n LL |     let other::C(_a, _) = c;\n@@ -379,7 +379,7 @@ LL |     let other::C(_a, _) = c;\n LL | pub struct C(pub isize, isize);\n    |              ---------------- a tuple struct constructor is private if any of its fields is private\n \n-error[E0603]: tuple struct `C` is private\n+error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:109:16\n    |\n LL |     let other::C(_, _b) = c;\n@@ -390,7 +390,7 @@ LL |     let other::C(_, _b) = c;\n LL | pub struct C(pub isize, isize);\n    |              ---------------- a tuple struct constructor is private if any of its fields is private\n \n-error[E0603]: tuple struct `C` is private\n+error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:110:16\n    |\n LL |     let other::C(_a, _b) = c;\n@@ -401,7 +401,7 @@ LL |     let other::C(_a, _b) = c;\n LL | pub struct C(pub isize, isize);\n    |              ---------------- a tuple struct constructor is private if any of its fields is private\n \n-error[E0603]: tuple struct `C` is private\n+error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:111:22\n    |\n LL |     match c { other::C(_, _) => {} }\n@@ -412,7 +412,7 @@ LL |     match c { other::C(_, _) => {} }\n LL | pub struct C(pub isize, isize);\n    |              ---------------- a tuple struct constructor is private if any of its fields is private\n \n-error[E0603]: tuple struct `C` is private\n+error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:112:22\n    |\n LL |     match c { other::C(_a, _) => {} }\n@@ -423,7 +423,7 @@ LL |     match c { other::C(_a, _) => {} }\n LL | pub struct C(pub isize, isize);\n    |              ---------------- a tuple struct constructor is private if any of its fields is private\n \n-error[E0603]: tuple struct `C` is private\n+error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:113:22\n    |\n LL |     match c { other::C(_, _b) => {} }\n@@ -434,7 +434,7 @@ LL |     match c { other::C(_, _b) => {} }\n LL | pub struct C(pub isize, isize);\n    |              ---------------- a tuple struct constructor is private if any of its fields is private\n \n-error[E0603]: tuple struct `C` is private\n+error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:114:22\n    |\n LL |     match c { other::C(_a, _b) => {} }\n@@ -445,7 +445,7 @@ LL |     match c { other::C(_a, _b) => {} }\n LL | pub struct C(pub isize, isize);\n    |              ---------------- a tuple struct constructor is private if any of its fields is private\n \n-error[E0603]: tuple struct `A` is private\n+error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:122:21\n    |\n LL |     let a2 = other::A;\n@@ -456,7 +456,7 @@ LL |     let a2 = other::A;\n LL | pub struct A(());\n    |              -- a tuple struct constructor is private if any of its fields is private\n \n-error[E0603]: tuple struct `B` is private\n+error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:123:21\n    |\n LL |     let b2 = other::B;\n@@ -467,7 +467,7 @@ LL |     let b2 = other::B;\n LL | pub struct B(isize);\n    |              ----- a tuple struct constructor is private if any of its fields is private\n \n-error[E0603]: tuple struct `C` is private\n+error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:124:21\n    |\n LL |     let c2 = other::C;"}, {"sha": "0eecc7f8cc5db8d669d179b26b28601f58fe914a", "filename": "src/test/ui/resolve/privacy-struct-ctor.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7140c024c27c511ca382a361edac99a1116130b7/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7140c024c27c511ca382a361edac99a1116130b7/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.rs?ref=7140c024c27c511ca382a361edac99a1116130b7", "patch": "@@ -16,7 +16,7 @@ mod m {\n \n     fn f() {\n         n::Z;\n-        //~^ ERROR tuple struct `Z` is private\n+        //~^ ERROR tuple struct constructor `Z` is private\n         Z;\n         //~^ ERROR expected value, found struct `Z`\n     }\n@@ -27,21 +27,21 @@ use m::S2; // OK, only the type is imported\n \n fn main() {\n     m::S;\n-    //~^ ERROR tuple struct `S` is private\n+    //~^ ERROR tuple struct constructor `S` is private\n     let _: S = m::S(2);\n-    //~^ ERROR tuple struct `S` is private\n+    //~^ ERROR tuple struct constructor `S` is private\n     S;\n     //~^ ERROR expected value, found struct `S`\n     m::n::Z;\n-    //~^ ERROR tuple struct `Z` is private\n+    //~^ ERROR tuple struct constructor `Z` is private\n \n     S2;\n     //~^ ERROR expected value, found struct `S2`\n \n     xcrate::m::S;\n-    //~^ ERROR tuple struct `S` is private\n+    //~^ ERROR tuple struct constructor `S` is private\n     xcrate::S;\n     //~^ ERROR expected value, found struct `xcrate::S`\n     xcrate::m::n::Z;\n-    //~^ ERROR tuple struct `Z` is private\n+    //~^ ERROR tuple struct constructor `Z` is private\n }"}, {"sha": "aa988088f70d18a8ea296f9ec5fe10368297ae6e", "filename": "src/test/ui/resolve/privacy-struct-ctor.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7140c024c27c511ca382a361edac99a1116130b7/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7140c024c27c511ca382a361edac99a1116130b7/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr?ref=7140c024c27c511ca382a361edac99a1116130b7", "patch": "@@ -34,7 +34,7 @@ help: possible better candidate is found in another module, you can import it in\n LL | use m::S;\n    |\n \n-error[E0603]: tuple struct `Z` is private\n+error[E0603]: tuple struct constructor `Z` is private\n   --> $DIR/privacy-struct-ctor.rs:18:12\n    |\n LL |         pub(in m) struct Z(pub(in m::n) u8);\n@@ -43,7 +43,7 @@ LL |         pub(in m) struct Z(pub(in m::n) u8);\n LL |         n::Z;\n    |            ^\n \n-error[E0603]: tuple struct `S` is private\n+error[E0603]: tuple struct constructor `S` is private\n   --> $DIR/privacy-struct-ctor.rs:29:8\n    |\n LL |     pub struct S(u8);\n@@ -52,7 +52,7 @@ LL |     pub struct S(u8);\n LL |     m::S;\n    |        ^\n \n-error[E0603]: tuple struct `S` is private\n+error[E0603]: tuple struct constructor `S` is private\n   --> $DIR/privacy-struct-ctor.rs:31:19\n    |\n LL |     pub struct S(u8);\n@@ -61,7 +61,7 @@ LL |     pub struct S(u8);\n LL |     let _: S = m::S(2);\n    |                   ^\n \n-error[E0603]: tuple struct `Z` is private\n+error[E0603]: tuple struct constructor `Z` is private\n   --> $DIR/privacy-struct-ctor.rs:35:11\n    |\n LL |         pub(in m) struct Z(pub(in m::n) u8);\n@@ -70,7 +70,7 @@ LL |         pub(in m) struct Z(pub(in m::n) u8);\n LL |     m::n::Z;\n    |           ^\n \n-error[E0603]: tuple struct `S` is private\n+error[E0603]: tuple struct constructor `S` is private\n   --> $DIR/privacy-struct-ctor.rs:41:16\n    |\n LL |     xcrate::m::S;\n@@ -81,7 +81,7 @@ LL |     xcrate::m::S;\n LL |     pub struct S(u8);\n    |                  -- a tuple struct constructor is private if any of its fields is private\n \n-error[E0603]: tuple struct `Z` is private\n+error[E0603]: tuple struct constructor `Z` is private\n   --> $DIR/privacy-struct-ctor.rs:45:19\n    |\n LL |     xcrate::m::n::Z;"}, {"sha": "cf383a260e044be784f32d9ae48d9707eeb18d09", "filename": "src/test/ui/rfc-2008-non-exhaustive/struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7140c024c27c511ca382a361edac99a1116130b7/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7140c024c27c511ca382a361edac99a1116130b7/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.rs?ref=7140c024c27c511ca382a361edac99a1116130b7", "patch": "@@ -21,7 +21,7 @@ fn main() {\n     //~^ ERROR expected function, found struct `TupleStruct` [E0423]\n \n     let ts_explicit = structs::TupleStruct(640, 480);\n-    //~^ ERROR tuple struct `TupleStruct` is private [E0603]\n+    //~^ ERROR tuple struct constructor `TupleStruct` is private [E0603]\n \n     let TupleStruct { 0: first_field, 1: second_field } = ts;\n     //~^ ERROR `..` required with struct marked as non-exhaustive"}, {"sha": "fde9ac27fbfbff9e88783b0901f3f0c7c88ab16f", "filename": "src/test/ui/rfc-2008-non-exhaustive/struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7140c024c27c511ca382a361edac99a1116130b7/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7140c024c27c511ca382a361edac99a1116130b7/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr?ref=7140c024c27c511ca382a361edac99a1116130b7", "patch": "@@ -10,7 +10,7 @@ error[E0423]: expected value, found struct `UnitStruct`\n LL |     let us = UnitStruct;\n    |              ^^^^^^^^^^ constructor is not visible here due to private fields\n \n-error[E0603]: tuple struct `TupleStruct` is private\n+error[E0603]: tuple struct constructor `TupleStruct` is private\n   --> $DIR/struct.rs:23:32\n    |\n LL |     let ts_explicit = structs::TupleStruct(640, 480);"}]}