{"sha": "a1639d0d1ef201b2b9a425eddecfb41a25f10931", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNjM5ZDBkMWVmMjAxYjJiOWE0MjVlZGRlY2ZiNDFhMjVmMTA5MzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-08T11:58:43Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-08T16:45:14Z"}, "message": "Remove more dead code", "tree": {"sha": "f3ee4c0f242a044197c39e2e87521961b630a33c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3ee4c0f242a044197c39e2e87521961b630a33c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1639d0d1ef201b2b9a425eddecfb41a25f10931", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1639d0d1ef201b2b9a425eddecfb41a25f10931", "html_url": "https://github.com/rust-lang/rust/commit/a1639d0d1ef201b2b9a425eddecfb41a25f10931", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1639d0d1ef201b2b9a425eddecfb41a25f10931/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6805bb01e203e7a1cbc145382a16c0069a5de6d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6805bb01e203e7a1cbc145382a16c0069a5de6d5", "html_url": "https://github.com/rust-lang/rust/commit/6805bb01e203e7a1cbc145382a16c0069a5de6d5"}], "stats": {"total": 112, "additions": 1, "deletions": 111}, "files": [{"sha": "d5249f3088597a484f04f491bb26f2c66f3ba8af", "filename": "crates/ra_assists/src/test_db.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1639d0d1ef201b2b9a425eddecfb41a25f10931/crates%2Fra_assists%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1639d0d1ef201b2b9a425eddecfb41a25f10931/crates%2Fra_assists%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftest_db.rs?ref=a1639d0d1ef201b2b9a425eddecfb41a25f10931", "patch": "@@ -43,5 +43,3 @@ impl FileLoader for TestDB {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n }\n-\n-impl hir::debug::HirDebugHelper for TestDB {}"}, {"sha": "6cd5c8cb97edad2ec17b6540536d66871e108d51", "filename": "crates/ra_hir/src/debug.rs", "status": "removed", "additions": 0, "deletions": 94, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/6805bb01e203e7a1cbc145382a16c0069a5de6d5/crates%2Fra_hir%2Fsrc%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6805bb01e203e7a1cbc145382a16c0069a5de6d5/crates%2Fra_hir%2Fsrc%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdebug.rs?ref=6805bb01e203e7a1cbc145382a16c0069a5de6d5", "patch": "@@ -1,94 +0,0 @@\n-//! XXX: This does not work at the moment.\n-//!\n-//! printf debugging infrastructure for rust-analyzer.\n-//!\n-//! When you print a hir type, like a module, using `eprintln!(\"{:?}\", module)`,\n-//! you usually get back a numeric ID, which doesn't tell you much:\n-//! `Module(92)`.\n-//!\n-//! This module adds convenience `debug` methods to various types, which resolve\n-//! the id to a human-readable location info:\n-//!\n-//! ```not_rust\n-//! eprintln!(\"{:?}\", module.debug(db));\n-//! =>\n-//! Module { name: collections, path: \"liballoc/collections/mod.rs\" }\n-//! ```\n-//!\n-//! Note that to get this info, we might need to execute queries! So\n-//!\n-//! * don't use the `debug` methods for logging\n-//! * when debugging, be aware that interference is possible.\n-\n-use std::fmt;\n-\n-use hir_expand::HirFileId;\n-use ra_db::{CrateId, FileId};\n-\n-use crate::{db::HirDatabase, Crate, Module, Name};\n-\n-impl Crate {\n-    pub fn debug(self, db: &impl HirDebugDatabase) -> impl fmt::Debug + '_ {\n-        debug_fn(move |fmt| db.debug_crate(self, fmt))\n-    }\n-}\n-\n-impl Module {\n-    pub fn debug(self, db: &impl HirDebugDatabase) -> impl fmt::Debug + '_ {\n-        debug_fn(move |fmt| db.debug_module(self, fmt))\n-    }\n-}\n-\n-pub trait HirDebugHelper: HirDatabase {\n-    fn crate_name(&self, _krate: CrateId) -> Option<String> {\n-        None\n-    }\n-    fn file_path(&self, _file_id: FileId) -> Option<String> {\n-        None\n-    }\n-}\n-\n-pub trait HirDebugDatabase {\n-    fn debug_crate(&self, krate: Crate, fmt: &mut fmt::Formatter<'_>) -> fmt::Result;\n-    fn debug_module(&self, module: Module, fmt: &mut fmt::Formatter<'_>) -> fmt::Result;\n-    fn debug_hir_file_id(&self, file_id: HirFileId, fmt: &mut fmt::Formatter<'_>) -> fmt::Result;\n-}\n-\n-impl<DB: HirDebugHelper> HirDebugDatabase for DB {\n-    fn debug_crate(&self, krate: Crate, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let mut builder = fmt.debug_tuple(\"Crate\");\n-        match self.crate_name(krate.id) {\n-            Some(name) => builder.field(&name),\n-            None => builder.field(&krate.id),\n-        }\n-        .finish()\n-    }\n-\n-    fn debug_module(&self, module: Module, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let file_id = module.definition_source(self).file_id.original_file(self);\n-        let path = self.file_path(file_id).unwrap_or_else(|| \"N/A\".to_string());\n-        fmt.debug_struct(\"Module\")\n-            .field(\"name\", &module.name(self).unwrap_or_else(Name::missing))\n-            .field(\"path\", &path)\n-            .finish()\n-    }\n-\n-    fn debug_hir_file_id(&self, file_id: HirFileId, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let original = file_id.original_file(self);\n-        let path = self.file_path(original).unwrap_or_else(|| \"N/A\".to_string());\n-        let is_macro = file_id != original.into();\n-        fmt.debug_struct(\"HirFileId\").field(\"path\", &path).field(\"macro\", &is_macro).finish()\n-    }\n-}\n-\n-fn debug_fn(f: impl Fn(&mut fmt::Formatter<'_>) -> fmt::Result) -> impl fmt::Debug {\n-    struct DebugFn<F>(F);\n-\n-    impl<F: Fn(&mut fmt::Formatter<'_>) -> fmt::Result> fmt::Debug for DebugFn<F> {\n-        fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-            (&self.0)(fmt)\n-        }\n-    }\n-\n-    DebugFn(f)\n-}"}, {"sha": "e7602ee305e0660d3384e4a2c4d1549b2c1260a6", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1639d0d1ef201b2b9a425eddecfb41a25f10931/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1639d0d1ef201b2b9a425eddecfb41a25f10931/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=a1639d0d1ef201b2b9a425eddecfb41a25f10931", "patch": "@@ -26,8 +26,6 @@ macro_rules! impl_froms {\n     }\n }\n \n-pub mod debug;\n-\n pub mod db;\n pub mod source_binder;\n "}, {"sha": "47d0aed6fb59426733e58241b698769efaa0c518", "filename": "crates/ra_ide/src/db.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a1639d0d1ef201b2b9a425eddecfb41a25f10931/crates%2Fra_ide%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1639d0d1ef201b2b9a425eddecfb41a25f10931/crates%2Fra_ide%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdb.rs?ref=a1639d0d1ef201b2b9a425eddecfb41a25f10931", "patch": "@@ -5,7 +5,7 @@ use std::sync::Arc;\n use ra_db::{\n     salsa::{self, Database, Durability},\n     Canceled, CheckCanceled, CrateId, FileId, FileLoader, FileLoaderDelegate, RelativePath,\n-    SourceDatabase, SourceDatabaseExt, SourceRootId,\n+    SourceDatabase, SourceRootId,\n };\n use rustc_hash::FxHashMap;\n \n@@ -49,18 +49,6 @@ impl FileLoader for RootDatabase {\n     }\n }\n \n-impl hir::debug::HirDebugHelper for RootDatabase {\n-    fn crate_name(&self, krate: CrateId) -> Option<String> {\n-        self.debug_data.crate_names.get(&krate).cloned()\n-    }\n-    fn file_path(&self, file_id: FileId) -> Option<String> {\n-        let source_root_id = self.file_source_root(file_id);\n-        let source_root_path = self.debug_data.root_paths.get(&source_root_id)?;\n-        let file_path = self.file_relative_path(file_id);\n-        Some(format!(\"{}/{}\", source_root_path, file_path))\n-    }\n-}\n-\n impl salsa::Database for RootDatabase {\n     fn salsa_runtime(&self) -> &salsa::Runtime<RootDatabase> {\n         &self.runtime"}]}