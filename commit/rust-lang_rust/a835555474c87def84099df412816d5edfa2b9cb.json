{"sha": "a835555474c87def84099df412816d5edfa2b9cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MzU1NTU0NzRjODdkZWY4NDA5OWRmNDEyODE2ZDVlZGZhMmI5Y2I=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-13T09:19:12Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-24T10:36:31Z"}, "message": "Make zst accesses in allocations take the regular path.\n\nSpeeding up zst accesses should be done on a higher level.", "tree": {"sha": "d6783cde2e902e817315b8528d0e452dc0eaaf99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6783cde2e902e817315b8528d0e452dc0eaaf99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a835555474c87def84099df412816d5edfa2b9cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a835555474c87def84099df412816d5edfa2b9cb", "html_url": "https://github.com/rust-lang/rust/commit/a835555474c87def84099df412816d5edfa2b9cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a835555474c87def84099df412816d5edfa2b9cb/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a0e8254b06c8a9c8e4b775a18524797f1e3d44c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a0e8254b06c8a9c8e4b775a18524797f1e3d44c", "html_url": "https://github.com/rust-lang/rust/commit/3a0e8254b06c8a9c8e4b775a18524797f1e3d44c"}], "stats": {"total": 21, "additions": 0, "deletions": 21}, "files": [{"sha": "ba2755b29f0b81fbb4084d44fac27b95a80c443f", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a835555474c87def84099df412816d5edfa2b9cb/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a835555474c87def84099df412816d5edfa2b9cb/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=a835555474c87def84099df412816d5edfa2b9cb", "patch": "@@ -116,12 +116,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n         size: Size,\n         allow_ptr_and_undef: bool,\n     ) -> EvalResult<'tcx> {\n-        // Empty accesses don't need to be valid pointers, but they should still be non-NULL\n         let align = Align::from_bytes(1).unwrap();\n-        if size.bytes() == 0 {\n-            self.check_align(ptr, align)?;\n-            return Ok(());\n-        }\n         // Check bounds, align and relocations on the edges\n         self.get_bytes_with_undef_and_ptr(cx, ptr, size, align)?;\n         // Check undef and ptr\n@@ -138,12 +133,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n         ptr: Pointer<Tag>,\n         size: Size,\n     ) -> EvalResult<'tcx, &[u8]> {\n-        // Empty accesses don't need to be valid pointers, but they should still be non-NULL\n         let align = Align::from_bytes(1).unwrap();\n-        if size.bytes() == 0 {\n-            self.check_align(ptr, align)?;\n-            return Ok(&[]);\n-        }\n         self.get_bytes(cx, ptr, size, align)\n     }\n \n@@ -153,12 +143,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n         ptr: Pointer<Tag>,\n         src: &[u8],\n     ) -> EvalResult<'tcx> {\n-        // Empty accesses don't need to be valid pointers, but they should still be non-NULL\n         let align = Align::from_bytes(1).unwrap();\n-        if src.is_empty() {\n-            self.check_align(ptr, align)?;\n-            return Ok(());\n-        }\n         let bytes = self.get_bytes_mut(\n             cx, ptr, Size::from_bytes(src.len() as u64), align,\n         )?;\n@@ -173,12 +158,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n         val: u8,\n         count: Size\n     ) -> EvalResult<'tcx> {\n-        // Empty accesses don't need to be valid pointers, but they should still be non-NULL\n         let align = Align::from_bytes(1).unwrap();\n-        if count.bytes() == 0 {\n-            self.check_align(ptr, align)?;\n-            return Ok(());\n-        }\n         let bytes = self.get_bytes_mut(cx, ptr, count, align)?;\n         for b in bytes {\n             *b = val;\n@@ -329,7 +309,6 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n         align: Align,\n         check_defined_and_ptr: bool,\n     ) -> EvalResult<'tcx, &[u8]> {\n-        assert_ne!(size.bytes(), 0, \"0-sized accesses should never even get a `Pointer`\");\n         self.check_align(ptr.into(), align)?;\n         self.check_bounds(cx, ptr, size)?;\n "}]}