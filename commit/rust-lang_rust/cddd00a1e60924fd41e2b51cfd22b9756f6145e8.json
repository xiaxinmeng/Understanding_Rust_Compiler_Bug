{"sha": "cddd00a1e60924fd41e2b51cfd22b9756f6145e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkZGQwMGExZTYwOTI0ZmQ0MWUyYjUxY2ZkMjJiOTc1NmY2MTQ1ZTg=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2018-09-22T20:24:32Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2018-09-27T23:53:59Z"}, "message": "Move `filename_for_metadata` to codegen_utils\n\nThis function isn't strictly tied to LLVM (it's more of a utility) and\nit's now near an analogous, almost identical `filename_for_input` (for\nrlibs and so forth).\nAlso this means not depending on the backend when one wants to know the\naccurate .rmeta output filename.", "tree": {"sha": "791b7683e0cac66b3acd6765d15e2abff285feb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/791b7683e0cac66b3acd6765d15e2abff285feb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cddd00a1e60924fd41e2b51cfd22b9756f6145e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cddd00a1e60924fd41e2b51cfd22b9756f6145e8", "html_url": "https://github.com/rust-lang/rust/commit/cddd00a1e60924fd41e2b51cfd22b9756f6145e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cddd00a1e60924fd41e2b51cfd22b9756f6145e8/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c01e4ce74e96737f99492a185e2d170964f11556", "url": "https://api.github.com/repos/rust-lang/rust/commits/c01e4ce74e96737f99492a185e2d170964f11556", "html_url": "https://github.com/rust-lang/rust/commit/c01e4ce74e96737f99492a185e2d170964f11556"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "ce52fe00b0eb2ec30d19b27e6d3460d6418b1f1e", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cddd00a1e60924fd41e2b51cfd22b9756f6145e8/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cddd00a1e60924fd41e2b51cfd22b9756f6145e8/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=cddd00a1e60924fd41e2b51cfd22b9756f6145e8", "patch": "@@ -47,7 +47,8 @@ use std::str;\n use syntax::attr;\n \n pub use rustc_codegen_utils::link::{find_crate_name, filename_for_input, default_output_for_target,\n-                                  invalid_output_for_target, out_filename, check_file_is_writeable};\n+                                  invalid_output_for_target, out_filename, check_file_is_writeable,\n+                                  filename_for_metadata};\n \n // The third parameter is for env vars, used on windows to set up the\n // path for MSVC to find its DLLs, and gcc to find its bundled\n@@ -218,15 +219,6 @@ fn preserve_objects_for_their_debuginfo(sess: &Session) -> bool {\n     false\n }\n \n-fn filename_for_metadata(sess: &Session, crate_name: &str, outputs: &OutputFilenames) -> PathBuf {\n-    let out_filename = outputs.single_output_file.clone()\n-        .unwrap_or(outputs\n-            .out_directory\n-            .join(&format!(\"lib{}{}.rmeta\", crate_name, sess.opts.cg.extra_filename)));\n-    check_file_is_writeable(&out_filename, sess);\n-    out_filename\n-}\n-\n pub(crate) fn each_linked_rlib(sess: &Session,\n                                info: &CrateInfo,\n                                f: &mut dyn FnMut(CrateNum, &Path)) -> Result<(), String> {"}, {"sha": "3d47f91a6239a96a5d412de3de6287a4be332caf", "filename": "src/librustc_codegen_utils/link.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cddd00a1e60924fd41e2b51cfd22b9756f6145e8/src%2Flibrustc_codegen_utils%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cddd00a1e60924fd41e2b51cfd22b9756f6145e8/src%2Flibrustc_codegen_utils%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flink.rs?ref=cddd00a1e60924fd41e2b51cfd22b9756f6145e8", "patch": "@@ -97,6 +97,19 @@ pub fn find_crate_name(sess: Option<&Session>,\n     \"rust_out\".to_string()\n }\n \n+pub fn filename_for_metadata(sess: &Session,\n+                             crate_name: &str,\n+                             outputs: &OutputFilenames) -> PathBuf {\n+    let libname = format!(\"{}{}\", crate_name, sess.opts.cg.extra_filename);\n+\n+    let out_filename = outputs.single_output_file.clone()\n+        .unwrap_or(outputs.out_directory.join(&format!(\"lib{}.rmeta\", libname)));\n+\n+    check_file_is_writeable(&out_filename, sess);\n+\n+    out_filename\n+}\n+\n pub fn filename_for_input(sess: &Session,\n                           crate_type: config::CrateType,\n                           crate_name: &str,"}]}