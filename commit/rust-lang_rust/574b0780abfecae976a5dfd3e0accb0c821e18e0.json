{"sha": "574b0780abfecae976a5dfd3e0accb0c821e18e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NGIwNzgwYWJmZWNhZTk3NmE1ZGZkM2UwYWNjYjBjODIxZTE4ZTA=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-10-25T17:45:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-25T17:45:59Z"}, "message": "Rollup merge of #65800 - michaelwoerister:measureme-0.4.0, r=wesleywiser\n\nself-profiling: Update measureme to 0.4.0 and remove non-RAII methods from profiler.\n\nThis PR removes all non-RAII based profiling methods from `SelfProfilerRef` :tada:\nIt also delegates the `TimingGuard` implementation to `measureme`, now that that is available there.\n\nr? @wesleywiser", "tree": {"sha": "474b68b3ecdf7795d376e7cdfa5c249fd3141b38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/474b68b3ecdf7795d376e7cdfa5c249fd3141b38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/574b0780abfecae976a5dfd3e0accb0c821e18e0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdszTXCRBK7hj4Ov3rIwAAdHIIAKuFAbIMGE8OvYfFDXfMSM8j\ns7WCaPosYliTDTj26Fm2zF2Pbuy53FXdBxpIQw2bY4/Y6sLao7LYhjiRt1Pbkl2X\nmMuf0jUuJ9pashpp1beI1oKDju/WSRpNUPfATuOersp4LH/Nz7W87XaAdxkB7Cgz\nKHAr/54AcZJvhotVnxIWCVAxjhil5F2GYZ0h19/MSlpLBu2k3LAK4+DniiSC0K59\n8PfjlbIvnsFplNnQfRnJTz2q1kAOa5Fpu3WsqgvvoCOrT3Uh22INBSmB/W9o+19v\n3tCX+AZUWF1KJLb5S2S8VRC9HSjHJNd+XOPwywFLfhrcwMbJdYf9h4jw3Um9/GA=\n=QbBG\n-----END PGP SIGNATURE-----\n", "payload": "tree 474b68b3ecdf7795d376e7cdfa5c249fd3141b38\nparent 9192f3625dfa1289e7982f5e9e6523683081ae74\nparent 9c083068e31e8eb4d4f1d3f649354408d866574c\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1572025559 +0900\ncommitter GitHub <noreply@github.com> 1572025559 +0900\n\nRollup merge of #65800 - michaelwoerister:measureme-0.4.0, r=wesleywiser\n\nself-profiling: Update measureme to 0.4.0 and remove non-RAII methods from profiler.\n\nThis PR removes all non-RAII based profiling methods from `SelfProfilerRef` :tada:\nIt also delegates the `TimingGuard` implementation to `measureme`, now that that is available there.\n\nr? @wesleywiser\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/574b0780abfecae976a5dfd3e0accb0c821e18e0", "html_url": "https://github.com/rust-lang/rust/commit/574b0780abfecae976a5dfd3e0accb0c821e18e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/574b0780abfecae976a5dfd3e0accb0c821e18e0/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9192f3625dfa1289e7982f5e9e6523683081ae74", "url": "https://api.github.com/repos/rust-lang/rust/commits/9192f3625dfa1289e7982f5e9e6523683081ae74", "html_url": "https://github.com/rust-lang/rust/commit/9192f3625dfa1289e7982f5e9e6523683081ae74"}, {"sha": "9c083068e31e8eb4d4f1d3f649354408d866574c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c083068e31e8eb4d4f1d3f649354408d866574c", "html_url": "https://github.com/rust-lang/rust/commit/9c083068e31e8eb4d4f1d3f649354408d866574c"}], "stats": {"total": 134, "additions": 32, "deletions": 102}, "files": [{"sha": "1f78c5f3f7569d7d659e4c0f87fd471ed2b4ba16", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/574b0780abfecae976a5dfd3e0accb0c821e18e0/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/574b0780abfecae976a5dfd3e0accb0c821e18e0/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=574b0780abfecae976a5dfd3e0accb0c821e18e0", "patch": "@@ -1966,9 +1966,9 @@ dependencies = [\n \n [[package]]\n name = \"measureme\"\n-version = \"0.3.0\"\n+version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d09de7dafa3aa334bc806447c7e4de69419723312f4b88b80b561dea66601ce8\"\n+checksum = \"cd21b0e6e1af976b269ce062038fe5e1b9ca2f817ab7a3af09ec4210aebf0d30\"\n dependencies = [\n  \"byteorder\",\n  \"memmap\","}, {"sha": "38631224fd359fd1651561207f19233851a5a11b", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/574b0780abfecae976a5dfd3e0accb0c821e18e0/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/574b0780abfecae976a5dfd3e0accb0c821e18e0/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=574b0780abfecae976a5dfd3e0accb0c821e18e0", "patch": "@@ -37,4 +37,4 @@ byteorder = { version = \"1.3\" }\n chalk-engine = { version = \"0.9.0\", default-features=false }\n rustc_fs_util = { path = \"../librustc_fs_util\" }\n smallvec = { version = \"0.6.8\", features = [\"union\", \"may_dangle\"] }\n-measureme = \"0.3\"\n+measureme = \"0.4\""}, {"sha": "538154b035ac6567e1e2cf01574a161537445579", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/574b0780abfecae976a5dfd3e0accb0c821e18e0/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574b0780abfecae976a5dfd3e0accb0c821e18e0/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=574b0780abfecae976a5dfd3e0accb0c821e18e0", "patch": "@@ -90,6 +90,10 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n                 }\n                 return TryGetJob::JobCompleted(result);\n             }\n+\n+            #[cfg(parallel_compiler)]\n+            let query_blocked_prof_timer;\n+\n             let job = match lock.active.entry((*key).clone()) {\n                 Entry::Occupied(entry) => {\n                     match *entry.get() {\n@@ -98,7 +102,9 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n                             // in another thread has completed. Record how long we wait in the\n                             // self-profiler.\n                             #[cfg(parallel_compiler)]\n-                            tcx.prof.query_blocked_start(Q::NAME);\n+                            {\n+                                query_blocked_prof_timer = tcx.prof.query_blocked(Q::NAME);\n+                            }\n \n                             job.clone()\n                         },\n@@ -140,7 +146,11 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n             #[cfg(parallel_compiler)]\n             {\n                 let result = job.r#await(tcx, span);\n-                tcx.prof.query_blocked_end(Q::NAME);\n+\n+                // This `drop()` is not strictly necessary as the binding\n+                // would go out of scope anyway. But it's good to have an\n+                // explicit marker of how far the measurement goes.\n+                drop(query_blocked_prof_timer);\n \n                 if let Err(cycle) = result {\n                     return TryGetJob::Cycle(Q::handle_cycle_error(tcx, cycle));"}, {"sha": "5a1b7f3aa4cb851343bee4e033c4d0d6edf91ea1", "filename": "src/librustc/util/profiling.rs", "status": "modified", "additions": 17, "deletions": 97, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/574b0780abfecae976a5dfd3e0accb0c821e18e0/src%2Flibrustc%2Futil%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574b0780abfecae976a5dfd3e0accb0c821e18e0/src%2Flibrustc%2Futil%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fprofiling.rs?ref=574b0780abfecae976a5dfd3e0accb0c821e18e0", "patch": "@@ -14,9 +14,12 @@ use measureme::{StringId, TimestampKind};\n /// MmapSerializatioSink is faster on macOS and Linux\n /// but FileSerializationSink is faster on Windows\n #[cfg(not(windows))]\n-type Profiler = measureme::Profiler<measureme::MmapSerializationSink>;\n+type SerializationSink = measureme::MmapSerializationSink;\n #[cfg(windows)]\n-type Profiler = measureme::Profiler<measureme::FileSerializationSink>;\n+type SerializationSink = measureme::FileSerializationSink;\n+\n+type Profiler = measureme::Profiler<SerializationSink>;\n+\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Ord, PartialOrd)]\n pub enum ProfileCategory {\n@@ -131,32 +134,6 @@ impl SelfProfilerRef {\n         })\n     }\n \n-    /// Start profiling a generic activity. Profiling continues until\n-    /// `generic_activity_end` is called. The RAII-based `generic_activity`\n-    /// usually is the better alternative.\n-    #[inline(always)]\n-    pub fn generic_activity_start(&self, event_id: &str) {\n-        self.non_guard_generic_event(\n-            |profiler| profiler.generic_activity_event_kind,\n-            |profiler| profiler.profiler.alloc_string(event_id),\n-            EventFilter::GENERIC_ACTIVITIES,\n-            TimestampKind::Start,\n-        );\n-    }\n-\n-    /// End profiling a generic activity that was started with\n-    /// `generic_activity_start`. The RAII-based `generic_activity` usually is\n-    /// the better alternative.\n-    #[inline(always)]\n-    pub fn generic_activity_end(&self, event_id: &str) {\n-        self.non_guard_generic_event(\n-            |profiler| profiler.generic_activity_event_kind,\n-            |profiler| profiler.profiler.alloc_string(event_id),\n-            EventFilter::GENERIC_ACTIVITIES,\n-            TimestampKind::End,\n-        );\n-    }\n-\n     /// Start profiling a query provider. Profiling continues until the\n     /// TimingGuard returned from this call is dropped.\n     #[inline(always)]\n@@ -179,26 +156,14 @@ impl SelfProfilerRef {\n     }\n \n     /// Start profiling a query being blocked on a concurrent execution.\n-    /// Profiling continues until `query_blocked_end` is called.\n-    #[inline(always)]\n-    pub fn query_blocked_start(&self, query_name: QueryName) {\n-        self.non_guard_query_event(\n-            |profiler| profiler.query_blocked_event_kind,\n-            query_name,\n-            EventFilter::QUERY_BLOCKED,\n-            TimestampKind::Start,\n-        );\n-    }\n-\n-    /// End profiling a query being blocked on a concurrent execution.\n+    /// Profiling continues until the TimingGuard returned from this call is\n+    /// dropped.\n     #[inline(always)]\n-    pub fn query_blocked_end(&self, query_name: QueryName) {\n-        self.non_guard_query_event(\n-            |profiler| profiler.query_blocked_event_kind,\n-            query_name,\n-            EventFilter::QUERY_BLOCKED,\n-            TimestampKind::End,\n-        );\n+    pub fn query_blocked(&self, query_name: QueryName) -> TimingGuard<'_> {\n+        self.exec(EventFilter::QUERY_BLOCKED, |profiler| {\n+            let event_id = SelfProfiler::get_query_name_string_id(query_name);\n+            TimingGuard::start(profiler, profiler.query_blocked_event_kind, event_id)\n+        })\n     }\n \n     /// Start profiling how long it takes to load a query result from the\n@@ -238,28 +203,6 @@ impl SelfProfilerRef {\n             TimingGuard::none()\n         }));\n     }\n-\n-    #[inline(always)]\n-    fn non_guard_generic_event<F: FnOnce(&SelfProfiler) -> StringId>(\n-        &self,\n-        event_kind: fn(&SelfProfiler) -> StringId,\n-        event_id: F,\n-        event_filter: EventFilter,\n-        timestamp_kind: TimestampKind\n-    ) {\n-        drop(self.exec(event_filter, |profiler| {\n-            let thread_id = thread_id_to_u64(std::thread::current().id());\n-\n-            profiler.profiler.record_event(\n-                event_kind(profiler),\n-                event_id(profiler),\n-                thread_id,\n-                timestamp_kind,\n-            );\n-\n-            TimingGuard::none()\n-        }));\n-    }\n }\n \n pub struct SelfProfiler {\n@@ -346,14 +289,7 @@ impl SelfProfiler {\n }\n \n #[must_use]\n-pub struct TimingGuard<'a>(Option<TimingGuardInternal<'a>>);\n-\n-struct TimingGuardInternal<'a> {\n-    raw_profiler: &'a Profiler,\n-    event_id: StringId,\n-    event_kind: StringId,\n-    thread_id: u64,\n-}\n+pub struct TimingGuard<'a>(Option<measureme::TimingGuard<'a, SerializationSink>>);\n \n impl<'a> TimingGuard<'a> {\n     #[inline]\n@@ -364,30 +300,14 @@ impl<'a> TimingGuard<'a> {\n     ) -> TimingGuard<'a> {\n         let thread_id = thread_id_to_u64(std::thread::current().id());\n         let raw_profiler = &profiler.profiler;\n-        raw_profiler.record_event(event_kind, event_id, thread_id, TimestampKind::Start);\n-\n-        TimingGuard(Some(TimingGuardInternal {\n-            raw_profiler,\n-            event_kind,\n-            event_id,\n-            thread_id,\n-        }))\n+        let timing_guard = raw_profiler.start_recording_interval_event(event_kind,\n+                                                                       event_id,\n+                                                                       thread_id);\n+        TimingGuard(Some(timing_guard))\n     }\n \n     #[inline]\n     pub fn none() -> TimingGuard<'a> {\n         TimingGuard(None)\n     }\n }\n-\n-impl<'a> Drop for TimingGuardInternal<'a> {\n-    #[inline]\n-    fn drop(&mut self) {\n-        self.raw_profiler.record_event(\n-            self.event_kind,\n-            self.event_id,\n-            self.thread_id,\n-            TimestampKind::End\n-        );\n-    }\n-}"}]}