{"sha": "293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e", "node_id": "C_kwDOAAsO6NoAKDI5M2I4ZjJjMTFjYmVjMDNmMGQ0ZGFhZTZiODJlZDc1NDFlYmJmNGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-24T01:48:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-24T01:48:02Z"}, "message": "Auto merge of #89211 - workingjubilee:rollup-fj4eduk, r=workingjubilee\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #88612 (Add a better error message for #39364)\n - #89023 (Resolve issue : Somewhat confusing error with extended_key_value_attributes)\n - #89148 (Suggest `_` in turbofish if param will be inferred from fn argument)\n - #89171 (Run `no_core` rustdoc tests only on Linux)\n - #89176 (Change singular to plural)\n - #89184 (Temporarily rename int_roundings functions to avoid conflicts)\n - #89200 (Fix typo)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8b2059d304cdf68e31a428247287d154f02c75fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b2059d304cdf68e31a428247287d154f02c75fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e", "html_url": "https://github.com/rust-lang/rust/commit/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "900cf5e8905ba8a2a9c99a1dfc9cb2cf4754d77a", "url": "https://api.github.com/repos/rust-lang/rust/commits/900cf5e8905ba8a2a9c99a1dfc9cb2cf4754d77a", "html_url": "https://github.com/rust-lang/rust/commit/900cf5e8905ba8a2a9c99a1dfc9cb2cf4754d77a"}, {"sha": "1875cecfd46a347dac9c9e23910e4b39be3a9d5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1875cecfd46a347dac9c9e23910e4b39be3a9d5f", "html_url": "https://github.com/rust-lang/rust/commit/1875cecfd46a347dac9c9e23910e4b39be3a9d5f"}], "stats": {"total": 200, "additions": 146, "deletions": 54}, "files": [{"sha": "d9b7022f03ac1a9ac2e74e61e87f1b22b2556963", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e", "patch": "@@ -7,7 +7,7 @@\n //! inference graph arose so that we can explain to the user what gave\n //! rise to a particular error.\n //!\n-//! The basis of the system are the \"origin\" types. An \"origin\" is the\n+//! The system is based around a set of \"origin\" types. An \"origin\" is the\n //! reason that a constraint or inference variable arose. There are\n //! different \"origin\" enums for different kinds of constraints/variables\n //! (e.g., `TypeOrigin`, `RegionVariableOrigin`). An origin always has"}, {"sha": "b4f7a9fa8e9d6584afb69e4201a9ba3fe8281db5", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e", "patch": "@@ -599,7 +599,7 @@ rustc_queries! {\n         desc { \"computing the inferred outlives predicates for items in this crate\" }\n     }\n \n-    /// Maps from an impl/trait `DefId to a list of the `DefId`s of its items.\n+    /// Maps from an impl/trait `DefId` to a list of the `DefId`s of its items.\n     query associated_item_def_ids(key: DefId) -> &'tcx [DefId] {\n         desc { |tcx| \"collecting associated items of `{}`\", tcx.def_path_str(key) }\n     }"}, {"sha": "c5417ea23f2190ab466b5a06a2ab90735f937bb3", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e", "patch": "@@ -1568,6 +1568,20 @@ impl<'a> Parser<'a> {\n \n     pub(super) fn parse_lit(&mut self) -> PResult<'a, Lit> {\n         self.parse_opt_lit().ok_or_else(|| {\n+            if let token::Interpolated(inner) = &self.token.kind {\n+                let expr = match inner.as_ref() {\n+                    token::NtExpr(expr) => Some(expr),\n+                    token::NtLiteral(expr) => Some(expr),\n+                    _ => None,\n+                };\n+                if let Some(expr) = expr {\n+                    if matches!(expr.kind, ExprKind::Err) {\n+                        self.diagnostic()\n+                            .delay_span_bug(self.token.span, &\"invalid interpolated expression\");\n+                        return self.diagnostic().struct_dummy();\n+                    }\n+                }\n+            }\n             let msg = format!(\"unexpected token: {}\", super::token_descr(&self.token));\n             self.struct_span_err(self.token.span, &msg)\n         })"}, {"sha": "2e3db4d6d655f53447438c62ec0c76ad90b7a397", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e", "patch": "@@ -1,6 +1,7 @@\n use crate::structured_errors::StructuredDiagnostic;\n use rustc_errors::{pluralize, Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc_hir as hir;\n+use rustc_middle::hir::map::fn_sig;\n use rustc_middle::middle::resolve_lifetime::LifetimeScopeForPath;\n use rustc_middle::ty::{self as ty, TyCtxt};\n use rustc_session::Session;\n@@ -292,12 +293,30 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n         &self,\n         num_params_to_take: usize,\n     ) -> String {\n+        let fn_sig = self.tcx.hir().get_if_local(self.def_id).and_then(|node| fn_sig(node));\n+        let is_used_in_input = |def_id| {\n+            fn_sig.map_or(false, |fn_sig| {\n+                fn_sig.decl.inputs.iter().any(|ty| match ty.kind {\n+                    hir::TyKind::Path(hir::QPath::Resolved(\n+                        None,\n+                        hir::Path { res: hir::def::Res::Def(_, id), .. },\n+                    )) if *id == def_id => true,\n+                    _ => false,\n+                })\n+            })\n+        };\n         self.gen_params\n             .params\n             .iter()\n             .skip(self.params_offset + self.num_provided_type_or_const_args())\n             .take(num_params_to_take)\n-            .map(|param| param.name.to_string())\n+            .map(|param| match param.kind {\n+                // This is being infered from the item's inputs, no need to set it.\n+                ty::GenericParamDefKind::Type { .. } if is_used_in_input(param.def_id) => {\n+                    \"_\".to_string()\n+                }\n+                _ => param.name.to_string(),\n+            })\n             .collect::<Vec<_>>()\n             .join(\", \")\n     }"}, {"sha": "daef5c98967cc4cfe1ca9058da04ff97725a25f3", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e", "patch": "@@ -1849,17 +1849,17 @@ macro_rules! int_impl {\n         #[doc = concat!(\"let a: \", stringify!($SelfT),\" = 8;\")]\n         /// let b = 3;\n         ///\n-        /// assert_eq!(a.div_floor(b), 2);\n-        /// assert_eq!(a.div_floor(-b), -3);\n-        /// assert_eq!((-a).div_floor(b), -3);\n-        /// assert_eq!((-a).div_floor(-b), 2);\n+        /// assert_eq!(a.unstable_div_floor(b), 2);\n+        /// assert_eq!(a.unstable_div_floor(-b), -3);\n+        /// assert_eq!((-a).unstable_div_floor(b), -3);\n+        /// assert_eq!((-a).unstable_div_floor(-b), 2);\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n-        pub const fn div_floor(self, rhs: Self) -> Self {\n+        pub const fn unstable_div_floor(self, rhs: Self) -> Self {\n             let d = self / rhs;\n             let r = self % rhs;\n             if (r > 0 && rhs < 0) || (r < 0 && rhs > 0) {\n@@ -1884,17 +1884,17 @@ macro_rules! int_impl {\n         #[doc = concat!(\"let a: \", stringify!($SelfT),\" = 8;\")]\n         /// let b = 3;\n         ///\n-        /// assert_eq!(a.div_ceil(b), 3);\n-        /// assert_eq!(a.div_ceil(-b), -2);\n-        /// assert_eq!((-a).div_ceil(b), -2);\n-        /// assert_eq!((-a).div_ceil(-b), 3);\n+        /// assert_eq!(a.unstable_div_ceil(b), 3);\n+        /// assert_eq!(a.unstable_div_ceil(-b), -2);\n+        /// assert_eq!((-a).unstable_div_ceil(b), -2);\n+        /// assert_eq!((-a).unstable_div_ceil(-b), 3);\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n-        pub const fn div_ceil(self, rhs: Self) -> Self {\n+        pub const fn unstable_div_ceil(self, rhs: Self) -> Self {\n             let d = self / rhs;\n             let r = self % rhs;\n             if (r > 0 && rhs > 0) || (r < 0 && rhs < 0) {\n@@ -1919,21 +1919,21 @@ macro_rules! int_impl {\n         ///\n         /// ```\n         /// #![feature(int_roundings)]\n-        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".next_multiple_of(8), 16);\")]\n-        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".next_multiple_of(8), 24);\")]\n-        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".next_multiple_of(-8), 16);\")]\n-        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".next_multiple_of(-8), 16);\")]\n-        #[doc = concat!(\"assert_eq!((-16_\", stringify!($SelfT), \").next_multiple_of(8), -16);\")]\n-        #[doc = concat!(\"assert_eq!((-23_\", stringify!($SelfT), \").next_multiple_of(8), -16);\")]\n-        #[doc = concat!(\"assert_eq!((-16_\", stringify!($SelfT), \").next_multiple_of(-8), -16);\")]\n-        #[doc = concat!(\"assert_eq!((-23_\", stringify!($SelfT), \").next_multiple_of(-8), -24);\")]\n+        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".unstable_next_multiple_of(8), 16);\")]\n+        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".unstable_next_multiple_of(8), 24);\")]\n+        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".unstable_next_multiple_of(-8), 16);\")]\n+        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".unstable_next_multiple_of(-8), 16);\")]\n+        #[doc = concat!(\"assert_eq!((-16_\", stringify!($SelfT), \").unstable_next_multiple_of(8), -16);\")]\n+        #[doc = concat!(\"assert_eq!((-23_\", stringify!($SelfT), \").unstable_next_multiple_of(8), -16);\")]\n+        #[doc = concat!(\"assert_eq!((-16_\", stringify!($SelfT), \").unstable_next_multiple_of(-8), -16);\")]\n+        #[doc = concat!(\"assert_eq!((-23_\", stringify!($SelfT), \").unstable_next_multiple_of(-8), -24);\")]\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n-        pub const fn next_multiple_of(self, rhs: Self) -> Self {\n+        pub const fn unstable_next_multiple_of(self, rhs: Self) -> Self {\n             // This would otherwise fail when calculating `r` when self == T::MIN.\n             if rhs == -1 {\n                 return self;"}, {"sha": "8ce826626309147f7c2ace97f2ca3f975cd8305e", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e", "patch": "@@ -1859,12 +1859,12 @@ macro_rules! uint_impl {\n         ///\n         /// ```\n         /// #![feature(int_roundings)]\n-        #[doc = concat!(\"assert_eq!(7_\", stringify!($SelfT), \".div_floor(4), 1);\")]\n+        #[doc = concat!(\"assert_eq!(7_\", stringify!($SelfT), \".unstable_div_floor(4), 1);\")]\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n         #[inline(always)]\n         #[rustc_inherit_overflow_checks]\n-        pub const fn div_floor(self, rhs: Self) -> Self {\n+        pub const fn unstable_div_floor(self, rhs: Self) -> Self {\n             self / rhs\n         }\n \n@@ -1880,12 +1880,12 @@ macro_rules! uint_impl {\n         ///\n         /// ```\n         /// #![feature(int_roundings)]\n-        #[doc = concat!(\"assert_eq!(7_\", stringify!($SelfT), \".div_ceil(4), 2);\")]\n+        #[doc = concat!(\"assert_eq!(7_\", stringify!($SelfT), \".unstable_div_ceil(4), 2);\")]\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n-        pub const fn div_ceil(self, rhs: Self) -> Self {\n+        pub const fn unstable_div_ceil(self, rhs: Self) -> Self {\n             let d = self / rhs;\n             let r = self % rhs;\n             if r > 0 && rhs > 0 {\n@@ -1908,15 +1908,15 @@ macro_rules! uint_impl {\n         ///\n         /// ```\n         /// #![feature(int_roundings)]\n-        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".next_multiple_of(8), 16);\")]\n-        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".next_multiple_of(8), 24);\")]\n+        #[doc = concat!(\"assert_eq!(16_\", stringify!($SelfT), \".unstable_next_multiple_of(8), 16);\")]\n+        #[doc = concat!(\"assert_eq!(23_\", stringify!($SelfT), \".unstable_next_multiple_of(8), 24);\")]\n         /// ```\n         #[unstable(feature = \"int_roundings\", issue = \"88581\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n         #[rustc_inherit_overflow_checks]\n-        pub const fn next_multiple_of(self, rhs: Self) -> Self {\n+        pub const fn unstable_next_multiple_of(self, rhs: Self) -> Self {\n             match self % rhs {\n                 0 => self,\n                 r => self + (rhs - r)"}, {"sha": "0ad85bf6d943d1d254ef0f34a0d0a348b8b0108c", "filename": "library/core/tests/num/int_macros.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fint_macros.rs?ref=293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e", "patch": "@@ -294,33 +294,33 @@ macro_rules! int_module {\n             fn test_div_floor() {\n                 let a: $T = 8;\n                 let b = 3;\n-                assert_eq!(a.div_floor(b), 2);\n-                assert_eq!(a.div_floor(-b), -3);\n-                assert_eq!((-a).div_floor(b), -3);\n-                assert_eq!((-a).div_floor(-b), 2);\n+                assert_eq!(a.unstable_div_floor(b), 2);\n+                assert_eq!(a.unstable_div_floor(-b), -3);\n+                assert_eq!((-a).unstable_div_floor(b), -3);\n+                assert_eq!((-a).unstable_div_floor(-b), 2);\n             }\n \n             #[test]\n             fn test_div_ceil() {\n                 let a: $T = 8;\n                 let b = 3;\n-                assert_eq!(a.div_ceil(b), 3);\n-                assert_eq!(a.div_ceil(-b), -2);\n-                assert_eq!((-a).div_ceil(b), -2);\n-                assert_eq!((-a).div_ceil(-b), 3);\n+                assert_eq!(a.unstable_div_ceil(b), 3);\n+                assert_eq!(a.unstable_div_ceil(-b), -2);\n+                assert_eq!((-a).unstable_div_ceil(b), -2);\n+                assert_eq!((-a).unstable_div_ceil(-b), 3);\n             }\n \n             #[test]\n             fn test_next_multiple_of() {\n-                assert_eq!((16 as $T).next_multiple_of(8), 16);\n-                assert_eq!((23 as $T).next_multiple_of(8), 24);\n-                assert_eq!((16 as $T).next_multiple_of(-8), 16);\n-                assert_eq!((23 as $T).next_multiple_of(-8), 16);\n-                assert_eq!((-16 as $T).next_multiple_of(8), -16);\n-                assert_eq!((-23 as $T).next_multiple_of(8), -16);\n-                assert_eq!((-16 as $T).next_multiple_of(-8), -16);\n-                assert_eq!((-23 as $T).next_multiple_of(-8), -24);\n-                assert_eq!(MIN.next_multiple_of(-1), MIN);\n+                assert_eq!((16 as $T).unstable_next_multiple_of(8), 16);\n+                assert_eq!((23 as $T).unstable_next_multiple_of(8), 24);\n+                assert_eq!((16 as $T).unstable_next_multiple_of(-8), 16);\n+                assert_eq!((23 as $T).unstable_next_multiple_of(-8), 16);\n+                assert_eq!((-16 as $T).unstable_next_multiple_of(8), -16);\n+                assert_eq!((-23 as $T).unstable_next_multiple_of(8), -16);\n+                assert_eq!((-16 as $T).unstable_next_multiple_of(-8), -16);\n+                assert_eq!((-23 as $T).unstable_next_multiple_of(-8), -24);\n+                assert_eq!(MIN.unstable_next_multiple_of(-1), MIN);\n             }\n \n             #[test]"}, {"sha": "35ec88c6af7d6873396354bed9154eb2732310f7", "filename": "library/core/tests/num/uint_macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/library%2Fcore%2Ftests%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/library%2Fcore%2Ftests%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fuint_macros.rs?ref=293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e", "patch": "@@ -208,19 +208,19 @@ macro_rules! uint_module {\n \n             #[test]\n             fn test_div_floor() {\n-                assert_eq!((8 as $T).div_floor(3), 2);\n+                assert_eq!((8 as $T).unstable_div_floor(3), 2);\n             }\n \n             #[test]\n             fn test_div_ceil() {\n-                assert_eq!((8 as $T).div_ceil(3), 3);\n+                assert_eq!((8 as $T).unstable_div_ceil(3), 3);\n             }\n \n             #[test]\n             fn test_next_multiple_of() {\n-                assert_eq!((16 as $T).next_multiple_of(8), 16);\n-                assert_eq!((23 as $T).next_multiple_of(8), 24);\n-                assert_eq!(MAX.next_multiple_of(1), MAX);\n+                assert_eq!((16 as $T).unstable_next_multiple_of(8), 16);\n+                assert_eq!((23 as $T).unstable_next_multiple_of(8), 24);\n+                assert_eq!(MAX.unstable_next_multiple_of(1), MAX);\n             }\n \n             #[test]"}, {"sha": "8487a5f8b50d3215790285d4841ac2ec1021afc4", "filename": "library/std/src/sync/mpsc/shared.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fshared.rs?ref=293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e", "patch": "@@ -248,7 +248,11 @@ impl<T> Packet<T> {\n     // Returns true if blocking should proceed.\n     fn decrement(&self, token: SignalToken) -> StartResult {\n         unsafe {\n-            assert_eq!(self.to_wake.load(Ordering::SeqCst), 0);\n+            assert_eq!(\n+                self.to_wake.load(Ordering::SeqCst),\n+                0,\n+                \"This is a known bug in the Rust standard library. See https://github.com/rust-lang/rust/issues/39364\"\n+            );\n             let ptr = token.cast_to_usize();\n             self.to_wake.store(ptr, Ordering::SeqCst);\n "}, {"sha": "4ba296ee04a1a5218acb1117d72c1ee4740eca42", "filename": "src/test/rustdoc/cross-crate-primitive-doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/src%2Ftest%2Frustdoc%2Fcross-crate-primitive-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/src%2Ftest%2Frustdoc%2Fcross-crate-primitive-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcross-crate-primitive-doc.rs?ref=293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e", "patch": "@@ -1,6 +1,6 @@\n // aux-build:primitive-doc.rs\n // compile-flags: --extern-html-root-url=primitive_doc=../ -Z unstable-options\n-// ignore-windows\n+// only-linux\n \n #![feature(no_core)]\n #![no_core]"}, {"sha": "9d869984bbd7ce7e1d6333df122ae3fcdd9c267e", "filename": "src/test/rustdoc/intra-doc/prim-methods-external-core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-external-core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-external-core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-methods-external-core.rs?ref=293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e", "patch": "@@ -1,7 +1,7 @@\n // aux-build:my-core.rs\n // build-aux-docs\n // ignore-cross-compile\n-// ignore-windows\n+// only-linux\n \n #![deny(broken_intra_doc_links)]\n #![feature(no_core, lang_items)]"}, {"sha": "f5f75f9f4dac5dbf9e62307de61b8d792f204641", "filename": "src/test/ui/attributes/extented-attribute-macro-error.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/src%2Ftest%2Fui%2Fattributes%2Fextented-attribute-macro-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/src%2Ftest%2Fui%2Fattributes%2Fextented-attribute-macro-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fextented-attribute-macro-error.rs?ref=293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e", "patch": "@@ -0,0 +1,8 @@\n+// normalize-stderr-test: \"couldn't read.*\" -> \"couldn't read the file\"\n+\n+#![feature(extended_key_value_attributes)]\n+#![doc = include_str!(\"../not_existing_file.md\")]\n+struct Documented {}\n+//~^^ ERROR couldn't read\n+\n+fn main() {}"}, {"sha": "e4deeacd0ff605f676e406681bac632f19f5e05f", "filename": "src/test/ui/attributes/extented-attribute-macro-error.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/src%2Ftest%2Fui%2Fattributes%2Fextented-attribute-macro-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/src%2Ftest%2Fui%2Fattributes%2Fextented-attribute-macro-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fextented-attribute-macro-error.stderr?ref=293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e", "patch": "@@ -0,0 +1,10 @@\n+error: couldn't read the file\n+  --> $DIR/extented-attribute-macro-error.rs:4:10\n+   |\n+LL | #![doc = include_str!(\"../not_existing_file.md\")]\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in the macro `include_str` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}, {"sha": "cc4120041b9865e7215259af4ec5ef3a50793dc2", "filename": "src/test/ui/suggestions/missing-type-param-used-in-param.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.fixed?ref=293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+\n+fn two_type_params<A, B>(_: B) {}\n+\n+fn main() {\n+    two_type_params::<String, _>(100); //~ ERROR this function takes 2 generic arguments\n+    two_type_params::<String, _>(100);\n+}"}, {"sha": "19286331b60232d7c21cdf485310beab74d9eda1", "filename": "src/test/ui/suggestions/missing-type-param-used-in-param.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.rs?ref=293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+\n+fn two_type_params<A, B>(_: B) {}\n+\n+fn main() {\n+    two_type_params::<String>(100); //~ ERROR this function takes 2 generic arguments\n+    two_type_params::<String, _>(100);\n+}"}, {"sha": "4f7058a6492596ad1382c9050548042c8333661b", "filename": "src/test/ui/suggestions/missing-type-param-used-in-param.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.stderr?ref=293b8f2c11cbec03f0d4daae6b82ed7541ebbf4e", "patch": "@@ -0,0 +1,21 @@\n+error[E0107]: this function takes 2 generic arguments but 1 generic argument was supplied\n+  --> $DIR/missing-type-param-used-in-param.rs:6:5\n+   |\n+LL |     two_type_params::<String>(100);\n+   |     ^^^^^^^^^^^^^^^   ------ supplied 1 generic argument\n+   |     |\n+   |     expected 2 generic arguments\n+   |\n+note: function defined here, with 2 generic parameters: `A`, `B`\n+  --> $DIR/missing-type-param-used-in-param.rs:3:4\n+   |\n+LL | fn two_type_params<A, B>(_: B) {}\n+   |    ^^^^^^^^^^^^^^^ -  -\n+help: add missing generic argument\n+   |\n+LL |     two_type_params::<String, _>(100);\n+   |                             +++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}]}