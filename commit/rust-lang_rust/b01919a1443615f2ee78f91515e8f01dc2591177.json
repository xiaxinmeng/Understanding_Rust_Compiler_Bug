{"sha": "b01919a1443615f2ee78f91515e8f01dc2591177", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMTkxOWExNDQzNjE1ZjJlZTc4ZjkxNTE1ZThmMDFkYzI1OTExNzc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-06T18:52:57Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-18T14:11:36Z"}, "message": "allow retracing paths across crates\n\nFor external crates, we must build up a map that goes from\nthe DefKey to the DefIndex. We do this by iterating over each\nindex that is found in the metadata and loading the associated\nDefKey.", "tree": {"sha": "3c7f7f49d4e53e57517a88c0466e203a37b39b0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c7f7f49d4e53e57517a88c0466e203a37b39b0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b01919a1443615f2ee78f91515e8f01dc2591177", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b01919a1443615f2ee78f91515e8f01dc2591177", "html_url": "https://github.com/rust-lang/rust/commit/b01919a1443615f2ee78f91515e8f01dc2591177", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b01919a1443615f2ee78f91515e8f01dc2591177/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "303fdc17f6bb842668e0fdd1e1a2c16841ae7373", "url": "https://api.github.com/repos/rust-lang/rust/commits/303fdc17f6bb842668e0fdd1e1a2c16841ae7373", "html_url": "https://github.com/rust-lang/rust/commit/303fdc17f6bb842668e0fdd1e1a2c16841ae7373"}], "stats": {"total": 167, "additions": 123, "deletions": 44}, "files": [{"sha": "457511cdbc3b17057283d670b8df41f2f84b6946", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 6, "deletions": 31, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b01919a1443615f2ee78f91515e8f01dc2591177/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01919a1443615f2ee78f91515e8f01dc2591177/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=b01919a1443615f2ee78f91515e8f01dc2591177", "patch": "@@ -82,8 +82,10 @@ impl DefPath {\n         let mut data = vec![];\n         let mut index = Some(start_index);\n         loop {\n+            debug!(\"DefPath::make: krate={:?} index={:?}\", krate, index);\n             let p = index.unwrap();\n             let key = get_key(p);\n+            debug!(\"DefPath::make: key={:?}\", key);\n             match key.disambiguated_data.data {\n                 DefPathData::CrateRoot => {\n                     assert!(key.parent.is_none());\n@@ -178,6 +180,10 @@ impl Definitions {\n         self.data[index.as_usize()].key.clone()\n     }\n \n+    pub fn def_index_for_def_key(&self, key: DefKey) -> Option<DefIndex> {\n+        self.key_map.get(&key).cloned()\n+    }\n+\n     /// Returns the path from the crate root to `index`. The root\n     /// nodes are not included in the path (i.e., this will be an\n     /// empty vector for the crate root). For an inlined item, this\n@@ -208,37 +214,6 @@ impl Definitions {\n         }\n     }\n \n-    pub fn retrace_path(&self, path: &DefPath) -> Option<DefIndex> {\n-        debug!(\"retrace_path(path={:?})\", path);\n-\n-        // we assume that we only want to retrace paths relative to\n-        // the crate root\n-        assert!(path.is_local());\n-\n-        let root_key = DefKey {\n-            parent: None,\n-            disambiguated_data: DisambiguatedDefPathData {\n-                data: DefPathData::CrateRoot,\n-                disambiguator: 0,\n-            },\n-        };\n-        let root_id = self.key_map[&root_key];\n-\n-        debug!(\"retrace_path: root_id={:?}\", root_id);\n-\n-        let mut id = root_id;\n-        for data in &path.data {\n-            let key = DefKey { parent: Some(id), disambiguated_data: data.clone() };\n-            debug!(\"key = {:?}\", key);\n-            id = match self.key_map.get(&key) {\n-                Some(&id) => id,\n-                None => return None\n-            };\n-        }\n-\n-        Some(id)\n-    }\n-\n     pub fn create_def_with_parent(&mut self,\n                                   parent: Option<DefIndex>,\n                                   node_id: ast::NodeId,"}, {"sha": "2f310806a7420fa068b4d71ffeec5f661627d415", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b01919a1443615f2ee78f91515e8f01dc2591177/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01919a1443615f2ee78f91515e8f01dc2591177/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=b01919a1443615f2ee78f91515e8f01dc2591177", "patch": "@@ -19,7 +19,7 @@ use dep_graph::{DepGraph, DepNode};\n \n use middle::cstore::InlinedItem;\n use middle::cstore::InlinedItem as II;\n-use hir::def_id::{CRATE_DEF_INDEX, DefId};\n+use hir::def_id::{CRATE_DEF_INDEX, DefId, DefIndex};\n \n use syntax::abi::Abi;\n use syntax::ast::{self, Name, NodeId, DUMMY_NODE_ID, };\n@@ -285,9 +285,8 @@ impl<'ast> Map<'ast> {\n         self.definitions.borrow().def_path(def_id.index)\n     }\n \n-    pub fn retrace_path(&self, path: &DefPath) -> Option<DefId> {\n-        self.definitions.borrow().retrace_path(path)\n-                                 .map(DefId::local)\n+    pub fn def_index_for_def_key(&self, def_key: DefKey) -> Option<DefIndex> {\n+        self.definitions.borrow().def_index_for_def_key(def_key)\n     }\n \n     pub fn local_def_id(&self, node: NodeId) -> DefId {"}, {"sha": "e5a8c1d1b4e6fe3542aee6b7446651c327c5bfcc", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b01919a1443615f2ee78f91515e8f01dc2591177/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01919a1443615f2ee78f91515e8f01dc2591177/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=b01919a1443615f2ee78f91515e8f01dc2591177", "patch": "@@ -22,12 +22,13 @@\n // are *mostly* used as a part of that interface, but these should\n // probably get a better home if someone can find one.\n \n-use hir::svh::Svh;\n-use hir::map as hir_map;\n use hir::def::{self, Def};\n+use hir::def_id::{DefId, DefIndex};\n+use hir::map as hir_map;\n+use hir::map::definitions::DefKey;\n+use hir::svh::Svh;\n use middle::lang_items;\n use ty::{self, Ty, TyCtxt, VariantKind};\n-use hir::def_id::{DefId, DefIndex};\n use mir::repr::Mir;\n use mir::mir_map::MirMap;\n use session::Session;\n@@ -234,6 +235,10 @@ pub trait CrateStore<'tcx> {\n     fn reachable_ids(&self, cnum: ast::CrateNum) -> Vec<DefId>;\n \n     // resolve\n+    fn def_index_for_def_key(&self,\n+                             cnum: ast::CrateNum,\n+                             def: DefKey)\n+                             -> Option<DefIndex>;\n     fn def_key(&self, def: DefId) -> hir_map::DefKey;\n     fn relative_def_path(&self, def: DefId) -> hir_map::DefPath;\n     fn variant_kind(&self, def_id: DefId) -> Option<VariantKind>;\n@@ -361,6 +366,12 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n                                   -> Vec<Rc<ty::Method<'tcx>>> { bug!(\"provided_trait_methods\") }\n     fn trait_item_def_ids(&self, def: DefId)\n                           -> Vec<ty::ImplOrTraitItemId> { bug!(\"trait_item_def_ids\") }\n+    fn def_index_for_def_key(&self,\n+                             cnum: ast::CrateNum,\n+                             def: DefKey)\n+                             -> Option<DefIndex> {\n+        None\n+    }\n \n     // impl info\n     fn impl_items(&self, impl_def_id: DefId) -> Vec<ty::ImplOrTraitItemId>"}, {"sha": "ea169b1d3b65325d30e3b4fdc1475267685e713c", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b01919a1443615f2ee78f91515e8f01dc2591177/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01919a1443615f2ee78f91515e8f01dc2591177/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=b01919a1443615f2ee78f91515e8f01dc2591177", "patch": "@@ -11,13 +11,14 @@\n //! type context book-keeping\n \n use dep_graph::{DepGraph, DepTrackingMap};\n-use hir::map as ast_map;\n use session::Session;\n use lint;\n use middle;\n use middle::cstore::LOCAL_CRATE;\n use hir::def::DefMap;\n-use hir::def_id::DefId;\n+use hir::def_id::{DefId, DefIndex};\n+use hir::map as ast_map;\n+use hir::map::{DefKey, DefPath, DefPathData, DisambiguatedDefPathData};\n use middle::free_region::FreeRegionMap;\n use middle::region::RegionMaps;\n use middle::resolve_lifetime;\n@@ -511,6 +512,49 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    /// Given a def-key `key` and a crate `krate`, finds the def-index\n+    /// that `krate` assigned to `key`. This `DefIndex` will always be\n+    /// relative to `krate`.\n+    ///\n+    /// Returns `None` if there is no `DefIndex` with that key.\n+    pub fn def_index_for_def_key(self, krate: ast::CrateNum, key: DefKey)\n+                                 -> Option<DefIndex> {\n+        if krate == LOCAL_CRATE {\n+            self.map.def_index_for_def_key(key)\n+        } else {\n+            self.sess.cstore.def_index_for_def_key(krate, key)\n+        }\n+    }\n+\n+    pub fn retrace_path(self, path: &DefPath) -> Option<DefId> {\n+        debug!(\"retrace_path(path={:?})\", path);\n+\n+        let root_key = DefKey {\n+            parent: None,\n+            disambiguated_data: DisambiguatedDefPathData {\n+                data: DefPathData::CrateRoot,\n+                disambiguator: 0,\n+            },\n+        };\n+\n+        let root_index = self.def_index_for_def_key(path.krate, root_key)\n+                             .expect(\"no root key?\");\n+\n+        debug!(\"retrace_path: root_index={:?}\", root_index);\n+\n+        let mut index = root_index;\n+        for data in &path.data {\n+            let key = DefKey { parent: Some(index), disambiguated_data: data.clone() };\n+            debug!(\"retrace_path: key={:?}\", key);\n+            match self.def_index_for_def_key(path.krate, key) {\n+                Some(i) => index = i,\n+                None => return None,\n+            }\n+        }\n+\n+        Some(DefId { krate: path.krate, index: index })\n+    }\n+\n     pub fn type_parameter_def(self,\n                               node_id: NodeId)\n                               -> ty::TypeParameterDef<'tcx>"}, {"sha": "0775315875367173cb996bd6aa0014bec9cf636a", "filename": "src/librustc_incremental/persist/directory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b01919a1443615f2ee78f91515e8f01dc2591177/src%2Flibrustc_incremental%2Fpersist%2Fdirectory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01919a1443615f2ee78f91515e8f01dc2591177/src%2Flibrustc_incremental%2Fpersist%2Fdirectory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirectory.rs?ref=b01919a1443615f2ee78f91515e8f01dc2591177", "patch": "@@ -41,7 +41,7 @@ impl DefIdDirectory {\n \n     pub fn retrace(&self, tcx: TyCtxt) -> RetracedDefIdDirectory {\n         let ids = self.paths.iter()\n-                            .map(|path| tcx.map.retrace_path(path))\n+                            .map(|path| tcx.retrace_path(path))\n                             .collect();\n         RetracedDefIdDirectory { ids: ids }\n     }"}, {"sha": "0eacc0907bc25b2ce151cb6938a7a435009675dd", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b01919a1443615f2ee78f91515e8f01dc2591177/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01919a1443615f2ee78f91515e8f01dc2591177/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=b01919a1443615f2ee78f91515e8f01dc2591177", "patch": "@@ -319,6 +319,7 @@ impl<'a> CrateReader<'a> {\n             extern_crate: Cell::new(None),\n             index: decoder::load_index(metadata.as_slice()),\n             xref_index: decoder::load_xrefs(metadata.as_slice()),\n+            key_map: decoder::load_key_map(metadata.as_slice()),\n             data: metadata,\n             cnum_map: RefCell::new(cnum_map),\n             cnum: cnum,"}, {"sha": "b87b5492f0440405151b4545c6990ebce4edaf5f", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b01919a1443615f2ee78f91515e8f01dc2591177/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01919a1443615f2ee78f91515e8f01dc2591177/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=b01919a1443615f2ee78f91515e8f01dc2591177", "patch": "@@ -22,6 +22,7 @@ use rustc::hir::def_id::{DefId, DefIndex, CRATE_DEF_INDEX};\n \n use rustc::dep_graph::DepNode;\n use rustc::hir::map as hir_map;\n+use rustc::hir::map::DefKey;\n use rustc::mir::repr::Mir;\n use rustc::mir::mir_map::MirMap;\n use rustc::util::nodemap::{FnvHashMap, NodeMap, NodeSet, DefIdMap};\n@@ -408,6 +409,14 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         decoder::get_reachable_ids(&cdata)\n     }\n \n+    fn def_index_for_def_key(&self,\n+                             cnum: ast::CrateNum,\n+                             def: DefKey)\n+                             -> Option<DefIndex> {\n+        let cdata = self.get_crate_data(cnum);\n+        cdata.key_map.get(&def).cloned()\n+    }\n+\n     /// Returns the `DefKey` for a given `DefId`. This indicates the\n     /// parent `DefId` as well as some idea of what kind of data the\n     /// `DefId` refers to."}, {"sha": "2e1bdf21c9a5ac072a675c9316a75dd66207f0ed", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b01919a1443615f2ee78f91515e8f01dc2591177/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01919a1443615f2ee78f91515e8f01dc2591177/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=b01919a1443615f2ee78f91515e8f01dc2591177", "patch": "@@ -21,7 +21,8 @@ use index;\n use loader;\n \n use rustc::dep_graph::DepGraph;\n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{DefIndex, DefId};\n+use rustc::hir::map::DefKey;\n use rustc::hir::svh::Svh;\n use rustc::middle::cstore::{ExternCrate};\n use rustc::session::config::PanicStrategy;\n@@ -79,6 +80,13 @@ pub struct crate_metadata {\n     pub index: index::Index,\n     pub xref_index: index::DenseIndex,\n \n+    /// For each public item in this crate, we encode a key.  When the\n+    /// crate is loaded, we read all the keys and put them in this\n+    /// hashmap, which gives the reverse mapping.  This allows us to\n+    /// quickly retrace a `DefPath`, which is needed for incremental\n+    /// compilation support.\n+    pub key_map: FnvHashMap<DefKey, DefIndex>,\n+\n     /// Flag if this crate is required by an rlib version of this crate, or in\n     /// other words whether it was explicitly linked to. An example of a crate\n     /// where this is false is when an allocator crate is injected into the"}, {"sha": "b6f35074b7dc701cf7a8f0d79339311561e84e57", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b01919a1443615f2ee78f91515e8f01dc2591177/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01919a1443615f2ee78f91515e8f01dc2591177/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=b01919a1443615f2ee78f91515e8f01dc2591177", "patch": "@@ -25,6 +25,7 @@ use tydecode::TyDecoder;\n \n use rustc::hir::svh::Svh;\n use rustc::hir::map as hir_map;\n+use rustc::hir::map::DefKey;\n use rustc::util::nodemap::FnvHashMap;\n use rustc::hir;\n use rustc::session::config::PanicStrategy;\n@@ -95,6 +96,29 @@ pub fn load_xrefs(data: &[u8]) -> index::DenseIndex {\n     index::DenseIndex::from_buf(index.data, index.start, index.end)\n }\n \n+// Go through each item in the metadata and create a map from that\n+// item's def-key to the item's DefIndex.\n+pub fn load_key_map(data: &[u8]) -> FnvHashMap<DefKey, DefIndex> {\n+    let root_doc = rbml::Doc::new(data);\n+    let items_doc = reader::get_doc(root_doc, tag_items);\n+    let items_data_doc = reader::get_doc(items_doc, tag_items_data);\n+    reader::docs(items_data_doc)\n+        .filter(|&(tag, _)| tag == tag_items_data_item)\n+        .map(|(_, item_doc)| {\n+            // load def-key from item\n+            let key = item_def_key(item_doc);\n+\n+            // load def-index from item; we only encode the full def-id,\n+            // so just pull out the index\n+            let def_id_doc = reader::get_doc(item_doc, tag_def_id);\n+            let def_id = untranslated_def_id(def_id_doc);\n+            assert!(def_id.is_local()); // local to the crate we are decoding, that is\n+\n+            (key, def_id.index)\n+        })\n+        .collect()\n+}\n+\n #[derive(Clone, Copy, Debug, PartialEq)]\n enum Family {\n     ImmStatic,             // c\n@@ -193,10 +217,14 @@ fn item_symbol(item: rbml::Doc) -> String {\n     reader::get_doc(item, tag_items_data_item_symbol).as_str().to_string()\n }\n \n-fn translated_def_id(cdata: Cmd, d: rbml::Doc) -> DefId {\n+fn untranslated_def_id(d: rbml::Doc) -> DefId {\n     let id = reader::doc_as_u64(d);\n     let index = DefIndex::new((id & 0xFFFF_FFFF) as usize);\n-    let def_id = DefId { krate: (id >> 32) as u32, index: index };\n+    DefId { krate: (id >> 32) as u32, index: index }\n+}\n+\n+fn translated_def_id(cdata: Cmd, d: rbml::Doc) -> DefId {\n+    let def_id = untranslated_def_id(d);\n     translate_def_id(cdata, def_id)\n }\n \n@@ -1750,6 +1778,10 @@ pub fn closure_ty<'a, 'tcx>(cdata: Cmd, closure_id: DefIndex, tcx: TyCtxt<'a, 't\n pub fn def_key(cdata: Cmd, id: DefIndex) -> hir_map::DefKey {\n     debug!(\"def_key: id={:?}\", id);\n     let item_doc = cdata.lookup_item(id);\n+    item_def_key(item_doc)\n+}\n+\n+fn item_def_key(item_doc: rbml::Doc) -> hir_map::DefKey {\n     match reader::maybe_get_doc(item_doc, tag_def_key) {\n         Some(def_key_doc) => {\n             let mut decoder = reader::Decoder::new(def_key_doc);"}]}