{"sha": "484d5b6e70e30e3e2b1714c9dcf641bb47f01b7c", "node_id": "C_kwDOAAsO6NoAKDQ4NGQ1YjZlNzBlMzBlM2UyYjE3MTRjOWRjZjY0MWJiNDdmMDFiN2M", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-08-30T16:00:53Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-08-30T16:12:14Z"}, "message": "fix: handle trait methods as inherent methods for placeholders", "tree": {"sha": "4eacbf35b43e325d74e6476659435ddba3f0cbc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4eacbf35b43e325d74e6476659435ddba3f0cbc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/484d5b6e70e30e3e2b1714c9dcf641bb47f01b7c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmMONt4ACgkQ4laYqTBY\nYXHbJg//XGPfUCx4v7CmiC839WC9KKsU1nyRckXWf7tSdiTSN2G7r5UKkN+QuD7S\nXixEsoDnjnrJEK62PKhjGUrmtiV7RcO8vIVkcFtAW040yD9YRjL/oOh+akQOnnEY\n0wA9EfWChYIvycNIkBIf7+Vg/T9oeaZgtZvbQ/sz4T1sqwJBgtaE5y8OG/flEVbN\nW3klK96idMFJ9Wau4F42F+qKJQc7vodvZPGvxal6MlIJNbgvxgsuE8ZUHJCmTEge\nzTtS4rHqN23pV3T7THphpBjydT64mYGFi21twIyoNHOK25zrpWut62zq7QkVO9Dh\npZAIn8JVeeu4hHY2+2KXnXmJcI1qF5jxNvkl68AzfR4TFnTu3p/+hL0slUVrVTyI\nqKSqYkTbT+/Lw62BFiKUu37ILuBDfkWNZARcMXzvDKacSUvy90GIBvj5eosnSF+6\nON+XLtTRi7TaQoAl0I6PX5b5p4J3RSOOwY1xOyK3ML/bElCxhFjEF0k1eeC24jy+\nAYjSYXHhs7e4Kqj743//pLJPGGsqxuUcu9qHcZ1qlYztzRgUsynCJvA/fQbw5HTV\nG9sIk7XtCQFFBCKZNogqFMMLUH7cJDFhXufKaeyb9TAvrMJhCOfA8fQltAuh1HTr\nhOXYsF7kqCvGKs1AfP5Apo/Ozb+YXmkKg0uC1qt6SKvxL/4HjkA=\n=iMp+\n-----END PGP SIGNATURE-----", "payload": "tree 4eacbf35b43e325d74e6476659435ddba3f0cbc8\nparent f9e2ac56e56cd011929b28d20edda8bed33e9a76\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1661875253 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1661875934 +0900\n\nfix: handle trait methods as inherent methods for placeholders\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/484d5b6e70e30e3e2b1714c9dcf641bb47f01b7c", "html_url": "https://github.com/rust-lang/rust/commit/484d5b6e70e30e3e2b1714c9dcf641bb47f01b7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/484d5b6e70e30e3e2b1714c9dcf641bb47f01b7c/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9e2ac56e56cd011929b28d20edda8bed33e9a76", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9e2ac56e56cd011929b28d20edda8bed33e9a76", "html_url": "https://github.com/rust-lang/rust/commit/f9e2ac56e56cd011929b28d20edda8bed33e9a76"}], "stats": {"total": 104, "additions": 77, "deletions": 27}, "files": [{"sha": "dbf2750032074b76500605929db7c232a6360b06", "filename": "crates/hir-ty/src/method_resolution.rs", "status": "modified", "additions": 60, "deletions": 27, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/484d5b6e70e30e3e2b1714c9dcf641bb47f01b7c/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/484d5b6e70e30e3e2b1714c9dcf641bb47f01b7c/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs?ref=484d5b6e70e30e3e2b1714c9dcf641bb47f01b7c", "patch": "@@ -914,19 +914,10 @@ fn iterate_trait_method_candidates(\n     let db = table.db;\n     let env = table.trait_env.clone();\n     let self_is_array = matches!(self_ty.kind(Interner), chalk_ir::TyKind::Array(..));\n-    let env_traits = matches!(self_ty.kind(Interner), TyKind::Placeholder(_))\n-        // if we have `T: Trait` in the param env, the trait doesn't need to be in scope\n-        .then(|| {\n-            env.traits_in_scope_from_clauses(self_ty.clone())\n-                .flat_map(|t| all_super_traits(db.upcast(), t))\n-        })\n-        .into_iter()\n-        .flatten();\n-    let traits = env_traits.chain(traits_in_scope.iter().copied());\n \n     let canonical_self_ty = table.canonicalize(self_ty.clone()).value;\n \n-    'traits: for t in traits {\n+    'traits: for &t in traits_in_scope {\n         let data = db.trait_data(t);\n \n         // Traits annotated with `#[rustc_skip_array_during_method_dispatch]` are skipped during\n@@ -976,6 +967,43 @@ fn iterate_inherent_methods(\n ) -> ControlFlow<()> {\n     let db = table.db;\n     let env = table.trait_env.clone();\n+\n+    // For trait object types and placeholder types with trait bounds, the methods of the trait and\n+    // its super traits are considered inherent methods. This matters because these methods have\n+    // higher priority than the other traits' methods, which would be considered in\n+    // `iterate_trait_method_candidates()` only after this function.\n+    match self_ty.kind(Interner) {\n+        TyKind::Placeholder(_) => {\n+            let env = table.trait_env.clone();\n+            let traits = env\n+                .traits_in_scope_from_clauses(self_ty.clone())\n+                .flat_map(|t| all_super_traits(db.upcast(), t));\n+            iterate_inherent_trait_methods(\n+                self_ty,\n+                table,\n+                name,\n+                receiver_ty,\n+                receiver_adjustments.clone(),\n+                callback,\n+                traits,\n+            )?;\n+        }\n+        TyKind::Dyn(_) => {\n+            let principal_trait = self_ty.dyn_trait().unwrap();\n+            let traits = all_super_traits(db.upcast(), principal_trait);\n+            iterate_inherent_trait_methods(\n+                self_ty,\n+                table,\n+                name,\n+                receiver_ty,\n+                receiver_adjustments.clone(),\n+                callback,\n+                traits.into_iter(),\n+            )?;\n+        }\n+        _ => {}\n+    }\n+\n     let def_crates = match def_crates(db, self_ty, env.krate) {\n         Some(k) => k,\n         None => return ControlFlow::Continue(()),\n@@ -987,23 +1015,6 @@ fn iterate_inherent_methods(\n         VisibleFromModule::None => (None, None),\n     };\n \n-    // For trait object types, methods of the trait and its super traits are considered inherent\n-    // methods. This matters because these trait methods have higher priority than the other\n-    // traits' methods, which would be considered in `iterate_trait_method_candidates()` after this\n-    // function.\n-    let inherent_traits =\n-        self_ty.dyn_trait().into_iter().flat_map(|t| all_super_traits(db.upcast(), t));\n-    for t in inherent_traits {\n-        let data = db.trait_data(t);\n-        for &(_, item) in data.items.iter() {\n-            // We don't pass `visible_from_module` as all trait items should be visible from the\n-            // trait object.\n-            if is_valid_candidate(table, name, receiver_ty, item, self_ty, None) {\n-                callback(receiver_adjustments.clone().unwrap_or_default(), item)?;\n-            }\n-        }\n-    }\n-\n     if let Some(block_id) = block {\n         if let Some(impls) = db.inherent_impls_in_block(block_id) {\n             impls_for_self_ty(\n@@ -1034,6 +1045,28 @@ fn iterate_inherent_methods(\n     }\n     return ControlFlow::Continue(());\n \n+    fn iterate_inherent_trait_methods(\n+        self_ty: &Ty,\n+        table: &mut InferenceTable<'_>,\n+        name: Option<&Name>,\n+        receiver_ty: Option<&Ty>,\n+        receiver_adjustments: Option<ReceiverAdjustments>,\n+        callback: &mut dyn FnMut(ReceiverAdjustments, AssocItemId) -> ControlFlow<()>,\n+        traits: impl Iterator<Item = TraitId>,\n+    ) -> ControlFlow<()> {\n+        let db = table.db;\n+        for t in traits {\n+            let data = db.trait_data(t);\n+            for &(_, item) in data.items.iter() {\n+                // We don't pass `visible_from_module` as all trait items should be visible.\n+                if is_valid_candidate(table, name, receiver_ty, item, self_ty, None) {\n+                    callback(receiver_adjustments.clone().unwrap_or_default(), item)?;\n+                }\n+            }\n+        }\n+        ControlFlow::Continue(())\n+    }\n+\n     fn impls_for_self_ty(\n         impls: &InherentImpls,\n         self_ty: &Ty,"}, {"sha": "ac8edb841a580322b18b5a47b9eb39ae174b3a49", "filename": "crates/hir-ty/src/tests/method_resolution.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/484d5b6e70e30e3e2b1714c9dcf641bb47f01b7c/crates%2Fhir-ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/484d5b6e70e30e3e2b1714c9dcf641bb47f01b7c/crates%2Fhir-ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=484d5b6e70e30e3e2b1714c9dcf641bb47f01b7c", "patch": "@@ -1235,6 +1235,23 @@ fn foo(a: &dyn Trait) {\n     );\n }\n \n+#[test]\n+fn trait_method_priority_for_placeholder_type() {\n+    check_types(\n+        r#\"\n+//- minicore: from\n+trait Trait {\n+    fn into(&self) -> usize { 0 }\n+}\n+\n+fn foo<T: Trait>(a: &T) {\n+    let _ = a.into();\n+      //^usize\n+}\n+        \"#,\n+    );\n+}\n+\n #[test]\n fn autoderef_visibility_field() {\n     check("}]}