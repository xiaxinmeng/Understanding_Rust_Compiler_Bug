{"sha": "a15800a32778c35e32efe47f7e6889784e06ebcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNTgwMGEzMjc3OGMzNWUzMmVmZTQ3ZjdlNjg4OTc4NGUwNmViY2M=", "commit": {"author": {"name": "Ayaz Hafiz", "email": "ayaz.hafiz.1@gmail.com", "date": "2020-05-09T22:19:48Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2020-10-02T00:12:22Z"}, "message": "Preserve and format type aliases in extern blocks\n\nPreviously, non-trivial type aliases in extern blocks were dropped by\nrustfmt because only the type alias name would be passed to a rewritter.\nThis commit fixes that by passing all type information (generics,\nbounds, and assignments) to a type alias rewritter, and consolidates\n`rewrite_type_alias` and `rewrite_associated_type` as one function.", "tree": {"sha": "7c2e54ee09bb9d6c04f25d98583da31222f37f04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c2e54ee09bb9d6c04f25d98583da31222f37f04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a15800a32778c35e32efe47f7e6889784e06ebcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a15800a32778c35e32efe47f7e6889784e06ebcc", "html_url": "https://github.com/rust-lang/rust/commit/a15800a32778c35e32efe47f7e6889784e06ebcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a15800a32778c35e32efe47f7e6889784e06ebcc/comments", "author": {"login": "ayazhafiz", "id": 20735482, "node_id": "MDQ6VXNlcjIwNzM1NDgy", "avatar_url": "https://avatars.githubusercontent.com/u/20735482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayazhafiz", "html_url": "https://github.com/ayazhafiz", "followers_url": "https://api.github.com/users/ayazhafiz/followers", "following_url": "https://api.github.com/users/ayazhafiz/following{/other_user}", "gists_url": "https://api.github.com/users/ayazhafiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayazhafiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayazhafiz/subscriptions", "organizations_url": "https://api.github.com/users/ayazhafiz/orgs", "repos_url": "https://api.github.com/users/ayazhafiz/repos", "events_url": "https://api.github.com/users/ayazhafiz/events{/privacy}", "received_events_url": "https://api.github.com/users/ayazhafiz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8eedd823178229589183f5bdca5d054e36b702ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/8eedd823178229589183f5bdca5d054e36b702ea", "html_url": "https://github.com/rust-lang/rust/commit/8eedd823178229589183f5bdca5d054e36b702ea"}], "stats": {"total": 129, "additions": 81, "deletions": 48}, "files": [{"sha": "2c4570a3a7595ea21d5c26383c49cdc98e1f3fce", "filename": "src/items.rs", "status": "modified", "additions": 54, "deletions": 41, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/a15800a32778c35e32efe47f7e6889784e06ebcc/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a15800a32778c35e32efe47f7e6889784e06ebcc/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=a15800a32778c35e32efe47f7e6889784e06ebcc", "patch": "@@ -1510,6 +1510,7 @@ fn rewrite_type_prefix(\n     prefix: &str,\n     ident: symbol::Ident,\n     generics: &ast::Generics,\n+    generic_bounds_opt: Option<&ast::GenericBounds>,\n ) -> Option<String> {\n     let mut result = String::with_capacity(128);\n     result.push_str(prefix);\n@@ -1526,6 +1527,19 @@ fn rewrite_type_prefix(\n         result.push_str(&generics_str);\n     }\n \n+    let type_bounds_str = if let Some(bounds) = generic_bounds_opt {\n+        if bounds.is_empty() {\n+            String::new()\n+        } else {\n+            // 2 = `: `\n+            let shape = Shape::indented(indent, context.config).offset_left(result.len() + 2)?;\n+            bounds.rewrite(context, shape).map(|s| format!(\": {}\", s))?\n+        }\n+    } else {\n+        String::new()\n+    };\n+    result.push_str(&type_bounds_str);\n+\n     let where_budget = context.budget(last_line_width(&result));\n     let option = WhereClauseOption::snuggled(&result);\n     let where_clause_str = rewrite_where_clause(\n@@ -1552,6 +1566,7 @@ fn rewrite_type_item<R: Rewrite>(\n     ident: symbol::Ident,\n     rhs: &R,\n     generics: &ast::Generics,\n+    generic_bounds_opt: Option<&ast::GenericBounds>,\n     vis: &ast::Visibility,\n ) -> Option<String> {\n     let mut result = String::with_capacity(128);\n@@ -1561,6 +1576,7 @@ fn rewrite_type_item<R: Rewrite>(\n         &format!(\"{}{} \", format_visibility(context, vis), prefix),\n         ident,\n         generics,\n+        generic_bounds_opt,\n     )?);\n \n     if generics.where_clause.predicates.is_empty() {\n@@ -1575,17 +1591,6 @@ fn rewrite_type_item<R: Rewrite>(\n     rewrite_assign_rhs(context, result, rhs, rhs_shape).map(|s| s + \";\")\n }\n \n-pub(crate) fn rewrite_type_alias(\n-    context: &RewriteContext<'_>,\n-    indent: Indent,\n-    ident: symbol::Ident,\n-    ty: &ast::Ty,\n-    generics: &ast::Generics,\n-    vis: &ast::Visibility,\n-) -> Option<String> {\n-    rewrite_type_item(context, indent, \"type\", \" =\", ident, ty, generics, vis)\n-}\n-\n pub(crate) fn rewrite_opaque_type(\n     context: &RewriteContext<'_>,\n     indent: Indent,\n@@ -1603,6 +1608,7 @@ pub(crate) fn rewrite_opaque_type(\n         ident,\n         &opaque_type_bounds,\n         generics,\n+        Some(generic_bounds),\n         vis,\n     )\n }\n@@ -1824,39 +1830,39 @@ fn rewrite_static(\n     }\n }\n \n-pub(crate) fn rewrite_associated_type(\n+pub(crate) fn rewrite_type_alias(\n     ident: symbol::Ident,\n     ty_opt: Option<&ptr::P<ast::Ty>>,\n     generics: &ast::Generics,\n     generic_bounds_opt: Option<&ast::GenericBounds>,\n     context: &RewriteContext<'_>,\n     indent: Indent,\n+    vis: &ast::Visibility,\n ) -> Option<String> {\n-    let ident_str = rewrite_ident(context, ident);\n-    // 5 = \"type \"\n-    let generics_shape = Shape::indented(indent, context.config).offset_left(5)?;\n-    let generics_str = rewrite_generics(context, ident_str, generics, generics_shape)?;\n-    let prefix = format!(\"type {}\", generics_str);\n-\n-    let type_bounds_str = if let Some(bounds) = generic_bounds_opt {\n-        if bounds.is_empty() {\n-            String::new()\n-        } else {\n-            // 2 = \": \".len()\n-            let shape = Shape::indented(indent, context.config).offset_left(prefix.len() + 2)?;\n-            bounds.rewrite(context, shape).map(|s| format!(\": {}\", s))?\n-        }\n-    } else {\n-        String::new()\n-    };\n+    let mut prefix = rewrite_type_prefix(\n+        context,\n+        indent,\n+        &format!(\"{}type \", format_visibility(context, vis)),\n+        ident,\n+        generics,\n+        generic_bounds_opt,\n+    )?;\n \n     if let Some(ty) = ty_opt {\n         // 1 = `;`\n         let shape = Shape::indented(indent, context.config).sub_width(1)?;\n-        let lhs = format!(\"{}{} =\", prefix, type_bounds_str);\n+\n+        // If there's a where clause, add a newline before the assignment. Otherwise just add a\n+        // space.\n+        if !generics.where_clause.predicates.is_empty() {\n+            prefix.push_str(&indent.to_string_with_newline(context.config));\n+        } else {\n+            prefix.push(' ');\n+        }\n+        let lhs = format!(\"{}=\", prefix);\n         rewrite_assign_rhs(context, lhs, &**ty, shape).map(|s| s + \";\")\n     } else {\n-        Some(format!(\"{}{};\", prefix, type_bounds_str))\n+        Some(format!(\"{};\", prefix))\n     }\n }\n \n@@ -1900,13 +1906,14 @@ pub(crate) fn rewrite_opaque_impl_type(\n \n pub(crate) fn rewrite_associated_impl_type(\n     ident: symbol::Ident,\n+    vis: &ast::Visibility,\n     defaultness: ast::Defaultness,\n     ty_opt: Option<&ptr::P<ast::Ty>>,\n     generics: &ast::Generics,\n     context: &RewriteContext<'_>,\n     indent: Indent,\n ) -> Option<String> {\n-    let result = rewrite_associated_type(ident, ty_opt, generics, None, context, indent)?;\n+    let result = rewrite_type_alias(ident, ty_opt, generics, None, context, indent, vis)?;\n \n     match defaultness {\n         ast::Defaultness::Default(..) => Some(format!(\"default {}\", result)),\n@@ -3088,7 +3095,7 @@ impl Rewrite for ast::ForeignItem {\n         // FIXME: this may be a faulty span from libsyntax.\n         let span = mk_sp(self.span.lo(), self.span.hi() - BytePos(1));\n \n-        let item_str = match self.kind {\n+        let item_str: String = match self.kind {\n             ast::ForeignItemKind::Fn(_, ref fn_sig, ref generics, _) => rewrite_fn_base(\n                 context,\n                 shape.indent,\n@@ -3112,14 +3119,20 @@ impl Rewrite for ast::ForeignItem {\n                 // 1 = ;\n                 rewrite_assign_rhs(context, prefix, &**ty, shape.sub_width(1)?).map(|s| s + \";\")\n             }\n-            ast::ForeignItemKind::TyAlias(..) => {\n-                let vis = format_visibility(context, &self.vis);\n-                Some(format!(\n-                    \"{}type {};\",\n-                    vis,\n-                    rewrite_ident(context, self.ident)\n-                ))\n-            }\n+            ast::ForeignItemKind::TyAlias(\n+                _,\n+                ref generics,\n+                ref generic_bounds,\n+                ref type_default,\n+            ) => rewrite_type_alias(\n+                self.ident,\n+                type_default.as_ref(),\n+                generics,\n+                Some(generic_bounds),\n+                &context,\n+                shape.indent,\n+                &self.vis,\n+            ),\n             ast::ForeignItemKind::MacCall(ref mac) => {\n                 rewrite_macro(mac, None, context, shape, MacroPosition::Item)\n             }"}, {"sha": "523d4e9fea99d0f2ad8e794923ced44e5b118838", "filename": "src/visitor.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a15800a32778c35e32efe47f7e6889784e06ebcc/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a15800a32778c35e32efe47f7e6889784e06ebcc/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=a15800a32778c35e32efe47f7e6889784e06ebcc", "patch": "@@ -11,9 +11,8 @@ use crate::config::{BraceStyle, Config};\n use crate::coverage::transform_missing_snippet;\n use crate::items::{\n     format_impl, format_trait, format_trait_alias, is_mod_decl, is_use_item,\n-    rewrite_associated_impl_type, rewrite_associated_type, rewrite_extern_crate,\n-    rewrite_opaque_impl_type, rewrite_opaque_type, rewrite_type_alias, FnBraceStyle, FnSig,\n-    StaticParts, StructParts,\n+    rewrite_associated_impl_type, rewrite_extern_crate, rewrite_opaque_impl_type,\n+    rewrite_opaque_type, rewrite_type_alias, FnBraceStyle, FnSig, StaticParts, StructParts,\n };\n use crate::macros::{macro_style, rewrite_macro, rewrite_macro_def, MacroPosition};\n use crate::modules::Module;\n@@ -544,11 +543,12 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 ast::ItemKind::TyAlias(_, ref generics, ref generic_bounds, ref ty) => match ty {\n                     Some(ty) => {\n                         let rewrite = rewrite_type_alias(\n-                            &self.get_context(),\n-                            self.block_indent,\n                             item.ident,\n-                            &*ty,\n+                            Some(&*ty),\n                             generics,\n+                            Some(generic_bounds),\n+                            &self.get_context(),\n+                            self.block_indent,\n                             &item.vis,\n                         );\n                         self.push_rewrite(item.span, rewrite);\n@@ -619,13 +619,14 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 );\n             }\n             ast::AssocItemKind::TyAlias(_, ref generics, ref generic_bounds, ref type_default) => {\n-                let rewrite = rewrite_associated_type(\n+                let rewrite = rewrite_type_alias(\n                     ti.ident,\n                     type_default.as_ref(),\n                     generics,\n                     Some(generic_bounds),\n                     &self.get_context(),\n                     self.block_indent,\n+                    &ti.vis,\n                 );\n                 self.push_rewrite(ti.span, rewrite);\n             }\n@@ -666,6 +667,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 let rewrite_associated = || {\n                     rewrite_associated_impl_type(\n                         ii.ident,\n+                        &ii.vis,\n                         defaultness,\n                         ty.as_ref(),\n                         &generics,"}, {"sha": "52abb132cae81e902aad18ed260464347f67a003", "filename": "tests/target/issue-4159.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a15800a32778c35e32efe47f7e6889784e06ebcc/tests%2Ftarget%2Fissue-4159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a15800a32778c35e32efe47f7e6889784e06ebcc/tests%2Ftarget%2Fissue-4159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4159.rs?ref=a15800a32778c35e32efe47f7e6889784e06ebcc", "patch": "@@ -0,0 +1,18 @@\n+extern \"C\" {\n+    type A: Ord;\n+\n+    type A<'a>\n+    where\n+        'a: 'static,;\n+\n+    type A<T: Ord>\n+    where\n+        T: 'static,;\n+\n+    type A = u8;\n+\n+    type A<'a: 'static, T: Ord + 'static>: Eq + PartialEq\n+    where\n+        T: 'static + Copy,\n+    = Vec<u8>;\n+}"}]}