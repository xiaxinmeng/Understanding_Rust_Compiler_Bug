{"sha": "9e0e2199171884c15f4806dbbaf85d033d04644e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllMGUyMTk5MTcxODg0YzE1ZjQ4MDZkYmJhZjg1ZDAzM2QwNDY0NGU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-05T20:54:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-05T20:54:21Z"}, "message": "Merge pull request #609 from RalfJung/readme\n\nupdate development instructions in README", "tree": {"sha": "9e8b1285afdfa7c4c186aa28c3ed41faf81f437b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e8b1285afdfa7c4c186aa28c3ed41faf81f437b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e0e2199171884c15f4806dbbaf85d033d04644e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcWff9CRBK7hj4Ov3rIwAAdHIIACFbUn8fzjBTZr62HgKWfOw3\negoxm6U9twBoqe49omBokUqwytFpXu3/ukJ0WjPZh8J8FHKS204ga/R5fKSbEkU3\nzBD8Tb4952cR9RJMbrlyriI3G3NchMw8hrnZQm2CNQJS+0KQQ6iHxbjaVcYDs4GE\npWGkbLYFam9u8NmjC1vKYIpFqgKNHj7i6XHoH3gG2fvFMOTRNj7jmibdoxFOGPRb\noi7cZyBdQi1dfNhxJJFLpsS0aoROUhbN3X+REDx+zOmDVJVvnu3ylcQctNsBiYXQ\nKSgN9xbZCLpX51n0t9FROUKPEKVX3oWXomIfCPmY1m2RbKVHeDY4wenOEJTnTww=\n=oEKH\n-----END PGP SIGNATURE-----\n", "payload": "tree 9e8b1285afdfa7c4c186aa28c3ed41faf81f437b\nparent e501e13fa92ce2963b3d784b184632f528ef5f3e\nparent f3becd810eead697d31c5d73624d16996160efa6\nauthor Ralf Jung <post@ralfj.de> 1549400061 +0100\ncommitter GitHub <noreply@github.com> 1549400061 +0100\n\nMerge pull request #609 from RalfJung/readme\n\nupdate development instructions in README"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e0e2199171884c15f4806dbbaf85d033d04644e", "html_url": "https://github.com/rust-lang/rust/commit/9e0e2199171884c15f4806dbbaf85d033d04644e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e0e2199171884c15f4806dbbaf85d033d04644e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e501e13fa92ce2963b3d784b184632f528ef5f3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e501e13fa92ce2963b3d784b184632f528ef5f3e", "html_url": "https://github.com/rust-lang/rust/commit/e501e13fa92ce2963b3d784b184632f528ef5f3e"}, {"sha": "f3becd810eead697d31c5d73624d16996160efa6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3becd810eead697d31c5d73624d16996160efa6", "html_url": "https://github.com/rust-lang/rust/commit/f3becd810eead697d31c5d73624d16996160efa6"}], "stats": {"total": 44, "additions": 35, "deletions": 9}, "files": [{"sha": "46a46b3e7a80096e45585597453bd1c5eaa97154", "filename": "README.md", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9e0e2199171884c15f4806dbbaf85d033d04644e/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/9e0e2199171884c15f4806dbbaf85d033d04644e/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=9e0e2199171884c15f4806dbbaf85d033d04644e", "patch": "@@ -85,28 +85,45 @@ find useful.\n \n ### Using a nightly rustc\n \n-miri heavily relies on internal rustc interfaces to execute MIR.  Still, some\n+Miri heavily relies on internal rustc interfaces to execute MIR.  Still, some\n things (like adding support for a new intrinsic) can be done by working just on\n-the miri side.\n+the Miri side.\n \n-To prepare, make sure you are using a nightly Rust compiler.  You also need to\n-set up a libstd that enables execution with Miri:\n+To prepare, make sure you are using a nightly Rust compiler.  The most\n+convenient way is to install Miri using cargo, then you can easily run it on\n+other projects:\n \n ```sh\n-rustup override set nightly # or the nightly in `rust-version`\n-cargo run --bin cargo-miri -- miri setup\n+cargo +nightly install --path \"$DIR\" --force # or the nightly in `rust-version`\n+cargo +nightly miri setup\n ```\n \n-The last command should end in printing the directory where the libstd was\n-built.  Set that as your `MIRI_SYSROOT` environment variable:\n+If you want to use a different libstd (not the one that comes with the\n+nightly), you can do that by running\n+\n+```sh\n+XARGO_RUST_SRC=~/src/rust/rustc/src/ cargo +nightly miri setup\n+```\n+\n+Either way, you can now do `cargo +nightly miri run` to run Miri with your\n+local changes on whatever project you are debugging.\n+\n+(We are giving `+nightly` explicitly here all the time because it is important\n+that all of these commands get executed with the same toolchain.)\n+\n+`cargo miri setup` should end in printing the directory where the libstd was\n+built.  For the next step to work, set that as your `MIRI_SYSROOT` environment\n+variable:\n \n ```sh\n export MIRI_SYSROOT=~/.cache/miri/HOST # or whatever the previous command said\n ```\n \n ### Testing Miri\n \n-Now you can run Miri directly, without going through `cargo miri`:\n+Instead of running an entire project using `cargo miri`, you can also use the\n+Miri \"driver\" directly to run just a single file.  That can be easier during\n+debugging.\n \n ```sh\n cargo run tests/run-pass/format.rs # or whatever test you like\n@@ -168,6 +185,15 @@ rustup override set custom\n With this, you should now have a working development setup!  See\n [\"Testing Miri\"](#testing-miri) above for how to proceed.\n \n+Running `cargo miri` in this setup is a bit more complicated, because the Miri\n+binary you just created does not actually run without some enviroment variables.\n+But you can contort cargo into calling `cargo miri` the right way for you:\n+\n+```sh\n+# in some other project's directory, to run `cargo miri test`:\n+MIRI_SYSROOT=$(rustc +custom --print sysroot) cargo +custom run --manifest-path /path/to/miri/Cargo.toml --bin cargo-miri --release -- miri test\n+```\n+\n ### Miri `-Z` flags and environment variables\n \n Several `-Z` flags are relevant for Miri:"}]}