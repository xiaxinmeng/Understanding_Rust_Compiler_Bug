{"sha": "2e5d925926e3953de7d9e9df46d8ab14810515d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlNWQ5MjU5MjZlMzk1M2RlN2Q5ZTlkZjQ2ZDhhYjE0ODEwNTE1ZDE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-07-18T14:34:54Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-07-18T14:44:11Z"}, "message": "Don't build twice the sanitizers on Linux\n\nThis commit is an attempted fix at #50887. It was noticed that on that issue\nwe're building both x86_64 and i386 versions of libraries, but we only actually\nneed the x86_64 versions! This hopes that the build race condition exhibited\nin #50887 is connected to building both architectures and/or building a lot of\nlibraries, so this should help us build precisely what we need and no more.", "tree": {"sha": "7d0f4b597d6de75b00a4ec65e54e15de57198010", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d0f4b597d6de75b00a4ec65e54e15de57198010"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e5d925926e3953de7d9e9df46d8ab14810515d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e5d925926e3953de7d9e9df46d8ab14810515d1", "html_url": "https://github.com/rust-lang/rust/commit/2e5d925926e3953de7d9e9df46d8ab14810515d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e5d925926e3953de7d9e9df46d8ab14810515d1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29ee65411c46b8f701bd1f241725092cb1b347e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/29ee65411c46b8f701bd1f241725092cb1b347e6", "html_url": "https://github.com/rust-lang/rust/commit/29ee65411c46b8f701bd1f241725092cb1b347e6"}], "stats": {"total": 43, "additions": 28, "deletions": 15}, "files": [{"sha": "00e5dee256eebc4c2d4f993b6a60500434941cb1", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2e5d925926e3953de7d9e9df46d8ab14810515d1/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e5d925926e3953de7d9e9df46d8ab14810515d1/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=2e5d925926e3953de7d9e9df46d8ab14810515d1", "patch": "@@ -15,6 +15,7 @@ use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n use std::time::{SystemTime, UNIX_EPOCH};\n use std::{env, fs};\n+use std::thread;\n \n /// A helper macro to `unwrap` a result except also print out details like:\n ///\n@@ -181,7 +182,9 @@ pub struct NativeLibBoilerplate {\n \n impl Drop for NativeLibBoilerplate {\n     fn drop(&mut self) {\n-        t!(File::create(self.out_dir.join(\"rustbuild.timestamp\")));\n+        if !thread::panicking() {\n+            t!(File::create(self.out_dir.join(\"rustbuild.timestamp\")));\n+        }\n     }\n }\n \n@@ -225,24 +228,34 @@ pub fn native_lib_boilerplate(\n     }\n }\n \n-pub fn sanitizer_lib_boilerplate(sanitizer_name: &str) -> Result<NativeLibBoilerplate, ()> {\n-    let (link_name, search_path) = match &*env::var(\"TARGET\").unwrap() {\n+pub fn sanitizer_lib_boilerplate(sanitizer_name: &str)\n+    -> Result<(NativeLibBoilerplate, String), ()>\n+{\n+    let (link_name, search_path, dynamic) = match &*env::var(\"TARGET\").unwrap() {\n         \"x86_64-unknown-linux-gnu\" => (\n             format!(\"clang_rt.{}-x86_64\", sanitizer_name),\n             \"build/lib/linux\",\n+            false,\n         ),\n         \"x86_64-apple-darwin\" => (\n-            format!(\"dylib=clang_rt.{}_osx_dynamic\", sanitizer_name),\n+            format!(\"clang_rt.{}_osx_dynamic\", sanitizer_name),\n             \"build/lib/darwin\",\n+            true,\n         ),\n         _ => return Err(()),\n     };\n-    native_lib_boilerplate(\n+    let to_link = if dynamic {\n+        format!(\"dylib={}\", link_name)\n+    } else {\n+        format!(\"static={}\", link_name)\n+    };\n+    let lib = native_lib_boilerplate(\n         \"libcompiler_builtins/compiler-rt\",\n         sanitizer_name,\n-        &link_name,\n+        &to_link,\n         search_path,\n-    )\n+    )?;\n+    Ok((lib, link_name))\n }\n \n fn dir_up_to_date(src: &Path, threshold: SystemTime) -> bool {"}, {"sha": "b8614c520e7cfa601857b4f6017d44a3e58ccdfe", "filename": "src/librustc_asan/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e5d925926e3953de7d9e9df46d8ab14810515d1/src%2Flibrustc_asan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e5d925926e3953de7d9e9df46d8ab14810515d1/src%2Flibrustc_asan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Fbuild.rs?ref=2e5d925926e3953de7d9e9df46d8ab14810515d1", "patch": "@@ -18,7 +18,7 @@ use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        let native = match sanitizer_lib_boilerplate(\"asan\") {\n+        let (native, target) = match sanitizer_lib_boilerplate(\"asan\") {\n             Ok(native) => native,\n             _ => return,\n         };\n@@ -29,7 +29,7 @@ fn main() {\n             .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n             .define(\"LLVM_CONFIG_PATH\", llvm_config)\n             .out_dir(&native.out_dir)\n-            .build_target(\"asan\")\n+            .build_target(&target)\n             .build();\n     }\n     println!(\"cargo:rerun-if-env-changed=LLVM_CONFIG\");"}, {"sha": "05e40cdceddda2847915cca54422d40401383e94", "filename": "src/librustc_lsan/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e5d925926e3953de7d9e9df46d8ab14810515d1/src%2Flibrustc_lsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e5d925926e3953de7d9e9df46d8ab14810515d1/src%2Flibrustc_lsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Fbuild.rs?ref=2e5d925926e3953de7d9e9df46d8ab14810515d1", "patch": "@@ -18,7 +18,7 @@ use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        let native = match sanitizer_lib_boilerplate(\"lsan\") {\n+        let (native, target) = match sanitizer_lib_boilerplate(\"lsan\") {\n             Ok(native) => native,\n             _ => return,\n         };\n@@ -29,7 +29,7 @@ fn main() {\n             .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n             .define(\"LLVM_CONFIG_PATH\", llvm_config)\n             .out_dir(&native.out_dir)\n-            .build_target(\"lsan\")\n+            .build_target(&target)\n             .build();\n     }\n     println!(\"cargo:rerun-if-env-changed=LLVM_CONFIG\");"}, {"sha": "4abfc3585602fee0030e8183063b93e48de05f5a", "filename": "src/librustc_msan/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e5d925926e3953de7d9e9df46d8ab14810515d1/src%2Flibrustc_msan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e5d925926e3953de7d9e9df46d8ab14810515d1/src%2Flibrustc_msan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Fbuild.rs?ref=2e5d925926e3953de7d9e9df46d8ab14810515d1", "patch": "@@ -18,7 +18,7 @@ use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        let native = match sanitizer_lib_boilerplate(\"msan\") {\n+        let (native, target) = match sanitizer_lib_boilerplate(\"msan\") {\n             Ok(native) => native,\n             _ => return,\n         };\n@@ -29,7 +29,7 @@ fn main() {\n             .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n             .define(\"LLVM_CONFIG_PATH\", llvm_config)\n             .out_dir(&native.out_dir)\n-            .build_target(\"msan\")\n+            .build_target(&target)\n             .build();\n     }\n     println!(\"cargo:rerun-if-env-changed=LLVM_CONFIG\");"}, {"sha": "38595478c74337edde1bcc413704c37e190211b3", "filename": "src/librustc_tsan/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e5d925926e3953de7d9e9df46d8ab14810515d1/src%2Flibrustc_tsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e5d925926e3953de7d9e9df46d8ab14810515d1/src%2Flibrustc_tsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Fbuild.rs?ref=2e5d925926e3953de7d9e9df46d8ab14810515d1", "patch": "@@ -18,7 +18,7 @@ use cmake::Config;\n \n fn main() {\n     if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n-        let native = match sanitizer_lib_boilerplate(\"tsan\") {\n+        let (native, target) = match sanitizer_lib_boilerplate(\"tsan\") {\n             Ok(native) => native,\n             _ => return,\n         };\n@@ -29,7 +29,7 @@ fn main() {\n             .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n             .define(\"LLVM_CONFIG_PATH\", llvm_config)\n             .out_dir(&native.out_dir)\n-            .build_target(\"tsan\")\n+            .build_target(&target)\n             .build();\n     }\n     println!(\"cargo:rerun-if-env-changed=LLVM_CONFIG\");"}]}