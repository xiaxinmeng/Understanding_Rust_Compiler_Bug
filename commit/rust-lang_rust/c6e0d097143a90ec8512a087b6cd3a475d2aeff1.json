{"sha": "c6e0d097143a90ec8512a087b6cd3a475d2aeff1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZTBkMDk3MTQzYTkwZWM4NTEyYTA4N2I2Y2QzYTQ3NWQyYWVmZjE=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-04-09T15:04:30Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-04-09T15:04:30Z"}, "message": "Retrieve SYS_getrandom from libc using const-eval", "tree": {"sha": "629c6d314a5dcf1a017e142a1a8377a153f79269", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/629c6d314a5dcf1a017e142a1a8377a153f79269"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6e0d097143a90ec8512a087b6cd3a475d2aeff1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAlystKkACgkQtAh+UQ6Y\nsWRdhxAAtQkC3R/HXpSj8EKG5cmC3MLGC0wbW1NO8copIo6wnlR6VDjTaao+bZwe\nBp8WiJjHiPSNPA6kX+f01OTaaSOh8KANTw+3KOz/k2yqKuayGTCTYIElW6oNboGZ\n2vfZllU/id7A2wRuwKNF5t5trCOT3UpPqFB960IYiL4f3M2V/SaPWbOuZKSdWr1+\nvBnuZKepCIHHefAN8CckwFbjf/vPe3m+/hxufH4UZdjD8vNpCs9uviqCgkNU9tXB\nTC3TaTLbSBae5OJStHiVlByPAk2KRGf/rul1XztF22CAXQBFWvHPq+ZMCNCghEYh\nOnS/75Q1Rr98KKvwa7zbJmbrf0doi2UOWD01OwY75Tk9EcdqsXkUwL3IKt0SZPHO\ncbvs5oH+2cCNlzz9yIEB7eUqtCnllQLdeSkPP+RV2MW2ouNwBAkDg0AxR6GMXA3v\nQe7YF2Z3wIJLoRajNgMjHxG6QEjthdT4NtXVKeS7BFdageo2A61jV66BOZS0FQuJ\nyxp1D5/OI11iW6R8INqby/s0J/iPbOG7JdWgJ0JmbSRmBvxCA9eKexUqlOf905t6\ns7GV+an8nOZIalMD4ajjwrb4JSTD34JY15H+pRi/+c+mxNWXJr2LzlccCCH0feha\nt1NKT/RpMFb51SliMXDrtKmRJMjkoPZbRKQbPrlGSyDVkiQEqOY=\n=Smrv\n-----END PGP SIGNATURE-----", "payload": "tree 629c6d314a5dcf1a017e142a1a8377a153f79269\nparent ae8e7f654a002d182fe66cdbd3ebfe0ee1e74ae2\nauthor Aaron Hill <aa1ronham@gmail.com> 1554822270 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1554822270 -0400\n\nRetrieve SYS_getrandom from libc using const-eval\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6e0d097143a90ec8512a087b6cd3a475d2aeff1", "html_url": "https://github.com/rust-lang/rust/commit/c6e0d097143a90ec8512a087b6cd3a475d2aeff1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6e0d097143a90ec8512a087b6cd3a475d2aeff1/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae8e7f654a002d182fe66cdbd3ebfe0ee1e74ae2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae8e7f654a002d182fe66cdbd3ebfe0ee1e74ae2", "html_url": "https://github.com/rust-lang/rust/commit/ae8e7f654a002d182fe66cdbd3ebfe0ee1e74ae2"}], "stats": {"total": 43, "additions": 27, "deletions": 16}, "files": [{"sha": "3eacaaa74e65324677cbd81e1d01475fbb93caea", "filename": "src/fn_call.rs", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c6e0d097143a90ec8512a087b6cd3a475d2aeff1/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e0d097143a90ec8512a087b6cd3a475d2aeff1/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=c6e0d097143a90ec8512a087b6cd3a475d2aeff1", "patch": "@@ -211,14 +211,14 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n             }\n \n             \"syscall\" => {\n-                // TODO: read `syscall` IDs like `sysconf` IDs and\n-                // figure out some way to actually process some of them.\n-                //\n+                let sys_getrandom = this.eval_path_scalar(&[\"libc\", \"SYS_getrandom\"])?\n+                    .expect(\"Failed to get libc::SYS_getrandom\")\n+                    .to_usize(this)? as i64;\n+\n                 // `libc::syscall(NR_GETRANDOM, buf.as_mut_ptr(), buf.len(), GRND_NONBLOCK)`\n                 // is called if a `HashMap` is created the regular way (e.g. HashMap<K, V>).\n-                match (this.read_scalar(args[0])?.to_usize(this)? as i64, tcx.data_layout.pointer_size.bits()) {\n-                    // SYS_getrandom on x86_64 and x86 respectively\n-                    (318, 64) | (355, 32) => {\n+                match this.read_scalar(args[0])?.to_usize(this)? as i64 {\n+                    id if id == sys_getrandom => {\n                         let ptr = this.read_scalar(args[1])?.to_ptr()?;\n                         let len = this.read_scalar(args[2])?.to_usize(this)?;\n \n@@ -232,7 +232,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n \n                         this.write_scalar(Scalar::from_uint(len, dest.layout.size), dest)?;\n                     }\n-                    (id, _size) => {\n+                    id => {\n                         return err!(Unimplemented(\n                             format!(\"miri does not support syscall ID {}\", id),\n                         ))\n@@ -496,18 +496,13 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n                 ];\n                 let mut result = None;\n                 for &(path, path_value) in paths {\n-                    if let Ok(instance) = this.resolve_path(path) {\n-                        let cid = GlobalId {\n-                            instance,\n-                            promoted: None,\n-                        };\n-                        let const_val = this.const_eval_raw(cid)?;\n-                        let const_val = this.read_scalar(const_val.into())?;\n-                        let value = const_val.to_i32()?;\n-                        if value == name {\n+                    if let Some(val) = this.eval_path_scalar(path)? {\n+                        let val = val.to_i32()?;\n+                        if val == name {\n                             result = Some(path_value);\n                             break;\n                         }\n+\n                     }\n                 }\n                 if let Some(result) = result {\n@@ -782,6 +777,22 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n     fn write_null(&mut self, dest: PlaceTy<'tcx, Borrow>) -> EvalResult<'tcx> {\n         self.eval_context_mut().write_scalar(Scalar::from_int(0, dest.layout.size), dest)\n     }\n+\n+    /// Evaluates the scalar at the specified path. Returns Some(val)\n+    /// if the path could be resolved, and None otherwise\n+    fn eval_path_scalar(&mut self, path: &[&str]) -> EvalResult<'tcx, Option<ScalarMaybeUndef<stacked_borrows::Borrow>>> {\n+        let this = self.eval_context_mut();\n+        if let Ok(instance) = this.resolve_path(path) {\n+            let cid = GlobalId {\n+                instance,\n+                promoted: None,\n+            };\n+            let const_val = this.const_eval_raw(cid)?;\n+            let const_val = this.read_scalar(const_val.into())?;\n+            return Ok(Some(const_val));\n+        }\n+        return Ok(None);\n+    }\n }\n \n fn gen_random<'a, 'mir, 'tcx>(this: &mut MiriEvalContext<'a, 'mir, 'tcx>,"}]}