{"sha": "60d136000eab7e171e4d2c5bab47e6fee1fd5ec6", "node_id": "C_kwDOAAsO6NoAKDYwZDEzNjAwMGVhYjdlMTcxZTRkMmM1YmFiNDdlNmZlZTFmZDVlYzY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-28T16:25:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-28T16:25:47Z"}, "message": "Rollup merge of #104936 - cjgillot:self-rpit-orig-too, r=oli-obk\n\nIgnore bivariant parameters in test_type_match.\n\nhttps://github.com/rust-lang/rust/pull/103491 made opaque types bivariant with respect of some of their lifetime parameters.  Because of this bivariance, some lifetime variables were not unified to anything during borrowck, and were considered as unequal by borrowck type test.\n\nThis PR makes type test ignore the bivariant parameters in test_type_match.\n\nFixes https://github.com/rust-lang/rust/issues/104815\n\nr? `@oli-obk`", "tree": {"sha": "ddf9a6ada8b74d9b8ea2abf411c2a2d0509c218a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddf9a6ada8b74d9b8ea2abf411c2a2d0509c218a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60d136000eab7e171e4d2c5bab47e6fee1fd5ec6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjhOELCRBK7hj4Ov3rIwAAcP0IABgJJzAr3765xJeIcJn36MrW\nImfmXQBg9qSovJKKkf3p41qoNuXOpq1qpcDm+936EGoF7BgAnwrxBcObBWTlTTZR\nEt4Db5mn6zjKtEi02nRAdVBcggUDYNZl0jC+QmgiT1Ic+CaO8B9bRPL9xmeVvPDm\nyYxO/mFs3OSKmSmFs7UZf48GsGYrkke4adKOoUNXB7baLLBvMr0H1ijmZVwd1Eqx\naQoK+uOM3gR0dI+SoHn2N/+7S7TVukoNSZIoWDtJvGqJzz87s3YR6AGG75Ax2mn1\nEsMr919qNuQcZMxs0VOPKCVZHwQTgC/wU+R2QjQoTXxbnkoK5bDmkB7D4CAjEe0=\n=4hRo\n-----END PGP SIGNATURE-----\n", "payload": "tree ddf9a6ada8b74d9b8ea2abf411c2a2d0509c218a\nparent 9a96a6dd8289b612f5b50c9403ffdbb34fe95d48\nparent 89afda781149e5779c38d1ee1d5bf4d633a27d61\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1669652747 +0100\ncommitter GitHub <noreply@github.com> 1669652747 +0100\n\nRollup merge of #104936 - cjgillot:self-rpit-orig-too, r=oli-obk\n\nIgnore bivariant parameters in test_type_match.\n\nhttps://github.com/rust-lang/rust/pull/103491 made opaque types bivariant with respect of some of their lifetime parameters.  Because of this bivariance, some lifetime variables were not unified to anything during borrowck, and were considered as unequal by borrowck type test.\n\nThis PR makes type test ignore the bivariant parameters in test_type_match.\n\nFixes https://github.com/rust-lang/rust/issues/104815\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60d136000eab7e171e4d2c5bab47e6fee1fd5ec6", "html_url": "https://github.com/rust-lang/rust/commit/60d136000eab7e171e4d2c5bab47e6fee1fd5ec6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60d136000eab7e171e4d2c5bab47e6fee1fd5ec6/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a96a6dd8289b612f5b50c9403ffdbb34fe95d48", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a96a6dd8289b612f5b50c9403ffdbb34fe95d48", "html_url": "https://github.com/rust-lang/rust/commit/9a96a6dd8289b612f5b50c9403ffdbb34fe95d48"}, {"sha": "89afda781149e5779c38d1ee1d5bf4d633a27d61", "url": "https://api.github.com/repos/rust-lang/rust/commits/89afda781149e5779c38d1ee1d5bf4d633a27d61", "html_url": "https://github.com/rust-lang/rust/commit/89afda781149e5779c38d1ee1d5bf4d633a27d61"}], "stats": {"total": 73, "additions": 71, "deletions": 2}, "files": [{"sha": "10b474efd5aebdc9337b0a3d863fa04d0badc674", "filename": "compiler/rustc_infer/src/infer/outlives/test_type_match.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/60d136000eab7e171e4d2c5bab47e6fee1fd5ec6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60d136000eab7e171e4d2c5bab47e6fee1fd5ec6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs?ref=60d136000eab7e171e4d2c5bab47e6fee1fd5ec6", "patch": "@@ -155,14 +155,17 @@ impl<'tcx> TypeRelation<'tcx> for Match<'tcx> {\n         bug!()\n     }\n \n+    #[instrument(level = \"trace\", skip(self))]\n     fn relate_with_variance<T: Relate<'tcx>>(\n         &mut self,\n-        _: ty::Variance,\n+        variance: ty::Variance,\n         _: ty::VarianceDiagInfo<'tcx>,\n         a: T,\n         b: T,\n     ) -> RelateResult<'tcx, T> {\n-        self.relate(a, b)\n+        // Opaque types substs have lifetime parameters.\n+        // We must not check them to be equal, as we never insert anything to make them so.\n+        if variance != ty::Bivariant { self.relate(a, b) } else { Ok(a) }\n     }\n \n     #[instrument(skip(self), level = \"debug\")]"}, {"sha": "7a9826a8dff9142a23652a162fa0bde8945b1df3", "filename": "src/test/ui/impl-trait/issues/issue-104815.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/60d136000eab7e171e4d2c5bab47e6fee1fd5ec6/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-104815.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60d136000eab7e171e4d2c5bab47e6fee1fd5ec6/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-104815.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-104815.rs?ref=60d136000eab7e171e4d2c5bab47e6fee1fd5ec6", "patch": "@@ -0,0 +1,66 @@\n+// check-pass\n+\n+struct It;\n+\n+struct Data {\n+    items: Vec<It>,\n+}\n+\n+impl Data {\n+    fn new() -> Self {\n+        Self {\n+            items: vec![It, It],\n+        }\n+    }\n+\n+    fn content(&self) -> impl Iterator<Item = &It> {\n+        self.items.iter()\n+    }\n+}\n+\n+struct Container<'a> {\n+    name: String,\n+    resolver: Box<dyn Resolver + 'a>,\n+}\n+\n+impl<'a> Container<'a> {\n+    fn new<R: Resolver + 'a>(name: &str, resolver: R) -> Self {\n+        Self {\n+            name: name.to_owned(),\n+            resolver: Box::new(resolver),\n+        }\n+    }\n+}\n+\n+trait Resolver {}\n+\n+impl<R: Resolver> Resolver for &R {}\n+\n+impl Resolver for It {}\n+\n+fn get<'a>(mut items: impl Iterator<Item = &'a It>) -> impl Resolver + 'a {\n+    items.next().unwrap()\n+}\n+\n+fn get2<'a, 'b: 'b>(mut items: impl Iterator<Item = &'a It>) -> impl Resolver + 'a {\n+    items.next().unwrap()\n+}\n+\n+fn main() {\n+    let data = Data::new();\n+    let resolver = get(data.content());\n+\n+    let _ = [\"a\", \"b\"]\n+        .iter()\n+        .map(|&n| Container::new(n, &resolver))\n+        .map(|c| c.name)\n+        .collect::<Vec<_>>();\n+\n+    let resolver = get2(data.content());\n+\n+    let _ = [\"a\", \"b\"]\n+        .iter()\n+        .map(|&n| Container::new(n, &resolver))\n+        .map(|c| c.name)\n+        .collect::<Vec<_>>();\n+}"}]}