{"sha": "472404039e72dee0c23c7f58563e528c0f506f67", "node_id": "C_kwDOAAsO6NoAKDQ3MjQwNDAzOWU3MmRlZTBjMjNjN2Y1ODU2M2U1MjhjMGY1MDZmNjc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-04-24T16:00:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-24T16:00:25Z"}, "message": "Rollup merge of #95504 - jyn514:library-alias, r=Mark-Simulacrum\n\nAdd `x {check,build,doc} {compiler,library}` aliases.\n\nWhile working on https://github.com/rust-lang/rust/pull/95503, I realized that it will interfere with existing command lines:\nCurrently people run `x build library/std` expecting it to \"add all library crates to the sysroot\",\nbut after that change, it will *only* build `libstd` and its dependencies (and add them to the sysroot), not libtest or libproc_macro.\n\nThat will work for local testing in most cases, but could be confusing. Even if not, though, I think `x build library` is more clear about what actually happens than the current `x build library/std`.\n\nThe intended end goal is something like:\n- For check/build/doc, we have library + compiler aliases, which correspond to basically \"most possible\" for that piece. This is the intended path of entry (rather than library/test or similar as today) for when you just want the thing to work -- for example, getting a compiler that is \"crates.io-compatible\" would be roughly `x.py build library`). #95504\n- Specific crate invocations build up to that crate, which means that if you don't care about tests you probably want x.py build library/proc_macro or library/std for faster build times. #95503\n\nNote that this is already implemented today for the `doc` command and seems to work pretty well in practice.\n\nI plan to change the dev-guide and various instructions in the README to `build library` once this is merged.\n\n`@rustbot` label +A-rustbuild", "tree": {"sha": "ab3494718728502e783a41a345bab0fe436e78e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab3494718728502e783a41a345bab0fe436e78e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/472404039e72dee0c23c7f58563e528c0f506f67", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiZXQZCRBK7hj4Ov3rIwAAdAIIAAX1WGtIEA2XjNNEDKe93X5P\n7tcqFD2JK66keSKYY/sLiSlvjrvgPKpgkMdysxQ2FB3UsUD1b6n3T8t4BPADcZlo\nFBzk54s9yZPu3BhvD/Zd98VX5528iOf/MsqJjw9319wyjXFlbqdLhcgYNTFILGey\nbOpHVl0qHdtIBEZ2n9COGM1FiQZbhw2llD8+DGHqApHGMFkrdp8m4Tbq3/RDcE9x\nbTMjoUMsZFxdnQHW1D/xk+P5lNJxKT2hhurrh6AOmqAiSMtNlXhqJCkOyK5W5d5H\n5fQo+AOxVFjtPwtafsVYcjHuFIt/SADhaJw7VO+6mjvTY37TdiuNnD4OMXGAJDU=\n=pXnh\n-----END PGP SIGNATURE-----\n", "payload": "tree ab3494718728502e783a41a345bab0fe436e78e0\nparent ce0473ee035b0562d72a7511391193bedce27fa9\nparent 9f38ce09ae76bf3770f06f6b09d81ddacde36ef0\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1650816025 +0200\ncommitter GitHub <noreply@github.com> 1650816025 +0200\n\nRollup merge of #95504 - jyn514:library-alias, r=Mark-Simulacrum\n\nAdd `x {check,build,doc} {compiler,library}` aliases.\n\nWhile working on https://github.com/rust-lang/rust/pull/95503, I realized that it will interfere with existing command lines:\nCurrently people run `x build library/std` expecting it to \"add all library crates to the sysroot\",\nbut after that change, it will *only* build `libstd` and its dependencies (and add them to the sysroot), not libtest or libproc_macro.\n\nThat will work for local testing in most cases, but could be confusing. Even if not, though, I think `x build library` is more clear about what actually happens than the current `x build library/std`.\n\nThe intended end goal is something like:\n- For check/build/doc, we have library + compiler aliases, which correspond to basically \"most possible\" for that piece. This is the intended path of entry (rather than library/test or similar as today) for when you just want the thing to work -- for example, getting a compiler that is \"crates.io-compatible\" would be roughly `x.py build library`). #95504\n- Specific crate invocations build up to that crate, which means that if you don't care about tests you probably want x.py build library/proc_macro or library/std for faster build times. #95503\n\nNote that this is already implemented today for the `doc` command and seems to work pretty well in practice.\n\nI plan to change the dev-guide and various instructions in the README to `build library` once this is merged.\n\n`@rustbot` label +A-rustbuild\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/472404039e72dee0c23c7f58563e528c0f506f67", "html_url": "https://github.com/rust-lang/rust/commit/472404039e72dee0c23c7f58563e528c0f506f67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/472404039e72dee0c23c7f58563e528c0f506f67/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce0473ee035b0562d72a7511391193bedce27fa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce0473ee035b0562d72a7511391193bedce27fa9", "html_url": "https://github.com/rust-lang/rust/commit/ce0473ee035b0562d72a7511391193bedce27fa9"}, {"sha": "9f38ce09ae76bf3770f06f6b09d81ddacde36ef0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f38ce09ae76bf3770f06f6b09d81ddacde36ef0", "html_url": "https://github.com/rust-lang/rust/commit/9f38ce09ae76bf3770f06f6b09d81ddacde36ef0"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "731ebc41bb9a00b075022cbf9eba827bdf189f71", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/472404039e72dee0c23c7f58563e528c0f506f67/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472404039e72dee0c23c7f58563e528c0f506f67/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=472404039e72dee0c23c7f58563e528c0f506f67", "patch": "@@ -64,7 +64,7 @@ impl Step for Std {\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.all_krates(\"test\")\n+        run.all_krates(\"test\").path(\"library\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -162,7 +162,7 @@ impl Step for Rustc {\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.all_krates(\"rustc-main\")\n+        run.all_krates(\"rustc-main\").path(\"compiler\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {"}, {"sha": "a212c659b5c2b3a9931ab3b0690299d00388bc6a", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/472404039e72dee0c23c7f58563e528c0f506f67/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472404039e72dee0c23c7f58563e528c0f506f67/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=472404039e72dee0c23c7f58563e528c0f506f67", "patch": "@@ -43,7 +43,7 @@ impl Step for Std {\n         // When downloading stage1, the standard library has already been copied to the sysroot, so\n         // there's no need to rebuild it.\n         let download_rustc = run.builder.config.download_rustc;\n-        run.all_krates(\"test\").default_condition(!download_rustc)\n+        run.all_krates(\"test\").path(\"library\").default_condition(!download_rustc)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -1047,7 +1047,7 @@ impl Step for Assemble {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"compiler/rustc\")\n+        run.path(\"compiler/rustc\").path(\"compiler\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {"}, {"sha": "fcef784d2d1fa3547379fac1cd135784f4ecc060", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/472404039e72dee0c23c7f58563e528c0f506f67/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472404039e72dee0c23c7f58563e528c0f506f67/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=472404039e72dee0c23c7f58563e528c0f506f67", "patch": "@@ -416,7 +416,7 @@ impl Step for Std {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let builder = run.builder;\n-        run.all_krates(\"test\").default_condition(builder.config.docs)\n+        run.all_krates(\"test\").path(\"library\").default_condition(builder.config.docs)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -477,11 +477,14 @@ impl Step for Std {\n             .iter()\n             .map(components_simplified)\n             .filter_map(|path| {\n-                if path.get(0) == Some(&\"library\") {\n+                if path.len() >= 2 && path.get(0) == Some(&\"library\") {\n+                    // single crate\n                     Some(path[1].to_owned())\n                 } else if !path.is_empty() {\n+                    // ??\n                     Some(path[0].to_owned())\n                 } else {\n+                    // all library crates\n                     None\n                 }\n             })"}]}