{"sha": "af633ce157082bf2b0fd0577765e9b49c34c3e90", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNjMzY2UxNTcwODJiZjJiMGZkMDU3Nzc2NWU5YjQ5YzM0YzNlOTA=", "commit": {"author": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2014-10-02T18:55:26Z"}, "committer": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2014-10-02T19:16:37Z"}, "message": "native: fix passing errno to parent after fork\n\nThe bitshifts were wrong in that they invoked undefined behavior and\nonly passed the lower byte of the presumed-to-be-32bit errno value.\nApparently all actually possible values for errno happen to be easily\nunder 256, so this didn't cause any actual problems.\n\nThis commit fixes the bitshifts, but doesn't generalize to errno types\nthat aren't 32bit.", "tree": {"sha": "2f20450b85cbc3b335a321aefba65989f8ca0677", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f20450b85cbc3b335a321aefba65989f8ca0677"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af633ce157082bf2b0fd0577765e9b49c34c3e90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af633ce157082bf2b0fd0577765e9b49c34c3e90", "html_url": "https://github.com/rust-lang/rust/commit/af633ce157082bf2b0fd0577765e9b49c34c3e90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af633ce157082bf2b0fd0577765e9b49c34c3e90/comments", "author": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd7f00de801e4ca24c9c1235227ace4f998d4b1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd7f00de801e4ca24c9c1235227ace4f998d4b1c", "html_url": "https://github.com/rust-lang/rust/commit/dd7f00de801e4ca24c9c1235227ace4f998d4b1c"}], "stats": {"total": 111, "additions": 103, "deletions": 8}, "files": [{"sha": "7a0c1c35d65c86aad3856b5a5362d0974f03e39d", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/af633ce157082bf2b0fd0577765e9b49c34c3e90/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af633ce157082bf2b0fd0577765e9b49c34c3e90/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=af633ce157082bf2b0fd0577765e9b49c34c3e90", "patch": "@@ -583,10 +583,11 @@ fn spawn_process_os(cfg: ProcessConfig,\n                 let mut bytes = [0, ..4];\n                 return match input.inner_read(bytes) {\n                     Ok(4) => {\n-                        let errno = (bytes[0] << 24) as i32 |\n-                                    (bytes[1] << 16) as i32 |\n-                                    (bytes[2] <<  8) as i32 |\n-                                    (bytes[3] <<  0) as i32;\n+                        let errno = (bytes[0] as i32 << 24) |\n+                                    (bytes[1] as i32 << 16) |\n+                                    (bytes[2] as i32 <<  8) |\n+                                    (bytes[3] as i32 <<  0);\n+\n                         Err(IoError {\n                             code: errno as uint,\n                             detail: None,\n@@ -637,10 +638,10 @@ fn spawn_process_os(cfg: ProcessConfig,\n             fn fail(output: &mut file::FileDesc) -> ! {\n                 let errno = os::errno();\n                 let bytes = [\n-                    (errno << 24) as u8,\n-                    (errno << 16) as u8,\n-                    (errno <<  8) as u8,\n-                    (errno <<  0) as u8,\n+                    (errno >> 24) as u8,\n+                    (errno >> 16) as u8,\n+                    (errno >>  8) as u8,\n+                    (errno >>  0) as u8,\n                 ];\n                 assert!(output.inner_write(bytes).is_ok());\n                 unsafe { libc::_exit(1) }"}, {"sha": "555bf2cd4c0a114d219b0c71f971cfdd42a5f6fb", "filename": "src/test/run-pass/unix-process-spawn-errno.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/af633ce157082bf2b0fd0577765e9b49c34c3e90/src%2Ftest%2Frun-pass%2Funix-process-spawn-errno.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af633ce157082bf2b0fd0577765e9b49c34c3e90/src%2Ftest%2Frun-pass%2Funix-process-spawn-errno.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funix-process-spawn-errno.rs?ref=af633ce157082bf2b0fd0577765e9b49c34c3e90", "patch": "@@ -0,0 +1,94 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-windows\n+\n+#![feature(macro_rules)]\n+\n+extern crate native;\n+extern crate rustrt;\n+extern crate libc;\n+use libc::{c_char, c_int};\n+use native::io::process;\n+use rustrt::rtio;\n+use rustrt::c_str;\n+\n+macro_rules! c_string {\n+    ($s:expr) => { {\n+        let ptr = concat!($s, \"\\0\").as_ptr() as *const i8;\n+        unsafe { &c_str::CString::new(ptr, false) }\n+    } }\n+}\n+\n+static EXPECTED_ERRNO: c_int = 0x778899aa;\n+\n+#[no_mangle]\n+pub unsafe extern \"C\" fn chdir(_: *const c_char) -> c_int {\n+    // copied from std::os::errno()\n+    #[cfg(any(target_os = \"macos\",\n+              target_os = \"ios\",\n+              target_os = \"freebsd\"))]\n+    fn errno_location() -> *mut c_int {\n+        extern {\n+            fn __error() -> *mut c_int;\n+        }\n+        unsafe {\n+            __error()\n+        }\n+    }\n+\n+    #[cfg(target_os = \"dragonfly\")]\n+    fn errno_location() -> *mut c_int {\n+        extern {\n+            fn __dfly_error() -> *mut c_int;\n+        }\n+        unsafe {\n+            __dfly_error()\n+        }\n+    }\n+\n+    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+    fn errno_location() -> *mut c_int {\n+        extern {\n+            fn __errno_location() -> *mut c_int;\n+        }\n+        unsafe {\n+            __errno_location()\n+        }\n+    }\n+\n+    *errno_location() = EXPECTED_ERRNO;\n+    return -1;\n+}\n+\n+fn main() {\n+    let program = c_string!(\"true\");\n+    let cwd = c_string!(\"whatever\");\n+    let cfg = rtio::ProcessConfig {\n+        program: program,\n+        args: &[],\n+        env: None,\n+        cwd: Some(cwd),\n+        stdin: rtio::Ignored,\n+        stdout: rtio::Ignored,\n+        stderr: rtio::Ignored,\n+        extra_io: &[],\n+        uid: None,\n+        gid: None,\n+        detach: false\n+    };\n+\n+    match process::Process::spawn(cfg) {\n+        Ok(_) => { fail!(\"spawn() should have failled\"); }\n+        Err(rtio::IoError { code: err, ..}) => {\n+            assert_eq!(err as c_int, EXPECTED_ERRNO);\n+        }\n+    };\n+}"}]}