{"sha": "8c51701b8a5ac3a2fbfbad9f6d386ec443344293", "node_id": "C_kwDOAAsO6NoAKDhjNTE3MDFiOGE1YWMzYTJmYmZiYWQ5ZjZkMzg2ZWM0NDMzNDQyOTM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-09T07:03:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-09T07:03:46Z"}, "message": "Rollup merge of #111120 - chenyukang:yukang-suggest-let, r=Nilstrieb\n\nSuggest let for possible binding with ty\n\nOrigin from https://github.com/rust-lang/rust/pull/109128#discussion_r1179866137\n\nr? `@Nilstrieb`", "tree": {"sha": "279439a8af041610464a269c0f0c2c7558db4879", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/279439a8af041610464a269c0f0c2c7558db4879"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c51701b8a5ac3a2fbfbad9f6d386ec443344293", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkWfBSCRBK7hj4Ov3rIwAAbD0IAFZkM+pR8BBgXJqqW8cIYrBn\n/p6i/kSCgnqBZucaYbpv0DHEDNHZbvBdOMCNhHmZIjbksdynji6gK0qItmW+Bo/I\n2p59FeuLD8a4g55NHZFrpAn9lC+xN+ZDKFZ+fxsQQMjOADGSaeXoi2TWJazpLOo/\n7qeIr7pL8zBr4PbUp+ifpaz4sjAYkYIxXO35QCQnC/4uCh7RHL02aZh94G1pYPNW\n7Byt/OeK2yxysu3KumbFh9s19NVBjS8TrfCKuBdtlPkp0SvI0AqcirL7zmbe2kNi\n76AvVxKxxXwfUtN2+1GP72isCzWTSMtqo/8UFXamPx/lTnJhzbtIFxY+2wLSXMw=\n=MCI9\n-----END PGP SIGNATURE-----\n", "payload": "tree 279439a8af041610464a269c0f0c2c7558db4879\nparent dbd090c655b4a4389fe51cbd3ad6f401e2953dbe\nparent 4d219d066626c49fdec3d8fa143a94c81150b633\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1683615826 +0530\ncommitter GitHub <noreply@github.com> 1683615826 +0530\n\nRollup merge of #111120 - chenyukang:yukang-suggest-let, r=Nilstrieb\n\nSuggest let for possible binding with ty\n\nOrigin from https://github.com/rust-lang/rust/pull/109128#discussion_r1179866137\n\nr? `@Nilstrieb`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c51701b8a5ac3a2fbfbad9f6d386ec443344293", "html_url": "https://github.com/rust-lang/rust/commit/8c51701b8a5ac3a2fbfbad9f6d386ec443344293", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe", "html_url": "https://github.com/rust-lang/rust/commit/dbd090c655b4a4389fe51cbd3ad6f401e2953dbe"}, {"sha": "4d219d066626c49fdec3d8fa143a94c81150b633", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d219d066626c49fdec3d8fa143a94c81150b633", "html_url": "https://github.com/rust-lang/rust/commit/4d219d066626c49fdec3d8fa143a94c81150b633"}], "stats": {"total": 138, "additions": 122, "deletions": 16}, "files": [{"sha": "a536eb3b04e69e648ed9282d05b96c8e4db6c5b3", "filename": "compiler/rustc_macros/src/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=8c51701b8a5ac3a2fbfbad9f6d386ec443344293", "patch": "@@ -140,7 +140,7 @@ pub fn lint_diagnostic_derive(s: Structure<'_>) -> TokenStream {\n /// ```fluent\n /// parser_expected_identifier = expected identifier\n ///\n-/// parser_expected_identifier-found = expected identifier, found {$found}\n+/// parser_expected_identifier_found = expected identifier, found {$found}\n ///\n /// parser_raw_identifier = escape `{$ident}` to use it as an identifier\n /// ```"}, {"sha": "1bbf833e3cdf5c7729c10577495f8c0eabeefb79", "filename": "compiler/rustc_parse/messages.ftl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/compiler%2Frustc_parse%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/compiler%2Frustc_parse%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fmessages.ftl?ref=8c51701b8a5ac3a2fbfbad9f6d386ec443344293", "patch": "@@ -343,6 +343,7 @@ parse_expected_identifier = expected identifier\n parse_sugg_escape_identifier = escape `{$ident_name}` to use it as an identifier\n \n parse_sugg_remove_comma = remove this comma\n+parse_sugg_add_let_for_stmt = you might have meant to introduce a new binding\n \n parse_expected_semi_found_reserved_identifier_str = expected `;`, found reserved identifier `{$token}`\n parse_expected_semi_found_keyword_str = expected `;`, found keyword `{$token}`"}, {"sha": "b6aeaf3d59f64d2475bdbe78ecb9d26987cfa23f", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=8c51701b8a5ac3a2fbfbad9f6d386ec443344293", "patch": "@@ -906,6 +906,18 @@ pub(crate) struct SuggRemoveComma {\n     pub span: Span,\n }\n \n+#[derive(Subdiagnostic)]\n+#[suggestion(\n+    parse_sugg_add_let_for_stmt,\n+    style = \"verbose\",\n+    applicability = \"maybe-incorrect\",\n+    code = \"let \"\n+)]\n+pub(crate) struct SuggAddMissingLetStmt {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n #[derive(Subdiagnostic)]\n pub(crate) enum ExpectedIdentifierFound {\n     #[label(parse_expected_identifier_found_reserved_identifier)]"}, {"sha": "3002f23da75cca74f7938424a2c18afb071c53f0", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=8c51701b8a5ac3a2fbfbad9f6d386ec443344293", "patch": "@@ -13,7 +13,7 @@ use crate::errors::{\n     IncorrectUseOfAwait, ParenthesesInForHead, ParenthesesInForHeadSugg,\n     PatternMethodParamWithoutBody, QuestionMarkInType, QuestionMarkInTypeSugg, SelfParamNotFirst,\n     StructLiteralBodyWithoutPath, StructLiteralBodyWithoutPathSugg, StructLiteralNeedingParens,\n-    StructLiteralNeedingParensSugg, SuggEscapeIdentifier, SuggRemoveComma,\n+    StructLiteralNeedingParensSugg, SuggAddMissingLetStmt, SuggEscapeIdentifier, SuggRemoveComma,\n     UnexpectedConstInGenericParam, UnexpectedConstParamDeclaration,\n     UnexpectedConstParamDeclarationSugg, UnmatchedAngleBrackets, UseEqInstead,\n };\n@@ -32,8 +32,8 @@ use rustc_ast::{\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{\n-    pluralize, Applicability, Diagnostic, DiagnosticBuilder, DiagnosticMessage, ErrorGuaranteed,\n-    FatalError, Handler, IntoDiagnostic, MultiSpan, PResult,\n+    pluralize, AddToDiagnostic, Applicability, Diagnostic, DiagnosticBuilder, DiagnosticMessage,\n+    ErrorGuaranteed, FatalError, Handler, IntoDiagnostic, MultiSpan, PResult,\n };\n use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::source_map::Spanned;\n@@ -1006,6 +1006,31 @@ impl<'a> Parser<'a> {\n         Err(e)\n     }\n \n+    /// Suggest add the missing `let` before the identifier in stmt\n+    /// `a: Ty = 1` -> `let a: Ty = 1`\n+    pub(super) fn suggest_add_missing_let_for_stmt(\n+        &mut self,\n+        err: &mut DiagnosticBuilder<'a, ErrorGuaranteed>,\n+    ) {\n+        if self.token == token::Colon {\n+            let prev_span = self.prev_token.span.shrink_to_lo();\n+            let snapshot = self.create_snapshot_for_diagnostic();\n+            self.bump();\n+            match self.parse_ty() {\n+                Ok(_) => {\n+                    if self.token == token::Eq {\n+                        let sugg = SuggAddMissingLetStmt { span: prev_span };\n+                        sugg.add_to_diagnostic(err);\n+                    }\n+                }\n+                Err(e) => {\n+                    e.cancel();\n+                }\n+            }\n+            self.restore_snapshot(snapshot);\n+        }\n+    }\n+\n     /// Check to see if a pair of chained operators looks like an attempt at chained comparison,\n     /// e.g. `1 < x <= 3`. If so, suggest either splitting the comparison into two, or\n     /// parenthesising the leftmost comparison."}, {"sha": "03279124177e3e30d024e028aedf117d85bb7818", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=8c51701b8a5ac3a2fbfbad9f6d386ec443344293", "patch": "@@ -103,7 +103,13 @@ impl<'a> Parser<'a> {\n                 ForceCollect::Yes => {\n                     self.collect_tokens_no_attrs(|this| this.parse_stmt_path_start(lo, attrs))?\n                 }\n-                ForceCollect::No => self.parse_stmt_path_start(lo, attrs)?,\n+                ForceCollect::No => match self.parse_stmt_path_start(lo, attrs) {\n+                    Ok(stmt) => stmt,\n+                    Err(mut err) => {\n+                        self.suggest_add_missing_let_for_stmt(&mut err);\n+                        return Err(err);\n+                    }\n+                },\n             }\n         } else if let Some(item) = self.parse_item_common(\n             attrs.clone(),\n@@ -559,7 +565,6 @@ impl<'a> Parser<'a> {\n                     if self.token == token::Colon {\n                         // if next token is following a colon, it's likely a path\n                         // and we can suggest a path separator\n-                        let ident_span = self.prev_token.span;\n                         self.bump();\n                         if self.token.span.lo() == self.prev_token.span.hi() {\n                             err.span_suggestion_verbose(\n@@ -569,14 +574,6 @@ impl<'a> Parser<'a> {\n                                 Applicability::MaybeIncorrect,\n                             );\n                         }\n-                        if self.look_ahead(1, |token| token == &token::Eq) {\n-                            err.span_suggestion_verbose(\n-                                ident_span.shrink_to_lo(),\n-                                \"you might have meant to introduce a new binding\",\n-                                \"let \",\n-                                Applicability::MaybeIncorrect,\n-                            );\n-                        }\n                         if self.sess.unstable_features.is_nightly_build() {\n                             // FIXME(Nilstrieb): Remove this again after a few months.\n                             err.note(\"type ascription syntax has been removed, see issue #101728 <https://github.com/rust-lang/rust/issues/101728>\");"}, {"sha": "e3d03b6f22ad6a01ce3bfb7feaebfb316bc8d338", "filename": "tests/ui/suggestions/type-ascription-instead-of-let.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/tests%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-let.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/tests%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-let.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-let.fixed?ref=8c51701b8a5ac3a2fbfbad9f6d386ec443344293", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+\n+fn fun(x: i32) -> i32 { x }\n+\n+fn main() {\n+    let _closure_annotated = |value: i32| -> i32 {\n+        let temp: i32 = fun(5i32);\n+        //~^ ERROR expected identifier, found `:`\n+        temp + value + 1\n+    };\n+}"}, {"sha": "6e1c86f96711923fb9d3447d9459e9af1cb5b1d8", "filename": "tests/ui/suggestions/type-ascription-instead-of-let.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/tests%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/tests%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-let.rs?ref=8c51701b8a5ac3a2fbfbad9f6d386ec443344293", "patch": "@@ -1,7 +1,9 @@\n+// run-rustfix\n+\n fn fun(x: i32) -> i32 { x }\n \n fn main() {\n-    let closure_annotated = |value: i32| -> i32 {\n+    let _closure_annotated = |value: i32| -> i32 {\n         temp: i32 = fun(5i32);\n         //~^ ERROR expected identifier, found `:`\n         temp + value + 1"}, {"sha": "065b1f4d3538e9e44398ad4ae358f893adffefd7", "filename": "tests/ui/suggestions/type-ascription-instead-of-let.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/tests%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/tests%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-let.stderr?ref=8c51701b8a5ac3a2fbfbad9f6d386ec443344293", "patch": "@@ -1,8 +1,13 @@\n error: expected identifier, found `:`\n-  --> $DIR/type-ascription-instead-of-let.rs:5:13\n+  --> $DIR/type-ascription-instead-of-let.rs:7:13\n    |\n LL |         temp: i32 = fun(5i32);\n    |             ^ expected identifier\n+   |\n+help: you might have meant to introduce a new binding\n+   |\n+LL |         let temp: i32 = fun(5i32);\n+   |         +++\n \n error: aborting due to previous error\n "}, {"sha": "d64013c8c838557d5e8d609b45fdb644a252777b", "filename": "tests/ui/type/missing-let-in-binding-2.fixed", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/tests%2Fui%2Ftype%2Fmissing-let-in-binding-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/tests%2Fui%2Ftype%2Fmissing-let-in-binding-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Fmissing-let-in-binding-2.fixed?ref=8c51701b8a5ac3a2fbfbad9f6d386ec443344293", "patch": "@@ -0,0 +1,5 @@\n+// run-rustfix\n+\n+fn main() {\n+    let _v: Vec<i32> = vec![1, 2, 3]; //~ ERROR expected identifier, found `:`\n+}"}, {"sha": "f95f7bef2158568426c3d7fbb132330ccda7598f", "filename": "tests/ui/type/missing-let-in-binding-2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/tests%2Fui%2Ftype%2Fmissing-let-in-binding-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/tests%2Fui%2Ftype%2Fmissing-let-in-binding-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Fmissing-let-in-binding-2.rs?ref=8c51701b8a5ac3a2fbfbad9f6d386ec443344293", "patch": "@@ -0,0 +1,5 @@\n+// run-rustfix\n+\n+fn main() {\n+    _v: Vec<i32> = vec![1, 2, 3]; //~ ERROR expected identifier, found `:`\n+}"}, {"sha": "2e10125943e7577734eda243ce4dae85c61c0408", "filename": "tests/ui/type/missing-let-in-binding-2.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/tests%2Fui%2Ftype%2Fmissing-let-in-binding-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/tests%2Fui%2Ftype%2Fmissing-let-in-binding-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Fmissing-let-in-binding-2.stderr?ref=8c51701b8a5ac3a2fbfbad9f6d386ec443344293", "patch": "@@ -0,0 +1,13 @@\n+error: expected identifier, found `:`\n+  --> $DIR/missing-let-in-binding-2.rs:4:7\n+   |\n+LL |     _v: Vec<i32> = vec![1, 2, 3];\n+   |       ^ expected identifier\n+   |\n+help: you might have meant to introduce a new binding\n+   |\n+LL |     let _v: Vec<i32> = vec![1, 2, 3];\n+   |     +++\n+\n+error: aborting due to previous error\n+"}, {"sha": "d56b1393336b18030ba7614c03214a4c7e816372", "filename": "tests/ui/type/missing-let-in-binding-3.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/tests%2Fui%2Ftype%2Fmissing-let-in-binding-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/tests%2Fui%2Ftype%2Fmissing-let-in-binding-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Fmissing-let-in-binding-3.rs?ref=8c51701b8a5ac3a2fbfbad9f6d386ec443344293", "patch": "@@ -0,0 +1,5 @@\n+struct A {\n+    : :u8, //~ ERROR expected identifier, found `:`\n+}\n+\n+fn main() {}"}, {"sha": "ca828ce37eb7afbbe7b6828fd679a33777dd894e", "filename": "tests/ui/type/missing-let-in-binding-3.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/tests%2Fui%2Ftype%2Fmissing-let-in-binding-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/tests%2Fui%2Ftype%2Fmissing-let-in-binding-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Fmissing-let-in-binding-3.stderr?ref=8c51701b8a5ac3a2fbfbad9f6d386ec443344293", "patch": "@@ -0,0 +1,10 @@\n+error: expected identifier, found `:`\n+  --> $DIR/missing-let-in-binding-3.rs:2:5\n+   |\n+LL | struct A {\n+   |        - while parsing this struct\n+LL |     : :u8,\n+   |     ^ expected identifier\n+\n+error: aborting due to previous error\n+"}, {"sha": "879a6fedcd677065bfe77b9c3b443972591bb1d4", "filename": "tests/ui/type/missing-let-in-binding-4.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/tests%2Fui%2Ftype%2Fmissing-let-in-binding-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/tests%2Fui%2Ftype%2Fmissing-let-in-binding-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Fmissing-let-in-binding-4.rs?ref=8c51701b8a5ac3a2fbfbad9f6d386ec443344293", "patch": "@@ -0,0 +1,5 @@\n+struct A {\n+    : u8 =, //~ ERROR expected identifier, found `:`\n+}\n+\n+fn main() {}"}, {"sha": "e6f173a6658701b9f9c67388bf4664f94c2f5939", "filename": "tests/ui/type/missing-let-in-binding-4.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/tests%2Fui%2Ftype%2Fmissing-let-in-binding-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c51701b8a5ac3a2fbfbad9f6d386ec443344293/tests%2Fui%2Ftype%2Fmissing-let-in-binding-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype%2Fmissing-let-in-binding-4.stderr?ref=8c51701b8a5ac3a2fbfbad9f6d386ec443344293", "patch": "@@ -0,0 +1,10 @@\n+error: expected identifier, found `:`\n+  --> $DIR/missing-let-in-binding-4.rs:2:5\n+   |\n+LL | struct A {\n+   |        - while parsing this struct\n+LL |     : u8 =,\n+   |     ^ expected identifier\n+\n+error: aborting due to previous error\n+"}]}