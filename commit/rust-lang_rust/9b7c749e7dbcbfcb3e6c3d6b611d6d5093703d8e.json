{"sha": "9b7c749e7dbcbfcb3e6c3d6b611d6d5093703d8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliN2M3NDllN2RiY2JmY2IzZTZjM2Q2YjYxMWQ2ZDUwOTM3MDNkOGU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-24T01:44:56Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-24T06:38:34Z"}, "message": "Rollup merge of #22728 - vojtechkral:int-audit-thread-local, r=alexcrichton\n\n Integer audit in `libstd/thread_local/*`, part of #22240", "tree": {"sha": "e47d1a159c105be9492bf627ed015dc133a3ec8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e47d1a159c105be9492bf627ed015dc133a3ec8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b7c749e7dbcbfcb3e6c3d6b611d6d5093703d8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b7c749e7dbcbfcb3e6c3d6b611d6d5093703d8e", "html_url": "https://github.com/rust-lang/rust/commit/9b7c749e7dbcbfcb3e6c3d6b611d6d5093703d8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b7c749e7dbcbfcb3e6c3d6b611d6d5093703d8e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ca54390095085eaae0baf85b0d1552067c5ee1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ca54390095085eaae0baf85b0d1552067c5ee1b", "html_url": "https://github.com/rust-lang/rust/commit/3ca54390095085eaae0baf85b0d1552067c5ee1b"}, {"sha": "e5e76e9b968cc61012321d3a916e0315b58c4484", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5e76e9b968cc61012321d3a916e0315b58c4484", "html_url": "https://github.com/rust-lang/rust/commit/e5e76e9b968cc61012321d3a916e0315b58c4484"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "d65156dae9604835e9459e8874a1823a79d0d9de", "filename": "src/libstd/thread_local/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9b7c749e7dbcbfcb3e6c3d6b611d6d5093703d8e/src%2Flibstd%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b7c749e7dbcbfcb3e6c3d6b611d6d5093703d8e/src%2Flibstd%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fmod.rs?ref=9b7c749e7dbcbfcb3e6c3d6b611d6d5093703d8e", "patch": "@@ -74,7 +74,7 @@ pub mod __impl {\n /// use std::cell::RefCell;\n /// use std::thread;\n ///\n-/// thread_local!(static FOO: RefCell<uint> = RefCell::new(1));\n+/// thread_local!(static FOO: RefCell<u32> = RefCell::new(1));\n ///\n /// FOO.with(|f| {\n ///     assert_eq!(*f.borrow(), 1);\n@@ -503,7 +503,7 @@ mod imp {\n         unsafe fn ptr(&'static self) -> Option<*mut T> {\n             let ptr = self.os.get() as *mut Value<T>;\n             if !ptr.is_null() {\n-                if ptr as uint == 1 {\n+                if ptr as usize == 1 {\n                     return None\n                 }\n                 return Some(&mut (*ptr).value as *mut T);\n@@ -563,7 +563,7 @@ mod tests {\n \n     #[test]\n     fn smoke_no_dtor() {\n-        thread_local!(static FOO: UnsafeCell<int> = UnsafeCell { value: 1 });\n+        thread_local!(static FOO: UnsafeCell<i32> = UnsafeCell { value: 1 });\n \n         FOO.with(|f| unsafe {\n             assert_eq!(*f.get(), 1);\n@@ -632,7 +632,7 @@ mod tests {\n         thread_local!(static K2: UnsafeCell<Option<S2>> = UnsafeCell {\n             value: None\n         });\n-        static mut HITS: uint = 0;\n+        static mut HITS: u32 = 0;\n \n         impl Drop for S1 {\n             fn drop(&mut self) {\n@@ -723,8 +723,8 @@ mod dynamic_tests {\n \n     #[test]\n     fn smoke() {\n-        fn square(i: int) -> int { i * i }\n-        thread_local!(static FOO: int = square(3));\n+        fn square(i: i32) -> i32 { i * i }\n+        thread_local!(static FOO: i32 = square(3));\n \n         FOO.with(|f| {\n             assert_eq!(*f, 9);\n@@ -733,12 +733,12 @@ mod dynamic_tests {\n \n     #[test]\n     fn hashmap() {\n-        fn map() -> RefCell<HashMap<int, int>> {\n+        fn map() -> RefCell<HashMap<i32, i32>> {\n             let mut m = HashMap::new();\n             m.insert(1, 2);\n             RefCell::new(m)\n         }\n-        thread_local!(static FOO: RefCell<HashMap<int, int>> = map());\n+        thread_local!(static FOO: RefCell<HashMap<i32, i32>> = map());\n \n         FOO.with(|map| {\n             assert_eq!(map.borrow()[1], 2);\n@@ -747,7 +747,7 @@ mod dynamic_tests {\n \n     #[test]\n     fn refcell_vec() {\n-        thread_local!(static FOO: RefCell<Vec<uint>> = RefCell::new(vec![1, 2, 3]));\n+        thread_local!(static FOO: RefCell<Vec<u32>> = RefCell::new(vec![1, 2, 3]));\n \n         FOO.with(|vec| {\n             assert_eq!(vec.borrow().len(), 3);"}, {"sha": "a2a5d8b81f40458e43b018fe77bb9d5426ee294d", "filename": "src/libstd/thread_local/scoped.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b7c749e7dbcbfcb3e6c3d6b611d6d5093703d8e/src%2Flibstd%2Fthread_local%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b7c749e7dbcbfcb3e6c3d6b611d6d5093703d8e/src%2Flibstd%2Fthread_local%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fscoped.rs?ref=9b7c749e7dbcbfcb3e6c3d6b611d6d5093703d8e", "patch": "@@ -24,7 +24,7 @@\n //! # Example\n //!\n //! ```\n-//! scoped_thread_local!(static FOO: uint);\n+//! scoped_thread_local!(static FOO: u32);\n //!\n //! // Initially each scoped slot is empty.\n //! assert!(!FOO.is_set());\n@@ -140,7 +140,7 @@ impl<T> Key<T> {\n     /// # Example\n     ///\n     /// ```\n-    /// scoped_thread_local!(static FOO: uint);\n+    /// scoped_thread_local!(static FOO: u32);\n     ///\n     /// FOO.set(&100, || {\n     ///     let val = FOO.with(|v| *v);\n@@ -192,7 +192,7 @@ impl<T> Key<T> {\n     /// # Example\n     ///\n     /// ```no_run\n-    /// scoped_thread_local!(static FOO: uint);\n+    /// scoped_thread_local!(static FOO: u32);\n     ///\n     /// FOO.with(|slot| {\n     ///     // work with `slot`\n@@ -269,11 +269,11 @@ mod tests {\n     use cell::Cell;\n     use prelude::v1::*;\n \n-    scoped_thread_local!(static FOO: uint);\n+    scoped_thread_local!(static FOO: u32);\n \n     #[test]\n     fn smoke() {\n-        scoped_thread_local!(static BAR: uint);\n+        scoped_thread_local!(static BAR: u32);\n \n         assert!(!BAR.is_set());\n         BAR.set(&1, || {\n@@ -287,7 +287,7 @@ mod tests {\n \n     #[test]\n     fn cell_allowed() {\n-        scoped_thread_local!(static BAR: Cell<uint>);\n+        scoped_thread_local!(static BAR: Cell<u32>);\n \n         BAR.set(&Cell::new(1), || {\n             BAR.with(|slot| {"}]}