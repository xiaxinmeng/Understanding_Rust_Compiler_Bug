{"sha": "5d28dec7b93aad54866c80213358fb3eb28153be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMjhkZWM3YjkzYWFkNTQ4NjZjODAyMTMzNThmYjNlYjI4MTUzYmU=", "commit": {"author": {"name": "unexge", "email": "unexge@gmail.com", "date": "2020-08-16T15:37:15Z"}, "committer": {"name": "unexge", "email": "unexge@gmail.com", "date": "2020-08-20T18:34:53Z"}, "message": "Fix importing unused traits in expand glob import", "tree": {"sha": "186a4947e6e59bb826e1b00c2b12b8fd39222c48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/186a4947e6e59bb826e1b00c2b12b8fd39222c48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d28dec7b93aad54866c80213358fb3eb28153be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d28dec7b93aad54866c80213358fb3eb28153be", "html_url": "https://github.com/rust-lang/rust/commit/5d28dec7b93aad54866c80213358fb3eb28153be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d28dec7b93aad54866c80213358fb3eb28153be/comments", "author": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "585f5d4901f3ddc0bec6aface8a86707d216886e", "url": "https://api.github.com/repos/rust-lang/rust/commits/585f5d4901f3ddc0bec6aface8a86707d216886e", "html_url": "https://github.com/rust-lang/rust/commit/585f5d4901f3ddc0bec6aface8a86707d216886e"}], "stats": {"total": 101, "additions": 73, "deletions": 28}, "files": [{"sha": "194fae63e663ab0b9f683c1901e405505e2eb31e", "filename": "crates/assists/src/handlers/expand_glob_import.rs", "status": "modified", "additions": 73, "deletions": 28, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/5d28dec7b93aad54866c80213358fb3eb28153be/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d28dec7b93aad54866c80213358fb3eb28153be/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs?ref=5d28dec7b93aad54866c80213358fb3eb28153be", "patch": "@@ -1,5 +1,5 @@\n use either::Either;\n-use hir::{MacroDef, Module, ModuleDef, Name, PathResolution, ScopeDef, SemanticsScope};\n+use hir::{AssocItem, MacroDef, Module, ModuleDef, Name, PathResolution, ScopeDef};\n use ide_db::{\n     defs::{classify_name_ref, Definition, NameRefClass},\n     search::SearchScope,\n@@ -49,7 +49,7 @@ pub(crate) fn expand_glob_import(acc: &mut Assists, ctx: &AssistContext) -> Opti\n \n     let refs_in_target = find_refs_in_mod(ctx, target_module, Some(current_module))?;\n     let imported_defs = find_imported_defs(ctx, star)?;\n-    let names_to_import = find_names_to_import(ctx, current_scope, refs_in_target, imported_defs);\n+    let names_to_import = find_names_to_import(ctx, refs_in_target, imported_defs);\n \n     let target = parent.clone().either(|n| n.syntax().clone(), |n| n.syntax().clone());\n     acc.add(\n@@ -90,6 +90,18 @@ enum Def {\n     MacroDef(MacroDef),\n }\n \n+impl Def {\n+    fn is_referenced_in(&self, ctx: &AssistContext) -> bool {\n+        let def = match self {\n+            Def::ModuleDef(def) => Definition::ModuleDef(*def),\n+            Def::MacroDef(def) => Definition::Macro(*def),\n+        };\n+\n+        let search_scope = SearchScope::single_file(ctx.frange.file_id);\n+        !def.find_usages(&ctx.sema, Some(search_scope)).is_empty()\n+    }\n+}\n+\n #[derive(Debug, Clone)]\n struct Ref {\n     // could be alias\n@@ -105,35 +117,39 @@ impl Ref {\n             _ => None,\n         }\n     }\n-\n-    fn is_referenced_in(&self, ctx: &AssistContext, scope: &SemanticsScope) -> bool {\n-        let def = match self.def {\n-            Def::ModuleDef(def) => Definition::ModuleDef(def),\n-            Def::MacroDef(def) => Definition::Macro(def),\n-        };\n-\n-        if let Definition::ModuleDef(ModuleDef::Trait(tr)) = def {\n-            if scope\n-                .traits_in_scope()\n-                .into_iter()\n-                .find(|other_tr_id| tr == other_tr_id.to_owned().into())\n-                .is_some()\n-            {\n-                return true;\n-            }\n-        }\n-\n-        let search_scope = SearchScope::single_file(ctx.frange.file_id);\n-        !def.find_usages(&ctx.sema, Some(search_scope)).is_empty()\n-    }\n }\n \n #[derive(Debug, Clone)]\n struct Refs(Vec<Ref>);\n \n impl Refs {\n-    fn used_refs(&self, ctx: &AssistContext, scope: &SemanticsScope) -> Refs {\n-        Refs(self.0.clone().into_iter().filter(|r| r.is_referenced_in(ctx, scope)).collect())\n+    fn used_refs(&self, ctx: &AssistContext) -> Refs {\n+        Refs(\n+            self.0\n+                .clone()\n+                .into_iter()\n+                .filter(|r| {\n+                    if let Def::ModuleDef(ModuleDef::Trait(tr)) = r.def {\n+                        if tr\n+                            .items(ctx.db())\n+                            .into_iter()\n+                            .find(|ai| {\n+                                if let AssocItem::Function(f) = *ai {\n+                                    Def::ModuleDef(ModuleDef::Function(f)).is_referenced_in(ctx)\n+                                } else {\n+                                    false\n+                                }\n+                            })\n+                            .is_some()\n+                        {\n+                            return true;\n+                        }\n+                    }\n+\n+                    r.def.is_referenced_in(ctx)\n+                })\n+                .collect(),\n+        )\n     }\n \n     fn filter_out_by_defs(&self, defs: Vec<Def>) -> Refs {\n@@ -191,11 +207,10 @@ fn find_imported_defs(ctx: &AssistContext, star: SyntaxToken) -> Option<Vec<Def>\n \n fn find_names_to_import(\n     ctx: &AssistContext,\n-    current_scope: SemanticsScope,\n     refs_in_target: Refs,\n     imported_defs: Vec<Def>,\n ) -> Vec<Name> {\n-    let used_refs = refs_in_target.used_refs(ctx, &current_scope).filter_out_by_defs(imported_defs);\n+    let used_refs = refs_in_target.used_refs(ctx).filter_out_by_defs(imported_defs);\n     used_refs.0.iter().map(|r| r.visible_name.clone()).collect()\n }\n \n@@ -767,7 +782,37 @@ fn main() {\n     ().method();\n }\n \",\n-        )\n+        );\n+\n+        check_assist(\n+            expand_glob_import,\n+            r\"\n+//- /lib.rs crate:foo\n+pub trait Tr {\n+    fn method(&self) {}\n+}\n+impl Tr for () {}\n+\n+pub trait Tr2 {\n+    fn method2(&self) {}\n+}\n+impl Tr2 for () {}\n+\n+//- /main.rs crate:main deps:foo\n+use foo::*<|>;\n+\n+fn main() {\n+    ().method();\n+}\n+\",\n+            r\"\n+use foo::Tr;\n+\n+fn main() {\n+    ().method();\n+}\n+\",\n+        );\n     }\n \n     #[test]"}]}