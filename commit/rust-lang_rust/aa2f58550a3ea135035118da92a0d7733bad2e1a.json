{"sha": "aa2f58550a3ea135035118da92a0d7733bad2e1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhMmY1ODU1MGEzZWExMzUwMzUxMThkYTkyYTBkNzczM2JhZDJlMWE=", "commit": {"author": {"name": "Ekaterina Babshukova", "email": "ekaterina.babshukova@yandex.ru", "date": "2019-10-09T11:59:47Z"}, "committer": {"name": "Ekaterina Babshukova", "email": "ekaterina.babshukova@yandex.ru", "date": "2019-10-09T11:59:47Z"}, "message": "add `module` methods", "tree": {"sha": "bc0c803db3ca24675a8e4bd84c75e86acfc848a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc0c803db3ca24675a8e4bd84c75e86acfc848a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa2f58550a3ea135035118da92a0d7733bad2e1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa2f58550a3ea135035118da92a0d7733bad2e1a", "html_url": "https://github.com/rust-lang/rust/commit/aa2f58550a3ea135035118da92a0d7733bad2e1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa2f58550a3ea135035118da92a0d7733bad2e1a/comments", "author": {"login": "viorina", "id": 6714973, "node_id": "MDQ6VXNlcjY3MTQ5NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6714973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viorina", "html_url": "https://github.com/viorina", "followers_url": "https://api.github.com/users/viorina/followers", "following_url": "https://api.github.com/users/viorina/following{/other_user}", "gists_url": "https://api.github.com/users/viorina/gists{/gist_id}", "starred_url": "https://api.github.com/users/viorina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viorina/subscriptions", "organizations_url": "https://api.github.com/users/viorina/orgs", "repos_url": "https://api.github.com/users/viorina/repos", "events_url": "https://api.github.com/users/viorina/events{/privacy}", "received_events_url": "https://api.github.com/users/viorina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "viorina", "id": 6714973, "node_id": "MDQ6VXNlcjY3MTQ5NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6714973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viorina", "html_url": "https://github.com/viorina", "followers_url": "https://api.github.com/users/viorina/followers", "following_url": "https://api.github.com/users/viorina/following{/other_user}", "gists_url": "https://api.github.com/users/viorina/gists{/gist_id}", "starred_url": "https://api.github.com/users/viorina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viorina/subscriptions", "organizations_url": "https://api.github.com/users/viorina/orgs", "repos_url": "https://api.github.com/users/viorina/repos", "events_url": "https://api.github.com/users/viorina/events{/privacy}", "received_events_url": "https://api.github.com/users/viorina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afc871199d423f7a59c64c7a79191911bd879c89", "url": "https://api.github.com/repos/rust-lang/rust/commits/afc871199d423f7a59c64c7a79191911bd879c89", "html_url": "https://github.com/rust-lang/rust/commit/afc871199d423f7a59c64c7a79191911bd879c89"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "3e9cd3c63d46f8d96f2104362e504e2e375bee9b", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aa2f58550a3ea135035118da92a0d7733bad2e1a/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2f58550a3ea135035118da92a0d7733bad2e1a/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=aa2f58550a3ea135035118da92a0d7733bad2e1a", "patch": "@@ -9,7 +9,7 @@ use ra_syntax::ast::{self, NameOwner, StructKind, TypeAscriptionOwner};\n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     type_ref::TypeRef,\n-    AsName, Enum, EnumVariant, FieldSource, HasSource, Name, Source, Struct, StructField,\n+    AsName, Enum, EnumVariant, FieldSource, HasSource, Module, Name, Source, Struct, StructField,\n };\n \n impl Struct {\n@@ -170,12 +170,20 @@ impl VariantDef {\n         }\n     }\n \n-    pub(crate) fn field(self, db: &impl HirDatabase, name: &Name) -> Option<StructField> {\n+    pub fn field(self, db: &impl HirDatabase, name: &Name) -> Option<StructField> {\n         match self {\n             VariantDef::Struct(it) => it.field(db, name),\n             VariantDef::EnumVariant(it) => it.field(db, name),\n         }\n     }\n+\n+    pub fn module(self, db: &impl HirDatabase) -> Module {\n+        match self {\n+            VariantDef::Struct(it) => it.module(db),\n+            VariantDef::EnumVariant(it) => it.module(db),\n+        }\n+    }\n+\n     pub(crate) fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n         match self {\n             VariantDef::Struct(it) => it.variant_data(db),"}, {"sha": "8055a07dbe26396a8bd1105a09dbf6fdff7f6db9", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/aa2f58550a3ea135035118da92a0d7733bad2e1a/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2f58550a3ea135035118da92a0d7733bad2e1a/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=aa2f58550a3ea135035118da92a0d7733bad2e1a", "patch": "@@ -569,6 +569,14 @@ impl DefWithBody {\n             DefWithBody::Static(s) => s.krate(db),\n         }\n     }\n+\n+    pub fn module(self, db: &impl HirDatabase) -> Module {\n+        match self {\n+            DefWithBody::Const(c) => c.module(db),\n+            DefWithBody::Function(f) => f.module(db),\n+            DefWithBody::Static(s) => s.module(db),\n+        }\n+    }\n }\n \n pub trait HasBody: Copy {\n@@ -789,6 +797,20 @@ impl Const {\n         ImplBlock::containing(module_impls, self.into())\n     }\n \n+    pub fn parent_trait(self, db: &impl DefDatabase) -> Option<Trait> {\n+        db.trait_items_index(self.module(db)).get_parent_trait(self.into())\n+    }\n+\n+    pub fn container(self, db: &impl DefDatabase) -> Option<Container> {\n+        if let Some(impl_block) = self.impl_block(db) {\n+            Some(impl_block.into())\n+        } else if let Some(trait_) = self.parent_trait(db) {\n+            Some(trait_.into())\n+        } else {\n+            None\n+        }\n+    }\n+\n     // FIXME: move to a more general type for 'body-having' items\n     /// Builds a resolver for code inside this item.\n     pub(crate) fn resolver(self, db: &impl HirDatabase) -> Resolver {\n@@ -1075,3 +1097,13 @@ impl From<AssocItem> for crate::generics::GenericDef {\n         }\n     }\n }\n+\n+impl AssocItem {\n+    pub fn module(self, db: &impl DefDatabase) -> Module {\n+        match self {\n+            AssocItem::Function(f) => f.module(db),\n+            AssocItem::Const(c) => c.module(db),\n+            AssocItem::TypeAlias(t) => t.module(db),\n+        }\n+    }\n+}"}]}