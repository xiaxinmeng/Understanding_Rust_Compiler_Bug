{"sha": "15713e1717219be78c46234d2255fb105f87c02c", "node_id": "C_kwDOAAsO6NoAKDE1NzEzZTE3MTcyMTliZTc4YzQ2MjM0ZDIyNTVmYjEwNWY4N2MwMmM", "commit": {"author": {"name": "Yan Chen", "email": "ychen2@futurewei.com", "date": "2022-07-22T16:53:39Z"}, "committer": {"name": "Yan Chen", "email": "ychen2@futurewei.com", "date": "2022-08-15T18:20:32Z"}, "message": "Fix #95079 by adding help and suggestion for missing move in nested closure", "tree": {"sha": "5e21707d82618fbc7800c3c03a285348a7877fc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e21707d82618fbc7800c3c03a285348a7877fc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15713e1717219be78c46234d2255fb105f87c02c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15713e1717219be78c46234d2255fb105f87c02c", "html_url": "https://github.com/rust-lang/rust/commit/15713e1717219be78c46234d2255fb105f87c02c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15713e1717219be78c46234d2255fb105f87c02c/comments", "author": null, "committer": null, "parents": [{"sha": "4916e2b9e6ef8cee6f9c6abb75bd01ba9dc07e5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4916e2b9e6ef8cee6f9c6abb75bd01ba9dc07e5c", "html_url": "https://github.com/rust-lang/rust/commit/4916e2b9e6ef8cee6f9c6abb75bd01ba9dc07e5c"}], "stats": {"total": 104, "additions": 104, "deletions": 0}, "files": [{"sha": "0dce5be953e1a0585bbedd3ed71f3fd035923903", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/15713e1717219be78c46234d2255fb105f87c02c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15713e1717219be78c46234d2255fb105f87c02c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=15713e1717219be78c46234d2255fb105f87c02c", "patch": "@@ -546,6 +546,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n              executing...\",\n         );\n         diag.note(\"...therefore, they cannot allow references to captured variables to escape\");\n+        self.suggest_move_on_borrowing_closure(&mut diag);\n \n         diag\n     }\n@@ -716,6 +717,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n         self.add_static_impl_trait_suggestion(&mut diag, *fr, fr_name, *outlived_fr);\n         self.suggest_adding_lifetime_params(&mut diag, *fr, *outlived_fr);\n+        self.suggest_move_on_borrowing_closure(&mut diag);\n \n         diag\n     }\n@@ -901,4 +903,39 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n         suggest_adding_lifetime_params(self.infcx.tcx, sub, ty_sup, ty_sub, diag);\n     }\n+\n+    fn suggest_move_on_borrowing_closure(&self, diag: &mut Diagnostic) {\n+        let map = self.infcx.tcx.hir();\n+        let body_id = map.body_owned_by(self.mir_def_id());\n+        let expr = &map.body(body_id).value;\n+        let mut closure_span = None::<rustc_span::Span>;\n+        match expr.kind {\n+            hir::ExprKind::MethodCall(.., args, _) => {\n+                // only the first closre parameter of the method. args[0] is MethodCall PathSegment\n+                for i in 1..args.len() {\n+                    if let hir::ExprKind::Closure(..) = args[i].kind {\n+                        closure_span = Some(args[i].span.shrink_to_lo());\n+                        break;\n+                    }\n+                }\n+            }\n+            hir::ExprKind::Block(blk, _) => {\n+                if let Some(ref expr) = blk.expr {\n+                    // only when the block is a closure\n+                    if let hir::ExprKind::Closure(..) = expr.kind {\n+                        closure_span = Some(expr.span.shrink_to_lo());\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+        if let Some(closure_span) = closure_span {\n+            diag.span_suggestion_verbose(\n+                closure_span,\n+                format!(\"consider adding 'move' keyword before the nested closure\"),\n+                \"move \",\n+                Applicability::MaybeIncorrect,\n+            );\n+        }\n+    }\n }"}, {"sha": "cfcc62de4383b56be7a2b2c62ba9663a37a9763e", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15713e1717219be78c46234d2255fb105f87c02c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15713e1717219be78c46234d2255fb105f87c02c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr?ref=15713e1717219be78c46234d2255fb105f87c02c", "patch": "@@ -36,6 +36,10 @@ LL | |                 }\n    |\n    = note: `FnMut` closures only have access to their captured variables while they are executing...\n    = note: ...therefore, they cannot allow references to captured variables to escape\n+help: consider adding 'move' keyword before the nested closure\n+   |\n+LL |                move || {\n+   |                ++++\n \n error[E0503]: cannot use `f.x` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:37:9"}, {"sha": "f0b5748463261c90eaf7bc77b5942c23fceab4db", "filename": "src/test/ui/borrowck/issue-53432-nested-closure-outlives-borrowed-value.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15713e1717219be78c46234d2255fb105f87c02c/src%2Ftest%2Fui%2Fborrowck%2Fissue-53432-nested-closure-outlives-borrowed-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15713e1717219be78c46234d2255fb105f87c02c/src%2Ftest%2Fui%2Fborrowck%2Fissue-53432-nested-closure-outlives-borrowed-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-53432-nested-closure-outlives-borrowed-value.stderr?ref=15713e1717219be78c46234d2255fb105f87c02c", "patch": "@@ -10,6 +10,10 @@ LL |         || f() // The `nested` closure\n    |         ^^^^^^ returning this value requires that `'1` must outlive `'2`\n    |\n    = note: closure implements `Fn`, so references to captured variables can't escape the closure\n+help: consider adding 'move' keyword before the nested closure\n+   |\n+LL |         move || f() // The `nested` closure\n+   |         ++++\n \n error: aborting due to previous error\n "}, {"sha": "95847d8d301a65249988a6bf843bdd7fd194858d", "filename": "src/test/ui/borrowck/issue-95079-missing-move-in-nested-closure.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/15713e1717219be78c46234d2255fb105f87c02c/src%2Ftest%2Fui%2Fborrowck%2Fissue-95079-missing-move-in-nested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15713e1717219be78c46234d2255fb105f87c02c/src%2Ftest%2Fui%2Fborrowck%2Fissue-95079-missing-move-in-nested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-95079-missing-move-in-nested-closure.rs?ref=15713e1717219be78c46234d2255fb105f87c02c", "patch": "@@ -0,0 +1,14 @@\n+fn foo1(s: &str) -> impl Iterator<Item = String> + '_ {\n+    None.into_iter()\n+        .flat_map(move |()| s.chars().map(|c| format!(\"{}{}\", c, s)))\n+        //~^ ERROR captured variable cannot escape `FnMut` closure body\n+        //~| HELP consider adding 'move' keyword before the nested closure\n+}\n+\n+fn foo2(s: &str) -> impl Sized + '_ {\n+    move |()| s.chars().map(|c| format!(\"{}{}\", c, s))\n+    //~^ ERROR lifetime may not live long enough\n+    //~| HELP consider adding 'move' keyword before the nested closure\n+}\n+\n+fn main() {}"}, {"sha": "2eae614a2f5987504231e3960ed06c097fab10b2", "filename": "src/test/ui/borrowck/issue-95079-missing-move-in-nested-closure.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/15713e1717219be78c46234d2255fb105f87c02c/src%2Ftest%2Fui%2Fborrowck%2Fissue-95079-missing-move-in-nested-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15713e1717219be78c46234d2255fb105f87c02c/src%2Ftest%2Fui%2Fborrowck%2Fissue-95079-missing-move-in-nested-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-95079-missing-move-in-nested-closure.stderr?ref=15713e1717219be78c46234d2255fb105f87c02c", "patch": "@@ -0,0 +1,37 @@\n+error: captured variable cannot escape `FnMut` closure body\n+  --> $DIR/issue-95079-missing-move-in-nested-closure.rs:3:29\n+   |\n+LL | fn foo1(s: &str) -> impl Iterator<Item = String> + '_ {\n+   |         - variable defined here\n+LL |     None.into_iter()\n+LL |         .flat_map(move |()| s.chars().map(|c| format!(\"{}{}\", c, s)))\n+   |                           - -^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                           | |\n+   |                           | returns a reference to a captured variable which escapes the closure body\n+   |                           | variable captured here\n+   |                           inferred to be a `FnMut` closure\n+   |\n+   = note: `FnMut` closures only have access to their captured variables while they are executing...\n+   = note: ...therefore, they cannot allow references to captured variables to escape\n+help: consider adding 'move' keyword before the nested closure\n+   |\n+LL |         .flat_map(move |()| s.chars().map(move |c| format!(\"{}{}\", c, s)))\n+   |                                           ++++\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-95079-missing-move-in-nested-closure.rs:9:15\n+   |\n+LL |     move |()| s.chars().map(|c| format!(\"{}{}\", c, s))\n+   |     --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'2`\n+   |     |       |\n+   |     |       return type of closure `Map<Chars<'_>, [closure@$DIR/issue-95079-missing-move-in-nested-closure.rs:9:29: 9:32]>` contains a lifetime `'2`\n+   |     lifetime `'1` represents this closure's body\n+   |\n+   = note: closure implements `Fn`, so references to captured variables can't escape the closure\n+help: consider adding 'move' keyword before the nested closure\n+   |\n+LL |     move |()| s.chars().map(move |c| format!(\"{}{}\", c, s))\n+   |                             ++++\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "eb077415e6ce04e954ba45d2264c40cec27d727e", "filename": "src/test/ui/issues/issue-40510-3.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15713e1717219be78c46234d2255fb105f87c02c/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15713e1717219be78c46234d2255fb105f87c02c/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.stderr?ref=15713e1717219be78c46234d2255fb105f87c02c", "patch": "@@ -14,6 +14,10 @@ LL | |         }\n    |\n    = note: `FnMut` closures only have access to their captured variables while they are executing...\n    = note: ...therefore, they cannot allow references to captured variables to escape\n+help: consider adding 'move' keyword before the nested closure\n+   |\n+LL |         move || {\n+   |         ++++\n \n error: aborting due to previous error\n "}, {"sha": "14beadececb99131552bc8823ef44044923861a7", "filename": "src/test/ui/issues/issue-49824.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15713e1717219be78c46234d2255fb105f87c02c/src%2Ftest%2Fui%2Fissues%2Fissue-49824.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15713e1717219be78c46234d2255fb105f87c02c/src%2Ftest%2Fui%2Fissues%2Fissue-49824.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49824.stderr?ref=15713e1717219be78c46234d2255fb105f87c02c", "patch": "@@ -14,6 +14,10 @@ LL | |         }\n    |\n    = note: `FnMut` closures only have access to their captured variables while they are executing...\n    = note: ...therefore, they cannot allow references to captured variables to escape\n+help: consider adding 'move' keyword before the nested closure\n+   |\n+LL |         move || {\n+   |         ++++\n \n error: aborting due to previous error\n "}]}