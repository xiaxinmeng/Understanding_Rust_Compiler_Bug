{"sha": "99afc6e6ac2ce874c4fed32c083f1e160f533015", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YWZjNmU2YWMyY2U4NzRjNGZlZDMyYzA4M2YxZTE2MGY1MzMwMTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-11T10:08:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-11T10:08:29Z"}, "message": "Auto merge of #6881 - flip1995:rustup, r=flip1995\n\nRustup\n\nchangelog: none", "tree": {"sha": "e2fa5ed4904a03e60afd1c81ecaa16c382f6264c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2fa5ed4904a03e60afd1c81ecaa16c382f6264c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99afc6e6ac2ce874c4fed32c083f1e160f533015", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99afc6e6ac2ce874c4fed32c083f1e160f533015", "html_url": "https://github.com/rust-lang/rust/commit/99afc6e6ac2ce874c4fed32c083f1e160f533015", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99afc6e6ac2ce874c4fed32c083f1e160f533015/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8222d48cde5e01edb9b7ecacf964abc843f8a8cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/8222d48cde5e01edb9b7ecacf964abc843f8a8cc", "html_url": "https://github.com/rust-lang/rust/commit/8222d48cde5e01edb9b7ecacf964abc843f8a8cc"}, {"sha": "9c1dd0c22721029dc47e5fe73d85670abab9adfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c1dd0c22721029dc47e5fe73d85670abab9adfc", "html_url": "https://github.com/rust-lang/rust/commit/9c1dd0c22721029dc47e5fe73d85670abab9adfc"}], "stats": {"total": 311, "additions": 173, "deletions": 138}, "files": [{"sha": "6250810bc42773179869a8d5e9fe4a95e840546c", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -276,14 +276,15 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n+        let attrs = cx.tcx.hir().attrs(item.hir_id());\n         if is_relevant_item(cx, item) {\n-            check_attrs(cx, item.span, item.ident.name, &item.attrs)\n+            check_attrs(cx, item.span, item.ident.name, attrs)\n         }\n         match item.kind {\n             ItemKind::ExternCrate(..) | ItemKind::Use(..) => {\n-                let skip_unused_imports = item.attrs.iter().any(|attr| attr.has_name(sym::macro_use));\n+                let skip_unused_imports = attrs.iter().any(|attr| attr.has_name(sym::macro_use));\n \n-                for attr in item.attrs {\n+                for attr in attrs {\n                     if in_external_macro(cx.sess(), attr.span) {\n                         return;\n                     }\n@@ -353,13 +354,13 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'_>) {\n         if is_relevant_impl(cx, item) {\n-            check_attrs(cx, item.span, item.ident.name, &item.attrs)\n+            check_attrs(cx, item.span, item.ident.name, cx.tcx.hir().attrs(item.hir_id()))\n         }\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'_>) {\n         if is_relevant_trait(cx, item) {\n-            check_attrs(cx, item.span, item.ident.name, &item.attrs)\n+            check_attrs(cx, item.span, item.ident.name, cx.tcx.hir().attrs(item.hir_id()))\n         }\n     }\n }"}, {"sha": "658d445dfec54d0ad2e2a35bff964e571144bc84", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -76,8 +76,8 @@ impl CognitiveComplexity {\n \n         if rust_cc > self.limit.limit() {\n             let fn_span = match kind {\n-                FnKind::ItemFn(ident, _, _, _, _) | FnKind::Method(ident, _, _, _) => ident.span,\n-                FnKind::Closure(_) => {\n+                FnKind::ItemFn(ident, _, _, _) | FnKind::Method(ident, _, _) => ident.span,\n+                FnKind::Closure => {\n                     let header_span = body_span.with_hi(decl.output.span().lo());\n                     let pos = snippet_opt(cx, header_span).and_then(|snip| {\n                         let low_offset = snip.find('|')?;"}, {"sha": "6d3094ed6bfad5b6f7684db0e8c7d4caba4148a1", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -170,7 +170,8 @@ impl<'tcx> LateLintPass<'tcx> for Derive {\n         }) = item.kind\n         {\n             let ty = cx.tcx.type_of(item.def_id);\n-            let is_automatically_derived = is_automatically_derived(&*item.attrs);\n+            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            let is_automatically_derived = is_automatically_derived(attrs);\n \n             check_hash_peq(cx, item.span, trait_ref, ty, is_automatically_derived);\n             check_ord_partial_ord(cx, item.span, trait_ref, ty, is_automatically_derived);"}, {"sha": "90b02d52f8a713da572e50cb94e87a8d97675de2", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -208,12 +208,14 @@ impl_lint_pass!(DocMarkdown =>\n );\n \n impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n-    fn check_crate(&mut self, cx: &LateContext<'tcx>, krate: &'tcx hir::Crate<'_>) {\n-        check_attrs(cx, &self.valid_idents, &krate.item.attrs);\n+    fn check_crate(&mut self, cx: &LateContext<'tcx>, _: &'tcx hir::Crate<'_>) {\n+        let attrs = cx.tcx.hir().attrs(hir::CRATE_HIR_ID);\n+        check_attrs(cx, &self.valid_idents, attrs);\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n-        let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n+        let attrs = cx.tcx.hir().attrs(item.hir_id());\n+        let headers = check_attrs(cx, &self.valid_idents, attrs);\n         match item.kind {\n             hir::ItemKind::Fn(ref sig, _, body_id) => {\n                 if !(is_entrypoint_fn(cx, item.def_id.to_def_id()) || in_external_macro(cx.tcx.sess, item.span)) {\n@@ -249,7 +251,8 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {\n-        let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n+        let attrs = cx.tcx.hir().attrs(item.hir_id());\n+        let headers = check_attrs(cx, &self.valid_idents, attrs);\n         if let hir::TraitItemKind::Fn(ref sig, ..) = item.kind {\n             if !in_external_macro(cx.tcx.sess, item.span) {\n                 lint_for_missing_headers(cx, item.hir_id(), item.span, sig, headers, None, None);\n@@ -258,7 +261,8 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'_>) {\n-        let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n+        let attrs = cx.tcx.hir().attrs(item.hir_id());\n+        let headers = check_attrs(cx, &self.valid_idents, attrs);\n         if self.in_trait_impl || in_external_macro(cx.tcx.sess, item.span) {\n             return;\n         }"}, {"sha": "55575969927ba891e35cb2faebb9302622f26df6", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -9,6 +9,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n+use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for uses of `contains_key` + `insert` on `HashMap`\n@@ -111,7 +112,7 @@ fn check_cond<'a>(cx: &LateContext<'_>, check: &'a Expr<'a>) -> Option<(&'static\n             return if match_type(cx, obj_ty, &paths::BTREEMAP) {\n                 Some((\"BTreeMap\", map, key))\n             }\n-            else if is_type_diagnostic_item(cx, obj_ty, sym!(hashmap_type)) {\n+            else if is_type_diagnostic_item(cx, obj_ty, sym::hashmap_type) {\n                 Some((\"HashMap\", map, key))\n             }\n             else {"}, {"sha": "316f7484862803281cdcc2f96e9b3a06d5c87beb", "filename": "clippy_lints/src/exhaustive_items.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexhaustive_items.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -73,7 +73,8 @@ impl LateLintPass<'_> for ExhaustiveItems {\n         if_chain! {\n             if let ItemKind::Enum(..) | ItemKind::Struct(..) = item.kind;\n             if cx.access_levels.is_exported(item.hir_id());\n-            if !item.attrs.iter().any(|a| a.has_name(sym::non_exhaustive));\n+            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            if !attrs.iter().any(|a| a.has_name(sym::non_exhaustive));\n             then {\n                 let (lint, msg) = if let ItemKind::Struct(ref v, ..) = item.kind {\n                     if v.fields().iter().any(|f| !f.vis.node.is_pub()) {"}, {"sha": "c474db06fe3fd577cf1b15151ac6ef2251a74f0a", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -251,9 +251,9 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n         hir_id: hir::HirId,\n     ) {\n         let unsafety = match kind {\n-            intravisit::FnKind::ItemFn(_, _, hir::FnHeader { unsafety, .. }, _, _) => unsafety,\n-            intravisit::FnKind::Method(_, sig, _, _) => sig.header.unsafety,\n-            intravisit::FnKind::Closure(_) => return,\n+            intravisit::FnKind::ItemFn(_, _, hir::FnHeader { unsafety, .. }, _) => unsafety,\n+            intravisit::FnKind::Method(_, sig, _) => sig.header.unsafety,\n+            intravisit::FnKind::Closure => return,\n         };\n \n         // don't warn for implementations, it's not their fault\n@@ -267,9 +267,8 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n                         ..\n                     },\n                     _,\n-                    _,\n                 )\n-                | intravisit::FnKind::ItemFn(_, _, hir::FnHeader { abi: Abi::Rust, .. }, _, _) => {\n+                | intravisit::FnKind::ItemFn(_, _, hir::FnHeader { abi: Abi::Rust, .. }, _) => {\n                     self.check_arg_number(cx, decl, span.with_hi(decl.output.span().hi()))\n                 },\n                 _ => {},\n@@ -281,7 +280,8 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n-        let attr = must_use_attr(&item.attrs);\n+        let attrs = cx.tcx.hir().attrs(item.hir_id());\n+        let attr = must_use_attr(attrs);\n         if let hir::ItemKind::Fn(ref sig, ref _generics, ref body_id) = item.kind {\n             let is_public = cx.access_levels.is_exported(item.hir_id());\n             let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n@@ -292,7 +292,7 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n                 check_needless_must_use(cx, &sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n                 return;\n             }\n-            if is_public && !is_proc_macro(cx.sess(), &item.attrs) && attr_by_name(&item.attrs, \"no_mangle\").is_none() {\n+            if is_public && !is_proc_macro(cx.sess(), attrs) && attr_by_name(attrs, \"no_mangle\").is_none() {\n                 check_must_use_candidate(\n                     cx,\n                     &sig.decl,\n@@ -313,12 +313,11 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n             if is_public && trait_ref_of_method(cx, item.hir_id()).is_none() {\n                 check_result_unit_err(cx, &sig.decl, item.span, fn_header_span);\n             }\n-            let attr = must_use_attr(&item.attrs);\n+            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            let attr = must_use_attr(attrs);\n             if let Some(attr) = attr {\n                 check_needless_must_use(cx, &sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n-            } else if is_public\n-                && !is_proc_macro(cx.sess(), &item.attrs)\n-                && trait_ref_of_method(cx, item.hir_id()).is_none()\n+            } else if is_public && !is_proc_macro(cx.sess(), attrs) && trait_ref_of_method(cx, item.hir_id()).is_none()\n             {\n                 check_must_use_candidate(\n                     cx,\n@@ -345,15 +344,16 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n                 check_result_unit_err(cx, &sig.decl, item.span, fn_header_span);\n             }\n \n-            let attr = must_use_attr(&item.attrs);\n+            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            let attr = must_use_attr(attrs);\n             if let Some(attr) = attr {\n                 check_needless_must_use(cx, &sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n             }\n             if let hir::TraitFn::Provided(eid) = *eid {\n                 let body = cx.tcx.hir().body(eid);\n                 Self::check_raw_ptr(cx, sig.header.unsafety, &sig.decl, body, item.hir_id());\n \n-                if attr.is_none() && is_public && !is_proc_macro(cx.sess(), &item.attrs) {\n+                if attr.is_none() && is_public && !is_proc_macro(cx.sess(), attrs) {\n                     check_must_use_candidate(\n                         cx,\n                         &sig.decl,"}, {"sha": "9e1a8864a3ebe0ff6deff9c2cbec4c1bf19a7499", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -58,7 +58,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n         _: Span,\n         hir_id: HirId,\n     ) {\n-        if let FnKind::Closure(_) = kind {\n+        if let FnKind::Closure = kind {\n             return;\n         }\n         let ret_ty = utils::return_ty(cx, hir_id);"}, {"sha": "00acbd6cc3f7694525ebba2802f5883207b8a5bc", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -34,7 +34,8 @@ declare_lint_pass!(InlineFnWithoutBody => [INLINE_FN_WITHOUT_BODY]);\n impl<'tcx> LateLintPass<'tcx> for InlineFnWithoutBody {\n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'_>) {\n         if let TraitItemKind::Fn(_, TraitFn::Required(_)) = item.kind {\n-            check_attrs(cx, item.ident.name, &item.attrs);\n+            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            check_attrs(cx, item.ident.name, attrs);\n         }\n     }\n }"}, {"sha": "43e85538f281da7a7f35c882b94895a2651136a2", "filename": "clippy_lints/src/loops/empty_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Floops%2Fempty_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Floops%2Fempty_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fempty_loop.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -7,7 +7,7 @@ use rustc_lint::LateContext;\n pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, loop_block: &'tcx Block<'_>) {\n     if loop_block.stmts.is_empty() && loop_block.expr.is_none() && !is_in_panic_handler(cx, expr) {\n         let msg = \"empty `loop {}` wastes CPU cycles\";\n-        let help = if is_no_std_crate(cx.tcx.hir().krate()) {\n+        let help = if is_no_std_crate(cx) {\n             \"you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\"\n         } else {\n             \"you should either use `panic!()` or add `std::thread::sleep(..);` to the loop body\""}, {"sha": "9683e59a3962d2acac1613a92f1cd864ee155af3", "filename": "clippy_lints/src/loops/explicit_iter_loop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -4,7 +4,7 @@ use rustc_errors::Applicability;\n use rustc_hir::{Expr, Mutability};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty, TyS};\n-use rustc_span::symbol::sym;\n+use rustc_span::sym;\n \n use crate::utils::{is_type_diagnostic_item, match_type, paths};\n \n@@ -55,9 +55,9 @@ fn is_ref_iterable_type(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n     is_iterable_array(ty, cx) ||\n     is_type_diagnostic_item(cx, ty, sym::vec_type) ||\n     match_type(cx, ty, &paths::LINKED_LIST) ||\n-    is_type_diagnostic_item(cx, ty, sym!(hashmap_type)) ||\n-    is_type_diagnostic_item(cx, ty, sym!(hashset_type)) ||\n-    is_type_diagnostic_item(cx, ty, sym!(vecdeque_type)) ||\n+    is_type_diagnostic_item(cx, ty, sym::hashmap_type) ||\n+    is_type_diagnostic_item(cx, ty, sym::hashset_type) ||\n+    is_type_diagnostic_item(cx, ty, sym::vecdeque_type) ||\n     match_type(cx, ty, &paths::BINARY_HEAP) ||\n     match_type(cx, ty, &paths::BTREEMAP) ||\n     match_type(cx, ty, &paths::BTREESET)"}, {"sha": "6ee9b95a3b689035a544e65b1e1de2b7369ae98d", "filename": "clippy_lints/src/loops/for_kv_map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -4,6 +4,7 @@ use crate::utils::{is_type_diagnostic_item, match_type, multispan_sugg, paths, s\n use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability, Pat, PatKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n+use rustc_span::sym;\n \n /// Checks for the `FOR_KV_MAP` lint.\n pub(super) fn check<'tcx>(\n@@ -35,7 +36,7 @@ pub(super) fn check<'tcx>(\n                 _ => arg,\n             };\n \n-            if is_type_diagnostic_item(cx, ty, sym!(hashmap_type)) || match_type(cx, ty, &paths::BTREEMAP) {\n+            if is_type_diagnostic_item(cx, ty, sym::hashmap_type) || match_type(cx, ty, &paths::BTREEMAP) {\n                 span_lint_and_then(\n                     cx,\n                     FOR_KV_MAP,"}, {"sha": "fad96c2d5c04cd822f675b54e33848d671b14744", "filename": "clippy_lints/src/loops/manual_memcpy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -203,7 +203,7 @@ struct MinifyingSugg<'a>(Sugg<'a>);\n \n impl<'a> MinifyingSugg<'a> {\n     fn as_str(&self) -> &str {\n-        let Sugg::NonParen(s) | Sugg::MaybeParen(s) | Sugg::BinOp(_, s) = &self.0;\n+        let (Sugg::NonParen(s) | Sugg::MaybeParen(s) | Sugg::BinOp(_, s)) = &self.0;\n         s.as_ref()\n     }\n \n@@ -328,7 +328,7 @@ fn is_slice_like<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'_>) -> bool {\n         _ => false,\n     };\n \n-    is_slice || is_type_diagnostic_item(cx, ty, sym::vec_type) || is_type_diagnostic_item(cx, ty, sym!(vecdeque_type))\n+    is_slice || is_type_diagnostic_item(cx, ty, sym::vec_type) || is_type_diagnostic_item(cx, ty, sym::vecdeque_type)\n }\n \n fn fetch_cloned_expr<'tcx>(expr: &'tcx Expr<'tcx>) -> &'tcx Expr<'tcx> {"}, {"sha": "92560c806295ccc01e9397f6f244637a920d60c3", "filename": "clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -29,9 +29,9 @@ fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCont\n         then {\n             let ty = cx.typeck_results().node_type(ty.hir_id);\n             if is_type_diagnostic_item(cx, ty, sym::vec_type) ||\n-                is_type_diagnostic_item(cx, ty, sym!(vecdeque_type)) ||\n+                is_type_diagnostic_item(cx, ty, sym::vecdeque_type) ||\n                 match_type(cx, ty, &paths::BTREEMAP) ||\n-                is_type_diagnostic_item(cx, ty, sym!(hashmap_type)) {\n+                is_type_diagnostic_item(cx, ty, sym::hashmap_type) {\n                 if method.ident.name == sym!(len) {\n                     let span = shorten_needless_collect_span(expr);\n                     span_lint_and_sugg(\n@@ -99,7 +99,7 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n                 if let Some(GenericArg::Type(ref ty)) = generic_args.args.get(0);\n                 if let ty = cx.typeck_results().node_type(ty.hir_id);\n                 if is_type_diagnostic_item(cx, ty, sym::vec_type) ||\n-                    is_type_diagnostic_item(cx, ty, sym!(vecdeque_type)) ||\n+                    is_type_diagnostic_item(cx, ty, sym::vecdeque_type) ||\n                     match_type(cx, ty, &paths::LINKED_LIST);\n                 if let Some(iter_calls) = detect_iter_and_into_iters(block, *ident);\n                 if iter_calls.len() == 1;"}, {"sha": "6d9c78393c8c4d2eee97df292a35372f02ee80b1", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -107,8 +107,8 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n         if_chain! {\n             if cx.sess().opts.edition >= Edition::Edition2018;\n             if let hir::ItemKind::Use(path, _kind) = &item.kind;\n-            if let Some(mac_attr) = item\n-                .attrs\n+            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            if let Some(mac_attr) = attrs\n                 .iter()\n                 .find(|attr| attr.ident().map(|s| s.to_string()) == Some(\"macro_use\".to_string()));\n             if let Res::Def(DefKind::Mod, id) = path.res;"}, {"sha": "1b274c79d3820b5a948efb4578adb3bf220b0e3f", "filename": "clippy_lints/src/main_recursion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fmain_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fmain_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmain_recursion.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -32,8 +32,8 @@ pub struct MainRecursion {\n impl_lint_pass!(MainRecursion => [MAIN_RECURSION]);\n \n impl LateLintPass<'_> for MainRecursion {\n-    fn check_crate(&mut self, _: &LateContext<'_>, krate: &Crate<'_>) {\n-        self.has_no_std_attr = is_no_std_crate(krate);\n+    fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n+        self.has_no_std_attr = is_no_std_crate(cx);\n     }\n \n     fn check_expr_post(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {"}, {"sha": "1d5a6e7fcc53c19c47d517325c5ea99013240fd4", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -1207,11 +1207,11 @@ fn find_matches_sugg(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], expr\n         if b0 != b1;\n         let if_guard = &b0_arms[0].guard;\n         if if_guard.is_none() || b0_arms.len() == 1;\n-        if b0_arms[0].attrs.is_empty();\n+        if cx.tcx.hir().attrs(b0_arms[0].hir_id).is_empty();\n         if b0_arms[1..].iter()\n             .all(|arm| {\n                 find_bool_lit(&arm.body.kind, desugared).map_or(false, |b| b == b0) &&\n-                arm.guard.is_none() && arm.attrs.is_empty()\n+                arm.guard.is_none() && cx.tcx.hir().attrs(arm.hir_id).is_empty()\n             });\n         then {\n             // The suggestion may be incorrect, because some arms can have `cfg` attributes"}, {"sha": "71d65a01d3e85131d08abf6105d7986b460565c4", "filename": "clippy_lints/src/methods/iter_count.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -14,11 +14,11 @@ pub(crate) fn lints<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, iter_args: &'\n         \"slice\"\n     } else if is_type_diagnostic_item(cx, ty, sym::vec_type) {\n         \"Vec\"\n-    } else if is_type_diagnostic_item(cx, ty, sym!(vecdeque_type)) {\n+    } else if is_type_diagnostic_item(cx, ty, sym::vecdeque_type) {\n         \"VecDeque\"\n-    } else if is_type_diagnostic_item(cx, ty, sym!(hashset_type)) {\n+    } else if is_type_diagnostic_item(cx, ty, sym::hashset_type) {\n         \"HashSet\"\n-    } else if is_type_diagnostic_item(cx, ty, sym!(hashmap_type)) {\n+    } else if is_type_diagnostic_item(cx, ty, sym::hashmap_type) {\n         \"HashMap\"\n     } else if match_type(cx, ty, &paths::BTREEMAP) {\n         \"BTreeMap\""}, {"sha": "e8af9b3d7d912d1ead1ea1758cd6d8e45801c6d5", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -26,7 +26,7 @@ use rustc_middle::ty::{self, TraitRef, Ty, TyS};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::{sym, SymbolStr};\n+use rustc_span::symbol::{sym, Symbol, SymbolStr};\n use rustc_typeck::hir_ty_to_ty;\n \n use crate::consts::{constant, Constant};\n@@ -2675,7 +2675,7 @@ fn lint_iter_nth<'tcx>(\n         \"slice\"\n     } else if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&iter_args[0]), sym::vec_type) {\n         \"Vec\"\n-    } else if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&iter_args[0]), sym!(vecdeque_type)) {\n+    } else if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&iter_args[0]), sym::vecdeque_type) {\n         \"VecDeque\"\n     } else {\n         let nth_args = nth_and_iter_args[0];\n@@ -2729,10 +2729,10 @@ fn lint_get_unwrap<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, get_args:\n     } else if is_type_diagnostic_item(cx, expr_ty, sym::vec_type) {\n         needs_ref = get_args_str.parse::<usize>().is_ok();\n         \"Vec\"\n-    } else if is_type_diagnostic_item(cx, expr_ty, sym!(vecdeque_type)) {\n+    } else if is_type_diagnostic_item(cx, expr_ty, sym::vecdeque_type) {\n         needs_ref = get_args_str.parse::<usize>().is_ok();\n         \"VecDeque\"\n-    } else if !is_mut && is_type_diagnostic_item(cx, expr_ty, sym!(hashmap_type)) {\n+    } else if !is_mut && is_type_diagnostic_item(cx, expr_ty, sym::hashmap_type) {\n         needs_ref = true;\n         \"HashMap\"\n     } else if !is_mut && match_type(cx, expr_ty, &paths::BTREEMAP) {\n@@ -3696,7 +3696,7 @@ fn lint_asref(cx: &LateContext<'_>, expr: &hir::Expr<'_>, call_name: &str, as_re\n     }\n }\n \n-fn ty_has_iter_method(cx: &LateContext<'_>, self_ref_ty: Ty<'_>) -> Option<(&'static str, &'static str)> {\n+fn ty_has_iter_method(cx: &LateContext<'_>, self_ref_ty: Ty<'_>) -> Option<(Symbol, &'static str)> {\n     has_iter_method(cx, self_ref_ty).map(|ty_name| {\n         let mutbl = match self_ref_ty.kind() {\n             ty::Ref(_, _, mutbl) => mutbl,"}, {"sha": "acdc245456b5a1a508ce480e972b861bc44bf985", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -279,7 +279,7 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n         span: Span,\n         _: HirId,\n     ) {\n-        if let FnKind::Closure(_) = k {\n+        if let FnKind::Closure = k {\n             // Does not apply to closures\n             return;\n         }"}, {"sha": "b0998a80128cef12d73d13f2136b7c64e5672fd0", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -133,7 +133,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n                     return;\n                 }\n             },\n-            FnKind::Closure(..) => return,\n+            FnKind::Closure => return,\n         }\n \n         let mir = cx.tcx.optimized_mir(def_id);"}, {"sha": "6ec4c38d0f9ccfeac5afc4c86d0a6fc3c46bba37", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -127,7 +127,8 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n     }\n \n     fn check_crate(&mut self, cx: &LateContext<'tcx>, krate: &'tcx hir::Crate<'_>) {\n-        self.check_missing_docs_attrs(cx, &krate.item.attrs, krate.item.span, \"the\", \"crate\");\n+        let attrs = cx.tcx.hir().attrs(hir::CRATE_HIR_ID);\n+        self.check_missing_docs_attrs(cx, attrs, krate.item.span, \"the\", \"crate\");\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, it: &'tcx hir::Item<'_>) {\n@@ -160,13 +161,15 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n         let (article, desc) = cx.tcx.article_and_description(it.def_id.to_def_id());\n \n-        self.check_missing_docs_attrs(cx, &it.attrs, it.span, article, desc);\n+        let attrs = cx.tcx.hir().attrs(it.hir_id());\n+        self.check_missing_docs_attrs(cx, attrs, it.span, article, desc);\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, trait_item: &'tcx hir::TraitItem<'_>) {\n         let (article, desc) = cx.tcx.article_and_description(trait_item.def_id.to_def_id());\n \n-        self.check_missing_docs_attrs(cx, &trait_item.attrs, trait_item.span, article, desc);\n+        let attrs = cx.tcx.hir().attrs(trait_item.hir_id());\n+        self.check_missing_docs_attrs(cx, attrs, trait_item.span, article, desc);\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx hir::ImplItem<'_>) {\n@@ -181,16 +184,19 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n         }\n \n         let (article, desc) = cx.tcx.article_and_description(impl_item.def_id.to_def_id());\n-        self.check_missing_docs_attrs(cx, &impl_item.attrs, impl_item.span, article, desc);\n+        let attrs = cx.tcx.hir().attrs(impl_item.hir_id());\n+        self.check_missing_docs_attrs(cx, attrs, impl_item.span, article, desc);\n     }\n \n     fn check_struct_field(&mut self, cx: &LateContext<'tcx>, sf: &'tcx hir::StructField<'_>) {\n         if !sf.is_positional() {\n-            self.check_missing_docs_attrs(cx, &sf.attrs, sf.span, \"a\", \"struct field\");\n+            let attrs = cx.tcx.hir().attrs(sf.hir_id);\n+            self.check_missing_docs_attrs(cx, attrs, sf.span, \"a\", \"struct field\");\n         }\n     }\n \n     fn check_variant(&mut self, cx: &LateContext<'tcx>, v: &'tcx hir::Variant<'_>) {\n-        self.check_missing_docs_attrs(cx, &v.attrs, v.span, \"a\", \"variant\");\n+        let attrs = cx.tcx.hir().attrs(v.id);\n+        self.check_missing_docs_attrs(cx, attrs, v.span, \"a\", \"variant\");\n     }\n }"}, {"sha": "da59c820999d9e4786e190bfc1de3cde1c9b202e", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -93,7 +93,8 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n         match it.kind {\n             hir::ItemKind::Fn(..) => {\n                 let desc = \"a function\";\n-                check_missing_inline_attrs(cx, &it.attrs, it.span, desc);\n+                let attrs = cx.tcx.hir().attrs(it.hir_id());\n+                check_missing_inline_attrs(cx, attrs, it.span, desc);\n             },\n             hir::ItemKind::Trait(ref _is_auto, ref _unsafe, ref _generics, ref _bounds, trait_items) => {\n                 // note: we need to check if the trait is exported so we can't use\n@@ -108,7 +109,8 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n                                 // an impl is not provided\n                                 let desc = \"a default trait method\";\n                                 let item = cx.tcx.hir().trait_item(tit.id);\n-                                check_missing_inline_attrs(cx, &item.attrs, item.span, desc);\n+                                let attrs = cx.tcx.hir().attrs(item.hir_id());\n+                                check_missing_inline_attrs(cx, attrs, item.span, desc);\n                             }\n                         },\n                     }\n@@ -160,6 +162,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n             }\n         }\n \n-        check_missing_inline_attrs(cx, &impl_item.attrs, impl_item.span, desc);\n+        let attrs = cx.tcx.hir().attrs(impl_item.hir_id());\n+        check_missing_inline_attrs(cx, attrs, impl_item.span, desc);\n     }\n }"}, {"sha": "1aadcfd87b60f73a1dc44626adc30300cae35d93", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -115,8 +115,9 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessBorrow {\n         }\n     }\n \n-    fn check_item(&mut self, _: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        if is_automatically_derived(item.attrs) {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n+        let attrs = cx.tcx.hir().attrs(item.hir_id());\n+        if is_automatically_derived(attrs) {\n             debug_assert!(self.derived_item.is_none());\n             self.derived_item = Some(item.def_id);\n         }"}, {"sha": "cac4b2075114ac812c0376555b8cd0cad770c1ee", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -80,13 +80,14 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n         }\n \n         match kind {\n-            FnKind::ItemFn(.., header, _, attrs) => {\n+            FnKind::ItemFn(.., header, _) => {\n+                let attrs = cx.tcx.hir().attrs(hir_id);\n                 if header.abi != Abi::Rust || requires_exact_signature(attrs) {\n                     return;\n                 }\n             },\n             FnKind::Method(..) => (),\n-            FnKind::Closure(..) => return,\n+            FnKind::Closure => return,\n         }\n \n         // Exclude non-inherent impls"}, {"sha": "207423a18614927f30960ba847b944170fbca91e", "filename": "clippy_lints/src/panic_in_result_fn.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -43,9 +43,7 @@ impl<'tcx> LateLintPass<'tcx> for PanicInResultFn {\n         span: Span,\n         hir_id: hir::HirId,\n     ) {\n-        if !matches!(fn_kind, FnKind::Closure(_))\n-            && is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym::result_type)\n-        {\n+        if !matches!(fn_kind, FnKind::Closure) && is_type_diagnostic_item(cx, return_ty(cx, hir_id), sym::result_type) {\n             lint_impl_body(cx, span, body);\n         }\n     }"}, {"sha": "aca1ed5ca6563144b4e3e9fc3a925f816a05ffd9", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -35,7 +35,8 @@ impl<'tcx> LateLintPass<'tcx> for PartialEqNeImpl {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         if_chain! {\n             if let ItemKind::Impl(Impl { of_trait: Some(ref trait_ref), items: impl_items, .. }) = item.kind;\n-            if !is_automatically_derived(&*item.attrs);\n+            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            if !is_automatically_derived(attrs);\n             if let Some(eq_trait) = cx.tcx.lang_items().eq_trait();\n             if trait_ref.path.res.def_id() == eq_trait;\n             then {"}, {"sha": "ff700aa51460789cc66d0aa7779ce65a24ec0cb2", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -224,10 +224,11 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n         }\n \n         match kind {\n-            FnKind::ItemFn(.., header, _, attrs) => {\n+            FnKind::ItemFn(.., header, _) => {\n                 if header.abi != Abi::Rust {\n                     return;\n                 }\n+                let attrs = cx.tcx.hir().attrs(hir_id);\n                 for a in attrs {\n                     if let Some(meta_items) = a.meta_item_list() {\n                         if a.has_name(sym::proc_macro_derive)\n@@ -239,7 +240,7 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n                 }\n             },\n             FnKind::Method(..) => (),\n-            FnKind::Closure(..) => return,\n+            FnKind::Closure => return,\n         }\n \n         // Exclude non-inherent impls"}, {"sha": "c57e1d0ba77b7977474d0d6aa82dd5a424bb2bb3", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -584,7 +584,7 @@ fn rvalue_locals(rvalue: &mir::Rvalue<'_>, mut visit: impl FnMut(mir::Local)) {\n     match rvalue {\n         Use(op) | Repeat(op, _) | Cast(_, op, _) | UnaryOp(_, op) => visit_op(op),\n         Aggregate(_, ops) => ops.iter().for_each(visit_op),\n-        BinaryOp(_, lhs, rhs) | CheckedBinaryOp(_, lhs, rhs) => {\n+        BinaryOp(_, box (lhs, rhs)) | CheckedBinaryOp(_, box (lhs, rhs)) => {\n             visit_op(lhs);\n             visit_op(rhs);\n         },"}, {"sha": "40c0f1f45895ba0af5ed1341e12d21265bc6f637", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -81,7 +81,7 @@ impl<'tcx> LateLintPass<'tcx> for Return {\n             if let Some(stmt) = block.stmts.iter().last();\n             if let StmtKind::Local(local) = &stmt.kind;\n             if local.ty.is_none();\n-            if local.attrs.is_empty();\n+            if cx.tcx.hir().attrs(local.hir_id).is_empty();\n             if let Some(initexpr) = &local.init;\n             if let PatKind::Binding(.., ident, _) = local.pat.kind;\n             if let ExprKind::Path(qpath) = &retexpr.kind;\n@@ -131,7 +131,7 @@ impl<'tcx> LateLintPass<'tcx> for Return {\n         _: HirId,\n     ) {\n         match kind {\n-            FnKind::Closure(_) => {\n+            FnKind::Closure => {\n                 // when returning without value in closure, replace this `return`\n                 // with an empty block to prevent invalid suggestion (see #6501)\n                 let replacement = if let ExprKind::Ret(None) = &body.value.kind {\n@@ -177,7 +177,8 @@ fn check_final_expr<'tcx>(\n         // simple return is always \"bad\"\n         ExprKind::Ret(ref inner) => {\n             // allow `#[cfg(a)] return a; #[cfg(b)] return b;`\n-            if !expr.attrs.iter().any(attr_is_cfg) {\n+            let attrs = cx.tcx.hir().attrs(expr.hir_id);\n+            if !attrs.iter().any(attr_is_cfg) {\n                 let borrows = inner.map_or(false, |inner| last_statement_borrows(cx, inner));\n                 if !borrows {\n                     emit_return_lint("}, {"sha": "9d8a0c248334f582af850002b48f112be4447374", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -199,7 +199,7 @@ fn check_for_slice<'a>(cx: &LateContext<'_>, lhs1: &'a Expr<'_>, lhs2: &'a Expr<\n                 if matches!(ty.kind(), ty::Slice(_))\n                     || matches!(ty.kind(), ty::Array(_, _))\n                     || is_type_diagnostic_item(cx, ty, sym::vec_type)\n-                    || is_type_diagnostic_item(cx, ty, sym!(vecdeque_type))\n+                    || is_type_diagnostic_item(cx, ty, sym::vecdeque_type)\n                 {\n                     return Slice::Swappable(lhs1, idx1, idx2);\n                 }"}, {"sha": "13da768b0ca3e8ec6d467da4917d81279f745d80", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -1516,14 +1516,14 @@ impl<'tcx> ImplicitHasherType<'tcx> {\n \n             let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n \n-            if is_type_diagnostic_item(cx, ty, sym!(hashmap_type)) && params_len == 2 {\n+            if is_type_diagnostic_item(cx, ty, sym::hashmap_type) && params_len == 2 {\n                 Some(ImplicitHasherType::HashMap(\n                     hir_ty.span,\n                     ty,\n                     snippet(cx, params[0].span, \"K\"),\n                     snippet(cx, params[1].span, \"V\"),\n                 ))\n-            } else if is_type_diagnostic_item(cx, ty, sym!(hashset_type)) && params_len == 1 {\n+            } else if is_type_diagnostic_item(cx, ty, sym::hashset_type) && params_len == 1 {\n                 Some(ImplicitHasherType::HashSet(\n                     hir_ty.span,\n                     ty,"}, {"sha": "8e076397c119a9a25f94f16734d979f6a593790d", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -66,12 +66,12 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n     ) {\n         // Abort if public function/method or closure.\n         match fn_kind {\n-            FnKind::ItemFn(.., visibility, _) | FnKind::Method(.., Some(visibility), _) => {\n+            FnKind::ItemFn(.., visibility) | FnKind::Method(.., Some(visibility)) => {\n                 if visibility.node.is_pub() {\n                     return;\n                 }\n             },\n-            FnKind::Closure(..) => return,\n+            FnKind::Closure => return,\n             _ => (),\n         }\n "}, {"sha": "3dd190ba440186c2486d6b71151102ea43df1cb5", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -2,15 +2,14 @@\n //! to generate a clippy lint detecting said code automatically.\n \n use crate::utils::get_attr;\n-use rustc_ast::ast::{Attribute, LitFloatType, LitKind};\n+use rustc_ast::ast::{LitFloatType, LitKind};\n use rustc_ast::walk_list;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_hir::{BindingAnnotation, Block, Expr, ExprKind, Pat, PatKind, QPath, Stmt, StmtKind, TyKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n-use rustc_session::Session;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -66,7 +65,7 @@ fn done() {\n \n impl<'tcx> LateLintPass<'tcx> for Author {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n-        if !has_attr(cx.sess(), &item.attrs) {\n+        if !has_attr(cx, item.hir_id()) {\n             return;\n         }\n         prelude();\n@@ -75,7 +74,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'_>) {\n-        if !has_attr(cx.sess(), &item.attrs) {\n+        if !has_attr(cx, item.hir_id()) {\n             return;\n         }\n         prelude();\n@@ -84,7 +83,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::TraitItem<'_>) {\n-        if !has_attr(cx.sess(), &item.attrs) {\n+        if !has_attr(cx, item.hir_id()) {\n             return;\n         }\n         prelude();\n@@ -93,7 +92,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_variant(&mut self, cx: &LateContext<'tcx>, var: &'tcx hir::Variant<'_>) {\n-        if !has_attr(cx.sess(), &var.attrs) {\n+        if !has_attr(cx, var.id) {\n             return;\n         }\n         prelude();\n@@ -103,7 +102,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_struct_field(&mut self, cx: &LateContext<'tcx>, field: &'tcx hir::StructField<'_>) {\n-        if !has_attr(cx.sess(), &field.attrs) {\n+        if !has_attr(cx, field.hir_id) {\n             return;\n         }\n         prelude();\n@@ -112,7 +111,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n-        if !has_attr(cx.sess(), &expr.attrs) {\n+        if !has_attr(cx, expr.hir_id) {\n             return;\n         }\n         prelude();\n@@ -121,7 +120,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_arm(&mut self, cx: &LateContext<'tcx>, arm: &'tcx hir::Arm<'_>) {\n-        if !has_attr(cx.sess(), &arm.attrs) {\n+        if !has_attr(cx, arm.hir_id) {\n             return;\n         }\n         prelude();\n@@ -130,7 +129,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx hir::Stmt<'_>) {\n-        if !has_attr(cx.sess(), stmt.kind.attrs(|id| cx.tcx.hir().item(id))) {\n+        if !has_attr(cx, stmt.hir_id) {\n             return;\n         }\n         prelude();\n@@ -139,7 +138,7 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n     }\n \n     fn check_foreign_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ForeignItem<'_>) {\n-        if !has_attr(cx.sess(), &item.attrs) {\n+        if !has_attr(cx, item.hir_id()) {\n             return;\n         }\n         prelude();\n@@ -719,8 +718,9 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n     }\n }\n \n-fn has_attr(sess: &Session, attrs: &[Attribute]) -> bool {\n-    get_attr(sess, attrs, \"author\").count() > 0\n+fn has_attr(cx: &LateContext<'_>, hir_id: hir::HirId) -> bool {\n+    let attrs = cx.tcx.hir().attrs(hir_id);\n+    get_attr(cx.sess(), attrs, \"author\").count() > 0\n }\n \n #[must_use]"}, {"sha": "9e3973e1d51fcc1b76128a5836236b23b41d6fb7", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -33,14 +33,14 @@ declare_lint_pass!(DeepCodeInspector => [DEEP_CODE_INSPECTION]);\n \n impl<'tcx> LateLintPass<'tcx> for DeepCodeInspector {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n-        if !has_attr(cx.sess(), &item.attrs) {\n+        if !has_attr(cx.sess(), cx.tcx.hir().attrs(item.hir_id())) {\n             return;\n         }\n         print_item(cx, item);\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'_>) {\n-        if !has_attr(cx.sess(), &item.attrs) {\n+        if !has_attr(cx.sess(), cx.tcx.hir().attrs(item.hir_id())) {\n             return;\n         }\n         println!(\"impl item `{}`\", item.ident.name);\n@@ -89,14 +89,14 @@ impl<'tcx> LateLintPass<'tcx> for DeepCodeInspector {\n     //\n \n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n-        if !has_attr(cx.sess(), &expr.attrs) {\n+        if !has_attr(cx.sess(), cx.tcx.hir().attrs(expr.hir_id)) {\n             return;\n         }\n         print_expr(cx, expr, 0);\n     }\n \n     fn check_arm(&mut self, cx: &LateContext<'tcx>, arm: &'tcx hir::Arm<'_>) {\n-        if !has_attr(cx.sess(), &arm.attrs) {\n+        if !has_attr(cx.sess(), cx.tcx.hir().attrs(arm.hir_id)) {\n             return;\n         }\n         print_pat(cx, &arm.pat, 1);\n@@ -109,7 +109,7 @@ impl<'tcx> LateLintPass<'tcx> for DeepCodeInspector {\n     }\n \n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx hir::Stmt<'_>) {\n-        if !has_attr(cx.sess(), stmt.kind.attrs(|id| cx.tcx.hir().item(id))) {\n+        if !has_attr(cx.sess(), cx.tcx.hir().attrs(stmt.hir_id)) {\n             return;\n         }\n         match stmt.kind {"}, {"sha": "adf7077e650fd301e2500b1f21bf1ad92c7583ac", "filename": "clippy_lints/src/zero_sized_map_values.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_sized_map_values.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -3,6 +3,7 @@ use rustc_hir::{self as hir, HirId, ItemKind, Node};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{Adt, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n use rustc_target::abi::LayoutOf as _;\n use rustc_typeck::hir_ty_to_ty;\n \n@@ -47,7 +48,7 @@ impl LateLintPass<'_> for ZeroSizedMapValues {\n             if !hir_ty.span.from_expansion();\n             if !in_trait_impl(cx, hir_ty.hir_id);\n             let ty = ty_from_hir_ty(cx, hir_ty);\n-            if is_type_diagnostic_item(cx, ty, sym!(hashmap_type)) || match_type(cx, ty, &paths::BTREEMAP);\n+            if is_type_diagnostic_item(cx, ty, sym::hashmap_type) || match_type(cx, ty, &paths::BTREEMAP);\n             if let Adt(_, ref substs) = ty.kind();\n             let ty = substs.type_at(1);\n             // Do this to prevent `layout_of` crashing, being unable to fully normalize `ty`."}, {"sha": "8013c4e4fcbe417b369ea1de6be89036ad69e620", "filename": "clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -9,7 +9,7 @@\n //!  - or-fun-call\n //!  - option-if-let-else\n \n-use crate::{is_ctor_or_promotable_const_function, is_type_diagnostic_item, match_type, paths};\n+use crate::{is_ctor_or_promotable_const_function, is_type_diagnostic_item};\n use rustc_hir::def::{DefKind, Res};\n \n use rustc_hir::intravisit;\n@@ -18,6 +18,7 @@ use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_hir::{Block, Expr, ExprKind, Path, QPath};\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n+use rustc_span::sym;\n \n /// Is the expr pure (is it free from side-effects)?\n /// This function is named so to stress that it isn't exhaustive and returns FNs.\n@@ -99,8 +100,8 @@ fn identify_some_potentially_expensive_patterns<'tcx>(cx: &LateContext<'tcx>, ex\n                 ExprKind::Call(..) => !is_ctor_or_promotable_const_function(self.cx, expr),\n                 ExprKind::Index(obj, _) => {\n                     let ty = self.cx.typeck_results().expr_ty(obj);\n-                    is_type_diagnostic_item(self.cx, ty, sym!(hashmap_type))\n-                        || match_type(self.cx, ty, &paths::BTREEMAP)\n+                    is_type_diagnostic_item(self.cx, ty, sym::hashmap_type)\n+                        || is_type_diagnostic_item(self.cx, ty, sym::BTreeMap)\n                 },\n                 ExprKind::MethodCall(..) => true,\n                 _ => false,"}, {"sha": "e17af49f6185659751eee08f8b06e6033ad43b8b", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -63,9 +63,9 @@ use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::Node;\n use rustc_hir::{\n-    def, Arm, Block, Body, Constness, Crate, Expr, ExprKind, FnDecl, GenericArgs, HirId, Impl, ImplItem, ImplItemKind,\n-    Item, ItemKind, LangItem, MatchSource, Param, Pat, PatKind, Path, PathSegment, QPath, TraitItem, TraitItemKind,\n-    TraitRef, TyKind, Unsafety,\n+    def, Arm, Block, Body, Constness, Expr, ExprKind, FnDecl, GenericArgs, HirId, Impl, ImplItem, ImplItemKind, Item,\n+    ItemKind, LangItem, MatchSource, Param, Pat, PatKind, Path, PathSegment, QPath, TraitItem, TraitItemKind, TraitRef,\n+    TyKind, Unsafety,\n };\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n@@ -1431,24 +1431,24 @@ pub fn any_parent_is_automatically_derived(tcx: TyCtxt<'_>, node: HirId) -> bool\n }\n \n /// Returns true if ty has `iter` or `iter_mut` methods\n-pub fn has_iter_method(cx: &LateContext<'_>, probably_ref_ty: Ty<'_>) -> Option<&'static str> {\n+pub fn has_iter_method(cx: &LateContext<'_>, probably_ref_ty: Ty<'_>) -> Option<Symbol> {\n     // FIXME: instead of this hard-coded list, we should check if `<adt>::iter`\n     // exists and has the desired signature. Unfortunately FnCtxt is not exported\n     // so we can't use its `lookup_method` method.\n-    let into_iter_collections: [&[&str]; 13] = [\n-        &paths::VEC,\n-        &paths::OPTION,\n-        &paths::RESULT,\n-        &paths::BTREESET,\n-        &paths::BTREEMAP,\n-        &paths::VEC_DEQUE,\n-        &paths::LINKED_LIST,\n-        &paths::BINARY_HEAP,\n-        &paths::HASHSET,\n-        &paths::HASHMAP,\n-        &paths::PATH_BUF,\n-        &paths::PATH,\n-        &paths::RECEIVER,\n+    let into_iter_collections: &[Symbol] = &[\n+        sym::vec_type,\n+        sym::option_type,\n+        sym::result_type,\n+        sym::BTreeMap,\n+        sym::BTreeSet,\n+        sym::vecdeque_type,\n+        sym::LinkedList,\n+        sym::BinaryHeap,\n+        sym::hashset_type,\n+        sym::hashmap_type,\n+        sym::PathBuf,\n+        sym::Path,\n+        sym::Receiver,\n     ];\n \n     let ty_to_check = match probably_ref_ty.kind() {\n@@ -1457,15 +1457,15 @@ pub fn has_iter_method(cx: &LateContext<'_>, probably_ref_ty: Ty<'_>) -> Option<\n     };\n \n     let def_id = match ty_to_check.kind() {\n-        ty::Array(..) => return Some(\"array\"),\n-        ty::Slice(..) => return Some(\"slice\"),\n+        ty::Array(..) => return Some(sym::array),\n+        ty::Slice(..) => return Some(sym::slice),\n         ty::Adt(adt, _) => adt.did,\n         _ => return None,\n     };\n \n-    for path in &into_iter_collections {\n-        if match_def_path(cx, def_id, path) {\n-            return Some(*path.last().unwrap());\n+    for &name in into_iter_collections {\n+        if cx.tcx.is_diagnostic_item(name, def_id) {\n+            return Some(cx.tcx.item_name(def_id));\n         }\n     }\n     None\n@@ -1682,8 +1682,8 @@ pub fn is_must_use_func_call(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     did.map_or(false, |did| must_use_attr(&cx.tcx.get_attrs(did)).is_some())\n }\n \n-pub fn is_no_std_crate(krate: &Crate<'_>) -> bool {\n-    krate.item.attrs.iter().any(|attr| {\n+pub fn is_no_std_crate(cx: &LateContext<'_>) -> bool {\n+    cx.tcx.hir().attrs(hir::CRATE_HIR_ID).iter().any(|attr| {\n         if let ast::AttrKind::Normal(ref attr, _) = attr.kind {\n             attr.path == sym::no_std\n         } else {"}, {"sha": "560614efc749e1b1fd29102de9a7322d6284d31b", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -93,7 +93,6 @@ pub(super) const PANIC_ANY: [&str; 3] = [\"std\", \"panic\", \"panic_any\"];\n pub const PARKING_LOT_MUTEX_GUARD: [&str; 2] = [\"parking_lot\", \"MutexGuard\"];\n pub const PARKING_LOT_RWLOCK_READ_GUARD: [&str; 2] = [\"parking_lot\", \"RwLockReadGuard\"];\n pub const PARKING_LOT_RWLOCK_WRITE_GUARD: [&str; 2] = [\"parking_lot\", \"RwLockWriteGuard\"];\n-pub const PATH: [&str; 3] = [\"std\", \"path\", \"Path\"];\n pub const PATH_BUF: [&str; 3] = [\"std\", \"path\", \"PathBuf\"];\n pub const PATH_BUF_AS_PATH: [&str; 4] = [\"std\", \"path\", \"PathBuf\", \"as_path\"];\n pub const PATH_TO_PATH_BUF: [&str; 4] = [\"std\", \"path\", \"Path\", \"to_path_buf\"];\n@@ -109,7 +108,6 @@ pub const PTR_SWAP_NONOVERLAPPING: [&str; 3] = [\"core\", \"ptr\", \"swap_nonoverlapp\n pub const PUSH_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"push_str\"];\n pub const RANGE_ARGUMENT_TRAIT: [&str; 3] = [\"core\", \"ops\", \"RangeBounds\"];\n pub const RC_PTR_EQ: [&str; 4] = [\"alloc\", \"rc\", \"Rc\", \"ptr_eq\"];\n-pub const RECEIVER: [&str; 4] = [\"std\", \"sync\", \"mpsc\", \"Receiver\"];\n pub const REFCELL_REF: [&str; 3] = [\"core\", \"cell\", \"Ref\"];\n pub const REFCELL_REFMUT: [&str; 3] = [\"core\", \"cell\", \"RefMut\"];\n pub const REGEX_BUILDER_NEW: [&str; 5] = [\"regex\", \"re_builder\", \"unicode\", \"RegexBuilder\", \"new\"];"}, {"sha": "1391f7505e27cc3655ec67b9b8ad7661ce322c4d", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -172,7 +172,7 @@ fn check_rvalue(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId, rvalue: &Rv\n             }\n         },\n         // binops are fine on integers\n-        Rvalue::BinaryOp(_, lhs, rhs) | Rvalue::CheckedBinaryOp(_, lhs, rhs) => {\n+        Rvalue::BinaryOp(_, box (lhs, rhs)) | Rvalue::CheckedBinaryOp(_, box (lhs, rhs)) => {\n             check_operand(tcx, lhs, span, body)?;\n             check_operand(tcx, rhs, span, body)?;\n             let ty = lhs.ty(body, tcx);\n@@ -210,14 +210,21 @@ fn check_statement(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId, statemen\n         StatementKind::Assign(box (place, rval)) => {\n             check_place(tcx, *place, span, body)?;\n             check_rvalue(tcx, body, def_id, rval, span)\n-        },\n+        }\n \n         StatementKind::FakeRead(_, place) |\n         // just an assignment\n         StatementKind::SetDiscriminant { place, .. } => check_place(tcx, **place, span, body),\n \n         StatementKind::LlvmInlineAsm { .. } => Err((span, \"cannot use inline assembly in const fn\".into())),\n \n+        StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping{\n+          dst, src, count,\n+        }) => {\n+          check_operand(tcx, dst, span, body)?;\n+          check_operand(tcx, src, span, body)?;\n+          check_operand(tcx, count, span, body)\n+        }\n         // These are all NOPs\n         StatementKind::StorageLive(_)\n         | StatementKind::StorageDead(_)"}, {"sha": "c52a7f2e74321884b633f1e0b89f3932fc3ee83f", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-02-25\"\n+channel = \"nightly-2021-03-11\"\n components = [\"llvm-tools-preview\", \"rustc-dev\", \"rust-src\"]"}, {"sha": "30272c9b8006870747e1ce53704ce7c2f4248e4c", "filename": "src/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -120,7 +120,7 @@ impl rustc_driver::Callbacks for ClippyCallbacks {\n         // run on the unoptimized MIR. On the other hand this results in some false negatives. If\n         // MIR passes can be enabled / disabled separately, we should figure out, what passes to\n         // use for Clippy.\n-        config.opts.debugging_opts.mir_opt_level = 0;\n+        config.opts.debugging_opts.mir_opt_level = Some(0);\n     }\n }\n "}, {"sha": "1eaec4a50a6a6396f51a1d15969be3cd580c3190", "filename": "tests/versioncheck.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99afc6e6ac2ce874c4fed32c083f1e160f533015/tests%2Fversioncheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99afc6e6ac2ce874c4fed32c083f1e160f533015/tests%2Fversioncheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fversioncheck.rs?ref=99afc6e6ac2ce874c4fed32c083f1e160f533015", "patch": "@@ -3,6 +3,12 @@ use rustc_tools_util::VersionInfo;\n \n #[test]\n fn check_that_clippy_lints_and_clippy_utils_have_the_same_version_as_clippy() {\n+    // do not run this test inside the upstream rustc repo:\n+    // https://github.com/rust-lang/rust-clippy/issues/6683\n+    if option_env!(\"RUSTC_TEST_SUITE\").is_some() {\n+        return;\n+    }\n+\n     let clippy_meta = cargo_metadata::MetadataCommand::new()\n         .no_deps()\n         .exec()"}]}